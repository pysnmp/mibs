#
# PySNMP MIB module RS-XX9-DVBT2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rs/RS-XX9-DVBT2-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 12:20:38 2024
# On host fv-az573-178 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
commonNotificationAlarmClass, = mibBuilder.importSymbols("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass")
rsXx9DvbT2, rsXx9MibModule = mibBuilder.importSymbols("RS-XX9-SMI-MIB", "rsXx9DvbT2", "rsXx9MibModule")
NotificationState, SwitchOnOff, NotificationMask, IndexAB, IndexTransmitter, NotificationPriority = mibBuilder.importSymbols("RS-XX9-TC-MIB", "NotificationState", "SwitchOnOff", "NotificationMask", "IndexAB", "IndexTransmitter", "NotificationPriority")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, Bits, Integer32, Counter32, NotificationType, ModuleIdentity, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, IpAddress, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "Integer32", "Counter32", "NotificationType", "ModuleIdentity", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "IpAddress", "MibIdentifier", "ObjectIdentity")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
rsXx9Dvbt2MibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 1, 216, 5))
rsXx9Dvbt2MibModule.setRevisions(('2015-08-25 11:00', '2014-12-22 16:00', '2014-12-03 11:00', '2014-11-03 16:00', '2014-05-15 15:00', '2014-01-14 17:00', '2011-09-12 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsXx9Dvbt2MibModule.setRevisionsDescriptions(('obsoleted dvbt2T2MiTimeInterleaverBuffer\n                added notifications dvbt2CompositeSummary, dvbt2CompositeProfiles, dvbt2CompositeFrameLength, dvbt2SubIaState, dvbt2SubConfigurationValid, dvbt2SubConfigurationSupported, dvbt2SubConfigurationMatched\n                added composite(3) for multiProfile to dvbt2ConfigurationT2MiInterface\n                added dvbt2CoderSub tree\n                ', 'updated description texts\n                ', 'added dvbt2T2MiTimeInterleaverBuffer', 'obsoleted dvbt2OutPlpFecBlocks, dvbt2OutPlpISSY\n                ', 'added dvbt2StDejitterBufDelay, dvbt2StResidualDelay\n                added dvbt2StConfigurationMsg', 'added T2ConfigAdaption\n                added TsMiDejitterBufDelay\n                unobsoleted dvbt2LocalizationPaprTrSource and dvbt2OutLocalizationPaprTrSource', 'Preliminary version.',))
if mibBuilder.loadTexts: rsXx9Dvbt2MibModule.setLastUpdated('201508251100Z')
if mibBuilder.loadTexts: rsXx9Dvbt2MibModule.setOrganization('Rohde&Schwarz GmbH & Co. KG')
if mibBuilder.loadTexts: rsXx9Dvbt2MibModule.setContactInfo('Rohde & Schwarz GmbH & Co. KG\n                Broadcasting Division\n                \n                Muehldorfstrasse 15\n                81671 Munich\n                Germany\n                \n                customersupport@rohde-schwarz.com')
if mibBuilder.loadTexts: rsXx9Dvbt2MibModule.setDescription('This MIB defines DVB-T2 specific objects\n                of XX9000 transmitting systems from Rohde & Schwarz.\n                \n                The following MIBs are related to this:\n                - RS-COMMON-MIB         - mandatory for this MIB.\n                - RS-XX9-SMI-MIB        - mandatory for this MIB.\n                - RS-XX9-TC-MIB         - mandatory for this MIB.\n                - RS-XX9-COMMON-MIB     - mandatory for this MIB.')
class Dvbt2IndividualAddressingSource(TextualConvention, Integer32):
    description = 'dataNotAnnounced(1) - individual addressing information not available\n                viaBroadcast(2)     - all transmitters of the network got the same\n                                      information via broadcast\n                txSpecific(3)       - a special information was given for this TX identifier'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("dataNotAnnounced", 1), ("viaBroadcast", 2), ("txSpecific", 3))

class Dvbt2ChannelBandwidth(TextualConvention, Integer32):
    description = 'mhz1p7(3) -  1.7 MHz\n                mhz5(4)   -  5 MHz\n                mhz6(5)   -  6 MHz\n                mhz7(6)   -  7 MHz\n                mhz8(7)   -  8 MHz'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))
    namedValues = NamedValues(("mhz1p7", 3), ("mhz5", 4), ("mhz6", 5), ("mhz7", 6), ("mhz8", 7))

class Dvbt2PlpType(TextualConvention, Integer32):
    description = 'PLP type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4, 5))
    namedValues = NamedValues(("common", 3), ("dataType1", 4), ("dataType2", 5))

class Dvbt2Modulation(TextualConvention, Integer32):
    description = 'PLP modulation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))
    namedValues = NamedValues(("qpsk", 3), ("qam16", 4), ("qam64", 5), ("qam256", 6))

class Dvbt2CodeRate(TextualConvention, Integer32):
    description = 'PLP code rate.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("oneHalf", 3), ("threeFifth", 4), ("twoThird", 5), ("threeFourth", 6), ("fourFifth", 7), ("fiveSixth", 8), ("oneThird", 9), ("twoFifth", 10))

class Dvbt2FEC(TextualConvention, Integer32):
    description = 'PLP FEC type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4))
    namedValues = NamedValues(("ldpc16K", 3), ("ldpc64K", 4))

class Dvbt2TimeInterleaverType(TextualConvention, Integer32):
    description = 'Type of time-interleaving.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4))
    namedValues = NamedValues(("single", 3), ("multi", 4))

class Dvbt2BasebandMode(TextualConvention, Integer32):
    description = 'highEfficiency(4) - certain normally unused bytes in the data stream\n                are used for data transmission.\n                This mode may not be supported by some devices.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4))
    namedValues = NamedValues(("normal", 3), ("highEfficiency", 4))

class Dvbt2Layer1Modulation(TextualConvention, Integer32):
    description = 'Constellation of the layer 1 post signalling data block.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))
    namedValues = NamedValues(("bpsk", 3), ("qpsk", 4), ("qam16", 5), ("qam64", 6))

class Dvbt2Layer1FEC(TextualConvention, Integer32):
    description = 'Layer 1 FEC used for the layer 1 post signalling data block.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3))
    namedValues = NamedValues(("ldpc16", 3))

class Dvbt2Layer1CodeRate(TextualConvention, Integer32):
    description = 'Coding of the layer 1 post signalling data block.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3))
    namedValues = NamedValues(("oneHalf", 3))

class Dvbt2TransmissionSystem(TextualConvention, Integer32):
    description = 't2Miso(2) is an approach to improve the link throughput using\n                two antennas on transmitter site while using a single receiver antenna.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))
    namedValues = NamedValues(("t2SISO", 3), ("t2MISO", 4), ("nonT2", 5), ("t2SISOlite", 6), ("t2MISOlite", 7))

class Dvbt2FftSize(TextualConvention, Integer32):
    description = 'FFT size.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("k1", 2), ("k2", 3), ("k4", 4), ("k8", 5), ("k16", 6), ("k32", 7))

class Dvbt2GuardInterval(TextualConvention, Integer32):
    description = 'Guard interval of the super-frame.\n                oneDiv32(2)       -> 1/32\n                oneDiv16(3)       -> 1/16\n                oneDiv8(4)        -> 1/8\n                oneDiv4(5)        -> 1/4\n                oneDiv128(6)      -> 1/128\n                nineteenDiv128(7) -> 19/128\n                nineteenDiv256(8) -> 19/256'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("oneDiv32", 2), ("oneDiv16", 3), ("oneDiv8", 4), ("oneDiv4", 5), ("oneDiv128", 6), ("nineteenDiv128", 7), ("nineteenDiv256", 8))

class Dvbt2PilotPattern(TextualConvention, Integer32):
    description = 'The scattered pilot pattern used for the data OFDM symbols.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("pp1", 3), ("pp2", 4), ("pp3", 5), ("pp4", 6), ("pp5", 7), ("pp6", 8), ("pp7", 9), ("pp8", 10))

class Dvbt2PaprReduction(TextualConvention, Integer32):
    description = 'PAPR (Peak to Average Power Ratio) reduction used, if any.\n                ace(4)   - Active Constellation Extension\n                tr(5)    - Tone Reservation\n                aceTr(6) - ACE and TR combined'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))
    namedValues = NamedValues(("none", 3), ("ace", 4), ("tr", 5), ("aceTr", 6))

class Dvbt2CellIdSource(TextualConvention, Integer32):
    description = 'The Cell ID enables the receiver to identify a DVB-T2 cell.\n                manual(1) - from dvbt2LocalizationCellIdManual\n                l1(2)     - from the L1 frame information\n                            of the DVB-T2 gateway stream\n                ia(3)     - from the individual addressing data\n                            of the DVB-T2 gateway stream'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("manual", 1), ("l1", 2), ("ia", 3))

class Dvbt2L1FrequencySource(TextualConvention, Integer32):
    description = 'Source of L1 frequency shift.\n                If a T2-MI interface is used, you usually select l1(2),\n                but for testing manual(1) may be selected.\n                If TS feed is used, only manual(1) is possible.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("manual", 1), ("l1", 2))

class Dvbt2TxDelayOffsetSource(TextualConvention, Integer32):
    description = 'Source for transmitter specific transmitting delay.\n                If a T2-MI interface is used, you may choose:\n                ia(2)  - take from IA parameters\n                off(1) - deactivated\n                If TS feed is used, no choice is possible.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("off", 1), ("ia", 2))

class Dvbt2T2Version(TextualConvention, Integer32):
    description = 'v111(3) - version 1.1.1\n                v121(4) - version 1.2.1\n                v131(5) - version 1.3.1'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4, 5))
    namedValues = NamedValues(("v111", 3), ("v121", 4), ("v131", 5))

class Dvbt2OnOff(TextualConvention, Integer32):
    description = 'On / Off information for certain DVB-T2 values.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 3, 4))
    namedValues = NamedValues(("undefined", 1), ("off", 3), ("on", 4))

rsXx9Dvbt2Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 0))
dvbt2L1State = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 0, 1)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationPriority"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationState"))
if mibBuilder.loadTexts: dvbt2L1State.setStatus('current')
if mibBuilder.loadTexts: dvbt2L1State.setDescription('When using a T2 MI interface this status shows,\n                how the values from the L1 frame information are used:\n                \n                Possible values:\n                undefined(1) \n                off(2)       - L1 frame information values not used\n                fault(3)     - L1 framing is not supported by this software version,\n                               please update the TCE software\n                ok(5)        - L1 frame information values are correct\n                               and are used for modulation\n                \n                Notification class: warning')
dvbt2IaState = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 0, 2)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationPriority"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationState"))
if mibBuilder.loadTexts: dvbt2IaState.setStatus('current')
if mibBuilder.loadTexts: dvbt2IaState.setDescription("Shows usage of the 'individual addressing' parameters\n                of the data stream.\n                \n                Possible values:\n                undefined(1)\n                off(2)       - not used\n                warning(4)   - in use, but not available\n                ok(5)        - in use and available\n                \n                Notification class: warning")
dvbt2ConfigurationValid = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 0, 5)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationPriority"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationState"))
if mibBuilder.loadTexts: dvbt2ConfigurationValid.setStatus('current')
if mibBuilder.loadTexts: dvbt2ConfigurationValid.setDescription('Shows whether the configuration of DVB-T2 parameters is coherent.\n                \n                Possible values:\n                off(2)     - unchecked\n                warning(4) - invalid configuration\n                ok(5)      - valid configuration\n                \n                Notification class: warning')
dvbt2ConfigurationSupported = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 0, 6)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationPriority"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationState"))
if mibBuilder.loadTexts: dvbt2ConfigurationSupported.setStatus('current')
if mibBuilder.loadTexts: dvbt2ConfigurationSupported.setDescription('Indicates whether the selected modualtion mode is \n                supported by this exciter.\n                \n                Possible values:\n                off(2)     - unchecked\n                warning(4) - unsupported configuration\n                ok(5)      - supported configuration\n                \n                Notification class: warning')
dvbt2ConfigurationMatched = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 0, 7)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationPriority"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationState"))
if mibBuilder.loadTexts: dvbt2ConfigurationMatched.setStatus('current')
if mibBuilder.loadTexts: dvbt2ConfigurationMatched.setDescription('Indicates whether the configuration of the channel \n                bandwidth is consistent. If not, an error message is output.\n                \n                Possible values:\n                off(2)     -\n                warning(4) - invalid configuration\n                ok(5)      - valid configuration\n                \n                Notification class: warning')
dvbt2EncoderSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 0, 8)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationPriority"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationState"))
if mibBuilder.loadTexts: dvbt2EncoderSummary.setStatus('current')
if mibBuilder.loadTexts: dvbt2EncoderSummary.setDescription('Encoder summary state.\n                \n                Possible values:\n                off(2)\n                warning(4)\n                ok(5)\n                \n                Notification class: warning')
dvbt2Test = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 0, 9)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationPriority"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationState"))
if mibBuilder.loadTexts: dvbt2Test.setStatus('current')
if mibBuilder.loadTexts: dvbt2Test.setDescription('Possible values:\n                off(2)     - no test signal generation\n                warning(4) - test signal generation is activated\n                \n                Notification class: warning')
dvbt2SupportedPlps = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 0, 10)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationPriority"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationState"))
if mibBuilder.loadTexts: dvbt2SupportedPlps.setStatus('current')
if mibBuilder.loadTexts: dvbt2SupportedPlps.setDescription('\n                Possible values:\n                off(2)\n                warning(4)\n                ok(5)\n                \n                Notification class: warning')
dvbt2SupportedTrIterations = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 0, 11)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationPriority"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationState"))
if mibBuilder.loadTexts: dvbt2SupportedTrIterations.setStatus('current')
if mibBuilder.loadTexts: dvbt2SupportedTrIterations.setDescription('\n                Possible values:\n                off(2)\n                warning(4)\n                ok(5)\n                \n                Notification class: warning')
dvbt2T2MiTimeInterleaverBuffer = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 0, 12)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationPriority"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationState"))
if mibBuilder.loadTexts: dvbt2T2MiTimeInterleaverBuffer.setStatus('obsolete')
if mibBuilder.loadTexts: dvbt2T2MiTimeInterleaverBuffer.setDescription('obsolete\n                \n                Possible values:\n                undefined(1)\n                off(2)       - not used\n                warning(4)   - underflow\n                ok(5)        - ok\n                ')
dvbt2CompositeSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 0, 100)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationPriority"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationState"))
if mibBuilder.loadTexts: dvbt2CompositeSummary.setStatus('current')
if mibBuilder.loadTexts: dvbt2CompositeSummary.setDescription('Description.\n                \n                Possible values:\n                off(2)       - \n                warning(4)   - \n                ok(5)        - \n                ')
dvbt2CompositeProfiles = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 0, 101)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationPriority"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationState"))
if mibBuilder.loadTexts: dvbt2CompositeProfiles.setStatus('current')
if mibBuilder.loadTexts: dvbt2CompositeProfiles.setDescription('Description.\n                \n                Possible values:\n                off(2)       - \n                warning(4)   - \n                ok(5)        - \n                ')
dvbt2CompositeFrameLength = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 0, 102)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationPriority"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationState"))
if mibBuilder.loadTexts: dvbt2CompositeFrameLength.setStatus('current')
if mibBuilder.loadTexts: dvbt2CompositeFrameLength.setDescription('Description.\n                \n                Possible values:\n                off(2)       - \n                warning(4)   - \n                ok(5)        - \n                ')
dvbt2SubIaState = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 0, 202)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationPriority"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationState"))
if mibBuilder.loadTexts: dvbt2SubIaState.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubIaState.setDescription("Shows usage of the 'individual addressing' parameters\n                of the data stream.\n                \n                Possible values:\n                undefined(1)\n                off(2)       - not used\n                warning(4)   - in use, but not available\n                ok(5)        - in use and available\n                \n                Notification class: warning")
dvbt2SubConfigurationValid = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 0, 205)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationPriority"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationState"))
if mibBuilder.loadTexts: dvbt2SubConfigurationValid.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubConfigurationValid.setDescription('Shows whether the configuration of DVB-T2 parameters is coherent.\n                \n                Possible values:\n                off(2)     - unchecked\n                warning(4) - invalid configuration\n                ok(5)      - valid configuration\n                \n                Notification class: warning')
dvbt2SubConfigurationSupported = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 0, 206)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationPriority"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationState"))
if mibBuilder.loadTexts: dvbt2SubConfigurationSupported.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubConfigurationSupported.setDescription('Indicates whether the selected modualtion mode is \n                supported by this exciter.\n                \n                Possible values:\n                off(2)     - unchecked\n                warning(4) - unsupported configuration\n                ok(5)      - supported configuration\n                \n                Notification class: warning')
dvbt2SubConfigurationMatched = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 0, 207)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationPriority"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationState"))
if mibBuilder.loadTexts: dvbt2SubConfigurationMatched.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubConfigurationMatched.setDescription('Indicates whether the configuration of the channel \n                bandwidth is consistent. If not, an error message is output.\n                \n                Possible values:\n                off(2)     -\n                warning(4) - invalid configuration\n                ok(5)      - valid configuration\n                \n                Notification class: warning')
rsXx9Dvbt2Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1))
dvbt2Status = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 1))
dvbt2StatusNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 1, 1), )
if mibBuilder.loadTexts: dvbt2StatusNotificationTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2StatusNotificationTable.setDescription('The context information/configuration for the\n                DVB-T2 status notifications.')
dvbt2StatusNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 1, 1, 1), ).setIndexNames((0, "RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationTxIdx"), (0, "RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationExcIdx"), (0, "RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationIdx"))
if mibBuilder.loadTexts: dvbt2StatusNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2StatusNotificationEntry.setDescription('An entry in the dvbt2StatusNotificationTable.')
dvbt2StatusNotificationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 1, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: dvbt2StatusNotificationTxIdx.setStatus('current')
if mibBuilder.loadTexts: dvbt2StatusNotificationTxIdx.setDescription('The transmitter index.')
dvbt2StatusNotificationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 1, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: dvbt2StatusNotificationExcIdx.setStatus('current')
if mibBuilder.loadTexts: dvbt2StatusNotificationExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
dvbt2StatusNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: dvbt2StatusNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: dvbt2StatusNotificationIdx.setDescription('The notification number as below rsXx9Dvbt2Notifications.\n                This is a helper column and therefore not-accessible.')
dvbt2StatusNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 100, 101, 102, 202, 205, 206, 207))).clone(namedValues=NamedValues(("dvbt2L1State", 1), ("dvbt2IaState", 2), ("dvbt2ConfigurationValid", 5), ("dvbt2ConfigurationSupported", 6), ("dvbt2ConfigurationMatched", 7), ("dvbt2EncoderSummary", 8), ("dvbt2Test", 9), ("dvbt2SupportedPlps", 10), ("dvbt2SupportedTrIterations", 11), ("dvbt2T2MiTimeInterleaverBuffer", 12), ("dvbt2CompositeSummary", 100), ("dvbt2CompositeProfiles", 101), ("dvbt2CompositeFrameLength", 102), ("dvbt2SubIaState", 202), ("dvbt2SubConfigurationValid", 205), ("dvbt2SubConfigurationSupported", 206), ("dvbt2SubConfigurationMatched", 207)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2StatusNotificationName.setStatus('current')
if mibBuilder.loadTexts: dvbt2StatusNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9Dvbt2Notifications.')
dvbt2StatusNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 1, 1, 1, 5), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2StatusNotificationMask.setStatus('current')
if mibBuilder.loadTexts: dvbt2StatusNotificationMask.setDescription('See TextualConvention for details.')
dvbt2StatusNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 1, 1, 1, 6), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2StatusNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: dvbt2StatusNotificationPriority.setDescription('See TextualConvention for details.')
dvbt2StatusNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 1, 1, 1, 7), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2StatusNotificationState.setStatus('current')
if mibBuilder.loadTexts: dvbt2StatusNotificationState.setDescription('See TextualConvention for details.')
dvbt2StateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 1, 2), )
if mibBuilder.loadTexts: dvbt2StateTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2StateTable.setDescription('DVB-T2 state information.')
dvbt2StateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 1, 2, 1), ).setIndexNames((0, "RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationTxIdx"), (0, "RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationExcIdx"))
if mibBuilder.loadTexts: dvbt2StateEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2StateEntry.setDescription('An entry for a specific exciter.')
dvbt2StInputDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("unlocked", 2), ("internal", 3), ("mpeg", 4), ("t2mi", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2StInputDetected.setStatus('current')
if mibBuilder.loadTexts: dvbt2StInputDetected.setDescription('The current input state.\n                internal(3) represents the test generator.\n                unlocked(2), mpeg(4), t2mi(5): the status of the active input.')
dvbt2StInputMatched = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 5))).clone(namedValues=NamedValues(("off", 2), ("no", 4), ("yes", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2StInputMatched.setStatus('current')
if mibBuilder.loadTexts: dvbt2StInputMatched.setDescription('Result of comparison of dvbt2StInputDetected\n                and dvbt2StInputRequired.')
dvbt2StInputRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("internal", 3), ("mpeg", 4), ("t2mi", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2StInputRequired.setStatus('current')
if mibBuilder.loadTexts: dvbt2StInputRequired.setDescription('The current required input state.\n                off(1) is startup value, only.\n                internal(3) is the test generator.\n                mpeg(4), t2mi(5): the requirement towards an active input.')
dvbt2StConfigAdaptionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("notUsed", 2), ("wrongConfig", 4), ("ok", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2StConfigAdaptionState.setStatus('current')
if mibBuilder.loadTexts: dvbt2StConfigAdaptionState.setDescription('Description.')
dvbt2StDejitterBufDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000000, 1000000))).setUnits('mus').setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2StDejitterBufDelay.setStatus('current')
if mibBuilder.loadTexts: dvbt2StDejitterBufDelay.setDescription('This displays the delay of the T2MI stream within the dejitter buffer. \n                The value varies after the transmission has started due to \n                conditions on the input network. This value should be positive. \n                A negative value may impose transmission interrupts.')
dvbt2StResidualDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 500000))).setUnits('mus').setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2StResidualDelay.setStatus('current')
if mibBuilder.loadTexts: dvbt2StResidualDelay.setDescription('Delay of the signal controlled by the SFN Synchronization \n                to meet the desired transmission time. \n                The value is fix after transmission has started. \n                To achieve a higher robustness against input jitter, \n                this value can be reduced by increasing the dejitter buffer delay.\n                ')
dvbt2StConfigurationMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 1, 2, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2StConfigurationMsg.setStatus('current')
if mibBuilder.loadTexts: dvbt2StConfigurationMsg.setDescription('Description.')
dvbt2Setup = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2))
dvbt2ConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 1), )
if mibBuilder.loadTexts: dvbt2ConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2ConfigurationTable.setDescription('DVB-T2 configuration.')
dvbt2ConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 1, 1), ).setIndexNames((0, "RS-XX9-DVBT2-MIB", "dvbt2ConfigurationTxIdx"), (0, "RS-XX9-DVBT2-MIB", "dvbt2ConfigurationExcIdx"))
if mibBuilder.loadTexts: dvbt2ConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2ConfigurationEntry.setDescription('An entry in the dvbt2ConfigurationTable.')
dvbt2ConfigurationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: dvbt2ConfigurationTxIdx.setStatus('current')
if mibBuilder.loadTexts: dvbt2ConfigurationTxIdx.setDescription('The transmitter index.')
dvbt2ConfigurationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: dvbt2ConfigurationExcIdx.setStatus('current')
if mibBuilder.loadTexts: dvbt2ConfigurationExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
dvbt2ConfigurationT2MiInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("composite", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2ConfigurationT2MiInterface.setStatus('current')
if mibBuilder.loadTexts: dvbt2ConfigurationT2MiInterface.setDescription('on(1) - Uses the incoming T2-MI stream from a DVB-T2 gateway\n                         to configure the Modulator.\n                off(2) - Uses the incoming MPEG transport stream directly\n                         as payload for single PLP.')
dvbt2ConfigurationT2MiPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2ConfigurationT2MiPID.setStatus('current')
if mibBuilder.loadTexts: dvbt2ConfigurationT2MiPID.setDescription('Only if dvbt2ConfigurationT2MiInterface is on(1):\n                the packet ID of the T2-MI elementary stream.')
dvbt2ConfigurationT2MiSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2ConfigurationT2MiSID.setStatus('current')
if mibBuilder.loadTexts: dvbt2ConfigurationT2MiSID.setDescription('Only if dvbt2FsT2Version is at least v131(5):\n                ')
dvbt2ConfigurationT2ConfigAdaption = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("staticSinglePLP", 2), ("staticMultiPLP", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2ConfigurationT2ConfigAdaption.setStatus('current')
if mibBuilder.loadTexts: dvbt2ConfigurationT2ConfigAdaption.setDescription('Defines adaptation of the processing to the configuration at the input. \n                \n                None: This setting can always be used; it does, however, lead to a \n                high processing delay through the transmitter. \n                Static single PLP: This setting can only be used if the data stream \n                only contains one PLP (Physical Layer Pipe). It decreases the \n                processing delay through the exciter.\n                \n                staticMultiPLP(3) is not supported anymore.\n                ')
dvbt2ConfigurationT2MiDejitterBufDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2ConfigurationT2MiDejitterBufDelay.setStatus('current')
if mibBuilder.loadTexts: dvbt2ConfigurationT2MiDejitterBufDelay.setDescription('Description.')
dvbt2LocalizationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 2), )
if mibBuilder.loadTexts: dvbt2LocalizationTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2LocalizationTable.setDescription('DVB-T2 localization.')
dvbt2LocalizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 2, 1), )
dvbt2ConfigurationEntry.registerAugmentions(("RS-XX9-DVBT2-MIB", "dvbt2LocalizationEntry"))
dvbt2LocalizationEntry.setIndexNames(*dvbt2ConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbt2LocalizationEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2LocalizationEntry.setDescription('An entry in the dvbt2LocalizationTable.')
dvbt2LocalizationTxIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2LocalizationTxIdentifier.setStatus('current')
if mibBuilder.loadTexts: dvbt2LocalizationTxIdentifier.setDescription('Used to address a TV transmitter within a DVB-T2 network.')
dvbt2LocalizationCellIdSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 2, 1, 4), Dvbt2CellIdSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2LocalizationCellIdSource.setStatus('current')
if mibBuilder.loadTexts: dvbt2LocalizationCellIdSource.setDescription('Source for the cell ID.')
dvbt2LocalizationCellIdManual = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2LocalizationCellIdManual.setStatus('current')
if mibBuilder.loadTexts: dvbt2LocalizationCellIdManual.setDescription('The cell ID used when dvbt2LocalizationCellIdSource is manual(1).\n                The cell ID can be changed without signal interruption.')
dvbt2LocalizationMisoGroupSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("manual", 2), ("ia", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2LocalizationMisoGroupSource.setStatus('current')
if mibBuilder.loadTexts: dvbt2LocalizationMisoGroupSource.setDescription('The MISO group can be configured either manually directly on the transmitter\n                or automatically using the Individual Addressing (IA) data via the DVB_T2 gateway.\n                The group can be switched at any time without signal interruption.\n                \n                manual(2) - from dvbt2LocalizationMisoGroupManual\n                ia(3)     - from the individual addressing data\n                            of the DVB-T2 gateway stream')
dvbt2LocalizationMisoGroupManual = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5))).clone(namedValues=NamedValues(("group1", 4), ("group2", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2LocalizationMisoGroupManual.setStatus('current')
if mibBuilder.loadTexts: dvbt2LocalizationMisoGroupManual.setDescription('The MISO group used when dvbt2LocalizationMisoGroupSource is manual(1).\n                The MISO group can be changed without signal interruption.')
dvbt2LocalizationNetworkIdManual = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2LocalizationNetworkIdManual.setStatus('current')
if mibBuilder.loadTexts: dvbt2LocalizationNetworkIdManual.setDescription('The network ID uniquely defines the current DVB-T2 network.\n                If a T2-MI interface is used, this value is specified\n                from the DVB-T2 gateway.\n                Otherwise it is defined here.')
dvbt2LocalizationSystemIdManual = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2LocalizationSystemIdManual.setStatus('current')
if mibBuilder.loadTexts: dvbt2LocalizationSystemIdManual.setDescription('The system ID uniquely identifies a T2 system within the DVB-T2 network.')
dvbt2LocalizationL1FrequencySource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 2, 1, 10), Dvbt2L1FrequencySource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2LocalizationL1FrequencySource.setStatus('current')
if mibBuilder.loadTexts: dvbt2LocalizationL1FrequencySource.setDescription('See textual convention.\n                \n                If you select manual(1),\n                the value is given with dvbt2LocalizationL1FrequencyManual.')
dvbt2LocalizationL1FrequencyManual = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000000))).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2LocalizationL1FrequencyManual.setStatus('current')
if mibBuilder.loadTexts: dvbt2LocalizationL1FrequencyManual.setDescription('Presetting of L1 frequency shift.')
dvbt2LocalizationTxDelayOffsetSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 2, 1, 12), Dvbt2TxDelayOffsetSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2LocalizationTxDelayOffsetSource.setStatus('current')
if mibBuilder.loadTexts: dvbt2LocalizationTxDelayOffsetSource.setDescription('See textual convention.')
dvbt2LocalizationPaprTrSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("manual", 2), ("ia", 3), ("supported", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2LocalizationPaprTrSource.setStatus('current')
if mibBuilder.loadTexts: dvbt2LocalizationPaprTrSource.setDescription('Description.')
dvbt2IndividualAddressingTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 3), )
if mibBuilder.loadTexts: dvbt2IndividualAddressingTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2IndividualAddressingTable.setDescription('DVB-T2 individual addressing.')
dvbt2IndividualAddressingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 3, 1), )
dvbt2ConfigurationEntry.registerAugmentions(("RS-XX9-DVBT2-MIB", "dvbt2IndividualAddressingEntry"))
dvbt2IndividualAddressingEntry.setIndexNames(*dvbt2ConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbt2IndividualAddressingEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2IndividualAddressingEntry.setDescription('An entry in the dvbt2IndividualAddressingTable.')
dvbt2IaTimeOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('1/10 micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2IaTimeOffset.setStatus('current')
if mibBuilder.loadTexts: dvbt2IaTimeOffset.setDescription('Shows the transmitting delay for this transmitter in relation to\n                other transmitters in the DVB-T2 network.\n                This value is defined from the DVB-T2 gateway.')
dvbt2IaTimeOffsetSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 3, 1, 4), Dvbt2IndividualAddressingSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2IaTimeOffsetSource.setStatus('current')
if mibBuilder.loadTexts: dvbt2IaTimeOffsetSource.setDescription('Shows the source for the time offset.\n                txSpecific(2) - a special time offset was given for this TX identifier\n                viaBroadcast(3) - all transmitters of the network got the same\n                                  time offset via broadcast')
dvbt2IaFrequencyOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 3, 1, 5), Integer32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2IaFrequencyOffset.setStatus('current')
if mibBuilder.loadTexts: dvbt2IaFrequencyOffset.setDescription('Shows the frequency shift for this transmitter in relation to\n                other transmitters in the DVB-T2 network.\n                This value is defined from the DVB-T2 gateway.')
dvbt2IaFrequencyOffsetSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 3, 1, 6), Dvbt2IndividualAddressingSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2IaFrequencyOffsetSource.setStatus('current')
if mibBuilder.loadTexts: dvbt2IaFrequencyOffsetSource.setDescription('Shows the source for the frequency shift.\n                txSpecific(2) - a special frequency shift was given for this TX identifier\n                viaBroadcast(3) - all transmitters of the network got the same\n                                  frequency shift via broadcast')
dvbt2IaCellID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2IaCellID.setStatus('current')
if mibBuilder.loadTexts: dvbt2IaCellID.setDescription('Shows the cell ID that is given with the individual addressing\n                information.\n                This value is defined from the DVB-T2 gateway.\n                The actual cell ID depends on the setting of dvbt2LocalizationCellIdSource.')
dvbt2IaCellIdSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 3, 1, 8), Dvbt2IndividualAddressingSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2IaCellIdSource.setStatus('current')
if mibBuilder.loadTexts: dvbt2IaCellIdSource.setDescription('Shows the source for the cell ID.\n                txSpecific(2) - a special cell ID was given for this TX identifier\n                viaBroadcast(3) - all transmitters of the network got the same\n                                  cell ID via broadcast')
dvbt2ChannelTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 4), )
if mibBuilder.loadTexts: dvbt2ChannelTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2ChannelTable.setDescription('DVB-T2 channel parameters.')
dvbt2ChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 4, 1), )
dvbt2ConfigurationEntry.registerAugmentions(("RS-XX9-DVBT2-MIB", "dvbt2ChannelEntry"))
dvbt2ChannelEntry.setIndexNames(*dvbt2ConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbt2ChannelEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2ChannelEntry.setDescription('An entry in the dvbt2ChannelTable.')
dvbt2ChnTransmissionSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("t2SISO", 3), ("t2MISO", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2ChnTransmissionSystem.setStatus('current')
if mibBuilder.loadTexts: dvbt2ChnTransmissionSystem.setDescription('Allows to connect several transmitters to a MISO system.\n                Only applicable if a T2-MI interface is used.\n                A change of this value is possible anytime without signal interruption.')
dvbt2ChnBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 4, 1, 4), Dvbt2ChannelBandwidth()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2ChnBandwidth.setStatus('current')
if mibBuilder.loadTexts: dvbt2ChnBandwidth.setDescription('The channel bandwidth that the DVB-T2 signal allocates\n                in the frequency spectrum.\n                For safety reasons it is always set manually.')
dvbt2ChnFFT = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 4, 1, 5), Dvbt2FftSize()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2ChnFFT.setStatus('current')
if mibBuilder.loadTexts: dvbt2ChnFFT.setDescription('If a T2-MI interface is used, this value is read-only.\n                In this case it is specified by the DVB-T2 gateway.')
dvbt2ChnFftExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 4, 1, 6), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2ChnFftExtended.setStatus('current')
if mibBuilder.loadTexts: dvbt2ChnFftExtended.setDescription('If this field is set to on(1), the extended carrier mode is used.\n                If this field is set to off(2), the normal carrier mode is used.\n                Only for 8K, 16K or 32K FFT size.\n                \n                If a T2-MI interface is used, this value is read-only.\n                In this case it is specified by the DVB-T2 gateway.')
dvbt2ChnGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 4, 1, 7), Dvbt2GuardInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2ChnGuardInterval.setStatus('current')
if mibBuilder.loadTexts: dvbt2ChnGuardInterval.setDescription('see textual convention\n                \n                If a T2-MI interface is used, this value is read-only.\n                In this case it is specified by the DVB-T2 gateway.')
dvbt2ChnPilotPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 4, 1, 8), Dvbt2PilotPattern()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2ChnPilotPattern.setStatus('current')
if mibBuilder.loadTexts: dvbt2ChnPilotPattern.setDescription('see textual convention\n                \n                If a T2-MI interface is used, this value is read-only.\n                In this case it is specified by the DVB-T2 gateway.')
dvbt2ChnPaprReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 4, 1, 9), Dvbt2PaprReduction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2ChnPaprReduction.setStatus('current')
if mibBuilder.loadTexts: dvbt2ChnPaprReduction.setDescription('see textual convention\n                \n                If a T2-MI interface is used, this value is read-only.\n                In this case it is specified by the DVB-T2 gateway.')
dvbt2FrameStructureTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 5), )
if mibBuilder.loadTexts: dvbt2FrameStructureTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2FrameStructureTable.setDescription('DVB-T2 frame structure.')
dvbt2FrameStructureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 5, 1), )
dvbt2ConfigurationEntry.registerAugmentions(("RS-XX9-DVBT2-MIB", "dvbt2FrameStructureEntry"))
dvbt2FrameStructureEntry.setIndexNames(*dvbt2ConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbt2FrameStructureEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2FrameStructureEntry.setDescription('An entry in the dvbt2FrameStructureTable.')
dvbt2FsDataSymbolsPerT2Frame = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2FsDataSymbolsPerT2Frame.setStatus('current')
if mibBuilder.loadTexts: dvbt2FsDataSymbolsPerT2Frame.setDescription('The total number of symbols in a frame (excluding P1).\n                \n                If a T2-MI interface is used, this value is read-only.\n                In this case it is specified by the DVB-T2 gateway.')
dvbt2FsT2FramesPerSuperFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2FsT2FramesPerSuperFrame.setStatus('current')
if mibBuilder.loadTexts: dvbt2FsT2FramesPerSuperFrame.setDescription('The number of T2-frames in a super-frame is a configurable parameter.\n                \n                If a T2-MI interface is used, this value is read-only.\n                In this case it is specified by the DVB-T2 gateway.')
dvbt2FsT2Version = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 5, 1, 5), Dvbt2T2Version()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2FsT2Version.setStatus('current')
if mibBuilder.loadTexts: dvbt2FsT2Version.setDescription('The T2 version used. If no T2-MI interface is used,\n                only version 1.1.1 is supported.')
dvbt2L1Table = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 6), )
if mibBuilder.loadTexts: dvbt2L1Table.setStatus('current')
if mibBuilder.loadTexts: dvbt2L1Table.setDescription('DVB-T2 layer 1 parameters.')
dvbt2L1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 6, 1), )
dvbt2ConfigurationEntry.registerAugmentions(("RS-XX9-DVBT2-MIB", "dvbt2L1Entry"))
dvbt2L1Entry.setIndexNames(*dvbt2ConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbt2L1Entry.setStatus('current')
if mibBuilder.loadTexts: dvbt2L1Entry.setDescription('An entry in the dvbt2L1Table.')
dvbt2L1Modulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 6, 1, 3), Dvbt2Layer1Modulation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2L1Modulation.setStatus('current')
if mibBuilder.loadTexts: dvbt2L1Modulation.setDescription('The constellation of the L1-post signalling data block.\n                \n                If a T2-MI interface is used, this value is read-only.\n                In this case it is specified by the DVB-T2 gateway.')
dvbt2L1CodeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 6, 1, 4), Dvbt2Layer1CodeRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2L1CodeRate.setStatus('current')
if mibBuilder.loadTexts: dvbt2L1CodeRate.setDescription('The coding of the L1-post signalling data block.\n                \n                If a T2-MI interface is used, this value is read-only.\n                In this case it is specified by the DVB-T2 gateway.')
dvbt2L1FEC = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 6, 1, 5), Dvbt2Layer1FEC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2L1FEC.setStatus('current')
if mibBuilder.loadTexts: dvbt2L1FEC.setDescription('The type of the L1 FEC used for the L1-post signalling data block.\n                \n                If a T2-MI interface is used, this value is read-only.\n                In this case it is specified by the DVB-T2 gateway.')
dvbt2L1Repetition = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 6, 1, 6), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2L1Repetition.setStatus('current')
if mibBuilder.loadTexts: dvbt2L1Repetition.setDescription('Repetition of L1-post dynamic data.\n                \n                If a T2-MI interface is used, this value is read-only.\n                In this case it is specified by the DVB-T2 gateway.')
dvbt2Plp1Table = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 7), )
if mibBuilder.loadTexts: dvbt2Plp1Table.setStatus('current')
if mibBuilder.loadTexts: dvbt2Plp1Table.setDescription('Changeable parameters of the only physical layer pipe\n                in case of single PLP mode.')
dvbt2Plp1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 7, 1), )
dvbt2ConfigurationEntry.registerAugmentions(("RS-XX9-DVBT2-MIB", "dvbt2Plp1Entry"))
dvbt2Plp1Entry.setIndexNames(*dvbt2ConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbt2Plp1Entry.setStatus('current')
if mibBuilder.loadTexts: dvbt2Plp1Entry.setDescription('An entry in the dvbt2PlpTable.')
dvbt2Plp1ID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2Plp1ID.setStatus('current')
if mibBuilder.loadTexts: dvbt2Plp1ID.setDescription('uniquely identifies a PLP within a T2 system')
dvbt2Plp1GroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2Plp1GroupID.setStatus('current')
if mibBuilder.loadTexts: dvbt2Plp1GroupID.setDescription('identifies with which PLP group within the T2 system\n                the current PLP is associated. This can be used by a\n                receiver to link the data PLP to its associated common PLP,\n                which will have the same PLP Group ID.\n                ')
dvbt2Plp1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 7, 1, 5), Dvbt2PlpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2Plp1Type.setStatus('current')
if mibBuilder.loadTexts: dvbt2Plp1Type.setDescription('Indicates the set Physical Layer Pipe type.')
dvbt2Plp1Constellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 7, 1, 6), Dvbt2Modulation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2Plp1Constellation.setStatus('current')
if mibBuilder.loadTexts: dvbt2Plp1Constellation.setDescription('Indicates the set modulation mode. \n                QPSK is extremely fail-safe, but has only a low data rate. \n                256QAM can transmit very high data rates and is \n                recommended if few faults are expected on the \n                transmission link. The setting can be changed here.\n                ')
dvbt2Plp1Rotation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 7, 1, 7), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2Plp1Rotation.setStatus('current')
if mibBuilder.loadTexts: dvbt2Plp1Rotation.setDescription('Constellation rotation.')
dvbt2Plp1CodeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 7, 1, 8), Dvbt2CodeRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2Plp1CodeRate.setStatus('current')
if mibBuilder.loadTexts: dvbt2Plp1CodeRate.setDescription('Indicates the set code rate. The code rate is used to set the ratio \n                of information data to <error correction values + information data>. \n                1/2 provides the greatest error correction and the lowest data \n                transfer rate; \n                5/6 provides the lowest error correction and the greatest data \n                transfer rate. The setting can be changed here.\n                ')
dvbt2Plp1FEC = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 7, 1, 9), Dvbt2FEC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2Plp1FEC.setStatus('current')
if mibBuilder.loadTexts: dvbt2Plp1FEC.setDescription('Indicates the set error correction algorithm (FEC).  If a T2-MI interface \n                is used, this value is fixed by the DVB-T2 gateway.\n                ')
dvbt2Plp1TimeInterleaverType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 7, 1, 10), Dvbt2TimeInterleaverType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2Plp1TimeInterleaverType.setStatus('current')
if mibBuilder.loadTexts: dvbt2Plp1TimeInterleaverType.setDescription('single(1) - Maps each interleaving frame directly  to a T2 frame.\n                multi(2)  - Maps each interleaving frame to more than one T2 frame.')
dvbt2Plp1TimeInterleaverLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 7, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2Plp1TimeInterleaverLength.setStatus('current')
if mibBuilder.loadTexts: dvbt2Plp1TimeInterleaverLength.setDescription('Defines the number of time interleaver blocks (TIB)\n                within the time interleaving frame.')
dvbt2Plp1BasebandMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 7, 1, 12), Dvbt2BasebandMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2Plp1BasebandMode.setStatus('current')
if mibBuilder.loadTexts: dvbt2Plp1BasebandMode.setDescription('see textual convention')
dvbt2TestTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 9), )
if mibBuilder.loadTexts: dvbt2TestTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2TestTable.setDescription('Configures the test mode of the exciter.')
dvbt2TestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 9, 1), )
dvbt2ConfigurationEntry.registerAugmentions(("RS-XX9-DVBT2-MIB", "dvbt2TestEntry"))
dvbt2TestEntry.setIndexNames(*dvbt2ConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbt2TestEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2TestEntry.setDescription('An entry in the dvbt2TestTable.')
dvbt2TestGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 9, 1, 3), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2TestGeneration.setStatus('obsolete')
if mibBuilder.loadTexts: dvbt2TestGeneration.setDescription('Switches test signal generation on or off.\n                A test signal enables measurements for the transmitter\n                if no valid DVB-T2 input exists or\n                the DVB-T2 option is not active.')
dvbt2TestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6))).clone(namedValues=NamedValues(("off", 1), ("prbs", 2), ("singleCarrier", 3), ("mute1P1SymOfSuperFrame", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2TestMode.setStatus('current')
if mibBuilder.loadTexts: dvbt2TestMode.setDescription('Indicates which test signal is generated. \n                \n                off: Switches off test signal generation. \n                \n                PRBS:Generates a PRBS sequence instead of the payload. \n                \n                Mute 1st P1 Symbol: Suppresses the first symbol of each T2 frame. This function \n                can be used to measure the time of signal transmission. \n                \n                Single Carrier: Generates an unmodulated single carrier. The frequency of the \n                single carrier is at the center of the band and therefore deviates from the vision \n                carrier frequency. This test signal can be used to measure the phase noise of the \n                synthesizer. The phase noise must be measured via the RF Monitor Out \n                connector (X61). The cable connected to RF Out (X60) must be removed. In order \n                to protect the amplifiers, this test signal is only generated if the output of the \n                exciter is open. \n                ')
dvbt2Output = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3))
dvbt2OutLocalizationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 2), )
if mibBuilder.loadTexts: dvbt2OutLocalizationTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutLocalizationTable.setDescription('DVB-T2 localization\n                as signalled from the DVB-T2 gateway.')
dvbt2OutLocalizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 2, 1), )
dvbt2ConfigurationEntry.registerAugmentions(("RS-XX9-DVBT2-MIB", "dvbt2OutLocalizationEntry"))
dvbt2OutLocalizationEntry.setIndexNames(*dvbt2ConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbt2OutLocalizationEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutLocalizationEntry.setDescription('An entry in the dvbt2OutLocalizationTable.')
dvbt2OutLocalizationCellIdSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 2, 1, 1), Dvbt2CellIdSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutLocalizationCellIdSource.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutLocalizationCellIdSource.setDescription('See textual convention.')
dvbt2OutLocalizationCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutLocalizationCellId.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutLocalizationCellId.setDescription('The cell ID that is actually transmitted.')
dvbt2OutLocalizationMisoGroupSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("manual", 2), ("ia", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutLocalizationMisoGroupSource.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutLocalizationMisoGroupSource.setDescription('Source for the MISO group:\n                manual(2) - from dvbt2LocalizationMisoGroupManual\n                ia(3)     - from the individual addressing data\n                            of the DVB-T2 gateway stream')
dvbt2OutLocalizationMisoGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("unused", 3), ("group1", 4), ("group2", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutLocalizationMisoGroup.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutLocalizationMisoGroup.setDescription('The actual MISO group for the transmitter.\n                In a MISO system the two transmitters have to be assigned\n                different groups.\n                In a SFN system several transmitters may belong to one group.')
dvbt2OutLocalizationNetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutLocalizationNetworkId.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutLocalizationNetworkId.setDescription('The actual network ID for the transmitter.')
dvbt2OutLocalizationSystemId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutLocalizationSystemId.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutLocalizationSystemId.setDescription('The actual system ID for the transmitter.')
dvbt2OutLocalizationL1FrequencySource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 2, 1, 8), Dvbt2L1FrequencySource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutLocalizationL1FrequencySource.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutLocalizationL1FrequencySource.setDescription('See textual convention.')
dvbt2OutLocalizationL1Frequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 2, 1, 9), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutLocalizationL1Frequency.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutLocalizationL1Frequency.setDescription('Currently used L1 frequency with index 0.')
dvbt2OutLocalizationTxDelayOffsetSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 2, 1, 10), Dvbt2TxDelayOffsetSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutLocalizationTxDelayOffsetSource.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutLocalizationTxDelayOffsetSource.setDescription('See textual convention.')
dvbt2OutLocalizationTxDelayOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 2, 1, 11), Integer32()).setUnits('1/10 micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutLocalizationTxDelayOffset.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutLocalizationTxDelayOffset.setDescription('Transmitter specific transmitting delay.')
dvbt2OutLocalizationPaprTrSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("manual", 2), ("ia", 3), ("supported", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2OutLocalizationPaprTrSource.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutLocalizationPaprTrSource.setDescription('Description.')
dvbt2OutChannelTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 4), )
if mibBuilder.loadTexts: dvbt2OutChannelTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutChannelTable.setDescription('DVB-T2 channel parameters\n                as signalled from the DVB-T2 gateway.')
dvbt2OutChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 4, 1), )
dvbt2ConfigurationEntry.registerAugmentions(("RS-XX9-DVBT2-MIB", "dvbt2OutChannelEntry"))
dvbt2OutChannelEntry.setIndexNames(*dvbt2ConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbt2OutChannelEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutChannelEntry.setDescription('An entry in the dvbt2OutChannelTable.')
dvbt2OutChnTransmissionSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 4, 1, 3), Dvbt2TransmissionSystem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutChnTransmissionSystem.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutChnTransmissionSystem.setDescription('see textual convention')
dvbt2OutChnBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 4, 1, 4), Dvbt2ChannelBandwidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutChnBandwidth.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutChnBandwidth.setDescription('The channel bandwidth as signalled by the DVB-T2 gateway.')
dvbt2OutChnFFT = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 4, 1, 5), Dvbt2FftSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutChnFFT.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutChnFFT.setDescription('see textual convention')
dvbt2OutChnFftExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 4, 1, 6), Dvbt2OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutChnFftExtended.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutChnFftExtended.setDescription('When this field is on(1), the extended carrier mode is used.\n                If this field is off(2), the normal carrier mode is used.\n                Only for 8K, 16K or 32K FFT size.')
dvbt2OutChnGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 4, 1, 7), Dvbt2GuardInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutChnGuardInterval.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutChnGuardInterval.setDescription('see textual convention')
dvbt2OutChnPilotPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 4, 1, 8), Dvbt2PilotPattern()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutChnPilotPattern.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutChnPilotPattern.setDescription('see textual convention')
dvbt2OutChnPaprReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 4, 1, 9), Dvbt2PaprReduction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutChnPaprReduction.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutChnPaprReduction.setDescription('see textual convention')
dvbt2OutChnT2BaseLite = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 4, 1, 10), Dvbt2OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutChnT2BaseLite.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutChnT2BaseLite.setDescription('Shows whether the sent out T2-Base profile is compatible\n                with a T2-LITE profile.')
dvbt2OutChnPreamble = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("notMixed", 3), ("mixed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2OutChnPreamble.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutChnPreamble.setDescription('Indicates whether the preambles are all of the same type or not:\n                notMixed(3) - all preambles in the current transmission are of the same type\n                mixed(4)    - preambles of different types are transmitted')
dvbt2OutChnInputStreamTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("tsOnly", 3), ("gsOnly", 4), ("tsAndGs", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutChnInputStreamTypes.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutChnInputStreamTypes.setDescription('The types of the Tx input streams carried within the T2 super-frame:\n                tsOnly(3)  - transport stream (TS) only\n                gsOnly(4)  - generic stream, but not TS\n                tsAndGs(5) - both TS and generic stream')
dvbt2OutChnRegenerationFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 4, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutChnRegenerationFlag.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutChnRegenerationFlag.setDescription('Indicates how many times the DVB-T2 signal has been re-generated.\n                Value 0 indicates that no regeneration has been done.\n                Each time the DVB-T2 signal is regenerated this field is increased by one.')
dvbt2OutChnT2Profile = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("base", 3), ("baseLite", 4), ("lite", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutChnT2Profile.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutChnT2Profile.setDescription('The T2-profile used. The standard profile is T2-Base,\n                while T2-Lite has been introduced in T2 version 1.3.1.\n                T2-Lite is intended for mobile applications.\n                The T2-Base-Lite option is the intersection between T2-Base and T2-Lite,\n                i.e. a signal that is valid for both T2-Base and T2-Lite profiles.\n                The T2-Base-Lite profile will be signalled as a normal T2-Base signal,\n                but with the T2_BASE_LITE flag set in the L1-Pre signaling.')
dvbt2OutFrameStructureTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 5), )
if mibBuilder.loadTexts: dvbt2OutFrameStructureTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutFrameStructureTable.setDescription('DVB-T2 frame structure\n                as signalled from the DVB-T2 gateway.')
dvbt2OutFrameStructureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 5, 1), )
dvbt2ConfigurationEntry.registerAugmentions(("RS-XX9-DVBT2-MIB", "dvbt2OutFrameStructureEntry"))
dvbt2OutFrameStructureEntry.setIndexNames(*dvbt2ConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbt2OutFrameStructureEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutFrameStructureEntry.setDescription('An entry in the dvbt2OutFrameStructureTable.')
dvbt2OutFsDataSymbolsPerT2Frame = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutFsDataSymbolsPerT2Frame.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutFsDataSymbolsPerT2Frame.setDescription('The total number of symbols in a frame (excluding P1).\n                \n                If a T2-MI interface is used, this value is read-only.\n                In this case it is specified by the DVB-T2 gateway.')
dvbt2OutFsT2FramesPerSuperFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutFsT2FramesPerSuperFrame.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutFsT2FramesPerSuperFrame.setDescription('The number of T2-frames in a super-frame is a configurable parameter.\n                \n                If a T2-MI interface is used, this value is read-only.\n                In this case it is specified by the DVB-T2 gateway.')
dvbt2OutFsT2Version = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 5, 1, 5), Dvbt2T2Version()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutFsT2Version.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutFsT2Version.setDescription('If no T2-MI interface is used only version 1.1.1 is supported.')
dvbt2OutFsSubSlicesPerFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutFsSubSlicesPerFrame.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutFsSubSlicesPerFrame.setDescription('The total number of sub-slices for the type 2 data PLPs\n                across all RF channels in one T2-frame.')
dvbt2OutFsNumOfPLP = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutFsNumOfPLP.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutFsNumOfPLP.setDescription('The number of PLPs carried within the super-frame.')
dvbt2OutFsNumOfAux = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutFsNumOfAux.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutFsNumOfAux.setDescription('number of auxiliary streams')
dvbt2OutL1Table = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 6), )
if mibBuilder.loadTexts: dvbt2OutL1Table.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutL1Table.setDescription('DVB-T2 layer 1 parameters\n                as signalled from the DVB-T2 gateway.')
dvbt2OutL1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 6, 1), )
dvbt2ConfigurationEntry.registerAugmentions(("RS-XX9-DVBT2-MIB", "dvbt2OutL1Entry"))
dvbt2OutL1Entry.setIndexNames(*dvbt2ConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbt2OutL1Entry.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutL1Entry.setDescription('An entry in the dvbt2OutL1Table.')
dvbt2OutL1Modulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 6, 1, 3), Dvbt2Layer1Modulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutL1Modulation.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutL1Modulation.setDescription('The constellation of the L1-post signalling data block.')
dvbt2OutL1CodeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 6, 1, 4), Dvbt2Layer1CodeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutL1CodeRate.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutL1CodeRate.setDescription('The coding of the L1-post signalling data block.')
dvbt2OutL1FEC = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 6, 1, 5), Dvbt2Layer1FEC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutL1FEC.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutL1FEC.setDescription('The type of the L1 FEC used for the L1-post signalling data block.')
dvbt2OutL1Repetition = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 6, 1, 6), Dvbt2OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutL1Repetition.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutL1Repetition.setDescription('Repetition of L1-post dynamic data.')
dvbt2OutL1PostScrambled = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 6, 1, 7), Dvbt2OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutL1PostScrambled.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutL1PostScrambled.setDescription('Shows whether signalling of L1-post is scrambled.')
dvbt2OutL1PostExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 6, 1, 8), Dvbt2OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutL1PostExtension.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutL1PostExtension.setDescription('Indicates the presence of the L1-post extension field.')
dvbt2OutPlpTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7), )
if mibBuilder.loadTexts: dvbt2OutPlpTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPlpTable.setDescription('DVB-T2 PLP parameters\n                as signalled from the DVB-T2 gateway.')
dvbt2OutPlpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1), ).setIndexNames((0, "RS-XX9-DVBT2-MIB", "dvbt2ConfigurationTxIdx"), (0, "RS-XX9-DVBT2-MIB", "dvbt2ConfigurationExcIdx"), (0, "RS-XX9-DVBT2-MIB", "dvbt2OutPlpIdx"))
if mibBuilder.loadTexts: dvbt2OutPlpEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPlpEntry.setDescription('An entry in the dvbt2OutPlpTable.')
dvbt2OutPlpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: dvbt2OutPlpIdx.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPlpIdx.setDescription('The PLP number.\n                This is a helper column and therefore not-accessible.')
dvbt2OutPlpID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPlpID.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPlpID.setDescription('uniquely identifies a PLP within a T2 system')
dvbt2OutPlpGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPlpGroupID.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPlpGroupID.setDescription('identifies with which PLP group within the T2 system\n                the current PLP is associated. This can be used by a\n                receiver to link the data PLP to its associated common PLP,\n                which will have the same PLP Group ID.\n                ')
dvbt2OutPlpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1, 5), Dvbt2PlpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPlpType.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPlpType.setDescription('Indicates the set Physical Layer Pipe type.')
dvbt2OutPlpPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("reserved", 2), ("gfps", 3), ("gcs", 4), ("gse", 5), ("ts", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPlpPayloadType.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPlpPayloadType.setDescription('Each input PLP may take one of the following formats:\n                gfps(3) - Generic Fixed-length Packetized Stream\n                          This form is retained for compatibility with DVB-S2,\n                          but it is expected that GSE would now be used instead.\n                gcs(4)  - Generic Continuous Stream\n                          A variable length packet stream where the modulator\n                          is not aware of the packet boundaries.\n                gse(5)  - Generic Encapsulated Stream\n                ts(6)   - Transport Stream')
dvbt2OutPlpConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1, 7), Dvbt2Modulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPlpConstellation.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPlpConstellation.setDescription('Indicates the set modulation mode. \n                QPSK is extremely fail-safe, but has only a low data rate. \n                256QAM can transmit very high data rates and is \n                recommended if few faults are expected on the \n                transmission link. \n                ')
dvbt2OutPlpRotation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1, 8), Dvbt2OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPlpRotation.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPlpRotation.setDescription('Constellation rotation.')
dvbt2OutPlpCodeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1, 9), Dvbt2CodeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPlpCodeRate.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPlpCodeRate.setDescription('Indicates the set code rate. The code rate is used to set the ratio \n                of information data to <error correction values + information data>. \n                1/2 provides the greatest error correction and the lowest data \n                transfer rate; \n                5/6 provides the lowest error correction and the greatest data \n                transfer rate.\n                ')
dvbt2OutPlpFEC = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1, 10), Dvbt2FEC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPlpFEC.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPlpFEC.setDescription('Indicates the set error correction algorithm (FEC).  If a T2-MI interface \n                is used, this value is fixed by the DVB-T2 gateway.\n                ')
dvbt2OutPlpFecBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPlpFecBlocks.setStatus('obsolete')
if mibBuilder.loadTexts: dvbt2OutPlpFecBlocks.setDescription('Displays the received number of maximum FEC blocks per interleaving frame.\n                obsoleted')
dvbt2OutPlpTimeInterleaverType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1, 12), Dvbt2TimeInterleaverType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPlpTimeInterleaverType.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPlpTimeInterleaverType.setDescription('single(1) - Maps each interleaving frame directly  to a T2 frame.\n                multi(2)  - Maps each interleaving frame to more than one T2 frame.')
dvbt2OutPlpTimeInterleaverLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPlpTimeInterleaverLength.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPlpTimeInterleaverLength.setDescription('Defines the number of time interleaver blocks (TIB)\n                within the time interleaving frame.')
dvbt2OutPlpBasebandMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1, 14), Dvbt2BasebandMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPlpBasebandMode.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPlpBasebandMode.setDescription('see textual convention')
dvbt2OutPlpFrameInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPlpFrameInterval.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPlpFrameInterval.setDescription('Indicates the T2-frame interval within the super-frame\n                for the associated PLP.')
dvbt2OutPlpBasebandPayloadPadding = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1, 16), Dvbt2OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPlpBasebandPayloadPadding.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPlpBasebandPayloadPadding.setDescription('Shows whether frame padding is used in base band\n                for achieving constant length of base band frame.')
dvbt2OutPlpNullPacketDeletion = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1, 17), Dvbt2OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPlpNullPacketDeletion.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPlpNullPacketDeletion.setDescription('Shows whether null packets (PID=8191) including the optional\n                ISSY field are deleted.')
dvbt2OutPlpNumOfOtherPlpInBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPlpNumOfOtherPlpInBand.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPlpNumOfOtherPlpInBand.setDescription('If equal 0, the relevant PLP carries only its own in-band L1 dynamic information. \n                If greater 0, it carries L1 dynamic information of other PLPs as well as its own\n                information, for shorter channel switching time.')
dvbt2OutPlpCmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("aCM", 3), ("cCM", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPlpCmType.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPlpCmType.setDescription('Coding and modulation type:\n                Code rate, constellation and rotation\n                aCM(3) - may be different for different PLPs\n                cCM(4) - are equal for all PLPs')
dvbt2OutPlpISSY = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("off", 3), ("short", 4), ("long", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPlpISSY.setStatus('obsolete')
if mibBuilder.loadTexts: dvbt2OutPlpISSY.setDescription('Input stream synchronization:\n                shows whether ISSY information is included\n                off(3)   - no ISSY information\n                short(4) - 16 bit ISSY information\n                long(5)  - 24 bit ISSY information\n                \n                obsoleted')
dvbt2OutPlpInBandFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1, 21), Dvbt2OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPlpInBandFlag.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPlpInBandFlag.setDescription('Indicates whether the padding carries in-band signalling information.\n                (Available with T2-Version 1.1.1)')
dvbt2OutPlpInBandASig = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1, 22), Dvbt2OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPlpInBandASig.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPlpInBandASig.setDescription('Indicates whether the padding carries in-band signalling information\n                of type A.\n                (Available with T2-Version 1.2.1 or higher)')
dvbt2OutPlpInBandBSig = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 7, 1, 23), Dvbt2OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPlpInBandBSig.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPlpInBandBSig.setDescription('Indicates whether the padding carries in-band signalling information\n                of type B.\n                (Available with T2-Version 1.2.1 or higher)')
dvbt2OutPaprTrTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 8), )
if mibBuilder.loadTexts: dvbt2OutPaprTrTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPaprTrTable.setDescription('PAPR (Peak to Average Power Ratio) reduction using tone reservation parameters.')
dvbt2OutPaprTrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 8, 1), )
dvbt2ConfigurationEntry.registerAugmentions(("RS-XX9-DVBT2-MIB", "dvbt2OutPaprTrEntry"))
dvbt2OutPaprTrEntry.setIndexNames(*dvbt2ConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbt2OutPaprTrEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPaprTrEntry.setDescription('An entry in the dvbt2OutPaprTrTable.')
dvbt2OutPaprTrIterations = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPaprTrIterations.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPaprTrIterations.setDescription('Indicates the maximum number of tone reservation repetitions \n                that are supported by the currently selected Bandwidth, FFT \n                and Guard Interval settings.\n                ')
dvbt2OutPaprTrClippingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPaprTrClippingThreshold.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPaprTrClippingThreshold.setDescription('Indicates the limit up to which the PAPR-TR algorithm operates. \n                The displayed value divided by 100 roughly corresponds to the \n                desired crest factor in dB.\n                ')
dvbt2OutPaprTrIterationsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPaprTrIterationsSupported.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPaprTrIterationsSupported.setDescription('Maximum number of iterations of tone reservation that are supported\n                for the adjusted bandwidth, FFT and guard interval.')
dvbt2OutPaprTrIterationsIA = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPaprTrIterationsIA.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPaprTrIterationsIA.setDescription('Description.')
dvbt2OutPaprTrIterationsReduced = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 8, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPaprTrIterationsReduced.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPaprTrIterationsReduced.setDescription('The number of iterations signalled by IA is too high.\n                The number of active iterations is reduced to the number of supported iterations.')
dvbt2OutPaprTrIterationsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutPaprTrIterationsActive.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutPaprTrIterationsActive.setDescription('Number of iterations of tone reservations per symbol.')
dvbt2OutFefTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 9), )
if mibBuilder.loadTexts: dvbt2OutFefTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutFefTable.setDescription('FEF (future extension frame) values.')
dvbt2OutFefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 9, 1), )
dvbt2ConfigurationEntry.registerAugmentions(("RS-XX9-DVBT2-MIB", "dvbt2OutFefEntry"))
dvbt2OutFefEntry.setIndexNames(*dvbt2ConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbt2OutFefEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutFefEntry.setDescription('An entry in the dvbt2OutFefTable.')
dvbt2OutFefOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 9, 1, 1), Dvbt2OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutFefOn.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutFefOn.setDescription('Indicates whether future extension frames are used.')
dvbt2OutFefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 9, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutFefType.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutFefType.setDescription('Indicates the type of the associated FEF part as a digit.')
dvbt2OutFefLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutFefLength.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutFefLength.setDescription('Indicates the length of the used FEF part as the number of periods T from the \n                beginning of the P1 symbol of the FEF part to the beginning of the P1 symbol \n                of the next T2 frame.')
dvbt2OutFefInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 3, 9, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2OutFefInterval.setStatus('current')
if mibBuilder.loadTexts: dvbt2OutFefInterval.setDescription('Indicates the number of T2-frames between two FEF parts.')
dvbt2CoderSub = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10))
dvbt2SubStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 1))
dvbt2SubStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 1, 2), )
if mibBuilder.loadTexts: dvbt2SubStateTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubStateTable.setDescription('DVB-T2 Coder-Sub state information.')
dvbt2SubStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 1, 2, 1), )
dvbt2StateEntry.registerAugmentions(("RS-XX9-DVBT2-MIB", "dvbt2SubStateEntry"))
dvbt2SubStateEntry.setIndexNames(*dvbt2StateEntry.getIndexNames())
if mibBuilder.loadTexts: dvbt2SubStateEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubStateEntry.setDescription('An entry in the dvbt2SubStateTable.')
dvbt2SubStInputDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("unlocked", 2), ("internal", 3), ("mpeg", 4), ("t2mi", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubStInputDetected.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubStInputDetected.setDescription('The current input state.\n                internal(3) represents the test generator.\n                unlocked(2), mpeg(4), t2mi(5): the status of the active input.')
dvbt2SubStInputMatched = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 5))).clone(namedValues=NamedValues(("off", 2), ("no", 4), ("yes", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubStInputMatched.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubStInputMatched.setDescription('Result of comparison of dvbt2StInputDetected\n                and dvbt2StInputRequired.')
dvbt2SubStConfigurationMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 1, 2, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubStConfigurationMsg.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubStConfigurationMsg.setDescription('Description.')
dvbt2SubSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 2))
dvbt2SubConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 2, 1), )
if mibBuilder.loadTexts: dvbt2SubConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubConfigurationTable.setDescription('DVB-T2 Coder-Sub configuration.')
dvbt2SubConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 2, 1, 1), )
dvbt2ConfigurationEntry.registerAugmentions(("RS-XX9-DVBT2-MIB", "dvbt2SubConfigurationEntry"))
dvbt2SubConfigurationEntry.setIndexNames(*dvbt2ConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbt2SubConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubConfigurationEntry.setDescription('An entry in the dvbt2SubConfigurationTable.')
dvbt2SubConfigurationT2MiInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("composite", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubConfigurationT2MiInterface.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubConfigurationT2MiInterface.setDescription('on(1) - Uses the incoming T2-MI stream from a DVB-T2 gateway\n                         to configure the Modulator.\n                off(2) - Uses the incoming MPEG transport stream directly\n                         as payload for single PLP.')
dvbt2SubConfigurationT2MiPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2SubConfigurationT2MiPID.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubConfigurationT2MiPID.setDescription('Only if dvbt2ConfigurationT2MiInterface is on(1):\n                the packet ID of the T2-MI elementary stream.')
dvbt2SubConfigurationT2MiSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2SubConfigurationT2MiSID.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubConfigurationT2MiSID.setDescription('Only if dvbt2FsT2Version is at least v131(5):\n                ')
dvbt2SubLocalizationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 2, 2), )
if mibBuilder.loadTexts: dvbt2SubLocalizationTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubLocalizationTable.setDescription('DVB-T2 Coder-Sub localization.')
dvbt2SubLocalizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 2, 2, 1), )
dvbt2ConfigurationEntry.registerAugmentions(("RS-XX9-DVBT2-MIB", "dvbt2SubLocalizationEntry"))
dvbt2SubLocalizationEntry.setIndexNames(*dvbt2ConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbt2SubLocalizationEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubLocalizationEntry.setDescription('An entry in the dvbt2SubLocalizationTable.')
dvbt2SubLocalizationTxIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2SubLocalizationTxIdentifier.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubLocalizationTxIdentifier.setDescription('Used to address a TV transmitter within a DVB-T2 network.')
dvbt2SubLocalizationCellIdSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 2, 2, 1, 4), Dvbt2CellIdSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2SubLocalizationCellIdSource.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubLocalizationCellIdSource.setDescription('Source for the cell ID.')
dvbt2SubLocalizationCellIdManual = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 2, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2SubLocalizationCellIdManual.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubLocalizationCellIdManual.setDescription('The cell ID used when dvbt2LocalizationCellIdSource is manual(1).\n                The cell ID can be changed without signal interruption.')
dvbt2SubLocalizationMisoGroupSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("manual", 2), ("ia", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2SubLocalizationMisoGroupSource.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubLocalizationMisoGroupSource.setDescription('The MISO group can be configured either manually directly on the transmitter\n                or automatically using the Individual Addressing (IA) data via the DVB_T2 gateway.\n                The group can be switched at any time without signal interruption.\n                \n                manual(2) - from dvbt2LocalizationMisoGroupManual\n                ia(3)     - from the individual addressing data\n                            of the DVB-T2 gateway stream')
dvbt2SubLocalizationMisoGroupManual = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5))).clone(namedValues=NamedValues(("group1", 4), ("group2", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2SubLocalizationMisoGroupManual.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubLocalizationMisoGroupManual.setDescription('The MISO group used when dvbt2LocalizationMisoGroupSource is manual(1).\n                The MISO group can be changed without signal interruption.')
dvbt2SubLocalizationL1FrequencySource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 2, 2, 1, 10), Dvbt2L1FrequencySource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2SubLocalizationL1FrequencySource.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubLocalizationL1FrequencySource.setDescription('See textual convention.\n                \n                If you select manual(1),\n                the value is given with dvbt2LocalizationL1FrequencyManual.')
dvbt2SubLocalizationL1FrequencyManual = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 2, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000000))).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2SubLocalizationL1FrequencyManual.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubLocalizationL1FrequencyManual.setDescription('Presetting of L1 frequency shift.')
dvbt2SubOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3))
dvbt2SubOutLocalizationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 2), )
if mibBuilder.loadTexts: dvbt2SubOutLocalizationTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutLocalizationTable.setDescription('DVB-T2 Coder-Sub localization\n                as signalled from the DVB-T2 gateway.')
dvbt2SubOutLocalizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 2, 1), )
dvbt2ConfigurationEntry.registerAugmentions(("RS-XX9-DVBT2-MIB", "dvbt2SubOutLocalizationEntry"))
dvbt2SubOutLocalizationEntry.setIndexNames(*dvbt2ConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbt2SubOutLocalizationEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutLocalizationEntry.setDescription('Description.')
dvbt2SubOutLocalizationCellIdSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 2, 1, 1), Dvbt2CellIdSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutLocalizationCellIdSource.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutLocalizationCellIdSource.setDescription('See textual convention.')
dvbt2SubOutLocalizationCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutLocalizationCellId.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutLocalizationCellId.setDescription('The cell ID that is actually transmitted.')
dvbt2SubOutLocalizationMisoGroupSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("manual", 2), ("ia", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutLocalizationMisoGroupSource.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutLocalizationMisoGroupSource.setDescription('Source for the MISO group:\n                manual(2) - from dvbt2LocalizationMisoGroupManual\n                ia(3)     - from the individual addressing data\n                            of the DVB-T2 gateway stream')
dvbt2SubOutLocalizationMisoGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("unused", 3), ("group1", 4), ("group2", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutLocalizationMisoGroup.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutLocalizationMisoGroup.setDescription('The actual MISO group for the transmitter.\n                In a MISO system the two transmitters have to be assigned\n                different groups.\n                In a SFN system several transmitters may belong to one group.')
dvbt2SubOutLocalizationNetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutLocalizationNetworkId.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutLocalizationNetworkId.setDescription('The actual network ID for the transmitter.')
dvbt2SubOutLocalizationSystemId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutLocalizationSystemId.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutLocalizationSystemId.setDescription('The actual system ID for the transmitter.')
dvbt2SubOutLocalizationL1Frequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 2, 1, 9), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutLocalizationL1Frequency.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutLocalizationL1Frequency.setDescription('Currently used L1 frequency with index 0.')
dvbt2SubOutLocalizationPaprTrSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("manual", 2), ("ia", 3), ("supported", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbt2SubOutLocalizationPaprTrSource.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutLocalizationPaprTrSource.setDescription('Description.')
dvbt2SubOutChannelTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 4), )
if mibBuilder.loadTexts: dvbt2SubOutChannelTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutChannelTable.setDescription('DVB-T2 Coder-Sub channel parameters\n                as signalled from the DVB-T2 gateway.')
dvbt2SubOutChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 4, 1), )
dvbt2ConfigurationEntry.registerAugmentions(("RS-XX9-DVBT2-MIB", "dvbt2SubOutChannelEntry"))
dvbt2SubOutChannelEntry.setIndexNames(*dvbt2ConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbt2SubOutChannelEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutChannelEntry.setDescription('Description.')
dvbt2SubOutChnTransmissionSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 4, 1, 3), Dvbt2TransmissionSystem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutChnTransmissionSystem.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutChnTransmissionSystem.setDescription('see textual convention')
dvbt2SubOutChnBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 4, 1, 4), Dvbt2ChannelBandwidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutChnBandwidth.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutChnBandwidth.setDescription('The channel bandwidth as signalled by the DVB-T2 gateway.')
dvbt2SubOutChnFFT = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 4, 1, 5), Dvbt2FftSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutChnFFT.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutChnFFT.setDescription('see textual convention')
dvbt2SubOutChnFftExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 4, 1, 6), Dvbt2OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutChnFftExtended.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutChnFftExtended.setDescription('When this field is on(1), the extended carrier mode is used.\n                If this field is off(2), the normal carrier mode is used.\n                Only for 8K, 16K or 32K FFT size.')
dvbt2SubOutChnGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 4, 1, 7), Dvbt2GuardInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutChnGuardInterval.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutChnGuardInterval.setDescription('see textual convention')
dvbt2SubOutChnPilotPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 4, 1, 8), Dvbt2PilotPattern()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutChnPilotPattern.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutChnPilotPattern.setDescription('see textual convention')
dvbt2SubOutChnPaprReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 4, 1, 9), Dvbt2PaprReduction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutChnPaprReduction.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutChnPaprReduction.setDescription('see textual convention')
dvbt2SubOutChnT2Profile = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("base", 3), ("baseLite", 4), ("lite", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutChnT2Profile.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutChnT2Profile.setDescription('The T2-profile used. The standard profile is T2-Base,\n                while T2-Lite has been introduced in T2 version 1.3.1.\n                T2-Lite is intended for mobile applications.\n                The T2-Base-Lite option is the intersection between T2-Base and T2-Lite,\n                i.e. a signal that is valid for both T2-Base and T2-Lite profiles.\n                The T2-Base-Lite profile will be signalled as a normal T2-Base signal,\n                but with the T2_BASE_LITE flag set in the L1-Pre signaling.')
dvbt2SubOutFrameStructureTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 5), )
if mibBuilder.loadTexts: dvbt2SubOutFrameStructureTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutFrameStructureTable.setDescription('DVB-T2 Coder-Sub frame structure\n                as signalled from the DVB-T2 gateway.')
dvbt2SubOutFrameStructureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 5, 1), )
dvbt2ConfigurationEntry.registerAugmentions(("RS-XX9-DVBT2-MIB", "dvbt2SubOutFrameStructureEntry"))
dvbt2SubOutFrameStructureEntry.setIndexNames(*dvbt2ConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbt2SubOutFrameStructureEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutFrameStructureEntry.setDescription('An entry in the dvbt2SubOutFrameStructureTable. ')
dvbt2SubOutFsDataSymbolsPerT2Frame = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutFsDataSymbolsPerT2Frame.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutFsDataSymbolsPerT2Frame.setDescription('The total number of symbols in a frame (excluding P1).\n                \n                If a T2-MI interface is used, this value is read-only.\n                In this case it is specified by the DVB-T2 gateway.')
dvbt2SubOutFsT2FramesPerSuperFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutFsT2FramesPerSuperFrame.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutFsT2FramesPerSuperFrame.setDescription('The number of T2-frames in a super-frame is a configurable parameter.\n                \n                If a T2-MI interface is used, this value is read-only.\n                In this case it is specified by the DVB-T2 gateway.')
dvbt2SubOutFsT2Version = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 5, 1, 5), Dvbt2T2Version()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutFsT2Version.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutFsT2Version.setDescription('If no T2-MI interface is used only version 1.1.1 is supported.')
dvbt2SubOutFsNumOfPLP = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutFsNumOfPLP.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutFsNumOfPLP.setDescription('The number of PLPs carried within the super-frame.')
dvbt2SubOutFsNumOfAux = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutFsNumOfAux.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutFsNumOfAux.setDescription('number of auxiliary streams')
dvbt2SubOutL1Table = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 6), )
if mibBuilder.loadTexts: dvbt2SubOutL1Table.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutL1Table.setDescription('DVB-T2 Coder-Sub layer 1 parameters\n                as signalled from the DVB-T2 gateway.')
dvbt2SubOutL1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 6, 1), )
dvbt2ConfigurationEntry.registerAugmentions(("RS-XX9-DVBT2-MIB", "dvbt2SubOutL1Entry"))
dvbt2SubOutL1Entry.setIndexNames(*dvbt2ConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbt2SubOutL1Entry.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutL1Entry.setDescription('An entry in the dvbt2SubOutL1Table.')
dvbt2SubOutL1Modulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 6, 1, 3), Dvbt2Layer1Modulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutL1Modulation.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutL1Modulation.setDescription('The constellation of the L1-post signalling data block.')
dvbt2SubOutL1CodeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 6, 1, 4), Dvbt2Layer1CodeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutL1CodeRate.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutL1CodeRate.setDescription('The coding of the L1-post signalling data block.')
dvbt2SubOutL1Repetition = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 6, 1, 6), Dvbt2OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutL1Repetition.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutL1Repetition.setDescription('Repetition of L1-post dynamic data.')
dvbt2SubOutL1PostScrambled = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 6, 1, 7), Dvbt2OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutL1PostScrambled.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutL1PostScrambled.setDescription('Shows whether signalling of L1-post is scrambled.')
dvbt2SubOutPlpTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 7), )
if mibBuilder.loadTexts: dvbt2SubOutPlpTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutPlpTable.setDescription('DVB-T2 Coder-Sub PLP parameters\n                as signalled from the DVB-T2 gateway.')
dvbt2SubOutPlpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 7, 1), ).setIndexNames((0, "RS-XX9-DVBT2-MIB", "dvbt2ConfigurationTxIdx"), (0, "RS-XX9-DVBT2-MIB", "dvbt2ConfigurationExcIdx"), (0, "RS-XX9-DVBT2-MIB", "dvbt2SubOutPlpIdx"))
if mibBuilder.loadTexts: dvbt2SubOutPlpEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutPlpEntry.setDescription('An entry in the dvbt2SubOutPlpTable.')
dvbt2SubOutPlpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: dvbt2SubOutPlpIdx.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutPlpIdx.setDescription('The PLP number.\n                This is a helper column and therefore not-accessible.')
dvbt2SubOutPlpID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutPlpID.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutPlpID.setDescription('uniquely identifies a PLP within a T2 system')
dvbt2SubOutPlpGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutPlpGroupID.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutPlpGroupID.setDescription('identifies with which PLP group within the T2 system\n                the current PLP is associated. This can be used by a\n                receiver to link the data PLP to its associated common PLP,\n                which will have the same PLP Group ID.\n                ')
dvbt2SubOutPlpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 7, 1, 5), Dvbt2PlpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutPlpType.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutPlpType.setDescription('Indicates the set Physical Layer Pipe type.')
dvbt2SubOutPlpPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("reserved", 2), ("gfps", 3), ("gcs", 4), ("gse", 5), ("ts", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutPlpPayloadType.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutPlpPayloadType.setDescription('Each input PLP may take one of the following formats:\n                gfps(3) - Generic Fixed-length Packetized Stream\n                          This form is retained for compatibility with DVB-S2,\n                          but it is expected that GSE would now be used instead.\n                gcs(4)  - Generic Continuous Stream\n                          A variable length packet stream where the modulator\n                          is not aware of the packet boundaries.\n                gse(5)  - Generic Encapsulated Stream\n                ts(6)   - Transport Stream')
dvbt2SubOutPlpConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 7, 1, 7), Dvbt2Modulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutPlpConstellation.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutPlpConstellation.setDescription('Indicates the set modulation mode. \n                QPSK is extremely fail-safe, but has only a low data rate. \n                256QAM can transmit very high data rates and is \n                recommended if few faults are expected on the \n                transmission link. \n                ')
dvbt2SubOutPlpRotation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 7, 1, 8), Dvbt2OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutPlpRotation.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutPlpRotation.setDescription('Constellation rotation.')
dvbt2SubOutPlpCodeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 7, 1, 9), Dvbt2CodeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutPlpCodeRate.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutPlpCodeRate.setDescription('Indicates the set code rate. The code rate is used to set the ratio \n                of information data to <error correction values + information data>. \n                1/2 provides the greatest error correction and the lowest data \n                transfer rate; \n                5/6 provides the lowest error correction and the greatest data \n                transfer rate.\n                ')
dvbt2SubOutPlpFEC = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 7, 1, 10), Dvbt2FEC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutPlpFEC.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutPlpFEC.setDescription('Indicates the set error correction algorithm (FEC).  If a T2-MI interface \n                is used, this value is fixed by the DVB-T2 gateway.\n                ')
dvbt2SubOutPlpTimeInterleaverType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 7, 1, 12), Dvbt2TimeInterleaverType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutPlpTimeInterleaverType.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutPlpTimeInterleaverType.setDescription('single(1) - Maps each interleaving frame directly  to a T2 frame.\n                multi(2)  - Maps each interleaving frame to more than one T2 frame.')
dvbt2SubOutPlpTimeInterleaverLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 7, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutPlpTimeInterleaverLength.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutPlpTimeInterleaverLength.setDescription('Defines the number of time interleaver blocks (TIB)\n                within the time interleaving frame.')
dvbt2SubOutPlpBasebandMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 7, 1, 14), Dvbt2BasebandMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutPlpBasebandMode.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutPlpBasebandMode.setDescription('see textual convention')
dvbt2SubOutPaprTrTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 8), )
if mibBuilder.loadTexts: dvbt2SubOutPaprTrTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutPaprTrTable.setDescription('Coder-Sub PAPR (Peak to Average Power Ratio) reduction using tone reservation parameters.')
dvbt2SubOutPaprTrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 8, 1), )
dvbt2ConfigurationEntry.registerAugmentions(("RS-XX9-DVBT2-MIB", "dvbt2SubOutPaprTrEntry"))
dvbt2SubOutPaprTrEntry.setIndexNames(*dvbt2ConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbt2SubOutPaprTrEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutPaprTrEntry.setDescription('An entry in the dvbt2SubOutPaprTrTable.')
dvbt2SubOutPaprTrIterations = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutPaprTrIterations.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutPaprTrIterations.setDescription('Indicates the maximum number of tone reservation repetitions \n                that are supported by the currently selected Bandwidth, FFT \n                and Guard Interval settings.\n                ')
dvbt2SubOutPaprTrClippingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutPaprTrClippingThreshold.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutPaprTrClippingThreshold.setDescription('Indicates the limit up to which the PAPR-TR algorithm operates. \n                The displayed value divided by 100 roughly corresponds to the \n                desired crest factor in dB.\n                ')
dvbt2SubOutPaprTrIterationsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutPaprTrIterationsSupported.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutPaprTrIterationsSupported.setDescription('Maximum number of iterations of tone reservation that are supported\n                for the adjusted bandwidth, FFT and guard interval.')
dvbt2SubOutPaprTrIterationsIA = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutPaprTrIterationsIA.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutPaprTrIterationsIA.setDescription('Description.')
dvbt2SubOutPaprTrIterationsReduced = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 8, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutPaprTrIterationsReduced.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutPaprTrIterationsReduced.setDescription('The number of iterations signalled by IA is too high.\n                The number of active iterations is reduced to the number of supported iterations.')
dvbt2SubOutPaprTrIterationsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutPaprTrIterationsActive.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutPaprTrIterationsActive.setDescription('Number of iterations of tone reservations per symbol.')
dvbt2SubOutFefTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 9), )
if mibBuilder.loadTexts: dvbt2SubOutFefTable.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutFefTable.setDescription('Coder-Sub FEF (future extension frame) values.')
dvbt2SubOutFefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 9, 1), )
dvbt2ConfigurationEntry.registerAugmentions(("RS-XX9-DVBT2-MIB", "dvbt2SubOutFefEntry"))
dvbt2SubOutFefEntry.setIndexNames(*dvbt2ConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dvbt2SubOutFefEntry.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutFefEntry.setDescription('An entry in the dvbt2SubOutFefTable')
dvbt2SubOutFefOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 9, 1, 1), Dvbt2OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutFefOn.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutFefOn.setDescription('Indicates whether future extension frames are used.')
dvbt2SubOutFefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 9, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutFefType.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutFefType.setDescription('Indicates the type of the associated FEF part as a digit.')
dvbt2SubOutFefLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutFefLength.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutFefLength.setDescription('Indicates the length of the used FEF part as the number of periods T from the \n                beginning of the P1 symbol of the FEF part to the beginning of the P1 symbol \n                of the next T2 frame.')
dvbt2SubOutFefInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 1, 10, 3, 9, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvbt2SubOutFefInterval.setStatus('current')
if mibBuilder.loadTexts: dvbt2SubOutFefInterval.setDescription('Indicates the number of T2-frames between two FEF parts.')
rsXx9Dvbt2Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 2))
rsXx9Dvbt2Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 2, 1))
dvbt2BasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 2, 1, 1)).setObjects(("RS-XX9-DVBT2-MIB", "dvbt2ObjBasic"), ("RS-XX9-DVBT2-MIB", "dvbt2NotifyBasic"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dvbt2BasicCompliance = dvbt2BasicCompliance.setStatus('current')
if mibBuilder.loadTexts: dvbt2BasicCompliance.setDescription('The compliance statement for XX9000 DVB-T2 exciters.')
rsXx9Dvbt2Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 2, 2))
dvbt2ObjBasic = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 2, 2, 1)).setObjects(("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationName"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationMask"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationPriority"), ("RS-XX9-DVBT2-MIB", "dvbt2StatusNotificationState"), ("RS-XX9-DVBT2-MIB", "dvbt2ConfigurationT2MiInterface"), ("RS-XX9-DVBT2-MIB", "dvbt2ConfigurationT2MiPID"), ("RS-XX9-DVBT2-MIB", "dvbt2LocalizationTxIdentifier"), ("RS-XX9-DVBT2-MIB", "dvbt2LocalizationCellIdSource"), ("RS-XX9-DVBT2-MIB", "dvbt2LocalizationCellIdManual"), ("RS-XX9-DVBT2-MIB", "dvbt2LocalizationMisoGroupSource"), ("RS-XX9-DVBT2-MIB", "dvbt2LocalizationMisoGroupManual"), ("RS-XX9-DVBT2-MIB", "dvbt2LocalizationNetworkIdManual"), ("RS-XX9-DVBT2-MIB", "dvbt2LocalizationSystemIdManual"), ("RS-XX9-DVBT2-MIB", "dvbt2IaTimeOffset"), ("RS-XX9-DVBT2-MIB", "dvbt2IaTimeOffsetSource"), ("RS-XX9-DVBT2-MIB", "dvbt2IaFrequencyOffset"), ("RS-XX9-DVBT2-MIB", "dvbt2IaFrequencyOffsetSource"), ("RS-XX9-DVBT2-MIB", "dvbt2IaCellID"), ("RS-XX9-DVBT2-MIB", "dvbt2IaCellIdSource"), ("RS-XX9-DVBT2-MIB", "dvbt2FsDataSymbolsPerT2Frame"), ("RS-XX9-DVBT2-MIB", "dvbt2FsT2FramesPerSuperFrame"), ("RS-XX9-DVBT2-MIB", "dvbt2L1Modulation"), ("RS-XX9-DVBT2-MIB", "dvbt2L1CodeRate"), ("RS-XX9-DVBT2-MIB", "dvbt2L1FEC"), ("RS-XX9-DVBT2-MIB", "dvbt2L1Repetition"), ("RS-XX9-DVBT2-MIB", "dvbt2StInputDetected"), ("RS-XX9-DVBT2-MIB", "dvbt2StInputMatched"), ("RS-XX9-DVBT2-MIB", "dvbt2StInputRequired"), ("RS-XX9-DVBT2-MIB", "dvbt2Plp1ID"), ("RS-XX9-DVBT2-MIB", "dvbt2Plp1GroupID"), ("RS-XX9-DVBT2-MIB", "dvbt2Plp1Type"), ("RS-XX9-DVBT2-MIB", "dvbt2Plp1Constellation"), ("RS-XX9-DVBT2-MIB", "dvbt2Plp1Rotation"), ("RS-XX9-DVBT2-MIB", "dvbt2Plp1CodeRate"), ("RS-XX9-DVBT2-MIB", "dvbt2Plp1FEC"), ("RS-XX9-DVBT2-MIB", "dvbt2Plp1TimeInterleaverType"), ("RS-XX9-DVBT2-MIB", "dvbt2Plp1TimeInterleaverLength"), ("RS-XX9-DVBT2-MIB", "dvbt2Plp1BasebandMode"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPlpBasebandMode"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPlpTimeInterleaverLength"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPlpTimeInterleaverType"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPlpFEC"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPlpCodeRate"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPlpRotation"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPlpConstellation"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPlpPayloadType"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPlpType"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPlpGroupID"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPlpID"), ("RS-XX9-DVBT2-MIB", "dvbt2OutL1Repetition"), ("RS-XX9-DVBT2-MIB", "dvbt2OutL1FEC"), ("RS-XX9-DVBT2-MIB", "dvbt2OutL1CodeRate"), ("RS-XX9-DVBT2-MIB", "dvbt2OutL1Modulation"), ("RS-XX9-DVBT2-MIB", "dvbt2LocalizationL1FrequencyManual"), ("RS-XX9-DVBT2-MIB", "dvbt2OutLocalizationCellId"), ("RS-XX9-DVBT2-MIB", "dvbt2OutLocalizationMisoGroup"), ("RS-XX9-DVBT2-MIB", "dvbt2OutLocalizationNetworkId"), ("RS-XX9-DVBT2-MIB", "dvbt2OutLocalizationSystemId"), ("RS-XX9-DVBT2-MIB", "dvbt2OutLocalizationL1Frequency"), ("RS-XX9-DVBT2-MIB", "dvbt2OutFsT2Version"), ("RS-XX9-DVBT2-MIB", "dvbt2LocalizationL1FrequencySource"), ("RS-XX9-DVBT2-MIB", "dvbt2OutLocalizationMisoGroupSource"), ("RS-XX9-DVBT2-MIB", "dvbt2OutLocalizationCellIdSource"), ("RS-XX9-DVBT2-MIB", "dvbt2OutLocalizationL1FrequencySource"), ("RS-XX9-DVBT2-MIB", "dvbt2OutFsT2FramesPerSuperFrame"), ("RS-XX9-DVBT2-MIB", "dvbt2OutLocalizationTxDelayOffsetSource"), ("RS-XX9-DVBT2-MIB", "dvbt2LocalizationTxDelayOffsetSource"), ("RS-XX9-DVBT2-MIB", "dvbt2FsT2Version"), ("RS-XX9-DVBT2-MIB", "dvbt2OutLocalizationTxDelayOffset"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPlpFrameInterval"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPlpBasebandPayloadPadding"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPlpNullPacketDeletion"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPlpCmType"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPlpInBandFlag"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPlpInBandASig"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPlpInBandBSig"), ("RS-XX9-DVBT2-MIB", "dvbt2ConfigurationT2MiSID"), ("RS-XX9-DVBT2-MIB", "dvbt2OutChnT2BaseLite"), ("RS-XX9-DVBT2-MIB", "dvbt2OutChnInputStreamTypes"), ("RS-XX9-DVBT2-MIB", "dvbt2OutChnRegenerationFlag"), ("RS-XX9-DVBT2-MIB", "dvbt2OutFsSubSlicesPerFrame"), ("RS-XX9-DVBT2-MIB", "dvbt2OutFsNumOfPLP"), ("RS-XX9-DVBT2-MIB", "dvbt2OutFsNumOfAux"), ("RS-XX9-DVBT2-MIB", "dvbt2OutL1PostScrambled"), ("RS-XX9-DVBT2-MIB", "dvbt2OutL1PostExtension"), ("RS-XX9-DVBT2-MIB", "dvbt2OutChnPreamble"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPlpNumOfOtherPlpInBand"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPaprTrIterations"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPaprTrClippingThreshold"), ("RS-XX9-DVBT2-MIB", "dvbt2OutFefOn"), ("RS-XX9-DVBT2-MIB", "dvbt2OutFefType"), ("RS-XX9-DVBT2-MIB", "dvbt2OutFefLength"), ("RS-XX9-DVBT2-MIB", "dvbt2OutFefInterval"), ("RS-XX9-DVBT2-MIB", "dvbt2OutChnT2Profile"), ("RS-XX9-DVBT2-MIB", "dvbt2TestMode"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPaprTrIterationsSupported"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPaprTrIterationsIA"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPaprTrIterationsReduced"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPaprTrIterationsActive"), ("RS-XX9-DVBT2-MIB", "dvbt2ConfigurationT2ConfigAdaption"), ("RS-XX9-DVBT2-MIB", "dvbt2StConfigAdaptionState"), ("RS-XX9-DVBT2-MIB", "dvbt2ConfigurationT2MiDejitterBufDelay"), ("RS-XX9-DVBT2-MIB", "dvbt2OutLocalizationPaprTrSource"), ("RS-XX9-DVBT2-MIB", "dvbt2LocalizationPaprTrSource"), ("RS-XX9-DVBT2-MIB", "dvbt2StResidualDelay"), ("RS-XX9-DVBT2-MIB", "dvbt2StDejitterBufDelay"), ("RS-XX9-DVBT2-MIB", "dvbt2StConfigurationMsg"), ("RS-XX9-DVBT2-MIB", "dvbt2OutFsDataSymbolsPerT2Frame"), ("RS-XX9-DVBT2-MIB", "dvbt2ChnTransmissionSystem"), ("RS-XX9-DVBT2-MIB", "dvbt2ChnBandwidth"), ("RS-XX9-DVBT2-MIB", "dvbt2ChnFFT"), ("RS-XX9-DVBT2-MIB", "dvbt2ChnFftExtended"), ("RS-XX9-DVBT2-MIB", "dvbt2ChnGuardInterval"), ("RS-XX9-DVBT2-MIB", "dvbt2ChnPilotPattern"), ("RS-XX9-DVBT2-MIB", "dvbt2ChnPaprReduction"), ("RS-XX9-DVBT2-MIB", "dvbt2OutChnTransmissionSystem"), ("RS-XX9-DVBT2-MIB", "dvbt2OutChnBandwidth"), ("RS-XX9-DVBT2-MIB", "dvbt2OutChnFFT"), ("RS-XX9-DVBT2-MIB", "dvbt2OutChnFftExtended"), ("RS-XX9-DVBT2-MIB", "dvbt2OutChnGuardInterval"), ("RS-XX9-DVBT2-MIB", "dvbt2OutChnPilotPattern"), ("RS-XX9-DVBT2-MIB", "dvbt2OutChnPaprReduction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dvbt2ObjBasic = dvbt2ObjBasic.setStatus('current')
if mibBuilder.loadTexts: dvbt2ObjBasic.setDescription('Basic objects group.')
dvbt2NotifyBasic = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 2, 2, 2)).setObjects(("RS-XX9-DVBT2-MIB", "dvbt2L1State"), ("RS-XX9-DVBT2-MIB", "dvbt2IaState"), ("RS-XX9-DVBT2-MIB", "dvbt2ConfigurationValid"), ("RS-XX9-DVBT2-MIB", "dvbt2ConfigurationSupported"), ("RS-XX9-DVBT2-MIB", "dvbt2ConfigurationMatched"), ("RS-XX9-DVBT2-MIB", "dvbt2EncoderSummary"), ("RS-XX9-DVBT2-MIB", "dvbt2Test"), ("RS-XX9-DVBT2-MIB", "dvbt2SupportedPlps"), ("RS-XX9-DVBT2-MIB", "dvbt2SupportedTrIterations"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dvbt2NotifyBasic = dvbt2NotifyBasic.setStatus('current')
if mibBuilder.loadTexts: dvbt2NotifyBasic.setDescription('Basic notifications group.')
dvbt2ObjObsoleted = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 2, 2, 3)).setObjects(("RS-XX9-DVBT2-MIB", "dvbt2TestGeneration"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPlpFecBlocks"), ("RS-XX9-DVBT2-MIB", "dvbt2OutPlpISSY"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dvbt2ObjObsoleted = dvbt2ObjObsoleted.setStatus('obsolete')
if mibBuilder.loadTexts: dvbt2ObjObsoleted.setDescription('Obsoleted objects group.')
dvbt2ObjSubBasic = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 2, 2, 4)).setObjects(("RS-XX9-DVBT2-MIB", "dvbt2SubStInputDetected"), ("RS-XX9-DVBT2-MIB", "dvbt2SubStInputMatched"), ("RS-XX9-DVBT2-MIB", "dvbt2SubStConfigurationMsg"), ("RS-XX9-DVBT2-MIB", "dvbt2SubConfigurationT2MiInterface"), ("RS-XX9-DVBT2-MIB", "dvbt2SubConfigurationT2MiPID"), ("RS-XX9-DVBT2-MIB", "dvbt2SubConfigurationT2MiSID"), ("RS-XX9-DVBT2-MIB", "dvbt2SubLocalizationTxIdentifier"), ("RS-XX9-DVBT2-MIB", "dvbt2SubLocalizationCellIdSource"), ("RS-XX9-DVBT2-MIB", "dvbt2SubLocalizationCellIdManual"), ("RS-XX9-DVBT2-MIB", "dvbt2SubLocalizationMisoGroupSource"), ("RS-XX9-DVBT2-MIB", "dvbt2SubLocalizationMisoGroupManual"), ("RS-XX9-DVBT2-MIB", "dvbt2SubLocalizationL1FrequencySource"), ("RS-XX9-DVBT2-MIB", "dvbt2SubLocalizationL1FrequencyManual"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutLocalizationCellIdSource"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutLocalizationCellId"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutLocalizationMisoGroupSource"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutLocalizationMisoGroup"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutLocalizationNetworkId"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutLocalizationSystemId"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutLocalizationL1Frequency"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutLocalizationPaprTrSource"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutChnTransmissionSystem"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutChnBandwidth"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutChnFFT"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutChnFftExtended"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutChnGuardInterval"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutChnPilotPattern"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutChnPaprReduction"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutChnT2Profile"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutFsDataSymbolsPerT2Frame"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutFsT2FramesPerSuperFrame"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutFsT2Version"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutFsNumOfPLP"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutFsNumOfAux"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutL1Modulation"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutL1CodeRate"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutL1Repetition"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutL1PostScrambled"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutPlpID"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutPlpGroupID"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutPlpType"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutPlpPayloadType"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutPlpConstellation"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutPlpRotation"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutPlpCodeRate"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutPlpFEC"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutPlpTimeInterleaverType"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutPlpTimeInterleaverLength"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutPlpBasebandMode"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutPaprTrIterations"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutPaprTrClippingThreshold"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutPaprTrIterationsSupported"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutPaprTrIterationsIA"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutPaprTrIterationsReduced"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutPaprTrIterationsActive"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutFefOn"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutFefType"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutFefLength"), ("RS-XX9-DVBT2-MIB", "dvbt2SubOutFefInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dvbt2ObjSubBasic = dvbt2ObjSubBasic.setStatus('current')
if mibBuilder.loadTexts: dvbt2ObjSubBasic.setDescription('Description.')
dvbt2NotifySubBasic = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 2, 2, 5)).setObjects(("RS-XX9-DVBT2-MIB", "dvbt2CompositeSummary"), ("RS-XX9-DVBT2-MIB", "dvbt2CompositeProfiles"), ("RS-XX9-DVBT2-MIB", "dvbt2CompositeFrameLength"), ("RS-XX9-DVBT2-MIB", "dvbt2SubIaState"), ("RS-XX9-DVBT2-MIB", "dvbt2SubConfigurationValid"), ("RS-XX9-DVBT2-MIB", "dvbt2SubConfigurationSupported"), ("RS-XX9-DVBT2-MIB", "dvbt2SubConfigurationMatched"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dvbt2NotifySubBasic = dvbt2NotifySubBasic.setStatus('current')
if mibBuilder.loadTexts: dvbt2NotifySubBasic.setDescription('Description.')
dvbt2NotifObsoleted = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5, 2, 2, 6)).setObjects(("RS-XX9-DVBT2-MIB", "dvbt2T2MiTimeInterleaverBuffer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dvbt2NotifObsoleted = dvbt2NotifObsoleted.setStatus('obsolete')
if mibBuilder.loadTexts: dvbt2NotifObsoleted.setDescription('Obsoleted notifications group.')
mibBuilder.exportSymbols("RS-XX9-DVBT2-MIB", dvbt2SubOutFsT2Version=dvbt2SubOutFsT2Version, dvbt2SubOutLocalizationCellIdSource=dvbt2SubOutLocalizationCellIdSource, dvbt2StatusNotificationEntry=dvbt2StatusNotificationEntry, dvbt2FsDataSymbolsPerT2Frame=dvbt2FsDataSymbolsPerT2Frame, dvbt2OutLocalizationCellId=dvbt2OutLocalizationCellId, dvbt2ConfigurationT2MiInterface=dvbt2ConfigurationT2MiInterface, dvbt2OutLocalizationL1Frequency=dvbt2OutLocalizationL1Frequency, dvbt2SubStatus=dvbt2SubStatus, Dvbt2BasebandMode=Dvbt2BasebandMode, dvbt2ChannelEntry=dvbt2ChannelEntry, dvbt2OutPaprTrIterations=dvbt2OutPaprTrIterations, dvbt2OutFefEntry=dvbt2OutFefEntry, dvbt2OutPlpBasebandPayloadPadding=dvbt2OutPlpBasebandPayloadPadding, dvbt2OutPlpInBandBSig=dvbt2OutPlpInBandBSig, dvbt2SubOutFsNumOfAux=dvbt2SubOutFsNumOfAux, dvbt2IaCellID=dvbt2IaCellID, dvbt2ChnPaprReduction=dvbt2ChnPaprReduction, dvbt2SubOutPlpRotation=dvbt2SubOutPlpRotation, dvbt2L1Table=dvbt2L1Table, dvbt2OutPlpTimeInterleaverLength=dvbt2OutPlpTimeInterleaverLength, dvbt2OutFrameStructureEntry=dvbt2OutFrameStructureEntry, Dvbt2PaprReduction=Dvbt2PaprReduction, Dvbt2L1FrequencySource=Dvbt2L1FrequencySource, dvbt2OutChnPilotPattern=dvbt2OutChnPilotPattern, dvbt2SubOutPlpGroupID=dvbt2SubOutPlpGroupID, dvbt2Plp1CodeRate=dvbt2Plp1CodeRate, dvbt2Plp1Type=dvbt2Plp1Type, dvbt2LocalizationCellIdManual=dvbt2LocalizationCellIdManual, dvbt2ConfigurationValid=dvbt2ConfigurationValid, dvbt2OutChnPaprReduction=dvbt2OutChnPaprReduction, dvbt2StateTable=dvbt2StateTable, dvbt2OutPlpFrameInterval=dvbt2OutPlpFrameInterval, dvbt2SubStConfigurationMsg=dvbt2SubStConfigurationMsg, dvbt2SubOutFrameStructureTable=dvbt2SubOutFrameStructureTable, dvbt2OutPlpNullPacketDeletion=dvbt2OutPlpNullPacketDeletion, dvbt2ConfigurationSupported=dvbt2ConfigurationSupported, dvbt2L1Modulation=dvbt2L1Modulation, dvbt2OutPlpISSY=dvbt2OutPlpISSY, dvbt2SubOutPlpPayloadType=dvbt2SubOutPlpPayloadType, Dvbt2Layer1Modulation=Dvbt2Layer1Modulation, dvbt2LocalizationMisoGroupManual=dvbt2LocalizationMisoGroupManual, dvbt2L1Entry=dvbt2L1Entry, dvbt2ConfigurationExcIdx=dvbt2ConfigurationExcIdx, dvbt2OutLocalizationMisoGroupSource=dvbt2OutLocalizationMisoGroupSource, dvbt2OutPlpTable=dvbt2OutPlpTable, dvbt2OutPlpNumOfOtherPlpInBand=dvbt2OutPlpNumOfOtherPlpInBand, dvbt2LocalizationL1FrequencyManual=dvbt2LocalizationL1FrequencyManual, dvbt2StatusNotificationTxIdx=dvbt2StatusNotificationTxIdx, dvbt2OutPlpRotation=dvbt2OutPlpRotation, dvbt2SubConfigurationEntry=dvbt2SubConfigurationEntry, dvbt2OutPlpPayloadType=dvbt2OutPlpPayloadType, dvbt2SubOutPlpTimeInterleaverLength=dvbt2SubOutPlpTimeInterleaverLength, dvbt2SubOutFsNumOfPLP=dvbt2SubOutFsNumOfPLP, dvbt2StatusNotificationMask=dvbt2StatusNotificationMask, dvbt2CompositeFrameLength=dvbt2CompositeFrameLength, dvbt2NotifySubBasic=dvbt2NotifySubBasic, dvbt2StatusNotificationPriority=dvbt2StatusNotificationPriority, dvbt2ConfigurationT2MiSID=dvbt2ConfigurationT2MiSID, dvbt2SubLocalizationCellIdManual=dvbt2SubLocalizationCellIdManual, dvbt2SubOutPlpBasebandMode=dvbt2SubOutPlpBasebandMode, dvbt2OutPlpType=dvbt2OutPlpType, dvbt2Plp1FEC=dvbt2Plp1FEC, dvbt2OutL1Modulation=dvbt2OutL1Modulation, dvbt2OutFefType=dvbt2OutFefType, dvbt2SubOutPaprTrEntry=dvbt2SubOutPaprTrEntry, dvbt2SubOutPaprTrIterationsReduced=dvbt2SubOutPaprTrIterationsReduced, dvbt2OutL1Entry=dvbt2OutL1Entry, dvbt2SubOutLocalizationTable=dvbt2SubOutLocalizationTable, dvbt2SubIaState=dvbt2SubIaState, dvbt2IaFrequencyOffset=dvbt2IaFrequencyOffset, dvbt2LocalizationTable=dvbt2LocalizationTable, dvbt2OutLocalizationCellIdSource=dvbt2OutLocalizationCellIdSource, dvbt2SubOutLocalizationNetworkId=dvbt2SubOutLocalizationNetworkId, Dvbt2GuardInterval=Dvbt2GuardInterval, dvbt2SubOutChnPilotPattern=dvbt2SubOutChnPilotPattern, dvbt2OutL1Repetition=dvbt2OutL1Repetition, dvbt2SubOutL1Table=dvbt2SubOutL1Table, dvbt2SubOutPaprTrIterationsActive=dvbt2SubOutPaprTrIterationsActive, dvbt2ObjObsoleted=dvbt2ObjObsoleted, dvbt2SubOutPlpConstellation=dvbt2SubOutPlpConstellation, Dvbt2TimeInterleaverType=Dvbt2TimeInterleaverType, Dvbt2Layer1FEC=Dvbt2Layer1FEC, dvbt2LocalizationCellIdSource=dvbt2LocalizationCellIdSource, dvbt2SubOutPlpCodeRate=dvbt2SubOutPlpCodeRate, dvbt2SubOutChnPaprReduction=dvbt2SubOutChnPaprReduction, dvbt2SubOutPaprTrIterationsIA=dvbt2SubOutPaprTrIterationsIA, dvbt2OutChnGuardInterval=dvbt2OutChnGuardInterval, dvbt2OutFsDataSymbolsPerT2Frame=dvbt2OutFsDataSymbolsPerT2Frame, Dvbt2PilotPattern=Dvbt2PilotPattern, dvbt2OutChnPreamble=dvbt2OutChnPreamble, dvbt2SubOutL1Entry=dvbt2SubOutL1Entry, dvbt2OutPaprTrIterationsActive=dvbt2OutPaprTrIterationsActive, dvbt2SubStInputDetected=dvbt2SubStInputDetected, dvbt2SubOutLocalizationCellId=dvbt2SubOutLocalizationCellId, dvbt2OutLocalizationNetworkId=dvbt2OutLocalizationNetworkId, rsXx9Dvbt2Conformance=rsXx9Dvbt2Conformance, dvbt2StResidualDelay=dvbt2StResidualDelay, dvbt2SubStateEntry=dvbt2SubStateEntry, dvbt2OutPlpCmType=dvbt2OutPlpCmType, dvbt2SubConfigurationSupported=dvbt2SubConfigurationSupported, dvbt2OutLocalizationPaprTrSource=dvbt2OutLocalizationPaprTrSource, dvbt2OutPlpGroupID=dvbt2OutPlpGroupID, dvbt2OutPlpBasebandMode=dvbt2OutPlpBasebandMode, dvbt2StConfigAdaptionState=dvbt2StConfigAdaptionState, dvbt2SubOutLocalizationL1Frequency=dvbt2SubOutLocalizationL1Frequency, dvbt2LocalizationL1FrequencySource=dvbt2LocalizationL1FrequencySource, dvbt2OutLocalizationSystemId=dvbt2OutLocalizationSystemId, dvbt2SubLocalizationCellIdSource=dvbt2SubLocalizationCellIdSource, dvbt2OutFsSubSlicesPerFrame=dvbt2OutFsSubSlicesPerFrame, dvbt2SubOutPlpEntry=dvbt2SubOutPlpEntry, dvbt2LocalizationTxIdentifier=dvbt2LocalizationTxIdentifier, dvbt2ObjBasic=dvbt2ObjBasic, dvbt2BasicCompliance=dvbt2BasicCompliance, dvbt2OutChnRegenerationFlag=dvbt2OutChnRegenerationFlag, dvbt2OutPlpEntry=dvbt2OutPlpEntry, dvbt2SupportedPlps=dvbt2SupportedPlps, Dvbt2TxDelayOffsetSource=Dvbt2TxDelayOffsetSource, dvbt2ChnTransmissionSystem=dvbt2ChnTransmissionSystem, dvbt2OutL1FEC=dvbt2OutL1FEC, dvbt2LocalizationEntry=dvbt2LocalizationEntry, dvbt2Plp1ID=dvbt2Plp1ID, dvbt2SubOutput=dvbt2SubOutput, dvbt2OutFsNumOfPLP=dvbt2OutFsNumOfPLP, dvbt2SubOutPaprTrIterationsSupported=dvbt2SubOutPaprTrIterationsSupported, dvbt2SubLocalizationMisoGroupSource=dvbt2SubLocalizationMisoGroupSource, dvbt2StatusNotificationName=dvbt2StatusNotificationName, dvbt2OutLocalizationL1FrequencySource=dvbt2OutLocalizationL1FrequencySource, dvbt2OutPlpIdx=dvbt2OutPlpIdx, dvbt2TestMode=dvbt2TestMode, Dvbt2CellIdSource=Dvbt2CellIdSource, dvbt2SubLocalizationL1FrequencySource=dvbt2SubLocalizationL1FrequencySource, dvbt2SubOutChnT2Profile=dvbt2SubOutChnT2Profile, dvbt2SubOutL1PostScrambled=dvbt2SubOutL1PostScrambled, dvbt2IaTimeOffset=dvbt2IaTimeOffset, dvbt2OutFsNumOfAux=dvbt2OutFsNumOfAux, Dvbt2TransmissionSystem=Dvbt2TransmissionSystem, dvbt2OutFefOn=dvbt2OutFefOn, dvbt2IndividualAddressingEntry=dvbt2IndividualAddressingEntry, dvbt2OutLocalizationTable=dvbt2OutLocalizationTable, dvbt2SubOutFefEntry=dvbt2SubOutFefEntry, dvbt2StateEntry=dvbt2StateEntry, rsXx9Dvbt2MibModule=rsXx9Dvbt2MibModule, dvbt2Plp1TimeInterleaverType=dvbt2Plp1TimeInterleaverType, dvbt2OutPlpID=dvbt2OutPlpID, dvbt2SubConfigurationT2MiPID=dvbt2SubConfigurationT2MiPID, dvbt2OutPlpInBandFlag=dvbt2OutPlpInBandFlag, dvbt2Plp1BasebandMode=dvbt2Plp1BasebandMode, dvbt2L1State=dvbt2L1State, dvbt2L1CodeRate=dvbt2L1CodeRate, dvbt2TestTable=dvbt2TestTable, dvbt2OutLocalizationTxDelayOffsetSource=dvbt2OutLocalizationTxDelayOffsetSource, dvbt2SubOutPlpType=dvbt2SubOutPlpType, dvbt2ConfigurationEntry=dvbt2ConfigurationEntry, dvbt2OutChnFftExtended=dvbt2OutChnFftExtended, dvbt2OutFsT2Version=dvbt2OutFsT2Version, dvbt2NotifyBasic=dvbt2NotifyBasic, dvbt2OutPlpInBandASig=dvbt2OutPlpInBandASig, dvbt2StInputDetected=dvbt2StInputDetected, rsXx9Dvbt2Notifications=rsXx9Dvbt2Notifications, dvbt2CoderSub=dvbt2CoderSub, dvbt2SubOutChannelEntry=dvbt2SubOutChannelEntry, dvbt2SubOutL1Repetition=dvbt2SubOutL1Repetition, dvbt2IaTimeOffsetSource=dvbt2IaTimeOffsetSource, dvbt2SubOutPaprTrIterations=dvbt2SubOutPaprTrIterations, dvbt2ConfigurationTable=dvbt2ConfigurationTable, dvbt2LocalizationPaprTrSource=dvbt2LocalizationPaprTrSource, dvbt2Output=dvbt2Output, dvbt2Plp1Rotation=dvbt2Plp1Rotation, dvbt2SubLocalizationTable=dvbt2SubLocalizationTable, dvbt2SubOutFrameStructureEntry=dvbt2SubOutFrameStructureEntry, dvbt2SubOutFsDataSymbolsPerT2Frame=dvbt2SubOutFsDataSymbolsPerT2Frame, dvbt2FrameStructureTable=dvbt2FrameStructureTable, Dvbt2FEC=Dvbt2FEC, dvbt2OutPlpCodeRate=dvbt2OutPlpCodeRate, dvbt2Plp1TimeInterleaverLength=dvbt2Plp1TimeInterleaverLength, rsXx9Dvbt2Objects=rsXx9Dvbt2Objects, dvbt2StDejitterBufDelay=dvbt2StDejitterBufDelay, dvbt2SubOutPaprTrClippingThreshold=dvbt2SubOutPaprTrClippingThreshold, dvbt2SubOutLocalizationPaprTrSource=dvbt2SubOutLocalizationPaprTrSource, dvbt2OutChnFFT=dvbt2OutChnFFT, dvbt2FrameStructureEntry=dvbt2FrameStructureEntry, dvbt2StatusNotificationTable=dvbt2StatusNotificationTable, dvbt2SubOutFefLength=dvbt2SubOutFefLength, Dvbt2T2Version=Dvbt2T2Version, dvbt2SubLocalizationMisoGroupManual=dvbt2SubLocalizationMisoGroupManual, dvbt2OutFefInterval=dvbt2OutFefInterval, Dvbt2CodeRate=Dvbt2CodeRate, dvbt2ConfigurationMatched=dvbt2ConfigurationMatched, dvbt2SubStInputMatched=dvbt2SubStInputMatched, dvbt2IndividualAddressingTable=dvbt2IndividualAddressingTable, dvbt2ConfigurationT2MiPID=dvbt2ConfigurationT2MiPID, dvbt2Setup=dvbt2Setup, dvbt2ChnGuardInterval=dvbt2ChnGuardInterval, dvbt2ChnPilotPattern=dvbt2ChnPilotPattern, dvbt2SubLocalizationTxIdentifier=dvbt2SubLocalizationTxIdentifier, dvbt2EncoderSummary=dvbt2EncoderSummary, dvbt2SubOutChnFftExtended=dvbt2SubOutChnFftExtended, dvbt2SubOutFefOn=dvbt2SubOutFefOn, dvbt2SubOutPlpTimeInterleaverType=dvbt2SubOutPlpTimeInterleaverType, dvbt2SubOutLocalizationSystemId=dvbt2SubOutLocalizationSystemId, dvbt2OutChnBandwidth=dvbt2OutChnBandwidth, dvbt2FsT2FramesPerSuperFrame=dvbt2FsT2FramesPerSuperFrame, dvbt2OutChannelEntry=dvbt2OutChannelEntry, dvbt2IaState=dvbt2IaState, dvbt2OutPaprTrIterationsIA=dvbt2OutPaprTrIterationsIA, Dvbt2FftSize=Dvbt2FftSize, PYSNMP_MODULE_ID=rsXx9Dvbt2MibModule, dvbt2SupportedTrIterations=dvbt2SupportedTrIterations, dvbt2SubConfigurationT2MiSID=dvbt2SubConfigurationT2MiSID, dvbt2SubOutFefInterval=dvbt2SubOutFefInterval, dvbt2LocalizationNetworkIdManual=dvbt2LocalizationNetworkIdManual, Dvbt2Layer1CodeRate=Dvbt2Layer1CodeRate, dvbt2OutChnT2BaseLite=dvbt2OutChnT2BaseLite, dvbt2ConfigurationT2MiDejitterBufDelay=dvbt2ConfigurationT2MiDejitterBufDelay, dvbt2OutFsT2FramesPerSuperFrame=dvbt2OutFsT2FramesPerSuperFrame, dvbt2StatusNotificationExcIdx=dvbt2StatusNotificationExcIdx, Dvbt2Modulation=Dvbt2Modulation, Dvbt2IndividualAddressingSource=Dvbt2IndividualAddressingSource, dvbt2ChannelTable=dvbt2ChannelTable, dvbt2SubStateTable=dvbt2SubStateTable, dvbt2SubLocalizationEntry=dvbt2SubLocalizationEntry, dvbt2ConfigurationT2ConfigAdaption=dvbt2ConfigurationT2ConfigAdaption, dvbt2OutFefTable=dvbt2OutFefTable, dvbt2SubOutLocalizationMisoGroup=dvbt2SubOutLocalizationMisoGroup, dvbt2StInputMatched=dvbt2StInputMatched, dvbt2OutPlpFecBlocks=dvbt2OutPlpFecBlocks, dvbt2OutLocalizationTxDelayOffset=dvbt2OutLocalizationTxDelayOffset, dvbt2OutLocalizationEntry=dvbt2OutLocalizationEntry, dvbt2SubOutChnTransmissionSystem=dvbt2SubOutChnTransmissionSystem, dvbt2SubOutL1CodeRate=dvbt2SubOutL1CodeRate, dvbt2SubConfigurationMatched=dvbt2SubConfigurationMatched, dvbt2ObjSubBasic=dvbt2ObjSubBasic, dvbt2SubOutPlpFEC=dvbt2SubOutPlpFEC, dvbt2SubOutL1Modulation=dvbt2SubOutL1Modulation, rsXx9Dvbt2Compliances=rsXx9Dvbt2Compliances, dvbt2L1Repetition=dvbt2L1Repetition, dvbt2OutL1PostScrambled=dvbt2OutL1PostScrambled, dvbt2OutPaprTrIterationsReduced=dvbt2OutPaprTrIterationsReduced, dvbt2StInputRequired=dvbt2StInputRequired, dvbt2Plp1Entry=dvbt2Plp1Entry, dvbt2ChnFftExtended=dvbt2ChnFftExtended, dvbt2ConfigurationTxIdx=dvbt2ConfigurationTxIdx, dvbt2FsT2Version=dvbt2FsT2Version, dvbt2LocalizationTxDelayOffsetSource=dvbt2LocalizationTxDelayOffsetSource, dvbt2SubOutPlpIdx=dvbt2SubOutPlpIdx, dvbt2OutPlpConstellation=dvbt2OutPlpConstellation, dvbt2SubConfigurationValid=dvbt2SubConfigurationValid, dvbt2StatusNotificationState=dvbt2StatusNotificationState, dvbt2Test=dvbt2Test, dvbt2SubConfigurationT2MiInterface=dvbt2SubConfigurationT2MiInterface, dvbt2SubOutPaprTrTable=dvbt2SubOutPaprTrTable, dvbt2Status=dvbt2Status, dvbt2SubOutFefTable=dvbt2SubOutFefTable, dvbt2ChnBandwidth=dvbt2ChnBandwidth)
mibBuilder.exportSymbols("RS-XX9-DVBT2-MIB", dvbt2SubOutChannelTable=dvbt2SubOutChannelTable, Dvbt2ChannelBandwidth=Dvbt2ChannelBandwidth, dvbt2NotifObsoleted=dvbt2NotifObsoleted, dvbt2Plp1Constellation=dvbt2Plp1Constellation, dvbt2CompositeSummary=dvbt2CompositeSummary, dvbt2OutL1CodeRate=dvbt2OutL1CodeRate, dvbt2OutChnInputStreamTypes=dvbt2OutChnInputStreamTypes, dvbt2LocalizationMisoGroupSource=dvbt2LocalizationMisoGroupSource, dvbt2OutPaprTrEntry=dvbt2OutPaprTrEntry, dvbt2SubOutLocalizationEntry=dvbt2SubOutLocalizationEntry, dvbt2OutPlpFEC=dvbt2OutPlpFEC, dvbt2OutPlpTimeInterleaverType=dvbt2OutPlpTimeInterleaverType, dvbt2SubOutPlpID=dvbt2SubOutPlpID, dvbt2SubOutFefType=dvbt2SubOutFefType, dvbt2OutLocalizationMisoGroup=dvbt2OutLocalizationMisoGroup, rsXx9Dvbt2Groups=rsXx9Dvbt2Groups, dvbt2OutPaprTrClippingThreshold=dvbt2OutPaprTrClippingThreshold, dvbt2SubConfigurationTable=dvbt2SubConfigurationTable, dvbt2OutL1Table=dvbt2OutL1Table, dvbt2OutL1PostExtension=dvbt2OutL1PostExtension, dvbt2IaCellIdSource=dvbt2IaCellIdSource, dvbt2T2MiTimeInterleaverBuffer=dvbt2T2MiTimeInterleaverBuffer, dvbt2OutChnTransmissionSystem=dvbt2OutChnTransmissionSystem, dvbt2SubSetup=dvbt2SubSetup, dvbt2SubOutChnBandwidth=dvbt2SubOutChnBandwidth, dvbt2LocalizationSystemIdManual=dvbt2LocalizationSystemIdManual, dvbt2OutFrameStructureTable=dvbt2OutFrameStructureTable, dvbt2OutFefLength=dvbt2OutFefLength, dvbt2SubLocalizationL1FrequencyManual=dvbt2SubLocalizationL1FrequencyManual, dvbt2SubOutLocalizationMisoGroupSource=dvbt2SubOutLocalizationMisoGroupSource, dvbt2L1FEC=dvbt2L1FEC, dvbt2OutPaprTrIterationsSupported=dvbt2OutPaprTrIterationsSupported, dvbt2CompositeProfiles=dvbt2CompositeProfiles, dvbt2SubOutPlpTable=dvbt2SubOutPlpTable, dvbt2TestGeneration=dvbt2TestGeneration, dvbt2OutChnT2Profile=dvbt2OutChnT2Profile, Dvbt2OnOff=Dvbt2OnOff, dvbt2OutChannelTable=dvbt2OutChannelTable, dvbt2Plp1GroupID=dvbt2Plp1GroupID, dvbt2TestEntry=dvbt2TestEntry, dvbt2StConfigurationMsg=dvbt2StConfigurationMsg, dvbt2SubOutChnGuardInterval=dvbt2SubOutChnGuardInterval, dvbt2ChnFFT=dvbt2ChnFFT, dvbt2SubOutChnFFT=dvbt2SubOutChnFFT, dvbt2SubOutFsT2FramesPerSuperFrame=dvbt2SubOutFsT2FramesPerSuperFrame, dvbt2StatusNotificationIdx=dvbt2StatusNotificationIdx, Dvbt2PlpType=Dvbt2PlpType, dvbt2Plp1Table=dvbt2Plp1Table, dvbt2OutPaprTrTable=dvbt2OutPaprTrTable, dvbt2IaFrequencyOffsetSource=dvbt2IaFrequencyOffsetSource)
