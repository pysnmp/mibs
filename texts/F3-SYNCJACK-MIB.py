#
# PySNMP MIB module F3-SYNCJACK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/F3-SYNCJACK-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 14:02:53 2024
# On host fv-az1456-954 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
IpPriorityMapMode, SchedActivityStatus, OperationalState, ScheduleType, AdminState, SecondaryState, CmPmBinAction, IpVersion, PerfCounter32, CmPmIntervalType, PerfCounter64 = mibBuilder.importSymbols("CM-COMMON-MIB", "IpPriorityMapMode", "SchedActivityStatus", "OperationalState", "ScheduleType", "AdminState", "SecondaryState", "CmPmBinAction", "IpVersion", "PerfCounter32", "CmPmIntervalType", "PerfCounter64")
neIndex, shelfIndex, slotIndex = mibBuilder.importSymbols("CM-ENTITY-MIB", "neIndex", "shelfIndex", "slotIndex")
ScaledNanoseconds, = mibBuilder.importSymbols("F3-PTP-MIB", "ScaledNanoseconds")
SSMQualityLevel, = mibBuilder.importSymbols("F3-SYNC-MIB", "SSMQualityLevel")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, Counter32, Counter64, Unsigned32, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, TimeTicks, IpAddress, ModuleIdentity, Integer32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Unsigned32", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "TimeTicks", "IpAddress", "ModuleIdentity", "Integer32", "MibIdentifier")
StorageType, VariablePointer, TruthValue, DisplayString, DateAndTime, TextualConvention, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "VariablePointer", "TruthValue", "DisplayString", "DateAndTime", "TextualConvention", "RowStatus", "MacAddress")
f3SyncJMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22))
f3SyncJMIB.setRevisions(('2012-05-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f3SyncJMIB.setRevisionsDescriptions(('                \n         Notes from release 201908190000Z\n            (i)   New table: f3UserDefinedMTIEMaskTable\n            (ii)  Add user-defined enum to MTIEMaskType\n                                          \n         Notes from release 201712240000Z\n            (i)   New tables: f3SyncJClockProbeStatsTable, f3SyncJClockProbeHistoryTable, f3SyncJClockProbeThresholdTable,\n                              f3SyncJPTPClockProbeStatsTable, f3SyncJPTPClockProbeHistoryTable, f3SyncJPTPClockProbeThresholdTable\n            (ii)  New notifications: f3SyncJClockProbeThresholdCrossingAlert , f3SyncJPTPClockProbeThresholdCrossingAlert   \n            (iii) Added f3SyncJClockProbeMTIERestart to f3SyncJClockProbeTable \n            (iv)  Added f3SyncJPTPClockProbeMTIERestart to f3SyncJPTPClockProbeTable \n\n          Notes from release 201205100000Z\n            (i) Initial Version of the MIBs\n          .',))
if mibBuilder.loadTexts: f3SyncJMIB.setLastUpdated('201908190000Z')
if mibBuilder.loadTexts: f3SyncJMIB.setOrganization('ADVA Optical Networking SE')
if mibBuilder.loadTexts: f3SyncJMIB.setContactInfo('Web URL: http://adva.com/\n        E-mail:  support@adva.com\n        Postal:  ADVA Optical Networking SE\n             Campus Martinsried\n             Fraunhoferstrasse 9a\n             82152 Martinsried/Munich\n             Germany\n        Phone: +49 089 89 06 65 0\n        Fax:  +49 089 89 06 65 199 ')
if mibBuilder.loadTexts: f3SyncJMIB.setDescription('This module defines the Sync Jack MIB definitions used by \n             the F3 (FSP150CM/CC) product lines.  \n             Copyright (C) ADVA.')
f3SyncJConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1))
f3SyncJPerformanceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2))
f3SyncJNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 3))
f3SyncJConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 4))
class SyncJackTestState(TextualConvention, Integer32):
    description = 'Enumerations for Time Interval Error Test State.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("waiting", 1), ("running", 2), ("completed", 3), ("failed", 4), ("suspended", 5), ("notscheduled", 6))

class MTIEMaskType(TextualConvention, Integer32):
    description = 'Enumerations for Maximum Time Interval Error Mask.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))
    namedValues = NamedValues(("g823-e1-ssu", 1), ("g823-e1-sec", 2), ("g823-e1-traffic", 3), ("g823-pdh", 4), ("g824-t1-sync", 5), ("g824-t1-traffic", 6), ("g8261-e1-case1", 7), ("g8261-t1-case1", 8), ("g8261-e1-case2", 9), ("g8261-eec-opt1", 10), ("g8263-const-temp", 11), ("g8272-prtc", 12), ("g8261-1", 13), ("g8262-eec-opt1", 14), ("g8262-eec-opt1-temp", 15), ("g8262-eec-opt2", 16), ("g8262-eec-opt1-tolerrance", 17), ("g8263-var-temp", 18), ("g8273-2", 19), ("g8271-1", 20), ("user-defined", 21))

class TIESourceType(TextualConvention, Integer32):
    description = 'Enumerations for TIE Source Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("phase", 1), ("frequency", 2))

class TIEMeasurementRate(TextualConvention, Integer32):
    description = 'Enumerations for TIE Measurement Rate.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("meas-10per1sec", 1), ("meas-1per1sec", 2), ("meas-1per2sec", 3))

class PTPMeasurementDirection(TextualConvention, Integer32):
    description = 'Enumerations for PTP Measurement Direction.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("master2slave", 1), ("slave2master", 2), ("twoways", 3), ("master2slave-t4", 4))

class MeasurementType(TextualConvention, Integer32):
    description = 'Enumerations for Measurement Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("phase", 1), ("frequency", 2))

class FFOObserWindow(TextualConvention, Integer32):
    description = 'Enumerations for FFO obser window.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("window-100s", 1), ("window-200s", 2), ("window-500s", 3), ("window-1000s", 4), ("window-2000s", 5), ("window-5000s", 6), ("window-10000s", 7))

f3SyncJClockProbeTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1), )
if mibBuilder.loadTexts: f3SyncJClockProbeTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeTable.setDescription('A list of entries corresponding to the SyncJack Clock Probe.')
f3SyncJClockProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJClockProbeIndex"))
if mibBuilder.loadTexts: f3SyncJClockProbeEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeEntry.setDescription('An entry containing information applicable to a particular\n           SyncJack Clock Probe.')
f3SyncJClockProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: f3SyncJClockProbeIndex.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeIndex.setDescription('Unique index value associated with the Clock Probe.')
f3SyncJClockProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJClockProbeName.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeName.setDescription('This object allows SNMP management entities to provide a \n          name to the Clock Probe entity.')
f3SyncJClockProbeSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 3), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeSource.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeSource.setDescription('This object allows setting up of the TIE Source Entity.  \n           Clock Probe compares this with the f3SyncJClockProbeReference\n           and computes TIE, MTIE.')
f3SyncJClockProbeReference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 4), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeReference.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeReference.setDescription('This object allows setting up of the TIE Reference Entity.  \n           Clock Probe compares this with the f3SyncJClockProbeSource\n           and computes TIE, MTIE.')
f3SyncJClockProbeExpectedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 5), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeExpectedQL.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeExpectedQL.setDescription('This object represents the minimum expected Quality Level \n           when bits-in and sync-e PHY are references.')
f3SyncJClockProbeSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 6), TIESourceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJClockProbeSourceType.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeSourceType.setDescription('This object represents the Clock Probe source type.')
f3SyncJClockProbeMeasurementRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 7), TIEMeasurementRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeMeasurementRate.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeMeasurementRate.setDescription('This object represents the actual Clock Probe measurement rate.')
f3SyncJClockProbeMTIEMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 8), MTIEMaskType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeMTIEMaskType.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeMTIEMaskType.setDescription('This object represents the MTIE Mask Type.')
f3SyncJClockProbeMTIEMaskMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeMTIEMaskMargin.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeMTIEMaskMargin.setDescription('This object specifies the MTIE Mask Margin in percentage below the\n          MTIE mask for alarm report. Value of 0 means no margin.')
f3SyncJClockProbeScheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 10), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeScheduler.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeScheduler.setDescription('This object provides the associated scheduler instance, if one\n          exists, with this Clock Probe.  This value is 0.0, if there is no\n          scheduler associated with the Clock Probe.')
f3SyncJClockProbeTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 11), SyncJackTestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeTestState.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeTestState.setDescription('This object provides the Clock Probe test state.')
f3SyncJClockProbeLastTIEResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeLastTIEResult.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeLastTIEResult.setDescription('This object provides last TIE result in nanoseconds.')
f3SyncJClockProbeLastTIEResultTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeLastTIEResultTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeLastTIEResultTime.setDescription('This object provides the time associated with the last TIE result.')
f3SyncJClockProbeSourceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeSourceFailure.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeSourceFailure.setDescription('This object provides information on whether the source failed.')
f3SyncJClockProbeReferenceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeReferenceFailure.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeReferenceFailure.setDescription('This object provides information on whether the reference failed.')
f3SyncJClockProbeActualTestStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeActualTestStartTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeActualTestStartTime.setDescription('This object provides information on the actual test start time.')
f3SyncJClockProbeActualTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeActualTestDuration.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeActualTestDuration.setDescription('This object provides information on the actual test duration in seconds.')
f3SyncJClockProbeMTIEMaskCrossedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeMTIEMaskCrossedTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeMTIEMaskCrossedTime.setDescription('This object provides the time when the MTIE mask was crossed.')
f3SyncJClockProbeMTIEMaskMarginCrossedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeMTIEMaskMarginCrossedTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeMTIEMaskMarginCrossedTime.setDescription('This object provides the time when the MTIE mask margin was crossed.')
f3SyncJClockProbeStatusMTIEMaskFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeStatusMTIEMaskFailed.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeStatusMTIEMaskFailed.setDescription('This object provides the result status, whether MTIE Mask has failed.')
f3SyncJClockProbeStatusMTIEMarginFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeStatusMTIEMarginFailed.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeStatusMTIEMarginFailed.setDescription('This object provides the result status, whether MTIE Margin has failed.')
f3SyncJClockProbeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 22), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJClockProbeStorageType.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeStorageType.setDescription('The type of storage configured for this entry.')
f3SyncJClockProbeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJClockProbeRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3SyncJClockProbeRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3SyncJClockProbeRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3SyncJClockProbeRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3SyncJClockProbeFfoTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeFfoTarget.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeFfoTarget.setDescription('The FFO target for this entry.')
f3SyncJClockProbeFfoObserWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 25), FFOObserWindow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeFfoObserWindow.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeFfoObserWindow.setDescription('The FFO obserwer window for this entry.')
f3SyncJClockProbeLastFFOResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeLastFFOResult.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeLastFFOResult.setDescription('The last FFO result for this entry.')
f3SyncJClockProbeTimeOfLastFFOResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 27), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeTimeOfLastFFOResult.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeTimeOfLastFFOResult.setDescription('The time of last FFO result for this entry.')
f3SyncJClockProbeRawDataCollectionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeRawDataCollectionEnabled.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeRawDataCollectionEnabled.setDescription('The raw data collection enabled for this entry.')
f3SyncJClockProbeTeAlertThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeTeAlertThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: f3SyncJClockProbeTeAlertThreshold.setDescription('The TE alert threshold configured for this entry.')
f3SyncJClockProbeTeAlertClearThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeTeAlertClearThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: f3SyncJClockProbeTeAlertClearThreshold.setDescription('The TE alert clear threshold configured for this entry.')
f3SyncJClockProbeLastTEAlertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 31), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeLastTEAlertTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3SyncJClockProbeLastTEAlertTime.setDescription('The last TE alert time for this entry.')
f3SyncJClockProbeLastTEAlertClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeLastTEAlertClearTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3SyncJClockProbeLastTEAlertClearTime.setDescription('The last TE alert clear time for this entry.')
f3SyncJClockProbeRunningFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeRunningFailedCount.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeRunningFailedCount.setDescription('The running failed count for this entry.')
f3SyncJClockProbeMeasurementType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 34), MeasurementType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeMeasurementType.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeMeasurementType.setDescription('The measurement type configured for this entry.')
f3SyncJClockProbeConstTEThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeConstTEThreshold.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeConstTEThreshold.setDescription('The Constant Time Error Alert threshold (ns).')
f3SyncJClockProbeConstTEClrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeConstTEClrThreshold.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeConstTEClrThreshold.setDescription('The Constant Time Error Alert Clear threshold (ns).')
f3SyncJClockProbeConstTEWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeConstTEWindow.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeConstTEWindow.setDescription('The Averaging window used for Constant TE calculation (sec).')
f3SyncJClockProbeMaxTETotAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeMaxTETotAlarmTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeMaxTETotAlarmTime.setDescription('The Total time in seconds Max TE has been measured')
f3SyncJClockProbeConstTETotAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeConstTETotAlarmTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeConstTETotAlarmTime.setDescription('The Total time in seconds Constant TE has been measured.')
f3SyncJClockProbeConstTEMeasurementTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeConstTEMeasurementTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeConstTEMeasurementTime.setDescription('The Const TE Measurement Time for this entry.')
f3SyncJClockProbeMaxTEMeasurementTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeMaxTEMeasurementTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeMaxTEMeasurementTime.setDescription('The Max TE Measurement Time for this entry.')
f3SyncJClockProbeMaxTEThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeMaxTEThreshold.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeMaxTEThreshold.setDescription('The TE Max threshold configured for this entry.')
f3SyncJClockProbeMaxTEClrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeMaxTEClrThreshold.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeMaxTEClrThreshold.setDescription('The TE Max clear threshold configured for this entry.')
f3SyncJClockProbeMTIERestart = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 1, 1, 44), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeMTIERestart.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeMTIERestart.setDescription('The MTIE Restart configured for this entry.')
f3SyncJClockProbeMTIEValueTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 2), )
if mibBuilder.loadTexts: f3SyncJClockProbeMTIEValueTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeMTIEValueTable.setDescription("A list of entries corresponding to the Clock Probe's MTIE Result\n          Values.")
f3SyncJClockProbeMTIEValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJClockProbeIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJClockProbeMTIEValueIndex"))
if mibBuilder.loadTexts: f3SyncJClockProbeMTIEValueEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeMTIEValueEntry.setDescription("An entry containing information applicable to a particular\n           Clock Probe's MTIE Result Value.")
f3SyncJClockProbeMTIEValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: f3SyncJClockProbeMTIEValueIndex.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeMTIEValueIndex.setDescription('Unique index value associated with the Clock Probe Result Value.')
f3SyncJClockProbeMTIEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeMTIEValue.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeMTIEValue.setDescription('This object allows SNMP management entities to retrieve\n          MTIE Result Values in nanoseconds.')
f3SyncJClockProbeResHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3), )
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryTable.setDescription('A list of entries corresponding to the SyncJack Clock Probe Result \n        History.')
f3SyncJClockProbeResHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJClockProbeIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryIndex"))
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryEntry.setDescription('An entry containing information applicable to a particular\n           SyncJack Clock Probe Result History.')
f3SyncJClockProbeResHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryIndex.setDescription('Unique index value associated with the Clock Probe.')
f3SyncJClockProbeResHistoryAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryAlias.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryAlias.setDescription('This object provides alias of the Clock Probe result history.')
f3SyncJClockProbeResHistorySource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistorySource.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistorySource.setDescription('This object provides the source for TIE computation.')
f3SyncJClockProbeResHistoryReference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 4), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryReference.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryReference.setDescription('This object provides the reference for TIE computation.')
f3SyncJClockProbeResHistoryExpectedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 5), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryExpectedQL.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryExpectedQL.setDescription('This object provides the minimum expected Quality Level \n           when bits-in and sync-e PHY are references.')
f3SyncJClockProbeResHistorySourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 6), TIESourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistorySourceType.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistorySourceType.setDescription('This object provides the Clock Probe source type.')
f3SyncJClockProbeResHistoryMeasurementRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 7), TIEMeasurementRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMeasurementRate.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMeasurementRate.setDescription('This object provides the actual Clock Probe measurement rate.')
f3SyncJClockProbeResHistoryMTIEMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 8), MTIEMaskType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMTIEMaskType.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMTIEMaskType.setDescription('This object provides the MTIE Mask Type.')
f3SyncJClockProbeResHistoryMTIEMaskMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMTIEMaskMargin.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMTIEMaskMargin.setDescription('This object provides the MTIE Mask Margin.')
f3SyncJClockProbeResHistorySourceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistorySourceFailure.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistorySourceFailure.setDescription('This object provides information on whether the source failed.')
f3SyncJClockProbeResHistoryReferenceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryReferenceFailure.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryReferenceFailure.setDescription('This object provides information on whether the reference failed.')
f3SyncJClockProbeResHistoryActualTestStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryActualTestStartTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryActualTestStartTime.setDescription('This object provides information on the actual test start time.')
f3SyncJClockProbeResHistoryActualTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryActualTestDuration.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryActualTestDuration.setDescription('This object provides information on the actual test duration in seconds.')
f3SyncJClockProbeResHistoryMTIEMaskCrossedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMTIEMaskCrossedTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMTIEMaskCrossedTime.setDescription('This object provides the time when the MTIE mask was crossed.')
f3SyncJClockProbeResHistoryMTIEMaskMarginCrossedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMTIEMaskMarginCrossedTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMTIEMaskMarginCrossedTime.setDescription('This object provides the time when the MTIE mask \n          margin was crossed.')
f3SyncJClockProbeResHistoryStatusMTIEMaskFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryStatusMTIEMaskFailed.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryStatusMTIEMaskFailed.setDescription('This object provides the result status, whether \n        MTIE Mask has failed.')
f3SyncJClockProbeResHistoryStatusMTIEMarginFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryStatusMTIEMarginFailed.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryStatusMTIEMarginFailed.setDescription('This object provides the result status, \n        whether MTIE Margin has failed.')
f3SyncJClockProbeResHistoryStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 18), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryStorageType.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryStorageType.setDescription('The type of storage configured for this entry.')
f3SyncJClockProbeResHistoryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3SyncJClockProbeResHistoryRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3SyncJClockProbeResHistoryRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3SyncJClockProbeResHistoryRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3SyncJClockProbeResHistoryMinFFO = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMinFFO.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMinFFO.setDescription('The Min FFO configured for this entry.')
f3SyncJClockProbeResHistoryMaxFFO = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMaxFFO.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMaxFFO.setDescription('The Max FFO configured for this entry.')
f3SyncJClockProbeResHistoryAvgFFO = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryAvgFFO.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryAvgFFO.setDescription('The average FFO configured for this entry.')
f3SyncJClockProbeResHistoryOutOfTargetFFOTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryOutOfTargetFFOTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryOutOfTargetFFOTime.setDescription('The out of target FFO time configured for this entry.')
f3SyncJClockProbeResHistoryTotalFFOTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryTotalFFOTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryTotalFFOTime.setDescription('The total FFO time configured for this entry.')
f3SyncJClockProbeResHistoryMinPhaseOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMinPhaseOffset.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMinPhaseOffset.setDescription('The Min phase offset configured for this entry.')
f3SyncJClockProbeResHistoryMaxPhaseOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMaxPhaseOffset.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMaxPhaseOffset.setDescription('The Max phase offset configured for this entry.')
f3SyncJClockProbeResHistoryAvgPhaseOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryAvgPhaseOffset.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryAvgPhaseOffset.setDescription('The average phase offset configured for this entry.')
f3SyncJClockProbeResHistoryOutOfTargetPhaseOffsetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryOutOfTargetPhaseOffsetTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryOutOfTargetPhaseOffsetTime.setDescription('The out of target phase offset time configured for this entry.')
f3SyncJClockProbeResHistoryTotalPhaseOffsetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryTotalPhaseOffsetTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryTotalPhaseOffsetTime.setDescription('The total phase offset time configured for this entry.')
f3SyncJClockProbeResHistoryMeasurementType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 30), MeasurementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMeasurementType.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMeasurementType.setDescription('The measurement type configured for this entry.')
f3SyncJClockProbeResHistoryTeAlertThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryTeAlertThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryTeAlertThreshold.setDescription('The TE alert threshold configured for this entry.')
f3SyncJClockProbeResHistoryTeAlertClearThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryTeAlertClearThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryTeAlertClearThreshold.setDescription('The TE alert clear threshold configured for this entry.')
f3SyncJClockProbeResHistoryLastTEAlertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 33), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryLastTEAlertTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryLastTEAlertTime.setDescription('The last TE alert time for this entry.')
f3SyncJClockProbeResHistoryLastTEAlertClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 34), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryLastTEAlertClearTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryLastTEAlertClearTime.setDescription('The last TE alert clear time for this entry.')
f3SyncJClockProbeResHistoryRunningFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryRunningFailedCount.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryRunningFailedCount.setDescription('The running failed count for this entry.')
f3SyncJClockProbeResHistoryConstTEThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryConstTEThreshold.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryConstTEThreshold.setDescription('The Constant Time Error Alert threshold (ns).')
f3SyncJClockProbeResHistoryConstTEClrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryConstTEClrThreshold.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryConstTEClrThreshold.setDescription('The Constant Time Error Alert Clear threshold (ns).')
f3SyncJClockProbeResHistoryConstTEWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryConstTEWindow.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryConstTEWindow.setDescription('The Averaging window used for Constant TE calculation (sec).')
f3SyncJClockProbeResHistoryMaxTETotAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMaxTETotAlarmTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMaxTETotAlarmTime.setDescription('The Total time in seconds Max TE has been measured')
f3SyncJClockProbeResHistoryConstTETotAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryConstTETotAlarmTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryConstTETotAlarmTime.setDescription('The Total time in seconds Constant TE has been measured.')
f3SyncJClockProbeResHistoryConstTEMeasurementTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryConstTEMeasurementTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryConstTEMeasurementTime.setDescription('The Const TE Measurement Time for this entry.')
f3SyncJClockProbeResHistoryMaxTEMeasurementTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMaxTEMeasurementTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMaxTEMeasurementTime.setDescription('The Max TE Measurement Time for this entry.')
f3SyncJClockProbeResHistoryMaxTEThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMaxTEThreshold.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMaxTEThreshold.setDescription('The TE Max threshold configured for this entry.')
f3SyncJClockProbeResHistoryMaxTEClrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 3, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMaxTEClrThreshold.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMaxTEClrThreshold.setDescription('The TE Max clear threshold configured for this entry.')
f3SyncJClockProbeResHistoryMTIEValueTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 4), )
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMTIEValueTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMTIEValueTable.setDescription("A list of histgory entries corresponding to the \n          Clock Probe's MTIE Result Values.")
f3SyncJClockProbeResHistoryMTIEValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJClockProbeIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryMTIEValueIndex"))
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMTIEValueEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMTIEValueEntry.setDescription("An entry containing information applicable to a particular\n           Clock Probe's MTIE Result Value.")
f3SyncJClockProbeResHistoryMTIEValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMTIEValueIndex.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMTIEValueIndex.setDescription('Unique index value associated with the Clock Probe \n          History Result Value.')
f3SyncJClockProbeResHistoryMTIEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMTIEValue.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeResHistoryMTIEValue.setDescription('This object allows SNMP management entities to retrieve\n          MTIE Result Values in nanoseconds.')
f3SyncJPTPClockProbeTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5), )
if mibBuilder.loadTexts: f3SyncJPTPClockProbeTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeTable.setDescription('A list of entries corresponding to the SyncJack PTP Clock Probes.')
f3SyncJPTPClockProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeIndex"))
if mibBuilder.loadTexts: f3SyncJPTPClockProbeEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeEntry.setDescription('An entry containing information applicable to a particular\n           SyncJack PTP Clock Probe.')
f3SyncJPTPClockProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: f3SyncJPTPClockProbeIndex.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeIndex.setDescription('Unique index value associated with the PTP Clock Probe.')
f3SyncJPTPClockProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeName.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeName.setDescription('This object allows SNMP management entities to provide an \n          name to the PTP Clock Probe entity.  This is used\n          for creation of the underlying IP Interface associated \n          with the PTP Clock Probe entity.')
f3SyncJPTPClockProbeMeasurementDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 3), PTPMeasurementDirection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMeasurementDirection.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMeasurementDirection.setDescription('This object allows SNMP management entities to specify the \n          Measurement Direction to the PTP Clock Probe entity.')
f3SyncJPTPClockProbePTPFlowPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 4), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJPTPClockProbePTPFlowPoint.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbePTPFlowPoint.setDescription('This object allows SNMP management entities to specify the \n          PTP Flow Point to use as source for PTP Clock Probe measurements.')
f3SyncJPTPClockProbeIpPrototocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 5), IpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeIpPrototocol.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeIpPrototocol.setDescription('This object allows SNMP management entities to specify the \n          IP Protocol used for PTP communication. ')
f3SyncJPTPClockProbeSlaveIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeSlaveIpV4Address.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeSlaveIpV4Address.setDescription('This object allows SNMP management entities to specify the \n          Slave IP Address associated with the PTP Clock Probe.')
f3SyncJPTPClockProbeMasterIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMasterIpV4Address.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMasterIpV4Address.setDescription('This object allows SNMP management entities to specify the \n          Master IP Address associated with the PTP Clock Probe.')
f3SyncJPTPClockProbeReference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 8), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeReference.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeReference.setDescription('This object allows setting up of the PTP Clock Probe \n           TIE Reference Entity.  PTP Clock Probe compares this with the \n           PTP Master/Slave entity configured using \n           f3SyncJPTPClockProbeMasterIpV4Address/f3SyncJPTPClockProbeSlaveIpV4Address \n           and computes TIE, MTIE.')
f3SyncJPTPClockProbeExpectedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 9), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeExpectedQL.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeExpectedQL.setDescription('This object represents the minimum expected Quality Level \n           when bits-in and sync-e PHY are references.')
f3SyncJPTPClockProbeMTIEMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 10), MTIEMaskType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMTIEMaskType.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMTIEMaskType.setDescription('This object represents the MTIE Mask Type.')
f3SyncJPTPClockProbeMTIEMaskMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMTIEMaskMargin.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMTIEMaskMargin.setDescription('This object represents the MTIE Mask Margin.')
f3SyncJPTPClockProbeScheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 12), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeScheduler.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeScheduler.setDescription('This object provides the associated scheduler instance, if one\n          exists, with this PTP Clock Probe.  This value is 0.0, if there is no\n          scheduler associated with the PTP Clock Probe.')
f3SyncJPTPClockProbeTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 13), SyncJackTestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeTestState.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeTestState.setDescription('This object provides the PTP Clock Probe test state.')
f3SyncJPTPClockProbeLastTIEResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeLastTIEResult.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeLastTIEResult.setDescription('This object provides last TIE result in nanoseconds.')
f3SyncJPTPClockProbeLastTIEResultTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeLastTIEResultTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeLastTIEResultTime.setDescription('This object provides the time associated with the last TIE result.')
f3SyncJPTPClockProbeNoTimestampFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeNoTimestampFailure.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeNoTimestampFailure.setDescription('This object provides information on whether the measured PTP source\n          indicated a no-timestamp failure.')
f3SyncJPTPClockProbeNoEventMessageFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeNoEventMessageFailure.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeNoEventMessageFailure.setDescription('This object provides information on whether the measured PTP source\n          indicated a no-event message failure.')
f3SyncJPTPClockProbeReferenceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeReferenceFailure.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeReferenceFailure.setDescription('This object provides information on whether the reference failed.')
f3SyncJPTPClockProbeActualTestStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeActualTestStartTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeActualTestStartTime.setDescription('This object provides information on the actual test start time.')
f3SyncJPTPClockProbeActualTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeActualTestDuration.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeActualTestDuration.setDescription('This object provides information on the actual test duration in seconds.')
f3SyncJPTPClockProbeMTIEMaskCrossedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMTIEMaskCrossedTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMTIEMaskCrossedTime.setDescription('This object provides the time when the MTIE mask was crossed.')
f3SyncJPTPClockProbeMTIEMaskMarginCrossedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMTIEMaskMarginCrossedTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMTIEMaskMarginCrossedTime.setDescription('This object provides the time when the MTIE mask margin was crossed.')
f3SyncJPTPClockProbeStatusMTIEMaskFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatusMTIEMaskFailed.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatusMTIEMaskFailed.setDescription('This object provides the result status, whether MTIE Mask has failed.')
f3SyncJPTPClockProbeStatusMTIEMarginFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatusMTIEMarginFailed.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatusMTIEMarginFailed.setDescription('This object provides the result status, whether MTIE Margin has failed.')
f3SyncJPTPClockProbeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 25), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStorageType.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStorageType.setDescription('The type of storage configured for this entry.')
f3SyncJPTPClockProbeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 26), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3SyncJPTPClockProbeRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3SyncJPTPClockProbeRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3SyncJPTPClockProbeRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3SyncJPTPClockProbeFfoTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeFfoTarget.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeFfoTarget.setDescription('The FFO target for this entry.')
f3SyncJPTPClockProbeFfoObserWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 28), FFOObserWindow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeFfoObserWindow.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeFfoObserWindow.setDescription('The FFO obserwer window for this entry.')
f3SyncJPTPClockProbeLastFFOResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeLastFFOResult.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeLastFFOResult.setDescription('The last FFO result for this entry.')
f3SyncJPTPClockProbeTimeOfLastFFOResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 30), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeTimeOfLastFFOResult.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeTimeOfLastFFOResult.setDescription('The time of last FFO result for this entry.')
f3SyncJPTPClockProbeRawDataCollectionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 31), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeRawDataCollectionEnabled.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeRawDataCollectionEnabled.setDescription('The raw data collection enabled for this entry.')
f3SyncJPTPClockProbeTeAlertThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeTeAlertThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeTeAlertThreshold.setDescription('The TE alert threshold configured for this entry.')
f3SyncJPTPClockProbeTeAlertClearThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeTeAlertClearThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeTeAlertClearThreshold.setDescription('The TE alert clear threshold configured for this entry.')
f3SyncJPTPClockProbeLastTEAlertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 34), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeLastTEAlertTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeLastTEAlertTime.setDescription('The last TE alert time for this entry.')
f3SyncJPTPClockProbeLastTEAlertClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 35), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeLastTEAlertClearTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeLastTEAlertClearTime.setDescription('The last TE alert clear time for this entry.')
f3SyncJPTPClockProbeRunningFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeRunningFailedCount.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeRunningFailedCount.setDescription('The running failed count for this entry.')
f3SyncJPTPClockProbeMeasurementType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 37), MeasurementType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMeasurementType.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMeasurementType.setDescription('The measurement type configured for this entry.')
f3SyncJPTPClockProbeDelayMS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeDelayMS.setStatus('deprecated')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeDelayMS.setDescription('The delay MS for this entry.')
f3SyncJPTPClockProbeDelaySM = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeDelaySM.setStatus('deprecated')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeDelaySM.setDescription('The delay SM for this entry.')
f3SyncJPTPClockProbeTAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeTAsymmetry.setStatus('deprecated')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeTAsymmetry.setDescription('The Slave to Master Delay Asymmetry configured for this entity.')
f3SyncJPTPClockProbeDelayCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeDelayCompensation.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeDelayCompensation.setDescription('The Delay Compensation configured for this entity.')
f3SyncJPTPClockProbeConstTEThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 42), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeConstTEThreshold.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeConstTEThreshold.setDescription('The Constant Time Error Alert threshold (ns).')
f3SyncJPTPClockProbeConstTEClrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 43), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeConstTEClrThreshold.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeConstTEClrThreshold.setDescription('The Constant Time Error Alert Clear threshold (ns).')
f3SyncJPTPClockProbeConstTEWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 44), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeConstTEWindow.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeConstTEWindow.setDescription('The Averaging window used for Constant TE calculation (sec).')
f3SyncJPTPClockProbeInstTEThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 45), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeInstTEThreshold.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeInstTEThreshold.setDescription('The Instant Time Error Alert threshold (ns).')
f3SyncJPTPClockProbeInstTEClrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 46), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeInstTEClrThreshold.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeInstTEClrThreshold.setDescription('The Instant Time Error Alert Clear threshold (ns).')
f3SyncJPTPClockProbeMaxTETotAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 47), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMaxTETotAlarmTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMaxTETotAlarmTime.setDescription('The Total time in seconds Max TE has been measured')
f3SyncJPTPClockProbeConstTETotAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 48), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeConstTETotAlarmTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeConstTETotAlarmTime.setDescription('The Total time in seconds Constant TE has been measured.')
f3SyncJPTPClockProbeInstTETotAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeInstTETotAlarmTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeInstTETotAlarmTime.setDescription('The Total time in seconds Instant TE has been measured.')
f3SyncJPTPClockProbeSlavePortIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeSlavePortIdentity.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeSlavePortIdentity.setDescription('The Tested Slave Port Identity.')
f3SyncJPTPClockProbeMasterPortIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMasterPortIdentity.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMasterPortIdentity.setDescription('The Tested Master Port Identity.')
f3SyncJPTPClockProbeConstTEMeasurementTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 52), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeConstTEMeasurementTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeConstTEMeasurementTime.setDescription('The Const TE Measurement Time for this entry.')
f3SyncJPTPClockProbeMaxTEMeasurementTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 53), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMaxTEMeasurementTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMaxTEMeasurementTime.setDescription('The Max TE Measurement Time for this entry.')
f3SyncJPTPClockProbeInstTEMeasurementTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 54), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeInstTEMeasurementTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeInstTEMeasurementTime.setDescription('The Inst TE Measurement Time for this entry.')
f3SyncJPTPClockProbeMaxTEThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMaxTEThreshold.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMaxTEThreshold.setDescription('The TE Max threshold configured for this entry.')
f3SyncJPTPClockProbeMaxTEClrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMaxTEClrThreshold.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMaxTEClrThreshold.setDescription('The TE Max clear threshold configured for this entry.')
f3SyncJPTPClockProbeMTIERestart = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 5, 1, 57), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMTIERestart.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMTIERestart.setDescription('The MTIE Restart configured for this entry.')
f3SyncJPTPClockProbeMTIEValueTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 6), )
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMTIEValueTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMTIEValueTable.setDescription("A list of entries corresponding to the PTP Clock Probe's MTIE Result\n          Values.")
f3SyncJPTPClockProbeMTIEValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 6, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeMTIEValueIndex"))
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMTIEValueEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMTIEValueEntry.setDescription("An entry containing information applicable to a particular\n           PTP Clock Probe's MTIE Result Value.")
f3SyncJPTPClockProbeMTIEValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMTIEValueIndex.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMTIEValueIndex.setDescription('Unique index value associated with the PTP Clock Probe Result Value.')
f3SyncJPTPClockProbeMTIEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMTIEValue.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeMTIEValue.setDescription('This object allows SNMP management entities to retrieve\n          MTIE Result Values in nanoseconds.')
f3SyncJPTPClockProbeResHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7), )
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryTable.setDescription('A list of entries corresponding to the SyncJack PTP Clock Probe Result \n        History.')
f3SyncJPTPClockProbeResHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryIndex"))
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryEntry.setDescription('An entry containing information applicable to a particular\n           SyncJack PTP Clock Probe Result History.')
f3SyncJPTPClockProbeResHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryIndex.setDescription('Unique index value associated with the PTP Clock Probe.')
f3SyncJPTPClockProbeResHistoryAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryAlias.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryAlias.setDescription('This object provides alias of the PTP Clock Probe result history.')
f3SyncJPTPClockProbeResHistoryMeasurementDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 3), PTPMeasurementDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMeasurementDirection.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMeasurementDirection.setDescription('This object specifies the Measurement Direction to the PTP Clock Probe entity.')
f3SyncJPTPClockProbeResHistoryPTPFlowPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 4), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryPTPFlowPoint.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryPTPFlowPoint.setDescription('This object indicates the PTP Flow Point used as \n          source for PTP Clock Probe measurements.')
f3SyncJPTPClockProbeResHistoryIpPrototocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 5), IpVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryIpPrototocol.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryIpPrototocol.setDescription('This object indicates the IP Protocol used for PTP communication. ')
f3SyncJPTPClockProbeResHistorySlaveIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistorySlaveIpV4Address.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistorySlaveIpV4Address.setDescription('This object indicates the \n          Slave IP Address associated with the PTP Clock Probe.')
f3SyncJPTPClockProbeResHistoryMasterIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMasterIpV4Address.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMasterIpV4Address.setDescription('This object indicates the \n          Master IP Address associated with the PTP Clock Probe.')
f3SyncJPTPClockProbeResHistoryReference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 8), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryReference.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryReference.setDescription('This object indicates the PTP Clock Probe \n           PTP Clock Probe Entity.  PTP Clock Probe compares this with the \n           PTP Master/Slave entity configured using \n           f3SyncJPTPClockProbeMasterIpV4Address/f3SyncJPTPClockProbeSlaveIpV4Address \n           and computes TIE, MTIE.')
f3SyncJPTPClockProbeResHistoryExpectedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 9), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryExpectedQL.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryExpectedQL.setDescription('This object represents the minimum expected Quality Level \n           when bits-in and sync-e PHY are references.')
f3SyncJPTPClockProbeResHistoryMTIEMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 10), MTIEMaskType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMTIEMaskType.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMTIEMaskType.setDescription('This object represents the MTIE Mask Type.')
f3SyncJPTPClockProbeResHistoryMTIEMaskMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMTIEMaskMargin.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMTIEMaskMargin.setDescription('This object represents the MTIE Mask Margin.')
f3SyncJPTPClockProbeResHistoryNoTimestampFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryNoTimestampFailure.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryNoTimestampFailure.setDescription('This object provides information on whether the measured PTP source\n          indicated a no-timestamp failure.')
f3SyncJPTPClockProbeResHistoryNoEventMessageFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryNoEventMessageFailure.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryNoEventMessageFailure.setDescription('This object provides information on whether the measured PTP source\n          indicated a no-event message failure.')
f3SyncJPTPClockProbeResHistoryReferenceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryReferenceFailure.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryReferenceFailure.setDescription('This object provides information on whether the reference failed.')
f3SyncJPTPClockProbeResHistoryActualTestStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryActualTestStartTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryActualTestStartTime.setDescription('This object provides the time when the actual test was started.')
f3SyncJPTPClockProbeResHistoryActualTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryActualTestDuration.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryActualTestDuration.setDescription('This object provides information on the actual test duration in seconds.')
f3SyncJPTPClockProbeResHistoryMTIEMaskCrossedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMTIEMaskCrossedTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMTIEMaskCrossedTime.setDescription('This object provides the time when the MTIE mask was crossed.')
f3SyncJPTPClockProbeResHistoryMTIEMaskMarginCrossedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMTIEMaskMarginCrossedTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMTIEMaskMarginCrossedTime.setDescription('This object provides the time when the MTIE mask margin was crossed.')
f3SyncJPTPClockProbeResHistoryStatusMTIEMaskFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryStatusMTIEMaskFailed.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryStatusMTIEMaskFailed.setDescription('This object provides the result status, whether MTIE Mask has failed.')
f3SyncJPTPClockProbeResHistoryStatusMTIEMarginFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryStatusMTIEMarginFailed.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryStatusMTIEMarginFailed.setDescription('This object provides the result status, whether MTIE Margin has failed.')
f3SyncJPTPClockProbeResHistoryStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 21), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryStorageType.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryStorageType.setDescription('The type of storage configured for this entry.')
f3SyncJPTPClockProbeResHistoryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3SyncJPTPClockProbeResHistoryRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3SyncJPTPClockProbeResHistoryRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3SyncJPTPClockProbeResHistoryRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3SyncJPTPClockProbeResHistoryMinFFO = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMinFFO.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMinFFO.setDescription('The Min FFO configured for this entry.')
f3SyncJPTPClockProbeResHistoryMaxFFO = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMaxFFO.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMaxFFO.setDescription('The Max FFO configured for this entry.')
f3SyncJPTPClockProbeResHistoryAvgFFO = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryAvgFFO.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryAvgFFO.setDescription('The average FFO configured for this entry.')
f3SyncJPTPClockProbeResHistoryOutOfTargetFFOTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryOutOfTargetFFOTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryOutOfTargetFFOTime.setDescription('The out of target FFO time configured for this entry.')
f3SyncJPTPClockProbeResHistoryTotalFFOTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryTotalFFOTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryTotalFFOTime.setDescription('The total FFO time configured for this entry.')
f3SyncJPTPClockProbeResHistoryMinPhaseOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMinPhaseOffset.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMinPhaseOffset.setDescription('The Min phase offset configured for this entry.')
f3SyncJPTPClockProbeResHistoryMaxPhaseOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMaxPhaseOffset.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMaxPhaseOffset.setDescription('The Max phase offset configured for this entry.')
f3SyncJPTPClockProbeResHistoryAvgPhaseOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryAvgPhaseOffset.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryAvgPhaseOffset.setDescription('The average phase offset configured for this entry.')
f3SyncJPTPClockProbeResHistoryOutOfTargetPhaseOffsetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryOutOfTargetPhaseOffsetTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryOutOfTargetPhaseOffsetTime.setDescription('The out of target phase offset time configured for this entry.')
f3SyncJPTPClockProbeResHistoryTotalPhaseOffsetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryTotalPhaseOffsetTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryTotalPhaseOffsetTime.setDescription('The total phase offset time configured for this entry.')
f3SyncJPTPClockProbeResHistoryTeAlertThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryTeAlertThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryTeAlertThreshold.setDescription('The TE alert threshold configured for this entry.')
f3SyncJPTPClockProbeResHistoryTeAlertClearThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryTeAlertClearThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryTeAlertClearThreshold.setDescription('The TE alert clear threshold configured for this entry.')
f3SyncJPTPClockProbeResHistoryLastTEAlertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 35), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryLastTEAlertTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryLastTEAlertTime.setDescription('The last TE alert time for this entry.')
f3SyncJPTPClockProbeResHistoryLastTEAlertClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 36), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryLastTEAlertClearTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryLastTEAlertClearTime.setDescription('The last TE alert clear time for this entry.')
f3SyncJPTPClockProbeResHistoryRunningFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryRunningFailedCount.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryRunningFailedCount.setDescription('The running failed count for this entry.')
f3SyncJPTPClockProbeResHistoryMeasurementType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 38), MeasurementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMeasurementType.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMeasurementType.setDescription('The measurement type configured for this entry.')
f3SyncJPTPClockProbeResHistoryConstTEThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryConstTEThreshold.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryConstTEThreshold.setDescription('The Constant Time Error Alert threshold (ns).')
f3SyncJPTPClockProbeResHistoryConstTEClrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryConstTEClrThreshold.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryConstTEClrThreshold.setDescription('The Constant Time Error Alert Clear threshold (ns).')
f3SyncJPTPClockProbeResHistoryConstTEWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryConstTEWindow.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryConstTEWindow.setDescription('The Averaging window used for Constant TE calculation (sec).')
f3SyncJPTPClockProbeResHistoryInstTEThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryInstTEThreshold.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryInstTEThreshold.setDescription('The Instant Time Error Alert threshold (ns).')
f3SyncJPTPClockProbeResHistoryInstTEClrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryInstTEClrThreshold.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryInstTEClrThreshold.setDescription('The Instant Time Error Alert Clear threshold (ns).')
f3SyncJPTPClockProbeResHistoryMaxTETotAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMaxTETotAlarmTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMaxTETotAlarmTime.setDescription('The Total time in seconds Max TE has been measured')
f3SyncJPTPClockProbeResHistoryConstTETotAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryConstTETotAlarmTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryConstTETotAlarmTime.setDescription('The Total time in seconds Constant TE has been measured.')
f3SyncJPTPClockProbeResHistoryInstTETotAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryInstTETotAlarmTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryInstTETotAlarmTime.setDescription('The Total time in seconds Instant TE has been measured.')
f3SyncJPTPClockProbeResHistorySlavePortIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistorySlavePortIdentity.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistorySlavePortIdentity.setDescription('The Tested Slave Port Identity.')
f3SyncJPTPClockProbeResHistoryMasterPortIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMasterPortIdentity.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMasterPortIdentity.setDescription('The Tested Master Port Identity.')
f3SyncJPTPClockProbeResHistoryConstTEMeasurementTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryConstTEMeasurementTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryConstTEMeasurementTime.setDescription('The Const TE Measurement Time for this entry.')
f3SyncJPTPClockProbeResHistoryMaxTEMeasurementTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMaxTEMeasurementTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMaxTEMeasurementTime.setDescription('The Max TE Measurement Time for this entry.')
f3SyncJPTPClockProbeResHistoryInstTEMeasurementTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 51), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryInstTEMeasurementTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryInstTEMeasurementTime.setDescription('The Inst TE Measurement Time for this entry.')
f3SyncJPTPClockProbeResHistoryMaxTEThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMaxTEThreshold.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMaxTEThreshold.setDescription('The TE Max threshold configured for this entry.')
f3SyncJPTPClockProbeResHistoryMaxTEClrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 7, 1, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMaxTEClrThreshold.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMaxTEClrThreshold.setDescription('The TE Max clear threshold configured for this entry.')
f3SyncJPTPClockProbeResHistoryMTIEValueTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 8), )
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMTIEValueTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMTIEValueTable.setDescription("A list of histgory entries corresponding to the \n          PTP Clock Probe's MTIE Result Values.")
f3SyncJPTPClockProbeResHistoryMTIEValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 8, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryMTIEValueIndex"))
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMTIEValueEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMTIEValueEntry.setDescription("An entry containing information applicable to a particular\n           PTP Clock Probe's MTIE Result Value.")
f3SyncJPTPClockProbeResHistoryMTIEValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMTIEValueIndex.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMTIEValueIndex.setDescription('Unique index value associated with the PTP Clock Probe \n          History Result Value.')
f3SyncJPTPClockProbeResHistoryMTIEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMTIEValue.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeResHistoryMTIEValue.setDescription('This object allows SNMP management entities to retrieve\n          MTIE Result Values in nanoseconds.')
f3SyncJPTPNetworkProbeTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9), )
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeTable.setDescription('A list of entries corresponding to the SyncJack PTP Network Probes.')
f3SyncJPTPNetworkProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeIndex"))
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeEntry.setDescription('An entry containing information applicable to a particular\n           SyncJack PTP Network Probe.')
f3SyncJPTPNetworkProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeIndex.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeIndex.setDescription('Unique index value associated with the PTP Network Probe.')
f3SyncJPTPNetworkProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeName.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeName.setDescription('This object allows SNMP management entities to provide a \n          name to the PTP Network Probe entity.')
f3SyncJPTPNetworkProbeAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 3), AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeAdminState.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeAdminState.setDescription('This object represents the Administrative State of the \n           PTP Network Probe. This is not externally managed.')
f3SyncJPTPNetworkProbeOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeOperationalState.setDescription('This object represents the Operational State of the PTP Network Probe.')
f3SyncJPTPNetworkProbeSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeSecondaryState.setDescription('This object represents the Secondary State of the PTP Network Probe.')
f3SyncJPTPNetworkProbePTPFlowPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 6), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbePTPFlowPoint.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbePTPFlowPoint.setDescription('This object allows SNMP management entities to specify the \n          PTP Flow Point to use as source for PTP Network Probe measurements.')
f3SyncJPTPNetworkProbeIpPrototocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 7), IpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeIpPrototocol.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeIpPrototocol.setDescription('This object allows SNMP management entities to specify the \n          IP Protocol used for PTP communication. ')
f3SyncJPTPNetworkProbeSlaveIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeSlaveIpV4Address.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeSlaveIpV4Address.setDescription('This object allows SNMP management entities to specify the \n          Slave IP Address associated with the PTP Network Probe.')
f3SyncJPTPNetworkProbeMasterIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeMasterIpV4Address.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeMasterIpV4Address.setDescription('This object allows SNMP management entities to specify the \n          Master IP Address associated with the PTP Network Probe.')
f3SyncJPTPNetworkProbeReference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 10), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeReference.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeReference.setDescription('This object allows setting up of the PTP Network Probe \n           Reference Entity.')
f3SyncJPTPNetworkProbeExpectedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 11), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeExpectedQL.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeExpectedQL.setDescription('This object represents the minimum expected Quality Level \n           when bits-in and sync-e PHY are references.')
f3SyncJPTPNetworkProbeActualTestStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeActualTestStartTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeActualTestStartTime.setDescription('This object provides information on the actual test start time.')
f3SyncJPTPNetworkProbeActualTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeActualTestDuration.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeActualTestDuration.setDescription('This object provides information on the actual test duration in seconds.')
f3SyncJPTPNetworkProbePDVAssuredHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbePDVAssuredHi.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbePDVAssuredHi.setDescription('This object allows configuration of the higher order 32 bits of the\n          assured level packet delay variation network limit for the PTP \n          Network Probe, in nanoseconds.  \n          This helps in computing the network usability score.')
f3SyncJPTPNetworkProbePDVAssuredLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbePDVAssuredLo.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbePDVAssuredLo.setDescription('This object allows configuration of the lower order 32 bits of the\n          assured level packet delay variation network limit for the PTP \n          Network Probe, in nanoseconds.  \n          This helps in computing the network usability score.')
f3SyncJPTPNetworkProbePDVSatisfiedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbePDVSatisfiedHi.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbePDVSatisfiedHi.setDescription('This object allows configuration of the higher order 32 bits of the\n          satisfied level of packet delay variation network limit for the \n          PTP Network Probe, in nanoseconds.\n          This helps in computing the network usability score.')
f3SyncJPTPNetworkProbePDVSatisfiedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbePDVSatisfiedLo.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbePDVSatisfiedLo.setDescription('This object allows configuration of the lower order 32 bits of the \n          satisfied level of packet delay variation network limit for the \n          PTP Network Probe, in nanoseconds.\n          This helps in computing the network usability score.')
f3SyncJPTPNetworkProbeResPDVFwdLowRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeResPDVFwdLowRange.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeResPDVFwdLowRange.setDescription('This object allows configuration of the low range for\n          Residual Path Delay Variation statistics in the forward\n          direction (i.e. master to slave), in nanoseconds.')
f3SyncJPTPNetworkProbeResPDVFwdMediumRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeResPDVFwdMediumRange.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeResPDVFwdMediumRange.setDescription('This object allows configuration of the medium range for\n          Residual Path Delay Variation statistics in the forward\n          direction (i.e. master to slave), in nanoseconds.')
f3SyncJPTPNetworkProbeResPDVFwdHighRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeResPDVFwdHighRange.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeResPDVFwdHighRange.setDescription('This object allows configuration of the high range for\n          Residual Path Delay Variation statistics in the forward\n          direction (i.e. master to slave), in nanoseconds.')
f3SyncJPTPNetworkProbeResPDVRevLowRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeResPDVRevLowRange.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeResPDVRevLowRange.setDescription('This object allows configuration of the low range for\n          Residual Path Delay Variation statistics in the reverse\n          direction (i.e. slave to master), in nanoseconds.')
f3SyncJPTPNetworkProbeResPDVRevMediumRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeResPDVRevMediumRange.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeResPDVRevMediumRange.setDescription('This object allows configuration of the medium range for\n          Residual Path Delay Variation statistics in the reverse\n          direction (i.e. slave to master), in nanoseconds.')
f3SyncJPTPNetworkProbeResPDVRevHighRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeResPDVRevHighRange.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeResPDVRevHighRange.setDescription('This object allows configuration of the high range for\n          Residual Path Delay Variation statistics in the reverse \n          direction (i.e. slave to master), in nanoseconds.')
f3SyncJPTPNetworkProbeScheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 24), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeScheduler.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeScheduler.setDescription('This object provides the associated scheduler instance, if one\n          exists, with this PTP Network Probe.  This value is 0.0, if there is no\n          scheduler associated with the PTP Network Probe.')
f3SyncJPTPNetworkProbeTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 25), SyncJackTestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeTestState.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeTestState.setDescription('This object provides the PTP Network Probe test state.')
f3SyncJPTPNetworkProbeNoTimestampFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeNoTimestampFailure.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeNoTimestampFailure.setDescription('This object provides information on whether the measured PTP source\n          indicated a no-timestamp failure.')
f3SyncJPTPNetworkProbeNoEventMessageFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeNoEventMessageFailure.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeNoEventMessageFailure.setDescription('This object provides information on whether the measured PTP source\n          indicated a no-event message failure.')
f3SyncJPTPNetworkProbeFwdScore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeFwdScore.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeFwdScore.setDescription('This object provides the current score in the forward direction.')
f3SyncJPTPNetworkProbeRevScore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeRevScore.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeRevScore.setDescription('This object provides the current score in the reverse direction.')
f3SyncJPTPNetworkProbeReferenceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeReferenceFailure.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeReferenceFailure.setDescription('This object provides information on whether the reference failed.')
f3SyncJPTPNetworkProbeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 31), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStorageType.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStorageType.setDescription('The type of storage configured for this entry.')
f3SyncJPTPNetworkProbeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 32), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3SyncJPTPNetworkProbeRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3SyncJPTPNetworkProbeRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3SyncJPTPNetworkProbeRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3SyncJPTPNetworkProbeResultsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 9, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeResultsAvailable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeResultsAvailable.setDescription('The results available configured for this entry.')
f3SyncJScheduleGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 10), )
if mibBuilder.loadTexts: f3SyncJScheduleGroupTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJScheduleGroupTable.setDescription('A list of entries that allow a set of SyncJack Clock Probes, \n             PTP Clock Probes and PTP Network Probes to be scheduled.')
f3SyncJScheduleGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 10, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJScheduleGroupIndex"))
if mibBuilder.loadTexts: f3SyncJScheduleGroupEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJScheduleGroupEntry.setDescription('A row in f3SyncJScheduleGroupTable. Entries are created\n          in this table by management application action.')
f3SyncJScheduleGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: f3SyncJScheduleGroupIndex.setStatus('current')
if mibBuilder.loadTexts: f3SyncJScheduleGroupIndex.setDescription('A unique index to distinguish the SyncJack Schedule Group.')
f3SyncJScheduleGroupDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJScheduleGroupDescr.setStatus('current')
if mibBuilder.loadTexts: f3SyncJScheduleGroupDescr.setDescription('Description of the SyncJack schedule group.')
f3SyncJScheduleGroupEntityList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJScheduleGroupEntityList.setStatus('current')
if mibBuilder.loadTexts: f3SyncJScheduleGroupEntityList.setDescription('A comma separated list of Clock Probes, PTP Clock Probes and PTP Network Probes, \n             that will have the same schedule.')
f3SyncJScheduleGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 10, 1, 4), ScheduleType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJScheduleGroupType.setStatus('current')
if mibBuilder.loadTexts: f3SyncJScheduleGroupType.setDescription("This object allows to specify the schedule group type of\n          the SyncJack Schedule group.  Only 'one-shot' is supported.")
f3SyncJScheduleGroupStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 10, 1, 5), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJScheduleGroupStartTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJScheduleGroupStartTime.setDescription('This object allows specification of the start time\n          of the SyncJack Schedule Group. \n          Value of time less than current system time will equate to \n          current time. When the system time reaches\n          this configured time, the SyncJack Schedule Group will be activated.')
f3SyncJScheduleGroupDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 10, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJScheduleGroupDuration.setStatus('current')
if mibBuilder.loadTexts: f3SyncJScheduleGroupDuration.setDescription("This object allows specification of the duration in\n          'seconds' for SyncJack Schedule Group run. Note that a value of\n          4294967295 means Duration as FOREVER.")
f3SyncJScheduleGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 10, 1, 7), SchedActivityStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJScheduleGroupStatus.setStatus('current')
if mibBuilder.loadTexts: f3SyncJScheduleGroupStatus.setDescription('This object indicates the current status of the SyncJack Schedule Group.')
f3SyncJScheduleGroupStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 10, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJScheduleGroupStorageType.setStatus('current')
if mibBuilder.loadTexts: f3SyncJScheduleGroupStorageType.setDescription('The type of storage configured for this entry.')
f3SyncJScheduleGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 10, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncJScheduleGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3SyncJScheduleGroupRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3SyncJScheduleGroupRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3SyncJScheduleGroupRowStatus value as createAndGo(4).\n            Upon successful row creation, this variable has a\n            value of active(1).\n\n            The f3SyncJScheduleGroupRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3UserDefinedMTIEMaskTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 11), )
if mibBuilder.loadTexts: f3UserDefinedMTIEMaskTable.setStatus('current')
if mibBuilder.loadTexts: f3UserDefinedMTIEMaskTable.setDescription('A list of entries that enable the user to define a new (only one) MTIE mask for Clock Probe and for PTP clock Probe. .')
f3UserDefinedMTIEMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 11, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNCJACK-MIB", "f3UserDefinedMTIEMaskIndex"))
if mibBuilder.loadTexts: f3UserDefinedMTIEMaskEntry.setStatus('current')
if mibBuilder.loadTexts: f3UserDefinedMTIEMaskEntry.setDescription('A row in f3UserDefinedMTIEMaskTable. Entries are created\n          in this table by management application action.')
f3UserDefinedMTIEMaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: f3UserDefinedMTIEMaskIndex.setStatus('current')
if mibBuilder.loadTexts: f3UserDefinedMTIEMaskIndex.setDescription('A unique index to distinguish the User Defined MTIE Mask.')
f3UserDefinedMTIEMaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3UserDefinedMTIEMaskName.setStatus('current')
if mibBuilder.loadTexts: f3UserDefinedMTIEMaskName.setDescription('This object allows SNMP management entities to provide a \n                        name to the User Defined MTIE Mask entity.')
f3UserDefinedMTIEMaskDisplayPoints = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3UserDefinedMTIEMaskDisplayPoints.setStatus('current')
if mibBuilder.loadTexts: f3UserDefinedMTIEMaskDisplayPoints.setDescription('This object allows to specify the coordinates point in form of x,y pairs separated by semicolon. \n                        X values are in seconds, y values are in nanoseconds.')
f3UserDefinedMTIEMaskMeasurmentPoints = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3UserDefinedMTIEMaskMeasurmentPoints.setStatus('current')
if mibBuilder.loadTexts: f3UserDefinedMTIEMaskMeasurmentPoints.setDescription('This object allows specification of the measurement intervals y-points in nanoseconds.')
f3UserDefinedMTIEMaskStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 11, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3UserDefinedMTIEMaskStorageType.setStatus('current')
if mibBuilder.loadTexts: f3UserDefinedMTIEMaskStorageType.setDescription('The type of storage configured for this entry.')
f3UserDefinedMTIEMaskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 1, 11, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3UserDefinedMTIEMaskRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3UserDefinedMTIEMaskRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3UserDefinedMTIEMaskRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3UserDefinedMTIEMaskRowStatus value as createAndGo(4).\n            Upon successful row creation, this variable has a\n            value of active(1).\n\n            The f3UserDefinedMTIEMaskRowStatus object may be modified if\n          f3UserDefinedMTIEMaskEntry of this object is equal to active(1).')
f3SyncJPTPNetworkProbeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1), )
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsTable.setDescription('A collection of SyncJack PTP Network Probe statistics.  \n             These reflect the current data.')
f3SyncJPTPNetworkProbeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsIndex"))
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsEntry.setDescription('A conceptual row in the f3SyncJPTPNetworkProbeStatsTable.\n             Entries exist in this table for each PTP Network Probe.')
f3SyncJPTPNetworkProbeStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this PTPNetworkProbe statistics entry. \n            Index 1 corresponds to 15minute, index 2 to 1 day and index\n            3 corresponds to rollover.')
f3SyncJPTPNetworkProbeStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsIntervalType.setDescription('Indicates the type of collection, i.e. whether it is\n             15 Min, 1 Day or rollover.')
f3SyncJPTPNetworkProbeStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsValid.setDescription('Indicates the validity of the bin.')
f3SyncJPTPNetworkProbeStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsAction.setDescription('Allows the Manager to clear the bin.')
f3SyncJPTPNetworkProbeStatsSyncMsgsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 5), PerfCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsSyncMsgsRx.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsSyncMsgsRx.setDescription('Number of PTP Sync messages received at the PTP Network Probe.')
f3SyncJPTPNetworkProbeStatsDelayRspMsgsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 6), PerfCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsDelayRspMsgsRx.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsDelayRspMsgsRx.setDescription('Number of PTP Delay Response messages received at \n          the PTP Network Probe.')
f3SyncJPTPNetworkProbeStatsLostSyncMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 7), PerfCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsLostSyncMsgs.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsLostSyncMsgs.setDescription('Number of PTP Sync messages counted as lost at \n          the PTP Network Probe.')
f3SyncJPTPNetworkProbeStatsLostDelayRspMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 8), PerfCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsLostDelayRspMsgs.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsLostDelayRspMsgs.setDescription('Number of PTP Delay Response messages counted as lost at \n          the PTP Network Probe.')
f3SyncJPTPNetworkProbeStatsMinMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 9), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsMinMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsMinMeanPathDelay.setDescription('Minimum Mean Path Delay in nanoseconds computed at the PTP Network Probe.')
f3SyncJPTPNetworkProbeStatsMaxMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 10), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsMaxMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsMaxMeanPathDelay.setDescription('Maximum Mean Path Delay in nanoseconds computed at the PTP Network Probe.')
f3SyncJPTPNetworkProbeStatsAvgMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 11), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsAvgMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsAvgMeanPathDelay.setDescription('Average Mean Path Delay in nanoseconds computed at the PTP Network Probe.')
f3SyncJPTPNetworkProbeStatsMinSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 12), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsMinSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsMinSyncPathDelay.setDescription('Minimum Path Delay in nanoseconds of Sync messages computed \n          at the PTP Network Probe.')
f3SyncJPTPNetworkProbeStatsMaxSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 13), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsMaxSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsMaxSyncPathDelay.setDescription('Maximum Path Delay in nanoseconds of Sync messages computed \n          at the PTP Network Probe.')
f3SyncJPTPNetworkProbeStatsAvgSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 14), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsAvgSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsAvgSyncPathDelay.setDescription('Average Path Delay in nanoseconds of Sync messages computed \n          at the PTP Network Probe.')
f3SyncJPTPNetworkProbeStatsAvgResPDVFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 15), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsAvgResPDVFwd.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsAvgResPDVFwd.setDescription('Average Residual Packet Delay Variation in nanoseconds in the \n          forward direction.')
f3SyncJPTPNetworkProbeStatsResPDVFwdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsResPDVFwdLow.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsResPDVFwdLow.setDescription('Total number of Low Range Residual Packet Delay Variation\n          results in the forward direction.')
f3SyncJPTPNetworkProbeStatsResPDVFwdMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsResPDVFwdMedium.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsResPDVFwdMedium.setDescription('Total number of Medium Range Residual Packet Delay Variation\n          results in the forward direction.')
f3SyncJPTPNetworkProbeStatsResPDVFwdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsResPDVFwdHigh.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsResPDVFwdHigh.setDescription('Total number of High Range Residual Packet Delay Variation\n          results in the forward direction.')
f3SyncJPTPNetworkProbeStatsResPDVFwdTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsResPDVFwdTotal.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsResPDVFwdTotal.setDescription('Total number of Residual Packet Delay Variation results \n          in the forward direction.')
f3SyncJPTPNetworkProbeStatsFwdScore5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsFwdScore5.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsFwdScore5.setDescription('Total time the network usability score is 5 in the forward direction.')
f3SyncJPTPNetworkProbeStatsFwdScore4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsFwdScore4.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsFwdScore4.setDescription('Total time the network usability score is 4 in the forward direction.')
f3SyncJPTPNetworkProbeStatsFwdScore3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsFwdScore3.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsFwdScore3.setDescription('Total time the network usability score is 3 in the forward direction.')
f3SyncJPTPNetworkProbeStatsAvgResPDVRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 23), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsAvgResPDVRev.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsAvgResPDVRev.setDescription('Average Residual Packet Delay Variation in nanoseconds in the \n          reverse direction.')
f3SyncJPTPNetworkProbeStatsResPDVRevLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsResPDVRevLow.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsResPDVRevLow.setDescription('Total number of Low Range Residual Packet Delay Variation\n          results in the reverse direction.')
f3SyncJPTPNetworkProbeStatsResPDVRevMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsResPDVRevMedium.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsResPDVRevMedium.setDescription('Total number of Medium Range Residual Packet Delay Variation\n          results in the reverse direction.')
f3SyncJPTPNetworkProbeStatsResPDVRevHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsResPDVRevHigh.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsResPDVRevHigh.setDescription('Total number of High Range Residual Packet Delay Variation\n          results in the reverse direction.')
f3SyncJPTPNetworkProbeStatsResPDVRevTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsResPDVRevTotal.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsResPDVRevTotal.setDescription('Total number of Residual Packet Delay Variation results \n          in the reverse direction.')
f3SyncJPTPNetworkProbeStatsRevScore5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsRevScore5.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsRevScore5.setDescription('Total time the network usability score is 5 in the reverse direction.')
f3SyncJPTPNetworkProbeStatsRevScore4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsRevScore4.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsRevScore4.setDescription('Total time the network usability score is 4 in the reverse direction.')
f3SyncJPTPNetworkProbeStatsRevScore3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsRevScore3.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsRevScore3.setDescription('Total time the network usability score is 3 in the reverse direction.')
f3SyncJPTPNetworkProbeStatsMinRPDVFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 31), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsMinRPDVFwd.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsMinRPDVFwd.setDescription('Minimum Residual PDV in the forward direction.')
f3SyncJPTPNetworkProbeStatsMinRPDVRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 32), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsMinRPDVRev.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsMinRPDVRev.setDescription('Minimum Residual PDV in the reverse direction.')
f3SyncJPTPNetworkProbeStatsMinPathAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsMinPathAsymmetry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsMinPathAsymmetry.setDescription('The min path asymmetry for this entry.')
f3SyncJPTPNetworkProbeStatsMaxPathAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsMaxPathAsymmetry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsMaxPathAsymmetry.setDescription('The max path asymmetry for this entry.')
f3SyncJPTPNetworkProbeStatsAvgPathAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsAvgPathAsymmetry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsAvgPathAsymmetry.setDescription('The average path asymmetry for this entry.')
f3SyncJPTPNetworkProbeStatsPathLossSecondsFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsPathLossSecondsFwd.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsPathLossSecondsFwd.setDescription('The path loss seconds forwarded for this entry.')
f3SyncJPTPNetworkProbeStatsPathLossSecondsRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsPathLossSecondsRev.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsPathLossSecondsRev.setDescription('The path loss seconds reverted for this entry.')
f3SyncJPTPNetworkProbeStatsMinDelayReqPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 38), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsMinDelayReqPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsMinDelayReqPathDelay.setDescription('Minimum Delay Req Path Delay in nanoseconds computed at the PTP Network Probe.')
f3SyncJPTPNetworkProbeStatsMaxDelayReqPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 39), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsMaxDelayReqPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsMaxDelayReqPathDelay.setDescription('Maximum Delay Req Path Delay in nanoseconds computed at the PTP Network Probe.')
f3SyncJPTPNetworkProbeStatsAvgDelayReqPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 1, 1, 40), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsAvgDelayReqPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatsAvgDelayReqPathDelay.setDescription('Average Delay Req Path Delay in nanoseconds computed at the PTP Network Probe.')
f3SyncJPTPNetworkProbeHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2), )
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryTable.setDescription('A collection of SyncJack PTP Network Probe statistics.  \n             These reflect the history data.')
f3SyncJPTPNetworkProbeHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryIndex"))
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryEntry.setDescription('A conceptual row in the f3SyncJPTPNetworkProbeHistoryTable.\n             Entries exist in this table for each PTP Network Probe.')
f3SyncJPTPNetworkProbeHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this SyncJack PTP Network Probe PM history entry.')
f3SyncJPTPNetworkProbeHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryTime.setDescription('Indicates the time of history bin creation.')
f3SyncJPTPNetworkProbeHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryValid.setDescription('Indicates the validity of the bin.')
f3SyncJPTPNetworkProbeHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3SyncJPTPNetworkProbeHistorySyncMsgsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 5), PerfCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistorySyncMsgsRx.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistorySyncMsgsRx.setDescription('Number of PTP Sync messages received at the PTP Network Probe.')
f3SyncJPTPNetworkProbeHistoryDelayRspMsgsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 6), PerfCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryDelayRspMsgsRx.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryDelayRspMsgsRx.setDescription('Number of PTP Delay Response messages received at \n          the PTP Network Probe.')
f3SyncJPTPNetworkProbeHistoryLostSyncMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 7), PerfCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryLostSyncMsgs.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryLostSyncMsgs.setDescription('Number of PTP Sync messages counted as lost at \n          the PTP Network Probe.')
f3SyncJPTPNetworkProbeHistoryLostDelayRspMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 8), PerfCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryLostDelayRspMsgs.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryLostDelayRspMsgs.setDescription('Number of PTP Delay Response messages counted as lost at \n          the PTP Network Probe.')
f3SyncJPTPNetworkProbeHistoryMinMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 9), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryMinMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryMinMeanPathDelay.setDescription('Minimum Mean Path Delay in nanoseconds computed at the PTP Network Probe.')
f3SyncJPTPNetworkProbeHistoryMaxMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 10), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryMaxMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryMaxMeanPathDelay.setDescription('Maximum Mean Path Delay in nanoseconds computed at the PTP Network Probe.')
f3SyncJPTPNetworkProbeHistoryAvgMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 11), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryAvgMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryAvgMeanPathDelay.setDescription('Average Mean Path Delay in nanoseconds computed at the PTP Network Probe.')
f3SyncJPTPNetworkProbeHistoryMinSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 12), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryMinSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryMinSyncPathDelay.setDescription('Minimum Path Delay in nanoseconds of Sync messages computed \n          at the PTP Network Probe.')
f3SyncJPTPNetworkProbeHistoryMaxSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 13), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryMaxSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryMaxSyncPathDelay.setDescription('Maximum Path Delay in nanoseconds of Sync messages computed \n          at the PTP Network Probe.')
f3SyncJPTPNetworkProbeHistoryAvgSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 14), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryAvgSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryAvgSyncPathDelay.setDescription('Average Path Delay in nanoseconds of Sync messages computed \n          at the PTP Network Probe.')
f3SyncJPTPNetworkProbeHistoryAvgResPDVFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 15), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryAvgResPDVFwd.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryAvgResPDVFwd.setDescription('Average Residual Packet Delay Variation in nanoseconds in the \n          forward direction.')
f3SyncJPTPNetworkProbeHistoryResPDVFwdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryResPDVFwdLow.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryResPDVFwdLow.setDescription('Total number of Low Range Residual Packet Delay Variation\n          results in the forward direction.')
f3SyncJPTPNetworkProbeHistoryResPDVFwdMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryResPDVFwdMedium.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryResPDVFwdMedium.setDescription('Total number of Medium Range Residual Packet Delay Variation\n          results in the forward direction.')
f3SyncJPTPNetworkProbeHistoryResPDVFwdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryResPDVFwdHigh.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryResPDVFwdHigh.setDescription('Total number of High Range Residual Packet Delay Variation\n          results in the forward direction.')
f3SyncJPTPNetworkProbeHistoryResPDVFwdTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryResPDVFwdTotal.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryResPDVFwdTotal.setDescription('Total number of Residual Packet Delay Variation results \n          in the forward direction.')
f3SyncJPTPNetworkProbeHistoryFwdScore5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryFwdScore5.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryFwdScore5.setDescription('Total time the network usability score is 5 in the forward direction.')
f3SyncJPTPNetworkProbeHistoryFwdScore4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryFwdScore4.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryFwdScore4.setDescription('Total time the network usability score is 4 in the forward direction.')
f3SyncJPTPNetworkProbeHistoryFwdScore3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryFwdScore3.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryFwdScore3.setDescription('Total time the network usability score is 3 in the forward direction.')
f3SyncJPTPNetworkProbeHistoryAvgResPDVRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 23), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryAvgResPDVRev.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryAvgResPDVRev.setDescription('Average Residual Packet Delay Variation in nanoseconds in the \n          reverse direction.')
f3SyncJPTPNetworkProbeHistoryResPDVRevLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryResPDVRevLow.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryResPDVRevLow.setDescription('Total number of Low Range Residual Packet Delay Variation\n          results in the reverse direction.')
f3SyncJPTPNetworkProbeHistoryResPDVRevMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryResPDVRevMedium.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryResPDVRevMedium.setDescription('Total number of Medium Range Residual Packet Delay Variation\n          results in the reverse direction.')
f3SyncJPTPNetworkProbeHistoryResPDVRevHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryResPDVRevHigh.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryResPDVRevHigh.setDescription('Total number of High Range Residual Packet Delay Variation\n          results in the reverse direction.')
f3SyncJPTPNetworkProbeHistoryResPDVRevTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryResPDVRevTotal.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryResPDVRevTotal.setDescription('Total number of Residual Packet Delay Variation results \n          in the reverse direction.')
f3SyncJPTPNetworkProbeHistoryRevScore5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryRevScore5.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryRevScore5.setDescription('Total time the network usability score is 5 in the reverse direction.')
f3SyncJPTPNetworkProbeHistoryRevScore4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryRevScore4.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryRevScore4.setDescription('Total time the network usability score is 4 in the reverse direction.')
f3SyncJPTPNetworkProbeHistoryRevScore3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryRevScore3.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryRevScore3.setDescription('Total time the network usability score is 3 in the reverse direction.')
f3SyncJPTPNetworkProbeHistoryMinRPDVFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 31), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryMinRPDVFwd.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryMinRPDVFwd.setDescription('Minimum Residual PDV in the forward direction.')
f3SyncJPTPNetworkProbeHistoryMinRPDVRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 32), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryMinRPDVRev.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryMinRPDVRev.setDescription('Minimum Residual PDV in the reverse direction.')
f3SyncJPTPNetworkProbeHistoryMinPathAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryMinPathAsymmetry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryMinPathAsymmetry.setDescription('The min path asymmetry for this entry.')
f3SyncJPTPNetworkProbeHistoryMaxPathAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryMaxPathAsymmetry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryMaxPathAsymmetry.setDescription('The max path asymmetry for this entry.')
f3SyncJPTPNetworkProbeHistoryAvgPathAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryAvgPathAsymmetry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryAvgPathAsymmetry.setDescription('The average path asymmetry for this entry.')
f3SyncJPTPNetworkProbeHistoryMinDelayReqPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 36), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryMinDelayReqPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryMinDelayReqPathDelay.setDescription('Minimum Delay Req Path Delay in nanoseconds computed at the PTP Network Probe.')
f3SyncJPTPNetworkProbeHistoryMaxDelayReqPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 37), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryMaxDelayReqPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryMaxDelayReqPathDelay.setDescription('Maximum Delay Req Path Delay in nanoseconds computed at the PTP Network Probe.')
f3SyncJPTPNetworkProbeHistoryAvgDelayReqPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 2, 1, 38), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryAvgDelayReqPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeHistoryAvgDelayReqPathDelay.setDescription('Average Delay Req Path Delay in nanoseconds computed at the PTP Network Probe.')
f3SyncJPTPNetworkProbeThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 3), )
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeThresholdTable.setDescription('A table of entries that allow support the PTP Network Probe \n             Thresholds.')
f3SyncJPTPNetworkProbeThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeThresholdIndex"))
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeThresholdEntry.setDescription('A conceptual row in the f3SyncJPTPNetworkProbeThresholdTable.')
f3SyncJPTPNetworkProbeThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3SyncJPTPNetworkProbeThresholdTable.')
f3SyncJPTPNetworkProbeThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 3, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3SyncJPTPNetworkProbeThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 3, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3SyncJPTPNetworkProbeThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3SyncJPTPNetworkProbeThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3SyncJPTPNetworkProbeThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 3, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeThresholdMonValue.setDescription('Monitored value corresponding to f3SyncJPTPNetworkProbeThresholdVariable.')
f3SyncJClockProbeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 4), )
if mibBuilder.loadTexts: f3SyncJClockProbeStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeStatsTable.setDescription('A collection of SyncJack Clock Probe statistics.  \n             These reflect the current data.')
f3SyncJClockProbeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJClockProbeIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJClockProbeStatsIndex"))
if mibBuilder.loadTexts: f3SyncJClockProbeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeStatsEntry.setDescription('A conceptual row in the f3SyncJClockProbeStatsTable.\n             Entries exist in this table for each Clock Probe.')
f3SyncJClockProbeStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: f3SyncJClockProbeStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this PTPNetworkProbe statistics entry. \n            Index 1 corresponds to 15minute, index 2 to 1 day and index\n            3 corresponds to rollover.')
f3SyncJClockProbeStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 4, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeStatsIntervalType.setDescription('Indicates the type of collection, i.e. whether it is\n             15 Min, 1 Day or rollover.')
f3SyncJClockProbeStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeStatsValid.setDescription('Indicates the validity of the bin.')
f3SyncJClockProbeStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 4, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeStatsAction.setDescription('Allows the Manager to clear the bin.')
f3SyncJClockProbeStatsMTIE1s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeStatsMTIE1s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeStatsMTIE1s.setDescription('This attribute indicates MTIE value in ns for 1s observation window.')
f3SyncJClockProbeStatsMTIE10s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeStatsMTIE10s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeStatsMTIE10s.setDescription('This attribute indicates MTIE value in ns for 10s observation window.')
f3SyncJClockProbeStatsMTIE100s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeStatsMTIE100s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeStatsMTIE100s.setDescription('This attribute indicates MTIE value in ns for 100s observation window.')
f3SyncJClockProbeStatsMTIE1000s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeStatsMTIE1000s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeStatsMTIE1000s.setDescription('This attribute indicates MTIE value in ns for 1000s observation window.')
f3SyncJClockProbeStatsMTIE10000s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeStatsMTIE10000s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeStatsMTIE10000s.setDescription('This attribute indicates MTIE value in ns for 10000s observation window.')
f3SyncJClockProbeStatsMTIE50000s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeStatsMTIE50000s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeStatsMTIE50000s.setDescription('This attribute indicates MTIE value in ns for 50000s observation window.')
f3SyncJClockProbeStatsMaxTE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeStatsMaxTE.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeStatsMaxTE.setDescription('This attribute indicates maximum TE value in ns observed over PM interval.')
f3SyncJClockProbeStatsMaxConstTE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeStatsMaxConstTE.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeStatsMaxConstTE.setDescription('This attribute indicates maximum constant TE value in ns observed over PM interval.')
f3SyncJClockProbeHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 5), )
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryTable.setDescription('A collection of SyncJack Clock Probe statistics.  \n             These reflect the history data.')
f3SyncJClockProbeHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJClockProbeIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJClockProbeStatsIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJClockProbeHistoryIndex"))
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryEntry.setDescription('A conceptual row in the f3SyncJClockProbeHistoryTable.\n             Entries exist in this table for each Clock Probe.')
f3SyncJClockProbeHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this SyncJack Clock Probe PM history entry.')
f3SyncJClockProbeHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 5, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryTime.setDescription('Indicates the time of history bin creation.')
f3SyncJClockProbeHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 5, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryValid.setDescription('Indicates the validity of the bin.')
f3SyncJClockProbeHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 5, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3SyncJClockProbeHistoryMTIE1s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryMTIE1s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryMTIE1s.setDescription('This attribute indicates MTIE value in ns for 1s observation window.')
f3SyncJClockProbeHistoryMTIE10s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryMTIE10s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryMTIE10s.setDescription('This attribute indicates MTIE value in ns for 10s observation window.')
f3SyncJClockProbeHistoryMTIE100s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryMTIE100s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryMTIE100s.setDescription('This attribute indicates MTIE value in ns for 100s observation window.')
f3SyncJClockProbeHistoryMTIE1000s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryMTIE1000s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryMTIE1000s.setDescription('This attribute indicates MTIE value in ns for 1000s observation window.')
f3SyncJClockProbeHistoryMTIE10000s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryMTIE10000s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryMTIE10000s.setDescription('This attribute indicates MTIE value in ns for 10000s observation window.')
f3SyncJClockProbeHistoryMTIE50000s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryMTIE50000s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryMTIE50000s.setDescription('This attribute indicates MTIE value in ns for 50000s observation window.')
f3SyncJClockProbeHistoryMaxTE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryMaxTE.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryMaxTE.setDescription('This attribute indicates maximum TE value in ns observed over PM interval.')
f3SyncJClockProbeHistoryMaxConstTE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryMaxConstTE.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeHistoryMaxConstTE.setDescription('This attribute indicates maximum constant TE value in ns observed over PM interval.')
f3SyncJClockProbeThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 6), )
if mibBuilder.loadTexts: f3SyncJClockProbeThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeThresholdTable.setDescription('A table of entries that allow support the Clock Probe \n             Thresholds.')
f3SyncJClockProbeThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 6, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJClockProbeIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJClockProbeStatsIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJClockProbeThresholdIndex"))
if mibBuilder.loadTexts: f3SyncJClockProbeThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeThresholdEntry.setDescription('A conceptual row in the f3SyncJClockProbeThresholdTable.')
f3SyncJClockProbeThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3SyncJClockProbeThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3SyncJClockProbeThresholdTable.')
f3SyncJClockProbeThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 6, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3SyncJClockProbeThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 6, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3SyncJClockProbeThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 6, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3SyncJClockProbeThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 6, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJClockProbeThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3SyncJClockProbeThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 6, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJClockProbeThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeThresholdMonValue.setDescription('Monitored value corresponding to f3SyncJClockProbeThresholdVariable.')
f3SyncJPTPClockProbeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 7), )
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsTable.setDescription('A collection of SyncJack PTP Clock Probe statistics.  \n             These reflect the current data.')
f3SyncJPTPClockProbeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeStatsIndex"))
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsEntry.setDescription('A conceptual row in the f3SyncJPTPClockProbeStatsTable.\n             Entries exist in this table for each PTP Clock Probe.')
f3SyncJPTPClockProbeStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this PTPNetworkProbe statistics entry. \n            Index 1 corresponds to 15minute, index 2 to 1 day and index\n            3 corresponds to rollover.')
f3SyncJPTPClockProbeStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 7, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsIntervalType.setDescription('Indicates the type of collection, i.e. whether it is\n             15 Min, 1 Day or rollover.')
f3SyncJPTPClockProbeStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 7, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsValid.setDescription('Indicates the validity of the bin.')
f3SyncJPTPClockProbeStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 7, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsAction.setDescription('Allows the Manager to clear the bin.')
f3SyncJPTPClockProbeStatsMTIE1s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsMTIE1s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsMTIE1s.setDescription('This attribute indicates MTIE value in ns for 1s observation window.')
f3SyncJPTPClockProbeStatsMTIE10s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsMTIE10s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsMTIE10s.setDescription('This attribute indicates MTIE value in ns for 10s observation window.')
f3SyncJPTPClockProbeStatsMTIE100s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 7, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsMTIE100s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsMTIE100s.setDescription('This attribute indicates MTIE value in ns for 100s observation window.')
f3SyncJPTPClockProbeStatsMTIE1000s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 7, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsMTIE1000s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsMTIE1000s.setDescription('This attribute indicates MTIE value in ns for 1000s observation window.')
f3SyncJPTPClockProbeStatsMTIE10000s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 7, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsMTIE10000s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsMTIE10000s.setDescription('This attribute indicates MTIE value in ns for 10000s observation window.')
f3SyncJPTPClockProbeStatsMTIE50000s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 7, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsMTIE50000s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsMTIE50000s.setDescription('This attribute indicates MTIE value in ns for 50000s observation window.')
f3SyncJPTPClockProbeStatsMaxTE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsMaxTE.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsMaxTE.setDescription('This attribute indicates maximum TE value in ns observed over PM interval.')
f3SyncJPTPClockProbeStatsMaxConstTE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 7, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsMaxConstTE.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatsMaxConstTE.setDescription('This attribute indicates maximum constant TE value in ns observed over PM interval.')
f3SyncJPTPClockProbeHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 8), )
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryTable.setDescription('A collection of SyncJack PTP Clock Probe statistics.  \n             These reflect the history data.')
f3SyncJPTPClockProbeHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 8, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeStatsIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeHistoryIndex"))
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryEntry.setDescription('A conceptual row in the f3SyncJPTPClockProbeHistoryTable.\n             Entries exist in this table for each PTP Clock Probe.')
f3SyncJPTPClockProbeHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this SyncJack PTP Clock Probe PM history entry.')
f3SyncJPTPClockProbeHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 8, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryTime.setDescription('Indicates the time of history bin creation.')
f3SyncJPTPClockProbeHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 8, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryValid.setDescription('Indicates the validity of the bin.')
f3SyncJPTPClockProbeHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 8, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3SyncJPTPClockProbeHistoryMTIE1s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryMTIE1s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryMTIE1s.setDescription('This attribute indicates MTIE value in ns for 1s observation window.')
f3SyncJPTPClockProbeHistoryMTIE10s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryMTIE10s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryMTIE10s.setDescription('This attribute indicates MTIE value in ns for 10s observation window.')
f3SyncJPTPClockProbeHistoryMTIE100s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 8, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryMTIE100s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryMTIE100s.setDescription('This attribute indicates MTIE value in ns for 100s observation window.')
f3SyncJPTPClockProbeHistoryMTIE1000s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryMTIE1000s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryMTIE1000s.setDescription('This attribute indicates MTIE value in ns for 1000s observation window.')
f3SyncJPTPClockProbeHistoryMTIE10000s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 8, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryMTIE10000s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryMTIE10000s.setDescription('This attribute indicates MTIE value in ns for 10000s observation window.')
f3SyncJPTPClockProbeHistoryMTIE50000s = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 8, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryMTIE50000s.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryMTIE50000s.setDescription('This attribute indicates MTIE value in ns for 50000s observation window.')
f3SyncJPTPClockProbeHistoryMaxTE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryMaxTE.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryMaxTE.setDescription('This attribute indicates maximum TE value in ns observed over PM interval.')
f3SyncJPTPClockProbeHistoryMaxConstTE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 8, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryMaxConstTE.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeHistoryMaxConstTE.setDescription('This attribute indicates maximum constant TE value in ns observed over PM interval.')
f3SyncJPTPClockProbeThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 9), )
if mibBuilder.loadTexts: f3SyncJPTPClockProbeThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeThresholdTable.setDescription('A table of entries that allow support the PTP Clock Probe \n             Thresholds.')
f3SyncJPTPClockProbeThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 9, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeStatsIndex"), (0, "F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeThresholdIndex"))
if mibBuilder.loadTexts: f3SyncJPTPClockProbeThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeThresholdEntry.setDescription('A conceptual row in the f3SyncJPTPClockProbeThresholdTable.')
f3SyncJPTPClockProbeThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3SyncJPTPClockProbeThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3SyncJPTPClockProbeThresholdTable.')
f3SyncJPTPClockProbeThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 9, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3SyncJPTPClockProbeThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 9, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3SyncJPTPClockProbeThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 9, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3SyncJPTPClockProbeThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 9, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3SyncJPTPClockProbeThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 2, 9, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncJPTPClockProbeThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeThresholdMonValue.setDescription('Monitored value corresponding to f3SyncJPTPClockProbeThresholdVariable.')
f3SyncJPTPNetworkProbeThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 3, 1)).setObjects(("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeThresholdIndex"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeThresholdInterval"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeThresholdVariable"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeThresholdValueLo"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeThresholdValueHi"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeThresholdMonValue"))
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an PTP Network Probe is crossed.')
f3SyncJClockProbeStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 3, 2)).setObjects(("F3-SYNCJACK-MIB", "f3SyncJClockProbeTestState"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeSourceFailure"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeReferenceFailure"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeStatusMTIEMaskFailed"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeStatusMTIEMarginFailed"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeActualTestStartTime"))
if mibBuilder.loadTexts: f3SyncJClockProbeStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeStatusChangeTrap.setDescription('This trap is sent each time any status changes happen\n             on a SyncJack Clock Probe.')
f3SyncJPTPClockProbeStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 3, 3)).setObjects(("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeTestState"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeNoTimestampFailure"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeNoEventMessageFailure"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeReferenceFailure"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeStatusMTIEMaskFailed"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeStatusMTIEMarginFailed"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeActualTestStartTime"))
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeStatusChangeTrap.setDescription('This trap is sent each time any status changes happen\n             on a SyncJack PTP Clock Probe.')
f3SyncJPTPNetworkProbeStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 3, 4)).setObjects(("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeTestState"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeNoTimestampFailure"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeNoEventMessageFailure"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeReferenceFailure"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeFwdScore"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeRevScore"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeActualTestStartTime"))
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPNetworkProbeStatusChangeTrap.setDescription('This trap is sent each time any status changes happen\n             on a SyncJack PTP Network Probe.')
f3SyncJClockProbeThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 3, 5)).setObjects(("F3-SYNCJACK-MIB", "f3SyncJClockProbeThresholdIndex"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeThresholdInterval"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeThresholdVariable"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeThresholdValueLo"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeThresholdValueHi"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeThresholdMonValue"))
if mibBuilder.loadTexts: f3SyncJClockProbeThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3SyncJClockProbeThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Clock Probe is crossed.')
f3SyncJPTPClockProbeThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 3, 6)).setObjects(("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeThresholdIndex"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeThresholdInterval"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeThresholdVariable"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeThresholdValueLo"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeThresholdValueHi"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeThresholdMonValue"))
if mibBuilder.loadTexts: f3SyncJPTPClockProbeThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPTPClockProbeThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an PTP Clock Probe is crossed.')
f3SyncJCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 4, 1))
f3SyncJGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 4, 2))
f3SyncJCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 4, 1, 1)).setObjects(("F3-SYNCJACK-MIB", "f3SyncJObjectGroup"), ("F3-SYNCJACK-MIB", "f3SyncJPerfObjectGroup"), ("F3-SYNCJACK-MIB", "f3SyncJNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3SyncJCompliance = f3SyncJCompliance.setStatus('current')
if mibBuilder.loadTexts: f3SyncJCompliance.setDescription('Describes the requirements for conformance to the F3 SyncJack group.')
f3SyncJObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 4, 2, 1)).setObjects(("F3-SYNCJACK-MIB", "f3SyncJClockProbeIndex"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeName"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeSource"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeReference"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeExpectedQL"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeSourceType"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeMeasurementRate"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeMTIEMaskType"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeMTIEMaskMargin"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeScheduler"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeTestState"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeLastTIEResult"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeLastTIEResultTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeSourceFailure"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeReferenceFailure"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeActualTestStartTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeActualTestDuration"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeMTIEMaskCrossedTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeMTIEMaskMarginCrossedTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeStorageType"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeRowStatus"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeFfoTarget"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeFfoObserWindow"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeLastFFOResult"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeTimeOfLastFFOResult"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeRawDataCollectionEnabled"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeTeAlertThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeTeAlertClearThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeLastTEAlertTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeLastTEAlertClearTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeRunningFailedCount"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeMeasurementType"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeConstTEThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeConstTEClrThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeConstTEWindow"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeMaxTETotAlarmTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeConstTETotAlarmTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeConstTEMeasurementTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeMaxTEMeasurementTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeMaxTEThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeMaxTEClrThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeMTIERestart"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryIndex"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryAlias"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistorySource"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryReference"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryExpectedQL"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistorySourceType"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryMeasurementRate"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryMTIEMaskType"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryMTIEMaskMargin"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistorySourceFailure"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryReferenceFailure"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryActualTestStartTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryActualTestDuration"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryMTIEMaskCrossedTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryMTIEMaskMarginCrossedTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryStatusMTIEMaskFailed"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryStatusMTIEMarginFailed"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryStorageType"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryRowStatus"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryMinFFO"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryMaxFFO"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryAvgFFO"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryOutOfTargetFFOTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryTotalFFOTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryMinPhaseOffset"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryMaxPhaseOffset"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryAvgPhaseOffset"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryOutOfTargetPhaseOffsetTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryTotalPhaseOffsetTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryMeasurementType"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryTeAlertThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryTeAlertClearThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryLastTEAlertTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryLastTEAlertClearTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryRunningFailedCount"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryConstTEThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryConstTEClrThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryConstTEWindow"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryMaxTETotAlarmTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryConstTETotAlarmTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryMTIEValueIndex"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryMTIEValue"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryConstTEMeasurementTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryMaxTEMeasurementTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryMaxTEThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeResHistoryMaxTEClrThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeIndex"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeName"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeMeasurementDirection"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbePTPFlowPoint"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeIpPrototocol"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeSlaveIpV4Address"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeMasterIpV4Address"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeReference"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeExpectedQL"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeMTIEMaskType"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeMTIEMaskMargin"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeScheduler"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeTestState"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeLastTIEResult"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeLastTIEResultTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeNoTimestampFailure"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeNoEventMessageFailure"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeReferenceFailure"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeActualTestStartTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeActualTestDuration"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeMTIEMaskCrossedTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeMTIEMaskMarginCrossedTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeStatusMTIEMaskFailed"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeStatusMTIEMarginFailed"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeStorageType"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeRowStatus"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeFfoTarget"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeFfoObserWindow"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeLastFFOResult"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeTimeOfLastFFOResult"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeRawDataCollectionEnabled"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeTeAlertThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeTeAlertClearThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeLastTEAlertTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeLastTEAlertClearTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeRunningFailedCount"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeMeasurementType"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeDelayMS"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeDelaySM"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeTAsymmetry"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeDelayCompensation"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeConstTEThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeConstTEClrThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeConstTEWindow"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeInstTEThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeInstTEClrThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeMaxTETotAlarmTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeConstTETotAlarmTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeInstTETotAlarmTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeSlavePortIdentity"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeMasterPortIdentity"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeMTIERestart"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryIndex"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryAlias"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryMeasurementDirection"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryPTPFlowPoint"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryIpPrototocol"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistorySlaveIpV4Address"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryMasterIpV4Address"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryReference"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryExpectedQL"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryMTIEMaskType"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryMTIEMaskMargin"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryNoTimestampFailure"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryNoEventMessageFailure"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryReferenceFailure"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryActualTestStartTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryActualTestDuration"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryMTIEMaskCrossedTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryMTIEMaskMarginCrossedTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryStatusMTIEMaskFailed"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryStatusMTIEMarginFailed"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryStorageType"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryRowStatus"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryMinFFO"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryMaxFFO"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryAvgFFO"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryOutOfTargetFFOTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryTotalFFOTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryMinPhaseOffset"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryMaxPhaseOffset"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryAvgPhaseOffset"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryOutOfTargetPhaseOffsetTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryTotalPhaseOffsetTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryTeAlertThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryTeAlertClearThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryLastTEAlertTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryLastTEAlertClearTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryRunningFailedCount"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryMeasurementType"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryConstTEThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryConstTEClrThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryConstTEWindow"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryInstTEThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryInstTEClrThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryMaxTETotAlarmTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryConstTETotAlarmTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryInstTETotAlarmTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistorySlavePortIdentity"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryMasterPortIdentity"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryMTIEValueIndex"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryMTIEValue"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryConstTEMeasurementTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryMaxTEMeasurementTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryInstTEMeasurementTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryMaxTEThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeResHistoryMaxTEClrThreshold"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeIndex"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeName"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeAdminState"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeOperationalState"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeSecondaryState"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbePTPFlowPoint"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeIpPrototocol"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeSlaveIpV4Address"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeMasterIpV4Address"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeReference"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeExpectedQL"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeActualTestStartTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeActualTestDuration"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbePDVAssuredHi"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbePDVAssuredLo"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbePDVSatisfiedHi"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbePDVSatisfiedLo"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeResPDVFwdLowRange"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeResPDVFwdMediumRange"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeResPDVFwdHighRange"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeResPDVRevLowRange"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeResPDVRevMediumRange"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeResPDVRevHighRange"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeScheduler"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeTestState"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeNoTimestampFailure"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeNoEventMessageFailure"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeReferenceFailure"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeFwdScore"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeRevScore"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStorageType"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeRowStatus"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeResultsAvailable"), ("F3-SYNCJACK-MIB", "f3SyncJScheduleGroupIndex"), ("F3-SYNCJACK-MIB", "f3SyncJScheduleGroupDescr"), ("F3-SYNCJACK-MIB", "f3SyncJScheduleGroupEntityList"), ("F3-SYNCJACK-MIB", "f3SyncJScheduleGroupType"), ("F3-SYNCJACK-MIB", "f3SyncJScheduleGroupStartTime"), ("F3-SYNCJACK-MIB", "f3SyncJScheduleGroupDuration"), ("F3-SYNCJACK-MIB", "f3SyncJScheduleGroupStatus"), ("F3-SYNCJACK-MIB", "f3SyncJScheduleGroupStorageType"), ("F3-SYNCJACK-MIB", "f3SyncJScheduleGroupRowStatus"), ("F3-SYNCJACK-MIB", "f3UserDefinedMTIEMaskIndex"), ("F3-SYNCJACK-MIB", "f3UserDefinedMTIEMaskName"), ("F3-SYNCJACK-MIB", "f3UserDefinedMTIEMaskDisplayPoints"), ("F3-SYNCJACK-MIB", "f3UserDefinedMTIEMaskMeasurmentPoints"), ("F3-SYNCJACK-MIB", "f3UserDefinedMTIEMaskStorageType"), ("F3-SYNCJACK-MIB", "f3UserDefinedMTIEMaskRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3SyncJObjectGroup = f3SyncJObjectGroup.setStatus('current')
if mibBuilder.loadTexts: f3SyncJObjectGroup.setDescription('A collection of objects used to manage the F3 SyncJack \n         Configuration data.')
f3SyncJPerfObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 4, 2, 2)).setObjects(("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsIndex"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsIntervalType"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsValid"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsAction"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsSyncMsgsRx"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsDelayRspMsgsRx"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsLostSyncMsgs"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsLostDelayRspMsgs"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsMinMeanPathDelay"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsMaxMeanPathDelay"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsAvgMeanPathDelay"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsMinSyncPathDelay"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsMaxSyncPathDelay"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsAvgSyncPathDelay"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsAvgResPDVFwd"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsResPDVFwdLow"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsResPDVFwdMedium"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsResPDVFwdHigh"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsResPDVFwdTotal"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsFwdScore5"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsFwdScore4"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsFwdScore3"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsAvgResPDVRev"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsResPDVRevLow"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsResPDVRevMedium"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsResPDVRevHigh"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsResPDVRevTotal"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsRevScore5"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsRevScore4"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsRevScore3"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsMinRPDVFwd"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsMinRPDVRev"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsMinPathAsymmetry"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsMaxPathAsymmetry"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsAvgPathAsymmetry"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsPathLossSecondsFwd"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsPathLossSecondsRev"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsMinDelayReqPathDelay"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsMaxDelayReqPathDelay"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatsAvgDelayReqPathDelay"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryIndex"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryValid"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryAction"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistorySyncMsgsRx"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryDelayRspMsgsRx"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryLostSyncMsgs"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryLostDelayRspMsgs"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryMinMeanPathDelay"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryMaxMeanPathDelay"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryAvgMeanPathDelay"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryMinSyncPathDelay"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryMaxSyncPathDelay"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryAvgSyncPathDelay"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryAvgResPDVFwd"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryResPDVFwdLow"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryResPDVFwdMedium"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryResPDVFwdHigh"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryResPDVFwdTotal"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryFwdScore5"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryFwdScore4"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryFwdScore3"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryAvgResPDVRev"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryResPDVRevLow"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryResPDVRevMedium"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryResPDVRevHigh"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryResPDVRevTotal"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryRevScore5"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryRevScore4"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryRevScore3"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryMinRPDVFwd"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryMinRPDVRev"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryMinPathAsymmetry"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryMaxPathAsymmetry"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryAvgPathAsymmetry"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryMinDelayReqPathDelay"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryMaxDelayReqPathDelay"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeHistoryAvgDelayReqPathDelay"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeThresholdIndex"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeThresholdInterval"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeThresholdVariable"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeThresholdValueLo"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeThresholdValueHi"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeThresholdMonValue"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeStatsIndex"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeStatsIntervalType"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeStatsValid"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeStatsAction"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeStatsMTIE1s"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeStatsMTIE10s"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeStatsMTIE100s"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeStatsMTIE1000s"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeStatsMTIE10000s"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeStatsMTIE50000s"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeStatsMaxTE"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeStatsMaxConstTE"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeHistoryIndex"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeHistoryTime"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeHistoryValid"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeHistoryAction"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeHistoryMTIE1s"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeHistoryMTIE10s"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeHistoryMTIE100s"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeHistoryMTIE1000s"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeHistoryMTIE10000s"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeHistoryMTIE50000s"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeHistoryMaxTE"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeHistoryMaxConstTE"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeThresholdIndex"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeThresholdInterval"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeThresholdVariable"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeThresholdValueLo"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeThresholdValueHi"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeThresholdMonValue"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeStatsIndex"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeStatsIntervalType"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeStatsValid"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeStatsAction"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeStatsMTIE1s"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeStatsMTIE10s"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeStatsMTIE100s"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeStatsMTIE1000s"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeStatsMTIE10000s"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeStatsMTIE50000s"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeStatsMaxTE"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeStatsMaxConstTE"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeHistoryIndex"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeHistoryTime"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeHistoryValid"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeHistoryAction"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeHistoryMTIE1s"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeHistoryMTIE10s"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeHistoryMTIE100s"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeHistoryMTIE1000s"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeHistoryMTIE10000s"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeHistoryMTIE50000s"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeHistoryMaxTE"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeHistoryMaxConstTE"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeThresholdIndex"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeThresholdInterval"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeThresholdVariable"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeThresholdValueLo"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeThresholdValueHi"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3SyncJPerfObjectGroup = f3SyncJPerfObjectGroup.setStatus('current')
if mibBuilder.loadTexts: f3SyncJPerfObjectGroup.setDescription('A collection of objects used to manage the F3 SyncJack \n         Performance data.')
f3SyncJNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 22, 4, 2, 3)).setObjects(("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeThresholdCrossingAlert"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeThresholdCrossingAlert"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeThresholdCrossingAlert"), ("F3-SYNCJACK-MIB", "f3SyncJClockProbeStatusChangeTrap"), ("F3-SYNCJACK-MIB", "f3SyncJPTPClockProbeStatusChangeTrap"), ("F3-SYNCJACK-MIB", "f3SyncJPTPNetworkProbeStatusChangeTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3SyncJNotifGroup = f3SyncJNotifGroup.setStatus('current')
if mibBuilder.loadTexts: f3SyncJNotifGroup.setDescription('A collection of notifications related to F3 SyncJack functionality.')
mibBuilder.exportSymbols("F3-SYNCJACK-MIB", f3SyncJPTPNetworkProbeStatsPathLossSecondsRev=f3SyncJPTPNetworkProbeStatsPathLossSecondsRev, f3UserDefinedMTIEMaskStorageType=f3UserDefinedMTIEMaskStorageType, f3SyncJPTPClockProbeResHistoryRunningFailedCount=f3SyncJPTPClockProbeResHistoryRunningFailedCount, f3SyncJPTPNetworkProbeStatsAvgPathAsymmetry=f3SyncJPTPNetworkProbeStatsAvgPathAsymmetry, f3SyncJPTPClockProbeThresholdTable=f3SyncJPTPClockProbeThresholdTable, f3SyncJPTPNetworkProbeHistoryRevScore3=f3SyncJPTPNetworkProbeHistoryRevScore3, f3SyncJPTPNetworkProbeStatsAction=f3SyncJPTPNetworkProbeStatsAction, f3SyncJClockProbeResHistoryMinPhaseOffset=f3SyncJClockProbeResHistoryMinPhaseOffset, f3SyncJClockProbeThresholdVariable=f3SyncJClockProbeThresholdVariable, f3SyncJPTPNetworkProbeStatsResPDVRevMedium=f3SyncJPTPNetworkProbeStatsResPDVRevMedium, f3SyncJPTPClockProbeResHistoryIpPrototocol=f3SyncJPTPClockProbeResHistoryIpPrototocol, f3SyncJClockProbeTeAlertClearThreshold=f3SyncJClockProbeTeAlertClearThreshold, f3SyncJPTPNetworkProbeRevScore=f3SyncJPTPNetworkProbeRevScore, f3SyncJClockProbeResHistoryMaxTETotAlarmTime=f3SyncJClockProbeResHistoryMaxTETotAlarmTime, f3SyncJPTPClockProbeResHistoryAlias=f3SyncJPTPClockProbeResHistoryAlias, f3SyncJClockProbeHistoryMaxTE=f3SyncJClockProbeHistoryMaxTE, f3SyncJPTPClockProbeResHistoryTeAlertClearThreshold=f3SyncJPTPClockProbeResHistoryTeAlertClearThreshold, f3SyncJScheduleGroupEntityList=f3SyncJScheduleGroupEntityList, f3SyncJPTPClockProbeResHistoryConstTEWindow=f3SyncJPTPClockProbeResHistoryConstTEWindow, f3SyncJPTPClockProbeStatusMTIEMaskFailed=f3SyncJPTPClockProbeStatusMTIEMaskFailed, f3SyncJClockProbeStatsIndex=f3SyncJClockProbeStatsIndex, f3SyncJPTPClockProbeInstTEThreshold=f3SyncJPTPClockProbeInstTEThreshold, f3SyncJClockProbeResHistoryTotalPhaseOffsetTime=f3SyncJClockProbeResHistoryTotalPhaseOffsetTime, f3SyncJPTPClockProbeResHistoryMinFFO=f3SyncJPTPClockProbeResHistoryMinFFO, f3SyncJClockProbeThresholdTable=f3SyncJClockProbeThresholdTable, f3SyncJClockProbeStatsValid=f3SyncJClockProbeStatsValid, f3SyncJPTPNetworkProbeHistoryFwdScore4=f3SyncJPTPNetworkProbeHistoryFwdScore4, f3SyncJPTPClockProbeStatsMTIE50000s=f3SyncJPTPClockProbeStatsMTIE50000s, f3SyncJPTPClockProbeHistoryMTIE50000s=f3SyncJPTPClockProbeHistoryMTIE50000s, f3SyncJPTPNetworkProbeStatsFwdScore3=f3SyncJPTPNetworkProbeStatsFwdScore3, f3SyncJClockProbeResHistoryMaxPhaseOffset=f3SyncJClockProbeResHistoryMaxPhaseOffset, f3SyncJPTPClockProbeMTIEMaskCrossedTime=f3SyncJPTPClockProbeMTIEMaskCrossedTime, f3SyncJPTPNetworkProbeMasterIpV4Address=f3SyncJPTPNetworkProbeMasterIpV4Address, f3SyncJPerformanceObjects=f3SyncJPerformanceObjects, f3SyncJPTPClockProbeHistoryTable=f3SyncJPTPClockProbeHistoryTable, f3SyncJClockProbeHistoryMaxConstTE=f3SyncJClockProbeHistoryMaxConstTE, f3SyncJScheduleGroupStorageType=f3SyncJScheduleGroupStorageType, f3SyncJPTPClockProbeStatsIntervalType=f3SyncJPTPClockProbeStatsIntervalType, f3SyncJClockProbeStatsMaxConstTE=f3SyncJClockProbeStatsMaxConstTE, f3SyncJPTPClockProbeResHistoryInstTEClrThreshold=f3SyncJPTPClockProbeResHistoryInstTEClrThreshold, f3SyncJPTPClockProbeHistoryMTIE10000s=f3SyncJPTPClockProbeHistoryMTIE10000s, f3SyncJPTPNetworkProbeHistoryResPDVRevHigh=f3SyncJPTPNetworkProbeHistoryResPDVRevHigh, f3SyncJPTPNetworkProbeStatsMinMeanPathDelay=f3SyncJPTPNetworkProbeStatsMinMeanPathDelay, f3SyncJClockProbeResHistoryMTIEValueEntry=f3SyncJClockProbeResHistoryMTIEValueEntry, f3SyncJPTPNetworkProbeSecondaryState=f3SyncJPTPNetworkProbeSecondaryState, f3SyncJClockProbeMTIEMaskCrossedTime=f3SyncJClockProbeMTIEMaskCrossedTime, f3SyncJClockProbeResHistoryMTIEValue=f3SyncJClockProbeResHistoryMTIEValue, f3SyncJPTPNetworkProbeHistoryAvgSyncPathDelay=f3SyncJPTPNetworkProbeHistoryAvgSyncPathDelay, f3SyncJPTPNetworkProbeStatsIndex=f3SyncJPTPNetworkProbeStatsIndex, f3SyncJPTPClockProbeRowStatus=f3SyncJPTPClockProbeRowStatus, f3SyncJPTPNetworkProbeThresholdInterval=f3SyncJPTPNetworkProbeThresholdInterval, f3SyncJClockProbeStatsMTIE50000s=f3SyncJClockProbeStatsMTIE50000s, f3SyncJClockProbeExpectedQL=f3SyncJClockProbeExpectedQL, f3SyncJPTPNetworkProbePTPFlowPoint=f3SyncJPTPNetworkProbePTPFlowPoint, f3SyncJClockProbeResHistoryMTIEMaskType=f3SyncJClockProbeResHistoryMTIEMaskType, f3SyncJClockProbeHistoryValid=f3SyncJClockProbeHistoryValid, f3SyncJClockProbeMTIEMaskType=f3SyncJClockProbeMTIEMaskType, f3SyncJPTPNetworkProbeStatsRevScore4=f3SyncJPTPNetworkProbeStatsRevScore4, TIEMeasurementRate=TIEMeasurementRate, f3SyncJPTPClockProbeResHistoryActualTestStartTime=f3SyncJPTPClockProbeResHistoryActualTestStartTime, f3SyncJPTPClockProbeConstTEClrThreshold=f3SyncJPTPClockProbeConstTEClrThreshold, f3SyncJPTPClockProbeDelayCompensation=f3SyncJPTPClockProbeDelayCompensation, f3SyncJClockProbeStatusChangeTrap=f3SyncJClockProbeStatusChangeTrap, f3SyncJClockProbeMaxTETotAlarmTime=f3SyncJClockProbeMaxTETotAlarmTime, f3SyncJClockProbeMTIEValueTable=f3SyncJClockProbeMTIEValueTable, f3SyncJClockProbeResHistoryOutOfTargetFFOTime=f3SyncJClockProbeResHistoryOutOfTargetFFOTime, f3SyncJClockProbeResHistoryMinFFO=f3SyncJClockProbeResHistoryMinFFO, f3SyncJPTPNetworkProbeHistoryRevScore4=f3SyncJPTPNetworkProbeHistoryRevScore4, f3SyncJCompliance=f3SyncJCompliance, f3SyncJClockProbeStatsMaxTE=f3SyncJClockProbeStatsMaxTE, f3SyncJPTPClockProbeMTIEMaskType=f3SyncJPTPClockProbeMTIEMaskType, f3SyncJPTPNetworkProbePDVSatisfiedHi=f3SyncJPTPNetworkProbePDVSatisfiedHi, f3SyncJPTPClockProbeResHistoryMaxFFO=f3SyncJPTPClockProbeResHistoryMaxFFO, f3SyncJPTPNetworkProbeStatsAvgResPDVFwd=f3SyncJPTPNetworkProbeStatsAvgResPDVFwd, PYSNMP_MODULE_ID=f3SyncJMIB, f3SyncJPTPNetworkProbeActualTestStartTime=f3SyncJPTPNetworkProbeActualTestStartTime, f3SyncJPTPNetworkProbeHistoryMinPathAsymmetry=f3SyncJPTPNetworkProbeHistoryMinPathAsymmetry, f3SyncJPTPNetworkProbeNoEventMessageFailure=f3SyncJPTPNetworkProbeNoEventMessageFailure, f3SyncJClockProbeStatsMTIE100s=f3SyncJClockProbeStatsMTIE100s, f3SyncJPTPNetworkProbeStatsLostDelayRspMsgs=f3SyncJPTPNetworkProbeStatsLostDelayRspMsgs, f3SyncJClockProbeMaxTEThreshold=f3SyncJClockProbeMaxTEThreshold, f3SyncJPTPClockProbeHistoryEntry=f3SyncJPTPClockProbeHistoryEntry, f3SyncJPTPNetworkProbeStatsResPDVRevHigh=f3SyncJPTPNetworkProbeStatsResPDVRevHigh, f3SyncJPTPClockProbeConstTEMeasurementTime=f3SyncJPTPClockProbeConstTEMeasurementTime, f3SyncJPTPNetworkProbeHistoryRevScore5=f3SyncJPTPNetworkProbeHistoryRevScore5, f3SyncJClockProbeResHistoryAlias=f3SyncJClockProbeResHistoryAlias, f3SyncJPTPClockProbeNoTimestampFailure=f3SyncJPTPClockProbeNoTimestampFailure, f3SyncJClockProbeFfoObserWindow=f3SyncJClockProbeFfoObserWindow, f3SyncJPTPClockProbeReference=f3SyncJPTPClockProbeReference, f3SyncJClockProbeResHistoryTotalFFOTime=f3SyncJClockProbeResHistoryTotalFFOTime, f3SyncJClockProbeResHistoryConstTEMeasurementTime=f3SyncJClockProbeResHistoryConstTEMeasurementTime, f3SyncJPTPClockProbeMTIEValue=f3SyncJPTPClockProbeMTIEValue, f3SyncJPTPNetworkProbeRowStatus=f3SyncJPTPNetworkProbeRowStatus, f3SyncJClockProbeIndex=f3SyncJClockProbeIndex, f3SyncJPTPClockProbeLastFFOResult=f3SyncJPTPClockProbeLastFFOResult, f3SyncJPTPClockProbeLastTEAlertTime=f3SyncJPTPClockProbeLastTEAlertTime, f3SyncJPTPNetworkProbeTable=f3SyncJPTPNetworkProbeTable, f3SyncJPTPNetworkProbeHistoryAvgDelayReqPathDelay=f3SyncJPTPNetworkProbeHistoryAvgDelayReqPathDelay, f3SyncJPTPClockProbeResHistoryTeAlertThreshold=f3SyncJPTPClockProbeResHistoryTeAlertThreshold, f3UserDefinedMTIEMaskDisplayPoints=f3UserDefinedMTIEMaskDisplayPoints, f3SyncJPTPNetworkProbeHistoryEntry=f3SyncJPTPNetworkProbeHistoryEntry, f3UserDefinedMTIEMaskTable=f3UserDefinedMTIEMaskTable, f3SyncJClockProbeStatsAction=f3SyncJClockProbeStatsAction, f3SyncJPTPNetworkProbeHistoryResPDVFwdHigh=f3SyncJPTPNetworkProbeHistoryResPDVFwdHigh, f3SyncJPTPNetworkProbeHistoryMinRPDVFwd=f3SyncJPTPNetworkProbeHistoryMinRPDVFwd, f3SyncJPTPClockProbeResHistoryMeasurementDirection=f3SyncJPTPClockProbeResHistoryMeasurementDirection, f3SyncJPTPNetworkProbeStatsFwdScore5=f3SyncJPTPNetworkProbeStatsFwdScore5, f3UserDefinedMTIEMaskEntry=f3UserDefinedMTIEMaskEntry, f3SyncJClockProbeResHistoryConstTEWindow=f3SyncJClockProbeResHistoryConstTEWindow, f3SyncJPTPNetworkProbeFwdScore=f3SyncJPTPNetworkProbeFwdScore, f3SyncJPTPClockProbeResHistoryLastTEAlertClearTime=f3SyncJPTPClockProbeResHistoryLastTEAlertClearTime, f3SyncJPTPNetworkProbeStorageType=f3SyncJPTPNetworkProbeStorageType, f3SyncJPTPNetworkProbeResPDVRevHighRange=f3SyncJPTPNetworkProbeResPDVRevHighRange, f3SyncJPTPNetworkProbeIndex=f3SyncJPTPNetworkProbeIndex, SyncJackTestState=SyncJackTestState, f3SyncJClockProbeConstTEClrThreshold=f3SyncJClockProbeConstTEClrThreshold, f3SyncJPTPNetworkProbeHistoryFwdScore5=f3SyncJPTPNetworkProbeHistoryFwdScore5, f3SyncJPTPClockProbeThresholdVariable=f3SyncJPTPClockProbeThresholdVariable, f3SyncJClockProbeResHistoryIndex=f3SyncJClockProbeResHistoryIndex, f3SyncJClockProbeMeasurementType=f3SyncJClockProbeMeasurementType, f3SyncJPTPNetworkProbeHistoryAction=f3SyncJPTPNetworkProbeHistoryAction, f3SyncJClockProbeHistoryMTIE10000s=f3SyncJClockProbeHistoryMTIE10000s, f3SyncJPTPClockProbeResHistoryMTIEMaskCrossedTime=f3SyncJPTPClockProbeResHistoryMTIEMaskCrossedTime, f3SyncJClockProbeRawDataCollectionEnabled=f3SyncJClockProbeRawDataCollectionEnabled, f3SyncJScheduleGroupStatus=f3SyncJScheduleGroupStatus, f3SyncJPTPNetworkProbeAdminState=f3SyncJPTPNetworkProbeAdminState, f3SyncJPTPClockProbeThresholdValueHi=f3SyncJPTPClockProbeThresholdValueHi, TIESourceType=TIESourceType, f3SyncJClockProbeActualTestStartTime=f3SyncJClockProbeActualTestStartTime, f3SyncJPTPNetworkProbeStatsTable=f3SyncJPTPNetworkProbeStatsTable, f3UserDefinedMTIEMaskName=f3UserDefinedMTIEMaskName, f3SyncJPTPClockProbeResHistoryActualTestDuration=f3SyncJPTPClockProbeResHistoryActualTestDuration, f3SyncJClockProbeResHistoryLastTEAlertTime=f3SyncJClockProbeResHistoryLastTEAlertTime, f3SyncJScheduleGroupStartTime=f3SyncJScheduleGroupStartTime, f3SyncJPTPClockProbeResHistoryMeasurementType=f3SyncJPTPClockProbeResHistoryMeasurementType, f3SyncJPTPNetworkProbeHistorySyncMsgsRx=f3SyncJPTPNetworkProbeHistorySyncMsgsRx, f3SyncJPTPClockProbeInstTETotAlarmTime=f3SyncJPTPClockProbeInstTETotAlarmTime, f3SyncJPTPClockProbeResHistoryMTIEMaskType=f3SyncJPTPClockProbeResHistoryMTIEMaskType, f3SyncJPTPClockProbeMTIEValueEntry=f3SyncJPTPClockProbeMTIEValueEntry, f3SyncJClockProbeResHistoryLastTEAlertClearTime=f3SyncJClockProbeResHistoryLastTEAlertClearTime, f3SyncJPTPNetworkProbeStatsMaxDelayReqPathDelay=f3SyncJPTPNetworkProbeStatsMaxDelayReqPathDelay, f3SyncJPTPClockProbeThresholdMonValue=f3SyncJPTPClockProbeThresholdMonValue, f3SyncJPTPNetworkProbeStatsResPDVFwdLow=f3SyncJPTPNetworkProbeStatsResPDVFwdLow, f3SyncJClockProbeName=f3SyncJClockProbeName, f3SyncJClockProbeMTIEValueEntry=f3SyncJClockProbeMTIEValueEntry, f3SyncJPTPNetworkProbeHistoryTime=f3SyncJPTPNetworkProbeHistoryTime, f3SyncJPTPClockProbeTeAlertThreshold=f3SyncJPTPClockProbeTeAlertThreshold, f3SyncJPTPNetworkProbeSlaveIpV4Address=f3SyncJPTPNetworkProbeSlaveIpV4Address, f3SyncJClockProbeResHistoryConstTETotAlarmTime=f3SyncJClockProbeResHistoryConstTETotAlarmTime, f3SyncJPTPClockProbeTestState=f3SyncJPTPClockProbeTestState, f3SyncJPTPNetworkProbeHistoryResPDVFwdMedium=f3SyncJPTPNetworkProbeHistoryResPDVFwdMedium, f3SyncJPTPNetworkProbeHistoryAvgPathAsymmetry=f3SyncJPTPNetworkProbeHistoryAvgPathAsymmetry, f3SyncJPTPClockProbeStatsTable=f3SyncJPTPClockProbeStatsTable, f3SyncJClockProbeResHistoryEntry=f3SyncJClockProbeResHistoryEntry, f3SyncJPTPClockProbePTPFlowPoint=f3SyncJPTPClockProbePTPFlowPoint, f3SyncJPTPClockProbeMTIEMaskMarginCrossedTime=f3SyncJPTPClockProbeMTIEMaskMarginCrossedTime, f3SyncJPTPClockProbeInstTEMeasurementTime=f3SyncJPTPClockProbeInstTEMeasurementTime, f3SyncJClockProbeResHistoryReferenceFailure=f3SyncJClockProbeResHistoryReferenceFailure, f3SyncJPTPClockProbeStorageType=f3SyncJPTPClockProbeStorageType, f3SyncJPTPClockProbeResHistoryPTPFlowPoint=f3SyncJPTPClockProbeResHistoryPTPFlowPoint, f3SyncJPTPClockProbeResHistoryStorageType=f3SyncJPTPClockProbeResHistoryStorageType, f3SyncJClockProbeResHistoryTable=f3SyncJClockProbeResHistoryTable, f3SyncJPTPClockProbeResHistoryMaxTEThreshold=f3SyncJPTPClockProbeResHistoryMaxTEThreshold, f3SyncJPTPClockProbeHistoryMTIE10s=f3SyncJPTPClockProbeHistoryMTIE10s, f3SyncJPTPClockProbeStatsMTIE10s=f3SyncJPTPClockProbeStatsMTIE10s, f3SyncJPTPNetworkProbeTestState=f3SyncJPTPNetworkProbeTestState, f3SyncJPTPClockProbeResHistoryMasterIpV4Address=f3SyncJPTPClockProbeResHistoryMasterIpV4Address, f3SyncJPTPClockProbeResHistoryOutOfTargetPhaseOffsetTime=f3SyncJPTPClockProbeResHistoryOutOfTargetPhaseOffsetTime, f3SyncJPTPClockProbeResHistoryConstTEMeasurementTime=f3SyncJPTPClockProbeResHistoryConstTEMeasurementTime, f3SyncJScheduleGroupEntry=f3SyncJScheduleGroupEntry, f3SyncJPTPNetworkProbeHistoryMinDelayReqPathDelay=f3SyncJPTPNetworkProbeHistoryMinDelayReqPathDelay, f3SyncJClockProbeHistoryMTIE1000s=f3SyncJClockProbeHistoryMTIE1000s, f3SyncJClockProbeStatusMTIEMarginFailed=f3SyncJClockProbeStatusMTIEMarginFailed, f3SyncJPTPClockProbeThresholdEntry=f3SyncJPTPClockProbeThresholdEntry, f3SyncJPTPClockProbeResHistoryAvgPhaseOffset=f3SyncJPTPClockProbeResHistoryAvgPhaseOffset, f3SyncJPTPNetworkProbeHistoryTable=f3SyncJPTPNetworkProbeHistoryTable, f3SyncJPTPNetworkProbeResultsAvailable=f3SyncJPTPNetworkProbeResultsAvailable, f3SyncJClockProbeResHistoryMTIEValueTable=f3SyncJClockProbeResHistoryMTIEValueTable, f3SyncJPTPClockProbeStatsMTIE100s=f3SyncJPTPClockProbeStatsMTIE100s, f3SyncJPTPClockProbeName=f3SyncJPTPClockProbeName, f3SyncJClockProbeActualTestDuration=f3SyncJClockProbeActualTestDuration, f3SyncJPTPClockProbeHistoryMaxConstTE=f3SyncJPTPClockProbeHistoryMaxConstTE, f3SyncJPTPClockProbeStatusChangeTrap=f3SyncJPTPClockProbeStatusChangeTrap, f3SyncJPTPNetworkProbeStatsSyncMsgsRx=f3SyncJPTPNetworkProbeStatsSyncMsgsRx, f3SyncJClockProbeHistoryAction=f3SyncJClockProbeHistoryAction, f3SyncJPTPNetworkProbeHistoryLostSyncMsgs=f3SyncJPTPNetworkProbeHistoryLostSyncMsgs, f3SyncJPTPNetworkProbeOperationalState=f3SyncJPTPNetworkProbeOperationalState, f3SyncJPTPNetworkProbeStatsLostSyncMsgs=f3SyncJPTPNetworkProbeStatsLostSyncMsgs, f3SyncJPTPClockProbeThresholdIndex=f3SyncJPTPClockProbeThresholdIndex, f3SyncJPTPNetworkProbeStatsAvgDelayReqPathDelay=f3SyncJPTPNetworkProbeStatsAvgDelayReqPathDelay, f3SyncJPTPNetworkProbeThresholdValueHi=f3SyncJPTPNetworkProbeThresholdValueHi, f3SyncJPTPClockProbeMaxTEMeasurementTime=f3SyncJPTPClockProbeMaxTEMeasurementTime, f3SyncJPTPClockProbeMasterPortIdentity=f3SyncJPTPClockProbeMasterPortIdentity, f3SyncJPTPClockProbeHistoryAction=f3SyncJPTPClockProbeHistoryAction, f3SyncJClockProbeResHistoryMTIEValueIndex=f3SyncJClockProbeResHistoryMTIEValueIndex, f3SyncJClockProbeTestState=f3SyncJClockProbeTestState, f3UserDefinedMTIEMaskMeasurmentPoints=f3UserDefinedMTIEMaskMeasurmentPoints, f3SyncJClockProbeResHistoryOutOfTargetPhaseOffsetTime=f3SyncJClockProbeResHistoryOutOfTargetPhaseOffsetTime, f3SyncJPTPClockProbeStatsMaxTE=f3SyncJPTPClockProbeStatsMaxTE, f3SyncJClockProbeLastTIEResultTime=f3SyncJClockProbeLastTIEResultTime, f3SyncJClockProbeResHistoryMTIEMaskCrossedTime=f3SyncJClockProbeResHistoryMTIEMaskCrossedTime, f3UserDefinedMTIEMaskIndex=f3UserDefinedMTIEMaskIndex, f3SyncJPTPClockProbeConstTETotAlarmTime=f3SyncJPTPClockProbeConstTETotAlarmTime, f3SyncJClockProbeResHistorySourceType=f3SyncJClockProbeResHistorySourceType, f3SyncJClockProbeHistoryTime=f3SyncJClockProbeHistoryTime, f3SyncJPTPClockProbeHistoryMTIE1000s=f3SyncJPTPClockProbeHistoryMTIE1000s, f3SyncJPTPClockProbeResHistoryReferenceFailure=f3SyncJPTPClockProbeResHistoryReferenceFailure, f3UserDefinedMTIEMaskRowStatus=f3UserDefinedMTIEMaskRowStatus, f3SyncJClockProbeResHistoryReference=f3SyncJClockProbeResHistoryReference, f3SyncJPTPClockProbeReferenceFailure=f3SyncJPTPClockProbeReferenceFailure, f3SyncJPTPNetworkProbeHistoryResPDVFwdTotal=f3SyncJPTPNetworkProbeHistoryResPDVFwdTotal, f3SyncJClockProbeResHistoryMaxTEThreshold=f3SyncJClockProbeResHistoryMaxTEThreshold, f3SyncJPTPClockProbeFfoObserWindow=f3SyncJPTPClockProbeFfoObserWindow, f3SyncJPTPNetworkProbeNoTimestampFailure=f3SyncJPTPNetworkProbeNoTimestampFailure, f3SyncJScheduleGroupDescr=f3SyncJScheduleGroupDescr, f3SyncJClockProbeScheduler=f3SyncJClockProbeScheduler, f3SyncJClockProbeResHistoryTeAlertThreshold=f3SyncJClockProbeResHistoryTeAlertThreshold, f3SyncJPTPClockProbeResHistoryTotalFFOTime=f3SyncJPTPClockProbeResHistoryTotalFFOTime, f3SyncJScheduleGroupTable=f3SyncJScheduleGroupTable, f3SyncJClockProbeLastTEAlertClearTime=f3SyncJClockProbeLastTEAlertClearTime, f3SyncJPTPNetworkProbeStatsMaxMeanPathDelay=f3SyncJPTPNetworkProbeStatsMaxMeanPathDelay, f3SyncJPTPNetworkProbeHistoryAvgResPDVRev=f3SyncJPTPNetworkProbeHistoryAvgResPDVRev, f3SyncJClockProbeThresholdEntry=f3SyncJClockProbeThresholdEntry, f3SyncJMIB=f3SyncJMIB, f3SyncJPTPClockProbeMaxTETotAlarmTime=f3SyncJPTPClockProbeMaxTETotAlarmTime, f3SyncJNotifGroup=f3SyncJNotifGroup, f3SyncJPTPClockProbeResHistoryAvgFFO=f3SyncJPTPClockProbeResHistoryAvgFFO, f3SyncJPTPClockProbeMaxTEThreshold=f3SyncJPTPClockProbeMaxTEThreshold, f3SyncJPTPNetworkProbeStatsRevScore3=f3SyncJPTPNetworkProbeStatsRevScore3, f3SyncJPTPNetworkProbeThresholdTable=f3SyncJPTPNetworkProbeThresholdTable, f3SyncJPTPNetworkProbeStatsIntervalType=f3SyncJPTPNetworkProbeStatsIntervalType, f3SyncJPTPClockProbeIndex=f3SyncJPTPClockProbeIndex, f3SyncJClockProbeSource=f3SyncJClockProbeSource, f3SyncJClockProbeStatsTable=f3SyncJClockProbeStatsTable, f3SyncJPTPClockProbeResHistoryMTIEValueIndex=f3SyncJPTPClockProbeResHistoryMTIEValueIndex, f3SyncJClockProbeMTIEMaskMargin=f3SyncJClockProbeMTIEMaskMargin, f3SyncJObjectGroup=f3SyncJObjectGroup, f3SyncJPTPClockProbeConstTEWindow=f3SyncJPTPClockProbeConstTEWindow, f3SyncJPTPNetworkProbeStatsMaxSyncPathDelay=f3SyncJPTPNetworkProbeStatsMaxSyncPathDelay, f3SyncJClockProbeResHistoryAvgPhaseOffset=f3SyncJClockProbeResHistoryAvgPhaseOffset, f3SyncJPTPNetworkProbeResPDVFwdLowRange=f3SyncJPTPNetworkProbeResPDVFwdLowRange, FFOObserWindow=FFOObserWindow, f3SyncJPTPClockProbeResHistorySlaveIpV4Address=f3SyncJPTPClockProbeResHistorySlaveIpV4Address, f3SyncJPTPClockProbeStatsIndex=f3SyncJPTPClockProbeStatsIndex, f3SyncJPTPClockProbeNoEventMessageFailure=f3SyncJPTPClockProbeNoEventMessageFailure, f3SyncJClockProbeResHistoryExpectedQL=f3SyncJClockProbeResHistoryExpectedQL, f3SyncJPTPClockProbeResHistoryConstTEClrThreshold=f3SyncJPTPClockProbeResHistoryConstTEClrThreshold, f3SyncJPTPClockProbeResHistoryOutOfTargetFFOTime=f3SyncJPTPClockProbeResHistoryOutOfTargetFFOTime, f3SyncJPTPClockProbeResHistoryInstTETotAlarmTime=f3SyncJPTPClockProbeResHistoryInstTETotAlarmTime, f3SyncJPTPClockProbeStatusMTIEMarginFailed=f3SyncJPTPClockProbeStatusMTIEMarginFailed, f3SyncJPTPNetworkProbeStatsMaxPathAsymmetry=f3SyncJPTPNetworkProbeStatsMaxPathAsymmetry, MTIEMaskType=MTIEMaskType, f3SyncJClockProbeTable=f3SyncJClockProbeTable, f3SyncJClockProbeResHistoryMeasurementType=f3SyncJClockProbeResHistoryMeasurementType)
mibBuilder.exportSymbols("F3-SYNCJACK-MIB", f3SyncJPTPClockProbeDelayMS=f3SyncJPTPClockProbeDelayMS, f3SyncJPTPNetworkProbeHistoryMaxPathAsymmetry=f3SyncJPTPNetworkProbeHistoryMaxPathAsymmetry, f3SyncJPTPNetworkProbeHistoryAvgMeanPathDelay=f3SyncJPTPNetworkProbeHistoryAvgMeanPathDelay, f3SyncJPTPClockProbeHistoryIndex=f3SyncJPTPClockProbeHistoryIndex, f3SyncJConfigObjects=f3SyncJConfigObjects, f3SyncJPTPNetworkProbeName=f3SyncJPTPNetworkProbeName, f3SyncJPTPClockProbeStatsMTIE1000s=f3SyncJPTPClockProbeStatsMTIE1000s, f3SyncJPTPClockProbeMTIEMaskMargin=f3SyncJPTPClockProbeMTIEMaskMargin, f3SyncJPTPClockProbeActualTestStartTime=f3SyncJPTPClockProbeActualTestStartTime, f3SyncJPTPNetworkProbeHistoryFwdScore3=f3SyncJPTPNetworkProbeHistoryFwdScore3, f3SyncJPTPClockProbeResHistoryLastTEAlertTime=f3SyncJPTPClockProbeResHistoryLastTEAlertTime, f3SyncJClockProbeStatsMTIE1s=f3SyncJClockProbeStatsMTIE1s, f3SyncJPTPClockProbeResHistoryMasterPortIdentity=f3SyncJPTPClockProbeResHistoryMasterPortIdentity, f3SyncJPTPNetworkProbeHistoryMaxSyncPathDelay=f3SyncJPTPNetworkProbeHistoryMaxSyncPathDelay, f3SyncJPTPNetworkProbeStatsMinRPDVFwd=f3SyncJPTPNetworkProbeStatsMinRPDVFwd, f3SyncJCompliances=f3SyncJCompliances, f3SyncJClockProbeResHistoryTeAlertClearThreshold=f3SyncJClockProbeResHistoryTeAlertClearThreshold, f3SyncJClockProbeResHistoryStorageType=f3SyncJClockProbeResHistoryStorageType, f3SyncJClockProbeThresholdValueLo=f3SyncJClockProbeThresholdValueLo, f3SyncJPTPNetworkProbeThresholdMonValue=f3SyncJPTPNetworkProbeThresholdMonValue, f3SyncJPTPNetworkProbeReferenceFailure=f3SyncJPTPNetworkProbeReferenceFailure, f3SyncJPTPNetworkProbeScheduler=f3SyncJPTPNetworkProbeScheduler, f3SyncJPTPNetworkProbeThresholdValueLo=f3SyncJPTPNetworkProbeThresholdValueLo, f3SyncJPTPClockProbeThresholdCrossingAlert=f3SyncJPTPClockProbeThresholdCrossingAlert, f3SyncJPTPNetworkProbeStatsResPDVRevLow=f3SyncJPTPNetworkProbeStatsResPDVRevLow, f3SyncJClockProbeStatsMTIE10s=f3SyncJClockProbeStatsMTIE10s, f3SyncJPTPClockProbeLastTIEResultTime=f3SyncJPTPClockProbeLastTIEResultTime, f3SyncJPTPClockProbeMeasurementType=f3SyncJPTPClockProbeMeasurementType, f3SyncJPTPClockProbeMTIERestart=f3SyncJPTPClockProbeMTIERestart, f3SyncJScheduleGroupType=f3SyncJScheduleGroupType, f3SyncJPTPNetworkProbeHistoryResPDVRevMedium=f3SyncJPTPNetworkProbeHistoryResPDVRevMedium, f3SyncJClockProbeStorageType=f3SyncJClockProbeStorageType, f3SyncJPTPClockProbeMeasurementDirection=f3SyncJPTPClockProbeMeasurementDirection, f3SyncJNotifications=f3SyncJNotifications, f3SyncJPTPClockProbeInstTEClrThreshold=f3SyncJPTPClockProbeInstTEClrThreshold, f3SyncJClockProbeEntry=f3SyncJClockProbeEntry, f3SyncJPTPClockProbeTable=f3SyncJPTPClockProbeTable, f3SyncJPTPClockProbeResHistoryMaxTETotAlarmTime=f3SyncJPTPClockProbeResHistoryMaxTETotAlarmTime, f3SyncJPTPClockProbeResHistoryMaxTEMeasurementTime=f3SyncJPTPClockProbeResHistoryMaxTEMeasurementTime, f3SyncJPTPClockProbeIpPrototocol=f3SyncJPTPClockProbeIpPrototocol, f3SyncJClockProbeMTIEValueIndex=f3SyncJClockProbeMTIEValueIndex, f3SyncJPTPNetworkProbeHistoryAvgResPDVFwd=f3SyncJPTPNetworkProbeHistoryAvgResPDVFwd, f3SyncJPTPClockProbeResHistoryMaxPhaseOffset=f3SyncJPTPClockProbeResHistoryMaxPhaseOffset, f3SyncJClockProbeHistoryMTIE50000s=f3SyncJClockProbeHistoryMTIE50000s, f3SyncJPTPClockProbeResHistoryMTIEValue=f3SyncJPTPClockProbeResHistoryMTIEValue, f3SyncJClockProbeMTIERestart=f3SyncJClockProbeMTIERestart, f3SyncJPTPClockProbeResHistoryEntry=f3SyncJPTPClockProbeResHistoryEntry, f3SyncJPTPNetworkProbeResPDVRevMediumRange=f3SyncJPTPNetworkProbeResPDVRevMediumRange, f3SyncJClockProbeStatsMTIE1000s=f3SyncJClockProbeStatsMTIE1000s, f3SyncJPTPClockProbeHistoryTime=f3SyncJPTPClockProbeHistoryTime, f3SyncJPTPNetworkProbeHistoryResPDVFwdLow=f3SyncJPTPNetworkProbeHistoryResPDVFwdLow, f3SyncJPTPClockProbeResHistoryNoEventMessageFailure=f3SyncJPTPClockProbeResHistoryNoEventMessageFailure, f3SyncJPTPNetworkProbeEntry=f3SyncJPTPNetworkProbeEntry, f3SyncJPTPClockProbeResHistoryMTIEValueTable=f3SyncJPTPClockProbeResHistoryMTIEValueTable, f3SyncJPTPNetworkProbeStatsRevScore5=f3SyncJPTPNetworkProbeStatsRevScore5, f3SyncJClockProbeReference=f3SyncJClockProbeReference, f3SyncJClockProbeFfoTarget=f3SyncJClockProbeFfoTarget, f3SyncJPTPClockProbeResHistoryNoTimestampFailure=f3SyncJPTPClockProbeResHistoryNoTimestampFailure, f3SyncJClockProbeThresholdCrossingAlert=f3SyncJClockProbeThresholdCrossingAlert, f3SyncJClockProbeStatusMTIEMaskFailed=f3SyncJClockProbeStatusMTIEMaskFailed, f3SyncJClockProbeResHistorySourceFailure=f3SyncJClockProbeResHistorySourceFailure, f3SyncJPTPClockProbeStatsEntry=f3SyncJPTPClockProbeStatsEntry, f3SyncJPTPClockProbeThresholdValueLo=f3SyncJPTPClockProbeThresholdValueLo, f3SyncJPTPClockProbeStatsMTIE1s=f3SyncJPTPClockProbeStatsMTIE1s, f3SyncJClockProbeResHistoryMTIEMaskMarginCrossedTime=f3SyncJClockProbeResHistoryMTIEMaskMarginCrossedTime, f3SyncJScheduleGroupIndex=f3SyncJScheduleGroupIndex, f3SyncJPTPClockProbeTAsymmetry=f3SyncJPTPClockProbeTAsymmetry, f3SyncJPTPClockProbeTeAlertClearThreshold=f3SyncJPTPClockProbeTeAlertClearThreshold, f3SyncJClockProbeResHistoryMaxTEMeasurementTime=f3SyncJClockProbeResHistoryMaxTEMeasurementTime, f3SyncJPTPNetworkProbeHistoryMinSyncPathDelay=f3SyncJPTPNetworkProbeHistoryMinSyncPathDelay, f3SyncJPTPClockProbeDelaySM=f3SyncJPTPClockProbeDelaySM, f3SyncJClockProbeLastTIEResult=f3SyncJClockProbeLastTIEResult, f3SyncJPTPClockProbeResHistoryStatusMTIEMaskFailed=f3SyncJPTPClockProbeResHistoryStatusMTIEMaskFailed, f3SyncJScheduleGroupRowStatus=f3SyncJScheduleGroupRowStatus, f3SyncJClockProbeLastFFOResult=f3SyncJClockProbeLastFFOResult, f3SyncJPTPClockProbeStatsValid=f3SyncJPTPClockProbeStatsValid, f3SyncJPTPNetworkProbeStatsMinRPDVRev=f3SyncJPTPNetworkProbeStatsMinRPDVRev, f3SyncJPTPNetworkProbeReference=f3SyncJPTPNetworkProbeReference, f3SyncJClockProbeResHistoryConstTEThreshold=f3SyncJClockProbeResHistoryConstTEThreshold, f3SyncJPTPClockProbeHistoryMTIE1s=f3SyncJPTPClockProbeHistoryMTIE1s, f3SyncJPTPNetworkProbePDVAssuredHi=f3SyncJPTPNetworkProbePDVAssuredHi, f3SyncJPTPNetworkProbeHistoryLostDelayRspMsgs=f3SyncJPTPNetworkProbeHistoryLostDelayRspMsgs, f3SyncJPTPNetworkProbeThresholdCrossingAlert=f3SyncJPTPNetworkProbeThresholdCrossingAlert, f3SyncJClockProbeResHistoryConstTEClrThreshold=f3SyncJClockProbeResHistoryConstTEClrThreshold, f3SyncJPTPNetworkProbeStatsMinPathAsymmetry=f3SyncJPTPNetworkProbeStatsMinPathAsymmetry, f3SyncJPTPNetworkProbeStatsAvgResPDVRev=f3SyncJPTPNetworkProbeStatsAvgResPDVRev, f3SyncJClockProbeMaxTEClrThreshold=f3SyncJClockProbeMaxTEClrThreshold, f3SyncJPTPClockProbeResHistoryTable=f3SyncJPTPClockProbeResHistoryTable, f3SyncJPTPNetworkProbeResPDVFwdMediumRange=f3SyncJPTPNetworkProbeResPDVFwdMediumRange, f3SyncJPTPClockProbeStatsMaxConstTE=f3SyncJPTPClockProbeStatsMaxConstTE, f3SyncJClockProbeReferenceFailure=f3SyncJClockProbeReferenceFailure, f3SyncJClockProbeThresholdInterval=f3SyncJClockProbeThresholdInterval, f3SyncJClockProbeStatsIntervalType=f3SyncJClockProbeStatsIntervalType, f3SyncJPTPNetworkProbeStatusChangeTrap=f3SyncJPTPNetworkProbeStatusChangeTrap, f3SyncJClockProbeTimeOfLastFFOResult=f3SyncJClockProbeTimeOfLastFFOResult, f3SyncJClockProbeThresholdValueHi=f3SyncJClockProbeThresholdValueHi, f3SyncJPTPClockProbeActualTestDuration=f3SyncJPTPClockProbeActualTestDuration, f3SyncJPTPNetworkProbeStatsEntry=f3SyncJPTPNetworkProbeStatsEntry, f3SyncJPTPNetworkProbeHistoryValid=f3SyncJPTPNetworkProbeHistoryValid, f3SyncJClockProbeResHistoryMaxFFO=f3SyncJClockProbeResHistoryMaxFFO, f3SyncJPTPClockProbeSlaveIpV4Address=f3SyncJPTPClockProbeSlaveIpV4Address, f3SyncJClockProbeResHistoryMaxTEClrThreshold=f3SyncJClockProbeResHistoryMaxTEClrThreshold, f3SyncJClockProbeMaxTEMeasurementTime=f3SyncJClockProbeMaxTEMeasurementTime, f3SyncJPTPClockProbeResHistoryIndex=f3SyncJPTPClockProbeResHistoryIndex, f3SyncJPTPClockProbeResHistoryInstTEMeasurementTime=f3SyncJPTPClockProbeResHistoryInstTEMeasurementTime, f3SyncJPTPNetworkProbeStatsPathLossSecondsFwd=f3SyncJPTPNetworkProbeStatsPathLossSecondsFwd, f3SyncJClockProbeStatsMTIE10000s=f3SyncJClockProbeStatsMTIE10000s, f3SyncJPTPNetworkProbePDVAssuredLo=f3SyncJPTPNetworkProbePDVAssuredLo, f3SyncJPTPClockProbeResHistoryMinPhaseOffset=f3SyncJPTPClockProbeResHistoryMinPhaseOffset, f3SyncJPTPClockProbeResHistoryRowStatus=f3SyncJPTPClockProbeResHistoryRowStatus, f3SyncJClockProbeTeAlertThreshold=f3SyncJClockProbeTeAlertThreshold, f3SyncJPTPNetworkProbeStatsDelayRspMsgsRx=f3SyncJPTPNetworkProbeStatsDelayRspMsgsRx, f3SyncJPTPNetworkProbeResPDVRevLowRange=f3SyncJPTPNetworkProbeResPDVRevLowRange, f3SyncJClockProbeLastTEAlertTime=f3SyncJClockProbeLastTEAlertTime, f3SyncJPTPNetworkProbeHistoryIndex=f3SyncJPTPNetworkProbeHistoryIndex, f3SyncJPTPClockProbeResHistoryStatusMTIEMarginFailed=f3SyncJPTPClockProbeResHistoryStatusMTIEMarginFailed, f3SyncJPTPNetworkProbeStatsResPDVFwdTotal=f3SyncJPTPNetworkProbeStatsResPDVFwdTotal, f3SyncJPTPClockProbeStatsMTIE10000s=f3SyncJPTPClockProbeStatsMTIE10000s, f3SyncJPTPNetworkProbeStatsMinSyncPathDelay=f3SyncJPTPNetworkProbeStatsMinSyncPathDelay, f3SyncJClockProbeSourceType=f3SyncJClockProbeSourceType, f3SyncJPTPClockProbeResHistoryMTIEValueEntry=f3SyncJPTPClockProbeResHistoryMTIEValueEntry, f3SyncJPTPClockProbeScheduler=f3SyncJPTPClockProbeScheduler, f3SyncJPTPClockProbeFfoTarget=f3SyncJPTPClockProbeFfoTarget, f3SyncJClockProbeResHistoryStatusMTIEMaskFailed=f3SyncJClockProbeResHistoryStatusMTIEMaskFailed, f3SyncJClockProbeHistoryMTIE1s=f3SyncJClockProbeHistoryMTIE1s, f3SyncJPTPClockProbeHistoryMTIE100s=f3SyncJPTPClockProbeHistoryMTIE100s, f3SyncJClockProbeMeasurementRate=f3SyncJClockProbeMeasurementRate, f3SyncJPTPNetworkProbeHistoryMinRPDVRev=f3SyncJPTPNetworkProbeHistoryMinRPDVRev, f3SyncJPTPNetworkProbeStatsAvgMeanPathDelay=f3SyncJPTPNetworkProbeStatsAvgMeanPathDelay, f3SyncJClockProbeResHistoryActualTestStartTime=f3SyncJClockProbeResHistoryActualTestStartTime, f3SyncJClockProbeHistoryEntry=f3SyncJClockProbeHistoryEntry, f3SyncJPTPClockProbeResHistorySlavePortIdentity=f3SyncJPTPClockProbeResHistorySlavePortIdentity, f3SyncJPTPNetworkProbePDVSatisfiedLo=f3SyncJPTPNetworkProbePDVSatisfiedLo, f3SyncJPTPNetworkProbeResPDVFwdHighRange=f3SyncJPTPNetworkProbeResPDVFwdHighRange, f3SyncJPTPNetworkProbeThresholdVariable=f3SyncJPTPNetworkProbeThresholdVariable, f3SyncJConformance=f3SyncJConformance, f3SyncJClockProbeResHistoryRowStatus=f3SyncJClockProbeResHistoryRowStatus, f3SyncJPTPNetworkProbeHistoryMaxDelayReqPathDelay=f3SyncJPTPNetworkProbeHistoryMaxDelayReqPathDelay, f3SyncJPTPClockProbeHistoryMaxTE=f3SyncJPTPClockProbeHistoryMaxTE, f3SyncJPTPClockProbeResHistoryConstTEThreshold=f3SyncJPTPClockProbeResHistoryConstTEThreshold, f3SyncJClockProbeResHistoryMeasurementRate=f3SyncJClockProbeResHistoryMeasurementRate, f3SyncJPerfObjectGroup=f3SyncJPerfObjectGroup, f3SyncJPTPClockProbeEntry=f3SyncJPTPClockProbeEntry, f3SyncJClockProbeConstTETotAlarmTime=f3SyncJClockProbeConstTETotAlarmTime, f3SyncJPTPClockProbeLastTEAlertClearTime=f3SyncJPTPClockProbeLastTEAlertClearTime, PTPMeasurementDirection=PTPMeasurementDirection, f3SyncJPTPClockProbeResHistoryReference=f3SyncJPTPClockProbeResHistoryReference, f3SyncJPTPNetworkProbeActualTestDuration=f3SyncJPTPNetworkProbeActualTestDuration, f3SyncJGroups=f3SyncJGroups, f3SyncJPTPNetworkProbeStatsValid=f3SyncJPTPNetworkProbeStatsValid, f3SyncJClockProbeResHistorySource=f3SyncJClockProbeResHistorySource, f3SyncJClockProbeStatsEntry=f3SyncJClockProbeStatsEntry, f3SyncJClockProbeMTIEMaskMarginCrossedTime=f3SyncJClockProbeMTIEMaskMarginCrossedTime, f3SyncJPTPClockProbeResHistoryMTIEMaskMarginCrossedTime=f3SyncJPTPClockProbeResHistoryMTIEMaskMarginCrossedTime, f3SyncJPTPClockProbeResHistoryMaxTEClrThreshold=f3SyncJPTPClockProbeResHistoryMaxTEClrThreshold, f3SyncJPTPNetworkProbeStatsResPDVFwdMedium=f3SyncJPTPNetworkProbeStatsResPDVFwdMedium, f3SyncJPTPNetworkProbeStatsMinDelayReqPathDelay=f3SyncJPTPNetworkProbeStatsMinDelayReqPathDelay, f3SyncJClockProbeConstTEMeasurementTime=f3SyncJClockProbeConstTEMeasurementTime, f3SyncJClockProbeResHistoryActualTestDuration=f3SyncJClockProbeResHistoryActualTestDuration, f3SyncJPTPClockProbeHistoryValid=f3SyncJPTPClockProbeHistoryValid, f3SyncJPTPClockProbeSlavePortIdentity=f3SyncJPTPClockProbeSlavePortIdentity, f3SyncJClockProbeResHistoryStatusMTIEMarginFailed=f3SyncJClockProbeResHistoryStatusMTIEMarginFailed, f3SyncJPTPClockProbeResHistoryTotalPhaseOffsetTime=f3SyncJPTPClockProbeResHistoryTotalPhaseOffsetTime, f3SyncJScheduleGroupDuration=f3SyncJScheduleGroupDuration, f3SyncJClockProbeRunningFailedCount=f3SyncJClockProbeRunningFailedCount, f3SyncJPTPNetworkProbeStatsAvgSyncPathDelay=f3SyncJPTPNetworkProbeStatsAvgSyncPathDelay, f3SyncJPTPClockProbeStatsAction=f3SyncJPTPClockProbeStatsAction, f3SyncJClockProbeResHistoryAvgFFO=f3SyncJClockProbeResHistoryAvgFFO, f3SyncJPTPNetworkProbeHistoryResPDVRevLow=f3SyncJPTPNetworkProbeHistoryResPDVRevLow, f3SyncJClockProbeThresholdIndex=f3SyncJClockProbeThresholdIndex, f3SyncJPTPClockProbeRawDataCollectionEnabled=f3SyncJPTPClockProbeRawDataCollectionEnabled, f3SyncJPTPClockProbeConstTEThreshold=f3SyncJPTPClockProbeConstTEThreshold, f3SyncJPTPNetworkProbeIpPrototocol=f3SyncJPTPNetworkProbeIpPrototocol, f3SyncJPTPNetworkProbeStatsResPDVFwdHigh=f3SyncJPTPNetworkProbeStatsResPDVFwdHigh, f3SyncJPTPClockProbeMasterIpV4Address=f3SyncJPTPClockProbeMasterIpV4Address, f3SyncJPTPClockProbeTimeOfLastFFOResult=f3SyncJPTPClockProbeTimeOfLastFFOResult, f3SyncJPTPClockProbeResHistoryMTIEMaskMargin=f3SyncJPTPClockProbeResHistoryMTIEMaskMargin, f3SyncJPTPClockProbeLastTIEResult=f3SyncJPTPClockProbeLastTIEResult, f3SyncJClockProbeMTIEValue=f3SyncJClockProbeMTIEValue, f3SyncJPTPNetworkProbeStatsFwdScore4=f3SyncJPTPNetworkProbeStatsFwdScore4, f3SyncJPTPNetworkProbeStatsResPDVRevTotal=f3SyncJPTPNetworkProbeStatsResPDVRevTotal, f3SyncJPTPClockProbeMTIEValueTable=f3SyncJPTPClockProbeMTIEValueTable, f3SyncJPTPClockProbeThresholdInterval=f3SyncJPTPClockProbeThresholdInterval, f3SyncJClockProbeResHistoryMTIEMaskMargin=f3SyncJClockProbeResHistoryMTIEMaskMargin, f3SyncJPTPClockProbeExpectedQL=f3SyncJPTPClockProbeExpectedQL, f3SyncJPTPNetworkProbeHistoryDelayRspMsgsRx=f3SyncJPTPNetworkProbeHistoryDelayRspMsgsRx, f3SyncJPTPClockProbeResHistoryInstTEThreshold=f3SyncJPTPClockProbeResHistoryInstTEThreshold, f3SyncJPTPNetworkProbeExpectedQL=f3SyncJPTPNetworkProbeExpectedQL, f3SyncJClockProbeHistoryMTIE10s=f3SyncJClockProbeHistoryMTIE10s, MeasurementType=MeasurementType, f3SyncJClockProbeHistoryMTIE100s=f3SyncJClockProbeHistoryMTIE100s, f3SyncJPTPClockProbeResHistoryConstTETotAlarmTime=f3SyncJPTPClockProbeResHistoryConstTETotAlarmTime, f3SyncJPTPNetworkProbeThresholdIndex=f3SyncJPTPNetworkProbeThresholdIndex, f3SyncJClockProbeSourceFailure=f3SyncJClockProbeSourceFailure, f3SyncJPTPNetworkProbeHistoryMaxMeanPathDelay=f3SyncJPTPNetworkProbeHistoryMaxMeanPathDelay, f3SyncJClockProbeHistoryIndex=f3SyncJClockProbeHistoryIndex, f3SyncJPTPClockProbeMTIEValueIndex=f3SyncJPTPClockProbeMTIEValueIndex, f3SyncJPTPNetworkProbeHistoryMinMeanPathDelay=f3SyncJPTPNetworkProbeHistoryMinMeanPathDelay, f3SyncJPTPClockProbeResHistoryExpectedQL=f3SyncJPTPClockProbeResHistoryExpectedQL, f3SyncJClockProbeRowStatus=f3SyncJClockProbeRowStatus, f3SyncJPTPClockProbeRunningFailedCount=f3SyncJPTPClockProbeRunningFailedCount, f3SyncJClockProbeThresholdMonValue=f3SyncJClockProbeThresholdMonValue, f3SyncJPTPClockProbeMaxTEClrThreshold=f3SyncJPTPClockProbeMaxTEClrThreshold, f3SyncJClockProbeConstTEThreshold=f3SyncJClockProbeConstTEThreshold, f3SyncJClockProbeConstTEWindow=f3SyncJClockProbeConstTEWindow, f3SyncJPTPNetworkProbeHistoryResPDVRevTotal=f3SyncJPTPNetworkProbeHistoryResPDVRevTotal, f3SyncJPTPNetworkProbeThresholdEntry=f3SyncJPTPNetworkProbeThresholdEntry, f3SyncJClockProbeHistoryTable=f3SyncJClockProbeHistoryTable, f3SyncJClockProbeResHistoryRunningFailedCount=f3SyncJClockProbeResHistoryRunningFailedCount)
