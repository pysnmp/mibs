#
# PySNMP MIB module ADTRAN-AOS-QOS (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adtran/ADTRAN-AOS-QOS
# Produced by pysmi-1.1.12 at Tue Jun  4 13:29:13 2024
# On host fv-az573-215 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
adGenAOSRouter, adGenAOSConformance = mibBuilder.importSymbols("ADTRAN-AOS", "adGenAOSRouter", "adGenAOSConformance")
adIdentity, = mibBuilder.importSymbols("ADTRAN-MIB", "adIdentity")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, ObjectIdentity, iso, TimeTicks, ModuleIdentity, Unsigned32, NotificationType, MibIdentifier, Gauge32, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "ObjectIdentity", "iso", "TimeTicks", "ModuleIdentity", "Unsigned32", "NotificationType", "MibIdentifier", "Gauge32", "Integer32", "Bits")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
adGenAOSQoSMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 664, 6, 10000, 53, 2, 1))
adGenAOSQoSMib.setRevisions(('2011-06-17 00:00', '2011-05-17 00:00', '2010-05-19 00:00', '2009-03-04 00:00', '2008-09-16 00:00', '2008-08-20 00:00', '2008-07-11 00:00', '2008-06-25 00:00', '2008-06-06 00:00', '2008-06-04 00:00', '2008-04-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: adGenAOSQoSMib.setRevisionsDescriptions(('Changed description of adGenAOSQoSInterfaceTXQType.\n                    Changes by Michael Weir.', 'Added enumeration values to adGenAOSQosMapMatchType\n                    and adGenAOSQoSMapProtocolMatchType for QoS IPv6 \n                    configurations. Changes by Reba Holland.', 'Added adGenAOSQoSMapPriorityStrictRateLimiting to\n                    adGenAOSQoSMapEntriesTable.\n                    Changes by David Wallace.', 'Added configuration information to\n                    adGenAOSQoSMapEntriesTable and shaping statistics to\n                    adGenAOSQoSInterfaceTable. Added\n                    adGenAOSQoSMapMatchTable and adGenAOSQoSMapShaperTable.\n                    Changes by Reba Holland.', 'Added rate statistics to\n                    adGenAOSQoSClassConvHistoryTable and\n                    adGenAOSQoSPriorityRateLimiterTable.  Added\n                    adGenAOSQoSMapClassifierStatsTable. The\n                    adGenAOSQoSMapClassifierStatsTable will initially display\n                    only default class information.\n                    Changes by Reba Holland.', 'Changed name of OIDs adGenAOSQoSMapEntryActionType,\n                     adGenAOSQoSMapBWType, adGenAOSQoSMapBWValue, to\n                     adGenAOSQoSMapQueuingActionType,\n                     adGenAOSQoSMapQueuingBWType,\n                     adGenAOSQoSMapQueuingBWValue.\n                    Changes by Reba Holland.', 'Added adGenAOSQoSInterfaceTable. Changed\n                     adGenAOSQoSClassConvHistoryTable to use ifIndex,\n                     adGenAOSMapEntryId, and adGenAOSQoSMapParentEntryId as\n                     indices. Changed adGenAOSQoSPriorityRateLimiterTable to use\n                     adGenAOSQoSPriorityRateLimiterParentId as an index.\n                    Changes by Reba Holland.', 'Added the following to the adGenAOSQoSMapEntriesTable -\n                     adGenAOSQoSMapEntrySetName, adGenAOSQoSMapEntryActionType,\n                     adGenAOSQoSMapBWType, adGenAOSQoSMapBWValue. Changed\n                     adGenAOSQos to be under the adGenAOSRouter tree instead\n                     of the adGenAOSCommon tree. Changed name, indices and\n                     OIDS of adGenQOSQoSConversationTable to\n                     adGenAOSQoSClassConversationTable. Changed name, indices\n                     and OIDS of adGenQOSQoSConvHistoryTable to\n                     adGenAOSQoSClassConvHistoryTable. Changes by Reba Holland.', 'Changed the following from Integer32 to Unsigned32 -\n                    adGenAOSQoSMapSetId, adGenAOSQoSMapEntryId\n                    adGenAOSQoSHistoryConvId, adGenAOSQoSHistorySetId,\n                    adGenAOSQoSHistoryEntryId, adGenAOSQoSConvId. Changed\n                    description of adGenAOSQoSConvHistoryTable and\n                    adGenAOSQoSConversationTable. Removed adGenAOSQoSMapSetId\n                    as an index to adGenAOSQoSPriorityRateLimiterTable and\n                    added adGenAOSQoSPriorityRateLimiterSetId as an entry.\n                    Changes by Reba Holland.', 'Added adGenAOSQoSMapChildSetName to\n                    adGenAOSQoSMapEntriesTable.\n                    Changed indices of adGenAOSQoSConvHistoryTable.\n                    Changed description and indices of\n                    adGenAOSQoSMapEntriesTable. Changed OID name of\n                    adGenAOSQoSRateLimiterTable to\n                    adGenAOSQoSPriorityRateLimiterTable.\n                    Changes by Reba Holland.', 'First Draft of ADTRAN-AOS-QOS MIB module.\n                     **********************************\n                        QoS Overview\n                     **********************************\n                     This MIB allows read-only access to quality of service\n                     (QoS)statistical information for QoS enabled ADTRAN\n                     products.  A QoS-policy is defined using a QoS map in the\n                     ADTRAN Operating System (AOS) command line interface (CLI).\n                     The QoS map is a named list with sequenced entries.\n                     An entry contains match references and one or more\n                     actions. Multiple map entries for the same QoS map are\n                     differentiated by a sequence number. The sequence number\n                     is used to assign match order. Once created, a QoS map must\n                     be applied to an interface in order to actively process\n                     traffic. Any traffic for the interface that does not\n                     explicitly match a map entry is sent using the default\n                     queuing method for the interface (such as weighted\n                     fair queuing (WFQ). All QoS configuration must be done\n                     by the ADTRAN command line interface (CLI) or the WEB GUI.',))
if mibBuilder.loadTexts: adGenAOSQoSMib.setLastUpdated('200806250000Z')
if mibBuilder.loadTexts: adGenAOSQoSMib.setOrganization('ADTRAN, Inc.')
if mibBuilder.loadTexts: adGenAOSQoSMib.setContactInfo('Technical Support Dept.\n                Postal: ADTRAN, Inc.\n                901 Explorer Blvd.\n                Huntsville, AL 35806\n\n                Tel: +1 800 726-8663\n                Fax: +1 256 963 6217\n                E-mail: support@adtran.com')
if mibBuilder.loadTexts: adGenAOSQoSMib.setDescription('This MIB contains QoS statistical information.')
adGenAOSQos = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1))
class Unsigned64(TextualConvention, Counter64):
    description = 'An unsigned 64-bit quantity. Currently using Counter64 SYNTAX for\n        encoding rules.'
    status = 'current'

adGenAOSQoSMapSetTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 1), )
if mibBuilder.loadTexts: adGenAOSQoSMapSetTable.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapSetTable.setDescription('Named list of configured QoS maps.')
adGenAOSQoSMapSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 1, 1), ).setIndexNames((0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapSetId"))
if mibBuilder.loadTexts: adGenAOSQoSMapSetEntry.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapSetEntry.setDescription('The parameters for a particular QoS map.')
adGenAOSQoSMapSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapSetId.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapSetId.setDescription('This is a unique number chosen by the system to\n                identify a row in the adGenAOSQoSMapTable.')
adGenAOSQoSMapSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapSetName.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapSetName.setDescription('Unique string used to identify QoS map.')
adGenAOSQoSMapIsChild = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapIsChild.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapIsChild.setDescription('Signifies this map as a child of another map if true.')
adGenAOSQoSMapEntriesTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2), )
if mibBuilder.loadTexts: adGenAOSQoSMapEntriesTable.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapEntriesTable.setDescription('List of sequenced entries for a named QoS map.')
adGenAOSQoSMapEntriesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1), ).setIndexNames((0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapSetId"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapEntryId"))
if mibBuilder.loadTexts: adGenAOSQoSMapEntriesEntry.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapEntriesEntry.setDescription('The parameters for a particular sequenced entry of a named QoS\n            map.')
adGenAOSQoSMapEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapEntryId.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapEntryId.setDescription('This is a unique number chosen by the system and is used in\n                conjunction with adGenAOSQoSMapSetId to identify a unique\n                row in the adGenAOSQoSMapEntryTable.')
adGenAOSQoSMapSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapSeqNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapSeqNum.setDescription('This is a unique number configured by the user to identify a\n                sequence of entries in a named list of maps.')
adGenAOSQoSMapEntrySetName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapEntrySetName.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapEntrySetName.setDescription('Unique string used to identify QoS map.')
adGenAOSQoSMapChildSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapChildSetName.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapChildSetName.setDescription('Unique string used to identify QoS child map.')
adGenAOSQoSMapQueuingActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("priority", 2), ("classBased", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapQueuingActionType.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapQueuingActionType.setDescription('Defines the type of queuing configured for this map entry.')
adGenAOSQoSMapQueuingBWType = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("absolute", 2), ("percent", 3), ("percentRemaining", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapQueuingBWType.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapQueuingBWType.setDescription('Defines the type of bandwidth queuing.')
adGenAOSQoSMapQueuingBWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapQueuingBWValue.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapQueuingBWValue.setDescription('Configured bandwidth for this map entry.')
adGenAOSQoSMapQueuingBurstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapQueuingBurstValue.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapQueuingBurstValue.setDescription('Priority burst size in bytes.')
adGenAOSQoSMapMatchAll = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapMatchAll.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapMatchAll.setDescription('If enabled match case requires all of multiple conditions to be\n             met (logical AND). If disabled match case requires any of multiple\n             conditions to be met (logical OR).')
adGenAOSQoSMapDscpMarkState = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapDscpMarkState.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapDscpMarkState.setDescription('State of packet IP DSCP field marking.')
adGenAOSQoSMapDscpMarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapDscpMarkValue.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapDscpMarkValue.setDescription('Mark packet IP DSCP field with this value (0-63).')
adGenAOSQoSMapDscpMarkString = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapDscpMarkString.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapDscpMarkString.setDescription('Mark packet IP DSCP field with this string value. Possible mark\n            values are:\n                af11    - AF11 dscp (001010)\n                af12    - AF12 dscp (001100)\n                af13    - AF13 dscp (001110)\n                af21    - AF21 dscp (010010)\n                af22    - AF22 dscp (010100)\n                af23    - AF23 dscp (010110)\n                af31    - AF31 dscp (011010)\n                af32    - AF32 dscp (011100)\n                af33    - AF33 dscp (011110)\n                af41    - AF41 dscp (100010)\n                af42    - AF42 dscp (100100)\n                af43    - AF43 dscp (100110)\n                cs1     - CS1(precedence 1) dscp (001000)\n                cs2     - CS2(precedence 2) dscp (010000)\n                cs3     - CS3(precedence 3) dscp (011000)\n                cs4     - CS4(precedence 4) dscp (100000)\n                cs5     - CS5(precedence 5) dscp (101000)\n                cs6     - CS6(precedence 6) dscp (110000)\n                cs7     - CS7(precedence 7) dscp (111000)\n                default - Default dscp (000000)\n                ef      - EF dscp (101110)')
adGenAOSQoSMapPrecedenceMarkState = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapPrecedenceMarkState.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapPrecedenceMarkState.setDescription('State of packet IP precedence field marking.')
adGenAOSQoSMapPrecedenceMarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapPrecedenceMarkValue.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapPrecedenceMarkValue.setDescription('Mark packet IP Precedence field with this value.')
adGenAOSQoSMapCosMarkState = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapCosMarkState.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapCosMarkState.setDescription('State of packet Ethernet VLAN Priority field marking.')
adGenAOSQoSMapCosMarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapCosMarkValue.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapCosMarkValue.setDescription('Mark packet Ethernet VLAN Priority field with this value.')
adGenAOSQoSMapShapeState = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShapeState.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapShapeState.setDescription('State of traffic shaping.')
adGenAOSQoSMapShapeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShapeValue.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapShapeValue.setDescription("Shaper's committed information rate in bps.")
adGenAOSQoSMapShapeBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShapeBurst.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapShapeBurst.setDescription("Shaper's burst size in bytes.")
adGenAOSQoSMapShapeEthOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShapeEthOverhead.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapShapeEthOverhead.setDescription('State of inclusion of Ethernet CRC and VLAN tag bytes in the\n            packet size.')
adGenAOSQoSMapClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSQoSMapClearCounters.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapClearCounters.setDescription("Clear the map entry statistics. This is a\n            write-only variable. A read will always return a value of '1'.")
adGenAOSQoSMapPriorityStrictRateLimiting = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapPriorityStrictRateLimiting.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapPriorityStrictRateLimiting.setDescription('If enabled, all priority packets that exceed the configured bandwidth will be dropped.')
adGenAOSQoSInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3), )
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTable.setDescription('List of interfaces and the QoS map data for that interface.')
adGenAOSQoSInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adGenAOSQoSInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceEntry.setDescription('Displays list of interfaces and the QoS map data for that\n            interface. Note: some interfaces may not support QoS or may support\n            only a portion of the QoS data.')
adGenAOSQoSInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceName.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceName.setDescription('Unique string used to identify this interface.')
adGenAOSQoSInterfaceOutboundMapSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceOutboundMapSetName.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceOutboundMapSetName.setDescription('Unique string used to identify the outbound QoS map\n            applied to this interface.')
adGenAOSQoSInterfaceInboundMapSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceInboundMapSetName.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceInboundMapSetName.setDescription('Unique string used to identify the inbound QoS map\n            applied to this interface.')
adGenAOSQoSInterfaceMapState = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceMapState.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceMapState.setDescription('Specifies state of QoS map attached to this interface. There may\n            be inadequate bandwidth to enable.')
adGenAOSQoSInterfaceTXQType = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fifo", 1), ("fifoAged", 2), ("weightedFair", 3), ("roundRobin", 4), ("priority", 5), ("none", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQType.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQType.setDescription('Specifies the effective queueing method for this interface.')
adGenAOSQoSInterfaceTXQSubqPktLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQSubqPktLimit.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQSubqPktLimit.setDescription('Specifies output packet threshold for the sub-queues on this\n            interface.')
adGenAOSQoSInterfaceTXQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQSize.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQSize.setDescription('Specifies output queue size for this interface.')
adGenAOSQoSInterfaceTXQPktHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQPktHighWater.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQPktHighWater.setDescription('Specifies output queue high water mark for this interface.')
adGenAOSQoSInterfaceTXQMaxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQMaxTotal.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQMaxTotal.setDescription('Specifies output queue max total for this interface.')
adGenAOSQoSInterfaceTXQDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQDrops.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQDrops.setDescription('Specifies output queue drops for this interface.')
adGenAOSQoSInterfaceTXQHdlcRingLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQHdlcRingLimit.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQHdlcRingLimit.setDescription('Specifies HDLC tx buffer descriptor ring limit for this interface.')
adGenAOSQoSInterfaceTXQAvailableBW = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQAvailableBW.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQAvailableBW.setDescription('Specifies available bandwidth in kilobits/sec.')
adGenAOSQoSInterfaceTXQConvActive = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQConvActive.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQConvActive.setDescription('Specifies number of active conversations for this interface.')
adGenAOSQoSInterfaceTXQConvMaxActive = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQConvMaxActive.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQConvMaxActive.setDescription('Specifies number of max active conversations for this interface.')
adGenAOSQoSInterfaceTXQConvMaxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQConvMaxTotal.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQConvMaxTotal.setDescription('Specifies max total conversations for this interface.')
adGenAOSQoSInterfaceTrafficShapingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTrafficShapingRate.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTrafficShapingRate.setDescription('Outbound traffic shaping rate in bits per second.')
adGenAOSQoSInterfaceTrafficShapingBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTrafficShapingBurst.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTrafficShapingBurst.setDescription('Outbound traffic shaping burst in bytes.')
adGenAOSQoSInterfaceShaperValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperValue.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperValue.setDescription('Shaper value for traffic on an interface.')
adGenAOSQoSInterfaceShaperCurrentBudgetSize = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperCurrentBudgetSize.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperCurrentBudgetSize.setDescription('Current budget size of the interface shaper.')
adGenAOSQoSInterfaceShaperMaxBudgetSize = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperMaxBudgetSize.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperMaxBudgetSize.setDescription('Maximum budget size of the interface shaper.')
adGenAOSQoSInterfaceShaperBytesPerTick = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperBytesPerTick.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperBytesPerTick.setDescription('Bytes added to the budget.')
adGenAOSQoSInterfaceShaperTickRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperTickRate.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperTickRate.setDescription('How often, in milliseconds, that bytes are added to the\n            budget.')
adGenAOSQoSInterfaceShaperQPktDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperQPktDepth.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperQPktDepth.setDescription('Interface shaper queue depth.')
adGenAOSQoSInterfaceShaperQPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperQPktDrops.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperQPktDrops.setDescription('Interface shaper queue drops for this interface.')
adGenAOSQoSInterfaceShaperQPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperQPktSent.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperQPktSent.setDescription('Sent packets for this interface shaper queue.')
adGenAOSQoSInterfaceShaperQPktDelayed = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperQPktDelayed.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperQPktDelayed.setDescription('Delayed packets for this interface shaper queue.')
adGenAOSQoSClassConvHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4), )
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryTable.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryTable.setDescription('Displays QoS class based conversation history.')
adGenAOSQoSClassConvHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapEntryId"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapParentEntryId"))
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryEntry.setDescription('The class based conversation history for a particular sequenced\n            entry of a named QoS map.')
adGenAOSQoSMapParentEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapParentEntryId.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapParentEntryId.setDescription('This is a unique number chosen by the system and the parent\n                QoS map. This will always be zero for conversations in the base\n                interface queue.')
adGenAOSQoSClassConvSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassConvSetId.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassConvSetId.setDescription('This is a unique number used to identify which row in the\n                adGenAOSQoSMapSetTable this conversation is associated.')
adGenAOSQoSHistoryClassConvId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSHistoryClassConvId.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSHistoryClassConvId.setDescription('This is a unique number chosen by the system and is used in\n                conjuntion with adGenAOSQoSMapSetId, adGenAOSQoSMapEntryId, and\n                ifIndex to identify a unique row in the\n                AdGenAOSQoSClassConvHistoryTable.')
adGenAOSQoSClassConvHistoryMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryMatches.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryMatches.setDescription('Number of conversation packets matched on this sub-queue.')
adGenAOSQoSClassConvHistoryDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryDiscards.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryDiscards.setDescription('Number of conversation packets discarded on this sub-queue.')
adGenAOSQoSClassConvHistoryMatchesBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryMatchesBytes.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryMatchesBytes.setDescription('Number of conversation bytes matched on this sub-queue.')
adGenAOSQoSClassConvHistoryDiscardsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryDiscardsBytes.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryDiscardsBytes.setDescription('Number of conversation bytes discarded on this sub-queue.')
adGenAOSQoSClassConvHistoryDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryDepth.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryDepth.setDescription('Current conversation queue depth on this sub-queue.')
adGenAOSQoSClassConvHistoryHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryHighWater.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryHighWater.setDescription('Maximum depth in sub-queue since counter statistics were last\n                cleared.')
adGenAOSQoSClassConvHistoryByteMatchRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryByteMatchRate.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryByteMatchRate.setDescription('Number of bytes matched per second for this sub-queue.')
adGenAOSQoSClassConvHistoryByteDiscardRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryByteDiscardRate.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryByteDiscardRate.setDescription('Number of bytes discarded per second for this sub-queue.')
adGenAOSQoSClassConvHistoryBitMatchRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 12), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryBitMatchRate.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryBitMatchRate.setDescription('Number of bits matched per second for this sub-queue.')
adGenAOSQoSClassConvHistoryBitDiscardRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 13), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryBitDiscardRate.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryBitDiscardRate.setDescription('Number of bits discarded per second for this sub-queue.')
adGenAOSQoSConversationTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5), )
if mibBuilder.loadTexts: adGenAOSQoSConversationTable.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSConversationTable.setDescription('Displays real-time head-of-queue packets in the conversation\n            sub-queue.')
adGenAOSQoSConversationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSConvId"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapConvParentEntryId"))
if mibBuilder.loadTexts: adGenAOSQoSConversationEntry.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSConversationEntry.setDescription('The conversation for a particular sequenced entry of a\n            named QoS map.')
adGenAOSQoSConvId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvId.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSConvId.setDescription('This is a unique number chosen by the system and is used in\n                conjuntion with adGenAOSQoSMapConvParentEntryId, and\n                ifIndex to identify a unique row in the\n                AdGenAOSQoConversationTable.')
adGenAOSQoSMapConvParentEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapConvParentEntryId.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapConvParentEntryId.setDescription('This is a unique number chosen by the system and is used in\n                conjuntion with adGenAOSQoSConvId, and\n                ifIndex to identify a unique row in the\n                AdGenAOSQoConversationTable.')
adGenAOSQoSConvMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvMatches.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSConvMatches.setDescription('Number of conversation packets matched.')
adGenAOSQoSConvDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvDiscards.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSConvDiscards.setDescription('Number of conversation packets discarded.')
adGenAOSQoSConvMatchesBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvMatchesBytes.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSConvMatchesBytes.setDescription('Number of conversation bytes matched.')
adGenAOSQoSConvDiscardsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvDiscardsBytes.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSConvDiscardsBytes.setDescription('Number of conversation bytes discarded.')
adGenAOSQoSConvDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvDepth.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSConvDepth.setDescription('Current conversation queue depth.')
adGenAOSQoSConvHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvHighWater.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSConvHighWater.setDescription('Maximum depth in sub-queue since a clear counters occurred.')
adGenAOSQoSConvWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvWeight.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSConvWeight.setDescription('Debug display of Ratio given to packets of the conversation to\n                 determine relative priority.  The weight is lower for higher\n                 priority values, reflecting quicker response time.')
adGenAOSQoSConvPktLen = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvPktLen.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSConvPktLen.setDescription('Length in bytes of the packet at the head of the conversation\n                sub-queue.')
adGenAOSQoSConvProttype = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unset", 1), ("ip", 2), ("bridging", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvProttype.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSConvProttype.setDescription('Protocol type of the packet at the head of the conversation\n                sub-queue.')
adGenAOSQoSConvSubQType = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bestEffort", 1), ("classBased", 2), ("unclassified", 3), ("priorityUser", 4), ("prioritySystem", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvSubQType.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSConvSubQType.setDescription('What type of queueing has been configured for the conversation\n                 sub-queue given by the conversation index.  It will correspond\n                 to the protocol type configured in the map entry for the map\n                 applied to the interface.')
adGenAOSQoSConvPktHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvPktHeader.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSConvPktHeader.setDescription('Header of the packet at the head of the conversation\n                sub-queue.')
adGenAOSQoSPriorityRateLimiterTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6), )
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterTable.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterTable.setDescription('Displays priority queue rate limiter statistics.\n            This table will be empty if no priority queue classes\n            are configured in the qos map applied to a\n            particular interface.')
adGenAOSQoSPriorityRateLimiterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapEntryId"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterParentEntryId"))
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterEntry.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterEntry.setDescription('The priority queue statistics for a particular sequenced entry of a\n            named QoS map.  An entry will only be present if the action type of\n            the corresponding map entry has priority queueing enabled.')
adGenAOSQoSPriorityRateLimiterParentEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterParentEntryId.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterParentEntryId.setDescription('This is a unique number chosen by the system and the parent\n                QoS map. This will always be zero for conversations in the base\n                interface queue.')
adGenAOSQoSPriorityRateLimiterSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterSetId.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterSetId.setDescription('This is a unique number used to identify which row in the\n                adGenAOSQoSMapSetTable this conversation is associated.')
adGenAOSQoSPriorityRateLimiterCurrBudget = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterCurrBudget.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterCurrBudget.setDescription('Current rate limiter burst budget.')
adGenAOSQoSPriorityRateLimiterMaxBudget = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterMaxBudget.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterMaxBudget.setDescription('Maximum rate limiter burst budget.')
adGenAOSQoSPriorityRateLimiterUpdateTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterUpdateTimestamp.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterUpdateTimestamp.setDescription('Rate limiter budget update timestamp in milliseconds.')
adGenAOSQoSPriorityRateLimiterBudgetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterBudgetRate.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterBudgetRate.setDescription('Rate of byte budget increase.')
adGenAOSQoSPriorityRateLimiterMaxFillTime = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterMaxFillTime.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterMaxFillTime.setDescription('time to accumulate a full budget.')
adGenAOSQoSPriorityRateLimiterMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterMatches.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterMatches.setDescription('Number of packets matched.')
adGenAOSQoSPriorityRateLimiterDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterDrops.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterDrops.setDescription('Number of packets discarded.')
adGenAOSQoSPriorityRateLimiterMatchesBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterMatchesBytes.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterMatchesBytes.setDescription('Number of bytes matched.')
adGenAOSQoSPriorityRateLimiterDropsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterDropsBytes.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterDropsBytes.setDescription('Number of packets discarded.')
adGenAOSQoSPriorityRateLimiterClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterClearCounters.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterClearCounters.setDescription("Clear the rate limiter statistics. This is a\n            write-only variable. A read will always return a value of '1'.")
adGenAOSQoSPriorityRateLimiterByteMatchRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterByteMatchRate.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterByteMatchRate.setDescription('Number of bytes matched per second for this rate limiter.')
adGenAOSQoSPriorityRateLimiterByteDiscardRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterByteDiscardRate.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterByteDiscardRate.setDescription('Number of bytes discarded per second for this rate limiter.')
adGenAOSQoSPriorityRateLimiterBitMatchRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 15), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterBitMatchRate.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterBitMatchRate.setDescription('Number of bits matched per second for this rate limiter.')
adGenAOSQoSPriorityRateLimiterBitDiscardRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 16), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterBitDiscardRate.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterBitDiscardRate.setDescription('Number of bits discarded per second for this rate limiter.')
adGenAOSQoSMapClassifierStatsTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7), )
if mibBuilder.loadTexts: adGenAOSQoSMapClassifierStatsTable.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapClassifierStatsTable.setDescription('Statistics for the class map entry.')
adGenAOSQoSMapClassifierStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapEntryId"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapClassifierParentEntryId"))
if mibBuilder.loadTexts: adGenAOSQoSMapClassifierStatsEntry.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapClassifierStatsEntry.setDescription('Displays the statistical information for the class map entry.\n            Statistics for parent and child maps do not overlap. Also the\n            adGenAOSQoSMapEntryId will always be 65535.  The\n            adGenAOSQoSMapClassifierStatsTable will initially display\n            only default class information.')
adGenAOSQoSMapClassifierParentEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapClassifierParentEntryId.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapClassifierParentEntryId.setDescription('This is a unique number chosen by the system and the parent\n                QoS map. This will always be zero for classes in the base\n                interface queue.')
adGenAOSQoSClassifierMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassifierMatches.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassifierMatches.setDescription('Number of packets matched by this classifier entry.')
adGenAOSQoSClassifierDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassifierDrops.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassifierDrops.setDescription('Number of packets dropped by this classifier entry.')
adGenAOSQoSClassifierMatchBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassifierMatchBytes.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassifierMatchBytes.setDescription('Number of bytes matched by this classifier entry.')
adGenAOSQoSClassifierDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassifierDropBytes.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassifierDropBytes.setDescription('Number of bytes dropped by this classifier entry.')
adGenAOSQoSClassifierPktMatchRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassifierPktMatchRate.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassifierPktMatchRate.setDescription('Number of packets matched per second by this classifier entry.')
adGenAOSQoSClassifierPktDropRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassifierPktDropRate.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassifierPktDropRate.setDescription('Number of packets discarded per second by this classifier\n                entry.')
adGenAOSQoSClassifierByteMatchRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassifierByteMatchRate.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassifierByteMatchRate.setDescription('Number of bytes matched per second by this classifier entry.')
adGenAOSQoSClassifierByteDropRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassifierByteDropRate.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassifierByteDropRate.setDescription('Number of bytes discarded per second by this classifier entry.')
adGenAOSQoSClassifierBitMatchRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1, 10), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassifierBitMatchRate.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassifierBitMatchRate.setDescription('Number of bits matched per second by this classifier entry.')
adGenAOSQoSClassifierBitDropRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1, 11), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassifierBitDropRate.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassifierBitDropRate.setDescription('Number of bits discarded per second by this classifier entry.')
adGenAOSQoSMapMatchTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8), )
if mibBuilder.loadTexts: adGenAOSQoSMapMatchTable.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapMatchTable.setDescription('List of sequenced match entries for a named QoS map.')
adGenAOSQoSMapMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1), ).setIndexNames((0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapSetId"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapEntryId"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapMatchEntryId"))
if mibBuilder.loadTexts: adGenAOSQoSMapMatchEntry.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapMatchEntry.setDescription('Displays match configuration information for each map entry.')
adGenAOSQoSMapMatchEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapMatchEntryId.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapMatchEntryId.setDescription('Unique value used to identify the match map entry.')
adGenAOSQoSMapMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 1), ("acl", 2), ("ipRTP", 3), ("protocol", 4), ("dscp", 5), ("precedence", 6), ("vlan", 7), ("frameRelayDLCI", 8), ("any", 10), ("dscpIpv4", 11), ("dscpIpv6", 12), ("precedenceIpv4", 13), ("precedenceIpv6", 14), ("aclIpv6", 15), ("ipRTPIpv6", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapMatchType.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapMatchType.setDescription('What type of matching has been configured for the map entry.')
adGenAOSQoSMapMatchACL = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapMatchACL.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapMatchACL.setDescription('Name of ACL used for ACL matching.')
adGenAOSQoSMapRTPMatchStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapRTPMatchStartPort.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapRTPMatchStartPort.setDescription('Starting RTP destination port used for RTP packet matching.')
adGenAOSQoSMapRTPMatchEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapRTPMatchEndPort.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapRTPMatchEndPort.setDescription('Ending RTP destination port used for RTP packet matching.')
adGenAOSQoSMapRTPMatchPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("even", 1), ("odd", 2), ("all", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapRTPMatchPorts.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapRTPMatchPorts.setDescription('Defines which ports in the start-end port range are used\n                for matching. By default only even ports are use.')
adGenAOSQoSMapDscpMatchValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapDscpMatchValue.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapDscpMatchValue.setDescription('Configured IP packet DSCP values used for matching.')
adGenAOSQoSMapPrecedenceMatchValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapPrecedenceMatchValue.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapPrecedenceMatchValue.setDescription('Configured precedence values used for matching.')
adGenAOSQoSMapProtocolMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("bridged", 2), ("netBEIU", 3), ("protocolIpv4", 4), ("protocolIpv6", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapProtocolMatchType.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapProtocolMatchType.setDescription('Defines a protocol to use for matching.')
adGenAOSQoSMapVlanMatchValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapVlanMatchValue.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapVlanMatchValue.setDescription('VLAN Id used for matching packets.')
adGenAOSQoSMapFrDlciMatchValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapFrDlciMatchValue.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapFrDlciMatchValue.setDescription('Frame-Relay DLCI used for matching packets.')
adGenAOSQoSMapShaperTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 9), )
if mibBuilder.loadTexts: adGenAOSQoSMapShaperTable.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapShaperTable.setDescription('List of class shapers for a named QoS map entry.')
adGenAOSQoSMapShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapEntryId"))
if mibBuilder.loadTexts: adGenAOSQoSMapShaperEntry.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapShaperEntry.setDescription('Displays class shaper configuration and statistic information for\n            a map entry.')
adGenAOSQoSMapShaperShapeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShaperShapeValue.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapShaperShapeValue.setDescription('Configured shaper value used for shaping traffic.')
adGenAOSQoSMapShaperCurrentBudgetSize = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 9, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShaperCurrentBudgetSize.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapShaperCurrentBudgetSize.setDescription('Current budget size of shaper.')
adGenAOSQoSMapShaperMaxBudgetSize = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShaperMaxBudgetSize.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapShaperMaxBudgetSize.setDescription('Maximum budget size of shaper.')
adGenAOSQoSMapShaperBytesPerTick = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 9, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShaperBytesPerTick.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapShaperBytesPerTick.setDescription('Bytes added to the budget.')
adGenAOSQoSMapShaperTickRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 9, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShaperTickRate.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapShaperTickRate.setDescription('How often, in milliseconds, that bytes are added to the\n                budget.')
adGenAOSQoSMapShaperQueuePktDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShaperQueuePktDepth.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapShaperQueuePktDepth.setDescription('Shaper queue packet depth.')
adGenAOSQoSMapShaperQueuePktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShaperQueuePktDrops.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapShaperQueuePktDrops.setDescription('Count of number of shaper queue packet drops.')
adGenAOSQoSMapShaperQueuePktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShaperQueuePktsSent.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapShaperQueuePktsSent.setDescription('Count of number of shaper queue packets sent.')
adGenAOSQoSMapShaperQueuePktsDelayed = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShaperQueuePktsDelayed.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapShaperQueuePktsDelayed.setDescription('Count of number of shaper queue packets delayed.')
adGenAOSQoSConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8))
adGenAOSQoSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 1))
adGenAOSQoSCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 2))
adGenAOSQoSFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 2, 1)).setObjects(("ADTRAN-AOS-QOS", "adGenAOSQoSMapGroup"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapEntryGroup"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceGroup"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConversationGroup"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvHistoryGroup"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterGroup"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassifierGroup"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapMatchGroup"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShaperGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSQoSFullCompliance = adGenAOSQoSFullCompliance.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSFullCompliance.setDescription('The compliance statement for SNMP entities which implement\n            version 2 of the adGenAOSQoS MIB.')
adGenAOSQoSMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 1, 1)).setObjects(("ADTRAN-AOS-QOS", "adGenAOSQoSMapSetId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapSetName"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapIsChild"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSQoSMapGroup = adGenAOSQoSMapGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapGroup.setDescription('Objects designed to assist in retrieving the statistics of the\n            QoS maps.')
adGenAOSQoSMapEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 1, 2)).setObjects(("ADTRAN-AOS-QOS", "adGenAOSQoSMapEntryId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapSeqNum"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapEntrySetName"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapChildSetName"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapQueuingActionType"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapQueuingBWType"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapQueuingBWValue"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapQueuingBurstValue"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapMatchAll"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapDscpMarkState"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapDscpMarkValue"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapDscpMarkString"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapPrecedenceMarkState"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapPrecedenceMarkValue"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapCosMarkState"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapCosMarkValue"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShapeState"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShapeValue"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShapeBurst"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShapeEthOverhead"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapClearCounters"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapPriorityStrictRateLimiting"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSQoSMapEntryGroup = adGenAOSQoSMapEntryGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapEntryGroup.setDescription('Objects designed to assist in retrieving the statistics of\n            a particular sequenced entry of a named QoS map.')
adGenAOSQoSInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 1, 3)).setObjects(("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceName"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceOutboundMapSetName"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceInboundMapSetName"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceMapState"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTXQType"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTXQSubqPktLimit"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTXQSize"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTXQPktHighWater"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTXQMaxTotal"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTXQDrops"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTXQHdlcRingLimit"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTXQAvailableBW"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTXQConvActive"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTXQConvMaxActive"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTXQConvMaxTotal"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTrafficShapingRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTrafficShapingBurst"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceShaperValue"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceShaperCurrentBudgetSize"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceShaperMaxBudgetSize"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceShaperBytesPerTick"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceShaperTickRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceShaperQPktDepth"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceShaperQPktDrops"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceShaperQPktSent"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceShaperQPktDelayed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSQoSInterfaceGroup = adGenAOSQoSInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSInterfaceGroup.setDescription('Objects designed to assist in retrieving the QoS map information\n            for an interface.')
adGenAOSQoSClassConvHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 1, 4)).setObjects(("ADTRAN-AOS-QOS", "adGenAOSQoSMapParentEntryId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvSetId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSHistoryClassConvId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvHistoryMatches"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvHistoryDiscards"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvHistoryMatchesBytes"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvHistoryDiscardsBytes"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvHistoryDepth"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvHistoryHighWater"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvHistoryByteMatchRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvHistoryByteDiscardRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvHistoryBitMatchRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvHistoryBitDiscardRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSQoSClassConvHistoryGroup = adGenAOSQoSClassConvHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryGroup.setDescription('Objects designed to assist in retrieving the class based\n            conversation history of a particular sequenced entry of a named\n            QoS map.')
adGenAOSQoSConversationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 1, 5)).setObjects(("ADTRAN-AOS-QOS", "adGenAOSQoSConvId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapConvParentEntryId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConvMatches"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConvDiscards"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConvMatchesBytes"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConvDiscardsBytes"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConvDepth"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConvHighWater"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConvWeight"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConvPktLen"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConvProttype"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConvSubQType"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConvPktHeader"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSQoSConversationGroup = adGenAOSQoSConversationGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSConversationGroup.setDescription('Objects designed to assist in retrieving the conversation\n            statistics of a particular sequenced entry of a named QoS map.')
adGenAOSQoSPriorityRateLimiterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 1, 6)).setObjects(("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterParentEntryId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterSetId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterCurrBudget"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterMaxBudget"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterUpdateTimestamp"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterBudgetRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterMaxFillTime"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterMatches"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterDrops"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterMatchesBytes"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterDropsBytes"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterClearCounters"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterByteMatchRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterByteDiscardRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterBitMatchRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterBitDiscardRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSQoSPriorityRateLimiterGroup = adGenAOSQoSPriorityRateLimiterGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterGroup.setDescription('Objects designed to assist in retrieving the rate limiter\n            statistics of a particular sequenced entry of a named QoS map.')
adGenAOSQoSClassifierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 1, 7)).setObjects(("ADTRAN-AOS-QOS", "adGenAOSQoSMapClassifierParentEntryId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassifierMatches"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassifierDrops"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassifierMatchBytes"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassifierDropBytes"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassifierPktMatchRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassifierPktDropRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassifierByteMatchRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassifierByteDropRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassifierBitMatchRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassifierBitDropRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSQoSClassifierGroup = adGenAOSQoSClassifierGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSClassifierGroup.setDescription('Objects designed to assist in retrieving the class statistics.')
adGenAOSQoSMapMatchGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 1, 8)).setObjects(("ADTRAN-AOS-QOS", "adGenAOSQoSMapSetId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapSetName"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapMatchEntryId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapMatchType"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapMatchACL"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapRTPMatchStartPort"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapRTPMatchEndPort"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapRTPMatchPorts"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapDscpMatchValue"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapPrecedenceMatchValue"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapProtocolMatchType"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapVlanMatchValue"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapFrDlciMatchValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSQoSMapMatchGroup = adGenAOSQoSMapMatchGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapMatchGroup.setDescription('Objects designed to assist in retrieving the match configuration of\n             the QoS maps.')
adGenAOSQoSMapShaperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 1, 9)).setObjects(("ADTRAN-AOS-QOS", "adGenAOSQoSMapShaperShapeValue"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShaperCurrentBudgetSize"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShaperMaxBudgetSize"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShaperBytesPerTick"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShaperTickRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShaperQueuePktDepth"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShaperQueuePktDrops"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShaperQueuePktsSent"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShaperQueuePktsDelayed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSQoSMapShaperGroup = adGenAOSQoSMapShaperGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSQoSMapShaperGroup.setDescription('Objects designed to assist in retrieving the shaper configuration\n            and statistics of the QoS map entries.')
mibBuilder.exportSymbols("ADTRAN-AOS-QOS", adGenAOSQoSInterfaceShaperBytesPerTick=adGenAOSQoSInterfaceShaperBytesPerTick, adGenAOSQoSClassConvHistoryDiscardsBytes=adGenAOSQoSClassConvHistoryDiscardsBytes, adGenAOSQoSMapDscpMarkValue=adGenAOSQoSMapDscpMarkValue, adGenAOSQoSPriorityRateLimiterGroup=adGenAOSQoSPriorityRateLimiterGroup, adGenAOSQoSMapShapeValue=adGenAOSQoSMapShapeValue, adGenAOSQoSConvHighWater=adGenAOSQoSConvHighWater, adGenAOSQoSClassConvHistoryMatchesBytes=adGenAOSQoSClassConvHistoryMatchesBytes, adGenAOSQoSConvSubQType=adGenAOSQoSConvSubQType, adGenAOSQoSClassConvHistoryBitDiscardRate=adGenAOSQoSClassConvHistoryBitDiscardRate, adGenAOSQoSMapShaperQueuePktsSent=adGenAOSQoSMapShaperQueuePktsSent, adGenAOSQoSMapClearCounters=adGenAOSQoSMapClearCounters, adGenAOSQoSMapSetTable=adGenAOSQoSMapSetTable, adGenAOSQoSMib=adGenAOSQoSMib, adGenAOSQoSMapShaperQueuePktsDelayed=adGenAOSQoSMapShaperQueuePktsDelayed, adGenAOSQoSMapShaperGroup=adGenAOSQoSMapShaperGroup, adGenAOSQoSInterfaceShaperQPktDepth=adGenAOSQoSInterfaceShaperQPktDepth, adGenAOSQoSClassConvHistoryHighWater=adGenAOSQoSClassConvHistoryHighWater, adGenAOSQoSMapMatchType=adGenAOSQoSMapMatchType, adGenAOSQoSConvWeight=adGenAOSQoSConvWeight, adGenAOSQoSMapShaperCurrentBudgetSize=adGenAOSQoSMapShaperCurrentBudgetSize, adGenAOSQoSMapEntryId=adGenAOSQoSMapEntryId, adGenAOSQoSMapQueuingBWValue=adGenAOSQoSMapQueuingBWValue, adGenAOSQoSMapPrecedenceMarkState=adGenAOSQoSMapPrecedenceMarkState, adGenAOSQoSMapShapeEthOverhead=adGenAOSQoSMapShapeEthOverhead, adGenAOSQoSConvDiscards=adGenAOSQoSConvDiscards, adGenAOSQoSMapClassifierParentEntryId=adGenAOSQoSMapClassifierParentEntryId, adGenAOSQos=adGenAOSQos, adGenAOSQoSInterfaceTXQHdlcRingLimit=adGenAOSQoSInterfaceTXQHdlcRingLimit, adGenAOSQoSInterfaceEntry=adGenAOSQoSInterfaceEntry, adGenAOSQoSMapShaperTable=adGenAOSQoSMapShaperTable, adGenAOSQoSClassConvSetId=adGenAOSQoSClassConvSetId, adGenAOSQoSMapVlanMatchValue=adGenAOSQoSMapVlanMatchValue, adGenAOSQoSClassifierPktMatchRate=adGenAOSQoSClassifierPktMatchRate, adGenAOSQoSConvDepth=adGenAOSQoSConvDepth, adGenAOSQoSClassifierDropBytes=adGenAOSQoSClassifierDropBytes, Unsigned64=Unsigned64, adGenAOSQoSInterfaceTXQSubqPktLimit=adGenAOSQoSInterfaceTXQSubqPktLimit, adGenAOSQoSMapMatchAll=adGenAOSQoSMapMatchAll, adGenAOSQoSConvPktLen=adGenAOSQoSConvPktLen, adGenAOSQoSConvId=adGenAOSQoSConvId, adGenAOSQoSPriorityRateLimiterBudgetRate=adGenAOSQoSPriorityRateLimiterBudgetRate, adGenAOSQoSPriorityRateLimiterSetId=adGenAOSQoSPriorityRateLimiterSetId, PYSNMP_MODULE_ID=adGenAOSQoSMib, adGenAOSQoSMapQueuingBWType=adGenAOSQoSMapQueuingBWType, adGenAOSQoSConversationTable=adGenAOSQoSConversationTable, adGenAOSQoSClassConvHistoryDiscards=adGenAOSQoSClassConvHistoryDiscards, adGenAOSQoSPriorityRateLimiterClearCounters=adGenAOSQoSPriorityRateLimiterClearCounters, adGenAOSQoSMapParentEntryId=adGenAOSQoSMapParentEntryId, adGenAOSQoSClassConvHistoryByteDiscardRate=adGenAOSQoSClassConvHistoryByteDiscardRate, adGenAOSQoSInterfaceTXQPktHighWater=adGenAOSQoSInterfaceTXQPktHighWater, adGenAOSQoSInterfaceShaperMaxBudgetSize=adGenAOSQoSInterfaceShaperMaxBudgetSize, adGenAOSQoSInterfaceShaperCurrentBudgetSize=adGenAOSQoSInterfaceShaperCurrentBudgetSize, adGenAOSQoSMapFrDlciMatchValue=adGenAOSQoSMapFrDlciMatchValue, adGenAOSQoSMapMatchEntry=adGenAOSQoSMapMatchEntry, adGenAOSQoSMapSetEntry=adGenAOSQoSMapSetEntry, adGenAOSQoSMapEntriesTable=adGenAOSQoSMapEntriesTable, adGenAOSQoSInterfaceOutboundMapSetName=adGenAOSQoSInterfaceOutboundMapSetName, adGenAOSQoSMapQueuingBurstValue=adGenAOSQoSMapQueuingBurstValue, adGenAOSQoSClassConvHistoryByteMatchRate=adGenAOSQoSClassConvHistoryByteMatchRate, adGenAOSQoSClassConvHistoryBitMatchRate=adGenAOSQoSClassConvHistoryBitMatchRate, adGenAOSQoSMapConvParentEntryId=adGenAOSQoSMapConvParentEntryId, adGenAOSQoSPriorityRateLimiterMaxBudget=adGenAOSQoSPriorityRateLimiterMaxBudget, adGenAOSQoSInterfaceTXQDrops=adGenAOSQoSInterfaceTXQDrops, adGenAOSQoSClassifierDrops=adGenAOSQoSClassifierDrops, adGenAOSQoSFullCompliance=adGenAOSQoSFullCompliance, adGenAOSQoSClassConvHistoryEntry=adGenAOSQoSClassConvHistoryEntry, adGenAOSQoSInterfaceName=adGenAOSQoSInterfaceName, adGenAOSQoSMapEntriesEntry=adGenAOSQoSMapEntriesEntry, adGenAOSQoSInterfaceTrafficShapingRate=adGenAOSQoSInterfaceTrafficShapingRate, adGenAOSQoSMapChildSetName=adGenAOSQoSMapChildSetName, adGenAOSQoSConvDiscardsBytes=adGenAOSQoSConvDiscardsBytes, adGenAOSQoSPriorityRateLimiterMatches=adGenAOSQoSPriorityRateLimiterMatches, adGenAOSQoSMapProtocolMatchType=adGenAOSQoSMapProtocolMatchType, adGenAOSQoSInterfaceTXQConvActive=adGenAOSQoSInterfaceTXQConvActive, adGenAOSQoSClassifierBitMatchRate=adGenAOSQoSClassifierBitMatchRate, adGenAOSQoSGroup=adGenAOSQoSGroup, adGenAOSQoSMapQueuingActionType=adGenAOSQoSMapQueuingActionType, adGenAOSQoSConformance=adGenAOSQoSConformance, adGenAOSQoSInterfaceTXQMaxTotal=adGenAOSQoSInterfaceTXQMaxTotal, adGenAOSQoSPriorityRateLimiterTable=adGenAOSQoSPriorityRateLimiterTable, adGenAOSQoSMapShaperQueuePktDepth=adGenAOSQoSMapShaperQueuePktDepth, adGenAOSQoSPriorityRateLimiterCurrBudget=adGenAOSQoSPriorityRateLimiterCurrBudget, adGenAOSQoSMapRTPMatchPorts=adGenAOSQoSMapRTPMatchPorts, adGenAOSQoSMapShapeState=adGenAOSQoSMapShapeState, adGenAOSQoSMapShaperMaxBudgetSize=adGenAOSQoSMapShaperMaxBudgetSize, adGenAOSQoSHistoryClassConvId=adGenAOSQoSHistoryClassConvId, adGenAOSQoSPriorityRateLimiterByteMatchRate=adGenAOSQoSPriorityRateLimiterByteMatchRate, adGenAOSQoSConvMatches=adGenAOSQoSConvMatches, adGenAOSQoSPriorityRateLimiterBitMatchRate=adGenAOSQoSPriorityRateLimiterBitMatchRate, adGenAOSQoSPriorityRateLimiterUpdateTimestamp=adGenAOSQoSPriorityRateLimiterUpdateTimestamp, adGenAOSQoSMapClassifierStatsTable=adGenAOSQoSMapClassifierStatsTable, adGenAOSQoSInterfaceTXQSize=adGenAOSQoSInterfaceTXQSize, adGenAOSQoSMapShaperTickRate=adGenAOSQoSMapShaperTickRate, adGenAOSQoSClassifierMatches=adGenAOSQoSClassifierMatches, adGenAOSQoSMapMatchEntryId=adGenAOSQoSMapMatchEntryId, adGenAOSQoSMapRTPMatchEndPort=adGenAOSQoSMapRTPMatchEndPort, adGenAOSQoSMapMatchGroup=adGenAOSQoSMapMatchGroup, adGenAOSQoSInterfaceShaperQPktSent=adGenAOSQoSInterfaceShaperQPktSent, adGenAOSQoSInterfaceTXQAvailableBW=adGenAOSQoSInterfaceTXQAvailableBW, adGenAOSQoSInterfaceTXQConvMaxActive=adGenAOSQoSInterfaceTXQConvMaxActive, adGenAOSQoSClassifierByteDropRate=adGenAOSQoSClassifierByteDropRate, adGenAOSQoSClassifierGroup=adGenAOSQoSClassifierGroup, adGenAOSQoSClassifierBitDropRate=adGenAOSQoSClassifierBitDropRate, adGenAOSQoSConversationEntry=adGenAOSQoSConversationEntry, adGenAOSQoSMapShapeBurst=adGenAOSQoSMapShapeBurst, adGenAOSQoSInterfaceMapState=adGenAOSQoSInterfaceMapState, adGenAOSQoSInterfaceShaperValue=adGenAOSQoSInterfaceShaperValue, adGenAOSQoSMapSetId=adGenAOSQoSMapSetId, adGenAOSQoSClassConvHistoryTable=adGenAOSQoSClassConvHistoryTable, adGenAOSQoSInterfaceTable=adGenAOSQoSInterfaceTable, adGenAOSQoSMapDscpMarkState=adGenAOSQoSMapDscpMarkState, adGenAOSQoSInterfaceTrafficShapingBurst=adGenAOSQoSInterfaceTrafficShapingBurst, adGenAOSQoSConvPktHeader=adGenAOSQoSConvPktHeader, adGenAOSQoSConvProttype=adGenAOSQoSConvProttype, adGenAOSQoSMapRTPMatchStartPort=adGenAOSQoSMapRTPMatchStartPort, adGenAOSQoSClassConvHistoryMatches=adGenAOSQoSClassConvHistoryMatches, adGenAOSQoSCompliances=adGenAOSQoSCompliances, adGenAOSQoSPriorityRateLimiterDropsBytes=adGenAOSQoSPriorityRateLimiterDropsBytes, adGenAOSQoSMapClassifierStatsEntry=adGenAOSQoSMapClassifierStatsEntry, adGenAOSQoSInterfaceShaperTickRate=adGenAOSQoSInterfaceShaperTickRate, adGenAOSQoSInterfaceTXQConvMaxTotal=adGenAOSQoSInterfaceTXQConvMaxTotal, adGenAOSQoSInterfaceShaperQPktDelayed=adGenAOSQoSInterfaceShaperQPktDelayed, adGenAOSQoSMapPrecedenceMarkValue=adGenAOSQoSMapPrecedenceMarkValue, adGenAOSQoSInterfaceShaperQPktDrops=adGenAOSQoSInterfaceShaperQPktDrops, adGenAOSQoSMapCosMarkValue=adGenAOSQoSMapCosMarkValue, adGenAOSQoSConvMatchesBytes=adGenAOSQoSConvMatchesBytes, adGenAOSQoSMapMatchTable=adGenAOSQoSMapMatchTable, adGenAOSQoSMapGroup=adGenAOSQoSMapGroup, adGenAOSQoSClassifierMatchBytes=adGenAOSQoSClassifierMatchBytes, adGenAOSQoSPriorityRateLimiterParentEntryId=adGenAOSQoSPriorityRateLimiterParentEntryId, adGenAOSQoSPriorityRateLimiterBitDiscardRate=adGenAOSQoSPriorityRateLimiterBitDiscardRate, adGenAOSQoSConversationGroup=adGenAOSQoSConversationGroup, adGenAOSQoSMapShaperShapeValue=adGenAOSQoSMapShaperShapeValue, adGenAOSQoSMapCosMarkState=adGenAOSQoSMapCosMarkState, adGenAOSQoSMapPriorityStrictRateLimiting=adGenAOSQoSMapPriorityStrictRateLimiting, adGenAOSQoSMapMatchACL=adGenAOSQoSMapMatchACL, adGenAOSQoSMapIsChild=adGenAOSQoSMapIsChild, adGenAOSQoSMapSetName=adGenAOSQoSMapSetName, adGenAOSQoSMapShaperQueuePktDrops=adGenAOSQoSMapShaperQueuePktDrops, adGenAOSQoSPriorityRateLimiterEntry=adGenAOSQoSPriorityRateLimiterEntry, adGenAOSQoSMapDscpMarkString=adGenAOSQoSMapDscpMarkString, adGenAOSQoSMapSeqNum=adGenAOSQoSMapSeqNum, adGenAOSQoSMapDscpMatchValue=adGenAOSQoSMapDscpMatchValue, adGenAOSQoSMapPrecedenceMatchValue=adGenAOSQoSMapPrecedenceMatchValue, adGenAOSQoSClassConvHistoryDepth=adGenAOSQoSClassConvHistoryDepth, adGenAOSQoSClassifierPktDropRate=adGenAOSQoSClassifierPktDropRate, adGenAOSQoSMapEntrySetName=adGenAOSQoSMapEntrySetName, adGenAOSQoSInterfaceGroup=adGenAOSQoSInterfaceGroup, adGenAOSQoSPriorityRateLimiterByteDiscardRate=adGenAOSQoSPriorityRateLimiterByteDiscardRate, adGenAOSQoSMapShaperEntry=adGenAOSQoSMapShaperEntry, adGenAOSQoSPriorityRateLimiterDrops=adGenAOSQoSPriorityRateLimiterDrops, adGenAOSQoSPriorityRateLimiterMaxFillTime=adGenAOSQoSPriorityRateLimiterMaxFillTime, adGenAOSQoSInterfaceTXQType=adGenAOSQoSInterfaceTXQType, adGenAOSQoSMapEntryGroup=adGenAOSQoSMapEntryGroup, adGenAOSQoSClassifierByteMatchRate=adGenAOSQoSClassifierByteMatchRate, adGenAOSQoSPriorityRateLimiterMatchesBytes=adGenAOSQoSPriorityRateLimiterMatchesBytes, adGenAOSQoSMapShaperBytesPerTick=adGenAOSQoSMapShaperBytesPerTick, adGenAOSQoSClassConvHistoryGroup=adGenAOSQoSClassConvHistoryGroup, adGenAOSQoSInterfaceInboundMapSetName=adGenAOSQoSInterfaceInboundMapSetName)
