#
# PySNMP MIB module EQLAPPLIANCE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/equallogic/EQLAPPLIANCE-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 10:45:46 2024
# On host fv-az1251-584 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
eqlGroupId, UTFString = mibBuilder.importSymbols("EQLGROUP-MIB", "eqlGroupId", "UTFString")
eqlMemberIndex, = mibBuilder.importSymbols("EQLMEMBER-MIB", "eqlMemberIndex")
eqliscsiVolumeEntry, eqliscsiVolumeTargetIscsiName = mibBuilder.importSymbols("EQLVOLUME-MIB", "eqliscsiVolumeEntry", "eqliscsiVolumeTargetIscsiName")
equalLogic, = mibBuilder.importSymbols("EQUALLOGIC-SMI", "equalLogic")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter32, ObjectIdentity, Counter64, Bits, MibIdentifier, ModuleIdentity, Gauge32, Integer32, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter32", "ObjectIdentity", "Counter64", "Bits", "MibIdentifier", "ModuleIdentity", "Gauge32", "Integer32", "iso", "TimeTicks")
TextualConvention, DateAndTime, RowStatus, RowPointer, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "RowStatus", "RowPointer", "DisplayString", "TruthValue")
eqlApplianceModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 12740, 17))
eqlApplianceModule.setRevisions(('2013-02-21 08:00', '2012-03-05 10:00', '2009-07-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: eqlApplianceModule.setRevisionsDescriptions(('New eqlApplianceDnsServerTable, eqlApplianceDnsSuffixTable', 'New eqlApplianceMultiStateOpsState rename-cluster', 'Initial revision',))
if mibBuilder.loadTexts: eqlApplianceModule.setLastUpdated('201503171528Z')
if mibBuilder.loadTexts: eqlApplianceModule.setOrganization('EqualLogic Inc.')
if mibBuilder.loadTexts: eqlApplianceModule.setContactInfo('Contact: Customer Support\n         Postal:  Dell Inc\n                  300 Innovative Way, Suite 301, Nashua, NH 03062\n         Tel:     +1 603-579-9762\n         E-mail:  US-NH-CS-TechnicalSupport@dell.com\n         WEB:     www.equallogic.com')
if mibBuilder.loadTexts: eqlApplianceModule.setDescription('Appliances information.\n\n        Copyright (c) 2004-2013 by Dell Inc. \n        \n        All rights reserved.  This software may not be copied, disclosed, \n        transferred, or used except in accordance with a license granted \n        by Dell, Inc.  This software embodies proprietary information \n        and trade secrets of Dell Inc. \n        ')
eqlApplianceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 17, 1))
eqlApplianceTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1), )
if mibBuilder.loadTexts: eqlApplianceTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceTable.setDescription('EqualLogic-Persistent Appliance Table.\n                     This table contains a list of appliances that this group is managing.\n                     TimeoutAll:60')
eqlApplianceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlApplianceEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceEntry.setDescription('An entry (row) containing appliance information.')
eqlApplianceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlApplianceIndex.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceIndex.setDescription('This field specifies a unique index for identifing a Appliance.')
eqlApplianceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceRowStatus.setDescription('This field is used indicate the status of this entry.')
eqlApplianceName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceName.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceName.setDescription('EQL-SECONDARY-KEY\n                     This field specifies a user friendly name for an appliance. Allowed characters are alphanumeric and underscore for spartan.')
eqlApplianceType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nas", 1), ("blade-chassis", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceType.setDescription('')
eqlApplianceState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018))).clone(namedValues=NamedValues(("unconfigured", 0), ("node-setup", 1000), ("internal-network", 1001), ("san-network", 1002), ("client-network", 1003), ("configure-gateway", 1004), ("start-nodes-validation", 1005), ("nodes-validation-inprogress", 1006), ("make-cluster", 1007), ("send-eql-group-ip", 1008), ("create-volume-acls", 1009), ("start-format", 1010), ("format-in-progress", 1011), ("start-system", 1012), ("start-system-in-progress", 1013), ("configured", 1014), ("cluster-name", 1015), ("start-nas-appliance-create", 1016), ("nas-appliance-create-in-progress", 1017), ("start-volume-discovery", 1018))).clone('unconfigured')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceState.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceState.setDescription('')
eqlApplianceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceDescription.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceDescription.setDescription('')
eqlApplianceMgmtAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 7), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceMgmtAddressType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMgmtAddressType.setDescription('')
eqlApplianceMgmtAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceMgmtAddress.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMgmtAddress.setDescription('')
eqlApplianceMgmtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 9), Unsigned32().clone(3004)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceMgmtPort.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMgmtPort.setDescription('')
eqlApplianceMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceMajorVersion.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMajorVersion.setDescription('')
eqlApplianceMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceMinorVersion.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMinorVersion.setDescription('')
eqlApplianceMaintVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceMaintVersion.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMaintVersion.setDescription('')
eqlApplianceVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceVendorId.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceVendorId.setDescription('')
eqlApplianceSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceSharedSecret.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceSharedSecret.setDescription('This field is used for shared secret authentication.')
eqlApplianceUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 15), UTFString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceUserName.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUserName.setDescription('This field is used for authentication.')
eqlApplianceNumberOfNodes = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 16), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNumberOfNodes.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNumberOfNodes.setDescription('Number of nodes in this appliance.')
eqlApplianceUniqueID = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceUniqueID.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUniqueID.setDescription('Unique ID used by this appliance.')
eqlApplianceConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceConfigStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceConfigStatus.setDescription('status of this appliance configuration')
eqlApplianceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("start", 1), ("retry", 2), ("abort", 3), ("continue", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceAction.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceAction.setDescription('Action on this appliance.')
eqlApplianceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("maintenance", 2), ("delete", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceAdminStatus.setDescription('Admin status used to manage this appliance.')
eqlApplianceGatewayAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 21), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceGatewayAddrType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceGatewayAddrType.setDescription('This field specifies the type of address (v4/v6) of the default gateway address for this appliance.')
eqlApplianceGatewayAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 22), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceGatewayAddr.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceGatewayAddr.setDescription('This field contains the address specification of the default gateway address for this appliance.')
eqlApplianceLastScheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 23), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceLastScheduleIndex.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLastScheduleIndex.setDescription('Last used snapshot schedule index. Every time a new schedule is created for the appliance, the new idex is the last used index value from this field plus one, and the field itself is updated with  the new value. This way the schedule index will never repeat (reused) for the appliance.')
eqlApplianceMPV = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 24), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceMPV.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMPV.setDescription('Management Protocol Version (MPV) of this appliance.')
eqlApplianceEnableFTP = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlApplianceEnableFTP.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceEnableFTP.setDescription('This field specifies whether or not to allow ftp access to the appliance.\n                     The default is disabled.')
eqlApplianceDesiredServiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("maintenance", 1))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlApplianceDesiredServiceMode.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceDesiredServiceMode.setDescription('Desired service mode of the appliance.')
eqlApplianceServiceModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("maintenance", 1), ("transition-to-maint", 2), ("transition-to-normal", 3))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceServiceModeStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceServiceModeStatus.setDescription('This field specifies the service mode status of the appliance.')
eqlApplianceRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceRequestId.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceRequestId.setDescription('This field represents the operation request identifier.')
eqlApplianceUniqueIDTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 2), )
if mibBuilder.loadTexts: eqlApplianceUniqueIDTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUniqueIDTable.setDescription('EqualLogic-Dynamic Unique ID table.\n                     This table is used to retrieve Unique ID values when creating new objects.\n                     TimeoutAll:60')
eqlApplianceUniqueIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 2, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceUniqueIDType"))
if mibBuilder.loadTexts: eqlApplianceUniqueIDEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUniqueIDEntry.setDescription('An entry (row) containing unique ID information.')
eqlApplianceUniqueIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("fsid", 1), ("userid", 2), ("nfsexportname", 3), ("partnershipid", 4), ("replicationid", 5))))
if mibBuilder.loadTexts: eqlApplianceUniqueIDType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUniqueIDType.setDescription('')
eqlApplianceUniqueIDValueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceUniqueIDValueLen.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUniqueIDValueLen.setDescription('Length of the value represented by column eqlApplianceUniqueIDValue')
eqlApplianceUniqueIDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceUniqueIDValue.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUniqueIDValue.setDescription('Value of eqlApplianceUniqueIDType represented in network byte order.')
eqlApplianceUnInitNodesTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 3), )
if mibBuilder.loadTexts: eqlApplianceUnInitNodesTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUnInitNodesTable.setDescription('EqualLogic-Persistent Uninitialized Nodes Table.\n                     This table contains information relating to uninitialized appliances\n\t\t     discovered during the device discovery process.\n                     TimeoutAll:60')
eqlApplianceUnInitNodesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 3, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceUnInitNodeProductType"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceUnInitNodeServiceTag"))
if mibBuilder.loadTexts: eqlApplianceUnInitNodesEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUnInitNodesEntry.setDescription('An entry (row) containing uninitialized appliance information.')
eqlApplianceUnInitNodeProductType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("nas", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceUnInitNodeProductType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUnInitNodeProductType.setDescription('This field indicates the type of device that has been discovered')
eqlApplianceUnInitNodeServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceUnInitNodeServiceTag.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUnInitNodeServiceTag.setDescription('This field indicates the service tag of the discovered device')
eqlApplianceUnInitNodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discover", 1), ("found", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceUnInitNodeState.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUnInitNodeState.setDescription('This field indicates the current state of the device (discover or found)')
eqlApplianceUnInitNodeModel = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceUnInitNodeModel.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUnInitNodeModel.setDescription('This field indicates the model of the discovered device.')
eqlApplianceUnInitNodeVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceUnInitNodeVendor.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUnInitNodeVendor.setDescription('This field indicates the vendor of the discovered device')
eqlApplianceUnInitNodeLinkLocalIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 3, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceUnInitNodeLinkLocalIPType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUnInitNodeLinkLocalIPType.setDescription('This field indicates the address type (v4/v6) of the link-local IP associated with the discovered device')
eqlApplianceUnInitNodeLinkLocalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 3, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceUnInitNodeLinkLocalIP.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUnInitNodeLinkLocalIP.setDescription('This field indicates the link-local IP of the device, as returned during the device-discover process')
eqlApplianceUnInitNodeMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceUnInitNodeMajorVersion.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUnInitNodeMajorVersion.setDescription('This field indicates the major version of the device discovered')
eqlApplianceUnInitNodeMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceUnInitNodeMinorVersion.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUnInitNodeMinorVersion.setDescription('This field indicates the minor version of the device discovered')
eqlApplianceUnInitNodeMaintVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceUnInitNodeMaintVersion.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUnInitNodeMaintVersion.setDescription('This field indicates the maintenance version of the device discovered')
eqlApplianceUnInitNodeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 3, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceUnInitNodeRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUnInitNodeRowStatus.setDescription('This is used only for support purpose to delete rows in this table.')
eqlApplianceUnInitNodeClusterMPV = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceUnInitNodeClusterMPV.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUnInitNodeClusterMPV.setDescription('The Management Protocol Version (MPV) the Appliance Cluster.')
eqlApplianceUnInitNodeChassisTag = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('-')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceUnInitNodeChassisTag.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUnInitNodeChassisTag.setDescription('This field indicates the service tag of the discovered device chassis')
eqlApplianceNodeTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4), )
if mibBuilder.loadTexts: eqlApplianceNodeTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeTable.setDescription('EqualLogic-Persistent Appliance Node Table\n                     This table is used to store information about Appliance nodes.\n                     TimeoutAll:60')
eqlApplianceNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNodeIndex"))
if mibBuilder.loadTexts: eqlApplianceNodeEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeEntry.setDescription('An entry (row) containing an node-specific configuration.')
eqlApplianceNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlApplianceNodeIndex.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeIndex.setDescription('A unique identifier for each configured node within an appliance')
eqlApplianceNodeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNodeRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeRowStatus.setDescription('This field is used indicate the status of this entry.')
eqlApplianceNodeProductType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fs7500", 1), ("fs7600", 2), ("fs7610", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceNodeProductType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeProductType.setDescription('This field indicates the type of device that has been discovered')
eqlApplianceNodeServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNodeServiceTag.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeServiceTag.setDescription('This field indicates the service tag of the discovered device')
eqlApplianceNodeModel = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceNodeModel.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeModel.setDescription('This field indicates the model of the discovered device.')
eqlApplianceNodeVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceNodeVendor.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeVendor.setDescription('This field indicates the vendor of the discovered device')
eqlApplianceNodeLinkLocalIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceNodeLinkLocalIPType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeLinkLocalIPType.setDescription('This field indicates the address type (v4/v6) of the link-local IP associated with the discovered device')
eqlApplianceNodeLinkLocalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceNodeLinkLocalIP.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeLinkLocalIP.setDescription('This field indicates the link-local IP of the device, as returned during the device-discover process')
eqlApplianceNodeMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceNodeMajorVersion.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeMajorVersion.setDescription('This field indicates the major version of the device discovered')
eqlApplianceNodeMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceNodeMinorVersion.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeMinorVersion.setDescription('This field indicates the minor version of the device discovered')
eqlApplianceNodeMaintVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceNodeMaintVersion.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeMaintVersion.setDescription('This field indicates the maintenance version of the device discovered')
eqlApplianceNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNodeName.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeName.setDescription('This field specifies the name used to manage this node.')
eqlApplianceNodePeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNodePeerIndex.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodePeerIndex.setDescription('This field specifies the NodeIndex value of peer node if any.')
eqlApplianceNodeConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1001, 1002, 1003, 1004, 1005, 1006, 1007))).clone(namedValues=NamedValues(("unconfigured", 0), ("node-setup-complete", 1001), ("internal-network-complete", 1002), ("san-network-complete", 1003), ("client-network-complete", 1004), ("gateway-config-complete", 1005), ("configured", 1006), ("detached", 1007)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNodeConfigState.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeConfigState.setDescription('This field specifies what configuration state the node is in.')
eqlApplianceNodeConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNodeConfigStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeConfigStatus.setDescription('Status of current config state.If not zero, then an error occured in configuration')
eqlApplianceNodeGatewayAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1, 16), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNodeGatewayAddrType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeGatewayAddrType.setDescription('This field specifies the type of address (v4/v6) of the default gateway address for this node')
eqlApplianceNodeGatewayAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1, 17), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNodeGatewayAddr.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeGatewayAddr.setDescription('This field contains the address specification of the default gateway address for this node.')
eqlApplianceNodeInitiatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 223))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNodeInitiatorName.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeInitiatorName.setDescription('The iSCSI name of this node.')
eqlApplianceNodeAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("on", 0), ("detach", 1), ("attach", 2), ("reset", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNodeAdminStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeAdminStatus.setDescription('Start node detach operation or attach operation.')
eqlApplianceNodeChassisTag = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNodeChassisTag.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeChassisTag.setDescription('This field indicates the service tag of the discovered device chasis')
eqlApplianceNodeChassisName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNodeChassisName.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeChassisName.setDescription('This field indicates the configured chassis name the discovered device chasis')
eqlApplianceNodeOpsRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 4, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceNodeOpsRequestId.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeOpsRequestId.setDescription('This field represents the the operation request identifier.')
eqlApplianceNetworksTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 5), )
if mibBuilder.loadTexts: eqlApplianceNetworksTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNetworksTable.setDescription('EqualLogic-Dynamic(semi) Appliance Networks Table \n                     EqualLogic-DoNotGroupRequest \n                     This table is used to retrieve network configuration information for an appliance.\n                     TimeoutAll:60')
eqlApplianceNetworksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 5, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNetworkType"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNetworkID"))
if mibBuilder.loadTexts: eqlApplianceNetworksEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNetworksEntry.setDescription('An entry (row) containing a description of network configurations of an appliance.')
eqlApplianceNetworkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNetworkRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNetworkRowStatus.setDescription('This field is used indicate the status of this entry.')
eqlApplianceNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("internal", 1), ("san", 2), ("client", 3), ("backplane", 4))))
if mibBuilder.loadTexts: eqlApplianceNetworkType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNetworkType.setDescription('This field indicates the type of network being described by this entry')
eqlApplianceNetworkID = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 5, 1, 3), Unsigned32())
if mibBuilder.loadTexts: eqlApplianceNetworkID.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNetworkID.setDescription('A unique identifier for each configured network within a network type and appliance')
eqlApplianceNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNetworkName.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNetworkName.setDescription('This field specifies a user friendly name for a network.')
eqlApplianceNetworkBlockIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 5, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNetworkBlockIPAddressType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNetworkBlockIPAddressType.setDescription('This field specifies the type of address (v4/v6) of the block IP address')
eqlApplianceNetworkBlockIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 5, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNetworkBlockIPAddress.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNetworkBlockIPAddress.setDescription('This field contains the address specification for the block of IPs describing this network')
eqlApplianceNetworkBlockNetmaskAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 5, 1, 7), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNetworkBlockNetmaskAddrType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNetworkBlockNetmaskAddrType.setDescription('This field specifies the type of address (v4/v6) of the netmask address for this network')
eqlApplianceNetworkBlockNetmaskAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 5, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNetworkBlockNetmaskAddr.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNetworkBlockNetmaskAddr.setDescription('This field contains the address specification of the netmask describing this network')
eqlApplianceNetworkVLANTag = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 5, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNetworkVLANTag.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNetworkVLANTag.setDescription('This field specifies the VLAN tag applicable to this network.')
eqlApplianceNetworkAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("creating", 1), ("modifying", 2), ("done", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNetworkAdminState.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNetworkAdminState.setDescription('This field indicates the current administrative state of this network entry')
eqlApplianceNetworkMTUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 5, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNetworkMTUSize.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNetworkMTUSize.setDescription('This field indicates the MTU size supported by this network.')
eqlApplianceNetworkBondingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("alb", 0), ("lacp", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNetworkBondingMode.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNetworkBondingMode.setDescription('This field indicates the bonding mode supported by this network. \n                     For spartan, only client network supports modifying the bonding mode.Default mode is ALB (adaptive load balancing) for client network. User can change this mode to LACP(802.3 ad) later.')
eqlApplianceIPTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 6), )
if mibBuilder.loadTexts: eqlApplianceIPTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceIPTable.setDescription('EqualLogic-Dynamic(semi) Appliance IP Table\n                     This table is used to retrieve appliance-wide IP addresses\n                     TimeoutAll:60')
eqlApplianceIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 6, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNetworkType"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNetworkID"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceIPAddressType"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceIPAddress"))
if mibBuilder.loadTexts: eqlApplianceIPEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceIPEntry.setDescription('An entry (row) containing an appliance-wide IP address configured for an appliance network.')
eqlApplianceIPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 6, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceIPRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceIPRowStatus.setDescription('This field is used indicate the status of this entry.')
eqlApplianceIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 6, 1, 2), InetAddressType())
if mibBuilder.loadTexts: eqlApplianceIPAddressType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceIPAddressType.setDescription('This field specifies the type of address (v4/v6) of this IP address entry')
eqlApplianceIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 6, 1, 3), InetAddress())
if mibBuilder.loadTexts: eqlApplianceIPAddress.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceIPAddress.setDescription('This field contains the address specification of this IP address entry')
eqlApplianceNodeIPTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 7), )
if mibBuilder.loadTexts: eqlApplianceNodeIPTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeIPTable.setDescription('EqualLogic-Dynamic(semi) Appliance Node IP Table\n                     This table is used to retrieve node-specific IP addresses configured with a specific appliance.\n                     TimeoutAll:60')
eqlApplianceNodeIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 7, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNetworkType"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNetworkID"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNodeIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNodeIPAddressType"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNodeIPAddress"))
if mibBuilder.loadTexts: eqlApplianceNodeIPEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeIPEntry.setDescription('An entry (row) containing an node-specific IP address configured for an appliance network.')
eqlApplianceNodeIPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 7, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNodeIPRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeIPRowStatus.setDescription('This field is used indicate the status of this entry.')
eqlApplianceNodeIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 7, 1, 2), InetAddressType())
if mibBuilder.loadTexts: eqlApplianceNodeIPAddressType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeIPAddressType.setDescription('This field specifies the type of address (v4/v6) of this node-specific IP address entry')
eqlApplianceNodeIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 7, 1, 3), InetAddress())
if mibBuilder.loadTexts: eqlApplianceNodeIPAddress.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeIPAddress.setDescription('This field contains the address specification of this node-specific IP address entry')
eqlApplianceOpsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 8), )
if mibBuilder.loadTexts: eqlApplianceOpsTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOpsTable.setDescription('EqualLogic-Dynamic(semi) Appliance operations table\n                     This table is used to manage operations on appliances. \n                     For example: In Spartan, operations include validation,format etc.\n                     TimeoutAll:60')
eqlApplianceOpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 8, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceOpsType"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceOpsIndex"))
if mibBuilder.loadTexts: eqlApplianceOpsEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOpsEntry.setDescription('An entry (row) containing an operation.')
eqlApplianceOpsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlApplianceOpsIndex.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOpsIndex.setDescription('This field specifies a unique index for identifing an operation.')
eqlApplianceOpsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceOpsRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOpsRowStatus.setDescription('This field is used to manage operations.')
eqlApplianceOpsType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("none", 0), ("validation", 1), ("format", 2), ("start", 3), ("stop", 4), ("attach", 5), ("expand", 6), ("incrementalformat", 7), ("detach", 8), ("add-pair", 9), ("delete", 10), ("create-nas-appliance", 11), ("discover", 12), ("add-nas-appliance", 13), ("join-nas-appliance", 14), ("diagnostics", 15), ("nas-cluster-update", 16), ("restore-config", 17), ("service-mode-change", 18), ("container-cfg-modify", 19))))
if mibBuilder.loadTexts: eqlApplianceOpsType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOpsType.setDescription('This field specifies the type of operation.')
eqlApplianceOpsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceOpsStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOpsStatus.setDescription('This field represents the current status of this operation. In case of errors, this value will represent the error number.')
eqlApplianceOpsPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 8, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceOpsPercentage.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOpsPercentage.setDescription('This field represents the % of completion for this operation.')
eqlApplianceOpsRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceOpsRequestId.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOpsRequestId.setDescription('This field represents the operation request identifier.')
eqlVolumeApplianceTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 9), )
if mibBuilder.loadTexts: eqlVolumeApplianceTable.setStatus('current')
if mibBuilder.loadTexts: eqlVolumeApplianceTable.setDescription('EqualLogic-Persistent Appliance Volumes table\n                     This table is used to store what volumes are accessed by which appliance.\n                     TimeoutAll:60')
eqlVolumeApplianceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 9, 1), )
eqliscsiVolumeEntry.registerAugmentions(("EQLAPPLIANCE-MIB", "eqlVolumeApplianceEntry"))
eqlVolumeApplianceEntry.setIndexNames(*eqliscsiVolumeEntry.getIndexNames())
if mibBuilder.loadTexts: eqlVolumeApplianceEntry.setStatus('current')
if mibBuilder.loadTexts: eqlVolumeApplianceEntry.setDescription('An entry (row) containing the appliance information.')
eqlVolumeApplianceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 9, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolumeApplianceRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlVolumeApplianceRowStatus.setDescription('This field is used to manage the rows in this table.')
eqlVolumeApplianceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 9, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolumeApplianceIndex.setStatus('current')
if mibBuilder.loadTexts: eqlVolumeApplianceIndex.setDescription('This field specifies the appliance index this volume is associated with. This value will never be zero.')
eqlVolumeApplianceNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 9, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolumeApplianceNodeIndex.setStatus('current')
if mibBuilder.loadTexts: eqlVolumeApplianceNodeIndex.setDescription('This field specifies the node index this volume is associated with. This value will be zero if this volume is not associated with a particular node.')
eqlVolumeApplianceState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("formatpending", 0), ("formatted", 1), ("expansionpending", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolumeApplianceState.setStatus('current')
if mibBuilder.loadTexts: eqlVolumeApplianceState.setDescription('This field specifies the state of this volume as seen by the appliance.')
eqlApplianceOpsFailureTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 10), )
if mibBuilder.loadTexts: eqlApplianceOpsFailureTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOpsFailureTable.setDescription('EqualLogic-Dynamic Appliance operations failures table\n                     This table is used to retrieve failure information related to an appliance.\n                     TimeoutAll:60')
eqlApplianceOpsFailureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 10, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceOpsType"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceOpsIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceOpsFailureIndex"))
if mibBuilder.loadTexts: eqlApplianceOpsFailureEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOpsFailureEntry.setDescription('An entry (row) containing an operation.')
eqlApplianceOpsFailureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlApplianceOpsFailureIndex.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOpsFailureIndex.setDescription('This field specifies a unique index for identifing an operation failure.')
eqlApplianceOpsFailureType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("error", 1), ("warning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceOpsFailureType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOpsFailureType.setDescription('This field specifies the type of operation.')
eqlApplianceOpsFailureScope = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 10, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceOpsFailureScope.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOpsFailureScope.setDescription('This field represents the scope of this failure. For spartan, 0 indicates scope of cluster. Non zero indicates the node index this failure is related to.')
eqlApplianceOpsFailureCode = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceOpsFailureCode.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOpsFailureCode.setDescription('Error code related to this failure.')
eqlApplianceOpsFailureComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unknown", 0), ("fans", 1), ("psus", 2), ("cpus", 3), ("fc", 4), ("monitor", 5), ("nics", 6), ("ipmi", 7), ("ups", 8), ("temperatures", 9), ("raid", 10), ("memory", 11), ("connectivity", 12), ("network", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceOpsFailureComponent.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOpsFailureComponent.setDescription('Component related to this failure.')
eqlApplianceOpsFailureSubComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceOpsFailureSubComponent.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOpsFailureSubComponent.setDescription('This field specifies a user friendly name for the sub-components, e.g. eth32, eth33.')
eqlApplianceOpsFailureMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceOpsFailureMessage.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOpsFailureMessage.setDescription('This field contains the error message sent by the NAS cluster or controllers.')
eqlApplianceNodeHealthFailureTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 11), )
if mibBuilder.loadTexts: eqlApplianceNodeHealthFailureTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeHealthFailureTable.setDescription('EqualLogic-Dynamic Appliance operations failures table\n                     This table is used to retrieve failure information related to an appliance.\n                     TimeoutAll:60')
eqlApplianceNodeHealthFailureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 11, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNodeIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNodeHealthFailureIndex"))
if mibBuilder.loadTexts: eqlApplianceNodeHealthFailureEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeHealthFailureEntry.setDescription('An entry (row) containing an operation.')
eqlApplianceNodeHealthFailureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlApplianceNodeHealthFailureIndex.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeHealthFailureIndex.setDescription('This field specifies a unique index for identifing an operation failure.')
eqlApplianceNodeHealthFailureType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("error", 1), ("warning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceNodeHealthFailureType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeHealthFailureType.setDescription('This field specifies the type of operation.')
eqlApplianceNodeHealthFailureCode = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 11, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceNodeHealthFailureCode.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeHealthFailureCode.setDescription('Error code related to this failure.')
eqlApplianceNodeHealthFailureComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("power", 1), ("network", 2), ("internalhw", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceNodeHealthFailureComponent.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeHealthFailureComponent.setDescription('Component related to this failure.')
eqlApplianceNodeHealthFailureSubComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceNodeHealthFailureSubComponent.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeHealthFailureSubComponent.setDescription('This field specifies a user friendly name for the sub-component, e.g. eth32.')
eqlApplianceNodeHealthFailureMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 11, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceNodeHealthFailureMessage.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeHealthFailureMessage.setDescription('This field contains the error message sent by the NAS cluster or controllers.')
eqlApplianceServiceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 12), )
if mibBuilder.loadTexts: eqlApplianceServiceStatusTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceServiceStatusTable.setDescription('EqualLogic-Dynamic Appliance service status table\n                     This table is used to retrieve service health status information related to an appliance.\n                     TimeoutAll:60')
eqlApplianceServiceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 12, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlApplianceServiceStatusEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceServiceStatusEntry.setDescription('An entry (row) containing service status of an appliance.')
eqlApplianceOverallState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("on", 1), ("off", 2), ("stopping", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceOverallState.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOverallState.setDescription('This field indicates the overall status of the appliance.')
eqlApplianceServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("error", 1), ("warning", 2), ("normal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceServiceStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceServiceStatus.setDescription('This field indicates the service health status of the appliance.')
eqlApplianceServiceCriticalConditions = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 12, 1, 3), Bits().clone(namedValues=NamedValues(("exaStoreServiceFaultCacheLoss", 0), ("exaStoreServiceFaultServers", 1), ("exaStoreServiceNoService", 2), ("exaStoreServersFault", 3), ("exaStoreStorageSubsysFault", 4), ("eqlNASChassisClientNetworkCritical", 5), ("eqlNASChassisBackplaneNetworkCritical", 6), ("eqlNASChassisInternalNetworkCritical", 7), ("eqlNASChassisSanNetworkCritical", 8), ("eqlNASChassisFanCritical", 9), ("eqlNASControllerAmbientTempCritical", 10), ("eqlNASControllerBPSCritical", 11), ("eqlNASControllerCPUCritical", 12), ("eqlNASControllerFanCritical", 13), ("eqlNASControllerLocalDiskCritical", 14), ("eqlNASControllerRaidControllerCritical", 15), ("eqlNASControllerMemoryCritical", 16), ("eqlNASControllerVirtualDiskCritical", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceServiceCriticalConditions.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceServiceCriticalConditions.setDescription('This field indicates the current critical conditions associated with the appliance')
eqlApplianceServiceWarningConditions = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 12, 1, 4), Bits().clone(namedValues=NamedValues(("exaStoreServiceFSCheckerFailed", 0), ("exaStoreServicejournal", 1), ("exaStoreServersSomeDown", 2), ("exaStoreServersSomeDetached", 3), ("exaStoreServersNotOptimal", 4), ("exaStoreStorageSubsysNotOptimal", 5), ("eqlNASChassisClientNetworkNotOptimal", 6), ("eqlNASChassisBackplaneNetworkNotOptimal", 7), ("eqlNASChassisInternalNetworkNotOptimal", 8), ("eqlNASChassisSanNetworkNotOptimal", 9), ("eqlNASChassisFanNotOptimal", 10), ("eqlNASChassisPowerSupplyPartial", 11), ("eqlNASControllerAmbientTempNotOptimal", 12), ("eqlNASControllerBPSNotOptimal", 13), ("eqlNASControllerCPUNotOptimal", 14), ("eqlNASControllerFanNotOptimal", 15), ("eqlNASControllerLocalDiskNotOptimal", 16), ("eqlNASControllerRaidControllerNotOptimal", 17), ("eqlNASControllerMemoryNotOptimal", 18), ("eqlNASControllerVirtualDiskNotOptimal", 19), ("eqlNASControllerPowerSupplyPartial", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceServiceWarningConditions.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceServiceWarningConditions.setDescription('This field indicates the current warning conditions associated with the appliance')
eqlApplianceServiceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("massFailback", 1), ("massRebalance", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlApplianceServiceAction.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceServiceAction.setDescription('This field indicates the type of load balancing being requested')
eqlApplianceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 13), )
if mibBuilder.loadTexts: eqlApplianceStatsTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceStatsTable.setDescription('EqualLogic-Dynamic Appliance operations failures table\n                     This table is used to retrieve failure information related to an appliance.\n                     TimeoutAll:60')
eqlApplianceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 13, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlApplianceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceStatsEntry.setDescription('An entry (row) containing an operation.')
eqlApplianceStatsTotalCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 13, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceStatsTotalCapacity.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceStatsTotalCapacity.setDescription('This field represents the total capacity in MB. This is the space reserved for NAS i.e. the size of the NAS pool minus the size reserved by system for metadata. \n\t\t     This represents the eqlNASAppliancePoolSize - MetaData size.')
eqlApplianceStatsTotalAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 13, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceStatsTotalAllocated.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceStatsTotalAllocated.setDescription('This field is used indicate the total allocated space in mega bytes. This is the sum of the virtual volume (container) sizes. \n\t\t     If there are 2 containers: container1 which is 10MB and container2 which is 30MB. The value of this field will be 40MB.')
eqlApplianceStatsTotalUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 13, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceStatsTotalUsed.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceStatsTotalUsed.setDescription('This field is used indicate the total mega bytes in use. It represents the total space used by all the containers and snapshots.\n\t\t     If we are using 2MB of container1, 10MB of container2 and 1MB of the container2 space is used by snapshots.\n \t\t     In that case, the value of this field will be 2+10+1=13MB.')
eqlApplianceStatsTotalFree = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 13, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceStatsTotalFree.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceStatsTotalFree.setDescription('This field is used indicate the total mega bytes free. This field is the difference between the allocated space and used space i.e. TotalAllocatedSpace-TotalUsedSpace.')
eqlApplianceStatsTotalSnapshots = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 13, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceStatsTotalSnapshots.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceStatsTotalSnapshots.setDescription('This field is used indicate the total mega bytes used by snapshots. This field represents the space used only by snapshots for all the containers in the NAS pool.\n\t\t     If 1MB of container1 and 2MB of container2 is used by snapshots, and we have only 2 containers in the NAS pool, the value of this field is 1+2 = 3MB.')
eqlApplianceStatsNumberOfContainers = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 13, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceStatsNumberOfContainers.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceStatsNumberOfContainers.setDescription('This field is used indicate the number containers.')
eqlApplianceStatsNumberOfNfsExports = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 13, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceStatsNumberOfNfsExports.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceStatsNumberOfNfsExports.setDescription('This field is used indicate the number of Nfs exports on the appliance.')
eqlApplianceStatsNumberOfCifsShares = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 13, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceStatsNumberOfCifsShares.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceStatsNumberOfCifsShares.setDescription('This field is used indicate the number of Cifs exports on the appliance.')
eqlApplianceStatsNumberOfSnapshots = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 13, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceStatsNumberOfSnapshots.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceStatsNumberOfSnapshots.setDescription('This field is used indicate the number Snapshots for the appliance.')
eqlApplianceStatsTotalOptimizationSpaceSavings = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 13, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceStatsTotalOptimizationSpaceSavings.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceStatsTotalOptimizationSpaceSavings.setDescription('This field is used indicate the total mega bytes saved across all file systems due to optimization.')
eqlApplianceNodeStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 14), )
if mibBuilder.loadTexts: eqlApplianceNodeStatusTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeStatusTable.setDescription('EqualLogic-Dynamic Appliance operations failures table\n                     This table is used to retrieve failure information related to an appliance.\n                     TimeoutAll:60')
eqlApplianceNodeStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 14, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNodeIndex"))
if mibBuilder.loadTexts: eqlApplianceNodeStatusEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeStatusEntry.setDescription('An entry (row) containing an operation.')
eqlApplianceNodeStatusNodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("on", 1), ("off", 2), ("detached", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceNodeStatusNodeState.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNodeStatusNodeState.setDescription('This field represents the state of the node indexed by eqlApplianceNodeIndex')
eqlApplianceMultiStateOpsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 15), )
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsTable.setDescription('EqualLogic-Persistent Appliance Multi-state Operations table.\n                     This table is used to maintain state information for a multi-state operation for an appliance.\n                     TimeoutAll:60')
eqlApplianceMultiStateOpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 15, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceMultiStateOpsType"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceMultiStateOpsIndex"))
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsEntry.setDescription('An entry (row) containing state information for a mult-state operation for an appliance.')
eqlApplianceMultiStateOpsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 15, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsIndex.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsIndex.setDescription('This field specifies a unique index for identifing a multi-state operation.')
eqlApplianceMultiStateOpsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 15, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsRowStatus.setDescription('This field is used to manage operations.')
eqlApplianceMultiStateOpsType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unknown", 0), ("attach-node", 1), ("add-pair", 2), ("resize", 3), ("detach", 4), ("start", 5), ("stop", 6), ("delete", 7), ("long-running-blocking-config", 8), ("diagnostics", 9), ("nas-cluster-update", 10), ("restore", 11), ("service-mode-change", 12), ("container-cfg-modify", 13))))
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsType.setDescription('This field specifies the type of multi-state operation.')
eqlApplianceMultiStateOpsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 15, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsStatus.setDescription('This field represents the current status of this operation. In case of errors, this value will represent the error number.')
eqlApplianceMultiStateOpsServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsServiceTag.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsServiceTag.setDescription('This field indicates the service tag of the attaching node, or the first of the nodes being added')
eqlApplianceMultiStateOpsServiceTag2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsServiceTag2.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsServiceTag2.setDescription('This field indicates the service tag of the second of the nodes being added')
eqlApplianceMultiStateOpsNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 15, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsNodeIndex.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsNodeIndex.setDescription('This field represents the index of a node pertaining to this operation.')
eqlApplianceMultiStateOpsNodeIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 15, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsNodeIndex2.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsNodeIndex2.setDescription('This field represents the index of a second node pertaining to this operation.')
eqlApplianceMultiStateOpsState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1201, 1301, 1401, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1601, 1602, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1901, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2101, 2200))).clone(namedValues=NamedValues(("unknown", 0), ("attach-node-setup", 1001), ("attach-internal-network", 1002), ("attach-san-network", 1003), ("attach-client-network", 1004), ("attach-configure-gateway", 1005), ("attach-start-nodes-validation", 1006), ("attach-nodes-validation-inprogress", 1007), ("attach-action", 1008), ("attach-action-inprogress", 1009), ("attach-completed", 1010), ("resize-expand", 1101), ("resize-expand-inprogress", 1102), ("resize-format", 1103), ("resize-format-inprogress", 1104), ("resize-completed", 1105), ("resize-nas-volumes", 1106), ("resize-discover-volumes", 1107), ("detach-inprogress", 1201), ("start-inprogress", 1301), ("stop-inprogress", 1401), ("add-pair-node-setup", 1501), ("add-pair-node-count", 1502), ("add-pair-cluster-internal-network", 1503), ("add-pair-reset-node-count", 1504), ("add-pair-nodes-internal-network", 1505), ("add-pair-cluster-san-network", 1506), ("add-pair-nodes-san-network", 1507), ("add-pair-cluster-client-network", 1508), ("add-pair-nodes-client-network", 1509), ("add-pair-configure-gateway", 1510), ("add-pair-start-nodes-validation", 1511), ("add-pair-nodes-validation-inprogress", 1512), ("add-pair-prepare", 1513), ("add-pair-create-volume-acls", 1514), ("add-pair-start-attach", 1515), ("add-pair-attach-inprogress", 1516), ("add-pair-start-action", 1517), ("add-pair-action-inprogress", 1518), ("add-pair-completed", 1519), ("add-pair-start-nas-appliance-add", 1520), ("add-pair-nas-appliance-add-inprogress", 1521), ("add-pair-start-volume-discovery", 1522), ("add-pair-start-nas-appliance-join", 1523), ("add-pair-nas-appliance-join-inprogress", 1524), ("delete-inprogress", 1601), ("local-delete-inprogress", 1602), ("modify-internal-network", 1701), ("modify-san-network", 1702), ("modify-client-network", 1703), ("configure-credential-no-external", 1704), ("configure-credential-ldap", 1705), ("configure-credential-nis", 1706), ("configure-credential-unknown", 1707), ("configure-active-directory", 1708), ("max-keep-set", 1709), ("grp-inet-addr-set", 1710), ("delete-container-host-access", 1711), ("rename-cluster", 1712), ("cifs-operation", 1713), ("nas-cluster-update-start", 1714), ("nas-diags-init", 1801), ("nas-diags-start-general", 1802), ("nas-diags-check-general-started", 1803), ("nas-diags-check-general-finished", 1804), ("nas-diags-start-file", 1805), ("nas-diags-check-file-started", 1806), ("nas-diags-check-file-finished", 1807), ("nas-diags-finalize", 1808), ("nas-diags-done", 1809), ("nas-cluster-update-inprogress", 1901), ("restore-start", 2001), ("restore-service-mode-to-maintenance", 2002), ("restore-transitioning-to-maintenance", 2003), ("restore-internal-network", 2004), ("restore-cluster-name", 2005), ("restore-start-nas-appliance-create", 2006), ("restore-nas-appliance-create-in-progress", 2007), ("restore-san-network", 2008), ("restore-send-eql-group-ip", 2009), ("restore-create-volume-acls", 2010), ("restore-start-volume-discovery", 2011), ("restore-start-format", 2012), ("restore-format-in-progress", 2013), ("restore-start-config-restore", 2014), ("restore-config-restore-in-progress", 2015), ("restore-done", 2016), ("service-mode-change-inprogress", 2101), ("container-cfg-modify-inprogress", 2200)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsState.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsState.setDescription('This field represents the state during the attach state machine.')
eqlApplianceMultiStateOpsPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 15, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsPercentage.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsPercentage.setDescription('This field represents the % of completion for this operation.')
eqlApplianceMultiStateOpsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 15, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("retry", 1), ("continue", 2), ("delete", 3), ("start", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsAction.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsAction.setDescription('This field is used to either retry or continue the currently active operation.')
eqlApplianceMultiStateOpsCurNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 15, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsCurNodeIndex.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsCurNodeIndex.setDescription('This field represents the index of a node that is being operated on for this operation. 0 means VIP.')
eqlApplianceMultiStateOpsLongRunningOp = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 15, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsLongRunningOp.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsLongRunningOp.setDescription('True if a long running nas operation is in progress.')
eqlApplianceMultiStateOpsRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 15, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsRequestId.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMultiStateOpsRequestId.setDescription('This field represents the the operation request identifier.')
eqlApplianceNdmpTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 16), )
if mibBuilder.loadTexts: eqlApplianceNdmpTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNdmpTable.setDescription('EqualLogic-Dynamic Appliance Ndmp Table.\n                     TimeoutAll:60')
eqlApplianceNdmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 16, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlApplianceNdmpEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNdmpEntry.setDescription('An entry (row) containing ndmp information.')
eqlApplianceNdmpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 16, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNdmpRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNdmpRowStatus.setDescription('Rowstatus')
eqlApplianceNdmpUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 16, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)).clone('backup_user')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNdmpUserName.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNdmpUserName.setDescription('User name to allow DMA Servers to connect to NDMPD.\n                    This name must be used for user authentication by NDMPD.')
eqlApplianceNdmpPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 16, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNdmpPasswd.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNdmpPasswd.setDescription('An octet string containing the password to authenticate\n                    DMA servers connecting to NDMPD.\n                    If written, it changes the password for\n                    the account.  If read, it returns a zero-length string.')
eqlApplianceNdmpDesiredState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("stop", 0), ("start", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNdmpDesiredState.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNdmpDesiredState.setDescription('This field is used to either stop or start NDMP.')
eqlApplianceNdmpClientPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNdmpClientPort.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNdmpClientPort.setDescription('The listening port number of the Ndmp. Ndmp will listen on this port on all available client IP addresses.')
eqlApplianceNdmpDmaServerTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 17), )
if mibBuilder.loadTexts: eqlApplianceNdmpDmaServerTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNdmpDmaServerTable.setDescription('EqualLogic-Dynamic Appliance NDMP DMA Server Table.\n                     TimeoutAll:60')
eqlApplianceNdmpDmaServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 17, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNdmpDmaServerIPAddressType"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNdmpDmaServerIPAddress"))
if mibBuilder.loadTexts: eqlApplianceNdmpDmaServerEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNdmpDmaServerEntry.setDescription('An entry (row) containing group ndmp dma server information.')
eqlApplianceNdmpDmaServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 17, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNdmpDmaServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNdmpDmaServerRowStatus.setDescription('row status')
eqlApplianceNdmpDmaServerIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 17, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNdmpDmaServerIPAddressType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNdmpDmaServerIPAddressType.setDescription('This field contains the IP Address, in network byte order for the NTP server.')
eqlApplianceNdmpDmaServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 17, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNdmpDmaServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNdmpDmaServerIPAddress.setDescription('This field contains the IP Address, in network byte order for the NTP server.')
eqlApplianceNdmpDmaServerTransactionState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("configNone", 0), ("configStart", 1), ("configInProgress", 2), ("configCommit", 3), ("configStartCommit", 4))).clone('configNone')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceNdmpDmaServerTransactionState.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceNdmpDmaServerTransactionState.setDescription('This field denotes the transaction state of the operations on the eqlApplianceNdmpDmaServerTable.')
eqlApplianceLocalUserAccessTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 18), )
if mibBuilder.loadTexts: eqlApplianceLocalUserAccessTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLocalUserAccessTable.setDescription('EqualLogic-Dynamic Appliance User access table\n                     This table is used to manage user accounts on the Appliance.\n                     TimeoutAll:60')
eqlApplianceLocalUserAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 18, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceLocalUserName"))
if mibBuilder.loadTexts: eqlApplianceLocalUserAccessEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLocalUserAccessEntry.setDescription('An entry (row) containing an operation.')
eqlApplianceLocalUserAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 18, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceLocalUserAccessRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLocalUserAccessRowStatus.setDescription('This field is used to manage operations.')
eqlApplianceLocalUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 18, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceLocalUserName.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLocalUserName.setDescription('The users name')
eqlApplianceLocalUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 18, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 240))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceLocalUserPassword.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLocalUserPassword.setDescription('The user password')
eqlApplianceLocalUserUid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 18, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceLocalUserUid.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLocalUserUid.setDescription('The numeric Unix user ID of the user referenced by this row')
eqlApplianceLocalUserPrimaryGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 18, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceLocalUserPrimaryGroup.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLocalUserPrimaryGroup.setDescription('The name of the group that sets the group quota for this user')
eqlApplianceLocalUserRealName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 18, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceLocalUserRealName.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLocalUserRealName.setDescription('The real name associated with this user')
eqlApplianceLocalUserSid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 18, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceLocalUserSid.setStatus('deprecated')
if mibBuilder.loadTexts: eqlApplianceLocalUserSid.setDescription('The SID of this user presented as a hyphen separated alpha numeric string')
eqlApplianceLocalUserRemarks = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 18, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceLocalUserRemarks.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLocalUserRemarks.setDescription('The administrator remarks associated with this user')
eqlApplianceLocalUserAdditionalGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 18, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1023))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceLocalUserAdditionalGroups.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLocalUserAdditionalGroups.setDescription('A comma separated list of the group names used to determine access permissions for this user')
eqlApplianceLocalUserAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 18, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlApplianceLocalUserAccess.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLocalUserAccess.setDescription('This field specifies whether or not access is enabled for the local user in this appliance.\n                     The default is enabled.')
eqlApplianceLocalGroupAccessTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 19), )
if mibBuilder.loadTexts: eqlApplianceLocalGroupAccessTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLocalGroupAccessTable.setDescription('EqualLogic-Dynamic Appliance local group access table\n                     This table is used to manage local group accounts on the Appliance.\n                     TimeoutAll:60')
eqlApplianceLocalGroupAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 19, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceLocalGroupName"))
if mibBuilder.loadTexts: eqlApplianceLocalGroupAccessEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLocalGroupAccessEntry.setDescription('An entry (row) containing an operation.')
eqlApplianceLocalGroupAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 19, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceLocalGroupAccessRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLocalGroupAccessRowStatus.setDescription('This field is used to manage operations.')
eqlApplianceLocalGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 19, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceLocalGroupName.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLocalGroupName.setDescription('The name of the group referenced by this row')
eqlApplianceLocalGroupGid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 19, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceLocalGroupGid.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLocalGroupGid.setDescription('The numeric Unix group ID of the group referenced by this row')
eqlApplianceLocalGroupGsid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 19, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceLocalGroupGsid.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLocalGroupGsid.setDescription('The GSID of this group presented as a hyphen separated alpha numeric string')
eqlApplianceCredentialsDatabaseTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 20), )
if mibBuilder.loadTexts: eqlApplianceCredentialsDatabaseTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceCredentialsDatabaseTable.setDescription('EqualLogic-Dynamic Appliance credentials access table\n                     This table is used to manage the credential databases on the Appliance.\n                     TimeoutAll:60')
eqlApplianceCredentialsDatabaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 20, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlApplianceCredentialsDatabaseEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceCredentialsDatabaseEntry.setDescription('An entry (row) containing an operation ')
eqlApplianceCredentialsDatabaseRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 20, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceCredentialsDatabaseRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceCredentialsDatabaseRowStatus.setDescription('This field is used to manage operations.')
eqlApplianceCredentialsDatabaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noexternal", 0), ("ldap", 1), ("nis", 2), ("unknown", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceCredentialsDatabaseType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceCredentialsDatabaseType.setDescription('This field represents the type of user data base on the apppliance')
eqlApplianceCredentialsDatabaseLdapBaseDn = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 20, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceCredentialsDatabaseLdapBaseDn.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceCredentialsDatabaseLdapBaseDn.setDescription('')
eqlApplianceCredentialsDatabaseLdapServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 20, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceCredentialsDatabaseLdapServerAddress.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceCredentialsDatabaseLdapServerAddress.setDescription('The IP address as a string')
eqlApplianceCredentialsDatabaseNisDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 20, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceCredentialsDatabaseNisDomain.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceCredentialsDatabaseNisDomain.setDescription('The NIS Domain')
eqlApplianceCredentialsDatabaseNisServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 20, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceCredentialsDatabaseNisServerAddress.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceCredentialsDatabaseNisServerAddress.setDescription('A comma separated list of NIS server IP addresses')
eqlApplianceActiveDirectoryAccessTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 21), )
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryAccessTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryAccessTable.setDescription('EqualLogic-Dynamic Appliance User access table\n                     This table is used to manage access to Active Directory by the Appliance.\n                     TimeoutAll:60')
eqlApplianceActiveDirectoryAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 21, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryAccessEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryAccessEntry.setDescription('An entry (row) containing an operation ')
eqlApplianceActiveDirectoryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 21, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryRowStatus.setDescription('This field is used to manage operations.')
eqlApplianceActiveDirectoryAdvancedSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unused", 0), ("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryAdvancedSettings.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryAdvancedSettings.setDescription('Yes/No; Allows for advanced configuration by support personel; Leave as No')
eqlApplianceActiveDirectoryNetBiosName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 21, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryNetBiosName.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryNetBiosName.setDescription('This is the NetBIOS name that will appear in network neighborhood')
eqlApplianceActiveDirectoryDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 21, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryDomain.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryDomain.setDescription('The Active Directory full qualified domain name the appliance belongs to')
eqlApplianceActiveDirectoryUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 21, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryUserName.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryUserName.setDescription('A username with permissions to join the AD')
eqlApplianceActiveDirectoryPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 21, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryPassword.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryPassword.setDescription('Password for user who can join the AD')
eqlApplianceActiveDirectoryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 21, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1023))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryDescription.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryDescription.setDescription('Description field')
eqlApplianceActiveDirectoryFunctionalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 21, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryFunctionalLevel.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryFunctionalLevel.setDescription('Mode of the AD server either Native or Mixed')
eqlApplianceActiveDirectoryWinsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 21, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryWinsServer.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryWinsServer.setDescription('IP addr of WINS server if netowrk has one')
eqlApplianceActiveDirectoryWorkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 21, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryWorkGroup.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryWorkGroup.setDescription('Name of the workgroup to join')
eqlApplianceActiveDirectoryDomainControllers = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 21, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryDomainControllers.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryDomainControllers.setDescription('Commma separated list of ipv4 addresses ')
eqlApplianceActiveDirectoryMemberOfDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 21, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryMemberOfDomain.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryMemberOfDomain.setDescription("Truth value if it's member of domain")
eqlApplianceActiveDirectoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 21, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unused", 0), ("enabled", 1), ("disabled", 2))).clone('unused')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryStatus.setDescription('Indicates if the Appliance is able to access the Active Directory domain.')
eqlApplianceActiveDirectoryAccessibleControllers = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 21, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryAccessibleControllers.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryAccessibleControllers.setDescription('Commma separated list of controllers that are accessible.')
eqlApplianceActiveDirectoryPreferredControllers = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 21, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryPreferredControllers.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceActiveDirectoryPreferredControllers.setDescription('Comman separated list of preferred Active Directory controllers.')
eqlApplianceManualMappingTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 22), )
if mibBuilder.loadTexts: eqlApplianceManualMappingTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceManualMappingTable.setDescription('EqualLogic-Dynamic Appliance User access table\n                     This table is used to manage manualmapping of user access to the  Appliance.\n                     TimeoutAll:60')
eqlApplianceManualMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 22, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceManualMappingUserName"))
if mibBuilder.loadTexts: eqlApplianceManualMappingEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceManualMappingEntry.setDescription('An entry (row) containing an operation ')
eqlApplianceManualMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 22, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceManualMappingRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceManualMappingRowStatus.setDescription('This field is used to manage operations.')
eqlApplianceManualMappingUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 22, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceManualMappingUserName.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceManualMappingUserName.setDescription('The username to be mapped. The increased size is required should an AD name be used')
eqlApplianceManualMappingMappedToUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 22, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceManualMappingMappedToUserName.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceManualMappingMappedToUserName.setDescription('The username to which the name in eqlApplianceManualMappingUserName is to be mapped. The increased size is required should an AD name be used')
eqlApplianceManualMappingDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unused", 0), ("none", 1), ("unixtowindows", 2), ("windowstounix", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceManualMappingDirection.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceManualMappingDirection.setDescription('The direction of the mapping either none or  windows to unix or unix to windows')
eqlApplianceMappingPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 23), )
if mibBuilder.loadTexts: eqlApplianceMappingPolicyTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMappingPolicyTable.setDescription('EqualLogic-Dynamic Appliance User access table\n                     This table is used to manage manualmapping of user access to the  Appliance.\n                     TimeoutAll:60')
eqlApplianceMappingPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 23, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlApplianceMappingPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMappingPolicyEntry.setDescription('An entry (row) containing an operation ')
eqlApplianceMappingPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 23, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceMappingPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMappingPolicyRowStatus.setDescription('This field is used to manage operations.')
eqlApplianceMappingPolicyAcquireMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unused", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceMappingPolicyAcquireMapping.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMappingPolicyAcquireMapping.setDescription('Indicated if mapping policy is enabled')
eqlApplianceMappingPolicyAllowNotMapped = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unused", 0), ("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceMappingPolicyAllowNotMapped.setStatus('deprecated')
if mibBuilder.loadTexts: eqlApplianceMappingPolicyAllowNotMapped.setDescription('Indicates if guest mapping is allowed for unmapped users. The value is always enabled.')
eqlApplianceAllGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 24), )
if mibBuilder.loadTexts: eqlApplianceAllGroupsTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceAllGroupsTable.setDescription('EqualLogic-Dynamic Appliance User access table\n                     This table is used to manage non-local group accounts on the Appliance.\n                     TimeoutAll:60')
eqlApplianceAllGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 24, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceAllGroupsName"))
if mibBuilder.loadTexts: eqlApplianceAllGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceAllGroupsEntry.setDescription('An entry (row) containing an operation.')
eqlApplianceAllGroupsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 24, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceAllGroupsRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceAllGroupsRowStatus.setDescription('This field is used to manage operations.')
eqlApplianceAllGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 24, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceAllGroupsName.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceAllGroupsName.setDescription('The name of the group referenced by this row. The length is to support the maximum length of an AD groupname including the domain')
eqlApplianceAllGroupsId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 24, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceAllGroupsId.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceAllGroupsId.setDescription('The id of the group referenced by this row')
eqlApplianceAllGroupsType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unused", 0), ("ad", 1), ("unix", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceAllGroupsType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceAllGroupsType.setDescription('The type of the group referenced by this row')
eqlApplianceAllGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unused", 0), ("local", 1), ("external", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceAllGroupsSource.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceAllGroupsSource.setDescription('The credential source of the group referenced by this row')
eqlApplianceAllUsersTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 25), )
if mibBuilder.loadTexts: eqlApplianceAllUsersTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceAllUsersTable.setDescription('EqualLogic-Dynamic Appliance User access table\n                     This table is used to manage non-local user accounts on the Appliance.\n                     TimeoutAll:60')
eqlApplianceAllUsersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 25, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceAllUsersName"))
if mibBuilder.loadTexts: eqlApplianceAllUsersEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceAllUsersEntry.setDescription('An entry (row) containing an operation.')
eqlApplianceAllUsersRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 25, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceAllUsersRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceAllUsersRowStatus.setDescription('This field is used to manage operations.')
eqlApplianceAllUsersName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 25, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceAllUsersName.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceAllUsersName.setDescription('The name of the user referenced by this row')
eqlApplianceAllUsersId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 25, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceAllUsersId.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceAllUsersId.setDescription('The id of the user referenced by this row')
eqlApplianceAllUsersType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unused", 0), ("ad", 1), ("unix", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceAllUsersType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceAllUsersType.setDescription('The type of the user referenced by this row')
eqlApplianceAllUsersSource = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unused", 0), ("local", 1), ("external", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceAllUsersSource.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceAllUsersSource.setDescription('The credential source of the user referenced by this row')
eqlApplianceEQLMemberMPVTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 26), )
if mibBuilder.loadTexts: eqlApplianceEQLMemberMPVTable.setStatus('deprecated')
if mibBuilder.loadTexts: eqlApplianceEQLMemberMPVTable.setDescription('EqualLogic-Persistent table used to obtain the Management Protocol Version\n\t\t     (MPV) of each EQL Member in the Group. This table is deprecated now.\n                     A new table eqlApplianceTypeEQLMemberMPVTable based on groupId, memberIndex\n                     and ApplianceType will be instead.\n                     TimeoutAll:60')
eqlApplianceEQLMemberMPVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 26, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"))
if mibBuilder.loadTexts: eqlApplianceEQLMemberMPVEntry.setStatus('deprecated')
if mibBuilder.loadTexts: eqlApplianceEQLMemberMPVEntry.setDescription('An entry contains the Management Protocol Version (MPV) of the Member.')
eqlApplianceEQLMemberMPV = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 26, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceEQLMemberMPV.setStatus('deprecated')
if mibBuilder.loadTexts: eqlApplianceEQLMemberMPV.setDescription('The Management Protocol Version (MPV)of this EQL member.')
eqlApplianceMPVTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 27), )
if mibBuilder.loadTexts: eqlApplianceMPVTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMPVTable.setDescription('EqualLogic-Dynamic table holding the EQL Group MPV and the Appliance Cluster MPV.\n                     TimeoutAll:60')
eqlApplianceMPVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 27, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlApplianceMPVEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceMPVEntry.setDescription('An entry contains the Management Protocol Version (MPV) of the EQL Group and of the Appliance Cluster.')
eqlApplianceEQLGroupMPV = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 27, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceEQLGroupMPV.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceEQLGroupMPV.setDescription('The Management Protocol Version (MPV) of the EQL Group.')
eqlApplianceClusterMPV = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 27, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceClusterMPV.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceClusterMPV.setDescription(' The Management Protocol Version (MPV) of the Appliance Cluster.')
eqlApplianceClusterMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 27, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceClusterMajorVersion.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceClusterMajorVersion.setDescription(' The Major firmware version of the Appliance Cluster.')
eqlApplianceClusterMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 27, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceClusterMinorVersion.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceClusterMinorVersion.setDescription(' The Minor firmware version of the Appliance Cluster.')
eqlApplianceClusterMaintVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 27, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceClusterMaintVersion.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceClusterMaintVersion.setDescription(' The Maintenance firmware version of the Appliance Cluster.')
eqlApplianceSyncedDataTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 28), )
if mibBuilder.loadTexts: eqlApplianceSyncedDataTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceSyncedDataTable.setDescription('EqualLogic-Persistent Appliance Unsynced data table\n                     This table is used to maintain a list of unsynced data between EQL and the appliance.\n                     TimeoutAll:60')
eqlApplianceSyncedDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 28, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceSyncedDataType"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceSyncedDataIndex"))
if mibBuilder.loadTexts: eqlApplianceSyncedDataEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceSyncedDataEntry.setDescription('An entry (row) containing Synced data.')
eqlApplianceSyncedDataRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 28, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceSyncedDataRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceSyncedDataRowStatus.setDescription('This field is used to manage operations.')
eqlApplianceSyncedDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("grpadminpswd", 1), ("grpip", 2), ("timezone", 3), ("traprecipient", 4), ("trapcommunity", 5), ("cluster-san-vip", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceSyncedDataType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceSyncedDataType.setDescription('This field represents the type of the data to be synced to the appliance')
eqlApplianceSyncedDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 28, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceSyncedDataIndex.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceSyncedDataIndex.setDescription('This field specifies a unique index for identifing the SyncedData.')
eqlApplianceSyncedDataIndexPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 28, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceSyncedDataIndexPayload.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceSyncedDataIndexPayload.setDescription('This field represents the payload form of the object index that needs to be synced to the appliance')
eqlApplianceSyncedDataEntryPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 28, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceSyncedDataEntryPayload.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceSyncedDataEntryPayload.setDescription('This field represents the payload form of the object entry that needs to be synced to the appliance')
eqlApplianceSyncedDataState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 28, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("sync-pending", 0), ("sync-initiated", 1), ("synced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceSyncedDataState.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceSyncedDataState.setDescription('This field represents the state of the data to be synced to the appliance')
eqlApplianceCIFSProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 29), )
if mibBuilder.loadTexts: eqlApplianceCIFSProtocolTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceCIFSProtocolTable.setDescription('Equallogic-Dynamic NAS CIFS Table.\n\t\t    This table contains a list of CIFS protocol entry.')
eqlApplianceCIFSProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 29, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlApplianceCIFSProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceCIFSProtocolEntry.setDescription('An entry (row) containing CIFS protocal configuration.')
eqlApplianceCIFSProtocolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 29, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceCIFSProtocolRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceCIFSProtocolRowStatus.setDescription('This field is used to manage operations.')
eqlApplianceCIFSProtocolAuthenticationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 29, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceCIFSProtocolAuthenticationEnabled.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceCIFSProtocolAuthenticationEnabled.setDescription('If true authentication is enabled on this appliance')
eqlApplianceCIFSProtocolAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unused", 0), ("activedirectory", 1), ("localuser", 2), ("guestsonly", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceCIFSProtocolAuthenticationType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceCIFSProtocolAuthenticationType.setDescription('Indicates the type of authentication in effect on the appliance - guestsonly is deprecated')
eqlApplianceCIFSProtocolAllowGuests = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 29, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceCIFSProtocolAllowGuests.setStatus('deprecated')
if mibBuilder.loadTexts: eqlApplianceCIFSProtocolAllowGuests.setDescription('This is a deprecated field which is still requred in the exastore xml')
eqlApplianceCIFSProtocolMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 29, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceCIFSProtocolMaxConnections.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceCIFSProtocolMaxConnections.setDescription('This field specifies the maxium CIFS connection per node for this appliance')
eqlApplianceCIFSProtocolUnixCharacterSet = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 29, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unused", 0), ("utf8", 1), ("utf8jp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceCIFSProtocolUnixCharacterSet.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceCIFSProtocolUnixCharacterSet.setDescription('Indicates the Unix character sets supported by CIFS on the appliance')
eqlApplianceCIFSProtocolDosCodePage = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 29, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("unused", 0), ("cp850", 1), ("cp437", 2), ("cp737", 3), ("cp775", 4), ("cp852", 5), ("cp857", 6), ("cp860", 7), ("cp861", 8), ("cp862", 9), ("cp863", 10), ("cp864", 11), ("cp865", 12), ("cp866", 13), ("cp874", 14), ("cp932", 15), ("cp936", 16), ("cp949", 17), ("cp950", 18), ("eucjp", 19)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceCIFSProtocolDosCodePage.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceCIFSProtocolDosCodePage.setDescription('Indicates the DOS code page supported by CIFS on the appliance')
eqlApplianceOptimizationScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 30), )
if mibBuilder.loadTexts: eqlApplianceOptimizationScheduleTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOptimizationScheduleTable.setDescription('EqualLogic-Dynamic Appliance Optimization Scheduler Table.\n                     TimeoutAll:60')
eqlApplianceOptimizationScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 30, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlApplianceOptimizationScheduleEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOptimizationScheduleEntry.setDescription('An entry (row) containing ndmp information.')
eqlApplianceOptimizationScheduleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 30, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceOptimizationScheduleRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOptimizationScheduleRowStatus.setDescription('Rowstatus')
eqlApplianceOptimizationScheduleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 30, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceOptimizationScheduleStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOptimizationScheduleStatus.setDescription('If true optimization schedule is enabled on this appliance')
eqlApplianceOptimizationContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 30, 1, 3), Unsigned32())
if mibBuilder.loadTexts: eqlApplianceOptimizationContainerIndex.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOptimizationContainerIndex.setDescription('Unique Identifier used to manage NAS Containers. 0 in this case.')
eqlApplianceOptimizationPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 30, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceOptimizationPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceOptimizationPolicyIndex.setDescription('This value identifies the snapshot policy for this snapshot.')
eqlApplianceAdminAccountTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 31), )
if mibBuilder.loadTexts: eqlApplianceAdminAccountTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceAdminAccountTable.setDescription('EqualLogic-Dynamic Appliance Administration account table.')
eqlApplianceAdminAccountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 31, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceAdminAccountName"))
if mibBuilder.loadTexts: eqlApplianceAdminAccountEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceAdminAccountEntry.setDescription('An entry (row) containing administration account settings.')
eqlApplianceAdminAccountName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 31, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceAdminAccountName.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceAdminAccountName.setDescription('The name of the administration account.')
eqlApplianceAdminAccountRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 31, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceAdminAccountRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceAdminAccountRowStatus.setDescription('This value is used to manage the conceptual row.')
eqlApplianceAdminAccountPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 31, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceAdminAccountPassword.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceAdminAccountPassword.setDescription(' An octet string containing the (crypt cipher) password for this\n                      account.  If written, it changes the password for\n                      the account.  If read, it returns a zero-length string.')
eqlApplianceLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 32), )
if mibBuilder.loadTexts: eqlApplianceLicenseTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLicenseTable.setDescription('EqualLogic-Dynamic Appliance License table.')
eqlApplianceLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 32, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceLicenseFeatureId"))
if mibBuilder.loadTexts: eqlApplianceLicenseEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLicenseEntry.setDescription('An entry (row) containing license settings.')
eqlApplianceLicenseRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 32, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceLicenseRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLicenseRowStatus.setDescription('This value is used to manage the conceptual row.')
eqlApplianceLicenseFeatureId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 32, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basic-dedupe", 1), ("advanced-dedupe", 2))).clone('basic-dedupe')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceLicenseFeatureId.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLicenseFeatureId.setDescription(' An enumeration defining the licensed feature.')
eqlApplianceLicenseEntitlementId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 32, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceLicenseEntitlementId.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLicenseEntitlementId.setDescription(' Entitlement id of the license.')
eqlApplianceLicenseState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 32, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("expired", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceLicenseState.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLicenseState.setDescription(' License state.')
eqlApplianceLicenseExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 32, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceLicenseExpiry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLicenseExpiry.setDescription(' Expiration date of the license. This field specifies the expiration date for the license.\n                     Time is represented as the time in seconds since 00:00:00 UTC, 1970-01-01. 0 for perpetual licenses. \n                     If the license type is perpetual this field will be ignored')
eqlApplianceLicenseUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 32, 1, 6), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceLicenseUsed.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLicenseUsed.setDescription(' Set to True if the license is in use')
eqlApplianceLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 32, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("evaluation", 0), ("perpetual", 1))).clone('perpetual')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceLicenseType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLicenseType.setDescription(' License type.')
eqlApplianceLicenseFileTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 33), )
if mibBuilder.loadTexts: eqlApplianceLicenseFileTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLicenseFileTable.setDescription('EqualLogic-Dynamic Appliance License File table.')
eqlApplianceLicenseFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 33, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlApplianceLicenseFileEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLicenseFileEntry.setDescription('An entry (row) containing license settings.')
eqlApplianceLicenseFileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 33, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceLicenseFileRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLicenseFileRowStatus.setDescription('This value is used to manage the conceptual row.')
eqlApplianceLicenseFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 33, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceLicenseFileName.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceLicenseFileName.setDescription(' File name of the license.')
eqlApplianceTypeEQLMemberMPVTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 34), )
if mibBuilder.loadTexts: eqlApplianceTypeEQLMemberMPVTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceTypeEQLMemberMPVTable.setDescription('EqualLogic-Persistent table used to obtain the Management Protocol Version\n\t\t     (MPV) of each EQL Member in the Group for a particular appliance type.\n                     TimeoutAll:60')
eqlApplianceTypeEQLMemberMPVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 34, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceType"))
if mibBuilder.loadTexts: eqlApplianceTypeEQLMemberMPVEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceTypeEQLMemberMPVEntry.setDescription('An entry contains the Management Protocol Version (MPV) of the Member.')
eqlApplianceTypeEQLMemberMPV = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 34, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceTypeEQLMemberMPV.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceTypeEQLMemberMPV.setDescription('The Management Protocol Version (MPV) of this EQL member.')
eqlApplianceTypeEQLGroupMPVTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 35), )
if mibBuilder.loadTexts: eqlApplianceTypeEQLGroupMPVTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceTypeEQLGroupMPVTable.setDescription('EqualLogic-Dynamic table holding the EQL Group MPV for a give type of Appliance Cluster.\n                     TimeoutAll:60')
eqlApplianceTypeEQLGroupMPVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 35, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceType"))
if mibBuilder.loadTexts: eqlApplianceTypeEQLGroupMPVEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceTypeEQLGroupMPVEntry.setDescription('An entry contains the Management Protocol Version (MPV) of the EQL Group for a given type of Appliance Cluster.')
eqlApplianceTypeEQLGroupMPV = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 35, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceTypeEQLGroupMPV.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceTypeEQLGroupMPV.setDescription('The Management Protocol Version (MPV) of the EQL Group.')
eqlApplianceVolumeDiscoveryTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 36), )
if mibBuilder.loadTexts: eqlApplianceVolumeDiscoveryTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceVolumeDiscoveryTable.setDescription('EqualLogic-Dynamic Appliance volume discovery operation status table\n                     This table is used to manage volume discovery operations on appliances. \n                     TimeoutAll:60')
eqlApplianceVolumeDiscoveryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 36, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNodeIndex"), (0, "EQLVOLUME-MIB", "eqliscsiVolumeTargetIscsiName"))
if mibBuilder.loadTexts: eqlApplianceVolumeDiscoveryEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceVolumeDiscoveryEntry.setDescription('An entry (row) containing volume discovery status.')
eqlApplianceVolumeDiscoveryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 36, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceVolumeDiscoveryRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceVolumeDiscoveryRowStatus.setDescription('This field is used to manage volume discovery operation.')
eqlApplianceVolumeDiscoveryVolumeNodeAccessibleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 36, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-optimal", 0), ("optimal", 1), ("fault", 2))).clone('not-optimal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceVolumeDiscoveryVolumeNodeAccessibleStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceVolumeDiscoveryVolumeNodeAccessibleStatus.setDescription('This field specifies the Volume accessible status by the specified Appliance and Controller.')
eqlApplianceVolumeDiscoveryVolumeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 36, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("expanding", 1), ("formatted", 2), ("expandable", 3), ("new", 4), ("formatting", 5))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceVolumeDiscoveryVolumeStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceVolumeDiscoveryVolumeStatus.setDescription(' This field specifies the volume status.')
eqlApplianceVolumeDiscoveryVolumeLunNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 36, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlApplianceVolumeDiscoveryVolumeLunNumber.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceVolumeDiscoveryVolumeLunNumber.setDescription(' This field specifies the volume LUN number.')
eqlApplianceInitiatorsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 37), )
if mibBuilder.loadTexts: eqlApplianceInitiatorsTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceInitiatorsTable.setDescription('EqualLogic-Dynamic table holding the list of Initiators for a given NAS Cluster.\n                     TimeoutAll:60')
eqlApplianceInitiatorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 37, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNodeIndex"))
if mibBuilder.loadTexts: eqlApplianceInitiatorsEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceInitiatorsEntry.setDescription('An entry (row) containing the initiators information.')
eqlApplianceInitiatorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 37, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceInitiatorRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceInitiatorRowStatus.setDescription('This field is used indicate the status of this entry.')
eqlApplianceInitiatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 37, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 223))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceInitiatorName.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceInitiatorName.setDescription('The iSCSI initiator name for a particular NAS controller.')
eqlApplianceUserQueryTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 38), )
if mibBuilder.loadTexts: eqlApplianceUserQueryTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUserQueryTable.setDescription('Equallogic-Dynamic Appliance User search Table.\n                     This table provides the ability to search for a particular\n                     user in any of the 3 DBs provided, LocalUser, AD User, NIS/LDAP User.\n\t\t     TimeoutAll:60')
eqlApplianceUserQueryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 38, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceUserQuerySearchString"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceUserQueryDBType"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceUserQueryPageSize"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceUserQueryPageNumber"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceUserQueryUserDomain"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceUserQueryUserName"))
if mibBuilder.loadTexts: eqlApplianceUserQueryEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUserQueryEntry.setDescription('An entry (row) containing the Appliance User search information.')
eqlApplianceUserQuerySearchString = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 38, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceUserQuerySearchString.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUserQuerySearchString.setDescription('The search string used for the query.')
eqlApplianceUserQueryDBType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 38, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unused", 0), ("ad", 1), ("unix", 2), ("all", 3), ("local", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceUserQueryDBType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUserQueryDBType.setDescription('This field indicates on which database to perform the query.')
eqlApplianceUserQueryPageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 38, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceUserQueryPageSize.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUserQueryPageSize.setDescription('This field indicates the page size for the query result.')
eqlApplianceUserQueryPageNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 38, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceUserQueryPageNumber.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUserQueryPageNumber.setDescription('This field indicates the page number for the query.')
eqlApplianceUserQueryUserDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 38, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceUserQueryUserDomain.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUserQueryUserDomain.setDescription('The domain name of the user referenced by this row.')
eqlApplianceUserQueryUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 38, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceUserQueryUserName.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUserQueryUserName.setDescription('The name of the user referenced by this row.')
eqlApplianceUserQueryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 38, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceUserQueryRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUserQueryRowStatus.setDescription('This field is used to manage operations.')
eqlApplianceUserQueryTotalUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 38, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceUserQueryTotalUsers.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUserQueryTotalUsers.setDescription('This field indicates the total number of users returned by the query.')
eqlApplianceUserQueryUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 38, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceUserQueryUserId.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUserQueryUserId.setDescription('The ID of the user referenced by this row.')
eqlApplianceUserQueryUserPrimaryGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 38, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 184))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceUserQueryUserPrimaryGroup.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUserQueryUserPrimaryGroup.setDescription('The domain name of the user referenced by this row.')
eqlApplianceUserQueryUserType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 38, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unused", 0), ("ad", 1), ("unix", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceUserQueryUserType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUserQueryUserType.setDescription('The type of the user referenced by this row.')
eqlApplianceUserQueryUserSource = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 38, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unused", 0), ("local", 1), ("external", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceUserQueryUserSource.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceUserQueryUserSource.setDescription('The credential source of the user referenced by this row.')
eqlApplianceDnsServerTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 39), )
if mibBuilder.loadTexts: eqlApplianceDnsServerTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceDnsServerTable.setDescription('EqualLogic-Dynamic table used to store DNS servers for a NAS appliance.\n                     TimeoutAll:60')
eqlApplianceDnsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 39, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceDnsServerIndex"))
if mibBuilder.loadTexts: eqlApplianceDnsServerEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceDnsServerEntry.setDescription('An entry contains the antivirus host information for a NAS appliance.')
eqlApplianceDnsServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 39, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlApplianceDnsServerIndex.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceDnsServerIndex.setDescription('This field specifies an index that uniquely identifies the DNS server entry.')
eqlApplianceDnsServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 39, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceDnsServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceDnsServerRowStatus.setDescription('This field is used to manage the conceptual row entry.')
eqlApplianceDnsServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 39, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceDnsServerInetAddressType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceDnsServerInetAddressType.setDescription('This field contains the IP address type for the DNS server.')
eqlApplianceDnsServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 39, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceDnsServerInetAddress.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceDnsServerInetAddress.setDescription('This field contains the IP address, in network byte order, for the DNS server.')
eqlApplianceDnsServerTransactionState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 39, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("singleOp", 0), ("configStart", 1), ("configInProgress", 2), ("configCommit", 3), ("configStartCommit", 4))).clone('singleOp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceDnsServerTransactionState.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceDnsServerTransactionState.setDescription("This field denotes the transaction state of the operations on the eqlApplianceDnsServerTable.\n                     To accumulate multiple create/destroy op into a single transaction, the TransactionState\n                     in the first row should be configStart and the TransactionState of the last row should be\n                     configCommit and middle rows should be configInProgress.  configStartCommit would indicate\n                     a single row in the transaction.  singleOp is the same as configStartCommit but comes from\n                     an SNMP manager that didn't use TransactionState")
eqlApplianceDnsSuffixTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 40), )
if mibBuilder.loadTexts: eqlApplianceDnsSuffixTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceDnsSuffixTable.setDescription('EqualLogic-Dynamic table used to store DNS suffixes for a NAS appliance.\n                     TimeoutAll:60')
eqlApplianceDnsSuffixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 40, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceDnsSuffixIndex"))
if mibBuilder.loadTexts: eqlApplianceDnsSuffixEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceDnsSuffixEntry.setDescription('An entry contains the antivirus host information for a NAS appliance.')
eqlApplianceDnsSuffixIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 40, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlApplianceDnsSuffixIndex.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceDnsSuffixIndex.setDescription('This field specifies an index that uniquely identifies the DNS suffix entry.')
eqlApplianceDnsSuffixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 40, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceDnsSuffixRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceDnsSuffixRowStatus.setDescription('This field is used to manage the conceptual row entry.')
eqlApplianceDnsSuffixString = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 40, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceDnsSuffixString.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceDnsSuffixString.setDescription('This field contains a domain suffix for DNS lookup.')
eqlApplianceDnsSuffixTransactionState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 40, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("singleOp", 0), ("configStart", 1), ("configInProgress", 2), ("configCommit", 3), ("configStartCommit", 4))).clone('singleOp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceDnsSuffixTransactionState.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceDnsSuffixTransactionState.setDescription("This field denotes the transaction state of the operations on the eqlApplianceDnsSuffixTable.\n                     To accumulate multiple create/destroy op into a single transaction, the TransactionState\n                     in the first row should be configStart and the TransactionState of the last row should be\n                     configCommit and middle rows should be configInProgress.  configStartCommit would indicate\n                     a single row in the transaction.  singleOp is the same as configStartCommit but comes from\n                     an SNMP manager that didn't use TransactionState")
eqlApplianceDomainListTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 41), )
if mibBuilder.loadTexts: eqlApplianceDomainListTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceDomainListTable.setDescription('Equallogic-Dynamic Appliance Domain list Table.\n                     This table provides the ability to list all of the Domains for a particular\n                     Appliance.\n\t\t     TimeoutAll:60')
eqlApplianceDomainListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 41, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceDomainName"))
if mibBuilder.loadTexts: eqlApplianceDomainListEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceDomainListEntry.setDescription('An entry (row) containing the domain information.')
eqlApplianceDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 41, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceDomainName.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceDomainName.setDescription('This field indicates the domain name.')
eqlApplianceDomainType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 41, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unused", 0), ("ad", 1), ("unix", 2), ("local", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceDomainType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceDomainType.setDescription('this field indicates the domain type.')
eqlApplianceGroupQueryTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 17, 1, 42), )
if mibBuilder.loadTexts: eqlApplianceGroupQueryTable.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceGroupQueryTable.setDescription('Equallogic-Dynamic Appliance User search Table.\n                     This table provides the ability to search for a particular\n                     user in any of the 3 DBs provided, LocalUser, AD User, NIS/LDAP User.\n\t\t     TimeoutAll:60')
eqlApplianceGroupQueryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 17, 1, 42, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceGroupQuerySearchString"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceGroupQueryDBType"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceGroupQueryPageSize"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceGroupQueryPageNumber"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceGroupQueryDomain"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceGroupQueryGroupName"))
if mibBuilder.loadTexts: eqlApplianceGroupQueryEntry.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceGroupQueryEntry.setDescription('An entry (row) containing the Appliance User search information.')
eqlApplianceGroupQuerySearchString = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 42, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceGroupQuerySearchString.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceGroupQuerySearchString.setDescription('The search string used for the query.')
eqlApplianceGroupQueryDBType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 42, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unused", 0), ("ad", 1), ("unix", 2), ("all", 3), ("local", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceGroupQueryDBType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceGroupQueryDBType.setDescription('This field indicates on which database to perform the query.')
eqlApplianceGroupQueryPageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 42, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceGroupQueryPageSize.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceGroupQueryPageSize.setDescription('This field indicates the page size for the query result.')
eqlApplianceGroupQueryPageNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 42, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceGroupQueryPageNumber.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceGroupQueryPageNumber.setDescription('This field indicates the page number for the query.')
eqlApplianceGroupQueryDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 42, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceGroupQueryDomain.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceGroupQueryDomain.setDescription('The domain name of the group referenced by this row.')
eqlApplianceGroupQueryGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 42, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceGroupQueryGroupName.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceGroupQueryGroupName.setDescription('The name of the group referenced by this row.')
eqlApplianceGroupQueryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 42, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceGroupQueryRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceGroupQueryRowStatus.setDescription('This field is used to manage operations.')
eqlApplianceGroupQueryTotalGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 42, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceGroupQueryTotalGroups.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceGroupQueryTotalGroups.setDescription('This field indicates the total number of groups returned by the query.')
eqlApplianceGroupQueryGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 42, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceGroupQueryGroupId.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceGroupQueryGroupId.setDescription('The ID of the group referenced by this row.')
eqlApplianceGroupQueryGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 42, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unused", 0), ("ad", 1), ("unix", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceGroupQueryGroupType.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceGroupQueryGroupType.setDescription('The type of the group referenced by this row.')
eqlApplianceGroupQueryGroupSource = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 17, 1, 42, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unused", 0), ("local", 1), ("external", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlApplianceGroupQueryGroupSource.setStatus('current')
if mibBuilder.loadTexts: eqlApplianceGroupQueryGroupSource.setDescription('The credential source of the group referenced by this row.')
mibBuilder.exportSymbols("EQLAPPLIANCE-MIB", eqlApplianceDomainType=eqlApplianceDomainType, eqlApplianceDomainListTable=eqlApplianceDomainListTable, eqlApplianceCIFSProtocolAllowGuests=eqlApplianceCIFSProtocolAllowGuests, eqlApplianceGroupQueryGroupType=eqlApplianceGroupQueryGroupType, eqlApplianceNodeMajorVersion=eqlApplianceNodeMajorVersion, eqlApplianceOptimizationScheduleTable=eqlApplianceOptimizationScheduleTable, eqlApplianceUserQueryPageSize=eqlApplianceUserQueryPageSize, eqlApplianceNdmpEntry=eqlApplianceNdmpEntry, eqlApplianceSyncedDataRowStatus=eqlApplianceSyncedDataRowStatus, eqlApplianceNodeAdminStatus=eqlApplianceNodeAdminStatus, eqlApplianceAllUsersSource=eqlApplianceAllUsersSource, eqlApplianceSyncedDataIndex=eqlApplianceSyncedDataIndex, eqlApplianceGatewayAddrType=eqlApplianceGatewayAddrType, eqlApplianceStatsTotalAllocated=eqlApplianceStatsTotalAllocated, eqlApplianceMPVEntry=eqlApplianceMPVEntry, eqlApplianceUserQueryTable=eqlApplianceUserQueryTable, eqlApplianceName=eqlApplianceName, eqlApplianceGatewayAddr=eqlApplianceGatewayAddr, eqlApplianceServiceStatus=eqlApplianceServiceStatus, eqlApplianceActiveDirectoryFunctionalLevel=eqlApplianceActiveDirectoryFunctionalLevel, eqlApplianceNdmpDmaServerTransactionState=eqlApplianceNdmpDmaServerTransactionState, eqlApplianceActiveDirectoryPreferredControllers=eqlApplianceActiveDirectoryPreferredControllers, eqlApplianceNodeIndex=eqlApplianceNodeIndex, eqlApplianceIPTable=eqlApplianceIPTable, eqlVolumeApplianceState=eqlVolumeApplianceState, eqlApplianceAllGroupsId=eqlApplianceAllGroupsId, PYSNMP_MODULE_ID=eqlApplianceModule, eqlApplianceLocalUserAdditionalGroups=eqlApplianceLocalUserAdditionalGroups, eqlApplianceTypeEQLGroupMPVTable=eqlApplianceTypeEQLGroupMPVTable, eqlApplianceMultiStateOpsIndex=eqlApplianceMultiStateOpsIndex, eqlApplianceUnInitNodesEntry=eqlApplianceUnInitNodesEntry, eqlApplianceManualMappingUserName=eqlApplianceManualMappingUserName, eqlApplianceAllUsersType=eqlApplianceAllUsersType, eqlApplianceClusterMajorVersion=eqlApplianceClusterMajorVersion, eqlApplianceLicenseState=eqlApplianceLicenseState, eqlApplianceSharedSecret=eqlApplianceSharedSecret, eqlApplianceVendorId=eqlApplianceVendorId, eqlApplianceServiceModeStatus=eqlApplianceServiceModeStatus, eqlApplianceLicenseExpiry=eqlApplianceLicenseExpiry, eqlApplianceNodeConfigStatus=eqlApplianceNodeConfigStatus, eqlVolumeApplianceRowStatus=eqlVolumeApplianceRowStatus, eqlApplianceAllUsersRowStatus=eqlApplianceAllUsersRowStatus, eqlApplianceMultiStateOpsState=eqlApplianceMultiStateOpsState, eqlApplianceActiveDirectoryNetBiosName=eqlApplianceActiveDirectoryNetBiosName, eqlApplianceServiceAction=eqlApplianceServiceAction, eqlApplianceNodeHealthFailureComponent=eqlApplianceNodeHealthFailureComponent, eqlApplianceIndex=eqlApplianceIndex, eqlApplianceServiceStatusEntry=eqlApplianceServiceStatusEntry, eqlApplianceNodeChassisName=eqlApplianceNodeChassisName, eqlApplianceAdminAccountName=eqlApplianceAdminAccountName, eqlApplianceUserQueryTotalUsers=eqlApplianceUserQueryTotalUsers, eqlApplianceTypeEQLMemberMPVEntry=eqlApplianceTypeEQLMemberMPVEntry, eqlApplianceRequestId=eqlApplianceRequestId, eqlApplianceUnInitNodeVendor=eqlApplianceUnInitNodeVendor, eqlApplianceIPAddressType=eqlApplianceIPAddressType, eqlApplianceUniqueIDValue=eqlApplianceUniqueIDValue, eqlApplianceManualMappingDirection=eqlApplianceManualMappingDirection, eqlApplianceCIFSProtocolEntry=eqlApplianceCIFSProtocolEntry, eqlVolumeApplianceTable=eqlVolumeApplianceTable, eqlApplianceDnsServerInetAddressType=eqlApplianceDnsServerInetAddressType, eqlApplianceActiveDirectoryAccessibleControllers=eqlApplianceActiveDirectoryAccessibleControllers, eqlApplianceNdmpDmaServerIPAddressType=eqlApplianceNdmpDmaServerIPAddressType, eqlApplianceIPRowStatus=eqlApplianceIPRowStatus, eqlApplianceUserName=eqlApplianceUserName, eqlApplianceLocalUserRealName=eqlApplianceLocalUserRealName, eqlApplianceNetworkVLANTag=eqlApplianceNetworkVLANTag, eqlApplianceNdmpDmaServerTable=eqlApplianceNdmpDmaServerTable, eqlApplianceOpsFailureTable=eqlApplianceOpsFailureTable, eqlApplianceMultiStateOpsNodeIndex=eqlApplianceMultiStateOpsNodeIndex, eqlApplianceNodeLinkLocalIP=eqlApplianceNodeLinkLocalIP, eqlApplianceNodeIPRowStatus=eqlApplianceNodeIPRowStatus, eqlApplianceCredentialsDatabaseTable=eqlApplianceCredentialsDatabaseTable, eqlApplianceUnInitNodeState=eqlApplianceUnInitNodeState, eqlApplianceState=eqlApplianceState, eqlApplianceNetworkAdminState=eqlApplianceNetworkAdminState, eqlApplianceActiveDirectoryRowStatus=eqlApplianceActiveDirectoryRowStatus, eqlApplianceObjects=eqlApplianceObjects, eqlApplianceInitiatorRowStatus=eqlApplianceInitiatorRowStatus, eqlApplianceEQLMemberMPVTable=eqlApplianceEQLMemberMPVTable, eqlApplianceCIFSProtocolMaxConnections=eqlApplianceCIFSProtocolMaxConnections, eqlApplianceNetworkBlockIPAddressType=eqlApplianceNetworkBlockIPAddressType, eqlApplianceNodeRowStatus=eqlApplianceNodeRowStatus, eqlVolumeApplianceEntry=eqlVolumeApplianceEntry, eqlApplianceDnsSuffixEntry=eqlApplianceDnsSuffixEntry, eqlApplianceOpsFailureCode=eqlApplianceOpsFailureCode, eqlApplianceGroupQueryDomain=eqlApplianceGroupQueryDomain, eqlApplianceDnsSuffixIndex=eqlApplianceDnsSuffixIndex, eqlApplianceSyncedDataEntry=eqlApplianceSyncedDataEntry, eqlApplianceUnInitNodeClusterMPV=eqlApplianceUnInitNodeClusterMPV, eqlApplianceStatsTotalSnapshots=eqlApplianceStatsTotalSnapshots, eqlApplianceAllUsersTable=eqlApplianceAllUsersTable, eqlApplianceMPV=eqlApplianceMPV, eqlApplianceUnInitNodeProductType=eqlApplianceUnInitNodeProductType, eqlApplianceMultiStateOpsNodeIndex2=eqlApplianceMultiStateOpsNodeIndex2, eqlApplianceDnsServerRowStatus=eqlApplianceDnsServerRowStatus, eqlApplianceIPAddress=eqlApplianceIPAddress, eqlApplianceNetworkBondingMode=eqlApplianceNetworkBondingMode, eqlApplianceAction=eqlApplianceAction, eqlApplianceStatsTotalOptimizationSpaceSavings=eqlApplianceStatsTotalOptimizationSpaceSavings, eqlApplianceManualMappingTable=eqlApplianceManualMappingTable, eqlApplianceCredentialsDatabaseLdapServerAddress=eqlApplianceCredentialsDatabaseLdapServerAddress, eqlApplianceOpsFailureSubComponent=eqlApplianceOpsFailureSubComponent, eqlApplianceOpsFailureScope=eqlApplianceOpsFailureScope, eqlApplianceAdminAccountPassword=eqlApplianceAdminAccountPassword, eqlApplianceCIFSProtocolUnixCharacterSet=eqlApplianceCIFSProtocolUnixCharacterSet, eqlApplianceNdmpDmaServerRowStatus=eqlApplianceNdmpDmaServerRowStatus, eqlApplianceVolumeDiscoveryEntry=eqlApplianceVolumeDiscoveryEntry, eqlApplianceDnsSuffixTransactionState=eqlApplianceDnsSuffixTransactionState, eqlApplianceGroupQueryEntry=eqlApplianceGroupQueryEntry, eqlApplianceMultiStateOpsRowStatus=eqlApplianceMultiStateOpsRowStatus, eqlApplianceActiveDirectoryMemberOfDomain=eqlApplianceActiveDirectoryMemberOfDomain, eqlApplianceCredentialsDatabaseLdapBaseDn=eqlApplianceCredentialsDatabaseLdapBaseDn, eqlApplianceUniqueIDTable=eqlApplianceUniqueIDTable, eqlApplianceUnInitNodeModel=eqlApplianceUnInitNodeModel, eqlApplianceServiceStatusTable=eqlApplianceServiceStatusTable, eqlApplianceNetworkMTUSize=eqlApplianceNetworkMTUSize, eqlApplianceLastScheduleIndex=eqlApplianceLastScheduleIndex, eqlApplianceUserQueryUserType=eqlApplianceUserQueryUserType, eqlApplianceUnInitNodeMaintVersion=eqlApplianceUnInitNodeMaintVersion, eqlApplianceNetworkBlockNetmaskAddr=eqlApplianceNetworkBlockNetmaskAddr, eqlApplianceLocalUserPrimaryGroup=eqlApplianceLocalUserPrimaryGroup, eqlApplianceAdminAccountRowStatus=eqlApplianceAdminAccountRowStatus, eqlApplianceNodeGatewayAddrType=eqlApplianceNodeGatewayAddrType, eqlApplianceNodeMinorVersion=eqlApplianceNodeMinorVersion, eqlApplianceAllGroupsTable=eqlApplianceAllGroupsTable, eqlApplianceNodeIPAddressType=eqlApplianceNodeIPAddressType, eqlApplianceMultiStateOpsStatus=eqlApplianceMultiStateOpsStatus, eqlApplianceStatsTotalUsed=eqlApplianceStatsTotalUsed, eqlApplianceAllUsersId=eqlApplianceAllUsersId, eqlApplianceAllUsersName=eqlApplianceAllUsersName, eqlApplianceMultiStateOpsLongRunningOp=eqlApplianceMultiStateOpsLongRunningOp, eqlApplianceActiveDirectoryUserName=eqlApplianceActiveDirectoryUserName, eqlApplianceIPEntry=eqlApplianceIPEntry, eqlApplianceNodeLinkLocalIPType=eqlApplianceNodeLinkLocalIPType, eqlApplianceLocalGroupAccessRowStatus=eqlApplianceLocalGroupAccessRowStatus, eqlApplianceOptimizationScheduleStatus=eqlApplianceOptimizationScheduleStatus, eqlApplianceNodeProductType=eqlApplianceNodeProductType, eqlApplianceTypeEQLMemberMPVTable=eqlApplianceTypeEQLMemberMPVTable, eqlApplianceLocalUserRemarks=eqlApplianceLocalUserRemarks, eqlApplianceTypeEQLMemberMPV=eqlApplianceTypeEQLMemberMPV, eqlApplianceNdmpDmaServerIPAddress=eqlApplianceNdmpDmaServerIPAddress, eqlApplianceStatsTotalCapacity=eqlApplianceStatsTotalCapacity, eqlApplianceLicenseFileTable=eqlApplianceLicenseFileTable, eqlApplianceOpsPercentage=eqlApplianceOpsPercentage, eqlVolumeApplianceNodeIndex=eqlVolumeApplianceNodeIndex, eqlApplianceOverallState=eqlApplianceOverallState, eqlApplianceLicenseTable=eqlApplianceLicenseTable, eqlApplianceAllGroupsSource=eqlApplianceAllGroupsSource, eqlApplianceActiveDirectoryAccessTable=eqlApplianceActiveDirectoryAccessTable, eqlApplianceLocalGroupAccessTable=eqlApplianceLocalGroupAccessTable, eqlApplianceOpsFailureMessage=eqlApplianceOpsFailureMessage, eqlApplianceNodePeerIndex=eqlApplianceNodePeerIndex, eqlApplianceNodeHealthFailureTable=eqlApplianceNodeHealthFailureTable, eqlApplianceMgmtPort=eqlApplianceMgmtPort, eqlApplianceNodeHealthFailureIndex=eqlApplianceNodeHealthFailureIndex, eqlApplianceNetworkRowStatus=eqlApplianceNetworkRowStatus, eqlApplianceCIFSProtocolAuthenticationEnabled=eqlApplianceCIFSProtocolAuthenticationEnabled, eqlApplianceOptimizationScheduleRowStatus=eqlApplianceOptimizationScheduleRowStatus, eqlApplianceMappingPolicyAcquireMapping=eqlApplianceMappingPolicyAcquireMapping, eqlApplianceNetworkType=eqlApplianceNetworkType, eqlApplianceEntry=eqlApplianceEntry, eqlApplianceOptimizationContainerIndex=eqlApplianceOptimizationContainerIndex, eqlApplianceNodeTable=eqlApplianceNodeTable, eqlApplianceNetworkBlockIPAddress=eqlApplianceNetworkBlockIPAddress, eqlApplianceUserQueryUserName=eqlApplianceUserQueryUserName, eqlApplianceLicenseType=eqlApplianceLicenseType, eqlApplianceActiveDirectoryWorkGroup=eqlApplianceActiveDirectoryWorkGroup, eqlApplianceConfigStatus=eqlApplianceConfigStatus, eqlApplianceVolumeDiscoveryTable=eqlApplianceVolumeDiscoveryTable, eqlApplianceUserQueryDBType=eqlApplianceUserQueryDBType, eqlApplianceEQLGroupMPV=eqlApplianceEQLGroupMPV, eqlApplianceGroupQueryGroupName=eqlApplianceGroupQueryGroupName, eqlApplianceUnInitNodeMinorVersion=eqlApplianceUnInitNodeMinorVersion, eqlApplianceInitiatorsTable=eqlApplianceInitiatorsTable, eqlApplianceAdminAccountEntry=eqlApplianceAdminAccountEntry, eqlApplianceMgmtAddressType=eqlApplianceMgmtAddressType, eqlApplianceLocalUserSid=eqlApplianceLocalUserSid, eqlApplianceMultiStateOpsEntry=eqlApplianceMultiStateOpsEntry, eqlApplianceActiveDirectoryAccessEntry=eqlApplianceActiveDirectoryAccessEntry, eqlApplianceNodeInitiatorName=eqlApplianceNodeInitiatorName, eqlApplianceOpsType=eqlApplianceOpsType, eqlApplianceEQLMemberMPVEntry=eqlApplianceEQLMemberMPVEntry, eqlApplianceManualMappingMappedToUserName=eqlApplianceManualMappingMappedToUserName, eqlApplianceAllUsersEntry=eqlApplianceAllUsersEntry, eqlApplianceLocalGroupAccessEntry=eqlApplianceLocalGroupAccessEntry, eqlApplianceStatsEntry=eqlApplianceStatsEntry, eqlApplianceInitiatorName=eqlApplianceInitiatorName, eqlApplianceNodeIPAddress=eqlApplianceNodeIPAddress, eqlApplianceNetworkBlockNetmaskAddrType=eqlApplianceNetworkBlockNetmaskAddrType, eqlApplianceCredentialsDatabaseNisDomain=eqlApplianceCredentialsDatabaseNisDomain, eqlApplianceLocalGroupName=eqlApplianceLocalGroupName, eqlApplianceSyncedDataIndexPayload=eqlApplianceSyncedDataIndexPayload, eqlApplianceNdmpDmaServerEntry=eqlApplianceNdmpDmaServerEntry, eqlApplianceClusterMPV=eqlApplianceClusterMPV, eqlApplianceNodeConfigState=eqlApplianceNodeConfigState, eqlApplianceCredentialsDatabaseRowStatus=eqlApplianceCredentialsDatabaseRowStatus, eqlApplianceOpsFailureType=eqlApplianceOpsFailureType, eqlApplianceModule=eqlApplianceModule, eqlApplianceNumberOfNodes=eqlApplianceNumberOfNodes, eqlApplianceManualMappingRowStatus=eqlApplianceManualMappingRowStatus, eqlApplianceAllGroupsEntry=eqlApplianceAllGroupsEntry, eqlApplianceMaintVersion=eqlApplianceMaintVersion, eqlApplianceGroupQueryGroupSource=eqlApplianceGroupQueryGroupSource, eqlApplianceMappingPolicyTable=eqlApplianceMappingPolicyTable, eqlApplianceVolumeDiscoveryRowStatus=eqlApplianceVolumeDiscoveryRowStatus, eqlApplianceSyncedDataState=eqlApplianceSyncedDataState, eqlVolumeApplianceIndex=eqlVolumeApplianceIndex, eqlApplianceSyncedDataTable=eqlApplianceSyncedDataTable, eqlApplianceGroupQueryTable=eqlApplianceGroupQueryTable, eqlApplianceUserQueryPageNumber=eqlApplianceUserQueryPageNumber, eqlApplianceManualMappingEntry=eqlApplianceManualMappingEntry, eqlApplianceActiveDirectoryDescription=eqlApplianceActiveDirectoryDescription, eqlApplianceMappingPolicyAllowNotMapped=eqlApplianceMappingPolicyAllowNotMapped, eqlApplianceLicenseRowStatus=eqlApplianceLicenseRowStatus, eqlApplianceAdminAccountTable=eqlApplianceAdminAccountTable, eqlApplianceOpsFailureIndex=eqlApplianceOpsFailureIndex, eqlApplianceTypeEQLGroupMPV=eqlApplianceTypeEQLGroupMPV, eqlApplianceCredentialsDatabaseEntry=eqlApplianceCredentialsDatabaseEntry, eqlApplianceActiveDirectoryDomainControllers=eqlApplianceActiveDirectoryDomainControllers, eqlApplianceLocalUserAccess=eqlApplianceLocalUserAccess, eqlApplianceOpsEntry=eqlApplianceOpsEntry, eqlApplianceCIFSProtocolTable=eqlApplianceCIFSProtocolTable, eqlApplianceStatsNumberOfContainers=eqlApplianceStatsNumberOfContainers, eqlApplianceNodeServiceTag=eqlApplianceNodeServiceTag, eqlApplianceLocalGroupGsid=eqlApplianceLocalGroupGsid, eqlApplianceLicenseFileEntry=eqlApplianceLicenseFileEntry, eqlApplianceStatsNumberOfCifsShares=eqlApplianceStatsNumberOfCifsShares, eqlApplianceOpsTable=eqlApplianceOpsTable, eqlApplianceEnableFTP=eqlApplianceEnableFTP, eqlApplianceGroupQueryPageNumber=eqlApplianceGroupQueryPageNumber, eqlApplianceNodeHealthFailureType=eqlApplianceNodeHealthFailureType, eqlApplianceMultiStateOpsServiceTag=eqlApplianceMultiStateOpsServiceTag, eqlApplianceMultiStateOpsCurNodeIndex=eqlApplianceMultiStateOpsCurNodeIndex, eqlApplianceDnsServerTransactionState=eqlApplianceDnsServerTransactionState, eqlApplianceGroupQuerySearchString=eqlApplianceGroupQuerySearchString, eqlApplianceUnInitNodeChassisTag=eqlApplianceUnInitNodeChassisTag, eqlApplianceActiveDirectoryStatus=eqlApplianceActiveDirectoryStatus, eqlApplianceNdmpDesiredState=eqlApplianceNdmpDesiredState, eqlApplianceNodeIPEntry=eqlApplianceNodeIPEntry, eqlApplianceDescription=eqlApplianceDescription, eqlApplianceNodeEntry=eqlApplianceNodeEntry, eqlApplianceUnInitNodeLinkLocalIPType=eqlApplianceUnInitNodeLinkLocalIPType, eqlApplianceMultiStateOpsRequestId=eqlApplianceMultiStateOpsRequestId, eqlApplianceNodeHealthFailureMessage=eqlApplianceNodeHealthFailureMessage, eqlApplianceOpsIndex=eqlApplianceOpsIndex, eqlApplianceMultiStateOpsTable=eqlApplianceMultiStateOpsTable, eqlApplianceLicenseEntry=eqlApplianceLicenseEntry, eqlApplianceNodeName=eqlApplianceNodeName, eqlApplianceUniqueIDValueLen=eqlApplianceUniqueIDValueLen, eqlApplianceUserQueryUserSource=eqlApplianceUserQueryUserSource, eqlApplianceGroupQueryDBType=eqlApplianceGroupQueryDBType, eqlApplianceNodeStatusEntry=eqlApplianceNodeStatusEntry, eqlApplianceGroupQueryGroupId=eqlApplianceGroupQueryGroupId, eqlApplianceLocalGroupGid=eqlApplianceLocalGroupGid)
mibBuilder.exportSymbols("EQLAPPLIANCE-MIB", eqlApplianceStatsTotalFree=eqlApplianceStatsTotalFree, eqlApplianceOpsFailureEntry=eqlApplianceOpsFailureEntry, eqlApplianceCredentialsDatabaseType=eqlApplianceCredentialsDatabaseType, eqlApplianceOpsStatus=eqlApplianceOpsStatus, eqlApplianceUnInitNodesTable=eqlApplianceUnInitNodesTable, eqlApplianceUnInitNodeLinkLocalIP=eqlApplianceUnInitNodeLinkLocalIP, eqlApplianceNodeVendor=eqlApplianceNodeVendor, eqlApplianceLocalUserAccessTable=eqlApplianceLocalUserAccessTable, eqlApplianceDnsSuffixTable=eqlApplianceDnsSuffixTable, eqlApplianceAllGroupsType=eqlApplianceAllGroupsType, eqlApplianceRowStatus=eqlApplianceRowStatus, eqlApplianceDesiredServiceMode=eqlApplianceDesiredServiceMode, eqlApplianceUserQueryEntry=eqlApplianceUserQueryEntry, eqlApplianceUserQueryUserPrimaryGroup=eqlApplianceUserQueryUserPrimaryGroup, eqlApplianceActiveDirectoryPassword=eqlApplianceActiveDirectoryPassword, eqlApplianceActiveDirectoryAdvancedSettings=eqlApplianceActiveDirectoryAdvancedSettings, eqlApplianceUnInitNodeMajorVersion=eqlApplianceUnInitNodeMajorVersion, eqlApplianceSyncedDataEntryPayload=eqlApplianceSyncedDataEntryPayload, eqlApplianceLocalUserAccessEntry=eqlApplianceLocalUserAccessEntry, eqlApplianceNodeGatewayAddr=eqlApplianceNodeGatewayAddr, eqlApplianceNodeStatusTable=eqlApplianceNodeStatusTable, eqlApplianceCIFSProtocolAuthenticationType=eqlApplianceCIFSProtocolAuthenticationType, eqlApplianceActiveDirectoryDomain=eqlApplianceActiveDirectoryDomain, eqlApplianceVolumeDiscoveryVolumeStatus=eqlApplianceVolumeDiscoveryVolumeStatus, eqlApplianceNodeIPTable=eqlApplianceNodeIPTable, eqlApplianceUniqueIDEntry=eqlApplianceUniqueIDEntry, eqlApplianceMultiStateOpsAction=eqlApplianceMultiStateOpsAction, eqlApplianceLocalUserName=eqlApplianceLocalUserName, eqlApplianceTable=eqlApplianceTable, eqlApplianceUniqueID=eqlApplianceUniqueID, eqlApplianceOptimizationScheduleEntry=eqlApplianceOptimizationScheduleEntry, eqlApplianceLicenseFileRowStatus=eqlApplianceLicenseFileRowStatus, eqlApplianceAdminStatus=eqlApplianceAdminStatus, eqlApplianceMappingPolicyRowStatus=eqlApplianceMappingPolicyRowStatus, eqlApplianceMultiStateOpsServiceTag2=eqlApplianceMultiStateOpsServiceTag2, eqlApplianceActiveDirectoryWinsServer=eqlApplianceActiveDirectoryWinsServer, eqlApplianceOpsRequestId=eqlApplianceOpsRequestId, eqlApplianceNetworksTable=eqlApplianceNetworksTable, eqlApplianceLicenseFeatureId=eqlApplianceLicenseFeatureId, eqlApplianceUnInitNodeServiceTag=eqlApplianceUnInitNodeServiceTag, eqlApplianceNodeStatusNodeState=eqlApplianceNodeStatusNodeState, eqlApplianceInitiatorsEntry=eqlApplianceInitiatorsEntry, eqlApplianceCIFSProtocolDosCodePage=eqlApplianceCIFSProtocolDosCodePage, eqlApplianceLicenseUsed=eqlApplianceLicenseUsed, eqlApplianceGroupQueryRowStatus=eqlApplianceGroupQueryRowStatus, eqlApplianceMultiStateOpsType=eqlApplianceMultiStateOpsType, eqlApplianceLocalUserAccessRowStatus=eqlApplianceLocalUserAccessRowStatus, eqlApplianceLocalUserPassword=eqlApplianceLocalUserPassword, eqlApplianceNodeOpsRequestId=eqlApplianceNodeOpsRequestId, eqlApplianceUserQueryUserId=eqlApplianceUserQueryUserId, eqlApplianceMajorVersion=eqlApplianceMajorVersion, eqlApplianceNodeMaintVersion=eqlApplianceNodeMaintVersion, eqlApplianceAllGroupsName=eqlApplianceAllGroupsName, eqlApplianceDnsServerEntry=eqlApplianceDnsServerEntry, eqlApplianceStatsNumberOfNfsExports=eqlApplianceStatsNumberOfNfsExports, eqlApplianceCredentialsDatabaseNisServerAddress=eqlApplianceCredentialsDatabaseNisServerAddress, eqlApplianceUserQueryUserDomain=eqlApplianceUserQueryUserDomain, eqlApplianceVolumeDiscoveryVolumeNodeAccessibleStatus=eqlApplianceVolumeDiscoveryVolumeNodeAccessibleStatus, eqlApplianceGroupQueryPageSize=eqlApplianceGroupQueryPageSize, eqlApplianceNdmpClientPort=eqlApplianceNdmpClientPort, eqlApplianceOpsFailureComponent=eqlApplianceOpsFailureComponent, eqlApplianceVolumeDiscoveryVolumeLunNumber=eqlApplianceVolumeDiscoveryVolumeLunNumber, eqlApplianceGroupQueryTotalGroups=eqlApplianceGroupQueryTotalGroups, eqlApplianceNodeChassisTag=eqlApplianceNodeChassisTag, eqlApplianceNdmpUserName=eqlApplianceNdmpUserName, eqlApplianceNodeModel=eqlApplianceNodeModel, eqlApplianceStatsTable=eqlApplianceStatsTable, eqlApplianceMgmtAddress=eqlApplianceMgmtAddress, eqlApplianceLicenseFileName=eqlApplianceLicenseFileName, eqlApplianceDomainName=eqlApplianceDomainName, eqlApplianceOptimizationPolicyIndex=eqlApplianceOptimizationPolicyIndex, eqlApplianceServiceCriticalConditions=eqlApplianceServiceCriticalConditions, eqlApplianceDnsServerTable=eqlApplianceDnsServerTable, eqlApplianceMinorVersion=eqlApplianceMinorVersion, eqlApplianceAllGroupsRowStatus=eqlApplianceAllGroupsRowStatus, eqlApplianceNetworksEntry=eqlApplianceNetworksEntry, eqlApplianceOpsRowStatus=eqlApplianceOpsRowStatus, eqlApplianceSyncedDataType=eqlApplianceSyncedDataType, eqlApplianceDnsSuffixString=eqlApplianceDnsSuffixString, eqlApplianceNetworkID=eqlApplianceNetworkID, eqlApplianceNdmpPasswd=eqlApplianceNdmpPasswd, eqlApplianceUserQuerySearchString=eqlApplianceUserQuerySearchString, eqlApplianceDnsServerInetAddress=eqlApplianceDnsServerInetAddress, eqlApplianceStatsNumberOfSnapshots=eqlApplianceStatsNumberOfSnapshots, eqlApplianceUnInitNodeRowStatus=eqlApplianceUnInitNodeRowStatus, eqlApplianceLocalUserUid=eqlApplianceLocalUserUid, eqlApplianceNdmpTable=eqlApplianceNdmpTable, eqlApplianceClusterMinorVersion=eqlApplianceClusterMinorVersion, eqlApplianceLicenseEntitlementId=eqlApplianceLicenseEntitlementId, eqlApplianceType=eqlApplianceType, eqlApplianceNodeHealthFailureCode=eqlApplianceNodeHealthFailureCode, eqlApplianceDnsServerIndex=eqlApplianceDnsServerIndex, eqlApplianceMPVTable=eqlApplianceMPVTable, eqlApplianceCIFSProtocolRowStatus=eqlApplianceCIFSProtocolRowStatus, eqlApplianceDnsSuffixRowStatus=eqlApplianceDnsSuffixRowStatus, eqlApplianceMultiStateOpsPercentage=eqlApplianceMultiStateOpsPercentage, eqlApplianceMappingPolicyEntry=eqlApplianceMappingPolicyEntry, eqlApplianceUniqueIDType=eqlApplianceUniqueIDType, eqlApplianceTypeEQLGroupMPVEntry=eqlApplianceTypeEQLGroupMPVEntry, eqlApplianceNdmpRowStatus=eqlApplianceNdmpRowStatus, eqlApplianceClusterMaintVersion=eqlApplianceClusterMaintVersion, eqlApplianceNetworkName=eqlApplianceNetworkName, eqlApplianceUserQueryRowStatus=eqlApplianceUserQueryRowStatus, eqlApplianceNodeHealthFailureSubComponent=eqlApplianceNodeHealthFailureSubComponent, eqlApplianceDomainListEntry=eqlApplianceDomainListEntry, eqlApplianceEQLMemberMPV=eqlApplianceEQLMemberMPV, eqlApplianceNodeHealthFailureEntry=eqlApplianceNodeHealthFailureEntry, eqlApplianceServiceWarningConditions=eqlApplianceServiceWarningConditions)
