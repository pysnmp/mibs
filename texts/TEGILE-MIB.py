#
# PySNMP MIB module TEGILE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/tegile/TEGILE-MIB
# Produced by pysmi-1.1.12 at Tue May 28 12:18:34 2024
# On host fv-az1567-4 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ObjectIdentity, Counter64, IpAddress, enterprises, ModuleIdentity, TimeTicks, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, Unsigned32, Counter32, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "IpAddress", "enterprises", "ModuleIdentity", "TimeTicks", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "Unsigned32", "Counter32", "Gauge32", "iso")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
tegile = ModuleIdentity((1, 3, 6, 1, 4, 1, 43906))
tegile.setRevisions(('2015-09-23 10:10', '2016-04-06 10:10', '2016-09-10 10:10', '2017-03-21 10:10',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tegile.setRevisionsDescriptions(('Tegile Storage 1.0.0.0 MIB', 'Tegile Storage 1.0.0.1 MIB. Added traps for Disk Slow IO and Login failures', 'Tegile Storage 1.0.0.2 MIB. Added NVDIMM specific notifications', 'Tegile Storage 1.0.1.0 MIB. Changed indexing for disk object. Made entries READ-ONLY',))
if mibBuilder.loadTexts: tegile.setLastUpdated('201604061010Z')
if mibBuilder.loadTexts: tegile.setOrganization('Tegile Storage, Inc.')
if mibBuilder.loadTexts: tegile.setContactInfo('support@tegile.com')
if mibBuilder.loadTexts: tegile.setDescription('Tegile SNMP Definition')
tegileArray = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1))
tegileArray_notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 2)).setLabel("tegileArray-notifications")
properties = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 1))
globalStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 2))
disks = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 3))
pools = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 4))
network = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 5))
sanProperties = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 6))
vmwareNFSDatastores = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 7))
haResources = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 8))
poolProjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3))
projectLUNs = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2))
projectShares = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3))
iscsiProperties = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1))
fcProperties = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2))
iscsiTargets = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1))
iscsiInitiators = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 2))
fcTargets = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1))
fcInitiators = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 2))
haControllerA_Name = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 1, 1), OctetString()).setLabel("haControllerA-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: haControllerA_Name.setStatus('current')
if mibBuilder.loadTexts: haControllerA_Name.setDescription('HA Controller A Name')
haControllerA_IPAddr = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 1, 2), IpAddress()).setLabel("haControllerA-IPAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: haControllerA_IPAddr.setStatus('current')
if mibBuilder.loadTexts: haControllerA_IPAddr.setDescription('HA Controller A IP address')
haControllerA_SoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 1, 3), OctetString()).setLabel("haControllerA-SoftwareVersion").setMaxAccess("readonly")
if mibBuilder.loadTexts: haControllerA_SoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: haControllerA_SoftwareVersion.setDescription('HA Controller A Software version')
haControllerA_Uptime = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 1, 4), OctetString()).setLabel("haControllerA-Uptime").setMaxAccess("readonly")
if mibBuilder.loadTexts: haControllerA_Uptime.setStatus('current')
if mibBuilder.loadTexts: haControllerA_Uptime.setDescription('HA Controller A uptime')
haControllerB_Name = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 1, 5), OctetString()).setLabel("haControllerB-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: haControllerB_Name.setStatus('current')
if mibBuilder.loadTexts: haControllerB_Name.setDescription('HA Controller B Name')
haControllerB_IPAddr = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 1, 6), IpAddress()).setLabel("haControllerB-IPAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: haControllerB_IPAddr.setStatus('current')
if mibBuilder.loadTexts: haControllerB_IPAddr.setDescription('HA Controller B IP address')
haControllerB_SoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 1, 7), OctetString()).setLabel("haControllerB-SoftwareVersion").setMaxAccess("readonly")
if mibBuilder.loadTexts: haControllerB_SoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: haControllerB_SoftwareVersion.setDescription('HA Controller B Software version')
haControllerB_Uptime = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 1, 8), OctetString()).setLabel("haControllerB-Uptime").setMaxAccess("readonly")
if mibBuilder.loadTexts: haControllerB_Uptime.setStatus('current')
if mibBuilder.loadTexts: haControllerB_Uptime.setDescription('HA Controller B uptime')
controllerHardwareModel = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerHardwareModel.setStatus('current')
if mibBuilder.loadTexts: controllerHardwareModel.setDescription('HA Controller B Hardware model number')
snmpAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentVersion.setStatus('current')
if mibBuilder.loadTexts: snmpAgentVersion.setDescription('Tegile SNMP agent version')
cpuTotalUsage = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTotalUsage.setStatus('current')
if mibBuilder.loadTexts: cpuTotalUsage.setDescription('Total CPU usage')
cpuSystemCalls = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuSystemCalls.setStatus('current')
if mibBuilder.loadTexts: cpuSystemCalls.setDescription('Number of system calls')
cpuInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuInterrupts.setStatus('current')
if mibBuilder.loadTexts: cpuInterrupts.setDescription('Number of CPU interrupts')
cacheTotalWriteMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalWriteMbps.setStatus('current')
if mibBuilder.loadTexts: cacheTotalWriteMbps.setDescription('Cache writes, MBs per second')
cacheTotalReadMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalReadMbps.setStatus('current')
if mibBuilder.loadTexts: cacheTotalReadMbps.setDescription('Cache reads, MBs per second')
cacheTotalWriteIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalWriteIops.setStatus('current')
if mibBuilder.loadTexts: cacheTotalWriteIops.setDescription('Cache reads, IOs per second')
cacheTotalReadIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalReadIops.setStatus('current')
if mibBuilder.loadTexts: cacheTotalReadIops.setDescription('Cache reads, IOs per second')
cacheRAMReads = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheRAMReads.setStatus('current')
if mibBuilder.loadTexts: cacheRAMReads.setDescription('Cache RAM reads')
cacheSSDReads = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSSDReads.setStatus('current')
if mibBuilder.loadTexts: cacheSSDReads.setDescription('Cache SSD reads')
diskTotalWriteMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTotalWriteMbps.setStatus('current')
if mibBuilder.loadTexts: diskTotalWriteMbps.setDescription('Disk writes, MBs per second')
diskTotalReadMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTotalReadMbps.setStatus('current')
if mibBuilder.loadTexts: diskTotalReadMbps.setDescription('Disk reads, MBs per second')
diskTotalWriteIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTotalWriteIops.setStatus('current')
if mibBuilder.loadTexts: diskTotalWriteIops.setDescription('Disk writes, IOs per second')
diskTotalReadIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTotalReadIops.setStatus('current')
if mibBuilder.loadTexts: diskTotalReadIops.setDescription('Disk reads, IOs per second')
diskDataWriteMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskDataWriteMbps.setStatus('current')
if mibBuilder.loadTexts: diskDataWriteMbps.setDescription('Disk data writes, MBs per second')
diskDataReadMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskDataReadMbps.setStatus('current')
if mibBuilder.loadTexts: diskDataReadMbps.setDescription('Disk data reads, MBs per second')
diskDataWriteIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskDataWriteIops.setStatus('current')
if mibBuilder.loadTexts: diskDataWriteIops.setDescription('Disk data writes, IOs per second')
diskDataReadIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskDataReadIops.setStatus('current')
if mibBuilder.loadTexts: diskDataReadIops.setDescription('Disk data reads, IOs per second')
diskAvgWriteLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskAvgWriteLatency.setStatus('current')
if mibBuilder.loadTexts: diskAvgWriteLatency.setDescription('Disk average write latency')
diskAvgReadLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskAvgReadLatency.setStatus('current')
if mibBuilder.loadTexts: diskAvgReadLatency.setDescription('Disk average read latency')
diskIOCount = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskIOCount.setStatus('current')
if mibBuilder.loadTexts: diskIOCount.setDescription('Disk total io count')
diskRandomIOCount = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskRandomIOCount.setStatus('current')
if mibBuilder.loadTexts: diskRandomIOCount.setDescription('Disk random io count')
diskSequentialIOCount = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSequentialIOCount.setStatus('current')
if mibBuilder.loadTexts: diskSequentialIOCount.setDescription('Disk sequential io count')
poolTotalWriteMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolTotalWriteMbps.setStatus('current')
if mibBuilder.loadTexts: poolTotalWriteMbps.setDescription('Pool writes, MBs per second')
poolTotalReadMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolTotalReadMbps.setStatus('current')
if mibBuilder.loadTexts: poolTotalReadMbps.setDescription('Pool reads, MBs per second')
poolTotalWriteIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolTotalWriteIops.setStatus('current')
if mibBuilder.loadTexts: poolTotalWriteIops.setDescription('Pool reads, IOs per second')
poolTotalReadIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolTotalReadIops.setStatus('current')
if mibBuilder.loadTexts: poolTotalReadIops.setDescription('Pool reads, IOs per second')
poolAvgWriteLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolAvgWriteLatency.setStatus('current')
if mibBuilder.loadTexts: poolAvgWriteLatency.setDescription('Pool average write latency')
poolAvgReadLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolAvgReadLatency.setStatus('current')
if mibBuilder.loadTexts: poolAvgReadLatency.setDescription('Pool average read latency')
cifsTotalWriteMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTotalWriteMbps.setStatus('current')
if mibBuilder.loadTexts: cifsTotalWriteMbps.setDescription('CIFS writes, MBs per second')
cifsTotalReadMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTotalReadMbps.setStatus('current')
if mibBuilder.loadTexts: cifsTotalReadMbps.setDescription('CIFS reads, MBs per second')
cifsTotalWriteIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTotalWriteIops.setStatus('current')
if mibBuilder.loadTexts: cifsTotalWriteIops.setDescription('CIFS reads, IOs per second')
cifsTotalReadIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTotalReadIops.setStatus('current')
if mibBuilder.loadTexts: cifsTotalReadIops.setDescription('CIFS reads, IOs per second')
cifsAvgWriteLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAvgWriteLatency.setStatus('current')
if mibBuilder.loadTexts: cifsAvgWriteLatency.setDescription('CIFS average write latency')
cifsAvgReadLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAvgReadLatency.setStatus('current')
if mibBuilder.loadTexts: cifsAvgReadLatency.setDescription('CIFS average read latency')
nfsTotalWriteMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsTotalWriteMbps.setStatus('current')
if mibBuilder.loadTexts: nfsTotalWriteMbps.setDescription('NFS writes, MBs per second')
nfsTotalReadMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsTotalReadMbps.setStatus('current')
if mibBuilder.loadTexts: nfsTotalReadMbps.setDescription('NFS reads, MBs per second')
nfsTotalWriteIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsTotalWriteIops.setStatus('current')
if mibBuilder.loadTexts: nfsTotalWriteIops.setDescription('NFS reads, IOs per second')
nfsTotalReadIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsTotalReadIops.setStatus('current')
if mibBuilder.loadTexts: nfsTotalReadIops.setDescription('NFS reads, IOs per second')
nfsAvgWriteLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsAvgWriteLatency.setStatus('current')
if mibBuilder.loadTexts: nfsAvgWriteLatency.setDescription('NFS average write latency')
nfsAvgReadLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsAvgReadLatency.setStatus('current')
if mibBuilder.loadTexts: nfsAvgReadLatency.setDescription('NFS average read latency')
iscsiTotalWriteMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTotalWriteMbps.setStatus('current')
if mibBuilder.loadTexts: iscsiTotalWriteMbps.setDescription('iSCSI writes, MBs per second')
iscsiTotalReadMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTotalReadMbps.setStatus('current')
if mibBuilder.loadTexts: iscsiTotalReadMbps.setDescription('iSCSI reads, MBs per second')
iscsiWriteIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiWriteIops.setStatus('current')
if mibBuilder.loadTexts: iscsiWriteIops.setDescription('iSCSI reads, IOs per second')
iscsiTotalReadIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTotalReadIops.setStatus('current')
if mibBuilder.loadTexts: iscsiTotalReadIops.setDescription('iSCSI reads, IOs per second')
iscsiAvgWriteLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiAvgWriteLatency.setStatus('current')
if mibBuilder.loadTexts: iscsiAvgWriteLatency.setDescription('iSCSI average write latency')
iscsiAvgReadLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiAvgReadLatency.setStatus('current')
if mibBuilder.loadTexts: iscsiAvgReadLatency.setDescription('iSCSI average read latency')
fcTotalWriteMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 47), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTotalWriteMbps.setStatus('current')
if mibBuilder.loadTexts: fcTotalWriteMbps.setDescription('FC writes, MBs per second')
fcTotalReadMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 48), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTotalReadMbps.setStatus('current')
if mibBuilder.loadTexts: fcTotalReadMbps.setDescription('FC reads, MBs per second')
fcTotalWriteIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTotalWriteIops.setStatus('current')
if mibBuilder.loadTexts: fcTotalWriteIops.setDescription('FC reads, IOs per second')
fcTotalReadIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTotalReadIops.setStatus('current')
if mibBuilder.loadTexts: fcTotalReadIops.setDescription('FC reads, IOs per second')
fcAvgWriteLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 51), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcAvgWriteLatency.setStatus('current')
if mibBuilder.loadTexts: fcAvgWriteLatency.setDescription('FC average write latency')
fcAvgReadLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 52), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcAvgReadLatency.setStatus('current')
if mibBuilder.loadTexts: fcAvgReadLatency.setDescription('FC average read latency')
vmwareNFSDatastoresTotalWriteMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 53), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoresTotalWriteMbps.setStatus('current')
if mibBuilder.loadTexts: vmwareNFSDatastoresTotalWriteMbps.setDescription('VMWare NFS Datastores total writes, MBs per second')
vmwareNFSDatastoresTotalReadMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 54), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoresTotalReadMbps.setStatus('current')
if mibBuilder.loadTexts: vmwareNFSDatastoresTotalReadMbps.setDescription('VMWare NFS Datastores total reads, MBs per second')
vmwareNFSDatastoresTotalWriteIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 55), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoresTotalWriteIops.setStatus('current')
if mibBuilder.loadTexts: vmwareNFSDatastoresTotalWriteIops.setDescription('VMWare NFS Datastores total reads, IOs per second')
vmwareNFSDatastoresTotalReadIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 56), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoresTotalReadIops.setStatus('current')
if mibBuilder.loadTexts: vmwareNFSDatastoresTotalReadIops.setDescription('VMWare NFS Datastores total reads, IOs per second')
vmwareNFSDatastoresAvgWriteLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 57), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoresAvgWriteLatency.setStatus('current')
if mibBuilder.loadTexts: vmwareNFSDatastoresAvgWriteLatency.setDescription('VMWare NFS Datastores average write latency')
vmwareNFSDatastoresAvgReadLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 58), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoresAvgReadLatency.setStatus('current')
if mibBuilder.loadTexts: vmwareNFSDatastoresAvgReadLatency.setDescription('VMWare NFS Datastores average read latency')
networkTotalReceiveMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 59), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkTotalReceiveMbps.setStatus('current')
if mibBuilder.loadTexts: networkTotalReceiveMbps.setDescription('Network received MB per second')
networkTotalTransmitMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 60), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkTotalTransmitMbps.setStatus('current')
if mibBuilder.loadTexts: networkTotalTransmitMbps.setDescription('Network transmitted MB per second')
diskCount = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskCount.setStatus('current')
if mibBuilder.loadTexts: diskCount.setDescription('disks count')
diskTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 3, 2), )
if mibBuilder.loadTexts: diskTable.setStatus('current')
if mibBuilder.loadTexts: diskTable.setDescription('Disk information table')
diskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 3, 2, 1), ).setIndexNames((0, "TEGILE-MIB", "diskChassisIdx"), (0, "TEGILE-MIB", "diskIndex"))
if mibBuilder.loadTexts: diskEntry.setStatus('current')
if mibBuilder.loadTexts: diskEntry.setDescription('A row of disk information')
diskChassisIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: diskChassisIdx.setStatus('current')
if mibBuilder.loadTexts: diskChassisIdx.setDescription('Disk chassis index')
diskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 3, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: diskIndex.setStatus('current')
if mibBuilder.loadTexts: diskIndex.setDescription('Disk Index.')
diskAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskAlias.setStatus('current')
if mibBuilder.loadTexts: diskAlias.setDescription('Disk alias')
diskSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSizeLow.setStatus('current')
if mibBuilder.loadTexts: diskSizeLow.setDescription('Disk size in bytes - low order bytes')
diskSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSizeHigh.setStatus('current')
if mibBuilder.loadTexts: diskSizeHigh.setDescription('Disk size in bytes - high order bytes')
diskState = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 3, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskState.setStatus('current')
if mibBuilder.loadTexts: diskState.setDescription('Disk state')
diskType = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 3, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskType.setStatus('current')
if mibBuilder.loadTexts: diskType.setDescription('Disk type')
diskPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 3, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPoolName.setStatus('current')
if mibBuilder.loadTexts: diskPoolName.setDescription('Name of the pool disk belongs to')
poolCount = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolCount.setStatus('current')
if mibBuilder.loadTexts: poolCount.setDescription('Pool count')
poolTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2), )
if mibBuilder.loadTexts: poolTable.setStatus('current')
if mibBuilder.loadTexts: poolTable.setDescription('Pool information table')
poolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1), ).setIndexNames((0, "TEGILE-MIB", "poolIndex"))
if mibBuilder.loadTexts: poolEntry.setStatus('current')
if mibBuilder.loadTexts: poolEntry.setDescription('A row of Pool information')
poolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: poolIndex.setStatus('current')
if mibBuilder.loadTexts: poolIndex.setDescription('Pool Index.')
poolName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolName.setStatus('current')
if mibBuilder.loadTexts: poolName.setDescription('Pool Name')
poolState = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolState.setStatus('current')
if mibBuilder.loadTexts: poolState.setDescription('Pool current state')
poolHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolHealth.setStatus('current')
if mibBuilder.loadTexts: poolHealth.setDescription('Pool health status')
poolOwnerController = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolOwnerController.setStatus('current')
if mibBuilder.loadTexts: poolOwnerController.setDescription('Pool current owner node')
poolProjectCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolProjectCount.setStatus('current')
if mibBuilder.loadTexts: poolProjectCount.setDescription('Count of projects in the Pool')
poolSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolSizeLow.setStatus('current')
if mibBuilder.loadTexts: poolSizeLow.setDescription('Size of the Pool in bytes - low order bytes')
poolSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolSizeHigh.setStatus('current')
if mibBuilder.loadTexts: poolSizeHigh.setDescription('Size of the Pool in bytes - high order bytes')
poolUsedSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolUsedSizeLow.setStatus('current')
if mibBuilder.loadTexts: poolUsedSizeLow.setDescription('Size of used space on Pool in bytes - low order bytes')
poolUsedSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolUsedSizeHigh.setStatus('current')
if mibBuilder.loadTexts: poolUsedSizeHigh.setDescription('Size of used space on Pool in bytes - high order bytes')
poolFreeSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolFreeSizeLow.setStatus('current')
if mibBuilder.loadTexts: poolFreeSizeLow.setDescription('Size of free space on Pool in bytes - low order bytes')
poolFreeSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolFreeSizeHigh.setStatus('current')
if mibBuilder.loadTexts: poolFreeSizeHigh.setDescription('Size of free space on Pool in bytes - high order bytes')
poolDataSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDataSizeLow.setStatus('current')
if mibBuilder.loadTexts: poolDataSizeLow.setDescription('Size of data on Pool in bytes - low order bytes')
poolDataSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDataSizeHigh.setStatus('current')
if mibBuilder.loadTexts: poolDataSizeHigh.setDescription('Size of data on Pool in bytes - high order bytes')
poolPostDedupDataSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolPostDedupDataSizeLow.setStatus('current')
if mibBuilder.loadTexts: poolPostDedupDataSizeLow.setDescription('Size of data after deduplication applied, in bytes - low order bytes')
poolPostDedupDataSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolPostDedupDataSizeHigh.setStatus('current')
if mibBuilder.loadTexts: poolPostDedupDataSizeHigh.setDescription('Size of data after deduplication applied, in bytes - high order bytes')
poolPostCompressionDataSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolPostCompressionDataSizeLow.setStatus('current')
if mibBuilder.loadTexts: poolPostCompressionDataSizeLow.setDescription('Size of data after compression, in bytes - low order bytes')
poolPostCompressionDataSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolPostCompressionDataSizeHigh.setStatus('current')
if mibBuilder.loadTexts: poolPostCompressionDataSizeHigh.setDescription('Size of data after compression, in bytes - high order bytes')
poolUnusedReservedSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolUnusedReservedSizeLow.setStatus('current')
if mibBuilder.loadTexts: poolUnusedReservedSizeLow.setDescription('Size of unused/reserved space in bytes - low order bytes')
poolUnusedReservedSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolUnusedReservedSizeHigh.setStatus('current')
if mibBuilder.loadTexts: poolUnusedReservedSizeHigh.setDescription('Size of unused/reserved space in bytes - high order bytes')
poolTotalSaving = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolTotalSaving.setStatus('current')
if mibBuilder.loadTexts: poolTotalSaving.setDescription('Total savings percentage after deduplication and compression')
poolDataWriteMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDataWriteMbps.setStatus('current')
if mibBuilder.loadTexts: poolDataWriteMbps.setDescription('Pool data writes, MB per second')
poolDataReadMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDataReadMbps.setStatus('current')
if mibBuilder.loadTexts: poolDataReadMbps.setDescription('Pool data reads, MB per second')
poolDataWriteIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDataWriteIops.setStatus('current')
if mibBuilder.loadTexts: poolDataWriteIops.setDescription('Pool data writes, IOs per second')
poolDataReadIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDataReadIops.setStatus('current')
if mibBuilder.loadTexts: poolDataReadIops.setDescription('Pool data reads, IOs per second')
poolDataWriteLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDataWriteLatency.setStatus('current')
if mibBuilder.loadTexts: poolDataWriteLatency.setDescription('Average pool data write latency')
poolDataReadLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDataReadLatency.setStatus('current')
if mibBuilder.loadTexts: poolDataReadLatency.setDescription('Average pool data read latency')
poolMetaWriteMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMetaWriteMbps.setStatus('current')
if mibBuilder.loadTexts: poolMetaWriteMbps.setDescription('Pool meta-data writes, MB per second')
poolMetaReadMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMetaReadMbps.setStatus('current')
if mibBuilder.loadTexts: poolMetaReadMbps.setDescription('Pool meta-data reads, MB per second')
poolMetaWriteIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMetaWriteIops.setStatus('current')
if mibBuilder.loadTexts: poolMetaWriteIops.setDescription('Pool meta-data writes, IOs per second')
poolMetaReadIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMetaReadIops.setStatus('current')
if mibBuilder.loadTexts: poolMetaReadIops.setDescription('Pool meta-data reads, IOs per second')
poolMetaWriteLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMetaWriteLatency.setStatus('current')
if mibBuilder.loadTexts: poolMetaWriteLatency.setDescription('Average pool meta-data write latency')
poolMetaReadLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMetaReadLatency.setStatus('current')
if mibBuilder.loadTexts: poolMetaReadLatency.setDescription('Average pool meta-data read latency')
poolReadCacheWriteMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolReadCacheWriteMbps.setStatus('current')
if mibBuilder.loadTexts: poolReadCacheWriteMbps.setDescription('Pool read cache writes, MB per second')
poolReadCacheReadMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolReadCacheReadMbps.setStatus('current')
if mibBuilder.loadTexts: poolReadCacheReadMbps.setDescription('Pool read cache reads, MB per second')
poolReadCacheWriteIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolReadCacheWriteIops.setStatus('current')
if mibBuilder.loadTexts: poolReadCacheWriteIops.setDescription('Pool read cache writes, IOs per second')
poolReadCacheReadIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolReadCacheReadIops.setStatus('current')
if mibBuilder.loadTexts: poolReadCacheReadIops.setDescription('Pool read cache reads, IOs per second')
poolReadCacheWriteLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolReadCacheWriteLatency.setStatus('current')
if mibBuilder.loadTexts: poolReadCacheWriteLatency.setDescription('Average pool read cache write latency')
poolReadCacheReadLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolReadCacheReadLatency.setStatus('current')
if mibBuilder.loadTexts: poolReadCacheReadLatency.setDescription('Average pool read cache read latency')
poolWriteCacheWriteMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolWriteCacheWriteMbps.setStatus('current')
if mibBuilder.loadTexts: poolWriteCacheWriteMbps.setDescription('Pool write cache writes, MB per second')
poolWriteCacheWriteIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolWriteCacheWriteIops.setStatus('current')
if mibBuilder.loadTexts: poolWriteCacheWriteIops.setDescription('Pool write cache writes, IOs per second')
poolWriteCacheWriteLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolWriteCacheWriteLatency.setStatus('current')
if mibBuilder.loadTexts: poolWriteCacheWriteLatency.setDescription('Average pool write cache write latency')
projectTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1), )
if mibBuilder.loadTexts: projectTable.setStatus('current')
if mibBuilder.loadTexts: projectTable.setDescription('Project information table')
projectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1), ).setIndexNames((0, "TEGILE-MIB", "poolIndex"), (0, "TEGILE-MIB", "projectIndex"))
if mibBuilder.loadTexts: projectEntry.setStatus('current')
if mibBuilder.loadTexts: projectEntry.setDescription('A row of Project information')
projectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: projectIndex.setStatus('current')
if mibBuilder.loadTexts: projectIndex.setDescription('Project Index.')
projectName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectName.setStatus('current')
if mibBuilder.loadTexts: projectName.setDescription('Project Name')
projectPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectPoolName.setStatus('current')
if mibBuilder.loadTexts: projectPoolName.setDescription("Project's pool Name")
projectDedupEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectDedupEnabled.setStatus('current')
if mibBuilder.loadTexts: projectDedupEnabled.setDescription('Flag indicating if Dedup is enabled for the Project or not')
projectCompressionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectCompressionEnabled.setStatus('current')
if mibBuilder.loadTexts: projectCompressionEnabled.setDescription('Flag indicating if Compression is enabled for the Project or not')
projectQuotaSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectQuotaSizeLow.setStatus('current')
if mibBuilder.loadTexts: projectQuotaSizeLow.setDescription('Project quota size in bytes - low order bytes')
projectQuotaSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectQuotaSizeHigh.setStatus('current')
if mibBuilder.loadTexts: projectQuotaSizeHigh.setDescription('Project quota size in bytes - high order bytes')
projectDataSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectDataSizeLow.setStatus('current')
if mibBuilder.loadTexts: projectDataSizeLow.setDescription('Size of data in Project in bytes - low order bytes')
projectDataSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectDataSizeHigh.setStatus('current')
if mibBuilder.loadTexts: projectDataSizeHigh.setDescription('Size of data in Project in bytes - high order bytes')
projectFreeSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectFreeSizeLow.setStatus('current')
if mibBuilder.loadTexts: projectFreeSizeLow.setDescription('Size of free space in Project in bytes - low order bytes')
projectFreeSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectFreeSizeHigh.setStatus('current')
if mibBuilder.loadTexts: projectFreeSizeHigh.setDescription('Size of free space in Project in bytes - high order bytes')
projectSnapshotSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectSnapshotSizeLow.setStatus('current')
if mibBuilder.loadTexts: projectSnapshotSizeLow.setDescription('Size of snapshots in bytes - low order bytes')
projectSnapshotSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectSnapshotSizeHigh.setStatus('current')
if mibBuilder.loadTexts: projectSnapshotSizeHigh.setDescription('Size of snapshots in bytes - high order bytes')
projectPostCompressionDataSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectPostCompressionDataSizeLow.setStatus('current')
if mibBuilder.loadTexts: projectPostCompressionDataSizeLow.setDescription('Size of data after compression, in bytes - low order bytes')
projectPostCompressionDataSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectPostCompressionDataSizeHigh.setStatus('current')
if mibBuilder.loadTexts: projectPostCompressionDataSizeHigh.setDescription('Size of data after compression, in bytes - high order bytes')
projectUnusedReservedSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectUnusedReservedSizeLow.setStatus('current')
if mibBuilder.loadTexts: projectUnusedReservedSizeLow.setDescription('Size of unused/reserved space in bytes - low order bytes')
projectUnusedReservedSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectUnusedReservedSizeHigh.setStatus('current')
if mibBuilder.loadTexts: projectUnusedReservedSizeHigh.setDescription('Size of unused/reserved space in bytes - high order bytes')
projectTotalSaving = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectTotalSaving.setStatus('current')
if mibBuilder.loadTexts: projectTotalSaving.setDescription('Total savings percentage after deduplication and compression')
projectLunCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectLunCount.setStatus('current')
if mibBuilder.loadTexts: projectLunCount.setDescription('Project LUN Count')
projectShareCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectShareCount.setStatus('current')
if mibBuilder.loadTexts: projectShareCount.setDescription('Project Share count')
lunTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3), )
if mibBuilder.loadTexts: lunTable.setStatus('current')
if mibBuilder.loadTexts: lunTable.setDescription('LUN information table')
lunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1), ).setIndexNames((0, "TEGILE-MIB", "poolIndex"), (0, "TEGILE-MIB", "projectIndex"), (0, "TEGILE-MIB", "lunIndex"))
if mibBuilder.loadTexts: lunEntry.setStatus('current')
if mibBuilder.loadTexts: lunEntry.setDescription('A row of LUN information')
lunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lunIndex.setStatus('current')
if mibBuilder.loadTexts: lunIndex.setDescription('LUN Index.')
lunName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunName.setStatus('current')
if mibBuilder.loadTexts: lunName.setDescription('LUN Name')
lunProjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunProjectName.setStatus('current')
if mibBuilder.loadTexts: lunProjectName.setDescription('LUN Project Name')
lunPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunPoolName.setStatus('current')
if mibBuilder.loadTexts: lunPoolName.setDescription('LUN Pool Name')
lunGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunGUID.setStatus('current')
if mibBuilder.loadTexts: lunGUID.setDescription('LUN GUID')
lunBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunBlockSize.setStatus('current')
if mibBuilder.loadTexts: lunBlockSize.setDescription('LUN block size string')
lunDedupEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunDedupEnabled.setStatus('current')
if mibBuilder.loadTexts: lunDedupEnabled.setDescription('Flag indicating if Dedup is enabled for the LUN or not')
lunCompressionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunCompressionEnabled.setStatus('current')
if mibBuilder.loadTexts: lunCompressionEnabled.setDescription('Flag indicating if Compression is enabled for the LUN or not')
lunSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSizeLow.setStatus('current')
if mibBuilder.loadTexts: lunSizeLow.setDescription('LUN size in bytes - low order bytes')
lunSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSizeHigh.setStatus('current')
if mibBuilder.loadTexts: lunSizeHigh.setDescription('LUN size in bytes - high order bytes')
lunDataSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunDataSizeLow.setStatus('current')
if mibBuilder.loadTexts: lunDataSizeLow.setDescription('Size of Data on LUN in bytes - low order bytes')
lunDataSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunDataSizeHigh.setStatus('current')
if mibBuilder.loadTexts: lunDataSizeHigh.setDescription('Size of Data on LUN in bytes - high order bytes')
lunSnapshotSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSnapshotSizeLow.setStatus('current')
if mibBuilder.loadTexts: lunSnapshotSizeLow.setDescription('Size of Snapshots of LUN in bytes - low order bytes')
lunSnapshotSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSnapshotSizeHigh.setStatus('current')
if mibBuilder.loadTexts: lunSnapshotSizeHigh.setDescription('Size of Snapshots of LUN in bytes - high order bytes')
lunFreeSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunFreeSizeLow.setStatus('current')
if mibBuilder.loadTexts: lunFreeSizeLow.setDescription('Free space available on LUN in bytes - low order bytes')
lunFreeSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunFreeSizeHigh.setStatus('current')
if mibBuilder.loadTexts: lunFreeSizeHigh.setDescription('Free space available on LUN in bytes - high order bytes')
lunReservedSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunReservedSizeLow.setStatus('current')
if mibBuilder.loadTexts: lunReservedSizeLow.setDescription('Size of the space reserved on LUN in bytes - low order bytes')
lunReservedSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunReservedSizeHigh.setStatus('current')
if mibBuilder.loadTexts: lunReservedSizeHigh.setDescription('Size of the space reserved on LUN in bytes - high order bytes')
lunCompressedRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunCompressedRatio.setStatus('current')
if mibBuilder.loadTexts: lunCompressedRatio.setDescription('Percentage of data compressed on LUN')
lunProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunProtocol.setStatus('current')
if mibBuilder.loadTexts: lunProtocol.setDescription('LUN access protocol')
lunTargetGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunTargetGroup.setStatus('current')
if mibBuilder.loadTexts: lunTargetGroup.setDescription('Name of the LUN Target group')
lunInitiatorGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunInitiatorGroup.setStatus('current')
if mibBuilder.loadTexts: lunInitiatorGroup.setDescription('Name of the LUN Initiator group')
lunWriteMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunWriteMbps.setStatus('current')
if mibBuilder.loadTexts: lunWriteMbps.setDescription('Lun writes, MB per second')
lunReadMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunReadMbps.setStatus('current')
if mibBuilder.loadTexts: lunReadMbps.setDescription('Lun reads, MB per second')
lunWriteIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunWriteIops.setStatus('current')
if mibBuilder.loadTexts: lunWriteIops.setDescription('Lun writes, IOs per second')
lunReadIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunReadIops.setStatus('current')
if mibBuilder.loadTexts: lunReadIops.setDescription('Lun reads, IOs per second')
lunWriteLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunWriteLatency.setStatus('current')
if mibBuilder.loadTexts: lunWriteLatency.setDescription('Average lun write latency')
lunReadLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunReadLatency.setStatus('current')
if mibBuilder.loadTexts: lunReadLatency.setDescription('Average lun read latency')
shareTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1), )
if mibBuilder.loadTexts: shareTable.setStatus('current')
if mibBuilder.loadTexts: shareTable.setDescription('Project Shares information table')
shareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1), ).setIndexNames((0, "TEGILE-MIB", "poolIndex"), (0, "TEGILE-MIB", "projectIndex"), (0, "TEGILE-MIB", "shareIndex"))
if mibBuilder.loadTexts: shareEntry.setStatus('current')
if mibBuilder.loadTexts: shareEntry.setDescription('A row of Shares information')
shareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: shareIndex.setStatus('current')
if mibBuilder.loadTexts: shareIndex.setDescription('Share Index.')
shareName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareName.setStatus('current')
if mibBuilder.loadTexts: shareName.setDescription('Share name')
shareMountPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareMountPoint.setStatus('current')
if mibBuilder.loadTexts: shareMountPoint.setDescription('Share mount point')
shareProjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareProjectName.setStatus('current')
if mibBuilder.loadTexts: shareProjectName.setDescription('Share Project name')
sharePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharePoolName.setStatus('current')
if mibBuilder.loadTexts: sharePoolName.setDescription('Share Pool name')
shareQuotaLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareQuotaLow.setStatus('current')
if mibBuilder.loadTexts: shareQuotaLow.setDescription('Share quota size in bytes')
shareQuotaHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareQuotaHigh.setStatus('current')
if mibBuilder.loadTexts: shareQuotaHigh.setDescription('Share quota size in bytes')
shareNFSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareNFSEnabled.setStatus('current')
if mibBuilder.loadTexts: shareNFSEnabled.setDescription('Flag indicating if NFS access is enabled for this share or not')
shareCIFSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareCIFSEnabled.setStatus('current')
if mibBuilder.loadTexts: shareCIFSEnabled.setDescription('Flag indicating if CIFS access is enabled for this share or not')
shareDedupEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareDedupEnabled.setStatus('current')
if mibBuilder.loadTexts: shareDedupEnabled.setDescription('Flag indicating if Dedup is enabled for the LUN or not')
shareCompressionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareCompressionEnabled.setStatus('current')
if mibBuilder.loadTexts: shareCompressionEnabled.setDescription('Flag indicating if Compression is enabled for the LUN or not')
shareDataSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareDataSizeLow.setStatus('current')
if mibBuilder.loadTexts: shareDataSizeLow.setDescription('Size of Data on the share in bytes - low order bytes')
shareDataSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareDataSizeHigh.setStatus('current')
if mibBuilder.loadTexts: shareDataSizeHigh.setDescription('Size of Data on the share in bytes - high order bytes')
shareSnapshotSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareSnapshotSizeLow.setStatus('current')
if mibBuilder.loadTexts: shareSnapshotSizeLow.setDescription('Size of Snapshots of the share in bytes - low order bytes')
shareSnapshotSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareSnapshotSizeHigh.setStatus('current')
if mibBuilder.loadTexts: shareSnapshotSizeHigh.setDescription('Size of Snapshots of the share in bytes - high order bytes')
shareReservedSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareReservedSizeLow.setStatus('current')
if mibBuilder.loadTexts: shareReservedSizeLow.setDescription('Reserved space on the share in bytes - low order bytes')
shareReservedSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareReservedSizeHigh.setStatus('current')
if mibBuilder.loadTexts: shareReservedSizeHigh.setDescription('Reserved space on the share in bytes - high order bytes')
shareCompressedRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareCompressedRatio.setStatus('current')
if mibBuilder.loadTexts: shareCompressedRatio.setDescription('Percentage of data compressed on the Share')
shareCIFSWriteMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareCIFSWriteMbps.setStatus('current')
if mibBuilder.loadTexts: shareCIFSWriteMbps.setDescription('Share CIFS writes, MB per second')
shareCIFSReadMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareCIFSReadMbps.setStatus('current')
if mibBuilder.loadTexts: shareCIFSReadMbps.setDescription('Share CIFS reads, MB per second')
shareCIFSWriteIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareCIFSWriteIops.setStatus('current')
if mibBuilder.loadTexts: shareCIFSWriteIops.setDescription('Share CIFS write IOs per second')
shareCIFSReadIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareCIFSReadIops.setStatus('current')
if mibBuilder.loadTexts: shareCIFSReadIops.setDescription('Share CIFS read IOs per second')
shareCIFSWriteLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareCIFSWriteLatency.setStatus('current')
if mibBuilder.loadTexts: shareCIFSWriteLatency.setDescription('Share CIFS write latency')
shareCIFSReadLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareCIFSReadLatency.setStatus('current')
if mibBuilder.loadTexts: shareCIFSReadLatency.setDescription('Share CIFS read latency')
shareNFSWriteMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareNFSWriteMbps.setStatus('current')
if mibBuilder.loadTexts: shareNFSWriteMbps.setDescription('Share NFS writes, MB per second')
shareNFSReadMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareNFSReadMbps.setStatus('current')
if mibBuilder.loadTexts: shareNFSReadMbps.setDescription('Share NFS reads, MB per second')
shareNFSWriteIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareNFSWriteIops.setStatus('current')
if mibBuilder.loadTexts: shareNFSWriteIops.setDescription('Share NFS write IOs per second')
shareNFSReadIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareNFSReadIops.setStatus('current')
if mibBuilder.loadTexts: shareNFSReadIops.setDescription('Share NFS read IOs per second')
shareNFSWriteLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareNFSWriteLatency.setStatus('current')
if mibBuilder.loadTexts: shareNFSWriteLatency.setDescription('Share NFS write latency')
shareNFSReadLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareNFSReadLatency.setStatus('current')
if mibBuilder.loadTexts: shareNFSReadLatency.setDescription('Share NFS read latency')
iscsiTargetsTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1), )
if mibBuilder.loadTexts: iscsiTargetsTable.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetsTable.setDescription('iSCSI Targets information table')
iscsiTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1), ).setIndexNames((0, "TEGILE-MIB", "iscsiTargetIndex"))
if mibBuilder.loadTexts: iscsiTargetEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetEntry.setDescription('A row of iSCSI Targets information')
iscsiTargetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: iscsiTargetIndex.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetIndex.setDescription('iSCSI Target Index.')
iscsiTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTargetName.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetName.setDescription('iSCSI Target name')
iscsiTargetAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTargetAlias.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetAlias.setDescription('iSCSI Target alias')
iscsiTargetGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTargetGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetGroup.setDescription('iSCSI Target alias')
iscsiTargetAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTargetAuth.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetAuth.setDescription('iSCSI Target authentication')
iscsiTargetWriteMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTargetWriteMbps.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetWriteMbps.setDescription('iSCSI Target writes, MBs per second')
iscsiTargetReadMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTargetReadMbps.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetReadMbps.setDescription('iSCSI Target reads, MBs per second')
iscsiTargetWriteIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTargetWriteIops.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetWriteIops.setDescription('iSCSI Target writes, IOs per second')
iscsiTargetReadIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTargetReadIops.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetReadIops.setDescription('iSCSI Target reads, IOs per second')
iscsiTargetWriteLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTargetWriteLatency.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetWriteLatency.setDescription('iSCSI Target average write latency')
iscsiTargetReadLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTargetReadLatency.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetReadLatency.setDescription('iSCSI Target average read latency')
iscsiInitiatorsTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 2, 1), )
if mibBuilder.loadTexts: iscsiInitiatorsTable.setStatus('current')
if mibBuilder.loadTexts: iscsiInitiatorsTable.setDescription('iSCSI Initiators information table')
iscsiInitiatorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 2, 1, 1), ).setIndexNames((0, "TEGILE-MIB", "iscsiInitiatorIndex"))
if mibBuilder.loadTexts: iscsiInitiatorEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiInitiatorEntry.setDescription('A row of iSCSI Initiators information')
iscsiInitiatorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: iscsiInitiatorIndex.setStatus('current')
if mibBuilder.loadTexts: iscsiInitiatorIndex.setDescription('iSCSI Initiator Index.')
iscsiInitiatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInitiatorName.setStatus('current')
if mibBuilder.loadTexts: iscsiInitiatorName.setDescription('iSCSI Initiator name')
iscsiInitiatorChapUser = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInitiatorChapUser.setStatus('current')
if mibBuilder.loadTexts: iscsiInitiatorChapUser.setDescription('iSCSI Initiator CHAP user')
iscsiInitiatorGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInitiatorGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiInitiatorGroup.setDescription('iSCSI Initiator group')
fcTargetsTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1), )
if mibBuilder.loadTexts: fcTargetsTable.setStatus('current')
if mibBuilder.loadTexts: fcTargetsTable.setDescription('FC Targets information table')
fcTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1, 1), ).setIndexNames((0, "TEGILE-MIB", "fcTargetIndex"))
if mibBuilder.loadTexts: fcTargetEntry.setStatus('current')
if mibBuilder.loadTexts: fcTargetEntry.setDescription('A row of FC Targets information')
fcTargetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fcTargetIndex.setStatus('current')
if mibBuilder.loadTexts: fcTargetIndex.setDescription('FC Target Index.')
fcTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTargetName.setStatus('current')
if mibBuilder.loadTexts: fcTargetName.setDescription('FC Target name')
fcTargetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTargetStatus.setStatus('current')
if mibBuilder.loadTexts: fcTargetStatus.setDescription('FC Target status')
fcTargetGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTargetGroup.setStatus('current')
if mibBuilder.loadTexts: fcTargetGroup.setDescription('FC Target group')
fcTargetWriteMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTargetWriteMbps.setStatus('current')
if mibBuilder.loadTexts: fcTargetWriteMbps.setDescription('FC Target writes, MBs per second')
fcTargetReadMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTargetReadMbps.setStatus('current')
if mibBuilder.loadTexts: fcTargetReadMbps.setDescription('FC Target reads, MBs per second')
fcTargetWriteIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTargetWriteIops.setStatus('current')
if mibBuilder.loadTexts: fcTargetWriteIops.setDescription('FC Target writes, IOs per second')
fcTargetReadIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTargetReadIops.setStatus('current')
if mibBuilder.loadTexts: fcTargetReadIops.setDescription('FC Target reads, IOs per second')
fcTargetWriteLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTargetWriteLatency.setStatus('current')
if mibBuilder.loadTexts: fcTargetWriteLatency.setDescription('FC Target average write latency')
fcTargetReadLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTargetReadLatency.setStatus('current')
if mibBuilder.loadTexts: fcTargetReadLatency.setDescription('FC Target average read latency')
fcInitiatorsTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 2, 1), )
if mibBuilder.loadTexts: fcInitiatorsTable.setStatus('current')
if mibBuilder.loadTexts: fcInitiatorsTable.setDescription('FC Initiators information table')
fcInitiatorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 2, 1, 1), ).setIndexNames((0, "TEGILE-MIB", "fcInitiatorIndex"))
if mibBuilder.loadTexts: fcInitiatorEntry.setStatus('current')
if mibBuilder.loadTexts: fcInitiatorEntry.setDescription('A row of FC Initiators information')
fcInitiatorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fcInitiatorIndex.setStatus('current')
if mibBuilder.loadTexts: fcInitiatorIndex.setDescription('FC Initiator Index.')
fcInitiatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcInitiatorName.setStatus('current')
if mibBuilder.loadTexts: fcInitiatorName.setDescription('FC Initiator name')
fcInitiatorGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcInitiatorGroup.setStatus('current')
if mibBuilder.loadTexts: fcInitiatorGroup.setDescription('FC Initiator group')
vmwareNFSDatastoresTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 7, 1), )
if mibBuilder.loadTexts: vmwareNFSDatastoresTable.setStatus('current')
if mibBuilder.loadTexts: vmwareNFSDatastoresTable.setDescription('VMWare NFS Datastores information table')
vmwareNFSDatastoreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 7, 1, 1), ).setIndexNames((0, "TEGILE-MIB", "vmwareNFSDatastoreIndex"))
if mibBuilder.loadTexts: vmwareNFSDatastoreEntry.setStatus('current')
if mibBuilder.loadTexts: vmwareNFSDatastoreEntry.setDescription('A row of VMWare NFS Datastores information')
vmwareNFSDatastoreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 7, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vmwareNFSDatastoreIndex.setStatus('current')
if mibBuilder.loadTexts: vmwareNFSDatastoreIndex.setDescription('VMWare NFS Datastore Index.')
vmwareNFSDatastoreVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoreVMName.setStatus('current')
if mibBuilder.loadTexts: vmwareNFSDatastoreVMName.setDescription('VMWare NFS Datastore VM name')
vmwareNFSDatastoreESXName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 7, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoreESXName.setStatus('current')
if mibBuilder.loadTexts: vmwareNFSDatastoreESXName.setDescription('VMWare NFS Datastore ESX server name')
vmwareNFSDatastoreWriteMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 7, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoreWriteMbps.setStatus('current')
if mibBuilder.loadTexts: vmwareNFSDatastoreWriteMbps.setDescription('VMWare NFS Datastore writes, MBs per second')
vmwareNFSDatastoreReadMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 7, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoreReadMbps.setStatus('current')
if mibBuilder.loadTexts: vmwareNFSDatastoreReadMbps.setDescription('VMWare NFS Datastore reads, MBs per second')
vmwareNFSDatastoreWriteIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 7, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoreWriteIops.setStatus('current')
if mibBuilder.loadTexts: vmwareNFSDatastoreWriteIops.setDescription('VMWare NFS Datastore reads, IOs per second')
vmwareNFSDatastoreReadIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 7, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoreReadIops.setStatus('current')
if mibBuilder.loadTexts: vmwareNFSDatastoreReadIops.setDescription('VMWare NFS Datastore reads, IOs per second')
vmwareNFSDatastoreWriteLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 7, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoreWriteLatency.setStatus('current')
if mibBuilder.loadTexts: vmwareNFSDatastoreWriteLatency.setDescription('VMWare NFS Datastore write latency')
vmwareNFSDatastoreReadLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 7, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoreReadLatency.setStatus('current')
if mibBuilder.loadTexts: vmwareNFSDatastoreReadLatency.setDescription('VMWare NFS Datastore read latency')
haResourcesTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 8, 1), )
if mibBuilder.loadTexts: haResourcesTable.setStatus('current')
if mibBuilder.loadTexts: haResourcesTable.setDescription('HA Resource information table')
haResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 8, 1, 1), ).setIndexNames((0, "TEGILE-MIB", "haResourceIndex"))
if mibBuilder.loadTexts: haResourceEntry.setStatus('current')
if mibBuilder.loadTexts: haResourceEntry.setDescription('A row of HA Resource information')
haResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 8, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: haResourceIndex.setStatus('current')
if mibBuilder.loadTexts: haResourceIndex.setDescription('HA Resource Index.')
haResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haResourceName.setStatus('current')
if mibBuilder.loadTexts: haResourceName.setDescription('HA Resource name')
haResourceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haResourceDescription.setStatus('current')
if mibBuilder.loadTexts: haResourceDescription.setDescription('HA Resource description')
haResourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 8, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haResourceStatus.setStatus('current')
if mibBuilder.loadTexts: haResourceStatus.setDescription('HA Resource status')
haResourceGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 8, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haResourceGroup.setStatus('current')
if mibBuilder.loadTexts: haResourceGroup.setDescription('HA Resource group')
haResourceActiveNode = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 8, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haResourceActiveNode.setStatus('current')
if mibBuilder.loadTexts: haResourceActiveNode.setDescription('HA Resource active node')
nicTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 5, 1), )
if mibBuilder.loadTexts: nicTable.setStatus('current')
if mibBuilder.loadTexts: nicTable.setDescription('NIC information table')
nicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 5, 1, 1), ).setIndexNames((0, "TEGILE-MIB", "nicIndex"))
if mibBuilder.loadTexts: nicEntry.setStatus('current')
if mibBuilder.loadTexts: nicEntry.setDescription('A row of NIC information')
nicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nicIndex.setStatus('current')
if mibBuilder.loadTexts: nicIndex.setDescription('NIC Index.')
nicName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicName.setStatus('current')
if mibBuilder.loadTexts: nicName.setDescription('NIC name')
nicState = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicState.setStatus('current')
if mibBuilder.loadTexts: nicState.setDescription('NIC state')
nicGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicGroup.setStatus('current')
if mibBuilder.loadTexts: nicGroup.setDescription('NIC group')
nicMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 5, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicMTU.setStatus('current')
if mibBuilder.loadTexts: nicMTU.setDescription('NIC maximum transmission unit')
nicReceiveMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 5, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicReceiveMbps.setStatus('current')
if mibBuilder.loadTexts: nicReceiveMbps.setDescription('NIC bytes received in MBs per second')
nicTransmitMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 5, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTransmitMbps.setStatus('current')
if mibBuilder.loadTexts: nicTransmitMbps.setDescription('NIC bytes received in MBs per second')
notificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 2, 1))
notificationProps = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1))
notificationDescription = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationDescription.setStatus('current')
if mibBuilder.loadTexts: notificationDescription.setDescription('Description of the notification.')
notificationTime = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationTime.setStatus('current')
if mibBuilder.loadTexts: notificationTime.setDescription('Time of the notification generated')
notificationSeverity = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationSeverity.setStatus('current')
if mibBuilder.loadTexts: notificationSeverity.setDescription('The severity level of the notification (informational, warning, error, critical).')
notificationComponentName = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationComponentName.setStatus('current')
if mibBuilder.loadTexts: notificationComponentName.setDescription('Name of the component that originated the notification.')
notificationTargetEntityName = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationTargetEntityName.setStatus('current')
if mibBuilder.loadTexts: notificationTargetEntityName.setDescription('Name of the Target entity.')
notificationEventCode = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationEventCode.setStatus('current')
if mibBuilder.loadTexts: notificationEventCode.setDescription('Description of the notification.')
notificationSensorAction = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationSensorAction.setStatus('current')
if mibBuilder.loadTexts: notificationSensorAction.setDescription('IPMI Sensor action.')
notificationSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationSensorNumber.setStatus('current')
if mibBuilder.loadTexts: notificationSensorNumber.setDescription('IPMI Sensor number.')
notificationSensorSuspect = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationSensorSuspect.setStatus('current')
if mibBuilder.loadTexts: notificationSensorSuspect.setDescription('IPMI Sensor suspect')
notificationReadingTriggerValue = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationReadingTriggerValue.setStatus('current')
if mibBuilder.loadTexts: notificationReadingTriggerValue.setDescription('Reading trigger value.')
notificationThresholdTriggerValue = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationThresholdTriggerValue.setStatus('current')
if mibBuilder.loadTexts: notificationThresholdTriggerValue.setDescription('Threshold trigger value.')
notificationReadingUnit = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationReadingUnit.setStatus('current')
if mibBuilder.loadTexts: notificationReadingUnit.setDescription('Reading unit of the value.')
notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2))
testNotification = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 10)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: testNotification.setStatus('current')
if mibBuilder.loadTexts: testNotification.setDescription('Test notification/trap')
diskIsOnline = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 101)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: diskIsOnline.setStatus('current')
if mibBuilder.loadTexts: diskIsOnline.setDescription('Disk came back online')
diskGoneOffline = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 102)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: diskGoneOffline.setStatus('current')
if mibBuilder.loadTexts: diskGoneOffline.setDescription('Disk went offline')
diskError = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 103)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: diskError.setStatus('current')
if mibBuilder.loadTexts: diskError.setDescription('Disk error encountered')
spareDiskReplaced = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 104)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: spareDiskReplaced.setStatus('current')
if mibBuilder.loadTexts: spareDiskReplaced.setDescription('Spare disk replaced')
diskSlowIo = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 105)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: diskSlowIo.setStatus('current')
if mibBuilder.loadTexts: diskSlowIo.setDescription('Slow I/O operations observed on Disk')
poolCreated = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 201)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolCreated.setStatus('current')
if mibBuilder.loadTexts: poolCreated.setDescription('Pool is created')
poolDeleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 202)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolDeleted.setStatus('current')
if mibBuilder.loadTexts: poolDeleted.setDescription('Pool is deleted')
poolDeletionFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 203)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolDeletionFailed.setStatus('current')
if mibBuilder.loadTexts: poolDeletionFailed.setDescription('Pool deletion attempt failed')
poolExpanded = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 204)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolExpanded.setStatus('current')
if mibBuilder.loadTexts: poolExpanded.setDescription('Pool is expanded')
poolExported = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 205)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolExported.setStatus('current')
if mibBuilder.loadTexts: poolExported.setDescription('Pool is exported')
poolImported = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 206)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolImported.setStatus('current')
if mibBuilder.loadTexts: poolImported.setDescription('Pool is imported')
poolUpgraded = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 207)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolUpgraded.setStatus('current')
if mibBuilder.loadTexts: poolUpgraded.setDescription('Pool is upgraded')
poolQuotaExceedThresholdWarning = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 208)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolQuotaExceedThresholdWarning.setStatus('current')
if mibBuilder.loadTexts: poolQuotaExceedThresholdWarning.setDescription('Pool quota exceeded the threshold limit')
poolMetaDataQuotaExceedThresholdWarning = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 209)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolMetaDataQuotaExceedThresholdWarning.setStatus('current')
if mibBuilder.loadTexts: poolMetaDataQuotaExceedThresholdWarning.setDescription('Pool meta-data quota exceeded the threshold limit')
poolAvailableMetaToDataRatioBelowThresholdWarning = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 210)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolAvailableMetaToDataRatioBelowThresholdWarning.setStatus('current')
if mibBuilder.loadTexts: poolAvailableMetaToDataRatioBelowThresholdWarning.setDescription('Pool available meta-data to data ratio below threshold limit')
poolQuotaFinished = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 211)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolQuotaFinished.setStatus('current')
if mibBuilder.loadTexts: poolQuotaFinished.setDescription('Pool quota finished')
poolDegraded = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 212)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolDegraded.setStatus('current')
if mibBuilder.loadTexts: poolDegraded.setDescription('Pool has degraded')
projectCreatedSuccessfully = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 301)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: projectCreatedSuccessfully.setStatus('current')
if mibBuilder.loadTexts: projectCreatedSuccessfully.setDescription('Project created successfully')
projectDeletionFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 302)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: projectDeletionFailed.setStatus('current')
if mibBuilder.loadTexts: projectDeletionFailed.setDescription('Project deleted failed')
projectDeleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 303)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: projectDeleted.setStatus('current')
if mibBuilder.loadTexts: projectDeleted.setDescription('Project is deleted')
projectModified = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 304)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: projectModified.setStatus('current')
if mibBuilder.loadTexts: projectModified.setDescription('Project is modified')
projectThresholdExceedWarning = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 305)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: projectThresholdExceedWarning.setStatus('current')
if mibBuilder.loadTexts: projectThresholdExceedWarning.setDescription('Project usage has exceeded threshold.')
projectQuotaFinished = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 306)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: projectQuotaFinished.setStatus('current')
if mibBuilder.loadTexts: projectQuotaFinished.setDescription('Project quota is finished.')
projectCreatedWithNonOptimalBlockSize = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 307)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: projectCreatedWithNonOptimalBlockSize.setStatus('current')
if mibBuilder.loadTexts: projectCreatedWithNonOptimalBlockSize.setDescription('Project created with non optimal block size')
volumeCreatedSuccessfully = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 401)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: volumeCreatedSuccessfully.setStatus('current')
if mibBuilder.loadTexts: volumeCreatedSuccessfully.setDescription('Volume created successfully')
volumeModifyCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 402)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: volumeModifyCompleted.setStatus('current')
if mibBuilder.loadTexts: volumeModifyCompleted.setDescription('Volume is modified')
volumeDeleteCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 403)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: volumeDeleteCompleted.setStatus('current')
if mibBuilder.loadTexts: volumeDeleteCompleted.setDescription('Volume is deleted')
volumeDeleteFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 404)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: volumeDeleteFailed.setStatus('current')
if mibBuilder.loadTexts: volumeDeleteFailed.setDescription('Volume deletion failed')
volumeExceedsThresholdWarning = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 405)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: volumeExceedsThresholdWarning.setStatus('current')
if mibBuilder.loadTexts: volumeExceedsThresholdWarning.setDescription('Volume Quota has exceeded the configured Limit')
volumeQuotaFinished = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 406)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: volumeQuotaFinished.setStatus('current')
if mibBuilder.loadTexts: volumeQuotaFinished.setDescription('Volume Quota has Finished')
volumeCreatedWithNonOptimalBlockSize = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 407)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: volumeCreatedWithNonOptimalBlockSize.setStatus('current')
if mibBuilder.loadTexts: volumeCreatedWithNonOptimalBlockSize.setDescription('Volume created with non optimal block size')
shareCreatedSuccessfully = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 501)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: shareCreatedSuccessfully.setStatus('current')
if mibBuilder.loadTexts: shareCreatedSuccessfully.setDescription('Share created successfully')
shareDeletionFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 502)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: shareDeletionFailed.setStatus('current')
if mibBuilder.loadTexts: shareDeletionFailed.setDescription('Share deletion failed')
shareDeleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 503)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: shareDeleted.setStatus('current')
if mibBuilder.loadTexts: shareDeleted.setDescription('Share is deleted')
shareExceedThresholdWarning = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 504)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: shareExceedThresholdWarning.setStatus('current')
if mibBuilder.loadTexts: shareExceedThresholdWarning.setDescription('Share exceeds the threshold limit')
shareQuotaFinished = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 505)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: shareQuotaFinished.setStatus('current')
if mibBuilder.loadTexts: shareQuotaFinished.setDescription('Share quota is finished')
shareCreatedWithNonOptimalBlockSize = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 506)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: shareCreatedWithNonOptimalBlockSize.setStatus('current')
if mibBuilder.loadTexts: shareCreatedWithNonOptimalBlockSize.setDescription('Share created with non optimal block size')
aclMigrationStarted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 601)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: aclMigrationStarted.setStatus('current')
if mibBuilder.loadTexts: aclMigrationStarted.setDescription('ACL migration started')
aclMigrationCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 602)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: aclMigrationCompleted.setStatus('current')
if mibBuilder.loadTexts: aclMigrationCompleted.setDescription('ACL migration completed')
deleteFolderCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 701)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: deleteFolderCompleted.setStatus('current')
if mibBuilder.loadTexts: deleteFolderCompleted.setDescription('Folder deleted')
deleteFolderFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 702)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: deleteFolderFailed.setStatus('current')
if mibBuilder.loadTexts: deleteFolderFailed.setDescription('Folder deletion failed')
snapshotCreatedSuccessfully = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 801)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snapshotCreatedSuccessfully.setStatus('current')
if mibBuilder.loadTexts: snapshotCreatedSuccessfully.setDescription('Snapshot created successfully')
snapshotCreationFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 802)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snapshotCreationFailed.setStatus('current')
if mibBuilder.loadTexts: snapshotCreationFailed.setDescription('Snapshot creation failed')
snapshotDeletedSuccessfully = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 803)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snapshotDeletedSuccessfully.setStatus('current')
if mibBuilder.loadTexts: snapshotDeletedSuccessfully.setDescription('Snapshot deleted successfully')
snapshotDeleteFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 804)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snapshotDeleteFailed.setStatus('current')
if mibBuilder.loadTexts: snapshotDeleteFailed.setDescription('Snapshot deletion failed')
snapshotCloningFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 805)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snapshotCloningFailed.setStatus('current')
if mibBuilder.loadTexts: snapshotCloningFailed.setDescription('Snapshot cloning failed')
snapshotCloneCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 806)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snapshotCloneCompleted.setStatus('current')
if mibBuilder.loadTexts: snapshotCloneCompleted.setDescription('Snapshot clone completed')
snapshotRollbackFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 807)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snapshotRollbackFailed.setStatus('current')
if mibBuilder.loadTexts: snapshotRollbackFailed.setDescription('Snapshot rollback failed')
snapshotRollbackCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 808)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snapshotRollbackCompleted.setStatus('current')
if mibBuilder.loadTexts: snapshotRollbackCompleted.setDescription('Snapshot rollback completed')
haResourceGroupTakeBackCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 901)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: haResourceGroupTakeBackCompleted.setStatus('current')
if mibBuilder.loadTexts: haResourceGroupTakeBackCompleted.setDescription('HA resource group taken back')
haResourceGroupTakeOverCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 902)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: haResourceGroupTakeOverCompleted.setStatus('current')
if mibBuilder.loadTexts: haResourceGroupTakeOverCompleted.setDescription('HA resource group taken over')
controllerUp = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1001)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: controllerUp.setStatus('current')
if mibBuilder.loadTexts: controllerUp.setDescription('Controller is now up')
controllerDown = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1002)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: controllerDown.setStatus('current')
if mibBuilder.loadTexts: controllerDown.setDescription('Controller went down')
intelliFlashSoftwareUp = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1003)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: intelliFlashSoftwareUp.setStatus('current')
if mibBuilder.loadTexts: intelliFlashSoftwareUp.setDescription('IntelliFlash is now up on controller')
intelliFlashSoftwareDown = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1004)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: intelliFlashSoftwareDown.setStatus('current')
if mibBuilder.loadTexts: intelliFlashSoftwareDown.setDescription('IntelliFlash went down on controller')
controllerTimeDrift = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1005)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: controllerTimeDrift.setStatus('current')
if mibBuilder.loadTexts: controllerTimeDrift.setDescription('Controllers Time drift detected')
fcInitiatorCreateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1101)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: fcInitiatorCreateCompleted.setStatus('current')
if mibBuilder.loadTexts: fcInitiatorCreateCompleted.setDescription('FC initiator created')
fcInitiatorCreateFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1102)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: fcInitiatorCreateFailed.setStatus('current')
if mibBuilder.loadTexts: fcInitiatorCreateFailed.setDescription('FC initiator creation failed')
fcInitiatorModifyCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1103)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: fcInitiatorModifyCompleted.setStatus('current')
if mibBuilder.loadTexts: fcInitiatorModifyCompleted.setDescription('FC initiator properties modified')
fcTargetResetHbaPortCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1104)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: fcTargetResetHbaPortCompleted.setStatus('current')
if mibBuilder.loadTexts: fcTargetResetHbaPortCompleted.setDescription('FC Target HBA Port reset successfully')
fcTargetResetHbaPortFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1105)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: fcTargetResetHbaPortFailed.setStatus('current')
if mibBuilder.loadTexts: fcTargetResetHbaPortFailed.setDescription('FC Target HBA Port reset failed')
fcTargetModifyCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1106)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: fcTargetModifyCompleted.setStatus('current')
if mibBuilder.loadTexts: fcTargetModifyCompleted.setDescription('FC target properties modified')
fcPortOnline = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1107)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: fcPortOnline.setStatus('current')
if mibBuilder.loadTexts: fcPortOnline.setDescription('FC Port is online')
fcPortOffline = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1108)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: fcPortOffline.setStatus('current')
if mibBuilder.loadTexts: fcPortOffline.setDescription('FC Port is offline')
initiatorGroupCreateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1201)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: initiatorGroupCreateCompleted.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupCreateCompleted.setDescription('Initiator Group created')
initiatorGroupMemberAdded = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1202)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: initiatorGroupMemberAdded.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupMemberAdded.setDescription('Member added to the Initiator Group')
initiatorGroupMemberRemoved = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1203)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: initiatorGroupMemberRemoved.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupMemberRemoved.setDescription('Member removed from the Initiator Group')
initiatorGroupDeleteCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1204)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: initiatorGroupDeleteCompleted.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupDeleteCompleted.setDescription('Initiator Group deleted')
iscsiInitiatorCreateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1301)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: iscsiInitiatorCreateCompleted.setStatus('current')
if mibBuilder.loadTexts: iscsiInitiatorCreateCompleted.setDescription('iSCSI initiator created')
iscsiInitiatorCreateFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1302)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: iscsiInitiatorCreateFailed.setStatus('current')
if mibBuilder.loadTexts: iscsiInitiatorCreateFailed.setDescription('iSCSI initiator creation failed')
iscsiInitiatorModifyCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1303)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: iscsiInitiatorModifyCompleted.setStatus('current')
if mibBuilder.loadTexts: iscsiInitiatorModifyCompleted.setDescription('iSCSI initiator properties modified')
iscsiInitiatorDeleteCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1304)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: iscsiInitiatorDeleteCompleted.setStatus('current')
if mibBuilder.loadTexts: iscsiInitiatorDeleteCompleted.setDescription('iSCSI initiator deleted')
iscsiTargetCreateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1305)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: iscsiTargetCreateCompleted.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetCreateCompleted.setDescription('iSCSI target created')
iscsiTargetModifyCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1306)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: iscsiTargetModifyCompleted.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetModifyCompleted.setDescription('iSCSI target properties modified')
iscsiTargetDeleteCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1307)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: iscsiTargetDeleteCompleted.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetDeleteCompleted.setDescription('iSCSI Target deleted')
iscsiTargetError = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1308)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: iscsiTargetError.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetError.setDescription('iSCSI target error')
iscsiTargetGroupError = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1309)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: iscsiTargetGroupError.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetGroupError.setDescription('iSCSI target group error')
iscsiImproperTargetGroup = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1310)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: iscsiImproperTargetGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiImproperTargetGroup.setDescription('iSCSI improper target group error')
targetGroupCreateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1401)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: targetGroupCreateCompleted.setStatus('current')
if mibBuilder.loadTexts: targetGroupCreateCompleted.setDescription('Target group created')
targetGroupMemberAdded = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1402)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: targetGroupMemberAdded.setStatus('current')
if mibBuilder.loadTexts: targetGroupMemberAdded.setDescription('Member added to the Target group')
targetGroupMemberRemoved = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1403)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: targetGroupMemberRemoved.setStatus('current')
if mibBuilder.loadTexts: targetGroupMemberRemoved.setDescription('Member removed from the Target group')
targetGroupDeleteCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1404)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: targetGroupDeleteCompleted.setStatus('current')
if mibBuilder.loadTexts: targetGroupDeleteCompleted.setDescription('Target group deleted')
adServerTimeDrift = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1501)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: adServerTimeDrift.setStatus('current')
if mibBuilder.loadTexts: adServerTimeDrift.setDescription('AD server time drift detected')
maintenanceModeEnabled = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1502)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: maintenanceModeEnabled.setStatus('current')
if mibBuilder.loadTexts: maintenanceModeEnabled.setDescription('Maintenance mode enabled')
maintenanceModeDisabled = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1503)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: maintenanceModeDisabled.setStatus('current')
if mibBuilder.loadTexts: maintenanceModeDisabled.setDescription('Maintenance mode disabled')
diagnosticDataUploaded = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1504)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: diagnosticDataUploaded.setStatus('current')
if mibBuilder.loadTexts: diagnosticDataUploaded.setDescription('Diagnostics data uploaded')
diagnosticDataUploadingFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1505)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: diagnosticDataUploadingFailed.setStatus('current')
if mibBuilder.loadTexts: diagnosticDataUploadingFailed.setDescription('Diagnostics data upload failed')
alertsCleanupCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1506)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: alertsCleanupCompleted.setStatus('current')
if mibBuilder.loadTexts: alertsCleanupCompleted.setDescription('Alerts clean-up completed')
userLoginFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1507)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: userLoginFailed.setStatus('current')
if mibBuilder.loadTexts: userLoginFailed.setDescription('User login attempt failed.')
ntpServerTimeDrift = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1508)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: ntpServerTimeDrift.setStatus('current')
if mibBuilder.loadTexts: ntpServerTimeDrift.setDescription('Time drift detected between NTP Server and Controller.')
smbSocketFailure = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1601)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: smbSocketFailure.setStatus('current')
if mibBuilder.loadTexts: smbSocketFailure.setDescription('SMB socket failure detected')
netbiosSocketFailure = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1602)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: netbiosSocketFailure.setStatus('current')
if mibBuilder.loadTexts: netbiosSocketFailure.setDescription('NetBIOS socket failure detected')
upgradeStarted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1701)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: upgradeStarted.setStatus('current')
if mibBuilder.loadTexts: upgradeStarted.setDescription('Software upgrade started')
upgradeCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1702)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: upgradeCompleted.setStatus('current')
if mibBuilder.loadTexts: upgradeCompleted.setDescription('Software upgrade completed')
upgradeFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1703)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: upgradeFailed.setStatus('current')
if mibBuilder.loadTexts: upgradeFailed.setDescription('Software upgrade failed')
upgradeTimeout = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1704)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: upgradeTimeout.setStatus('current')
if mibBuilder.loadTexts: upgradeTimeout.setDescription('Software upgrade timed out')
upgradeCantProcessFilesManually = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1705)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: upgradeCantProcessFilesManually.setStatus('current')
if mibBuilder.loadTexts: upgradeCantProcessFilesManually.setDescription('Software upgrade cannot process files manually')
upgradeDownloadStarted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1706)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: upgradeDownloadStarted.setStatus('current')
if mibBuilder.loadTexts: upgradeDownloadStarted.setDescription('Software download started')
upgradeDownloadCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1707)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: upgradeDownloadCompleted.setStatus('current')
if mibBuilder.loadTexts: upgradeDownloadCompleted.setDescription('Software download complete')
upgradeDownloadFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1708)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: upgradeDownloadFailed.setStatus('current')
if mibBuilder.loadTexts: upgradeDownloadFailed.setDescription('Software download failed')
tdpsUpgradeCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1709)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: tdpsUpgradeCompleted.setStatus('current')
if mibBuilder.loadTexts: tdpsUpgradeCompleted.setDescription('TDPS upgrade completed')
tdpsUpgradeFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1710)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: tdpsUpgradeFailed.setStatus('current')
if mibBuilder.loadTexts: tdpsUpgradeFailed.setDescription('TDPS upgrade failed')
tdpsUpgradeTimeout = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1711)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: tdpsUpgradeTimeout.setStatus('current')
if mibBuilder.loadTexts: tdpsUpgradeTimeout.setDescription('TDPS upgrade timed out')
tdpsUpgradeDownloadStarted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1712)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: tdpsUpgradeDownloadStarted.setStatus('current')
if mibBuilder.loadTexts: tdpsUpgradeDownloadStarted.setDescription('TDPS download started')
tdpsUpgradeDownloadCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1713)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: tdpsUpgradeDownloadCompleted.setStatus('current')
if mibBuilder.loadTexts: tdpsUpgradeDownloadCompleted.setDescription('TDPS download completed')
tdpsUpgradeDownloadFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1714)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: tdpsUpgradeDownloadFailed.setStatus('current')
if mibBuilder.loadTexts: tdpsUpgradeDownloadFailed.setDescription('TDPS download failed')
webdocsUpgradeDownloadStarted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1715)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: webdocsUpgradeDownloadStarted.setStatus('current')
if mibBuilder.loadTexts: webdocsUpgradeDownloadStarted.setDescription('Webdocs upgrade download started')
webdocsUpgradeDownloadCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1716)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: webdocsUpgradeDownloadCompleted.setStatus('current')
if mibBuilder.loadTexts: webdocsUpgradeDownloadCompleted.setDescription('Webdocs upgrade download completed')
webdocsUpgradeDownloadFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1717)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: webdocsUpgradeDownloadFailed.setStatus('current')
if mibBuilder.loadTexts: webdocsUpgradeDownloadFailed.setDescription('Webdocs upgrade download failed')
webdocsUpgradeCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1718)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: webdocsUpgradeCompleted.setStatus('current')
if mibBuilder.loadTexts: webdocsUpgradeCompleted.setDescription('Webdocs upgrade completed')
webdocsUpgradeFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1719)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: webdocsUpgradeFailed.setStatus('current')
if mibBuilder.loadTexts: webdocsUpgradeFailed.setDescription('Webdocs upgrade failed')
replicationTargetDeleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1801)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: replicationTargetDeleted.setStatus('current')
if mibBuilder.loadTexts: replicationTargetDeleted.setDescription('Replication target deleted')
replicationComplete = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1802)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: replicationComplete.setStatus('current')
if mibBuilder.loadTexts: replicationComplete.setDescription('Replication completed')
replicationAborted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1803)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: replicationAborted.setStatus('current')
if mibBuilder.loadTexts: replicationAborted.setDescription('Replication aborted')
replicationAbandoned = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1804)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: replicationAbandoned.setStatus('current')
if mibBuilder.loadTexts: replicationAbandoned.setDescription('Replication abandoned')
replicationResumed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1805)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: replicationResumed.setStatus('current')
if mibBuilder.loadTexts: replicationResumed.setDescription('Replication resumed')
replicationStarted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1806)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: replicationStarted.setStatus('current')
if mibBuilder.loadTexts: replicationStarted.setDescription('Replication started')
replicationFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1807)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: replicationFailed.setStatus('current')
if mibBuilder.loadTexts: replicationFailed.setDescription('Replication failed')
replicationSourceRegistered = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1808)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: replicationSourceRegistered.setStatus('current')
if mibBuilder.loadTexts: replicationSourceRegistered.setDescription('Replication source registered')
replicationPaused = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1809)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: replicationPaused.setStatus('current')
if mibBuilder.loadTexts: replicationPaused.setDescription('Replication paused')
snmpServiceStarted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1901)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snmpServiceStarted.setStatus('current')
if mibBuilder.loadTexts: snmpServiceStarted.setDescription('SNMP Service started')
snmpServiceStartFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1902)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snmpServiceStartFailed.setStatus('current')
if mibBuilder.loadTexts: snmpServiceStartFailed.setDescription('SNMP Service failed to start')
snmpServiceStopped = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1903)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snmpServiceStopped.setStatus('current')
if mibBuilder.loadTexts: snmpServiceStopped.setDescription('SNMP Service stopped')
snmpServiceStopFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1904)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snmpServiceStopFailed.setStatus('current')
if mibBuilder.loadTexts: snmpServiceStopFailed.setDescription('SNMP Service failed to stop')
smisServiceStarted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1905)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: smisServiceStarted.setStatus('current')
if mibBuilder.loadTexts: smisServiceStarted.setDescription('SMIS service started')
smisServiceStartFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1906)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: smisServiceStartFailed.setStatus('current')
if mibBuilder.loadTexts: smisServiceStartFailed.setDescription('SMIS Service failed to start')
smisServiceStopped = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1907)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: smisServiceStopped.setStatus('current')
if mibBuilder.loadTexts: smisServiceStopped.setDescription('SMIS Service stopped')
smisServiceStopFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1908)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: smisServiceStopFailed.setStatus('current')
if mibBuilder.loadTexts: smisServiceStopFailed.setDescription('SMIS Service failed to stop')
ipmiTemperature = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2001)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationEventCode"), ("TEGILE-MIB", "notificationSensorAction"), ("TEGILE-MIB", "notificationSensorNumber"), ("TEGILE-MIB", "notificationSensorSuspect"), ("TEGILE-MIB", "notificationReadingTriggerValue"), ("TEGILE-MIB", "notificationThresholdTriggerValue"), ("TEGILE-MIB", "notificationReadingUnit"))
if mibBuilder.loadTexts: ipmiTemperature.setStatus('current')
if mibBuilder.loadTexts: ipmiTemperature.setDescription("An IPMI event was raised related to array's Temperature.")
ipmiVoltage = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2002)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationEventCode"), ("TEGILE-MIB", "notificationSensorAction"), ("TEGILE-MIB", "notificationSensorNumber"), ("TEGILE-MIB", "notificationSensorSuspect"), ("TEGILE-MIB", "notificationReadingTriggerValue"), ("TEGILE-MIB", "notificationThresholdTriggerValue"), ("TEGILE-MIB", "notificationReadingUnit"))
if mibBuilder.loadTexts: ipmiVoltage.setStatus('current')
if mibBuilder.loadTexts: ipmiVoltage.setDescription("An IPMI event was raised related to array's Voltage.")
ipmiCurrent = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2003)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationEventCode"), ("TEGILE-MIB", "notificationSensorAction"), ("TEGILE-MIB", "notificationSensorNumber"), ("TEGILE-MIB", "notificationSensorSuspect"), ("TEGILE-MIB", "notificationReadingTriggerValue"), ("TEGILE-MIB", "notificationThresholdTriggerValue"), ("TEGILE-MIB", "notificationReadingUnit"))
if mibBuilder.loadTexts: ipmiCurrent.setStatus('current')
if mibBuilder.loadTexts: ipmiCurrent.setDescription("An IPMI event was raised related to array's Current.")
ipmiFan = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2004)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationEventCode"), ("TEGILE-MIB", "notificationSensorAction"), ("TEGILE-MIB", "notificationSensorNumber"), ("TEGILE-MIB", "notificationSensorSuspect"), ("TEGILE-MIB", "notificationReadingTriggerValue"), ("TEGILE-MIB", "notificationThresholdTriggerValue"), ("TEGILE-MIB", "notificationReadingUnit"))
if mibBuilder.loadTexts: ipmiFan.setStatus('current')
if mibBuilder.loadTexts: ipmiFan.setDescription("An IPMI event was raised related to array's Fans.")
ipmiPowerSupply = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2005)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationEventCode"), ("TEGILE-MIB", "notificationSensorAction"), ("TEGILE-MIB", "notificationSensorNumber"), ("TEGILE-MIB", "notificationSensorSuspect"))
if mibBuilder.loadTexts: ipmiPowerSupply.setStatus('current')
if mibBuilder.loadTexts: ipmiPowerSupply.setDescription("An IPMI event was raised related to array's Power Supply.")
ipmiMemory = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2006)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationEventCode"), ("TEGILE-MIB", "notificationSensorAction"), ("TEGILE-MIB", "notificationSensorNumber"), ("TEGILE-MIB", "notificationSensorSuspect"))
if mibBuilder.loadTexts: ipmiMemory.setStatus('current')
if mibBuilder.loadTexts: ipmiMemory.setDescription('A IPMI Memory error was detected.')
ipmiCriticalInterrupt = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2007)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationEventCode"), ("TEGILE-MIB", "notificationSensorAction"), ("TEGILE-MIB", "notificationSensorNumber"), ("TEGILE-MIB", "notificationSensorSuspect"))
if mibBuilder.loadTexts: ipmiCriticalInterrupt.setStatus('current')
if mibBuilder.loadTexts: ipmiCriticalInterrupt.setDescription('An IPMI Critical Interrupt was received.')
ipmiThreshold = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2008)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationEventCode"), ("TEGILE-MIB", "notificationSensorAction"), ("TEGILE-MIB", "notificationSensorNumber"), ("TEGILE-MIB", "notificationSensorSuspect"), ("TEGILE-MIB", "notificationReadingTriggerValue"), ("TEGILE-MIB", "notificationThresholdTriggerValue"), ("TEGILE-MIB", "notificationReadingUnit"))
if mibBuilder.loadTexts: ipmiThreshold.setStatus('current')
if mibBuilder.loadTexts: ipmiThreshold.setDescription('An IPMI Threshold event was generated.')
ipmiOther = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2009)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationEventCode"), ("TEGILE-MIB", "notificationSensorAction"), ("TEGILE-MIB", "notificationSensorNumber"), ("TEGILE-MIB", "notificationSensorSuspect"))
if mibBuilder.loadTexts: ipmiOther.setStatus('current')
if mibBuilder.loadTexts: ipmiOther.setDescription('An IPMI event was received.')
memoryFailure = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2051)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: memoryFailure.setStatus('current')
if mibBuilder.loadTexts: memoryFailure.setDescription('Memory failure')
sensorFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2052)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: sensorFailureEvent.setStatus('current')
if mibBuilder.loadTexts: sensorFailureEvent.setDescription('Sensor failure')
unknownSensorEvent = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2053)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: unknownSensorEvent.setStatus('current')
if mibBuilder.loadTexts: unknownSensorEvent.setDescription('Unknown sensor event')
networkIpmpGroupUp = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2201)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: networkIpmpGroupUp.setStatus('current')
if mibBuilder.loadTexts: networkIpmpGroupUp.setDescription('IPMP group is up.')
networkIpmpGroupDown = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2202)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: networkIpmpGroupDown.setStatus('current')
if mibBuilder.loadTexts: networkIpmpGroupDown.setDescription('IPMP group is down.')
networkIpmpMemberInterfaceAdded = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2203)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: networkIpmpMemberInterfaceAdded.setStatus('current')
if mibBuilder.loadTexts: networkIpmpMemberInterfaceAdded.setDescription('Network interface added to IPMP group.')
networkIpmpMemberInterfaceRemoved = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2204)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: networkIpmpMemberInterfaceRemoved.setStatus('current')
if mibBuilder.loadTexts: networkIpmpMemberInterfaceRemoved.setDescription('Network interface removed from IPMP group.')
networkInterfaceUp = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2205)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: networkInterfaceUp.setStatus('current')
if mibBuilder.loadTexts: networkInterfaceUp.setDescription('Network interface is up.')
networkInterfaceDown = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2206)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: networkInterfaceDown.setStatus('current')
if mibBuilder.loadTexts: networkInterfaceDown.setDescription('Network interface is down.')
vmwareNFSDatastoreCreated = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2301)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: vmwareNFSDatastoreCreated.setStatus('current')
if mibBuilder.loadTexts: vmwareNFSDatastoreCreated.setDescription('VMWare NFS Datastore has been created.')
vmwareNFSDatastoreDeleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2302)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: vmwareNFSDatastoreDeleted.setStatus('current')
if mibBuilder.loadTexts: vmwareNFSDatastoreDeleted.setDescription('VMWare NFS Datastore has been deleted.')
nvdimmFailDeviceError = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2401)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: nvdimmFailDeviceError.setStatus('current')
if mibBuilder.loadTexts: nvdimmFailDeviceError.setDescription('NVDIMM Device is not detectable.')
nvdimmFailSoftError = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2402)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: nvdimmFailSoftError.setStatus('current')
if mibBuilder.loadTexts: nvdimmFailSoftError.setDescription('NVDIMM Device has encountered some errors.')
nvdimmFailInitializationError = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2403)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: nvdimmFailInitializationError.setStatus('current')
if mibBuilder.loadTexts: nvdimmFailInitializationError.setDescription('Failed to initialize NVDIMM Device.')
nvdimmFailUnknownError = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2404)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: nvdimmFailUnknownError.setStatus('current')
if mibBuilder.loadTexts: nvdimmFailUnknownError.setDescription('NVDIMM failure encountered. Please see the IntelliFlash UI event details.')
tegileConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 3))
tegileGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 3, 1))
currentObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43906, 3, 1, 1)).setObjects(("TEGILE-MIB", "haControllerA_Name"), ("TEGILE-MIB", "haControllerA_IPAddr"), ("TEGILE-MIB", "haControllerA_SoftwareVersion"), ("TEGILE-MIB", "haControllerA_Uptime"), ("TEGILE-MIB", "haControllerB_Name"), ("TEGILE-MIB", "haControllerB_IPAddr"), ("TEGILE-MIB", "haControllerB_SoftwareVersion"), ("TEGILE-MIB", "haControllerB_Uptime"), ("TEGILE-MIB", "controllerHardwareModel"), ("TEGILE-MIB", "snmpAgentVersion"), ("TEGILE-MIB", "cpuTotalUsage"), ("TEGILE-MIB", "cpuSystemCalls"), ("TEGILE-MIB", "cpuInterrupts"), ("TEGILE-MIB", "cacheTotalWriteMbps"), ("TEGILE-MIB", "cacheTotalReadMbps"), ("TEGILE-MIB", "cacheTotalWriteIops"), ("TEGILE-MIB", "cacheTotalReadIops"), ("TEGILE-MIB", "cacheRAMReads"), ("TEGILE-MIB", "cacheSSDReads"), ("TEGILE-MIB", "diskTotalWriteMbps"), ("TEGILE-MIB", "diskTotalReadMbps"), ("TEGILE-MIB", "diskTotalWriteIops"), ("TEGILE-MIB", "diskTotalReadIops"), ("TEGILE-MIB", "diskDataWriteMbps"), ("TEGILE-MIB", "diskDataReadMbps"), ("TEGILE-MIB", "diskDataWriteIops"), ("TEGILE-MIB", "diskDataReadIops"), ("TEGILE-MIB", "diskAvgWriteLatency"), ("TEGILE-MIB", "diskAvgReadLatency"), ("TEGILE-MIB", "diskIOCount"), ("TEGILE-MIB", "diskRandomIOCount"), ("TEGILE-MIB", "diskSequentialIOCount"), ("TEGILE-MIB", "poolTotalWriteMbps"), ("TEGILE-MIB", "poolTotalReadMbps"), ("TEGILE-MIB", "poolTotalWriteIops"), ("TEGILE-MIB", "poolTotalReadIops"), ("TEGILE-MIB", "poolAvgWriteLatency"), ("TEGILE-MIB", "poolAvgReadLatency"), ("TEGILE-MIB", "cifsTotalWriteMbps"), ("TEGILE-MIB", "cifsTotalReadMbps"), ("TEGILE-MIB", "cifsTotalWriteIops"), ("TEGILE-MIB", "cifsTotalReadIops"), ("TEGILE-MIB", "cifsAvgWriteLatency"), ("TEGILE-MIB", "cifsAvgReadLatency"), ("TEGILE-MIB", "nfsTotalWriteMbps"), ("TEGILE-MIB", "nfsTotalReadMbps"), ("TEGILE-MIB", "nfsTotalWriteIops"), ("TEGILE-MIB", "nfsTotalReadIops"), ("TEGILE-MIB", "nfsAvgWriteLatency"), ("TEGILE-MIB", "nfsAvgReadLatency"), ("TEGILE-MIB", "iscsiTotalWriteMbps"), ("TEGILE-MIB", "iscsiTotalReadMbps"), ("TEGILE-MIB", "iscsiWriteIops"), ("TEGILE-MIB", "iscsiTotalReadIops"), ("TEGILE-MIB", "iscsiAvgWriteLatency"), ("TEGILE-MIB", "iscsiAvgReadLatency"), ("TEGILE-MIB", "fcTotalWriteMbps"), ("TEGILE-MIB", "fcTotalReadMbps"), ("TEGILE-MIB", "fcTotalWriteIops"), ("TEGILE-MIB", "fcTotalReadIops"), ("TEGILE-MIB", "fcAvgWriteLatency"), ("TEGILE-MIB", "fcAvgReadLatency"), ("TEGILE-MIB", "vmwareNFSDatastoresTotalWriteMbps"), ("TEGILE-MIB", "vmwareNFSDatastoresTotalReadMbps"), ("TEGILE-MIB", "vmwareNFSDatastoresTotalWriteIops"), ("TEGILE-MIB", "vmwareNFSDatastoresTotalReadIops"), ("TEGILE-MIB", "vmwareNFSDatastoresAvgWriteLatency"), ("TEGILE-MIB", "vmwareNFSDatastoresAvgReadLatency"), ("TEGILE-MIB", "networkTotalReceiveMbps"), ("TEGILE-MIB", "networkTotalTransmitMbps"), ("TEGILE-MIB", "diskCount"), ("TEGILE-MIB", "diskAlias"), ("TEGILE-MIB", "diskSizeLow"), ("TEGILE-MIB", "diskSizeHigh"), ("TEGILE-MIB", "diskState"), ("TEGILE-MIB", "diskType"), ("TEGILE-MIB", "diskPoolName"), ("TEGILE-MIB", "poolCount"), ("TEGILE-MIB", "poolName"), ("TEGILE-MIB", "poolState"), ("TEGILE-MIB", "poolHealth"), ("TEGILE-MIB", "poolOwnerController"), ("TEGILE-MIB", "poolProjectCount"), ("TEGILE-MIB", "poolSizeLow"), ("TEGILE-MIB", "poolSizeHigh"), ("TEGILE-MIB", "poolUsedSizeLow"), ("TEGILE-MIB", "poolUsedSizeHigh"), ("TEGILE-MIB", "poolFreeSizeLow"), ("TEGILE-MIB", "poolFreeSizeHigh"), ("TEGILE-MIB", "poolDataSizeLow"), ("TEGILE-MIB", "poolDataSizeHigh"), ("TEGILE-MIB", "poolPostDedupDataSizeLow"), ("TEGILE-MIB", "poolPostDedupDataSizeHigh"), ("TEGILE-MIB", "poolPostCompressionDataSizeLow"), ("TEGILE-MIB", "poolPostCompressionDataSizeHigh"), ("TEGILE-MIB", "poolUnusedReservedSizeLow"), ("TEGILE-MIB", "poolUnusedReservedSizeHigh"), ("TEGILE-MIB", "poolTotalSaving"), ("TEGILE-MIB", "poolDataWriteMbps"), ("TEGILE-MIB", "poolDataReadMbps"), ("TEGILE-MIB", "poolDataWriteIops"), ("TEGILE-MIB", "poolDataReadIops"), ("TEGILE-MIB", "poolDataWriteLatency"), ("TEGILE-MIB", "poolDataReadLatency"), ("TEGILE-MIB", "poolMetaWriteMbps"), ("TEGILE-MIB", "poolMetaReadMbps"), ("TEGILE-MIB", "poolMetaWriteIops"), ("TEGILE-MIB", "poolMetaReadIops"), ("TEGILE-MIB", "poolMetaWriteLatency"), ("TEGILE-MIB", "poolMetaReadLatency"), ("TEGILE-MIB", "poolReadCacheWriteMbps"), ("TEGILE-MIB", "poolReadCacheReadMbps"), ("TEGILE-MIB", "poolReadCacheWriteIops"), ("TEGILE-MIB", "poolReadCacheReadIops"), ("TEGILE-MIB", "poolReadCacheWriteLatency"), ("TEGILE-MIB", "poolReadCacheReadLatency"), ("TEGILE-MIB", "poolWriteCacheWriteMbps"), ("TEGILE-MIB", "poolWriteCacheWriteIops"), ("TEGILE-MIB", "poolWriteCacheWriteLatency"), ("TEGILE-MIB", "projectName"), ("TEGILE-MIB", "projectPoolName"), ("TEGILE-MIB", "projectDedupEnabled"), ("TEGILE-MIB", "projectCompressionEnabled"), ("TEGILE-MIB", "projectQuotaSizeLow"), ("TEGILE-MIB", "projectQuotaSizeHigh"), ("TEGILE-MIB", "projectDataSizeLow"), ("TEGILE-MIB", "projectDataSizeHigh"), ("TEGILE-MIB", "projectFreeSizeLow"), ("TEGILE-MIB", "projectFreeSizeHigh"), ("TEGILE-MIB", "projectSnapshotSizeLow"), ("TEGILE-MIB", "projectSnapshotSizeHigh"), ("TEGILE-MIB", "projectPostCompressionDataSizeLow"), ("TEGILE-MIB", "projectPostCompressionDataSizeHigh"), ("TEGILE-MIB", "projectUnusedReservedSizeLow"), ("TEGILE-MIB", "projectUnusedReservedSizeHigh"), ("TEGILE-MIB", "projectTotalSaving"), ("TEGILE-MIB", "projectLunCount"), ("TEGILE-MIB", "projectShareCount"), ("TEGILE-MIB", "lunName"), ("TEGILE-MIB", "lunProjectName"), ("TEGILE-MIB", "lunPoolName"), ("TEGILE-MIB", "lunGUID"), ("TEGILE-MIB", "lunBlockSize"), ("TEGILE-MIB", "lunDedupEnabled"), ("TEGILE-MIB", "lunCompressionEnabled"), ("TEGILE-MIB", "lunSizeLow"), ("TEGILE-MIB", "lunSizeHigh"), ("TEGILE-MIB", "lunDataSizeLow"), ("TEGILE-MIB", "lunDataSizeHigh"), ("TEGILE-MIB", "lunSnapshotSizeLow"), ("TEGILE-MIB", "lunSnapshotSizeHigh"), ("TEGILE-MIB", "lunFreeSizeLow"), ("TEGILE-MIB", "lunFreeSizeHigh"), ("TEGILE-MIB", "lunReservedSizeLow"), ("TEGILE-MIB", "lunReservedSizeHigh"), ("TEGILE-MIB", "lunCompressedRatio"), ("TEGILE-MIB", "lunProtocol"), ("TEGILE-MIB", "lunTargetGroup"), ("TEGILE-MIB", "lunInitiatorGroup"), ("TEGILE-MIB", "lunWriteMbps"), ("TEGILE-MIB", "lunReadMbps"), ("TEGILE-MIB", "lunWriteIops"), ("TEGILE-MIB", "lunReadIops"), ("TEGILE-MIB", "lunWriteLatency"), ("TEGILE-MIB", "lunReadLatency"), ("TEGILE-MIB", "shareName"), ("TEGILE-MIB", "shareMountPoint"), ("TEGILE-MIB", "shareProjectName"), ("TEGILE-MIB", "sharePoolName"), ("TEGILE-MIB", "shareQuotaLow"), ("TEGILE-MIB", "shareQuotaHigh"), ("TEGILE-MIB", "shareNFSEnabled"), ("TEGILE-MIB", "shareCIFSEnabled"), ("TEGILE-MIB", "shareDedupEnabled"), ("TEGILE-MIB", "shareCompressionEnabled"), ("TEGILE-MIB", "shareDataSizeLow"), ("TEGILE-MIB", "shareDataSizeHigh"), ("TEGILE-MIB", "shareSnapshotSizeLow"), ("TEGILE-MIB", "shareSnapshotSizeHigh"), ("TEGILE-MIB", "shareReservedSizeLow"), ("TEGILE-MIB", "shareReservedSizeHigh"), ("TEGILE-MIB", "shareCompressedRatio"), ("TEGILE-MIB", "shareCIFSWriteMbps"), ("TEGILE-MIB", "shareCIFSReadMbps"), ("TEGILE-MIB", "shareCIFSWriteIops"), ("TEGILE-MIB", "shareCIFSReadIops"), ("TEGILE-MIB", "shareCIFSWriteLatency"), ("TEGILE-MIB", "shareCIFSReadLatency"), ("TEGILE-MIB", "shareNFSWriteMbps"), ("TEGILE-MIB", "shareNFSReadMbps"), ("TEGILE-MIB", "shareNFSWriteIops"), ("TEGILE-MIB", "shareNFSReadIops"), ("TEGILE-MIB", "shareNFSWriteLatency"), ("TEGILE-MIB", "shareNFSReadLatency"), ("TEGILE-MIB", "iscsiTargetName"), ("TEGILE-MIB", "iscsiTargetAlias"), ("TEGILE-MIB", "iscsiTargetGroup"), ("TEGILE-MIB", "iscsiTargetAuth"), ("TEGILE-MIB", "iscsiTargetWriteMbps"), ("TEGILE-MIB", "iscsiTargetReadMbps"), ("TEGILE-MIB", "iscsiTargetWriteIops"), ("TEGILE-MIB", "iscsiTargetReadIops"), ("TEGILE-MIB", "iscsiTargetWriteLatency"), ("TEGILE-MIB", "iscsiTargetReadLatency"), ("TEGILE-MIB", "iscsiInitiatorName"), ("TEGILE-MIB", "iscsiInitiatorChapUser"), ("TEGILE-MIB", "iscsiInitiatorGroup"), ("TEGILE-MIB", "fcTargetName"), ("TEGILE-MIB", "fcTargetStatus"), ("TEGILE-MIB", "fcTargetGroup"), ("TEGILE-MIB", "fcTargetWriteMbps"), ("TEGILE-MIB", "fcTargetReadMbps"), ("TEGILE-MIB", "fcTargetWriteIops"), ("TEGILE-MIB", "fcTargetReadIops"), ("TEGILE-MIB", "fcTargetWriteLatency"), ("TEGILE-MIB", "fcTargetReadLatency"), ("TEGILE-MIB", "fcInitiatorName"), ("TEGILE-MIB", "fcInitiatorGroup"), ("TEGILE-MIB", "vmwareNFSDatastoreVMName"), ("TEGILE-MIB", "vmwareNFSDatastoreESXName"), ("TEGILE-MIB", "vmwareNFSDatastoreWriteMbps"), ("TEGILE-MIB", "vmwareNFSDatastoreReadMbps"), ("TEGILE-MIB", "vmwareNFSDatastoreWriteIops"), ("TEGILE-MIB", "vmwareNFSDatastoreReadIops"), ("TEGILE-MIB", "vmwareNFSDatastoreWriteLatency"), ("TEGILE-MIB", "vmwareNFSDatastoreReadLatency"), ("TEGILE-MIB", "haResourceName"), ("TEGILE-MIB", "haResourceDescription"), ("TEGILE-MIB", "haResourceStatus"), ("TEGILE-MIB", "haResourceGroup"), ("TEGILE-MIB", "haResourceActiveNode"), ("TEGILE-MIB", "nicName"), ("TEGILE-MIB", "nicState"), ("TEGILE-MIB", "nicGroup"), ("TEGILE-MIB", "nicMTU"), ("TEGILE-MIB", "nicReceiveMbps"), ("TEGILE-MIB", "nicTransmitMbps"), ("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"), ("TEGILE-MIB", "notificationSensorAction"), ("TEGILE-MIB", "notificationSensorNumber"), ("TEGILE-MIB", "notificationSensorSuspect"), ("TEGILE-MIB", "notificationReadingTriggerValue"), ("TEGILE-MIB", "notificationThresholdTriggerValue"), ("TEGILE-MIB", "notificationReadingUnit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    currentObjectGroup = currentObjectGroup.setStatus('current')
if mibBuilder.loadTexts: currentObjectGroup.setDescription('TEGILE-MIB OBJECT-GROUP.')
currentNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 43906, 3, 1, 2)).setObjects(("TEGILE-MIB", "testNotification"), ("TEGILE-MIB", "diskIsOnline"), ("TEGILE-MIB", "diskGoneOffline"), ("TEGILE-MIB", "diskError"), ("TEGILE-MIB", "spareDiskReplaced"), ("TEGILE-MIB", "diskSlowIo"), ("TEGILE-MIB", "poolCreated"), ("TEGILE-MIB", "poolDeleted"), ("TEGILE-MIB", "poolDeletionFailed"), ("TEGILE-MIB", "poolExpanded"), ("TEGILE-MIB", "poolExported"), ("TEGILE-MIB", "poolImported"), ("TEGILE-MIB", "poolUpgraded"), ("TEGILE-MIB", "poolQuotaExceedThresholdWarning"), ("TEGILE-MIB", "poolMetaDataQuotaExceedThresholdWarning"), ("TEGILE-MIB", "poolAvailableMetaToDataRatioBelowThresholdWarning"), ("TEGILE-MIB", "poolQuotaFinished"), ("TEGILE-MIB", "poolDegraded"), ("TEGILE-MIB", "projectCreatedSuccessfully"), ("TEGILE-MIB", "projectDeletionFailed"), ("TEGILE-MIB", "projectDeleted"), ("TEGILE-MIB", "projectModified"), ("TEGILE-MIB", "projectThresholdExceedWarning"), ("TEGILE-MIB", "projectQuotaFinished"), ("TEGILE-MIB", "projectCreatedWithNonOptimalBlockSize"), ("TEGILE-MIB", "volumeCreatedSuccessfully"), ("TEGILE-MIB", "volumeModifyCompleted"), ("TEGILE-MIB", "volumeDeleteCompleted"), ("TEGILE-MIB", "volumeDeleteFailed"), ("TEGILE-MIB", "volumeExceedsThresholdWarning"), ("TEGILE-MIB", "volumeQuotaFinished"), ("TEGILE-MIB", "volumeCreatedWithNonOptimalBlockSize"), ("TEGILE-MIB", "shareCreatedSuccessfully"), ("TEGILE-MIB", "shareDeletionFailed"), ("TEGILE-MIB", "shareDeleted"), ("TEGILE-MIB", "shareExceedThresholdWarning"), ("TEGILE-MIB", "shareQuotaFinished"), ("TEGILE-MIB", "shareCreatedWithNonOptimalBlockSize"), ("TEGILE-MIB", "aclMigrationStarted"), ("TEGILE-MIB", "aclMigrationCompleted"), ("TEGILE-MIB", "deleteFolderCompleted"), ("TEGILE-MIB", "deleteFolderFailed"), ("TEGILE-MIB", "snapshotCreatedSuccessfully"), ("TEGILE-MIB", "snapshotCreationFailed"), ("TEGILE-MIB", "snapshotDeletedSuccessfully"), ("TEGILE-MIB", "snapshotDeleteFailed"), ("TEGILE-MIB", "snapshotCloningFailed"), ("TEGILE-MIB", "snapshotCloneCompleted"), ("TEGILE-MIB", "snapshotRollbackFailed"), ("TEGILE-MIB", "snapshotRollbackCompleted"), ("TEGILE-MIB", "haResourceGroupTakeBackCompleted"), ("TEGILE-MIB", "haResourceGroupTakeOverCompleted"), ("TEGILE-MIB", "controllerUp"), ("TEGILE-MIB", "controllerDown"), ("TEGILE-MIB", "intelliFlashSoftwareUp"), ("TEGILE-MIB", "intelliFlashSoftwareDown"), ("TEGILE-MIB", "controllerTimeDrift"), ("TEGILE-MIB", "fcInitiatorCreateCompleted"), ("TEGILE-MIB", "fcInitiatorCreateFailed"), ("TEGILE-MIB", "fcInitiatorModifyCompleted"), ("TEGILE-MIB", "fcTargetResetHbaPortCompleted"), ("TEGILE-MIB", "fcTargetResetHbaPortFailed"), ("TEGILE-MIB", "fcTargetModifyCompleted"), ("TEGILE-MIB", "fcPortOnline"), ("TEGILE-MIB", "fcPortOffline"), ("TEGILE-MIB", "initiatorGroupCreateCompleted"), ("TEGILE-MIB", "initiatorGroupMemberAdded"), ("TEGILE-MIB", "initiatorGroupMemberRemoved"), ("TEGILE-MIB", "initiatorGroupDeleteCompleted"), ("TEGILE-MIB", "iscsiInitiatorCreateCompleted"), ("TEGILE-MIB", "iscsiInitiatorCreateFailed"), ("TEGILE-MIB", "iscsiInitiatorModifyCompleted"), ("TEGILE-MIB", "iscsiInitiatorDeleteCompleted"), ("TEGILE-MIB", "iscsiTargetCreateCompleted"), ("TEGILE-MIB", "iscsiTargetModifyCompleted"), ("TEGILE-MIB", "iscsiTargetDeleteCompleted"), ("TEGILE-MIB", "iscsiTargetError"), ("TEGILE-MIB", "iscsiTargetGroupError"), ("TEGILE-MIB", "iscsiImproperTargetGroup"), ("TEGILE-MIB", "targetGroupCreateCompleted"), ("TEGILE-MIB", "targetGroupMemberAdded"), ("TEGILE-MIB", "targetGroupMemberRemoved"), ("TEGILE-MIB", "targetGroupDeleteCompleted"), ("TEGILE-MIB", "adServerTimeDrift"), ("TEGILE-MIB", "maintenanceModeEnabled"), ("TEGILE-MIB", "maintenanceModeDisabled"), ("TEGILE-MIB", "diagnosticDataUploaded"), ("TEGILE-MIB", "diagnosticDataUploadingFailed"), ("TEGILE-MIB", "alertsCleanupCompleted"), ("TEGILE-MIB", "userLoginFailed"), ("TEGILE-MIB", "ntpServerTimeDrift"), ("TEGILE-MIB", "smbSocketFailure"), ("TEGILE-MIB", "netbiosSocketFailure"), ("TEGILE-MIB", "upgradeStarted"), ("TEGILE-MIB", "upgradeCompleted"), ("TEGILE-MIB", "upgradeFailed"), ("TEGILE-MIB", "upgradeTimeout"), ("TEGILE-MIB", "upgradeCantProcessFilesManually"), ("TEGILE-MIB", "upgradeDownloadStarted"), ("TEGILE-MIB", "upgradeDownloadCompleted"), ("TEGILE-MIB", "upgradeDownloadFailed"), ("TEGILE-MIB", "tdpsUpgradeCompleted"), ("TEGILE-MIB", "tdpsUpgradeFailed"), ("TEGILE-MIB", "tdpsUpgradeTimeout"), ("TEGILE-MIB", "tdpsUpgradeDownloadStarted"), ("TEGILE-MIB", "tdpsUpgradeDownloadCompleted"), ("TEGILE-MIB", "tdpsUpgradeDownloadFailed"), ("TEGILE-MIB", "webdocsUpgradeDownloadStarted"), ("TEGILE-MIB", "webdocsUpgradeDownloadCompleted"), ("TEGILE-MIB", "webdocsUpgradeDownloadFailed"), ("TEGILE-MIB", "webdocsUpgradeCompleted"), ("TEGILE-MIB", "webdocsUpgradeFailed"), ("TEGILE-MIB", "replicationTargetDeleted"), ("TEGILE-MIB", "replicationComplete"), ("TEGILE-MIB", "replicationAborted"), ("TEGILE-MIB", "replicationAbandoned"), ("TEGILE-MIB", "replicationResumed"), ("TEGILE-MIB", "replicationStarted"), ("TEGILE-MIB", "replicationFailed"), ("TEGILE-MIB", "replicationSourceRegistered"), ("TEGILE-MIB", "replicationPaused"), ("TEGILE-MIB", "snmpServiceStarted"), ("TEGILE-MIB", "snmpServiceStartFailed"), ("TEGILE-MIB", "snmpServiceStopped"), ("TEGILE-MIB", "snmpServiceStopFailed"), ("TEGILE-MIB", "smisServiceStarted"), ("TEGILE-MIB", "smisServiceStartFailed"), ("TEGILE-MIB", "smisServiceStopped"), ("TEGILE-MIB", "smisServiceStopFailed"), ("TEGILE-MIB", "ipmiTemperature"), ("TEGILE-MIB", "ipmiVoltage"), ("TEGILE-MIB", "ipmiCurrent"), ("TEGILE-MIB", "ipmiFan"), ("TEGILE-MIB", "ipmiPowerSupply"), ("TEGILE-MIB", "ipmiMemory"), ("TEGILE-MIB", "ipmiCriticalInterrupt"), ("TEGILE-MIB", "ipmiThreshold"), ("TEGILE-MIB", "ipmiOther"), ("TEGILE-MIB", "memoryFailure"), ("TEGILE-MIB", "sensorFailureEvent"), ("TEGILE-MIB", "unknownSensorEvent"), ("TEGILE-MIB", "networkIpmpGroupUp"), ("TEGILE-MIB", "networkIpmpGroupDown"), ("TEGILE-MIB", "networkIpmpMemberInterfaceAdded"), ("TEGILE-MIB", "networkIpmpMemberInterfaceRemoved"), ("TEGILE-MIB", "networkInterfaceUp"), ("TEGILE-MIB", "networkInterfaceDown"), ("TEGILE-MIB", "vmwareNFSDatastoreCreated"), ("TEGILE-MIB", "vmwareNFSDatastoreDeleted"), ("TEGILE-MIB", "nvdimmFailDeviceError"), ("TEGILE-MIB", "nvdimmFailSoftError"), ("TEGILE-MIB", "nvdimmFailInitializationError"), ("TEGILE-MIB", "nvdimmFailUnknownError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    currentNotificationGroup = currentNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: currentNotificationGroup.setDescription('TEGILE-MIB NOTIFICATION-GROUP.')
tegileCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 3, 2))
basicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 43906, 3, 2, 1)).setObjects(("TEGILE-MIB", "currentObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    basicCompliance = basicCompliance.setStatus('current')
if mibBuilder.loadTexts: basicCompliance.setDescription('TEGILE-MIB MODULE-COMPLIANCE.')
mibBuilder.exportSymbols("TEGILE-MIB", shareNFSReadMbps=shareNFSReadMbps, cacheTotalReadMbps=cacheTotalReadMbps, iscsiTargetWriteIops=iscsiTargetWriteIops, nicState=nicState, vmwareNFSDatastoresTotalReadMbps=vmwareNFSDatastoresTotalReadMbps, fcAvgReadLatency=fcAvgReadLatency, nfsTotalWriteMbps=nfsTotalWriteMbps, shareNFSWriteIops=shareNFSWriteIops, haControllerB_SoftwareVersion=haControllerB_SoftwareVersion, iscsiWriteIops=iscsiWriteIops, haResourceGroup=haResourceGroup, iscsiTargetEntry=iscsiTargetEntry, lunReadMbps=lunReadMbps, poolReadCacheWriteMbps=poolReadCacheWriteMbps, projectShares=projectShares, volumeDeleteCompleted=volumeDeleteCompleted, cacheTotalWriteIops=cacheTotalWriteIops, notifications=notifications, projectDeleted=projectDeleted, fcInitiatorGroup=fcInitiatorGroup, sensorFailureEvent=sensorFailureEvent, poolCount=poolCount, iscsiInitiatorCreateFailed=iscsiInitiatorCreateFailed, nvdimmFailInitializationError=nvdimmFailInitializationError, lunInitiatorGroup=lunInitiatorGroup, fcTargetResetHbaPortFailed=fcTargetResetHbaPortFailed, shareMountPoint=shareMountPoint, nvdimmFailUnknownError=nvdimmFailUnknownError, fcTargetStatus=fcTargetStatus, tdpsUpgradeFailed=tdpsUpgradeFailed, poolMetaWriteLatency=poolMetaWriteLatency, tdpsUpgradeDownloadCompleted=tdpsUpgradeDownloadCompleted, vmwareNFSDatastoreReadMbps=vmwareNFSDatastoreReadMbps, notificationSensorNumber=notificationSensorNumber, haResourceDescription=haResourceDescription, notificationDescription=notificationDescription, notificationReadingTriggerValue=notificationReadingTriggerValue, disks=disks, diskDataReadIops=diskDataReadIops, ipmiOther=ipmiOther, lunTable=lunTable, volumeCreatedSuccessfully=volumeCreatedSuccessfully, maintenanceModeDisabled=maintenanceModeDisabled, poolTotalWriteMbps=poolTotalWriteMbps, poolEntry=poolEntry, iscsiTotalReadIops=iscsiTotalReadIops, intelliFlashSoftwareUp=intelliFlashSoftwareUp, cifsTotalWriteIops=cifsTotalWriteIops, poolDataWriteIops=poolDataWriteIops, iscsiTargetReadMbps=iscsiTargetReadMbps, vmwareNFSDatastoreWriteLatency=vmwareNFSDatastoreWriteLatency, targetGroupCreateCompleted=targetGroupCreateCompleted, fcProperties=fcProperties, poolWriteCacheWriteIops=poolWriteCacheWriteIops, snapshotRollbackCompleted=snapshotRollbackCompleted, fcInitiators=fcInitiators, projectQuotaSizeLow=projectQuotaSizeLow, haControllerA_SoftwareVersion=haControllerA_SoftwareVersion, nfsTotalReadIops=nfsTotalReadIops, upgradeDownloadCompleted=upgradeDownloadCompleted, shareTable=shareTable, haResourceActiveNode=haResourceActiveNode, poolState=poolState, iscsiTargetIndex=iscsiTargetIndex, diskIsOnline=diskIsOnline, poolExpanded=poolExpanded, vmwareNFSDatastoresAvgReadLatency=vmwareNFSDatastoresAvgReadLatency, poolDataSizeLow=poolDataSizeLow, snmpServiceStopFailed=snmpServiceStopFailed, diskSizeLow=diskSizeLow, poolTotalReadIops=poolTotalReadIops, snapshotDeleteFailed=snapshotDeleteFailed, cifsAvgReadLatency=cifsAvgReadLatency, cifsTotalWriteMbps=cifsTotalWriteMbps, iscsiTargetReadIops=iscsiTargetReadIops, poolDegraded=poolDegraded, notificationSensorAction=notificationSensorAction, fcInitiatorIndex=fcInitiatorIndex, iscsiProperties=iscsiProperties, poolFreeSizeLow=poolFreeSizeLow, vmwareNFSDatastoreDeleted=vmwareNFSDatastoreDeleted, fcInitiatorCreateFailed=fcInitiatorCreateFailed, projectDataSizeLow=projectDataSizeLow, replicationSourceRegistered=replicationSourceRegistered, networkIpmpGroupUp=networkIpmpGroupUp, iscsiTargets=iscsiTargets, fcTargetGroup=fcTargetGroup, notificationComponentName=notificationComponentName, upgradeFailed=upgradeFailed, diskRandomIOCount=diskRandomIOCount, shareNFSWriteMbps=shareNFSWriteMbps, vmwareNFSDatastoresTotalReadIops=vmwareNFSDatastoresTotalReadIops, poolDataReadLatency=poolDataReadLatency, shareCIFSWriteIops=shareCIFSWriteIops, iscsiAvgWriteLatency=iscsiAvgWriteLatency, poolDeleted=poolDeleted, ipmiThreshold=ipmiThreshold, poolUnusedReservedSizeHigh=poolUnusedReservedSizeHigh, shareNFSReadLatency=shareNFSReadLatency, replicationResumed=replicationResumed, pools=pools, lunReadIops=lunReadIops, nicEntry=nicEntry, intelliFlashSoftwareDown=intelliFlashSoftwareDown, targetGroupMemberRemoved=targetGroupMemberRemoved, diskTable=diskTable, iscsiInitiatorModifyCompleted=iscsiInitiatorModifyCompleted, iscsiAvgReadLatency=iscsiAvgReadLatency, snapshotRollbackFailed=snapshotRollbackFailed, networkInterfaceDown=networkInterfaceDown, iscsiInitiatorsTable=iscsiInitiatorsTable, diskCount=diskCount, lunProtocol=lunProtocol, networkIpmpMemberInterfaceRemoved=networkIpmpMemberInterfaceRemoved, shareCreatedSuccessfully=shareCreatedSuccessfully, poolWriteCacheWriteLatency=poolWriteCacheWriteLatency, lunName=lunName, tdpsUpgradeDownloadFailed=tdpsUpgradeDownloadFailed, iscsiTotalWriteMbps=iscsiTotalWriteMbps, lunTargetGroup=lunTargetGroup, diskTotalWriteIops=diskTotalWriteIops, diskDataReadMbps=diskDataReadMbps, shareDataSizeLow=shareDataSizeLow, nfsAvgWriteLatency=nfsAvgWriteLatency, fcTargetWriteLatency=fcTargetWriteLatency, smisServiceStopped=smisServiceStopped, fcInitiatorModifyCompleted=fcInitiatorModifyCompleted, userLoginFailed=userLoginFailed, nvdimmFailSoftError=nvdimmFailSoftError, controllerTimeDrift=controllerTimeDrift, haResourceName=haResourceName, alertsCleanupCompleted=alertsCleanupCompleted, lunCompressionEnabled=lunCompressionEnabled, lunDedupEnabled=lunDedupEnabled, notificationTime=notificationTime, diskTotalReadMbps=diskTotalReadMbps, basicCompliance=basicCompliance, networkTotalReceiveMbps=networkTotalReceiveMbps, shareCIFSReadLatency=shareCIFSReadLatency, diskState=diskState, poolUnusedReservedSizeLow=poolUnusedReservedSizeLow, fcTargetIndex=fcTargetIndex, shareNFSWriteLatency=shareNFSWriteLatency, shareDeleted=shareDeleted, shareEntry=shareEntry, lunWriteLatency=lunWriteLatency, iscsiTargetWriteLatency=iscsiTargetWriteLatency, iscsiInitiatorChapUser=iscsiInitiatorChapUser, upgradeCompleted=upgradeCompleted, diskSequentialIOCount=diskSequentialIOCount, vmwareNFSDatastoreWriteIops=vmwareNFSDatastoreWriteIops, fcPortOnline=fcPortOnline, upgradeDownloadFailed=upgradeDownloadFailed, aclMigrationCompleted=aclMigrationCompleted, projectName=projectName, iscsiImproperTargetGroup=iscsiImproperTargetGroup, diskDataWriteMbps=diskDataWriteMbps, haControllerB_Name=haControllerB_Name, vmwareNFSDatastoreWriteMbps=vmwareNFSDatastoreWriteMbps, deleteFolderCompleted=deleteFolderCompleted, iscsiInitiatorDeleteCompleted=iscsiInitiatorDeleteCompleted, lunReadLatency=lunReadLatency, shareQuotaFinished=shareQuotaFinished, webdocsUpgradeDownloadStarted=webdocsUpgradeDownloadStarted, poolSizeLow=poolSizeLow, fcInitiatorEntry=fcInitiatorEntry, diskSizeHigh=diskSizeHigh, controllerUp=controllerUp, tdpsUpgradeDownloadStarted=tdpsUpgradeDownloadStarted, snmpAgentVersion=snmpAgentVersion, diskPoolName=diskPoolName, fcInitiatorCreateCompleted=fcInitiatorCreateCompleted, lunGUID=lunGUID, nfsAvgReadLatency=nfsAvgReadLatency, fcPortOffline=fcPortOffline, projectFreeSizeLow=projectFreeSizeLow, smisServiceStartFailed=smisServiceStartFailed, poolMetaWriteIops=poolMetaWriteIops, cpuTotalUsage=cpuTotalUsage, shareCreatedWithNonOptimalBlockSize=shareCreatedWithNonOptimalBlockSize, memoryFailure=memoryFailure, shareSnapshotSizeHigh=shareSnapshotSizeHigh, maintenanceModeEnabled=maintenanceModeEnabled, projectUnusedReservedSizeLow=projectUnusedReservedSizeLow, vmwareNFSDatastores=vmwareNFSDatastores, webdocsUpgradeFailed=webdocsUpgradeFailed, ipmiVoltage=ipmiVoltage, iscsiTargetName=iscsiTargetName, fcAvgWriteLatency=fcAvgWriteLatency, notificationSensorSuspect=notificationSensorSuspect, projectThresholdExceedWarning=projectThresholdExceedWarning, projectUnusedReservedSizeHigh=projectUnusedReservedSizeHigh, diskAvgReadLatency=diskAvgReadLatency, replicationPaused=replicationPaused, vmwareNFSDatastoreEntry=vmwareNFSDatastoreEntry, projectModified=projectModified, haResourceGroupTakeBackCompleted=haResourceGroupTakeBackCompleted, iscsiTargetError=iscsiTargetError, nvdimmFailDeviceError=nvdimmFailDeviceError, haResourceEntry=haResourceEntry, networkInterfaceUp=networkInterfaceUp, projectTable=projectTable, vmwareNFSDatastoresAvgWriteLatency=vmwareNFSDatastoresAvgWriteLatency, networkIpmpGroupDown=networkIpmpGroupDown, projectDataSizeHigh=projectDataSizeHigh, tegileGroups=tegileGroups, tegileCompliances=tegileCompliances, projectPostCompressionDataSizeHigh=projectPostCompressionDataSizeHigh, cpuSystemCalls=cpuSystemCalls, diskSlowIo=diskSlowIo, fcTargetReadMbps=fcTargetReadMbps, diskAlias=diskAlias, nicGroup=nicGroup, ntpServerTimeDrift=ntpServerTimeDrift, ipmiFan=ipmiFan, upgradeTimeout=upgradeTimeout, fcTargetWriteMbps=fcTargetWriteMbps, tegileArray_notifications=tegileArray_notifications, poolMetaDataQuotaExceedThresholdWarning=poolMetaDataQuotaExceedThresholdWarning, network=network, cacheTotalReadIops=cacheTotalReadIops, iscsiTargetsTable=iscsiTargetsTable, diskChassisIdx=diskChassisIdx, haControllerA_Name=haControllerA_Name, webdocsUpgradeCompleted=webdocsUpgradeCompleted, notificationReadingUnit=notificationReadingUnit, poolReadCacheWriteLatency=poolReadCacheWriteLatency, replicationAborted=replicationAborted, projectPostCompressionDataSizeLow=projectPostCompressionDataSizeLow, ipmiTemperature=ipmiTemperature, networkTotalTransmitMbps=networkTotalTransmitMbps, upgradeCantProcessFilesManually=upgradeCantProcessFilesManually, smisServiceStopFailed=smisServiceStopFailed, projectDeletionFailed=projectDeletionFailed, lunCompressedRatio=lunCompressedRatio, fcTargetModifyCompleted=fcTargetModifyCompleted, poolHealth=poolHealth, poolMetaWriteMbps=poolMetaWriteMbps, replicationStarted=replicationStarted, poolSizeHigh=poolSizeHigh, volumeDeleteFailed=volumeDeleteFailed, poolDataReadMbps=poolDataReadMbps, projectLunCount=projectLunCount, diskIOCount=diskIOCount, tegile=tegile, iscsiInitiatorEntry=iscsiInitiatorEntry, cpuInterrupts=cpuInterrupts, cacheTotalWriteMbps=cacheTotalWriteMbps, poolTotalWriteIops=poolTotalWriteIops, globalStatistics=globalStatistics, vmwareNFSDatastoreIndex=vmwareNFSDatastoreIndex, iscsiTargetGroup=iscsiTargetGroup, currentNotificationGroup=currentNotificationGroup, tdpsUpgradeTimeout=tdpsUpgradeTimeout)
mibBuilder.exportSymbols("TEGILE-MIB", snapshotCreationFailed=snapshotCreationFailed, fcTotalWriteMbps=fcTotalWriteMbps, deleteFolderFailed=deleteFolderFailed, projectSnapshotSizeLow=projectSnapshotSizeLow, shareIndex=shareIndex, ipmiMemory=ipmiMemory, diskType=diskType, shareNFSEnabled=shareNFSEnabled, initiatorGroupMemberRemoved=initiatorGroupMemberRemoved, fcInitiatorsTable=fcInitiatorsTable, ipmiCurrent=ipmiCurrent, haControllerA_IPAddr=haControllerA_IPAddr, projectPoolName=projectPoolName, lunDataSizeHigh=lunDataSizeHigh, poolWriteCacheWriteMbps=poolWriteCacheWriteMbps, volumeExceedsThresholdWarning=volumeExceedsThresholdWarning, poolAvgWriteLatency=poolAvgWriteLatency, poolOwnerController=poolOwnerController, cacheRAMReads=cacheRAMReads, lunReservedSizeLow=lunReservedSizeLow, shareQuotaHigh=shareQuotaHigh, fcTargetReadLatency=fcTargetReadLatency, poolPostCompressionDataSizeLow=poolPostCompressionDataSizeLow, notificationEventCode=notificationEventCode, projectSnapshotSizeHigh=projectSnapshotSizeHigh, replicationAbandoned=replicationAbandoned, vmwareNFSDatastoresTotalWriteIops=vmwareNFSDatastoresTotalWriteIops, shareCIFSWriteMbps=shareCIFSWriteMbps, shareCIFSReadIops=shareCIFSReadIops, shareReservedSizeLow=shareReservedSizeLow, nicName=nicName, nicReceiveMbps=nicReceiveMbps, projectTotalSaving=projectTotalSaving, poolReadCacheReadIops=poolReadCacheReadIops, lunEntry=lunEntry, nfsTotalWriteIops=nfsTotalWriteIops, projectLUNs=projectLUNs, webdocsUpgradeDownloadCompleted=webdocsUpgradeDownloadCompleted, lunFreeSizeHigh=lunFreeSizeHigh, poolDataReadIops=poolDataReadIops, sharePoolName=sharePoolName, fcInitiatorName=fcInitiatorName, lunFreeSizeLow=lunFreeSizeLow, unknownSensorEvent=unknownSensorEvent, nicTransmitMbps=nicTransmitMbps, properties=properties, lunDataSizeLow=lunDataSizeLow, poolPostCompressionDataSizeHigh=poolPostCompressionDataSizeHigh, shareDataSizeHigh=shareDataSizeHigh, controllerDown=controllerDown, shareName=shareName, poolReadCacheReadMbps=poolReadCacheReadMbps, snmpServiceStartFailed=snmpServiceStartFailed, vmwareNFSDatastoreReadLatency=vmwareNFSDatastoreReadLatency, poolUsedSizeLow=poolUsedSizeLow, volumeQuotaFinished=volumeQuotaFinished, snmpServiceStarted=snmpServiceStarted, shareCompressedRatio=shareCompressedRatio, iscsiTargetAuth=iscsiTargetAuth, poolDeletionFailed=poolDeletionFailed, replicationFailed=replicationFailed, poolPostDedupDataSizeHigh=poolPostDedupDataSizeHigh, shareProjectName=shareProjectName, poolCreated=poolCreated, fcTargets=fcTargets, lunSizeHigh=lunSizeHigh, poolFreeSizeHigh=poolFreeSizeHigh, poolDataWriteLatency=poolDataWriteLatency, lunPoolName=lunPoolName, diagnosticDataUploadingFailed=diagnosticDataUploadingFailed, volumeModifyCompleted=volumeModifyCompleted, smisServiceStarted=smisServiceStarted, shareDedupEnabled=shareDedupEnabled, shareQuotaLow=shareQuotaLow, fcTotalReadMbps=fcTotalReadMbps, replicationTargetDeleted=replicationTargetDeleted, poolName=poolName, projectIndex=projectIndex, iscsiInitiatorGroup=iscsiInitiatorGroup, haControllerB_Uptime=haControllerB_Uptime, poolMetaReadLatency=poolMetaReadLatency, vmwareNFSDatastoreESXName=vmwareNFSDatastoreESXName, snapshotCreatedSuccessfully=snapshotCreatedSuccessfully, diskGoneOffline=diskGoneOffline, lunBlockSize=lunBlockSize, replicationComplete=replicationComplete, cifsTotalReadIops=cifsTotalReadIops, diskTotalReadIops=diskTotalReadIops, fcTargetsTable=fcTargetsTable, iscsiTargetWriteMbps=iscsiTargetWriteMbps, spareDiskReplaced=spareDiskReplaced, shareExceedThresholdWarning=shareExceedThresholdWarning, poolPostDedupDataSizeLow=poolPostDedupDataSizeLow, vmwareNFSDatastoresTable=vmwareNFSDatastoresTable, shareCIFSReadMbps=shareCIFSReadMbps, haResourceGroupTakeOverCompleted=haResourceGroupTakeOverCompleted, adServerTimeDrift=adServerTimeDrift, ipmiPowerSupply=ipmiPowerSupply, fcTotalReadIops=fcTotalReadIops, aclMigrationStarted=aclMigrationStarted, notificationTargetEntityName=notificationTargetEntityName, fcTargetWriteIops=fcTargetWriteIops, haResourcesTable=haResourcesTable, diskEntry=diskEntry, diskAvgWriteLatency=diskAvgWriteLatency, tegileConformance=tegileConformance, notificationObjects=notificationObjects, poolUpgraded=poolUpgraded, diskDataWriteIops=diskDataWriteIops, poolProjectCount=poolProjectCount, notificationProps=notificationProps, upgradeDownloadStarted=upgradeDownloadStarted, haResources=haResources, initiatorGroupDeleteCompleted=initiatorGroupDeleteCompleted, snmpServiceStopped=snmpServiceStopped, tdpsUpgradeCompleted=tdpsUpgradeCompleted, fcTargetResetHbaPortCompleted=fcTargetResetHbaPortCompleted, poolReadCacheWriteIops=poolReadCacheWriteIops, poolReadCacheReadLatency=poolReadCacheReadLatency, projectShareCount=projectShareCount, nicIndex=nicIndex, shareCIFSEnabled=shareCIFSEnabled, iscsiInitiatorCreateCompleted=iscsiInitiatorCreateCompleted, iscsiTargetAlias=iscsiTargetAlias, poolIndex=poolIndex, iscsiTargetDeleteCompleted=iscsiTargetDeleteCompleted, shareReservedSizeHigh=shareReservedSizeHigh, fcTargetReadIops=fcTargetReadIops, haControllerB_IPAddr=haControllerB_IPAddr, notificationSeverity=notificationSeverity, shareDeletionFailed=shareDeletionFailed, iscsiInitiatorIndex=iscsiInitiatorIndex, cacheSSDReads=cacheSSDReads, cifsTotalReadMbps=cifsTotalReadMbps, poolDataWriteMbps=poolDataWriteMbps, fcTargetName=fcTargetName, lunIndex=lunIndex, initiatorGroupMemberAdded=initiatorGroupMemberAdded, controllerHardwareModel=controllerHardwareModel, poolAvgReadLatency=poolAvgReadLatency, fcTotalWriteIops=fcTotalWriteIops, poolQuotaFinished=poolQuotaFinished, diskTotalWriteMbps=diskTotalWriteMbps, poolMetaReadMbps=poolMetaReadMbps, iscsiInitiators=iscsiInitiators, poolTable=poolTable, lunReservedSizeHigh=lunReservedSizeHigh, snapshotDeletedSuccessfully=snapshotDeletedSuccessfully, smbSocketFailure=smbSocketFailure, snapshotCloneCompleted=snapshotCloneCompleted, lunWriteMbps=lunWriteMbps, snapshotCloningFailed=snapshotCloningFailed, shareNFSReadIops=shareNFSReadIops, vmwareNFSDatastoreVMName=vmwareNFSDatastoreVMName, poolProjects=poolProjects, iscsiTargetReadLatency=iscsiTargetReadLatency, vmwareNFSDatastoreReadIops=vmwareNFSDatastoreReadIops, poolAvailableMetaToDataRatioBelowThresholdWarning=poolAvailableMetaToDataRatioBelowThresholdWarning, poolQuotaExceedThresholdWarning=poolQuotaExceedThresholdWarning, PYSNMP_MODULE_ID=tegile, upgradeStarted=upgradeStarted, poolImported=poolImported, nicMTU=nicMTU, lunSnapshotSizeLow=lunSnapshotSizeLow, shareCompressionEnabled=shareCompressionEnabled, vmwareNFSDatastoreCreated=vmwareNFSDatastoreCreated, sanProperties=sanProperties, projectCompressionEnabled=projectCompressionEnabled, ipmiCriticalInterrupt=ipmiCriticalInterrupt, shareCIFSWriteLatency=shareCIFSWriteLatency, vmwareNFSDatastoresTotalWriteMbps=vmwareNFSDatastoresTotalWriteMbps, lunSnapshotSizeHigh=lunSnapshotSizeHigh, targetGroupDeleteCompleted=targetGroupDeleteCompleted, iscsiTotalReadMbps=iscsiTotalReadMbps, lunProjectName=lunProjectName, projectQuotaFinished=projectQuotaFinished, initiatorGroupCreateCompleted=initiatorGroupCreateCompleted, poolTotalSaving=poolTotalSaving, diskIndex=diskIndex, poolTotalReadMbps=poolTotalReadMbps, testNotification=testNotification, volumeCreatedWithNonOptimalBlockSize=volumeCreatedWithNonOptimalBlockSize, shareSnapshotSizeLow=shareSnapshotSizeLow, poolExported=poolExported, poolUsedSizeHigh=poolUsedSizeHigh, diagnosticDataUploaded=diagnosticDataUploaded, haResourceIndex=haResourceIndex, cifsAvgWriteLatency=cifsAvgWriteLatency, poolMetaReadIops=poolMetaReadIops, iscsiInitiatorName=iscsiInitiatorName, tegileArray=tegileArray, netbiosSocketFailure=netbiosSocketFailure, networkIpmpMemberInterfaceAdded=networkIpmpMemberInterfaceAdded, webdocsUpgradeDownloadFailed=webdocsUpgradeDownloadFailed, iscsiTargetModifyCompleted=iscsiTargetModifyCompleted, iscsiTargetGroupError=iscsiTargetGroupError, projectCreatedSuccessfully=projectCreatedSuccessfully, projectEntry=projectEntry, lunSizeLow=lunSizeLow, projectFreeSizeHigh=projectFreeSizeHigh, diskError=diskError, nicTable=nicTable, nfsTotalReadMbps=nfsTotalReadMbps, projectQuotaSizeHigh=projectQuotaSizeHigh, haResourceStatus=haResourceStatus, notificationThresholdTriggerValue=notificationThresholdTriggerValue, fcTargetEntry=fcTargetEntry, currentObjectGroup=currentObjectGroup, lunWriteIops=lunWriteIops, projectCreatedWithNonOptimalBlockSize=projectCreatedWithNonOptimalBlockSize, targetGroupMemberAdded=targetGroupMemberAdded, iscsiTargetCreateCompleted=iscsiTargetCreateCompleted, projectDedupEnabled=projectDedupEnabled, haControllerA_Uptime=haControllerA_Uptime, poolDataSizeHigh=poolDataSizeHigh)
