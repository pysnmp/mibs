#
# PySNMP MIB module CHECKPOINT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/checkpoint/CHECKPOINT-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 08:16:10 2024
# On host fv-az530-683 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Gauge32, MibIdentifier, Counter32, Unsigned32, NotificationType, iso, Bits, Integer32, TimeTicks, ObjectIdentity, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "Counter32", "Unsigned32", "NotificationType", "iso", "Bits", "Integer32", "TimeTicks", "ObjectIdentity", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
checkpoint = ModuleIdentity((1, 3, 6, 1, 4, 1, 2620))
checkpoint.setRevisions(('2021-01-31 00:00', '2013-12-26 13:09',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: checkpoint.setRevisionsDescriptions(('Fix MIB errors and warnings based on RFC', 'Update the SMIv1 MIB to SMIv2',))
if mibBuilder.loadTexts: checkpoint.setLastUpdated('202101310000Z')
if mibBuilder.loadTexts: checkpoint.setOrganization('Check Point')
if mibBuilder.loadTexts: checkpoint.setContactInfo('Check Point')
if mibBuilder.loadTexts: checkpoint.setDescription('Check Point MIB\n\t\t\t\t\t See the most common OIDs, with detailed descriptions, in the SNMP Best Practices Guide - sk98552\n\t\t\t\t\t(https://supportcenter.checkpoint.com/supportcenter/portal?eventSubmit_doGoviewsolutiondetails=&solutionid=sk98552)')
products = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1))
tables = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 500))
fw = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1))
vpn = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2))
fg = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 3))
ha = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 5))
svn = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6))
mngmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 7))
wam = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 8))
dtps = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 9))
ls = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 11))
vsx = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 16))
smartDefense = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17))
gx = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20))
avi = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 24))
eventiaAnalyzer = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 25))
uf = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 29))
ms = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 30))
voip = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 31))
identityAwareness = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 38))
applicationControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 39))
thresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 42))
advancedUrlFiltering = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 43))
dlp = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 44))
amw = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 46))
asg = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48))
te = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 49))
threatExtraction = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 50))
sxl = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 36))
vsecController = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 52))
ips = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 53))
httpsInspection = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 54))
mho = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 55))
zph = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 60))
chkpntMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 2))
chkpntMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 2, 1))
chkpntMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 2, 2))
chkpntMIBNotifGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 2, 3))
chkpntBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2620, 2, 1, 1)).setObjects(("CHECKPOINT-MIB", "fwProductsGroup"), ("CHECKPOINT-MIB", "vpnProductsGroup"), ("CHECKPOINT-MIB", "fgProductsGroup"), ("CHECKPOINT-MIB", "haProductsGroup"), ("CHECKPOINT-MIB", "svnProductsGroup"), ("CHECKPOINT-MIB", "mngmtProductsGroup"), ("CHECKPOINT-MIB", "wamProductsGroup"), ("CHECKPOINT-MIB", "dtpsProductsGroup"), ("CHECKPOINT-MIB", "lsProductsGroup"), ("CHECKPOINT-MIB", "vsxProductsGroup"), ("CHECKPOINT-MIB", "smartDefenseProductsGroup"), ("CHECKPOINT-MIB", "gxProductsGroup"), ("CHECKPOINT-MIB", "aviProductsGroup"), ("CHECKPOINT-MIB", "eventiaAnalyzerProductsGroup"), ("CHECKPOINT-MIB", "ufProductsGroup"), ("CHECKPOINT-MIB", "msProductsGroup"), ("CHECKPOINT-MIB", "voipProductsGroup"), ("CHECKPOINT-MIB", "identityAwarenessProductsGroup"), ("CHECKPOINT-MIB", "applicationControlProductsGroup"), ("CHECKPOINT-MIB", "thresholdsProductsGroup"), ("CHECKPOINT-MIB", "advancedUrlFilteringProductsGroup"), ("CHECKPOINT-MIB", "dlpProductsGroup"), ("CHECKPOINT-MIB", "amwProductsGroup"), ("CHECKPOINT-MIB", "asgProductsGroup"), ("CHECKPOINT-MIB", "teProductsGroup"), ("CHECKPOINT-MIB", "threatExtractionProductsGroup"), ("CHECKPOINT-MIB", "sxlProductsGroup"), ("CHECKPOINT-MIB", "vsecControllerProductsGroup"), ("CHECKPOINT-MIB", "ipsProductsGroup"), ("CHECKPOINT-MIB", "httpsInspectionProductsGroup"), ("CHECKPOINT-MIB", "mhoProductsGroup"), ("CHECKPOINT-MIB", "zphProductsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chkpntBasicCompliance = chkpntBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: chkpntBasicCompliance.setDescription('The compliance statement for Check Point entities which implement the chkpnt MIB.')
fwProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 1))
for _fwProductsGroup_obj in [[("CHECKPOINT-MIB", "fwPolicyName"), ("CHECKPOINT-MIB", "fwInstallTime"), ("CHECKPOINT-MIB", "fwNumConn"), ("CHECKPOINT-MIB", "fwPeakNumConn"), ("CHECKPOINT-MIB", "fwIspName"), ("CHECKPOINT-MIB", "fwIspStatus"), ("CHECKPOINT-MIB", "fwIspRole"), ("CHECKPOINT-MIB", "unknown"), ("CHECKPOINT-MIB", "fwIfName"), ("CHECKPOINT-MIB", "fwAcceptPcktsIn"), ("CHECKPOINT-MIB", "fwAcceptPcktsOut"), ("CHECKPOINT-MIB", "fwAcceptBytesIn"), ("CHECKPOINT-MIB", "fwAcceptBytesOut"), ("CHECKPOINT-MIB", "fwDropPcktsIn"), ("CHECKPOINT-MIB", "fwDropPcktsOut"), ("CHECKPOINT-MIB", "fwRejectPcktsIn"), ("CHECKPOINT-MIB", "fwRejectPcktsOut"), ("CHECKPOINT-MIB", "fwLogIn"), ("CHECKPOINT-MIB", "fwLogOut"), ("CHECKPOINT-MIB", "fwConnTableLimit"), ("CHECKPOINT-MIB", "fwAcceptedTotal"), ("CHECKPOINT-MIB", "fwDroppedTotal"), ("CHECKPOINT-MIB", "fwRejectedTotal"), ("CHECKPOINT-MIB", "fwLoggedTotal"), ("CHECKPOINT-MIB", "fwAcceptedBytesTotal"), ("CHECKPOINT-MIB", "fwDroppedBytesTotal"), ("CHECKPOINT-MIB", "fwRejectedBytesTotal"), ("CHECKPOINT-MIB", "fwAcceptedBytesRates"), ("CHECKPOINT-MIB", "fwAcceptedPcktsRates"), ("CHECKPOINT-MIB", "fwConnsRate"), ("CHECKPOINT-MIB", "fwIfName64"), ("CHECKPOINT-MIB", "fwAcceptPcktsIn64"), ("CHECKPOINT-MIB", "fwAcceptPcktsOut64"), ("CHECKPOINT-MIB", "fwAcceptBytesIn64"), ("CHECKPOINT-MIB", "fwAcceptBytesOut64"), ("CHECKPOINT-MIB", "fwDropPcktsIn64"), ("CHECKPOINT-MIB", "fwDropPcktsOut64"), ("CHECKPOINT-MIB", "fwRejectPcktsIn64"), ("CHECKPOINT-MIB", "fwRejectPcktsOut64"), ("CHECKPOINT-MIB", "fwLogIn64"), ("CHECKPOINT-MIB", "fwLogOut64"), ("CHECKPOINT-MIB", "fwFullyUtilizedDrops"), ("CHECKPOINT-MIB", "fwHmem_block_size"), ("CHECKPOINT-MIB", "fwHmem_requested_bytes"), ("CHECKPOINT-MIB", "fwHmem_initial_allocated_bytes"), ("CHECKPOINT-MIB", "fwHmem_initial_allocated_blocks"), ("CHECKPOINT-MIB", "fwHmem_initial_allocated_pools"), ("CHECKPOINT-MIB", "fwHmem_current_allocated_bytes"), ("CHECKPOINT-MIB", "fwHmem_current_allocated_blocks"), ("CHECKPOINT-MIB", "fwHmem_current_allocated_pools"), ("CHECKPOINT-MIB", "fwHmem_maximum_bytes"), ("CHECKPOINT-MIB", "fwHmem_maximum_pools"), ("CHECKPOINT-MIB", "fwHmem_bytes_used"), ("CHECKPOINT-MIB", "fwHmem_blocks_used"), ("CHECKPOINT-MIB", "fwHmem_bytes_unused"), ("CHECKPOINT-MIB", "fwHmem_blocks_unused"), ("CHECKPOINT-MIB", "fwHmem_bytes_peak"), ("CHECKPOINT-MIB", "fwHmem_blocks_peak"), ("CHECKPOINT-MIB", "fwHmem_bytes_internal_use"), ("CHECKPOINT-MIB", "fwHmem_number_of_items"), ("CHECKPOINT-MIB", "fwHmem_alloc_operations"), ("CHECKPOINT-MIB", "fwHmem_free_operations"), ("CHECKPOINT-MIB", "fwHmem_failed_alloc"), ("CHECKPOINT-MIB", "fwHmem_failed_free"), ("CHECKPOINT-MIB", "fwKmem_system_physical_mem"), ("CHECKPOINT-MIB", "fwKmem_available_physical_mem"), ("CHECKPOINT-MIB", "fwKmem_aix_heap_size"), ("CHECKPOINT-MIB", "fwKmem_bytes_used"), ("CHECKPOINT-MIB", "fwKmem_blocking_bytes_used"), ("CHECKPOINT-MIB", "fwKmem_non_blocking_bytes_used"), ("CHECKPOINT-MIB", "fwKmem_bytes_unused"), ("CHECKPOINT-MIB", "fwKmem_bytes_peak"), ("CHECKPOINT-MIB", "fwKmem_blocking_bytes_peak"), ("CHECKPOINT-MIB", "fwKmem_non_blocking_bytes_peak"), ("CHECKPOINT-MIB", "fwKmem_bytes_internal_use"), ("CHECKPOINT-MIB", "fwKmem_number_of_items"), ("CHECKPOINT-MIB", "fwKmem_alloc_operations"), ("CHECKPOINT-MIB", "fwKmem_free_operations"), ("CHECKPOINT-MIB", "fwKmem_failed_alloc"), ("CHECKPOINT-MIB", "fwKmem_failed_free"), ("CHECKPOINT-MIB", "fwInspect_packets"), ("CHECKPOINT-MIB", "fwInspect_operations"), ("CHECKPOINT-MIB", "fwInspect_lookups"), ("CHECKPOINT-MIB", "fwInspect_record"), ("CHECKPOINT-MIB", "fwInspect_extract"), ("CHECKPOINT-MIB", "fwCookies_total"), ("CHECKPOINT-MIB", "fwCookies_allocfwCookies_total"), ("CHECKPOINT-MIB", "fwCookies_freefwCookies_total"), ("CHECKPOINT-MIB", "fwCookies_dupfwCookies_total"), ("CHECKPOINT-MIB", "fwCookies_getfwCookies_total"), ("CHECKPOINT-MIB", "fwCookies_putfwCookies_total"), ("CHECKPOINT-MIB", "fwCookies_lenfwCookies_total"), ("CHECKPOINT-MIB", "fwChains_alloc"), ("CHECKPOINT-MIB", "fwChains_free"), ("CHECKPOINT-MIB", "fwFrag_fragments"), ("CHECKPOINT-MIB", "fwFrag_expired"), ("CHECKPOINT-MIB", "fwFrag_packets"), ("CHECKPOINT-MIB", "fwUfpHitRatio"), ("CHECKPOINT-MIB", "fwUfpInspected"), ("CHECKPOINT-MIB", "fwUfpHits"), ("CHECKPOINT-MIB", "fwSS_http_pid"), ("CHECKPOINT-MIB", "fwSS_http_proto"), ("CHECKPOINT-MIB", "fwSS_http_port"), ("CHECKPOINT-MIB", "fwSS_http_logical_port"), ("CHECKPOINT-MIB", "fwSS_http_max_avail_socket"), ("CHECKPOINT-MIB", "fwSS_http_socket_in_use_max"), ("CHECKPOINT-MIB", "fwSS_http_socket_in_use_curr"), ("CHECKPOINT-MIB", "fwSS_http_socket_in_use_count"), ("CHECKPOINT-MIB", "fwSS_http_sess_max"), ("CHECKPOINT-MIB", "fwSS_http_sess_curr"), ("CHECKPOINT-MIB", "fwSS_http_sess_count"), ("CHECKPOINT-MIB", "fwSS_http_auth_sess_max"), ("CHECKPOINT-MIB", "fwSS_http_auth_sess_curr"), ("CHECKPOINT-MIB", "fwSS_http_auth_sess_count"), ("CHECKPOINT-MIB", "fwSS_http_accepted_sess"), ("CHECKPOINT-MIB", "fwSS_http_rejected_sess"), ("CHECKPOINT-MIB", "fwSS_http_auth_failures"), ("CHECKPOINT-MIB", "fwSS_http_ops_cvp_sess_max"), ("CHECKPOINT-MIB", "fwSS_http_ops_cvp_sess_curr"), ("CHECKPOINT-MIB", "fwSS_http_ops_cvp_sess_count"), ("CHECKPOINT-MIB", "fwSS_http_ops_cvp_rej_sess"), ("CHECKPOINT-MIB", "fwSS_http_ssl_encryp_sess_max"), ("CHECKPOINT-MIB", "fwSS_http_ssl_encryp_sess_curr"), ("CHECKPOINT-MIB", "fwSS_http_ssl_encryp_sess_count"), ("CHECKPOINT-MIB", "fwSS_http_transp_sess_max"), ("CHECKPOINT-MIB", "fwSS_http_transp_sess_curr"), ("CHECKPOINT-MIB", "fwSS_http_transp_sess_count"), ("CHECKPOINT-MIB", "fwSS_http_proxied_sess_max"), ("CHECKPOINT-MIB", "fwSS_http_proxied_sess_curr"), ("CHECKPOINT-MIB", "fwSS_http_proxied_sess_count"), ("CHECKPOINT-MIB", "fwSS_http_tunneled_sess_max"), ("CHECKPOINT-MIB", "fwSS_http_tunneled_sess_curr"), ("CHECKPOINT-MIB", "fwSS_http_tunneled_sess_count"), ("CHECKPOINT-MIB", "fwSS_http_ftp_sess_max"), ("CHECKPOINT-MIB", "fwSS_http_ftp_sess_curr"), ("CHECKPOINT-MIB", "fwSS_http_ftp_sess_count"), ("CHECKPOINT-MIB", "fwSS_http_time_stamp"), ("CHECKPOINT-MIB", "fwSS_http_is_alive"), ("CHECKPOINT-MIB", "fwSS_http_blocked_cnt"), ("CHECKPOINT-MIB", "fwSS_http_blocked_total"), ("CHECKPOINT-MIB", "fwSS_http_scanned_total"), ("CHECKPOINT-MIB", "fwSS_http_blocked_by_file_type"), ("CHECKPOINT-MIB", "fwSS_http_blocked_by_size_limit"), ("CHECKPOINT-MIB", "fwSS_http_blocked_by_archive_limit"), ("CHECKPOINT-MIB", "fwSS_http_blocked_by_internal_error"), ("CHECKPOINT-MIB", "fwSS_http_passed_cnt"), ("CHECKPOINT-MIB", "fwSS_http_passed_by_file_type"), ("CHECKPOINT-MIB", "fwSS_http_passed_by_size_limit"), ("CHECKPOINT-MIB", "fwSS_http_passed_by_archive_limit"), ("CHECKPOINT-MIB", "fwSS_http_passed_by_internal_error"), ("CHECKPOINT-MIB", "fwSS_http_passed_total"), ("CHECKPOINT-MIB", "fwSS_http_blocked_by_AV_settings"), ("CHECKPOINT-MIB", "fwSS_http_passed_by_AV_settings"), ("CHECKPOINT-MIB", "fwSS_http_blocked_by_URL_filter_category"), ("CHECKPOINT-MIB", "fwSS_http_blocked_by_URL_block_list"), ("CHECKPOINT-MIB", "fwSS_http_passed_by_URL_allow_list"), ("CHECKPOINT-MIB", "fwSS_http_passed_by_URL_filter_category"), ("CHECKPOINT-MIB", "fwSS_ftp_pid"), ("CHECKPOINT-MIB", "fwSS_ftp_proto"), ("CHECKPOINT-MIB", "fwSS_ftp_port"), ("CHECKPOINT-MIB", "fwSS_ftp_logical_port"), ("CHECKPOINT-MIB", "fwSS_ftp_max_avail_socket"), ("CHECKPOINT-MIB", "fwSS_ftp_socket_in_use_max"), ("CHECKPOINT-MIB", "fwSS_ftp_socket_in_use_curr"), ("CHECKPOINT-MIB", "fwSS_ftp_socket_in_use_count"), ("CHECKPOINT-MIB", "fwSS_ftp_sess_max"), ("CHECKPOINT-MIB", "fwSS_ftp_sess_curr"), ("CHECKPOINT-MIB", "fwSS_ftp_sess_count"), ("CHECKPOINT-MIB", "fwSS_ftp_auth_sess_max"), ("CHECKPOINT-MIB", "fwSS_ftp_auth_sess_curr"), ("CHECKPOINT-MIB", "fwSS_ftp_auth_sess_count"), ("CHECKPOINT-MIB", "fwSS_ftp_accepted_sess"), ("CHECKPOINT-MIB", "fwSS_ftp_rejected_sess"), ("CHECKPOINT-MIB", "fwSS_ftp_auth_failures"), ("CHECKPOINT-MIB", "fwSS_ftp_ops_cvp_sess_max"), ("CHECKPOINT-MIB", "fwSS_ftp_ops_cvp_sess_curr"), ("CHECKPOINT-MIB", "fwSS_ftp_ops_cvp_sess_count"), ("CHECKPOINT-MIB", "fwSS_ftp_ops_cvp_rej_sess"), ("CHECKPOINT-MIB", "fwSS_ftp_time_stamp"), ("CHECKPOINT-MIB", "fwSS_ftp_is_alive"), ("CHECKPOINT-MIB", "fwSS_ftp_blocked_cnt"), ("CHECKPOINT-MIB", "fwSS_ftp_blocked_total"), ("CHECKPOINT-MIB", "fwSS_ftp_scanned_total"), ("CHECKPOINT-MIB", "fwSS_ftp_blocked_by_file_type"), ("CHECKPOINT-MIB", "fwSS_ftp_blocked_by_size_limit"), ("CHECKPOINT-MIB", "fwSS_ftp_blocked_by_archive_limit"), ("CHECKPOINT-MIB", "fwSS_ftp_blocked_by_internal_error"), ("CHECKPOINT-MIB", "fwSS_ftp_passed_cnt"), ("CHECKPOINT-MIB", "fwSS_ftp_passed_by_file_type"), ("CHECKPOINT-MIB", "fwSS_ftp_passed_by_size_limit"), ("CHECKPOINT-MIB", "fwSS_ftp_passed_by_archive_limit"), ("CHECKPOINT-MIB", "fwSS_ftp_passed_by_internal_error"), ("CHECKPOINT-MIB", "fwSS_ftp_passed_total"), ("CHECKPOINT-MIB", "fwSS_ftp_blocked_by_AV_settings"), ("CHECKPOINT-MIB", "fwSS_ftp_passed_by_AV_settings"), ("CHECKPOINT-MIB", "fwSS_telnet_pid"), ("CHECKPOINT-MIB", "fwSS_telnet_proto"), ("CHECKPOINT-MIB", "fwSS_telnet_port"), ("CHECKPOINT-MIB", "fwSS_telnet_logical_port"), ("CHECKPOINT-MIB", "fwSS_telnet_max_avail_socket"), ("CHECKPOINT-MIB", "fwSS_telnet_socket_in_use_max"), ("CHECKPOINT-MIB", "fwSS_telnet_socket_in_use_curr"), ("CHECKPOINT-MIB", "fwSS_telnet_socket_in_use_count"), ("CHECKPOINT-MIB", "fwSS_telnet_sess_max"), ("CHECKPOINT-MIB", "fwSS_telnet_sess_curr"), ("CHECKPOINT-MIB", "fwSS_telnet_sess_count"), ("CHECKPOINT-MIB", "fwSS_telnet_auth_sess_max"), ("CHECKPOINT-MIB", "fwSS_telnet_auth_sess_curr"), ("CHECKPOINT-MIB", "fwSS_telnet_auth_sess_count"), ("CHECKPOINT-MIB", "fwSS_telnet_accepted_sess"), ("CHECKPOINT-MIB", "fwSS_telnet_rejected_sess"), ("CHECKPOINT-MIB", "fwSS_telnet_auth_failures"), ("CHECKPOINT-MIB", "fwSS_telnet_time_stamp"), ("CHECKPOINT-MIB", "fwSS_telnet_is_alive"), ("CHECKPOINT-MIB", "fwSS_rlogin_pid"), ("CHECKPOINT-MIB", "fwSS_rlogin_proto"), ("CHECKPOINT-MIB", "fwSS_rlogin_port"), ("CHECKPOINT-MIB", "fwSS_rlogin_logical_port"), ("CHECKPOINT-MIB", "fwSS_rlogin_max_avail_socket"), ("CHECKPOINT-MIB", "fwSS_rlogin_socket_in_use_max"), ("CHECKPOINT-MIB", "fwSS_rlogin_socket_in_use_curr"), ("CHECKPOINT-MIB", "fwSS_rlogin_socket_in_use_count"), ("CHECKPOINT-MIB", "fwSS_rlogin_sess_max"), ("CHECKPOINT-MIB", "fwSS_rlogin_sess_curr"), ("CHECKPOINT-MIB", "fwSS_rlogin_sess_count"), ("CHECKPOINT-MIB", "fwSS_rlogin_auth_sess_max"), ("CHECKPOINT-MIB", "fwSS_rlogin_auth_sess_curr"), ("CHECKPOINT-MIB", "fwSS_rlogin_auth_sess_count"), ("CHECKPOINT-MIB", "fwSS_rlogin_accepted_sess"), ("CHECKPOINT-MIB", "fwSS_rlogin_rejected_sess"), ("CHECKPOINT-MIB", "fwSS_rlogin_auth_failures"), ("CHECKPOINT-MIB", "fwSS_rlogin_time_stamp"), ("CHECKPOINT-MIB", "fwSS_rlogin_is_alive"), ("CHECKPOINT-MIB", "fwSS_ufp_ops_ufp_sess_max"), ("CHECKPOINT-MIB", "fwSS_ufp_ops_ufp_sess_curr"), ("CHECKPOINT-MIB", "fwSS_ufp_ops_ufp_sess_count"), ("CHECKPOINT-MIB", "fwSS_ufp_ops_ufp_rej_sess"), ("CHECKPOINT-MIB", "fwSS_ufp_time_stamp"), ("CHECKPOINT-MIB", "fwSS_ufp_is_alive"), ("CHECKPOINT-MIB", "fwSS_smtp_pid"), ("CHECKPOINT-MIB", "fwSS_smtp_proto"), ("CHECKPOINT-MIB", "fwSS_smtp_port"), ("CHECKPOINT-MIB", "fwSS_smtp_logical_port"), ("CHECKPOINT-MIB", "fwSS_smtp_max_avail_socket"), ("CHECKPOINT-MIB", "fwSS_smtp_socket_in_use_max"), ("CHECKPOINT-MIB", "fwSS_smtp_socket_in_use_curr"), ("CHECKPOINT-MIB", "fwSS_smtp_socket_in_use_count"), ("CHECKPOINT-MIB", "fwSS_smtp_sess_max"), ("CHECKPOINT-MIB", "fwSS_smtp_sess_curr"), ("CHECKPOINT-MIB", "fwSS_smtp_sess_count"), ("CHECKPOINT-MIB", "fwSS_smtp_auth_sess_max"), ("CHECKPOINT-MIB", "fwSS_smtp_auth_sess_curr"), ("CHECKPOINT-MIB", "fwSS_smtp_auth_sess_count"), ("CHECKPOINT-MIB", "fwSS_smtp_accepted_sess"), ("CHECKPOINT-MIB", "fwSS_smtp_rejected_sess")], [("CHECKPOINT-MIB", "fwSS_smtp_auth_failures"), ("CHECKPOINT-MIB", "fwSS_smtp_mail_max"), ("CHECKPOINT-MIB", "fwSS_smtp_mail_curr"), ("CHECKPOINT-MIB", "fwSS_smtp_mail_count"), ("CHECKPOINT-MIB", "fwSS_smtp_outgoing_mail_max"), ("CHECKPOINT-MIB", "fwSS_smtp_outgoing_mail_curr"), ("CHECKPOINT-MIB", "fwSS_smtp_outgoing_mail_count"), ("CHECKPOINT-MIB", "fwSS_smtp_max_mail_on_conn"), ("CHECKPOINT-MIB", "fwSS_smtp_total_mails"), ("CHECKPOINT-MIB", "fwSS_smtp_time_stamp"), ("CHECKPOINT-MIB", "fwSS_smtp_is_alive"), ("CHECKPOINT-MIB", "fwSS_smtp_blocked_cnt"), ("CHECKPOINT-MIB", "fwSS_smtp_blocked_total"), ("CHECKPOINT-MIB", "fwSS_smtp_scanned_total"), ("CHECKPOINT-MIB", "fwSS_smtp_blocked_by_file_type"), ("CHECKPOINT-MIB", "fwSS_smtp_blocked_by_size_limit"), ("CHECKPOINT-MIB", "fwSS_smtp_blocked_by_archive_limit"), ("CHECKPOINT-MIB", "fwSS_smtp_blocked_by_internal_error"), ("CHECKPOINT-MIB", "fwSS_smtp_passed_cnt"), ("CHECKPOINT-MIB", "fwSS_smtp_passed_by_file_type"), ("CHECKPOINT-MIB", "fwSS_smtp_passed_by_size_limit"), ("CHECKPOINT-MIB", "fwSS_smtp_passed_by_archive_limit"), ("CHECKPOINT-MIB", "fwSS_smtp_passed_by_internal_error"), ("CHECKPOINT-MIB", "fwSS_smtp_passed_total"), ("CHECKPOINT-MIB", "fwSS_smtp_blocked_by_AV_settings"), ("CHECKPOINT-MIB", "fwSS_smtp_passed_by_AV_settings"), ("CHECKPOINT-MIB", "fwSS_POP3_pid"), ("CHECKPOINT-MIB", "fwSS_POP3_proto"), ("CHECKPOINT-MIB", "fwSS_POP3_port"), ("CHECKPOINT-MIB", "fwSS_POP3_logical_port"), ("CHECKPOINT-MIB", "fwSS_POP3_max_avail_socket"), ("CHECKPOINT-MIB", "fwSS_POP3_socket_in_use_max"), ("CHECKPOINT-MIB", "fwSS_POP3_socket_in_use_curr"), ("CHECKPOINT-MIB", "fwSS_POP3_socket_in_use_count"), ("CHECKPOINT-MIB", "fwSS_POP3_sess_max"), ("CHECKPOINT-MIB", "fwSS_POP3_sess_curr"), ("CHECKPOINT-MIB", "fwSS_POP3_sess_count"), ("CHECKPOINT-MIB", "fwSS_POP3_auth_sess_max"), ("CHECKPOINT-MIB", "fwSS_POP3_auth_sess_curr"), ("CHECKPOINT-MIB", "fwSS_POP3_auth_sess_count"), ("CHECKPOINT-MIB", "fwSS_POP3_accepted_sess"), ("CHECKPOINT-MIB", "fwSS_POP3_rejected_sess"), ("CHECKPOINT-MIB", "fwSS_POP3_auth_failures"), ("CHECKPOINT-MIB", "fwSS_POP3_mail_max"), ("CHECKPOINT-MIB", "fwSS_POP3_mail_curr"), ("CHECKPOINT-MIB", "fwSS_POP3_mail_count"), ("CHECKPOINT-MIB", "fwSS_POP3_outgoing_mail_max"), ("CHECKPOINT-MIB", "fwSS_POP3_outgoing_mail_curr"), ("CHECKPOINT-MIB", "fwSS_POP3_outgoing_mail_count"), ("CHECKPOINT-MIB", "fwSS_POP3_max_mail_on_conn"), ("CHECKPOINT-MIB", "fwSS_POP3_total_mails"), ("CHECKPOINT-MIB", "fwSS_POP3_time_stamp"), ("CHECKPOINT-MIB", "fwSS_POP3_is_alive"), ("CHECKPOINT-MIB", "fwSS_POP3_blocked_cnt"), ("CHECKPOINT-MIB", "fwSS_POP3_blocked_total"), ("CHECKPOINT-MIB", "fwSS_POP3_scanned_total"), ("CHECKPOINT-MIB", "fwSS_POP3_blocked_by_file_type"), ("CHECKPOINT-MIB", "fwSS_POP3_blocked_by_size_limit"), ("CHECKPOINT-MIB", "fwSS_POP3_blocked_by_archive_limit"), ("CHECKPOINT-MIB", "fwSS_POP3_blocked_by_internal_error"), ("CHECKPOINT-MIB", "fwSS_POP3_passed_cnt"), ("CHECKPOINT-MIB", "fwSS_POP3_passed_by_file_type"), ("CHECKPOINT-MIB", "fwSS_POP3_passed_by_size_limit"), ("CHECKPOINT-MIB", "fwSS_POP3_passed_by_archive_limit"), ("CHECKPOINT-MIB", "fwSS_POP3_passed_by_internal_error"), ("CHECKPOINT-MIB", "fwSS_POP3_passed_total"), ("CHECKPOINT-MIB", "fwSS_POP3_blocked_by_AV_settings"), ("CHECKPOINT-MIB", "fwSS_POP3_passed_by_AV_settings"), ("CHECKPOINT-MIB", "fwSS_total_blocked_by_av"), ("CHECKPOINT-MIB", "fwSS_total_blocked"), ("CHECKPOINT-MIB", "fwSS_total_scanned"), ("CHECKPOINT-MIB", "fwSS_total_blocked_by_file_type"), ("CHECKPOINT-MIB", "fwSS_total_blocked_by_size_limit"), ("CHECKPOINT-MIB", "fwSS_total_blocked_by_archive_limit"), ("CHECKPOINT-MIB", "fwSS_total_blocked_by_interal_error"), ("CHECKPOINT-MIB", "fwSS_total_passed_by_av"), ("CHECKPOINT-MIB", "fwSS_total_passed_by_file_type"), ("CHECKPOINT-MIB", "fwSS_total_passed_by_size_limit"), ("CHECKPOINT-MIB", "fwSS_total_passed_by_archive_limit"), ("CHECKPOINT-MIB", "fwSS_total_passed_by_interal_error"), ("CHECKPOINT-MIB", "fwSS_total_passed"), ("CHECKPOINT-MIB", "fwSS_total_blocked_by_av_settings"), ("CHECKPOINT-MIB", "fwSS_total_passed_by_av_settings"), ("CHECKPOINT-MIB", "fwConnectionsStatConnectionsTcp"), ("CHECKPOINT-MIB", "fwConnectionsStatConnectionsUdp"), ("CHECKPOINT-MIB", "fwConnectionsStatConnectionsIcmp"), ("CHECKPOINT-MIB", "fwConnectionsStatConnectionsOther"), ("CHECKPOINT-MIB", "fwConnectionsStatConnections"), ("CHECKPOINT-MIB", "fwConnectionsStatConnectionRate"), ("CHECKPOINT-MIB", "fwHmem64_block_size"), ("CHECKPOINT-MIB", "fwHmem64_requested_bytes"), ("CHECKPOINT-MIB", "fwHmem64_initial_allocated_bytes"), ("CHECKPOINT-MIB", "fwHmem64_initial_allocated_blocks"), ("CHECKPOINT-MIB", "fwHmem64_initial_allocated_pools"), ("CHECKPOINT-MIB", "fwHmem64_current_allocated_bytes"), ("CHECKPOINT-MIB", "fwHmem64_current_allocated_blocks"), ("CHECKPOINT-MIB", "fwHmem64_current_allocated_pools"), ("CHECKPOINT-MIB", "fwHmem64_maximum_bytes"), ("CHECKPOINT-MIB", "fwHmem64_maximum_pools"), ("CHECKPOINT-MIB", "fwHmem64_bytes_used"), ("CHECKPOINT-MIB", "fwHmem64_blocks_used"), ("CHECKPOINT-MIB", "fwHmem64_bytes_unused"), ("CHECKPOINT-MIB", "fwHmem64_blocks_unused"), ("CHECKPOINT-MIB", "fwHmem64_bytes_peak"), ("CHECKPOINT-MIB", "fwHmem64_blocks_peak"), ("CHECKPOINT-MIB", "fwHmem64_bytes_internal_use"), ("CHECKPOINT-MIB", "fwHmem64_number_of_items"), ("CHECKPOINT-MIB", "fwHmem64_alloc_operations"), ("CHECKPOINT-MIB", "fwHmem64_free_operations"), ("CHECKPOINT-MIB", "fwHmem64_failed_alloc"), ("CHECKPOINT-MIB", "fwHmem64_failed_free"), ("CHECKPOINT-MIB", "fwModuleState"), ("CHECKPOINT-MIB", "fwFilterName"), ("CHECKPOINT-MIB", "fwFilterDate"), ("CHECKPOINT-MIB", "fwAccepted"), ("CHECKPOINT-MIB", "fwRejected"), ("CHECKPOINT-MIB", "fwDropped"), ("CHECKPOINT-MIB", "fwLogged"), ("CHECKPOINT-MIB", "fwMajor"), ("CHECKPOINT-MIB", "fwMinor"), ("CHECKPOINT-MIB", "fwProduct"), ("CHECKPOINT-MIB", "fwSICTrustState"), ("CHECKPOINT-MIB", "fwProdName"), ("CHECKPOINT-MIB", "fwVerMajor"), ("CHECKPOINT-MIB", "fwVerMinor"), ("CHECKPOINT-MIB", "fwKernelBuild"), ("CHECKPOINT-MIB", "fwNetIfName"), ("CHECKPOINT-MIB", "fwNetIfIPAddr"), ("CHECKPOINT-MIB", "fwNetIfNetmask"), ("CHECKPOINT-MIB", "fwNetIfFlags"), ("CHECKPOINT-MIB", "fwNetIfPeerName"), ("CHECKPOINT-MIB", "fwNetIfRemoteIp"), ("CHECKPOINT-MIB", "fwNetIfTopology"), ("CHECKPOINT-MIB", "fwNetIfProxyName"), ("CHECKPOINT-MIB", "fwNetIfSlaves"), ("CHECKPOINT-MIB", "fwNetIfPorts"), ("CHECKPOINT-MIB", "fwNetIfIPV6Addr"), ("CHECKPOINT-MIB", "fwNetIfIPV6AddrLen"), ("CHECKPOINT-MIB", "fwLSConnOverall"), ("CHECKPOINT-MIB", "fwLSConnOverallDesc"), ("CHECKPOINT-MIB", "fwLSConnName"), ("CHECKPOINT-MIB", "fwLSConnState"), ("CHECKPOINT-MIB", "fwLSConnStateDesc"), ("CHECKPOINT-MIB", "fwLSConnSendRate"), ("CHECKPOINT-MIB", "fwLocalLoggingDesc"), ("CHECKPOINT-MIB", "fwLocalLoggingStat"), ("CHECKPOINT-MIB", "fwLocalLoggingWriteRate"), ("CHECKPOINT-MIB", "fwLoggingHandlingRate"), ("CHECKPOINT-MIB", "fwInstancesCPUInstanceName"), ("CHECKPOINT-MIB", "fwInstancesCPUUsage"), ("CHECKPOINT-MIB", "fwInstancesCPUTotal"), ("CHECKPOINT-MIB", "fwEvent")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        fwProductsGroup = fwProductsGroup.setObjects(*_fwProductsGroup_obj)
    else:
        fwProductsGroup = fwProductsGroup.setObjects(*_fwProductsGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fwProductsGroup = fwProductsGroup.setStatus('current')
if mibBuilder.loadTexts: fwProductsGroup.setDescription('A collection of managed objects that provide information about FW objects')
vpnProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 2)).setObjects(("CHECKPOINT-MIB", "cpvEncPackets"), ("CHECKPOINT-MIB", "cpvDecPackets"), ("CHECKPOINT-MIB", "cpvErrOut"), ("CHECKPOINT-MIB", "cpvErrIn"), ("CHECKPOINT-MIB", "cpvErrIke"), ("CHECKPOINT-MIB", "cpvErrPolicy"), ("CHECKPOINT-MIB", "cpvCurrEspSAsIn"), ("CHECKPOINT-MIB", "cpvTotalEspSAsIn"), ("CHECKPOINT-MIB", "cpvCurrEspSAsOut"), ("CHECKPOINT-MIB", "cpvTotalEspSAsOut"), ("CHECKPOINT-MIB", "cpvCurrAhSAsIn"), ("CHECKPOINT-MIB", "cpvTotalAhSAsIn"), ("CHECKPOINT-MIB", "cpvCurrAhSAsOut"), ("CHECKPOINT-MIB", "cpvTotalAhSAsOut"), ("CHECKPOINT-MIB", "cpvMaxConncurEspSAsIn"), ("CHECKPOINT-MIB", "cpvMaxConncurEspSAsOut"), ("CHECKPOINT-MIB", "cpvMaxConncurAhSAsIn"), ("CHECKPOINT-MIB", "cpvMaxConncurAhSAsOut"), ("CHECKPOINT-MIB", "cpvSaDecrErr"), ("CHECKPOINT-MIB", "cpvSaAuthErr"), ("CHECKPOINT-MIB", "cpvSaReplayErr"), ("CHECKPOINT-MIB", "cpvSaPolicyErr"), ("CHECKPOINT-MIB", "cpvSaOtherErrIn"), ("CHECKPOINT-MIB", "cpvSaOtherErrOut"), ("CHECKPOINT-MIB", "cpvSaUnknownSpiErr"), ("CHECKPOINT-MIB", "cpvIpsecUdpEspEncPkts"), ("CHECKPOINT-MIB", "cpvIpsecUdpEspDecPkts"), ("CHECKPOINT-MIB", "cpvIpsecAhEncPkts"), ("CHECKPOINT-MIB", "cpvIpsecAhDecPkts"), ("CHECKPOINT-MIB", "cpvIpsecEspEncPkts"), ("CHECKPOINT-MIB", "cpvIpsecEspDecPkts"), ("CHECKPOINT-MIB", "cpvIpsecDecomprBytesBefore"), ("CHECKPOINT-MIB", "cpvIpsecDecomprBytesAfter"), ("CHECKPOINT-MIB", "cpvIpsecDecomprOverhead"), ("CHECKPOINT-MIB", "cpvIpsecDecomprPkts"), ("CHECKPOINT-MIB", "cpvIpsecDecomprErr"), ("CHECKPOINT-MIB", "cpvIpsecComprBytesBefore"), ("CHECKPOINT-MIB", "cpvIpsecComprBytesAfter"), ("CHECKPOINT-MIB", "cpvIpsecComprOverhead"), ("CHECKPOINT-MIB", "cpvIpsecNonCompressibleBytes"), ("CHECKPOINT-MIB", "cpvIpsecCompressiblePkts"), ("CHECKPOINT-MIB", "cpvIpsecNonCompressiblePkts"), ("CHECKPOINT-MIB", "cpvIpsecComprErrors"), ("CHECKPOINT-MIB", "cpvIpsecEspEncBytes"), ("CHECKPOINT-MIB", "cpvIpsecEspDecBytes"), ("CHECKPOINT-MIB", "cpvFwzEncapsEncPkts"), ("CHECKPOINT-MIB", "cpvFwzEncapsDecPkts"), ("CHECKPOINT-MIB", "cpvFwzEncPkts"), ("CHECKPOINT-MIB", "cpvFwzDecPkts"), ("CHECKPOINT-MIB", "cpvFwzEncapsEncErrs"), ("CHECKPOINT-MIB", "cpvFwzEncapsDecErrs"), ("CHECKPOINT-MIB", "cpvFwzEncErrs"), ("CHECKPOINT-MIB", "cpvFwzDecErrs"), ("CHECKPOINT-MIB", "cpvHwAccelVendor"), ("CHECKPOINT-MIB", "cpvHwAccelStatus"), ("CHECKPOINT-MIB", "cpvHwAccelDriverMajorVer"), ("CHECKPOINT-MIB", "cpvHwAccelDriverMinorVer"), ("CHECKPOINT-MIB", "cpvHwAccelEspEncPkts"), ("CHECKPOINT-MIB", "cpvHwAccelEspDecPkts"), ("CHECKPOINT-MIB", "cpvHwAccelEspEncBytes"), ("CHECKPOINT-MIB", "cpvHwAccelEspDecBytes"), ("CHECKPOINT-MIB", "cpvHwAccelAhEncPkts"), ("CHECKPOINT-MIB", "cpvHwAccelAhDecPkts"), ("CHECKPOINT-MIB", "cpvHwAccelAhEncBytes"), ("CHECKPOINT-MIB", "cpvHwAccelAhDecBytes"), ("CHECKPOINT-MIB", "cpvIKECurrSAs"), ("CHECKPOINT-MIB", "cpvIKECurrInitSAs"), ("CHECKPOINT-MIB", "cpvIKECurrRespSAs"), ("CHECKPOINT-MIB", "cpvIKETotalSAs"), ("CHECKPOINT-MIB", "cpvIKETotalInitSAs"), ("CHECKPOINT-MIB", "cpvIKETotalRespSAs"), ("CHECKPOINT-MIB", "cpvIKETotalSAsAttempts"), ("CHECKPOINT-MIB", "cpvIKETotalSAsInitAttempts"), ("CHECKPOINT-MIB", "cpvIKETotalSAsRespAttempts"), ("CHECKPOINT-MIB", "cpvIKEMaxConncurSAs"), ("CHECKPOINT-MIB", "cpvIKEMaxConncurInitSAs"), ("CHECKPOINT-MIB", "cpvIKEMaxConncurRespSAs"), ("CHECKPOINT-MIB", "cpvIKETotalFailuresInit"), ("CHECKPOINT-MIB", "cpvIKENoResp"), ("CHECKPOINT-MIB", "cpvIKETotalFailuresResp"), ("CHECKPOINT-MIB", "cpvIPsecNICsNum"), ("CHECKPOINT-MIB", "cpvIPsecNICTotalDownLoadedSAs"), ("CHECKPOINT-MIB", "cpvIPsecNICCurrDownLoadedSAs"), ("CHECKPOINT-MIB", "cpvIPsecNICDecrBytes"), ("CHECKPOINT-MIB", "cpvIPsecNICEncrBytes"), ("CHECKPOINT-MIB", "cpvIPsecNICDecrPackets"), ("CHECKPOINT-MIB", "cpvIPsecNICEncrPackets"), ("CHECKPOINT-MIB", "cpvProdName"), ("CHECKPOINT-MIB", "cpvVerMajor"), ("CHECKPOINT-MIB", "cpvVerMinor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vpnProductsGroup = vpnProductsGroup.setStatus('current')
if mibBuilder.loadTexts: vpnProductsGroup.setDescription('A collection of managed objects that provide information about VPN objects')
fgProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 3)).setObjects(("CHECKPOINT-MIB", "fgProdName"), ("CHECKPOINT-MIB", "fgVerMajor"), ("CHECKPOINT-MIB", "fgVerMinor"), ("CHECKPOINT-MIB", "fgVersionString"), ("CHECKPOINT-MIB", "fgModuleKernelBuild"), ("CHECKPOINT-MIB", "fgStrPolicyName"), ("CHECKPOINT-MIB", "fgInstallTime"), ("CHECKPOINT-MIB", "fgNumInterfaces"), ("CHECKPOINT-MIB", "fgIfName"), ("CHECKPOINT-MIB", "fgPolicyName"), ("CHECKPOINT-MIB", "fgRateLimitIn"), ("CHECKPOINT-MIB", "fgRateLimitOut"), ("CHECKPOINT-MIB", "fgAvrRateIn"), ("CHECKPOINT-MIB", "fgAvrRateOut"), ("CHECKPOINT-MIB", "fgRetransPcktsIn"), ("CHECKPOINT-MIB", "fgRetransPcktsOut"), ("CHECKPOINT-MIB", "fgPendPcktsIn"), ("CHECKPOINT-MIB", "fgPendPcktsOut"), ("CHECKPOINT-MIB", "fgPendBytesIn"), ("CHECKPOINT-MIB", "fgPendBytesOut"), ("CHECKPOINT-MIB", "fgNumConnIn"), ("CHECKPOINT-MIB", "fgNumConnOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgProductsGroup = fgProductsGroup.setStatus('current')
if mibBuilder.loadTexts: fgProductsGroup.setDescription('A collection of managed objects that provide information about FG objects')
haProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 4)).setObjects(("CHECKPOINT-MIB", "haProdName"), ("CHECKPOINT-MIB", "haInstalled"), ("CHECKPOINT-MIB", "haVerMajor"), ("CHECKPOINT-MIB", "haVerMinor"), ("CHECKPOINT-MIB", "haStarted"), ("CHECKPOINT-MIB", "haState"), ("CHECKPOINT-MIB", "haBlockState"), ("CHECKPOINT-MIB", "haIdentifier"), ("CHECKPOINT-MIB", "haProtoVersion"), ("CHECKPOINT-MIB", "haWorkMode"), ("CHECKPOINT-MIB", "haVersionSting"), ("CHECKPOINT-MIB", "haClusterXLFailover"), ("CHECKPOINT-MIB", "haStatCode"), ("CHECKPOINT-MIB", "haStatShort"), ("CHECKPOINT-MIB", "haStatLong"), ("CHECKPOINT-MIB", "haServicePack"), ("CHECKPOINT-MIB", "haIfName"), ("CHECKPOINT-MIB", "haIP"), ("CHECKPOINT-MIB", "haStatus"), ("CHECKPOINT-MIB", "haVerified"), ("CHECKPOINT-MIB", "haTrusted"), ("CHECKPOINT-MIB", "haShared"), ("CHECKPOINT-MIB", "haProblemIndex"), ("CHECKPOINT-MIB", "haProblemName"), ("CHECKPOINT-MIB", "haProblemStatus"), ("CHECKPOINT-MIB", "haProblemPriority"), ("CHECKPOINT-MIB", "haProblemVerified"), ("CHECKPOINT-MIB", "haProblemDescr"), ("CHECKPOINT-MIB", "haClusterIpIfName"), ("CHECKPOINT-MIB", "haClusterIpAddr"), ("CHECKPOINT-MIB", "haClusterIpNetMask"), ("CHECKPOINT-MIB", "haClusterIpMemberNet"), ("CHECKPOINT-MIB", "haClusterIpMemberNetMask"), ("CHECKPOINT-MIB", "haClusterSyncName"), ("CHECKPOINT-MIB", "haClusterSyncAddr"), ("CHECKPOINT-MIB", "haClusterSyncNetMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    haProductsGroup = haProductsGroup.setStatus('current')
if mibBuilder.loadTexts: haProductsGroup.setDescription('A collection of managed objects that provide information about HA objects')
svnProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 5))
for _svnProductsGroup_obj in [[("CHECKPOINT-MIB", "svnVersion"), ("CHECKPOINT-MIB", "svnBuild"), ("CHECKPOINT-MIB", "osName"), ("CHECKPOINT-MIB", "osMajorVer"), ("CHECKPOINT-MIB", "osMinorVer"), ("CHECKPOINT-MIB", "osBuildNum"), ("CHECKPOINT-MIB", "osSPmajor"), ("CHECKPOINT-MIB", "osSPminor"), ("CHECKPOINT-MIB", "osVersionLevel"), ("CHECKPOINT-MIB", "memTotalVirtual"), ("CHECKPOINT-MIB", "memActiveVirtual"), ("CHECKPOINT-MIB", "memTotalReal"), ("CHECKPOINT-MIB", "memActiveReal"), ("CHECKPOINT-MIB", "memFreeReal"), ("CHECKPOINT-MIB", "memSwapsSec"), ("CHECKPOINT-MIB", "memDiskTransfers"), ("CHECKPOINT-MIB", "procUsrTime"), ("CHECKPOINT-MIB", "procSysTime"), ("CHECKPOINT-MIB", "procIdleTime"), ("CHECKPOINT-MIB", "procUsage"), ("CHECKPOINT-MIB", "procQueue"), ("CHECKPOINT-MIB", "procInterrupts"), ("CHECKPOINT-MIB", "procNum"), ("CHECKPOINT-MIB", "diskTime"), ("CHECKPOINT-MIB", "diskQueue"), ("CHECKPOINT-MIB", "diskPercent"), ("CHECKPOINT-MIB", "diskFreeTotal"), ("CHECKPOINT-MIB", "diskFreeAvail"), ("CHECKPOINT-MIB", "diskTotal"), ("CHECKPOINT-MIB", "memTotalVirtual64"), ("CHECKPOINT-MIB", "memActiveVirtual64"), ("CHECKPOINT-MIB", "memTotalReal64"), ("CHECKPOINT-MIB", "memActiveReal64"), ("CHECKPOINT-MIB", "memFreeReal64"), ("CHECKPOINT-MIB", "memSwapsSec64"), ("CHECKPOINT-MIB", "memDiskTransfers64"), ("CHECKPOINT-MIB", "multiProcUserTime"), ("CHECKPOINT-MIB", "multiProcSystemTime"), ("CHECKPOINT-MIB", "multiProcIdleTime"), ("CHECKPOINT-MIB", "multiProcUsage"), ("CHECKPOINT-MIB", "multiProcRunQueue"), ("CHECKPOINT-MIB", "multiProcInterrupts"), ("CHECKPOINT-MIB", "multiDiskName"), ("CHECKPOINT-MIB", "multiDiskSize"), ("CHECKPOINT-MIB", "multiDiskUsed"), ("CHECKPOINT-MIB", "multiDiskFreeTotalBytes"), ("CHECKPOINT-MIB", "multiDiskFreeTotalPercent"), ("CHECKPOINT-MIB", "multiDiskFreeAvailableBytes"), ("CHECKPOINT-MIB", "multiDiskFreeAvailablePercent"), ("CHECKPOINT-MIB", "raidVolumeID"), ("CHECKPOINT-MIB", "raidVolumeType"), ("CHECKPOINT-MIB", "numOfDisksOnRaid"), ("CHECKPOINT-MIB", "raidVolumeMaxLBA"), ("CHECKPOINT-MIB", "raidVolumeState"), ("CHECKPOINT-MIB", "raidVolumeFlags"), ("CHECKPOINT-MIB", "raidVolumeSize"), ("CHECKPOINT-MIB", "raidDiskVolumeID"), ("CHECKPOINT-MIB", "raidDiskID"), ("CHECKPOINT-MIB", "raidDiskNumber"), ("CHECKPOINT-MIB", "raidDiskVendor"), ("CHECKPOINT-MIB", "raidDiskProductID"), ("CHECKPOINT-MIB", "raidDiskRevision"), ("CHECKPOINT-MIB", "raidDiskMaxLBA"), ("CHECKPOINT-MIB", "raidDiskState"), ("CHECKPOINT-MIB", "raidDiskFlags"), ("CHECKPOINT-MIB", "raidDiskSyncState"), ("CHECKPOINT-MIB", "raidDiskSize"), ("CHECKPOINT-MIB", "tempertureSensorName"), ("CHECKPOINT-MIB", "tempertureSensorValue"), ("CHECKPOINT-MIB", "tempertureSensorUnit"), ("CHECKPOINT-MIB", "tempertureSensorType"), ("CHECKPOINT-MIB", "tempertureSensorStatus"), ("CHECKPOINT-MIB", "fanSpeedSensorName"), ("CHECKPOINT-MIB", "fanSpeedSensorValue"), ("CHECKPOINT-MIB", "fanSpeedSensorUnit"), ("CHECKPOINT-MIB", "fanSpeedSensorType"), ("CHECKPOINT-MIB", "fanSpeedSensorStatus"), ("CHECKPOINT-MIB", "voltageSensorName"), ("CHECKPOINT-MIB", "voltageSensorValue"), ("CHECKPOINT-MIB", "voltageSensorUnit"), ("CHECKPOINT-MIB", "voltageSensorType"), ("CHECKPOINT-MIB", "voltageSensorStatus"), ("CHECKPOINT-MIB", "powerSupplyStatus"), ("CHECKPOINT-MIB", "svnApplianceSerialNumber"), ("CHECKPOINT-MIB", "svnApplianceManufacturer"), ("CHECKPOINT-MIB", "svnApplianceProductName"), ("CHECKPOINT-MIB", "svnApplianceSeriesString"), ("CHECKPOINT-MIB", "svnRouteModDest"), ("CHECKPOINT-MIB", "svnRouteModMask"), ("CHECKPOINT-MIB", "svnRouteModIfIndex"), ("CHECKPOINT-MIB", "svnRouteModGateway"), ("CHECKPOINT-MIB", "svnRouteModIfName"), ("CHECKPOINT-MIB", "svnRouteModAction"), ("CHECKPOINT-MIB", "svnLogDStat"), ("CHECKPOINT-MIB", "svnUpdatesInfoBuild"), ("CHECKPOINT-MIB", "svnUpdatesInfoStatus"), ("CHECKPOINT-MIB", "svnUpdatesInfoConnection"), ("CHECKPOINT-MIB", "svnUpdatesInfoAvailablePackages"), ("CHECKPOINT-MIB", "svnUpdatesInfoAvailableRecommended"), ("CHECKPOINT-MIB", "svnUpdatesInfoAvailableHotfixes"), ("CHECKPOINT-MIB", "updatesInstalledName"), ("CHECKPOINT-MIB", "updatesInstalledType"), ("CHECKPOINT-MIB", "updatesRecommendedName"), ("CHECKPOINT-MIB", "updatesRecommendedType"), ("CHECKPOINT-MIB", "updatesRecommendedStatus"), ("CHECKPOINT-MIB", "vdName"), ("CHECKPOINT-MIB", "vdType"), ("CHECKPOINT-MIB", "ctxId"), ("CHECKPOINT-MIB", "svnProdName"), ("CHECKPOINT-MIB", "svnProdVerMajor"), ("CHECKPOINT-MIB", "svnProdVerMinor"), ("CHECKPOINT-MIB", "routingDest"), ("CHECKPOINT-MIB", "routingMask"), ("CHECKPOINT-MIB", "routingGatweway"), ("CHECKPOINT-MIB", "routingIntrfName"), ("CHECKPOINT-MIB", "svnSysTime"), ("CHECKPOINT-MIB", "svnUTCTimeOffset"), ("CHECKPOINT-MIB", "svnSysStartTime"), ("CHECKPOINT-MIB", "svnSysUniqId"), ("CHECKPOINT-MIB", "svnWebUIPort"), ("CHECKPOINT-MIB", "arpTableSize"), ("CHECKPOINT-MIB", "sysDescr"), ("CHECKPOINT-MIB", "sysObjectID"), ("CHECKPOINT-MIB", "checkPointUTM_1450"), ("CHECKPOINT-MIB", "checkPointUTM_11050"), ("CHECKPOINT-MIB", "checkPointUTM_12050"), ("CHECKPOINT-MIB", "checkPointUTM_1130"), ("CHECKPOINT-MIB", "checkPointUTM_1270"), ("CHECKPOINT-MIB", "checkPointUTM_1570"), ("CHECKPOINT-MIB", "checkPointUTM_11070"), ("CHECKPOINT-MIB", "checkPointUTM_12070"), ("CHECKPOINT-MIB", "checkPointUTM_13070"), ("CHECKPOINT-MIB", "checkPointPower_15070"), ("CHECKPOINT-MIB", "checkPointPower_19070"), ("CHECKPOINT-MIB", "checkPointPower_111000"), ("CHECKPOINT-MIB", "checkPointSmart_15"), ("CHECKPOINT-MIB", "checkPointSmart_125"), ("CHECKPOINT-MIB", "checkPointSmart_150"), ("CHECKPOINT-MIB", "checkPointSmart_1150"), ("CHECKPOINT-MIB", "checkPointIP150"), ("CHECKPOINT-MIB", "checkPointIP280"), ("CHECKPOINT-MIB", "checkPointIP290"), ("CHECKPOINT-MIB", "checkPointIP390"), ("CHECKPOINT-MIB", "checkPointIP560"), ("CHECKPOINT-MIB", "checkPointIP690"), ("CHECKPOINT-MIB", "checkPointIP1280"), ("CHECKPOINT-MIB", "checkPointIP2450"), ("CHECKPOINT-MIB", "checkPointUNIVERGEUnifiedWall1000"), ("CHECKPOINT-MIB", "checkPointUNIVERGEUnifiedWall2000"), ("CHECKPOINT-MIB", "checkPointUNIVERGEUnifiedWall4000"), ("CHECKPOINT-MIB", "checkPointUNIVERGEUnifiedWall100"), ("CHECKPOINT-MIB", "checkPointDLP_19571"), ("CHECKPOINT-MIB", "checkPointDLP_12571"), ("CHECKPOINT-MIB", "checkPointIPS_12076"), ("CHECKPOINT-MIB", "checkPointIPS_15076"), ("CHECKPOINT-MIB", "checkPointIPS_19076"), ("CHECKPOINT-MIB", "checkPoint2200"), ("CHECKPOINT-MIB", "checkPoint4200"), ("CHECKPOINT-MIB", "checkPoint4400"), ("CHECKPOINT-MIB", "checkPoint4600"), ("CHECKPOINT-MIB", "checkPoint4800"), ("CHECKPOINT-MIB", "checkPointTE250"), ("CHECKPOINT-MIB", "checkPoint12200"), ("CHECKPOINT-MIB", "checkPoint12400"), ("CHECKPOINT-MIB", "checkPoint12600"), ("CHECKPOINT-MIB", "checkPointTE1000"), ("CHECKPOINT-MIB", "checkPoint13500"), ("CHECKPOINT-MIB", "checkPoint21400"), ("CHECKPOINT-MIB", "checkPoint21600"), ("CHECKPOINT-MIB", "checkPoint21700"), ("CHECKPOINT-MIB", "checkPointVMware"), ("CHECKPOINT-MIB", "checkPointOpenServer"), ("CHECKPOINT-MIB", "checkPointSmart_1205"), ("CHECKPOINT-MIB", "checkPointSmart_1210"), ("CHECKPOINT-MIB", "checkPointSmart_1225"), ("CHECKPOINT-MIB", "checkPointSmart_13050"), ("CHECKPOINT-MIB", "checkPointSmart_13150"), ("CHECKPOINT-MIB", "checkPoint13800"), ("CHECKPOINT-MIB", "checkPoint21800"), ("CHECKPOINT-MIB", "checkPointTE250X"), ("CHECKPOINT-MIB", "checkPointTE1000X"), ("CHECKPOINT-MIB", "checkPointTE2000X"), ("CHECKPOINT-MIB", "checkPointTE100X"), ("CHECKPOINT-MIB", "checkPoint23500"), ("CHECKPOINT-MIB", "checkPoint23800"), ("CHECKPOINT-MIB", "checkPoint15400"), ("CHECKPOINT-MIB", "checkPoint15600"), ("CHECKPOINT-MIB", "checkPoint3200"), ("CHECKPOINT-MIB", "checkPoint5200"), ("CHECKPOINT-MIB", "checkPoint5400"), ("CHECKPOINT-MIB", "checkPoint5600"), ("CHECKPOINT-MIB", "checkPoint5800"), ("CHECKPOINT-MIB", "checkPoint5900"), ("CHECKPOINT-MIB", "checkPoint3100"), ("CHECKPOINT-MIB", "checkPoint5100"), ("CHECKPOINT-MIB", "checkPointSmart_1405"), ("CHECKPOINT-MIB", "checkPointSmart_1410"), ("CHECKPOINT-MIB", "checkPointSmart_5050"), ("CHECKPOINT-MIB", "checkPointSmart_525"), ("CHECKPOINT-MIB", "checkPointSmart_5150"), ("CHECKPOINT-MIB", "checkPoint23900"), ("CHECKPOINT-MIB", "checkPoint6500"), ("CHECKPOINT-MIB", "checkPoint6800"), ("CHECKPOINT-MIB", "checkPoint16000T"), ("CHECKPOINT-MIB", "checkPoint26000"), ("CHECKPOINT-MIB", "checkPointSmart_625"), ("CHECKPOINT-MIB", "checkPoint16000"), ("CHECKPOINT-MIB", "checkPoint26000T"), ("CHECKPOINT-MIB", "checkPoint61000"), ("CHECKPOINT-MIB", "checkPoint64000"), ("CHECKPOINT-MIB", "checkPoint41000"), ("CHECKPOINT-MIB", "checkPoint44000"), ("CHECKPOINT-MIB", "checkPoint3600"), ("CHECKPOINT-MIB", "checkPoint3600T"), ("CHECKPOINT-MIB", "checkPoint6200B"), ("CHECKPOINT-MIB", "checkPoint6200P"), ("CHECKPOINT-MIB", "checkPoint6200T"), ("CHECKPOINT-MIB", "checkPoint6600"), ("CHECKPOINT-MIB", "checkPoint6900"), ("CHECKPOINT-MIB", "checkPoint16600HS"), ("CHECKPOINT-MIB", "checkPoint28600HS"), ("CHECKPOINT-MIB", "checkPoint6700"), ("CHECKPOINT-MIB", "checkPoint7000"), ("CHECKPOINT-MIB", "checkPoint16200"), ("CHECKPOINT-MIB", "checkPoint28000"), ("CHECKPOINT-MIB", "checkPoint6400"), ("CHECKPOINT-MIB", "checkPoint3800"), ("CHECKPOINT-MIB", "checkPointMHO140"), ("CHECKPOINT-MIB", "checkPointMHO170"), ("CHECKPOINT-MIB", "checkPointMHO175"), ("CHECKPOINT-MIB", "licensingID"), ("CHECKPOINT-MIB", "licensingBladeGUIOrder"), ("CHECKPOINT-MIB", "licensingBladeName"), ("CHECKPOINT-MIB", "licensingState"), ("CHECKPOINT-MIB", "licensingExpirationDate"), ("CHECKPOINT-MIB", "licensingImpact"), ("CHECKPOINT-MIB", "licensingBladeActive"), ("CHECKPOINT-MIB", "licensingTotalQuota"), ("CHECKPOINT-MIB", "licensingUsedQuota"), ("CHECKPOINT-MIB", "licensingAssetAccountId"), ("CHECKPOINT-MIB", "licensingAssetPackageDescription"), ("CHECKPOINT-MIB", "licensingAssetContainerCK"), ("CHECKPOINT-MIB", "licensingAssetCKSignature"), ("CHECKPOINT-MIB", "licensingAssetContainerSKU"), ("CHECKPOINT-MIB", "licensingAssetSupportLevel"), ("CHECKPOINT-MIB", "licensingAssetSupportExpiration"), ("CHECKPOINT-MIB", "licensingAssetActivationStatus"), ("CHECKPOINT-MIB", "svnConnectivity"), ("CHECKPOINT-MIB", "svnNetIfVsid"), ("CHECKPOINT-MIB", "svnNetIfName"), ("CHECKPOINT-MIB", "svnNetIfAddress"), ("CHECKPOINT-MIB", "svnNetIfMask"), ("CHECKPOINT-MIB", "svnNetIfMTU"), ("CHECKPOINT-MIB", "svnNetIfState"), ("CHECKPOINT-MIB", "svnNetIfMAC")], [("CHECKPOINT-MIB", "svnNetIfDescription"), ("CHECKPOINT-MIB", "svnNetIfOperState"), ("CHECKPOINT-MIB", "svnNetIfRXBytes"), ("CHECKPOINT-MIB", "svnNetIfRXDrops"), ("CHECKPOINT-MIB", "svnNetIfRXErrors"), ("CHECKPOINT-MIB", "svnNetIfRXPackets"), ("CHECKPOINT-MIB", "svnNetIfTXBytes"), ("CHECKPOINT-MIB", "svnNetIfTXDrops"), ("CHECKPOINT-MIB", "svnNetIfTXErrors"), ("CHECKPOINT-MIB", "svnNetIfTXPackets"), ("CHECKPOINT-MIB", "vsRoutingDest"), ("CHECKPOINT-MIB", "vsRoutingMask"), ("CHECKPOINT-MIB", "vsRoutingGateway"), ("CHECKPOINT-MIB", "vsRoutingIntrfName"), ("CHECKPOINT-MIB", "vsRoutingVsId"), ("CHECKPOINT-MIB", "svnStatCode"), ("CHECKPOINT-MIB", "svnStatShortDescr"), ("CHECKPOINT-MIB", "svnStatLongDescr"), ("CHECKPOINT-MIB", "svnServicePack"), ("CHECKPOINT-MIB", "checkPointSmart_6000_L"), ("CHECKPOINT-MIB", "checkPointSmart_6000_XL"), ("CHECKPOINT-MIB", "checkPointSmart_600_S"), ("CHECKPOINT-MIB", "checkPointSmart_600_M"), ("CHECKPOINT-MIB", "checkPointTE2000XN"), ("CHECKPOINT-MIB", "checkPointQLS250"), ("CHECKPOINT-MIB", "checkPointQLS450"), ("CHECKPOINT-MIB", "checkPointQLS650"), ("CHECKPOINT-MIB", "checkPointQLS800"), ("CHECKPOINT-MIB", "checkPointMLS200"), ("CHECKPOINT-MIB", "checkPointMLS400"), ("CHECKPOINT-MIB", "checkPointSMB_1530"), ("CHECKPOINT-MIB", "checkPointSMB_1550"), ("CHECKPOINT-MIB", "checkPointSMB_1570"), ("CHECKPOINT-MIB", "checkPointSMB_1570R"), ("CHECKPOINT-MIB", "checkPointSMB_1590"), ("CHECKPOINT-MIB", "checkPointSMB_1600"), ("CHECKPOINT-MIB", "checkPointSMB_1800")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        svnProductsGroup = svnProductsGroup.setObjects(*_svnProductsGroup_obj)
    else:
        svnProductsGroup = svnProductsGroup.setObjects(*_svnProductsGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    svnProductsGroup = svnProductsGroup.setStatus('current')
if mibBuilder.loadTexts: svnProductsGroup.setDescription('A collection of managed objects that provide information about SVN objects')
mngmtProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 6)).setObjects(("CHECKPOINT-MIB", "mgProdName"), ("CHECKPOINT-MIB", "mgVerMajor"), ("CHECKPOINT-MIB", "mgVerMinor"), ("CHECKPOINT-MIB", "mgBuildNumber"), ("CHECKPOINT-MIB", "mgActiveStatus"), ("CHECKPOINT-MIB", "mgFwmIsAlive"), ("CHECKPOINT-MIB", "mgICAStatus"), ("CHECKPOINT-MIB", "mgClientName"), ("CHECKPOINT-MIB", "mgClientHost"), ("CHECKPOINT-MIB", "mgClientDbLock"), ("CHECKPOINT-MIB", "mgApplicationType"), ("CHECKPOINT-MIB", "mgMgmtHAJournals"), ("CHECKPOINT-MIB", "mgIsLicenseViolation"), ("CHECKPOINT-MIB", "mgLicenseViolationMsg"), ("CHECKPOINT-MIB", "mglsGWIP"), ("CHECKPOINT-MIB", "mglsGWState"), ("CHECKPOINT-MIB", "mglsGWLastLoginTime"), ("CHECKPOINT-MIB", "mglsGWLogReceiveRate"), ("CHECKPOINT-MIB", "mgStatCode"), ("CHECKPOINT-MIB", "mgStatShortDescr"), ("CHECKPOINT-MIB", "mgStatLongDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mngmtProductsGroup = mngmtProductsGroup.setStatus('current')
if mibBuilder.loadTexts: mngmtProductsGroup.setDescription('A collection of managed objects that provide information about MNGMT objects')
wamProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 7)).setObjects(("CHECKPOINT-MIB", "wamAcceptReq"), ("CHECKPOINT-MIB", "wamRejectReq"), ("CHECKPOINT-MIB", "wamPolicyName"), ("CHECKPOINT-MIB", "wamPolicyUpdate"), ("CHECKPOINT-MIB", "wamUagHost"), ("CHECKPOINT-MIB", "wamUagIp"), ("CHECKPOINT-MIB", "wamUagPort"), ("CHECKPOINT-MIB", "wamUagNoQueries"), ("CHECKPOINT-MIB", "wamUagLastQuery"), ("CHECKPOINT-MIB", "wamOpenSessions"), ("CHECKPOINT-MIB", "wamLastSession"), ("CHECKPOINT-MIB", "wamProdName"), ("CHECKPOINT-MIB", "wamVerMajor"), ("CHECKPOINT-MIB", "wamVerMinor"), ("CHECKPOINT-MIB", "wamState"), ("CHECKPOINT-MIB", "wamName"), ("CHECKPOINT-MIB", "wamStatCode"), ("CHECKPOINT-MIB", "wamStatShortDescr"), ("CHECKPOINT-MIB", "wamStatLongDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wamProductsGroup = wamProductsGroup.setStatus('current')
if mibBuilder.loadTexts: wamProductsGroup.setDescription('A collection of managed objects that provide information about WAM objects')
dtpsProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 8)).setObjects(("CHECKPOINT-MIB", "dtpsProdName"), ("CHECKPOINT-MIB", "dtpsVerMajor"), ("CHECKPOINT-MIB", "dtpsVerMinor"), ("CHECKPOINT-MIB", "dtpsLicensedUsers"), ("CHECKPOINT-MIB", "dtpsConnectedUsers"), ("CHECKPOINT-MIB", "dtpsStatCode"), ("CHECKPOINT-MIB", "dtpsStatShortDescr"), ("CHECKPOINT-MIB", "dtpsStatLongDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dtpsProductsGroup = dtpsProductsGroup.setStatus('current')
if mibBuilder.loadTexts: dtpsProductsGroup.setDescription('A collection of managed objects that provide information about DTPS objects')
lsProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 9)).setObjects(("CHECKPOINT-MIB", "lsProdName"), ("CHECKPOINT-MIB", "lsVerMajor"), ("CHECKPOINT-MIB", "lsVerMinor"), ("CHECKPOINT-MIB", "lsBuildNumber"), ("CHECKPOINT-MIB", "lsFwmIsAlive"), ("CHECKPOINT-MIB", "lsGWIP"), ("CHECKPOINT-MIB", "lsGWState"), ("CHECKPOINT-MIB", "lsGWLastLoginTime"), ("CHECKPOINT-MIB", "lsGWLogReceiveRate"), ("CHECKPOINT-MIB", "lsStatCode"), ("CHECKPOINT-MIB", "lsStatShortDescr"), ("CHECKPOINT-MIB", "lsStatLongDescr"), ("CHECKPOINT-MIB", "lsClientName"), ("CHECKPOINT-MIB", "lsClientHost"), ("CHECKPOINT-MIB", "lsClientDbLock"), ("CHECKPOINT-MIB", "lsApplicationType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lsProductsGroup = lsProductsGroup.setStatus('current')
if mibBuilder.loadTexts: lsProductsGroup.setDescription('A collection of managed objects that provide information about LS objects')
vsxProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 10)).setObjects(("CHECKPOINT-MIB", "vsxVsSupported"), ("CHECKPOINT-MIB", "vsxVsConfigured"), ("CHECKPOINT-MIB", "vsxVsInstalled"), ("CHECKPOINT-MIB", "vsxVsidConfigured"), ("CHECKPOINT-MIB", "vsxAllVSsConnsSum"), ("CHECKPOINT-MIB", "vsxStatusVRId"), ("CHECKPOINT-MIB", "vsxStatusVsName"), ("CHECKPOINT-MIB", "vsxStatusVsType"), ("CHECKPOINT-MIB", "vsxStatusMainIP"), ("CHECKPOINT-MIB", "vsxStatusPolicyName"), ("CHECKPOINT-MIB", "vsxStatusVsPolicyType"), ("CHECKPOINT-MIB", "vsxStatusSicTrustState"), ("CHECKPOINT-MIB", "vsxStatusHAState"), ("CHECKPOINT-MIB", "vsxStatusVSWeight"), ("CHECKPOINT-MIB", "vsxStatusMemoryUsageVSName"), ("CHECKPOINT-MIB", "vsxStatusMemoryUsage"), ("CHECKPOINT-MIB", "vsxStatusMemoryUsageVSMaxMem"), ("CHECKPOINT-MIB", "vsxStatusInterfaceVSName"), ("CHECKPOINT-MIB", "vsxStatusInterfaceIfName"), ("CHECKPOINT-MIB", "vsxStatusInterfaceAdminState"), ("CHECKPOINT-MIB", "vsxStatusInterfaceOperState"), ("CHECKPOINT-MIB", "vsxStatusInterfaceRxBytes"), ("CHECKPOINT-MIB", "vsxStatusInterfaceTxBytes"), ("CHECKPOINT-MIB", "vsxStatusInterfaceOverallBytes"), ("CHECKPOINT-MIB", "vsxStatusInterfaceRxErrors"), ("CHECKPOINT-MIB", "vsxStatusInterfaceTxErrors"), ("CHECKPOINT-MIB", "vsxCountersVSId"), ("CHECKPOINT-MIB", "vsxCountersConnNum"), ("CHECKPOINT-MIB", "vsxCountersConnPeakNum"), ("CHECKPOINT-MIB", "vsxCountersConnTableLimit"), ("CHECKPOINT-MIB", "vsxCountersPackets"), ("CHECKPOINT-MIB", "vsxCountersDroppedTotal"), ("CHECKPOINT-MIB", "vsxCountersAcceptedTotal"), ("CHECKPOINT-MIB", "vsxCountersRejectedTotal"), ("CHECKPOINT-MIB", "vsxCountersBytesAcceptedTotal"), ("CHECKPOINT-MIB", "vsxCountersBytesDroppedTotal"), ("CHECKPOINT-MIB", "vsxCountersBytesRejectedTotal"), ("CHECKPOINT-MIB", "vsxCountersLoggedTotal"), ("CHECKPOINT-MIB", "vsxCountersIsDataValid"), ("CHECKPOINT-MIB", "vsxCountersDropVSID"), ("CHECKPOINT-MIB", "vsxCountersDropVsName"), ("CHECKPOINT-MIB", "vsxCountersDropCount"), ("CHECKPOINT-MIB", "raExternalIpAddr"), ("CHECKPOINT-MIB", "raUserState"), ("CHECKPOINT-MIB", "raOfficeMode"), ("CHECKPOINT-MIB", "raIkeOverTCP"), ("CHECKPOINT-MIB", "raUseUDPEncap"), ("CHECKPOINT-MIB", "raVisitorMode"), ("CHECKPOINT-MIB", "raRouteTraffic"), ("CHECKPOINT-MIB", "raCommunity"), ("CHECKPOINT-MIB", "raTunnelEncAlgorithm"), ("CHECKPOINT-MIB", "raTunnelAuthMethod"), ("CHECKPOINT-MIB", "raLogonTime"), ("CHECKPOINT-MIB", "tunnelPeerObjName"), ("CHECKPOINT-MIB", "tunnelState"), ("CHECKPOINT-MIB", "tunnelCommunity"), ("CHECKPOINT-MIB", "tunnelNextHop"), ("CHECKPOINT-MIB", "tunnelInterface"), ("CHECKPOINT-MIB", "tunnelSourceIpAddr"), ("CHECKPOINT-MIB", "tunnelLinkPriority"), ("CHECKPOINT-MIB", "tunnelProbState"), ("CHECKPOINT-MIB", "tunnelPeerType"), ("CHECKPOINT-MIB", "tunnelType"), ("CHECKPOINT-MIB", "permanentTunnelPeerObjName"), ("CHECKPOINT-MIB", "permanentTunnelState"), ("CHECKPOINT-MIB", "permanentTunnelCommunity"), ("CHECKPOINT-MIB", "permanentTunnelNextHop"), ("CHECKPOINT-MIB", "permanentTunnelInterface"), ("CHECKPOINT-MIB", "permanentTunnelSourceIpAddr"), ("CHECKPOINT-MIB", "permanentTunnelLinkPriority"), ("CHECKPOINT-MIB", "permanentTunnelProbState"), ("CHECKPOINT-MIB", "permanentTunnelPeerType"), ("CHECKPOINT-MIB", "vsxTunnelsVSidName"), ("CHECKPOINT-MIB", "vsxS2SIpsecTunnelsCounter"), ("CHECKPOINT-MIB", "vsxVSStateChangedVSIdName"), ("CHECKPOINT-MIB", "vsxVSStateChangedChangeOccurred"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsxProductsGroup = vsxProductsGroup.setStatus('current')
if mibBuilder.loadTexts: vsxProductsGroup.setDescription('A collection of managed objects that provide information about VSX objects')
smartDefenseProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 11)).setObjects(("CHECKPOINT-MIB", "asmSynatkSynAckTimeout"), ("CHECKPOINT-MIB", "asmSynatkSynAckReset"), ("CHECKPOINT-MIB", "asmSynatkModeChange"), ("CHECKPOINT-MIB", "asmSynatkCurrentMode"), ("CHECKPOINT-MIB", "asmSynatkNumberofunAckedSyns"), ("CHECKPOINT-MIB", "smallPMTUNumberOfAttacks"), ("CHECKPOINT-MIB", "smallPMTUValueOfMinimalMTUsize"), ("CHECKPOINT-MIB", "sequenceVerifierInvalidAck"), ("CHECKPOINT-MIB", "sequenceVerifierInvalidSequence"), ("CHECKPOINT-MIB", "sequenceVerifierInvalidretransmit"), ("CHECKPOINT-MIB", "numOfhostPortScan"), ("CHECKPOINT-MIB", "numOfIpSweep"), ("CHECKPOINT-MIB", "httpWorms"), ("CHECKPOINT-MIB", "httpURLLengthViolation"), ("CHECKPOINT-MIB", "httpHeaderLengthViolations"), ("CHECKPOINT-MIB", "httpMaxHeaderReached"), ("CHECKPOINT-MIB", "numOfHttpASCIIViolations"), ("CHECKPOINT-MIB", "numOfHttpP2PHeaders"), ("CHECKPOINT-MIB", "numOfCIFSworms"), ("CHECKPOINT-MIB", "numOfCIFSNullSessions"), ("CHECKPOINT-MIB", "numOfCIFSBlockedPopUps"), ("CHECKPOINT-MIB", "numOfCIFSBlockedCommands"), ("CHECKPOINT-MIB", "numOfCIFSPasswordLengthViolations"), ("CHECKPOINT-MIB", "numOfP2POtherConAttempts"), ("CHECKPOINT-MIB", "numOfP2PKazaaConAttempts"), ("CHECKPOINT-MIB", "numOfP2PeMuleConAttempts"), ("CHECKPOINT-MIB", "numOfGnutellaConAttempts"), ("CHECKPOINT-MIB", "numOfP2PSkypeCon"), ("CHECKPOINT-MIB", "numOfBitTorrentCon"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    smartDefenseProductsGroup = smartDefenseProductsGroup.setStatus('current')
if mibBuilder.loadTexts: smartDefenseProductsGroup.setDescription('A collection of managed objects that provide information about SmartDefense objects')
gxProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 12)).setObjects(("CHECKPOINT-MIB", "gxProdName"), ("CHECKPOINT-MIB", "gxProdVersion"), ("CHECKPOINT-MIB", "gxCreateSinceInstall"), ("CHECKPOINT-MIB", "gxActContxt"), ("CHECKPOINT-MIB", "gxDropPlicyCreate"), ("CHECKPOINT-MIB", "gxDropMalformedReqCreate"), ("CHECKPOINT-MIB", "gxDropMalformedRespCreate"), ("CHECKPOINT-MIB", "gxExpiredCreate"), ("CHECKPOINT-MIB", "gxBadCauseCreate"), ("CHECKPOINT-MIB", "gxSecondaryNsapiEntries"), ("CHECKPOINT-MIB", "gxActv0v1PdnConns"), ("CHECKPOINT-MIB", "gxTunnelApnsEntries"), ("CHECKPOINT-MIB", "gxTunnelsEntries"), ("CHECKPOINT-MIB", "gxDeleteSinceInstall"), ("CHECKPOINT-MIB", "gxDropOutOfContxtDelete"), ("CHECKPOINT-MIB", "gxDropMalformedReqDelete"), ("CHECKPOINT-MIB", "gxDropMalformedRespDelete"), ("CHECKPOINT-MIB", "gxExpiredDelete"), ("CHECKPOINT-MIB", "gxBadCauseDelete"), ("CHECKPOINT-MIB", "gxUpdateSinceInstall"), ("CHECKPOINT-MIB", "gxDropOutOfContxtUpdate"), ("CHECKPOINT-MIB", "gxDropMalformedReqUpdate"), ("CHECKPOINT-MIB", "gxDropMalformedRespUpdate"), ("CHECKPOINT-MIB", "gxExpiredUpdate"), ("CHECKPOINT-MIB", "gxBadCauseUpdate"), ("CHECKPOINT-MIB", "gxEchoSinceInstall"), ("CHECKPOINT-MIB", "gxVnspSinceInstall"), ("CHECKPOINT-MIB", "gxDropPolicyEcho"), ("CHECKPOINT-MIB", "gxDropMalformedReqEcho"), ("CHECKPOINT-MIB", "gxDropMalformedRespEcho"), ("CHECKPOINT-MIB", "gxExpiredEcho"), ("CHECKPOINT-MIB", "gxDropVnsp"), ("CHECKPOINT-MIB", "gxGtpPathEntries"), ("CHECKPOINT-MIB", "gxGpdu1MinAvgRate"), ("CHECKPOINT-MIB", "gxDropOutOfContxtGpdu"), ("CHECKPOINT-MIB", "gxDropAnti_spoofingGpdu"), ("CHECKPOINT-MIB", "gxDropMs_MsGpdu"), ("CHECKPOINT-MIB", "gxDropBadSeqGpdu"), ("CHECKPOINT-MIB", "gxDropBadGpdu"), ("CHECKPOINT-MIB", "gxGpduExpiredTunnel"), ("CHECKPOINT-MIB", "gxInitiateSinceInstall"), ("CHECKPOINT-MIB", "gxDropInitiationReq"), ("CHECKPOINT-MIB", "gxDropInitiationResp"), ("CHECKPOINT-MIB", "gxExpiredInitiateAct"), ("CHECKPOINT-MIB", "gxGTPv2CreateSessionSinceInstall"), ("CHECKPOINT-MIB", "gxGTPv2CreateBearerSinceInstall"), ("CHECKPOINT-MIB", "gxGTPv2ExpiredCreateSession"), ("CHECKPOINT-MIB", "gxGTPv2ExpiredCreateBearer"), ("CHECKPOINT-MIB", "gxGTPv2DropMalformedCreateSessionReq"), ("CHECKPOINT-MIB", "gxGTPv2DropMalformedCreateSessionResp"), ("CHECKPOINT-MIB", "gxGTPv2DropMalformedCreateBearerReq"), ("CHECKPOINT-MIB", "gxGTPv2DropMalformedCreateBearerResp"), ("CHECKPOINT-MIB", "gxGTPv2DropPolicyCreateSession"), ("CHECKPOINT-MIB", "gxGTPv2DropPolicyCreateBearer"), ("CHECKPOINT-MIB", "gxGTPv2ActPDN"), ("CHECKPOINT-MIB", "gxGTPv2ActDataBearers"), ("CHECKPOINT-MIB", "gxGTPv2DeleteSessionSinceInstall"), ("CHECKPOINT-MIB", "gxGTPv2DeleteBearerSinceInstall"), ("CHECKPOINT-MIB", "gxGTPv2ExpiredDeleteSession"), ("CHECKPOINT-MIB", "gxGTPv2ExpiredDeleteBearer"), ("CHECKPOINT-MIB", "gxGTPv2DropMalformedDeleteSessionReq"), ("CHECKPOINT-MIB", "gxGTPv2DropMalformedDeleteSessionResp"), ("CHECKPOINT-MIB", "gxGTPv2DropMalformedDeleteBearerReq"), ("CHECKPOINT-MIB", "gxGTPv2DropMalformedDeleteBearerResp"), ("CHECKPOINT-MIB", "gxGTPv2DropPolicyDeleteSession"), ("CHECKPOINT-MIB", "gxGTPv2DropPolicyDeleteBearer"), ("CHECKPOINT-MIB", "gxGTPv2UpdateBearerSinceInstall"), ("CHECKPOINT-MIB", "gxGTPv2ExpiredUpdateBearer"), ("CHECKPOINT-MIB", "gxGTPv2ModifyBearerSinceInstall"), ("CHECKPOINT-MIB", "gxGTPv2ExpiredModifyBearer"), ("CHECKPOINT-MIB", "gxGTPv2DropMalformedUpdateBearerReq"), ("CHECKPOINT-MIB", "gxGTPv2DropMalformedUpdateBearerResp"), ("CHECKPOINT-MIB", "gxGTPv2DropMalformedModifyBearerReq"), ("CHECKPOINT-MIB", "gxGTPv2DropMalformedModifyBearerResp"), ("CHECKPOINT-MIB", "gxGTPv2DropPolicyUpdateBearer"), ("CHECKPOINT-MIB", "gxGTPv2DropPolicyModifyBearer"), ("CHECKPOINT-MIB", "gxGTPv2EchoSinceInstall"), ("CHECKPOINT-MIB", "gxGTPv2VnspSinceInstall"), ("CHECKPOINT-MIB", "gxGTPv2ExpiredEcho"), ("CHECKPOINT-MIB", "gxGTPv2DropMalformedEchoReq"), ("CHECKPOINT-MIB", "gxGTPv2DropMalformedEchoResp"), ("CHECKPOINT-MIB", "gxGTPv2DropPolicyEcho"), ("CHECKPOINT-MIB", "gxGTPv2ModifyBearerCmdSinceInstall"), ("CHECKPOINT-MIB", "gxGTPv2ModifyBearerFailIndSinceInstall"), ("CHECKPOINT-MIB", "gxGTPv2DeleteBearerCmdSinceInstall"), ("CHECKPOINT-MIB", "gxGTPv2DeleteBearerFailIndSinceInstall"), ("CHECKPOINT-MIB", "gxGTPv2BearerResourceCmdSinceInstall"), ("CHECKPOINT-MIB", "gxGTPv2BearerResourceFailIndSinceInstall"), ("CHECKPOINT-MIB", "gxProdVerMajor"), ("CHECKPOINT-MIB", "gxProdVerMinor"), ("CHECKPOINT-MIB", "gxBuild"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gxProductsGroup = gxProductsGroup.setStatus('current')
if mibBuilder.loadTexts: gxProductsGroup.setDescription('A collection of managed objects that provide information about GX objects')
aviProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 13)).setObjects(("CHECKPOINT-MIB", "aviEngineName"), ("CHECKPOINT-MIB", "aviEngineVer"), ("CHECKPOINT-MIB", "aviEngineDate"), ("CHECKPOINT-MIB", "aviSignatureName"), ("CHECKPOINT-MIB", "aviSignatureVer"), ("CHECKPOINT-MIB", "aviSignatureDate"), ("CHECKPOINT-MIB", "aviLastSigCheckTime"), ("CHECKPOINT-MIB", "aviLastSigLocation"), ("CHECKPOINT-MIB", "aviLastLicExp"), ("CHECKPOINT-MIB", "aviTopVirusesName"), ("CHECKPOINT-MIB", "aviTopVirusesCnt"), ("CHECKPOINT-MIB", "aviTopEverVirusesName"), ("CHECKPOINT-MIB", "aviTopEverVirusesCnt"), ("CHECKPOINT-MIB", "aviHTTPState"), ("CHECKPOINT-MIB", "aviHTTPLastVirusName"), ("CHECKPOINT-MIB", "aviHTTPLastVirusTime"), ("CHECKPOINT-MIB", "aviHTTPTopVirusesName"), ("CHECKPOINT-MIB", "aviHTTPTopVirusesCnt"), ("CHECKPOINT-MIB", "aviFTPState"), ("CHECKPOINT-MIB", "aviFTPLastVirusName"), ("CHECKPOINT-MIB", "aviFTPLastVirusTime"), ("CHECKPOINT-MIB", "aviFTPTopVirusesName"), ("CHECKPOINT-MIB", "aviFTPTopVirusesCnt"), ("CHECKPOINT-MIB", "aviSMTPState"), ("CHECKPOINT-MIB", "aviSMTPLastVirusName"), ("CHECKPOINT-MIB", "aviSMTPLastVirusTime"), ("CHECKPOINT-MIB", "aviSMTPTopVirusesName"), ("CHECKPOINT-MIB", "aviSMTPTopVirusesCnt"), ("CHECKPOINT-MIB", "aviPOP3State"), ("CHECKPOINT-MIB", "aviPOP3LastVirusName"), ("CHECKPOINT-MIB", "aviPOP3LastVirusTime"), ("CHECKPOINT-MIB", "aviPOP3TopVirusesName"), ("CHECKPOINT-MIB", "aviPOP3TopVirusesCnt"), ("CHECKPOINT-MIB", "aviStatCode"), ("CHECKPOINT-MIB", "aviStatShortDescr"), ("CHECKPOINT-MIB", "aviStatLongDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aviProductsGroup = aviProductsGroup.setStatus('current')
if mibBuilder.loadTexts: aviProductsGroup.setDescription('A collection of managed objects that provide information about AVI objects')
eventiaAnalyzerProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 14)).setObjects(("CHECKPOINT-MIB", "cpsemdStatCode"), ("CHECKPOINT-MIB", "cpsemdStatShortDescr"), ("CHECKPOINT-MIB", "cpsemdStatLongDescr"), ("CHECKPOINT-MIB", "cpsemdProcAlive"), ("CHECKPOINT-MIB", "cpsemdNewEventsHandled"), ("CHECKPOINT-MIB", "cpsemdUpdatesHandled"), ("CHECKPOINT-MIB", "cpsemdLastEventTime"), ("CHECKPOINT-MIB", "cpsemdCurrentDBSize"), ("CHECKPOINT-MIB", "cpsemdDBCapacity"), ("CHECKPOINT-MIB", "cpsemdNumEvents"), ("CHECKPOINT-MIB", "cpsemdDBDiskSpace"), ("CHECKPOINT-MIB", "cpsemdCorrelationUnitIP"), ("CHECKPOINT-MIB", "cpsemdCorrelationUnitLastRcvdTime"), ("CHECKPOINT-MIB", "cpsemdCorrelationUnitNumEventsRcvd"), ("CHECKPOINT-MIB", "cpsemdConnectionDuration"), ("CHECKPOINT-MIB", "cpsemdDBIsFull"), ("CHECKPOINT-MIB", "cpseadStatCode"), ("CHECKPOINT-MIB", "cpseadStatShortDescr"), ("CHECKPOINT-MIB", "cpseadStatLongDescr"), ("CHECKPOINT-MIB", "cpseadProcAlive"), ("CHECKPOINT-MIB", "cpseadConnectedToSem"), ("CHECKPOINT-MIB", "cpseadNumProcessedLogs"), ("CHECKPOINT-MIB", "cpseadJobID"), ("CHECKPOINT-MIB", "cpseadJobName"), ("CHECKPOINT-MIB", "cpseadJobState"), ("CHECKPOINT-MIB", "cpseadJobIsOnline"), ("CHECKPOINT-MIB", "cpseadJobLogServer"), ("CHECKPOINT-MIB", "cpseadJobDataType"), ("CHECKPOINT-MIB", "cpseadConnectedToLogServer"), ("CHECKPOINT-MIB", "cpseadNumAnalyzedLogs"), ("CHECKPOINT-MIB", "cpseadFileName"), ("CHECKPOINT-MIB", "cpseadFileCurrentPosition"), ("CHECKPOINT-MIB", "cpseadStateDescriptionCode"), ("CHECKPOINT-MIB", "cpseadStateDescription"), ("CHECKPOINT-MIB", "cpseadNoFreeDiskSpace"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eventiaAnalyzerProductsGroup = eventiaAnalyzerProductsGroup.setStatus('current')
if mibBuilder.loadTexts: eventiaAnalyzerProductsGroup.setDescription('A collection of managed objects that provide information about Eventia Analyzer objects')
ufProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 15)).setObjects(("CHECKPOINT-MIB", "ufEngineName"), ("CHECKPOINT-MIB", "ufEngineVer"), ("CHECKPOINT-MIB", "ufEngineDate"), ("CHECKPOINT-MIB", "ufSignatureDate"), ("CHECKPOINT-MIB", "ufSignatureVer"), ("CHECKPOINT-MIB", "ufLastSigCheckTime"), ("CHECKPOINT-MIB", "ufLastSigLocation"), ("CHECKPOINT-MIB", "ufLastLicExp"), ("CHECKPOINT-MIB", "ufIsMonitor"), ("CHECKPOINT-MIB", "ufScannedCnt"), ("CHECKPOINT-MIB", "ufBlockedCnt"), ("CHECKPOINT-MIB", "ufTopBlockedCatName"), ("CHECKPOINT-MIB", "ufTopBlockedCatCnt"), ("CHECKPOINT-MIB", "ufTopBlockedSiteName"), ("CHECKPOINT-MIB", "ufTopBlockedSiteCnt"), ("CHECKPOINT-MIB", "ufTopBlockedUserName"), ("CHECKPOINT-MIB", "ufTopBlockedUserCnt"), ("CHECKPOINT-MIB", "ufStatCode"), ("CHECKPOINT-MIB", "ufStatShortDescr"), ("CHECKPOINT-MIB", "ufStatLongDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ufProductsGroup = ufProductsGroup.setStatus('current')
if mibBuilder.loadTexts: ufProductsGroup.setDescription('A collection of managed objects that provide information about UF objects')
msProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 16)).setObjects(("CHECKPOINT-MIB", "msProductName"), ("CHECKPOINT-MIB", "msMajorVersion"), ("CHECKPOINT-MIB", "msMinorVersion"), ("CHECKPOINT-MIB", "msBuildNumber"), ("CHECKPOINT-MIB", "msVersionStr"), ("CHECKPOINT-MIB", "msSpamNumScannedEmails"), ("CHECKPOINT-MIB", "msSpamNumSpamEmails"), ("CHECKPOINT-MIB", "msSpamNumHandledSpamEmails"), ("CHECKPOINT-MIB", "msSpamControlsSpamEngine"), ("CHECKPOINT-MIB", "msSpamControlsIpRepuatation"), ("CHECKPOINT-MIB", "msSpamControlsSPF"), ("CHECKPOINT-MIB", "msSpamControlsDomainKeys"), ("CHECKPOINT-MIB", "msSpamControlsRDNS"), ("CHECKPOINT-MIB", "msSpamControlsRBL"), ("CHECKPOINT-MIB", "msExpirationDate"), ("CHECKPOINT-MIB", "msEngineVer"), ("CHECKPOINT-MIB", "msEngineDate"), ("CHECKPOINT-MIB", "msStatCode"), ("CHECKPOINT-MIB", "msStatShortDescr"), ("CHECKPOINT-MIB", "msStatLongDescr"), ("CHECKPOINT-MIB", "msServicePack"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    msProductsGroup = msProductsGroup.setStatus('current')
if mibBuilder.loadTexts: msProductsGroup.setDescription('A collection of managed objects that provide information about MS objects')
voipProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 17)).setObjects(("CHECKPOINT-MIB", "voipProductName"), ("CHECKPOINT-MIB", "voipMajorVersion"), ("CHECKPOINT-MIB", "voipMinorVersion"), ("CHECKPOINT-MIB", "voipBuildNumber"), ("CHECKPOINT-MIB", "voipVersionStr"), ("CHECKPOINT-MIB", "voipDOSSipNetworkReqInterval"), ("CHECKPOINT-MIB", "voipDOSSipNetworkReqConfThreshold"), ("CHECKPOINT-MIB", "voipDOSSipNetworkReqCurrentVal"), ("CHECKPOINT-MIB", "voipDOSSipNetworkRegInterval"), ("CHECKPOINT-MIB", "voipDOSSipNetworkRegConfThreshold"), ("CHECKPOINT-MIB", "voipDOSSipNetworkRegCurrentVal"), ("CHECKPOINT-MIB", "voipDOSSipNetworkCallInitInterval"), ("CHECKPOINT-MIB", "voipDOSSipNetworkCallInitConfThreshold"), ("CHECKPOINT-MIB", "voipDOSSipNetworkCallInitICurrentVal"), ("CHECKPOINT-MIB", "voipDOSSipRateLimitingTableIpAddress"), ("CHECKPOINT-MIB", "voipDOSSipRateLimitingTableInterval"), ("CHECKPOINT-MIB", "voipDOSSipRateLimitingTableConfThreshold"), ("CHECKPOINT-MIB", "voipDOSSipRateLimitingTableNumDOSSipRequests"), ("CHECKPOINT-MIB", "voipDOSSipRateLimitingTableNumTrustedRequests"), ("CHECKPOINT-MIB", "voipDOSSipRateLimitingTableNumNonTrustedRequests"), ("CHECKPOINT-MIB", "voipDOSSipRateLimitingTableNumRequestsfromServers"), ("CHECKPOINT-MIB", "voipCACConcurrentCallsConfThreshold"), ("CHECKPOINT-MIB", "voipCACConcurrentCallsCurrentVal"), ("CHECKPOINT-MIB", "voipStatCode"), ("CHECKPOINT-MIB", "voipStatShortDescr"), ("CHECKPOINT-MIB", "voipStatLongDescr"), ("CHECKPOINT-MIB", "voipServicePack"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    voipProductsGroup = voipProductsGroup.setStatus('current')
if mibBuilder.loadTexts: voipProductsGroup.setDescription('A collection of managed objects that provide information about VOIP objects')
identityAwarenessProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 18)).setObjects(("CHECKPOINT-MIB", "identityAwarenessProductName"), ("CHECKPOINT-MIB", "identityAwarenessAuthUsers"), ("CHECKPOINT-MIB", "identityAwarenessUnAuthUsers"), ("CHECKPOINT-MIB", "identityAwarenessAuthUsersKerberos"), ("CHECKPOINT-MIB", "identityAwarenessAuthMachKerberos"), ("CHECKPOINT-MIB", "identityAwarenessAuthUsersPass"), ("CHECKPOINT-MIB", "identityAwarenessAuthUsersADQuery"), ("CHECKPOINT-MIB", "identityAwarenessAuthMachADQuery"), ("CHECKPOINT-MIB", "identityAwarenessLoggedInAgent"), ("CHECKPOINT-MIB", "identityAwarenessLoggedInCaptivePortal"), ("CHECKPOINT-MIB", "identityAwarenessLoggedInADQuery"), ("CHECKPOINT-MIB", "identityAwarenessAntiSpoffProtection"), ("CHECKPOINT-MIB", "identityAwarenessSuccUserLoginKerberos"), ("CHECKPOINT-MIB", "identityAwarenessSuccMachLoginKerberos"), ("CHECKPOINT-MIB", "identityAwarenessSuccUserLoginPass"), ("CHECKPOINT-MIB", "identityAwarenessSuccUserLoginADQuery"), ("CHECKPOINT-MIB", "identityAwarenessSuccMachLoginADQuery"), ("CHECKPOINT-MIB", "identityAwarenessUnSuccUserLoginKerberos"), ("CHECKPOINT-MIB", "identityAwarenessUnSuccMachLoginKerberos"), ("CHECKPOINT-MIB", "identityAwarenessUnSuccUserLoginPass"), ("CHECKPOINT-MIB", "identityAwarenessSuccUserLDAP"), ("CHECKPOINT-MIB", "identityAwarenessUnSuccUserLDAP"), ("CHECKPOINT-MIB", "identityAwarenessDataTrans"), ("CHECKPOINT-MIB", "identityAwarenessDistributedEnvTableGwName"), ("CHECKPOINT-MIB", "identityAwarenessDistributedEnvTableDisconnections"), ("CHECKPOINT-MIB", "identityAwarenessDistributedEnvTableBruteForceAtt"), ("CHECKPOINT-MIB", "identityAwarenessDistributedEnvTableStatus"), ("CHECKPOINT-MIB", "identityAwarenessDistributedEnvTableIsLocal"), ("CHECKPOINT-MIB", "identityAwarenessADQueryStatusCurrStatus"), ("CHECKPOINT-MIB", "identityAwarenessADQueryStatusDomainName"), ("CHECKPOINT-MIB", "identityAwarenessADQueryStatusDomainIP"), ("CHECKPOINT-MIB", "identityAwarenessADQueryStatusEvents"), ("CHECKPOINT-MIB", "identityAwarenessRADIUSAccounting"), ("CHECKPOINT-MIB", "identityAwarenessIdentityCollectorActiveDirectory"), ("CHECKPOINT-MIB", "identityAwarenessIdentityCollectorCiscoISE"), ("CHECKPOINT-MIB", "identityAwarenessTerminalServer"), ("CHECKPOINT-MIB", "identityAwarenessRemoteAccess"), ("CHECKPOINT-MIB", "identityAwarenessIdentityWebAPI"), ("CHECKPOINT-MIB", "identityAwarenessStatus"), ("CHECKPOINT-MIB", "identityAwarenessStatusShortDesc"), ("CHECKPOINT-MIB", "identityAwarenessStatusLongDesc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    identityAwarenessProductsGroup = identityAwarenessProductsGroup.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessProductsGroup.setDescription('A collection of managed objects that provide information about Identity Awarness objects')
applicationControlProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 19)).setObjects(("CHECKPOINT-MIB", "applicationControlSubscriptionStatus"), ("CHECKPOINT-MIB", "applicationControlSubscriptionExpDate"), ("CHECKPOINT-MIB", "applicationControlSubscriptionDesc"), ("CHECKPOINT-MIB", "applicationControlUpdateStatus"), ("CHECKPOINT-MIB", "applicationControlUpdateDesc"), ("CHECKPOINT-MIB", "applicationControlNextUpdate"), ("CHECKPOINT-MIB", "applicationControlVersion"), ("CHECKPOINT-MIB", "applicationControlStatusCode"), ("CHECKPOINT-MIB", "applicationControlStatusShortDesc"), ("CHECKPOINT-MIB", "applicationControlStatusLongDesc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    applicationControlProductsGroup = applicationControlProductsGroup.setStatus('current')
if mibBuilder.loadTexts: applicationControlProductsGroup.setDescription('A collection of managed objects that provide information about APPI objects')
thresholdsProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 20)).setObjects(("CHECKPOINT-MIB", "thresholdPolicy"), ("CHECKPOINT-MIB", "thresholdState"), ("CHECKPOINT-MIB", "thresholdStateDesc"), ("CHECKPOINT-MIB", "thresholdEnabled"), ("CHECKPOINT-MIB", "thresholdActive"), ("CHECKPOINT-MIB", "thresholdEventsSinceStartup"), ("CHECKPOINT-MIB", "thresholdActiveEventName"), ("CHECKPOINT-MIB", "thresholdActiveEventCategory"), ("CHECKPOINT-MIB", "thresholdActiveEventSeverity"), ("CHECKPOINT-MIB", "thresholdActiveEventSubject"), ("CHECKPOINT-MIB", "thresholdActiveEventSubjectValue"), ("CHECKPOINT-MIB", "thresholdActiveEventActivationTime"), ("CHECKPOINT-MIB", "thresholdActiveEventState"), ("CHECKPOINT-MIB", "thresholdDestinationName"), ("CHECKPOINT-MIB", "thresholdDestinationType"), ("CHECKPOINT-MIB", "thresholdSendingState"), ("CHECKPOINT-MIB", "thresholdSendingStateDesc"), ("CHECKPOINT-MIB", "thresholdAlertCount"), ("CHECKPOINT-MIB", "thresholdName"), ("CHECKPOINT-MIB", "thresholdThresholdOID"), ("CHECKPOINT-MIB", "thresholdErrorDesc"), ("CHECKPOINT-MIB", "thresholdErrorTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    thresholdsProductsGroup = thresholdsProductsGroup.setStatus('current')
if mibBuilder.loadTexts: thresholdsProductsGroup.setDescription('A collection of managed objects that provide information about Thresholds objects')
advancedUrlFilteringProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 21)).setObjects(("CHECKPOINT-MIB", "advancedUrlFilteringSubscriptionStatus"), ("CHECKPOINT-MIB", "advancedUrlFilteringSubscriptionExpDate"), ("CHECKPOINT-MIB", "advancedUrlFilteringSubscriptionDesc"), ("CHECKPOINT-MIB", "advancedUrlFilteringUpdateStatus"), ("CHECKPOINT-MIB", "advancedUrlFilteringUpdateDesc"), ("CHECKPOINT-MIB", "advancedUrlFilteringNextUpdate"), ("CHECKPOINT-MIB", "advancedUrlFilteringVersion"), ("CHECKPOINT-MIB", "advancedUrlFilteringRADStatusCode"), ("CHECKPOINT-MIB", "advancedUrlFilteringRADStatusDesc"), ("CHECKPOINT-MIB", "advancedUrlFilteringStatusCode"), ("CHECKPOINT-MIB", "advancedUrlFilteringStatusShortDesc"), ("CHECKPOINT-MIB", "advancedUrlFilteringStatusLongDesc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    advancedUrlFilteringProductsGroup = advancedUrlFilteringProductsGroup.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringProductsGroup.setDescription('A collection of managed objects that provide information about Advanced URLF objects')
dlpProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 22)).setObjects(("CHECKPOINT-MIB", "exchangeAgentName"), ("CHECKPOINT-MIB", "exchangeAgentStatus"), ("CHECKPOINT-MIB", "exchangeAgentTotalMsg"), ("CHECKPOINT-MIB", "exchangeAgentTotalScannedMsg"), ("CHECKPOINT-MIB", "exchangeAgentDroppedMsg"), ("CHECKPOINT-MIB", "exchangeAgentUpTime"), ("CHECKPOINT-MIB", "exchangeAgentTimeSinceLastMsg"), ("CHECKPOINT-MIB", "exchangeAgentQueueLen"), ("CHECKPOINT-MIB", "exchangeQueueLen"), ("CHECKPOINT-MIB", "exchangeAgentAvgTimePerMsg"), ("CHECKPOINT-MIB", "exchangeAgentAvgTimePerScannedMsg"), ("CHECKPOINT-MIB", "exchangeAgentVersion"), ("CHECKPOINT-MIB", "exchangeCPUUsage"), ("CHECKPOINT-MIB", "exchangeMemoryUsage"), ("CHECKPOINT-MIB", "exchangeAgentPolicyTimeStamp"), ("CHECKPOINT-MIB", "dlpVersionString"), ("CHECKPOINT-MIB", "dlpLicenseStatus"), ("CHECKPOINT-MIB", "dlpLdapStatus"), ("CHECKPOINT-MIB", "dlpTotalScans"), ("CHECKPOINT-MIB", "dlpSMTPScans"), ("CHECKPOINT-MIB", "dlpSMTPIncidents"), ("CHECKPOINT-MIB", "dlpLastSMTPScan"), ("CHECKPOINT-MIB", "dlpNumQuarantined"), ("CHECKPOINT-MIB", "dlpQrntMsgsSize"), ("CHECKPOINT-MIB", "dlpSentEMails"), ("CHECKPOINT-MIB", "dlpExpiredEMails"), ("CHECKPOINT-MIB", "dlpDiscardEMails"), ("CHECKPOINT-MIB", "dlpPostfixQLen"), ("CHECKPOINT-MIB", "dlpPostfixErrors"), ("CHECKPOINT-MIB", "dlpPostfixQOldMsg"), ("CHECKPOINT-MIB", "dlpPostfixQMsgsSz"), ("CHECKPOINT-MIB", "dlpPostfixQFreeSp"), ("CHECKPOINT-MIB", "dlpQrntFreeSpace"), ("CHECKPOINT-MIB", "dlpQrntStatus"), ("CHECKPOINT-MIB", "dlpHttpScans"), ("CHECKPOINT-MIB", "dlpHttpIncidents"), ("CHECKPOINT-MIB", "dlpHttpLastScan"), ("CHECKPOINT-MIB", "dlpFtpScans"), ("CHECKPOINT-MIB", "dlpFtpIncidents"), ("CHECKPOINT-MIB", "dlpFtpLastScan"), ("CHECKPOINT-MIB", "dlpBypassStatus"), ("CHECKPOINT-MIB", "dlpUserCheckClnts"), ("CHECKPOINT-MIB", "dlpLastPolStatus"), ("CHECKPOINT-MIB", "dlpStatusCode"), ("CHECKPOINT-MIB", "dlpStatusShortDesc"), ("CHECKPOINT-MIB", "dlpStatusLongDesc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dlpProductsGroup = dlpProductsGroup.setStatus('current')
if mibBuilder.loadTexts: dlpProductsGroup.setDescription('A collection of managed objects that provide information about DLP objects')
amwProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 23)).setObjects(("CHECKPOINT-MIB", "antiBotSubscriptionStatus"), ("CHECKPOINT-MIB", "antiBotSubscriptionExpDate"), ("CHECKPOINT-MIB", "antiBotSubscriptionDesc"), ("CHECKPOINT-MIB", "antiVirusSubscriptionStatus"), ("CHECKPOINT-MIB", "antiVirusSubscriptionExpDate"), ("CHECKPOINT-MIB", "antiVirusSubscriptionDesc"), ("CHECKPOINT-MIB", "antiSpamSubscriptionStatus"), ("CHECKPOINT-MIB", "antiSpamSubscriptionExpDate"), ("CHECKPOINT-MIB", "antiSpamSubscriptionDesc"), ("CHECKPOINT-MIB", "amwABUpdateStatus"), ("CHECKPOINT-MIB", "amwABUpdateDesc"), ("CHECKPOINT-MIB", "amwABNextUpdate"), ("CHECKPOINT-MIB", "amwABVersion"), ("CHECKPOINT-MIB", "amwAVUpdateStatus"), ("CHECKPOINT-MIB", "amwAVUpdateDesc"), ("CHECKPOINT-MIB", "amwAVNextUpdate"), ("CHECKPOINT-MIB", "amwAVVersion"), ("CHECKPOINT-MIB", "amwStatusCode"), ("CHECKPOINT-MIB", "amwStatusShortDesc"), ("CHECKPOINT-MIB", "amwStatusLongDesc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    amwProductsGroup = amwProductsGroup.setStatus('current')
if mibBuilder.loadTexts: amwProductsGroup.setDescription('A collection of managed objects that provide information about AMW objects')
asgProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 24))
for _asgProductsGroup_obj in [[("CHECKPOINT-MIB", "asgProductName"), ("CHECKPOINT-MIB", "asgVer"), ("CHECKPOINT-MIB", "asgKernelVer"), ("CHECKPOINT-MIB", "asgBuildNum"), ("CHECKPOINT-MIB", "asgMaximumBladesPerChassis"), ("CHECKPOINT-MIB", "asgActiveBladesBitmask"), ("CHECKPOINT-MIB", "asgInstalledBladesBitmask"), ("CHECKPOINT-MIB", "asgInstalled"), ("CHECKPOINT-MIB", "asgSystemUp"), ("CHECKPOINT-MIB", "asgEvent"), ("CHECKPOINT-MIB", "asgStatusCode"), ("CHECKPOINT-MIB", "asgStatShort"), ("CHECKPOINT-MIB", "asgStatLong"), ("CHECKPOINT-MIB", "asgSecureXLStatusBitmask"), ("CHECKPOINT-MIB", "asgAttachedBladesBitmask"), ("CHECKPOINT-MIB", "asgThroughput"), ("CHECKPOINT-MIB", "asgConnectionRate"), ("CHECKPOINT-MIB", "asgPacketRate"), ("CHECKPOINT-MIB", "asgConcurrConn"), ("CHECKPOINT-MIB", "asgAccelConnectionRate"), ("CHECKPOINT-MIB", "asgNonAccelConnectionRate"), ("CHECKPOINT-MIB", "asgAccelConcurrConn"), ("CHECKPOINT-MIB", "asgNonAccelConcurrConn"), ("CHECKPOINT-MIB", "asgLoad"), ("CHECKPOINT-MIB", "asgAccelLoadAvg"), ("CHECKPOINT-MIB", "asgAccelLoadMin"), ("CHECKPOINT-MIB", "asgAccelLoadMax"), ("CHECKPOINT-MIB", "asgInstancesLoadAvg"), ("CHECKPOINT-MIB", "asgInstancesLoadMin"), ("CHECKPOINT-MIB", "asgInstancesLoadMax"), ("CHECKPOINT-MIB", "asgVpnThroughput"), ("CHECKPOINT-MIB", "asgVpnConn"), ("CHECKPOINT-MIB", "asgNatConnRate"), ("CHECKPOINT-MIB", "asgNatConn"), ("CHECKPOINT-MIB", "asgVsxCpu1MinAvg"), ("CHECKPOINT-MIB", "asgStatName"), ("CHECKPOINT-MIB", "asgAccelPath"), ("CHECKPOINT-MIB", "asgMediumPath"), ("CHECKPOINT-MIB", "asgFirewallPath"), ("CHECKPOINT-MIB", "asgDropped"), ("CHECKPOINT-MIB", "asgCountersBladeId"), ("CHECKPOINT-MIB", "asgCountersThroughput"), ("CHECKPOINT-MIB", "asgCountersConnRate"), ("CHECKPOINT-MIB", "asgCountersPacketRate"), ("CHECKPOINT-MIB", "asgCountersConcurrConnNum"), ("CHECKPOINT-MIB", "asgCountersAccelLoadAverage"), ("CHECKPOINT-MIB", "asgCountersAccelLoadMin"), ("CHECKPOINT-MIB", "asgCountersAccelLoadMax"), ("CHECKPOINT-MIB", "asgCountersInstanceLoadAverage"), ("CHECKPOINT-MIB", "asgCountersInstanceLoadMin"), ("CHECKPOINT-MIB", "asgCountersInstanceLoadMax"), ("CHECKPOINT-MIB", "asgPeakCriteria"), ("CHECKPOINT-MIB", "asgPeakValue"), ("CHECKPOINT-MIB", "asgPeakTimeStamp"), ("CHECKPOINT-MIB", "asgPeakUnits"), ("CHECKPOINT-MIB", "asgAcceptedBytesTotal"), ("CHECKPOINT-MIB", "asgDroppedBytesTotal"), ("CHECKPOINT-MIB", "asgRejectedTotal"), ("CHECKPOINT-MIB", "asgIPv6Throughput"), ("CHECKPOINT-MIB", "asgIPv6ConnectionRate"), ("CHECKPOINT-MIB", "asgIPv6PacketRate"), ("CHECKPOINT-MIB", "asgIPv6ConcurrConn"), ("CHECKPOINT-MIB", "asgIPv6AccelConnectionRate"), ("CHECKPOINT-MIB", "asgIPv6NonAccelConnectionRate"), ("CHECKPOINT-MIB", "asgIPv6AccelConcurrConn"), ("CHECKPOINT-MIB", "asgIPv6NonAccelConcurrConn"), ("CHECKPOINT-MIB", "asgIPv6Load"), ("CHECKPOINT-MIB", "asgIPv6AccelLoadAvg"), ("CHECKPOINT-MIB", "asgIPv6AccelLoadMin"), ("CHECKPOINT-MIB", "asgIPv6AccelLoadMax"), ("CHECKPOINT-MIB", "asgIPv6InstancesLoadAvg"), ("CHECKPOINT-MIB", "asgIPv6InstancesLoadMin"), ("CHECKPOINT-MIB", "asgIPv6InstancesLoadMax"), ("CHECKPOINT-MIB", "asgIPv6VpnThroughput"), ("CHECKPOINT-MIB", "asgIPv6VpnConn"), ("CHECKPOINT-MIB", "asgIPv6NatConnRate"), ("CHECKPOINT-MIB", "asgIPv6NatConn"), ("CHECKPOINT-MIB", "asgIPv6VsxCpu1MinAvg"), ("CHECKPOINT-MIB", "asgIPv6StatName"), ("CHECKPOINT-MIB", "asgIPv6AccelPath"), ("CHECKPOINT-MIB", "asgIPv6MediumPath"), ("CHECKPOINT-MIB", "asgIPv6FirewallPath"), ("CHECKPOINT-MIB", "asgIPv6Dropped"), ("CHECKPOINT-MIB", "asgIPv6CountersBladeId"), ("CHECKPOINT-MIB", "asgIPv6CountersThroughput"), ("CHECKPOINT-MIB", "asgIPv6CountersConnRate"), ("CHECKPOINT-MIB", "asgIPv6CountersPacketRate"), ("CHECKPOINT-MIB", "asgIPv6CountersConcurrConnNum"), ("CHECKPOINT-MIB", "asgIPv6CountersAccelLoadAverage"), ("CHECKPOINT-MIB", "asgIPv6CountersAccelLoadMin"), ("CHECKPOINT-MIB", "asgIPv6CountersAccelLoadMax"), ("CHECKPOINT-MIB", "asgIPv6CountersInstanceLoadAverage"), ("CHECKPOINT-MIB", "asgIPv6CountersInstanceLoadMin"), ("CHECKPOINT-MIB", "asgIPv6CountersInstanceLoadMax"), ("CHECKPOINT-MIB", "asgIPv6PeakCriteria"), ("CHECKPOINT-MIB", "asgIPv6PeakValue"), ("CHECKPOINT-MIB", "asgIPv6PeakTimeStamp"), ("CHECKPOINT-MIB", "asgIPv6PeakUnits"), ("CHECKPOINT-MIB", "asgIPv6AcceptedBytesTotalRate"), ("CHECKPOINT-MIB", "asgIPv6DroppedBytesTotalRate"), ("CHECKPOINT-MIB", "asgIPv6DroppedTotalRate"), ("CHECKPOINT-MIB", "asgIPv6RulebaseBladeId"), ("CHECKPOINT-MIB", "asgIPv6RulebaseDroppedTotal"), ("CHECKPOINT-MIB", "asgIPv6RulebaseAcceptedTotal"), ("CHECKPOINT-MIB", "asgIPv6RulebaseRejectedTotal"), ("CHECKPOINT-MIB", "asgIPv6RulebaseBytesDroppedTotal"), ("CHECKPOINT-MIB", "asgIPv6RulebaseBytesAcceptedTotal"), ("CHECKPOINT-MIB", "asgIPv6RulebaseBytesRejectedTotal"), ("CHECKPOINT-MIB", "asgSensorName"), ("CHECKPOINT-MIB", "asgSensorLocation"), ("CHECKPOINT-MIB", "asgSensorCurrValue"), ("CHECKPOINT-MIB", "asgSensorMinValue"), ("CHECKPOINT-MIB", "asgSensorMaxValue"), ("CHECKPOINT-MIB", "asgSensorThreshold"), ("CHECKPOINT-MIB", "asgSensorUnit"), ("CHECKPOINT-MIB", "asgSensorIdentity"), ("CHECKPOINT-MIB", "asgSensorStatus"), ("CHECKPOINT-MIB", "asgResourceName"), ("CHECKPOINT-MIB", "asgResourceLocation"), ("CHECKPOINT-MIB", "asgResourceCurrValue"), ("CHECKPOINT-MIB", "asgResourceThreshold"), ("CHECKPOINT-MIB", "asgResourceUnit"), ("CHECKPOINT-MIB", "asgResourceTotalVal"), ("CHECKPOINT-MIB", "asgResourceTitle"), ("CHECKPOINT-MIB", "asgProtocolName"), ("CHECKPOINT-MIB", "asgProtocolConns"), ("CHECKPOINT-MIB", "asgProtocolTotalPkts"), ("CHECKPOINT-MIB", "asgProtocolTotalBytes"), ("CHECKPOINT-MIB", "asgServiceName"), ("CHECKPOINT-MIB", "asgServiceConns"), ("CHECKPOINT-MIB", "asgServiceTotalPkts"), ("CHECKPOINT-MIB", "asgServiceTotalBytes"), ("CHECKPOINT-MIB", "asgNetIfName"), ("CHECKPOINT-MIB", "asgNetIfIPv4Addr"), ("CHECKPOINT-MIB", "asgNetIfIPv6Addr"), ("CHECKPOINT-MIB", "asgNetIfMACAddr"), ("CHECKPOINT-MIB", "asgNetIfInfo"), ("CHECKPOINT-MIB", "asgNetIfState"), ("CHECKPOINT-MIB", "asgNetIfSpeed"), ("CHECKPOINT-MIB", "asgNetIfMTU"), ("CHECKPOINT-MIB", "asgNetIfDuplex"), ("CHECKPOINT-MIB", "asgNetIfRx"), ("CHECKPOINT-MIB", "asgNetIfTx"), ("CHECKPOINT-MIB", "asgProblemName"), ("CHECKPOINT-MIB", "asgProblemStatus"), ("CHECKPOINT-MIB", "asgProblemPriority"), ("CHECKPOINT-MIB", "asgProblemVerified"), ("CHECKPOINT-MIB", "asgProblemDescr"), ("CHECKPOINT-MIB", "asgChassisMode"), ("CHECKPOINT-MIB", "asgChassisHAMode"), ("CHECKPOINT-MIB", "asgSyncToActive"), ("CHECKPOINT-MIB", "asgSyncToStandby"), ("CHECKPOINT-MIB", "asgSyncExceptionsID"), ("CHECKPOINT-MIB", "asgSyncExceptionsSource"), ("CHECKPOINT-MIB", "asgSyncExceptionsSourceMask"), ("CHECKPOINT-MIB", "asgSyncExceptionsDestination"), ("CHECKPOINT-MIB", "asgSyncExceptionsDestinationMask"), ("CHECKPOINT-MIB", "asgSyncExceptionsIpProtocol"), ("CHECKPOINT-MIB", "asgSyncExceptionsSync"), ("CHECKPOINT-MIB", "asgSyncExceptionsDelay"), ("CHECKPOINT-MIB", "asgChassisParamsID"), ("CHECKPOINT-MIB", "asgChassisParamsStatus"), ("CHECKPOINT-MIB", "asgChassisParamsGrade"), ("CHECKPOINT-MIB", "asgChassisParamsMaxGrade"), ("CHECKPOINT-MIB", "asgChassisParamsUniqueIP"), ("CHECKPOINT-MIB", "asgSGMID"), ("CHECKPOINT-MIB", "asgSGMStatus"), ("CHECKPOINT-MIB", "asgSGMProcess"), ("CHECKPOINT-MIB", "asgSGMPolicyTime"), ("CHECKPOINT-MIB", "asgFactorName"), ("CHECKPOINT-MIB", "asgFactorValue"), ("CHECKPOINT-MIB", "asgPriorityPortName"), ("CHECKPOINT-MIB", "asgPortPriority"), ("CHECKPOINT-MIB", "asgCoreRowTitle"), ("CHECKPOINT-MIB", "blade1"), ("CHECKPOINT-MIB", "blade2"), ("CHECKPOINT-MIB", "blade3"), ("CHECKPOINT-MIB", "blade4"), ("CHECKPOINT-MIB", "blade5"), ("CHECKPOINT-MIB", "blade6"), ("CHECKPOINT-MIB", "blade7"), ("CHECKPOINT-MIB", "blade8"), ("CHECKPOINT-MIB", "blade9"), ("CHECKPOINT-MIB", "blade10"), ("CHECKPOINT-MIB", "blade11"), ("CHECKPOINT-MIB", "blade12"), ("CHECKPOINT-MIB", "blade13"), ("CHECKPOINT-MIB", "blade14"), ("CHECKPOINT-MIB", "blade15"), ("CHECKPOINT-MIB", "blade16"), ("CHECKPOINT-MIB", "blade17"), ("CHECKPOINT-MIB", "blade18"), ("CHECKPOINT-MIB", "blade19"), ("CHECKPOINT-MIB", "blade20"), ("CHECKPOINT-MIB", "blade21"), ("CHECKPOINT-MIB", "blade22"), ("CHECKPOINT-MIB", "blade23"), ("CHECKPOINT-MIB", "blade24"), ("CHECKPOINT-MIB", "blade25"), ("CHECKPOINT-MIB", "blade26"), ("CHECKPOINT-MIB", "blade27"), ("CHECKPOINT-MIB", "blade28"), ("CHECKPOINT-MIB", "blade29"), ("CHECKPOINT-MIB", "blade30"), ("CHECKPOINT-MIB", "blade31"), ("CHECKPOINT-MIB", "blade32"), ("CHECKPOINT-MIB", "blade33"), ("CHECKPOINT-MIB", "blade34"), ("CHECKPOINT-MIB", "blade35"), ("CHECKPOINT-MIB", "blade36"), ("CHECKPOINT-MIB", "blade37"), ("CHECKPOINT-MIB", "blade38"), ("CHECKPOINT-MIB", "blade39"), ("CHECKPOINT-MIB", "blade40"), ("CHECKPOINT-MIB", "blade41"), ("CHECKPOINT-MIB", "blade42"), ("CHECKPOINT-MIB", "blade43"), ("CHECKPOINT-MIB", "blade44"), ("CHECKPOINT-MIB", "blade45"), ("CHECKPOINT-MIB", "blade46"), ("CHECKPOINT-MIB", "blade47"), ("CHECKPOINT-MIB", "blade48"), ("CHECKPOINT-MIB", "asgVslsSgmRatio"), ("CHECKPOINT-MIB", "asgVslsSystemPrimaryChassis"), ("CHECKPOINT-MIB", "asgVslsVsName"), ("CHECKPOINT-MIB", "asgVslsVsPrimaryChassis"), ("CHECKPOINT-MIB", "asgVslsVsActiveChassis"), ("CHECKPOINT-MIB", "asgVslsVsHealth"), ("CHECKPOINT-MIB", "asgVslsVsReason"), ("CHECKPOINT-MIB", "asgVslsVsChassis1InterfacesUp"), ("CHECKPOINT-MIB", "asgVslsVsChassis1InterfacesTotal"), ("CHECKPOINT-MIB", "asgVslsVsChassis1FwksUp"), ("CHECKPOINT-MIB", "asgVslsVsChassis1FwksTotal"), ("CHECKPOINT-MIB", "asgVslsVsChassis2InterfacesUp"), ("CHECKPOINT-MIB", "asgVslsVsChassis2InterfacesTotal"), ("CHECKPOINT-MIB", "asgVslsVsChassis2FwksUp"), ("CHECKPOINT-MIB", "asgVslsVsChassis2FwksTotal"), ("CHECKPOINT-MIB", "asgVslsVsChassis3InterfacesUp"), ("CHECKPOINT-MIB", "asgVslsVsChassis3InterfacesTotal"), ("CHECKPOINT-MIB", "asgVslsVsChassis3FwksUp"), ("CHECKPOINT-MIB", "asgVslsVsChassis3FwksTotal"), ("CHECKPOINT-MIB", "asgVslsVsChassis4InterfacesUp"), ("CHECKPOINT-MIB", "asgVslsVsChassis4InterfacesTotal"), ("CHECKPOINT-MIB", "asgVslsVsChassis4FwksUp"), ("CHECKPOINT-MIB", "asgVslsVsChassis4FwksTotal"), ("CHECKPOINT-MIB", "asgVSXConnBladeID"), ("CHECKPOINT-MIB", "asgVSXIPver"), ("CHECKPOINT-MIB", "asgVSXConcurrentConns"), ("CHECKPOINT-MIB", "asgVSXPeakConns"), ("CHECKPOINT-MIB", "asgVSXConnLimit"), ("CHECKPOINT-MIB", "asgVSXConnectionsNumberPerSystem"), ("CHECKPOINT-MIB", "asgVSXMemBladeid"), ("CHECKPOINT-MIB", "asgVSXOverallMem"), ("CHECKPOINT-MIB", "asgVSXCoreUtilBladeid"), ("CHECKPOINT-MIB", "asgVSXCoreUtilCPUID")], [("CHECKPOINT-MIB", "asgVSXCoreUtilUsage"), ("CHECKPOINT-MIB", "asgVSXRateBladeid"), ("CHECKPOINT-MIB", "asgVSXRateValue"), ("CHECKPOINT-MIB", "asgVSXPacketRatePerSystem"), ("CHECKPOINT-MIB", "asgVSXThroughputBladeid"), ("CHECKPOINT-MIB", "asgVSXThroughputValue"), ("CHECKPOINT-MIB", "asgVSXThroughputPerSystem"), ("CHECKPOINT-MIB", "asgVSXThroughputPerInterfaceBladeid"), ("CHECKPOINT-MIB", "asgVSXThroughputPerInterfaceName"), ("CHECKPOINT-MIB", "asgVSXThroughputPerInterfaceValue"), ("CHECKPOINT-MIB", "asgVSXPerSystemThroughputPerInterfaceName"), ("CHECKPOINT-MIB", "asgVSXPerSystemThroughputPerInterfaceValue"), ("CHECKPOINT-MIB", "asgVSXConnectionRateBladeid"), ("CHECKPOINT-MIB", "asgVSXConnectionRateValue"), ("CHECKPOINT-MIB", "asgVSXConnectionRatePerSystem"), ("CHECKPOINT-MIB", "asgVSXVirtualMemoryBladeid"), ("CHECKPOINT-MIB", "asgVSXVirtualMemoryValue"), ("CHECKPOINT-MIB", "asgDiagnosticTestName"), ("CHECKPOINT-MIB", "asgDiagnosticLastRun"), ("CHECKPOINT-MIB", "asgDiagnosticResult"), ("CHECKPOINT-MIB", "asgDiagnosticComment"), ("CHECKPOINT-MIB", "asgDiagSummary")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        asgProductsGroup = asgProductsGroup.setObjects(*_asgProductsGroup_obj)
    else:
        asgProductsGroup = asgProductsGroup.setObjects(*_asgProductsGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    asgProductsGroup = asgProductsGroup.setStatus('current')
if mibBuilder.loadTexts: asgProductsGroup.setDescription('A collection of managed objects that provide information about ASG objects')
teProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 25)).setObjects(("CHECKPOINT-MIB", "teSubscriptionStatus"), ("CHECKPOINT-MIB", "teCloudSubscriptionStatus"), ("CHECKPOINT-MIB", "teSubscriptionExpDate"), ("CHECKPOINT-MIB", "teSubscriptionDesc"), ("CHECKPOINT-MIB", "teUpdateStatus"), ("CHECKPOINT-MIB", "teUpdateDesc"), ("CHECKPOINT-MIB", "teStatusCode"), ("CHECKPOINT-MIB", "teStatusShortDesc"), ("CHECKPOINT-MIB", "teStatusLongDesc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    teProductsGroup = teProductsGroup.setStatus('current')
if mibBuilder.loadTexts: teProductsGroup.setDescription('A collection of managed objects that provide information about TE objects')
threatExtractionProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 26)).setObjects(("CHECKPOINT-MIB", "threatExtractionSubscriptionStatus"), ("CHECKPOINT-MIB", "threatExtractionSubscriptionExpDate"), ("CHECKPOINT-MIB", "threatExtractionSubscriptionDesc"), ("CHECKPOINT-MIB", "threatExtractionTotalScannedAttachments"), ("CHECKPOINT-MIB", "threatExtractionCleanedAttachments"), ("CHECKPOINT-MIB", "threatExtractionOriginalAttachmentsAccesses"), ("CHECKPOINT-MIB", "threatExtractionStatusCode"), ("CHECKPOINT-MIB", "threatExtractionStatusShortDesc"), ("CHECKPOINT-MIB", "threatExtractionStatusLongDesc"), ("CHECKPOINT-MIB", "threatExtractionEngineVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    threatExtractionProductsGroup = threatExtractionProductsGroup.setStatus('current')
if mibBuilder.loadTexts: threatExtractionProductsGroup.setDescription('A collection of managed objects that provide information about TEX objects')
sxlProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 27)).setObjects(("CHECKPOINT-MIB", "fwSXLStatus"), ("CHECKPOINT-MIB", "fwSXLConnsExisting"), ("CHECKPOINT-MIB", "fwSXLConnsAdded"), ("CHECKPOINT-MIB", "fwSXLConnsDeleted"), ("CHECKPOINT-MIB", "fwSXLAggrRxMbits"), ("CHECKPOINT-MIB", "fwSXLAggrTxMbits"), ("CHECKPOINT-MIB", "fwSXLAggrInboundKbitsPerSecond"), ("CHECKPOINT-MIB", "fwSXLAggrOutboundKbitsPerSecond"), ("CHECKPOINT-MIB", "fwSXLAggrInboundpacketsPerSecond"), ("CHECKPOINT-MIB", "fwSXLAggrOutboundpacketsPerSecond"), ("CHECKPOINT-MIB", "fwSXLAggrConnectionsPerSecond"), ("CHECKPOINT-MIB", "fwSXLAggrConcurrentConnections"), ("CHECKPOINT-MIB", "fwSXLAggrPpak2FwNotificationsSuccessful"), ("CHECKPOINT-MIB", "fwSXLAggrPpak2FwNotificationsFailure"), ("CHECKPOINT-MIB", "fwSXLAggrFw2PpakNotificationsSuccessful"), ("CHECKPOINT-MIB", "fwSXLAggrFw2PpakNotificationsFailure"), ("CHECKPOINT-MIB", "fwSXLAggrDropsTotPackets"), ("CHECKPOINT-MIB", "fwSXLAggrDropsPxlDecision"), ("CHECKPOINT-MIB", "fwSXLAggrDropsFragmentationError"), ("CHECKPOINT-MIB", "fwSXLAggrDropsF2FNotAllowed"), ("CHECKPOINT-MIB", "fwSXLAggrDropsHeavyLoadTcpViolation"), ("CHECKPOINT-MIB", "fwSXLAggrDropsCorruptPacket"), ("CHECKPOINT-MIB", "fwSXLAggrDropsHeavyLoadNewConnection"), ("CHECKPOINT-MIB", "fwSXLAggrDropsClearPacketOnVPN"), ("CHECKPOINT-MIB", "fwSXLAggrDropsEncryptionFailed"), ("CHECKPOINT-MIB", "fwSXLAggrDropsDropTemplate"), ("CHECKPOINT-MIB", "fwSXLAggrDropsDecryptionFailed"), ("CHECKPOINT-MIB", "fwSXLAggrDropsOutboundConnNotFound"), ("CHECKPOINT-MIB", "fwSXLAggrDropsInterfaceDown"), ("CHECKPOINT-MIB", "fwSXLAggrDropsClusterError"), ("CHECKPOINT-MIB", "fwSXLAggrDropsXmlError"), ("CHECKPOINT-MIB", "fwSXLAggrDropsAntiSpoofing"), ("CHECKPOINT-MIB", "fwSXLAggrDropsSanityError"), ("CHECKPOINT-MIB", "fwSXLAggrDropsQxlDecision"), ("CHECKPOINT-MIB", "fwSXLAggrDropsLoopPrevention"), ("CHECKPOINT-MIB", "fwSXLHostRxMbits"), ("CHECKPOINT-MIB", "fwSXLHostTxMbits"), ("CHECKPOINT-MIB", "fwSXLHostInboundKbitsPerSecond"), ("CHECKPOINT-MIB", "fwSXLHostOutboundKbitsPerSecond"), ("CHECKPOINT-MIB", "fwSXLHostInboundpacketsPerSecond"), ("CHECKPOINT-MIB", "fwSXLHostOutboundpacketsPerSecond"), ("CHECKPOINT-MIB", "fwSXLHostConnectionsPerSecond"), ("CHECKPOINT-MIB", "fwSXLHostConcurrentConnections"), ("CHECKPOINT-MIB", "fwSXLHostPpak2FwNotificationsSuccessful"), ("CHECKPOINT-MIB", "fwSXLHostPpak2FwNotificationsFailure"), ("CHECKPOINT-MIB", "fwSXLHostFw2PpakNotificationsSuccessful"), ("CHECKPOINT-MIB", "fwSXLHostFw2PpakNotificationsFailure"), ("CHECKPOINT-MIB", "fwSXLHostDropsTotPackets"), ("CHECKPOINT-MIB", "fwSXLHostDropsPxlDecision"), ("CHECKPOINT-MIB", "fwSXLHostDropsFragmentationError"), ("CHECKPOINT-MIB", "fwSXLHostDropsF2FNotAllowed"), ("CHECKPOINT-MIB", "fwSXLHostDropsHeavyLoadTcpViolation"), ("CHECKPOINT-MIB", "fwSXLHostDropsCorruptPacket"), ("CHECKPOINT-MIB", "fwSXLHostDropsHeavyLoadNewConnection"), ("CHECKPOINT-MIB", "fwSXLHostDropsClearPacketOnVPN"), ("CHECKPOINT-MIB", "fwSXLHostDropsEncryptionFailed"), ("CHECKPOINT-MIB", "fwSXLHostDropsDropTemplate"), ("CHECKPOINT-MIB", "fwSXLHostDropsDecryptionFailed"), ("CHECKPOINT-MIB", "fwSXLHostDropsOutboundConnNotFound"), ("CHECKPOINT-MIB", "fwSXLHostDropsInterfaceDown"), ("CHECKPOINT-MIB", "fwSXLHostDropsClusterError"), ("CHECKPOINT-MIB", "fwSXLHostDropsXmlError"), ("CHECKPOINT-MIB", "fwSXLHostDropsAntiSpoofing"), ("CHECKPOINT-MIB", "fwSXLHostDropsSanityError"), ("CHECKPOINT-MIB", "fwSXLHostDropsQxlDecision"), ("CHECKPOINT-MIB", "fwSXLHostDropsLoopPrevention"), ("CHECKPOINT-MIB", "fwSXLHostInterface0Name"), ("CHECKPOINT-MIB", "fwSXLHostInterface1Name"), ("CHECKPOINT-MIB", "fwSXLHostInterface2Name"), ("CHECKPOINT-MIB", "fwSXLHostInterface3Name"), ("CHECKPOINT-MIB", "fwSXLHostInterface4Name"), ("CHECKPOINT-MIB", "fwSXLHostInterface5Name"), ("CHECKPOINT-MIB", "fwSXLHostInterface6Name"), ("CHECKPOINT-MIB", "fwSXLHostInterface7Name"), ("CHECKPOINT-MIB", "fwSXLHostInterface0Speed"), ("CHECKPOINT-MIB", "fwSXLHostInterface1Speed"), ("CHECKPOINT-MIB", "fwSXLHostInterface2Speed"), ("CHECKPOINT-MIB", "fwSXLHostInterface3Speed"), ("CHECKPOINT-MIB", "fwSXLHostInterface4Speed"), ("CHECKPOINT-MIB", "fwSXLHostInterface5Speed"), ("CHECKPOINT-MIB", "fwSXLHostInterface6Speed"), ("CHECKPOINT-MIB", "fwSXLHostInterface7Speed"), ("CHECKPOINT-MIB", "fwSXLHostInterface0State"), ("CHECKPOINT-MIB", "fwSXLHostInterface1State"), ("CHECKPOINT-MIB", "fwSXLHostInterface2State"), ("CHECKPOINT-MIB", "fwSXLHostInterface3State"), ("CHECKPOINT-MIB", "fwSXLHostInterface4State"), ("CHECKPOINT-MIB", "fwSXLHostInterface5State"), ("CHECKPOINT-MIB", "fwSXLHostInterface6State"), ("CHECKPOINT-MIB", "fwSXLHostInterface7State"), ("CHECKPOINT-MIB", "fwSXLHostState"), ("CHECKPOINT-MIB", "fwSXLFalconsRxMbits"), ("CHECKPOINT-MIB", "fwSXLFalconsTxMbits"), ("CHECKPOINT-MIB", "fwSXLFalconsInboundKbitsPerSecond"), ("CHECKPOINT-MIB", "fwSXLFalconsOutboundKbitsPerSecond"), ("CHECKPOINT-MIB", "fwSXLFalconsInboundpacketsPerSecond"), ("CHECKPOINT-MIB", "fwSXLFalconsOutboundpacketsPerSecond"), ("CHECKPOINT-MIB", "fwSXLFalconsConnectionsPerSecond"), ("CHECKPOINT-MIB", "fwSXLFalconsConcurrentConnections"), ("CHECKPOINT-MIB", "fwSXLFalconsPpak2FwNotificationsSuccessful"), ("CHECKPOINT-MIB", "fwSXLFalconsPpak2FwNotificationsFailure"), ("CHECKPOINT-MIB", "fwSXLFalconsFw2PpakNotificationsSuccessful"), ("CHECKPOINT-MIB", "fwSXLFalconsFw2PpakNotificationsFailure"), ("CHECKPOINT-MIB", "fwSXLFalconsDropsTotPackets"), ("CHECKPOINT-MIB", "fwSXLFalconsDropsPxlDecision"), ("CHECKPOINT-MIB", "fwSXLFalconsDropsFragmentationError"), ("CHECKPOINT-MIB", "fwSXLFalconsDropsF2FNotAllowed"), ("CHECKPOINT-MIB", "fwSXLFalconsDropsHeavyLoadTcpViolation"), ("CHECKPOINT-MIB", "fwSXLFalconsDropsCorruptPacket"), ("CHECKPOINT-MIB", "fwSXLFalconsDropsHeavyLoadNewConnection"), ("CHECKPOINT-MIB", "fwSXLFalconsDropsClearPacketOnVPN"), ("CHECKPOINT-MIB", "fwSXLFalconsDropsEncryptionFailed"), ("CHECKPOINT-MIB", "fwSXLFalconsDropsDropTemplate"), ("CHECKPOINT-MIB", "fwSXLFalconsDropsDecryptionFailed"), ("CHECKPOINT-MIB", "fwSXLFalconsDropsOutboundConnNotFound"), ("CHECKPOINT-MIB", "fwSXLFalconsDropsInterfaceDown"), ("CHECKPOINT-MIB", "fwSXLFalconsDropsClusterError"), ("CHECKPOINT-MIB", "fwSXLFalconsDropsXmlError"), ("CHECKPOINT-MIB", "fwSXLFalconsDropsAntiSpoofing"), ("CHECKPOINT-MIB", "fwSXLFalconsDropsSanityError"), ("CHECKPOINT-MIB", "fwSXLFalconsDropsQxlDecision"), ("CHECKPOINT-MIB", "fwSXLFalconsDropsLoopPrevention"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface0Name"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface1Name"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface2Name"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface3Name"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface4Name"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface5Name"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface6Name"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface7Name"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface0Speed"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface1Speed"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface2Speed"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface3Speed"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface4Speed"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface5Speed"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface6Speed"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface7Speed"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface0State"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface1State"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface2State"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface3State"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface4State"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface5State"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface6State"), ("CHECKPOINT-MIB", "fwSXLFalconsInterface7State"), ("CHECKPOINT-MIB", "fwSXLFalconsSxlTotMemory"), ("CHECKPOINT-MIB", "fwSXLFalconsSxlUsedMemory"), ("CHECKPOINT-MIB", "fwSXLFalconsSxlFreeMemory"), ("CHECKPOINT-MIB", "fwSXLFalconsPacketPoolTotMemory"), ("CHECKPOINT-MIB", "fwSXLFalconsPacketPoolUsedMemory"), ("CHECKPOINT-MIB", "fwSXLFalconsPacketPoolFreeMemory"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu0Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu1Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu2Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu3Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu4Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu5Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu6Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu7Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu8Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu9Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu10Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu11Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu12Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu13Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu14Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu15Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu16Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu17Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu18Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu19Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu20Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu21Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu22Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu23Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu24Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu25Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu26Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu27Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu28Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu29Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu30Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsCpu31Usage"), ("CHECKPOINT-MIB", "fwSXLFalconsGeneralIndex"), ("CHECKPOINT-MIB", "fwSXLFalconsState"), ("CHECKPOINT-MIB", "fwSXLFalconsType"), ("CHECKPOINT-MIB", "fwSXLFalconsSerialNumber"), ("CHECKPOINT-MIB", "fwSXLFalconsSlotNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sxlProductsGroup = sxlProductsGroup.setStatus('current')
if mibBuilder.loadTexts: sxlProductsGroup.setDescription('A collection of managed objects that provide information about SXL objects')
vsecControllerProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 28)).setObjects(("CHECKPOINT-MIB", "vsecVsecStatus"), ("CHECKPOINT-MIB", "vsecNumberOfDisconnectedDataCenters"), ("CHECKPOINT-MIB", "vsecTotalNumberOfDataCenters"), ("CHECKPOINT-MIB", "vsecTotalNumberOfImportedDataCenterObjects"), ("CHECKPOINT-MIB", "vsecTotalNumberOfGwWithDataCenterObjects"), ("CHECKPOINT-MIB", "vsecDataCenterName"), ("CHECKPOINT-MIB", "vsecDataCenterType"), ("CHECKPOINT-MIB", "vsecConnectionStatus"), ("CHECKPOINT-MIB", "vsecNumberOfImportedObjects"), ("CHECKPOINT-MIB", "vsecNumberOfAutoUpdate"), ("CHECKPOINT-MIB", "vsecGatewayName"), ("CHECKPOINT-MIB", "vsecGatewayIP"), ("CHECKPOINT-MIB", "vsecGatewayVersion"), ("CHECKPOINT-MIB", "vsecGatewayUpdateSucceeded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsecControllerProductsGroup = vsecControllerProductsGroup.setStatus('current')
if mibBuilder.loadTexts: vsecControllerProductsGroup.setDescription('A collection of managed objects that provide information about VSec Controller objects')
ipsProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 29)).setObjects(("CHECKPOINT-MIB", "ipsStatus"), ("CHECKPOINT-MIB", "ipsUpdateStatus"), ("CHECKPOINT-MIB", "ipsUpdateDescription"), ("CHECKPOINT-MIB", "ipsNextUpdateDescription"), ("CHECKPOINT-MIB", "ipsDBVersion"), ("CHECKPOINT-MIB", "ipsState"), ("CHECKPOINT-MIB", "ipsStateShortDesc"), ("CHECKPOINT-MIB", "ipsStateLongDesc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsProductsGroup = ipsProductsGroup.setStatus('current')
if mibBuilder.loadTexts: ipsProductsGroup.setDescription('A collection of managed objects that provide information about IPS objects')
httpsInspectionProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 30)).setObjects(("CHECKPOINT-MIB", "httpsInspectionStatus"), ("CHECKPOINT-MIB", "httpsInspectionStatusDescription"), ("CHECKPOINT-MIB", "hsmEnabled"), ("CHECKPOINT-MIB", "hsmEnabledDescription"), ("CHECKPOINT-MIB", "hsmPartitionAccess"), ("CHECKPOINT-MIB", "hsmPartitionAccessDescription"), ("CHECKPOINT-MIB", "outboundStatus"), ("CHECKPOINT-MIB", "outboundStatusDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    httpsInspectionProductsGroup = httpsInspectionProductsGroup.setStatus('current')
if mibBuilder.loadTexts: httpsInspectionProductsGroup.setDescription('A collection of managed objects that provide information about HTTPS Inspection objects')
mhoProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 31)).setObjects(("CHECKPOINT-MIB", "mhoRxPortLabel"), ("CHECKPOINT-MIB", "mhoRxUcast"), ("CHECKPOINT-MIB", "mhoRxMcast"), ("CHECKPOINT-MIB", "mhoRxBcast"), ("CHECKPOINT-MIB", "mhoRxErr"), ("CHECKPOINT-MIB", "mhoRxFrames"), ("CHECKPOINT-MIB", "mhoRxBytes"), ("CHECKPOINT-MIB", "mhoRxFcsErr"), ("CHECKPOINT-MIB", "mhoTxPortLabel"), ("CHECKPOINT-MIB", "mhoTxUcast"), ("CHECKPOINT-MIB", "mhoTxMcast"), ("CHECKPOINT-MIB", "mhoTxBcast"), ("CHECKPOINT-MIB", "mhoTxErr"), ("CHECKPOINT-MIB", "mhoTxFrames"), ("CHECKPOINT-MIB", "mhoTxBytes"), ("CHECKPOINT-MIB", "mhoRxBuffPortLabel"), ("CHECKPOINT-MIB", "mhoRxBuff0Frames"), ("CHECKPOINT-MIB", "mhoRxBuff0Octet"), ("CHECKPOINT-MIB", "mhoRxBuff0Discard"), ("CHECKPOINT-MIB", "mhoRxBuff1Frames"), ("CHECKPOINT-MIB", "mhoRxBuff1Octet"), ("CHECKPOINT-MIB", "mhoRxBuff1Discard"), ("CHECKPOINT-MIB", "mhoRxBuff2Frames"), ("CHECKPOINT-MIB", "mhoRxBuff2Octet"), ("CHECKPOINT-MIB", "mhoRxBuff2Discard"), ("CHECKPOINT-MIB", "mhoRxBuff3Frames"), ("CHECKPOINT-MIB", "mhoRxBuff3Octet"), ("CHECKPOINT-MIB", "mhoRxBuff3Discard"), ("CHECKPOINT-MIB", "mhoRxBuff4Frames"), ("CHECKPOINT-MIB", "mhoRxBuff4Octet"), ("CHECKPOINT-MIB", "mhoRxBuff4Discard"), ("CHECKPOINT-MIB", "mhoRxBuff5Frames"), ("CHECKPOINT-MIB", "mhoRxBuff5Octet"), ("CHECKPOINT-MIB", "mhoRxBuff5Discard"), ("CHECKPOINT-MIB", "mhoRxBuff6Frames"), ("CHECKPOINT-MIB", "mhoRxBuff6Octet"), ("CHECKPOINT-MIB", "mhoRxBuff6Discard"), ("CHECKPOINT-MIB", "mhoRxBuff7Frames"), ("CHECKPOINT-MIB", "mhoRxBuff7Octet"), ("CHECKPOINT-MIB", "mhoRxBuff7Discard"), ("CHECKPOINT-MIB", "mhoStatePortLabel"), ("CHECKPOINT-MIB", "mhoStateLinkState"), ("CHECKPOINT-MIB", "mhoStateAdminState"), ("CHECKPOINT-MIB", "mhoStateSpeed"), ("CHECKPOINT-MIB", "mhoSummaryPortLabel"), ("CHECKPOINT-MIB", "mhoSummaryLinkState"), ("CHECKPOINT-MIB", "mhoSummaryAdminState"), ("CHECKPOINT-MIB", "mhoSummarySpeed"), ("CHECKPOINT-MIB", "mhoSummaryRxFcsErr"), ("CHECKPOINT-MIB", "mhoSummaryRxErr"), ("CHECKPOINT-MIB", "mhoSummaryRxFrames"), ("CHECKPOINT-MIB", "mhoSummaryRxBytes"), ("CHECKPOINT-MIB", "mhoSummaryTxErr"), ("CHECKPOINT-MIB", "mhoSummaryTxFrames"), ("CHECKPOINT-MIB", "mhoSummaryTxBytes"), ("CHECKPOINT-MIB", "mhoACLsUsed"), ("CHECKPOINT-MIB", "mhoACLsTotal"), ("CHECKPOINT-MIB", "mhoACLsAvailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mhoProductsGroup = mhoProductsGroup.setStatus('current')
if mibBuilder.loadTexts: mhoProductsGroup.setDescription('A collection of managed objects that provide information about MHO objects')
zphProductsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2620, 2, 2, 32)).setObjects(("CHECKPOINT-MIB", "zphStatusCode"), ("CHECKPOINT-MIB", "zphStatusShortDesc"), ("CHECKPOINT-MIB", "zphStatusLongDesc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zphProductsGroup = zphProductsGroup.setStatus('current')
if mibBuilder.loadTexts: zphProductsGroup.setDescription('A collection of managed objects that provide information about Zero Phishing objects')
fwNotifications = NotificationGroup((1, 3, 6, 1, 4, 1, 2620, 2, 3, 1)).setObjects(("CHECKPOINT-MIB", "fwTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fwNotifications = fwNotifications.setStatus('current')
if mibBuilder.loadTexts: fwNotifications.setDescription('A collection of managed notifications that provide information about FW notifications')
mhoPortsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1))
mhoAcls = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 55, 2))
mhoRxTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 1), )
if mibBuilder.loadTexts: mhoRxTable.setStatus('current')
if mibBuilder.loadTexts: mhoRxTable.setDescription('A table showing ports RX counters.')
mhoTxTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 2), )
if mibBuilder.loadTexts: mhoTxTable.setStatus('current')
if mibBuilder.loadTexts: mhoTxTable.setDescription('A table showing ports TX counters.')
mhoRxBuffTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3), )
if mibBuilder.loadTexts: mhoRxBuffTable.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuffTable.setDescription('A table showing ports RX buffers counters.')
mhoStateTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 4), )
if mibBuilder.loadTexts: mhoStateTable.setStatus('current')
if mibBuilder.loadTexts: mhoStateTable.setDescription('A table showing ports states.')
mhoSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 5), )
if mibBuilder.loadTexts: mhoSummaryTable.setStatus('current')
if mibBuilder.loadTexts: mhoSummaryTable.setDescription('A table showing essential ports data.')
mhoRxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "mhoRxPortIndex"))
if mibBuilder.loadTexts: mhoRxEntry.setStatus('current')
if mibBuilder.loadTexts: mhoRxEntry.setDescription('MHO RX Entry')
mhoTxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 2, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "mhoTxPortIndex"))
if mibBuilder.loadTexts: mhoTxEntry.setStatus('current')
if mibBuilder.loadTexts: mhoTxEntry.setDescription('MHO TX Entry')
mhoRxBuffEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "mhoRxBuffPortIndex"))
if mibBuilder.loadTexts: mhoRxBuffEntry.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuffEntry.setDescription('MHO RX Buffer Entry')
mhoStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 4, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "mhoStatePortIndex"))
if mibBuilder.loadTexts: mhoStateEntry.setStatus('current')
if mibBuilder.loadTexts: mhoStateEntry.setDescription('MHO State Entry')
mhoSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 5, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "mhoSummaryPortIndex"))
if mibBuilder.loadTexts: mhoSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: mhoSummaryEntry.setDescription('MHO Summary Entry')
mhoRxPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mhoRxPortIndex.setStatus('current')
if mibBuilder.loadTexts: mhoRxPortIndex.setDescription('The number of the logical port.')
mhoRxPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxPortLabel.setStatus('current')
if mibBuilder.loadTexts: mhoRxPortLabel.setDescription('The number of the physical port.')
mhoRxUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxUcast.setStatus('current')
if mibBuilder.loadTexts: mhoRxUcast.setDescription('The number of unicast frames received.')
mhoRxMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxMcast.setStatus('current')
if mibBuilder.loadTexts: mhoRxMcast.setDescription('The number of multicast frames received.')
mhoRxBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBcast.setStatus('current')
if mibBuilder.loadTexts: mhoRxBcast.setDescription('The number of broadcast frames received.')
mhoRxErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxErr.setStatus('current')
if mibBuilder.loadTexts: mhoRxErr.setDescription('The number of ingress packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
mhoRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxFrames.setStatus('current')
if mibBuilder.loadTexts: mhoRxFrames.setDescription('The number of received frames.')
mhoRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBytes.setStatus('current')
if mibBuilder.loadTexts: mhoRxBytes.setDescription('The volume of received data in bytes.')
mhoRxFcsErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxFcsErr.setStatus('current')
if mibBuilder.loadTexts: mhoRxFcsErr.setDescription('The number of ingress packages that are not an integral number of octets in length and do not pass the FCS check.')
mhoTxPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mhoTxPortIndex.setStatus('current')
if mibBuilder.loadTexts: mhoTxPortIndex.setDescription('The number of the logical port.')
mhoTxPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoTxPortLabel.setStatus('current')
if mibBuilder.loadTexts: mhoTxPortLabel.setDescription('The number of the physical port.')
mhoTxUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoTxUcast.setStatus('current')
if mibBuilder.loadTexts: mhoTxUcast.setDescription('The number of unicast frames transmitted.')
mhoTxMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoTxMcast.setStatus('current')
if mibBuilder.loadTexts: mhoTxMcast.setDescription('The number of multicast frames transmitted.')
mhoTxBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoTxBcast.setStatus('current')
if mibBuilder.loadTexts: mhoTxBcast.setDescription('The number of broadcast frames transmitted.')
mhoTxErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoTxErr.setStatus('current')
if mibBuilder.loadTexts: mhoTxErr.setDescription('The number of error packets intended to be sent.')
mhoTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoTxFrames.setStatus('current')
if mibBuilder.loadTexts: mhoTxFrames.setDescription('The number of transmitted frames.')
mhoTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoTxBytes.setStatus('current')
if mibBuilder.loadTexts: mhoTxBytes.setDescription('The volume of transmitted data in bytes.')
mhoRxBuffPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mhoRxBuffPortIndex.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuffPortIndex.setDescription('The number of the logical port.')
mhoRxBuffPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuffPortLabel.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuffPortLabel.setDescription('The number of the physical port.')
mhoRxBuff0Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff0Frames.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff0Frames.setDescription('The number of received frames which are mapped into PG0. PG is the priority group used on the ingress packets.')
mhoRxBuff0Octet = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff0Octet.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff0Octet.setDescription('The volume of received data in bytes which are mapped into PG0. PG is the priority group used on the ingress packets.')
mhoRxBuff0Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff0Discard.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff0Discard.setDescription('The number of ingress packets mapped to PG0 (PG is the priority group used on the ingress packets) which were chosen to be discarded even though no errors had been detected to prevent them being delivered to higher-layer protocol.')
mhoRxBuff1Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff1Frames.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff1Frames.setDescription('The number of received frames which are mapped into PG1. PG is the priority group used on the ingress packets.')
mhoRxBuff1Octet = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff1Octet.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff1Octet.setDescription('The volume of received data in bytes which are mapped into PG1. PG is the priority group used on the ingress packets.')
mhoRxBuff1Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff1Discard.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff1Discard.setDescription('The number of ingress packets mapped to PG1 (PG is the priority group used on the ingress packets) which were chosen to be discarded even though no errors had been detected to prevent them being delivered to higher-layer protocol.')
mhoRxBuff2Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff2Frames.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff2Frames.setDescription('The number of received frames which are mapped into PG2. PG is the priority group used on the ingress packets.')
mhoRxBuff2Octet = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff2Octet.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff2Octet.setDescription('The volume of received data in bytes which are mapped into PG2. PG is the priority group used on the ingress packets.')
mhoRxBuff2Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff2Discard.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff2Discard.setDescription('The number of ingress packets mapped to PG2 (PG is the priority group used on the ingress packets) which were chosen to be discarded even though no errors had been detected to prevent them being delivered to higher-layer protocol.')
mhoRxBuff3Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff3Frames.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff3Frames.setDescription('The number of received frames which are mapped into PG3. PG is the priority group used on the ingress packets.')
mhoRxBuff3Octet = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff3Octet.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff3Octet.setDescription('The volume of received data in bytes which are mapped into PG3. PG is the priority group used on the ingress packets.')
mhoRxBuff3Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff3Discard.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff3Discard.setDescription('The number of ingress packets mapped to PG3 (PG is the priority group used on the ingress packets) which were chosen to be discarded even though no errors had been detected to prevent them being delivered to higher-layer protocol.')
mhoRxBuff4Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff4Frames.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff4Frames.setDescription('The number of received frames which are mapped into PG4. PG is the priority group used on the ingress packets.')
mhoRxBuff4Octet = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff4Octet.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff4Octet.setDescription('The volume of received data in bytes which are mapped into PG4. PG is the priority group used on the ingress packets.')
mhoRxBuff4Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff4Discard.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff4Discard.setDescription('The number of ingress packets mapped to PG4 (PG is the priority group used on the ingress packets) which were chosen to be discarded even though no errors had been detected to prevent them being delivered to higher-layer protocol.')
mhoRxBuff5Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff5Frames.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff5Frames.setDescription('The number of received frames which are mapped into PG5. PG is the priority group used on the ingress packets.')
mhoRxBuff5Octet = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff5Octet.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff5Octet.setDescription('The volume of received data in bytes which are mapped into PG5. PG is the priority group used on the ingress packets.')
mhoRxBuff5Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff5Discard.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff5Discard.setDescription('The number of ingress packets mapped to PG5 (PG is the priority group used on the ingress packets) which were chosen to be discarded even though no errors had been detected to prevent them being delivered to higher-layer protocol.')
mhoRxBuff6Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff6Frames.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff6Frames.setDescription('The number of received frames which are mapped into PG6. PG is the priority group used on the ingress packets.')
mhoRxBuff6Octet = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff6Octet.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff6Octet.setDescription('The volume of received data in bytes which are mapped into PG6. PG is the priority group used on the ingress packets.')
mhoRxBuff6Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff6Discard.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff6Discard.setDescription('The number of ingress packets mapped to PG6 (PG is the priority group used on the ingress packets) which were chosen to be discarded even though no errors had been detected to prevent them being delivered to higher-layer protocol.')
mhoRxBuff7Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff7Frames.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff7Frames.setDescription('The number of received frames which are mapped into PG7. PG is the priority group used on the ingress packets.')
mhoRxBuff7Octet = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff7Octet.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff7Octet.setDescription('The volume of received data in bytes which are mapped into PG7. PG is the priority group used on the ingress packets.')
mhoRxBuff7Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoRxBuff7Discard.setStatus('current')
if mibBuilder.loadTexts: mhoRxBuff7Discard.setDescription('The number of ingress packets mapped to PG7 (PG is the priority group used on the ingress packets) which were chosen to be discarded even though no errors had been detected to prevent them being delivered to higher-layer protocol.')
mhoStatePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mhoStatePortIndex.setStatus('current')
if mibBuilder.loadTexts: mhoStatePortIndex.setDescription('The number of the logical port.')
mhoStatePortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoStatePortLabel.setStatus('current')
if mibBuilder.loadTexts: mhoStatePortLabel.setDescription('The number of the physical port.')
mhoStateLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoStateLinkState.setStatus('current')
if mibBuilder.loadTexts: mhoStateLinkState.setDescription('The port link-state.')
mhoStateAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoStateAdminState.setStatus('current')
if mibBuilder.loadTexts: mhoStateAdminState.setDescription('The port admin-state.')
mhoStateSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoStateSpeed.setStatus('current')
if mibBuilder.loadTexts: mhoStateSpeed.setDescription('The physical port speed supported.')
mhoSummaryPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mhoSummaryPortIndex.setStatus('current')
if mibBuilder.loadTexts: mhoSummaryPortIndex.setDescription('The number of the logical port.')
mhoSummaryPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoSummaryPortLabel.setStatus('current')
if mibBuilder.loadTexts: mhoSummaryPortLabel.setDescription('The number of the physical port.')
mhoSummaryLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoSummaryLinkState.setStatus('current')
if mibBuilder.loadTexts: mhoSummaryLinkState.setDescription('The port link-state.')
mhoSummaryAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoSummaryAdminState.setStatus('current')
if mibBuilder.loadTexts: mhoSummaryAdminState.setDescription('The port admin-state.')
mhoSummarySpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoSummarySpeed.setStatus('current')
if mibBuilder.loadTexts: mhoSummarySpeed.setDescription('The physical port speed supported.')
mhoSummaryRxFcsErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoSummaryRxFcsErr.setStatus('current')
if mibBuilder.loadTexts: mhoSummaryRxFcsErr.setDescription('The number of ingress packages that are not an integral number of octets in length and do not pass the FCS check.')
mhoSummaryRxErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoSummaryRxErr.setStatus('current')
if mibBuilder.loadTexts: mhoSummaryRxErr.setDescription('The number of ingress packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
mhoSummaryRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoSummaryRxFrames.setStatus('current')
if mibBuilder.loadTexts: mhoSummaryRxFrames.setDescription('The number of received frames.')
mhoSummaryRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoSummaryRxBytes.setStatus('current')
if mibBuilder.loadTexts: mhoSummaryRxBytes.setDescription('The volume of received data in bytes.')
mhoSummaryTxErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoSummaryTxErr.setStatus('current')
if mibBuilder.loadTexts: mhoSummaryTxErr.setDescription('The number of error packets intended to be sent.')
mhoSummaryTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoSummaryTxFrames.setStatus('current')
if mibBuilder.loadTexts: mhoSummaryTxFrames.setDescription('The number of transmitted frames.')
mhoSummaryTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 55, 1, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoSummaryTxBytes.setStatus('current')
if mibBuilder.loadTexts: mhoSummaryTxBytes.setDescription('The volume of transmitted data in bytes.')
mhoACLsUsed = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 55, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoACLsUsed.setStatus('current')
if mibBuilder.loadTexts: mhoACLsUsed.setDescription('Number of used ACL rule memory entries.')
mhoACLsTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 55, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoACLsTotal.setStatus('current')
if mibBuilder.loadTexts: mhoACLsTotal.setDescription('Orchestrator total amount of ACL rule memory entries.')
mhoACLsAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 55, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mhoACLsAvailable.setStatus('current')
if mibBuilder.loadTexts: mhoACLsAvailable.setDescription('Number of free/unused ACL rule memory entries.')
ipsStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 53, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsStatus.setStatus('current')
if mibBuilder.loadTexts: ipsStatus.setDescription('ips status (Running/Stopped)')
ipsUpdateStatusInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 53, 11))
ipsUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 53, 11, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: ipsUpdateStatus.setDescription('ips update status')
ipsUpdateDescription = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 53, 11, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUpdateDescription.setStatus('current')
if mibBuilder.loadTexts: ipsUpdateDescription.setDescription('IPS update description')
ipsNextUpdateDescription = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 53, 11, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsNextUpdateDescription.setStatus('current')
if mibBuilder.loadTexts: ipsNextUpdateDescription.setDescription('IPS next update description')
ipsDBVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 53, 11, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsDBVersion.setStatus('current')
if mibBuilder.loadTexts: ipsDBVersion.setDescription('IPS DB version')
ipsState = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 53, 101), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsState.setStatus('current')
if mibBuilder.loadTexts: ipsState.setDescription('ips state (0 - ok, 1 - warning, 2 - problem)')
ipsStateShortDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 53, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsStateShortDesc.setStatus('current')
if mibBuilder.loadTexts: ipsStateShortDesc.setDescription('IPS short state description')
ipsStateLongDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 53, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsStateLongDesc.setStatus('current')
if mibBuilder.loadTexts: ipsStateLongDesc.setDescription('IPS long state description')
httpsInspectionStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 54, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpsInspectionStatus.setStatus('current')
if mibBuilder.loadTexts: httpsInspectionStatus.setDescription('HTTPS inspection status (On/Off)')
httpsInspectionStatusDescription = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 54, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpsInspectionStatusDescription.setStatus('current')
if mibBuilder.loadTexts: httpsInspectionStatusDescription.setDescription('HTTPS inspection status description')
hsmStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 54, 3))
hsmEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 54, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsmEnabled.setStatus('current')
if mibBuilder.loadTexts: hsmEnabled.setDescription('HSM enabled (Enabled/Disabled)')
hsmEnabledDescription = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 54, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsmEnabledDescription.setStatus('current')
if mibBuilder.loadTexts: hsmEnabledDescription.setDescription('HSM enabled description')
hsmPartitionAccess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 54, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsmPartitionAccess.setStatus('current')
if mibBuilder.loadTexts: hsmPartitionAccess.setDescription('HSM partition access (Accessible/Not Accessible)')
hsmPartitionAccessDescription = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 54, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsmPartitionAccessDescription.setStatus('current')
if mibBuilder.loadTexts: hsmPartitionAccessDescription.setDescription('HSM partition access description')
outboundStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 54, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outboundStatus.setStatus('current')
if mibBuilder.loadTexts: outboundStatus.setDescription('HTTPS inspection outbound status (HSM on/HSM off/HSM error)')
outboundStatusDescription = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 54, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outboundStatusDescription.setStatus('current')
if mibBuilder.loadTexts: outboundStatusDescription.setDescription('HTTPS inspection outbound status description')
vsecVsecStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 52, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsecVsecStatus.setStatus('current')
if mibBuilder.loadTexts: vsecVsecStatus.setDescription('vSEC Controller status')
vsecNumberOfDisconnectedDataCenters = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 52, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsecNumberOfDisconnectedDataCenters.setStatus('current')
if mibBuilder.loadTexts: vsecNumberOfDisconnectedDataCenters.setDescription('Number of disconnected data centers')
vsecTotalNumberOfDataCenters = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 52, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsecTotalNumberOfDataCenters.setStatus('current')
if mibBuilder.loadTexts: vsecTotalNumberOfDataCenters.setDescription('Number of data centers')
vsecTotalNumberOfImportedDataCenterObjects = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 52, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsecTotalNumberOfImportedDataCenterObjects.setStatus('current')
if mibBuilder.loadTexts: vsecTotalNumberOfImportedDataCenterObjects.setDescription('Number of imported data center objects')
vsecTotalNumberOfGwWithDataCenterObjects = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 52, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsecTotalNumberOfGwWithDataCenterObjects.setStatus('current')
if mibBuilder.loadTexts: vsecTotalNumberOfGwWithDataCenterObjects.setDescription('Number of gateways enforcing data center objects')
vsecDataCenterTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 52, 6), )
if mibBuilder.loadTexts: vsecDataCenterTable.setStatus('current')
if mibBuilder.loadTexts: vsecDataCenterTable.setDescription('Data Centers')
vsecDataCenterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 52, 6, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "vsecDataCenterIndex"))
if mibBuilder.loadTexts: vsecDataCenterEntry.setStatus('current')
if mibBuilder.loadTexts: vsecDataCenterEntry.setDescription('No description available')
vsecDataCenterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 52, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vsecDataCenterIndex.setStatus('current')
if mibBuilder.loadTexts: vsecDataCenterIndex.setDescription('No description available')
vsecDataCenterName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 52, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsecDataCenterName.setStatus('current')
if mibBuilder.loadTexts: vsecDataCenterName.setDescription('Name')
vsecDataCenterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 52, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsecDataCenterType.setStatus('current')
if mibBuilder.loadTexts: vsecDataCenterType.setDescription('Type')
vsecConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 52, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsecConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: vsecConnectionStatus.setDescription('ConnectionStatus')
vsecNumberOfImportedObjects = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 52, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsecNumberOfImportedObjects.setStatus('current')
if mibBuilder.loadTexts: vsecNumberOfImportedObjects.setDescription('Imported data center objects')
vsecNumberOfAutoUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 52, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsecNumberOfAutoUpdate.setStatus('current')
if mibBuilder.loadTexts: vsecNumberOfAutoUpdate.setDescription('vSEC Controller update')
vsecEnforcingGatewaysTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 52, 7), )
if mibBuilder.loadTexts: vsecEnforcingGatewaysTable.setStatus('current')
if mibBuilder.loadTexts: vsecEnforcingGatewaysTable.setDescription('Gateways Enforcing Data Center Objects')
vsecEnforcingGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 52, 7, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "vsecGatewayIndex"))
if mibBuilder.loadTexts: vsecEnforcingGatewayEntry.setStatus('current')
if mibBuilder.loadTexts: vsecEnforcingGatewayEntry.setDescription('No description available')
vsecGatewayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 52, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vsecGatewayIndex.setStatus('current')
if mibBuilder.loadTexts: vsecGatewayIndex.setDescription('No description available')
vsecGatewayName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 52, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsecGatewayName.setStatus('current')
if mibBuilder.loadTexts: vsecGatewayName.setDescription('Name')
vsecGatewayIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 52, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsecGatewayIP.setStatus('current')
if mibBuilder.loadTexts: vsecGatewayIP.setDescription('IP')
vsecGatewayVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 52, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsecGatewayVersion.setStatus('current')
if mibBuilder.loadTexts: vsecGatewayVersion.setDescription('Version')
vsecGatewayUpdateSucceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 52, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsecGatewayUpdateSucceeded.setStatus('current')
if mibBuilder.loadTexts: vsecGatewayUpdateSucceeded.setDescription('Update Status')
vsxVsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 16, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxVsSupported.setStatus('current')
if mibBuilder.loadTexts: vsxVsSupported.setDescription('The maximum number of supported Virtual Systems')
vsxVsConfigured = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 16, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxVsConfigured.setStatus('current')
if mibBuilder.loadTexts: vsxVsConfigured.setDescription('The number of configured Virtual Systems')
vsxVsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 16, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxVsInstalled.setStatus('current')
if mibBuilder.loadTexts: vsxVsInstalled.setDescription('The number of installed Virtual Systems')
vsxVsidConfigured = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 16, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxVsidConfigured.setStatus('current')
if mibBuilder.loadTexts: vsxVsidConfigured.setDescription('The number of configured VSIDs')
vsxAllVSsConnsSum = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 16, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxAllVSsConnsSum.setStatus('current')
if mibBuilder.loadTexts: vsxAllVSsConnsSum.setDescription('The sum of current connections on all VSs')
vsxStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22))
vsxStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1), )
if mibBuilder.loadTexts: vsxStatusTable.setStatus('current')
if mibBuilder.loadTexts: vsxStatusTable.setDescription('No description available')
vsxStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "vsxStatusVSId"))
if mibBuilder.loadTexts: vsxStatusEntry.setStatus('current')
if mibBuilder.loadTexts: vsxStatusEntry.setDescription('No description available')
vsxStatusVSId = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250)))
if mibBuilder.loadTexts: vsxStatusVSId.setStatus('current')
if mibBuilder.loadTexts: vsxStatusVSId.setDescription('Virtual System ID')
vsxStatusVRId = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusVRId.setStatus('current')
if mibBuilder.loadTexts: vsxStatusVRId.setDescription('Operating System ID (VSID)')
vsxStatusVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusVsName.setStatus('current')
if mibBuilder.loadTexts: vsxStatusVsName.setDescription("Virtual System's name")
vsxStatusVsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusVsType.setStatus('current')
if mibBuilder.loadTexts: vsxStatusVsType.setDescription("Virtual System's type")
vsxStatusMainIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusMainIP.setStatus('current')
if mibBuilder.loadTexts: vsxStatusMainIP.setDescription("Virtual System's Main IP")
vsxStatusPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusPolicyName.setStatus('current')
if mibBuilder.loadTexts: vsxStatusPolicyName.setDescription('Security Policy name')
vsxStatusVsPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusVsPolicyType.setStatus('current')
if mibBuilder.loadTexts: vsxStatusVsPolicyType.setDescription('Security Policy type')
vsxStatusSicTrustState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusSicTrustState.setStatus('current')
if mibBuilder.loadTexts: vsxStatusSicTrustState.setDescription('SIC status')
vsxStatusHAState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusHAState.setStatus('current')
if mibBuilder.loadTexts: vsxStatusHAState.setDescription('High Availability Status')
vsxStatusVSWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusVSWeight.setStatus('current')
if mibBuilder.loadTexts: vsxStatusVSWeight.setDescription('Virtual System Resource Control Weight')
vsxStatusMemoryUsageTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 3), )
if mibBuilder.loadTexts: vsxStatusMemoryUsageTable.setStatus('current')
if mibBuilder.loadTexts: vsxStatusMemoryUsageTable.setDescription('VS memory usage table per-VS.')
vsxStatusMemoryUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 3, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "vsxStatusMemoryUsageVSId"))
if mibBuilder.loadTexts: vsxStatusMemoryUsageEntry.setStatus('current')
if mibBuilder.loadTexts: vsxStatusMemoryUsageEntry.setDescription('No description available')
vsxStatusMemoryUsageVSId = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250)))
if mibBuilder.loadTexts: vsxStatusMemoryUsageVSId.setStatus('current')
if mibBuilder.loadTexts: vsxStatusMemoryUsageVSId.setDescription('Virtual System ID')
vsxStatusMemoryUsageVSName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusMemoryUsageVSName.setStatus('current')
if mibBuilder.loadTexts: vsxStatusMemoryUsageVSName.setDescription('Virtual-System name')
vsxStatusMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: vsxStatusMemoryUsage.setDescription('VS memory usage (Bytes)')
vsxStatusMemoryUsageVSMaxMem = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusMemoryUsageVSMaxMem.setStatus('current')
if mibBuilder.loadTexts: vsxStatusMemoryUsageVSMaxMem.setDescription('Maximum memory possible for allocation to the vs (Bytes)')
vsxStatusInterfacesTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 5), )
if mibBuilder.loadTexts: vsxStatusInterfacesTable.setStatus('current')
if mibBuilder.loadTexts: vsxStatusInterfacesTable.setDescription('Interfaces table per VS')
vsxStatusInterfacesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 5, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "vsxStatusInterfaceVSID"))
if mibBuilder.loadTexts: vsxStatusInterfacesEntry.setStatus('current')
if mibBuilder.loadTexts: vsxStatusInterfacesEntry.setDescription('No description available')
vsxStatusInterfaceVSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250)))
if mibBuilder.loadTexts: vsxStatusInterfaceVSID.setStatus('current')
if mibBuilder.loadTexts: vsxStatusInterfaceVSID.setDescription('Virtual-System ID')
vsxStatusInterfaceVSName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusInterfaceVSName.setStatus('current')
if mibBuilder.loadTexts: vsxStatusInterfaceVSName.setDescription('Virtual-System name')
vsxStatusInterfaceIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusInterfaceIfName.setStatus('current')
if mibBuilder.loadTexts: vsxStatusInterfaceIfName.setDescription('Interface name')
vsxStatusInterfaceAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusInterfaceAdminState.setStatus('current')
if mibBuilder.loadTexts: vsxStatusInterfaceAdminState.setDescription('The desired state of the interface.')
vsxStatusInterfaceOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusInterfaceOperState.setStatus('current')
if mibBuilder.loadTexts: vsxStatusInterfaceOperState.setDescription('The current operational state of the interface.')
vsxStatusInterfaceRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusInterfaceRxBytes.setStatus('current')
if mibBuilder.loadTexts: vsxStatusInterfaceRxBytes.setDescription('RX Bytes')
vsxStatusInterfaceTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusInterfaceTxBytes.setStatus('current')
if mibBuilder.loadTexts: vsxStatusInterfaceTxBytes.setDescription('TX Bytes')
vsxStatusInterfaceOverallBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusInterfaceOverallBytes.setStatus('current')
if mibBuilder.loadTexts: vsxStatusInterfaceOverallBytes.setDescription('Overall Bytes')
vsxStatusInterfaceRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusInterfaceRxErrors.setStatus('current')
if mibBuilder.loadTexts: vsxStatusInterfaceRxErrors.setDescription('RX Erros')
vsxStatusInterfaceTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusInterfaceTxErrors.setStatus('current')
if mibBuilder.loadTexts: vsxStatusInterfaceTxErrors.setDescription('TX Erros')
vsxCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23))
vsxCountersTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1), )
if mibBuilder.loadTexts: vsxCountersTable.setStatus('current')
if mibBuilder.loadTexts: vsxCountersTable.setDescription('No description available')
vsxCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "vsxStatusVSId"))
if mibBuilder.loadTexts: vsxCountersEntry.setStatus('current')
if mibBuilder.loadTexts: vsxCountersEntry.setDescription('No description available')
vsxCountersVSId = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersVSId.setStatus('current')
if mibBuilder.loadTexts: vsxCountersVSId.setDescription('Virtual System ID')
vsxCountersConnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersConnNum.setStatus('current')
if mibBuilder.loadTexts: vsxCountersConnNum.setDescription('Number of active connections')
vsxCountersConnPeakNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersConnPeakNum.setStatus('current')
if mibBuilder.loadTexts: vsxCountersConnPeakNum.setDescription('Peak number of active connections')
vsxCountersConnTableLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersConnTableLimit.setStatus('current')
if mibBuilder.loadTexts: vsxCountersConnTableLimit.setDescription('Connection table limit')
vsxCountersPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersPackets.setStatus('current')
if mibBuilder.loadTexts: vsxCountersPackets.setDescription('Total number of packets processed')
vsxS2SIpsecTunnels = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 16, 31))
vsxS2SIpsecTunnelsTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 16, 31, 1), )
if mibBuilder.loadTexts: vsxS2SIpsecTunnelsTable.setStatus('current')
if mibBuilder.loadTexts: vsxS2SIpsecTunnelsTable.setDescription('OID to present the number of S2S Ipsec tunnels for each VS')
vsxS2SIpsecTunnelsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 16, 31, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "vsxStatusVSId"))
if mibBuilder.loadTexts: vsxS2SIpsecTunnelsEntry.setStatus('current')
if mibBuilder.loadTexts: vsxS2SIpsecTunnelsEntry.setDescription('No description available')
vsxTunnelsVSidName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 31, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxTunnelsVSidName.setStatus('current')
if mibBuilder.loadTexts: vsxTunnelsVSidName.setDescription('VS id and name')
vsxS2SIpsecTunnelsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 31, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxS2SIpsecTunnelsCounter.setStatus('current')
if mibBuilder.loadTexts: vsxS2SIpsecTunnelsCounter.setDescription('counter for all active S2S tunnels, accumulating  ipv4 ipv6, ike1 & ike2')
vsxVSStateChanged = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 16, 32))
vsxVSStateChangedTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 16, 32, 1), )
if mibBuilder.loadTexts: vsxVSStateChangedTable.setStatus('current')
if mibBuilder.loadTexts: vsxVSStateChangedTable.setDescription('OID to detect the change of a VS state when it occurs. The value will be 0 if no change occurred in the defined time window, otherwise the value will be 1.')
vsxVSStateChangedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 16, 32, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "vsxStatusVSId"))
if mibBuilder.loadTexts: vsxVSStateChangedEntry.setStatus('current')
if mibBuilder.loadTexts: vsxVSStateChangedEntry.setDescription('No description available')
vsxVSStateChangedVSIdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 32, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxVSStateChangedVSIdName.setStatus('current')
if mibBuilder.loadTexts: vsxVSStateChangedVSIdName.setDescription('VS id and name')
vsxVSStateChangedChangeOccurred = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 32, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxVSStateChangedChangeOccurred.setStatus('current')
if mibBuilder.loadTexts: vsxVSStateChangedChangeOccurred.setDescription('Indicator whether the VS changed its state in the time window')
vsxCountersDroppedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersDroppedTotal.setStatus('current')
if mibBuilder.loadTexts: vsxCountersDroppedTotal.setDescription('Total number of dropped packets')
vsxCountersAcceptedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersAcceptedTotal.setStatus('current')
if mibBuilder.loadTexts: vsxCountersAcceptedTotal.setDescription('Total number of accepted packets')
vsxCountersRejectedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersRejectedTotal.setStatus('current')
if mibBuilder.loadTexts: vsxCountersRejectedTotal.setDescription('Total number of rejected packets')
vsxCountersBytesAcceptedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersBytesAcceptedTotal.setStatus('current')
if mibBuilder.loadTexts: vsxCountersBytesAcceptedTotal.setDescription('Total number of accepted bytes')
vsxCountersBytesDroppedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersBytesDroppedTotal.setStatus('current')
if mibBuilder.loadTexts: vsxCountersBytesDroppedTotal.setDescription('Total number of dropped bytes')
vsxCountersBytesRejectedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersBytesRejectedTotal.setStatus('current')
if mibBuilder.loadTexts: vsxCountersBytesRejectedTotal.setDescription('Total number of rejected bytes')
vsxCountersLoggedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersLoggedTotal.setStatus('current')
if mibBuilder.loadTexts: vsxCountersLoggedTotal.setDescription('Total number of logs sent')
vsxCountersIsDataValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersIsDataValid.setStatus('current')
if mibBuilder.loadTexts: vsxCountersIsDataValid.setDescription('Data validity indicator \n\t\t\t\t\t invalid(0)\n\t\t\t\t\t valid(1)')
vsxCountersDropTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 2), )
if mibBuilder.loadTexts: vsxCountersDropTable.setStatus('current')
if mibBuilder.loadTexts: vsxCountersDropTable.setDescription('No description available')
vsxCountersDropEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 2, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "vsxStatusVSId"))
if mibBuilder.loadTexts: vsxCountersDropEntry.setStatus('current')
if mibBuilder.loadTexts: vsxCountersDropEntry.setDescription('No description available')
vsxCountersDropVSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersDropVSID.setStatus('current')
if mibBuilder.loadTexts: vsxCountersDropVSID.setDescription('Virtual System ID')
vsxCountersDropVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersDropVsName.setStatus('current')
if mibBuilder.loadTexts: vsxCountersDropVsName.setDescription("Virtual System's name")
vsxCountersDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersDropCount.setStatus('current')
if mibBuilder.loadTexts: vsxCountersDropCount.setDescription("Virtual System's drops due to instance fully utilized")
raUsersTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 500, 9000), )
if mibBuilder.loadTexts: raUsersTable.setStatus('current')
if mibBuilder.loadTexts: raUsersTable.setDescription('A table containing Remote Access users tunnel information.')
raUsersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "raInternalIpAddr"))
if mibBuilder.loadTexts: raUsersEntry.setStatus('current')
if mibBuilder.loadTexts: raUsersEntry.setDescription('No description available')
raInternalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 1), IpAddress())
if mibBuilder.loadTexts: raInternalIpAddr.setStatus('current')
if mibBuilder.loadTexts: raInternalIpAddr.setDescription('No description available')
raExternalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raExternalIpAddr.setStatus('current')
if mibBuilder.loadTexts: raExternalIpAddr.setDescription('No description available')
raUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raUserState.setStatus('current')
if mibBuilder.loadTexts: raUserState.setDescription('No description available')
raOfficeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raOfficeMode.setStatus('current')
if mibBuilder.loadTexts: raOfficeMode.setDescription('No description available')
raIkeOverTCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raIkeOverTCP.setStatus('current')
if mibBuilder.loadTexts: raIkeOverTCP.setDescription('No description available')
raUseUDPEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raUseUDPEncap.setStatus('current')
if mibBuilder.loadTexts: raUseUDPEncap.setDescription('No description available')
raVisitorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raVisitorMode.setStatus('current')
if mibBuilder.loadTexts: raVisitorMode.setDescription('No description available')
raRouteTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raRouteTraffic.setStatus('current')
if mibBuilder.loadTexts: raRouteTraffic.setDescription('No description available')
raCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raCommunity.setStatus('current')
if mibBuilder.loadTexts: raCommunity.setDescription('No description available')
raTunnelEncAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 7, 9, 129, 130))).clone(namedValues=NamedValues(("espDES", 1), ("esp3DES", 2), ("espCAST", 5), ("esp3IDEA", 7), ("espNULL", 9), ("espAES128", 129), ("espAES256", 130)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raTunnelEncAlgorithm.setStatus('current')
if mibBuilder.loadTexts: raTunnelEncAlgorithm.setDescription('No description available')
raTunnelAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 129, 130))).clone(namedValues=NamedValues(("presharedKey", 1), ("dssSignature", 2), ("rsaSignature", 3), ("rsaEncryption", 4), ("revRsaEncryption", 5), ("xauth", 129), ("crack", 130)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raTunnelAuthMethod.setStatus('current')
if mibBuilder.loadTexts: raTunnelAuthMethod.setDescription('No description available')
raLogonTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raLogonTime.setStatus('current')
if mibBuilder.loadTexts: raLogonTime.setDescription('No description available')
tunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 500, 9002), )
if mibBuilder.loadTexts: tunnelTable.setStatus('current')
if mibBuilder.loadTexts: tunnelTable.setDescription('A table containing VPN tunnel information.')
tunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "tunnelPeerIpAddr"))
if mibBuilder.loadTexts: tunnelEntry.setStatus('current')
if mibBuilder.loadTexts: tunnelEntry.setDescription('No description available')
tunnelPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1, 1), IpAddress())
if mibBuilder.loadTexts: tunnelPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: tunnelPeerIpAddr.setDescription('No description available')
tunnelPeerObjName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelPeerObjName.setStatus('current')
if mibBuilder.loadTexts: tunnelPeerObjName.setDescription('No description available')
tunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 129, 130, 131, 132))).clone(namedValues=NamedValues(("active", 3), ("destroy", 4), ("idle", 129), ("phase1", 130), ("down", 131), ("init", 132)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelState.setStatus('current')
if mibBuilder.loadTexts: tunnelState.setDescription('No description available')
tunnelCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelCommunity.setStatus('current')
if mibBuilder.loadTexts: tunnelCommunity.setDescription('No description available')
tunnelNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelNextHop.setStatus('current')
if mibBuilder.loadTexts: tunnelNextHop.setDescription('No description available')
tunnelInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelInterface.setStatus('current')
if mibBuilder.loadTexts: tunnelInterface.setDescription('No description available')
tunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: tunnelSourceIpAddr.setDescription('No description available')
tunnelLinkPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("primary", 0), ("backup", 1), ("onDemand", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelLinkPriority.setStatus('current')
if mibBuilder.loadTexts: tunnelLinkPriority.setDescription('No description available')
tunnelProbState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("alive", 1), ("dead", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelProbState.setStatus('current')
if mibBuilder.loadTexts: tunnelProbState.setDescription('No description available')
tunnelPeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("regular", 1), ("daip", 2), ("robo", 3), ("lsv", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelPeerType.setStatus('current')
if mibBuilder.loadTexts: tunnelPeerType.setDescription('No description available')
tunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regular", 1), ("permanent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelType.setStatus('current')
if mibBuilder.loadTexts: tunnelType.setDescription('No description available')
permanentTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 500, 9003), )
if mibBuilder.loadTexts: permanentTunnelTable.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelTable.setDescription('A table containing VPN permanent tunnel information.')
permanentTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 500, 9003, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "permanentTunnelPeerIpAddr"))
if mibBuilder.loadTexts: permanentTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelEntry.setDescription('No description available')
permanentTunnelPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9003, 1, 1), IpAddress())
if mibBuilder.loadTexts: permanentTunnelPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelPeerIpAddr.setDescription('No description available')
permanentTunnelPeerObjName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9003, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: permanentTunnelPeerObjName.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelPeerObjName.setDescription('No description available')
permanentTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9003, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 129, 130, 131, 132))).clone(namedValues=NamedValues(("active", 3), ("destroy", 4), ("idle", 129), ("phase1", 130), ("down", 131), ("init", 132)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: permanentTunnelState.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelState.setDescription('No description available')
permanentTunnelCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9003, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: permanentTunnelCommunity.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelCommunity.setDescription('No description available')
permanentTunnelNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9003, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: permanentTunnelNextHop.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelNextHop.setDescription('No description available')
permanentTunnelInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9003, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: permanentTunnelInterface.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelInterface.setDescription('No description available')
permanentTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9003, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: permanentTunnelSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelSourceIpAddr.setDescription('No description available')
permanentTunnelLinkPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9003, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("primary", 0), ("backup", 1), ("onDemand", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: permanentTunnelLinkPriority.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelLinkPriority.setDescription('No description available')
permanentTunnelProbState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9003, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("alive", 1), ("dead", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: permanentTunnelProbState.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelProbState.setDescription('No description available')
permanentTunnelPeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9003, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("regular", 1), ("daip", 2), ("robo", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: permanentTunnelPeerType.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelPeerType.setDescription('No description available')
fwPolicyStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25))
fwPerfStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26))
fwHmem = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1))
fwKmem = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2))
fwInspect = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 3))
fwCookies = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 4))
fwChains = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 5))
fwFragments = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 6))
fwUfp = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 8))
fwSS = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9))
fwConnectionsStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 11))
fwHmem64 = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12))
fwSS_http = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1)).setLabel("fwSS-http")
fwSS_ftp = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2)).setLabel("fwSS-ftp")
fwSS_telnet = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3)).setLabel("fwSS-telnet")
fwSS_rlogin = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4)).setLabel("fwSS-rlogin")
fwSS_ufp = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 5)).setLabel("fwSS-ufp")
fwSS_smtp = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6)).setLabel("fwSS-smtp")
fwSS_POP3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7)).setLabel("fwSS-POP3")
fwSS_av_total = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10)).setLabel("fwSS-av-total")
fwModuleState = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwModuleState.setStatus('current')
if mibBuilder.loadTexts: fwModuleState.setDescription('The state of the fw module')
fwFilterName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwFilterName.setStatus('current')
if mibBuilder.loadTexts: fwFilterName.setDescription('The name of the loaded filter')
fwFilterDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwFilterDate.setStatus('current')
if mibBuilder.loadTexts: fwFilterDate.setDescription('Install time')
fwAccepted = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAccepted.setStatus('current')
if mibBuilder.loadTexts: fwAccepted.setDescription('The number of accepted packets.')
fwRejected = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwRejected.setStatus('current')
if mibBuilder.loadTexts: fwRejected.setDescription('The number of rejected  packets.')
fwDropped = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwDropped.setStatus('current')
if mibBuilder.loadTexts: fwDropped.setDescription('The number of dropped packets.')
fwLogged = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLogged.setStatus('current')
if mibBuilder.loadTexts: fwLogged.setDescription('The number of logged packets.')
fwMajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwMajor.setStatus('current')
if mibBuilder.loadTexts: fwMajor.setDescription('Major version')
fwMinor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwMinor.setStatus('current')
if mibBuilder.loadTexts: fwMinor.setDescription('Minor version')
fwProduct = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwProduct.setStatus('current')
if mibBuilder.loadTexts: fwProduct.setDescription('Product name')
fwEvent = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwEvent.setStatus('current')
if mibBuilder.loadTexts: fwEvent.setDescription('A string that contains the last SNMP Trap the Security Gateway sent via fw')
fwSICTrustState = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSICTrustState.setStatus('current')
if mibBuilder.loadTexts: fwSICTrustState.setDescription('SIC Trust State : Possible values include:\n                                            Not initialized 0 \n                                            Initialized but not established 1\n                                            Established 2\n                                            Error 3\n                                            Unknown 4')
fwTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 0))
fwTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 1, 0, 1)).setObjects(("CHECKPOINT-MIB", "fwEvent"))
if mibBuilder.loadTexts: fwTrap.setStatus('current')
if mibBuilder.loadTexts: fwTrap.setDescription('FireWall-1 SNMP trap')
fwProdName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwProdName.setStatus('current')
if mibBuilder.loadTexts: fwProdName.setDescription('Product name')
fwVerMajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwVerMajor.setStatus('current')
if mibBuilder.loadTexts: fwVerMajor.setDescription('Major version')
fwVerMinor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwVerMinor.setStatus('current')
if mibBuilder.loadTexts: fwVerMinor.setDescription('Minor version')
fwKernelBuild = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKernelBuild.setStatus('current')
if mibBuilder.loadTexts: fwKernelBuild.setDescription('Kernel build num')
fwPolicyName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwPolicyName.setStatus('current')
if mibBuilder.loadTexts: fwPolicyName.setDescription('Policy Name')
fwInstallTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwInstallTime.setStatus('current')
if mibBuilder.loadTexts: fwInstallTime.setDescription('Policy install time')
fwNumConn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNumConn.setStatus('current')
if mibBuilder.loadTexts: fwNumConn.setDescription('Number of connections')
fwPeakNumConn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwPeakNumConn.setStatus('current')
if mibBuilder.loadTexts: fwPeakNumConn.setDescription('Peak number of connections')
fwIspTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 7), )
if mibBuilder.loadTexts: fwIspTable.setStatus('current')
if mibBuilder.loadTexts: fwIspTable.setDescription('No description available')
fwIspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 7, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwIspIndex"))
if mibBuilder.loadTexts: fwIspEntry.setStatus('current')
if mibBuilder.loadTexts: fwIspEntry.setDescription('No description available')
fwIspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fwIspIndex.setStatus('current')
if mibBuilder.loadTexts: fwIspIndex.setDescription('Index')
fwIspName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwIspName.setStatus('current')
if mibBuilder.loadTexts: fwIspName.setDescription('Name')
fwIspStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwIspStatus.setStatus('current')
if mibBuilder.loadTexts: fwIspStatus.setDescription('Status')
fwIspRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwIspRole.setStatus('current')
if mibBuilder.loadTexts: fwIspRole.setDescription('Role')
unknown = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknown.setStatus('current')
if mibBuilder.loadTexts: unknown.setDescription('No description available')
fwIfTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5), )
if mibBuilder.loadTexts: fwIfTable.setStatus('current')
if mibBuilder.loadTexts: fwIfTable.setDescription('No description available')
fwConnTableLimit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwConnTableLimit.setStatus('current')
if mibBuilder.loadTexts: fwConnTableLimit.setDescription('Connection table limit')
fwIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwIfIndex"))
if mibBuilder.loadTexts: fwIfEntry.setStatus('current')
if mibBuilder.loadTexts: fwIfEntry.setDescription('No description available')
fwIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fwIfIndex.setStatus('current')
if mibBuilder.loadTexts: fwIfIndex.setDescription('No description available')
fwIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwIfName.setStatus('current')
if mibBuilder.loadTexts: fwIfName.setDescription('No description available')
fwAcceptPcktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptPcktsIn.setStatus('current')
if mibBuilder.loadTexts: fwAcceptPcktsIn.setDescription('No description available')
fwAcceptPcktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptPcktsOut.setStatus('current')
if mibBuilder.loadTexts: fwAcceptPcktsOut.setDescription('No description available')
fwAcceptBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptBytesIn.setStatus('current')
if mibBuilder.loadTexts: fwAcceptBytesIn.setDescription('No description available')
fwAcceptBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptBytesOut.setStatus('current')
if mibBuilder.loadTexts: fwAcceptBytesOut.setDescription('No description available')
fwDropPcktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwDropPcktsIn.setStatus('current')
if mibBuilder.loadTexts: fwDropPcktsIn.setDescription('No description available')
fwDropPcktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwDropPcktsOut.setStatus('current')
if mibBuilder.loadTexts: fwDropPcktsOut.setDescription('No description available')
fwRejectPcktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwRejectPcktsIn.setStatus('current')
if mibBuilder.loadTexts: fwRejectPcktsIn.setDescription('No description available')
fwRejectPcktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwRejectPcktsOut.setStatus('current')
if mibBuilder.loadTexts: fwRejectPcktsOut.setDescription('No description available')
fwLogIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLogIn.setStatus('current')
if mibBuilder.loadTexts: fwLogIn.setDescription('No description available')
fwLogOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLogOut.setStatus('current')
if mibBuilder.loadTexts: fwLogOut.setDescription('No description available')
fwAcceptedTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptedTotal.setStatus('current')
if mibBuilder.loadTexts: fwAcceptedTotal.setDescription('Total number of accepted packets')
fwDroppedTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwDroppedTotal.setStatus('current')
if mibBuilder.loadTexts: fwDroppedTotal.setDescription('Total number of dropped packets')
fwRejectedTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwRejectedTotal.setStatus('current')
if mibBuilder.loadTexts: fwRejectedTotal.setDescription('Total number of rejected packets')
fwLoggedTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLoggedTotal.setStatus('current')
if mibBuilder.loadTexts: fwLoggedTotal.setDescription('Total number of logs sent')
fwAcceptedBytesTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptedBytesTotal.setStatus('current')
if mibBuilder.loadTexts: fwAcceptedBytesTotal.setDescription('Total number of accepted bytes')
fwDroppedBytesTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwDroppedBytesTotal.setStatus('current')
if mibBuilder.loadTexts: fwDroppedBytesTotal.setDescription('Total number of dropped bytes')
fwRejectedBytesTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwRejectedBytesTotal.setStatus('current')
if mibBuilder.loadTexts: fwRejectedBytesTotal.setDescription('Total number of rejected bytes')
fwAcceptedBytesRates = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptedBytesRates.setStatus('current')
if mibBuilder.loadTexts: fwAcceptedBytesRates.setDescription('Accepted bytes rates')
fwAcceptedPcktsRates = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptedPcktsRates.setStatus('current')
if mibBuilder.loadTexts: fwAcceptedPcktsRates.setDescription('Accepted packets rates')
fwConnsRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwConnsRate.setStatus('current')
if mibBuilder.loadTexts: fwConnsRate.setDescription('Connection Rates')
fwIf64Table = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25), )
if mibBuilder.loadTexts: fwIf64Table.setStatus('current')
if mibBuilder.loadTexts: fwIf64Table.setDescription('No description available')
fwFullyUtilizedDrops = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwFullyUtilizedDrops.setStatus('current')
if mibBuilder.loadTexts: fwFullyUtilizedDrops.setDescription('Total number of dropped packets due to instance being fully utilized')
fwIf64Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwIfIndex64"))
if mibBuilder.loadTexts: fwIf64Entry.setStatus('current')
if mibBuilder.loadTexts: fwIf64Entry.setDescription('No description available')
fwIfIndex64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fwIfIndex64.setStatus('current')
if mibBuilder.loadTexts: fwIfIndex64.setDescription('No description available')
fwIfName64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwIfName64.setStatus('current')
if mibBuilder.loadTexts: fwIfName64.setDescription('No description available')
fwAcceptPcktsIn64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptPcktsIn64.setStatus('current')
if mibBuilder.loadTexts: fwAcceptPcktsIn64.setDescription('No description available')
fwAcceptPcktsOut64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptPcktsOut64.setStatus('current')
if mibBuilder.loadTexts: fwAcceptPcktsOut64.setDescription('No description available')
fwAcceptBytesIn64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptBytesIn64.setStatus('current')
if mibBuilder.loadTexts: fwAcceptBytesIn64.setDescription('No description available')
fwAcceptBytesOut64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptBytesOut64.setStatus('current')
if mibBuilder.loadTexts: fwAcceptBytesOut64.setDescription('No description available')
fwDropPcktsIn64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwDropPcktsIn64.setStatus('current')
if mibBuilder.loadTexts: fwDropPcktsIn64.setDescription('No description available')
fwDropPcktsOut64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwDropPcktsOut64.setStatus('current')
if mibBuilder.loadTexts: fwDropPcktsOut64.setDescription('No description available')
fwRejectPcktsIn64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwRejectPcktsIn64.setStatus('current')
if mibBuilder.loadTexts: fwRejectPcktsIn64.setDescription('No description available')
fwRejectPcktsOut64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwRejectPcktsOut64.setStatus('current')
if mibBuilder.loadTexts: fwRejectPcktsOut64.setDescription('No description available')
fwLogIn64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLogIn64.setStatus('current')
if mibBuilder.loadTexts: fwLogIn64.setDescription('No description available')
fwLogOut64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLogOut64.setStatus('current')
if mibBuilder.loadTexts: fwLogOut64.setDescription('No description available')
fwHmem_block_size = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 1), Unsigned32()).setLabel("fwHmem-block-size").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_block_size.setStatus('current')
if mibBuilder.loadTexts: fwHmem_block_size.setDescription('hmem - block size')
fwHmem_requested_bytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 2), Unsigned32()).setLabel("fwHmem-requested-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_requested_bytes.setStatus('current')
if mibBuilder.loadTexts: fwHmem_requested_bytes.setDescription('hmem - requested bytes')
fwHmem_initial_allocated_bytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 3), Unsigned32()).setLabel("fwHmem-initial-allocated-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_initial_allocated_bytes.setStatus('current')
if mibBuilder.loadTexts: fwHmem_initial_allocated_bytes.setDescription('hmem - initial allocated bytes')
fwHmem_initial_allocated_blocks = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 4), Unsigned32()).setLabel("fwHmem-initial-allocated-blocks").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_initial_allocated_blocks.setStatus('current')
if mibBuilder.loadTexts: fwHmem_initial_allocated_blocks.setDescription('hmem - initial allocated blocks')
fwHmem_initial_allocated_pools = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 5), Unsigned32()).setLabel("fwHmem-initial-allocated-pools").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_initial_allocated_pools.setStatus('current')
if mibBuilder.loadTexts: fwHmem_initial_allocated_pools.setDescription('hmem - initial allocated pools')
fwHmem_current_allocated_bytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 6), Unsigned32()).setLabel("fwHmem-current-allocated-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_current_allocated_bytes.setStatus('current')
if mibBuilder.loadTexts: fwHmem_current_allocated_bytes.setDescription('hmem - current allocated bytes')
fwHmem_current_allocated_blocks = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 7), Unsigned32()).setLabel("fwHmem-current-allocated-blocks").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_current_allocated_blocks.setStatus('current')
if mibBuilder.loadTexts: fwHmem_current_allocated_blocks.setDescription('hmem - current allocated blocks')
fwHmem_current_allocated_pools = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 8), Unsigned32()).setLabel("fwHmem-current-allocated-pools").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_current_allocated_pools.setStatus('current')
if mibBuilder.loadTexts: fwHmem_current_allocated_pools.setDescription('hmem - current allocated pools')
fwHmem_maximum_bytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 9), Unsigned32()).setLabel("fwHmem-maximum-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_maximum_bytes.setStatus('current')
if mibBuilder.loadTexts: fwHmem_maximum_bytes.setDescription('hmem - maximum bytes')
fwHmem_maximum_pools = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 10), Unsigned32()).setLabel("fwHmem-maximum-pools").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_maximum_pools.setStatus('current')
if mibBuilder.loadTexts: fwHmem_maximum_pools.setDescription('hmem - maximum pools')
fwHmem_bytes_used = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 11), Unsigned32()).setLabel("fwHmem-bytes-used").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_bytes_used.setStatus('current')
if mibBuilder.loadTexts: fwHmem_bytes_used.setDescription('hmem - bytes used')
fwHmem_blocks_used = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 12), Unsigned32()).setLabel("fwHmem-blocks-used").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_blocks_used.setStatus('current')
if mibBuilder.loadTexts: fwHmem_blocks_used.setDescription('hmem - blocks used')
fwHmem_bytes_unused = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 13), Unsigned32()).setLabel("fwHmem-bytes-unused").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_bytes_unused.setStatus('current')
if mibBuilder.loadTexts: fwHmem_bytes_unused.setDescription('hmem - bytes unused')
fwHmem_blocks_unused = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 14), Unsigned32()).setLabel("fwHmem-blocks-unused").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_blocks_unused.setStatus('current')
if mibBuilder.loadTexts: fwHmem_blocks_unused.setDescription('hmem - blocks unused')
fwHmem_bytes_peak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 15), Unsigned32()).setLabel("fwHmem-bytes-peak").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_bytes_peak.setStatus('current')
if mibBuilder.loadTexts: fwHmem_bytes_peak.setDescription('hmem - bytes peak')
fwHmem_blocks_peak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 16), Unsigned32()).setLabel("fwHmem-blocks-peak").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_blocks_peak.setStatus('current')
if mibBuilder.loadTexts: fwHmem_blocks_peak.setDescription('hmem - blocks peak')
fwHmem_bytes_internal_use = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 17), Unsigned32()).setLabel("fwHmem-bytes-internal-use").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_bytes_internal_use.setStatus('current')
if mibBuilder.loadTexts: fwHmem_bytes_internal_use.setDescription('hmem - bytes internal use')
fwHmem_number_of_items = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 18), Unsigned32()).setLabel("fwHmem-number-of-items").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_number_of_items.setStatus('current')
if mibBuilder.loadTexts: fwHmem_number_of_items.setDescription('hmem - number of items')
fwHmem_alloc_operations = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 19), Unsigned32()).setLabel("fwHmem-alloc-operations").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_alloc_operations.setStatus('current')
if mibBuilder.loadTexts: fwHmem_alloc_operations.setDescription('hmem - alloc operations')
fwHmem_free_operations = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 20), Unsigned32()).setLabel("fwHmem-free-operations").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_free_operations.setStatus('current')
if mibBuilder.loadTexts: fwHmem_free_operations.setDescription('hmem - free operations')
fwHmem_failed_alloc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 21), Unsigned32()).setLabel("fwHmem-failed-alloc").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_failed_alloc.setStatus('current')
if mibBuilder.loadTexts: fwHmem_failed_alloc.setDescription('hmem - failed alloc')
fwHmem_failed_free = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 22), Unsigned32()).setLabel("fwHmem-failed-free").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_failed_free.setStatus('current')
if mibBuilder.loadTexts: fwHmem_failed_free.setDescription('hmem - failed free')
fwKmem_system_physical_mem = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 1), Unsigned32()).setLabel("fwKmem-system-physical-mem").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_system_physical_mem.setStatus('current')
if mibBuilder.loadTexts: fwKmem_system_physical_mem.setDescription('kmem - system physical mem')
fwKmem_available_physical_mem = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 2), Unsigned32()).setLabel("fwKmem-available-physical-mem").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_available_physical_mem.setStatus('current')
if mibBuilder.loadTexts: fwKmem_available_physical_mem.setDescription('kmem - available physical mem')
fwKmem_aix_heap_size = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 3), Unsigned32()).setLabel("fwKmem-aix-heap-size").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_aix_heap_size.setStatus('current')
if mibBuilder.loadTexts: fwKmem_aix_heap_size.setDescription('kmem - aix heap size')
fwKmem_bytes_used = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 4), Unsigned32()).setLabel("fwKmem-bytes-used").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_bytes_used.setStatus('current')
if mibBuilder.loadTexts: fwKmem_bytes_used.setDescription('kmem - bytes used')
fwKmem_blocking_bytes_used = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 5), Unsigned32()).setLabel("fwKmem-blocking-bytes-used").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_blocking_bytes_used.setStatus('current')
if mibBuilder.loadTexts: fwKmem_blocking_bytes_used.setDescription('kmem - blocking bytes used')
fwKmem_non_blocking_bytes_used = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 6), Unsigned32()).setLabel("fwKmem-non-blocking-bytes-used").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_non_blocking_bytes_used.setStatus('current')
if mibBuilder.loadTexts: fwKmem_non_blocking_bytes_used.setDescription('kmem - non blocking bytes used')
fwKmem_bytes_unused = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 7), Unsigned32()).setLabel("fwKmem-bytes-unused").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_bytes_unused.setStatus('current')
if mibBuilder.loadTexts: fwKmem_bytes_unused.setDescription('kmem - bytes unused')
fwKmem_bytes_peak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 8), Unsigned32()).setLabel("fwKmem-bytes-peak").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_bytes_peak.setStatus('current')
if mibBuilder.loadTexts: fwKmem_bytes_peak.setDescription('kmem - bytes peak')
fwKmem_blocking_bytes_peak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 9), Unsigned32()).setLabel("fwKmem-blocking-bytes-peak").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_blocking_bytes_peak.setStatus('current')
if mibBuilder.loadTexts: fwKmem_blocking_bytes_peak.setDescription('kmem - blocking bytes peak')
fwKmem_non_blocking_bytes_peak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 10), Unsigned32()).setLabel("fwKmem-non-blocking-bytes-peak").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_non_blocking_bytes_peak.setStatus('current')
if mibBuilder.loadTexts: fwKmem_non_blocking_bytes_peak.setDescription('kmem - non blocking bytes peak')
fwKmem_bytes_internal_use = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 11), Unsigned32()).setLabel("fwKmem-bytes-internal-use").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_bytes_internal_use.setStatus('current')
if mibBuilder.loadTexts: fwKmem_bytes_internal_use.setDescription('kmem - bytes internal use')
fwKmem_number_of_items = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 12), Unsigned32()).setLabel("fwKmem-number-of-items").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_number_of_items.setStatus('current')
if mibBuilder.loadTexts: fwKmem_number_of_items.setDescription('kmem - number of items')
fwKmem_alloc_operations = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 13), Unsigned32()).setLabel("fwKmem-alloc-operations").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_alloc_operations.setStatus('current')
if mibBuilder.loadTexts: fwKmem_alloc_operations.setDescription('kmem - alloc operations')
fwKmem_free_operations = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 14), Unsigned32()).setLabel("fwKmem-free-operations").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_free_operations.setStatus('current')
if mibBuilder.loadTexts: fwKmem_free_operations.setDescription('kmem - free operations')
fwKmem_failed_alloc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 15), Unsigned32()).setLabel("fwKmem-failed-alloc").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_failed_alloc.setStatus('current')
if mibBuilder.loadTexts: fwKmem_failed_alloc.setDescription('kmem - failed alloc')
fwKmem_failed_free = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 16), Unsigned32()).setLabel("fwKmem-failed-free").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_failed_free.setStatus('current')
if mibBuilder.loadTexts: fwKmem_failed_free.setDescription('kmem - failed free')
fwInspect_packets = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 3, 1), Unsigned32()).setLabel("fwInspect-packets").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwInspect_packets.setStatus('current')
if mibBuilder.loadTexts: fwInspect_packets.setDescription('inspect - packets')
fwInspect_operations = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 3, 2), Unsigned32()).setLabel("fwInspect-operations").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwInspect_operations.setStatus('current')
if mibBuilder.loadTexts: fwInspect_operations.setDescription('inspect - operations')
fwInspect_lookups = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 3, 3), Unsigned32()).setLabel("fwInspect-lookups").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwInspect_lookups.setStatus('current')
if mibBuilder.loadTexts: fwInspect_lookups.setDescription('inspect - lookups')
fwInspect_record = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 3, 4), Unsigned32()).setLabel("fwInspect-record").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwInspect_record.setStatus('current')
if mibBuilder.loadTexts: fwInspect_record.setDescription('inspect - record')
fwInspect_extract = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 3, 5), Unsigned32()).setLabel("fwInspect-extract").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwInspect_extract.setStatus('current')
if mibBuilder.loadTexts: fwInspect_extract.setDescription('inspect - extract')
fwCookies_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 4, 1), Unsigned32()).setLabel("fwCookies-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwCookies_total.setStatus('current')
if mibBuilder.loadTexts: fwCookies_total.setDescription('cookies - total')
fwCookies_allocfwCookies_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 4, 2), Unsigned32()).setLabel("fwCookies-allocfwCookies-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwCookies_allocfwCookies_total.setStatus('current')
if mibBuilder.loadTexts: fwCookies_allocfwCookies_total.setDescription('cookies - alloc')
fwCookies_freefwCookies_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 4, 3), Unsigned32()).setLabel("fwCookies-freefwCookies-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwCookies_freefwCookies_total.setStatus('current')
if mibBuilder.loadTexts: fwCookies_freefwCookies_total.setDescription('cookies - free')
fwCookies_dupfwCookies_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 4, 4), Unsigned32()).setLabel("fwCookies-dupfwCookies-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwCookies_dupfwCookies_total.setStatus('current')
if mibBuilder.loadTexts: fwCookies_dupfwCookies_total.setDescription('cookies - dup')
fwCookies_getfwCookies_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 4, 5), Unsigned32()).setLabel("fwCookies-getfwCookies-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwCookies_getfwCookies_total.setStatus('current')
if mibBuilder.loadTexts: fwCookies_getfwCookies_total.setDescription('cookies - get')
fwCookies_putfwCookies_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 4, 6), Unsigned32()).setLabel("fwCookies-putfwCookies-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwCookies_putfwCookies_total.setStatus('current')
if mibBuilder.loadTexts: fwCookies_putfwCookies_total.setDescription('cookies - put')
fwCookies_lenfwCookies_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 4, 7), Unsigned32()).setLabel("fwCookies-lenfwCookies-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwCookies_lenfwCookies_total.setStatus('current')
if mibBuilder.loadTexts: fwCookies_lenfwCookies_total.setDescription('cookies - len')
fwChains_alloc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 5, 1), Unsigned32()).setLabel("fwChains-alloc").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwChains_alloc.setStatus('current')
if mibBuilder.loadTexts: fwChains_alloc.setDescription('chains - alloc')
fwChains_free = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 5, 2), Unsigned32()).setLabel("fwChains-free").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwChains_free.setStatus('current')
if mibBuilder.loadTexts: fwChains_free.setDescription('chains - free')
fwFrag_fragments = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 6, 1), Unsigned32()).setLabel("fwFrag-fragments").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwFrag_fragments.setStatus('current')
if mibBuilder.loadTexts: fwFrag_fragments.setDescription('fragments - fragments')
fwFrag_expired = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 6, 2), Unsigned32()).setLabel("fwFrag-expired").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwFrag_expired.setStatus('current')
if mibBuilder.loadTexts: fwFrag_expired.setDescription('fragments - expired')
fwFrag_packets = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 6, 3), Unsigned32()).setLabel("fwFrag-packets").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwFrag_packets.setStatus('current')
if mibBuilder.loadTexts: fwFrag_packets.setDescription('fragments - packets')
fwUfpHitRatio = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 8, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwUfpHitRatio.setStatus('current')
if mibBuilder.loadTexts: fwUfpHitRatio.setDescription('ufp - % hits ratio')
fwUfpInspected = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 8, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwUfpInspected.setStatus('current')
if mibBuilder.loadTexts: fwUfpInspected.setDescription('ufp - total connections')
fwUfpHits = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 8, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwUfpHits.setStatus('current')
if mibBuilder.loadTexts: fwUfpHits.setDescription('ufp - hits connections')
fwSS_http_pid = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 1), Unsigned32()).setLabel("fwSS-http-pid").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_pid.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_pid.setDescription('http - pid')
fwSS_http_proto = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 2), Unsigned32()).setLabel("fwSS-http-proto").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_proto.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_proto.setDescription('http - proto')
fwSS_http_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 3), Gauge32()).setLabel("fwSS-http-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_port.setDescription('http - port')
fwSS_http_logical_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 4), Gauge32()).setLabel("fwSS-http-logical-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_logical_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_logical_port.setDescription('http - logical port')
fwSS_http_max_avail_socket = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 5), Unsigned32()).setLabel("fwSS-http-max-avail-socket").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_max_avail_socket.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_max_avail_socket.setDescription('http - max avail socket')
fwSS_http_socket_in_use_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 6), Unsigned32()).setLabel("fwSS-http-socket-in-use-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_socket_in_use_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_socket_in_use_max.setDescription('http - socket in use max')
fwSS_http_socket_in_use_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 7), Unsigned32()).setLabel("fwSS-http-socket-in-use-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_socket_in_use_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_socket_in_use_curr.setDescription('http - socket in use current')
fwSS_http_socket_in_use_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 8), Unsigned32()).setLabel("fwSS-http-socket-in-use-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_socket_in_use_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_socket_in_use_count.setDescription('http - socket in use count')
fwSS_http_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 9), Unsigned32()).setLabel("fwSS-http-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_sess_max.setDescription('http - session max')
fwSS_http_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 10), Unsigned32()).setLabel("fwSS-http-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_sess_curr.setDescription('http - session current')
fwSS_http_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 11), Unsigned32()).setLabel("fwSS-http-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_sess_count.setDescription('http - session count')
fwSS_http_auth_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 12), Unsigned32()).setLabel("fwSS-http-auth-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_auth_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_auth_sess_max.setDescription('http - auth session max')
fwSS_http_auth_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 13), Unsigned32()).setLabel("fwSS-http-auth-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_auth_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_auth_sess_curr.setDescription('http - auth session current')
fwSS_http_auth_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 14), Unsigned32()).setLabel("fwSS-http-auth-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_auth_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_auth_sess_count.setDescription('http - auth session count')
fwSS_http_accepted_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 15), Unsigned32()).setLabel("fwSS-http-accepted-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_accepted_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_accepted_sess.setDescription('http - accepted session')
fwSS_http_rejected_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 16), Unsigned32()).setLabel("fwSS-http-rejected-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_rejected_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_rejected_sess.setDescription('http - rejected session')
fwSS_http_auth_failures = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 17), Unsigned32()).setLabel("fwSS-http-auth-failures").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_auth_failures.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_auth_failures.setDescription('http - auth failures')
fwSS_http_ops_cvp_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 18), Unsigned32()).setLabel("fwSS-http-ops-cvp-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_ops_cvp_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_ops_cvp_sess_max.setDescription('http - opsec cvp session max')
fwSS_http_ops_cvp_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 19), Unsigned32()).setLabel("fwSS-http-ops-cvp-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_ops_cvp_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_ops_cvp_sess_curr.setDescription('http - opsec cvp session current')
fwSS_http_ops_cvp_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 20), Unsigned32()).setLabel("fwSS-http-ops-cvp-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_ops_cvp_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_ops_cvp_sess_count.setDescription('http - opsec cvp session count')
fwSS_http_ops_cvp_rej_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 21), Unsigned32()).setLabel("fwSS-http-ops-cvp-rej-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_ops_cvp_rej_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_ops_cvp_rej_sess.setDescription('http - opsec cvp rej session')
fwSS_http_ssl_encryp_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 22), Unsigned32()).setLabel("fwSS-http-ssl-encryp-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_ssl_encryp_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_ssl_encryp_sess_max.setDescription('http - ssl encryp session max')
fwSS_http_ssl_encryp_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 23), Unsigned32()).setLabel("fwSS-http-ssl-encryp-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_ssl_encryp_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_ssl_encryp_sess_curr.setDescription('http - ssl encryp session current')
fwSS_http_ssl_encryp_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 24), Unsigned32()).setLabel("fwSS-http-ssl-encryp-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_ssl_encryp_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_ssl_encryp_sess_count.setDescription('http - ssl encryp session count')
fwSS_http_transp_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 25), Unsigned32()).setLabel("fwSS-http-transp-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_transp_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_transp_sess_max.setDescription('http - transparent session max')
fwSS_http_transp_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 26), Unsigned32()).setLabel("fwSS-http-transp-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_transp_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_transp_sess_curr.setDescription('http - transparent session current')
fwSS_http_transp_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 27), Unsigned32()).setLabel("fwSS-http-transp-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_transp_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_transp_sess_count.setDescription('http - transparent session count')
fwSS_http_proxied_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 28), Unsigned32()).setLabel("fwSS-http-proxied-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_proxied_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_proxied_sess_max.setDescription('http - proxied session max')
fwSS_http_proxied_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 29), Unsigned32()).setLabel("fwSS-http-proxied-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_proxied_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_proxied_sess_curr.setDescription('http - proxied session current')
fwSS_http_proxied_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 30), Unsigned32()).setLabel("fwSS-http-proxied-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_proxied_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_proxied_sess_count.setDescription('http - proxied session count')
fwSS_http_tunneled_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 31), Unsigned32()).setLabel("fwSS-http-tunneled-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_tunneled_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_tunneled_sess_max.setDescription('http - tunneled session max')
fwSS_http_tunneled_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 32), Unsigned32()).setLabel("fwSS-http-tunneled-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_tunneled_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_tunneled_sess_curr.setDescription('http - tunneled session current')
fwSS_http_tunneled_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 33), Unsigned32()).setLabel("fwSS-http-tunneled-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_tunneled_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_tunneled_sess_count.setDescription('http - tunneled session count')
fwSS_http_ftp_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 34), Unsigned32()).setLabel("fwSS-http-ftp-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_ftp_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_ftp_sess_max.setDescription('http - ftp session max')
fwSS_http_ftp_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 35), Unsigned32()).setLabel("fwSS-http-ftp-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_ftp_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_ftp_sess_curr.setDescription('http - ftp session current')
fwSS_http_ftp_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 36), Unsigned32()).setLabel("fwSS-http-ftp-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_ftp_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_ftp_sess_count.setDescription('http - ftp session count')
fwSS_http_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("fwSS-http-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_time_stamp.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_time_stamp.setDescription('http - time stamp')
fwSS_http_is_alive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 38), Unsigned32()).setLabel("fwSS-http-is-alive").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_is_alive.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_is_alive.setDescription('http - is alive')
fwSS_http_blocked_cnt = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 39), Unsigned32()).setLabel("fwSS-http-blocked-cnt").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_blocked_cnt.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_blocked_cnt.setDescription("count of HTTP items blocked, being classified as 'infected' by Anti Virus")
fwSS_http_blocked_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 40), Unsigned32()).setLabel("fwSS-http-blocked-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_blocked_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_blocked_total.setDescription('sum of all the counts of the previous OID (fwss-http-blocked-cnt)')
fwSS_http_scanned_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 41), Unsigned32()).setLabel("fwSS-http-scanned-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_scanned_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_scanned_total.setDescription("sum of all the counts of 'blocked' (infected) and 'passed' items")
fwSS_http_blocked_by_file_type = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 42), Unsigned32()).setLabel("fwSS-http-blocked-by-file-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_blocked_by_file_type.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_blocked_by_file_type.setDescription("count of HTTP items blocked by 'file type' policy in Content Inspection tab in SmartDashboard")
fwSS_http_blocked_by_size_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 43), Unsigned32()).setLabel("fwSS-http-blocked-by-size-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_blocked_by_size_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_blocked_by_size_limit.setDescription("count of HTTP items blocked by 'size limit' policy in Content Inspection tab in SmartDashboard")
fwSS_http_blocked_by_archive_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 44), Unsigned32()).setLabel("fwSS-http-blocked-by-archive-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_blocked_by_archive_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_blocked_by_archive_limit.setDescription("count of HTTP items blocked by 'archive limit' policy in Content Inspection tab in SmartDashboard")
fwSS_http_blocked_by_internal_error = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 45), Unsigned32()).setLabel("fwSS-http-blocked-by-internal-error").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_blocked_by_internal_error.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_blocked_by_internal_error.setDescription("count of HTTP items blocked because of 'internal error' in Content Inspection tab in SmartDashboard")
fwSS_http_passed_cnt = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 46), Unsigned32()).setLabel("fwSS-http-passed-cnt").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_passed_cnt.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_passed_cnt.setDescription("count of HTTP items passed, being classified as 'safe' by Anti Virus")
fwSS_http_passed_by_file_type = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 47), Unsigned32()).setLabel("fwSS-http-passed-by-file-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_passed_by_file_type.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_passed_by_file_type.setDescription("count of HTTP items allowed (without AV scan) by 'File Type' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_http_passed_by_size_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 48), Unsigned32()).setLabel("fwSS-http-passed-by-size-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_passed_by_size_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_passed_by_size_limit.setDescription("count of HTTP items allowed (without AV scan) by 'Size Limit' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_http_passed_by_archive_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 49), Unsigned32()).setLabel("fwSS-http-passed-by-archive-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_passed_by_archive_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_passed_by_archive_limit.setDescription("count of HTTP items allowed (without AV scan) by 'Archive Limit' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_http_passed_by_internal_error = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 50), Unsigned32()).setLabel("fwSS-http-passed-by-internal-error").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_passed_by_internal_error.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_passed_by_internal_error.setDescription("count of HTTP items allowed (without AV scan) by 'internal error' in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_http_passed_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 51), Unsigned32()).setLabel("fwSS-http-passed-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_passed_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_passed_total.setDescription("sum of all the above 'passed' counts - OIDs .46 to .50")
fwSS_http_blocked_by_AV_settings = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 52), Unsigned32()).setLabel("fwSS-http-blocked-by-AV-settings").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_blocked_by_AV_settings.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_blocked_by_AV_settings.setDescription("count of HTTP items rejected by Anti Virus as either: \n\t  \t\t        exceeding size or archive limits, or failed scan due to \n\t  \t\t        internal error (configured in the 'settings' pane in \n\t  \t\t        'Content Inspection' tab in SmartDashboard)")
fwSS_http_passed_by_AV_settings = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 53), Unsigned32()).setLabel("fwSS-http-passed-by-AV-settings").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_passed_by_AV_settings.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_passed_by_AV_settings.setDescription("count of HTTP items allowed by Anti Virus as either: \n\t  \t\t        exceeding size or archive limits, or failed scan due to \n\t  \t\t        internal error (configured in the 'settings' pane in \n\t  \t\t        'Content Inspection' tab in SmartDashboard)")
fwSS_http_blocked_by_URL_filter_category = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 54), Unsigned32()).setLabel("fwSS-http-blocked-by-URL-filter-category").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_blocked_by_URL_filter_category.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_blocked_by_URL_filter_category.setDescription("count of URLs blocked by 'Web Filtering Policy' in 'Content Inspection' tab in SmartDashboard")
fwSS_http_blocked_by_URL_block_list = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 55), Unsigned32()).setLabel("fwSS-http-blocked-by-URL-block-list").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_blocked_by_URL_block_list.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_blocked_by_URL_block_list.setDescription("count of URLs blocked by 'Blocked URLs/IPs' in 'Content Inspection' tab in SmartDashboard \n\t  \t\t        (overriding 'Web Filtering Policy').")
fwSS_http_passed_by_URL_allow_list = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 56), Unsigned32()).setLabel("fwSS-http-passed-by-URL-allow-list").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_passed_by_URL_allow_list.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_passed_by_URL_allow_list.setDescription("count of Allowed by 'allowed URLs/IPs' in 'Content Inspection' tab in SmartDashboard \n\t  \t\t        (overriding 'Web Filtering Policy')")
fwSS_http_passed_by_URL_filter_category = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 57), Unsigned32()).setLabel("fwSS-http-passed-by-URL-filter-category").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_passed_by_URL_filter_category.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_passed_by_URL_filter_category.setDescription("count of URLs allowed by 'Web Filtering Policy' in 'Content Inspection' tab in SmartDashboard.")
fwSS_ftp_pid = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 1), Unsigned32()).setLabel("fwSS-ftp-pid").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_pid.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_pid.setDescription('ftp - pid')
fwSS_ftp_proto = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 2), Unsigned32()).setLabel("fwSS-ftp-proto").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_proto.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_proto.setDescription('ftp - proto')
fwSS_ftp_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 3), Gauge32()).setLabel("fwSS-ftp-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_port.setDescription('ftp - port')
fwSS_ftp_logical_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 4), Gauge32()).setLabel("fwSS-ftp-logical-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_logical_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_logical_port.setDescription('ftp - logical port')
fwSS_ftp_max_avail_socket = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 5), Unsigned32()).setLabel("fwSS-ftp-max-avail-socket").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_max_avail_socket.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_max_avail_socket.setDescription('ftp - max avail socket')
fwSS_ftp_socket_in_use_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 6), Unsigned32()).setLabel("fwSS-ftp-socket-in-use-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_socket_in_use_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_socket_in_use_max.setDescription('ftp - socket in use max')
fwSS_ftp_socket_in_use_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 7), Unsigned32()).setLabel("fwSS-ftp-socket-in-use-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_socket_in_use_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_socket_in_use_curr.setDescription('ftp - socket in use current')
fwSS_ftp_socket_in_use_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 8), Unsigned32()).setLabel("fwSS-ftp-socket-in-use-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_socket_in_use_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_socket_in_use_count.setDescription('ftp - socket in use count')
fwSS_ftp_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 9), Unsigned32()).setLabel("fwSS-ftp-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_sess_max.setDescription('ftp - session max')
fwSS_ftp_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 10), Unsigned32()).setLabel("fwSS-ftp-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_sess_curr.setDescription('ftp - session current')
fwSS_ftp_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 11), Unsigned32()).setLabel("fwSS-ftp-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_sess_count.setDescription('ftp - session count')
fwSS_ftp_auth_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 12), Unsigned32()).setLabel("fwSS-ftp-auth-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_auth_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_auth_sess_max.setDescription('ftp - auth session max')
fwSS_ftp_auth_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 13), Unsigned32()).setLabel("fwSS-ftp-auth-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_auth_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_auth_sess_curr.setDescription('ftp - auth session current')
fwSS_ftp_auth_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 14), Unsigned32()).setLabel("fwSS-ftp-auth-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_auth_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_auth_sess_count.setDescription('ftp - auth session count')
fwSS_ftp_accepted_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 15), Unsigned32()).setLabel("fwSS-ftp-accepted-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_accepted_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_accepted_sess.setDescription('ftp - accepted session')
fwSS_ftp_rejected_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 16), Unsigned32()).setLabel("fwSS-ftp-rejected-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_rejected_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_rejected_sess.setDescription('ftp - rejected session')
fwSS_ftp_auth_failures = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 17), Unsigned32()).setLabel("fwSS-ftp-auth-failures").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_auth_failures.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_auth_failures.setDescription('ftp - auth failures')
fwSS_ftp_ops_cvp_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 18), Unsigned32()).setLabel("fwSS-ftp-ops-cvp-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_ops_cvp_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_ops_cvp_sess_max.setDescription('ftp - opsec cvp session max')
fwSS_ftp_ops_cvp_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 19), Unsigned32()).setLabel("fwSS-ftp-ops-cvp-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_ops_cvp_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_ops_cvp_sess_curr.setDescription('ftp - opsec cvp session current')
fwSS_ftp_ops_cvp_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 20), Unsigned32()).setLabel("fwSS-ftp-ops-cvp-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_ops_cvp_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_ops_cvp_sess_count.setDescription('ftp - opsec cvp session count')
fwSS_ftp_ops_cvp_rej_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 21), Unsigned32()).setLabel("fwSS-ftp-ops-cvp-rej-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_ops_cvp_rej_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_ops_cvp_rej_sess.setDescription('ftp - opsec cvp rej session')
fwSS_ftp_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("fwSS-ftp-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_time_stamp.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_time_stamp.setDescription('ftp - time stamp')
fwSS_ftp_is_alive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 23), Unsigned32()).setLabel("fwSS-ftp-is-alive").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_is_alive.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_is_alive.setDescription('ftp - is alive')
fwSS_ftp_blocked_cnt = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 24), Unsigned32()).setLabel("fwSS-ftp-blocked-cnt").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_blocked_cnt.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_blocked_cnt.setDescription("count of ftp items blocked, being classified as 'infected' by Anti Virus")
fwSS_ftp_blocked_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 25), Unsigned32()).setLabel("fwSS-ftp-blocked-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_blocked_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_blocked_total.setDescription('sum of all the counts of the previous OID (fwss-ftp-blocked-cnt)')
fwSS_ftp_scanned_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 26), Unsigned32()).setLabel("fwSS-ftp-scanned-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_scanned_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_scanned_total.setDescription("sum of all the counts of 'blocked' (infected) and 'passed' items")
fwSS_ftp_blocked_by_file_type = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 27), Unsigned32()).setLabel("fwSS-ftp-blocked-by-file-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_blocked_by_file_type.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_blocked_by_file_type.setDescription("count of ftp items blocked by 'file type' policy in Content Inspection tab in SmartDashboard")
fwSS_ftp_blocked_by_size_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 28), Unsigned32()).setLabel("fwSS-ftp-blocked-by-size-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_blocked_by_size_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_blocked_by_size_limit.setDescription("count of ftp items blocked by 'size limit' policy in Content Inspection tab in SmartDashboard")
fwSS_ftp_blocked_by_archive_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 29), Unsigned32()).setLabel("fwSS-ftp-blocked-by-archive-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_blocked_by_archive_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_blocked_by_archive_limit.setDescription("count of ftp items blocked by 'archive limit' policy in Content Inspection tab in SmartDashboard")
fwSS_ftp_blocked_by_internal_error = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 30), Unsigned32()).setLabel("fwSS-ftp-blocked-by-internal-error").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_blocked_by_internal_error.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_blocked_by_internal_error.setDescription("count of ftp items blocked because of 'internal error' in Content Inspection tab in SmartDashboard")
fwSS_ftp_passed_cnt = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 31), Unsigned32()).setLabel("fwSS-ftp-passed-cnt").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_passed_cnt.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_passed_cnt.setDescription("count of ftp items passed, being classified as 'safe' by Anti Virus")
fwSS_ftp_passed_by_file_type = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 32), Unsigned32()).setLabel("fwSS-ftp-passed-by-file-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_passed_by_file_type.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_passed_by_file_type.setDescription("count of ftp items allowed (without AV scan) by 'File Type' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_ftp_passed_by_size_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 33), Unsigned32()).setLabel("fwSS-ftp-passed-by-size-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_passed_by_size_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_passed_by_size_limit.setDescription("count of ftp items allowed (without AV scan) by 'Size Limit' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_ftp_passed_by_archive_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 34), Unsigned32()).setLabel("fwSS-ftp-passed-by-archive-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_passed_by_archive_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_passed_by_archive_limit.setDescription("count of ftp items allowed (without AV scan) by 'Archive Limit' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_ftp_passed_by_internal_error = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 35), Unsigned32()).setLabel("fwSS-ftp-passed-by-internal-error").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_passed_by_internal_error.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_passed_by_internal_error.setDescription("count of ftp items allowed (without AV scan) by 'internal error' in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_ftp_passed_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 36), Unsigned32()).setLabel("fwSS-ftp-passed-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_passed_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_passed_total.setDescription("sum of all the above 'passed' counts - OIDs .31 to .35")
fwSS_ftp_blocked_by_AV_settings = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 37), Unsigned32()).setLabel("fwSS-ftp-blocked-by-AV-settings").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_blocked_by_AV_settings.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_blocked_by_AV_settings.setDescription("count of ftp items rejected by Anti Virus as either: \n\t  \t\t        exceeding size or archive limits, or failed scan due to \n\t  \t\t        internal error (configured in the 'settings' pane in \n\t  \t\t        'Content Inspection' tab in SmartDashboard)")
fwSS_ftp_passed_by_AV_settings = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 38), Unsigned32()).setLabel("fwSS-ftp-passed-by-AV-settings").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_passed_by_AV_settings.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_passed_by_AV_settings.setDescription("count of ftp items allowed by Anti Virus as either: \n\t  \t\t        exceeding size or archive limits, or failed scan due to \n\t  \t\t        internal error (configured in the 'settings' pane in \n\t  \t\t        'Content Inspection' tab in SmartDashboard)")
fwSS_telnet_pid = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 1), Unsigned32()).setLabel("fwSS-telnet-pid").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_pid.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_pid.setDescription('telnet - pid')
fwSS_telnet_proto = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 2), Unsigned32()).setLabel("fwSS-telnet-proto").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_proto.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_proto.setDescription('telnet - proto')
fwSS_telnet_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 3), Gauge32()).setLabel("fwSS-telnet-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_port.setDescription('telnet - port')
fwSS_telnet_logical_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 4), Gauge32()).setLabel("fwSS-telnet-logical-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_logical_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_logical_port.setDescription('telnet - logical port')
fwSS_telnet_max_avail_socket = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 5), Unsigned32()).setLabel("fwSS-telnet-max-avail-socket").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_max_avail_socket.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_max_avail_socket.setDescription('telnet - max avail socket')
fwSS_telnet_socket_in_use_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 6), Unsigned32()).setLabel("fwSS-telnet-socket-in-use-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_socket_in_use_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_socket_in_use_max.setDescription('telnet - socket in use max')
fwSS_telnet_socket_in_use_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 7), Unsigned32()).setLabel("fwSS-telnet-socket-in-use-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_socket_in_use_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_socket_in_use_curr.setDescription('telnet - socket in use current')
fwSS_telnet_socket_in_use_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 8), Unsigned32()).setLabel("fwSS-telnet-socket-in-use-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_socket_in_use_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_socket_in_use_count.setDescription('telnet - socket in use count')
fwSS_telnet_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 9), Unsigned32()).setLabel("fwSS-telnet-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_sess_max.setDescription('telnet - session max')
fwSS_telnet_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 10), Unsigned32()).setLabel("fwSS-telnet-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_sess_curr.setDescription('telnet - session current')
fwSS_telnet_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 11), Unsigned32()).setLabel("fwSS-telnet-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_sess_count.setDescription('telnet - session count')
fwSS_telnet_auth_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 12), Unsigned32()).setLabel("fwSS-telnet-auth-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_auth_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_auth_sess_max.setDescription('telnet - auth session max')
fwSS_telnet_auth_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 13), Unsigned32()).setLabel("fwSS-telnet-auth-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_auth_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_auth_sess_curr.setDescription('telnet - auth session current')
fwSS_telnet_auth_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 14), Unsigned32()).setLabel("fwSS-telnet-auth-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_auth_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_auth_sess_count.setDescription('telnet - auth session count')
fwSS_telnet_accepted_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 15), Unsigned32()).setLabel("fwSS-telnet-accepted-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_accepted_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_accepted_sess.setDescription('telnet - accepted session')
fwSS_telnet_rejected_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 16), Unsigned32()).setLabel("fwSS-telnet-rejected-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_rejected_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_rejected_sess.setDescription('telnet - rejected session')
fwSS_telnet_auth_failures = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 17), Unsigned32()).setLabel("fwSS-telnet-auth-failures").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_auth_failures.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_auth_failures.setDescription('telnet - auth failures')
fwSS_telnet_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("fwSS-telnet-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_time_stamp.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_time_stamp.setDescription('telnet - time stamp')
fwSS_telnet_is_alive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 19), Unsigned32()).setLabel("fwSS-telnet-is-alive").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_is_alive.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_is_alive.setDescription('telnet - is alive')
fwSS_rlogin_pid = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 1), Unsigned32()).setLabel("fwSS-rlogin-pid").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_pid.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_pid.setDescription('rlogin - pid')
fwSS_rlogin_proto = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 2), Unsigned32()).setLabel("fwSS-rlogin-proto").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_proto.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_proto.setDescription('rlogin - proto')
fwSS_rlogin_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 3), Gauge32()).setLabel("fwSS-rlogin-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_port.setDescription('rlogin - port')
fwSS_rlogin_logical_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 4), Gauge32()).setLabel("fwSS-rlogin-logical-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_logical_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_logical_port.setDescription('rlogin - logical port')
fwSS_rlogin_max_avail_socket = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 5), Unsigned32()).setLabel("fwSS-rlogin-max-avail-socket").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_max_avail_socket.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_max_avail_socket.setDescription('rlogin - max avail socket')
fwSS_rlogin_socket_in_use_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 6), Unsigned32()).setLabel("fwSS-rlogin-socket-in-use-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_socket_in_use_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_socket_in_use_max.setDescription('rlogin - socket in use max')
fwSS_rlogin_socket_in_use_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 7), Unsigned32()).setLabel("fwSS-rlogin-socket-in-use-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_socket_in_use_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_socket_in_use_curr.setDescription('rlogin - socket in use current')
fwSS_rlogin_socket_in_use_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 8), Unsigned32()).setLabel("fwSS-rlogin-socket-in-use-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_socket_in_use_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_socket_in_use_count.setDescription('rlogin - socket in use count')
fwSS_rlogin_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 9), Unsigned32()).setLabel("fwSS-rlogin-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_sess_max.setDescription('rlogin - session max')
fwSS_rlogin_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 10), Unsigned32()).setLabel("fwSS-rlogin-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_sess_curr.setDescription('rlogin - session current')
fwSS_rlogin_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 11), Unsigned32()).setLabel("fwSS-rlogin-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_sess_count.setDescription('rlogin - session count')
fwSS_rlogin_auth_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 12), Unsigned32()).setLabel("fwSS-rlogin-auth-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_auth_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_auth_sess_max.setDescription('rlogin - auth session max')
fwSS_rlogin_auth_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 13), Unsigned32()).setLabel("fwSS-rlogin-auth-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_auth_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_auth_sess_curr.setDescription('rlogin - auth session current')
fwSS_rlogin_auth_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 14), Unsigned32()).setLabel("fwSS-rlogin-auth-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_auth_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_auth_sess_count.setDescription('rlogin - auth session count')
fwSS_rlogin_accepted_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 15), Unsigned32()).setLabel("fwSS-rlogin-accepted-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_accepted_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_accepted_sess.setDescription('rlogin - accepted session')
fwSS_rlogin_rejected_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 16), Unsigned32()).setLabel("fwSS-rlogin-rejected-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_rejected_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_rejected_sess.setDescription('rlogin - rejected session')
fwSS_rlogin_auth_failures = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 17), Unsigned32()).setLabel("fwSS-rlogin-auth-failures").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_auth_failures.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_auth_failures.setDescription('rlogin - auth failures')
fwSS_rlogin_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("fwSS-rlogin-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_time_stamp.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_time_stamp.setDescription('rlogin - time stamp')
fwSS_rlogin_is_alive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 19), Unsigned32()).setLabel("fwSS-rlogin-is-alive").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_is_alive.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_is_alive.setDescription('rlogin - is alive')
fwSS_ufp_ops_ufp_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 5, 1), Unsigned32()).setLabel("fwSS-ufp-ops-ufp-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ufp_ops_ufp_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_ufp_ops_ufp_sess_max.setDescription('ufp - session max')
fwSS_ufp_ops_ufp_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 5, 2), Unsigned32()).setLabel("fwSS-ufp-ops-ufp-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ufp_ops_ufp_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_ufp_ops_ufp_sess_curr.setDescription('ufp - session current')
fwSS_ufp_ops_ufp_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 5, 3), Unsigned32()).setLabel("fwSS-ufp-ops-ufp-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ufp_ops_ufp_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_ufp_ops_ufp_sess_count.setDescription('ufp - session count')
fwSS_ufp_ops_ufp_rej_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 5, 4), Unsigned32()).setLabel("fwSS-ufp-ops-ufp-rej-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ufp_ops_ufp_rej_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_ufp_ops_ufp_rej_sess.setDescription('ufp - rej session')
fwSS_ufp_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("fwSS-ufp-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ufp_time_stamp.setStatus('current')
if mibBuilder.loadTexts: fwSS_ufp_time_stamp.setDescription('ufp - time stamp')
fwSS_ufp_is_alive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 5, 6), Unsigned32()).setLabel("fwSS-ufp-is-alive").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ufp_is_alive.setStatus('current')
if mibBuilder.loadTexts: fwSS_ufp_is_alive.setDescription('ufp - is alive')
fwSS_smtp_pid = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 1), Unsigned32()).setLabel("fwSS-smtp-pid").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_pid.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_pid.setDescription('smtp - pid')
fwSS_smtp_proto = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 2), Unsigned32()).setLabel("fwSS-smtp-proto").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_proto.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_proto.setDescription('smtp - proto')
fwSS_smtp_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 3), Gauge32()).setLabel("fwSS-smtp-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_port.setDescription('smtp - port')
fwSS_smtp_logical_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 4), Gauge32()).setLabel("fwSS-smtp-logical-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_logical_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_logical_port.setDescription('smtp - logical port')
fwSS_smtp_max_avail_socket = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 5), Unsigned32()).setLabel("fwSS-smtp-max-avail-socket").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_max_avail_socket.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_max_avail_socket.setDescription('smtp - max avail socket')
fwSS_smtp_socket_in_use_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 6), Unsigned32()).setLabel("fwSS-smtp-socket-in-use-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_socket_in_use_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_socket_in_use_max.setDescription('smtp - socket in use max')
fwSS_smtp_socket_in_use_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 7), Unsigned32()).setLabel("fwSS-smtp-socket-in-use-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_socket_in_use_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_socket_in_use_curr.setDescription('smtp - socket in use current')
fwSS_smtp_socket_in_use_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 8), Unsigned32()).setLabel("fwSS-smtp-socket-in-use-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_socket_in_use_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_socket_in_use_count.setDescription('smtp - socket in use count')
fwSS_smtp_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 9), Unsigned32()).setLabel("fwSS-smtp-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_sess_max.setDescription('smtp - session max')
fwSS_smtp_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 10), Unsigned32()).setLabel("fwSS-smtp-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_sess_curr.setDescription('smtp - session current')
fwSS_smtp_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 11), Unsigned32()).setLabel("fwSS-smtp-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_sess_count.setDescription('smtp - session count')
fwSS_smtp_auth_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 12), Unsigned32()).setLabel("fwSS-smtp-auth-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_auth_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_auth_sess_max.setDescription('smtp - auth session max')
fwSS_smtp_auth_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 13), Unsigned32()).setLabel("fwSS-smtp-auth-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_auth_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_auth_sess_curr.setDescription('smtp - auth session current')
fwSS_smtp_auth_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 14), Unsigned32()).setLabel("fwSS-smtp-auth-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_auth_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_auth_sess_count.setDescription('smtp - auth session count')
fwSS_smtp_accepted_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 15), Unsigned32()).setLabel("fwSS-smtp-accepted-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_accepted_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_accepted_sess.setDescription('smtp - accepted session')
fwSS_smtp_rejected_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 16), Unsigned32()).setLabel("fwSS-smtp-rejected-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_rejected_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_rejected_sess.setDescription('smtp - rejected session')
fwSS_smtp_auth_failures = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 17), Unsigned32()).setLabel("fwSS-smtp-auth-failures").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_auth_failures.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_auth_failures.setDescription('smtp - auth failures')
fwSS_smtp_mail_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 18), Unsigned32()).setLabel("fwSS-smtp-mail-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_mail_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_mail_max.setDescription('smtp - mail max')
fwSS_smtp_mail_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 19), Unsigned32()).setLabel("fwSS-smtp-mail-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_mail_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_mail_curr.setDescription('smtp - mail curr')
fwSS_smtp_mail_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 20), Unsigned32()).setLabel("fwSS-smtp-mail-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_mail_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_mail_count.setDescription('smtp - mail count')
fwSS_smtp_outgoing_mail_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 21), Unsigned32()).setLabel("fwSS-smtp-outgoing-mail-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_outgoing_mail_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_outgoing_mail_max.setDescription('smtp - outgoing mail max')
fwSS_smtp_outgoing_mail_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 22), Unsigned32()).setLabel("fwSS-smtp-outgoing-mail-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_outgoing_mail_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_outgoing_mail_curr.setDescription('smtp - outgoing mail curr')
fwSS_smtp_outgoing_mail_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 23), Unsigned32()).setLabel("fwSS-smtp-outgoing-mail-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_outgoing_mail_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_outgoing_mail_count.setDescription('smtp - outgoing mail count')
fwSS_smtp_max_mail_on_conn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 24), Unsigned32()).setLabel("fwSS-smtp-max-mail-on-conn").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_max_mail_on_conn.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_max_mail_on_conn.setDescription('smtp - max mail on conn')
fwSS_smtp_total_mails = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 25), Unsigned32()).setLabel("fwSS-smtp-total-mails").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_total_mails.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_total_mails.setDescription('smtp - total mails')
fwSS_smtp_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("fwSS-smtp-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_time_stamp.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_time_stamp.setDescription('smtp - time stamp')
fwSS_smtp_is_alive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 27), Unsigned32()).setLabel("fwSS-smtp-is-alive").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_is_alive.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_is_alive.setDescription('smtp - is alive')
fwSS_smtp_blocked_cnt = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 28), Unsigned32()).setLabel("fwSS-smtp-blocked-cnt").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_blocked_cnt.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_blocked_cnt.setDescription("count of smtp items blocked, being classified as 'infected' by Anti Virus")
fwSS_smtp_blocked_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 29), Unsigned32()).setLabel("fwSS-smtp-blocked-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_blocked_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_blocked_total.setDescription('sum of all the counts of the previous OID (fwss-smtp-blocked-cnt)')
fwSS_smtp_scanned_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 30), Unsigned32()).setLabel("fwSS-smtp-scanned-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_scanned_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_scanned_total.setDescription("sum of all the counts of 'blocked' (infected) and 'passed' items")
fwSS_smtp_blocked_by_file_type = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 31), Unsigned32()).setLabel("fwSS-smtp-blocked-by-file-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_blocked_by_file_type.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_blocked_by_file_type.setDescription("count of smtp items blocked by 'file type' policy in Content Inspection tab in SmartDashboard")
fwSS_smtp_blocked_by_size_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 32), Unsigned32()).setLabel("fwSS-smtp-blocked-by-size-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_blocked_by_size_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_blocked_by_size_limit.setDescription("count of smtp items blocked by 'size limit' policy in Content Inspection tab in SmartDashboard")
fwSS_smtp_blocked_by_archive_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 33), Unsigned32()).setLabel("fwSS-smtp-blocked-by-archive-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_blocked_by_archive_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_blocked_by_archive_limit.setDescription("count of smtp items blocked by 'archive limit' policy in Content Inspection tab in SmartDashboard")
fwSS_smtp_blocked_by_internal_error = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 34), Unsigned32()).setLabel("fwSS-smtp-blocked-by-internal-error").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_blocked_by_internal_error.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_blocked_by_internal_error.setDescription("count of smtp items blocked because of 'internal error' in Content Inspection tab in SmartDashboard")
fwSS_smtp_passed_cnt = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 35), Unsigned32()).setLabel("fwSS-smtp-passed-cnt").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_passed_cnt.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_passed_cnt.setDescription("count of smtp items passed, being classified as 'safe' by Anti Virus")
fwSS_smtp_passed_by_file_type = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 36), Unsigned32()).setLabel("fwSS-smtp-passed-by-file-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_passed_by_file_type.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_passed_by_file_type.setDescription("count of smtp items allowed (without AV scan) by 'File Type' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_smtp_passed_by_size_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 37), Unsigned32()).setLabel("fwSS-smtp-passed-by-size-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_passed_by_size_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_passed_by_size_limit.setDescription("count of smtp items allowed (without AV scan) by 'Size Limit' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_smtp_passed_by_archive_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 38), Unsigned32()).setLabel("fwSS-smtp-passed-by-archive-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_passed_by_archive_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_passed_by_archive_limit.setDescription("count of smtp items allowed (without AV scan) by 'Archive Limit' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_smtp_passed_by_internal_error = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 39), Unsigned32()).setLabel("fwSS-smtp-passed-by-internal-error").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_passed_by_internal_error.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_passed_by_internal_error.setDescription("count of smtp items allowed (without AV scan) by 'internal error' in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_smtp_passed_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 40), Unsigned32()).setLabel("fwSS-smtp-passed-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_passed_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_passed_total.setDescription("sum of all the above 'passed' counts - OIDs .35 to .39")
fwSS_smtp_blocked_by_AV_settings = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 41), Unsigned32()).setLabel("fwSS-smtp-blocked-by-AV-settings").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_blocked_by_AV_settings.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_blocked_by_AV_settings.setDescription("count of smtp items rejected by Anti Virus as either: \n\t  \t\t        exceeding size or archive limits, or failed scan due to \n\t  \t\t        internal error (configured in the 'settings' pane in \n\t  \t\t        'Content Inspection' tab in SmartDashboard)")
fwSS_smtp_passed_by_AV_settings = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 42), Unsigned32()).setLabel("fwSS-smtp-passed-by-AV-settings").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_passed_by_AV_settings.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_passed_by_AV_settings.setDescription("count of smtp items allowed by Anti Virus as either: \n\t  \t\t        exceeding size or archive limits, or failed scan due to \n\t  \t\t        internal error (configured in the 'settings' pane in \n\t  \t\t        'Content Inspection' tab in SmartDashboard)")
fwSS_POP3_pid = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 1), Unsigned32()).setLabel("fwSS-POP3-pid").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_pid.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_pid.setDescription('POP3 - pid')
fwSS_POP3_proto = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 2), Unsigned32()).setLabel("fwSS-POP3-proto").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_proto.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_proto.setDescription('POP3 - proto')
fwSS_POP3_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 3), Gauge32()).setLabel("fwSS-POP3-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_port.setDescription('POP3 - port')
fwSS_POP3_logical_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 4), Gauge32()).setLabel("fwSS-POP3-logical-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_logical_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_logical_port.setDescription('POP3 - logical port')
fwSS_POP3_max_avail_socket = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 5), Unsigned32()).setLabel("fwSS-POP3-max-avail-socket").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_max_avail_socket.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_max_avail_socket.setDescription('POP3 - max avail socket')
fwSS_POP3_socket_in_use_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 6), Unsigned32()).setLabel("fwSS-POP3-socket-in-use-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_socket_in_use_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_socket_in_use_max.setDescription('POP3 - socket in use max')
fwSS_POP3_socket_in_use_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 7), Unsigned32()).setLabel("fwSS-POP3-socket-in-use-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_socket_in_use_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_socket_in_use_curr.setDescription('POP3 - socket in use current')
fwSS_POP3_socket_in_use_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 8), Unsigned32()).setLabel("fwSS-POP3-socket-in-use-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_socket_in_use_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_socket_in_use_count.setDescription('POP3 - socket in use count')
fwSS_POP3_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 9), Unsigned32()).setLabel("fwSS-POP3-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_sess_max.setDescription('POP3 - session max')
fwSS_POP3_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 10), Unsigned32()).setLabel("fwSS-POP3-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_sess_curr.setDescription('POP3 - session current')
fwSS_POP3_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 11), Unsigned32()).setLabel("fwSS-POP3-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_sess_count.setDescription('POP3 - session count')
fwSS_POP3_auth_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 12), Unsigned32()).setLabel("fwSS-POP3-auth-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_auth_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_auth_sess_max.setDescription('POP3 - auth session max')
fwSS_POP3_auth_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 13), Unsigned32()).setLabel("fwSS-POP3-auth-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_auth_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_auth_sess_curr.setDescription('POP3 - auth session current')
fwSS_POP3_auth_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 14), Unsigned32()).setLabel("fwSS-POP3-auth-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_auth_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_auth_sess_count.setDescription('POP3 - auth session count')
fwSS_POP3_accepted_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 15), Unsigned32()).setLabel("fwSS-POP3-accepted-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_accepted_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_accepted_sess.setDescription('POP3 - accepted session')
fwSS_POP3_rejected_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 16), Unsigned32()).setLabel("fwSS-POP3-rejected-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_rejected_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_rejected_sess.setDescription('POP3 - rejected session')
fwSS_POP3_auth_failures = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 17), Unsigned32()).setLabel("fwSS-POP3-auth-failures").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_auth_failures.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_auth_failures.setDescription('POP3 - auth failures')
fwSS_POP3_mail_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 18), Unsigned32()).setLabel("fwSS-POP3-mail-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_mail_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_mail_max.setDescription('POP3 - mail max')
fwSS_POP3_mail_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 19), Unsigned32()).setLabel("fwSS-POP3-mail-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_mail_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_mail_curr.setDescription('POP3 - mail curr')
fwSS_POP3_mail_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 20), Unsigned32()).setLabel("fwSS-POP3-mail-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_mail_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_mail_count.setDescription('POP3 - mail count')
fwSS_POP3_outgoing_mail_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 21), Unsigned32()).setLabel("fwSS-POP3-outgoing-mail-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_outgoing_mail_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_outgoing_mail_max.setDescription('POP3 - outgoing mail max')
fwSS_POP3_outgoing_mail_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 22), Unsigned32()).setLabel("fwSS-POP3-outgoing-mail-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_outgoing_mail_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_outgoing_mail_curr.setDescription('POP3 - outgoing mail curr')
fwSS_POP3_outgoing_mail_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 23), Unsigned32()).setLabel("fwSS-POP3-outgoing-mail-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_outgoing_mail_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_outgoing_mail_count.setDescription('POP3 - outgoing mail count')
fwSS_POP3_max_mail_on_conn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 24), Unsigned32()).setLabel("fwSS-POP3-max-mail-on-conn").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_max_mail_on_conn.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_max_mail_on_conn.setDescription('POP3 - max mail on conn')
fwSS_POP3_total_mails = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 25), Unsigned32()).setLabel("fwSS-POP3-total-mails").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_total_mails.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_total_mails.setDescription('POP3 - total mails')
fwSS_POP3_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("fwSS-POP3-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_time_stamp.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_time_stamp.setDescription('POP3 - time stamp')
fwSS_POP3_is_alive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 27), Unsigned32()).setLabel("fwSS-POP3-is-alive").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_is_alive.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_is_alive.setDescription('POP3 - is alive')
fwSS_POP3_blocked_cnt = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 28), Unsigned32()).setLabel("fwSS-POP3-blocked-cnt").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_blocked_cnt.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_blocked_cnt.setDescription("count of POP3 items blocked, being classified as 'infected' by Anti Virus")
fwSS_POP3_blocked_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 29), Unsigned32()).setLabel("fwSS-POP3-blocked-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_blocked_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_blocked_total.setDescription('sum of all the counts of the previous OID (fwss-POP3-blocked-cnt)')
fwSS_POP3_scanned_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 30), Unsigned32()).setLabel("fwSS-POP3-scanned-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_scanned_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_scanned_total.setDescription("sum of all the counts of 'blocked' (infected) and 'passed' items")
fwSS_POP3_blocked_by_file_type = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 31), Unsigned32()).setLabel("fwSS-POP3-blocked-by-file-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_blocked_by_file_type.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_blocked_by_file_type.setDescription("count of POP3 items blocked by 'file type' policy in Content Inspection tab in SmartDashboard")
fwSS_POP3_blocked_by_size_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 32), Unsigned32()).setLabel("fwSS-POP3-blocked-by-size-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_blocked_by_size_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_blocked_by_size_limit.setDescription("count of POP3 items blocked by 'size limit' policy in Content Inspection tab in SmartDashboard")
fwSS_POP3_blocked_by_archive_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 33), Unsigned32()).setLabel("fwSS-POP3-blocked-by-archive-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_blocked_by_archive_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_blocked_by_archive_limit.setDescription("count of POP3 items blocked by 'archive limit' policy in Content Inspection tab in SmartDashboard")
fwSS_POP3_blocked_by_internal_error = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 34), Unsigned32()).setLabel("fwSS-POP3-blocked-by-internal-error").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_blocked_by_internal_error.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_blocked_by_internal_error.setDescription("count of POP3 items blocked because of 'internal error' in Content Inspection tab in SmartDashboard")
fwSS_POP3_passed_cnt = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 35), Unsigned32()).setLabel("fwSS-POP3-passed-cnt").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_passed_cnt.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_passed_cnt.setDescription("count of POP3 items passed, being classified as 'safe' by Anti Virus")
fwSS_POP3_passed_by_file_type = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 36), Unsigned32()).setLabel("fwSS-POP3-passed-by-file-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_passed_by_file_type.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_passed_by_file_type.setDescription("count of POP3 items allowed (without AV scan) by 'File Type' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_POP3_passed_by_size_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 37), Unsigned32()).setLabel("fwSS-POP3-passed-by-size-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_passed_by_size_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_passed_by_size_limit.setDescription("count of POP3 items allowed (without AV scan) by 'Size Limit' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_POP3_passed_by_archive_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 38), Unsigned32()).setLabel("fwSS-POP3-passed-by-archive-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_passed_by_archive_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_passed_by_archive_limit.setDescription("count of POP3 items allowed (without AV scan) by 'Archive Limit' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_POP3_passed_by_internal_error = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 39), Unsigned32()).setLabel("fwSS-POP3-passed-by-internal-error").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_passed_by_internal_error.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_passed_by_internal_error.setDescription("count of POP3 items allowed (without AV scan) by 'internal error' in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_POP3_passed_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 40), Unsigned32()).setLabel("fwSS-POP3-passed-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_passed_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_passed_total.setDescription("sum of all the above 'passed' counts - OIDs .35 to .39")
fwSS_POP3_blocked_by_AV_settings = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 41), Unsigned32()).setLabel("fwSS-POP3-blocked-by-AV-settings").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_blocked_by_AV_settings.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_blocked_by_AV_settings.setDescription("count of POP3 items rejected by Anti Virus as either: \n\t  \t\t        exceeding size or archive limits, or failed scan due to \n\t  \t\t        internal error (configured in the 'settings' pane in \n\t  \t\t        'Content Inspection' tab in SmartDashboard)")
fwSS_POP3_passed_by_AV_settings = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 42), Unsigned32()).setLabel("fwSS-POP3-passed-by-AV-settings").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_passed_by_AV_settings.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_passed_by_AV_settings.setDescription("count of POP3 items allowed by Anti Virus as either: \n\t  \t\t        exceeding size or archive limits, or failed scan due to \n\t  \t\t        internal error (configured in the 'settings' pane in \n\t  \t\t        'Content Inspection' tab in SmartDashboard)")
fwSS_total_blocked_by_av = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 1), Unsigned32()).setLabel("fwSS-total-blocked-by-av").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_blocked_by_av.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_blocked_by_av.setDescription('total blocked items for all services (HTTP,FTP,POP3,SMTP)')
fwSS_total_blocked = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 2), Unsigned32()).setLabel("fwSS-total-blocked").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_blocked.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_blocked.setDescription('total blocked items for all policies (filetype,size limit, archive limit,internal error)')
fwSS_total_scanned = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 3), Unsigned32()).setLabel("fwSS-total-scanned").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_scanned.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_scanned.setDescription('total scanned items for all services (HTTP,FTP,POP3,SMTP)')
fwSS_total_blocked_by_file_type = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 4), Unsigned32()).setLabel("fwSS-total-blocked-by-file-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_blocked_by_file_type.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_blocked_by_file_type.setDescription("total blocked items by 'File Type' policy for all services (HTTP,FTP,POP3,SMTP)")
fwSS_total_blocked_by_size_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 5), Unsigned32()).setLabel("fwSS-total-blocked-by-size-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_blocked_by_size_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_blocked_by_size_limit.setDescription("total blocked items by 'Size Limit' policy for all services (HTTP,FTP,POP3,SMTP)")
fwSS_total_blocked_by_archive_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 6), Unsigned32()).setLabel("fwSS-total-blocked-by-archive-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_blocked_by_archive_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_blocked_by_archive_limit.setDescription("total blocked items by 'Archive Limit' policy for all services (HTTP,FTP,POP3,SMTP)")
fwSS_total_blocked_by_interal_error = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 7), Unsigned32()).setLabel("fwSS-total-blocked-by-interal-error").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_blocked_by_interal_error.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_blocked_by_interal_error.setDescription("total blocked items by 'Internal Error' for all services (HTTP,FTP,POP3,SMTP)")
fwSS_total_passed_by_av = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 8), Unsigned32()).setLabel("fwSS-total-passed-by-av").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_passed_by_av.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_passed_by_av.setDescription('total passed items for all services (HTTP,FTP,POP3,SMTP)')
fwSS_total_passed_by_file_type = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 9), Unsigned32()).setLabel("fwSS-total-passed-by-file-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_passed_by_file_type.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_passed_by_file_type.setDescription("total passed items by 'File Type' policy for all services (HTTP,FTP,POP3,SMTP)")
fwSS_total_passed_by_size_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 10), Unsigned32()).setLabel("fwSS-total-passed-by-size-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_passed_by_size_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_passed_by_size_limit.setDescription("total passed items by 'Size Limit' policy for all services (HTTP,FTP,POP3,SMTP)")
fwSS_total_passed_by_archive_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 11), Unsigned32()).setLabel("fwSS-total-passed-by-archive-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_passed_by_archive_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_passed_by_archive_limit.setDescription("total blocked items by 'Archive Limit' policy for all services (HTTP,FTP,POP3,SMTP)")
fwSS_total_passed_by_interal_error = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 12), Unsigned32()).setLabel("fwSS-total-passed-by-interal-error").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_passed_by_interal_error.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_passed_by_interal_error.setDescription("total blocked items by 'Internal Error' for all services (HTTP,FTP,POP3,SMTP)")
fwSS_total_passed = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 13), Unsigned32()).setLabel("fwSS-total-passed").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_passed.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_passed.setDescription('total passed items for all policies (filetype,size limit, archive limit,internal error)')
fwSS_total_blocked_by_av_settings = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 14), Unsigned32()).setLabel("fwSS-total-blocked-by-av-settings").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_blocked_by_av_settings.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_blocked_by_av_settings.setDescription('total blocked items by AV settings')
fwSS_total_passed_by_av_settings = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 15), Unsigned32()).setLabel("fwSS-total-passed-by-av-settings").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_passed_by_av_settings.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_passed_by_av_settings.setDescription('total passed items by AV settings')
fwConnectionsStatConnectionsTcp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 11, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwConnectionsStatConnectionsTcp.setStatus('current')
if mibBuilder.loadTexts: fwConnectionsStatConnectionsTcp.setDescription('tcp connections passing through the FireWall-1 Module')
fwConnectionsStatConnectionsUdp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 11, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwConnectionsStatConnectionsUdp.setStatus('current')
if mibBuilder.loadTexts: fwConnectionsStatConnectionsUdp.setDescription('udp connections passing through the FireWall-1 Module')
fwConnectionsStatConnectionsIcmp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 11, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwConnectionsStatConnectionsIcmp.setStatus('current')
if mibBuilder.loadTexts: fwConnectionsStatConnectionsIcmp.setDescription('icmp connections passing through the FireWall-1 Module')
fwConnectionsStatConnectionsOther = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 11, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwConnectionsStatConnectionsOther.setStatus('current')
if mibBuilder.loadTexts: fwConnectionsStatConnectionsOther.setDescription('other connections passing through the FireWall-1 Module')
fwConnectionsStatConnections = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 11, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwConnectionsStatConnections.setStatus('current')
if mibBuilder.loadTexts: fwConnectionsStatConnections.setDescription('total connections passing through the FireWall-1 Module')
fwConnectionsStatConnectionRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 11, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwConnectionsStatConnectionRate.setStatus('current')
if mibBuilder.loadTexts: fwConnectionsStatConnectionRate.setDescription('connection rate (per second) passing through the FireWall-1 Module')
fwHmem64_block_size = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 1), Counter64()).setLabel("fwHmem64-block-size").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_block_size.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_block_size.setDescription('hmem - block size')
fwHmem64_requested_bytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 2), Counter64()).setLabel("fwHmem64-requested-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_requested_bytes.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_requested_bytes.setDescription('hmem - requested bytes')
fwHmem64_initial_allocated_bytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 3), Counter64()).setLabel("fwHmem64-initial-allocated-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_initial_allocated_bytes.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_initial_allocated_bytes.setDescription('hmem - initial allocated bytes')
fwHmem64_initial_allocated_blocks = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 4), Unsigned32()).setLabel("fwHmem64-initial-allocated-blocks").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_initial_allocated_blocks.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_initial_allocated_blocks.setDescription('hmem - initial allocated blocks')
fwHmem64_initial_allocated_pools = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 5), Unsigned32()).setLabel("fwHmem64-initial-allocated-pools").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_initial_allocated_pools.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_initial_allocated_pools.setDescription('hmem - initial allocated pools')
fwHmem64_current_allocated_bytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 6), Counter64()).setLabel("fwHmem64-current-allocated-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_current_allocated_bytes.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_current_allocated_bytes.setDescription('hmem - current allocated bytes')
fwHmem64_current_allocated_blocks = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 7), Unsigned32()).setLabel("fwHmem64-current-allocated-blocks").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_current_allocated_blocks.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_current_allocated_blocks.setDescription('hmem - current allocated blocks')
fwHmem64_current_allocated_pools = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 8), Unsigned32()).setLabel("fwHmem64-current-allocated-pools").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_current_allocated_pools.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_current_allocated_pools.setDescription('hmem - current allocated pools')
fwHmem64_maximum_bytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 9), Counter64()).setLabel("fwHmem64-maximum-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_maximum_bytes.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_maximum_bytes.setDescription('hmem - maximum bytes')
fwHmem64_maximum_pools = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 10), Unsigned32()).setLabel("fwHmem64-maximum-pools").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_maximum_pools.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_maximum_pools.setDescription('hmem - maximum pools')
fwHmem64_bytes_used = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 11), Counter64()).setLabel("fwHmem64-bytes-used").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_bytes_used.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_bytes_used.setDescription('hmem - bytes used')
fwHmem64_blocks_used = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 12), Unsigned32()).setLabel("fwHmem64-blocks-used").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_blocks_used.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_blocks_used.setDescription('hmem - blocks used')
fwHmem64_bytes_unused = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 13), Counter64()).setLabel("fwHmem64-bytes-unused").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_bytes_unused.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_bytes_unused.setDescription('hmem - bytes unused')
fwHmem64_blocks_unused = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 14), Unsigned32()).setLabel("fwHmem64-blocks-unused").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_blocks_unused.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_blocks_unused.setDescription('hmem - blocks unused')
fwHmem64_bytes_peak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 15), Counter64()).setLabel("fwHmem64-bytes-peak").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_bytes_peak.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_bytes_peak.setDescription('hmem - bytes peak')
fwHmem64_blocks_peak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 16), Unsigned32()).setLabel("fwHmem64-blocks-peak").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_blocks_peak.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_blocks_peak.setDescription('hmem - blocks peak')
fwHmem64_bytes_internal_use = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 17), Unsigned32()).setLabel("fwHmem64-bytes-internal-use").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_bytes_internal_use.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_bytes_internal_use.setDescription('hmem - bytes internal use')
fwHmem64_number_of_items = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 18), Counter64()).setLabel("fwHmem64-number-of-items").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_number_of_items.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_number_of_items.setDescription('hmem - number of items')
fwHmem64_alloc_operations = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 19), Unsigned32()).setLabel("fwHmem64-alloc-operations").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_alloc_operations.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_alloc_operations.setDescription('hmem - alloc operations')
fwHmem64_free_operations = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 20), Unsigned32()).setLabel("fwHmem64-free-operations").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_free_operations.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_free_operations.setDescription('hmem - free operations')
fwHmem64_failed_alloc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 21), Unsigned32()).setLabel("fwHmem64-failed-alloc").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_failed_alloc.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_failed_alloc.setDescription('hmem - failed alloc')
fwHmem64_failed_free = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 22), Unsigned32()).setLabel("fwHmem64-failed-free").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_failed_free.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_failed_free.setDescription('hmem - failed free')
fwNetIfTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27), )
if mibBuilder.loadTexts: fwNetIfTable.setStatus('current')
if mibBuilder.loadTexts: fwNetIfTable.setDescription('No description available')
fwNetIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwNetIfIndex"))
if mibBuilder.loadTexts: fwNetIfEntry.setStatus('current')
if mibBuilder.loadTexts: fwNetIfEntry.setDescription('No description available')
fwNetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fwNetIfIndex.setStatus('current')
if mibBuilder.loadTexts: fwNetIfIndex.setDescription('No description available')
fwNetIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfName.setStatus('current')
if mibBuilder.loadTexts: fwNetIfName.setDescription('Interface Name')
fwNetIfIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfIPAddr.setStatus('current')
if mibBuilder.loadTexts: fwNetIfIPAddr.setDescription('IPv4 Address (an empty address will be denoted by 0.0.0.0)')
fwNetIfNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfNetmask.setStatus('current')
if mibBuilder.loadTexts: fwNetIfNetmask.setDescription('Network Mask of the GW behind the Bridge (an empty mask will be denoted by 0.0.0.0)')
fwNetIfFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfFlags.setStatus('current')
if mibBuilder.loadTexts: fwNetIfFlags.setDescription('Flags indicating the type(s) of the device: \n\t  \t\t         Possible values include:\n\t  \t\t         VPN tunnel device\t1\n\t\t\t\t\t Unnumbered device\t2\n\t\t\t\t\t Proxy device\t\t4\n\t\t\t\t\t Bridge\t\t\t8\n\t\t\t\t\t Bond\t\t\t16\n\t\t\t\t\t Slave\t\t\t32 (e.g. belongs to a bond or bridge device)')
fwNetIfPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfPeerName.setStatus('current')
if mibBuilder.loadTexts: fwNetIfPeerName.setDescription('VPN Tunnel Peer Name')
fwNetIfRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfRemoteIp.setStatus('current')
if mibBuilder.loadTexts: fwNetIfRemoteIp.setDescription('VPN Tunnel Remote IP')
fwNetIfTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfTopology.setStatus('current')
if mibBuilder.loadTexts: fwNetIfTopology.setDescription('Planned for future use only - currently should have the constant value of 4')
fwNetIfProxyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfProxyName.setStatus('current')
if mibBuilder.loadTexts: fwNetIfProxyName.setDescription('VPN Tunnel Proxy Name')
fwNetIfSlaves = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfSlaves.setStatus('current')
if mibBuilder.loadTexts: fwNetIfSlaves.setDescription('If this device is acting as a master, this string contains space separated names of all its slave devices.')
fwNetIfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfPorts.setStatus('current')
if mibBuilder.loadTexts: fwNetIfPorts.setDescription('Given an interface which is a port in a bridge, list all its siblings interfaces. The interfaces are separated by a single space.')
fwNetIfIPV6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfIPV6Addr.setStatus('current')
if mibBuilder.loadTexts: fwNetIfIPV6Addr.setDescription(' IPv6 Address given in an hexa format .')
fwNetIfIPV6AddrLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfIPV6AddrLen.setStatus('current')
if mibBuilder.loadTexts: fwNetIfIPV6AddrLen.setDescription('IPv6 Address length')
fwLSConn = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30))
fwLSConnOverall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLSConnOverall.setStatus('current')
if mibBuilder.loadTexts: fwLSConnOverall.setDescription('Connectivity with log servers, Ok(0), Warnning(1) and Error(2)')
fwLSConnOverallDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLSConnOverallDesc.setStatus('current')
if mibBuilder.loadTexts: fwLSConnOverallDesc.setDescription('Description of connectivity status with log servers')
fwLSConnTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 3), )
if mibBuilder.loadTexts: fwLSConnTable.setStatus('current')
if mibBuilder.loadTexts: fwLSConnTable.setDescription('No description available')
fwLocalLoggingDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLocalLoggingDesc.setStatus('current')
if mibBuilder.loadTexts: fwLocalLoggingDesc.setDescription('Description of local logging status')
fwLocalLoggingStat = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLocalLoggingStat.setStatus('current')
if mibBuilder.loadTexts: fwLocalLoggingStat.setDescription('Writing logs localy, To log servers(0), Local configured (1) Local due to connectivity(2) Local due to high rate(3)')
fwLocalLoggingWriteRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLocalLoggingWriteRate.setStatus('current')
if mibBuilder.loadTexts: fwLocalLoggingWriteRate.setDescription('Local Logging Writing Rate')
fwLoggingHandlingRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLoggingHandlingRate.setStatus('current')
if mibBuilder.loadTexts: fwLoggingHandlingRate.setDescription('Total Logging Handling Rate (Local writing and Sending to Log Server)')
fwLSConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 3, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwLSConnIndex"))
if mibBuilder.loadTexts: fwLSConnEntry.setStatus('current')
if mibBuilder.loadTexts: fwLSConnEntry.setDescription('No description available')
fwLSConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fwLSConnIndex.setStatus('current')
if mibBuilder.loadTexts: fwLSConnIndex.setDescription('No description available')
fwLSConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLSConnName.setStatus('current')
if mibBuilder.loadTexts: fwLSConnName.setDescription('Log Server Name\\IP')
fwLSConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLSConnState.setStatus('current')
if mibBuilder.loadTexts: fwLSConnState.setDescription('Connectivity state with the log server Ok(0), Error(1) and Not Active(2)')
fwLSConnStateDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLSConnStateDesc.setStatus('current')
if mibBuilder.loadTexts: fwLSConnStateDesc.setDescription('Description of connectivity state with the log server')
fwLSConnSendRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLSConnSendRate.setStatus('current')
if mibBuilder.loadTexts: fwLSConnSendRate.setDescription('Logs Sending Rate to the Log Server')
fwInstancesCPU = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 31))
fwInstancesCPUTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 1, 31, 1), )
if mibBuilder.loadTexts: fwInstancesCPUTable.setStatus('current')
if mibBuilder.loadTexts: fwInstancesCPUTable.setDescription('OID to present the CPU usage of all instances of the fw')
fwInstancesCPUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 1, 31, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwInstancesCPUInstanceName"))
if mibBuilder.loadTexts: fwInstancesCPUEntry.setStatus('current')
if mibBuilder.loadTexts: fwInstancesCPUEntry.setDescription('No description available')
fwInstancesCPUInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 31, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwInstancesCPUInstanceName.setStatus('current')
if mibBuilder.loadTexts: fwInstancesCPUInstanceName.setDescription('Name of instance thread')
fwInstancesCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 31, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwInstancesCPUUsage.setStatus('current')
if mibBuilder.loadTexts: fwInstancesCPUUsage.setDescription('Current CPU usage percent')
fwInstancesCPUTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 31, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwInstancesCPUTotal.setStatus('current')
if mibBuilder.loadTexts: fwInstancesCPUTotal.setDescription('OID to present the total CPU usage of all instances of the fw')
fwSXLGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1))
fwSXLStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLStatus.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatus.setDescription('The current status of SecureXL. ')
fwSXLConnsExisting = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLConnsExisting.setStatus('current')
if mibBuilder.loadTexts: fwSXLConnsExisting.setDescription('The number of existing connections handled by SecureXL. ')
fwSXLConnsAdded = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLConnsAdded.setStatus('current')
if mibBuilder.loadTexts: fwSXLConnsAdded.setDescription('The number of connections added by SecureXL. ')
fwSXLConnsDeleted = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLConnsDeleted.setStatus('current')
if mibBuilder.loadTexts: fwSXLConnsDeleted.setDescription('The number of connections deleted by SecureXL. ')
fwSXLStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5))
fwSXLStatisticsAggregate = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1))
fwSXLStatAggregateThroughputTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 1), )
if mibBuilder.loadTexts: fwSXLStatAggregateThroughputTable.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatAggregateThroughputTable.setDescription('No description available')
fwSXLStatAggregateThroughputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwSXLAggrThroughputIndex"))
if mibBuilder.loadTexts: fwSXLStatAggregateThroughputEntry.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatAggregateThroughputEntry.setDescription('No description available')
fwSXLAggrThroughputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fwSXLAggrThroughputIndex.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrThroughputIndex.setDescription('Dummy index. ')
fwSXLAggrRxMbits = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrRxMbits.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrRxMbits.setDescription('Number of RX bytes. ')
fwSXLAggrTxMbits = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrTxMbits.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrTxMbits.setDescription('Number of TX bytes. ')
fwSXLAggrInboundKbitsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrInboundKbitsPerSecond.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrInboundKbitsPerSecond.setDescription('Inbound Kbits per second. ')
fwSXLAggrOutboundKbitsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrOutboundKbitsPerSecond.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrOutboundKbitsPerSecond.setDescription('Outbound Kbits per second. ')
fwSXLAggrInboundpacketsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrInboundpacketsPerSecond.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrInboundpacketsPerSecond.setDescription('Inbound packets per second. ')
fwSXLAggrOutboundpacketsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrOutboundpacketsPerSecond.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrOutboundpacketsPerSecond.setDescription('Outbound packets per second. ')
fwSXLAggrConnectionsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrConnectionsPerSecond.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrConnectionsPerSecond.setDescription('Connection rate per second. ')
fwSXLAggrConcurrentConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrConcurrentConnections.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrConcurrentConnections.setDescription('Concurrent connections number. ')
fwSXLStatAggregateNotificationsTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 2), )
if mibBuilder.loadTexts: fwSXLStatAggregateNotificationsTable.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatAggregateNotificationsTable.setDescription('No description available')
fwSXLStatAggregateNotificationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 2, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwSXLAggrNotificationsIndex"))
if mibBuilder.loadTexts: fwSXLStatAggregateNotificationsEntry.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatAggregateNotificationsEntry.setDescription('No description available')
fwSXLAggrNotificationsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fwSXLAggrNotificationsIndex.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrNotificationsIndex.setDescription('Dummy index. ')
fwSXLAggrPpak2FwNotificationsSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrPpak2FwNotificationsSuccessful.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrPpak2FwNotificationsSuccessful.setDescription('Number of successful notifications from ppak to firewall. ')
fwSXLAggrPpak2FwNotificationsFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrPpak2FwNotificationsFailure.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrPpak2FwNotificationsFailure.setDescription('Number of failed notifications from ppak to firewall. ')
fwSXLAggrFw2PpakNotificationsSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrFw2PpakNotificationsSuccessful.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrFw2PpakNotificationsSuccessful.setDescription('Number of successful notifications from firewall to ppak. ')
fwSXLAggrFw2PpakNotificationsFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrFw2PpakNotificationsFailure.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrFw2PpakNotificationsFailure.setDescription('Number of failed notifications from firewall to ppak. ')
fwSXLStatAggregateDropsTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 3), )
if mibBuilder.loadTexts: fwSXLStatAggregateDropsTable.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatAggregateDropsTable.setDescription('No description available')
fwSXLStatAggregateDropsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 3, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwSXLAggrDropsIndex"))
if mibBuilder.loadTexts: fwSXLStatAggregateDropsEntry.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatAggregateDropsEntry.setDescription('No description available')
fwSXLAggrDropsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fwSXLAggrDropsIndex.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrDropsIndex.setDescription('Dummy index. ')
fwSXLAggrDropsTotPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrDropsTotPackets.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrDropsTotPackets.setDescription('Total dropped packets number. ')
fwSXLAggrDropsPxlDecision = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrDropsPxlDecision.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrDropsPxlDecision.setDescription('Packets dropped due to PXL decision. ')
fwSXLAggrDropsFragmentationError = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrDropsFragmentationError.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrDropsFragmentationError.setDescription('Packets dropped due to fragmentation error. ')
fwSXLAggrDropsF2FNotAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrDropsF2FNotAllowed.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrDropsF2FNotAllowed.setDescription('Packets dropped due to F2F not being allowed. ')
fwSXLAggrDropsHeavyLoadTcpViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrDropsHeavyLoadTcpViolation.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrDropsHeavyLoadTcpViolation.setDescription('Packets dropped due to TCP violation during heavy load. ')
fwSXLAggrDropsCorruptPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrDropsCorruptPacket.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrDropsCorruptPacket.setDescription('Packets dropped due to being corrupt. ')
fwSXLAggrDropsHeavyLoadNewConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrDropsHeavyLoadNewConnection.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrDropsHeavyLoadNewConnection.setDescription('Packets dropped due to being new connections during heavy load. ')
fwSXLAggrDropsClearPacketOnVPN = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrDropsClearPacketOnVPN.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrDropsClearPacketOnVPN.setDescription('VPN packets dropped due to being sent unencrypted. ')
fwSXLAggrDropsEncryptionFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrDropsEncryptionFailed.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrDropsEncryptionFailed.setDescription('Packets dropped due to encryption failure. ')
fwSXLAggrDropsDropTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrDropsDropTemplate.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrDropsDropTemplate.setDescription('Packets dropped due to drop template. ')
fwSXLAggrDropsDecryptionFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrDropsDecryptionFailed.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrDropsDecryptionFailed.setDescription('Packets dropped due to decryption failure. ')
fwSXLAggrDropsOutboundConnNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrDropsOutboundConnNotFound.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrDropsOutboundConnNotFound.setDescription('Packets dropped due to missing outbound connection. ')
fwSXLAggrDropsInterfaceDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrDropsInterfaceDown.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrDropsInterfaceDown.setDescription('Packets dropped due to interface being down. ')
fwSXLAggrDropsClusterError = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrDropsClusterError.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrDropsClusterError.setDescription('Packets dropped due to cluster error. ')
fwSXLAggrDropsXmlError = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrDropsXmlError.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrDropsXmlError.setDescription('Packets dropped due to XML error. ')
fwSXLAggrDropsAntiSpoofing = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrDropsAntiSpoofing.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrDropsAntiSpoofing.setDescription('Packets dropped due to anti spoofing. ')
fwSXLAggrDropsSanityError = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrDropsSanityError.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrDropsSanityError.setDescription('Packets dropped due to sanity error. ')
fwSXLAggrDropsQxlDecision = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrDropsQxlDecision.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrDropsQxlDecision.setDescription('Packets dropped due to QXL decision. ')
fwSXLAggrDropsLoopPrevention = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 1, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLAggrDropsLoopPrevention.setStatus('current')
if mibBuilder.loadTexts: fwSXLAggrDropsLoopPrevention.setDescription('Packets dropped due to loop prevention. ')
fwSXLStatisticsHost = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2))
fwSXLStatHostThroughputTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 1), )
if mibBuilder.loadTexts: fwSXLStatHostThroughputTable.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatHostThroughputTable.setDescription('No description available')
fwSXLStatHostThroughputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwSXLHostThroughputIndex"))
if mibBuilder.loadTexts: fwSXLStatHostThroughputEntry.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatHostThroughputEntry.setDescription('No description available')
fwSXLHostThroughputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fwSXLHostThroughputIndex.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostThroughputIndex.setDescription('Dummy index. ')
fwSXLHostRxMbits = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostRxMbits.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostRxMbits.setDescription('Number of RX bytes. ')
fwSXLHostTxMbits = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostTxMbits.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostTxMbits.setDescription('Number of TX bytes. ')
fwSXLHostInboundKbitsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInboundKbitsPerSecond.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInboundKbitsPerSecond.setDescription('Inbound Kbits per second. ')
fwSXLHostOutboundKbitsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostOutboundKbitsPerSecond.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostOutboundKbitsPerSecond.setDescription('Outbound Kbits per second. ')
fwSXLHostInboundpacketsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInboundpacketsPerSecond.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInboundpacketsPerSecond.setDescription('Inbound packets per second. ')
fwSXLHostOutboundpacketsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostOutboundpacketsPerSecond.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostOutboundpacketsPerSecond.setDescription('Outbound packets per second. ')
fwSXLHostConnectionsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostConnectionsPerSecond.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostConnectionsPerSecond.setDescription('Connection rate per second. ')
fwSXLHostConcurrentConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostConcurrentConnections.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostConcurrentConnections.setDescription('Concurrent connections number. ')
fwSXLStatHostNotificationsTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 2), )
if mibBuilder.loadTexts: fwSXLStatHostNotificationsTable.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatHostNotificationsTable.setDescription('No description available')
fwSXLStatHostNotificationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 2, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwSXLHostNotificationsIndex"))
if mibBuilder.loadTexts: fwSXLStatHostNotificationsEntry.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatHostNotificationsEntry.setDescription('No description available')
fwSXLHostNotificationsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fwSXLHostNotificationsIndex.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostNotificationsIndex.setDescription('Dummy index. ')
fwSXLHostPpak2FwNotificationsSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostPpak2FwNotificationsSuccessful.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostPpak2FwNotificationsSuccessful.setDescription('Number of successful notifications from ppak to firewall. ')
fwSXLHostPpak2FwNotificationsFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostPpak2FwNotificationsFailure.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostPpak2FwNotificationsFailure.setDescription('Number of failed notifications from ppak to firewall. ')
fwSXLHostFw2PpakNotificationsSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostFw2PpakNotificationsSuccessful.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostFw2PpakNotificationsSuccessful.setDescription('Number of successful notifications from firewall to ppak. ')
fwSXLHostFw2PpakNotificationsFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostFw2PpakNotificationsFailure.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostFw2PpakNotificationsFailure.setDescription('Number of failed notifications from firewall to ppak. ')
fwSXLStatHostDropsTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 3), )
if mibBuilder.loadTexts: fwSXLStatHostDropsTable.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatHostDropsTable.setDescription('No description available')
fwSXLStatHostDropsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 3, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwSXLHostDropsIndex"))
if mibBuilder.loadTexts: fwSXLStatHostDropsEntry.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatHostDropsEntry.setDescription('No description available')
fwSXLHostDropsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fwSXLHostDropsIndex.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostDropsIndex.setDescription('Dummy index. ')
fwSXLHostDropsTotPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostDropsTotPackets.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostDropsTotPackets.setDescription('Total dropped packets number. ')
fwSXLHostDropsPxlDecision = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostDropsPxlDecision.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostDropsPxlDecision.setDescription('Packets dropped due to PXL decision. ')
fwSXLHostDropsFragmentationError = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostDropsFragmentationError.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostDropsFragmentationError.setDescription('Packets dropped due to fragmentation error. ')
fwSXLHostDropsF2FNotAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostDropsF2FNotAllowed.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostDropsF2FNotAllowed.setDescription('Packets dropped due to F2F not being allowed. ')
fwSXLHostDropsHeavyLoadTcpViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostDropsHeavyLoadTcpViolation.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostDropsHeavyLoadTcpViolation.setDescription('Packets dropped due to TCP violation during heavy load. ')
fwSXLHostDropsCorruptPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostDropsCorruptPacket.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostDropsCorruptPacket.setDescription('Packets dropped due to being corrupt. ')
fwSXLHostDropsHeavyLoadNewConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostDropsHeavyLoadNewConnection.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostDropsHeavyLoadNewConnection.setDescription('Packets dropped due to being new connections during heavy load. ')
fwSXLHostDropsClearPacketOnVPN = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostDropsClearPacketOnVPN.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostDropsClearPacketOnVPN.setDescription('VPN packets dropped due to being sent unencrypted. ')
fwSXLHostDropsEncryptionFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostDropsEncryptionFailed.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostDropsEncryptionFailed.setDescription('Packets dropped due to encryption failure. ')
fwSXLHostDropsDropTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostDropsDropTemplate.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostDropsDropTemplate.setDescription('Packets dropped due to drop template. ')
fwSXLHostDropsDecryptionFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostDropsDecryptionFailed.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostDropsDecryptionFailed.setDescription('Packets dropped due to decryption failure. ')
fwSXLHostDropsOutboundConnNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostDropsOutboundConnNotFound.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostDropsOutboundConnNotFound.setDescription('Packets dropped due to missing outbound connection. ')
fwSXLHostDropsInterfaceDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostDropsInterfaceDown.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostDropsInterfaceDown.setDescription('Packets dropped due to interface being down. ')
fwSXLHostDropsClusterError = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostDropsClusterError.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostDropsClusterError.setDescription('Packets dropped due to cluster error. ')
fwSXLHostDropsXmlError = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostDropsXmlError.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostDropsXmlError.setDescription('Packets dropped due to XML error. ')
fwSXLHostDropsAntiSpoofing = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostDropsAntiSpoofing.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostDropsAntiSpoofing.setDescription('Packets dropped due to anti spoofing. ')
fwSXLHostDropsSanityError = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostDropsSanityError.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostDropsSanityError.setDescription('Packets dropped due to sanity error. ')
fwSXLHostDropsQxlDecision = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostDropsQxlDecision.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostDropsQxlDecision.setDescription('Packets dropped due to QXL decision. ')
fwSXLHostDropsLoopPrevention = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostDropsLoopPrevention.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostDropsLoopPrevention.setDescription('Packets dropped due to loop prevention. ')
fwSXLStatHostInterfacesTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4), )
if mibBuilder.loadTexts: fwSXLStatHostInterfacesTable.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatHostInterfacesTable.setDescription('No description available')
fwSXLStatHostInterfacesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwSXLHostInterfacesIndex"))
if mibBuilder.loadTexts: fwSXLStatHostInterfacesEntry.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatHostInterfacesEntry.setDescription('No description available')
fwSXLHostInterfacesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fwSXLHostInterfacesIndex.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterfacesIndex.setDescription('Dummy index. ')
fwSXLHostInterface0Name = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface0Name.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface0Name.setDescription("Name of SXL's interface 0. ")
fwSXLHostInterface1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface1Name.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface1Name.setDescription("Name of SXL's interface 1. ")
fwSXLHostInterface2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface2Name.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface2Name.setDescription("Name of SXL's interface 2. ")
fwSXLHostInterface3Name = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface3Name.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface3Name.setDescription("Name of SXL's interface 3. ")
fwSXLHostInterface4Name = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface4Name.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface4Name.setDescription("Name of SXL's interface 4. ")
fwSXLHostInterface5Name = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface5Name.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface5Name.setDescription("Name of SXL's interface 5. ")
fwSXLHostInterface6Name = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface6Name.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface6Name.setDescription("Name of SXL's interface 6. ")
fwSXLHostInterface7Name = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface7Name.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface7Name.setDescription("Name of SXL's interface 7. ")
fwSXLHostInterface0Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface0Speed.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface0Speed.setDescription("Speed of SXL's interface 0. ")
fwSXLHostInterface1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface1Speed.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface1Speed.setDescription("Speed of SXL's interface 1. ")
fwSXLHostInterface2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface2Speed.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface2Speed.setDescription("Speed of SXL's interface 2. ")
fwSXLHostInterface3Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface3Speed.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface3Speed.setDescription("Speed of SXL's interface 3. ")
fwSXLHostInterface4Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface4Speed.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface4Speed.setDescription("Speed of SXL's interface 4. ")
fwSXLHostInterface5Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface5Speed.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface5Speed.setDescription("Speed of SXL's interface 5. ")
fwSXLHostInterface6Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface6Speed.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface6Speed.setDescription("Speed of SXL's interface 6. ")
fwSXLHostInterface7Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface7Speed.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface7Speed.setDescription("Speed of SXL's interface 7. ")
fwSXLHostInterface0State = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface0State.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface0State.setDescription("State of SXL's interface 0. ")
fwSXLHostInterface1State = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface1State.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface1State.setDescription("State of SXL's interface 1. ")
fwSXLHostInterface2State = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface2State.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface2State.setDescription("State of SXL's interface 2. ")
fwSXLHostInterface3State = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface3State.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface3State.setDescription("State of SXL's interface 3. ")
fwSXLHostInterface4State = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface4State.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface4State.setDescription("State of SXL's interface 4. ")
fwSXLHostInterface5State = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface5State.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface5State.setDescription("State of SXL's interface 5. ")
fwSXLHostInterface6State = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface6State.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface6State.setDescription("State of SXL's interface 6. ")
fwSXLHostInterface7State = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 4, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostInterface7State.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostInterface7State.setDescription("State of SXL's interface 7. ")
fwSXLStatHostGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 5), )
if mibBuilder.loadTexts: fwSXLStatHostGeneralTable.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatHostGeneralTable.setDescription('No description available')
fwSXLStatHostGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 5, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwSXLHostGeneralIndex"))
if mibBuilder.loadTexts: fwSXLStatHostGeneralEntry.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatHostGeneralEntry.setDescription('No description available')
fwSXLHostGeneralIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fwSXLHostGeneralIndex.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostGeneralIndex.setDescription('Dummy index. ')
fwSXLHostState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 2, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLHostState.setStatus('current')
if mibBuilder.loadTexts: fwSXLHostState.setDescription("The SXL's status. ")
fwSXLStatisticsFalcons = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3))
fwSXLStatFalconsThroughputTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 1), )
if mibBuilder.loadTexts: fwSXLStatFalconsThroughputTable.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatFalconsThroughputTable.setDescription('No description available')
fwSXLStatFalconsThroughputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwSXLFalconsThroughputIndex"))
if mibBuilder.loadTexts: fwSXLStatFalconsThroughputEntry.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatFalconsThroughputEntry.setDescription('No description available')
fwSXLFalconsThroughputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fwSXLFalconsThroughputIndex.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsThroughputIndex.setDescription('Dummy index. ')
fwSXLFalconsRxMbits = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsRxMbits.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsRxMbits.setDescription('Number of RX bytes. ')
fwSXLFalconsTxMbits = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsTxMbits.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsTxMbits.setDescription('Number of TX bytes. ')
fwSXLFalconsInboundKbitsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInboundKbitsPerSecond.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInboundKbitsPerSecond.setDescription('Inbound Kbits per second. ')
fwSXLFalconsOutboundKbitsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsOutboundKbitsPerSecond.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsOutboundKbitsPerSecond.setDescription('Outbound Kbits per second. ')
fwSXLFalconsInboundpacketsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInboundpacketsPerSecond.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInboundpacketsPerSecond.setDescription('Inbound packets per second. ')
fwSXLFalconsOutboundpacketsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsOutboundpacketsPerSecond.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsOutboundpacketsPerSecond.setDescription('Outbound packets per second. ')
fwSXLFalconsConnectionsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsConnectionsPerSecond.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsConnectionsPerSecond.setDescription('Connection rate per second. ')
fwSXLFalconsConcurrentConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsConcurrentConnections.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsConcurrentConnections.setDescription('Concurrent connections number. ')
fwSXLStatFalconsNotificationsTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 2), )
if mibBuilder.loadTexts: fwSXLStatFalconsNotificationsTable.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatFalconsNotificationsTable.setDescription('No description available')
fwSXLStatFalconsNotificationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 2, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwSXLFalconsNotificationsIndex"))
if mibBuilder.loadTexts: fwSXLStatFalconsNotificationsEntry.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatFalconsNotificationsEntry.setDescription('No description available')
fwSXLFalconsNotificationsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fwSXLFalconsNotificationsIndex.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsNotificationsIndex.setDescription('Dummy index. ')
fwSXLFalconsPpak2FwNotificationsSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsPpak2FwNotificationsSuccessful.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsPpak2FwNotificationsSuccessful.setDescription('Number of successful notifications from ppak to firewall. ')
fwSXLFalconsPpak2FwNotificationsFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsPpak2FwNotificationsFailure.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsPpak2FwNotificationsFailure.setDescription('Number of failed notifications from ppak to firewall. ')
fwSXLFalconsFw2PpakNotificationsSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsFw2PpakNotificationsSuccessful.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsFw2PpakNotificationsSuccessful.setDescription('Number of successful notifications from firewall to ppak. ')
fwSXLFalconsFw2PpakNotificationsFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsFw2PpakNotificationsFailure.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsFw2PpakNotificationsFailure.setDescription('Number of failed notifications from firewall to ppak. ')
fwSXLStatFalconsDropsTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 3), )
if mibBuilder.loadTexts: fwSXLStatFalconsDropsTable.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatFalconsDropsTable.setDescription('No description available')
fwSXLStatFalconsDropsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 3, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwSXLFalconsDropsIndex"))
if mibBuilder.loadTexts: fwSXLStatFalconsDropsEntry.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatFalconsDropsEntry.setDescription('No description available')
fwSXLFalconsDropsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fwSXLFalconsDropsIndex.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsDropsIndex.setDescription('Dummy index. ')
fwSXLFalconsDropsTotPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsDropsTotPackets.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsDropsTotPackets.setDescription('Total dropped packets number. ')
fwSXLFalconsDropsPxlDecision = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsDropsPxlDecision.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsDropsPxlDecision.setDescription('Packets dropped due to PXL decision. ')
fwSXLFalconsDropsFragmentationError = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsDropsFragmentationError.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsDropsFragmentationError.setDescription('Packets dropped due to fragmentation error. ')
fwSXLFalconsDropsF2FNotAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsDropsF2FNotAllowed.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsDropsF2FNotAllowed.setDescription('Packets dropped due to F2F not being allowed. ')
fwSXLFalconsDropsHeavyLoadTcpViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsDropsHeavyLoadTcpViolation.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsDropsHeavyLoadTcpViolation.setDescription('Packets dropped due to TCP violation during heavy load. ')
fwSXLFalconsDropsCorruptPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsDropsCorruptPacket.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsDropsCorruptPacket.setDescription('Packets dropped due to being corrupt. ')
fwSXLFalconsDropsHeavyLoadNewConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsDropsHeavyLoadNewConnection.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsDropsHeavyLoadNewConnection.setDescription('Packets dropped due to being new connections during heavy load. ')
fwSXLFalconsDropsClearPacketOnVPN = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsDropsClearPacketOnVPN.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsDropsClearPacketOnVPN.setDescription('VPN packets dropped due to being sent unencrypted. ')
fwSXLFalconsDropsEncryptionFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsDropsEncryptionFailed.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsDropsEncryptionFailed.setDescription('Packets dropped due to encryption failure. ')
fwSXLFalconsDropsDropTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsDropsDropTemplate.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsDropsDropTemplate.setDescription('Packets dropped due to drop template. ')
fwSXLFalconsDropsDecryptionFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsDropsDecryptionFailed.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsDropsDecryptionFailed.setDescription('Packets dropped due to decryption failure. ')
fwSXLFalconsDropsOutboundConnNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsDropsOutboundConnNotFound.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsDropsOutboundConnNotFound.setDescription('Packets dropped due to missing outbound connection. ')
fwSXLFalconsDropsInterfaceDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsDropsInterfaceDown.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsDropsInterfaceDown.setDescription('Packets dropped due to interface being down. ')
fwSXLFalconsDropsClusterError = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsDropsClusterError.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsDropsClusterError.setDescription('Packets dropped due to cluster error. ')
fwSXLFalconsDropsXmlError = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsDropsXmlError.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsDropsXmlError.setDescription('Packets dropped due to XML error. ')
fwSXLFalconsDropsAntiSpoofing = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsDropsAntiSpoofing.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsDropsAntiSpoofing.setDescription('Packets dropped due to anti spoofing. ')
fwSXLFalconsDropsSanityError = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsDropsSanityError.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsDropsSanityError.setDescription('Packets dropped due to sanity error. ')
fwSXLFalconsDropsQxlDecision = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsDropsQxlDecision.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsDropsQxlDecision.setDescription('Packets dropped due to QXL decision. ')
fwSXLFalconsDropsLoopPrevention = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsDropsLoopPrevention.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsDropsLoopPrevention.setDescription('Packets dropped due to loop prevention. ')
fwSXLStatFalconsInterfacesTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4), )
if mibBuilder.loadTexts: fwSXLStatFalconsInterfacesTable.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatFalconsInterfacesTable.setDescription('No description available')
fwSXLStatFalconsInterfacesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwSXLFalconsInterfacesIndex"))
if mibBuilder.loadTexts: fwSXLStatFalconsInterfacesEntry.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatFalconsInterfacesEntry.setDescription('No description available')
fwSXLFalconsInterfacesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fwSXLFalconsInterfacesIndex.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterfacesIndex.setDescription('Dummy index. ')
fwSXLFalconsInterface0Name = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface0Name.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface0Name.setDescription("Name of SXL's interface 0. ")
fwSXLFalconsInterface1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface1Name.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface1Name.setDescription("Name of SXL's interface 1. ")
fwSXLFalconsInterface2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface2Name.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface2Name.setDescription("Name of SXL's interface 2. ")
fwSXLFalconsInterface3Name = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface3Name.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface3Name.setDescription("Name of SXL's interface 3. ")
fwSXLFalconsInterface4Name = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface4Name.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface4Name.setDescription("Name of SXL's interface 4. ")
fwSXLFalconsInterface5Name = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface5Name.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface5Name.setDescription("Name of SXL's interface 5. ")
fwSXLFalconsInterface6Name = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface6Name.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface6Name.setDescription("Name of SXL's interface 6. ")
fwSXLFalconsInterface7Name = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface7Name.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface7Name.setDescription("Name of SXL's interface 7. ")
fwSXLFalconsInterface0Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface0Speed.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface0Speed.setDescription("Speed of SXL's interface 0. ")
fwSXLFalconsInterface1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface1Speed.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface1Speed.setDescription("Speed of SXL's interface 1. ")
fwSXLFalconsInterface2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface2Speed.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface2Speed.setDescription("Speed of SXL's interface 2. ")
fwSXLFalconsInterface3Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface3Speed.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface3Speed.setDescription("Speed of SXL's interface 3. ")
fwSXLFalconsInterface4Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface4Speed.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface4Speed.setDescription("Speed of SXL's interface 4. ")
fwSXLFalconsInterface5Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface5Speed.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface5Speed.setDescription("Speed of SXL's interface 5. ")
fwSXLFalconsInterface6Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface6Speed.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface6Speed.setDescription("Speed of SXL's interface 6. ")
fwSXLFalconsInterface7Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface7Speed.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface7Speed.setDescription("Speed of SXL's interface 7. ")
fwSXLFalconsInterface0State = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface0State.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface0State.setDescription("State of SXL's interface 0. ")
fwSXLFalconsInterface1State = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface1State.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface1State.setDescription("State of SXL's interface 1. ")
fwSXLFalconsInterface2State = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface2State.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface2State.setDescription("State of SXL's interface 2. ")
fwSXLFalconsInterface3State = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface3State.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface3State.setDescription("State of SXL's interface 3. ")
fwSXLFalconsInterface4State = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface4State.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface4State.setDescription("State of SXL's interface 4. ")
fwSXLFalconsInterface5State = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface5State.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface5State.setDescription("State of SXL's interface 5. ")
fwSXLFalconsInterface6State = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface6State.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface6State.setDescription("State of SXL's interface 6. ")
fwSXLFalconsInterface7State = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 4, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsInterface7State.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsInterface7State.setDescription("State of SXL's interface 7. ")
fwSXLStatFalconsMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 5), )
if mibBuilder.loadTexts: fwSXLStatFalconsMemoryTable.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatFalconsMemoryTable.setDescription('No description available')
fwSXLStatFalconsMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 5, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwSXLFalconsMemoryIndex"))
if mibBuilder.loadTexts: fwSXLStatFalconsMemoryEntry.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatFalconsMemoryEntry.setDescription('No description available')
fwSXLFalconsMemoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fwSXLFalconsMemoryIndex.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsMemoryIndex.setDescription('Dummy index. ')
fwSXLFalconsSxlTotMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsSxlTotMemory.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsSxlTotMemory.setDescription('Total sxl memory. ')
fwSXLFalconsSxlUsedMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsSxlUsedMemory.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsSxlUsedMemory.setDescription('Used sxl memory. ')
fwSXLFalconsSxlFreeMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsSxlFreeMemory.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsSxlFreeMemory.setDescription('Free sxl memory. ')
fwSXLFalconsPacketPoolTotMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsPacketPoolTotMemory.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsPacketPoolTotMemory.setDescription('Total packet pool memory. ')
fwSXLFalconsPacketPoolUsedMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsPacketPoolUsedMemory.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsPacketPoolUsedMemory.setDescription('Used packet pool memory. ')
fwSXLFalconsPacketPoolFreeMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsPacketPoolFreeMemory.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsPacketPoolFreeMemory.setDescription('Free packet pool memory. ')
fwSXLStatFalconsCpuTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6), )
if mibBuilder.loadTexts: fwSXLStatFalconsCpuTable.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatFalconsCpuTable.setDescription('No description available')
fwSXLStatFalconsCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwSXLFalconsCpuIndex"))
if mibBuilder.loadTexts: fwSXLStatFalconsCpuEntry.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatFalconsCpuEntry.setDescription('No description available')
fwSXLFalconsCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fwSXLFalconsCpuIndex.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpuIndex.setDescription('Dummy index. ')
fwSXLFalconsCpu0Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu0Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu0Usage.setDescription('Usage percentage of SXL CPU0. ')
fwSXLFalconsCpu1Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu1Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu1Usage.setDescription('Usage percentage of SXL CPU1. ')
fwSXLFalconsCpu2Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu2Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu2Usage.setDescription('Usage percentage of SXL CPU2. ')
fwSXLFalconsCpu3Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu3Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu3Usage.setDescription('Usage percentage of SXL CPU3. ')
fwSXLFalconsCpu4Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu4Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu4Usage.setDescription('Usage percentage of SXL CPU4. ')
fwSXLFalconsCpu5Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu5Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu5Usage.setDescription('Usage percentage of SXL CPU5. ')
fwSXLFalconsCpu6Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu6Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu6Usage.setDescription('Usage percentage of SXL CPU6. ')
fwSXLFalconsCpu7Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu7Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu7Usage.setDescription('Usage percentage of SXL CPU7. ')
fwSXLFalconsCpu8Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu8Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu8Usage.setDescription('Usage percentage of SXL CPU8. ')
fwSXLFalconsCpu9Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu9Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu9Usage.setDescription('Usage percentage of SXL CPU9. ')
fwSXLFalconsCpu10Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu10Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu10Usage.setDescription('Usage percentage of SXL CPU10. ')
fwSXLFalconsCpu11Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu11Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu11Usage.setDescription('Usage percentage of SXL CPU11. ')
fwSXLFalconsCpu12Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu12Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu12Usage.setDescription('Usage percentage of SXL CPU12. ')
fwSXLFalconsCpu13Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu13Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu13Usage.setDescription('Usage percentage of SXL CPU13. ')
fwSXLFalconsCpu14Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu14Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu14Usage.setDescription('Usage percentage of SXL CPU14. ')
fwSXLFalconsCpu15Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu15Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu15Usage.setDescription('Usage percentage of SXL CPU15. ')
fwSXLFalconsCpu16Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu16Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu16Usage.setDescription('Usage percentage of SXL CPU16. ')
fwSXLFalconsCpu17Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu17Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu17Usage.setDescription('Usage percentage of SXL CPU17. ')
fwSXLFalconsCpu18Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu18Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu18Usage.setDescription('Usage percentage of SXL CPU18. ')
fwSXLFalconsCpu19Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu19Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu19Usage.setDescription('Usage percentage of SXL CPU19. ')
fwSXLFalconsCpu20Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu20Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu20Usage.setDescription('Usage percentage of SXL CPU20. ')
fwSXLFalconsCpu21Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu21Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu21Usage.setDescription('Usage percentage of SXL CPU21. ')
fwSXLFalconsCpu22Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu22Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu22Usage.setDescription('Usage percentage of SXL CPU22. ')
fwSXLFalconsCpu23Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu23Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu23Usage.setDescription('Usage percentage of SXL CPU23. ')
fwSXLFalconsCpu24Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu24Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu24Usage.setDescription('Usage percentage of SXL CPU24. ')
fwSXLFalconsCpu25Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu25Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu25Usage.setDescription('Usage percentage of SXL CPU25. ')
fwSXLFalconsCpu26Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu26Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu26Usage.setDescription('Usage percentage of SXL CPU26. ')
fwSXLFalconsCpu27Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu27Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu27Usage.setDescription('Usage percentage of SXL CPU27. ')
fwSXLFalconsCpu28Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu28Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu28Usage.setDescription('Usage percentage of SXL CPU28. ')
fwSXLFalconsCpu29Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu29Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu29Usage.setDescription('Usage percentage of SXL CPU29. ')
fwSXLFalconsCpu30Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu30Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu30Usage.setDescription('Usage percentage of SXL CPU30. ')
fwSXLFalconsCpu31Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 6, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsCpu31Usage.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsCpu31Usage.setDescription('Usage percentage of SXL CPU31. ')
fwSXLStatFalconsGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 7), )
if mibBuilder.loadTexts: fwSXLStatFalconsGeneralTable.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatFalconsGeneralTable.setDescription('No description available')
fwSXLStatFalconsGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 7, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwSXLHostGeneralIndex"))
if mibBuilder.loadTexts: fwSXLStatFalconsGeneralEntry.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatFalconsGeneralEntry.setDescription('No description available')
fwSXLFalconsGeneralIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsGeneralIndex.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsGeneralIndex.setDescription('Dummy index. ')
fwSXLFalconsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsState.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsState.setDescription("The SXL's status. ")
fwSXLFalconsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsType.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsType.setDescription("The SXL's type. ")
fwSXLFalconsSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsSerialNumber.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsSerialNumber.setDescription("The SXL's serial number. ")
fwSXLFalconsSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 5, 3, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLFalconsSlotNumber.setStatus('current')
if mibBuilder.loadTexts: fwSXLFalconsSlotNumber.setDescription("The SXL's physical slot number. ")
cpvGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 4))
cpvIpsec = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5))
cpvFwz = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 6))
cpvAccelerator = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8))
cpvIKE = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9))
cpvIPsec = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 10))
cpvStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 4, 1))
cpvErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 4, 2))
cpvSaStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2))
cpvSaErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 3))
cpvIpsecStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4))
cpvFwzStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 6, 1))
cpvFwzErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 6, 2))
cpvHwAccelGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 1))
cpvHwAccelStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 2))
cpvIKEglobals = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1))
cpvIKEerrors = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 2))
cpvIPsecNIC = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 10, 1))
cpvProdName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvProdName.setStatus('current')
if mibBuilder.loadTexts: cpvProdName.setDescription('Product name')
cpvVerMajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvVerMajor.setStatus('current')
if mibBuilder.loadTexts: cpvVerMajor.setDescription('Major version')
cpvVerMinor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvVerMinor.setStatus('current')
if mibBuilder.loadTexts: cpvVerMinor.setDescription('Minor version')
cpvEncPackets = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvEncPackets.setStatus('current')
if mibBuilder.loadTexts: cpvEncPackets.setDescription('Encrypted packets')
cpvDecPackets = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvDecPackets.setStatus('current')
if mibBuilder.loadTexts: cpvDecPackets.setDescription('Decrypted packets')
cpvErrOut = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 4, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvErrOut.setStatus('current')
if mibBuilder.loadTexts: cpvErrOut.setDescription('Encryption errors')
cpvErrIn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 4, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvErrIn.setStatus('current')
if mibBuilder.loadTexts: cpvErrIn.setDescription('Decryption errors')
cpvErrIke = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 4, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvErrIke.setStatus('current')
if mibBuilder.loadTexts: cpvErrIke.setDescription('IKE errors')
cpvErrPolicy = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 4, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvErrPolicy.setStatus('current')
if mibBuilder.loadTexts: cpvErrPolicy.setDescription('Policy errors')
cpvCurrEspSAsIn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvCurrEspSAsIn.setStatus('current')
if mibBuilder.loadTexts: cpvCurrEspSAsIn.setDescription('IPsec current Inbound ESP SAs')
cpvTotalEspSAsIn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvTotalEspSAsIn.setStatus('current')
if mibBuilder.loadTexts: cpvTotalEspSAsIn.setDescription('IPsec total Inbound ESP SAs')
cpvCurrEspSAsOut = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvCurrEspSAsOut.setStatus('current')
if mibBuilder.loadTexts: cpvCurrEspSAsOut.setDescription('IPsec current Outbound ESP SAs')
cpvTotalEspSAsOut = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvTotalEspSAsOut.setStatus('current')
if mibBuilder.loadTexts: cpvTotalEspSAsOut.setDescription('IPsec total Outbound ESP SAs')
cpvCurrAhSAsIn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvCurrAhSAsIn.setStatus('current')
if mibBuilder.loadTexts: cpvCurrAhSAsIn.setDescription('IPsec current Inbound AH SAs')
cpvTotalAhSAsIn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvTotalAhSAsIn.setStatus('current')
if mibBuilder.loadTexts: cpvTotalAhSAsIn.setDescription('IPsec total Inbound AH SAs')
cpvCurrAhSAsOut = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvCurrAhSAsOut.setStatus('current')
if mibBuilder.loadTexts: cpvCurrAhSAsOut.setDescription('IPsec current Outbound AH SAs')
cpvTotalAhSAsOut = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvTotalAhSAsOut.setStatus('current')
if mibBuilder.loadTexts: cpvTotalAhSAsOut.setDescription('IPsec total Outbound AH SAs')
cpvMaxConncurEspSAsIn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvMaxConncurEspSAsIn.setStatus('current')
if mibBuilder.loadTexts: cpvMaxConncurEspSAsIn.setDescription('IPsec max concurrent Inbound ESP SAs')
cpvMaxConncurEspSAsOut = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvMaxConncurEspSAsOut.setStatus('current')
if mibBuilder.loadTexts: cpvMaxConncurEspSAsOut.setDescription('IPsec max concurrent Outbound ESP SAs')
cpvMaxConncurAhSAsIn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvMaxConncurAhSAsIn.setStatus('current')
if mibBuilder.loadTexts: cpvMaxConncurAhSAsIn.setDescription('IPsec max concurrent Inbound AH SAs')
cpvMaxConncurAhSAsOut = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvMaxConncurAhSAsOut.setStatus('current')
if mibBuilder.loadTexts: cpvMaxConncurAhSAsOut.setDescription('IPsec max concurrent Outbound AH SAs')
cpvSaDecrErr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 3, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvSaDecrErr.setStatus('current')
if mibBuilder.loadTexts: cpvSaDecrErr.setDescription('IPsec decryption errors')
cpvSaAuthErr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 3, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvSaAuthErr.setStatus('current')
if mibBuilder.loadTexts: cpvSaAuthErr.setDescription('IPsec authentication errors')
cpvSaReplayErr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 3, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvSaReplayErr.setStatus('current')
if mibBuilder.loadTexts: cpvSaReplayErr.setDescription('IPsec replay errors')
cpvSaPolicyErr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 3, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvSaPolicyErr.setStatus('current')
if mibBuilder.loadTexts: cpvSaPolicyErr.setDescription('IPsec policy errors')
cpvSaOtherErrIn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 3, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvSaOtherErrIn.setStatus('current')
if mibBuilder.loadTexts: cpvSaOtherErrIn.setDescription('IPsec other inbound errors')
cpvSaOtherErrOut = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 3, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvSaOtherErrOut.setStatus('current')
if mibBuilder.loadTexts: cpvSaOtherErrOut.setDescription('IPsec other outbound errors')
cpvSaUnknownSpiErr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 3, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvSaUnknownSpiErr.setStatus('current')
if mibBuilder.loadTexts: cpvSaUnknownSpiErr.setDescription('IPsec unknown SPI errors')
cpvIpsecUdpEspEncPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecUdpEspEncPkts.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecUdpEspEncPkts.setDescription('IPsec UDP ESP encrypted packets')
cpvIpsecUdpEspDecPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecUdpEspDecPkts.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecUdpEspDecPkts.setDescription('IPsec UDP ESP decrypted packets')
cpvIpsecAhEncPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecAhEncPkts.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecAhEncPkts.setDescription('IPsec AH encrypted packets')
cpvIpsecAhDecPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecAhDecPkts.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecAhDecPkts.setDescription('IPsec AH decrypted packets')
cpvIpsecEspEncPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecEspEncPkts.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecEspEncPkts.setDescription('IPsec ESP encrypted packets')
cpvIpsecEspDecPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecEspDecPkts.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecEspDecPkts.setDescription('IPsec ESP decrypted packets')
cpvIpsecDecomprBytesBefore = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecDecomprBytesBefore.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecDecomprBytesBefore.setDescription('IPsec bytes before decompression')
cpvIpsecDecomprBytesAfter = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecDecomprBytesAfter.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecDecomprBytesAfter.setDescription('IPsec bytes after decompression')
cpvIpsecDecomprOverhead = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecDecomprOverhead.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecDecomprOverhead.setDescription('IPsec bytes decompression overhead')
cpvIpsecDecomprPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecDecomprPkts.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecDecomprPkts.setDescription('IPsec packets decompressed')
cpvIpsecDecomprErr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecDecomprErr.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecDecomprErr.setDescription('IPsec decompression errors')
cpvIpsecComprBytesBefore = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecComprBytesBefore.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecComprBytesBefore.setDescription('IPsec bytes before compression')
cpvIpsecComprBytesAfter = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecComprBytesAfter.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecComprBytesAfter.setDescription('IPsec bytes after compression')
cpvIpsecComprOverhead = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecComprOverhead.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecComprOverhead.setDescription('IPsec bytes compression overhead')
cpvIpsecNonCompressibleBytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecNonCompressibleBytes.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecNonCompressibleBytes.setDescription('IPsec bytes non compressible')
cpvIpsecCompressiblePkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecCompressiblePkts.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecCompressiblePkts.setDescription('IPsec packets compressed')
cpvIpsecNonCompressiblePkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecNonCompressiblePkts.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecNonCompressiblePkts.setDescription('IPsec packets non compressible')
cpvIpsecComprErrors = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecComprErrors.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecComprErrors.setDescription('IPsec compression errors')
cpvIpsecEspEncBytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecEspEncBytes.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecEspEncBytes.setDescription('IPsec ESP encrypted bytes')
cpvIpsecEspDecBytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecEspDecBytes.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecEspDecBytes.setDescription('IPsec ESP decrypted bytes')
cpvFwzEncapsEncPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvFwzEncapsEncPkts.setStatus('current')
if mibBuilder.loadTexts: cpvFwzEncapsEncPkts.setDescription('Fwz encapsulated encrypted packets')
cpvFwzEncapsDecPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvFwzEncapsDecPkts.setStatus('current')
if mibBuilder.loadTexts: cpvFwzEncapsDecPkts.setDescription('Fwz encapsulated decrypted packets')
cpvFwzEncPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvFwzEncPkts.setStatus('current')
if mibBuilder.loadTexts: cpvFwzEncPkts.setDescription('Fwz encrypted packets')
cpvFwzDecPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvFwzDecPkts.setStatus('current')
if mibBuilder.loadTexts: cpvFwzDecPkts.setDescription('Fwz decrypted packets')
cpvFwzEncapsEncErrs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 6, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvFwzEncapsEncErrs.setStatus('current')
if mibBuilder.loadTexts: cpvFwzEncapsEncErrs.setDescription('Fwz encapsulated encryption errors')
cpvFwzEncapsDecErrs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 6, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvFwzEncapsDecErrs.setStatus('current')
if mibBuilder.loadTexts: cpvFwzEncapsDecErrs.setDescription('Fwz encapsulated decryption errors')
cpvFwzEncErrs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 6, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvFwzEncErrs.setStatus('current')
if mibBuilder.loadTexts: cpvFwzEncErrs.setDescription('Fwz encryption errors')
cpvFwzDecErrs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 6, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvFwzDecErrs.setStatus('current')
if mibBuilder.loadTexts: cpvFwzDecErrs.setDescription('Fwz decryption errors')
cpvHwAccelVendor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelVendor.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelVendor.setDescription('HW accel. vendor')
cpvHwAccelStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelStatus.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelStatus.setDescription('HW accel. status')
cpvHwAccelDriverMajorVer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelDriverMajorVer.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelDriverMajorVer.setDescription('HW accel. driver major version')
cpvHwAccelDriverMinorVer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelDriverMinorVer.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelDriverMinorVer.setDescription('HW accel. driver minor version')
cpvHwAccelEspEncPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelEspEncPkts.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelEspEncPkts.setDescription('HW accel. encrypted IPsec ESP packets')
cpvHwAccelEspDecPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelEspDecPkts.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelEspDecPkts.setDescription('HW accel. decrypted IPsec ESP packets')
cpvHwAccelEspEncBytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelEspEncBytes.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelEspEncBytes.setDescription('HW accel. encrypted IPsec ESP bytes')
cpvHwAccelEspDecBytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelEspDecBytes.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelEspDecBytes.setDescription('HW accel. decrypted IPsec ESP bytes')
cpvHwAccelAhEncPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelAhEncPkts.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelAhEncPkts.setDescription('HW accel. encrypted IPsec AH packets')
cpvHwAccelAhDecPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelAhDecPkts.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelAhDecPkts.setDescription('HW accel. decrypted IPsec AH packets')
cpvHwAccelAhEncBytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelAhEncBytes.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelAhEncBytes.setDescription('HW accel. encrypted IPsec AH bytes')
cpvHwAccelAhDecBytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelAhDecBytes.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelAhDecBytes.setDescription('HW accel. decrypted IPsec AH bytes')
cpvIKECurrSAs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKECurrSAs.setStatus('current')
if mibBuilder.loadTexts: cpvIKECurrSAs.setDescription('IKE current SAs')
cpvIKECurrInitSAs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKECurrInitSAs.setStatus('current')
if mibBuilder.loadTexts: cpvIKECurrInitSAs.setDescription('IKE current initiated SAs')
cpvIKECurrRespSAs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKECurrRespSAs.setStatus('current')
if mibBuilder.loadTexts: cpvIKECurrRespSAs.setDescription('IKE current responded SAs')
cpvIKETotalSAs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKETotalSAs.setStatus('current')
if mibBuilder.loadTexts: cpvIKETotalSAs.setDescription('IKE total SAs')
cpvIKETotalInitSAs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKETotalInitSAs.setStatus('current')
if mibBuilder.loadTexts: cpvIKETotalInitSAs.setDescription('IKE total initiated SAs')
cpvIKETotalRespSAs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKETotalRespSAs.setStatus('current')
if mibBuilder.loadTexts: cpvIKETotalRespSAs.setDescription('IKE total responded SAs')
cpvIKETotalSAsAttempts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKETotalSAsAttempts.setStatus('current')
if mibBuilder.loadTexts: cpvIKETotalSAsAttempts.setDescription('IKE total SAs attempts')
cpvIKETotalSAsInitAttempts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKETotalSAsInitAttempts.setStatus('current')
if mibBuilder.loadTexts: cpvIKETotalSAsInitAttempts.setDescription('IKE total SAs initiated attempts')
cpvIKETotalSAsRespAttempts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKETotalSAsRespAttempts.setStatus('current')
if mibBuilder.loadTexts: cpvIKETotalSAsRespAttempts.setDescription('IKE total SAs responded attempts')
cpvIKEMaxConncurSAs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKEMaxConncurSAs.setStatus('current')
if mibBuilder.loadTexts: cpvIKEMaxConncurSAs.setDescription('IKE max concurrent SAs')
cpvIKEMaxConncurInitSAs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKEMaxConncurInitSAs.setStatus('current')
if mibBuilder.loadTexts: cpvIKEMaxConncurInitSAs.setDescription('IKE max concurrent initiated SAs')
cpvIKEMaxConncurRespSAs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKEMaxConncurRespSAs.setStatus('current')
if mibBuilder.loadTexts: cpvIKEMaxConncurRespSAs.setDescription('IKE max concurrent responded SAs')
cpvIKETotalFailuresInit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKETotalFailuresInit.setStatus('current')
if mibBuilder.loadTexts: cpvIKETotalFailuresInit.setDescription('IKE total failures (initiator errors)')
cpvIKENoResp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKENoResp.setStatus('current')
if mibBuilder.loadTexts: cpvIKENoResp.setDescription('IKE no response from peer (initiator errors)')
cpvIKETotalFailuresResp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKETotalFailuresResp.setStatus('current')
if mibBuilder.loadTexts: cpvIKETotalFailuresResp.setDescription('IKE total failures (responder errors)')
cpvIPsecNICsNum = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIPsecNICsNum.setStatus('current')
if mibBuilder.loadTexts: cpvIPsecNICsNum.setDescription("IPsec NIC: Number of IPsec NIC's")
cpvIPsecNICTotalDownLoadedSAs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 10, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIPsecNICTotalDownLoadedSAs.setStatus('current')
if mibBuilder.loadTexts: cpvIPsecNICTotalDownLoadedSAs.setDescription("IPsec NIC: Total downloaded SA's")
cpvIPsecNICCurrDownLoadedSAs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIPsecNICCurrDownLoadedSAs.setStatus('current')
if mibBuilder.loadTexts: cpvIPsecNICCurrDownLoadedSAs.setDescription("IPsec NIC: Current downloaded SA's")
cpvIPsecNICDecrBytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 10, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIPsecNICDecrBytes.setStatus('current')
if mibBuilder.loadTexts: cpvIPsecNICDecrBytes.setDescription('IPsec NIC: Decrypted bytes by NIC')
cpvIPsecNICEncrBytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 10, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIPsecNICEncrBytes.setStatus('current')
if mibBuilder.loadTexts: cpvIPsecNICEncrBytes.setDescription('IPsec NIC: Encrypted bytes by NIC')
cpvIPsecNICDecrPackets = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 10, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIPsecNICDecrPackets.setStatus('current')
if mibBuilder.loadTexts: cpvIPsecNICDecrPackets.setDescription('IPsec NIC: Decrypted packets by NIC')
cpvIPsecNICEncrPackets = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 10, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIPsecNICEncrPackets.setStatus('current')
if mibBuilder.loadTexts: cpvIPsecNICEncrPackets.setDescription('IPsec NIC: Encrypted packets by NIC')
fgProdName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProdName.setStatus('current')
if mibBuilder.loadTexts: fgProdName.setDescription('Product name')
fgVerMajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVerMajor.setStatus('current')
if mibBuilder.loadTexts: fgVerMajor.setDescription('Major version')
fgVerMinor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVerMinor.setStatus('current')
if mibBuilder.loadTexts: fgVerMinor.setDescription('Minor version')
fgVersionString = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVersionString.setStatus('current')
if mibBuilder.loadTexts: fgVersionString.setDescription('Version string')
fgModuleKernelBuild = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgModuleKernelBuild.setStatus('current')
if mibBuilder.loadTexts: fgModuleKernelBuild.setDescription('Kernel build')
fgStrPolicyName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgStrPolicyName.setStatus('current')
if mibBuilder.loadTexts: fgStrPolicyName.setDescription('Policy name')
fgInstallTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgInstallTime.setStatus('current')
if mibBuilder.loadTexts: fgInstallTime.setDescription('Install time')
fgNumInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgNumInterfaces.setStatus('current')
if mibBuilder.loadTexts: fgNumInterfaces.setDescription('Interfaces num')
fgIfTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9), )
if mibBuilder.loadTexts: fgIfTable.setStatus('current')
if mibBuilder.loadTexts: fgIfTable.setDescription('No description available')
fgIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fgIfIndex"))
if mibBuilder.loadTexts: fgIfEntry.setStatus('current')
if mibBuilder.loadTexts: fgIfEntry.setDescription('No description available')
fgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fgIfIndex.setStatus('current')
if mibBuilder.loadTexts: fgIfIndex.setDescription('No description available')
fgIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIfName.setStatus('current')
if mibBuilder.loadTexts: fgIfName.setDescription('No description available')
fgPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgPolicyName.setStatus('current')
if mibBuilder.loadTexts: fgPolicyName.setDescription('No description available')
fgRateLimitIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgRateLimitIn.setStatus('current')
if mibBuilder.loadTexts: fgRateLimitIn.setDescription('No description available')
fgRateLimitOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgRateLimitOut.setStatus('current')
if mibBuilder.loadTexts: fgRateLimitOut.setDescription('No description available')
fgAvrRateIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvrRateIn.setStatus('current')
if mibBuilder.loadTexts: fgAvrRateIn.setDescription('No description available')
fgAvrRateOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvrRateOut.setStatus('current')
if mibBuilder.loadTexts: fgAvrRateOut.setDescription('No description available')
fgRetransPcktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgRetransPcktsIn.setStatus('current')
if mibBuilder.loadTexts: fgRetransPcktsIn.setDescription('No description available')
fgRetransPcktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgRetransPcktsOut.setStatus('current')
if mibBuilder.loadTexts: fgRetransPcktsOut.setDescription('No description available')
fgPendPcktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgPendPcktsIn.setStatus('current')
if mibBuilder.loadTexts: fgPendPcktsIn.setDescription('No description available')
fgPendPcktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgPendPcktsOut.setStatus('current')
if mibBuilder.loadTexts: fgPendPcktsOut.setDescription('No description available')
fgPendBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgPendBytesIn.setStatus('current')
if mibBuilder.loadTexts: fgPendBytesIn.setDescription('No description available')
fgPendBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgPendBytesOut.setStatus('current')
if mibBuilder.loadTexts: fgPendBytesOut.setDescription('No description available')
fgNumConnIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgNumConnIn.setStatus('current')
if mibBuilder.loadTexts: fgNumConnIn.setDescription('No description available')
fgNumConnOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgNumConnOut.setStatus('current')
if mibBuilder.loadTexts: fgNumConnOut.setDescription('No description available')
haProdName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haProdName.setStatus('current')
if mibBuilder.loadTexts: haProdName.setDescription('Product name')
haInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haInstalled.setStatus('current')
if mibBuilder.loadTexts: haInstalled.setDescription('HA installed')
haVerMajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haVerMajor.setStatus('current')
if mibBuilder.loadTexts: haVerMajor.setDescription('Major version')
haVerMinor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haVerMinor.setStatus('current')
if mibBuilder.loadTexts: haVerMinor.setDescription('Minor version')
haStarted = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haStarted.setStatus('current')
if mibBuilder.loadTexts: haStarted.setDescription('HA started')
haState = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haState.setStatus('current')
if mibBuilder.loadTexts: haState.setDescription('HA state')
haBlockState = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haBlockState.setStatus('current')
if mibBuilder.loadTexts: haBlockState.setDescription('HA blocking state')
haIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haIdentifier.setStatus('current')
if mibBuilder.loadTexts: haIdentifier.setDescription('HA identifier')
haProtoVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haProtoVersion.setStatus('current')
if mibBuilder.loadTexts: haProtoVersion.setDescription('HA protocol version')
haWorkMode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haWorkMode.setStatus('current')
if mibBuilder.loadTexts: haWorkMode.setDescription('Working mode')
haVersionSting = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haVersionSting.setStatus('current')
if mibBuilder.loadTexts: haVersionSting.setDescription('Version string')
haClusterXLFailover = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haClusterXLFailover.setStatus('current')
if mibBuilder.loadTexts: haClusterXLFailover.setDescription('ClusterXL Failover')
haStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haStatCode.setStatus('current')
if mibBuilder.loadTexts: haStatCode.setDescription('Status code')
haStatShort = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haStatShort.setStatus('current')
if mibBuilder.loadTexts: haStatShort.setDescription('Status short')
haStatLong = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 103), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haStatLong.setStatus('current')
if mibBuilder.loadTexts: haStatLong.setDescription('Status long')
haServicePack = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 999), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haServicePack.setStatus('current')
if mibBuilder.loadTexts: haServicePack.setDescription('Service pack')
haIfTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 5, 12), )
if mibBuilder.loadTexts: haIfTable.setStatus('current')
if mibBuilder.loadTexts: haIfTable.setDescription('No description available')
haIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 5, 12, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "haIfIndex"))
if mibBuilder.loadTexts: haIfEntry.setStatus('current')
if mibBuilder.loadTexts: haIfEntry.setDescription('No description available')
haIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: haIfIndex.setStatus('current')
if mibBuilder.loadTexts: haIfIndex.setDescription('No description available')
haIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haIfName.setStatus('current')
if mibBuilder.loadTexts: haIfName.setDescription('No description available')
haIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 12, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haIP.setStatus('current')
if mibBuilder.loadTexts: haIP.setDescription('No description available')
haStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haStatus.setStatus('current')
if mibBuilder.loadTexts: haStatus.setDescription('No description available')
haVerified = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 12, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haVerified.setStatus('current')
if mibBuilder.loadTexts: haVerified.setDescription('No description available')
haTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haTrusted.setStatus('current')
if mibBuilder.loadTexts: haTrusted.setDescription('No description available')
haShared = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haShared.setStatus('current')
if mibBuilder.loadTexts: haShared.setDescription('No description available')
haProblemTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 5, 13), )
if mibBuilder.loadTexts: haProblemTable.setStatus('current')
if mibBuilder.loadTexts: haProblemTable.setDescription('No description available')
haProblemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 5, 13, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "haIfIndex"))
if mibBuilder.loadTexts: haProblemEntry.setStatus('current')
if mibBuilder.loadTexts: haProblemEntry.setDescription('No description available')
haProblemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 13, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haProblemIndex.setStatus('current')
if mibBuilder.loadTexts: haProblemIndex.setDescription('No description available')
haProblemName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haProblemName.setStatus('current')
if mibBuilder.loadTexts: haProblemName.setDescription('No description available')
haProblemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haProblemStatus.setStatus('current')
if mibBuilder.loadTexts: haProblemStatus.setDescription('No description available')
haProblemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haProblemPriority.setStatus('current')
if mibBuilder.loadTexts: haProblemPriority.setDescription('No description available')
haProblemVerified = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 13, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haProblemVerified.setStatus('current')
if mibBuilder.loadTexts: haProblemVerified.setDescription('No description available')
haProblemDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haProblemDescr.setStatus('current')
if mibBuilder.loadTexts: haProblemDescr.setDescription('No description available')
haClusterIpTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 5, 15), )
if mibBuilder.loadTexts: haClusterIpTable.setStatus('current')
if mibBuilder.loadTexts: haClusterIpTable.setDescription('No description available')
haClusterIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 5, 15, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "haClusterIpIndex"))
if mibBuilder.loadTexts: haClusterIpEntry.setStatus('current')
if mibBuilder.loadTexts: haClusterIpEntry.setDescription('No description available')
haClusterIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 15, 1, 1), Unsigned32())
if mibBuilder.loadTexts: haClusterIpIndex.setStatus('current')
if mibBuilder.loadTexts: haClusterIpIndex.setDescription('Cluster IP index')
haClusterIpIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haClusterIpIfName.setStatus('current')
if mibBuilder.loadTexts: haClusterIpIfName.setDescription('Cluster IP interface name')
haClusterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 15, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haClusterIpAddr.setStatus('current')
if mibBuilder.loadTexts: haClusterIpAddr.setDescription('Cluster IP address')
haClusterIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 15, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haClusterIpNetMask.setStatus('current')
if mibBuilder.loadTexts: haClusterIpNetMask.setDescription('Cluster network mask')
haClusterIpMemberNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 15, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haClusterIpMemberNet.setStatus('current')
if mibBuilder.loadTexts: haClusterIpMemberNet.setDescription('Cluster member network')
haClusterIpMemberNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 15, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haClusterIpMemberNetMask.setStatus('current')
if mibBuilder.loadTexts: haClusterIpMemberNetMask.setDescription('Cluster member network mask')
haClusterSyncTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 5, 16), )
if mibBuilder.loadTexts: haClusterSyncTable.setStatus('current')
if mibBuilder.loadTexts: haClusterSyncTable.setDescription('No description available')
haClusterSyncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 5, 16, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "haClusterSyncIndex"))
if mibBuilder.loadTexts: haClusterSyncEntry.setStatus('current')
if mibBuilder.loadTexts: haClusterSyncEntry.setDescription('No description available')
haClusterSyncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: haClusterSyncIndex.setStatus('current')
if mibBuilder.loadTexts: haClusterSyncIndex.setDescription('Cluster sync index')
haClusterSyncName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haClusterSyncName.setStatus('current')
if mibBuilder.loadTexts: haClusterSyncName.setDescription('Cluster sync name')
haClusterSyncAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haClusterSyncAddr.setStatus('current')
if mibBuilder.loadTexts: haClusterSyncAddr.setDescription('Cluster sync address')
haClusterSyncNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haClusterSyncNetMask.setStatus('current')
if mibBuilder.loadTexts: haClusterSyncNetMask.setDescription('Cluster sync network mask')
svnInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 4))
svnOSInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 5))
svnPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7))
svnApplianceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 16))
svnMem = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 1))
svnProc = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 2))
svnDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 3))
svnMem64 = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 4))
svnRoutingModify = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 9))
svnLogDaemon = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 11))
svnUpdatesInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20))
svnVsxInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 21))
arpTableInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 22))
sysInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 23))
svnProdName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnProdName.setStatus('current')
if mibBuilder.loadTexts: svnProdName.setDescription('Product name')
svnProdVerMajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnProdVerMajor.setStatus('current')
if mibBuilder.loadTexts: svnProdVerMajor.setDescription('Major version')
svnProdVerMinor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnProdVerMinor.setStatus('current')
if mibBuilder.loadTexts: svnProdVerMinor.setDescription('Minor version')
svnUpdatesInfoBuild = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnUpdatesInfoBuild.setStatus('current')
if mibBuilder.loadTexts: svnUpdatesInfoBuild.setDescription('Deployment agent build number')
svnUpdatesInfoStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnUpdatesInfoStatus.setStatus('current')
if mibBuilder.loadTexts: svnUpdatesInfoStatus.setDescription('Deployment agent status')
svnUpdatesInfoConnection = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnUpdatesInfoConnection.setStatus('current')
if mibBuilder.loadTexts: svnUpdatesInfoConnection.setDescription('Cloud connection')
svnUpdatesInfoAvailablePackages = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnUpdatesInfoAvailablePackages.setStatus('current')
if mibBuilder.loadTexts: svnUpdatesInfoAvailablePackages.setDescription('Available packages count')
svnUpdatesInfoAvailableRecommended = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnUpdatesInfoAvailableRecommended.setStatus('current')
if mibBuilder.loadTexts: svnUpdatesInfoAvailableRecommended.setDescription('Available recommended packages count')
svnUpdatesInfoAvailableHotfixes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnUpdatesInfoAvailableHotfixes.setStatus('current')
if mibBuilder.loadTexts: svnUpdatesInfoAvailableHotfixes.setDescription('Available hotfixes count')
updatesInstalledTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 7), )
if mibBuilder.loadTexts: updatesInstalledTable.setStatus('current')
if mibBuilder.loadTexts: updatesInstalledTable.setDescription('Installed updates table. This feature is supported only on gaia')
updatesInstalledEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 7, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "updatesInstalledIndex"))
if mibBuilder.loadTexts: updatesInstalledEntry.setStatus('current')
if mibBuilder.loadTexts: updatesInstalledEntry.setDescription('No description available')
updatesInstalledIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: updatesInstalledIndex.setStatus('current')
if mibBuilder.loadTexts: updatesInstalledIndex.setDescription('No description available')
updatesInstalledName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: updatesInstalledName.setStatus('current')
if mibBuilder.loadTexts: updatesInstalledName.setDescription('Installed package name')
updatesInstalledType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: updatesInstalledType.setStatus('current')
if mibBuilder.loadTexts: updatesInstalledType.setDescription('Installed package type')
updatesRecommendedTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 8), )
if mibBuilder.loadTexts: updatesRecommendedTable.setStatus('current')
if mibBuilder.loadTexts: updatesRecommendedTable.setDescription('Recommended updates table. This feature is supported only on gaia')
updatesRecommendedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 8, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "updatesRecommendedIndex"))
if mibBuilder.loadTexts: updatesRecommendedEntry.setStatus('current')
if mibBuilder.loadTexts: updatesRecommendedEntry.setDescription('No description available')
updatesRecommendedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: updatesRecommendedIndex.setStatus('current')
if mibBuilder.loadTexts: updatesRecommendedIndex.setDescription('No description available')
updatesRecommendedName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: updatesRecommendedName.setStatus('current')
if mibBuilder.loadTexts: updatesRecommendedName.setDescription('Recommended package name')
updatesRecommendedType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: updatesRecommendedType.setStatus('current')
if mibBuilder.loadTexts: updatesRecommendedType.setDescription('Recommended package type')
updatesRecommendedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: updatesRecommendedStatus.setStatus('current')
if mibBuilder.loadTexts: updatesRecommendedStatus.setDescription('Recommended package status')
svnVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnVersion.setStatus('current')
if mibBuilder.loadTexts: svnVersion.setDescription('SVN version')
svnBuild = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 4, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnBuild.setStatus('current')
if mibBuilder.loadTexts: svnBuild.setDescription('SVN build number')
osName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osName.setStatus('current')
if mibBuilder.loadTexts: osName.setDescription('OS name')
osMajorVer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osMajorVer.setStatus('current')
if mibBuilder.loadTexts: osMajorVer.setDescription('OS Major version')
osMinorVer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osMinorVer.setStatus('current')
if mibBuilder.loadTexts: osMinorVer.setDescription('OS minor version')
osBuildNum = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osBuildNum.setStatus('current')
if mibBuilder.loadTexts: osBuildNum.setDescription('OS build number')
osSPmajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osSPmajor.setStatus('current')
if mibBuilder.loadTexts: osSPmajor.setDescription('OS SP major')
osSPminor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osSPminor.setStatus('current')
if mibBuilder.loadTexts: osSPminor.setDescription('OS SP minor')
osVersionLevel = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osVersionLevel.setStatus('current')
if mibBuilder.loadTexts: osVersionLevel.setDescription('OS version level')
svnApplianceSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 16, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnApplianceSerialNumber.setStatus('current')
if mibBuilder.loadTexts: svnApplianceSerialNumber.setDescription('Appliance Serial Number')
svnApplianceManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 16, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnApplianceManufacturer.setStatus('current')
if mibBuilder.loadTexts: svnApplianceManufacturer.setDescription('Appliance Manufacturer')
svnApplianceProductName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 16, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnApplianceProductName.setStatus('current')
if mibBuilder.loadTexts: svnApplianceProductName.setDescription('Appliance Product Name')
svnApplianceSeriesString = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 16, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnApplianceSeriesString.setStatus('current')
if mibBuilder.loadTexts: svnApplianceSeriesString.setDescription('Appliance Series String')
memTotalVirtual = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memTotalVirtual.setStatus('current')
if mibBuilder.loadTexts: memTotalVirtual.setDescription('Total virtual memory (32 bit)\n\t\t\t\t\t  NOTE: This 32 bit object has been superseded by a 64 bit object -\n\t\t\t\t\t  memTotalVirtual64, which is supported by Check Point SVN FP3 and above. The\n\t\t\t\t\t  32 bit object is still supported, but it is recommended to work with the new\n\t\t\t\t\t  64 bit object (avoid receiving erroneous values from 64 bit machines).')
memActiveVirtual = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memActiveVirtual.setStatus('current')
if mibBuilder.loadTexts: memActiveVirtual.setDescription('Active virtual memory (32 bit)\n\t\t\t\t\t  NOTE: This 32 bit object has been superseded by a 64 bit object -\n\t\t\t\t\t  memActiveVirtual64, which is supported by Check Point SVN FP3 and above. The\n\t\t\t\t\t  32 bit object is still supported, but it is recommended to work with the new\n\t\t\t\t\t  64 bit object (avoid receiving erroneous values from 64 bit machines).')
memTotalReal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memTotalReal.setStatus('current')
if mibBuilder.loadTexts: memTotalReal.setDescription('Total real memory (32 bit)\n\t\t\t\t\t  NOTE: This 32 bit object has been superseded by a 64 bit object -\n\t\t\t\t\t  memTotalReal64, which is supported by Check Point SVN FP3 and above. The\n\t\t\t\t\t  32 bit object is still supported, but it is recommended to work with the new\n\t\t\t\t\t  64 bit object (avoid receiving erroneous values from 64 bit machines).')
memActiveReal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memActiveReal.setStatus('current')
if mibBuilder.loadTexts: memActiveReal.setDescription('Active real memory (32 bit)\n\t\t\t\t\t  NOTE: This 32 bit object has been superseded by a 64 bit object -\n\t\t\t\t\t  memActiveReal64, which is supported by Check Point SVN FP3 and above. The\n\t\t\t\t\t  32 bit object is still supported, but it is recommended to work with the new\n\t\t\t\t\t  64 bit object (avoid receiving erroneous values from 64 bit machines).')
memFreeReal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memFreeReal.setStatus('current')
if mibBuilder.loadTexts: memFreeReal.setDescription('Free real memory (32 bit)\n\t\t\t\t\t  NOTE: This 32 bit object has been superseded by a 64 bit object -\n\t\t\t\t\t  memFreeReal64, which is supported by Check Point SVN FP3 and above. The\n\t\t\t\t\t  32 bit object is still supported, but it is recommended to work with the new\n\t\t\t\t\t  64 bit object (avoid receiving erroneous values from 64 bit machines).')
memSwapsSec = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSwapsSec.setStatus('current')
if mibBuilder.loadTexts: memSwapsSec.setDescription('Memory swaped pages/sec (32 bit)\n\t\t\t\t\t  NOTE: This 32 bit object has been superseded by a 64 bit object -\n\t\t\t\t\t  memSwapsSec64, which is supported by Check Point SVN FP3 and above. The\n\t\t\t\t\t  32 bit object is still supported, but it is recommended to work with the new\n\t\t\t\t\t  64 bit object (avoid receiving erroneous values from 64 bit machines).')
memDiskTransfers = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDiskTransfers.setStatus('current')
if mibBuilder.loadTexts: memDiskTransfers.setDescription('Memory to Disk transfers/sec (32 bit)\n\t\t\t\t\t  NOTE: This 32 bit object has been superseded by a 64 bit object -\n\t\t\t\t\t  memDiskTransfers64, which is supported by Check Point SVN FP3 and above. The\n\t\t\t\t\t  32 bit object is still supported, but it is recommended to work with the new\n\t\t\t\t\t  64 bit object (avoid receiving erroneous values from 64 bit machines).')
procUsrTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procUsrTime.setStatus('current')
if mibBuilder.loadTexts: procUsrTime.setDescription('Processor user time')
procSysTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procSysTime.setStatus('current')
if mibBuilder.loadTexts: procSysTime.setDescription('Processor system time')
procIdleTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procIdleTime.setStatus('current')
if mibBuilder.loadTexts: procIdleTime.setDescription('Processor idle time')
procUsage = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procUsage.setStatus('current')
if mibBuilder.loadTexts: procUsage.setDescription('Processor usage')
procQueue = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procQueue.setStatus('current')
if mibBuilder.loadTexts: procQueue.setDescription('Processor queue length')
procInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procInterrupts.setStatus('current')
if mibBuilder.loadTexts: procInterrupts.setDescription('Processor interrupts/sec')
procNum = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procNum.setStatus('current')
if mibBuilder.loadTexts: procNum.setDescription('Number of processors')
diskTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTime.setStatus('current')
if mibBuilder.loadTexts: diskTime.setDescription('Time the disk is performing io requests')
diskQueue = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskQueue.setStatus('current')
if mibBuilder.loadTexts: diskQueue.setDescription('Disk requests queue length')
diskPercent = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 3, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPercent.setStatus('current')
if mibBuilder.loadTexts: diskPercent.setDescription('Percent of free space')
diskFreeTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 3, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFreeTotal.setStatus('current')
if mibBuilder.loadTexts: diskFreeTotal.setDescription('Disk total free space')
diskFreeAvail = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 3, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFreeAvail.setStatus('current')
if mibBuilder.loadTexts: diskFreeAvail.setDescription('Disk available free space')
diskTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 3, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTotal.setStatus('current')
if mibBuilder.loadTexts: diskTotal.setDescription('Disk total space')
memTotalVirtual64 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memTotalVirtual64.setStatus('current')
if mibBuilder.loadTexts: memTotalVirtual64.setDescription('Total virtual memory')
memActiveVirtual64 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memActiveVirtual64.setStatus('current')
if mibBuilder.loadTexts: memActiveVirtual64.setDescription('Active virtual memory')
memTotalReal64 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memTotalReal64.setStatus('current')
if mibBuilder.loadTexts: memTotalReal64.setDescription('Total real memory')
memActiveReal64 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 4, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memActiveReal64.setStatus('current')
if mibBuilder.loadTexts: memActiveReal64.setDescription('Active real memory')
memFreeReal64 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 4, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memFreeReal64.setStatus('current')
if mibBuilder.loadTexts: memFreeReal64.setDescription('Free real memory')
memSwapsSec64 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSwapsSec64.setStatus('current')
if mibBuilder.loadTexts: memSwapsSec64.setDescription('Memory swaped pages/sec')
memDiskTransfers64 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDiskTransfers64.setStatus('current')
if mibBuilder.loadTexts: memDiskTransfers64.setDescription('Memory to Disk transfers/sec')
multiProcTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 5), )
if mibBuilder.loadTexts: multiProcTable.setStatus('current')
if mibBuilder.loadTexts: multiProcTable.setDescription('No description available')
vdName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 21, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vdName.setStatus('current')
if mibBuilder.loadTexts: vdName.setDescription('Virtual-Device name')
vdType = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 21, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vdType.setStatus('current')
if mibBuilder.loadTexts: vdType.setDescription('Virtual-Device type')
ctxId = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 21, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxId.setStatus('current')
if mibBuilder.loadTexts: ctxId.setDescription('Virtual-Device Context ID')
multiProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 5, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "multiProcIndex"))
if mibBuilder.loadTexts: multiProcEntry.setStatus('current')
if mibBuilder.loadTexts: multiProcEntry.setDescription('No description available')
multiProcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: multiProcIndex.setStatus('current')
if mibBuilder.loadTexts: multiProcIndex.setDescription('No description available')
multiProcUserTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiProcUserTime.setStatus('current')
if mibBuilder.loadTexts: multiProcUserTime.setDescription('No description available')
multiProcSystemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiProcSystemTime.setStatus('current')
if mibBuilder.loadTexts: multiProcSystemTime.setDescription('No description available')
multiProcIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiProcIdleTime.setStatus('current')
if mibBuilder.loadTexts: multiProcIdleTime.setDescription('No description available')
multiProcUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiProcUsage.setStatus('current')
if mibBuilder.loadTexts: multiProcUsage.setDescription('No description available')
multiProcRunQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiProcRunQueue.setStatus('current')
if mibBuilder.loadTexts: multiProcRunQueue.setDescription('No description available')
multiProcInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiProcInterrupts.setStatus('current')
if mibBuilder.loadTexts: multiProcInterrupts.setDescription('No description available')
multiDiskTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6), )
if mibBuilder.loadTexts: multiDiskTable.setStatus('current')
if mibBuilder.loadTexts: multiDiskTable.setDescription('No description available')
multiDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "multiDiskIndex"))
if mibBuilder.loadTexts: multiDiskEntry.setStatus('current')
if mibBuilder.loadTexts: multiDiskEntry.setDescription('No description available')
multiDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: multiDiskIndex.setStatus('current')
if mibBuilder.loadTexts: multiDiskIndex.setDescription('No description available')
multiDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiDiskName.setStatus('current')
if mibBuilder.loadTexts: multiDiskName.setDescription('No description available')
multiDiskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiDiskSize.setStatus('current')
if mibBuilder.loadTexts: multiDiskSize.setDescription('No description available')
multiDiskUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiDiskUsed.setStatus('current')
if mibBuilder.loadTexts: multiDiskUsed.setDescription('No description available')
multiDiskFreeTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiDiskFreeTotalBytes.setStatus('current')
if mibBuilder.loadTexts: multiDiskFreeTotalBytes.setDescription('No description available')
multiDiskFreeTotalPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiDiskFreeTotalPercent.setStatus('current')
if mibBuilder.loadTexts: multiDiskFreeTotalPercent.setDescription('No description available')
multiDiskFreeAvailableBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiDiskFreeAvailableBytes.setStatus('current')
if mibBuilder.loadTexts: multiDiskFreeAvailableBytes.setDescription('No description available')
multiDiskFreeAvailablePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiDiskFreeAvailablePercent.setStatus('current')
if mibBuilder.loadTexts: multiDiskFreeAvailablePercent.setDescription('No description available')
raidInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7))
sensorInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8))
powerSupplyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 9))
raidVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 1), )
if mibBuilder.loadTexts: raidVolumeTable.setStatus('current')
if mibBuilder.loadTexts: raidVolumeTable.setDescription('No description available')
raidVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "raidVolumeIndex"))
if mibBuilder.loadTexts: raidVolumeEntry.setStatus('current')
if mibBuilder.loadTexts: raidVolumeEntry.setDescription('No description available')
raidVolumeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)))
if mibBuilder.loadTexts: raidVolumeIndex.setStatus('current')
if mibBuilder.loadTexts: raidVolumeIndex.setDescription('No description available')
raidVolumeID = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVolumeID.setStatus('current')
if mibBuilder.loadTexts: raidVolumeID.setDescription('Raid volume identification number')
raidVolumeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVolumeType.setStatus('current')
if mibBuilder.loadTexts: raidVolumeType.setDescription('Raid volume type, RAID-0, RAID-1E, RAID-1, RAID_10, RAID-4, RAID-5, RAID-6, RAID-60, RAID-50 (value 0-8 respectively)')
numOfDisksOnRaid = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfDisksOnRaid.setStatus('current')
if mibBuilder.loadTexts: numOfDisksOnRaid.setDescription('Number of disks on the raid')
raidVolumeMaxLBA = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVolumeMaxLBA.setStatus('current')
if mibBuilder.loadTexts: raidVolumeMaxLBA.setDescription('Raid maximum number of Logical Block Addressing')
raidVolumeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVolumeState.setStatus('current')
if mibBuilder.loadTexts: raidVolumeState.setDescription('Raid state: OPTIMAL(0), DEGRADED (1), FAILED(2) or UNKNOWN(other))')
raidVolumeFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVolumeFlags.setStatus('current')
if mibBuilder.loadTexts: raidVolumeFlags.setDescription('Raid status flags (can get more then one): ENABLED(0x01), QUIESCED(0x02), RESYNC_IN_PROGRESS(0x04),\n                    VOLUME_INACTIVE(0x08), NOT_CONFIGURED(0x10), USING_INTERIM_RECOVERY_MODE(0x20),\n\t\t    READY_FOR_RECOVERY_OPERATION(0x40), WRONG_PHYSICAL_DRIVE_WAS_REPLACED(0x80),\n\t\t    A_PHYSICAL_DRIVE_IS_NOT_PROPERLY_CONNECTED(0x100), HARDWARE_IS_OVER_HEATING(0x200),\n\t\t    HARDWARE_WAS_OVERHEATED(0x400), CURRENTLY_EXPENDING(0x800), NOT_YET_AVAILABLE(0x1000),\n\t\t    QUEUED_FOR_EXPENSION(0x2000), MIGRATING(0x4000), IMPACTED(0x8000),OFFLINE(0x10000) and CLEARING(0x20000) or NONE(0x00)')
raidVolumeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVolumeSize.setStatus('current')
if mibBuilder.loadTexts: raidVolumeSize.setDescription('Raid Volume Size (GB)')
raidDiskTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2), )
if mibBuilder.loadTexts: raidDiskTable.setStatus('current')
if mibBuilder.loadTexts: raidDiskTable.setDescription('No description available')
raidDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "raidDiskIndex"))
if mibBuilder.loadTexts: raidDiskEntry.setStatus('current')
if mibBuilder.loadTexts: raidDiskEntry.setDescription('No description available')
raidDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)))
if mibBuilder.loadTexts: raidDiskIndex.setStatus('current')
if mibBuilder.loadTexts: raidDiskIndex.setDescription('No description available')
raidDiskVolumeID = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskVolumeID.setStatus('current')
if mibBuilder.loadTexts: raidDiskVolumeID.setDescription('Raid volume identification')
raidDiskID = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskID.setStatus('current')
if mibBuilder.loadTexts: raidDiskID.setDescription('Raid disk SCSI identification number')
raidDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskNumber.setStatus('current')
if mibBuilder.loadTexts: raidDiskNumber.setDescription('Raid disk number: on Appliance 0 - upper disc, 1 - lower disc')
raidDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskVendor.setStatus('current')
if mibBuilder.loadTexts: raidDiskVendor.setDescription('Raid disk vendor')
raidDiskProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskProductID.setStatus('current')
if mibBuilder.loadTexts: raidDiskProductID.setDescription('Raid disk product identification')
raidDiskRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskRevision.setStatus('current')
if mibBuilder.loadTexts: raidDiskRevision.setDescription('Raid disk revision level')
raidDiskMaxLBA = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskMaxLBA.setStatus('current')
if mibBuilder.loadTexts: raidDiskMaxLBA.setDescription('Raid disk maximum number of Logical Block Addressing')
raidDiskState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskState.setStatus('current')
if mibBuilder.loadTexts: raidDiskState.setDescription('Raid disk state (can get more then one): ONLINE(0x00), MISSING(0x01), NOT_COMPATIBLE(0x02), DISC_FAILED(0x03), \n\t\t\t\tINITIALIZING(0x04), OFFLINE_REQUESTED(0x05), FAILED_REQUESTED(0x06), UNCONFIGURED_GOOD_SPUN_UP(0x07), UNCONFIGURED_GOOD_SPUN_DOWN (0x08),\n\t\t\t\tUNCONFIGURED_BAD(0x09), HOTSPARE(0x0A), DRIVE_OFFLINE(0x0B), REBUILD(0x0C), FAILED(0x0D), COPYBACK(0x0F), \n                OTHER_OFFLINE(0xFF) or UNKNOWN (other)')
raidDiskFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskFlags.setStatus('current')
if mibBuilder.loadTexts: raidDiskFlags.setDescription('Raid disk flags: OUT_OF_SYNC(0x01),QUIESCED(0x02),VERIFYING(0x04),READY(0x08) or NONE(other)')
raidDiskSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskSyncState.setStatus('current')
if mibBuilder.loadTexts: raidDiskSyncState.setDescription('Raid disk synchronized percent completed during the synchronization process, relevant only when\n                RESYNC_IN_PROGRESS flag is on')
raidDiskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskSize.setStatus('current')
if mibBuilder.loadTexts: raidDiskSize.setDescription('Raid disk size (GB)')
tempertureSensorTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 1), )
if mibBuilder.loadTexts: tempertureSensorTable.setStatus('current')
if mibBuilder.loadTexts: tempertureSensorTable.setDescription('No description available')
tempertureSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "tempertureSensorIndex"))
if mibBuilder.loadTexts: tempertureSensorEntry.setStatus('current')
if mibBuilder.loadTexts: tempertureSensorEntry.setDescription('No description available')
tempertureSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)))
if mibBuilder.loadTexts: tempertureSensorIndex.setStatus('current')
if mibBuilder.loadTexts: tempertureSensorIndex.setDescription('No description available')
tempertureSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempertureSensorName.setStatus('current')
if mibBuilder.loadTexts: tempertureSensorName.setDescription('Sensor name')
tempertureSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempertureSensorValue.setStatus('current')
if mibBuilder.loadTexts: tempertureSensorValue.setDescription('Sensor value')
tempertureSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempertureSensorUnit.setStatus('current')
if mibBuilder.loadTexts: tempertureSensorUnit.setDescription('Sensor unit')
tempertureSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempertureSensorType.setStatus('current')
if mibBuilder.loadTexts: tempertureSensorType.setDescription('Sensor type')
tempertureSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempertureSensorStatus.setStatus('current')
if mibBuilder.loadTexts: tempertureSensorStatus.setDescription('Sensor is out of range TRUE(1), FALSE(0), READING ERROR(2)')
fanSpeedSensorTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 2), )
if mibBuilder.loadTexts: fanSpeedSensorTable.setStatus('current')
if mibBuilder.loadTexts: fanSpeedSensorTable.setDescription('No description available')
fanSpeedSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 2, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fanSpeedSensorIndex"))
if mibBuilder.loadTexts: fanSpeedSensorEntry.setStatus('current')
if mibBuilder.loadTexts: fanSpeedSensorEntry.setDescription('No description available')
fanSpeedSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)))
if mibBuilder.loadTexts: fanSpeedSensorIndex.setStatus('current')
if mibBuilder.loadTexts: fanSpeedSensorIndex.setDescription('No description available')
fanSpeedSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeedSensorName.setStatus('current')
if mibBuilder.loadTexts: fanSpeedSensorName.setDescription('Sensor name')
fanSpeedSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeedSensorValue.setStatus('current')
if mibBuilder.loadTexts: fanSpeedSensorValue.setDescription('Sensor value')
fanSpeedSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeedSensorUnit.setStatus('current')
if mibBuilder.loadTexts: fanSpeedSensorUnit.setDescription('Sensor unit')
fanSpeedSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeedSensorType.setStatus('current')
if mibBuilder.loadTexts: fanSpeedSensorType.setDescription('Sensor type')
fanSpeedSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeedSensorStatus.setStatus('current')
if mibBuilder.loadTexts: fanSpeedSensorStatus.setDescription('Sensor is out of range TRUE(1), FALSE(0), READING ERROR(2)')
voltageSensorTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 3), )
if mibBuilder.loadTexts: voltageSensorTable.setStatus('current')
if mibBuilder.loadTexts: voltageSensorTable.setDescription('No description available')
voltageSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 3, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "voltageSensorIndex"))
if mibBuilder.loadTexts: voltageSensorEntry.setStatus('current')
if mibBuilder.loadTexts: voltageSensorEntry.setDescription('No description available')
voltageSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)))
if mibBuilder.loadTexts: voltageSensorIndex.setStatus('current')
if mibBuilder.loadTexts: voltageSensorIndex.setDescription('No description available')
voltageSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageSensorName.setStatus('current')
if mibBuilder.loadTexts: voltageSensorName.setDescription('Sensor name')
voltageSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageSensorValue.setStatus('current')
if mibBuilder.loadTexts: voltageSensorValue.setDescription('Sensor value')
voltageSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageSensorUnit.setStatus('current')
if mibBuilder.loadTexts: voltageSensorUnit.setDescription('Sensor unit')
voltageSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageSensorType.setStatus('current')
if mibBuilder.loadTexts: voltageSensorType.setDescription('Sensor type')
voltageSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageSensorStatus.setStatus('current')
if mibBuilder.loadTexts: voltageSensorStatus.setDescription('Sensor is out of range TRUE(1), FALSE(0), READING ERROR(2)')
powerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 9, 1), )
if mibBuilder.loadTexts: powerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: powerSupplyTable.setDescription('No description available')
powerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 9, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "powerSupplyIndex"))
if mibBuilder.loadTexts: powerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: powerSupplyEntry.setDescription('No description available')
powerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)))
if mibBuilder.loadTexts: powerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: powerSupplyIndex.setDescription('No description available')
powerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: powerSupplyStatus.setDescription('Power supply status')
routingTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 6), )
if mibBuilder.loadTexts: routingTable.setStatus('current')
if mibBuilder.loadTexts: routingTable.setDescription('No description available')
routingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 6, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "routingIndex"))
if mibBuilder.loadTexts: routingEntry.setStatus('current')
if mibBuilder.loadTexts: routingEntry.setDescription('No description available')
routingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: routingIndex.setStatus('current')
if mibBuilder.loadTexts: routingIndex.setDescription('No description available')
routingDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routingDest.setStatus('current')
if mibBuilder.loadTexts: routingDest.setDescription('No description available')
routingMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routingMask.setStatus('current')
if mibBuilder.loadTexts: routingMask.setDescription('No description available')
routingGatweway = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routingGatweway.setStatus('current')
if mibBuilder.loadTexts: routingGatweway.setDescription('No description available')
routingIntrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routingIntrfName.setStatus('current')
if mibBuilder.loadTexts: routingIntrfName.setDescription('No description available')
svnSysTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnSysTime.setStatus('current')
if mibBuilder.loadTexts: svnSysTime.setDescription('System time')
svnRouteModDest = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 9, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnRouteModDest.setStatus('current')
if mibBuilder.loadTexts: svnRouteModDest.setDescription('Destination routing modification')
svnRouteModMask = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 9, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnRouteModMask.setStatus('current')
if mibBuilder.loadTexts: svnRouteModMask.setDescription('Subnet mask routing modification')
svnRouteModGateway = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 9, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnRouteModGateway.setStatus('current')
if mibBuilder.loadTexts: svnRouteModGateway.setDescription('Gateway routing modification')
svnRouteModIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnRouteModIfIndex.setStatus('current')
if mibBuilder.loadTexts: svnRouteModIfIndex.setDescription('Interface index routing modification')
svnRouteModIfName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 9, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnRouteModIfName.setStatus('current')
if mibBuilder.loadTexts: svnRouteModIfName.setDescription('Interface name routing modification')
svnRouteModAction = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 9, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnRouteModAction.setStatus('current')
if mibBuilder.loadTexts: svnRouteModAction.setDescription('Routing modification action')
svnUTCTimeOffset = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnUTCTimeOffset.setStatus('current')
if mibBuilder.loadTexts: svnUTCTimeOffset.setDescription('UTC time offset')
svnLogDStat = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 11, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnLogDStat.setStatus('current')
if mibBuilder.loadTexts: svnLogDStat.setDescription('Log Daemon Status')
svnSysStartTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnSysStartTime.setStatus('current')
if mibBuilder.loadTexts: svnSysStartTime.setDescription('System start time')
svnSysUniqId = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnSysUniqId.setStatus('current')
if mibBuilder.loadTexts: svnSysUniqId.setDescription('System unique ID')
svnWebUIPort = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnWebUIPort.setStatus('current')
if mibBuilder.loadTexts: svnWebUIPort.setDescription('Web UI port (0 - Not supported)')
arpTableSize = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 22, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpTableSize.setStatus('current')
if mibBuilder.loadTexts: arpTableSize.setDescription('count of arp table entries')
sysDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 23, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDescr.setStatus('current')
if mibBuilder.loadTexts: sysDescr.setDescription('system description')
sysObjectID = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 23, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysObjectID.setStatus('current')
if mibBuilder.loadTexts: sysObjectID.setDescription('system Object ID')
svnPlatformInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123))
supportedPlatforms = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1))
checkPointUTM_1450 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointUTM-1450").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUTM_1450.setStatus('current')
if mibBuilder.loadTexts: checkPointUTM_1450.setDescription('UTM-1 450')
checkPointUTM_11050 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointUTM-11050").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUTM_11050.setStatus('current')
if mibBuilder.loadTexts: checkPointUTM_11050.setDescription('UTM-1 1050')
checkPointUTM_12050 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointUTM-12050").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUTM_12050.setStatus('current')
if mibBuilder.loadTexts: checkPointUTM_12050.setDescription('UTM-1 2050')
checkPointUTM_1130 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointUTM-1130").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUTM_1130.setStatus('current')
if mibBuilder.loadTexts: checkPointUTM_1130.setDescription('UTM-1 130')
checkPointUTM_1270 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointUTM-1270").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUTM_1270.setStatus('current')
if mibBuilder.loadTexts: checkPointUTM_1270.setDescription('UTM-1 270')
checkPointUTM_1570 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointUTM-1570").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUTM_1570.setStatus('current')
if mibBuilder.loadTexts: checkPointUTM_1570.setDescription('UTM-1 570')
checkPointUTM_11070 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointUTM-11070").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUTM_11070.setStatus('current')
if mibBuilder.loadTexts: checkPointUTM_11070.setDescription('UTM-1 1070')
checkPointUTM_12070 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointUTM-12070").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUTM_12070.setStatus('current')
if mibBuilder.loadTexts: checkPointUTM_12070.setDescription('UTM-1 2070')
checkPointUTM_13070 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointUTM-13070").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUTM_13070.setStatus('current')
if mibBuilder.loadTexts: checkPointUTM_13070.setDescription('UTM-1 3070')
checkPointPower_15070 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointPower-15070").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointPower_15070.setStatus('current')
if mibBuilder.loadTexts: checkPointPower_15070.setDescription('Power-1 5070')
checkPointPower_19070 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointPower-19070").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointPower_19070.setStatus('current')
if mibBuilder.loadTexts: checkPointPower_19070.setDescription('Power-1 9070')
checkPointPower_111000 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointPower-111000").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointPower_111000.setStatus('current')
if mibBuilder.loadTexts: checkPointPower_111000.setDescription('Power-1 11000')
checkPointSmart_15 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-15").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_15.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_15.setDescription('Smart-1 5')
checkPointSmart_125 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-125").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_125.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_125.setDescription('Smart-1 25')
checkPointSmart_150 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-150").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_150.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_150.setDescription('Smart-1 50')
checkPointSmart_1150 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-1150").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_1150.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_1150.setDescription('Smart-1 150')
checkPointIP150 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointIP150.setStatus('current')
if mibBuilder.loadTexts: checkPointIP150.setDescription('IP150')
checkPointIP280 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointIP280.setStatus('current')
if mibBuilder.loadTexts: checkPointIP280.setDescription('IP280')
checkPointIP290 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointIP290.setStatus('current')
if mibBuilder.loadTexts: checkPointIP290.setDescription('IP290')
checkPointIP390 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointIP390.setStatus('current')
if mibBuilder.loadTexts: checkPointIP390.setDescription('IP390')
checkPointIP560 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointIP560.setStatus('current')
if mibBuilder.loadTexts: checkPointIP560.setDescription('IP560')
checkPointIP690 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointIP690.setStatus('current')
if mibBuilder.loadTexts: checkPointIP690.setDescription('IP690')
checkPointIP1280 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointIP1280.setStatus('current')
if mibBuilder.loadTexts: checkPointIP1280.setDescription('IP1280')
checkPointIP2450 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointIP2450.setStatus('current')
if mibBuilder.loadTexts: checkPointIP2450.setDescription('IP2450')
checkPointUNIVERGEUnifiedWall1000 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUNIVERGEUnifiedWall1000.setStatus('current')
if mibBuilder.loadTexts: checkPointUNIVERGEUnifiedWall1000.setDescription('UNIVERGE UnifiedWall 1000')
checkPointUNIVERGEUnifiedWall2000 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUNIVERGEUnifiedWall2000.setStatus('current')
if mibBuilder.loadTexts: checkPointUNIVERGEUnifiedWall2000.setDescription('UNIVERGE UnifiedWall 2000')
checkPointUNIVERGEUnifiedWall4000 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUNIVERGEUnifiedWall4000.setStatus('current')
if mibBuilder.loadTexts: checkPointUNIVERGEUnifiedWall4000.setDescription('UNIVERGE UnifiedWall 4000')
checkPointUNIVERGEUnifiedWall100 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUNIVERGEUnifiedWall100.setStatus('current')
if mibBuilder.loadTexts: checkPointUNIVERGEUnifiedWall100.setDescription('UNIVERGE UnifiedWall 100')
checkPointDLP_19571 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointDLP-19571").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointDLP_19571.setStatus('current')
if mibBuilder.loadTexts: checkPointDLP_19571.setDescription('DLP-1 9571')
checkPointDLP_12571 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointDLP-12571").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointDLP_12571.setStatus('current')
if mibBuilder.loadTexts: checkPointDLP_12571.setDescription('DLP-1 2571')
checkPointIPS_12076 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointIPS-12076").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointIPS_12076.setStatus('current')
if mibBuilder.loadTexts: checkPointIPS_12076.setDescription('IPS-1 2076')
checkPointIPS_15076 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointIPS-15076").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointIPS_15076.setStatus('current')
if mibBuilder.loadTexts: checkPointIPS_15076.setDescription('IPS-1 5076')
checkPointIPS_19076 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointIPS-19076").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointIPS_19076.setStatus('current')
if mibBuilder.loadTexts: checkPointIPS_19076.setDescription('IPS-1 9076')
checkPoint2200 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint2200.setStatus('current')
if mibBuilder.loadTexts: checkPoint2200.setDescription('Check Point 2200')
checkPoint4200 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint4200.setStatus('current')
if mibBuilder.loadTexts: checkPoint4200.setDescription('Check Point 4200')
checkPoint4400 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint4400.setStatus('current')
if mibBuilder.loadTexts: checkPoint4400.setDescription('Check Point 4400')
checkPoint4600 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint4600.setStatus('current')
if mibBuilder.loadTexts: checkPoint4600.setDescription('Check Point 4600')
checkPoint4800 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint4800.setStatus('current')
if mibBuilder.loadTexts: checkPoint4800.setDescription('Check Point 4800')
checkPointTE250 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointTE250.setStatus('current')
if mibBuilder.loadTexts: checkPointTE250.setDescription('Check Point TE250')
checkPoint12200 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint12200.setStatus('current')
if mibBuilder.loadTexts: checkPoint12200.setDescription('Check Point 12200')
checkPoint12400 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint12400.setStatus('current')
if mibBuilder.loadTexts: checkPoint12400.setDescription('Check Point 12400')
checkPoint12600 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint12600.setStatus('current')
if mibBuilder.loadTexts: checkPoint12600.setDescription('Check Point 12600')
checkPointTE1000 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointTE1000.setStatus('current')
if mibBuilder.loadTexts: checkPointTE1000.setDescription('Check Point TE1000')
checkPoint13500 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint13500.setStatus('current')
if mibBuilder.loadTexts: checkPoint13500.setDescription('Check Point 13500')
checkPoint21400 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint21400.setStatus('current')
if mibBuilder.loadTexts: checkPoint21400.setDescription('Check Point 21400')
checkPoint21600 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint21600.setStatus('current')
if mibBuilder.loadTexts: checkPoint21600.setDescription('Check Point 21600')
checkPoint21700 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint21700.setStatus('current')
if mibBuilder.loadTexts: checkPoint21700.setDescription('Check Point 21700')
checkPointVMware = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointVMware.setStatus('current')
if mibBuilder.loadTexts: checkPointVMware.setDescription('VMware')
checkPointOpenServer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointOpenServer.setStatus('current')
if mibBuilder.loadTexts: checkPointOpenServer.setDescription('Open Server')
checkPointSmart_1205 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-1205").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_1205.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_1205.setDescription('Smart-1 205')
checkPointSmart_1210 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-1210").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_1210.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_1210.setDescription('Smart-1 210')
checkPointSmart_1225 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-1225").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_1225.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_1225.setDescription('Smart-1 225')
checkPointSmart_13050 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-13050").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_13050.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_13050.setDescription('Smart-1 3050')
checkPointSmart_13150 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-13150").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_13150.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_13150.setDescription('Smart-1 3150')
checkPoint13800 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint13800.setStatus('current')
if mibBuilder.loadTexts: checkPoint13800.setDescription('Check Point 13800')
checkPoint21800 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint21800.setStatus('current')
if mibBuilder.loadTexts: checkPoint21800.setDescription('Check Point 21800')
checkPointTE250X = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointTE250X.setStatus('current')
if mibBuilder.loadTexts: checkPointTE250X.setDescription('Check Point TE250X')
checkPointTE1000X = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointTE1000X.setStatus('current')
if mibBuilder.loadTexts: checkPointTE1000X.setDescription('Check Point TE1000X')
checkPointTE2000X = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 59), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointTE2000X.setStatus('current')
if mibBuilder.loadTexts: checkPointTE2000X.setDescription('Check Point TE2000X')
checkPointTE100X = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointTE100X.setStatus('current')
if mibBuilder.loadTexts: checkPointTE100X.setDescription('Check Point TE100X')
checkPoint23500 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 61), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint23500.setStatus('current')
if mibBuilder.loadTexts: checkPoint23500.setDescription('Check Point 23500')
checkPoint23800 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint23800.setStatus('current')
if mibBuilder.loadTexts: checkPoint23800.setDescription('Check Point 23800')
checkPoint15400 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 63), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint15400.setStatus('current')
if mibBuilder.loadTexts: checkPoint15400.setDescription('Check Point 15400')
checkPoint15600 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 64), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint15600.setStatus('current')
if mibBuilder.loadTexts: checkPoint15600.setDescription('Check Point 15600')
checkPoint3200 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint3200.setStatus('current')
if mibBuilder.loadTexts: checkPoint3200.setDescription('Check Point 3200')
checkPoint5200 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 66), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint5200.setStatus('current')
if mibBuilder.loadTexts: checkPoint5200.setDescription('Check Point 5200')
checkPoint5400 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 67), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint5400.setStatus('current')
if mibBuilder.loadTexts: checkPoint5400.setDescription('Check Point 5400')
checkPoint5600 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint5600.setStatus('current')
if mibBuilder.loadTexts: checkPoint5600.setDescription('Check Point 5600')
checkPoint5800 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint5800.setStatus('current')
if mibBuilder.loadTexts: checkPoint5800.setDescription('Check Point 5800')
checkPoint5900 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint5900.setStatus('current')
if mibBuilder.loadTexts: checkPoint5900.setDescription('Check Point 5900')
checkPoint3100 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 71), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint3100.setStatus('current')
if mibBuilder.loadTexts: checkPoint3100.setDescription('Check Point 3100')
checkPoint5100 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 72), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint5100.setStatus('current')
if mibBuilder.loadTexts: checkPoint5100.setDescription('Check Point 5100')
checkPointSmart_1405 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 73), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-1405").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_1405.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_1405.setDescription('Smart-1 405')
checkPointSmart_1410 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 74), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-1410").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_1410.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_1410.setDescription('Smart-1 410')
checkPointSmart_5050 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 75), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-5050").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_5050.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_5050.setDescription('Smart-1 5050')
checkPointSmart_525 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 76), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-525").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_525.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_525.setDescription('Smart-1 525')
checkPointSmart_5150 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 77), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-5150").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_5150.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_5150.setDescription('Smart-1 5150')
checkPoint23900 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 78), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint23900.setStatus('current')
if mibBuilder.loadTexts: checkPoint23900.setDescription('Check Point 23900')
checkPoint6500 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint6500.setStatus('current')
if mibBuilder.loadTexts: checkPoint6500.setDescription('Check Point 6500')
checkPoint6800 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint6800.setStatus('current')
if mibBuilder.loadTexts: checkPoint6800.setDescription('Check Point 6800')
checkPoint16000T = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 81), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint16000T.setStatus('current')
if mibBuilder.loadTexts: checkPoint16000T.setDescription('Check Point 16000T')
checkPoint26000 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 82), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint26000.setStatus('current')
if mibBuilder.loadTexts: checkPoint26000.setDescription('Check Point 26000')
checkPointSmart_625 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 83), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-625").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_625.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_625.setDescription('Smart-1 625')
checkPoint16000 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 84), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint16000.setStatus('current')
if mibBuilder.loadTexts: checkPoint16000.setDescription('Check Point 16000')
checkPoint26000T = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 85), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint26000T.setStatus('current')
if mibBuilder.loadTexts: checkPoint26000T.setDescription('Check Point 26000T')
checkPoint3600 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 86), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint3600.setStatus('current')
if mibBuilder.loadTexts: checkPoint3600.setDescription('Check Point 3600')
checkPoint3600T = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 87), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint3600T.setStatus('current')
if mibBuilder.loadTexts: checkPoint3600T.setDescription('Check Point 3600T')
checkPoint6200B = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 88), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint6200B.setStatus('current')
if mibBuilder.loadTexts: checkPoint6200B.setDescription('Check Point 6200B')
checkPoint6200P = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 89), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint6200P.setStatus('current')
if mibBuilder.loadTexts: checkPoint6200P.setDescription('Check Point 6200P')
checkPoint6200T = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint6200T.setStatus('current')
if mibBuilder.loadTexts: checkPoint6200T.setDescription('Check Point 6200T')
checkPoint6600 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint6600.setStatus('current')
if mibBuilder.loadTexts: checkPoint6600.setDescription('Check Point 6600')
checkPoint6900 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 92), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint6900.setStatus('current')
if mibBuilder.loadTexts: checkPoint6900.setDescription('Check Point 6900')
checkPoint16600HS = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 93), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint16600HS.setStatus('current')
if mibBuilder.loadTexts: checkPoint16600HS.setDescription('Check Point 16600HS')
checkPoint28600HS = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 94), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint28600HS.setStatus('current')
if mibBuilder.loadTexts: checkPoint28600HS.setDescription('Check Point 28600HS')
checkPoint6700 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 95), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint6700.setStatus('current')
if mibBuilder.loadTexts: checkPoint6700.setDescription('Check Point 6700')
checkPoint7000 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 96), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint7000.setStatus('current')
if mibBuilder.loadTexts: checkPoint7000.setDescription('Check Point 7000')
checkPoint16200 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 97), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint16200.setStatus('current')
if mibBuilder.loadTexts: checkPoint16200.setDescription('Check Point 16200')
checkPoint28000 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 98), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint28000.setStatus('current')
if mibBuilder.loadTexts: checkPoint28000.setDescription('Check Point 28000')
checkPoint6400 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 99), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint6400.setStatus('current')
if mibBuilder.loadTexts: checkPoint6400.setDescription('Check Point 6400')
checkPoint3800 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 100), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint3800.setStatus('current')
if mibBuilder.loadTexts: checkPoint3800.setDescription('Check Point 3800')
checkPointSmart_6000_L = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-6000-L").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_6000_L.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_6000_L.setDescription('Smart-1 6000-L')
checkPointSmart_6000_XL = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-6000-XL").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_6000_XL.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_6000_XL.setDescription('Smart-1 6000-XL')
checkPointSmart_600_S = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 103), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-600-S").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_600_S.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_600_S.setDescription('Smart-1 600-S')
checkPointSmart_600_M = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 104), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-600-M").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_600_M.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_600_M.setDescription('Smart-1 600-M')
checkPointTE2000XN = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 105), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointTE2000XN.setStatus('current')
if mibBuilder.loadTexts: checkPointTE2000XN.setDescription('Check Point TE2000XN')
checkPointQLS250 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 120), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointQLS250.setStatus('current')
if mibBuilder.loadTexts: checkPointQLS250.setDescription('Quantum LightSpeed QLS250')
checkPointQLS450 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 121), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointQLS450.setStatus('current')
if mibBuilder.loadTexts: checkPointQLS450.setDescription('Quantum LightSpeed QLS450')
checkPointQLS650 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 122), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointQLS650.setStatus('current')
if mibBuilder.loadTexts: checkPointQLS650.setDescription('Quantum LightSpeed QLS650')
checkPointQLS800 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 123), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointQLS800.setStatus('current')
if mibBuilder.loadTexts: checkPointQLS800.setDescription('Quantum LightSpeed QLS800')
checkPointMLS200 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 124), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointMLS200.setStatus('current')
if mibBuilder.loadTexts: checkPointMLS200.setDescription('Maestro LightSpeed MLS200')
checkPointMLS400 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 125), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointMLS400.setStatus('current')
if mibBuilder.loadTexts: checkPointMLS400.setDescription('Maestro LightSpeed MLS400')
checkPointSMB_1530 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 2000), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSMB-1530").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSMB_1530.setStatus('current')
if mibBuilder.loadTexts: checkPointSMB_1530.setDescription('Check Point SMB 1530')
checkPointSMB_1550 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 2001), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSMB-1550").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSMB_1550.setStatus('current')
if mibBuilder.loadTexts: checkPointSMB_1550.setDescription('Check Point SMB 1550')
checkPointSMB_1570 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 2002), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSMB-1570").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSMB_1570.setStatus('current')
if mibBuilder.loadTexts: checkPointSMB_1570.setDescription('Check Point SMB 1570')
checkPointSMB_1570R = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 2003), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSMB-1570R").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSMB_1570R.setStatus('current')
if mibBuilder.loadTexts: checkPointSMB_1570R.setDescription('Check Point SMB 1570R')
checkPointSMB_1590 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 2004), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSMB-1590").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSMB_1590.setStatus('current')
if mibBuilder.loadTexts: checkPointSMB_1590.setDescription('Check Point SMB 1590')
checkPointSMB_1600 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 2005), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSMB-1600").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSMB_1600.setStatus('current')
if mibBuilder.loadTexts: checkPointSMB_1600.setDescription('Check Point SMB 1600')
checkPointSMB_1800 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 2006), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSMB-1800").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSMB_1800.setStatus('current')
if mibBuilder.loadTexts: checkPointSMB_1800.setDescription('Check Point SMB 1800')
checkPoint61000 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 3001), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint61000.setStatus('current')
if mibBuilder.loadTexts: checkPoint61000.setDescription('Check Point 61000 Scalable Platforms')
checkPoint64000 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 3002), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint64000.setStatus('current')
if mibBuilder.loadTexts: checkPoint64000.setDescription('Check Point 64000 Scalable Platforms')
checkPoint41000 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 3003), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint41000.setStatus('current')
if mibBuilder.loadTexts: checkPoint41000.setDescription('Check Point 41000 Scalable Platforms')
checkPoint44000 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 3004), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint44000.setStatus('current')
if mibBuilder.loadTexts: checkPoint44000.setDescription('Check Point 44000 Scalable Platforms')
checkPointMHO140 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 4000), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointMHO140.setStatus('current')
if mibBuilder.loadTexts: checkPointMHO140.setDescription('Check Point Maestro Hyperscale Orchestrator 140')
checkPointMHO170 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 4001), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointMHO170.setStatus('current')
if mibBuilder.loadTexts: checkPointMHO170.setDescription('Check Point Maestro Hyperscale Orchestrator 170')
checkPointMHO175 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 4002), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointMHO175.setStatus('current')
if mibBuilder.loadTexts: checkPointMHO175.setDescription('Check Point Maestro Hyperscale Orchestrator 175')
svnLicensing = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18))
licensingTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1), )
if mibBuilder.loadTexts: licensingTable.setStatus('current')
if mibBuilder.loadTexts: licensingTable.setDescription('No description available')
licensingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "licensingIndex"))
if mibBuilder.loadTexts: licensingEntry.setStatus('current')
if mibBuilder.loadTexts: licensingEntry.setDescription('No description available')
licensingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: licensingIndex.setStatus('current')
if mibBuilder.loadTexts: licensingIndex.setDescription('No description available')
licensingID = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingID.setStatus('current')
if mibBuilder.loadTexts: licensingID.setDescription('No description available')
licensingBladeGUIOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingBladeGUIOrder.setStatus('current')
if mibBuilder.loadTexts: licensingBladeGUIOrder.setDescription('No description available')
licensingBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingBladeName.setStatus('current')
if mibBuilder.loadTexts: licensingBladeName.setDescription('No description available')
licensingState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingState.setStatus('current')
if mibBuilder.loadTexts: licensingState.setDescription('No description available')
licensingExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingExpirationDate.setStatus('current')
if mibBuilder.loadTexts: licensingExpirationDate.setDescription('No description available')
licensingImpact = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingImpact.setStatus('current')
if mibBuilder.loadTexts: licensingImpact.setDescription('No description available')
licensingBladeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingBladeActive.setStatus('current')
if mibBuilder.loadTexts: licensingBladeActive.setDescription('No description available')
licensingTotalQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingTotalQuota.setStatus('current')
if mibBuilder.loadTexts: licensingTotalQuota.setDescription('No description available')
licensingUsedQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingUsedQuota.setStatus('current')
if mibBuilder.loadTexts: licensingUsedQuota.setDescription('No description available')
licensingAssetInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 2))
licensingAssetAccountId = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingAssetAccountId.setStatus('current')
if mibBuilder.loadTexts: licensingAssetAccountId.setDescription('No description available')
licensingAssetPackageDescription = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingAssetPackageDescription.setStatus('current')
if mibBuilder.loadTexts: licensingAssetPackageDescription.setDescription('No description available')
licensingAssetContainerCK = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingAssetContainerCK.setStatus('current')
if mibBuilder.loadTexts: licensingAssetContainerCK.setDescription('No description available')
licensingAssetCKSignature = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingAssetCKSignature.setStatus('current')
if mibBuilder.loadTexts: licensingAssetCKSignature.setDescription('No description available')
licensingAssetContainerSKU = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingAssetContainerSKU.setStatus('current')
if mibBuilder.loadTexts: licensingAssetContainerSKU.setDescription('No description available')
licensingAssetSupportLevel = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingAssetSupportLevel.setStatus('current')
if mibBuilder.loadTexts: licensingAssetSupportLevel.setDescription('No description available')
licensingAssetSupportExpiration = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingAssetSupportExpiration.setStatus('current')
if mibBuilder.loadTexts: licensingAssetSupportExpiration.setDescription('No description available')
licensingAssetActivationStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingAssetActivationStatus.setStatus('current')
if mibBuilder.loadTexts: licensingAssetActivationStatus.setDescription('No description available')
svnConnectivity = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnConnectivity.setStatus('current')
if mibBuilder.loadTexts: svnConnectivity.setDescription('User Center connectivity')
svnNetStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50))
svnNetIfTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1), )
if mibBuilder.loadTexts: svnNetIfTable.setStatus('current')
if mibBuilder.loadTexts: svnNetIfTable.setDescription('No description available')
svnNetIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "svnNetIfIndex"))
if mibBuilder.loadTexts: svnNetIfTableEntry.setStatus('current')
if mibBuilder.loadTexts: svnNetIfTableEntry.setDescription('No description available')
svnNetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: svnNetIfIndex.setStatus('current')
if mibBuilder.loadTexts: svnNetIfIndex.setDescription('No description available')
svnNetIfVsid = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfVsid.setStatus('current')
if mibBuilder.loadTexts: svnNetIfVsid.setDescription('No description available')
svnNetIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfName.setStatus('current')
if mibBuilder.loadTexts: svnNetIfName.setDescription('No description available')
svnNetIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfAddress.setStatus('current')
if mibBuilder.loadTexts: svnNetIfAddress.setDescription('No description available')
svnNetIfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfMask.setStatus('current')
if mibBuilder.loadTexts: svnNetIfMask.setDescription('No description available')
svnNetIfMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfMTU.setStatus('current')
if mibBuilder.loadTexts: svnNetIfMTU.setDescription('No description available')
svnNetIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfState.setStatus('current')
if mibBuilder.loadTexts: svnNetIfState.setDescription('No description available')
svnNetIfMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfMAC.setStatus('current')
if mibBuilder.loadTexts: svnNetIfMAC.setDescription('No description available')
svnNetIfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfDescription.setStatus('current')
if mibBuilder.loadTexts: svnNetIfDescription.setDescription('No description available')
svnNetIfOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfOperState.setStatus('current')
if mibBuilder.loadTexts: svnNetIfOperState.setDescription('No description available')
svnNetIfRXBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfRXBytes.setStatus('current')
if mibBuilder.loadTexts: svnNetIfRXBytes.setDescription('No description available')
svnNetIfRXDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfRXDrops.setStatus('current')
if mibBuilder.loadTexts: svnNetIfRXDrops.setDescription('No description available')
svnNetIfRXErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfRXErrors.setStatus('current')
if mibBuilder.loadTexts: svnNetIfRXErrors.setDescription('No description available')
svnNetIfRXPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfRXPackets.setStatus('current')
if mibBuilder.loadTexts: svnNetIfRXPackets.setDescription('No description available')
svnNetIfTXBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfTXBytes.setStatus('current')
if mibBuilder.loadTexts: svnNetIfTXBytes.setDescription('No description available')
svnNetIfTXDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfTXDrops.setStatus('current')
if mibBuilder.loadTexts: svnNetIfTXDrops.setDescription('No description available')
svnNetIfTXErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfTXErrors.setStatus('current')
if mibBuilder.loadTexts: svnNetIfTXErrors.setDescription('No description available')
svnNetIfTXPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfTXPackets.setStatus('current')
if mibBuilder.loadTexts: svnNetIfTXPackets.setDescription('No description available')
vsRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 51), )
if mibBuilder.loadTexts: vsRoutingTable.setStatus('current')
if mibBuilder.loadTexts: vsRoutingTable.setDescription('No description available')
vsRoutingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 51, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "vsRoutingIndex"))
if mibBuilder.loadTexts: vsRoutingEntry.setStatus('current')
if mibBuilder.loadTexts: vsRoutingEntry.setDescription('No description available')
vsRoutingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 51, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vsRoutingIndex.setStatus('current')
if mibBuilder.loadTexts: vsRoutingIndex.setDescription('No description available')
vsRoutingDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 51, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRoutingDest.setStatus('current')
if mibBuilder.loadTexts: vsRoutingDest.setDescription('No description available')
vsRoutingMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 51, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRoutingMask.setStatus('current')
if mibBuilder.loadTexts: vsRoutingMask.setDescription('No description available')
vsRoutingGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 51, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRoutingGateway.setStatus('current')
if mibBuilder.loadTexts: vsRoutingGateway.setDescription('No description available')
vsRoutingIntrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 51, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRoutingIntrfName.setStatus('current')
if mibBuilder.loadTexts: vsRoutingIntrfName.setDescription('No description available')
vsRoutingVsId = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 51, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRoutingVsId.setStatus('current')
if mibBuilder.loadTexts: vsRoutingVsId.setDescription('No description available')
svnStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 101), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnStatCode.setStatus('current')
if mibBuilder.loadTexts: svnStatCode.setDescription('Status code')
svnStatShortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnStatShortDescr.setStatus('current')
if mibBuilder.loadTexts: svnStatShortDescr.setDescription('Status short description')
svnStatLongDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 103), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnStatLongDescr.setStatus('current')
if mibBuilder.loadTexts: svnStatLongDescr.setDescription('Status long description')
svnServicePack = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 999), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnServicePack.setStatus('current')
if mibBuilder.loadTexts: svnServicePack.setDescription('SVN service pack')
mgProdName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgProdName.setStatus('current')
if mibBuilder.loadTexts: mgProdName.setDescription('Product name')
mgVerMajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgVerMajor.setStatus('current')
if mibBuilder.loadTexts: mgVerMajor.setDescription('Major version')
mgVerMinor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgVerMinor.setStatus('current')
if mibBuilder.loadTexts: mgVerMinor.setDescription('Minor version')
mgBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgBuildNumber.setStatus('current')
if mibBuilder.loadTexts: mgBuildNumber.setDescription('Build number')
mgActiveStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgActiveStatus.setStatus('current')
if mibBuilder.loadTexts: mgActiveStatus.setDescription('Active status')
mgFwmIsAlive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgFwmIsAlive.setStatus('current')
if mibBuilder.loadTexts: mgFwmIsAlive.setDescription('Managment is alive')
mgConnectedClientsTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 7, 7), )
if mibBuilder.loadTexts: mgConnectedClientsTable.setStatus('current')
if mibBuilder.loadTexts: mgConnectedClientsTable.setDescription('No description available')
mgICAStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgICAStatus.setStatus('current')
if mibBuilder.loadTexts: mgICAStatus.setDescription('ICA status')
mgMgmtHAJournals = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgMgmtHAJournals.setStatus('current')
if mibBuilder.loadTexts: mgMgmtHAJournals.setDescription('Management HA synchronization journals')
mgIsLicenseViolation = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgIsLicenseViolation.setStatus('current')
if mibBuilder.loadTexts: mgIsLicenseViolation.setDescription('License violation detected')
mgLicenseViolationMsg = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgLicenseViolationMsg.setStatus('current')
if mibBuilder.loadTexts: mgLicenseViolationMsg.setDescription('License violation detected')
mgConnectedClientsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 7, 7, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "mgIndex"))
if mibBuilder.loadTexts: mgConnectedClientsEntry.setStatus('current')
if mibBuilder.loadTexts: mgConnectedClientsEntry.setDescription('No description available')
mgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 7, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mgIndex.setStatus('current')
if mibBuilder.loadTexts: mgIndex.setDescription('No description available')
mgClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 7, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgClientName.setStatus('current')
if mibBuilder.loadTexts: mgClientName.setDescription('No description available')
mgClientHost = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 7, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgClientHost.setStatus('current')
if mibBuilder.loadTexts: mgClientHost.setDescription('No description available')
mgClientDbLock = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 7, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgClientDbLock.setStatus('current')
if mibBuilder.loadTexts: mgClientDbLock.setDescription('No description available')
mgApplicationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 7, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgApplicationType.setStatus('current')
if mibBuilder.loadTexts: mgApplicationType.setDescription('No description available')
mgLogServerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14))
mgLSLogReceiveRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 1), Unsigned32())
if mibBuilder.loadTexts: mgLSLogReceiveRate.setStatus('current')
if mibBuilder.loadTexts: mgLSLogReceiveRate.setDescription('MGMT Log Server Log Receive Rate')
mgLSLogReceiveRatePeak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 2), Unsigned32())
if mibBuilder.loadTexts: mgLSLogReceiveRatePeak.setStatus('current')
if mibBuilder.loadTexts: mgLSLogReceiveRatePeak.setDescription('MGMT Log Server Log Receive Rate Peak')
mgLSLogReceiveRate10Min = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 3), Unsigned32())
if mibBuilder.loadTexts: mgLSLogReceiveRate10Min.setStatus('current')
if mibBuilder.loadTexts: mgLSLogReceiveRate10Min.setDescription('MGMT Log Server Log Receive Rate (Last 10 Minutes)')
mgConnectedGatewaysTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 4), )
if mibBuilder.loadTexts: mgConnectedGatewaysTable.setStatus('current')
if mibBuilder.loadTexts: mgConnectedGatewaysTable.setDescription('Connected Gateways Table')
mgConnectedGatewaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 4, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "mglsGWIndex"))
if mibBuilder.loadTexts: mgConnectedGatewaysEntry.setStatus('current')
if mibBuilder.loadTexts: mgConnectedGatewaysEntry.setDescription('No description available')
mglsGWIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mglsGWIndex.setStatus('current')
if mibBuilder.loadTexts: mglsGWIndex.setDescription('No description available')
mglsGWIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mglsGWIP.setStatus('current')
if mibBuilder.loadTexts: mglsGWIP.setDescription('No description available')
mglsGWState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mglsGWState.setStatus('current')
if mibBuilder.loadTexts: mglsGWState.setDescription('No description available')
mglsGWLastLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mglsGWLastLoginTime.setStatus('current')
if mibBuilder.loadTexts: mglsGWLastLoginTime.setDescription('No description available')
mglsGWLogReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mglsGWLogReceiveRate.setStatus('current')
if mibBuilder.loadTexts: mglsGWLogReceiveRate.setDescription('No description available')
mgIndexerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5))
mgIndexerInfoTotalReadLogs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 1), DisplayString())
if mibBuilder.loadTexts: mgIndexerInfoTotalReadLogs.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoTotalReadLogs.setDescription('Total Read Logs')
mgIndexerInfoTotalUpdatesAndLogsIndexed = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 2), DisplayString())
if mibBuilder.loadTexts: mgIndexerInfoTotalUpdatesAndLogsIndexed.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoTotalUpdatesAndLogsIndexed.setDescription('Total Updates and Logs Indexed')
mgIndexerInfoTotalReadLogsErrors = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 3), DisplayString())
if mibBuilder.loadTexts: mgIndexerInfoTotalReadLogsErrors.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoTotalReadLogsErrors.setDescription('Total Read Logs Errors')
mgIndexerInfoTotalUpdatesAndLogsIndexedErrors = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 4), DisplayString())
if mibBuilder.loadTexts: mgIndexerInfoTotalUpdatesAndLogsIndexedErrors.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoTotalUpdatesAndLogsIndexedErrors.setDescription('Total Updates and Logs Indexed Errors')
mgIndexerInfoUpdatesAndLogsIndexedRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 5), Unsigned32())
if mibBuilder.loadTexts: mgIndexerInfoUpdatesAndLogsIndexedRate.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoUpdatesAndLogsIndexedRate.setDescription('Updates and Logs Indexed Rate')
mgIndexerInfoReadLogsRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 6), Unsigned32())
if mibBuilder.loadTexts: mgIndexerInfoReadLogsRate.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoReadLogsRate.setDescription('Read Logs Rate')
mgIndexerInfoUpdatesAndLogsIndexedRate10min = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 7), Unsigned32())
if mibBuilder.loadTexts: mgIndexerInfoUpdatesAndLogsIndexedRate10min.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoUpdatesAndLogsIndexedRate10min.setDescription('Updates and Logs Indexed Rate (10 min)')
mgIndexerInfoReadLogsRate10min = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 8), Unsigned32())
if mibBuilder.loadTexts: mgIndexerInfoReadLogsRate10min.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoReadLogsRate10min.setDescription('Read Logs Rate  (10 min)')
mgIndexerInfoUpdatesAndLogsIndexedRate60min = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 9), Unsigned32())
if mibBuilder.loadTexts: mgIndexerInfoUpdatesAndLogsIndexedRate60min.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoUpdatesAndLogsIndexedRate60min.setDescription('Updates and Logs Indexed Rate (60 min)')
mgIndexerInfoReadLogsRate60min = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 10), Unsigned32())
if mibBuilder.loadTexts: mgIndexerInfoReadLogsRate60min.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoReadLogsRate60min.setDescription('Read Logs Rate (60 min)')
mgIndexerInfoUpdatesAndLogsIndexedRatePeak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 11), Unsigned32())
if mibBuilder.loadTexts: mgIndexerInfoUpdatesAndLogsIndexedRatePeak.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoUpdatesAndLogsIndexedRatePeak.setDescription('Updates and Logs Indexed Rate Peak')
mgIndexerInfoReadLogsRatePeak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 12), Unsigned32())
if mibBuilder.loadTexts: mgIndexerInfoReadLogsRatePeak.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoReadLogsRatePeak.setDescription('Read Logs Rate Peak')
mgIndexerInfoReadLogsDelay = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 13), Unsigned32())
if mibBuilder.loadTexts: mgIndexerInfoReadLogsDelay.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoReadLogsDelay.setDescription('Read Logs Delay')
mgStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgStatCode.setStatus('current')
if mibBuilder.loadTexts: mgStatCode.setDescription('Status code')
mgStatShortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgStatShortDescr.setStatus('current')
if mibBuilder.loadTexts: mgStatShortDescr.setDescription('Status short description')
mgStatLongDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 103), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgStatLongDescr.setStatus('current')
if mibBuilder.loadTexts: mgStatLongDescr.setDescription('Status long description')
mgLSLogReceiveRate1Hour = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 6), Unsigned32())
if mibBuilder.loadTexts: mgLSLogReceiveRate1Hour.setStatus('current')
if mibBuilder.loadTexts: mgLSLogReceiveRate1Hour.setDescription('MGMT Log Server Log Receive Rate (Last Hour)')
wamPluginPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 8, 6))
wamPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 8, 7))
wamUagQueries = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 8, 8))
wamGlobalPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 8, 9))
wamProdName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamProdName.setStatus('current')
if mibBuilder.loadTexts: wamProdName.setDescription('Product name')
wamVerMajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamVerMajor.setStatus('current')
if mibBuilder.loadTexts: wamVerMajor.setDescription('Major version')
wamVerMinor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamVerMinor.setStatus('current')
if mibBuilder.loadTexts: wamVerMinor.setDescription('Minor version')
wamState = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamState.setStatus('current')
if mibBuilder.loadTexts: wamState.setDescription('WAM state')
wamName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamName.setStatus('current')
if mibBuilder.loadTexts: wamName.setDescription('WAM name')
wamStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamStatCode.setStatus('current')
if mibBuilder.loadTexts: wamStatCode.setDescription('WAM status code')
wamStatShortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamStatShortDescr.setStatus('current')
if mibBuilder.loadTexts: wamStatShortDescr.setDescription('WAM status short description')
wamStatLongDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 103), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamStatLongDescr.setStatus('current')
if mibBuilder.loadTexts: wamStatLongDescr.setDescription('WAM status full description')
wamAcceptReq = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamAcceptReq.setStatus('current')
if mibBuilder.loadTexts: wamAcceptReq.setDescription('Plugin accepted requests')
wamRejectReq = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamRejectReq.setStatus('current')
if mibBuilder.loadTexts: wamRejectReq.setDescription('Plugin rejected requests')
wamPolicyName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamPolicyName.setStatus('current')
if mibBuilder.loadTexts: wamPolicyName.setDescription('Policy name')
wamPolicyUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamPolicyUpdate.setStatus('current')
if mibBuilder.loadTexts: wamPolicyUpdate.setDescription('Last update time')
wamUagHost = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamUagHost.setStatus('current')
if mibBuilder.loadTexts: wamUagHost.setDescription('UAG host name')
wamUagIp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamUagIp.setStatus('current')
if mibBuilder.loadTexts: wamUagIp.setDescription('UAG IP address')
wamUagPort = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamUagPort.setStatus('current')
if mibBuilder.loadTexts: wamUagPort.setDescription('UAG port')
wamUagNoQueries = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamUagNoQueries.setStatus('current')
if mibBuilder.loadTexts: wamUagNoQueries.setDescription('UAG no. of queries')
wamUagLastQuery = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamUagLastQuery.setStatus('current')
if mibBuilder.loadTexts: wamUagLastQuery.setDescription('UAG last query time')
wamOpenSessions = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamOpenSessions.setStatus('current')
if mibBuilder.loadTexts: wamOpenSessions.setDescription('Open sessions')
wamLastSession = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamLastSession.setStatus('current')
if mibBuilder.loadTexts: wamLastSession.setDescription('Last open session time')
dtpsProdName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpsProdName.setStatus('current')
if mibBuilder.loadTexts: dtpsProdName.setDescription('Product name')
dtpsVerMajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 9, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpsVerMajor.setStatus('current')
if mibBuilder.loadTexts: dtpsVerMajor.setDescription('Major version')
dtpsVerMinor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 9, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpsVerMinor.setStatus('current')
if mibBuilder.loadTexts: dtpsVerMinor.setDescription('Minor version')
dtpsLicensedUsers = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 9, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpsLicensedUsers.setStatus('current')
if mibBuilder.loadTexts: dtpsLicensedUsers.setDescription('Licensed users')
dtpsConnectedUsers = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 9, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpsConnectedUsers.setStatus('current')
if mibBuilder.loadTexts: dtpsConnectedUsers.setDescription('Connected users')
dtpsStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 9, 101), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpsStatCode.setStatus('current')
if mibBuilder.loadTexts: dtpsStatCode.setDescription('Status code')
dtpsStatShortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 9, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpsStatShortDescr.setStatus('current')
if mibBuilder.loadTexts: dtpsStatShortDescr.setDescription('Status short description')
dtpsStatLongDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 9, 103), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpsStatLongDescr.setStatus('current')
if mibBuilder.loadTexts: dtpsStatLongDescr.setDescription('Status long description')
lsProdName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsProdName.setStatus('current')
if mibBuilder.loadTexts: lsProdName.setDescription('Product name')
lsVerMajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsVerMajor.setStatus('current')
if mibBuilder.loadTexts: lsVerMajor.setDescription('Major version')
lsVerMinor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsVerMinor.setStatus('current')
if mibBuilder.loadTexts: lsVerMinor.setDescription('Minor version')
lsBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsBuildNumber.setStatus('current')
if mibBuilder.loadTexts: lsBuildNumber.setDescription('Build number')
lsFwmIsAlive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsFwmIsAlive.setStatus('current')
if mibBuilder.loadTexts: lsFwmIsAlive.setDescription('Log Server is alive')
lsLoggingInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14))
lsLogReceiveRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 1), Unsigned32())
if mibBuilder.loadTexts: lsLogReceiveRate.setStatus('current')
if mibBuilder.loadTexts: lsLogReceiveRate.setDescription('Log Server Log Receive Rate')
lsLogReceiveRatePeak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 2), Unsigned32())
if mibBuilder.loadTexts: lsLogReceiveRatePeak.setStatus('current')
if mibBuilder.loadTexts: lsLogReceiveRatePeak.setDescription('Log Server Log Receive Rate Peak')
lsLogReceiveRate10Min = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 3), Unsigned32())
if mibBuilder.loadTexts: lsLogReceiveRate10Min.setStatus('current')
if mibBuilder.loadTexts: lsLogReceiveRate10Min.setDescription('Log Server Log Receive Rate (Last 10 Minutes)')
lsConnectedGatewaysTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 4), )
if mibBuilder.loadTexts: lsConnectedGatewaysTable.setStatus('current')
if mibBuilder.loadTexts: lsConnectedGatewaysTable.setDescription('Connected Gateways Table')
lsConnectedGatewaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 4, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "lsGWIndex"))
if mibBuilder.loadTexts: lsConnectedGatewaysEntry.setStatus('current')
if mibBuilder.loadTexts: lsConnectedGatewaysEntry.setDescription('No description available')
lsGWIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lsGWIndex.setStatus('current')
if mibBuilder.loadTexts: lsGWIndex.setDescription('No description available')
lsGWIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsGWIP.setStatus('current')
if mibBuilder.loadTexts: lsGWIP.setDescription('No description available')
lsGWState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsGWState.setStatus('current')
if mibBuilder.loadTexts: lsGWState.setDescription('No description available')
lsGWLastLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsGWLastLoginTime.setStatus('current')
if mibBuilder.loadTexts: lsGWLastLoginTime.setDescription('No description available')
lsGWLogReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsGWLogReceiveRate.setStatus('current')
if mibBuilder.loadTexts: lsGWLogReceiveRate.setDescription('No description available')
lsIndexerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 5))
lsIndexerInfoTotalReadLogs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 5, 1), Unsigned32())
if mibBuilder.loadTexts: lsIndexerInfoTotalReadLogs.setStatus('current')
if mibBuilder.loadTexts: lsIndexerInfoTotalReadLogs.setDescription('Total Read Logs')
lsIndexerInfoTotalUpdatesAndLogsIndexed = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 5, 2), Unsigned32())
if mibBuilder.loadTexts: lsIndexerInfoTotalUpdatesAndLogsIndexed.setStatus('current')
if mibBuilder.loadTexts: lsIndexerInfoTotalUpdatesAndLogsIndexed.setDescription('Total Updates and Logs Indexed')
lsIndexerInfoTotalReadLogsErrors = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 5, 3), Unsigned32())
if mibBuilder.loadTexts: lsIndexerInfoTotalReadLogsErrors.setStatus('current')
if mibBuilder.loadTexts: lsIndexerInfoTotalReadLogsErrors.setDescription('Total Read Logs Errors')
lsIndexerInfoTotalUpdatesAndLogsIndexedErrors = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 5, 4), Unsigned32())
if mibBuilder.loadTexts: lsIndexerInfoTotalUpdatesAndLogsIndexedErrors.setStatus('current')
if mibBuilder.loadTexts: lsIndexerInfoTotalUpdatesAndLogsIndexedErrors.setDescription('Total Updates and Logs Indexed Errors')
lsIndexerInfoUpdatesAndLogsIndexedRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 5, 5), Unsigned32())
if mibBuilder.loadTexts: lsIndexerInfoUpdatesAndLogsIndexedRate.setStatus('current')
if mibBuilder.loadTexts: lsIndexerInfoUpdatesAndLogsIndexedRate.setDescription('Updates and Logs Indexed Rate')
lsIndexerInfoReadLogsRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 5, 6), Unsigned32())
if mibBuilder.loadTexts: lsIndexerInfoReadLogsRate.setStatus('current')
if mibBuilder.loadTexts: lsIndexerInfoReadLogsRate.setDescription('Read Logs Rate')
lsIndexerInfoUpdatesAndLogsIndexedRatePeak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 5, 7), Unsigned32())
if mibBuilder.loadTexts: lsIndexerInfoUpdatesAndLogsIndexedRatePeak.setStatus('current')
if mibBuilder.loadTexts: lsIndexerInfoUpdatesAndLogsIndexedRatePeak.setDescription('Updates and Logs Indexed Rate Peak')
lsIndexerInfoReadLogsRatePeak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 5, 8), Unsigned32())
if mibBuilder.loadTexts: lsIndexerInfoReadLogsRatePeak.setStatus('current')
if mibBuilder.loadTexts: lsIndexerInfoReadLogsRatePeak.setDescription('Read Logs Rate Peak')
lsLogReceiveRate1Hour = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 6), Unsigned32())
if mibBuilder.loadTexts: lsLogReceiveRate1Hour.setStatus('current')
if mibBuilder.loadTexts: lsLogReceiveRate1Hour.setDescription('Log Server Log Receive Rate (Last Hour)')
lsStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsStatCode.setStatus('current')
if mibBuilder.loadTexts: lsStatCode.setDescription('Status code')
lsStatShortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsStatShortDescr.setStatus('current')
if mibBuilder.loadTexts: lsStatShortDescr.setDescription('Status short description')
lsStatLongDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 103), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsStatLongDescr.setStatus('current')
if mibBuilder.loadTexts: lsStatLongDescr.setDescription('Status long description')
lsConnectedClientsTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 11, 7), )
if mibBuilder.loadTexts: lsConnectedClientsTable.setStatus('current')
if mibBuilder.loadTexts: lsConnectedClientsTable.setDescription('No description available')
lsConnectedClientsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 11, 7, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "lsIndex"))
if mibBuilder.loadTexts: lsConnectedClientsEntry.setStatus('current')
if mibBuilder.loadTexts: lsConnectedClientsEntry.setDescription('No description available')
lsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 11, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lsIndex.setStatus('current')
if mibBuilder.loadTexts: lsIndex.setDescription('No description available')
lsClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 11, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsClientName.setStatus('current')
if mibBuilder.loadTexts: lsClientName.setDescription('No description available')
lsClientHost = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 11, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsClientHost.setStatus('current')
if mibBuilder.loadTexts: lsClientHost.setDescription('No description available')
lsClientDbLock = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 11, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsClientDbLock.setStatus('current')
if mibBuilder.loadTexts: lsClientDbLock.setDescription('No description available')
lsApplicationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 11, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsApplicationType.setStatus('current')
if mibBuilder.loadTexts: lsApplicationType.setDescription('No description available')
gxInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 1))
gxCreateInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5))
gxDeleteInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 6))
gxUpdateInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 7))
gxPathMngInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 8))
gxGpduInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 9))
gxInitiateInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 10))
gxGTPv2CreateInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11))
gxGTPv2DeleteInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 12))
gxGTPv2UpdateInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 13))
gxGTPv2PathMngInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 14))
gxGTPv2CmdInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 15))
gxProdName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxProdName.setStatus('current')
if mibBuilder.loadTexts: gxProdName.setDescription('Product name')
gxProdVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxProdVersion.setStatus('current')
if mibBuilder.loadTexts: gxProdVersion.setDescription('Product Version')
gxProdVerMajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxProdVerMajor.setStatus('current')
if mibBuilder.loadTexts: gxProdVerMajor.setDescription('Major version')
gxProdVerMinor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxProdVerMinor.setStatus('current')
if mibBuilder.loadTexts: gxProdVerMinor.setDescription('Minor version')
gxBuild = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxBuild.setStatus('current')
if mibBuilder.loadTexts: gxBuild.setDescription('GX build number')
gxCreateSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxCreateSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxCreateSinceInstall.setDescription('Total success create contexts since install policy')
gxActContxt = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxActContxt.setStatus('current')
if mibBuilder.loadTexts: gxActContxt.setDescription('Total active contexts')
gxDropPlicyCreate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropPlicyCreate.setStatus('current')
if mibBuilder.loadTexts: gxDropPlicyCreate.setDescription('Total dropped create messages due to policy violation')
gxDropMalformedReqCreate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropMalformedReqCreate.setStatus('current')
if mibBuilder.loadTexts: gxDropMalformedReqCreate.setDescription('Total dropped create messages due to malformed create-request')
gxDropMalformedRespCreate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropMalformedRespCreate.setStatus('current')
if mibBuilder.loadTexts: gxDropMalformedRespCreate.setDescription('Total dropped create messages due to malformed create-response')
gxExpiredCreate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxExpiredCreate.setStatus('current')
if mibBuilder.loadTexts: gxExpiredCreate.setDescription('Total time-out expired create messages ')
gxBadCauseCreate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxBadCauseCreate.setStatus('current')
if mibBuilder.loadTexts: gxBadCauseCreate.setDescription('Total bad cause create messages')
gxSecondaryNsapiEntries = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxSecondaryNsapiEntries.setStatus('current')
if mibBuilder.loadTexts: gxSecondaryNsapiEntries.setDescription('Total entries in gtp_secondary_nsapi')
gxActv0v1PdnConns = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxActv0v1PdnConns.setStatus('current')
if mibBuilder.loadTexts: gxActv0v1PdnConns.setDescription('Total active v0 v1 PDN connections')
gxTunnelApnsEntries = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxTunnelApnsEntries.setStatus('current')
if mibBuilder.loadTexts: gxTunnelApnsEntries.setDescription('Total entries in gtp_tunnel_apns')
gxTunnelsEntries = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxTunnelsEntries.setStatus('current')
if mibBuilder.loadTexts: gxTunnelsEntries.setDescription('Total entries in gtp_tunnels')
gxDeleteSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDeleteSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxDeleteSinceInstall.setDescription('Total success delete messages since install policy')
gxDropOutOfContxtDelete = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropOutOfContxtDelete.setStatus('current')
if mibBuilder.loadTexts: gxDropOutOfContxtDelete.setDescription('Total dropped out of context delete messages')
gxDropMalformedReqDelete = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropMalformedReqDelete.setStatus('current')
if mibBuilder.loadTexts: gxDropMalformedReqDelete.setDescription('Total dropped delete messages due to malformed delete-request')
gxDropMalformedRespDelete = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropMalformedRespDelete.setStatus('current')
if mibBuilder.loadTexts: gxDropMalformedRespDelete.setDescription('Total dropped delete messages due to malformed delete-response')
gxExpiredDelete = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxExpiredDelete.setStatus('current')
if mibBuilder.loadTexts: gxExpiredDelete.setDescription('Total time-out expired delete messages ')
gxBadCauseDelete = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxBadCauseDelete.setStatus('current')
if mibBuilder.loadTexts: gxBadCauseDelete.setDescription('Total bad cause delete messages')
gxUpdateSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxUpdateSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxUpdateSinceInstall.setDescription('Total success update messages since install policy')
gxDropOutOfContxtUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropOutOfContxtUpdate.setStatus('current')
if mibBuilder.loadTexts: gxDropOutOfContxtUpdate.setDescription('Total dropped out of context update messages')
gxDropMalformedReqUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropMalformedReqUpdate.setStatus('current')
if mibBuilder.loadTexts: gxDropMalformedReqUpdate.setDescription('Total dropped update messages due to malformed update-request')
gxDropMalformedRespUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropMalformedRespUpdate.setStatus('current')
if mibBuilder.loadTexts: gxDropMalformedRespUpdate.setDescription('Total dropped update messages due to malformed update-response')
gxExpiredUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxExpiredUpdate.setStatus('current')
if mibBuilder.loadTexts: gxExpiredUpdate.setDescription('Total time-out expired update messages ')
gxBadCauseUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxBadCauseUpdate.setStatus('current')
if mibBuilder.loadTexts: gxBadCauseUpdate.setDescription('Total bad cause update messages')
gxEchoSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxEchoSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxEchoSinceInstall.setDescription('Total success echo messages since install policy')
gxVnspSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxVnspSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxVnspSinceInstall.setDescription('Total success vnsp messages since install policy')
gxDropPolicyEcho = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropPolicyEcho.setStatus('current')
if mibBuilder.loadTexts: gxDropPolicyEcho.setDescription('Total dropped echo messages due to policy violation')
gxDropMalformedReqEcho = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropMalformedReqEcho.setStatus('current')
if mibBuilder.loadTexts: gxDropMalformedReqEcho.setDescription('Total dropped echo messages due to malformed echo-request')
gxDropMalformedRespEcho = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropMalformedRespEcho.setStatus('current')
if mibBuilder.loadTexts: gxDropMalformedRespEcho.setDescription('Total dropped echo messages due to malformed echo-response')
gxExpiredEcho = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxExpiredEcho.setStatus('current')
if mibBuilder.loadTexts: gxExpiredEcho.setDescription('Total time-out expired echo messages ')
gxDropVnsp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropVnsp.setStatus('current')
if mibBuilder.loadTexts: gxDropVnsp.setDescription('Total dropped vnsp messages')
gxGtpPathEntries = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGtpPathEntries.setStatus('current')
if mibBuilder.loadTexts: gxGtpPathEntries.setDescription('Total gtp path entries')
gxGpdu1MinAvgRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGpdu1MinAvgRate.setStatus('current')
if mibBuilder.loadTexts: gxGpdu1MinAvgRate.setDescription('GPDU 1 minute average packet rate')
gxDropOutOfContxtGpdu = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropOutOfContxtGpdu.setStatus('current')
if mibBuilder.loadTexts: gxDropOutOfContxtGpdu.setDescription("Total dropped out of context GPDU's ")
gxDropAnti_spoofingGpdu = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 9, 3), Integer32()).setLabel("gxDropAnti-spoofingGpdu").setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropAnti_spoofingGpdu.setStatus('current')
if mibBuilder.loadTexts: gxDropAnti_spoofingGpdu.setDescription("Total dropped GPDU's due to anti-spoofing")
gxDropMs_MsGpdu = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 9, 4), Integer32()).setLabel("gxDropMs-MsGpdu").setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropMs_MsGpdu.setStatus('current')
if mibBuilder.loadTexts: gxDropMs_MsGpdu.setDescription("Total dropped GPDU's due to ms-ms violation ")
gxDropBadSeqGpdu = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropBadSeqGpdu.setStatus('current')
if mibBuilder.loadTexts: gxDropBadSeqGpdu.setDescription("Total dropped GPDU's due bad sequence")
gxDropBadGpdu = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 9, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropBadGpdu.setStatus('current')
if mibBuilder.loadTexts: gxDropBadGpdu.setDescription("Total dropped bad GPDU's")
gxGpduExpiredTunnel = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGpduExpiredTunnel.setStatus('current')
if mibBuilder.loadTexts: gxGpduExpiredTunnel.setDescription('Total expired GTP tunnels')
gxInitiateSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxInitiateSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxInitiateSinceInstall.setDescription('Total successive initate activations since last install policy')
gxDropInitiationReq = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropInitiationReq.setStatus('current')
if mibBuilder.loadTexts: gxDropInitiationReq.setDescription('Total initate activation request messages droped ')
gxDropInitiationResp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropInitiationResp.setStatus('current')
if mibBuilder.loadTexts: gxDropInitiationResp.setDescription('Total initate activation response messages droped')
gxExpiredInitiateAct = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxExpiredInitiateAct.setStatus('current')
if mibBuilder.loadTexts: gxExpiredInitiateAct.setDescription('Total time-out expired initate activations messages')
gxGTPv2CreateSessionSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2CreateSessionSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2CreateSessionSinceInstall.setDescription('Total success create session messages since install policy')
gxGTPv2CreateBearerSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2CreateBearerSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2CreateBearerSinceInstall.setDescription('Total success create bearer messages since install policy')
gxGTPv2ExpiredCreateSession = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ExpiredCreateSession.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ExpiredCreateSession.setDescription('Total time-out expired create session messages ')
gxGTPv2ExpiredCreateBearer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ExpiredCreateBearer.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ExpiredCreateBearer.setDescription('Total time-out expired create bearer messages ')
gxGTPv2DropMalformedCreateSessionReq = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedCreateSessionReq.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedCreateSessionReq.setDescription('Total dropped create session request messages due to malformed create-request')
gxGTPv2DropMalformedCreateSessionResp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedCreateSessionResp.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedCreateSessionResp.setDescription('Total dropped create session response messages due to malformed create-response')
gxGTPv2DropMalformedCreateBearerReq = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedCreateBearerReq.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedCreateBearerReq.setDescription('Total dropped create bearer request messages due to malformed create-request')
gxGTPv2DropMalformedCreateBearerResp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedCreateBearerResp.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedCreateBearerResp.setDescription('Total dropped create bearer response messages due to malformed create-response')
gxGTPv2DropPolicyCreateSession = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropPolicyCreateSession.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropPolicyCreateSession.setDescription('Total dropped create session messages due to policy violation')
gxGTPv2DropPolicyCreateBearer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropPolicyCreateBearer.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropPolicyCreateBearer.setDescription('Total dropped create bearer messages due to policy violation')
gxGTPv2ActPDN = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ActPDN.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ActPDN.setDescription('Total active GTPv2 PDN connections')
gxGTPv2ActDataBearers = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ActDataBearers.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ActDataBearers.setDescription('Total active data bearers')
gxGTPv2DeleteSessionSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DeleteSessionSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DeleteSessionSinceInstall.setDescription('Total success delete session messages since install policy')
gxGTPv2DeleteBearerSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DeleteBearerSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DeleteBearerSinceInstall.setDescription('Total success delete bearer messages since install policy')
gxGTPv2ExpiredDeleteSession = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ExpiredDeleteSession.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ExpiredDeleteSession.setDescription('Total time-out expired delete session messages ')
gxGTPv2ExpiredDeleteBearer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ExpiredDeleteBearer.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ExpiredDeleteBearer.setDescription('Total time-out expired delete bearer messages ')
gxGTPv2DropMalformedDeleteSessionReq = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedDeleteSessionReq.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedDeleteSessionReq.setDescription('Total dropped delete session request messages due to malformed delete-request')
gxGTPv2DropMalformedDeleteSessionResp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 12, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedDeleteSessionResp.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedDeleteSessionResp.setDescription('Total dropped delete session response messages due to malformed delete-response')
gxGTPv2DropMalformedDeleteBearerReq = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 12, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedDeleteBearerReq.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedDeleteBearerReq.setDescription('Total dropped delete bearer request messages due to malformed delete-request')
gxGTPv2DropMalformedDeleteBearerResp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 12, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedDeleteBearerResp.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedDeleteBearerResp.setDescription('Total dropped delete bearer response messages due to malformed delete-response')
gxGTPv2DropPolicyDeleteSession = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 12, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropPolicyDeleteSession.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropPolicyDeleteSession.setDescription('Total dropped delete session messages due to policy violation')
gxGTPv2DropPolicyDeleteBearer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 12, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropPolicyDeleteBearer.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropPolicyDeleteBearer.setDescription('Total dropped delete bearer messages due to policy violation')
gxGTPv2UpdateBearerSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2UpdateBearerSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2UpdateBearerSinceInstall.setDescription('Total success update bearer messages since install policy')
gxGTPv2ExpiredUpdateBearer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ExpiredUpdateBearer.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ExpiredUpdateBearer.setDescription('Total time-out expired update bearer messages ')
gxGTPv2ModifyBearerSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 13, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ModifyBearerSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ModifyBearerSinceInstall.setDescription('Total success modify bearer messages since install policy')
gxGTPv2ExpiredModifyBearer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 13, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ExpiredModifyBearer.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ExpiredModifyBearer.setDescription('Total time-out expired modify bearer messages ')
gxGTPv2DropMalformedUpdateBearerReq = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 13, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedUpdateBearerReq.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedUpdateBearerReq.setDescription('Total dropped update bearer request messages due to malformed update-request')
gxGTPv2DropMalformedUpdateBearerResp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 13, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedUpdateBearerResp.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedUpdateBearerResp.setDescription('Total dropped update bearer response messages due to malformed update-response')
gxGTPv2DropMalformedModifyBearerReq = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 13, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedModifyBearerReq.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedModifyBearerReq.setDescription('Total dropped modify bearer request messages due to malformed modify-request')
gxGTPv2DropMalformedModifyBearerResp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 13, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedModifyBearerResp.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedModifyBearerResp.setDescription('Total dropped modify bearer response messages due to malformed modify-response')
gxGTPv2DropPolicyUpdateBearer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 13, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropPolicyUpdateBearer.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropPolicyUpdateBearer.setDescription('Total dropped update bearer messages due to policy violation')
gxGTPv2DropPolicyModifyBearer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 13, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropPolicyModifyBearer.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropPolicyModifyBearer.setDescription('Total dropped modify bearer messages due to policy violation')
gxGTPv2EchoSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2EchoSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2EchoSinceInstall.setDescription('Total success gtpv2 echo messages since install policy')
gxGTPv2VnspSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2VnspSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2VnspSinceInstall.setDescription('Total success gtpv2 vnsp messages since install policy')
gxGTPv2ExpiredEcho = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 14, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ExpiredEcho.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ExpiredEcho.setDescription('Total time-out expired gtpv2 echo messages ')
gxGTPv2DropMalformedEchoReq = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 14, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedEchoReq.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedEchoReq.setDescription('Total dropped echo request messages due to malformed echo-request')
gxGTPv2DropMalformedEchoResp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 14, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedEchoResp.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedEchoResp.setDescription('Total dropped echo response messages due to malformed echo-response')
gxGTPv2DropPolicyEcho = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 14, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropPolicyEcho.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropPolicyEcho.setDescription('Total dropped echo messages due to policy violation')
gxGTPv2ModifyBearerCmdSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ModifyBearerCmdSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ModifyBearerCmdSinceInstall.setDescription('Total success gtpv2 modify bearer command messages since install policy')
gxGTPv2ModifyBearerFailIndSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ModifyBearerFailIndSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ModifyBearerFailIndSinceInstall.setDescription('Total success gtpv2 modify bearer failure indication messages since install policy')
gxGTPv2DeleteBearerCmdSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 15, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DeleteBearerCmdSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DeleteBearerCmdSinceInstall.setDescription('Total success gtpv2 delete bearer command messages since install policy')
gxGTPv2DeleteBearerFailIndSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 15, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DeleteBearerFailIndSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DeleteBearerFailIndSinceInstall.setDescription('Total success gtpv2 delete bearer failure indication messages since install policy')
gxGTPv2BearerResourceCmdSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 15, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2BearerResourceCmdSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2BearerResourceCmdSinceInstall.setDescription('Total success gtpv2 bearer resource command messages since install policy')
gxGTPv2BearerResourceFailIndSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 15, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2BearerResourceFailIndSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2BearerResourceFailIndSinceInstall.setDescription('Total success gtpv2 bearer resource failure indication messages since install policy')
asmAttacks = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1))
asmLayer3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 1))
asmLayer4 = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2))
asmTCP = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1))
asmSynatk = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 1))
asmSmallPmtu = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 2))
asmSeqval = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 3))
asmUDP = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 2))
asmScans = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 3))
asmHostPortScan = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 3, 1))
asmIPSweep = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 3, 2))
asmLayer5 = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3))
asmHTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 1))
asmHttpWorms = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 1, 1))
asmHttpFormatViolatoin = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 1, 2))
asmHttpAsciiViolation = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 1, 3))
asmHttpP2PHeaderFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 1, 4))
asmCIFS = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 2))
asmCIFSWorms = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 2, 1))
asmCIFSNullSession = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 2, 2))
asmCIFSBlockedPopUps = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 2, 3))
asmCIFSBlockedCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 2, 4))
asmCIFSPasswordLengthViolations = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 2, 5))
asmP2P = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3))
asmP2POtherConAttempts = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 1))
asmP2PKazaaConAttempts = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 2))
asmP2PeMuleConAttempts = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 3))
asmP2PGnutellaConAttempts = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 4))
asmP2PSkypeCon = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 5))
asmP2PBitTorrentCon = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 6))
asmSynatkSynAckTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmSynatkSynAckTimeout.setStatus('current')
if mibBuilder.loadTexts: asmSynatkSynAckTimeout.setDescription('SYN attack - Syn-Ack Timeout')
asmSynatkSynAckReset = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmSynatkSynAckReset.setStatus('current')
if mibBuilder.loadTexts: asmSynatkSynAckReset.setDescription('SYN attack - Syn-Ack Reset')
asmSynatkModeChange = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmSynatkModeChange.setStatus('current')
if mibBuilder.loadTexts: asmSynatkModeChange.setDescription('SYN attack  - Mode Change')
asmSynatkCurrentMode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmSynatkCurrentMode.setStatus('current')
if mibBuilder.loadTexts: asmSynatkCurrentMode.setDescription('SYN attack  - Current Mode')
asmSynatkNumberofunAckedSyns = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmSynatkNumberofunAckedSyns.setStatus('current')
if mibBuilder.loadTexts: asmSynatkNumberofunAckedSyns.setDescription('SYN attack  - Number of un-Acked Syns')
smallPMTUNumberOfAttacks = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smallPMTUNumberOfAttacks.setStatus('current')
if mibBuilder.loadTexts: smallPMTUNumberOfAttacks.setDescription('Small PMTU - Number of attacks')
smallPMTUValueOfMinimalMTUsize = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smallPMTUValueOfMinimalMTUsize.setStatus('current')
if mibBuilder.loadTexts: smallPMTUValueOfMinimalMTUsize.setDescription('Small PMTU - Value of Minimal MTU size')
sequenceVerifierInvalidAck = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sequenceVerifierInvalidAck.setStatus('current')
if mibBuilder.loadTexts: sequenceVerifierInvalidAck.setDescription('Sequence Verifier - Invalid Ack')
sequenceVerifierInvalidSequence = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sequenceVerifierInvalidSequence.setStatus('current')
if mibBuilder.loadTexts: sequenceVerifierInvalidSequence.setDescription('Sequence Verifier - Invalid Sequence')
sequenceVerifierInvalidretransmit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sequenceVerifierInvalidretransmit.setStatus('current')
if mibBuilder.loadTexts: sequenceVerifierInvalidretransmit.setDescription('Sequence Verifier - Invalid retransmit')
httpWorms = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpWorms.setStatus('current')
if mibBuilder.loadTexts: httpWorms.setDescription('HTTP worms')
numOfhostPortScan = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfhostPortScan.setStatus('current')
if mibBuilder.loadTexts: numOfhostPortScan.setDescription('host port scan')
numOfIpSweep = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfIpSweep.setStatus('current')
if mibBuilder.loadTexts: numOfIpSweep.setDescription('host port scan')
httpURLLengthViolation = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpURLLengthViolation.setStatus('current')
if mibBuilder.loadTexts: httpURLLengthViolation.setDescription('HTTP - URL Length Violations')
httpHeaderLengthViolations = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpHeaderLengthViolations.setStatus('current')
if mibBuilder.loadTexts: httpHeaderLengthViolations.setDescription('HTTP - Header Length Violations')
httpMaxHeaderReached = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpMaxHeaderReached.setStatus('current')
if mibBuilder.loadTexts: httpMaxHeaderReached.setDescription('HTTP - Maximum Headers Reached')
numOfHttpASCIIViolations = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfHttpASCIIViolations.setStatus('current')
if mibBuilder.loadTexts: numOfHttpASCIIViolations.setDescription('HTTP - ASCII Violations')
numOfHttpP2PHeaders = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfHttpP2PHeaders.setStatus('current')
if mibBuilder.loadTexts: numOfHttpP2PHeaders.setDescription('HTTP - Peer To Peer Headers')
numOfCIFSworms = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfCIFSworms.setStatus('current')
if mibBuilder.loadTexts: numOfCIFSworms.setDescription('num of CIFS worms')
numOfCIFSNullSessions = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfCIFSNullSessions.setStatus('current')
if mibBuilder.loadTexts: numOfCIFSNullSessions.setDescription('num of CIFS Null Sessions')
numOfCIFSBlockedPopUps = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfCIFSBlockedPopUps.setStatus('current')
if mibBuilder.loadTexts: numOfCIFSBlockedPopUps.setDescription('num of CIFS Blocked Pop-Ups')
numOfCIFSBlockedCommands = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfCIFSBlockedCommands.setStatus('current')
if mibBuilder.loadTexts: numOfCIFSBlockedCommands.setDescription('num of CIFS Blocked Commands')
numOfCIFSPasswordLengthViolations = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfCIFSPasswordLengthViolations.setStatus('current')
if mibBuilder.loadTexts: numOfCIFSPasswordLengthViolations.setDescription('num of CIFS PasswordLength Violations')
numOfP2POtherConAttempts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfP2POtherConAttempts.setStatus('current')
if mibBuilder.loadTexts: numOfP2POtherConAttempts.setDescription('num of P2P Other Con Attempts')
numOfP2PKazaaConAttempts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfP2PKazaaConAttempts.setStatus('current')
if mibBuilder.loadTexts: numOfP2PKazaaConAttempts.setDescription('num of P2P Kazaa Con Attempts')
numOfP2PeMuleConAttempts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfP2PeMuleConAttempts.setStatus('current')
if mibBuilder.loadTexts: numOfP2PeMuleConAttempts.setDescription('num of P2P eMule Con Attempts')
numOfGnutellaConAttempts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfGnutellaConAttempts.setStatus('current')
if mibBuilder.loadTexts: numOfGnutellaConAttempts.setDescription('num of P2P Gnutella Con Attempts')
numOfP2PSkypeCon = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfP2PSkypeCon.setStatus('current')
if mibBuilder.loadTexts: numOfP2PSkypeCon.setDescription('num of P2P Skype Con')
numOfBitTorrentCon = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfBitTorrentCon.setStatus('current')
if mibBuilder.loadTexts: numOfBitTorrentCon.setDescription('num of P2P Bit Torrent Con')
aviEngines = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1))
aviTopViruses = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 24, 2))
aviTopEverViruses = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 24, 3))
aviServices = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4))
aviServicesHTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 1))
aviServicesFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 2))
aviServicesSMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 3))
aviServicesPOP3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 4))
aviStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviStatCode.setStatus('current')
if mibBuilder.loadTexts: aviStatCode.setDescription('Status code')
aviStatShortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviStatShortDescr.setStatus('current')
if mibBuilder.loadTexts: aviStatShortDescr.setDescription('Status short description')
aviStatLongDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviStatLongDescr.setStatus('current')
if mibBuilder.loadTexts: aviStatLongDescr.setDescription('Status long description')
aviEngineTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1), )
if mibBuilder.loadTexts: aviEngineTable.setStatus('current')
if mibBuilder.loadTexts: aviEngineTable.setDescription('Table of Anti Virus engines installed. Each engine entry contains information about this engine.')
aviEngineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "aviEngineIndex"))
if mibBuilder.loadTexts: aviEngineEntry.setStatus('current')
if mibBuilder.loadTexts: aviEngineEntry.setDescription('No description available')
aviEngineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: aviEngineIndex.setStatus('current')
if mibBuilder.loadTexts: aviEngineIndex.setDescription('No description available')
aviEngineName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviEngineName.setStatus('current')
if mibBuilder.loadTexts: aviEngineName.setDescription('No description available')
aviEngineVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviEngineVer.setStatus('current')
if mibBuilder.loadTexts: aviEngineVer.setDescription('No description available')
aviEngineDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviEngineDate.setStatus('current')
if mibBuilder.loadTexts: aviEngineDate.setDescription('No description available')
aviSignatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviSignatureName.setStatus('current')
if mibBuilder.loadTexts: aviSignatureName.setDescription('No description available')
aviSignatureVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviSignatureVer.setStatus('current')
if mibBuilder.loadTexts: aviSignatureVer.setDescription('No description available')
aviSignatureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviSignatureDate.setStatus('current')
if mibBuilder.loadTexts: aviSignatureDate.setDescription('No description available')
aviLastSigCheckTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviLastSigCheckTime.setStatus('current')
if mibBuilder.loadTexts: aviLastSigCheckTime.setDescription('No description available')
aviLastSigLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviLastSigLocation.setStatus('current')
if mibBuilder.loadTexts: aviLastSigLocation.setDescription('No description available')
aviLastLicExp = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviLastLicExp.setStatus('current')
if mibBuilder.loadTexts: aviLastLicExp.setDescription('No description available')
aviTopVirusesTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 24, 2, 1), )
if mibBuilder.loadTexts: aviTopVirusesTable.setStatus('current')
if mibBuilder.loadTexts: aviTopVirusesTable.setDescription('Table for virus count of the most frequent viruses found in the last hour')
aviTopVirusesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 24, 2, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "aviTopVirusesIndex"))
if mibBuilder.loadTexts: aviTopVirusesEntry.setStatus('current')
if mibBuilder.loadTexts: aviTopVirusesEntry.setDescription('No description available')
aviTopVirusesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: aviTopVirusesIndex.setStatus('current')
if mibBuilder.loadTexts: aviTopVirusesIndex.setDescription('Virus index')
aviTopVirusesName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviTopVirusesName.setStatus('current')
if mibBuilder.loadTexts: aviTopVirusesName.setDescription('Virus Name')
aviTopVirusesCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviTopVirusesCnt.setStatus('current')
if mibBuilder.loadTexts: aviTopVirusesCnt.setDescription('Virus hit count')
aviTopEverVirusesTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 24, 3, 1), )
if mibBuilder.loadTexts: aviTopEverVirusesTable.setStatus('current')
if mibBuilder.loadTexts: aviTopEverVirusesTable.setDescription('Table for virus count of the most frequent viruses found from last system restart')
aviTopEverVirusesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 24, 3, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "aviTopEverVirusesIndex"))
if mibBuilder.loadTexts: aviTopEverVirusesEntry.setStatus('current')
if mibBuilder.loadTexts: aviTopEverVirusesEntry.setDescription('No description available')
aviTopEverVirusesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: aviTopEverVirusesIndex.setStatus('current')
if mibBuilder.loadTexts: aviTopEverVirusesIndex.setDescription('No description available')
aviTopEverVirusesName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviTopEverVirusesName.setStatus('current')
if mibBuilder.loadTexts: aviTopEverVirusesName.setDescription('No description available')
aviTopEverVirusesCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviTopEverVirusesCnt.setStatus('current')
if mibBuilder.loadTexts: aviTopEverVirusesCnt.setDescription('No description available')
aviHTTPState = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviHTTPState.setStatus('current')
if mibBuilder.loadTexts: aviHTTPState.setDescription('State of the Anti Virus engine that inspects HTTP')
aviHTTPLastVirusName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviHTTPLastVirusName.setStatus('current')
if mibBuilder.loadTexts: aviHTTPLastVirusName.setDescription('Last virus found over HTTP')
aviHTTPLastVirusTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviHTTPLastVirusTime.setStatus('current')
if mibBuilder.loadTexts: aviHTTPLastVirusTime.setDescription('No description available')
aviHTTPTopVirusesTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 1, 4), )
if mibBuilder.loadTexts: aviHTTPTopVirusesTable.setStatus('current')
if mibBuilder.loadTexts: aviHTTPTopVirusesTable.setDescription('Table for virus count of the most frequent viruses found over HTTP in the last day\n\t\t\t\t or from last system restart (the latest of the two)')
aviHTTPTopVirusesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 1, 4, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "aviHTTPTopVirusesIndex"))
if mibBuilder.loadTexts: aviHTTPTopVirusesEntry.setStatus('current')
if mibBuilder.loadTexts: aviHTTPTopVirusesEntry.setDescription('No description available')
aviHTTPTopVirusesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: aviHTTPTopVirusesIndex.setStatus('current')
if mibBuilder.loadTexts: aviHTTPTopVirusesIndex.setDescription('No description available')
aviHTTPTopVirusesName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviHTTPTopVirusesName.setStatus('current')
if mibBuilder.loadTexts: aviHTTPTopVirusesName.setDescription('No description available')
aviHTTPTopVirusesCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviHTTPTopVirusesCnt.setStatus('current')
if mibBuilder.loadTexts: aviHTTPTopVirusesCnt.setDescription('No description available')
aviFTPState = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviFTPState.setStatus('current')
if mibBuilder.loadTexts: aviFTPState.setDescription('State of the Anti Virus engine that inspects FTP')
aviFTPLastVirusName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviFTPLastVirusName.setStatus('current')
if mibBuilder.loadTexts: aviFTPLastVirusName.setDescription('Last virus found over FTP')
aviFTPLastVirusTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviFTPLastVirusTime.setStatus('current')
if mibBuilder.loadTexts: aviFTPLastVirusTime.setDescription('No description available')
aviFTPTopVirusesTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 2, 4), )
if mibBuilder.loadTexts: aviFTPTopVirusesTable.setStatus('current')
if mibBuilder.loadTexts: aviFTPTopVirusesTable.setDescription('Table for virus count of the most frequent viruses found over FTP in the last day\n\t\t\t or from last system restart (the latest of the two)')
aviFTPTopVirusesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 2, 4, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "aviFTPTopVirusesIndex"))
if mibBuilder.loadTexts: aviFTPTopVirusesEntry.setStatus('current')
if mibBuilder.loadTexts: aviFTPTopVirusesEntry.setDescription('No description available')
aviFTPTopVirusesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 2, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: aviFTPTopVirusesIndex.setStatus('current')
if mibBuilder.loadTexts: aviFTPTopVirusesIndex.setDescription('No description available')
aviFTPTopVirusesName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviFTPTopVirusesName.setStatus('current')
if mibBuilder.loadTexts: aviFTPTopVirusesName.setDescription('No description available')
aviFTPTopVirusesCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviFTPTopVirusesCnt.setStatus('current')
if mibBuilder.loadTexts: aviFTPTopVirusesCnt.setDescription('No description available')
aviSMTPState = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviSMTPState.setStatus('current')
if mibBuilder.loadTexts: aviSMTPState.setDescription('State of the Anti Virus engine that inspects SMTP')
aviSMTPLastVirusName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviSMTPLastVirusName.setStatus('current')
if mibBuilder.loadTexts: aviSMTPLastVirusName.setDescription('Last virus found over SMTP')
aviSMTPLastVirusTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviSMTPLastVirusTime.setStatus('current')
if mibBuilder.loadTexts: aviSMTPLastVirusTime.setDescription('No description available')
aviSMTPTopVirusesTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 3, 4), )
if mibBuilder.loadTexts: aviSMTPTopVirusesTable.setStatus('current')
if mibBuilder.loadTexts: aviSMTPTopVirusesTable.setDescription('Table for virus count of the most frequent viruses found over SMTP in the last day\n\t\t\t or from last system restart (the latest of the two)')
aviSMTPTopVirusesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 3, 4, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "aviSMTPTopVirusesIndex"))
if mibBuilder.loadTexts: aviSMTPTopVirusesEntry.setStatus('current')
if mibBuilder.loadTexts: aviSMTPTopVirusesEntry.setDescription('No description available')
aviSMTPTopVirusesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 3, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: aviSMTPTopVirusesIndex.setStatus('current')
if mibBuilder.loadTexts: aviSMTPTopVirusesIndex.setDescription('No description available')
aviSMTPTopVirusesName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 3, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviSMTPTopVirusesName.setStatus('current')
if mibBuilder.loadTexts: aviSMTPTopVirusesName.setDescription('No description available')
aviSMTPTopVirusesCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviSMTPTopVirusesCnt.setStatus('current')
if mibBuilder.loadTexts: aviSMTPTopVirusesCnt.setDescription('No description available')
aviPOP3State = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviPOP3State.setStatus('current')
if mibBuilder.loadTexts: aviPOP3State.setDescription('State of the Anti Virus engine that inspects POP3')
aviPOP3LastVirusName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviPOP3LastVirusName.setStatus('current')
if mibBuilder.loadTexts: aviPOP3LastVirusName.setDescription('Last virus found over POP3')
aviPOP3LastVirusTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviPOP3LastVirusTime.setStatus('current')
if mibBuilder.loadTexts: aviPOP3LastVirusTime.setDescription('No description available')
aviPOP3TopVirusesTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 4, 4), )
if mibBuilder.loadTexts: aviPOP3TopVirusesTable.setStatus('current')
if mibBuilder.loadTexts: aviPOP3TopVirusesTable.setDescription('Table for virus count of the most frequent viruses found over POP3 in the last day\n\t\t\t or from last system restart (the latest of the two)')
aviPOP3TopVirusesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 4, 4, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "aviPOP3TopVirusesIndex"))
if mibBuilder.loadTexts: aviPOP3TopVirusesEntry.setStatus('current')
if mibBuilder.loadTexts: aviPOP3TopVirusesEntry.setDescription('No description available')
aviPOP3TopVirusesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 4, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: aviPOP3TopVirusesIndex.setStatus('current')
if mibBuilder.loadTexts: aviPOP3TopVirusesIndex.setDescription('No description available')
aviPOP3TopVirusesName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviPOP3TopVirusesName.setStatus('current')
if mibBuilder.loadTexts: aviPOP3TopVirusesName.setDescription('No description available')
aviPOP3TopVirusesCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviPOP3TopVirusesCnt.setStatus('current')
if mibBuilder.loadTexts: aviPOP3TopVirusesCnt.setDescription('No description available')
cpsemd = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1))
cpsead = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2))
cpsemdStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdStatCode.setStatus('current')
if mibBuilder.loadTexts: cpsemdStatCode.setDescription('Status code')
cpsemdStatShortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdStatShortDescr.setStatus('current')
if mibBuilder.loadTexts: cpsemdStatShortDescr.setDescription('Status short description')
cpsemdStatLongDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdStatLongDescr.setStatus('current')
if mibBuilder.loadTexts: cpsemdStatLongDescr.setDescription('Status long description')
cpsemdProcAlive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdProcAlive.setStatus('current')
if mibBuilder.loadTexts: cpsemdProcAlive.setDescription('cpsemd Process is alive')
cpsemdNewEventsHandled = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdNewEventsHandled.setStatus('current')
if mibBuilder.loadTexts: cpsemdNewEventsHandled.setDescription('New events handled')
cpsemdUpdatesHandled = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdUpdatesHandled.setStatus('current')
if mibBuilder.loadTexts: cpsemdUpdatesHandled.setDescription('Number of updates handled')
cpsemdLastEventTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdLastEventTime.setStatus('current')
if mibBuilder.loadTexts: cpsemdLastEventTime.setDescription('Last processed event time')
cpsemdCurrentDBSize = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdCurrentDBSize.setStatus('current')
if mibBuilder.loadTexts: cpsemdCurrentDBSize.setDescription('Current database size')
cpsemdDBCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdDBCapacity.setStatus('current')
if mibBuilder.loadTexts: cpsemdDBCapacity.setDescription('Database capacity')
cpsemdNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdNumEvents.setStatus('current')
if mibBuilder.loadTexts: cpsemdNumEvents.setDescription('Number of events in database')
cpsemdDBDiskSpace = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdDBDiskSpace.setStatus('current')
if mibBuilder.loadTexts: cpsemdDBDiskSpace.setDescription('Available database disk space')
cpsemdCorrelationUnitTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 9), )
if mibBuilder.loadTexts: cpsemdCorrelationUnitTable.setStatus('current')
if mibBuilder.loadTexts: cpsemdCorrelationUnitTable.setDescription('Table for Correlation Units details')
cpsemdDBIsFull = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdDBIsFull.setStatus('current')
if mibBuilder.loadTexts: cpsemdDBIsFull.setDescription('1 - Database is full; 0 - Database is not full')
cpsemdCorrelationUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 9, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "cpsemdCorrelationUnitIndex"))
if mibBuilder.loadTexts: cpsemdCorrelationUnitEntry.setStatus('current')
if mibBuilder.loadTexts: cpsemdCorrelationUnitEntry.setDescription('No description available')
cpsemdCorrelationUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cpsemdCorrelationUnitIndex.setStatus('current')
if mibBuilder.loadTexts: cpsemdCorrelationUnitIndex.setDescription('No description available')
cpsemdCorrelationUnitIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdCorrelationUnitIP.setStatus('current')
if mibBuilder.loadTexts: cpsemdCorrelationUnitIP.setDescription('Correlation Unit IP')
cpsemdCorrelationUnitLastRcvdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdCorrelationUnitLastRcvdTime.setStatus('current')
if mibBuilder.loadTexts: cpsemdCorrelationUnitLastRcvdTime.setDescription('Time of last received event')
cpsemdCorrelationUnitNumEventsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdCorrelationUnitNumEventsRcvd.setStatus('current')
if mibBuilder.loadTexts: cpsemdCorrelationUnitNumEventsRcvd.setDescription('Number of events received')
cpsemdConnectionDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdConnectionDuration.setStatus('current')
if mibBuilder.loadTexts: cpsemdConnectionDuration.setDescription('Connection duration (to the Correlation Unit)')
cpseadStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadStatCode.setStatus('current')
if mibBuilder.loadTexts: cpseadStatCode.setDescription('Status code')
cpseadStatShortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadStatShortDescr.setStatus('current')
if mibBuilder.loadTexts: cpseadStatShortDescr.setDescription('Status short description')
cpseadStatLongDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadStatLongDescr.setStatus('current')
if mibBuilder.loadTexts: cpseadStatLongDescr.setDescription('Status long description')
cpseadProcAlive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadProcAlive.setStatus('current')
if mibBuilder.loadTexts: cpseadProcAlive.setDescription('cpsead Process is alive')
cpseadConnectedToSem = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadConnectedToSem.setStatus('current')
if mibBuilder.loadTexts: cpseadConnectedToSem.setDescription('Connected to SEM (is the Correlation Unit connected to the Analyzer Server)')
cpseadNumProcessedLogs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadNumProcessedLogs.setStatus('current')
if mibBuilder.loadTexts: cpseadNumProcessedLogs.setDescription('Number of logs processed')
cpseadJobsTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4), )
if mibBuilder.loadTexts: cpseadJobsTable.setStatus('current')
if mibBuilder.loadTexts: cpseadJobsTable.setDescription('Jobs Table')
cpseadJobsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "cpseadJobIndex"))
if mibBuilder.loadTexts: cpseadJobsEntry.setStatus('current')
if mibBuilder.loadTexts: cpseadJobsEntry.setDescription('No description available')
cpseadJobIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cpseadJobIndex.setStatus('current')
if mibBuilder.loadTexts: cpseadJobIndex.setDescription('No description available')
cpseadJobID = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadJobID.setStatus('current')
if mibBuilder.loadTexts: cpseadJobID.setDescription('Job ID')
cpseadJobName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadJobName.setStatus('current')
if mibBuilder.loadTexts: cpseadJobName.setDescription('Job name')
cpseadJobState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadJobState.setStatus('current')
if mibBuilder.loadTexts: cpseadJobState.setDescription('Job state')
cpseadJobIsOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadJobIsOnline.setStatus('current')
if mibBuilder.loadTexts: cpseadJobIsOnline.setDescription('Is job online')
cpseadJobLogServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadJobLogServer.setStatus('current')
if mibBuilder.loadTexts: cpseadJobLogServer.setDescription(' Log Server (the IP of the log server from which the job is reading logs)')
cpseadJobDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadJobDataType.setStatus('current')
if mibBuilder.loadTexts: cpseadJobDataType.setDescription('Data type (the type of date being read: log or audit)')
cpseadConnectedToLogServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadConnectedToLogServer.setStatus('current')
if mibBuilder.loadTexts: cpseadConnectedToLogServer.setDescription('Connected to Log Server (is the Correlation Unit connected to the Log Server)')
cpseadNumAnalyzedLogs = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadNumAnalyzedLogs.setStatus('current')
if mibBuilder.loadTexts: cpseadNumAnalyzedLogs.setDescription('Number of logs analyzed')
cpseadFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadFileName.setStatus('current')
if mibBuilder.loadTexts: cpseadFileName.setDescription('File Name (the name of the file from which the job is reading logs)')
cpseadFileCurrentPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadFileCurrentPosition.setStatus('current')
if mibBuilder.loadTexts: cpseadFileCurrentPosition.setDescription('current position in the file')
cpseadStateDescriptionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadStateDescriptionCode.setStatus('current')
if mibBuilder.loadTexts: cpseadStateDescriptionCode.setDescription('state description code (code for the state description in the next OID)')
cpseadStateDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadStateDescription.setStatus('current')
if mibBuilder.loadTexts: cpseadStateDescription.setDescription("state description (provides more info regarding the job's state (OID 4), for instance details errors.)")
cpseadNoFreeDiskSpace = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadNoFreeDiskSpace.setStatus('current')
if mibBuilder.loadTexts: cpseadNoFreeDiskSpace.setDescription('no free disk space (is there not enough free disk space on the Correlation Unit)')
ufEngine = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 29, 1))
ufSS = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2))
ufStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufStatCode.setStatus('current')
if mibBuilder.loadTexts: ufStatCode.setDescription('Status code')
ufStatShortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufStatShortDescr.setStatus('current')
if mibBuilder.loadTexts: ufStatShortDescr.setDescription('Status short description')
ufStatLongDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufStatLongDescr.setStatus('current')
if mibBuilder.loadTexts: ufStatLongDescr.setDescription('Status long description')
ufEngineName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufEngineName.setStatus('current')
if mibBuilder.loadTexts: ufEngineName.setDescription('Engine name')
ufEngineVer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufEngineVer.setStatus('current')
if mibBuilder.loadTexts: ufEngineVer.setDescription('Engine version')
ufEngineDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufEngineDate.setStatus('current')
if mibBuilder.loadTexts: ufEngineDate.setDescription('Engine build date')
ufSignatureDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufSignatureDate.setStatus('current')
if mibBuilder.loadTexts: ufSignatureDate.setDescription('Creation date of the signature-set used by the engine')
ufSignatureVer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufSignatureVer.setStatus('current')
if mibBuilder.loadTexts: ufSignatureVer.setDescription('Version of the signature')
ufLastSigCheckTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufLastSigCheckTime.setStatus('current')
if mibBuilder.loadTexts: ufLastSigCheckTime.setDescription('Last time there was a check for new signature ')
ufLastSigLocation = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufLastSigLocation.setStatus('current')
if mibBuilder.loadTexts: ufLastSigLocation.setDescription('Last signature origine (either from Remote site or from SmartCenter)')
ufLastLicExp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufLastLicExp.setStatus('current')
if mibBuilder.loadTexts: ufLastLicExp.setDescription('Expiration date of the subscription for Web Filtering updates')
ufIsMonitor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufIsMonitor.setStatus('current')
if mibBuilder.loadTexts: ufIsMonitor.setDescription('Monitor-Only Running mode (ON or OFF)')
ufScannedCnt = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufScannedCnt.setStatus('current')
if mibBuilder.loadTexts: ufScannedCnt.setDescription('Total number of scanned URLs')
ufBlockedCnt = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufBlockedCnt.setStatus('current')
if mibBuilder.loadTexts: ufBlockedCnt.setDescription('Number of blocked URLs')
ufTopBlockedCatTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 4), )
if mibBuilder.loadTexts: ufTopBlockedCatTable.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedCatTable.setDescription('Table for counting of the most frequent categories blocked in the last day')
ufTopBlockedCatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 4, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "ufTopBlockedCatIndex"))
if mibBuilder.loadTexts: ufTopBlockedCatEntry.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedCatEntry.setDescription('No description available')
ufTopBlockedCatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ufTopBlockedCatIndex.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedCatIndex.setDescription('Blocked Category index')
ufTopBlockedCatName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufTopBlockedCatName.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedCatName.setDescription('Blocked Category name')
ufTopBlockedCatCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufTopBlockedCatCnt.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedCatCnt.setDescription('Blocked Category count')
ufTopBlockedSiteTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 5), )
if mibBuilder.loadTexts: ufTopBlockedSiteTable.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedSiteTable.setDescription('Table for counting of the most frequent sites blocked in the last day')
ufTopBlockedSiteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 5, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "ufTopBlockedSiteIndex"))
if mibBuilder.loadTexts: ufTopBlockedSiteEntry.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedSiteEntry.setDescription('No description available')
ufTopBlockedSiteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ufTopBlockedSiteIndex.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedSiteIndex.setDescription('Blocked URL index')
ufTopBlockedSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufTopBlockedSiteName.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedSiteName.setDescription('Blocked URL name')
ufTopBlockedSiteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufTopBlockedSiteCnt.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedSiteCnt.setDescription('Blocked URL count')
ufTopBlockedUserTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 6), )
if mibBuilder.loadTexts: ufTopBlockedUserTable.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedUserTable.setDescription('Table for counting blocked URLs of the most frequent blocked users in the last day')
ufTopBlockedUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 6, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "ufTopBlockedUserIndex"))
if mibBuilder.loadTexts: ufTopBlockedUserEntry.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedUserEntry.setDescription('No description available')
ufTopBlockedUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ufTopBlockedUserIndex.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedUserIndex.setDescription('Blocked User index')
ufTopBlockedUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufTopBlockedUserName.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedUserName.setDescription('Blocked User name')
ufTopBlockedUserCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufTopBlockedUserCnt.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedUserCnt.setDescription('Blocked User count')
msProductName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msProductName.setStatus('current')
if mibBuilder.loadTexts: msProductName.setDescription('Product Name')
msMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msMajorVersion.setStatus('current')
if mibBuilder.loadTexts: msMajorVersion.setDescription('Major Version')
msMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msMinorVersion.setStatus('current')
if mibBuilder.loadTexts: msMinorVersion.setDescription('Minor Version')
msBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msBuildNumber.setStatus('current')
if mibBuilder.loadTexts: msBuildNumber.setDescription('Build Number')
msVersionStr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msVersionStr.setStatus('current')
if mibBuilder.loadTexts: msVersionStr.setDescription('Version String')
msSpam = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 30, 6))
msSpamNumScannedEmails = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSpamNumScannedEmails.setStatus('current')
if mibBuilder.loadTexts: msSpamNumScannedEmails.setDescription('Number of scanned emails')
msSpamNumSpamEmails = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSpamNumSpamEmails.setStatus('current')
if mibBuilder.loadTexts: msSpamNumSpamEmails.setDescription('Number of spam emails')
msSpamNumHandledSpamEmails = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSpamNumHandledSpamEmails.setStatus('current')
if mibBuilder.loadTexts: msSpamNumHandledSpamEmails.setDescription('Number of handled spam emails')
msSpamControls = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 30, 6, 4))
msSpamControlsSpamEngine = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSpamControlsSpamEngine.setStatus('current')
if mibBuilder.loadTexts: msSpamControlsSpamEngine.setDescription('Number of spam emails by Anti Spam engine')
msSpamControlsIpRepuatation = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 6, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSpamControlsIpRepuatation.setStatus('current')
if mibBuilder.loadTexts: msSpamControlsIpRepuatation.setDescription('Number of spam emails by IP reputation service')
msSpamControlsSPF = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 6, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSpamControlsSPF.setStatus('current')
if mibBuilder.loadTexts: msSpamControlsSPF.setDescription('Number of spam emails by SPF')
msSpamControlsDomainKeys = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 6, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSpamControlsDomainKeys.setStatus('current')
if mibBuilder.loadTexts: msSpamControlsDomainKeys.setDescription('Number of spam emails by Domain Keys')
msSpamControlsRDNS = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 6, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSpamControlsRDNS.setStatus('current')
if mibBuilder.loadTexts: msSpamControlsRDNS.setDescription('Number of spam emails by Reverse DNS')
msSpamControlsRBL = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 6, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSpamControlsRBL.setStatus('current')
if mibBuilder.loadTexts: msSpamControlsRBL.setDescription('Number of spam emails by RBLs (Including Received headers and URLs)')
msExpirationDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msExpirationDate.setStatus('current')
if mibBuilder.loadTexts: msExpirationDate.setDescription('Subscription expiration date')
msEngineVer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msEngineVer.setStatus('current')
if mibBuilder.loadTexts: msEngineVer.setDescription('Anti Spam Engine Version')
msEngineDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msEngineDate.setStatus('current')
if mibBuilder.loadTexts: msEngineDate.setDescription('Anti Spam Engine Build Date')
msStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msStatCode.setStatus('current')
if mibBuilder.loadTexts: msStatCode.setDescription('Status code')
msStatShortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msStatShortDescr.setStatus('current')
if mibBuilder.loadTexts: msStatShortDescr.setDescription('Status short description')
msStatLongDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msStatLongDescr.setStatus('current')
if mibBuilder.loadTexts: msStatLongDescr.setDescription('Status long description')
msServicePack = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 999), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msServicePack.setStatus('current')
if mibBuilder.loadTexts: msServicePack.setDescription('Service Pack')
voipProductName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipProductName.setStatus('current')
if mibBuilder.loadTexts: voipProductName.setDescription('Product Name')
voipMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipMajorVersion.setStatus('current')
if mibBuilder.loadTexts: voipMajorVersion.setDescription('Major Version')
voipMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipMinorVersion.setStatus('current')
if mibBuilder.loadTexts: voipMinorVersion.setDescription('Minor Version')
voipBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipBuildNumber.setStatus('current')
if mibBuilder.loadTexts: voipBuildNumber.setDescription('Build Number')
voipVersionStr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipVersionStr.setStatus('current')
if mibBuilder.loadTexts: voipVersionStr.setDescription('Version String')
voipDOS = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6))
voipDOSSip = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1))
voipDOSSipNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 1))
voipDOSSipNetworkReqInterval = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipNetworkReqInterval.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipNetworkReqInterval.setDescription('Total Number of SIP Requests to The Internal Network per Interval: Interval (seconds)')
voipDOSSipNetworkReqConfThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipNetworkReqConfThreshold.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipNetworkReqConfThreshold.setDescription('Total Number of SIP Requests to The Internal Network per Interval: Configured Threshold')
voipDOSSipNetworkReqCurrentVal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipNetworkReqCurrentVal.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipNetworkReqCurrentVal.setDescription('Total Number of SIP Requests to The Internal Network per Interval: Current Value')
voipDOSSipNetworkRegInterval = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipNetworkRegInterval.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipNetworkRegInterval.setDescription("Total number of 'REGISTER' Requests to The Internal Network per Interval: Interval (seconds)")
voipDOSSipNetworkRegConfThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipNetworkRegConfThreshold.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipNetworkRegConfThreshold.setDescription("Total number of 'REGISTER' Requests to The Internal Network per Interval: Configured Threshold")
voipDOSSipNetworkRegCurrentVal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipNetworkRegCurrentVal.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipNetworkRegCurrentVal.setDescription("Total number of 'REGISTER' Requests to The Internal Network per Interval: Current Value")
voipDOSSipNetworkCallInitInterval = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipNetworkCallInitInterval.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipNetworkCallInitInterval.setDescription('Total Number of SIP Call Initiations to The Internal Network per Interval: Interval (seconds)')
voipDOSSipNetworkCallInitConfThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipNetworkCallInitConfThreshold.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipNetworkCallInitConfThreshold.setDescription('Total Number of SIP Call Initiations to The Internal Network per Interval: Configured Threshold')
voipDOSSipNetworkCallInitICurrentVal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipNetworkCallInitICurrentVal.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipNetworkCallInitICurrentVal.setDescription('Total Number of SIP Call Initiations to The Internal Network per Interval: Current Value')
voipDOSSipRateLimitingTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 2), )
if mibBuilder.loadTexts: voipDOSSipRateLimitingTable.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipRateLimitingTable.setDescription('Table for counting blocked URLs of the most frequent blocked users in the last day')
voipDOSSipRateLimitingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 2, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "voipDOSSipRateLimitingTableIndex"))
if mibBuilder.loadTexts: voipDOSSipRateLimitingEntry.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipRateLimitingEntry.setDescription('No description available')
voipDOSSipRateLimitingTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableIndex.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableIndex.setDescription('Rate Limiting Defense for Internal SIP Servers: Table Index')
voipDOSSipRateLimitingTableIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableIpAddress.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableIpAddress.setDescription('Rate Limiting Defense for Internal SIP Servers: Ip Address')
voipDOSSipRateLimitingTableInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableInterval.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableInterval.setDescription('Rate Limiting Defense for Internal SIP Servers: Interval (Seconds)')
voipDOSSipRateLimitingTableConfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableConfThreshold.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableConfThreshold.setDescription('Rate Limiting Defense for Internal SIP Servers: Configured Threshold for Number of SIP Requests')
voipDOSSipRateLimitingTableNumDOSSipRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableNumDOSSipRequests.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableNumDOSSipRequests.setDescription('Rate Limiting Defense for Internal SIP Servers: Number of SIP Requests')
voipDOSSipRateLimitingTableNumTrustedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableNumTrustedRequests.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableNumTrustedRequests.setDescription('Rate Limiting Defense for Internal SIP Servers: Number of SIP Requests from Trusted Users')
voipDOSSipRateLimitingTableNumNonTrustedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableNumNonTrustedRequests.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableNumNonTrustedRequests.setDescription('Rate Limiting Defense for Internal SIP Servers: Number of SIP Requests from Non-Trusted Users')
voipDOSSipRateLimitingTableNumRequestsfromServers = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableNumRequestsfromServers.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableNumRequestsfromServers.setDescription('Rate Limiting Defense for Internal SIP Servers: Number of SIP Requests from Non-Trusted Users')
voipCAC = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 31, 7))
voipCACConcurrentCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 31, 7, 1))
voipCACConcurrentCallsConfThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipCACConcurrentCallsConfThreshold.setStatus('current')
if mibBuilder.loadTexts: voipCACConcurrentCallsConfThreshold.setDescription('Number of Concurrent Calls: Configured Threshold')
voipCACConcurrentCallsCurrentVal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipCACConcurrentCallsCurrentVal.setStatus('current')
if mibBuilder.loadTexts: voipCACConcurrentCallsCurrentVal.setDescription('Number of Concurrent Calls: Configured Threshold')
voipStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipStatCode.setStatus('current')
if mibBuilder.loadTexts: voipStatCode.setDescription('Status code')
voipStatShortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipStatShortDescr.setStatus('current')
if mibBuilder.loadTexts: voipStatShortDescr.setDescription('Status short description')
voipStatLongDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipStatLongDescr.setStatus('current')
if mibBuilder.loadTexts: voipStatLongDescr.setDescription('Status long description')
voipServicePack = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 999), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipServicePack.setStatus('current')
if mibBuilder.loadTexts: voipServicePack.setDescription('Service Pack')
identityAwarenessProductName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessProductName.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessProductName.setDescription('Product Name')
identityAwarenessAuthUsers = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessAuthUsers.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessAuthUsers.setDescription('Number of users authenticated to the gateway')
identityAwarenessUnAuthUsers = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessUnAuthUsers.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessUnAuthUsers.setDescription('Number of unauthenticated guests')
identityAwarenessAuthUsersKerberos = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessAuthUsersKerberos.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessAuthUsersKerberos.setDescription('Number of authenticated users by Kerberos method')
identityAwarenessAuthMachKerberos = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessAuthMachKerberos.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessAuthMachKerberos.setDescription('Number of authenticated machines by Kerberos method')
identityAwarenessAuthUsersPass = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessAuthUsersPass.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessAuthUsersPass.setDescription('Number of authenticated users by User name and password method')
identityAwarenessAuthUsersADQuery = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessAuthUsersADQuery.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessAuthUsersADQuery.setDescription('Number of authenticated users by ADQuery method')
identityAwarenessAuthMachADQuery = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessAuthMachADQuery.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessAuthMachADQuery.setDescription('Number of authenticated machines by ADQuery method')
identityAwarenessLoggedInAgent = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessLoggedInAgent.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessLoggedInAgent.setDescription('Number of users that are logged in with agents')
identityAwarenessLoggedInCaptivePortal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessLoggedInCaptivePortal.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessLoggedInCaptivePortal.setDescription('Number of users that are logged in with Captive Portal')
identityAwarenessLoggedInADQuery = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessLoggedInADQuery.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessLoggedInADQuery.setDescription('Number of users that are logged in with ADQuery')
identityAwarenessAntiSpoffProtection = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessAntiSpoffProtection.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessAntiSpoffProtection.setDescription('Number of users with an active Traffic Anti-Spoffing protection')
identityAwarenessSuccUserLoginKerberos = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessSuccUserLoginKerberos.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessSuccUserLoginKerberos.setDescription('Number of successfull Kerberos user login attempts')
identityAwarenessSuccMachLoginKerberos = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessSuccMachLoginKerberos.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessSuccMachLoginKerberos.setDescription('Number of successfull Kerberos machine login attempts')
identityAwarenessSuccUserLoginPass = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessSuccUserLoginPass.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessSuccUserLoginPass.setDescription('Number of successfull User Name And Password login attempts')
identityAwarenessSuccUserLoginADQuery = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessSuccUserLoginADQuery.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessSuccUserLoginADQuery.setDescription('Number of successfull ADQuery user login attempts')
identityAwarenessSuccMachLoginADQuery = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessSuccMachLoginADQuery.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessSuccMachLoginADQuery.setDescription('Number of successfull ADQuery machine login attempts')
identityAwarenessUnSuccUserLoginKerberos = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessUnSuccUserLoginKerberos.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessUnSuccUserLoginKerberos.setDescription('Number of unsuccessfull Kerberos user login attempts')
identityAwarenessUnSuccMachLoginKerberos = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessUnSuccMachLoginKerberos.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessUnSuccMachLoginKerberos.setDescription('Number of unsuccessfull Kerberos machine login attempts')
identityAwarenessUnSuccUserLoginPass = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessUnSuccUserLoginPass.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessUnSuccUserLoginPass.setDescription('Number of unsuccessfull User Name And Password login attempts')
identityAwarenessSuccUserLDAP = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessSuccUserLDAP.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessSuccUserLDAP.setDescription('Number of successful LDAP queries')
identityAwarenessUnSuccUserLDAP = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessUnSuccUserLDAP.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessUnSuccUserLDAP.setDescription('Number of unsuccessful LDAP queries')
identityAwarenessDataTrans = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessDataTrans.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessDataTrans.setDescription('How much data did  gateway transmitted')
identityAwarenessDistributedEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 38, 24), )
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTable.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTable.setDescription('Table for distributed environments')
identityAwarenessDistributedEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 38, 24, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "identityAwarenessDistributedEnvTableIndex"))
if mibBuilder.loadTexts: identityAwarenessDistributedEnvEntry.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessDistributedEnvEntry.setDescription('No description available')
identityAwarenessDistributedEnvTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 38, 24, 1, 1), Unsigned32())
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableIndex.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableIndex.setDescription('Distributed Environments: Table Index')
identityAwarenessDistributedEnvTableGwName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 38, 24, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableGwName.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableGwName.setDescription('Distributed Environments: GW Name')
identityAwarenessDistributedEnvTableDisconnections = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 38, 24, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableDisconnections.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableDisconnections.setDescription('Distributed Environments: Number of disconnections')
identityAwarenessDistributedEnvTableBruteForceAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 38, 24, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableBruteForceAtt.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableBruteForceAtt.setDescription('Distributed Environments: Number of brute force attack detected')
identityAwarenessDistributedEnvTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 38, 24, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableStatus.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableStatus.setDescription('Distributed Environments: Status\n\t\t              \t\t   Possible values include:\n\t\t\t  \t\t           Ok\t\t0\t\t\t\t\t\t\t   \n\t\t\t\t\t\t\t   Error\t2')
identityAwarenessDistributedEnvTableIsLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 38, 24, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableIsLocal.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableIsLocal.setDescription('Distributed Environments: Is local\n\t\t              \t\t   Possible values include:\n\t\t\t  \t\t           False\t0\n\t\t\t  \t\t           True\t\t1')
identityAwarenessADQueryStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 38, 25), )
if mibBuilder.loadTexts: identityAwarenessADQueryStatusTable.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessADQueryStatusTable.setDescription('Table for AD Query status')
identityAwarenessADQueryStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 38, 25, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "identityAwarenessADQueryStatusTableIndex"))
if mibBuilder.loadTexts: identityAwarenessADQueryStatusEntry.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessADQueryStatusEntry.setDescription('No description available')
identityAwarenessADQueryStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 38, 25, 1, 1), Unsigned32())
if mibBuilder.loadTexts: identityAwarenessADQueryStatusTableIndex.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessADQueryStatusTableIndex.setDescription('AD Query Status: Table Index')
identityAwarenessADQueryStatusCurrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 38, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessADQueryStatusCurrStatus.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessADQueryStatusCurrStatus.setDescription('AD Query Status: Current status\n\t\t              \t\t   Possible values include:\n\t\t\t  \t\t           Ok\t\t\t\t\t0\n\t\t\t\t\t\t   Ok 1\n\t\t\t  \t\t           Bad Credentials 2\n\t\t\t  \t\t           Connectivity Error 3\n\t\t\t  \t\t           Domain Controller Internal Error 4\n\t\t\t  \t\t           Connection Time Out 5\n\t\t\t\t\t\t   WMI permission denied 7 \n\t\t\t\t\t  \t   Domain Controller unreachable 8\n\t\t\t\t\t\t   Domain Controller RPC Internal Error 9\n\t\t\t\t\t\t   Connection refused 10')
identityAwarenessADQueryStatusDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 38, 25, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessADQueryStatusDomainName.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessADQueryStatusDomainName.setDescription('AD Query Status: Domain name')
identityAwarenessADQueryStatusDomainIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 38, 25, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessADQueryStatusDomainIP.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessADQueryStatusDomainIP.setDescription('AD Query Status: Domain IP')
identityAwarenessADQueryStatusEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 38, 25, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessADQueryStatusEvents.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessADQueryStatusEvents.setDescription('AD Query Status: Number of events')
identityAwarenessRADIUSAccounting = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessRADIUSAccounting.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessRADIUSAccounting.setDescription('Number of identities logged in with RADIUS Accounting')
identityAwarenessIdentityCollectorActiveDirectory = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessIdentityCollectorActiveDirectory.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessIdentityCollectorActiveDirectory.setDescription('Number of identities logged in with Identity Collector Active Directory')
identityAwarenessIdentityCollectorCiscoISE = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessIdentityCollectorCiscoISE.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessIdentityCollectorCiscoISE.setDescription('Number of identities logged in with Identity Collector Cisco ISE')
identityAwarenessTerminalServer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessTerminalServer.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessTerminalServer.setDescription('Number of identities logged in with terminal server')
identityAwarenessRemoteAccess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessRemoteAccess.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessRemoteAccess.setDescription('Number of identities logged in with Remote Access')
identityAwarenessIdentityWebAPI = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessIdentityWebAPI.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessIdentityWebAPI.setDescription('Number of identities logged in with Identity Web API')
identityAwarenessStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessStatus.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessStatus.setDescription('Identity Awarness Status code')
identityAwarenessStatusShortDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessStatusShortDesc.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessStatusShortDesc.setDescription('Identity Awarness Status - Short Description')
identityAwarenessStatusLongDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessStatusLongDesc.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessStatusLongDesc.setDescription('Identity Awarness Status  - Long Description')
applicationControlSubscription = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 39, 1))
applicationControlSubscriptionStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 39, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationControlSubscriptionStatus.setStatus('current')
if mibBuilder.loadTexts: applicationControlSubscriptionStatus.setDescription('Subscription status\n\t\t\t\t Possible values include:\n\t           \t valid, expired, about-to-expire, not-associated, unknown')
applicationControlSubscriptionExpDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 39, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationControlSubscriptionExpDate.setStatus('current')
if mibBuilder.loadTexts: applicationControlSubscriptionExpDate.setDescription('Application Control subscription expiration date')
applicationControlSubscriptionDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 39, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationControlSubscriptionDesc.setStatus('current')
if mibBuilder.loadTexts: applicationControlSubscriptionDesc.setDescription('Subscription description')
applicationControlUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 39, 2))
applicationControlUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 39, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationControlUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: applicationControlUpdateStatus.setDescription('Update status\n\t\t\t\t Possible values include:\n\t           \t failed, up-to-date, new, degrade, unknown')
applicationControlUpdateDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 39, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationControlUpdateDesc.setStatus('current')
if mibBuilder.loadTexts: applicationControlUpdateDesc.setDescription('Update description')
applicationControlNextUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 39, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationControlNextUpdate.setStatus('current')
if mibBuilder.loadTexts: applicationControlNextUpdate.setDescription('Next update description')
applicationControlVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 39, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationControlVersion.setStatus('current')
if mibBuilder.loadTexts: applicationControlVersion.setDescription('Application Control database version')
applicationControlStatusCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 39, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationControlStatusCode.setStatus('current')
if mibBuilder.loadTexts: applicationControlStatusCode.setDescription('Application Control Status code')
applicationControlStatusShortDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 39, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationControlStatusShortDesc.setStatus('current')
if mibBuilder.loadTexts: applicationControlStatusShortDesc.setDescription('Application Control Status - Short Description')
applicationControlStatusLongDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 39, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationControlStatusLongDesc.setStatus('current')
if mibBuilder.loadTexts: applicationControlStatusLongDesc.setDescription('Application Control Status  - Long Description')
exchangeAgentsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1))
exchangeAgentsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1), )
if mibBuilder.loadTexts: exchangeAgentsStatusTable.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentsStatusTable.setDescription('Table for exchange agents status')
exchangeAgentsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "exchangeAgentsStatusTableIndex"))
if mibBuilder.loadTexts: exchangeAgentsStatusEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentsStatusEntry.setDescription('No description available')
exchangeAgentsStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: exchangeAgentsStatusTableIndex.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentsStatusTableIndex.setDescription('Exchange agents: Table Index')
exchangeAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentName.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentName.setDescription('Exchange agent name')
exchangeAgentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentStatus.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentStatus.setDescription('Exchange agent status')
exchangeAgentTotalMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentTotalMsg.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentTotalMsg.setDescription('Exchange agent total messages')
exchangeAgentTotalScannedMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentTotalScannedMsg.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentTotalScannedMsg.setDescription('Exchange agent total scanned messages')
exchangeAgentDroppedMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentDroppedMsg.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentDroppedMsg.setDescription('Exchange agent dropped messages')
exchangeAgentUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentUpTime.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentUpTime.setDescription('Number of seconds that the exchange agent is up')
exchangeAgentTimeSinceLastMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentTimeSinceLastMsg.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentTimeSinceLastMsg.setDescription('Number of seconds since the last message passed through the exchange agent')
exchangeAgentQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentQueueLen.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentQueueLen.setDescription('The current exchange agent message queue length')
exchangeQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeQueueLen.setStatus('current')
if mibBuilder.loadTexts: exchangeQueueLen.setDescription('The cumulative exchange server queue length')
exchangeAgentAvgTimePerMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentAvgTimePerMsg.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentAvgTimePerMsg.setDescription('The average (for all messages) latency added by the exchange agent')
exchangeAgentAvgTimePerScannedMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentAvgTimePerScannedMsg.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentAvgTimePerScannedMsg.setDescription('The average (for scanned messages only) latency added by the exchange agent')
exchangeAgentVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentVersion.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentVersion.setDescription('The version of the exchange agent')
exchangeCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeCPUUsage.setStatus('current')
if mibBuilder.loadTexts: exchangeCPUUsage.setDescription('The exchange server CPU usage in percentage')
exchangeMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: exchangeMemoryUsage.setDescription('The exchange server memory usage in percentage')
exchangeAgentPolicyTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentPolicyTimeStamp.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentPolicyTimeStamp.setDescription('The time of the last policy retrieved by the exchange agent from the gateway')
dlpVersionString = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpVersionString.setStatus('current')
if mibBuilder.loadTexts: dlpVersionString.setDescription('Version')
dlpLicenseStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpLicenseStatus.setStatus('current')
if mibBuilder.loadTexts: dlpLicenseStatus.setDescription('License status')
dlpLdapStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpLdapStatus.setStatus('current')
if mibBuilder.loadTexts: dlpLdapStatus.setDescription('LDAP Status')
dlpTotalScans = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpTotalScans.setStatus('current')
if mibBuilder.loadTexts: dlpTotalScans.setDescription('Traffic scans')
dlpSMTPScans = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpSMTPScans.setStatus('current')
if mibBuilder.loadTexts: dlpSMTPScans.setDescription('Scanned e-mails')
dlpSMTPIncidents = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpSMTPIncidents.setStatus('current')
if mibBuilder.loadTexts: dlpSMTPIncidents.setDescription('E-mail incidents')
dlpLastSMTPScan = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpLastSMTPScan.setStatus('current')
if mibBuilder.loadTexts: dlpLastSMTPScan.setDescription('Last E-mail scan')
dlpNumQuarantined = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpNumQuarantined.setStatus('current')
if mibBuilder.loadTexts: dlpNumQuarantined.setDescription('Quarantined messages')
dlpQrntMsgsSize = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpQrntMsgsSize.setStatus('current')
if mibBuilder.loadTexts: dlpQrntMsgsSize.setDescription('Size of quarantined messages')
dlpSentEMails = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpSentEMails.setStatus('current')
if mibBuilder.loadTexts: dlpSentEMails.setDescription('Sent e-mails')
dlpExpiredEMails = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpExpiredEMails.setStatus('current')
if mibBuilder.loadTexts: dlpExpiredEMails.setDescription('Expired e-mails')
dlpDiscardEMails = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpDiscardEMails.setStatus('current')
if mibBuilder.loadTexts: dlpDiscardEMails.setDescription('Discarded e-mails')
dlpPostfixQLen = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpPostfixQLen.setStatus('current')
if mibBuilder.loadTexts: dlpPostfixQLen.setDescription('Postfix queue length')
dlpPostfixErrors = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpPostfixErrors.setStatus('current')
if mibBuilder.loadTexts: dlpPostfixErrors.setDescription('Postfix errors')
dlpPostfixQOldMsg = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpPostfixQOldMsg.setStatus('current')
if mibBuilder.loadTexts: dlpPostfixQOldMsg.setDescription('E-mails in queue older than 1 hour')
dlpPostfixQMsgsSz = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpPostfixQMsgsSz.setStatus('current')
if mibBuilder.loadTexts: dlpPostfixQMsgsSz.setDescription('Size of messages in queue')
dlpPostfixQFreeSp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpPostfixQFreeSp.setStatus('current')
if mibBuilder.loadTexts: dlpPostfixQFreeSp.setDescription('Free space in queue')
dlpQrntFreeSpace = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpQrntFreeSpace.setStatus('current')
if mibBuilder.loadTexts: dlpQrntFreeSpace.setDescription('Free space for quarantine')
dlpQrntStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpQrntStatus.setStatus('current')
if mibBuilder.loadTexts: dlpQrntStatus.setDescription('Quarantine status')
dlpHttpScans = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpHttpScans.setStatus('current')
if mibBuilder.loadTexts: dlpHttpScans.setDescription('HTTP scans')
dlpHttpIncidents = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpHttpIncidents.setStatus('current')
if mibBuilder.loadTexts: dlpHttpIncidents.setDescription('HTTP incidents')
dlpHttpLastScan = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpHttpLastScan.setStatus('current')
if mibBuilder.loadTexts: dlpHttpLastScan.setDescription('HTTP last scan')
dlpFtpScans = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpFtpScans.setStatus('current')
if mibBuilder.loadTexts: dlpFtpScans.setDescription('FTP scans')
dlpFtpIncidents = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpFtpIncidents.setStatus('current')
if mibBuilder.loadTexts: dlpFtpIncidents.setDescription('FTP incidents')
dlpFtpLastScan = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpFtpLastScan.setStatus('current')
if mibBuilder.loadTexts: dlpFtpLastScan.setDescription('FTP last scan')
dlpBypassStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpBypassStatus.setStatus('current')
if mibBuilder.loadTexts: dlpBypassStatus.setDescription('Bypass status')
dlpUserCheckClnts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpUserCheckClnts.setStatus('current')
if mibBuilder.loadTexts: dlpUserCheckClnts.setDescription('UserCheck clients')
dlpLastPolStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpLastPolStatus.setStatus('current')
if mibBuilder.loadTexts: dlpLastPolStatus.setDescription('Last policy install status')
dlpStatusCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpStatusCode.setStatus('current')
if mibBuilder.loadTexts: dlpStatusCode.setDescription('DLP Status code')
dlpStatusShortDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpStatusShortDesc.setStatus('current')
if mibBuilder.loadTexts: dlpStatusShortDesc.setDescription('DLP Status - Short Description')
dlpStatusLongDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpStatusLongDesc.setStatus('current')
if mibBuilder.loadTexts: dlpStatusLongDesc.setDescription('DLP Status  - Long Description')
thresholdPolicy = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 42, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPolicy.setStatus('current')
if mibBuilder.loadTexts: thresholdPolicy.setDescription('The name of the policy')
thresholdState = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 42, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdState.setStatus('current')
if mibBuilder.loadTexts: thresholdState.setDescription('State of the thresholds engine: Ok (1), Error (0)')
thresholdStateDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 42, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdStateDesc.setStatus('current')
if mibBuilder.loadTexts: thresholdStateDesc.setDescription('Description for the state')
thresholdEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 42, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdEnabled.setStatus('current')
if mibBuilder.loadTexts: thresholdEnabled.setDescription('Number of enabled thresholds (Monitoring statuses)')
thresholdActive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 42, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdActive.setStatus('current')
if mibBuilder.loadTexts: thresholdActive.setDescription('Number of active thresholds (Generating alerts)')
thresholdEventsSinceStartup = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 42, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdEventsSinceStartup.setStatus('current')
if mibBuilder.loadTexts: thresholdEventsSinceStartup.setDescription('Number of activated thresholds since startup')
thresholdActiveEventsTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 42, 7), )
if mibBuilder.loadTexts: thresholdActiveEventsTable.setStatus('current')
if mibBuilder.loadTexts: thresholdActiveEventsTable.setDescription('No description available')
thresholdActiveEventsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 42, 7, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "thresholdActiveEventsIndex"))
if mibBuilder.loadTexts: thresholdActiveEventsEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdActiveEventsEntry.setDescription('No description available')
thresholdActiveEventsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: thresholdActiveEventsIndex.setStatus('current')
if mibBuilder.loadTexts: thresholdActiveEventsIndex.setDescription('No description available')
thresholdActiveEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdActiveEventName.setStatus('current')
if mibBuilder.loadTexts: thresholdActiveEventName.setDescription('Name of the threshold')
thresholdActiveEventCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdActiveEventCategory.setStatus('current')
if mibBuilder.loadTexts: thresholdActiveEventCategory.setDescription('The category of the threshold')
thresholdActiveEventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdActiveEventSeverity.setStatus('current')
if mibBuilder.loadTexts: thresholdActiveEventSeverity.setDescription('Severity of the threshold: Cleared (0), Low (1), Medium (2), High (3), Critical (4)')
thresholdActiveEventSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdActiveEventSubject.setStatus('current')
if mibBuilder.loadTexts: thresholdActiveEventSubject.setDescription('The name of the status been checked by the threshold')
thresholdActiveEventSubjectValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdActiveEventSubjectValue.setStatus('current')
if mibBuilder.loadTexts: thresholdActiveEventSubjectValue.setDescription('The value of the status been checked by the threshold')
thresholdActiveEventActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdActiveEventActivationTime.setStatus('current')
if mibBuilder.loadTexts: thresholdActiveEventActivationTime.setDescription('The activation time of the event')
thresholdActiveEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdActiveEventState.setStatus('current')
if mibBuilder.loadTexts: thresholdActiveEventState.setDescription('The state of the event [Active\\Clearing]')
thresholdDestinationsTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 42, 8), )
if mibBuilder.loadTexts: thresholdDestinationsTable.setStatus('current')
if mibBuilder.loadTexts: thresholdDestinationsTable.setDescription('No description available')
thresholdDestinationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 42, 8, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "thresholdDestinationIndex"))
if mibBuilder.loadTexts: thresholdDestinationsEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdDestinationsEntry.setDescription('No description available')
thresholdDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: thresholdDestinationIndex.setStatus('current')
if mibBuilder.loadTexts: thresholdDestinationIndex.setDescription('No description available')
thresholdDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdDestinationName.setStatus('current')
if mibBuilder.loadTexts: thresholdDestinationName.setDescription('Name of the destination')
thresholdDestinationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdDestinationType.setStatus('current')
if mibBuilder.loadTexts: thresholdDestinationType.setDescription('The type of the destination')
thresholdSendingState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdSendingState.setStatus('current')
if mibBuilder.loadTexts: thresholdSendingState.setDescription('Alerts transmission status: Ok (0), Error (1)')
thresholdSendingStateDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdSendingStateDesc.setStatus('current')
if mibBuilder.loadTexts: thresholdSendingStateDesc.setDescription('Description for the alert transmission state')
thresholdAlertCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdAlertCount.setStatus('current')
if mibBuilder.loadTexts: thresholdAlertCount.setDescription('Number of alerts transmitted to the destination')
thresholdErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 42, 9), )
if mibBuilder.loadTexts: thresholdErrorsTable.setStatus('current')
if mibBuilder.loadTexts: thresholdErrorsTable.setDescription('No description available')
thresholdErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 42, 9, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "thresholdErrorIndex"))
if mibBuilder.loadTexts: thresholdErrorsEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdErrorsEntry.setDescription('No description available')
thresholdErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: thresholdErrorIndex.setStatus('current')
if mibBuilder.loadTexts: thresholdErrorIndex.setDescription('No description available')
thresholdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdName.setStatus('current')
if mibBuilder.loadTexts: thresholdName.setDescription('Name of the threshold')
thresholdThresholdOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdThresholdOID.setStatus('current')
if mibBuilder.loadTexts: thresholdThresholdOID.setDescription('OID of the thresholds alert')
thresholdErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdErrorDesc.setStatus('current')
if mibBuilder.loadTexts: thresholdErrorDesc.setDescription('Description of the error')
thresholdErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdErrorTime.setStatus('current')
if mibBuilder.loadTexts: thresholdErrorTime.setDescription('The occurrence time of the error')
advancedUrlFilteringSubscription = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 43, 1))
advancedUrlFilteringSubscriptionStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringSubscriptionStatus.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringSubscriptionStatus.setDescription('Subscription status\n\t\t\t\t Possible values include:\n\t           \t valid, expired, about-to-expire, not-associated, unknown')
advancedUrlFilteringSubscriptionExpDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringSubscriptionExpDate.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringSubscriptionExpDate.setDescription('Application Control subscription expiration date')
advancedUrlFilteringSubscriptionDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringSubscriptionDesc.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringSubscriptionDesc.setDescription('Subscription description')
advancedUrlFilteringUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 43, 2))
advancedUrlFilteringUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringUpdateStatus.setDescription('Update status\n\t\t\t\t Possible values include:\n\t           \t failed, up-to-date, new, degrade, unknown')
advancedUrlFilteringUpdateDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringUpdateDesc.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringUpdateDesc.setDescription('Update description')
advancedUrlFilteringNextUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringNextUpdate.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringNextUpdate.setDescription('Next update description')
advancedUrlFilteringVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringVersion.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringVersion.setDescription('Url Filtering database version')
advancedUrlFilteringRADStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 43, 3))
advancedUrlFilteringRADStatusCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringRADStatusCode.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringRADStatusCode.setDescription('RAD Status code')
advancedUrlFilteringRADStatusDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringRADStatusDesc.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringRADStatusDesc.setDescription('RAD status description')
advancedUrlFilteringStatusCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringStatusCode.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringStatusCode.setDescription('Application Control Status code')
advancedUrlFilteringStatusShortDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringStatusShortDesc.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringStatusShortDesc.setDescription('Application Control Status - Short Description')
advancedUrlFilteringStatusLongDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringStatusLongDesc.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringStatusLongDesc.setDescription('Application Control Status  - Long Description')
antiBotSubscription = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 46, 2))
antiBotSubscriptionStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antiBotSubscriptionStatus.setStatus('current')
if mibBuilder.loadTexts: antiBotSubscriptionStatus.setDescription('Anti-Bot subscription status\n\t\t\t\t Possible values include:\n\t           \t valid, expired, about-to-expire, not-associated, unknown')
antiBotSubscriptionExpDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antiBotSubscriptionExpDate.setStatus('current')
if mibBuilder.loadTexts: antiBotSubscriptionExpDate.setDescription('Anti-Bot subscription expiration date')
antiBotSubscriptionDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antiBotSubscriptionDesc.setStatus('current')
if mibBuilder.loadTexts: antiBotSubscriptionDesc.setDescription('Anti-Bot subscription description')
antiVirusSubscription = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 46, 3))
antiVirusSubscriptionStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antiVirusSubscriptionStatus.setStatus('current')
if mibBuilder.loadTexts: antiVirusSubscriptionStatus.setDescription('Anti-Virus subscription status\n\t\t\t\t Possible values include:\n\t           \t valid, expired, about-to-expire, not-associated, unknown')
antiVirusSubscriptionExpDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antiVirusSubscriptionExpDate.setStatus('current')
if mibBuilder.loadTexts: antiVirusSubscriptionExpDate.setDescription('Anti-Virus subscription expiration date')
antiVirusSubscriptionDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antiVirusSubscriptionDesc.setStatus('current')
if mibBuilder.loadTexts: antiVirusSubscriptionDesc.setDescription('Anti-Virus subscription description')
antiSpamSubscription = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 46, 4))
antiSpamSubscriptionStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antiSpamSubscriptionStatus.setStatus('current')
if mibBuilder.loadTexts: antiSpamSubscriptionStatus.setDescription('Anti-Spam subscription status\n\t\t\t\t Possible values include:\n\t           \t valid, expired, about-to-expire, not-associated, unknown')
antiSpamSubscriptionExpDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antiSpamSubscriptionExpDate.setStatus('current')
if mibBuilder.loadTexts: antiSpamSubscriptionExpDate.setDescription('Anti-Spam subscription expiration date')
antiSpamSubscriptionDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antiSpamSubscriptionDesc.setStatus('current')
if mibBuilder.loadTexts: antiSpamSubscriptionDesc.setDescription('Anti-Spam subscription description')
amwABUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 46, 1))
amwABUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amwABUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: amwABUpdateStatus.setDescription('Anti-Malware update status\n\t\t\t\t Possible values include:\n\t           \t failed, up-to-date, new, degrade, unknown')
amwABUpdateDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amwABUpdateDesc.setStatus('current')
if mibBuilder.loadTexts: amwABUpdateDesc.setDescription('Anti-Malware update description')
amwABNextUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amwABNextUpdate.setStatus('current')
if mibBuilder.loadTexts: amwABNextUpdate.setDescription('Anti-Malware next update description')
amwABVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amwABVersion.setStatus('current')
if mibBuilder.loadTexts: amwABVersion.setDescription('Anti-Malware database version')
amwAVUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 46, 5))
amwAVUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amwAVUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: amwAVUpdateStatus.setDescription('Anti-Virus update status\n\t\t\t\t Possible values include:\n\t           \t failed, up-to-date, new, degrade, unknown')
amwAVUpdateDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amwAVUpdateDesc.setStatus('current')
if mibBuilder.loadTexts: amwAVUpdateDesc.setDescription('Anti-Virus update description')
amwAVNextUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 5, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amwAVNextUpdate.setStatus('current')
if mibBuilder.loadTexts: amwAVNextUpdate.setDescription('Anti-Virus next update description')
amwAVVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 5, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amwAVVersion.setStatus('current')
if mibBuilder.loadTexts: amwAVVersion.setDescription('Anti-Virus database version')
amwStatusCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amwStatusCode.setStatus('current')
if mibBuilder.loadTexts: amwStatusCode.setDescription('Anti-Bot & Anti-Virus Status code')
amwStatusShortDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amwStatusShortDesc.setStatus('current')
if mibBuilder.loadTexts: amwStatusShortDesc.setDescription('Anti-Bot & Anti-Virus Status - Short Description')
amwStatusLongDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amwStatusLongDesc.setStatus('current')
if mibBuilder.loadTexts: amwStatusLongDesc.setDescription('Anti-Bot & Anti-Virus Status  - Long Description')
asgProductName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgProductName.setStatus('current')
if mibBuilder.loadTexts: asgProductName.setDescription('Product name')
asgVer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVer.setStatus('current')
if mibBuilder.loadTexts: asgVer.setDescription('ASG build version')
asgKernelVer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgKernelVer.setStatus('current')
if mibBuilder.loadTexts: asgKernelVer.setDescription('Kernel version')
asgBuildNum = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgBuildNum.setStatus('current')
if mibBuilder.loadTexts: asgBuildNum.setDescription('ASG build number')
asgMaximumBladesPerChassis = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgMaximumBladesPerChassis.setStatus('current')
if mibBuilder.loadTexts: asgMaximumBladesPerChassis.setDescription('Maximum blades per chassis')
asgActiveBladesBitmask = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgActiveBladesBitmask.setStatus('current')
if mibBuilder.loadTexts: asgActiveBladesBitmask.setDescription('Bitmask of active blades: \n\t\t\t\t Chassis 1 - 16 Least Significant Bits \n\t\t\t\t Chassis 2 - 16 Most Significant Bits\n\t\t\t\t E.g. asgActiveBladesBitmask = 00030002 \n\t\t\t\t It means blade 2 is active in chassis 1 and\n\t\t\t\t blade 1 and blade 2 are active in chassis 2')
asgInstalledBladesBitmask = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgInstalledBladesBitmask.setStatus('current')
if mibBuilder.loadTexts: asgInstalledBladesBitmask.setDescription('Bitmask of installed blades:\n\t\t\t\t Chassis 1 - 16 Least Significant Bits \n\t\t\t\t Chassis 2 - 16 Most Significant Bits\n\t\t\t\t E.g. asgInstalledBladesBitmask = 00030002 \n\t\t\t\t It means blade 2 is installed in chassis 1 and\n\t\t\t\t blade 1 and blade 2 are installed in chassis 2')
asgInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgInstalled.setStatus('current')
if mibBuilder.loadTexts: asgInstalled.setDescription('Date and time of ASG installation')
asgSystemUp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSystemUp.setStatus('current')
if mibBuilder.loadTexts: asgSystemUp.setDescription('Time elapsed since the last system startup')
asgEvent = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgEvent.setStatus('current')
if mibBuilder.loadTexts: asgEvent.setDescription('A string containing the last snmp trap sent from ASG')
asgStatusCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgStatusCode.setStatus('current')
if mibBuilder.loadTexts: asgStatusCode.setDescription('No description available')
asgStatShort = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgStatShort.setStatus('current')
if mibBuilder.loadTexts: asgStatShort.setDescription('Status short description')
asgStatLong = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgStatLong.setStatus('current')
if mibBuilder.loadTexts: asgStatLong.setDescription('Status long description')
asgSecureXLStatusBitmask = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSecureXLStatusBitmask.setStatus('current')
if mibBuilder.loadTexts: asgSecureXLStatusBitmask.setDescription('Bitmask of SecureXL status:\n\t\t\t\t Chassis 1 - 16 Least Significant Bits \n\t\t\t\t Chassis 2 - 16 Most Significant Bits\n\t\t\t\t E.g. asgSecureXLStatusBitmask = 00030002 \n\t\t\t\t It means SecureXL is enabled on blade 2 in chassis 1 and\n\t\t\t\t on blade 1 and blade 2 in chassis 2')
asgAttachedBladesBitmask = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgAttachedBladesBitmask.setStatus('current')
if mibBuilder.loadTexts: asgAttachedBladesBitmask.setDescription('Bitmask of attached blades:\n\t\t\t\t Chassis 1 - 16 Least Significant Bits \n\t\t\t\t Chassis 2 - 16 Most Significant Bits\n\t\t\t\t E.g. asgAttachedBladesBitmask = 00030002 \n\t\t\t\t It means blade 2 is attached in chassis 1 and\n\t\t\t\t blade 1 and blade 2 are attached in chassis 2')
asgIPv4PerformanceCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20))
asgThroughput = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgThroughput.setStatus('current')
if mibBuilder.loadTexts: asgThroughput.setDescription('Throughput')
asgConnectionRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgConnectionRate.setStatus('current')
if mibBuilder.loadTexts: asgConnectionRate.setDescription('Connection rate')
asgPacketRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgPacketRate.setStatus('current')
if mibBuilder.loadTexts: asgPacketRate.setDescription('Packet rate')
asgConcurrConn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgConcurrConn.setStatus('current')
if mibBuilder.loadTexts: asgConcurrConn.setDescription('Concurrent connections')
asgAccelConnectionRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgAccelConnectionRate.setStatus('current')
if mibBuilder.loadTexts: asgAccelConnectionRate.setDescription('Accelerated connections rate')
asgNonAccelConnectionRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgNonAccelConnectionRate.setStatus('current')
if mibBuilder.loadTexts: asgNonAccelConnectionRate.setDescription('Non-accelerated connections rate')
asgAccelConcurrConn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgAccelConcurrConn.setStatus('current')
if mibBuilder.loadTexts: asgAccelConcurrConn.setDescription('Accelerated concurrent connections')
asgNonAccelConcurrConn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgNonAccelConcurrConn.setStatus('current')
if mibBuilder.loadTexts: asgNonAccelConcurrConn.setDescription('Non-accelerated concurrent connections')
asgLoad = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgLoad.setStatus('current')
if mibBuilder.loadTexts: asgLoad.setDescription('Load (average), in %')
asgAccelLoadAvg = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgAccelLoadAvg.setStatus('current')
if mibBuilder.loadTexts: asgAccelLoadAvg.setDescription('Accelerated load (average), in %')
asgAccelLoadMin = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgAccelLoadMin.setStatus('current')
if mibBuilder.loadTexts: asgAccelLoadMin.setDescription('Accelerated load (minumum), in %')
asgAccelLoadMax = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgAccelLoadMax.setStatus('current')
if mibBuilder.loadTexts: asgAccelLoadMax.setDescription('Accelerated load (maximum), in %')
asgInstancesLoadAvg = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgInstancesLoadAvg.setStatus('current')
if mibBuilder.loadTexts: asgInstancesLoadAvg.setDescription('Instances load (average), in %')
asgInstancesLoadMin = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgInstancesLoadMin.setStatus('current')
if mibBuilder.loadTexts: asgInstancesLoadMin.setDescription('Instances load (minimum), in %')
asgInstancesLoadMax = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgInstancesLoadMax.setStatus('current')
if mibBuilder.loadTexts: asgInstancesLoadMax.setDescription('Instances load (maximum), in %')
asgVpnThroughput = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVpnThroughput.setStatus('current')
if mibBuilder.loadTexts: asgVpnThroughput.setDescription('VPN throughput')
asgVpnConn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVpnConn.setStatus('current')
if mibBuilder.loadTexts: asgVpnConn.setDescription('VPN connections')
asgNatConnRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgNatConnRate.setStatus('current')
if mibBuilder.loadTexts: asgNatConnRate.setDescription('NAT connection rate')
asgNatConn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgNatConn.setStatus('current')
if mibBuilder.loadTexts: asgNatConn.setDescription('NAT connections')
asgVsxCpu1MinAvg = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVsxCpu1MinAvg.setStatus('current')
if mibBuilder.loadTexts: asgVsxCpu1MinAvg.setDescription('Average CPU usage of 1min per VS')
asgPathDistTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 24), )
if mibBuilder.loadTexts: asgPathDistTable.setStatus('current')
if mibBuilder.loadTexts: asgPathDistTable.setDescription('NAT connections')
asgPathDistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 24, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgPathDistIndex"))
if mibBuilder.loadTexts: asgPathDistEntry.setStatus('current')
if mibBuilder.loadTexts: asgPathDistEntry.setDescription('No description available')
asgPathDistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 24, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgPathDistIndex.setStatus('current')
if mibBuilder.loadTexts: asgPathDistIndex.setDescription('No description available')
asgStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 24, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgStatName.setStatus('current')
if mibBuilder.loadTexts: asgStatName.setDescription("Statistic's name")
asgAccelPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 24, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgAccelPath.setStatus('current')
if mibBuilder.loadTexts: asgAccelPath.setDescription('Accelerated traffic')
asgMediumPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 24, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgMediumPath.setStatus('current')
if mibBuilder.loadTexts: asgMediumPath.setDescription('PXL accelerated traffic')
asgFirewallPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 24, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgFirewallPath.setStatus('current')
if mibBuilder.loadTexts: asgFirewallPath.setDescription('Firewall traffic')
asgDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 24, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgDropped.setStatus('current')
if mibBuilder.loadTexts: asgDropped.setDescription('Dropped traffic')
asgCountersTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 25), )
if mibBuilder.loadTexts: asgCountersTable.setStatus('current')
if mibBuilder.loadTexts: asgCountersTable.setDescription('No description available')
asgCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 25, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgCountersIndex"))
if mibBuilder.loadTexts: asgCountersEntry.setStatus('current')
if mibBuilder.loadTexts: asgCountersEntry.setDescription('No description available')
asgCountersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 25, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgCountersIndex.setStatus('current')
if mibBuilder.loadTexts: asgCountersIndex.setDescription('No description available')
asgCountersBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 25, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgCountersBladeId.setStatus('current')
if mibBuilder.loadTexts: asgCountersBladeId.setDescription('Blade Identifier')
asgCountersThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 25, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgCountersThroughput.setStatus('current')
if mibBuilder.loadTexts: asgCountersThroughput.setDescription('Throughput')
asgCountersConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 25, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgCountersConnRate.setStatus('current')
if mibBuilder.loadTexts: asgCountersConnRate.setDescription('Connection rate')
asgCountersPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 25, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgCountersPacketRate.setStatus('current')
if mibBuilder.loadTexts: asgCountersPacketRate.setDescription('Packet rate')
asgCountersConcurrConnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 25, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgCountersConcurrConnNum.setStatus('current')
if mibBuilder.loadTexts: asgCountersConcurrConnNum.setDescription('Number of concurrent connections')
asgCountersAccelLoadAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 25, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgCountersAccelLoadAverage.setStatus('current')
if mibBuilder.loadTexts: asgCountersAccelLoadAverage.setDescription('Acceleration load (average), in %')
asgCountersAccelLoadMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 25, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgCountersAccelLoadMin.setStatus('current')
if mibBuilder.loadTexts: asgCountersAccelLoadMin.setDescription('Acceleration load (minimum), in %')
asgCountersAccelLoadMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 25, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgCountersAccelLoadMax.setStatus('current')
if mibBuilder.loadTexts: asgCountersAccelLoadMax.setDescription('Acceleration load (maximum), in %')
asgCountersInstanceLoadAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 25, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgCountersInstanceLoadAverage.setStatus('current')
if mibBuilder.loadTexts: asgCountersInstanceLoadAverage.setDescription('Instances load (average), in %')
asgCountersInstanceLoadMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 25, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgCountersInstanceLoadMin.setStatus('current')
if mibBuilder.loadTexts: asgCountersInstanceLoadMin.setDescription('Instances load (minimum), in %')
asgCountersInstanceLoadMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 25, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgCountersInstanceLoadMax.setStatus('current')
if mibBuilder.loadTexts: asgCountersInstanceLoadMax.setDescription('Instances load (maximum), in %')
asgPeaksTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 26), )
if mibBuilder.loadTexts: asgPeaksTable.setStatus('current')
if mibBuilder.loadTexts: asgPeaksTable.setDescription('No description available')
asgPeaksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 26, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgPeakIndex"))
if mibBuilder.loadTexts: asgPeaksEntry.setStatus('current')
if mibBuilder.loadTexts: asgPeaksEntry.setDescription('No description available')
asgPeakIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 26, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgPeakIndex.setStatus('current')
if mibBuilder.loadTexts: asgPeakIndex.setDescription('No description available')
asgPeakCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 26, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgPeakCriteria.setStatus('current')
if mibBuilder.loadTexts: asgPeakCriteria.setDescription('No description available')
asgPeakValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 26, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgPeakValue.setStatus('current')
if mibBuilder.loadTexts: asgPeakValue.setDescription('Peak value')
asgPeakTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 26, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgPeakTimeStamp.setStatus('current')
if mibBuilder.loadTexts: asgPeakTimeStamp.setDescription('Peak timestamp')
asgPeakUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 26, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgPeakUnits.setStatus('current')
if mibBuilder.loadTexts: asgPeakUnits.setDescription('Units')
asgRulebase = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 27))
asgAcceptedBytesTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 27, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgAcceptedBytesTotal.setStatus('current')
if mibBuilder.loadTexts: asgAcceptedBytesTotal.setDescription('Total number of accepted bytes')
asgDroppedBytesTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 27, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgDroppedBytesTotal.setStatus('current')
if mibBuilder.loadTexts: asgDroppedBytesTotal.setDescription('Total number of dropped bytes')
asgRejectedTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 20, 27, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgRejectedTotal.setStatus('current')
if mibBuilder.loadTexts: asgRejectedTotal.setDescription('Total number of rejected bytes')
asgIPv6PerformanceCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21))
asgIPv6Throughput = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6Throughput.setStatus('current')
if mibBuilder.loadTexts: asgIPv6Throughput.setDescription('Throughput')
asgIPv6ConnectionRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6ConnectionRate.setStatus('current')
if mibBuilder.loadTexts: asgIPv6ConnectionRate.setDescription('Connection rate')
asgIPv6PacketRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6PacketRate.setStatus('current')
if mibBuilder.loadTexts: asgIPv6PacketRate.setDescription('Packet rate')
asgIPv6ConcurrConn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6ConcurrConn.setStatus('current')
if mibBuilder.loadTexts: asgIPv6ConcurrConn.setDescription('Concurrent connections')
asgIPv6AccelConnectionRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6AccelConnectionRate.setStatus('current')
if mibBuilder.loadTexts: asgIPv6AccelConnectionRate.setDescription('Accelerated connections rate')
asgIPv6NonAccelConnectionRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6NonAccelConnectionRate.setStatus('current')
if mibBuilder.loadTexts: asgIPv6NonAccelConnectionRate.setDescription('Non-accelerated connections rate')
asgIPv6AccelConcurrConn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6AccelConcurrConn.setStatus('current')
if mibBuilder.loadTexts: asgIPv6AccelConcurrConn.setDescription('Accelerated concurrent connections')
asgIPv6NonAccelConcurrConn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6NonAccelConcurrConn.setStatus('current')
if mibBuilder.loadTexts: asgIPv6NonAccelConcurrConn.setDescription('Non-accelerated concurrent connections')
asgIPv6Load = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6Load.setStatus('current')
if mibBuilder.loadTexts: asgIPv6Load.setDescription('Load (average), in %')
asgIPv6AccelLoadAvg = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6AccelLoadAvg.setStatus('current')
if mibBuilder.loadTexts: asgIPv6AccelLoadAvg.setDescription('Accelerated load (average), in %')
asgIPv6AccelLoadMin = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6AccelLoadMin.setStatus('current')
if mibBuilder.loadTexts: asgIPv6AccelLoadMin.setDescription('Accelerated load (minumum), in %')
asgIPv6AccelLoadMax = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6AccelLoadMax.setStatus('current')
if mibBuilder.loadTexts: asgIPv6AccelLoadMax.setDescription('Accelerated load (maximum), in %')
asgIPv6InstancesLoadAvg = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6InstancesLoadAvg.setStatus('current')
if mibBuilder.loadTexts: asgIPv6InstancesLoadAvg.setDescription('Instances load (average), in %')
asgIPv6InstancesLoadMin = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6InstancesLoadMin.setStatus('current')
if mibBuilder.loadTexts: asgIPv6InstancesLoadMin.setDescription('Instances load (minimum), in %')
asgIPv6InstancesLoadMax = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6InstancesLoadMax.setStatus('current')
if mibBuilder.loadTexts: asgIPv6InstancesLoadMax.setDescription('Instances load (maximum), in %')
asgIPv6VpnThroughput = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6VpnThroughput.setStatus('current')
if mibBuilder.loadTexts: asgIPv6VpnThroughput.setDescription('VPN throughput')
asgIPv6VpnConn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6VpnConn.setStatus('current')
if mibBuilder.loadTexts: asgIPv6VpnConn.setDescription('VPN connections')
asgIPv6NatConnRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6NatConnRate.setStatus('current')
if mibBuilder.loadTexts: asgIPv6NatConnRate.setDescription('NAT connection rate')
asgIPv6NatConn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6NatConn.setStatus('current')
if mibBuilder.loadTexts: asgIPv6NatConn.setDescription('NAT connections')
asgIPv6VsxCpu1MinAvg = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6VsxCpu1MinAvg.setStatus('current')
if mibBuilder.loadTexts: asgIPv6VsxCpu1MinAvg.setDescription('Average CPU usage of 1min per VS')
asgIPv6PathDistTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 24), )
if mibBuilder.loadTexts: asgIPv6PathDistTable.setStatus('current')
if mibBuilder.loadTexts: asgIPv6PathDistTable.setDescription('No description available')
asgIPv6PathDistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 24, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgIPv6PathDistIndex"))
if mibBuilder.loadTexts: asgIPv6PathDistEntry.setStatus('current')
if mibBuilder.loadTexts: asgIPv6PathDistEntry.setDescription('No description available')
asgIPv6PathDistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 24, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgIPv6PathDistIndex.setStatus('current')
if mibBuilder.loadTexts: asgIPv6PathDistIndex.setDescription('No description available')
asgIPv6StatName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 24, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6StatName.setStatus('current')
if mibBuilder.loadTexts: asgIPv6StatName.setDescription("Statistic's name")
asgIPv6AccelPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 24, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6AccelPath.setStatus('current')
if mibBuilder.loadTexts: asgIPv6AccelPath.setDescription('Accelerated traffic')
asgIPv6MediumPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 24, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6MediumPath.setStatus('current')
if mibBuilder.loadTexts: asgIPv6MediumPath.setDescription('PXL accelerated traffic')
asgIPv6FirewallPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 24, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6FirewallPath.setStatus('current')
if mibBuilder.loadTexts: asgIPv6FirewallPath.setDescription('Firewall traffic')
asgIPv6Dropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 24, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6Dropped.setStatus('current')
if mibBuilder.loadTexts: asgIPv6Dropped.setDescription('Dropped traffic')
asgIPv6CountersTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 25), )
if mibBuilder.loadTexts: asgIPv6CountersTable.setStatus('current')
if mibBuilder.loadTexts: asgIPv6CountersTable.setDescription('No description available')
asgIPv6CountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 25, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgIPv6CountersIndex"))
if mibBuilder.loadTexts: asgIPv6CountersEntry.setStatus('current')
if mibBuilder.loadTexts: asgIPv6CountersEntry.setDescription('No description available')
asgIPv6CountersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 25, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgIPv6CountersIndex.setStatus('current')
if mibBuilder.loadTexts: asgIPv6CountersIndex.setDescription('No description available')
asgIPv6CountersBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 25, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6CountersBladeId.setStatus('current')
if mibBuilder.loadTexts: asgIPv6CountersBladeId.setDescription('Blade Identifier')
asgIPv6CountersThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 25, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6CountersThroughput.setStatus('current')
if mibBuilder.loadTexts: asgIPv6CountersThroughput.setDescription('Throughput')
asgIPv6CountersConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 25, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6CountersConnRate.setStatus('current')
if mibBuilder.loadTexts: asgIPv6CountersConnRate.setDescription('Connection rate')
asgIPv6CountersPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 25, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6CountersPacketRate.setStatus('current')
if mibBuilder.loadTexts: asgIPv6CountersPacketRate.setDescription('Packet rate')
asgIPv6CountersConcurrConnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 25, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6CountersConcurrConnNum.setStatus('current')
if mibBuilder.loadTexts: asgIPv6CountersConcurrConnNum.setDescription('Number of concurrent connections')
asgIPv6CountersAccelLoadAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 25, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6CountersAccelLoadAverage.setStatus('current')
if mibBuilder.loadTexts: asgIPv6CountersAccelLoadAverage.setDescription('Acceleration load (average), in %')
asgIPv6CountersAccelLoadMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 25, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6CountersAccelLoadMin.setStatus('current')
if mibBuilder.loadTexts: asgIPv6CountersAccelLoadMin.setDescription('Acceleration load (minimum), in %')
asgIPv6CountersAccelLoadMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 25, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6CountersAccelLoadMax.setStatus('current')
if mibBuilder.loadTexts: asgIPv6CountersAccelLoadMax.setDescription('Acceleration load (maximum), in %')
asgIPv6CountersInstanceLoadAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 25, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6CountersInstanceLoadAverage.setStatus('current')
if mibBuilder.loadTexts: asgIPv6CountersInstanceLoadAverage.setDescription('Instances load (average), in %')
asgIPv6CountersInstanceLoadMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 25, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6CountersInstanceLoadMin.setStatus('current')
if mibBuilder.loadTexts: asgIPv6CountersInstanceLoadMin.setDescription('Instances load (minimum), in %')
asgIPv6CountersInstanceLoadMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 25, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6CountersInstanceLoadMax.setStatus('current')
if mibBuilder.loadTexts: asgIPv6CountersInstanceLoadMax.setDescription('Instances load (maximum), in %')
asgIPv6PeaksTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 26), )
if mibBuilder.loadTexts: asgIPv6PeaksTable.setStatus('current')
if mibBuilder.loadTexts: asgIPv6PeaksTable.setDescription('No description available')
asgIPv6PeaksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 26, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgIPv6PeakIndex"))
if mibBuilder.loadTexts: asgIPv6PeaksEntry.setStatus('current')
if mibBuilder.loadTexts: asgIPv6PeaksEntry.setDescription('No description available')
asgIPv6PeakIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 26, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgIPv6PeakIndex.setStatus('current')
if mibBuilder.loadTexts: asgIPv6PeakIndex.setDescription('No description available')
asgIPv6PeakCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 26, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6PeakCriteria.setStatus('current')
if mibBuilder.loadTexts: asgIPv6PeakCriteria.setDescription('Name of the peak statistics')
asgIPv6PeakValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 26, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6PeakValue.setStatus('current')
if mibBuilder.loadTexts: asgIPv6PeakValue.setDescription('Peak value')
asgIPv6PeakTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 26, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6PeakTimeStamp.setStatus('current')
if mibBuilder.loadTexts: asgIPv6PeakTimeStamp.setDescription('Peak timestamp')
asgIPv6PeakUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 26, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6PeakUnits.setStatus('current')
if mibBuilder.loadTexts: asgIPv6PeakUnits.setDescription('Units')
asgIPv6Rulebase = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 27))
asgIPv6AcceptedBytesTotalRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 27, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6AcceptedBytesTotalRate.setStatus('current')
if mibBuilder.loadTexts: asgIPv6AcceptedBytesTotalRate.setDescription('Rate of accepted bytes')
asgIPv6DroppedBytesTotalRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 27, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6DroppedBytesTotalRate.setStatus('current')
if mibBuilder.loadTexts: asgIPv6DroppedBytesTotalRate.setDescription('Rate of dropped bytes')
asgIPv6DroppedTotalRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 27, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6DroppedTotalRate.setStatus('current')
if mibBuilder.loadTexts: asgIPv6DroppedTotalRate.setDescription('Rate of dropped packets')
asgIPv6RulebaseTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 27, 4), )
if mibBuilder.loadTexts: asgIPv6RulebaseTable.setStatus('current')
if mibBuilder.loadTexts: asgIPv6RulebaseTable.setDescription('No description available')
asgIPv6RulebaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 27, 4, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgIPv6RulebaseIndex"))
if mibBuilder.loadTexts: asgIPv6RulebaseEntry.setStatus('current')
if mibBuilder.loadTexts: asgIPv6RulebaseEntry.setDescription('No description available')
asgIPv6RulebaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 27, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgIPv6RulebaseIndex.setStatus('current')
if mibBuilder.loadTexts: asgIPv6RulebaseIndex.setDescription('No description available')
asgIPv6RulebaseBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 27, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6RulebaseBladeId.setStatus('current')
if mibBuilder.loadTexts: asgIPv6RulebaseBladeId.setDescription('Blade identifier')
asgIPv6RulebaseDroppedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 27, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6RulebaseDroppedTotal.setStatus('current')
if mibBuilder.loadTexts: asgIPv6RulebaseDroppedTotal.setDescription('Number of dropped packets')
asgIPv6RulebaseAcceptedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 27, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6RulebaseAcceptedTotal.setStatus('current')
if mibBuilder.loadTexts: asgIPv6RulebaseAcceptedTotal.setDescription('Number of accepted packets')
asgIPv6RulebaseRejectedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 27, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6RulebaseRejectedTotal.setStatus('current')
if mibBuilder.loadTexts: asgIPv6RulebaseRejectedTotal.setDescription('Number of rejected packets')
asgIPv6RulebaseBytesDroppedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 27, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6RulebaseBytesDroppedTotal.setStatus('current')
if mibBuilder.loadTexts: asgIPv6RulebaseBytesDroppedTotal.setDescription('Number of dropped bytes')
asgIPv6RulebaseBytesAcceptedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 27, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6RulebaseBytesAcceptedTotal.setStatus('current')
if mibBuilder.loadTexts: asgIPv6RulebaseBytesAcceptedTotal.setDescription('Number of accepted bytes')
asgIPv6RulebaseBytesRejectedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 21, 27, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgIPv6RulebaseBytesRejectedTotal.setStatus('current')
if mibBuilder.loadTexts: asgIPv6RulebaseBytesRejectedTotal.setDescription('Number of rejected bytes')
asgHwMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48, 22))
asgSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48, 22, 1))
asgSensorTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 22, 1, 1), )
if mibBuilder.loadTexts: asgSensorTable.setStatus('current')
if mibBuilder.loadTexts: asgSensorTable.setDescription('No description available')
asgSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 22, 1, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgSensorIndex"))
if mibBuilder.loadTexts: asgSensorEntry.setStatus('current')
if mibBuilder.loadTexts: asgSensorEntry.setDescription('No description available')
asgSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 22, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgSensorIndex.setStatus('current')
if mibBuilder.loadTexts: asgSensorIndex.setDescription('No description available')
asgSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 22, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSensorName.setStatus('current')
if mibBuilder.loadTexts: asgSensorName.setDescription('Sensor name')
asgSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 22, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSensorLocation.setStatus('current')
if mibBuilder.loadTexts: asgSensorLocation.setDescription('Sensor location')
asgSensorCurrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 22, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSensorCurrValue.setStatus('current')
if mibBuilder.loadTexts: asgSensorCurrValue.setDescription('Sensor value')
asgSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 22, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSensorMinValue.setStatus('current')
if mibBuilder.loadTexts: asgSensorMinValue.setDescription('Sensor minimum value')
asgSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 22, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSensorMaxValue.setStatus('current')
if mibBuilder.loadTexts: asgSensorMaxValue.setDescription('Sensor maximum value')
asgSensorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 22, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSensorThreshold.setStatus('current')
if mibBuilder.loadTexts: asgSensorThreshold.setDescription('Sensor threshold')
asgSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 22, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSensorUnit.setStatus('current')
if mibBuilder.loadTexts: asgSensorUnit.setDescription('Sensor units')
asgSensorIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 22, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSensorIdentity.setStatus('current')
if mibBuilder.loadTexts: asgSensorIdentity.setDescription('Sensor identity')
asgSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 22, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSensorStatus.setStatus('current')
if mibBuilder.loadTexts: asgSensorStatus.setDescription('Sensor status')
asgResourceTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 23), )
if mibBuilder.loadTexts: asgResourceTable.setStatus('current')
if mibBuilder.loadTexts: asgResourceTable.setDescription('No description available')
asgResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 23, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgResourceIndex"))
if mibBuilder.loadTexts: asgResourceEntry.setStatus('current')
if mibBuilder.loadTexts: asgResourceEntry.setDescription('No description available')
asgResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 23, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgResourceIndex.setStatus('current')
if mibBuilder.loadTexts: asgResourceIndex.setDescription('No description available')
asgResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 23, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgResourceName.setStatus('current')
if mibBuilder.loadTexts: asgResourceName.setDescription('Resource name')
asgResourceLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 23, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgResourceLocation.setStatus('current')
if mibBuilder.loadTexts: asgResourceLocation.setDescription('Resource location')
asgResourceCurrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 23, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgResourceCurrValue.setStatus('current')
if mibBuilder.loadTexts: asgResourceCurrValue.setDescription('Resource current value')
asgResourceThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 23, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgResourceThreshold.setStatus('current')
if mibBuilder.loadTexts: asgResourceThreshold.setDescription('Threshold for resource value')
asgResourceUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 23, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgResourceUnit.setStatus('current')
if mibBuilder.loadTexts: asgResourceUnit.setDescription('Resource units')
asgResourceTotalVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 23, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgResourceTotalVal.setStatus('current')
if mibBuilder.loadTexts: asgResourceTotalVal.setDescription('Resource total value (bytes)')
asgResourceTitle = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 23, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgResourceTitle.setStatus('current')
if mibBuilder.loadTexts: asgResourceTitle.setDescription('Record title.')
asgProtocolTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48, 24))
asgServicesTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48, 25))
asgProtocolTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 24, 1), )
if mibBuilder.loadTexts: asgProtocolTrafficTable.setStatus('current')
if mibBuilder.loadTexts: asgProtocolTrafficTable.setDescription('No description available')
asgProtocolTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 24, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgProtocolIndex"))
if mibBuilder.loadTexts: asgProtocolTrafficEntry.setStatus('current')
if mibBuilder.loadTexts: asgProtocolTrafficEntry.setDescription('No description available')
asgProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 24, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgProtocolIndex.setStatus('current')
if mibBuilder.loadTexts: asgProtocolIndex.setDescription('No description available')
asgProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 24, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgProtocolName.setStatus('current')
if mibBuilder.loadTexts: asgProtocolName.setDescription('Protocol Name')
asgProtocolConns = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 24, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgProtocolConns.setStatus('current')
if mibBuilder.loadTexts: asgProtocolConns.setDescription('Current number of protocol connections')
asgProtocolTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 24, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgProtocolTotalPkts.setStatus('current')
if mibBuilder.loadTexts: asgProtocolTotalPkts.setDescription('Total number of protocol packets')
asgProtocolTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 24, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgProtocolTotalBytes.setStatus('current')
if mibBuilder.loadTexts: asgProtocolTotalBytes.setDescription('Total number of protocol bytes')
asgServiceTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 25, 1), )
if mibBuilder.loadTexts: asgServiceTrafficTable.setStatus('current')
if mibBuilder.loadTexts: asgServiceTrafficTable.setDescription('No description available')
asgServiceTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 25, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgServiceIndex"))
if mibBuilder.loadTexts: asgServiceTrafficEntry.setStatus('current')
if mibBuilder.loadTexts: asgServiceTrafficEntry.setDescription('No description available')
asgServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 25, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgServiceIndex.setStatus('current')
if mibBuilder.loadTexts: asgServiceIndex.setDescription('No description available')
asgServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 25, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgServiceName.setStatus('current')
if mibBuilder.loadTexts: asgServiceName.setDescription('Service/Port')
asgServiceConns = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 25, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgServiceConns.setStatus('current')
if mibBuilder.loadTexts: asgServiceConns.setDescription('Current number of service connections')
asgServiceTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 25, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgServiceTotalPkts.setStatus('current')
if mibBuilder.loadTexts: asgServiceTotalPkts.setDescription('Total number of service packets')
asgServiceTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 25, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgServiceTotalBytes.setStatus('current')
if mibBuilder.loadTexts: asgServiceTotalBytes.setDescription('Total number of service bytes')
asgSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48, 26))
asgNetIfTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 26, 1), )
if mibBuilder.loadTexts: asgNetIfTable.setStatus('current')
if mibBuilder.loadTexts: asgNetIfTable.setDescription('No description available')
asgNetIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 26, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgNetIfIndex"))
if mibBuilder.loadTexts: asgNetIfEntry.setStatus('current')
if mibBuilder.loadTexts: asgNetIfEntry.setDescription('No description available')
asgNetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 26, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgNetIfIndex.setStatus('current')
if mibBuilder.loadTexts: asgNetIfIndex.setDescription('No description available')
asgNetIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 26, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgNetIfName.setStatus('current')
if mibBuilder.loadTexts: asgNetIfName.setDescription('Interface Name')
asgNetIfIPv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 26, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgNetIfIPv4Addr.setStatus('current')
if mibBuilder.loadTexts: asgNetIfIPv4Addr.setDescription('IPv4 Address and Netmask')
asgNetIfIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 26, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgNetIfIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: asgNetIfIPv6Addr.setDescription('IPv6 (global) Address and Netmask')
asgNetIfMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 26, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgNetIfMACAddr.setStatus('current')
if mibBuilder.loadTexts: asgNetIfMACAddr.setDescription('MAC Address')
asgNetIfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 26, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgNetIfInfo.setStatus('current')
if mibBuilder.loadTexts: asgNetIfInfo.setDescription('Info')
asgNetIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 26, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgNetIfState.setStatus('current')
if mibBuilder.loadTexts: asgNetIfState.setDescription('State')
asgNetIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 26, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgNetIfSpeed.setStatus('current')
if mibBuilder.loadTexts: asgNetIfSpeed.setDescription('Speed')
asgNetIfMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 26, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgNetIfMTU.setStatus('current')
if mibBuilder.loadTexts: asgNetIfMTU.setDescription('MTU')
asgNetIfDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 26, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgNetIfDuplex.setStatus('current')
if mibBuilder.loadTexts: asgNetIfDuplex.setDescription('Duplex')
asgNetIfRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 26, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgNetIfRx.setStatus('current')
if mibBuilder.loadTexts: asgNetIfRx.setDescription('RX')
asgNetIfTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 26, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgNetIfTx.setStatus('current')
if mibBuilder.loadTexts: asgNetIfTx.setDescription('TX')
asgProblemTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 27), )
if mibBuilder.loadTexts: asgProblemTable.setStatus('current')
if mibBuilder.loadTexts: asgProblemTable.setDescription('No description available')
asgProblemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 27, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgProblemIndex"))
if mibBuilder.loadTexts: asgProblemEntry.setStatus('current')
if mibBuilder.loadTexts: asgProblemEntry.setDescription('No description available')
asgProblemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 27, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgProblemIndex.setStatus('current')
if mibBuilder.loadTexts: asgProblemIndex.setDescription('No description available')
asgProblemName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 27, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgProblemName.setStatus('current')
if mibBuilder.loadTexts: asgProblemName.setDescription('Problem name')
asgProblemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 27, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgProblemStatus.setStatus('current')
if mibBuilder.loadTexts: asgProblemStatus.setDescription('Problem status')
asgProblemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 27, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgProblemPriority.setStatus('current')
if mibBuilder.loadTexts: asgProblemPriority.setDescription('Problem priority')
asgProblemVerified = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 27, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgProblemVerified.setStatus('current')
if mibBuilder.loadTexts: asgProblemVerified.setDescription('No description available')
asgProblemDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 27, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgProblemDescr.setStatus('current')
if mibBuilder.loadTexts: asgProblemDescr.setDescription('Problem description')
asgChassisInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28))
asgChassisMode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgChassisMode.setStatus('current')
if mibBuilder.loadTexts: asgChassisMode.setDescription('Single or Dual Chassis')
asgChassisHAMode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgChassisHAMode.setStatus('current')
if mibBuilder.loadTexts: asgChassisHAMode.setDescription('Chassis HA Mode:\n\t\t\t\tPrimary UP or Active UP')
asgSynchronization = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 3))
asgSyncToActive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSyncToActive.setStatus('current')
if mibBuilder.loadTexts: asgSyncToActive.setDescription('Synchronization to active chassis:\n\t\t\t(Enabled / Disabled)')
asgSyncToStandby = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSyncToStandby.setStatus('current')
if mibBuilder.loadTexts: asgSyncToStandby.setDescription('Synchronization to standby chassis\n\t\t\t(Enabled / Disabled)')
asgSyncExceptionsTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 3, 3), )
if mibBuilder.loadTexts: asgSyncExceptionsTable.setStatus('current')
if mibBuilder.loadTexts: asgSyncExceptionsTable.setDescription('No description available')
asgSyncExceptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 3, 3, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgSyncExceptionsIndex"))
if mibBuilder.loadTexts: asgSyncExceptionsEntry.setStatus('current')
if mibBuilder.loadTexts: asgSyncExceptionsEntry.setDescription('No description available')
asgSyncExceptionsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 3, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgSyncExceptionsIndex.setStatus('current')
if mibBuilder.loadTexts: asgSyncExceptionsIndex.setDescription('No description available')
asgSyncExceptionsID = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSyncExceptionsID.setStatus('current')
if mibBuilder.loadTexts: asgSyncExceptionsID.setDescription('Exception ID')
asgSyncExceptionsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 3, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSyncExceptionsSource.setStatus('current')
if mibBuilder.loadTexts: asgSyncExceptionsSource.setDescription('Source IP Address')
asgSyncExceptionsSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 3, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSyncExceptionsSourceMask.setStatus('current')
if mibBuilder.loadTexts: asgSyncExceptionsSourceMask.setDescription('Source IP Mask')
asgSyncExceptionsDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 3, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSyncExceptionsDestination.setStatus('current')
if mibBuilder.loadTexts: asgSyncExceptionsDestination.setDescription('Destination IP Address')
asgSyncExceptionsDestinationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 3, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSyncExceptionsDestinationMask.setStatus('current')
if mibBuilder.loadTexts: asgSyncExceptionsDestinationMask.setDescription('Destination IP Mask')
asgSyncExceptionsIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 3, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSyncExceptionsIpProtocol.setStatus('current')
if mibBuilder.loadTexts: asgSyncExceptionsIpProtocol.setDescription('Exception IP Protocol')
asgSyncExceptionsSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 3, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSyncExceptionsSync.setStatus('current')
if mibBuilder.loadTexts: asgSyncExceptionsSync.setDescription('Exception Syncronization Type:\n\t\t\t\t\t\t0 = no sync\n\t\t\t\t\t\t1 = sync only to local chassis\n\t\t\t\t\t\t2 = sync only to other chassis\n\t\t\t\t\t\t3 = sync to all chassis')
asgSyncExceptionsDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 3, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSyncExceptionsDelay.setStatus('current')
if mibBuilder.loadTexts: asgSyncExceptionsDelay.setDescription('Exception Delay Time:\n\t\t\t\t\tDefault delays: http - 30, other - 5')
asgChassisParamsTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 4), )
if mibBuilder.loadTexts: asgChassisParamsTable.setStatus('current')
if mibBuilder.loadTexts: asgChassisParamsTable.setDescription('No description available')
asgChassisParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 4, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgChassisParamsIndex"))
if mibBuilder.loadTexts: asgChassisParamsEntry.setStatus('current')
if mibBuilder.loadTexts: asgChassisParamsEntry.setDescription('No description available')
asgChassisParamsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgChassisParamsIndex.setStatus('current')
if mibBuilder.loadTexts: asgChassisParamsIndex.setDescription('No description available')
asgChassisParamsID = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgChassisParamsID.setStatus('current')
if mibBuilder.loadTexts: asgChassisParamsID.setDescription('Chassis ID: (1 / 2)')
asgChassisParamsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgChassisParamsStatus.setStatus('current')
if mibBuilder.loadTexts: asgChassisParamsStatus.setDescription('Chassis Status:\n\t\t\tACTIVE / STANDBY / INIT / DOWN / DOWN (Admin)')
asgChassisParamsGrade = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgChassisParamsGrade.setStatus('current')
if mibBuilder.loadTexts: asgChassisParamsGrade.setDescription('Chassis Grade')
asgChassisParamsMaxGrade = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgChassisParamsMaxGrade.setStatus('current')
if mibBuilder.loadTexts: asgChassisParamsMaxGrade.setDescription('Chassis Maximum Grade')
asgChassisParamsUniqueIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgChassisParamsUniqueIP.setStatus('current')
if mibBuilder.loadTexts: asgChassisParamsUniqueIP.setDescription('Chassis Unique IP')
asgSGMTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 5), )
if mibBuilder.loadTexts: asgSGMTable.setStatus('current')
if mibBuilder.loadTexts: asgSGMTable.setDescription('No description available')
asgSGMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 5, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgSGMIndex"))
if mibBuilder.loadTexts: asgSGMEntry.setStatus('current')
if mibBuilder.loadTexts: asgSGMEntry.setDescription('No description available')
asgSGMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgSGMIndex.setStatus('current')
if mibBuilder.loadTexts: asgSGMIndex.setDescription('No description available')
asgSGMID = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSGMID.setStatus('current')
if mibBuilder.loadTexts: asgSGMID.setDescription('SGM ID')
asgSGMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSGMStatus.setStatus('current')
if mibBuilder.loadTexts: asgSGMStatus.setDescription('SGM Status: \n\t\t\t\tDOWN = 0, INIT = 1, STANDBY = 2 \n\t\t\t\tREADY = 3, ACTIVE = 4, DEAD = 10 \n\t\t\t\tN/A = -1\n\t\t\t\t')
asgSGMProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSGMProcess.setStatus('current')
if mibBuilder.loadTexts: asgSGMProcess.setDescription('SGM Process state\n\t\t\t\tfor example:\n\t\t\t\t(Enforcing Security, Inactive, Policy Started)')
asgSGMPolicyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgSGMPolicyTime.setStatus('current')
if mibBuilder.loadTexts: asgSGMPolicyTime.setDescription('SGM Policy Time')
asgFactorTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 6), )
if mibBuilder.loadTexts: asgFactorTable.setStatus('current')
if mibBuilder.loadTexts: asgFactorTable.setDescription('No description available')
asgFactorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 6, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgFactorIndex"))
if mibBuilder.loadTexts: asgFactorEntry.setStatus('current')
if mibBuilder.loadTexts: asgFactorEntry.setDescription('No description available')
asgFactorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgFactorIndex.setStatus('current')
if mibBuilder.loadTexts: asgFactorIndex.setDescription('No description available')
asgFactorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgFactorName.setStatus('current')
if mibBuilder.loadTexts: asgFactorName.setDescription('Factor Name')
asgFactorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgFactorValue.setStatus('current')
if mibBuilder.loadTexts: asgFactorValue.setDescription('Factor Value')
asgPortPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 7), )
if mibBuilder.loadTexts: asgPortPriorityTable.setStatus('current')
if mibBuilder.loadTexts: asgPortPriorityTable.setDescription('No description available')
asgPortPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 7, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgPortPriorityIndex"))
if mibBuilder.loadTexts: asgPortPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: asgPortPriorityEntry.setDescription('No description available')
asgPortPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgPortPriorityIndex.setStatus('current')
if mibBuilder.loadTexts: asgPortPriorityIndex.setDescription('No description available')
asgPriorityPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgPriorityPortName.setStatus('current')
if mibBuilder.loadTexts: asgPriorityPortName.setDescription('Port Name')
asgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 28, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgPortPriority.setStatus('current')
if mibBuilder.loadTexts: asgPortPriority.setDescription('Port Priority:\n\t\t\t\t(Standard / High)')
asgCoresUtilTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29), )
if mibBuilder.loadTexts: asgCoresUtilTable.setStatus('current')
if mibBuilder.loadTexts: asgCoresUtilTable.setDescription('No description available')
asgCoresUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgCoreIndex"))
if mibBuilder.loadTexts: asgCoresUtilEntry.setStatus('current')
if mibBuilder.loadTexts: asgCoresUtilEntry.setDescription('No description available')
asgCoreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgCoreIndex.setStatus('current')
if mibBuilder.loadTexts: asgCoreIndex.setDescription('No description available')
asgCoreRowTitle = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgCoreRowTitle.setStatus('current')
if mibBuilder.loadTexts: asgCoreRowTitle.setDescription('No description available')
blade1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade1.setStatus('current')
if mibBuilder.loadTexts: blade1.setDescription('1st blade core utilization in %')
blade2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade2.setStatus('current')
if mibBuilder.loadTexts: blade2.setDescription('2nd blade core utilization in %')
blade3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade3.setStatus('current')
if mibBuilder.loadTexts: blade3.setDescription('3rd blade core utilization in %')
blade4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade4.setStatus('current')
if mibBuilder.loadTexts: blade4.setDescription('4th blade core utilization in %')
blade5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade5.setStatus('current')
if mibBuilder.loadTexts: blade5.setDescription('5th blade core utilization in %')
blade6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade6.setStatus('current')
if mibBuilder.loadTexts: blade6.setDescription('6th blade core utilization in %')
blade7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade7.setStatus('current')
if mibBuilder.loadTexts: blade7.setDescription('7th blade core utilization in %')
blade8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade8.setStatus('current')
if mibBuilder.loadTexts: blade8.setDescription('8th blade core utilization in %')
blade9 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade9.setStatus('current')
if mibBuilder.loadTexts: blade9.setDescription('9th blade core utilization in %')
blade10 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade10.setStatus('current')
if mibBuilder.loadTexts: blade10.setDescription('10th blade core utilization in %')
blade11 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade11.setStatus('current')
if mibBuilder.loadTexts: blade11.setDescription('11th blade core utilization in %')
blade12 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade12.setStatus('current')
if mibBuilder.loadTexts: blade12.setDescription('12ve blade core utilization in %')
blade13 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade13.setStatus('current')
if mibBuilder.loadTexts: blade13.setDescription('13th blade core utilization in %')
blade14 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade14.setStatus('current')
if mibBuilder.loadTexts: blade14.setDescription('14th blade core utilization in %')
blade15 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade15.setStatus('current')
if mibBuilder.loadTexts: blade15.setDescription('15th blade core utilization in %')
blade16 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade16.setStatus('current')
if mibBuilder.loadTexts: blade16.setDescription('16th blade core utilization in %')
blade17 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade17.setStatus('current')
if mibBuilder.loadTexts: blade17.setDescription('17th blade core utilization in %')
blade18 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade18.setStatus('current')
if mibBuilder.loadTexts: blade18.setDescription('18th blade core utilization in %')
blade19 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade19.setStatus('current')
if mibBuilder.loadTexts: blade19.setDescription('19th blade core utilization in %')
blade20 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade20.setStatus('current')
if mibBuilder.loadTexts: blade20.setDescription('20th blade core utilization in %')
blade21 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade21.setStatus('current')
if mibBuilder.loadTexts: blade21.setDescription('21st blade core utilization in %')
blade22 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade22.setStatus('current')
if mibBuilder.loadTexts: blade22.setDescription('22nd blade core utilization in %')
blade23 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade23.setStatus('current')
if mibBuilder.loadTexts: blade23.setDescription('23rd blade core utilization in %')
blade24 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade24.setStatus('current')
if mibBuilder.loadTexts: blade24.setDescription('24th blade core utilization in %')
blade25 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade25.setStatus('current')
if mibBuilder.loadTexts: blade25.setDescription('25th blade core utilization in %')
blade26 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade26.setStatus('current')
if mibBuilder.loadTexts: blade26.setDescription('26th blade core utilization in %')
blade27 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade27.setStatus('current')
if mibBuilder.loadTexts: blade27.setDescription('27th blade core utilization in %')
blade28 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade28.setStatus('current')
if mibBuilder.loadTexts: blade28.setDescription('28th blade core utilization in %')
blade29 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade29.setStatus('current')
if mibBuilder.loadTexts: blade29.setDescription('29th blade core utilization in %')
blade30 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade30.setStatus('current')
if mibBuilder.loadTexts: blade30.setDescription('30th blade core utilization in %')
blade31 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade31.setStatus('current')
if mibBuilder.loadTexts: blade31.setDescription('31th blade core utilization in %')
blade32 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade32.setStatus('current')
if mibBuilder.loadTexts: blade32.setDescription('32th blade core utilization in %')
blade33 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade33.setStatus('current')
if mibBuilder.loadTexts: blade33.setDescription('33th blade core utilization in %')
blade34 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade34.setStatus('current')
if mibBuilder.loadTexts: blade34.setDescription('34th blade core utilization in %')
blade35 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade35.setStatus('current')
if mibBuilder.loadTexts: blade35.setDescription('35th blade core utilization in %')
blade36 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade36.setStatus('current')
if mibBuilder.loadTexts: blade36.setDescription('36th blade core utilization in %')
blade37 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade37.setStatus('current')
if mibBuilder.loadTexts: blade37.setDescription('37th blade core utilization in %')
blade38 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade38.setStatus('current')
if mibBuilder.loadTexts: blade38.setDescription('38th blade core utilization in %')
blade39 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade39.setStatus('current')
if mibBuilder.loadTexts: blade39.setDescription('39th blade core utilization in %')
blade40 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade40.setStatus('current')
if mibBuilder.loadTexts: blade40.setDescription('40th blade core utilization in %')
blade41 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade41.setStatus('current')
if mibBuilder.loadTexts: blade41.setDescription('41th blade core utilization in %')
blade42 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade42.setStatus('current')
if mibBuilder.loadTexts: blade42.setDescription('42th blade core utilization in %')
blade43 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade43.setStatus('current')
if mibBuilder.loadTexts: blade43.setDescription('43th blade core utilization in %')
blade44 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade44.setStatus('current')
if mibBuilder.loadTexts: blade44.setDescription('44th blade core utilization in %')
blade45 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 47), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade45.setStatus('current')
if mibBuilder.loadTexts: blade45.setDescription('45th blade core utilization in %')
blade46 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 48), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade46.setStatus('current')
if mibBuilder.loadTexts: blade46.setDescription('46th blade core utilization in %')
blade47 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade47.setStatus('current')
if mibBuilder.loadTexts: blade47.setDescription('47th blade core utilization in %')
blade48 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 29, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blade48.setStatus('current')
if mibBuilder.loadTexts: blade48.setDescription('48th blade core utilization in %')
asgVSX = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30))
asgVslsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20))
asgVslsSgmRatio = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsSgmRatio.setStatus('current')
if mibBuilder.loadTexts: asgVslsSgmRatio.setDescription('Threshold ratio for failover. Ratio is calculated by number of SGMS between Chassis')
asgVslsSystemPrimaryChassis = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsSystemPrimaryChassis.setStatus('current')
if mibBuilder.loadTexts: asgVslsSystemPrimaryChassis.setDescription('Method for defaulting Chassis per each VS.\n\t\t\t\t\t\t\t\t0 - Automatic. System decides automatically on primary Chassis, based on VS ID.\n\t\t\t\t\t\t\t\t1 - defaulting Chassis 1 for all VSs\n\t\t\t\t\t\t\t\t2 - defaulting Chassis 2 for all VSs')
asgVslsStateTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10), )
if mibBuilder.loadTexts: asgVslsStateTable.setStatus('current')
if mibBuilder.loadTexts: asgVslsStateTable.setDescription('No description available')
asgVslsStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgVslsVsid"))
if mibBuilder.loadTexts: asgVslsStateEntry.setStatus('current')
if mibBuilder.loadTexts: asgVslsStateEntry.setDescription('No description available')
asgVslsVsid = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgVslsVsid.setStatus('current')
if mibBuilder.loadTexts: asgVslsVsid.setDescription('VS index')
asgVslsVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsVsName.setStatus('current')
if mibBuilder.loadTexts: asgVslsVsName.setDescription('VS name')
asgVslsVsPrimaryChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsVsPrimaryChassis.setStatus('current')
if mibBuilder.loadTexts: asgVslsVsPrimaryChassis.setDescription('VS primary Chassis')
asgVslsVsActiveChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsVsActiveChassis.setStatus('current')
if mibBuilder.loadTexts: asgVslsVsActiveChassis.setDescription('VS Active Chassis')
asgVslsVsHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsVsHealth.setStatus('current')
if mibBuilder.loadTexts: asgVslsVsHealth.setDescription('VS status string')
asgVslsVsReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsVsReason.setStatus('current')
if mibBuilder.loadTexts: asgVslsVsReason.setDescription('Reason for prefaring Active Chassis')
asgVslsVsChassis1InterfacesUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsVsChassis1InterfacesUp.setStatus('current')
if mibBuilder.loadTexts: asgVslsVsChassis1InterfacesUp.setDescription('Number of UP interfaces on Chassis 1')
asgVslsVsChassis1InterfacesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsVsChassis1InterfacesTotal.setStatus('current')
if mibBuilder.loadTexts: asgVslsVsChassis1InterfacesTotal.setDescription('Number of configured interfaces on Chassis 1')
asgVslsVsChassis1FwksUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsVsChassis1FwksUp.setStatus('current')
if mibBuilder.loadTexts: asgVslsVsChassis1FwksUp.setDescription('Number of FWKs on Chassis 1')
asgVslsVsChassis1FwksTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsVsChassis1FwksTotal.setStatus('current')
if mibBuilder.loadTexts: asgVslsVsChassis1FwksTotal.setDescription('Optimum number of FWKs for Chassis 1')
asgVslsVsChassis2InterfacesUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsVsChassis2InterfacesUp.setStatus('current')
if mibBuilder.loadTexts: asgVslsVsChassis2InterfacesUp.setDescription('Number of UP interfaces on Chassis 2')
asgVslsVsChassis2InterfacesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsVsChassis2InterfacesTotal.setStatus('current')
if mibBuilder.loadTexts: asgVslsVsChassis2InterfacesTotal.setDescription('Number of configured interfaces on Chassis 2')
asgVslsVsChassis2FwksUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsVsChassis2FwksUp.setStatus('current')
if mibBuilder.loadTexts: asgVslsVsChassis2FwksUp.setDescription('Number of FWKs on Chassis 2')
asgVslsVsChassis2FwksTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsVsChassis2FwksTotal.setStatus('current')
if mibBuilder.loadTexts: asgVslsVsChassis2FwksTotal.setDescription('Optimum number of FWKs on Chassis 2')
asgVslsVsChassis3InterfacesUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsVsChassis3InterfacesUp.setStatus('current')
if mibBuilder.loadTexts: asgVslsVsChassis3InterfacesUp.setDescription('Number of UP interfaces on Chassis 3')
asgVslsVsChassis3InterfacesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsVsChassis3InterfacesTotal.setStatus('current')
if mibBuilder.loadTexts: asgVslsVsChassis3InterfacesTotal.setDescription('Number of configured interfaces on Chassis 3')
asgVslsVsChassis3FwksUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsVsChassis3FwksUp.setStatus('current')
if mibBuilder.loadTexts: asgVslsVsChassis3FwksUp.setDescription('Number of FWKs on Chassis 3')
asgVslsVsChassis3FwksTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsVsChassis3FwksTotal.setStatus('current')
if mibBuilder.loadTexts: asgVslsVsChassis3FwksTotal.setDescription('Optimum number of FWKs on Chassis 3')
asgVslsVsChassis4InterfacesUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsVsChassis4InterfacesUp.setStatus('current')
if mibBuilder.loadTexts: asgVslsVsChassis4InterfacesUp.setDescription('Number of UP interfaces on Chassis 4')
asgVslsVsChassis4InterfacesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsVsChassis4InterfacesTotal.setStatus('current')
if mibBuilder.loadTexts: asgVslsVsChassis4InterfacesTotal.setDescription('Number of configured interfaces on Chassis 4')
asgVslsVsChassis4FwksUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsVsChassis4FwksUp.setStatus('current')
if mibBuilder.loadTexts: asgVslsVsChassis4FwksUp.setDescription('Number of FWKs on Chassis 4')
asgVslsVsChassis4FwksTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 20, 10, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVslsVsChassis4FwksTotal.setStatus('current')
if mibBuilder.loadTexts: asgVslsVsChassis4FwksTotal.setDescription('Optimum number of FWKs on Chassis 4')
asgVSXConnInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 30))
asgVSXConnInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 30, 10), )
if mibBuilder.loadTexts: asgVSXConnInfoTable.setStatus('current')
if mibBuilder.loadTexts: asgVSXConnInfoTable.setDescription('Table with connection information per VS per Member')
asgVSXConnInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 30, 10, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgVSXConnInfoIndex"))
if mibBuilder.loadTexts: asgVSXConnInfoEntry.setStatus('current')
if mibBuilder.loadTexts: asgVSXConnInfoEntry.setDescription('No description available')
asgVSXConnInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 30, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgVSXConnInfoIndex.setStatus('current')
if mibBuilder.loadTexts: asgVSXConnInfoIndex.setDescription('Record index')
asgVSXConnBladeID = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 30, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXConnBladeID.setStatus('current')
if mibBuilder.loadTexts: asgVSXConnBladeID.setDescription('Member ID')
asgVSXIPver = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 30, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXIPver.setStatus('current')
if mibBuilder.loadTexts: asgVSXIPver.setDescription('IP Version')
asgVSXConcurrentConns = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 30, 10, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXConcurrentConns.setStatus('current')
if mibBuilder.loadTexts: asgVSXConcurrentConns.setDescription('Concurrent connections number on this VS')
asgVSXPeakConns = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 30, 10, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXPeakConns.setStatus('current')
if mibBuilder.loadTexts: asgVSXPeakConns.setDescription('Peak connection number on this VS')
asgVSXConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 30, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXConnLimit.setStatus('current')
if mibBuilder.loadTexts: asgVSXConnLimit.setDescription('Total connections limit on this VS')
asgVSXConnectionsNumberPerSystem = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 30, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXConnectionsNumberPerSystem.setStatus('current')
if mibBuilder.loadTexts: asgVSXConnectionsNumberPerSystem.setDescription('Total connections number on this VS (across all Members)')
asgVSXMemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 40))
asgVSXMemInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 40, 10), )
if mibBuilder.loadTexts: asgVSXMemInfoTable.setStatus('current')
if mibBuilder.loadTexts: asgVSXMemInfoTable.setDescription('Physical memory usage per VS per Member')
asgVSXMemInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 40, 10, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgVSXMemInfoIndex"))
if mibBuilder.loadTexts: asgVSXMemInfoEntry.setStatus('current')
if mibBuilder.loadTexts: asgVSXMemInfoEntry.setDescription('No description available')
asgVSXMemInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 40, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgVSXMemInfoIndex.setStatus('current')
if mibBuilder.loadTexts: asgVSXMemInfoIndex.setDescription('Record index')
asgVSXMemBladeid = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 40, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXMemBladeid.setStatus('current')
if mibBuilder.loadTexts: asgVSXMemBladeid.setDescription('Member ID - defined as ChassisID_MemberID')
asgVSXOverallMem = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 40, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXOverallMem.setStatus('current')
if mibBuilder.loadTexts: asgVSXOverallMem.setDescription('Overall physical memory\n\t\t\t\t\tof the virtual system in Member (Bytes)')
asgVSXCoreUtilInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 50))
asgVSXCoreUtilTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 50, 10), )
if mibBuilder.loadTexts: asgVSXCoreUtilTable.setStatus('current')
if mibBuilder.loadTexts: asgVSXCoreUtilTable.setDescription('CPU usage table per VS per Member per CPU')
asgVSXCoreUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 50, 10, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgVSXCoreUtilIndex"))
if mibBuilder.loadTexts: asgVSXCoreUtilEntry.setStatus('current')
if mibBuilder.loadTexts: asgVSXCoreUtilEntry.setDescription('No description available')
asgVSXCoreUtilIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 50, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgVSXCoreUtilIndex.setStatus('current')
if mibBuilder.loadTexts: asgVSXCoreUtilIndex.setDescription('Record index')
asgVSXCoreUtilBladeid = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 50, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXCoreUtilBladeid.setStatus('current')
if mibBuilder.loadTexts: asgVSXCoreUtilBladeid.setDescription('Member ID - defined as ChassisID_MemberID')
asgVSXCoreUtilCPUID = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 50, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXCoreUtilCPUID.setStatus('current')
if mibBuilder.loadTexts: asgVSXCoreUtilCPUID.setDescription('CPU Core ID')
asgVSXCoreUtilUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 50, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXCoreUtilUsage.setStatus('current')
if mibBuilder.loadTexts: asgVSXCoreUtilUsage.setDescription('CPU core utilization average over the last\n                                        minute by this VS in percentage')
asgVSXPacketRateInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 80))
asgVSXPacketRateTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 80, 10), )
if mibBuilder.loadTexts: asgVSXPacketRateTable.setStatus('current')
if mibBuilder.loadTexts: asgVSXPacketRateTable.setDescription('Packet rate per VS per Member')
asgVSXPacketRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 80, 10, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgVSXPacketRateIndex"))
if mibBuilder.loadTexts: asgVSXPacketRateEntry.setStatus('current')
if mibBuilder.loadTexts: asgVSXPacketRateEntry.setDescription('No description available')
asgVSXPacketRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 80, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgVSXPacketRateIndex.setStatus('current')
if mibBuilder.loadTexts: asgVSXPacketRateIndex.setDescription('Record index')
asgVSXRateBladeid = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 80, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXRateBladeid.setStatus('current')
if mibBuilder.loadTexts: asgVSXRateBladeid.setDescription('Member ID - defined as ChassisID_MemberID')
asgVSXRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 80, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXRateValue.setStatus('current')
if mibBuilder.loadTexts: asgVSXRateValue.setDescription('Packet rate on this Member')
asgVSXPacketRatePerSystem = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 80, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXPacketRatePerSystem.setStatus('current')
if mibBuilder.loadTexts: asgVSXPacketRatePerSystem.setDescription("VS's total packet rate (on all Members)")
asgVSXThroughputInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 90))
asgVSXThroughputTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 90, 10), )
if mibBuilder.loadTexts: asgVSXThroughputTable.setStatus('current')
if mibBuilder.loadTexts: asgVSXThroughputTable.setDescription('Throughput per VS per Member')
asgVSXThroughputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 90, 10, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgVSXThroughputIndex"))
if mibBuilder.loadTexts: asgVSXThroughputEntry.setStatus('current')
if mibBuilder.loadTexts: asgVSXThroughputEntry.setDescription('No description available')
asgVSXThroughputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 90, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgVSXThroughputIndex.setStatus('current')
if mibBuilder.loadTexts: asgVSXThroughputIndex.setDescription('Record index')
asgVSXThroughputBladeid = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 90, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXThroughputBladeid.setStatus('current')
if mibBuilder.loadTexts: asgVSXThroughputBladeid.setDescription('Member ID - defined as ChassisID_MemberID')
asgVSXThroughputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 90, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXThroughputValue.setStatus('current')
if mibBuilder.loadTexts: asgVSXThroughputValue.setDescription('IPv4 + IPv6 Throughput on this Member for current VS (Bytes/Second)')
asgVSXThroughputPerSystem = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 90, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXThroughputPerSystem.setStatus('current')
if mibBuilder.loadTexts: asgVSXThroughputPerSystem.setDescription("VS's total IPv4 + IPv6 throughput(on all Members)")
asgVSXThroughputPerInterfaceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 100))
asgVSXThroughputPerInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 100, 10), )
if mibBuilder.loadTexts: asgVSXThroughputPerInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: asgVSXThroughputPerInterfaceTable.setDescription('Throughput per Interface per VS per Member')
asgVSXThroughputPerInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 100, 10, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgVSXThroughputPerInterfaceIndex"))
if mibBuilder.loadTexts: asgVSXThroughputPerInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: asgVSXThroughputPerInterfaceEntry.setDescription('No description available')
asgVSXThroughputPerInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 100, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgVSXThroughputPerInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: asgVSXThroughputPerInterfaceIndex.setDescription('Record index')
asgVSXThroughputPerInterfaceBladeid = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 100, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXThroughputPerInterfaceBladeid.setStatus('current')
if mibBuilder.loadTexts: asgVSXThroughputPerInterfaceBladeid.setDescription('Member ID - defined as ChassisID_MemberID')
asgVSXThroughputPerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 100, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXThroughputPerInterfaceName.setStatus('current')
if mibBuilder.loadTexts: asgVSXThroughputPerInterfaceName.setDescription('Interface name')
asgVSXThroughputPerInterfaceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 100, 10, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXThroughputPerInterfaceValue.setStatus('current')
if mibBuilder.loadTexts: asgVSXThroughputPerInterfaceValue.setDescription('Throughput on this Member (KB/Second) on current interface')
asgVSXPerSystemThroughputPerInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 100, 20), )
if mibBuilder.loadTexts: asgVSXPerSystemThroughputPerInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: asgVSXPerSystemThroughputPerInterfaceTable.setDescription('Throughput per Interface per VS on System (across all Members)')
asgVSXPerSystemThroughputPerInterfaceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 100, 20, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgVSXPerSystemThroughputIndex"))
if mibBuilder.loadTexts: asgVSXPerSystemThroughputPerInterfaceTableEntry.setStatus('current')
if mibBuilder.loadTexts: asgVSXPerSystemThroughputPerInterfaceTableEntry.setDescription('No description available')
asgVSXPerSystemThroughputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 100, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgVSXPerSystemThroughputIndex.setStatus('current')
if mibBuilder.loadTexts: asgVSXPerSystemThroughputIndex.setDescription('Record index')
asgVSXPerSystemThroughputPerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 100, 20, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXPerSystemThroughputPerInterfaceName.setStatus('current')
if mibBuilder.loadTexts: asgVSXPerSystemThroughputPerInterfaceName.setDescription('Interface name')
asgVSXPerSystemThroughputPerInterfaceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 100, 20, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXPerSystemThroughputPerInterfaceValue.setStatus('current')
if mibBuilder.loadTexts: asgVSXPerSystemThroughputPerInterfaceValue.setDescription('Throughput across all Members (KB/Second) over current interface')
asgVSXConnectionRateInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 120))
asgVSXConnectionRateTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 120, 10), )
if mibBuilder.loadTexts: asgVSXConnectionRateTable.setStatus('current')
if mibBuilder.loadTexts: asgVSXConnectionRateTable.setDescription('Connection rate table per VS per Member')
asgVSXConnectionRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 120, 10, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgVSXConnectionRateIndex"))
if mibBuilder.loadTexts: asgVSXConnectionRateEntry.setStatus('current')
if mibBuilder.loadTexts: asgVSXConnectionRateEntry.setDescription('No description available')
asgVSXConnectionRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 120, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgVSXConnectionRateIndex.setStatus('current')
if mibBuilder.loadTexts: asgVSXConnectionRateIndex.setDescription('Record index')
asgVSXConnectionRateBladeid = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 120, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXConnectionRateBladeid.setStatus('current')
if mibBuilder.loadTexts: asgVSXConnectionRateBladeid.setDescription('Member ID - defined as ChassisID_MemberID')
asgVSXConnectionRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 120, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXConnectionRateValue.setStatus('current')
if mibBuilder.loadTexts: asgVSXConnectionRateValue.setDescription('Connection Rate on this Member')
asgVSXConnectionRatePerSystem = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 120, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXConnectionRatePerSystem.setStatus('current')
if mibBuilder.loadTexts: asgVSXConnectionRatePerSystem.setDescription("VS's total connection rate (across all Members)")
asgVSXVirtualMemoryInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 130))
asgVSXVirtualMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 130, 10), )
if mibBuilder.loadTexts: asgVSXVirtualMemoryTable.setStatus('current')
if mibBuilder.loadTexts: asgVSXVirtualMemoryTable.setDescription('Virtual Memory table per VS per Member')
asgVSXVirtualMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 130, 10, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgVSXVirtualMemoryIndex"))
if mibBuilder.loadTexts: asgVSXVirtualMemoryEntry.setStatus('current')
if mibBuilder.loadTexts: asgVSXVirtualMemoryEntry.setDescription('No description available')
asgVSXVirtualMemoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 130, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgVSXVirtualMemoryIndex.setStatus('current')
if mibBuilder.loadTexts: asgVSXVirtualMemoryIndex.setDescription('Record index')
asgVSXVirtualMemoryBladeid = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 130, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXVirtualMemoryBladeid.setStatus('current')
if mibBuilder.loadTexts: asgVSXVirtualMemoryBladeid.setDescription('Member ID - defined as ChassisID_MemberID')
asgVSXVirtualMemoryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 30, 130, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgVSXVirtualMemoryValue.setStatus('current')
if mibBuilder.loadTexts: asgVSXVirtualMemoryValue.setDescription('Virtual Memory usage percentage on this Member')
asgDiagnostic = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 48, 31))
asgDiagnosticTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 48, 31, 1), )
if mibBuilder.loadTexts: asgDiagnosticTable.setStatus('current')
if mibBuilder.loadTexts: asgDiagnosticTable.setDescription('No description available')
asgDiagnosticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 48, 31, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "asgDiagnosticIndex"))
if mibBuilder.loadTexts: asgDiagnosticEntry.setStatus('current')
if mibBuilder.loadTexts: asgDiagnosticEntry.setDescription('No description available')
asgDiagnosticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 31, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: asgDiagnosticIndex.setStatus('current')
if mibBuilder.loadTexts: asgDiagnosticIndex.setDescription('No description available')
asgDiagnosticTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 31, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgDiagnosticTestName.setStatus('current')
if mibBuilder.loadTexts: asgDiagnosticTestName.setDescription('test name')
asgDiagnosticLastRun = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 31, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgDiagnosticLastRun.setStatus('current')
if mibBuilder.loadTexts: asgDiagnosticLastRun.setDescription('last run')
asgDiagnosticResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 31, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgDiagnosticResult.setStatus('current')
if mibBuilder.loadTexts: asgDiagnosticResult.setDescription('test result')
asgDiagnosticComment = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 48, 31, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgDiagnosticComment.setStatus('current')
if mibBuilder.loadTexts: asgDiagnosticComment.setDescription('comment')
asgDiagSummary = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 48, 31, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asgDiagSummary.setStatus('current')
if mibBuilder.loadTexts: asgDiagSummary.setDescription('summary')
teSubscriptionStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 49, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teSubscriptionStatus.setStatus('current')
if mibBuilder.loadTexts: teSubscriptionStatus.setDescription('Subscription status\n\t\t\t\t Possible values include:\n\t           \t up-to-date, expired, about-to-expire, not-associated, unknown')
teCloudSubscriptionStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 49, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teCloudSubscriptionStatus.setStatus('current')
if mibBuilder.loadTexts: teCloudSubscriptionStatus.setDescription('Cloud subscription status\n\t\t\t\t Possible values include:\n\t           \t up-to-date, expired, about-to-expire, not-associated, unknown')
teSubscriptionExpDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 49, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teSubscriptionExpDate.setStatus('current')
if mibBuilder.loadTexts: teSubscriptionExpDate.setDescription('Threat-Emulation subscription expiration date')
teSubscriptionDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 49, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teSubscriptionDesc.setStatus('current')
if mibBuilder.loadTexts: teSubscriptionDesc.setDescription('Threat-Emulation Subscription description')
teUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 49, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: teUpdateStatus.setDescription('Anti-Malware update status\n\t\t\t\t Possible values include:\n\t           \t failed, up-to-date, new, degrade, downloading, unknown')
teUpdateDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 49, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUpdateDesc.setStatus('current')
if mibBuilder.loadTexts: teUpdateDesc.setDescription('Threat-Emulation update description')
teStatusCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 49, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teStatusCode.setStatus('current')
if mibBuilder.loadTexts: teStatusCode.setDescription('Threat-Emulation Status code')
teStatusShortDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 49, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teStatusShortDesc.setStatus('current')
if mibBuilder.loadTexts: teStatusShortDesc.setDescription('Threat-Emulation Status - Short Description')
teStatusLongDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 49, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teStatusLongDesc.setStatus('current')
if mibBuilder.loadTexts: teStatusLongDesc.setDescription('Threat-Emulation Status  - Long Description')
threatExtractionSubscription = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 50, 1))
threatExtractionSubscriptionStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 50, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threatExtractionSubscriptionStatus.setStatus('current')
if mibBuilder.loadTexts: threatExtractionSubscriptionStatus.setDescription('Threat Extraction subscription status\n\t\t\tPossible values include:\n\t           \t valid, expired, about-to-expire, not-associated, unknown')
threatExtractionSubscriptionExpDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 50, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threatExtractionSubscriptionExpDate.setStatus('current')
if mibBuilder.loadTexts: threatExtractionSubscriptionExpDate.setDescription('Threat Extraction subscription expiration date')
threatExtractionSubscriptionDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 50, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threatExtractionSubscriptionDesc.setStatus('current')
if mibBuilder.loadTexts: threatExtractionSubscriptionDesc.setDescription('Threat Extraction subscription description')
threatExtractionStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 50, 2))
threatExtractionTotalScannedAttachments = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 50, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threatExtractionTotalScannedAttachments.setStatus('current')
if mibBuilder.loadTexts: threatExtractionTotalScannedAttachments.setDescription('Total scanned attachments')
threatExtractionCleanedAttachments = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 50, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threatExtractionCleanedAttachments.setStatus('current')
if mibBuilder.loadTexts: threatExtractionCleanedAttachments.setDescription('Cleaned attachments')
threatExtractionOriginalAttachmentsAccesses = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 50, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threatExtractionOriginalAttachmentsAccesses.setStatus('current')
if mibBuilder.loadTexts: threatExtractionOriginalAttachmentsAccesses.setDescription('Original attachments accesses')
threatExtractionStatusCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 50, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threatExtractionStatusCode.setStatus('current')
if mibBuilder.loadTexts: threatExtractionStatusCode.setDescription('Threat Extraction Status code')
threatExtractionStatusShortDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 50, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threatExtractionStatusShortDesc.setStatus('current')
if mibBuilder.loadTexts: threatExtractionStatusShortDesc.setDescription('Threat Extraction Status - Short Description')
threatExtractionStatusLongDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 50, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threatExtractionStatusLongDesc.setStatus('current')
if mibBuilder.loadTexts: threatExtractionStatusLongDesc.setDescription('Threat Extraction Status - Long Description')
threatExtractionEngineVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 50, 104), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threatExtractionEngineVersion.setStatus('current')
if mibBuilder.loadTexts: threatExtractionEngineVersion.setDescription('Threat Extraction Engine Version')
zphStatusCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 60, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zphStatusCode.setStatus('current')
if mibBuilder.loadTexts: zphStatusCode.setDescription('Zero Phishing Status code')
zphStatusShortDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 60, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zphStatusShortDesc.setStatus('current')
if mibBuilder.loadTexts: zphStatusShortDesc.setDescription('Zero Phishing Status - Short Description')
zphStatusLongDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 60, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zphStatusLongDesc.setStatus('current')
if mibBuilder.loadTexts: zphStatusLongDesc.setDescription('Zero Phishing Status - Long Description')
mibBuilder.exportSymbols("CHECKPOINT-MIB", fwLSConnOverall=fwLSConnOverall, fwSXLStatFalconsInterfacesTable=fwSXLStatFalconsInterfacesTable, cpvErrOut=cpvErrOut, fwSXLAggrDropsFragmentationError=fwSXLAggrDropsFragmentationError, asgVslsVsChassis1FwksUp=asgVslsVsChassis1FwksUp, svnNetIfVsid=svnNetIfVsid, fwSS_ftp_rejected_sess=fwSS_ftp_rejected_sess, asgResourceTotalVal=asgResourceTotalVal, vsxVSStateChanged=vsxVSStateChanged, fwSS_smtp_passed_by_file_type=fwSS_smtp_passed_by_file_type, exchangeAgentVersion=exchangeAgentVersion, antiBotSubscriptionExpDate=antiBotSubscriptionExpDate, fwSS_telnet_socket_in_use_max=fwSS_telnet_socket_in_use_max, fwKmem_bytes_internal_use=fwKmem_bytes_internal_use, asgIPv6RulebaseBytesAcceptedTotal=asgIPv6RulebaseBytesAcceptedTotal, zph=zph, ufTopBlockedSiteEntry=ufTopBlockedSiteEntry, te=te, mngmt=mngmt, cpvHwAccelGeneral=cpvHwAccelGeneral, fwAcceptedBytesTotal=fwAcceptedBytesTotal, lsIndexerInfoTotalReadLogs=lsIndexerInfoTotalReadLogs, fwSS_http_proxied_sess_curr=fwSS_http_proxied_sess_curr, ufEngineDate=ufEngineDate, asgVSXThroughputInfo=asgVSXThroughputInfo, aviHTTPLastVirusTime=aviHTTPLastVirusTime, licensingID=licensingID, msSpamControlsDomainKeys=msSpamControlsDomainKeys, svnNetIfMAC=svnNetIfMAC, lsIndex=lsIndex, svnSysTime=svnSysTime, fwSXLStatFalconsNotificationsEntry=fwSXLStatFalconsNotificationsEntry, mgStatShortDescr=mgStatShortDescr, fwSXLFalconsInterface5Name=fwSXLFalconsInterface5Name, fwSS_POP3_blocked_by_archive_limit=fwSS_POP3_blocked_by_archive_limit, sysObjectID=sysObjectID, mglsGWIndex=mglsGWIndex, fwSS_POP3_outgoing_mail_count=fwSS_POP3_outgoing_mail_count, vsxStatusVsType=vsxStatusVsType, gxGTPv2DropPolicyDeleteSession=gxGTPv2DropPolicyDeleteSession, osMajorVer=osMajorVer, fwSS_http_ssl_encryp_sess_max=fwSS_http_ssl_encryp_sess_max, fwSXLHostDropsPxlDecision=fwSXLHostDropsPxlDecision, fwSS_total_blocked_by_archive_limit=fwSS_total_blocked_by_archive_limit, asgSyncExceptionsEntry=asgSyncExceptionsEntry, checkPointSmart_6000_XL=checkPointSmart_6000_XL, asgServiceTrafficEntry=asgServiceTrafficEntry, fwKmem=fwKmem, fwModuleState=fwModuleState, fwSS_telnet_pid=fwSS_telnet_pid, fwSXLStatFalconsInterfacesEntry=fwSXLStatFalconsInterfacesEntry, blade27=blade27, asgVSXConnectionRatePerSystem=asgVSXConnectionRatePerSystem, fwSS_http_blocked_by_URL_filter_category=fwSS_http_blocked_by_URL_filter_category, fwInspect_lookups=fwInspect_lookups, raUsersEntry=raUsersEntry, fwSXLStatHostThroughputTable=fwSXLStatHostThroughputTable, identityAwarenessAuthMachKerberos=identityAwarenessAuthMachKerberos, fwSXLAggrFw2PpakNotificationsFailure=fwSXLAggrFw2PpakNotificationsFailure, multiDiskUsed=multiDiskUsed, thresholdsProductsGroup=thresholdsProductsGroup, lsIndexerInfoTotalUpdatesAndLogsIndexedErrors=lsIndexerInfoTotalUpdatesAndLogsIndexedErrors, fwSS_POP3_passed_by_file_type=fwSS_POP3_passed_by_file_type, fwSICTrustState=fwSICTrustState, fwSXLHostDropsDecryptionFailed=fwSXLHostDropsDecryptionFailed, asgIPv6RulebaseBladeId=asgIPv6RulebaseBladeId, fwSS_http_sess_count=fwSS_http_sess_count, asgIPv6RulebaseRejectedTotal=asgIPv6RulebaseRejectedTotal, asmHTTP=asmHTTP, licensingBladeName=licensingBladeName, checkPointDLP_19571=checkPointDLP_19571, cpvMaxConncurAhSAsOut=cpvMaxConncurAhSAsOut, fwSS_smtp_outgoing_mail_max=fwSS_smtp_outgoing_mail_max, fwHmem_block_size=fwHmem_block_size, haClusterSyncTable=haClusterSyncTable, fwHmem64_maximum_bytes=fwHmem64_maximum_bytes, asgDiagSummary=asgDiagSummary, blade14=blade14, vsxStatusPolicyName=vsxStatusPolicyName, fwHmem64_bytes_peak=fwHmem64_bytes_peak, tunnelCommunity=tunnelCommunity, haClusterSyncAddr=haClusterSyncAddr, checkPoint6600=checkPoint6600, asmCIFSWorms=asmCIFSWorms, multiProcUserTime=multiProcUserTime, raExternalIpAddr=raExternalIpAddr, dlpNumQuarantined=dlpNumQuarantined, svnNetIfMask=svnNetIfMask, msMinorVersion=msMinorVersion, thresholdActive=thresholdActive, dlpLicenseStatus=dlpLicenseStatus, asgIPv6RulebaseBytesDroppedTotal=asgIPv6RulebaseBytesDroppedTotal, fwSS_ftp_auth_sess_max=fwSS_ftp_auth_sess_max, exchangeAgentQueueLen=exchangeAgentQueueLen, asgVSXThroughputBladeid=asgVSXThroughputBladeid, cpvIKENoResp=cpvIKENoResp, fwSS_ftp_passed_total=fwSS_ftp_passed_total, asgPacketRate=asgPacketRate, lsIndexerInfoTotalReadLogsErrors=lsIndexerInfoTotalReadLogsErrors, cpvIpsecCompressiblePkts=cpvIpsecCompressiblePkts, fwFragments=fwFragments, fwSS_rlogin_time_stamp=fwSS_rlogin_time_stamp, mgIndexerInfoReadLogsRate60min=mgIndexerInfoReadLogsRate60min, fwCookies=fwCookies, fwHmem_blocks_peak=fwHmem_blocks_peak, asgProtocolName=asgProtocolName, vsxCountersAcceptedTotal=vsxCountersAcceptedTotal, fwLSConnName=fwLSConnName, powerSupplyIndex=powerSupplyIndex, checkPointIP1280=checkPointIP1280, cpvIpsecNonCompressibleBytes=cpvIpsecNonCompressibleBytes, fwConnectionsStatConnectionRate=fwConnectionsStatConnectionRate, fwLSConnOverallDesc=fwLSConnOverallDesc, gxGTPv2DropPolicyCreateBearer=gxGTPv2DropPolicyCreateBearer, asgStatName=asgStatName, fwProductsGroup=fwProductsGroup, asgServicesTraffic=asgServicesTraffic, fwSS_http_blocked_by_AV_settings=fwSS_http_blocked_by_AV_settings, svnRouteModDest=svnRouteModDest, asgVSXThroughputEntry=asgVSXThroughputEntry, fwSXLStatus=fwSXLStatus, haIfIndex=haIfIndex, haProblemDescr=haProblemDescr, raidVolumeTable=raidVolumeTable, asgCountersEntry=asgCountersEntry, wamPolicyName=wamPolicyName, fwSXLFalconsConnectionsPerSecond=fwSXLFalconsConnectionsPerSecond, fwKmem_non_blocking_bytes_peak=fwKmem_non_blocking_bytes_peak, checkPoint21600=checkPoint21600, fwLogIn64=fwLogIn64, checkpoint=checkpoint, blade30=blade30, amw=amw, fwSXLFalconsCpu20Usage=fwSXLFalconsCpu20Usage, identityAwarenessStatusShortDesc=identityAwarenessStatusShortDesc, dlpPostfixErrors=dlpPostfixErrors, fwRejectPcktsIn=fwRejectPcktsIn, voipDOSSipRateLimitingTableInterval=voipDOSSipRateLimitingTableInterval, vsecConnectionStatus=vsecConnectionStatus, vpn=vpn, fwSXLHostInterface3State=fwSXLHostInterface3State, fwIfName64=fwIfName64, procUsage=procUsage, asgVSXConnectionRateEntry=asgVSXConnectionRateEntry, haProblemVerified=haProblemVerified, identityAwarenessRemoteAccess=identityAwarenessRemoteAccess, haStatLong=haStatLong, haClusterXLFailover=haClusterXLFailover, identityAwarenessADQueryStatusCurrStatus=identityAwarenessADQueryStatusCurrStatus, asgVslsSystemPrimaryChassis=asgVslsSystemPrimaryChassis, gxGTPv2UpdateBearerSinceInstall=gxGTPv2UpdateBearerSinceInstall, applicationControlProductsGroup=applicationControlProductsGroup, fwSXLFalconsDropsHeavyLoadNewConnection=fwSXLFalconsDropsHeavyLoadNewConnection, ufStatCode=ufStatCode, asgIPv6NatConnRate=asgIPv6NatConnRate, fwSS_rlogin_socket_in_use_curr=fwSS_rlogin_socket_in_use_curr, gxGTPv2DropMalformedModifyBearerResp=gxGTPv2DropMalformedModifyBearerResp, haProblemStatus=haProblemStatus, wamRejectReq=wamRejectReq, numOfhostPortScan=numOfhostPortScan, asgIPv6RulebaseBytesRejectedTotal=asgIPv6RulebaseBytesRejectedTotal, fwSXLHostThroughputIndex=fwSXLHostThroughputIndex, mhoRxBuff1Octet=mhoRxBuff1Octet, asgStatusCode=asgStatusCode, products=products, fwConnectionsStatConnectionsTcp=fwConnectionsStatConnectionsTcp, cpvHwAccelEspDecPkts=cpvHwAccelEspDecPkts, svnNetIfRXBytes=svnNetIfRXBytes, svnRouteModIfName=svnRouteModIfName, fwSS_rlogin_is_alive=fwSS_rlogin_is_alive, checkPoint6700=checkPoint6700, asgIPv6AccelLoadAvg=asgIPv6AccelLoadAvg, vsRoutingDest=vsRoutingDest, asgIPv6RulebaseTable=asgIPv6RulebaseTable, antiSpamSubscriptionDesc=antiSpamSubscriptionDesc, exchangeAgentDroppedMsg=exchangeAgentDroppedMsg, lsIndexerInfoTotalUpdatesAndLogsIndexed=lsIndexerInfoTotalUpdatesAndLogsIndexed, fwSS_http_scanned_total=fwSS_http_scanned_total, lsLogReceiveRate10Min=lsLogReceiveRate10Min, fwSS_smtp_blocked_by_internal_error=fwSS_smtp_blocked_by_internal_error, ufLastLicExp=ufLastLicExp, identityAwarenessADQueryStatusEvents=identityAwarenessADQueryStatusEvents, lsProdName=lsProdName, dlpHttpLastScan=dlpHttpLastScan, fwInstancesCPUTable=fwInstancesCPUTable, vsecNumberOfImportedObjects=vsecNumberOfImportedObjects, fwSXLFalconsCpu25Usage=fwSXLFalconsCpu25Usage, aviTopVirusesTable=aviTopVirusesTable, asgServiceTrafficTable=asgServiceTrafficTable, antiVirusSubscription=antiVirusSubscription, checkPointSmart_5050=checkPointSmart_5050, fwDroppedBytesTotal=fwDroppedBytesTotal, amwAVNextUpdate=amwAVNextUpdate, checkPoint15600=checkPoint15600, fwSXLHostInterface4Speed=fwSXLHostInterface4Speed, fwSS_rlogin_auth_sess_max=fwSS_rlogin_auth_sess_max, wamPolicyUpdate=wamPolicyUpdate, fwHmem64_blocks_used=fwHmem64_blocks_used, fwSS_rlogin=fwSS_rlogin, fwSXLHostInterface3Speed=fwSXLHostInterface3Speed, cpvHwAccelDriverMajorVer=cpvHwAccelDriverMajorVer, fwSS_smtp_time_stamp=fwSS_smtp_time_stamp, fwSS_POP3_blocked_by_internal_error=fwSS_POP3_blocked_by_internal_error, thresholdErrorIndex=thresholdErrorIndex, gxGTPv2DropMalformedEchoResp=gxGTPv2DropMalformedEchoResp, applicationControlSubscriptionExpDate=applicationControlSubscriptionExpDate, fwLSConn=fwLSConn, fwSXLStatisticsFalcons=fwSXLStatisticsFalcons, cpseadNumAnalyzedLogs=cpseadNumAnalyzedLogs, advancedUrlFiltering=advancedUrlFiltering, asgCountersTable=asgCountersTable, fwSS_total_passed_by_av_settings=fwSS_total_passed_by_av_settings, hsmPartitionAccessDescription=hsmPartitionAccessDescription, fwSXLHostRxMbits=fwSXLHostRxMbits, vsxStatusInterfaceIfName=vsxStatusInterfaceIfName, asgCoreRowTitle=asgCoreRowTitle, fwLSConnState=fwLSConnState, asgIPv6CountersConcurrConnNum=asgIPv6CountersConcurrConnNum, mgIndexerInfoUpdatesAndLogsIndexedRate=mgIndexerInfoUpdatesAndLogsIndexedRate, checkPoint16000=checkPoint16000, identityAwarenessDistributedEnvTable=identityAwarenessDistributedEnvTable, vsxStatusInterfaceTxBytes=vsxStatusInterfaceTxBytes, lsClientDbLock=lsClientDbLock, vsRoutingVsId=vsRoutingVsId, asgStatShort=asgStatShort, gxBadCauseDelete=gxBadCauseDelete, cpseadConnectedToLogServer=cpseadConnectedToLogServer, fwSXLHostConcurrentConnections=fwSXLHostConcurrentConnections, haServicePack=haServicePack, updatesInstalledEntry=updatesInstalledEntry, lsStatShortDescr=lsStatShortDescr, fwSS_rlogin_sess_count=fwSS_rlogin_sess_count, aviSMTPState=aviSMTPState, ufEngineVer=ufEngineVer, gxEchoSinceInstall=gxEchoSinceInstall, lsIndexerInfoReadLogsRate=lsIndexerInfoReadLogsRate, asgCountersConcurrConnNum=asgCountersConcurrConnNum, checkPointMLS400=checkPointMLS400, gxDropMalformedRespEcho=gxDropMalformedRespEcho, aviEngineVer=aviEngineVer, asgChassisMode=asgChassisMode, fwKmem_blocking_bytes_peak=fwKmem_blocking_bytes_peak, fwSXLFalconsDropsDecryptionFailed=fwSXLFalconsDropsDecryptionFailed, fwUfpInspected=fwUfpInspected, svnUTCTimeOffset=svnUTCTimeOffset, voltageSensorName=voltageSensorName, asgPeaksEntry=asgPeaksEntry, svnNetIfTXBytes=svnNetIfTXBytes, vsRoutingIndex=vsRoutingIndex, threatExtractionSubscriptionDesc=threatExtractionSubscriptionDesc, ufTopBlockedSiteCnt=ufTopBlockedSiteCnt, mhoRxBuff2Octet=mhoRxBuff2Octet, fwSXLStatHostDropsEntry=fwSXLStatHostDropsEntry, amwAVUpdate=amwAVUpdate)
mibBuilder.exportSymbols("CHECKPOINT-MIB", voipCACConcurrentCallsConfThreshold=voipCACConcurrentCallsConfThreshold, asgVSXConnectionRateTable=asgVSXConnectionRateTable, gxGTPv2DropPolicyEcho=gxGTPv2DropPolicyEcho, aviSMTPTopVirusesIndex=aviSMTPTopVirusesIndex, wamLastSession=wamLastSession, blade38=blade38, fwSXLFalconsCpu12Usage=fwSXLFalconsCpu12Usage, cpseadJobName=cpseadJobName, cpvIpsecEspEncBytes=cpvIpsecEspEncBytes, asgVSXPacketRateIndex=asgVSXPacketRateIndex, fwSS_ftp_auth_sess_curr=fwSS_ftp_auth_sess_curr, fwSXLFalconsInterface4Speed=fwSXLFalconsInterface4Speed, svnProdVerMinor=svnProdVerMinor, asgIPv6DroppedBytesTotalRate=asgIPv6DroppedBytesTotalRate, mgIndexerInfoUpdatesAndLogsIndexedRatePeak=mgIndexerInfoUpdatesAndLogsIndexedRatePeak, asmCIFSBlockedCommands=asmCIFSBlockedCommands, ctxId=ctxId, blade29=blade29, asgHwMonitoring=asgHwMonitoring, fg=fg, fwHmem_initial_allocated_pools=fwHmem_initial_allocated_pools, fwNumConn=fwNumConn, asgAccelConcurrConn=asgAccelConcurrConn, cpvHwAccelStatus=cpvHwAccelStatus, voipDOSSip=voipDOSSip, identityAwarenessDistributedEnvTableBruteForceAtt=identityAwarenessDistributedEnvTableBruteForceAtt, multiDiskSize=multiDiskSize, asgSynchronization=asgSynchronization, cpseadProcAlive=cpseadProcAlive, haClusterIpEntry=haClusterIpEntry, svnSysUniqId=svnSysUniqId, mhoSummaryEntry=mhoSummaryEntry, vsxStatusMemoryUsageEntry=vsxStatusMemoryUsageEntry, mhoAcls=mhoAcls, asgChassisParamsID=asgChassisParamsID, haProblemIndex=haProblemIndex, cpsemdStatLongDescr=cpsemdStatLongDescr, ufSignatureVer=ufSignatureVer, fwSXLFalconsCpu6Usage=fwSXLFalconsCpu6Usage, fwSS_ufp_is_alive=fwSS_ufp_is_alive, fwSS_POP3_auth_failures=fwSS_POP3_auth_failures, lsGWIP=lsGWIP, lsClientName=lsClientName, lsGWLastLoginTime=lsGWLastLoginTime, fwSXLStatFalconsNotificationsTable=fwSXLStatFalconsNotificationsTable, fwSS_ftp_passed_by_internal_error=fwSS_ftp_passed_by_internal_error, fwFrag_expired=fwFrag_expired, fwSXLHostDropsFragmentationError=fwSXLHostDropsFragmentationError, raidDiskIndex=raidDiskIndex, ufSignatureDate=ufSignatureDate, fgModuleKernelBuild=fgModuleKernelBuild, thresholdSendingStateDesc=thresholdSendingStateDesc, fwSS_ftp_blocked_by_AV_settings=fwSS_ftp_blocked_by_AV_settings, fanSpeedSensorEntry=fanSpeedSensorEntry, fwSS_telnet_sess_curr=fwSS_telnet_sess_curr, fwSXLHostDropsHeavyLoadTcpViolation=fwSXLHostDropsHeavyLoadTcpViolation, exchangeAgentsStatusEntry=exchangeAgentsStatusEntry, fwSS_http_blocked_by_file_type=fwSS_http_blocked_by_file_type, fwHmem_current_allocated_blocks=fwHmem_current_allocated_blocks, asgIPv6PeakTimeStamp=asgIPv6PeakTimeStamp, fwSS_smtp_socket_in_use_count=fwSS_smtp_socket_in_use_count, routingTable=routingTable, fwCookies_lenfwCookies_total=fwCookies_lenfwCookies_total, dlpHttpScans=dlpHttpScans, fwSXLStatistics=fwSXLStatistics, fwSXLHostInboundKbitsPerSecond=fwSXLHostInboundKbitsPerSecond, aviTopVirusesIndex=aviTopVirusesIndex, aviHTTPTopVirusesName=aviHTTPTopVirusesName, gxVnspSinceInstall=gxVnspSinceInstall, aviHTTPTopVirusesTable=aviHTTPTopVirusesTable, gxProdName=gxProdName, msSpamNumSpamEmails=msSpamNumSpamEmails, fwSXLFalconsPacketPoolUsedMemory=fwSXLFalconsPacketPoolUsedMemory, fwSS_http_passed_total=fwSS_http_passed_total, mglsGWLastLoginTime=mglsGWLastLoginTime, fwSS_http_auth_sess_count=fwSS_http_auth_sess_count, fwSS_POP3_port=fwSS_POP3_port, voip=voip, asgVSXThroughputPerInterfaceBladeid=asgVSXThroughputPerInterfaceBladeid, checkPointIP690=checkPointIP690, cpvHwAccelAhDecPkts=cpvHwAccelAhDecPkts, fwSS_ftp_blocked_by_archive_limit=fwSS_ftp_blocked_by_archive_limit, licensingAssetAccountId=licensingAssetAccountId, fwUfp=fwUfp, gxDropAnti_spoofingGpdu=gxDropAnti_spoofingGpdu, thresholdActiveEventsIndex=thresholdActiveEventsIndex, fwSS_smtp_rejected_sess=fwSS_smtp_rejected_sess, fwSXLFalconsCpu24Usage=fwSXLFalconsCpu24Usage, aviSignatureDate=aviSignatureDate, fwSXLStatAggregateDropsTable=fwSXLStatAggregateDropsTable, ips=ips, fwRejected=fwRejected, fwSS_smtp_outgoing_mail_curr=fwSS_smtp_outgoing_mail_curr, gxGpdu1MinAvgRate=gxGpdu1MinAvgRate, exchangeQueueLen=exchangeQueueLen, applicationControlSubscription=applicationControlSubscription, fwSXLFalconsInboundpacketsPerSecond=fwSXLFalconsInboundpacketsPerSecond, fwSS_smtp_mail_max=fwSS_smtp_mail_max, checkPointUTM_1570=checkPointUTM_1570, cpsemdLastEventTime=cpsemdLastEventTime, mhoSummaryLinkState=mhoSummaryLinkState, asg=asg, fwLSConnSendRate=fwLSConnSendRate, cpseadJobIsOnline=cpseadJobIsOnline, vsxStatusInterfaceVSName=vsxStatusInterfaceVSName, eventiaAnalyzer=eventiaAnalyzer, dlpFtpIncidents=dlpFtpIncidents, gxGTPv2VnspSinceInstall=gxGTPv2VnspSinceInstall, cpseadJobID=cpseadJobID, fwFullyUtilizedDrops=fwFullyUtilizedDrops, mhoSummaryRxErr=mhoSummaryRxErr, voipDOSSipRateLimitingTableNumTrustedRequests=voipDOSSipRateLimitingTableNumTrustedRequests, msMajorVersion=msMajorVersion, fwRejectPcktsOut64=fwRejectPcktsOut64, checkPoint61000=checkPoint61000, fwSS_smtp_passed_total=fwSS_smtp_passed_total, wamUagQueries=wamUagQueries, cpvErrors=cpvErrors, fwSS_smtp_auth_sess_max=fwSS_smtp_auth_sess_max, fwSS_ufp_ops_ufp_rej_sess=fwSS_ufp_ops_ufp_rej_sess, cpsemdCorrelationUnitIndex=cpsemdCorrelationUnitIndex, vsxStatusHAState=vsxStatusHAState, asgSensorEntry=asgSensorEntry, haStatCode=haStatCode, checkPointPower_19070=checkPointPower_19070, thresholdActiveEventCategory=thresholdActiveEventCategory, haProductsGroup=haProductsGroup, fwSS_POP3_is_alive=fwSS_POP3_is_alive, asgVslsVsChassis3InterfacesUp=asgVslsVsChassis3InterfacesUp, fwSXLStatHostInterfacesTable=fwSXLStatHostInterfacesTable, gxInfo=gxInfo, fwSS_POP3_mail_count=fwSS_POP3_mail_count, fwIspName=fwIspName, ipsNextUpdateDescription=ipsNextUpdateDescription, vsRoutingMask=vsRoutingMask, fwSXLFalconsDropsHeavyLoadTcpViolation=fwSXLFalconsDropsHeavyLoadTcpViolation, gxGTPv2ModifyBearerFailIndSinceInstall=gxGTPv2ModifyBearerFailIndSinceInstall, ipsUpdateStatusInfo=ipsUpdateStatusInfo, asgIPv6ConcurrConn=asgIPv6ConcurrConn, svnApplianceManufacturer=svnApplianceManufacturer, fwAccepted=fwAccepted, asgIPv6CountersInstanceLoadAverage=asgIPv6CountersInstanceLoadAverage, dlpLastSMTPScan=dlpLastSMTPScan, fwSS_POP3_mail_curr=fwSS_POP3_mail_curr, mgStatCode=mgStatCode, supportedPlatforms=supportedPlatforms, asmHostPortScan=asmHostPortScan, tunnelLinkPriority=tunnelLinkPriority, asgIPv6VsxCpu1MinAvg=asgIPv6VsxCpu1MinAvg, svnUpdatesInfoAvailableRecommended=svnUpdatesInfoAvailableRecommended, smallPMTUNumberOfAttacks=smallPMTUNumberOfAttacks, asgCountersAccelLoadAverage=asgCountersAccelLoadAverage, svnDisk=svnDisk, fwSXLFalconsInterface5Speed=fwSXLFalconsInterface5Speed, asgVSXPerSystemThroughputPerInterfaceTableEntry=asgVSXPerSystemThroughputPerInterfaceTableEntry, fwHmem_maximum_pools=fwHmem_maximum_pools, fwInstancesCPUTotal=fwInstancesCPUTotal, fwSXLFalconsInterface2Speed=fwSXLFalconsInterface2Speed, cpvIpsecNonCompressiblePkts=cpvIpsecNonCompressiblePkts, fwSXLFalconsCpu15Usage=fwSXLFalconsCpu15Usage, fwSS_smtp_accepted_sess=fwSS_smtp_accepted_sess, asgInstancesLoadMin=asgInstancesLoadMin, lsVerMajor=lsVerMajor, fwSS_POP3_blocked_cnt=fwSS_POP3_blocked_cnt, asgIPv6RulebaseEntry=asgIPv6RulebaseEntry, asgProtocolTrafficTable=asgProtocolTrafficTable, fwHmem=fwHmem, asgFactorValue=asgFactorValue, fwFrag_fragments=fwFrag_fragments, asgIPv6CountersBladeId=asgIPv6CountersBladeId, fwKmem_failed_alloc=fwKmem_failed_alloc, asgPortPriority=asgPortPriority, checkPointIP2450=checkPointIP2450, memDiskTransfers=memDiskTransfers, asgIPv6PerformanceCounters=asgIPv6PerformanceCounters, gxProdVerMajor=gxProdVerMajor, fwSXLFalconsCpu1Usage=fwSXLFalconsCpu1Usage, licensingAssetPackageDescription=licensingAssetPackageDescription, fwSXLStatisticsHost=fwSXLStatisticsHost, smallPMTUValueOfMinimalMTUsize=smallPMTUValueOfMinimalMTUsize, dtpsStatShortDescr=dtpsStatShortDescr, haVerMinor=haVerMinor, fwSS_smtp_blocked_total=fwSS_smtp_blocked_total, asmP2PKazaaConAttempts=asmP2PKazaaConAttempts, dlpStatusShortDesc=dlpStatusShortDesc, asmSynatkSynAckReset=asmSynatkSynAckReset, gxCreateInfo=gxCreateInfo, asgProductsGroup=asgProductsGroup, fwHmem64_initial_allocated_pools=fwHmem64_initial_allocated_pools, fwSXLHostDropsIndex=fwSXLHostDropsIndex, fwSXLFalconsInterfacesIndex=fwSXLFalconsInterfacesIndex, fwSS_http_ftp_sess_curr=fwSS_http_ftp_sess_curr, fwSS_POP3_passed_by_AV_settings=fwSS_POP3_passed_by_AV_settings, fwSS_ftp_auth_failures=fwSS_ftp_auth_failures, cpsemdNewEventsHandled=cpsemdNewEventsHandled, fwSXLFalconsDropsLoopPrevention=fwSXLFalconsDropsLoopPrevention, asgFactorTable=asgFactorTable, asgPortPriorityTable=asgPortPriorityTable, updatesInstalledTable=updatesInstalledTable, asgProtocolConns=asgProtocolConns, vsxCountersLoggedTotal=vsxCountersLoggedTotal, fwSXLFalconsThroughputIndex=fwSXLFalconsThroughputIndex, raidDiskProductID=raidDiskProductID, asgProtocolTrafficEntry=asgProtocolTrafficEntry, blade22=blade22, vsxCountersConnNum=vsxCountersConnNum, mgApplicationType=mgApplicationType, vsxCountersDropCount=vsxCountersDropCount, asgVSXConnInfo=asgVSXConnInfo, powerSupplyEntry=powerSupplyEntry, cpvIKECurrInitSAs=cpvIKECurrInitSAs, amwProductsGroup=amwProductsGroup, fwSS_ufp=fwSS_ufp, memFreeReal=memFreeReal, licensingIndex=licensingIndex, aviFTPTopVirusesName=aviFTPTopVirusesName, threatExtractionSubscription=threatExtractionSubscription, fwSXLStatAggregateNotificationsEntry=fwSXLStatAggregateNotificationsEntry, fwSXLAggrDropsQxlDecision=fwSXLAggrDropsQxlDecision, mhoRxBuff7Octet=mhoRxBuff7Octet, dlpSentEMails=dlpSentEMails, fwHmem64_current_allocated_bytes=fwHmem64_current_allocated_bytes, numOfIpSweep=numOfIpSweep, asgLoad=asgLoad, fwSXLHostConnectionsPerSecond=fwSXLHostConnectionsPerSecond, cpvIpsecAhDecPkts=cpvIpsecAhDecPkts, asgInstalled=asgInstalled, antiBotSubscription=antiBotSubscription, raLogonTime=raLogonTime, haVerMajor=haVerMajor, fwSS_telnet_auth_sess_max=fwSS_telnet_auth_sess_max, cpsead=cpsead, svnUpdatesInfoConnection=svnUpdatesInfoConnection, lsIndexerInfoReadLogsRatePeak=lsIndexerInfoReadLogsRatePeak, asgIPv6CountersIndex=asgIPv6CountersIndex, blade5=blade5, fwSS_total_blocked=fwSS_total_blocked, checkPoint2200=checkPoint2200, amwAVUpdateStatus=amwAVUpdateStatus, fwSS_smtp_sess_count=fwSS_smtp_sess_count, fwSXLFalconsPpak2FwNotificationsFailure=fwSXLFalconsPpak2FwNotificationsFailure, cpsemdCorrelationUnitNumEventsRcvd=cpsemdCorrelationUnitNumEventsRcvd, asgResourceUnit=asgResourceUnit, dlpQrntStatus=dlpQrntStatus, fwConnectionsStat=fwConnectionsStat, asgVSXPacketRateEntry=asgVSXPacketRateEntry, fwSXLFalconsPacketPoolFreeMemory=fwSXLFalconsPacketPoolFreeMemory, fwSXLHostInterface2Name=fwSXLHostInterface2Name, cpvIKETotalSAs=cpvIKETotalSAs, blade37=blade37, asgChassisParamsGrade=asgChassisParamsGrade, fwSS_http_passed_cnt=fwSS_http_passed_cnt, checkPointMHO140=checkPointMHO140, wamStatCode=wamStatCode)
mibBuilder.exportSymbols("CHECKPOINT-MIB", gxTunnelsEntries=gxTunnelsEntries, checkPoint5100=checkPoint5100, mhoSummaryTxBytes=mhoSummaryTxBytes, vsecGatewayIndex=vsecGatewayIndex, fwSXLHostInterface5Name=fwSXLHostInterface5Name, voipDOSSipNetworkReqCurrentVal=voipDOSSipNetworkReqCurrentVal, permanentTunnelCommunity=permanentTunnelCommunity, fwUfpHitRatio=fwUfpHitRatio, aviPOP3TopVirusesIndex=aviPOP3TopVirusesIndex, asgIPv6ConnectionRate=asgIPv6ConnectionRate, fwSS_POP3_passed_cnt=fwSS_POP3_passed_cnt, asgIPv6Throughput=asgIPv6Throughput, asgProblemPriority=asgProblemPriority, mhoRxFrames=mhoRxFrames, fwLoggingHandlingRate=fwLoggingHandlingRate, asgMediumPath=asgMediumPath, blade48=blade48, fwSS_ftp_passed_cnt=fwSS_ftp_passed_cnt, fwSXLAggrDropsTotPackets=fwSXLAggrDropsTotPackets, fwSXLFalconsInterface0State=fwSXLFalconsInterface0State, mgICAStatus=mgICAStatus, cpvIpsecUdpEspEncPkts=cpvIpsecUdpEspEncPkts, osSPmajor=osSPmajor, multiDiskEntry=multiDiskEntry, gxGTPv2BearerResourceCmdSinceInstall=gxGTPv2BearerResourceCmdSinceInstall, asgSyncExceptionsSync=asgSyncExceptionsSync, checkPoint26000=checkPoint26000, licensingBladeActive=licensingBladeActive, thresholdDestinationsTable=thresholdDestinationsTable, blade2=blade2, gxDropBadGpdu=gxDropBadGpdu, blade31=blade31, checkPointSMB_1570R=checkPointSMB_1570R, fwVerMajor=fwVerMajor, teStatusLongDesc=teStatusLongDesc, fwSXLHostDropsLoopPrevention=fwSXLHostDropsLoopPrevention, fwLocalLoggingDesc=fwLocalLoggingDesc, powerSupplyInfo=powerSupplyInfo, identityAwarenessRADIUSAccounting=identityAwarenessRADIUSAccounting, msSpamControlsRDNS=msSpamControlsRDNS, fwSXLHostDropsClearPacketOnVPN=fwSXLHostDropsClearPacketOnVPN, vsxAllVSsConnsSum=vsxAllVSsConnsSum, asgVslsVsChassis2InterfacesUp=asgVslsVsChassis2InterfacesUp, fwSXLHostInterface6Name=fwSXLHostInterface6Name, checkPointUTM_11070=checkPointUTM_11070, blade10=blade10, asmP2P=asmP2P, fwSXLFalconsOutboundpacketsPerSecond=fwSXLFalconsOutboundpacketsPerSecond, fwSXLHostInterface1Name=fwSXLHostInterface1Name, tunnelPeerObjName=tunnelPeerObjName, fgNumConnIn=fgNumConnIn, aviStatLongDescr=aviStatLongDescr, dtpsProdName=dtpsProdName, blade44=blade44, svnPerf=svnPerf, teStatusCode=teStatusCode, svnNetIfAddress=svnNetIfAddress, fwSXLFalconsSxlUsedMemory=fwSXLFalconsSxlUsedMemory, fwSS_http_passed_by_URL_allow_list=fwSS_http_passed_by_URL_allow_list, mhoRxBuff5Octet=mhoRxBuff5Octet, fwSXLHostTxMbits=fwSXLHostTxMbits, blade4=blade4, mhoRxBuff0Frames=mhoRxBuff0Frames, msProductName=msProductName, aviSMTPTopVirusesCnt=aviSMTPTopVirusesCnt, fwLocalLoggingWriteRate=fwLocalLoggingWriteRate, msSpamControls=msSpamControls, fwCookies_freefwCookies_total=fwCookies_freefwCookies_total, fwSXLFalconsInterface3State=fwSXLFalconsInterface3State, raidDiskFlags=raidDiskFlags, asgResourceIndex=asgResourceIndex, fwSS_http_ssl_encryp_sess_curr=fwSS_http_ssl_encryp_sess_curr, checkPointIP390=checkPointIP390, fwSXLAggrDropsCorruptPacket=fwSXLAggrDropsCorruptPacket, ipsStatus=ipsStatus, fwSXLHostDropsF2FNotAllowed=fwSXLHostDropsF2FNotAllowed, fwSS_http_is_alive=fwSS_http_is_alive, osBuildNum=osBuildNum, mhoRxBuff1Discard=mhoRxBuff1Discard, fgVerMajor=fgVerMajor, gxExpiredDelete=gxExpiredDelete, gxGTPv2DropMalformedModifyBearerReq=gxGTPv2DropMalformedModifyBearerReq, ufTopBlockedCatTable=ufTopBlockedCatTable, asgVSXRateBladeid=asgVSXRateBladeid, aviTopEverVirusesTable=aviTopEverVirusesTable, aviEngineName=aviEngineName, fgStrPolicyName=fgStrPolicyName, asgDiagnostic=asgDiagnostic, mgConnectedGatewaysTable=mgConnectedGatewaysTable, asgServiceConns=asgServiceConns, blade20=blade20, dtpsVerMajor=dtpsVerMajor, memActiveVirtual64=memActiveVirtual64, fwSS_http=fwSS_http, asgNetIfTable=asgNetIfTable, fwRejectPcktsIn64=fwRejectPcktsIn64, asgNetIfMACAddr=asgNetIfMACAddr, cpvHwAccelAhDecBytes=cpvHwAccelAhDecBytes, vsxStatusMainIP=vsxStatusMainIP, asgVSXConnInfoEntry=asgVSXConnInfoEntry, fwSS_total_passed_by_archive_limit=fwSS_total_passed_by_archive_limit, identityAwarenessLoggedInADQuery=identityAwarenessLoggedInADQuery, asgVSXIPver=asgVSXIPver, chkpntMIBGroups=chkpntMIBGroups, vsxStatusInterfacesEntry=vsxStatusInterfacesEntry, exchangeAgentTotalScannedMsg=exchangeAgentTotalScannedMsg, sxlProductsGroup=sxlProductsGroup, licensingBladeGUIOrder=licensingBladeGUIOrder, fwSS_telnet_sess_count=fwSS_telnet_sess_count, fwSXLAggrDropsSanityError=fwSXLAggrDropsSanityError, gxUpdateSinceInstall=gxUpdateSinceInstall, fwSXLFalconsDropsInterfaceDown=fwSXLFalconsDropsInterfaceDown, thresholdDestinationsEntry=thresholdDestinationsEntry, fwSXLFalconsCpu26Usage=fwSXLFalconsCpu26Usage, teSubscriptionDesc=teSubscriptionDesc, asgCountersAccelLoadMax=asgCountersAccelLoadMax, aviFTPTopVirusesIndex=aviFTPTopVirusesIndex, advancedUrlFilteringRADStatusCode=advancedUrlFilteringRADStatusCode, asgVSXThroughputPerInterfaceName=asgVSXThroughputPerInterfaceName, fwSS_http_ssl_encryp_sess_count=fwSS_http_ssl_encryp_sess_count, fwSXLHostInterface0Speed=fwSXLHostInterface0Speed, dlpPostfixQOldMsg=dlpPostfixQOldMsg, dtpsProductsGroup=dtpsProductsGroup, dlpStatusCode=dlpStatusCode, asmSeqval=asmSeqval, vsxStatusMemoryUsage=vsxStatusMemoryUsage, fwChains=fwChains, gxGTPv2BearerResourceFailIndSinceInstall=gxGTPv2BearerResourceFailIndSinceInstall, memFreeReal64=memFreeReal64, voipDOSSipNetworkCallInitInterval=voipDOSSipNetworkCallInitInterval, fwSXLConnsAdded=fwSXLConnsAdded, cpseadNoFreeDiskSpace=cpseadNoFreeDiskSpace, svnInfo=svnInfo, asgVSXThroughputPerSystem=asgVSXThroughputPerSystem, voipDOSSipNetworkRegConfThreshold=voipDOSSipNetworkRegConfThreshold, applicationControlUpdateDesc=applicationControlUpdateDesc, fwInstancesCPU=fwInstancesCPU, amwABUpdateDesc=amwABUpdateDesc, checkPointQLS450=checkPointQLS450, fwSS_rlogin_rejected_sess=fwSS_rlogin_rejected_sess, cpvIPsecNICEncrPackets=cpvIPsecNICEncrPackets, fwSS_telnet_socket_in_use_curr=fwSS_telnet_socket_in_use_curr, asgIPv6CountersEntry=asgIPv6CountersEntry, asgSyncExceptionsDelay=asgSyncExceptionsDelay, permanentTunnelPeerIpAddr=permanentTunnelPeerIpAddr, msStatShortDescr=msStatShortDescr, svnProductsGroup=svnProductsGroup, fwAcceptBytesOut64=fwAcceptBytesOut64, vsxCountersEntry=vsxCountersEntry, fwNetIfIndex=fwNetIfIndex, checkPointSMB_1530=checkPointSMB_1530, svnNetIfMTU=svnNetIfMTU, voipVersionStr=voipVersionStr, asmP2PeMuleConAttempts=asmP2PeMuleConAttempts, asgSyncExceptionsIndex=asgSyncExceptionsIndex, ufTopBlockedUserTable=ufTopBlockedUserTable, asgSensorName=asgSensorName, blade35=blade35, gxActContxt=gxActContxt, thresholdDestinationName=thresholdDestinationName, teUpdateStatus=teUpdateStatus, aviSignatureVer=aviSignatureVer, fwSS_POP3_sess_max=fwSS_POP3_sess_max, vsecDataCenterIndex=vsecDataCenterIndex, svnOSInfo=svnOSInfo, svnNetIfName=svnNetIfName, fwSS_total_passed_by_av=fwSS_total_passed_by_av, checkPointMHO175=checkPointMHO175, cpseadConnectedToSem=cpseadConnectedToSem, fwSXLHostInterface0Name=fwSXLHostInterface0Name, wamUagPort=wamUagPort, fwSXLHostInterface0State=fwSXLHostInterface0State, fwSS_POP3_rejected_sess=fwSS_POP3_rejected_sess, fwSS_POP3_passed_by_size_limit=fwSS_POP3_passed_by_size_limit, licensingAssetSupportExpiration=licensingAssetSupportExpiration, fwKmem_free_operations=fwKmem_free_operations, cpseadFileCurrentPosition=cpseadFileCurrentPosition, wamGlobalPerformance=wamGlobalPerformance, fwSS_smtp_passed_cnt=fwSS_smtp_passed_cnt, thresholdEventsSinceStartup=thresholdEventsSinceStartup, fwSS_http_tunneled_sess_max=fwSS_http_tunneled_sess_max, voipDOSSipNetworkCallInitConfThreshold=voipDOSSipNetworkCallInitConfThreshold, asgVSXVirtualMemoryIndex=asgVSXVirtualMemoryIndex, checkPointSMB_1550=checkPointSMB_1550, asgProtocolTotalPkts=asgProtocolTotalPkts, vsxCounters=vsxCounters, fwSS_http_tunneled_sess_count=fwSS_http_tunneled_sess_count, fwSS_POP3_total_mails=fwSS_POP3_total_mails, gxGTPv2CmdInfo=gxGTPv2CmdInfo, wamVerMajor=wamVerMajor, multiProcIndex=multiProcIndex, fwRejectPcktsOut=fwRejectPcktsOut, teProductsGroup=teProductsGroup, asgAcceptedBytesTotal=asgAcceptedBytesTotal, advancedUrlFilteringStatusLongDesc=advancedUrlFilteringStatusLongDesc, fwSXLFalconsCpu10Usage=fwSXLFalconsCpu10Usage, fwSS_ftp_blocked_by_size_limit=fwSS_ftp_blocked_by_size_limit, raOfficeMode=raOfficeMode, cpvMaxConncurEspSAsIn=cpvMaxConncurEspSAsIn, fgPendBytesIn=fgPendBytesIn, mgVerMajor=mgVerMajor, vsxCountersConnPeakNum=vsxCountersConnPeakNum, haStatus=haStatus, cpvIKETotalSAsAttempts=cpvIKETotalSAsAttempts, asgVSXThroughputTable=asgVSXThroughputTable, thresholdErrorDesc=thresholdErrorDesc, identityAwarenessUnSuccUserLoginKerberos=identityAwarenessUnSuccUserLoginKerberos, wamUagIp=wamUagIp, asgSyncExceptionsSource=asgSyncExceptionsSource, haInstalled=haInstalled, dlpFtpScans=dlpFtpScans, checkPointSmart_150=checkPointSmart_150, svnPlatformInfo=svnPlatformInfo, gxDropMalformedRespUpdate=gxDropMalformedRespUpdate, cpsemdCorrelationUnitLastRcvdTime=cpsemdCorrelationUnitLastRcvdTime, cpvSaAuthErr=cpvSaAuthErr, fwSS_ufp_ops_ufp_sess_count=fwSS_ufp_ops_ufp_sess_count, dtpsStatCode=dtpsStatCode, fwHmem64_current_allocated_blocks=fwHmem64_current_allocated_blocks, fwSXLStatFalconsThroughputTable=fwSXLStatFalconsThroughputTable, fwNetIfFlags=fwNetIfFlags, ufTopBlockedCatIndex=ufTopBlockedCatIndex, fgProductsGroup=fgProductsGroup, fwSXLFalconsCpu27Usage=fwSXLFalconsCpu27Usage, identityAwarenessADQueryStatusDomainIP=identityAwarenessADQueryStatusDomainIP, ufScannedCnt=ufScannedCnt, mhoSummaryPortIndex=mhoSummaryPortIndex, dlpLdapStatus=dlpLdapStatus, checkPointSMB_1590=checkPointSMB_1590, dlp=dlp, fwHmem_failed_free=fwHmem_failed_free, mgConnectedClientsEntry=mgConnectedClientsEntry, fwNotifications=fwNotifications, fwSXLHostPpak2FwNotificationsSuccessful=fwSXLHostPpak2FwNotificationsSuccessful, gxGTPv2DropPolicyModifyBearer=gxGTPv2DropPolicyModifyBearer, updatesInstalledName=updatesInstalledName, cpvIpsecComprBytesBefore=cpvIpsecComprBytesBefore, asgVSXPacketRateInfo=asgVSXPacketRateInfo, blade23=blade23, fwSS_smtp_blocked_by_archive_limit=fwSS_smtp_blocked_by_archive_limit, asmP2PBitTorrentCon=asmP2PBitTorrentCon, mhoRxFcsErr=mhoRxFcsErr, checkPoint21800=checkPoint21800, blade15=blade15, dlpPostfixQMsgsSz=dlpPostfixQMsgsSz, asgSyncExceptionsTable=asgSyncExceptionsTable, asgPortPriorityIndex=asgPortPriorityIndex, wamUagLastQuery=wamUagLastQuery, asgVSXThroughputPerInterfaceIndex=asgVSXThroughputPerInterfaceIndex, fwSXLHostInterfacesIndex=fwSXLHostInterfacesIndex, mgLogServerInfo=mgLogServerInfo, advancedUrlFilteringSubscriptionDesc=advancedUrlFilteringSubscriptionDesc, gx=gx, fwIspIndex=fwIspIndex)
mibBuilder.exportSymbols("CHECKPOINT-MIB", fwSXLStatHostNotificationsTable=fwSXLStatHostNotificationsTable, zphStatusLongDesc=zphStatusLongDesc, asgChassisParamsTable=asgChassisParamsTable, cpvHwAccelDriverMinorVer=cpvHwAccelDriverMinorVer, checkPointSMB_1600=checkPointSMB_1600, exchangeAgentName=exchangeAgentName, ufEngine=ufEngine, asgFactorName=asgFactorName, asgVSXCoreUtilCPUID=asgVSXCoreUtilCPUID, cpvVerMinor=cpvVerMinor, checkPointUTM_12050=checkPointUTM_12050, fwNetIfPeerName=fwNetIfPeerName, sxl=sxl, fwNetIfRemoteIp=fwNetIfRemoteIp, fwSXLAggrInboundpacketsPerSecond=fwSXLAggrInboundpacketsPerSecond, fwSS_telnet=fwSS_telnet, fwSS_http_logical_port=fwSS_http_logical_port, cpvMaxConncurAhSAsIn=cpvMaxConncurAhSAsIn, vsecNumberOfAutoUpdate=vsecNumberOfAutoUpdate, asgIPv6CountersAccelLoadMin=asgIPv6CountersAccelLoadMin, fwSS_http_ops_cvp_sess_max=fwSS_http_ops_cvp_sess_max, gxGpduInfo=gxGpduInfo, updatesInstalledType=updatesInstalledType, dlpHttpIncidents=dlpHttpIncidents, fwSS_POP3_sess_curr=fwSS_POP3_sess_curr, asgSGMEntry=asgSGMEntry, checkPoint5800=checkPoint5800, fwAcceptedPcktsRates=fwAcceptedPcktsRates, fwSS_smtp_auth_sess_count=fwSS_smtp_auth_sess_count, aviFTPLastVirusName=aviFTPLastVirusName, asgNonAccelConnectionRate=asgNonAccelConnectionRate, gxGTPv2ActDataBearers=gxGTPv2ActDataBearers, fgAvrRateOut=fgAvrRateOut, asgStatLong=asgStatLong, haProdName=haProdName, asmAttacks=asmAttacks, fwSS_POP3_logical_port=fwSS_POP3_logical_port, fwSS_ftp_max_avail_socket=fwSS_ftp_max_avail_socket, lsApplicationType=lsApplicationType, svnNetIfRXPackets=svnNetIfRXPackets, fwSXLFalconsCpu21Usage=fwSXLFalconsCpu21Usage, mhoRxBuff6Discard=mhoRxBuff6Discard, mhoRxBuffEntry=mhoRxBuffEntry, fwSXLFalconsInterface1Speed=fwSXLFalconsInterface1Speed, mgLSLogReceiveRatePeak=mgLSLogReceiveRatePeak, threatExtractionEngineVersion=threatExtractionEngineVersion, checkPointTE100X=checkPointTE100X, cpseadJobLogServer=cpseadJobLogServer, raidVolumeMaxLBA=raidVolumeMaxLBA, asgProblemStatus=asgProblemStatus, fwSS_POP3_mail_max=fwSS_POP3_mail_max, fwSXLStatAggregateNotificationsTable=fwSXLStatAggregateNotificationsTable, asgServiceTotalPkts=asgServiceTotalPkts, fwSXLFalconsInterface4Name=fwSXLFalconsInterface4Name, asgDropped=asgDropped, fwSXLFalconsInterface1State=fwSXLFalconsInterface1State, fwSXLAggrDropsPxlDecision=fwSXLAggrDropsPxlDecision, fwSXLStatFalconsGeneralTable=fwSXLStatFalconsGeneralTable, asgVSXConnInfoTable=asgVSXConnInfoTable, checkPointSmart_125=checkPointSmart_125, fwSXLFalconsDropsSanityError=fwSXLFalconsDropsSanityError, wamPluginPerformance=wamPluginPerformance, asgPathDistTable=asgPathDistTable, vsecVsecStatus=vsecVsecStatus, raidDiskState=raidDiskState, fwSXLStatAggregateThroughputTable=fwSXLStatAggregateThroughputTable, fwNetIfName=fwNetIfName, fwSXLStatHostThroughputEntry=fwSXLStatHostThroughputEntry, fwChains_free=fwChains_free, updatesRecommendedType=updatesRecommendedType, licensingTotalQuota=licensingTotalQuota, aviPOP3State=aviPOP3State, cpvHwAccelEspEncBytes=cpvHwAccelEspEncBytes, fwMinor=fwMinor, vsecEnforcingGatewaysTable=vsecEnforcingGatewaysTable, fwSS_smtp_mail_curr=fwSS_smtp_mail_curr, fwLogOut64=fwLogOut64, fwIf64Entry=fwIf64Entry, fwSS=fwSS, cpseadJobsTable=cpseadJobsTable, voipDOS=voipDOS, asgSyncExceptionsDestinationMask=asgSyncExceptionsDestinationMask, fgNumConnOut=fgNumConnOut, lsConnectedGatewaysTable=lsConnectedGatewaysTable, gxSecondaryNsapiEntries=gxSecondaryNsapiEntries, cpvIKEMaxConncurRespSAs=cpvIKEMaxConncurRespSAs, asgPeaksTable=asgPeaksTable, svnUpdatesInfoAvailablePackages=svnUpdatesInfoAvailablePackages, voipDOSSipRateLimitingTableNumDOSSipRequests=voipDOSSipRateLimitingTableNumDOSSipRequests, fwHmem64_failed_alloc=fwHmem64_failed_alloc, haClusterSyncEntry=haClusterSyncEntry, fwSS_smtp_total_mails=fwSS_smtp_total_mails, fwConnsRate=fwConnsRate, vsecController=vsecController, gxInitiateInfo=gxInitiateInfo, haStatShort=haStatShort, tempertureSensorStatus=tempertureSensorStatus, vsxStatusInterfaceRxBytes=vsxStatusInterfaceRxBytes, osMinorVer=osMinorVer, svnStatLongDescr=svnStatLongDescr, teSubscriptionExpDate=teSubscriptionExpDate, permanentTunnelLinkPriority=permanentTunnelLinkPriority, mhoStatePortLabel=mhoStatePortLabel, fwSS_ufp_time_stamp=fwSS_ufp_time_stamp, fwSXLAggrDropsAntiSpoofing=fwSXLAggrDropsAntiSpoofing, fwSS_http_transp_sess_count=fwSS_http_transp_sess_count, cpvHwAccelStatistics=cpvHwAccelStatistics, checkPointIP150=checkPointIP150, asgSensors=asgSensors, applicationControlSubscriptionDesc=applicationControlSubscriptionDesc, asgMaximumBladesPerChassis=asgMaximumBladesPerChassis, asgIPv6CountersThroughput=asgIPv6CountersThroughput, tunnelInterface=tunnelInterface, vsxStatusVSId=vsxStatusVSId, vsxStatusVRId=vsxStatusVRId, checkPointTE1000=checkPointTE1000, ufEngineName=ufEngineName, fwSXLFalconsCpu17Usage=fwSXLFalconsCpu17Usage, fwSS_http_sess_max=fwSS_http_sess_max, teStatusShortDesc=teStatusShortDesc, powerSupplyStatus=powerSupplyStatus, aviServicesHTTP=aviServicesHTTP, cpsemdCorrelationUnitEntry=cpsemdCorrelationUnitEntry, vsxS2SIpsecTunnelsTable=vsxS2SIpsecTunnelsTable, asgServiceName=asgServiceName, mgIndexerInfoTotalUpdatesAndLogsIndexedErrors=mgIndexerInfoTotalUpdatesAndLogsIndexedErrors, fwSXLFalconsCpuIndex=fwSXLFalconsCpuIndex, aviHTTPTopVirusesEntry=aviHTTPTopVirusesEntry, fwSS_POP3_pid=fwSS_POP3_pid, wamAcceptReq=wamAcceptReq, fwSS_ftp_sess_max=fwSS_ftp_sess_max, memTotalVirtual64=memTotalVirtual64, cpvIpsecAhEncPkts=cpvIpsecAhEncPkts, vsxStatusVsName=vsxStatusVsName, haStarted=haStarted, fanSpeedSensorTable=fanSpeedSensorTable, mgIndexerInfoReadLogsDelay=mgIndexerInfoReadLogsDelay, threatExtractionOriginalAttachmentsAccesses=threatExtractionOriginalAttachmentsAccesses, fwSS_POP3_socket_in_use_count=fwSS_POP3_socket_in_use_count, cpvIPsecNICTotalDownLoadedSAs=cpvIPsecNICTotalDownLoadedSAs, cpsemdDBIsFull=cpsemdDBIsFull, gxGTPv2UpdateInfo=gxGTPv2UpdateInfo, tunnelTable=tunnelTable, lsLogReceiveRatePeak=lsLogReceiveRatePeak, checkPoint28600HS=checkPoint28600HS, numOfP2PKazaaConAttempts=numOfP2PKazaaConAttempts, identityAwarenessAuthUsers=identityAwarenessAuthUsers, fwSS_ftp_blocked_by_file_type=fwSS_ftp_blocked_by_file_type, fwSS_POP3_accepted_sess=fwSS_POP3_accepted_sess, exchangeCPUUsage=exchangeCPUUsage, fwSXLHostInterface5State=fwSXLHostInterface5State, svnRouteModGateway=svnRouteModGateway, gxGTPv2DropPolicyCreateSession=gxGTPv2DropPolicyCreateSession, asgVSXMemInfoTable=asgVSXMemInfoTable, wamUagNoQueries=wamUagNoQueries, mhoRxPortLabel=mhoRxPortLabel, cpvIpsecDecomprOverhead=cpvIpsecDecomprOverhead, svnRouteModMask=svnRouteModMask, lsBuildNumber=lsBuildNumber, fwSXLAggrDropsDecryptionFailed=fwSXLAggrDropsDecryptionFailed, gxDeleteInfo=gxDeleteInfo, fwCookies_total=fwCookies_total, asgSensorCurrValue=asgSensorCurrValue, fwSXLStatFalconsCpuTable=fwSXLStatFalconsCpuTable, checkPoint13800=checkPoint13800, mhoRxBuff4Discard=mhoRxBuff4Discard, mhoRxBuff0Discard=mhoRxBuff0Discard, aviTopEverVirusesIndex=aviTopEverVirusesIndex, procUsrTime=procUsrTime, mhoTxPortLabel=mhoTxPortLabel, svnSysStartTime=svnSysStartTime, gxDropMalformedReqUpdate=gxDropMalformedReqUpdate, asgDiagnosticIndex=asgDiagnosticIndex, fwSS_ftp_sess_count=fwSS_ftp_sess_count, asgIPv6AccelPath=asgIPv6AccelPath, blade19=blade19, fwSXLFalconsDropsIndex=fwSXLFalconsDropsIndex, threatExtraction=threatExtraction, fwSXLFalconsCpu11Usage=fwSXLFalconsCpu11Usage, cpvIPsecNICCurrDownLoadedSAs=cpvIPsecNICCurrDownLoadedSAs, gxGTPv2CreateInfo=gxGTPv2CreateInfo, asgIPv6AccelLoadMin=asgIPv6AccelLoadMin, voipDOSSipRateLimitingTableConfThreshold=voipDOSSipRateLimitingTableConfThreshold, fwKmem_bytes_unused=fwKmem_bytes_unused, fwSS_ftp_sess_curr=fwSS_ftp_sess_curr, fwSS_total_blocked_by_size_limit=fwSS_total_blocked_by_size_limit, updatesRecommendedEntry=updatesRecommendedEntry, fwSS_http_blocked_by_URL_block_list=fwSS_http_blocked_by_URL_block_list, asgVSXConnectionsNumberPerSystem=asgVSXConnectionsNumberPerSystem, fwSXLAggrDropsClearPacketOnVPN=fwSXLAggrDropsClearPacketOnVPN, dlpPostfixQFreeSp=dlpPostfixQFreeSp, applicationControlNextUpdate=applicationControlNextUpdate, fwIfEntry=fwIfEntry, blade42=blade42, raidDiskNumber=raidDiskNumber, httpWorms=httpWorms, numOfCIFSBlockedPopUps=numOfCIFSBlockedPopUps, identityAwarenessSuccMachLoginADQuery=identityAwarenessSuccMachLoginADQuery, svnApplianceProductName=svnApplianceProductName, wamName=wamName, aviServicesPOP3=aviServicesPOP3, antiSpamSubscriptionStatus=antiSpamSubscriptionStatus, checkPointSmart_1410=checkPointSmart_1410, fwHmem64_failed_free=fwHmem64_failed_free, fwSS_smtp_blocked_by_AV_settings=fwSS_smtp_blocked_by_AV_settings, cpsemdCorrelationUnitIP=cpsemdCorrelationUnitIP, asgRejectedTotal=asgRejectedTotal, fwSS_smtp_proto=fwSS_smtp_proto, ufLastSigCheckTime=ufLastSigCheckTime, thresholdActiveEventSeverity=thresholdActiveEventSeverity, fwHmem_blocks_used=fwHmem_blocks_used, mgIndexerInfoReadLogsRate10min=mgIndexerInfoReadLogsRate10min, vsxStatus=vsxStatus, multiDiskFreeAvailableBytes=multiDiskFreeAvailableBytes, fwSS_smtp_sess_max=fwSS_smtp_sess_max, fwSXLStatFalconsDropsEntry=fwSXLStatFalconsDropsEntry, voltageSensorEntry=voltageSensorEntry, checkPoint21700=checkPoint21700, antiBotSubscriptionDesc=antiBotSubscriptionDesc, cpvIKEMaxConncurInitSAs=cpvIKEMaxConncurInitSAs, multiProcRunQueue=multiProcRunQueue, mhoPortsStatus=mhoPortsStatus, mglsGWState=mglsGWState, asgConnectionRate=asgConnectionRate, fwRejectedTotal=fwRejectedTotal, raCommunity=raCommunity, ufTopBlockedSiteName=ufTopBlockedSiteName, asgVer=asgVer, raidDiskSize=raidDiskSize, fwSS_POP3_blocked_total=fwSS_POP3_blocked_total, exchangeAgentsStatusTable=exchangeAgentsStatusTable, blade1=blade1, zphStatusCode=zphStatusCode, fwKmem_available_physical_mem=fwKmem_available_physical_mem, raRouteTraffic=raRouteTraffic, voltageSensorStatus=voltageSensorStatus, applicationControlStatusCode=applicationControlStatusCode, asgIPv6PeaksEntry=asgIPv6PeaksEntry, lsGWLogReceiveRate=lsGWLogReceiveRate, fwSS_ftp_ops_cvp_rej_sess=fwSS_ftp_ops_cvp_rej_sess, cpvAccelerator=cpvAccelerator, blade11=blade11, identityAwarenessDistributedEnvTableDisconnections=identityAwarenessDistributedEnvTableDisconnections, asgVslsVsChassis3InterfacesTotal=asgVslsVsChassis3InterfacesTotal, tunnelPeerType=tunnelPeerType, fwSS_ftp_logical_port=fwSS_ftp_logical_port, fwConnectionsStatConnectionsUdp=fwConnectionsStatConnectionsUdp, identityAwarenessDistributedEnvTableIndex=identityAwarenessDistributedEnvTableIndex, thresholdDestinationType=thresholdDestinationType, checkPoint4800=checkPoint4800, asgVslsSgmRatio=asgVslsSgmRatio, voipStatLongDescr=voipStatLongDescr, blade47=blade47, fwAcceptBytesOut=fwAcceptBytesOut)
mibBuilder.exportSymbols("CHECKPOINT-MIB", svnProdName=svnProdName, asgChassisParamsIndex=asgChassisParamsIndex, fwSXLFalconsPpak2FwNotificationsSuccessful=fwSXLFalconsPpak2FwNotificationsSuccessful, fwSS_smtp_passed_by_AV_settings=fwSS_smtp_passed_by_AV_settings, fwSXLFalconsCpu0Usage=fwSXLFalconsCpu0Usage, haClusterIpMemberNetMask=haClusterIpMemberNetMask, cpvHwAccelVendor=cpvHwAccelVendor, teSubscriptionStatus=teSubscriptionStatus, ipsUpdateStatus=ipsUpdateStatus, mhoStateLinkState=mhoStateLinkState, fwSS_ftp_time_stamp=fwSS_ftp_time_stamp, asgIPv6Dropped=asgIPv6Dropped, blade25=blade25, asgAccelLoadAvg=asgAccelLoadAvg, fwSS_smtp_outgoing_mail_count=fwSS_smtp_outgoing_mail_count, svnMem=svnMem, mglsGWIP=mglsGWIP, aviStatShortDescr=aviStatShortDescr, identityAwarenessADQueryStatusTable=identityAwarenessADQueryStatusTable, fwSS_telnet_rejected_sess=fwSS_telnet_rejected_sess, cpvHwAccelEspDecBytes=cpvHwAccelEspDecBytes, cpseadNumProcessedLogs=cpseadNumProcessedLogs, fwHmem64_free_operations=fwHmem64_free_operations, threatExtractionTotalScannedAttachments=threatExtractionTotalScannedAttachments, fwSS_rlogin_auth_failures=fwSS_rlogin_auth_failures, vsecEnforcingGatewayEntry=vsecEnforcingGatewayEntry, asmLayer4=asmLayer4, gxDropOutOfContxtGpdu=gxDropOutOfContxtGpdu, numOfHttpASCIIViolations=numOfHttpASCIIViolations, asmLayer3=asmLayer3, aviFTPTopVirusesTable=aviFTPTopVirusesTable, diskFreeAvail=diskFreeAvail, asgResourceTable=asgResourceTable, fwSXLFalconsDropsClusterError=fwSXLFalconsDropsClusterError, fwSXLFalconsConcurrentConnections=fwSXLFalconsConcurrentConnections, ha=ha, fwInspect=fwInspect, lsStatLongDescr=lsStatLongDescr, asgIPv6CountersInstanceLoadMin=asgIPv6CountersInstanceLoadMin, tunnelNextHop=tunnelNextHop, asmP2PSkypeCon=asmP2PSkypeCon, asgVslsStateEntry=asgVslsStateEntry, cpvSaUnknownSpiErr=cpvSaUnknownSpiErr, fwSS_http_proxied_sess_count=fwSS_http_proxied_sess_count, fwSXLStatHostNotificationsEntry=fwSXLStatHostNotificationsEntry, asgProductName=asgProductName, fwKmem_bytes_used=fwKmem_bytes_used, checkPoint5600=checkPoint5600, asgCoresUtilEntry=asgCoresUtilEntry, dtpsConnectedUsers=dtpsConnectedUsers, asgNatConn=asgNatConn, fanSpeedSensorName=fanSpeedSensorName, PYSNMP_MODULE_ID=checkpoint, fanSpeedSensorUnit=fanSpeedSensorUnit, identityAwarenessUnSuccMachLoginKerberos=identityAwarenessUnSuccMachLoginKerberos, asgPathDistEntry=asgPathDistEntry, exchangeAgentsStatusTableIndex=exchangeAgentsStatusTableIndex, cpvIKEerrors=cpvIKEerrors, fwKmem_aix_heap_size=fwKmem_aix_heap_size, fanSpeedSensorStatus=fanSpeedSensorStatus, svnNetIfTable=svnNetIfTable, aviPOP3TopVirusesName=aviPOP3TopVirusesName, voipDOSSipNetwork=voipDOSSipNetwork, chkpntBasicCompliance=chkpntBasicCompliance, updatesRecommendedTable=updatesRecommendedTable, cpvIpsecEspEncPkts=cpvIpsecEspEncPkts, voipDOSSipNetworkRegCurrentVal=voipDOSSipNetworkRegCurrentVal, fwSXLHostPpak2FwNotificationsFailure=fwSXLHostPpak2FwNotificationsFailure, fwSXLFalconsCpu31Usage=fwSXLFalconsCpu31Usage, fwKmem_blocking_bytes_used=fwKmem_blocking_bytes_used, fwSXLFalconsPacketPoolTotMemory=fwSXLFalconsPacketPoolTotMemory, gxExpiredInitiateAct=gxExpiredInitiateAct, fwSXLHostInterface5Speed=fwSXLHostInterface5Speed, cpvIKEglobals=cpvIKEglobals, asmLayer5=asmLayer5, memTotalReal=memTotalReal, identityAwarenessUnSuccUserLoginPass=identityAwarenessUnSuccUserLoginPass, fwSXLHostDropsXmlError=fwSXLHostDropsXmlError, identityAwarenessIdentityCollectorCiscoISE=identityAwarenessIdentityCollectorCiscoISE, fwSXLHostInterface4Name=fwSXLHostInterface4Name, gxGTPv2DropPolicyDeleteBearer=gxGTPv2DropPolicyDeleteBearer, asgIPv6RulebaseIndex=asgIPv6RulebaseIndex, fwSXLHostOutboundKbitsPerSecond=fwSXLHostOutboundKbitsPerSecond, asmCIFS=asmCIFS, fwSXLFalconsGeneralIndex=fwSXLFalconsGeneralIndex, asgCountersBladeId=asgCountersBladeId, cpvFwzErrors=cpvFwzErrors, multiDiskIndex=multiDiskIndex, vsxStatusInterfacesTable=vsxStatusInterfacesTable, fwSS_ftp=fwSS_ftp, gxDropInitiationReq=gxDropInitiationReq, fwFilterName=fwFilterName, amwABUpdate=amwABUpdate, advancedUrlFilteringStatusCode=advancedUrlFilteringStatusCode, aviLastSigCheckTime=aviLastSigCheckTime, mhoRxBuff6Frames=mhoRxBuff6Frames, asgInstancesLoadMax=asgInstancesLoadMax, threatExtractionProductsGroup=threatExtractionProductsGroup, cpseadJobIndex=cpseadJobIndex, asgVslsStateTable=asgVslsStateTable, fwSS_http_ftp_sess_count=fwSS_http_ftp_sess_count, mgConnectedGatewaysEntry=mgConnectedGatewaysEntry, ufTopBlockedCatCnt=ufTopBlockedCatCnt, tables=tables, fwSS_smtp_is_alive=fwSS_smtp_is_alive, haIfTable=haIfTable, asgCountersInstanceLoadMin=asgCountersInstanceLoadMin, lsLoggingInfo=lsLoggingInfo, memActiveReal=memActiveReal, asgNetIfIndex=asgNetIfIndex, numOfDisksOnRaid=numOfDisksOnRaid, checkPointQLS250=checkPointQLS250, asgVslsVsReason=asgVslsVsReason, asgVSXVirtualMemoryValue=asgVSXVirtualMemoryValue, asgVslsVsName=asgVslsVsName, cpvIpsecComprOverhead=cpvIpsecComprOverhead, smartDefense=smartDefense, fwSS_POP3_scanned_total=fwSS_POP3_scanned_total, aviPOP3TopVirusesCnt=aviPOP3TopVirusesCnt, cpvFwzEncErrs=cpvFwzEncErrs, gxGTPv2DropMalformedEchoReq=gxGTPv2DropMalformedEchoReq, mhoRxBuffPortLabel=mhoRxBuffPortLabel, fwSXLHostDropsInterfaceDown=fwSXLHostDropsInterfaceDown, fwSXLStatFalconsMemoryEntry=fwSXLStatFalconsMemoryEntry, asgVSXConnectionRateIndex=asgVSXConnectionRateIndex, cpsemdUpdatesHandled=cpsemdUpdatesHandled, fwLoggedTotal=fwLoggedTotal, fwSS_ftp_pid=fwSS_ftp_pid, fwAcceptedBytesRates=fwAcceptedBytesRates, cpsemdCorrelationUnitTable=cpsemdCorrelationUnitTable, asgIPv4PerformanceCounters=asgIPv4PerformanceCounters, fwSXLFalconsDropsFragmentationError=fwSXLFalconsDropsFragmentationError, mgFwmIsAlive=mgFwmIsAlive, asgVSXMemBladeid=asgVSXMemBladeid, fwSS_smtp_blocked_by_size_limit=fwSS_smtp_blocked_by_size_limit, fwLSConnTable=fwLSConnTable, fwSS_ftp_ops_cvp_sess_count=fwSS_ftp_ops_cvp_sess_count, fwSXLAggrFw2PpakNotificationsSuccessful=fwSXLAggrFw2PpakNotificationsSuccessful, fwSXLFalconsNotificationsIndex=fwSXLFalconsNotificationsIndex, identityAwarenessIdentityWebAPI=identityAwarenessIdentityWebAPI, updatesInstalledIndex=updatesInstalledIndex, asgVslsInfo=asgVslsInfo, identityAwarenessAuthUsersKerberos=identityAwarenessAuthUsersKerberos, identityAwarenessDataTrans=identityAwarenessDataTrans, asgPeakUnits=asgPeakUnits, fwSS_POP3_blocked_by_file_type=fwSS_POP3_blocked_by_file_type, vsxProductsGroup=vsxProductsGroup, fwHmem_blocks_unused=fwHmem_blocks_unused, voltageSensorValue=voltageSensorValue, fwSS_http_blocked_by_archive_limit=fwSS_http_blocked_by_archive_limit, fwIspTable=fwIspTable, eventiaAnalyzerProductsGroup=eventiaAnalyzerProductsGroup, gxGTPv2EchoSinceInstall=gxGTPv2EchoSinceInstall, gxGTPv2CreateSessionSinceInstall=gxGTPv2CreateSessionSinceInstall, exchangeAgentPolicyTimeStamp=exchangeAgentPolicyTimeStamp, sensorInfo=sensorInfo, identityAwarenessLoggedInCaptivePortal=identityAwarenessLoggedInCaptivePortal, fgPendBytesOut=fgPendBytesOut, mgStatLongDescr=mgStatLongDescr, tempertureSensorName=tempertureSensorName, fgIfName=fgIfName, fwSXLAggrConnectionsPerSecond=fwSXLAggrConnectionsPerSecond, diskTotal=diskTotal, asgCountersIndex=asgCountersIndex, fwSS_http_proxied_sess_max=fwSS_http_proxied_sess_max, fwSXLFalconsDropsPxlDecision=fwSXLFalconsDropsPxlDecision, raidVolumeType=raidVolumeType, asgVslsVsChassis4InterfacesTotal=asgVslsVsChassis4InterfacesTotal, fwSXLFalconsDropsClearPacketOnVPN=fwSXLFalconsDropsClearPacketOnVPN, cpvIpsecComprBytesAfter=cpvIpsecComprBytesAfter, numOfP2POtherConAttempts=numOfP2POtherConAttempts, checkPoint6800=checkPoint6800, asgVSXThroughputValue=asgVSXThroughputValue, multiProcSystemTime=multiProcSystemTime, exchangeAgentTotalMsg=exchangeAgentTotalMsg, fwLogIn=fwLogIn, ufProductsGroup=ufProductsGroup, fwSS_rlogin_socket_in_use_max=fwSS_rlogin_socket_in_use_max, asgAccelPath=asgAccelPath, asgVSXVirtualMemoryInfo=asgVSXVirtualMemoryInfo, fwSS_rlogin_proto=fwSS_rlogin_proto, asgSensorMaxValue=asgSensorMaxValue, blade12=blade12, cpvIpsecEspDecPkts=cpvIpsecEspDecPkts, dlpPostfixQLen=dlpPostfixQLen, vsxCountersBytesAcceptedTotal=vsxCountersBytesAcceptedTotal, fwSXLFalconsDropsTotPackets=fwSXLFalconsDropsTotPackets, asgCountersInstanceLoadAverage=asgCountersInstanceLoadAverage, raidDiskMaxLBA=raidDiskMaxLBA, gxGTPv2ExpiredModifyBearer=gxGTPv2ExpiredModifyBearer, httpsInspectionStatus=httpsInspectionStatus, asgIPv6CountersAccelLoadMax=asgIPv6CountersAccelLoadMax, mhoRxBuff3Discard=mhoRxBuff3Discard, fwHmem_maximum_bytes=fwHmem_maximum_bytes, svnLicensing=svnLicensing, updatesRecommendedStatus=updatesRecommendedStatus, asgVSX=asgVSX, ipsStateShortDesc=ipsStateShortDesc, checkPointUTM_12070=checkPointUTM_12070, gxGTPv2ModifyBearerCmdSinceInstall=gxGTPv2ModifyBearerCmdSinceInstall, msSpamControlsRBL=msSpamControlsRBL, gxDropBadSeqGpdu=gxDropBadSeqGpdu, fwCookies_dupfwCookies_total=fwCookies_dupfwCookies_total, tempertureSensorType=tempertureSensorType, haState=haState, asgSensorUnit=asgSensorUnit, sysInfo=sysInfo, multiProcEntry=multiProcEntry, svnUpdatesInfoStatus=svnUpdatesInfoStatus, asgIPv6CountersAccelLoadAverage=asgIPv6CountersAccelLoadAverage, tempertureSensorTable=tempertureSensorTable, voltageSensorUnit=voltageSensorUnit, asgRulebase=asgRulebase, raidDiskRevision=raidDiskRevision, asgSecureXLStatusBitmask=asgSecureXLStatusBitmask, advancedUrlFilteringRADStatus=advancedUrlFilteringRADStatus, fwLocalLoggingStat=fwLocalLoggingStat, gxCreateSinceInstall=gxCreateSinceInstall, gxGTPv2ExpiredUpdateBearer=gxGTPv2ExpiredUpdateBearer, fwSXLHostDropsOutboundConnNotFound=fwSXLHostDropsOutboundConnNotFound, aviEngineEntry=aviEngineEntry, fgIfIndex=fgIfIndex, gxGTPv2DropMalformedDeleteSessionResp=gxGTPv2DropMalformedDeleteSessionResp, asgDiagnosticTable=asgDiagnosticTable, aviHTTPState=aviHTTPState, fwSS_ftp_accepted_sess=fwSS_ftp_accepted_sess, numOfHttpP2PHeaders=numOfHttpP2PHeaders, fwSS_total_passed_by_file_type=fwSS_total_passed_by_file_type, aviTopVirusesEntry=aviTopVirusesEntry, asgIPv6NonAccelConcurrConn=asgIPv6NonAccelConcurrConn, vsxS2SIpsecTunnelsEntry=vsxS2SIpsecTunnelsEntry, haClusterIpNetMask=haClusterIpNetMask, dlpLastPolStatus=dlpLastPolStatus, fwSXLFalconsFw2PpakNotificationsSuccessful=fwSXLFalconsFw2PpakNotificationsSuccessful, svnNetIfTXPackets=svnNetIfTXPackets, identityAwarenessUnSuccUserLDAP=identityAwarenessUnSuccUserLDAP, cpvCurrAhSAsOut=cpvCurrAhSAsOut, asgProblemEntry=asgProblemEntry, fwSXLAggrOutboundpacketsPerSecond=fwSXLAggrOutboundpacketsPerSecond, raidDiskVendor=raidDiskVendor, gxBuild=gxBuild, fwSS_POP3_auth_sess_count=fwSS_POP3_auth_sess_count, asmUDP=asmUDP, asmSynatk=asmSynatk, asgAttachedBladesBitmask=asgAttachedBladesBitmask, vsecGatewayIP=vsecGatewayIP, voltageSensorTable=voltageSensorTable, fwSXLFalconsInterface6Speed=fwSXLFalconsInterface6Speed, cpvIKETotalSAsRespAttempts=cpvIKETotalSAsRespAttempts, advancedUrlFilteringUpdateStatus=advancedUrlFilteringUpdateStatus, fwSS_POP3_auth_sess_max=fwSS_POP3_auth_sess_max, gxGTPv2PathMngInfo=gxGTPv2PathMngInfo, mglsGWLogReceiveRate=mglsGWLogReceiveRate, checkPoint6400=checkPoint6400)
mibBuilder.exportSymbols("CHECKPOINT-MIB", identityAwarenessTerminalServer=identityAwarenessTerminalServer, licensingTable=licensingTable, fwSXLHostInterface7Speed=fwSXLHostInterface7Speed, asgSGMStatus=asgSGMStatus, checkPointIPS_12076=checkPointIPS_12076, cpvIpsecStatistics=cpvIpsecStatistics, cpvIpsecUdpEspDecPkts=cpvIpsecUdpEspDecPkts, blade21=blade21, aviLastLicExp=aviLastLicExp, raTunnelAuthMethod=raTunnelAuthMethod, fwSXLGroup=fwSXLGroup, checkPoint64000=checkPoint64000, checkPointTE250=checkPointTE250, tunnelSourceIpAddr=tunnelSourceIpAddr, fwSXLHostInterface4State=fwSXLHostInterface4State, mgVerMinor=mgVerMinor, asgVSXConnLimit=asgVSXConnLimit, checkPointSmart_5150=checkPointSmart_5150, fwSXLFalconsInterface4State=fwSXLFalconsInterface4State, checkPointIPS_19076=checkPointIPS_19076, mhoTxMcast=mhoTxMcast, checkPoint21400=checkPoint21400, fwPeakNumConn=fwPeakNumConn, fwSS_POP3_max_mail_on_conn=fwSS_POP3_max_mail_on_conn, gxExpiredEcho=gxExpiredEcho, asgIPv6CountersPacketRate=asgIPv6CountersPacketRate, wamUagHost=wamUagHost, checkPointSmart_1405=checkPointSmart_1405, fwTrapPrefix=fwTrapPrefix, fwHmem64=fwHmem64, fwHmem_number_of_items=fwHmem_number_of_items, fanSpeedSensorType=fanSpeedSensorType, blade34=blade34, identityAwarenessSuccUserLoginPass=identityAwarenessSuccUserLoginPass, mhoTxPortIndex=mhoTxPortIndex, asgCountersAccelLoadMin=asgCountersAccelLoadMin, asgNetIfMTU=asgNetIfMTU, asgIPv6PeakIndex=asgIPv6PeakIndex, fwSS_telnet_is_alive=fwSS_telnet_is_alive, numOfBitTorrentCon=numOfBitTorrentCon, mngmtProductsGroup=mngmtProductsGroup, fwSS_smtp_pid=fwSS_smtp_pid, raIkeOverTCP=raIkeOverTCP, identityAwarenessDistributedEnvEntry=identityAwarenessDistributedEnvEntry, threatExtractionStatusCode=threatExtractionStatusCode, fwSS_smtp_scanned_total=fwSS_smtp_scanned_total, mgLSLogReceiveRate10Min=mgLSLogReceiveRate10Min, applicationControlSubscriptionStatus=applicationControlSubscriptionStatus, mgActiveStatus=mgActiveStatus, fwSS_smtp_logical_port=fwSS_smtp_logical_port, asgSensorIdentity=asgSensorIdentity, fgIfTable=fgIfTable, identityAwarenessProductName=identityAwarenessProductName, cpvHwAccelAhEncBytes=cpvHwAccelAhEncBytes, gxDropMalformedReqEcho=gxDropMalformedReqEcho, fwUfpHits=fwUfpHits, fwSXLFalconsCpu8Usage=fwSXLFalconsCpu8Usage, asmHttpWorms=asmHttpWorms, asgIPv6PathDistEntry=asgIPv6PathDistEntry, gxProdVerMinor=gxProdVerMinor, checkPoint3600T=checkPoint3600T, aviTopViruses=aviTopViruses, applicationControlUpdate=applicationControlUpdate, mhoTxFrames=mhoTxFrames, svnVersion=svnVersion, fwSS_rlogin_port=fwSS_rlogin_port, blade33=blade33, fwFilterDate=fwFilterDate, gxDropPlicyCreate=gxDropPlicyCreate, fwSXLAggrPpak2FwNotificationsSuccessful=fwSXLAggrPpak2FwNotificationsSuccessful, msSpamControlsSPF=msSpamControlsSPF, mhoSummaryTxErr=mhoSummaryTxErr, fwSS_rlogin_sess_max=fwSS_rlogin_sess_max, asgPathDistIndex=asgPathDistIndex, wamOpenSessions=wamOpenSessions, asgPeakTimeStamp=asgPeakTimeStamp, asgSyncExceptionsIpProtocol=asgSyncExceptionsIpProtocol, asgSyncExceptionsSourceMask=asgSyncExceptionsSourceMask, asgThroughput=asgThroughput, gxGTPv2ActPDN=gxGTPv2ActPDN, cpvSaDecrErr=cpvSaDecrErr, fwSS_http_sess_curr=fwSS_http_sess_curr, mgClientHost=mgClientHost, blade46=blade46, fwSXLConnsDeleted=fwSXLConnsDeleted, fwSXLAggrInboundKbitsPerSecond=fwSXLAggrInboundKbitsPerSecond, haClusterSyncNetMask=haClusterSyncNetMask, voltageSensorType=voltageSensorType, fwSS_ftp_port=fwSS_ftp_port, fwSS_ftp_socket_in_use_max=fwSS_ftp_socket_in_use_max, svnNetIfOperState=svnNetIfOperState, voipDOSSipRateLimitingTableIndex=voipDOSSipRateLimitingTableIndex, asgServiceIndex=asgServiceIndex, asgChassisParamsMaxGrade=asgChassisParamsMaxGrade, wamStatLongDescr=wamStatLongDescr, mhoRxBuff2Discard=mhoRxBuff2Discard, fwSS_telnet_accepted_sess=fwSS_telnet_accepted_sess, vsxVSStateChangedTable=vsxVSStateChangedTable, amwStatusLongDesc=amwStatusLongDesc, msProductsGroup=msProductsGroup, advancedUrlFilteringSubscriptionStatus=advancedUrlFilteringSubscriptionStatus, asgVSXCoreUtilIndex=asgVSXCoreUtilIndex, fwSXLFalconsInterface7Name=fwSXLFalconsInterface7Name, smartDefenseProductsGroup=smartDefenseProductsGroup, fwSXLHostDropsEncryptionFailed=fwSXLHostDropsEncryptionFailed, cpsemdStatCode=cpsemdStatCode, fwSS_ftp_passed_by_AV_settings=fwSS_ftp_passed_by_AV_settings, asgVSXMemInfo=asgVSXMemInfo, checkPointUNIVERGEUnifiedWall4000=checkPointUNIVERGEUnifiedWall4000, blade13=blade13, haClusterSyncIndex=haClusterSyncIndex, arpTableInfo=arpTableInfo, multiProcUsage=multiProcUsage, fwIspRole=fwIspRole, fwSXLFalconsSlotNumber=fwSXLFalconsSlotNumber, aviTopVirusesName=aviTopVirusesName, dlpExpiredEMails=dlpExpiredEMails, teUpdateDesc=teUpdateDesc, checkPointSMB_1800=checkPointSMB_1800, vsxVsSupported=vsxVsSupported, fwSXLAggrDropsClusterError=fwSXLAggrDropsClusterError, fwHmem_free_operations=fwHmem_free_operations, vsecDataCenterType=vsecDataCenterType, fgVerMinor=fgVerMinor, tunnelState=tunnelState, fwSXLAggrThroughputIndex=fwSXLAggrThroughputIndex, cpvErrIke=cpvErrIke, fwSXLStatHostGeneralEntry=fwSXLStatHostGeneralEntry, fwSS_rlogin_pid=fwSS_rlogin_pid, asgVSXPerSystemThroughputPerInterfaceName=asgVSXPerSystemThroughputPerInterfaceName, raidVolumeIndex=raidVolumeIndex, thresholdActiveEventActivationTime=thresholdActiveEventActivationTime, fwSXLFalconsDropsCorruptPacket=fwSXLFalconsDropsCorruptPacket, mgMgmtHAJournals=mgMgmtHAJournals, voipDOSSipNetworkReqConfThreshold=voipDOSSipNetworkReqConfThreshold, fwSS_telnet_auth_sess_count=fwSS_telnet_auth_sess_count, aviSMTPTopVirusesEntry=aviSMTPTopVirusesEntry, licensingEntry=licensingEntry, vsxCountersDropTable=vsxCountersDropTable, sequenceVerifierInvalidSequence=sequenceVerifierInvalidSequence, asmCIFSPasswordLengthViolations=asmCIFSPasswordLengthViolations, advancedUrlFilteringSubscription=advancedUrlFilteringSubscription, asgProblemVerified=asgProblemVerified, ufIsMonitor=ufIsMonitor, msEngineDate=msEngineDate, chkpntMIBNotifGroups=chkpntMIBNotifGroups, fwSXLAggrDropsHeavyLoadNewConnection=fwSXLAggrDropsHeavyLoadNewConnection, fwSXLFalconsDropsQxlDecision=fwSXLFalconsDropsQxlDecision, vsxStatusInterfaceAdminState=vsxStatusInterfaceAdminState, asgPeakValue=asgPeakValue, svnProc=svnProc, asgSGMIndex=asgSGMIndex, cpvFwzEncPkts=cpvFwzEncPkts, identityAwarenessADQueryStatusTableIndex=identityAwarenessADQueryStatusTableIndex, multiDiskName=multiDiskName, blade7=blade7, aviHTTPTopVirusesIndex=aviHTTPTopVirusesIndex, lsConnectedGatewaysEntry=lsConnectedGatewaysEntry, gxDropMalformedReqCreate=gxDropMalformedReqCreate, asgSGMID=asgSGMID, fwSXLFalconsCpu3Usage=fwSXLFalconsCpu3Usage, routingIndex=routingIndex, vsxCountersPackets=vsxCountersPackets, fwDropPcktsIn64=fwDropPcktsIn64, fwSXLHostDropsCorruptPacket=fwSXLHostDropsCorruptPacket, asgAccelLoadMax=asgAccelLoadMax, fwHmem64_block_size=fwHmem64_block_size, aviProductsGroup=aviProductsGroup, fwKmem_failed_free=fwKmem_failed_free, fwSXLHostOutboundpacketsPerSecond=fwSXLHostOutboundpacketsPerSecond, msStatLongDescr=msStatLongDescr, fwSXLFalconsCpu30Usage=fwSXLFalconsCpu30Usage, asgInstalledBladesBitmask=asgInstalledBladesBitmask, asgSensorStatus=asgSensorStatus, vsxCountersConnTableLimit=vsxCountersConnTableLimit, lsClientHost=lsClientHost, vdType=vdType, fwSS_http_socket_in_use_curr=fwSS_http_socket_in_use_curr, blade18=blade18, mhoSummaryPortLabel=mhoSummaryPortLabel, fwHmem_initial_allocated_bytes=fwHmem_initial_allocated_bytes, fwEvent=fwEvent, checkPointIP560=checkPointIP560, aviPOP3TopVirusesTable=aviPOP3TopVirusesTable, mhoRxBuff5Discard=mhoRxBuff5Discard, cpvIpsecDecomprBytesBefore=cpvIpsecDecomprBytesBefore, fwSXLAggrNotificationsIndex=fwSXLAggrNotificationsIndex, cpvIPsecNICsNum=cpvIPsecNICsNum, thresholdName=thresholdName, memActiveReal64=memActiveReal64, cpvIKECurrRespSAs=cpvIKECurrRespSAs, voipProductsGroup=voipProductsGroup, asgActiveBladesBitmask=asgActiveBladesBitmask, mhoSummaryAdminState=mhoSummaryAdminState, asgIPv6CountersConnRate=asgIPv6CountersConnRate, asgVSXConnInfoIndex=asgVSXConnInfoIndex, fwSXLAggrDropsOutboundConnNotFound=fwSXLAggrDropsOutboundConnNotFound, svnUpdatesInfoBuild=svnUpdatesInfoBuild, asgResourceTitle=asgResourceTitle, asgIPv6PeakCriteria=asgIPv6PeakCriteria, fanSpeedSensorIndex=fanSpeedSensorIndex, haClusterSyncName=haClusterSyncName, asgChassisParamsUniqueIP=asgChassisParamsUniqueIP, advancedUrlFilteringVersion=advancedUrlFilteringVersion, routingMask=routingMask, identityAwarenessLoggedInAgent=identityAwarenessLoggedInAgent, fwSXLFalconsDropsDropTemplate=fwSXLFalconsDropsDropTemplate, asgVpnConn=asgVpnConn, fwSXLFalconsCpu7Usage=fwSXLFalconsCpu7Usage, fwSXLFalconsDropsXmlError=fwSXLFalconsDropsXmlError, svnRouteModIfIndex=svnRouteModIfIndex, cpvFwzEncapsEncPkts=cpvFwzEncapsEncPkts, gxGpduExpiredTunnel=gxGpduExpiredTunnel, tunnelPeerIpAddr=tunnelPeerIpAddr, advancedUrlFilteringNextUpdate=advancedUrlFilteringNextUpdate, asgSensorThreshold=asgSensorThreshold, aviEngineIndex=aviEngineIndex, dlpUserCheckClnts=dlpUserCheckClnts, mhoRxBuff0Octet=mhoRxBuff0Octet, asgIPv6VpnConn=asgIPv6VpnConn, ipsStateLongDesc=ipsStateLongDesc, identityAwarenessDistributedEnvTableGwName=identityAwarenessDistributedEnvTableGwName, thresholdErrorsTable=thresholdErrorsTable, checkPointUTM_13070=checkPointUTM_13070, asgIPv6Rulebase=asgIPv6Rulebase, asgSyncExceptionsDestination=asgSyncExceptionsDestination, vdName=vdName, thresholdActiveEventsTable=thresholdActiveEventsTable, fwSS_POP3_max_avail_socket=fwSS_POP3_max_avail_socket, haIdentifier=haIdentifier, asgVSXCoreUtilTable=asgVSXCoreUtilTable, fwSXLHostDropsHeavyLoadNewConnection=fwSXLHostDropsHeavyLoadNewConnection, cpvIPsecNIC=cpvIPsecNIC, vsxCountersBytesRejectedTotal=vsxCountersBytesRejectedTotal, fwSXLAggrDropsIndex=fwSXLAggrDropsIndex, checkPoint4600=checkPoint4600, asgProtocolIndex=asgProtocolIndex, thresholds=thresholds, cpvIpsecDecomprBytesAfter=cpvIpsecDecomprBytesAfter, asgVSXPeakConns=asgVSXPeakConns, vsxS2SIpsecTunnels=vsxS2SIpsecTunnels, asgVslsVsChassis4InterfacesUp=asgVslsVsChassis4InterfacesUp, fwSS_http_passed_by_file_type=fwSS_http_passed_by_file_type, arpTableSize=arpTableSize, fwSXLFalconsInterface1Name=fwSXLFalconsInterface1Name, gxGTPv2DropMalformedCreateBearerResp=gxGTPv2DropMalformedCreateBearerResp, fwAcceptPcktsOut=fwAcceptPcktsOut, aviHTTPTopVirusesCnt=aviHTTPTopVirusesCnt, blade17=blade17, cpsemdDBDiskSpace=cpsemdDBDiskSpace, blade26=blade26, raVisitorMode=raVisitorMode, svnNetIfTXDrops=svnNetIfTXDrops, asmP2PGnutellaConAttempts=asmP2PGnutellaConAttempts)
mibBuilder.exportSymbols("CHECKPOINT-MIB", asgSensorIndex=asgSensorIndex, cpvTotalEspSAsIn=cpvTotalEspSAsIn, gxGTPv2DeleteInfo=gxGTPv2DeleteInfo, permanentTunnelSourceIpAddr=permanentTunnelSourceIpAddr, asgResourceCurrValue=asgResourceCurrValue, asgVSXVirtualMemoryTable=asgVSXVirtualMemoryTable, mhoRxUcast=mhoRxUcast, checkPointSmart_13150=checkPointSmart_13150, voipDOSSipNetworkCallInitICurrentVal=voipDOSSipNetworkCallInitICurrentVal, asgSyncExceptionsID=asgSyncExceptionsID, exchangeAgentStatus=exchangeAgentStatus, fwLogOut=fwLogOut, asgVSXMemInfoIndex=asgVSXMemInfoIndex, asgVSXPerSystemThroughputIndex=asgVSXPerSystemThroughputIndex, mhoSummaryTxFrames=mhoSummaryTxFrames, fwSS_POP3_outgoing_mail_max=fwSS_POP3_outgoing_mail_max, checkPointUNIVERGEUnifiedWall1000=checkPointUNIVERGEUnifiedWall1000, svnApplianceInfo=svnApplianceInfo, licensingUsedQuota=licensingUsedQuota, fwSXLAggrDropsXmlError=fwSXLAggrDropsXmlError, fwSXLAggrOutboundKbitsPerSecond=fwSXLAggrOutboundKbitsPerSecond, vsxStatusInterfaceOperState=vsxStatusInterfaceOperState, tunnelEntry=tunnelEntry, blade39=blade39, gxGTPv2DropMalformedUpdateBearerReq=gxGTPv2DropMalformedUpdateBearerReq, checkPoint6900=checkPoint6900, fwSS_rlogin_max_avail_socket=fwSS_rlogin_max_avail_socket, aviLastSigLocation=aviLastSigLocation, mgIndexerInfoUpdatesAndLogsIndexedRate60min=mgIndexerInfoUpdatesAndLogsIndexedRate60min, fwChains_alloc=fwChains_alloc, fwHmem_current_allocated_pools=fwHmem_current_allocated_pools, cpvIKECurrSAs=cpvIKECurrSAs, gxPathMngInfo=gxPathMngInfo, voipProductName=voipProductName, mhoRxBuff5Frames=mhoRxBuff5Frames, vsecDataCenterName=vsecDataCenterName, exchangeAgentsStatus=exchangeAgentsStatus, fwSS_POP3_time_stamp=fwSS_POP3_time_stamp, fwSS_http_ops_cvp_sess_curr=fwSS_http_ops_cvp_sess_curr, fwSXLFalconsInterface6State=fwSXLFalconsInterface6State, blade9=blade9, fwSS_total_blocked_by_av_settings=fwSS_total_blocked_by_av_settings, asgVSXVirtualMemoryEntry=asgVSXVirtualMemoryEntry, fwAcceptBytesIn=fwAcceptBytesIn, vsecDataCenterEntry=vsecDataCenterEntry, fwSXLAggrConcurrentConnections=fwSXLAggrConcurrentConnections, asgFirewallPath=asgFirewallPath, svnConnectivity=svnConnectivity, asgIPv6NatConn=asgIPv6NatConn, fwDropPcktsOut64=fwDropPcktsOut64, diskPercent=diskPercent, checkPointUTM_1270=checkPointUTM_1270, asgProtocolTraffic=asgProtocolTraffic, asmSmallPmtu=asmSmallPmtu, cpvIKETotalRespSAs=cpvIKETotalRespSAs, hsmEnabledDescription=hsmEnabledDescription, asgVslsVsHealth=asgVslsVsHealth, asgVSXConnectionRateValue=asgVSXConnectionRateValue, svnVsxInfo=svnVsxInfo, checkPointUTM_1450=checkPointUTM_1450, lsLogReceiveRate1Hour=lsLogReceiveRate1Hour, fwSS_smtp_auth_sess_curr=fwSS_smtp_auth_sess_curr, permanentTunnelInterface=permanentTunnelInterface, mhoRxBuff3Octet=mhoRxBuff3Octet, threatExtractionStatusShortDesc=threatExtractionStatusShortDesc, asgVslsVsid=asgVslsVsid, checkPointSmart_525=checkPointSmart_525, fwSXLAggrDropsInterfaceDown=fwSXLAggrDropsInterfaceDown, fwSS_total_passed_by_interal_error=fwSS_total_passed_by_interal_error, asmSynatkSynAckTimeout=asmSynatkSynAckTimeout, cpseadStatShortDescr=cpseadStatShortDescr, svnProdVerMajor=svnProdVerMajor, checkPoint4400=checkPoint4400, fwSS_http_rejected_sess=fwSS_http_rejected_sess, mhoRxEntry=mhoRxEntry, ufBlockedCnt=ufBlockedCnt, fwSXLFalconsDropsEncryptionFailed=fwSXLFalconsDropsEncryptionFailed, licensingAssetInfo=licensingAssetInfo, numOfCIFSNullSessions=numOfCIFSNullSessions, fgRateLimitOut=fgRateLimitOut, svnNetIfTXErrors=svnNetIfTXErrors, numOfGnutellaConAttempts=numOfGnutellaConAttempts, svnBuild=svnBuild, asgCountersInstanceLoadMax=asgCountersInstanceLoadMax, fwSS_http_transp_sess_max=fwSS_http_transp_sess_max, voipDOSSipRateLimitingTableNumRequestsfromServers=voipDOSSipRateLimitingTableNumRequestsfromServers, cpvFwzEncapsDecErrs=cpvFwzEncapsDecErrs, cpvIPsec=cpvIPsec, checkPointOpenServer=checkPointOpenServer, multiDiskFreeAvailablePercent=multiDiskFreeAvailablePercent, checkPointSmart_1210=checkPointSmart_1210, gxGTPv2ModifyBearerSinceInstall=gxGTPv2ModifyBearerSinceInstall, fwSS_ftp_ops_cvp_sess_max=fwSS_ftp_ops_cvp_sess_max, aviEngines=aviEngines, vsxCountersTable=vsxCountersTable, svnUpdatesInfo=svnUpdatesInfo, ipsState=ipsState, asgAccelLoadMin=asgAccelLoadMin, fwSS_av_total=fwSS_av_total, voltageSensorIndex=voltageSensorIndex, vsecGatewayUpdateSucceeded=vsecGatewayUpdateSucceeded, thresholdEnabled=thresholdEnabled, mhoStatePortIndex=mhoStatePortIndex, fwSXLFalconsInterface7Speed=fwSXLFalconsInterface7Speed, aviServices=aviServices, chkpntMIBCompliances=chkpntMIBCompliances, routingDest=routingDest, identityAwarenessADQueryStatusDomainName=identityAwarenessADQueryStatusDomainName, fwSXLFalconsRxMbits=fwSXLFalconsRxMbits, cpvIpsecEspDecBytes=cpvIpsecEspDecBytes, checkPoint15400=checkPoint15400, asgSGMPolicyTime=asgSGMPolicyTime, checkPointSmart_1205=checkPointSmart_1205, mhoACLsAvailable=mhoACLsAvailable, zphProductsGroup=zphProductsGroup, fwHmem64_current_allocated_pools=fwHmem64_current_allocated_pools, svnNetIfDescription=svnNetIfDescription, asgVSXCoreUtilBladeid=asgVSXCoreUtilBladeid, fwSXLStatAggregateDropsEntry=fwSXLStatAggregateDropsEntry, lsConnectedClientsTable=lsConnectedClientsTable, checkPointSmart_1225=checkPointSmart_1225, mhoRxBuff7Frames=mhoRxBuff7Frames, numOfCIFSPasswordLengthViolations=numOfCIFSPasswordLengthViolations, voipCACConcurrentCalls=voipCACConcurrentCalls, blade41=blade41, asgIPv6AcceptedBytesTotalRate=asgIPv6AcceptedBytesTotalRate, vsxCountersDroppedTotal=vsxCountersDroppedTotal, mhoTxTable=mhoTxTable, fwNetIfIPAddr=fwNetIfIPAddr, fwSS_smtp_max_mail_on_conn=fwSS_smtp_max_mail_on_conn, thresholdActiveEventName=thresholdActiveEventName, vsxStatusMemoryUsageVSMaxMem=vsxStatusMemoryUsageVSMaxMem, asgVslsVsChassis2FwksTotal=asgVslsVsChassis2FwksTotal, mhoRxTable=mhoRxTable, mhoStateAdminState=mhoStateAdminState, fwSXLHostState=fwSXLHostState, asgVSXCoreUtilInfo=asgVSXCoreUtilInfo, fwSXLAggrPpak2FwNotificationsFailure=fwSXLAggrPpak2FwNotificationsFailure, fwSS_http_time_stamp=fwSS_http_time_stamp, aviPOP3TopVirusesEntry=aviPOP3TopVirusesEntry, asgCoresUtilTable=asgCoresUtilTable, asgChassisInfo=asgChassisInfo, thresholdActiveEventState=thresholdActiveEventState, fwSXLAggrDropsEncryptionFailed=fwSXLAggrDropsEncryptionFailed, fwSXLFalconsInterface2State=fwSXLFalconsInterface2State, httpsInspectionProductsGroup=httpsInspectionProductsGroup, advancedUrlFilteringRADStatusDesc=advancedUrlFilteringRADStatusDesc, asgNetIfIPv6Addr=asgNetIfIPv6Addr, msSpamControlsSpamEngine=msSpamControlsSpamEngine, fwSS_http_auth_sess_max=fwSS_http_auth_sess_max, fwSXLHostGeneralIndex=fwSXLHostGeneralIndex, vsxStatusInterfaceRxErrors=vsxStatusInterfaceRxErrors, blade3=blade3, fwSS_http_tunneled_sess_curr=fwSS_http_tunneled_sess_curr, ufTopBlockedSiteTable=ufTopBlockedSiteTable, vsxVSStateChangedChangeOccurred=vsxVSStateChangedChangeOccurred, gxDropPolicyEcho=gxDropPolicyEcho, osVersionLevel=osVersionLevel, fwSS_ftp_ops_cvp_sess_curr=fwSS_ftp_ops_cvp_sess_curr, fwLSConnEntry=fwLSConnEntry, ufTopBlockedUserCnt=ufTopBlockedUserCnt, chkpntMIBConformance=chkpntMIBConformance, blade40=blade40, svnUpdatesInfoAvailableHotfixes=svnUpdatesInfoAvailableHotfixes, fwSS_POP3_socket_in_use_curr=fwSS_POP3_socket_in_use_curr, aviFTPState=aviFTPState, aviServicesFTP=aviServicesFTP, permanentTunnelEntry=permanentTunnelEntry, fwInspect_packets=fwInspect_packets, cpseadJobState=cpseadJobState, ufTopBlockedUserEntry=ufTopBlockedUserEntry, permanentTunnelTable=permanentTunnelTable, asgIPv6RulebaseAcceptedTotal=asgIPv6RulebaseAcceptedTotal, asgIPv6StatName=asgIPv6StatName, permanentTunnelState=permanentTunnelState, identityAwarenessAuthUsersPass=identityAwarenessAuthUsersPass, fwSS_rlogin_accepted_sess=fwSS_rlogin_accepted_sess, cpvErrPolicy=cpvErrPolicy, fwSXLFalconsMemoryIndex=fwSXLFalconsMemoryIndex, gxDeleteSinceInstall=gxDeleteSinceInstall, amwStatusCode=amwStatusCode, asgNetIfName=asgNetIfName, fwSS_http_passed_by_archive_limit=fwSS_http_passed_by_archive_limit, exchangeAgentAvgTimePerScannedMsg=exchangeAgentAvgTimePerScannedMsg, asgProblemDescr=asgProblemDescr, asgVSXThroughputPerInterfaceValue=asgVSXThroughputPerInterfaceValue, thresholdStateDesc=thresholdStateDesc, mgIndexerInfoTotalReadLogsErrors=mgIndexerInfoTotalReadLogsErrors, gxGTPv2DropMalformedDeleteBearerReq=gxGTPv2DropMalformedDeleteBearerReq, svnNetIfState=svnNetIfState, fwCookies_allocfwCookies_total=fwCookies_allocfwCookies_total, mhoTxUcast=mhoTxUcast, fwNetIfEntry=fwNetIfEntry, checkPointMLS200=checkPointMLS200, lsGWIndex=lsGWIndex, vsxStatusMemoryUsageVSName=vsxStatusMemoryUsageVSName, checkPointTE1000X=checkPointTE1000X, mhoRxBuff6Octet=mhoRxBuff6Octet, msSpamNumHandledSpamEmails=msSpamNumHandledSpamEmails, svnNetIfTableEntry=svnNetIfTableEntry, checkPoint3800=checkPoint3800, asgDiagnosticEntry=asgDiagnosticEntry, asgIPv6PeaksTable=asgIPv6PeaksTable, fwSXLFalconsInboundKbitsPerSecond=fwSXLFalconsInboundKbitsPerSecond, fwSXLFalconsInterface3Name=fwSXLFalconsInterface3Name, vsecNumberOfDisconnectedDataCenters=vsecNumberOfDisconnectedDataCenters, fwSS_telnet_auth_failures=fwSS_telnet_auth_failures, asgProblemIndex=asgProblemIndex, cpvVerMajor=cpvVerMajor, asgNetIfDuplex=asgNetIfDuplex, fwHmem_bytes_unused=fwHmem_bytes_unused, diskQueue=diskQueue, fwConnTableLimit=fwConnTableLimit, wamStatShortDescr=wamStatShortDescr, licensingState=licensingState, asgProtocolTotalBytes=asgProtocolTotalBytes, fwSS_ftp_socket_in_use_curr=fwSS_ftp_socket_in_use_curr, antiVirusSubscriptionStatus=antiVirusSubscriptionStatus, fwSS_total_passed=fwSS_total_passed, asgPeakIndex=asgPeakIndex, raUseUDPEncap=raUseUDPEncap, cpvTotalEspSAsOut=cpvTotalEspSAsOut, fwSXLFalconsSerialNumber=fwSXLFalconsSerialNumber, fwSXLHostDropsAntiSpoofing=fwSXLHostDropsAntiSpoofing, fwSXLFalconsCpu18Usage=fwSXLFalconsCpu18Usage, cpvEncPackets=cpvEncPackets, asgVSXThroughputPerInterfaceInfo=asgVSXThroughputPerInterfaceInfo, aviServicesSMTP=aviServicesSMTP, checkPointSmart_6000_L=checkPointSmart_6000_L, fwSXLHostDropsClusterError=fwSXLHostDropsClusterError, cpvTotalAhSAsOut=cpvTotalAhSAsOut, mgIndexerInfoTotalUpdatesAndLogsIndexed=mgIndexerInfoTotalUpdatesAndLogsIndexed, vsxVSStateChangedEntry=vsxVSStateChangedEntry, multiProcInterrupts=multiProcInterrupts, licensingAssetContainerCK=licensingAssetContainerCK, checkPointUNIVERGEUnifiedWall100=checkPointUNIVERGEUnifiedWall100, aviTopEverVirusesEntry=aviTopEverVirusesEntry, gxGTPv2DropMalformedCreateSessionResp=gxGTPv2DropMalformedCreateSessionResp, fwHmem64_initial_allocated_bytes=fwHmem64_initial_allocated_bytes, haProblemEntry=haProblemEntry, mhoSummaryTable=mhoSummaryTable, asgSyncToActive=asgSyncToActive, mhoStateTable=mhoStateTable, gxGTPv2DeleteBearerFailIndSinceInstall=gxGTPv2DeleteBearerFailIndSinceInstall, threatExtractionSubscriptionExpDate=threatExtractionSubscriptionExpDate, asgIPv6Load=asgIPv6Load, fanSpeedSensorValue=fanSpeedSensorValue, fwIspEntry=fwIspEntry, svnApplianceSerialNumber=svnApplianceSerialNumber, checkPointSmart_15=checkPointSmart_15, asgServiceTotalBytes=asgServiceTotalBytes, hsmStatus=hsmStatus, aviSMTPLastVirusName=aviSMTPLastVirusName, asgVSXOverallMem=asgVSXOverallMem)
mibBuilder.exportSymbols("CHECKPOINT-MIB", gxGtpPathEntries=gxGtpPathEntries, gxGTPv2DeleteBearerSinceInstall=gxGTPv2DeleteBearerSinceInstall, asgIPv6VpnThroughput=asgIPv6VpnThroughput, fwNetIfSlaves=fwNetIfSlaves, asgResourceLocation=asgResourceLocation, checkPoint4200=checkPoint4200, dlpVersionString=dlpVersionString, asgSensorLocation=asgSensorLocation, memTotalVirtual=memTotalVirtual, asmIPSweep=asmIPSweep, vsx=vsx, raInternalIpAddr=raInternalIpAddr, permanentTunnelProbState=permanentTunnelProbState, dlpDiscardEMails=dlpDiscardEMails, svnServicePack=svnServicePack, asgChassisHAMode=asgChassisHAMode, voipCAC=voipCAC, cpvFwzEncapsDecPkts=cpvFwzEncapsDecPkts, fwSXLFalconsDropsOutboundConnNotFound=fwSXLFalconsDropsOutboundConnNotFound, checkPoint5900=checkPoint5900, fwSXLStatFalconsGeneralEntry=fwSXLStatFalconsGeneralEntry, fwSS_rlogin_logical_port=fwSS_rlogin_logical_port, svnNetIfIndex=svnNetIfIndex, fwSXLAggrDropsLoopPrevention=fwSXLAggrDropsLoopPrevention, vsecTotalNumberOfGwWithDataCenterObjects=vsecTotalNumberOfGwWithDataCenterObjects, checkPointSmart_13050=checkPointSmart_13050, fwSS_POP3=fwSS_POP3, numOfP2PSkypeCon=numOfP2PSkypeCon, mgIndexerInfoReadLogsRatePeak=mgIndexerInfoReadLogsRatePeak, blade43=blade43, fw=fw, fwSS_ftp_blocked_total=fwSS_ftp_blocked_total, gxGTPv2DeleteBearerCmdSinceInstall=gxGTPv2DeleteBearerCmdSinceInstall, gxGTPv2ExpiredCreateSession=gxGTPv2ExpiredCreateSession, numOfCIFSworms=numOfCIFSworms, fwSXLHostInterface2Speed=fwSXLHostInterface2Speed, raidDiskSyncState=raidDiskSyncState, mhoSummaryRxFcsErr=mhoSummaryRxFcsErr, hsmPartitionAccess=hsmPartitionAccess, tempertureSensorIndex=tempertureSensorIndex, routingEntry=routingEntry, gxGTPv2ExpiredDeleteSession=gxGTPv2ExpiredDeleteSession, fwNetIfTable=fwNetIfTable, fwInspect_operations=fwInspect_operations, asgIPv6InstancesLoadAvg=asgIPv6InstancesLoadAvg, checkPoint3100=checkPoint3100, fgIfEntry=fgIfEntry, ufStatShortDescr=ufStatShortDescr, checkPoint13500=checkPoint13500, asgResourceEntry=asgResourceEntry, asgDiagnosticTestName=asgDiagnosticTestName, fwSXLFalconsCpu14Usage=fwSXLFalconsCpu14Usage, ufTopBlockedUserName=ufTopBlockedUserName, vsxStatusInterfaceVSID=vsxStatusInterfaceVSID, asgVSXMemInfoEntry=asgVSXMemInfoEntry, applicationControlStatusShortDesc=applicationControlStatusShortDesc, msServicePack=msServicePack, mhoProductsGroup=mhoProductsGroup, asgVpnThroughput=asgVpnThroughput, asgChassisParamsStatus=asgChassisParamsStatus, checkPoint12600=checkPoint12600, checkPointQLS800=checkPointQLS800, cpsemdNumEvents=cpsemdNumEvents, dlpProductsGroup=dlpProductsGroup, fwSS_http_ops_cvp_sess_count=fwSS_http_ops_cvp_sess_count, fwHmem64_bytes_internal_use=fwHmem64_bytes_internal_use, ipsDBVersion=ipsDBVersion, fwHmem64_blocks_peak=fwHmem64_blocks_peak, vsxStatusMemoryUsageTable=vsxStatusMemoryUsageTable, fwNetIfProxyName=fwNetIfProxyName, cpseadJobsEntry=cpseadJobsEntry, advancedUrlFilteringProductsGroup=advancedUrlFilteringProductsGroup, gxGTPv2DeleteSessionSinceInstall=gxGTPv2DeleteSessionSinceInstall, fwSXLFalconsInterface5State=fwSXLFalconsInterface5State, memSwapsSec64=memSwapsSec64, lsFwmIsAlive=lsFwmIsAlive, raUsersTable=raUsersTable, fwSS_ftp_is_alive=fwSS_ftp_is_alive, fwConnectionsStatConnectionsOther=fwConnectionsStatConnectionsOther, fwSS_smtp_port=fwSS_smtp_port, fgProdName=fgProdName, licensingAssetContainerSKU=licensingAssetContainerSKU, aviTopVirusesCnt=aviTopVirusesCnt, outboundStatus=outboundStatus, cpsemdProcAlive=cpsemdProcAlive, procInterrupts=procInterrupts, mgConnectedClientsTable=mgConnectedClientsTable, cpvFwzStatistics=cpvFwzStatistics, vsxCountersDropEntry=vsxCountersDropEntry, asgVSXPacketRateTable=asgVSXPacketRateTable, fwVerMinor=fwVerMinor, haVerified=haVerified, fwSS_telnet_time_stamp=fwSS_telnet_time_stamp, checkPoint5200=checkPoint5200, cpvFwz=cpvFwz, fwSXLFalconsSxlFreeMemory=fwSXLFalconsSxlFreeMemory, permanentTunnelNextHop=permanentTunnelNextHop, procNum=procNum, gxGTPv2ExpiredCreateBearer=gxGTPv2ExpiredCreateBearer, asmSynatkNumberofunAckedSyns=asmSynatkNumberofunAckedSyns, asmCIFSBlockedPopUps=asmCIFSBlockedPopUps, mho=mho, gxExpiredCreate=gxExpiredCreate, asgCountersConnRate=asgCountersConnRate, checkPoint23500=checkPoint23500, checkPoint16000T=checkPoint16000T, asgVslsVsChassis2InterfacesTotal=asgVslsVsChassis2InterfacesTotal, asgCountersPacketRate=asgCountersPacketRate, asgDiagnosticLastRun=asgDiagnosticLastRun, fwSS_http_blocked_by_size_limit=fwSS_http_blocked_by_size_limit, tunnelType=tunnelType, gxDropOutOfContxtDelete=gxDropOutOfContxtDelete, routingIntrfName=routingIntrfName, fwSS_http_socket_in_use_count=fwSS_http_socket_in_use_count, vsecControllerProductsGroup=vsecControllerProductsGroup, identityAwarenessSuccUserLoginKerberos=identityAwarenessSuccUserLoginKerberos, cpvSaStatistics=cpvSaStatistics, fwSS_ftp_blocked_cnt=fwSS_ftp_blocked_cnt, licensingAssetCKSignature=licensingAssetCKSignature, svnLogDStat=svnLogDStat, fwHmem64_number_of_items=fwHmem64_number_of_items, lsLogReceiveRate=lsLogReceiveRate, memTotalReal64=memTotalReal64, asgCountersThroughput=asgCountersThroughput, cpvIpsecDecomprPkts=cpvIpsecDecomprPkts, mgIndex=mgIndex, fwFrag_packets=fwFrag_packets, fwSXLStatFalconsMemoryTable=fwSXLStatFalconsMemoryTable, svnRouteModAction=svnRouteModAction, fwSXLStatHostDropsTable=fwSXLStatHostDropsTable, asgPortPriorityEntry=asgPortPriorityEntry, vsecGatewayName=vsecGatewayName, voipStatShortDescr=voipStatShortDescr, fwSXLFalconsCpu2Usage=fwSXLFalconsCpu2Usage, antiSpamSubscription=antiSpamSubscription, gxGTPv2DropPolicyUpdateBearer=gxGTPv2DropPolicyUpdateBearer, asgAccelConnectionRate=asgAccelConnectionRate, cpsemdConnectionDuration=cpsemdConnectionDuration, identityAwarenessSuccMachLoginKerberos=identityAwarenessSuccMachLoginKerberos, asgSyncToStandby=asgSyncToStandby, mhoRxBuff4Frames=mhoRxBuff4Frames, dtpsLicensedUsers=dtpsLicensedUsers, diskFreeTotal=diskFreeTotal, identityAwarenessAntiSpoffProtection=identityAwarenessAntiSpoffProtection, identityAwarenessSuccUserLDAP=identityAwarenessSuccUserLDAP, haShared=haShared, fwSXLFalconsInterface2Name=fwSXLFalconsInterface2Name, fwAcceptPcktsOut64=fwAcceptPcktsOut64, gxActv0v1PdnConns=gxActv0v1PdnConns, gxGTPv2DropMalformedCreateSessionReq=gxGTPv2DropMalformedCreateSessionReq, fwSXLFalconsType=fwSXLFalconsType, fwSXLStatisticsAggregate=fwSXLStatisticsAggregate, identityAwarenessAuthMachADQuery=identityAwarenessAuthMachADQuery, fwSS_ftp_auth_sess_count=fwSS_ftp_auth_sess_count, ipsProductsGroup=ipsProductsGroup, fwSS_http_ftp_sess_max=fwSS_http_ftp_sess_max, fwSS_rlogin_auth_sess_count=fwSS_rlogin_auth_sess_count, gxDropInitiationResp=gxDropInitiationResp, fwSXLFalconsCpu4Usage=fwSXLFalconsCpu4Usage, gxGTPv2DropMalformedDeleteSessionReq=gxGTPv2DropMalformedDeleteSessionReq, fwSXLHostInboundpacketsPerSecond=fwSXLHostInboundpacketsPerSecond, cpseadJobDataType=cpseadJobDataType, hsmEnabled=hsmEnabled, fwSXLAggrTxMbits=fwSXLAggrTxMbits, aviSMTPTopVirusesName=aviSMTPTopVirusesName, voipDOSSipNetworkReqInterval=voipDOSSipNetworkReqInterval, vsRoutingIntrfName=vsRoutingIntrfName, cpvIKETotalSAsInitAttempts=cpvIKETotalSAsInitAttempts, fwSXLFalconsCpu28Usage=fwSXLFalconsCpu28Usage, haIfEntry=haIfEntry, mhoRxErr=mhoRxErr, checkPointMHO170=checkPointMHO170, asgVSXConnBladeID=asgVSXConnBladeID, cpsemdCurrentDBSize=cpsemdCurrentDBSize, fwInstancesCPUInstanceName=fwInstancesCPUInstanceName, checkPointTE2000X=checkPointTE2000X, ufTopBlockedSiteIndex=ufTopBlockedSiteIndex, asgVSXCoreUtilEntry=asgVSXCoreUtilEntry, asgIPv6PathDistTable=asgIPv6PathDistTable, osSPminor=osSPminor, fwSS_telnet_proto=fwSS_telnet_proto, vsRoutingTable=vsRoutingTable, fwSS_ftp_socket_in_use_count=fwSS_ftp_socket_in_use_count, asgVSXConnectionRateBladeid=asgVSXConnectionRateBladeid, lsStatCode=lsStatCode, fwSXLHostDropsTotPackets=fwSXLHostDropsTotPackets, httpURLLengthViolation=httpURLLengthViolation, voipDOSSipRateLimitingTableIpAddress=voipDOSSipRateLimitingTableIpAddress, asgIPv6NonAccelConnectionRate=asgIPv6NonAccelConnectionRate, fwSXLHostFw2PpakNotificationsSuccessful=fwSXLHostFw2PpakNotificationsSuccessful, asgVSXRateValue=asgVSXRateValue, fwSS_smtp_blocked_cnt=fwSS_smtp_blocked_cnt, asmHttpAsciiViolation=asmHttpAsciiViolation, fwNetIfTopology=fwNetIfTopology, dtpsStatLongDescr=dtpsStatLongDescr, updatesRecommendedIndex=updatesRecommendedIndex, cpvIpsecDecomprErr=cpvIpsecDecomprErr, voipStatCode=voipStatCode, mhoRxBuff2Frames=mhoRxBuff2Frames, fwSS_http_blocked_cnt=fwSS_http_blocked_cnt, fwSXLFalconsCpu9Usage=fwSXLFalconsCpu9Usage, wamProductsGroup=wamProductsGroup, fwSS_rlogin_sess_curr=fwSS_rlogin_sess_curr, lsVerMinor=lsVerMinor, voipDOSSipRateLimitingTableNumNonTrustedRequests=voipDOSSipRateLimitingTableNumNonTrustedRequests, dlpFtpLastScan=dlpFtpLastScan, mhoTxBcast=mhoTxBcast, fwInspect_extract=fwInspect_extract, fwCookies_getfwCookies_total=fwCookies_getfwCookies_total, gxGTPv2DropMalformedUpdateBearerResp=gxGTPv2DropMalformedUpdateBearerResp, httpHeaderLengthViolations=httpHeaderLengthViolations, vsxCountersDropVsName=vsxCountersDropVsName, fwSS_POP3_blocked_by_size_limit=fwSS_POP3_blocked_by_size_limit, exchangeAgentUpTime=exchangeAgentUpTime, fwSS_smtp_max_avail_socket=fwSS_smtp_max_avail_socket, asgKernelVer=asgKernelVer, checkPointUTM_11050=checkPointUTM_11050, fwKmem_number_of_items=fwKmem_number_of_items, asgIPv6FirewallPath=asgIPv6FirewallPath, numOfCIFSBlockedCommands=numOfCIFSBlockedCommands, identityAwarenessIdentityCollectorActiveDirectory=identityAwarenessIdentityCollectorActiveDirectory, gxGTPv2CreateBearerSinceInstall=gxGTPv2CreateBearerSinceInstall, fwSXLFalconsCpu16Usage=fwSXLFalconsCpu16Usage, vsxStatusMemoryUsageVSId=vsxStatusMemoryUsageVSId, checkPoint23800=checkPoint23800, asgVslsVsChassis2FwksUp=asgVslsVsChassis2FwksUp, identityAwarenessDistributedEnvTableIsLocal=identityAwarenessDistributedEnvTableIsLocal, msBuildNumber=msBuildNumber, mhoTxEntry=mhoTxEntry, mhoStateEntry=mhoStateEntry, raidVolumeSize=raidVolumeSize, wamProdName=wamProdName, checkPoint6500=checkPoint6500, tunnelProbState=tunnelProbState, fgRetransPcktsIn=fgRetransPcktsIn, asgNetIfSpeed=asgNetIfSpeed, amwABVersion=amwABVersion, asgFactorEntry=asgFactorEntry, fwSS_total_scanned=fwSS_total_scanned, fwSS_http_passed_by_URL_filter_category=fwSS_http_passed_by_URL_filter_category, lsIndexerInfoUpdatesAndLogsIndexedRate=lsIndexerInfoUpdatesAndLogsIndexedRate, asgVslsVsChassis1InterfacesTotal=asgVslsVsChassis1InterfacesTotal, haVersionSting=haVersionSting, ipsUpdateDescription=ipsUpdateDescription, fwSXLHostInterface6State=fwSXLHostInterface6State, checkPoint5400=checkPoint5400, gxGTPv2DropMalformedCreateBearerReq=gxGTPv2DropMalformedCreateBearerReq, blade32=blade32, haClusterIpMemberNet=haClusterIpMemberNet, fwSXLFalconsSxlTotMemory=fwSXLFalconsSxlTotMemory, teCloudSubscriptionStatus=teCloudSubscriptionStatus, lsProductsGroup=lsProductsGroup, aviFTPTopVirusesCnt=aviFTPTopVirusesCnt, haClusterIpIndex=haClusterIpIndex)
mibBuilder.exportSymbols("CHECKPOINT-MIB", checkPointIP280=checkPointIP280, checkPoint3600=checkPoint3600, exchangeAgentAvgTimePerMsg=exchangeAgentAvgTimePerMsg, cpvFwzDecErrs=cpvFwzDecErrs, threatExtractionStatusLongDesc=threatExtractionStatusLongDesc, fwSXLStatHostGeneralTable=fwSXLStatHostGeneralTable, asgNetIfState=asgNetIfState, raidDiskVolumeID=raidDiskVolumeID, fwSS_ftp_scanned_total=fwSS_ftp_scanned_total, identityAwarenessProductsGroup=identityAwarenessProductsGroup, lsIndexerInfoUpdatesAndLogsIndexedRatePeak=lsIndexerInfoUpdatesAndLogsIndexedRatePeak, fwSS_http_transp_sess_curr=fwSS_http_transp_sess_curr, wamState=wamState, fwLSConnIndex=fwLSConnIndex, lsConnectedClientsEntry=lsConnectedClientsEntry, checkPointDLP_12571=checkPointDLP_12571, fwSS_ftp_passed_by_size_limit=fwSS_ftp_passed_by_size_limit, cpvDecPackets=cpvDecPackets, fwRejectedBytesTotal=fwRejectedBytesTotal, asgInstancesLoadAvg=asgInstancesLoadAvg, routingGatweway=routingGatweway, checkPointPower_111000=checkPointPower_111000, mhoRxBuff1Frames=mhoRxBuff1Frames, fwProduct=fwProduct, fwAcceptPcktsIn64=fwAcceptPcktsIn64, cpvIPsecNICDecrPackets=cpvIPsecNICDecrPackets, identityAwarenessADQueryStatusEntry=identityAwarenessADQueryStatusEntry, fwSS_http_auth_sess_curr=fwSS_http_auth_sess_curr, fwSS_POP3_socket_in_use_max=fwSS_POP3_socket_in_use_max, asgNatConnRate=asgNatConnRate, vsxStatusTable=vsxStatusTable, thresholdDestinationIndex=thresholdDestinationIndex, voipDOSSipRateLimitingTable=voipDOSSipRateLimitingTable, fwSXLAggrRxMbits=fwSXLAggrRxMbits, checkPoint16200=checkPoint16200, fwSXLHostInterface7State=fwSXLHostInterface7State, fwIfTable=fwIfTable, fwHmem64_bytes_used=fwHmem64_bytes_used, fwSS_http_pid=fwSS_http_pid, blade6=blade6, permanentTunnelPeerType=permanentTunnelPeerType, dlpQrntMsgsSize=dlpQrntMsgsSize, svnNetIfRXErrors=svnNetIfRXErrors, asgVSXCoreUtilUsage=asgVSXCoreUtilUsage, mhoTxErr=mhoTxErr, blade36=blade36, httpMaxHeaderReached=httpMaxHeaderReached, cpvHwAccelEspEncPkts=cpvHwAccelEspEncPkts, asgFactorIndex=asgFactorIndex, cpvSaReplayErr=cpvSaReplayErr, raidDiskID=raidDiskID, fwHmem_failed_alloc=fwHmem_failed_alloc, vsxVsConfigured=vsxVsConfigured, fwSXLFalconsState=fwSXLFalconsState, aviEngineDate=aviEngineDate, svnWebUIPort=svnWebUIPort, mgIndexerInfoReadLogsRate=mgIndexerInfoReadLogsRate, fwSXLStatFalconsDropsTable=fwSXLStatFalconsDropsTable, fwNetIfNetmask=fwNetIfNetmask, ufTopBlockedCatName=ufTopBlockedCatName, fgRetransPcktsOut=fgRetransPcktsOut, gxProductsGroup=gxProductsGroup, fwSXLStatFalconsCpuEntry=fwSXLStatFalconsCpuEntry, identityAwarenessAuthUsersADQuery=identityAwarenessAuthUsersADQuery, antiVirusSubscriptionExpDate=antiVirusSubscriptionExpDate, asgDiagnosticResult=asgDiagnosticResult, gxDropMalformedRespDelete=gxDropMalformedRespDelete, svnLogDaemon=svnLogDaemon, asgChassisParamsEntry=asgChassisParamsEntry, fwSXLHostNotificationsIndex=fwSXLHostNotificationsIndex, msEngineVer=msEngineVer, fwSS_http_passed_by_size_limit=fwSS_http_passed_by_size_limit, fwSS_total_blocked_by_interal_error=fwSS_total_blocked_by_interal_error, cpseadStateDescriptionCode=cpseadStateDescriptionCode, vsxTunnelsVSidName=vsxTunnelsVSidName, ls=ls, fwSS_smtp=fwSS_smtp, fwSXLFalconsCpu19Usage=fwSXLFalconsCpu19Usage, mgClientName=mgClientName, haIP=haIP, fwSS_smtp_passed_by_archive_limit=fwSS_smtp_passed_by_archive_limit, antiSpamSubscriptionExpDate=antiSpamSubscriptionExpDate, raidVolumeID=raidVolumeID, fwAcceptBytesIn64=fwAcceptBytesIn64, cpvFwzDecPkts=cpvFwzDecPkts, raidVolumeEntry=raidVolumeEntry, permanentTunnelPeerObjName=permanentTunnelPeerObjName, asmHttpP2PHeaderFilter=asmHttpP2PHeaderFilter, vsxCountersDropVSID=vsxCountersDropVSID, fwSXLFalconsCpu23Usage=fwSXLFalconsCpu23Usage, cpsemdDBCapacity=cpsemdDBCapacity, haProblemName=haProblemName, mhoStateSpeed=mhoStateSpeed, asgVSXPacketRatePerSystem=asgVSXPacketRatePerSystem, mhoACLsUsed=mhoACLsUsed, haClusterIpAddr=haClusterIpAddr, gxTunnelApnsEntries=gxTunnelApnsEntries, vsecTotalNumberOfImportedDataCenterObjects=vsecTotalNumberOfImportedDataCenterObjects, vsxVSStateChangedVSIdName=vsxVSStateChangedVSIdName, asgVslsVsChassis3FwksUp=asgVslsVsChassis3FwksUp, aviTopEverVirusesName=aviTopEverVirusesName, gxBadCauseUpdate=gxBadCauseUpdate, mgBuildNumber=mgBuildNumber, ms=ms, fwSS_ftp_passed_by_file_type=fwSS_ftp_passed_by_file_type, fwHmem64_maximum_pools=fwHmem64_maximum_pools, fwSXLFalconsInterface0Name=fwSXLFalconsInterface0Name, ufLastSigLocation=ufLastSigLocation, raidVolumeState=raidVolumeState, zphStatusShortDesc=zphStatusShortDesc, svn=svn, fwSS_http_auth_failures=fwSS_http_auth_failures, lsGWState=lsGWState, fwSS_rlogin_socket_in_use_count=fwSS_rlogin_socket_in_use_count, asgNetIfEntry=asgNetIfEntry, svnRoutingModify=svnRoutingModify, checkPointPower_15070=checkPointPower_15070, cpvSaOtherErrIn=cpvSaOtherErrIn, gxGTPv2DropMalformedDeleteBearerResp=gxGTPv2DropMalformedDeleteBearerResp, cpseadStateDescription=cpseadStateDescription, svnApplianceSeriesString=svnApplianceSeriesString, fwSS_smtp_passed_by_size_limit=fwSS_smtp_passed_by_size_limit, applicationControlVersion=applicationControlVersion, msExpirationDate=msExpirationDate, checkPointVMware=checkPointVMware, applicationControlStatusLongDesc=applicationControlStatusLongDesc, asgIPv6AccelLoadMax=asgIPv6AccelLoadMax, cpvCurrEspSAsOut=cpvCurrEspSAsOut, fwSXLHostInterface1State=fwSXLHostInterface1State, fwIspStatus=fwIspStatus, fwSXLFalconsInterface6Name=fwSXLFalconsInterface6Name, raTunnelEncAlgorithm=raTunnelEncAlgorithm, fwSS_http_blocked_total=fwSS_http_blocked_total, aviTopEverVirusesCnt=aviTopEverVirusesCnt, fwInspect_record=fwInspect_record, threatExtractionStatistics=threatExtractionStatistics, asmSynatkModeChange=asmSynatkModeChange, aviSMTPLastVirusTime=aviSMTPLastVirusTime, dlpBypassStatus=dlpBypassStatus, fwHmem_bytes_peak=fwHmem_bytes_peak, cpvCurrEspSAsIn=cpvCurrEspSAsIn, aviPOP3LastVirusTime=aviPOP3LastVirusTime, fwSS_POP3_passed_total=fwSS_POP3_passed_total, fwKmem_system_physical_mem=fwKmem_system_physical_mem, cpvIKETotalFailuresInit=cpvIKETotalFailuresInit, fgInstallTime=fgInstallTime, checkPointSmart_600_S=checkPointSmart_600_S, fwSS_POP3_outgoing_mail_curr=fwSS_POP3_outgoing_mail_curr, cpseadFileName=cpseadFileName, outboundStatusDescription=outboundStatusDescription, blade24=blade24, fwSS_ftp_proto=fwSS_ftp_proto, checkPoint23900=checkPoint23900, fwKmem_alloc_operations=fwKmem_alloc_operations, fwInstallTime=fwInstallTime, svnMem64=svnMem64, mhoRxBuffPortIndex=mhoRxBuffPortIndex, mgLicenseViolationMsg=mgLicenseViolationMsg, asgSensorTable=asgSensorTable, checkPoint44000=checkPoint44000, identityAwarenessStatusLongDesc=identityAwarenessStatusLongDesc, fwSS_ftp_passed_by_archive_limit=fwSS_ftp_passed_by_archive_limit, advancedUrlFilteringUpdateDesc=advancedUrlFilteringUpdateDesc, checkPointUTM_1130=checkPointUTM_1130, gxDropMalformedReqDelete=gxDropMalformedReqDelete, cpvMaxConncurEspSAsOut=cpvMaxConncurEspSAsOut, fwSXLAggrDropsF2FNotAllowed=fwSXLAggrDropsF2FNotAllowed, checkPoint12200=checkPoint12200, fwSS_smtp_passed_by_internal_error=fwSS_smtp_passed_by_internal_error, asgVslsVsChassis1FwksTotal=asgVslsVsChassis1FwksTotal, vsxCountersIsDataValid=vsxCountersIsDataValid, numOfP2PeMuleConAttempts=numOfP2PeMuleConAttempts, applicationControlUpdateStatus=applicationControlUpdateStatus, thresholdErrorsEntry=thresholdErrorsEntry, asmP2POtherConAttempts=asmP2POtherConAttempts, asgIPv6AccelConnectionRate=asgIPv6AccelConnectionRate, cpvIPsecNICDecrBytes=cpvIPsecNICDecrBytes, multiDiskTable=multiDiskTable, fgAvrRateIn=fgAvrRateIn, fwSXLFalconsOutboundKbitsPerSecond=fwSXLFalconsOutboundKbitsPerSecond, fwSS_telnet_port=fwSS_telnet_port, cpvCurrAhSAsIn=cpvCurrAhSAsIn, fwSS_telnet_auth_sess_curr=fwSS_telnet_auth_sess_curr, fwSXLHostInterface1Speed=fwSXLHostInterface1Speed, asgPriorityPortName=asgPriorityPortName, fwSS_http_accepted_sess=fwSS_http_accepted_sess, sequenceVerifierInvalidAck=sequenceVerifierInvalidAck, vsxStatusVSWeight=vsxStatusVSWeight, cpvIKETotalInitSAs=cpvIKETotalInitSAs, ufTopBlockedUserIndex=ufTopBlockedUserIndex, vsxStatusSicTrustState=vsxStatusSicTrustState, asgIPv6InstancesLoadMin=asgIPv6InstancesLoadMin, cpvIpsecComprErrors=cpvIpsecComprErrors, mhoRxBuff3Frames=mhoRxBuff3Frames, tempertureSensorEntry=tempertureSensorEntry, fwSXLFalconsCpu5Usage=fwSXLFalconsCpu5Usage, thresholdState=thresholdState, asgDiagnosticComment=asgDiagnosticComment, identityAwarenessStatus=identityAwarenessStatus, asgIPv6PeakUnits=asgIPv6PeakUnits, fgRateLimitIn=fgRateLimitIn, diskTime=diskTime, fwIf64Table=fwIf64Table, svnNetStat=svnNetStat, thresholdAlertCount=thresholdAlertCount, fwNetIfPorts=fwNetIfPorts, aviStatCode=aviStatCode, wamPolicy=wamPolicy, fwAcceptedTotal=fwAcceptedTotal, haClusterIpIfName=haClusterIpIfName, fwLogged=fwLogged, fwPolicyName=fwPolicyName, fwHmem_bytes_used=fwHmem_bytes_used, asgIPv6PeakValue=asgIPv6PeakValue, raidDiskTable=raidDiskTable, asgVSXVirtualMemoryBladeid=asgVSXVirtualMemoryBladeid, exchangeAgentTimeSinceLastMsg=exchangeAgentTimeSinceLastMsg, cpvHwAccelAhEncPkts=cpvHwAccelAhEncPkts, thresholdSendingState=thresholdSendingState, raidInfo=raidInfo, ufStatLongDescr=ufStatLongDescr, fwSS_http_passed_by_AV_settings=fwSS_http_passed_by_AV_settings, vsxCountersVSId=vsxCountersVSId, checkPoint6200T=checkPoint6200T, exchangeMemoryUsage=exchangeMemoryUsage, fwNetIfIPV6AddrLen=fwNetIfIPV6AddrLen, ufSS=ufSS, antiVirusSubscriptionDesc=antiVirusSubscriptionDesc, vsxStatusVsPolicyType=vsxStatusVsPolicyType, fwHmem_current_allocated_bytes=fwHmem_current_allocated_bytes, fwHmem64_alloc_operations=fwHmem64_alloc_operations, fwCookies_putfwCookies_total=fwCookies_putfwCookies_total, checkPointTE2000XN=checkPointTE2000XN, haTrusted=haTrusted, checkPointSMB_1570=checkPointSMB_1570, aviSignatureName=aviSignatureName, procIdleTime=procIdleTime, msSpamNumScannedEmails=msSpamNumScannedEmails, checkPoint7000=checkPoint7000, fwSS_POP3_passed_by_archive_limit=fwSS_POP3_passed_by_archive_limit, fwConnectionsStatConnections=fwConnectionsStatConnections, thresholdActiveEventsEntry=thresholdActiveEventsEntry, asgVslsVsChassis4FwksUp=asgVslsVsChassis4FwksUp, asgVSXPerSystemThroughputPerInterfaceTable=asgVSXPerSystemThroughputPerInterfaceTable, sequenceVerifierInvalidretransmit=sequenceVerifierInvalidretransmit, mhoSummaryRxFrames=mhoSummaryRxFrames, haBlockState=haBlockState, cpseadStatLongDescr=cpseadStatLongDescr, fwHmem64_requested_bytes=fwHmem64_requested_bytes, fwSS_total_blocked_by_file_type=fwSS_total_blocked_by_file_type, uf=uf, blade16=blade16, asgSGMTable=asgSGMTable, licensingExpirationDate=licensingExpirationDate)
mibBuilder.exportSymbols("CHECKPOINT-MIB", fwSXLStatAggregateThroughputEntry=fwSXLStatAggregateThroughputEntry, cpvSaErrors=cpvSaErrors, licensingAssetActivationStatus=licensingAssetActivationStatus, cpvGeneral=cpvGeneral, memActiveVirtual=memActiveVirtual, fwSS_http_blocked_by_internal_error=fwSS_http_blocked_by_internal_error, asmSynatkCurrentMode=asmSynatkCurrentMode, cpvSaOtherErrOut=cpvSaOtherErrOut, unknown=unknown, fwSS_telnet_logical_port=fwSS_telnet_logical_port, svnStatCode=svnStatCode, identityAwarenessDistributedEnvTableStatus=identityAwarenessDistributedEnvTableStatus, checkPoint41000=checkPoint41000, advancedUrlFilteringUpdate=advancedUrlFilteringUpdate, amwStatusShortDesc=amwStatusShortDesc, asgIPv6MediumPath=asgIPv6MediumPath, asgSensorMinValue=asgSensorMinValue, fwSS_http_ops_cvp_rej_sess=fwSS_http_ops_cvp_rej_sess, haClusterIpTable=haClusterIpTable, vsxStatusEntry=vsxStatusEntry, raidVolumeFlags=raidVolumeFlags, fwIfName=fwIfName, lsIndexerInfo=lsIndexerInfo, fwSXLHostInterface7Name=fwSXLHostInterface7Name, fwSXLFalconsInterface7State=fwSXLFalconsInterface7State, blade45=blade45, fwLSConnStateDesc=fwLSConnStateDesc, asgVslsVsChassis1InterfacesUp=asgVslsVsChassis1InterfacesUp, checkPointSmart_1150=checkPointSmart_1150, vsecGatewayVersion=vsecGatewayVersion, aviFTPTopVirusesEntry=aviFTPTopVirusesEntry, gxGTPv2ExpiredDeleteBearer=gxGTPv2ExpiredDeleteBearer, amwAVUpdateDesc=amwAVUpdateDesc, asgSystemUp=asgSystemUp, asgIPv6DroppedTotalRate=asgIPv6DroppedTotalRate, thresholdActiveEventSubject=thresholdActiveEventSubject, aviFTPLastVirusTime=aviFTPLastVirusTime, fwSXLFalconsDropsAntiSpoofing=fwSXLFalconsDropsAntiSpoofing, checkPointIP290=checkPointIP290, fwIfIndex64=fwIfIndex64, vpnProductsGroup=vpnProductsGroup, fwSXLConnsExisting=fwSXLConnsExisting, fwSXLHostInterface2State=fwSXLHostInterface2State, checkPointSmart_625=checkPointSmart_625, fwSS_POP3_sess_count=fwSS_POP3_sess_count, asgVSXThroughputPerInterfaceTable=asgVSXThroughputPerInterfaceTable, fwHmem_requested_bytes=fwHmem_requested_bytes, fwSS_POP3_passed_by_internal_error=fwSS_POP3_passed_by_internal_error, fwSS_POP3_blocked_by_AV_settings=fwSS_POP3_blocked_by_AV_settings, dtpsVerMinor=dtpsVerMinor, svnNetIfRXDrops=svnNetIfRXDrops, gxDropVnsp=gxDropVnsp, fwSS_total_passed_by_size_limit=fwSS_total_passed_by_size_limit, fwSXLHostDropsSanityError=fwSXLHostDropsSanityError, fwSS_ufp_ops_ufp_sess_max=fwSS_ufp_ops_ufp_sess_max, fwSXLFalconsInterface0Speed=fwSXLFalconsInterface0Speed, fwSS_http_passed_by_internal_error=fwSS_http_passed_by_internal_error, cpvErrIn=cpvErrIn, asgCoreIndex=asgCoreIndex, fgNumInterfaces=fgNumInterfaces, mhoRxBcast=mhoRxBcast, asgNetIfInfo=asgNetIfInfo, asgVslsVsChassis3FwksTotal=asgVslsVsChassis3FwksTotal, fwDroppedTotal=fwDroppedTotal, fwHmem_alloc_operations=fwHmem_alloc_operations, applicationControl=applicationControl, mhoTxBytes=mhoTxBytes, voipMinorVersion=voipMinorVersion, wamVerMinor=wamVerMinor, asgIPv6CountersTable=asgIPv6CountersTable, fwMajor=fwMajor, raUserState=raUserState, fwSS_POP3_auth_sess_curr=fwSS_POP3_auth_sess_curr, dlpTotalScans=dlpTotalScans, checkPoint16600HS=checkPoint16600HS, fwSS_ftp_blocked_by_internal_error=fwSS_ftp_blocked_by_internal_error, fwSS_smtp_socket_in_use_max=fwSS_smtp_socket_in_use_max, gxDropMalformedRespCreate=gxDropMalformedRespCreate, fwSXLAggrDropsHeavyLoadTcpViolation=fwSXLAggrDropsHeavyLoadTcpViolation, cpvIKETotalFailuresResp=cpvIKETotalFailuresResp, fwSS_telnet_socket_in_use_count=fwSS_telnet_socket_in_use_count, blade8=blade8, checkPoint12400=checkPoint12400, asgNetIfRx=asgNetIfRx, fwSS_telnet_max_avail_socket=fwSS_telnet_max_avail_socket, fwSXLHostDropsQxlDecision=fwSXLHostDropsQxlDecision, vsxS2SIpsecTunnelsCounter=vsxS2SIpsecTunnelsCounter, fwKmem_bytes_peak=fwKmem_bytes_peak, cpsemdStatShortDescr=cpsemdStatShortDescr, voipBuildNumber=voipBuildNumber, vsxCountersBytesDroppedTotal=vsxCountersBytesDroppedTotal, msSpam=msSpam, multiDiskFreeTotalPercent=multiDiskFreeTotalPercent, mgLSLogReceiveRate1Hour=mgLSLogReceiveRate1Hour, fwPerfStat=fwPerfStat, fwSXLHostInterface3Name=fwSXLHostInterface3Name, amwABNextUpdate=amwABNextUpdate, fwAcceptPcktsIn=fwAcceptPcktsIn, fwSXLHostFw2PpakNotificationsFailure=fwSXLHostFw2PpakNotificationsFailure, cpvSaPolicyErr=cpvSaPolicyErr, gxUpdateInfo=gxUpdateInfo, vsxCountersRejectedTotal=vsxCountersRejectedTotal, checkPoint28000=checkPoint28000, msStatCode=msStatCode, fwSXLStatHostInterfacesEntry=fwSXLStatHostInterfacesEntry, dlpStatusLongDesc=dlpStatusLongDesc, asgConcurrConn=asgConcurrConn, asgIPv6CountersInstanceLoadMax=asgIPv6CountersInstanceLoadMax, aviSMTPTopVirusesTable=aviSMTPTopVirusesTable, asgIPv6AccelConcurrConn=asgIPv6AccelConcurrConn, checkPoint6200B=checkPoint6200B, dtps=dtps, fwHmem64_initial_allocated_blocks=fwHmem64_initial_allocated_blocks, fwSXLAggrDropsDropTemplate=fwSXLAggrDropsDropTemplate, haWorkMode=haWorkMode, haProblemPriority=haProblemPriority, fwSS_smtp_auth_failures=fwSS_smtp_auth_failures, checkPoint6200P=checkPoint6200P, asgVSXThroughputPerInterfaceEntry=asgVSXThroughputPerInterfaceEntry, osName=osName, identityAwareness=identityAwareness, fgPolicyName=fgPolicyName, asgVslsVsPrimaryChassis=asgVslsVsPrimaryChassis, fwSS_POP3_proto=fwSS_POP3_proto, fwInstancesCPUEntry=fwInstancesCPUEntry, mhoRxBuff4Octet=mhoRxBuff4Octet, checkPointUNIVERGEUnifiedWall2000=checkPointUNIVERGEUnifiedWall2000, amwAVVersion=amwAVVersion, fwKernelBuild=fwKernelBuild, wam=wam, fwSXLFalconsFw2PpakNotificationsFailure=fwSXLFalconsFw2PpakNotificationsFailure, vsecDataCenterTable=vsecDataCenterTable, asgVSXPerSystemThroughputPerInterfaceValue=asgVSXPerSystemThroughputPerInterfaceValue, asgBuildNum=asgBuildNum, threatExtractionSubscriptionStatus=threatExtractionSubscriptionStatus, ufTopBlockedCatEntry=ufTopBlockedCatEntry, asmHttpFormatViolatoin=asmHttpFormatViolatoin, haProtoVersion=haProtoVersion, gxProdVersion=gxProdVersion, sysDescr=sysDescr, asgVSXConcurrentConns=asgVSXConcurrentConns, asgPeakCriteria=asgPeakCriteria, fwSS_http_proto=fwSS_http_proto, vsxVsidConfigured=vsxVsidConfigured, asgSetup=asgSetup, updatesRecommendedName=updatesRecommendedName, voipCACConcurrentCallsCurrentVal=voipCACConcurrentCallsCurrentVal, vsRoutingGateway=vsRoutingGateway, fwSS_rlogin_auth_sess_curr=fwSS_rlogin_auth_sess_curr, msSpamControlsIpRepuatation=msSpamControlsIpRepuatation, gxInitiateSinceInstall=gxInitiateSinceInstall, fwSS_smtp_mail_count=fwSS_smtp_mail_count, fwSXLFalconsCpu29Usage=fwSXLFalconsCpu29Usage, aviPOP3LastVirusName=aviPOP3LastVirusName, fwSS_http_socket_in_use_max=fwSS_http_socket_in_use_max, fwProdName=fwProdName, thresholdThresholdOID=thresholdThresholdOID, asgNetIfIPv4Addr=asgNetIfIPv4Addr, fwDropped=fwDropped, asgSGMProcess=asgSGMProcess, fgPendPcktsIn=fgPendPcktsIn, amwABUpdateStatus=amwABUpdateStatus, identityAwarenessUnAuthUsers=identityAwarenessUnAuthUsers, haIfName=haIfName, mhoRxBuffTable=mhoRxBuffTable, gxDropOutOfContxtUpdate=gxDropOutOfContxtUpdate, vsxStatusInterfaceTxErrors=vsxStatusInterfaceTxErrors, raidDiskEntry=raidDiskEntry, checkPointQLS650=checkPointQLS650, fwSXLFalconsInterface3Speed=fwSXLFalconsInterface3Speed, asgVslsVsChassis4FwksTotal=asgVslsVsChassis4FwksTotal, checkPoint26000T=checkPoint26000T, dlpSMTPIncidents=dlpSMTPIncidents, cpvIPsecNICEncrBytes=cpvIPsecNICEncrBytes, dlpQrntFreeSpace=dlpQrntFreeSpace, fwSXLFalconsCpu22Usage=fwSXLFalconsCpu22Usage, asgEvent=asgEvent, avi=avi, fwHmem_initial_allocated_blocks=fwHmem_initial_allocated_blocks, fwSXLStatFalconsThroughputEntry=fwSXLStatFalconsThroughputEntry, msVersionStr=msVersionStr, advancedUrlFilteringStatusShortDesc=advancedUrlFilteringStatusShortDesc, thresholdPolicy=thresholdPolicy, fwSXLFalconsCpu13Usage=fwSXLFalconsCpu13Usage, mhoRxPortIndex=mhoRxPortIndex, memSwapsSec=memSwapsSec, asgVSXConnectionRateInfo=asgVSXConnectionRateInfo, asgVSXThroughputIndex=asgVSXThroughputIndex, procQueue=procQueue, fwSXLHostDropsDropTemplate=fwSXLHostDropsDropTemplate, multiDiskFreeTotalBytes=multiDiskFreeTotalBytes, antiBotSubscriptionStatus=antiBotSubscriptionStatus, asgDroppedBytesTotal=asgDroppedBytesTotal, mgLSLogReceiveRate=mgLSLogReceiveRate, vsxStatusInterfaceOverallBytes=vsxStatusInterfaceOverallBytes, vsxVsInstalled=vsxVsInstalled, fwHmem_bytes_internal_use=fwHmem_bytes_internal_use, svnStatShortDescr=svnStatShortDescr, dlpSMTPScans=dlpSMTPScans, mhoRxBytes=mhoRxBytes, memDiskTransfers64=memDiskTransfers64, fwHmem64_bytes_unused=fwHmem64_bytes_unused, fwSXLFalconsTxMbits=fwSXLFalconsTxMbits, httpsInspection=httpsInspection, mgIndexerInfoUpdatesAndLogsIndexedRate10min=mgIndexerInfoUpdatesAndLogsIndexedRate10min, cpsemd=cpsemd, checkPointIPS_15076=checkPointIPS_15076, multiProcIdleTime=multiProcIdleTime, cpvIKEMaxConncurSAs=cpvIKEMaxConncurSAs, mgIndexerInfo=mgIndexerInfo, vsRoutingEntry=vsRoutingEntry, cpseadStatCode=cpseadStatCode, fwSS_http_port=fwSS_http_port, voipServicePack=voipServicePack, fwHmem64_blocks_unused=fwHmem64_blocks_unused, thresholdActiveEventSubjectValue=thresholdActiveEventSubjectValue, mhoRxMcast=mhoRxMcast, gxExpiredUpdate=gxExpiredUpdate, fwSS_smtp_blocked_by_file_type=fwSS_smtp_blocked_by_file_type, vsecTotalNumberOfDataCenters=vsecTotalNumberOfDataCenters, asgVslsVsActiveChassis=asgVslsVsActiveChassis, mhoSummarySpeed=mhoSummarySpeed, checkPointSmart_600_M=checkPointSmart_600_M, mhoRxBuff7Discard=mhoRxBuff7Discard, fwSS_smtp_sess_curr=fwSS_smtp_sess_curr, gxBadCauseCreate=gxBadCauseCreate, cpvIKE=cpvIKE, powerSupplyTable=powerSupplyTable, fwNetIfIPV6Addr=fwNetIfIPV6Addr, mgIsLicenseViolation=mgIsLicenseViolation, tempertureSensorUnit=tempertureSensorUnit, checkPointTE250X=checkPointTE250X, asgResourceThreshold=asgResourceThreshold, fwSXLHostInterface6Speed=fwSXLHostInterface6Speed, fgPendPcktsOut=fgPendPcktsOut, asgProblemTable=asgProblemTable, gxDropMs_MsGpdu=gxDropMs_MsGpdu, fwSS_smtp_socket_in_use_curr=fwSS_smtp_socket_in_use_curr, fwSS_telnet_sess_max=fwSS_telnet_sess_max, tempertureSensorValue=tempertureSensorValue, mgClientDbLock=mgClientDbLock, asmScans=asmScans, procSysTime=procSysTime, cpvIpsec=cpvIpsec, licensingAssetSupportLevel=licensingAssetSupportLevel, mgProdName=mgProdName, cpvStatistics=cpvStatistics, blade28=blade28, gxGTPv2ExpiredEcho=gxGTPv2ExpiredEcho, asgIPv6InstancesLoadMax=asgIPv6InstancesLoadMax, asgIPv6RulebaseDroppedTotal=asgIPv6RulebaseDroppedTotal, voipMajorVersion=voipMajorVersion, fwConnectionsStatConnectionsIcmp=fwConnectionsStatConnectionsIcmp, aviTopEverViruses=aviTopEverViruses)
mibBuilder.exportSymbols("CHECKPOINT-MIB", asgVsxCpu1MinAvg=asgVsxCpu1MinAvg, fwSS_ufp_ops_ufp_sess_curr=fwSS_ufp_ops_ufp_sess_curr, cpvProdName=cpvProdName, asgNetIfTx=asgNetIfTx, fwInstancesCPUUsage=fwInstancesCPUUsage, voipDOSSipRateLimitingEntry=voipDOSSipRateLimitingEntry, cpvFwzEncapsEncErrs=cpvFwzEncapsEncErrs, checkPoint3200=checkPoint3200, cpvTotalAhSAsIn=cpvTotalAhSAsIn, asgResourceName=asgResourceName, mgIndexerInfoTotalReadLogs=mgIndexerInfoTotalReadLogs, fwDropPcktsIn=fwDropPcktsIn, threatExtractionCleanedAttachments=threatExtractionCleanedAttachments, identityAwarenessSuccUserLoginADQuery=identityAwarenessSuccUserLoginADQuery, asgIPv6PacketRate=asgIPv6PacketRate, asmTCP=asmTCP, asgProblemName=asgProblemName, fwSS_total_blocked_by_av=fwSS_total_blocked_by_av, haProblemTable=haProblemTable, fwSS_http_max_avail_socket=fwSS_http_max_avail_socket, fwIfIndex=fwIfIndex, asgNonAccelConcurrConn=asgNonAccelConcurrConn, httpsInspectionStatusDescription=httpsInspectionStatusDescription, fwKmem_non_blocking_bytes_used=fwKmem_non_blocking_bytes_used, advancedUrlFilteringSubscriptionExpDate=advancedUrlFilteringSubscriptionExpDate, mhoSummaryRxBytes=mhoSummaryRxBytes, aviEngineTable=aviEngineTable, fwPolicyStat=fwPolicyStat, fgVersionString=fgVersionString, voipDOSSipNetworkRegInterval=voipDOSSipNetworkRegInterval, fwTrap=fwTrap, multiProcTable=multiProcTable, thresholdErrorTime=thresholdErrorTime, fwSXLFalconsDropsF2FNotAllowed=fwSXLFalconsDropsF2FNotAllowed, asmCIFSNullSession=asmCIFSNullSession, aviHTTPLastVirusName=aviHTTPLastVirusName, fwDropPcktsOut=fwDropPcktsOut, mhoACLsTotal=mhoACLsTotal, licensingImpact=licensingImpact, asgIPv6PathDistIndex=asgIPv6PathDistIndex)
