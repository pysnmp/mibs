#
# PySNMP MIB module CHECKPOINT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/checkpoint/CHECKPOINT-MIB
# Produced by pysmi-1.1.12 at Wed May 29 07:59:18 2024
# On host fv-az1024-251 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity, Bits, iso, Counter32, MibIdentifier, Unsigned32, TimeTicks, ModuleIdentity, enterprises, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity", "Bits", "iso", "Counter32", "MibIdentifier", "Unsigned32", "TimeTicks", "ModuleIdentity", "enterprises", "Gauge32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
checkpoint = ModuleIdentity((1, 3, 6, 1, 4, 1, 2620))
checkpoint.setRevisions(('2013-12-26 13:09',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: checkpoint.setRevisionsDescriptions(('Update the SMIv1 MIB to SMIv2',))
if mibBuilder.loadTexts: checkpoint.setLastUpdated('201312261309Z')
if mibBuilder.loadTexts: checkpoint.setOrganization('Check Point')
if mibBuilder.loadTexts: checkpoint.setContactInfo('Check Point')
if mibBuilder.loadTexts: checkpoint.setDescription('Check Point MIB\n\t\t\t\t\t See the most common OIDs, with detailed descriptions, in the SNMP Best Practices Guide - sk98552\n\t\t\t\t\t(https://supportcenter.checkpoint.com/supportcenter/portal?eventSubmit_doGoviewsolutiondetails=&solutionid=sk98552)')
products = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1))
tables = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 500))
fw = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1))
vpn = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2))
fg = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 3))
ha = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 5))
svn = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6))
mngmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 7))
wam = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 8))
dtps = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 9))
ls = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 11))
vsx = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 16))
smartDefense = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17))
gx = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20))
avi = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 24))
eventiaAnalyzer = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 25))
uf = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 29))
ms = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 30))
voip = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 31))
identityAwareness = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 38))
applicationControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 39))
thresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 42))
advancedUrlFiltering = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 43))
dlp = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 44))
amw = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 46))
te = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 49))
treatExtarction = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 50))
sxl = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 36))
vsxVsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 16, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxVsSupported.setStatus('current')
if mibBuilder.loadTexts: vsxVsSupported.setDescription('The maximum number of supported Virtual Systems')
vsxVsConfigured = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 16, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxVsConfigured.setStatus('current')
if mibBuilder.loadTexts: vsxVsConfigured.setDescription('The number of configured Virtual Systems')
vsxVsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 16, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxVsInstalled.setStatus('current')
if mibBuilder.loadTexts: vsxVsInstalled.setDescription('The number of installed Virtual Systems')
vsxVrfConfigured = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 16, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxVrfConfigured.setStatus('current')
if mibBuilder.loadTexts: vsxVrfConfigured.setDescription('The number of configured VRFs')
vsxStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22))
vsxStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1), )
if mibBuilder.loadTexts: vsxStatusTable.setStatus('current')
if mibBuilder.loadTexts: vsxStatusTable.setDescription('')
vsxStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "vsxStatusVSId"))
if mibBuilder.loadTexts: vsxStatusEntry.setStatus('current')
if mibBuilder.loadTexts: vsxStatusEntry.setDescription('')
vsxStatusVSId = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusVSId.setStatus('current')
if mibBuilder.loadTexts: vsxStatusVSId.setDescription('Virtual System ID')
vsxStatusVRId = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusVRId.setStatus('current')
if mibBuilder.loadTexts: vsxStatusVRId.setDescription('Operating System ID (VRF ID)')
vsxStatusVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusVsName.setStatus('current')
if mibBuilder.loadTexts: vsxStatusVsName.setDescription("Virtual System's name")
vsxStatusVsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusVsType.setStatus('current')
if mibBuilder.loadTexts: vsxStatusVsType.setDescription("Virtual System's type")
vsxStatusMainIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusMainIP.setStatus('current')
if mibBuilder.loadTexts: vsxStatusMainIP.setDescription("Virtual System's Main IP")
vsxStatusPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusPolicyName.setStatus('current')
if mibBuilder.loadTexts: vsxStatusPolicyName.setDescription('Security Policy name')
vsxStatusVsPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusVsPolicyType.setStatus('current')
if mibBuilder.loadTexts: vsxStatusVsPolicyType.setDescription('Security Policy type')
vsxStatusSicTrustState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusSicTrustState.setStatus('current')
if mibBuilder.loadTexts: vsxStatusSicTrustState.setDescription('SIC status')
vsxStatusHAState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusHAState.setStatus('current')
if mibBuilder.loadTexts: vsxStatusHAState.setDescription('High Availability Status')
vsxStatusVSWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusVSWeight.setStatus('current')
if mibBuilder.loadTexts: vsxStatusVSWeight.setDescription('Virtual System Resource Control Weight')
vsxStatusCPUUsageTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 2), )
if mibBuilder.loadTexts: vsxStatusCPUUsageTable.setStatus('current')
if mibBuilder.loadTexts: vsxStatusCPUUsageTable.setDescription('')
vsxStatusCPUUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 2, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "vsxStatusVSId"))
if mibBuilder.loadTexts: vsxStatusCPUUsageEntry.setStatus('current')
if mibBuilder.loadTexts: vsxStatusCPUUsageEntry.setDescription('')
vsxStatusCPUUsage1sec = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusCPUUsage1sec.setStatus('current')
if mibBuilder.loadTexts: vsxStatusCPUUsage1sec.setDescription('CPU usage (%) in the last 1 second, averaged for all cores')
vsxStatusCPUUsage10sec = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusCPUUsage10sec.setStatus('current')
if mibBuilder.loadTexts: vsxStatusCPUUsage10sec.setDescription('CPU usage (%) in the last 10 seconds, averaged for all cores')
vsxStatusCPUUsage1min = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusCPUUsage1min.setStatus('current')
if mibBuilder.loadTexts: vsxStatusCPUUsage1min.setDescription('CPU usage (%) in the last 1 minute, averaged for all cores')
vsxStatusCPUUsage1hr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusCPUUsage1hr.setStatus('current')
if mibBuilder.loadTexts: vsxStatusCPUUsage1hr.setDescription('CPU usage (%) in the last 1 hour, averaged for all cores')
vsxStatusCPUUsage24hr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusCPUUsage24hr.setStatus('current')
if mibBuilder.loadTexts: vsxStatusCPUUsage24hr.setDescription('CPU usage (%) in the last 24 hours, averaged for all cores')
vsxStatusCPUUsageVSId = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusCPUUsageVSId.setStatus('current')
if mibBuilder.loadTexts: vsxStatusCPUUsageVSId.setDescription('Virtual System ID')
vsxStatusMemoryUsageTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 3), )
if mibBuilder.loadTexts: vsxStatusMemoryUsageTable.setStatus('current')
if mibBuilder.loadTexts: vsxStatusMemoryUsageTable.setDescription('VS memory usage table per-VS.')
vsxStatusMemoryUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 3, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "vsxStatusMemoryUsageVSId"))
if mibBuilder.loadTexts: vsxStatusMemoryUsageEntry.setStatus('current')
if mibBuilder.loadTexts: vsxStatusMemoryUsageEntry.setDescription('')
vsxStatusMemoryUsageVSId = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusMemoryUsageVSId.setStatus('current')
if mibBuilder.loadTexts: vsxStatusMemoryUsageVSId.setDescription('Virtual System ID')
vsxStatusMemoryUsageVSName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusMemoryUsageVSName.setStatus('current')
if mibBuilder.loadTexts: vsxStatusMemoryUsageVSName.setDescription('Virtual-System name')
vsxStatusMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: vsxStatusMemoryUsage.setDescription('Current VS memory usage (KB)')
vsxStatusCPUUsagePerCPUTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 4), )
if mibBuilder.loadTexts: vsxStatusCPUUsagePerCPUTable.setStatus('current')
if mibBuilder.loadTexts: vsxStatusCPUUsagePerCPUTable.setDescription('CPU usage table per Core and per VS.')
vsxStatusCPUUsagePerCPUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 4, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "vsxStatusCPUUsagePerCPUVSId"))
if mibBuilder.loadTexts: vsxStatusCPUUsagePerCPUEntry.setStatus('current')
if mibBuilder.loadTexts: vsxStatusCPUUsagePerCPUEntry.setDescription('')
vsxStatusCPUUsagePerCPUVSId = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusCPUUsagePerCPUVSId.setStatus('current')
if mibBuilder.loadTexts: vsxStatusCPUUsagePerCPUVSId.setDescription('Virtual-System ID')
vsxStatusCPUUsagePerCPUVSName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusCPUUsagePerCPUVSName.setStatus('current')
if mibBuilder.loadTexts: vsxStatusCPUUsagePerCPUVSName.setDescription('Virtual-System name')
vsxStatusCPUUsagePerCPUCoreNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusCPUUsagePerCPUCoreNumber.setStatus('current')
if mibBuilder.loadTexts: vsxStatusCPUUsagePerCPUCoreNumber.setDescription('Core number')
vsxStatusCPUUsagePerCPU1sec = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusCPUUsagePerCPU1sec.setStatus('current')
if mibBuilder.loadTexts: vsxStatusCPUUsagePerCPU1sec.setDescription('CPU usage % in the last 1 second')
vsxStatusCPUUsagePerCPU10sec = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusCPUUsagePerCPU10sec.setStatus('current')
if mibBuilder.loadTexts: vsxStatusCPUUsagePerCPU10sec.setDescription('CPU usage % in the last 10 seconds')
vsxStatusCPUUsagePerCPU1min = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusCPUUsagePerCPU1min.setStatus('current')
if mibBuilder.loadTexts: vsxStatusCPUUsagePerCPU1min.setDescription('CPU usage % in the last 1 minute')
vsxStatusCPUUsagePerCPU1hour = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusCPUUsagePerCPU1hour.setStatus('current')
if mibBuilder.loadTexts: vsxStatusCPUUsagePerCPU1hour.setDescription('CPU usage % in the last 1 hour')
vsxStatusCPUUsagePerCPU24hours = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 22, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxStatusCPUUsagePerCPU24hours.setStatus('current')
if mibBuilder.loadTexts: vsxStatusCPUUsagePerCPU24hours.setDescription('CPU usage % in the last 24 hours')
vsxCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23))
vsxCountersTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1), )
if mibBuilder.loadTexts: vsxCountersTable.setStatus('current')
if mibBuilder.loadTexts: vsxCountersTable.setDescription('')
vsxCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "vsxStatusVSId"))
if mibBuilder.loadTexts: vsxCountersEntry.setStatus('current')
if mibBuilder.loadTexts: vsxCountersEntry.setDescription('')
vsxCountersVSId = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersVSId.setStatus('current')
if mibBuilder.loadTexts: vsxCountersVSId.setDescription('Virtual System ID')
vsxCountersConnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersConnNum.setStatus('current')
if mibBuilder.loadTexts: vsxCountersConnNum.setDescription('Number of active connections')
vsxCountersConnPeakNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersConnPeakNum.setStatus('current')
if mibBuilder.loadTexts: vsxCountersConnPeakNum.setDescription('Peak number of active connections')
vsxCountersConnTableLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersConnTableLimit.setStatus('current')
if mibBuilder.loadTexts: vsxCountersConnTableLimit.setDescription('Connection table limit')
vsxCountersPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersPackets.setStatus('current')
if mibBuilder.loadTexts: vsxCountersPackets.setDescription('Total number of packets processed')
vsxCountersDroppedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersDroppedTotal.setStatus('current')
if mibBuilder.loadTexts: vsxCountersDroppedTotal.setDescription('Total number of dropped packets')
vsxCountersAcceptedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersAcceptedTotal.setStatus('current')
if mibBuilder.loadTexts: vsxCountersAcceptedTotal.setDescription('Total number of accepted packets')
vsxCountersRejectedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersRejectedTotal.setStatus('current')
if mibBuilder.loadTexts: vsxCountersRejectedTotal.setDescription('Total number of rejected packets')
vsxCountersBytesAcceptedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersBytesAcceptedTotal.setStatus('current')
if mibBuilder.loadTexts: vsxCountersBytesAcceptedTotal.setDescription('Total number of accepted bytes')
vsxCountersBytesDroppedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersBytesDroppedTotal.setStatus('current')
if mibBuilder.loadTexts: vsxCountersBytesDroppedTotal.setDescription('Total number of dropped bytes')
vsxCountersBytesRejectedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersBytesRejectedTotal.setStatus('current')
if mibBuilder.loadTexts: vsxCountersBytesRejectedTotal.setDescription('Total number of rejected bytes')
vsxCountersLoggedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersLoggedTotal.setStatus('current')
if mibBuilder.loadTexts: vsxCountersLoggedTotal.setDescription('Total number of logs sent')
vsxCountersIsDataValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 16, 23, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("valid", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsxCountersIsDataValid.setStatus('current')
if mibBuilder.loadTexts: vsxCountersIsDataValid.setDescription('Data validity indicator \n\t\t\t\t\t invalid(0)\n\t\t\t\t\t valid(1)')
raUsersTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 500, 9000), )
if mibBuilder.loadTexts: raUsersTable.setStatus('current')
if mibBuilder.loadTexts: raUsersTable.setDescription('A table containing Remote Access users tunnel information.')
raUsersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "raInternalIpAddr"))
if mibBuilder.loadTexts: raUsersEntry.setStatus('current')
if mibBuilder.loadTexts: raUsersEntry.setDescription('')
raInternalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raInternalIpAddr.setStatus('current')
if mibBuilder.loadTexts: raInternalIpAddr.setDescription('')
raExternalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raExternalIpAddr.setStatus('current')
if mibBuilder.loadTexts: raExternalIpAddr.setDescription('')
raUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 129, 130, 131, 132))).clone(namedValues=NamedValues(("active", 3), ("destroy", 4), ("idle", 129), ("phase1", 130), ("down", 131), ("init", 132)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raUserState.setStatus('current')
if mibBuilder.loadTexts: raUserState.setDescription('')
raOfficeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raOfficeMode.setStatus('current')
if mibBuilder.loadTexts: raOfficeMode.setDescription('')
raIkeOverTCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raIkeOverTCP.setStatus('current')
if mibBuilder.loadTexts: raIkeOverTCP.setDescription('')
raUseUDPEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raUseUDPEncap.setStatus('current')
if mibBuilder.loadTexts: raUseUDPEncap.setDescription('')
raVisitorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raVisitorMode.setStatus('current')
if mibBuilder.loadTexts: raVisitorMode.setDescription('')
raRouteTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raRouteTraffic.setStatus('current')
if mibBuilder.loadTexts: raRouteTraffic.setDescription('')
raCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raCommunity.setStatus('current')
if mibBuilder.loadTexts: raCommunity.setDescription('')
raTunnelEncAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 7, 9, 129, 130))).clone(namedValues=NamedValues(("espDES", 1), ("esp3DES", 2), ("espCAST", 5), ("esp3IDEA", 7), ("espNULL", 9), ("espAES128", 129), ("espAES256", 130)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raTunnelEncAlgorithm.setStatus('current')
if mibBuilder.loadTexts: raTunnelEncAlgorithm.setDescription('')
raTunnelAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 129, 130))).clone(namedValues=NamedValues(("preshared-key", 1), ("dss-signature", 2), ("rsa-signature", 3), ("rsa-encryption", 4), ("rev-rsa-encryption", 5), ("xauth", 129), ("crack", 130)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raTunnelAuthMethod.setStatus('current')
if mibBuilder.loadTexts: raTunnelAuthMethod.setDescription('')
raLogonTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9000, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raLogonTime.setStatus('current')
if mibBuilder.loadTexts: raLogonTime.setDescription('')
tunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 500, 9002), )
if mibBuilder.loadTexts: tunnelTable.setStatus('current')
if mibBuilder.loadTexts: tunnelTable.setDescription('A table containing VPN tunnel information.')
tunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "tunnelPeerIpAddr"))
if mibBuilder.loadTexts: tunnelEntry.setStatus('current')
if mibBuilder.loadTexts: tunnelEntry.setDescription('')
tunnelPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: tunnelPeerIpAddr.setDescription('')
tunnelPeerObjName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelPeerObjName.setStatus('current')
if mibBuilder.loadTexts: tunnelPeerObjName.setDescription('')
tunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 129, 130, 131, 132))).clone(namedValues=NamedValues(("active", 3), ("destroy", 4), ("idle", 129), ("phase1", 130), ("down", 131), ("init", 132)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelState.setStatus('current')
if mibBuilder.loadTexts: tunnelState.setDescription('')
tunnelCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelCommunity.setStatus('current')
if mibBuilder.loadTexts: tunnelCommunity.setDescription('')
tunnelNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelNextHop.setStatus('current')
if mibBuilder.loadTexts: tunnelNextHop.setDescription('')
tunnelInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelInterface.setStatus('current')
if mibBuilder.loadTexts: tunnelInterface.setDescription('')
tunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: tunnelSourceIpAddr.setDescription('')
tunnelLinkPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("primary", 0), ("backup", 1), ("on-demand", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelLinkPriority.setStatus('current')
if mibBuilder.loadTexts: tunnelLinkPriority.setDescription('')
tunnelProbState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("alive", 1), ("dead", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelProbState.setStatus('current')
if mibBuilder.loadTexts: tunnelProbState.setDescription('')
tunnelPeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("regular", 1), ("daip", 2), ("robo", 3), ("lsv", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelPeerType.setStatus('current')
if mibBuilder.loadTexts: tunnelPeerType.setDescription('')
tunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9002, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regular", 1), ("permanent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelType.setStatus('current')
if mibBuilder.loadTexts: tunnelType.setDescription('')
permanentTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 500, 9003), )
if mibBuilder.loadTexts: permanentTunnelTable.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelTable.setDescription('A table containing VPN permanent tunnel information.')
permanentTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 500, 9003, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "permanentTunnelPeerIpAddr"))
if mibBuilder.loadTexts: permanentTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelEntry.setDescription('')
permanentTunnelPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9003, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: permanentTunnelPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelPeerIpAddr.setDescription('')
permanentTunnelPeerObjName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9003, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: permanentTunnelPeerObjName.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelPeerObjName.setDescription('')
permanentTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9003, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 129, 130, 131, 132))).clone(namedValues=NamedValues(("active", 3), ("destroy", 4), ("idle", 129), ("phase1", 130), ("down", 131), ("init", 132)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: permanentTunnelState.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelState.setDescription('')
permanentTunnelCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9003, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: permanentTunnelCommunity.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelCommunity.setDescription('')
permanentTunnelNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9003, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: permanentTunnelNextHop.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelNextHop.setDescription('')
permanentTunnelInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9003, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: permanentTunnelInterface.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelInterface.setDescription('')
permanentTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9003, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: permanentTunnelSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelSourceIpAddr.setDescription('')
permanentTunnelLinkPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9003, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("primary", 0), ("backup", 1), ("on-demand", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: permanentTunnelLinkPriority.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelLinkPriority.setDescription('')
permanentTunnelProbState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9003, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("alive", 1), ("dead", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: permanentTunnelProbState.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelProbState.setDescription('')
permanentTunnelPeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 500, 9003, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("regular", 1), ("daip", 2), ("robo", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: permanentTunnelPeerType.setStatus('current')
if mibBuilder.loadTexts: permanentTunnelPeerType.setDescription('')
fwPolicyStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25))
fwPerfStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26))
fwHmem = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1))
fwKmem = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2))
fwInspect = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 3))
fwCookies = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 4))
fwChains = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 5))
fwFragments = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 6))
fwUfp = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 8))
fwSS = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9))
fwConnectionsStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 11))
fwHmem64 = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12))
fwSS_http = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1)).setLabel("fwSS-http")
fwSS_ftp = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2)).setLabel("fwSS-ftp")
fwSS_telnet = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3)).setLabel("fwSS-telnet")
fwSS_rlogin = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4)).setLabel("fwSS-rlogin")
fwSS_ufp = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 5)).setLabel("fwSS-ufp")
fwSS_smtp = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6)).setLabel("fwSS-smtp")
fwSS_POP3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7)).setLabel("fwSS-POP3")
fwSS_av_total = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10)).setLabel("fwSS-av-total")
fwModuleState = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwModuleState.setStatus('current')
if mibBuilder.loadTexts: fwModuleState.setDescription('The state of the fw module')
fwFilterName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwFilterName.setStatus('current')
if mibBuilder.loadTexts: fwFilterName.setDescription('The name of the loaded filter')
fwFilterDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwFilterDate.setStatus('current')
if mibBuilder.loadTexts: fwFilterDate.setDescription('Install time')
fwAccepted = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAccepted.setStatus('current')
if mibBuilder.loadTexts: fwAccepted.setDescription('The number of accepted packets.')
fwRejected = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwRejected.setStatus('current')
if mibBuilder.loadTexts: fwRejected.setDescription('The number of rejected  packets.')
fwDropped = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwDropped.setStatus('current')
if mibBuilder.loadTexts: fwDropped.setDescription('The number of dropped packets.')
fwLogged = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLogged.setStatus('current')
if mibBuilder.loadTexts: fwLogged.setDescription('The number of logged packets.')
fwMajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwMajor.setStatus('current')
if mibBuilder.loadTexts: fwMajor.setDescription('Major version')
fwMinor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwMinor.setStatus('current')
if mibBuilder.loadTexts: fwMinor.setDescription('Minor version')
fwProduct = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwProduct.setStatus('current')
if mibBuilder.loadTexts: fwProduct.setDescription('Product name')
fwEvent = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwEvent.setStatus('current')
if mibBuilder.loadTexts: fwEvent.setDescription('A string containing the last snmp trap sent via fw')
fwSICTrustState = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSICTrustState.setStatus('current')
if mibBuilder.loadTexts: fwSICTrustState.setDescription('SIC Trust State : Possible values include:\n                                            Not initialized 0 \n                                            Initialized but not established 1\n                                            Established 2\n                                            Error 3\n                                            Unknown 4')
fwTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 0))
fwTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 1, 0, 1)).setObjects(("CHECKPOINT-MIB", "fwEvent"))
if mibBuilder.loadTexts: fwTrap.setStatus('current')
if mibBuilder.loadTexts: fwTrap.setDescription('FireWall-1 SNMP trap')
fwProdName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwProdName.setStatus('current')
if mibBuilder.loadTexts: fwProdName.setDescription('Product name')
fwVerMajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwVerMajor.setStatus('current')
if mibBuilder.loadTexts: fwVerMajor.setDescription('Major version')
fwVerMinor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwVerMinor.setStatus('current')
if mibBuilder.loadTexts: fwVerMinor.setDescription('Minor version')
fwKernelBuild = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKernelBuild.setStatus('current')
if mibBuilder.loadTexts: fwKernelBuild.setDescription('Kernel build num')
fwPolicyName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwPolicyName.setStatus('current')
if mibBuilder.loadTexts: fwPolicyName.setDescription('Policy Name')
fwInstallTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwInstallTime.setStatus('current')
if mibBuilder.loadTexts: fwInstallTime.setDescription('Policy install time')
fwNumConn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNumConn.setStatus('current')
if mibBuilder.loadTexts: fwNumConn.setDescription('Number of connections')
fwPeakNumConn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwPeakNumConn.setStatus('current')
if mibBuilder.loadTexts: fwPeakNumConn.setDescription('Peak number of connections')
fwIfTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5), )
if mibBuilder.loadTexts: fwIfTable.setStatus('current')
if mibBuilder.loadTexts: fwIfTable.setDescription('')
fwConnTableLimit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwConnTableLimit.setStatus('current')
if mibBuilder.loadTexts: fwConnTableLimit.setDescription('Connection table limit')
fwIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwIfIndex"))
if mibBuilder.loadTexts: fwIfEntry.setStatus('current')
if mibBuilder.loadTexts: fwIfEntry.setDescription('')
fwIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwIfIndex.setStatus('current')
if mibBuilder.loadTexts: fwIfIndex.setDescription('')
fwIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwIfName.setStatus('current')
if mibBuilder.loadTexts: fwIfName.setDescription('')
fwAcceptPcktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptPcktsIn.setStatus('current')
if mibBuilder.loadTexts: fwAcceptPcktsIn.setDescription('')
fwAcceptPcktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptPcktsOut.setStatus('current')
if mibBuilder.loadTexts: fwAcceptPcktsOut.setDescription('')
fwAcceptBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptBytesIn.setStatus('current')
if mibBuilder.loadTexts: fwAcceptBytesIn.setDescription('')
fwAcceptBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptBytesOut.setStatus('current')
if mibBuilder.loadTexts: fwAcceptBytesOut.setDescription('')
fwDropPcktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwDropPcktsIn.setStatus('current')
if mibBuilder.loadTexts: fwDropPcktsIn.setDescription('')
fwDropPcktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwDropPcktsOut.setStatus('current')
if mibBuilder.loadTexts: fwDropPcktsOut.setDescription('')
fwRejectPcktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwRejectPcktsIn.setStatus('current')
if mibBuilder.loadTexts: fwRejectPcktsIn.setDescription('')
fwRejectPcktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwRejectPcktsOut.setStatus('current')
if mibBuilder.loadTexts: fwRejectPcktsOut.setDescription('')
fwLogIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLogIn.setStatus('current')
if mibBuilder.loadTexts: fwLogIn.setDescription('')
fwLogOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 5, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLogOut.setStatus('current')
if mibBuilder.loadTexts: fwLogOut.setDescription('')
fwAcceptedTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptedTotal.setStatus('current')
if mibBuilder.loadTexts: fwAcceptedTotal.setDescription('Total number of accepted packets')
fwDroppedTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwDroppedTotal.setStatus('current')
if mibBuilder.loadTexts: fwDroppedTotal.setDescription('Total number of dropped packets')
fwRejectedTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwRejectedTotal.setStatus('current')
if mibBuilder.loadTexts: fwRejectedTotal.setDescription('Total number of rejected packets')
fwLoggedTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLoggedTotal.setStatus('current')
if mibBuilder.loadTexts: fwLoggedTotal.setDescription('Total number of logs sent')
fwAcceptedBytesTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptedBytesTotal.setStatus('current')
if mibBuilder.loadTexts: fwAcceptedBytesTotal.setDescription('Total number of accepted bytes')
fwDroppedBytesTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwDroppedBytesTotal.setStatus('current')
if mibBuilder.loadTexts: fwDroppedBytesTotal.setDescription('Total number of dropped bytes')
fwRejectedBytesTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwRejectedBytesTotal.setStatus('current')
if mibBuilder.loadTexts: fwRejectedBytesTotal.setDescription('Total number of rejected bytes')
fwAcceptedBytesRates = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptedBytesRates.setStatus('current')
if mibBuilder.loadTexts: fwAcceptedBytesRates.setDescription('Accepted bytes rates')
fwAcceptedPcktsRates = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptedPcktsRates.setStatus('current')
if mibBuilder.loadTexts: fwAcceptedPcktsRates.setDescription('Accepted packets rates')
fwConnsRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwConnsRate.setStatus('current')
if mibBuilder.loadTexts: fwConnsRate.setDescription('Connection Rates')
fwIfTable64 = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25), )
if mibBuilder.loadTexts: fwIfTable64.setStatus('current')
if mibBuilder.loadTexts: fwIfTable64.setDescription('')
fwIfEntry64 = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwIfIndex64"))
if mibBuilder.loadTexts: fwIfEntry64.setStatus('current')
if mibBuilder.loadTexts: fwIfEntry64.setDescription('')
fwIfIndex64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwIfIndex64.setStatus('current')
if mibBuilder.loadTexts: fwIfIndex64.setDescription('')
fwIfName64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwIfName64.setStatus('current')
if mibBuilder.loadTexts: fwIfName64.setDescription('')
fwAcceptPcktsIn64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptPcktsIn64.setStatus('current')
if mibBuilder.loadTexts: fwAcceptPcktsIn64.setDescription('')
fwAcceptPcktsOut64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptPcktsOut64.setStatus('current')
if mibBuilder.loadTexts: fwAcceptPcktsOut64.setDescription('')
fwAcceptBytesIn64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptBytesIn64.setStatus('current')
if mibBuilder.loadTexts: fwAcceptBytesIn64.setDescription('')
fwAcceptBytesOut64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwAcceptBytesOut64.setStatus('current')
if mibBuilder.loadTexts: fwAcceptBytesOut64.setDescription('')
fwDropPcktsIn64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwDropPcktsIn64.setStatus('current')
if mibBuilder.loadTexts: fwDropPcktsIn64.setDescription('')
fwDropPcktsOut64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwDropPcktsOut64.setStatus('current')
if mibBuilder.loadTexts: fwDropPcktsOut64.setDescription('')
fwRejectPcktsIn64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwRejectPcktsIn64.setStatus('current')
if mibBuilder.loadTexts: fwRejectPcktsIn64.setDescription('')
fwRejectPcktsOut64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwRejectPcktsOut64.setStatus('current')
if mibBuilder.loadTexts: fwRejectPcktsOut64.setDescription('')
fwLogIn64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLogIn64.setStatus('current')
if mibBuilder.loadTexts: fwLogIn64.setDescription('')
fwLogOut64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 25, 25, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLogOut64.setStatus('current')
if mibBuilder.loadTexts: fwLogOut64.setDescription('')
fwHmem_block_size = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 1), Unsigned32()).setLabel("fwHmem-block-size").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_block_size.setStatus('current')
if mibBuilder.loadTexts: fwHmem_block_size.setDescription('hmem - block size')
fwHmem_requested_bytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 2), Unsigned32()).setLabel("fwHmem-requested-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_requested_bytes.setStatus('current')
if mibBuilder.loadTexts: fwHmem_requested_bytes.setDescription('hmem - requested bytes')
fwHmem_initial_allocated_bytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 3), Unsigned32()).setLabel("fwHmem-initial-allocated-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_initial_allocated_bytes.setStatus('current')
if mibBuilder.loadTexts: fwHmem_initial_allocated_bytes.setDescription('hmem - initial allocated bytes')
fwHmem_initial_allocated_blocks = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 4), Unsigned32()).setLabel("fwHmem-initial-allocated-blocks").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_initial_allocated_blocks.setStatus('current')
if mibBuilder.loadTexts: fwHmem_initial_allocated_blocks.setDescription('hmem - initial allocated blocks')
fwHmem_initial_allocated_pools = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 5), Unsigned32()).setLabel("fwHmem-initial-allocated-pools").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_initial_allocated_pools.setStatus('current')
if mibBuilder.loadTexts: fwHmem_initial_allocated_pools.setDescription('hmem - initial allocated pools')
fwHmem_current_allocated_bytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 6), Unsigned32()).setLabel("fwHmem-current-allocated-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_current_allocated_bytes.setStatus('current')
if mibBuilder.loadTexts: fwHmem_current_allocated_bytes.setDescription('hmem - current allocated bytes')
fwHmem_current_allocated_blocks = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 7), Unsigned32()).setLabel("fwHmem-current-allocated-blocks").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_current_allocated_blocks.setStatus('current')
if mibBuilder.loadTexts: fwHmem_current_allocated_blocks.setDescription('hmem - current allocated blocks')
fwHmem_current_allocated_pools = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 8), Unsigned32()).setLabel("fwHmem-current-allocated-pools").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_current_allocated_pools.setStatus('current')
if mibBuilder.loadTexts: fwHmem_current_allocated_pools.setDescription('hmem - current allocated pools')
fwHmem_maximum_bytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 9), Unsigned32()).setLabel("fwHmem-maximum-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_maximum_bytes.setStatus('current')
if mibBuilder.loadTexts: fwHmem_maximum_bytes.setDescription('hmem - maximum bytes')
fwHmem_maximum_pools = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 10), Unsigned32()).setLabel("fwHmem-maximum-pools").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_maximum_pools.setStatus('current')
if mibBuilder.loadTexts: fwHmem_maximum_pools.setDescription('hmem - maximum pools')
fwHmem_bytes_used = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 11), Unsigned32()).setLabel("fwHmem-bytes-used").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_bytes_used.setStatus('current')
if mibBuilder.loadTexts: fwHmem_bytes_used.setDescription('hmem - bytes used')
fwHmem_blocks_used = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 12), Unsigned32()).setLabel("fwHmem-blocks-used").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_blocks_used.setStatus('current')
if mibBuilder.loadTexts: fwHmem_blocks_used.setDescription('hmem - blocks used')
fwHmem_bytes_unused = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 13), Unsigned32()).setLabel("fwHmem-bytes-unused").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_bytes_unused.setStatus('current')
if mibBuilder.loadTexts: fwHmem_bytes_unused.setDescription('hmem - bytes unused')
fwHmem_blocks_unused = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 14), Unsigned32()).setLabel("fwHmem-blocks-unused").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_blocks_unused.setStatus('current')
if mibBuilder.loadTexts: fwHmem_blocks_unused.setDescription('hmem - blocks unused')
fwHmem_bytes_peak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 15), Unsigned32()).setLabel("fwHmem-bytes-peak").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_bytes_peak.setStatus('current')
if mibBuilder.loadTexts: fwHmem_bytes_peak.setDescription('hmem - bytes peak')
fwHmem_blocks_peak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 16), Unsigned32()).setLabel("fwHmem-blocks-peak").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_blocks_peak.setStatus('current')
if mibBuilder.loadTexts: fwHmem_blocks_peak.setDescription('hmem - blocks peak')
fwHmem_bytes_internal_use = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 17), Unsigned32()).setLabel("fwHmem-bytes-internal-use").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_bytes_internal_use.setStatus('current')
if mibBuilder.loadTexts: fwHmem_bytes_internal_use.setDescription('hmem - bytes internal use')
fwHmem_number_of_items = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 18), Unsigned32()).setLabel("fwHmem-number-of-items").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_number_of_items.setStatus('current')
if mibBuilder.loadTexts: fwHmem_number_of_items.setDescription('hmem - number of items')
fwHmem_alloc_operations = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 19), Unsigned32()).setLabel("fwHmem-alloc-operations").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_alloc_operations.setStatus('current')
if mibBuilder.loadTexts: fwHmem_alloc_operations.setDescription('hmem - alloc operations')
fwHmem_free_operations = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 20), Unsigned32()).setLabel("fwHmem-free-operations").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_free_operations.setStatus('current')
if mibBuilder.loadTexts: fwHmem_free_operations.setDescription('hmem - free operations')
fwHmem_failed_alloc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 21), Unsigned32()).setLabel("fwHmem-failed-alloc").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_failed_alloc.setStatus('current')
if mibBuilder.loadTexts: fwHmem_failed_alloc.setDescription('hmem - failed alloc')
fwHmem_failed_free = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 1, 22), Unsigned32()).setLabel("fwHmem-failed-free").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem_failed_free.setStatus('current')
if mibBuilder.loadTexts: fwHmem_failed_free.setDescription('hmem - failed free')
fwKmem_system_physical_mem = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 1), Unsigned32()).setLabel("fwKmem-system-physical-mem").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_system_physical_mem.setStatus('current')
if mibBuilder.loadTexts: fwKmem_system_physical_mem.setDescription('kmem - system physical mem')
fwKmem_available_physical_mem = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 2), Unsigned32()).setLabel("fwKmem-available-physical-mem").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_available_physical_mem.setStatus('current')
if mibBuilder.loadTexts: fwKmem_available_physical_mem.setDescription('kmem - available physical mem')
fwKmem_aix_heap_size = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 3), Unsigned32()).setLabel("fwKmem-aix-heap-size").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_aix_heap_size.setStatus('current')
if mibBuilder.loadTexts: fwKmem_aix_heap_size.setDescription('kmem - aix heap size')
fwKmem_bytes_used = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 4), Unsigned32()).setLabel("fwKmem-bytes-used").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_bytes_used.setStatus('current')
if mibBuilder.loadTexts: fwKmem_bytes_used.setDescription('kmem - bytes used')
fwKmem_blocking_bytes_used = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 5), Unsigned32()).setLabel("fwKmem-blocking-bytes-used").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_blocking_bytes_used.setStatus('current')
if mibBuilder.loadTexts: fwKmem_blocking_bytes_used.setDescription('kmem - blocking bytes used')
fwKmem_non_blocking_bytes_used = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 6), Unsigned32()).setLabel("fwKmem-non-blocking-bytes-used").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_non_blocking_bytes_used.setStatus('current')
if mibBuilder.loadTexts: fwKmem_non_blocking_bytes_used.setDescription('kmem - non blocking bytes used')
fwKmem_bytes_unused = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 7), Unsigned32()).setLabel("fwKmem-bytes-unused").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_bytes_unused.setStatus('current')
if mibBuilder.loadTexts: fwKmem_bytes_unused.setDescription('kmem - bytes unused')
fwKmem_bytes_peak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 8), Unsigned32()).setLabel("fwKmem-bytes-peak").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_bytes_peak.setStatus('current')
if mibBuilder.loadTexts: fwKmem_bytes_peak.setDescription('kmem - bytes peak')
fwKmem_blocking_bytes_peak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 9), Unsigned32()).setLabel("fwKmem-blocking-bytes-peak").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_blocking_bytes_peak.setStatus('current')
if mibBuilder.loadTexts: fwKmem_blocking_bytes_peak.setDescription('kmem - blocking bytes peak')
fwKmem_non_blocking_bytes_peak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 10), Unsigned32()).setLabel("fwKmem-non-blocking-bytes-peak").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_non_blocking_bytes_peak.setStatus('current')
if mibBuilder.loadTexts: fwKmem_non_blocking_bytes_peak.setDescription('kmem - non blocking bytes peak')
fwKmem_bytes_internal_use = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 11), Unsigned32()).setLabel("fwKmem-bytes-internal-use").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_bytes_internal_use.setStatus('current')
if mibBuilder.loadTexts: fwKmem_bytes_internal_use.setDescription('kmem - bytes internal use')
fwKmem_number_of_items = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 12), Unsigned32()).setLabel("fwKmem-number-of-items").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_number_of_items.setStatus('current')
if mibBuilder.loadTexts: fwKmem_number_of_items.setDescription('kmem - number of items')
fwKmem_alloc_operations = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 13), Unsigned32()).setLabel("fwKmem-alloc-operations").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_alloc_operations.setStatus('current')
if mibBuilder.loadTexts: fwKmem_alloc_operations.setDescription('kmem - alloc operations')
fwKmem_free_operations = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 14), Unsigned32()).setLabel("fwKmem-free-operations").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_free_operations.setStatus('current')
if mibBuilder.loadTexts: fwKmem_free_operations.setDescription('kmem - free operations')
fwKmem_failed_alloc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 15), Unsigned32()).setLabel("fwKmem-failed-alloc").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_failed_alloc.setStatus('current')
if mibBuilder.loadTexts: fwKmem_failed_alloc.setDescription('kmem - failed alloc')
fwKmem_failed_free = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 2, 16), Unsigned32()).setLabel("fwKmem-failed-free").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwKmem_failed_free.setStatus('current')
if mibBuilder.loadTexts: fwKmem_failed_free.setDescription('kmem - failed free')
fwInspect_packets = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 3, 1), Unsigned32()).setLabel("fwInspect-packets").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwInspect_packets.setStatus('current')
if mibBuilder.loadTexts: fwInspect_packets.setDescription('inspect - packets')
fwInspect_operations = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 3, 2), Unsigned32()).setLabel("fwInspect-operations").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwInspect_operations.setStatus('current')
if mibBuilder.loadTexts: fwInspect_operations.setDescription('inspect - operations')
fwInspect_lookups = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 3, 3), Unsigned32()).setLabel("fwInspect-lookups").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwInspect_lookups.setStatus('current')
if mibBuilder.loadTexts: fwInspect_lookups.setDescription('inspect - lookups')
fwInspect_record = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 3, 4), Unsigned32()).setLabel("fwInspect-record").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwInspect_record.setStatus('current')
if mibBuilder.loadTexts: fwInspect_record.setDescription('inspect - record')
fwInspect_extract = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 3, 5), Unsigned32()).setLabel("fwInspect-extract").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwInspect_extract.setStatus('current')
if mibBuilder.loadTexts: fwInspect_extract.setDescription('inspect - extract')
fwCookies_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 4, 1), Unsigned32()).setLabel("fwCookies-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwCookies_total.setStatus('current')
if mibBuilder.loadTexts: fwCookies_total.setDescription('cookies - total')
fwCookies_allocfwCookies_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 4, 2), Unsigned32()).setLabel("fwCookies-allocfwCookies-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwCookies_allocfwCookies_total.setStatus('current')
if mibBuilder.loadTexts: fwCookies_allocfwCookies_total.setDescription('cookies - alloc')
fwCookies_freefwCookies_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 4, 3), Unsigned32()).setLabel("fwCookies-freefwCookies-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwCookies_freefwCookies_total.setStatus('current')
if mibBuilder.loadTexts: fwCookies_freefwCookies_total.setDescription('cookies - free')
fwCookies_dupfwCookies_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 4, 4), Unsigned32()).setLabel("fwCookies-dupfwCookies-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwCookies_dupfwCookies_total.setStatus('current')
if mibBuilder.loadTexts: fwCookies_dupfwCookies_total.setDescription('cookies - dup')
fwCookies_getfwCookies_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 4, 5), Unsigned32()).setLabel("fwCookies-getfwCookies-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwCookies_getfwCookies_total.setStatus('current')
if mibBuilder.loadTexts: fwCookies_getfwCookies_total.setDescription('cookies - get')
fwCookies_putfwCookies_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 4, 6), Unsigned32()).setLabel("fwCookies-putfwCookies-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwCookies_putfwCookies_total.setStatus('current')
if mibBuilder.loadTexts: fwCookies_putfwCookies_total.setDescription('cookies - put')
fwCookies_lenfwCookies_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 4, 7), Unsigned32()).setLabel("fwCookies-lenfwCookies-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwCookies_lenfwCookies_total.setStatus('current')
if mibBuilder.loadTexts: fwCookies_lenfwCookies_total.setDescription('cookies - len')
fwChains_alloc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 5, 1), Unsigned32()).setLabel("fwChains-alloc").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwChains_alloc.setStatus('current')
if mibBuilder.loadTexts: fwChains_alloc.setDescription('chains - alloc')
fwChains_free = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 5, 2), Unsigned32()).setLabel("fwChains-free").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwChains_free.setStatus('current')
if mibBuilder.loadTexts: fwChains_free.setDescription('chains - free')
fwFrag_fragments = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 6, 1), Unsigned32()).setLabel("fwFrag-fragments").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwFrag_fragments.setStatus('current')
if mibBuilder.loadTexts: fwFrag_fragments.setDescription('fragments - fragments')
fwFrag_expired = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 6, 2), Unsigned32()).setLabel("fwFrag-expired").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwFrag_expired.setStatus('current')
if mibBuilder.loadTexts: fwFrag_expired.setDescription('fragments - expired')
fwFrag_packets = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 6, 3), Unsigned32()).setLabel("fwFrag-packets").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwFrag_packets.setStatus('current')
if mibBuilder.loadTexts: fwFrag_packets.setDescription('fragments - packets')
fwUfpHitRatio = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 8, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwUfpHitRatio.setStatus('current')
if mibBuilder.loadTexts: fwUfpHitRatio.setDescription('ufp - % hits ratio')
fwUfpInspected = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 8, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwUfpInspected.setStatus('current')
if mibBuilder.loadTexts: fwUfpInspected.setDescription('ufp - total connections')
fwUfpHits = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 8, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwUfpHits.setStatus('current')
if mibBuilder.loadTexts: fwUfpHits.setDescription('ufp - hits connections')
fwSS_http_pid = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 1), Unsigned32()).setLabel("fwSS-http-pid").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_pid.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_pid.setDescription('http - pid')
fwSS_http_proto = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 2), Unsigned32()).setLabel("fwSS-http-proto").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_proto.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_proto.setDescription('http - proto')
fwSS_http_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 3), Integer32()).setLabel("fwSS-http-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_port.setDescription('http - port')
fwSS_http_logical_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 4), Integer32()).setLabel("fwSS-http-logical-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_logical_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_logical_port.setDescription('http - logical port')
fwSS_http_max_avail_socket = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 5), Unsigned32()).setLabel("fwSS-http-max-avail-socket").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_max_avail_socket.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_max_avail_socket.setDescription('http - max avail socket')
fwSS_http_socket_in_use_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 6), Unsigned32()).setLabel("fwSS-http-socket-in-use-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_socket_in_use_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_socket_in_use_max.setDescription('http - socket in use max')
fwSS_http_socket_in_use_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 7), Unsigned32()).setLabel("fwSS-http-socket-in-use-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_socket_in_use_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_socket_in_use_curr.setDescription('http - socket in use current')
fwSS_http_socket_in_use_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 8), Unsigned32()).setLabel("fwSS-http-socket-in-use-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_socket_in_use_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_socket_in_use_count.setDescription('http - socket in use count')
fwSS_http_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 9), Unsigned32()).setLabel("fwSS-http-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_sess_max.setDescription('http - session max')
fwSS_http_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 10), Unsigned32()).setLabel("fwSS-http-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_sess_curr.setDescription('http - session current')
fwSS_http_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 11), Unsigned32()).setLabel("fwSS-http-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_sess_count.setDescription('http - session count')
fwSS_http_auth_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 12), Unsigned32()).setLabel("fwSS-http-auth-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_auth_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_auth_sess_max.setDescription('http - auth session max')
fwSS_http_auth_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 13), Unsigned32()).setLabel("fwSS-http-auth-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_auth_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_auth_sess_curr.setDescription('http - auth session current')
fwSS_http_auth_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 14), Unsigned32()).setLabel("fwSS-http-auth-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_auth_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_auth_sess_count.setDescription('http - auth session count')
fwSS_http_accepted_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 15), Unsigned32()).setLabel("fwSS-http-accepted-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_accepted_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_accepted_sess.setDescription('http - accepted session')
fwSS_http_rejected_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 16), Unsigned32()).setLabel("fwSS-http-rejected-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_rejected_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_rejected_sess.setDescription('http - rejected session')
fwSS_http_auth_failures = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 17), Unsigned32()).setLabel("fwSS-http-auth-failures").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_auth_failures.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_auth_failures.setDescription('http - auth failures')
fwSS_http_ops_cvp_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 18), Unsigned32()).setLabel("fwSS-http-ops-cvp-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_ops_cvp_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_ops_cvp_sess_max.setDescription('http - opsec cvp session max')
fwSS_http_ops_cvp_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 19), Unsigned32()).setLabel("fwSS-http-ops-cvp-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_ops_cvp_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_ops_cvp_sess_curr.setDescription('http - opsec cvp session current')
fwSS_http_ops_cvp_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 20), Unsigned32()).setLabel("fwSS-http-ops-cvp-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_ops_cvp_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_ops_cvp_sess_count.setDescription('http - opsec cvp session count')
fwSS_http_ops_cvp_rej_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 21), Unsigned32()).setLabel("fwSS-http-ops-cvp-rej-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_ops_cvp_rej_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_ops_cvp_rej_sess.setDescription('http - opsec cvp rej session')
fwSS_http_ssl_encryp_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 22), Unsigned32()).setLabel("fwSS-http-ssl-encryp-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_ssl_encryp_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_ssl_encryp_sess_max.setDescription('http - ssl encryp session max')
fwSS_http_ssl_encryp_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 23), Unsigned32()).setLabel("fwSS-http-ssl-encryp-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_ssl_encryp_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_ssl_encryp_sess_curr.setDescription('http - ssl encryp session current')
fwSS_http_ssl_encryp_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 24), Unsigned32()).setLabel("fwSS-http-ssl-encryp-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_ssl_encryp_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_ssl_encryp_sess_count.setDescription('http - ssl encryp session count')
fwSS_http_transp_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 25), Unsigned32()).setLabel("fwSS-http-transp-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_transp_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_transp_sess_max.setDescription('http - transparent session max')
fwSS_http_transp_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 26), Unsigned32()).setLabel("fwSS-http-transp-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_transp_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_transp_sess_curr.setDescription('http - transparent session current')
fwSS_http_transp_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 27), Unsigned32()).setLabel("fwSS-http-transp-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_transp_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_transp_sess_count.setDescription('http - transparent session count')
fwSS_http_proxied_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 28), Unsigned32()).setLabel("fwSS-http-proxied-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_proxied_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_proxied_sess_max.setDescription('http - proxied session max')
fwSS_http_proxied_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 29), Unsigned32()).setLabel("fwSS-http-proxied-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_proxied_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_proxied_sess_curr.setDescription('http - proxied session current')
fwSS_http_proxied_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 30), Unsigned32()).setLabel("fwSS-http-proxied-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_proxied_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_proxied_sess_count.setDescription('http - proxied session count')
fwSS_http_tunneled_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 31), Unsigned32()).setLabel("fwSS-http-tunneled-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_tunneled_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_tunneled_sess_max.setDescription('http - tunneled session max')
fwSS_http_tunneled_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 32), Unsigned32()).setLabel("fwSS-http-tunneled-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_tunneled_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_tunneled_sess_curr.setDescription('http - tunneled session current')
fwSS_http_tunneled_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 33), Unsigned32()).setLabel("fwSS-http-tunneled-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_tunneled_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_tunneled_sess_count.setDescription('http - tunneled session count')
fwSS_http_ftp_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 34), Unsigned32()).setLabel("fwSS-http-ftp-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_ftp_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_ftp_sess_max.setDescription('http - ftp session max')
fwSS_http_ftp_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 35), Unsigned32()).setLabel("fwSS-http-ftp-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_ftp_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_ftp_sess_curr.setDescription('http - ftp session current')
fwSS_http_ftp_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 36), Unsigned32()).setLabel("fwSS-http-ftp-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_ftp_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_ftp_sess_count.setDescription('http - ftp session count')
fwSS_http_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("fwSS-http-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_time_stamp.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_time_stamp.setDescription('http - time stamp')
fwSS_http_is_alive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 38), Unsigned32()).setLabel("fwSS-http-is-alive").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_is_alive.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_is_alive.setDescription('http - is alive')
fwSS_http_blocked_cnt = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 39), Unsigned32()).setLabel("fwSS-http-blocked-cnt").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_blocked_cnt.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_blocked_cnt.setDescription("count of HTTP items blocked, being classified as 'infected' by Anti Virus")
fwSS_http_blocked_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 40), Unsigned32()).setLabel("fwSS-http-blocked-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_blocked_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_blocked_total.setDescription('sum of all the counts of the previous OID (fwss-http-blocked-cnt)')
fwSS_http_scanned_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 41), Unsigned32()).setLabel("fwSS-http-scanned-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_scanned_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_scanned_total.setDescription("sum of all the counts of 'blocked' (infected) and 'passed' items")
fwSS_http_blocked_by_file_type = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 42), Unsigned32()).setLabel("fwSS-http-blocked-by-file-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_blocked_by_file_type.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_blocked_by_file_type.setDescription("count of HTTP items blocked by 'file type' policy in Content Inspection tab in SmartDashboard")
fwSS_http_blocked_by_size_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 43), Unsigned32()).setLabel("fwSS-http-blocked-by-size-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_blocked_by_size_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_blocked_by_size_limit.setDescription("count of HTTP items blocked by 'size limit' policy in Content Inspection tab in SmartDashboard")
fwSS_http_blocked_by_archive_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 44), Unsigned32()).setLabel("fwSS-http-blocked-by-archive-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_blocked_by_archive_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_blocked_by_archive_limit.setDescription("count of HTTP items blocked by 'archive limit' policy in Content Inspection tab in SmartDashboard")
fwSS_http_blocked_by_internal_error = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 45), Unsigned32()).setLabel("fwSS-http-blocked-by-internal-error").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_blocked_by_internal_error.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_blocked_by_internal_error.setDescription("count of HTTP items blocked because of 'internal error' in Content Inspection tab in SmartDashboard")
fwSS_http_passed_cnt = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 46), Unsigned32()).setLabel("fwSS-http-passed-cnt").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_passed_cnt.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_passed_cnt.setDescription("count of HTTP items passed, being classified as 'safe' by Anti Virus")
fwSS_http_passed_by_file_type = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 47), Unsigned32()).setLabel("fwSS-http-passed-by-file-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_passed_by_file_type.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_passed_by_file_type.setDescription("count of HTTP items allowed (without AV scan) by 'File Type' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_http_passed_by_size_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 48), Unsigned32()).setLabel("fwSS-http-passed-by-size-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_passed_by_size_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_passed_by_size_limit.setDescription("count of HTTP items allowed (without AV scan) by 'Size Limit' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_http_passed_by_archive_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 49), Unsigned32()).setLabel("fwSS-http-passed-by-archive-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_passed_by_archive_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_passed_by_archive_limit.setDescription("count of HTTP items allowed (without AV scan) by 'Archive Limit' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_http_passed_by_internal_error = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 50), Unsigned32()).setLabel("fwSS-http-passed-by-internal-error").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_passed_by_internal_error.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_passed_by_internal_error.setDescription("count of HTTP items allowed (without AV scan) by 'internal error' in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_http_passed_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 51), Unsigned32()).setLabel("fwSS-http-passed-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_passed_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_passed_total.setDescription("sum of all the above 'passed' counts - OIDs .46 to .50")
fwSS_http_blocked_by_AV_settings = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 52), Unsigned32()).setLabel("fwSS-http-blocked-by-AV-settings").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_blocked_by_AV_settings.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_blocked_by_AV_settings.setDescription("count of HTTP items rejected by Anti Virus as either: \n\t  \t\t        exceeding size or archive limits, or failed scan due to \n\t  \t\t        internal error (configured in the 'settings' pane in \n\t  \t\t        'Content Inspection' tab in SmartDashboard)")
fwSS_http_passed_by_AV_settings = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 53), Unsigned32()).setLabel("fwSS-http-passed-by-AV-settings").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_passed_by_AV_settings.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_passed_by_AV_settings.setDescription("count of HTTP items allowed by Anti Virus as either: \n\t  \t\t        exceeding size or archive limits, or failed scan due to \n\t  \t\t        internal error (configured in the 'settings' pane in \n\t  \t\t        'Content Inspection' tab in SmartDashboard)")
fwSS_http_blocked_by_URL_filter_category = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 54), Unsigned32()).setLabel("fwSS-http-blocked-by-URL-filter-category").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_blocked_by_URL_filter_category.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_blocked_by_URL_filter_category.setDescription("count of URLs blocked by 'Web Filtering Policy' in 'Content Inspection' tab in SmartDashboard")
fwSS_http_blocked_by_URL_block_list = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 55), Unsigned32()).setLabel("fwSS-http-blocked-by-URL-block-list").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_blocked_by_URL_block_list.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_blocked_by_URL_block_list.setDescription("count of URLs blocked by 'Blocked URLs/IPs' in 'Content Inspection' tab in SmartDashboard \n\t  \t\t        (overriding 'Web Filtering Policy').")
fwSS_http_passed_by_URL_allow_list = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 56), Unsigned32()).setLabel("fwSS-http-passed-by-URL-allow-list").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_passed_by_URL_allow_list.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_passed_by_URL_allow_list.setDescription("count of Allowed by 'allowed URLs/IPs' in 'Content Inspection' tab in SmartDashboard \n\t  \t\t        (overriding 'Web Filtering Policy')")
fwSS_http_passed_by_URL_filter_category = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 1, 57), Unsigned32()).setLabel("fwSS-http-passed-by-URL-filter-category").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_http_passed_by_URL_filter_category.setStatus('current')
if mibBuilder.loadTexts: fwSS_http_passed_by_URL_filter_category.setDescription("count of URLs allowed by 'Web Filtering Policy' in 'Content Inspection' tab in SmartDashboard.")
fwSS_ftp_pid = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 1), Unsigned32()).setLabel("fwSS-ftp-pid").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_pid.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_pid.setDescription('ftp - pid')
fwSS_ftp_proto = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 2), Unsigned32()).setLabel("fwSS-ftp-proto").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_proto.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_proto.setDescription('ftp - proto')
fwSS_ftp_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 3), Integer32()).setLabel("fwSS-ftp-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_port.setDescription('ftp - port')
fwSS_ftp_logical_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 4), Integer32()).setLabel("fwSS-ftp-logical-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_logical_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_logical_port.setDescription('ftp - logical port')
fwSS_ftp_max_avail_socket = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 5), Unsigned32()).setLabel("fwSS-ftp-max-avail-socket").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_max_avail_socket.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_max_avail_socket.setDescription('ftp - max avail socket')
fwSS_ftp_socket_in_use_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 6), Unsigned32()).setLabel("fwSS-ftp-socket-in-use-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_socket_in_use_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_socket_in_use_max.setDescription('ftp - socket in use max')
fwSS_ftp_socket_in_use_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 7), Unsigned32()).setLabel("fwSS-ftp-socket-in-use-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_socket_in_use_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_socket_in_use_curr.setDescription('ftp - socket in use current')
fwSS_ftp_socket_in_use_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 8), Unsigned32()).setLabel("fwSS-ftp-socket-in-use-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_socket_in_use_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_socket_in_use_count.setDescription('ftp - socket in use count')
fwSS_ftp_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 9), Unsigned32()).setLabel("fwSS-ftp-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_sess_max.setDescription('ftp - session max')
fwSS_ftp_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 10), Unsigned32()).setLabel("fwSS-ftp-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_sess_curr.setDescription('ftp - session current')
fwSS_ftp_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 11), Unsigned32()).setLabel("fwSS-ftp-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_sess_count.setDescription('ftp - session count')
fwSS_ftp_auth_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 12), Unsigned32()).setLabel("fwSS-ftp-auth-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_auth_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_auth_sess_max.setDescription('ftp - auth session max')
fwSS_ftp_auth_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 13), Unsigned32()).setLabel("fwSS-ftp-auth-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_auth_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_auth_sess_curr.setDescription('ftp - auth session current')
fwSS_ftp_auth_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 14), Unsigned32()).setLabel("fwSS-ftp-auth-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_auth_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_auth_sess_count.setDescription('ftp - auth session count')
fwSS_ftp_accepted_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 15), Unsigned32()).setLabel("fwSS-ftp-accepted-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_accepted_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_accepted_sess.setDescription('ftp - accepted session')
fwSS_ftp_rejected_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 16), Unsigned32()).setLabel("fwSS-ftp-rejected-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_rejected_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_rejected_sess.setDescription('ftp - rejected session')
fwSS_ftp_auth_failures = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 17), Unsigned32()).setLabel("fwSS-ftp-auth-failures").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_auth_failures.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_auth_failures.setDescription('ftp - auth failures')
fwSS_ftp_ops_cvp_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 18), Unsigned32()).setLabel("fwSS-ftp-ops-cvp-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_ops_cvp_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_ops_cvp_sess_max.setDescription('ftp - opsec cvp session max')
fwSS_ftp_ops_cvp_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 19), Unsigned32()).setLabel("fwSS-ftp-ops-cvp-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_ops_cvp_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_ops_cvp_sess_curr.setDescription('ftp - opsec cvp session current')
fwSS_ftp_ops_cvp_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 20), Unsigned32()).setLabel("fwSS-ftp-ops-cvp-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_ops_cvp_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_ops_cvp_sess_count.setDescription('ftp - opsec cvp session count')
fwSS_ftp_ops_cvp_rej_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 21), Unsigned32()).setLabel("fwSS-ftp-ops-cvp-rej-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_ops_cvp_rej_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_ops_cvp_rej_sess.setDescription('ftp - opsec cvp rej session')
fwSS_ftp_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("fwSS-ftp-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_time_stamp.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_time_stamp.setDescription('ftp - time stamp')
fwSS_ftp_is_alive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 23), Unsigned32()).setLabel("fwSS-ftp-is-alive").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_is_alive.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_is_alive.setDescription('ftp - is alive')
fwSS_ftp_blocked_cnt = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 24), Unsigned32()).setLabel("fwSS-ftp-blocked-cnt").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_blocked_cnt.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_blocked_cnt.setDescription("count of ftp items blocked, being classified as 'infected' by Anti Virus")
fwSS_ftp_blocked_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 25), Unsigned32()).setLabel("fwSS-ftp-blocked-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_blocked_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_blocked_total.setDescription('sum of all the counts of the previous OID (fwss-ftp-blocked-cnt)')
fwSS_ftp_scanned_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 26), Unsigned32()).setLabel("fwSS-ftp-scanned-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_scanned_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_scanned_total.setDescription("sum of all the counts of 'blocked' (infected) and 'passed' items")
fwSS_ftp_blocked_by_file_type = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 27), Unsigned32()).setLabel("fwSS-ftp-blocked-by-file-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_blocked_by_file_type.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_blocked_by_file_type.setDescription("count of ftp items blocked by 'file type' policy in Content Inspection tab in SmartDashboard")
fwSS_ftp_blocked_by_size_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 28), Unsigned32()).setLabel("fwSS-ftp-blocked-by-size-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_blocked_by_size_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_blocked_by_size_limit.setDescription("count of ftp items blocked by 'size limit' policy in Content Inspection tab in SmartDashboard")
fwSS_ftp_blocked_by_archive_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 29), Unsigned32()).setLabel("fwSS-ftp-blocked-by-archive-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_blocked_by_archive_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_blocked_by_archive_limit.setDescription("count of ftp items blocked by 'archive limit' policy in Content Inspection tab in SmartDashboard")
fwSS_ftp_blocked_by_internal_error = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 30), Unsigned32()).setLabel("fwSS-ftp-blocked-by-internal-error").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_blocked_by_internal_error.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_blocked_by_internal_error.setDescription("count of ftp items blocked because of 'internal error' in Content Inspection tab in SmartDashboard")
fwSS_ftp_passed_cnt = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 31), Unsigned32()).setLabel("fwSS-ftp-passed-cnt").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_passed_cnt.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_passed_cnt.setDescription("count of ftp items passed, being classified as 'safe' by Anti Virus")
fwSS_ftp_passed_by_file_type = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 32), Unsigned32()).setLabel("fwSS-ftp-passed-by-file-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_passed_by_file_type.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_passed_by_file_type.setDescription("count of ftp items allowed (without AV scan) by 'File Type' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_ftp_passed_by_size_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 33), Unsigned32()).setLabel("fwSS-ftp-passed-by-size-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_passed_by_size_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_passed_by_size_limit.setDescription("count of ftp items allowed (without AV scan) by 'Size Limit' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_ftp_passed_by_archive_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 34), Unsigned32()).setLabel("fwSS-ftp-passed-by-archive-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_passed_by_archive_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_passed_by_archive_limit.setDescription("count of ftp items allowed (without AV scan) by 'Archive Limit' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_ftp_passed_by_internal_error = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 35), Unsigned32()).setLabel("fwSS-ftp-passed-by-internal-error").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_passed_by_internal_error.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_passed_by_internal_error.setDescription("count of ftp items allowed (without AV scan) by 'internal error' in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_ftp_passed_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 36), Unsigned32()).setLabel("fwSS-ftp-passed-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_passed_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_passed_total.setDescription("sum of all the above 'passed' counts - OIDs .31 to .35")
fwSS_ftp_blocked_by_AV_settings = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 37), Unsigned32()).setLabel("fwSS-ftp-blocked-by-AV-settings").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_blocked_by_AV_settings.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_blocked_by_AV_settings.setDescription("count of ftp items rejected by Anti Virus as either: \n\t  \t\t        exceeding size or archive limits, or failed scan due to \n\t  \t\t        internal error (configured in the 'settings' pane in \n\t  \t\t        'Content Inspection' tab in SmartDashboard)")
fwSS_ftp_passed_by_AV_settings = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 2, 38), Unsigned32()).setLabel("fwSS-ftp-passed-by-AV-settings").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ftp_passed_by_AV_settings.setStatus('current')
if mibBuilder.loadTexts: fwSS_ftp_passed_by_AV_settings.setDescription("count of ftp items allowed by Anti Virus as either: \n\t  \t\t        exceeding size or archive limits, or failed scan due to \n\t  \t\t        internal error (configured in the 'settings' pane in \n\t  \t\t        'Content Inspection' tab in SmartDashboard)")
fwSS_telnet_pid = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 1), Unsigned32()).setLabel("fwSS-telnet-pid").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_pid.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_pid.setDescription('telnet - pid')
fwSS_telnet_proto = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 2), Unsigned32()).setLabel("fwSS-telnet-proto").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_proto.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_proto.setDescription('telnet - proto')
fwSS_telnet_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 3), Integer32()).setLabel("fwSS-telnet-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_port.setDescription('telnet - port')
fwSS_telnet_logical_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 4), Integer32()).setLabel("fwSS-telnet-logical-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_logical_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_logical_port.setDescription('telnet - logical port')
fwSS_telnet_max_avail_socket = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 5), Unsigned32()).setLabel("fwSS-telnet-max-avail-socket").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_max_avail_socket.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_max_avail_socket.setDescription('telnet - max avail socket')
fwSS_telnet_socket_in_use_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 6), Unsigned32()).setLabel("fwSS-telnet-socket-in-use-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_socket_in_use_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_socket_in_use_max.setDescription('telnet - socket in use max')
fwSS_telnet_socket_in_use_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 7), Unsigned32()).setLabel("fwSS-telnet-socket-in-use-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_socket_in_use_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_socket_in_use_curr.setDescription('telnet - socket in use current')
fwSS_telnet_socket_in_use_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 8), Unsigned32()).setLabel("fwSS-telnet-socket-in-use-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_socket_in_use_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_socket_in_use_count.setDescription('telnet - socket in use count')
fwSS_telnet_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 9), Unsigned32()).setLabel("fwSS-telnet-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_sess_max.setDescription('telnet - session max')
fwSS_telnet_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 10), Unsigned32()).setLabel("fwSS-telnet-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_sess_curr.setDescription('telnet - session current')
fwSS_telnet_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 11), Unsigned32()).setLabel("fwSS-telnet-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_sess_count.setDescription('telnet - session count')
fwSS_telnet_auth_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 12), Unsigned32()).setLabel("fwSS-telnet-auth-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_auth_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_auth_sess_max.setDescription('telnet - auth session max')
fwSS_telnet_auth_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 13), Unsigned32()).setLabel("fwSS-telnet-auth-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_auth_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_auth_sess_curr.setDescription('telnet - auth session current')
fwSS_telnet_auth_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 14), Unsigned32()).setLabel("fwSS-telnet-auth-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_auth_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_auth_sess_count.setDescription('telnet - auth session count')
fwSS_telnet_accepted_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 15), Unsigned32()).setLabel("fwSS-telnet-accepted-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_accepted_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_accepted_sess.setDescription('telnet - accepted session')
fwSS_telnet_rejected_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 16), Unsigned32()).setLabel("fwSS-telnet-rejected-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_rejected_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_rejected_sess.setDescription('telnet - rejected session')
fwSS_telnet_auth_failures = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 17), Unsigned32()).setLabel("fwSS-telnet-auth-failures").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_auth_failures.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_auth_failures.setDescription('telnet - auth failures')
fwSS_telnet_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("fwSS-telnet-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_time_stamp.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_time_stamp.setDescription('telnet - time stamp')
fwSS_telnet_is_alive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 3, 19), Unsigned32()).setLabel("fwSS-telnet-is-alive").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_telnet_is_alive.setStatus('current')
if mibBuilder.loadTexts: fwSS_telnet_is_alive.setDescription('telnet - is alive')
fwSS_rlogin_pid = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 1), Unsigned32()).setLabel("fwSS-rlogin-pid").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_pid.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_pid.setDescription('rlogin - pid')
fwSS_rlogin_proto = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 2), Unsigned32()).setLabel("fwSS-rlogin-proto").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_proto.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_proto.setDescription('rlogin - proto')
fwSS_rlogin_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 3), Integer32()).setLabel("fwSS-rlogin-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_port.setDescription('rlogin - port')
fwSS_rlogin_logical_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 4), Integer32()).setLabel("fwSS-rlogin-logical-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_logical_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_logical_port.setDescription('rlogin - logical port')
fwSS_rlogin_max_avail_socket = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 5), Unsigned32()).setLabel("fwSS-rlogin-max-avail-socket").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_max_avail_socket.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_max_avail_socket.setDescription('rlogin - max avail socket')
fwSS_rlogin_socket_in_use_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 6), Unsigned32()).setLabel("fwSS-rlogin-socket-in-use-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_socket_in_use_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_socket_in_use_max.setDescription('rlogin - socket in use max')
fwSS_rlogin_socket_in_use_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 7), Unsigned32()).setLabel("fwSS-rlogin-socket-in-use-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_socket_in_use_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_socket_in_use_curr.setDescription('rlogin - socket in use current')
fwSS_rlogin_socket_in_use_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 8), Unsigned32()).setLabel("fwSS-rlogin-socket-in-use-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_socket_in_use_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_socket_in_use_count.setDescription('rlogin - socket in use count')
fwSS_rlogin_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 9), Unsigned32()).setLabel("fwSS-rlogin-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_sess_max.setDescription('rlogin - session max')
fwSS_rlogin_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 10), Unsigned32()).setLabel("fwSS-rlogin-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_sess_curr.setDescription('rlogin - session current')
fwSS_rlogin_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 11), Unsigned32()).setLabel("fwSS-rlogin-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_sess_count.setDescription('rlogin - session count')
fwSS_rlogin_auth_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 12), Unsigned32()).setLabel("fwSS-rlogin-auth-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_auth_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_auth_sess_max.setDescription('rlogin - auth session max')
fwSS_rlogin_auth_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 13), Unsigned32()).setLabel("fwSS-rlogin-auth-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_auth_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_auth_sess_curr.setDescription('rlogin - auth session current')
fwSS_rlogin_auth_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 14), Unsigned32()).setLabel("fwSS-rlogin-auth-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_auth_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_auth_sess_count.setDescription('rlogin - auth session count')
fwSS_rlogin_accepted_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 15), Unsigned32()).setLabel("fwSS-rlogin-accepted-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_accepted_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_accepted_sess.setDescription('rlogin - accepted session')
fwSS_rlogin_rejected_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 16), Unsigned32()).setLabel("fwSS-rlogin-rejected-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_rejected_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_rejected_sess.setDescription('rlogin - rejected session')
fwSS_rlogin_auth_failures = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 17), Unsigned32()).setLabel("fwSS-rlogin-auth-failures").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_auth_failures.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_auth_failures.setDescription('rlogin - auth failures')
fwSS_rlogin_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("fwSS-rlogin-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_time_stamp.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_time_stamp.setDescription('rlogin - time stamp')
fwSS_rlogin_is_alive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 4, 19), Unsigned32()).setLabel("fwSS-rlogin-is-alive").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_rlogin_is_alive.setStatus('current')
if mibBuilder.loadTexts: fwSS_rlogin_is_alive.setDescription('rlogin - is alive')
fwSS_ufp_ops_ufp_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 5, 1), Unsigned32()).setLabel("fwSS-ufp-ops-ufp-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ufp_ops_ufp_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_ufp_ops_ufp_sess_max.setDescription('ufp - session max')
fwSS_ufp_ops_ufp_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 5, 2), Unsigned32()).setLabel("fwSS-ufp-ops-ufp-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ufp_ops_ufp_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_ufp_ops_ufp_sess_curr.setDescription('ufp - session current')
fwSS_ufp_ops_ufp_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 5, 3), Unsigned32()).setLabel("fwSS-ufp-ops-ufp-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ufp_ops_ufp_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_ufp_ops_ufp_sess_count.setDescription('ufp - session count')
fwSS_ufp_ops_ufp_rej_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 5, 4), Unsigned32()).setLabel("fwSS-ufp-ops-ufp-rej-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ufp_ops_ufp_rej_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_ufp_ops_ufp_rej_sess.setDescription('ufp - rej session')
fwSS_ufp_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("fwSS-ufp-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ufp_time_stamp.setStatus('current')
if mibBuilder.loadTexts: fwSS_ufp_time_stamp.setDescription('ufp - time stamp')
fwSS_ufp_is_alive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 5, 6), Unsigned32()).setLabel("fwSS-ufp-is-alive").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_ufp_is_alive.setStatus('current')
if mibBuilder.loadTexts: fwSS_ufp_is_alive.setDescription('ufp - is alive')
fwSS_smtp_pid = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 1), Unsigned32()).setLabel("fwSS-smtp-pid").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_pid.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_pid.setDescription('smtp - pid')
fwSS_smtp_proto = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 2), Unsigned32()).setLabel("fwSS-smtp-proto").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_proto.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_proto.setDescription('smtp - proto')
fwSS_smtp_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 3), Integer32()).setLabel("fwSS-smtp-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_port.setDescription('smtp - port')
fwSS_smtp_logical_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 4), Integer32()).setLabel("fwSS-smtp-logical-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_logical_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_logical_port.setDescription('smtp - logical port')
fwSS_smtp_max_avail_socket = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 5), Unsigned32()).setLabel("fwSS-smtp-max-avail-socket").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_max_avail_socket.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_max_avail_socket.setDescription('smtp - max avail socket')
fwSS_smtp_socket_in_use_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 6), Unsigned32()).setLabel("fwSS-smtp-socket-in-use-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_socket_in_use_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_socket_in_use_max.setDescription('smtp - socket in use max')
fwSS_smtp_socket_in_use_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 7), Unsigned32()).setLabel("fwSS-smtp-socket-in-use-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_socket_in_use_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_socket_in_use_curr.setDescription('smtp - socket in use current')
fwSS_smtp_socket_in_use_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 8), Unsigned32()).setLabel("fwSS-smtp-socket-in-use-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_socket_in_use_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_socket_in_use_count.setDescription('smtp - socket in use count')
fwSS_smtp_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 9), Unsigned32()).setLabel("fwSS-smtp-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_sess_max.setDescription('smtp - session max')
fwSS_smtp_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 10), Unsigned32()).setLabel("fwSS-smtp-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_sess_curr.setDescription('smtp - session current')
fwSS_smtp_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 11), Unsigned32()).setLabel("fwSS-smtp-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_sess_count.setDescription('smtp - session count')
fwSS_smtp_auth_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 12), Unsigned32()).setLabel("fwSS-smtp-auth-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_auth_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_auth_sess_max.setDescription('smtp - auth session max')
fwSS_smtp_auth_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 13), Unsigned32()).setLabel("fwSS-smtp-auth-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_auth_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_auth_sess_curr.setDescription('smtp - auth session current')
fwSS_smtp_auth_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 14), Unsigned32()).setLabel("fwSS-smtp-auth-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_auth_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_auth_sess_count.setDescription('smtp - auth session count')
fwSS_smtp_accepted_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 15), Unsigned32()).setLabel("fwSS-smtp-accepted-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_accepted_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_accepted_sess.setDescription('smtp - accepted session')
fwSS_smtp_rejected_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 16), Unsigned32()).setLabel("fwSS-smtp-rejected-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_rejected_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_rejected_sess.setDescription('smtp - rejected session')
fwSS_smtp_auth_failures = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 17), Unsigned32()).setLabel("fwSS-smtp-auth-failures").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_auth_failures.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_auth_failures.setDescription('smtp - auth failures')
fwSS_smtp_mail_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 18), Unsigned32()).setLabel("fwSS-smtp-mail-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_mail_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_mail_max.setDescription('smtp - mail max')
fwSS_smtp_mail_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 19), Unsigned32()).setLabel("fwSS-smtp-mail-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_mail_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_mail_curr.setDescription('smtp - mail curr')
fwSS_smtp_mail_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 20), Unsigned32()).setLabel("fwSS-smtp-mail-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_mail_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_mail_count.setDescription('smtp - mail count')
fwSS_smtp_outgoing_mail_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 21), Unsigned32()).setLabel("fwSS-smtp-outgoing-mail-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_outgoing_mail_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_outgoing_mail_max.setDescription('smtp - outgoing mail max')
fwSS_smtp_outgoing_mail_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 22), Unsigned32()).setLabel("fwSS-smtp-outgoing-mail-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_outgoing_mail_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_outgoing_mail_curr.setDescription('smtp - outgoing mail curr')
fwSS_smtp_outgoing_mail_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 23), Unsigned32()).setLabel("fwSS-smtp-outgoing-mail-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_outgoing_mail_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_outgoing_mail_count.setDescription('smtp - outgoing mail count')
fwSS_smtp_max_mail_on_conn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 24), Unsigned32()).setLabel("fwSS-smtp-max-mail-on-conn").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_max_mail_on_conn.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_max_mail_on_conn.setDescription('smtp - max mail on conn')
fwSS_smtp_total_mails = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 25), Unsigned32()).setLabel("fwSS-smtp-total-mails").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_total_mails.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_total_mails.setDescription('smtp - total mails')
fwSS_smtp_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("fwSS-smtp-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_time_stamp.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_time_stamp.setDescription('smtp - time stamp')
fwSS_smtp_is_alive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 27), Unsigned32()).setLabel("fwSS-smtp-is-alive").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_is_alive.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_is_alive.setDescription('smtp - is alive')
fwSS_smtp_blocked_cnt = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 28), Unsigned32()).setLabel("fwSS-smtp-blocked-cnt").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_blocked_cnt.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_blocked_cnt.setDescription("count of smtp items blocked, being classified as 'infected' by Anti Virus")
fwSS_smtp_blocked_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 29), Unsigned32()).setLabel("fwSS-smtp-blocked-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_blocked_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_blocked_total.setDescription('sum of all the counts of the previous OID (fwss-smtp-blocked-cnt)')
fwSS_smtp_scanned_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 30), Unsigned32()).setLabel("fwSS-smtp-scanned-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_scanned_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_scanned_total.setDescription("sum of all the counts of 'blocked' (infected) and 'passed' items")
fwSS_smtp_blocked_by_file_type = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 31), Unsigned32()).setLabel("fwSS-smtp-blocked-by-file-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_blocked_by_file_type.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_blocked_by_file_type.setDescription("count of smtp items blocked by 'file type' policy in Content Inspection tab in SmartDashboard")
fwSS_smtp_blocked_by_size_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 32), Unsigned32()).setLabel("fwSS-smtp-blocked-by-size-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_blocked_by_size_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_blocked_by_size_limit.setDescription("count of smtp items blocked by 'size limit' policy in Content Inspection tab in SmartDashboard")
fwSS_smtp_blocked_by_archive_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 33), Unsigned32()).setLabel("fwSS-smtp-blocked-by-archive-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_blocked_by_archive_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_blocked_by_archive_limit.setDescription("count of smtp items blocked by 'archive limit' policy in Content Inspection tab in SmartDashboard")
fwSS_smtp_blocked_by_internal_error = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 34), Unsigned32()).setLabel("fwSS-smtp-blocked-by-internal-error").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_blocked_by_internal_error.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_blocked_by_internal_error.setDescription("count of smtp items blocked because of 'internal error' in Content Inspection tab in SmartDashboard")
fwSS_smtp_passed_cnt = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 35), Unsigned32()).setLabel("fwSS-smtp-passed-cnt").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_passed_cnt.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_passed_cnt.setDescription("count of smtp items passed, being classified as 'safe' by Anti Virus")
fwSS_smtp_passed_by_file_type = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 36), Unsigned32()).setLabel("fwSS-smtp-passed-by-file-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_passed_by_file_type.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_passed_by_file_type.setDescription("count of smtp items allowed (without AV scan) by 'File Type' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_smtp_passed_by_size_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 37), Unsigned32()).setLabel("fwSS-smtp-passed-by-size-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_passed_by_size_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_passed_by_size_limit.setDescription("count of smtp items allowed (without AV scan) by 'Size Limit' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_smtp_passed_by_archive_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 38), Unsigned32()).setLabel("fwSS-smtp-passed-by-archive-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_passed_by_archive_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_passed_by_archive_limit.setDescription("count of smtp items allowed (without AV scan) by 'Archive Limit' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_smtp_passed_by_internal_error = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 39), Unsigned32()).setLabel("fwSS-smtp-passed-by-internal-error").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_passed_by_internal_error.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_passed_by_internal_error.setDescription("count of smtp items allowed (without AV scan) by 'internal error' in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_smtp_passed_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 40), Unsigned32()).setLabel("fwSS-smtp-passed-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_passed_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_passed_total.setDescription("sum of all the above 'passed' counts - OIDs .35 to .39")
fwSS_smtp_blocked_by_AV_settings = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 41), Unsigned32()).setLabel("fwSS-smtp-blocked-by-AV-settings").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_blocked_by_AV_settings.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_blocked_by_AV_settings.setDescription("count of smtp items rejected by Anti Virus as either: \n\t  \t\t        exceeding size or archive limits, or failed scan due to \n\t  \t\t        internal error (configured in the 'settings' pane in \n\t  \t\t        'Content Inspection' tab in SmartDashboard)")
fwSS_smtp_passed_by_AV_settings = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 6, 42), Unsigned32()).setLabel("fwSS-smtp-passed-by-AV-settings").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_smtp_passed_by_AV_settings.setStatus('current')
if mibBuilder.loadTexts: fwSS_smtp_passed_by_AV_settings.setDescription("count of smtp items allowed by Anti Virus as either: \n\t  \t\t        exceeding size or archive limits, or failed scan due to \n\t  \t\t        internal error (configured in the 'settings' pane in \n\t  \t\t        'Content Inspection' tab in SmartDashboard)")
fwSS_POP3_pid = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 1), Unsigned32()).setLabel("fwSS-POP3-pid").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_pid.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_pid.setDescription('POP3 - pid')
fwSS_POP3_proto = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 2), Unsigned32()).setLabel("fwSS-POP3-proto").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_proto.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_proto.setDescription('POP3 - proto')
fwSS_POP3_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 3), Integer32()).setLabel("fwSS-POP3-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_port.setDescription('POP3 - port')
fwSS_POP3_logical_port = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 4), Integer32()).setLabel("fwSS-POP3-logical-port").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_logical_port.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_logical_port.setDescription('POP3 - logical port')
fwSS_POP3_max_avail_socket = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 5), Unsigned32()).setLabel("fwSS-POP3-max-avail-socket").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_max_avail_socket.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_max_avail_socket.setDescription('POP3 - max avail socket')
fwSS_POP3_socket_in_use_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 6), Unsigned32()).setLabel("fwSS-POP3-socket-in-use-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_socket_in_use_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_socket_in_use_max.setDescription('POP3 - socket in use max')
fwSS_POP3_socket_in_use_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 7), Unsigned32()).setLabel("fwSS-POP3-socket-in-use-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_socket_in_use_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_socket_in_use_curr.setDescription('POP3 - socket in use current')
fwSS_POP3_socket_in_use_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 8), Unsigned32()).setLabel("fwSS-POP3-socket-in-use-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_socket_in_use_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_socket_in_use_count.setDescription('POP3 - socket in use count')
fwSS_POP3_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 9), Unsigned32()).setLabel("fwSS-POP3-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_sess_max.setDescription('POP3 - session max')
fwSS_POP3_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 10), Unsigned32()).setLabel("fwSS-POP3-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_sess_curr.setDescription('POP3 - session current')
fwSS_POP3_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 11), Unsigned32()).setLabel("fwSS-POP3-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_sess_count.setDescription('POP3 - session count')
fwSS_POP3_auth_sess_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 12), Unsigned32()).setLabel("fwSS-POP3-auth-sess-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_auth_sess_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_auth_sess_max.setDescription('POP3 - auth session max')
fwSS_POP3_auth_sess_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 13), Unsigned32()).setLabel("fwSS-POP3-auth-sess-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_auth_sess_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_auth_sess_curr.setDescription('POP3 - auth session current')
fwSS_POP3_auth_sess_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 14), Unsigned32()).setLabel("fwSS-POP3-auth-sess-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_auth_sess_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_auth_sess_count.setDescription('POP3 - auth session count')
fwSS_POP3_accepted_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 15), Unsigned32()).setLabel("fwSS-POP3-accepted-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_accepted_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_accepted_sess.setDescription('POP3 - accepted session')
fwSS_POP3_rejected_sess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 16), Unsigned32()).setLabel("fwSS-POP3-rejected-sess").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_rejected_sess.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_rejected_sess.setDescription('POP3 - rejected session')
fwSS_POP3_auth_failures = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 17), Unsigned32()).setLabel("fwSS-POP3-auth-failures").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_auth_failures.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_auth_failures.setDescription('POP3 - auth failures')
fwSS_POP3_mail_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 18), Unsigned32()).setLabel("fwSS-POP3-mail-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_mail_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_mail_max.setDescription('POP3 - mail max')
fwSS_POP3_mail_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 19), Unsigned32()).setLabel("fwSS-POP3-mail-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_mail_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_mail_curr.setDescription('POP3 - mail curr')
fwSS_POP3_mail_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 20), Unsigned32()).setLabel("fwSS-POP3-mail-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_mail_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_mail_count.setDescription('POP3 - mail count')
fwSS_POP3_outgoing_mail_max = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 21), Unsigned32()).setLabel("fwSS-POP3-outgoing-mail-max").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_outgoing_mail_max.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_outgoing_mail_max.setDescription('POP3 - outgoing mail max')
fwSS_POP3_outgoing_mail_curr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 22), Unsigned32()).setLabel("fwSS-POP3-outgoing-mail-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_outgoing_mail_curr.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_outgoing_mail_curr.setDescription('POP3 - outgoing mail curr')
fwSS_POP3_outgoing_mail_count = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 23), Unsigned32()).setLabel("fwSS-POP3-outgoing-mail-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_outgoing_mail_count.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_outgoing_mail_count.setDescription('POP3 - outgoing mail count')
fwSS_POP3_max_mail_on_conn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 24), Unsigned32()).setLabel("fwSS-POP3-max-mail-on-conn").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_max_mail_on_conn.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_max_mail_on_conn.setDescription('POP3 - max mail on conn')
fwSS_POP3_total_mails = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 25), Unsigned32()).setLabel("fwSS-POP3-total-mails").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_total_mails.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_total_mails.setDescription('POP3 - total mails')
fwSS_POP3_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("fwSS-POP3-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_time_stamp.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_time_stamp.setDescription('POP3 - time stamp')
fwSS_POP3_is_alive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 27), Unsigned32()).setLabel("fwSS-POP3-is-alive").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_is_alive.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_is_alive.setDescription('POP3 - is alive')
fwSS_POP3_blocked_cnt = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 28), Unsigned32()).setLabel("fwSS-POP3-blocked-cnt").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_blocked_cnt.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_blocked_cnt.setDescription("count of POP3 items blocked, being classified as 'infected' by Anti Virus")
fwSS_POP3_blocked_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 29), Unsigned32()).setLabel("fwSS-POP3-blocked-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_blocked_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_blocked_total.setDescription('sum of all the counts of the previous OID (fwss-POP3-blocked-cnt)')
fwSS_POP3_scanned_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 30), Unsigned32()).setLabel("fwSS-POP3-scanned-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_scanned_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_scanned_total.setDescription("sum of all the counts of 'blocked' (infected) and 'passed' items")
fwSS_POP3_blocked_by_file_type = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 31), Unsigned32()).setLabel("fwSS-POP3-blocked-by-file-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_blocked_by_file_type.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_blocked_by_file_type.setDescription("count of POP3 items blocked by 'file type' policy in Content Inspection tab in SmartDashboard")
fwSS_POP3_blocked_by_size_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 32), Unsigned32()).setLabel("fwSS-POP3-blocked-by-size-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_blocked_by_size_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_blocked_by_size_limit.setDescription("count of POP3 items blocked by 'size limit' policy in Content Inspection tab in SmartDashboard")
fwSS_POP3_blocked_by_archive_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 33), Unsigned32()).setLabel("fwSS-POP3-blocked-by-archive-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_blocked_by_archive_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_blocked_by_archive_limit.setDescription("count of POP3 items blocked by 'archive limit' policy in Content Inspection tab in SmartDashboard")
fwSS_POP3_blocked_by_internal_error = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 34), Unsigned32()).setLabel("fwSS-POP3-blocked-by-internal-error").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_blocked_by_internal_error.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_blocked_by_internal_error.setDescription("count of POP3 items blocked because of 'internal error' in Content Inspection tab in SmartDashboard")
fwSS_POP3_passed_cnt = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 35), Unsigned32()).setLabel("fwSS-POP3-passed-cnt").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_passed_cnt.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_passed_cnt.setDescription("count of POP3 items passed, being classified as 'safe' by Anti Virus")
fwSS_POP3_passed_by_file_type = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 36), Unsigned32()).setLabel("fwSS-POP3-passed-by-file-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_passed_by_file_type.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_passed_by_file_type.setDescription("count of POP3 items allowed (without AV scan) by 'File Type' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_POP3_passed_by_size_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 37), Unsigned32()).setLabel("fwSS-POP3-passed-by-size-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_passed_by_size_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_passed_by_size_limit.setDescription("count of POP3 items allowed (without AV scan) by 'Size Limit' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_POP3_passed_by_archive_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 38), Unsigned32()).setLabel("fwSS-POP3-passed-by-archive-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_passed_by_archive_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_passed_by_archive_limit.setDescription("count of POP3 items allowed (without AV scan) by 'Archive Limit' policy in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_POP3_passed_by_internal_error = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 39), Unsigned32()).setLabel("fwSS-POP3-passed-by-internal-error").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_passed_by_internal_error.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_passed_by_internal_error.setDescription("count of POP3 items allowed (without AV scan) by 'internal error' in Content Inspection tab in \n\t  \t\t         SmartDashboard")
fwSS_POP3_passed_total = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 40), Unsigned32()).setLabel("fwSS-POP3-passed-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_passed_total.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_passed_total.setDescription("sum of all the above 'passed' counts - OIDs .35 to .39")
fwSS_POP3_blocked_by_AV_settings = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 41), Unsigned32()).setLabel("fwSS-POP3-blocked-by-AV-settings").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_blocked_by_AV_settings.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_blocked_by_AV_settings.setDescription("count of POP3 items rejected by Anti Virus as either: \n\t  \t\t        exceeding size or archive limits, or failed scan due to \n\t  \t\t        internal error (configured in the 'settings' pane in \n\t  \t\t        'Content Inspection' tab in SmartDashboard)")
fwSS_POP3_passed_by_AV_settings = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 7, 42), Unsigned32()).setLabel("fwSS-POP3-passed-by-AV-settings").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_POP3_passed_by_AV_settings.setStatus('current')
if mibBuilder.loadTexts: fwSS_POP3_passed_by_AV_settings.setDescription("count of POP3 items allowed by Anti Virus as either: \n\t  \t\t        exceeding size or archive limits, or failed scan due to \n\t  \t\t        internal error (configured in the 'settings' pane in \n\t  \t\t        'Content Inspection' tab in SmartDashboard)")
fwSS_total_blocked_by_av = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 1), Unsigned32()).setLabel("fwSS-total-blocked-by-av").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_blocked_by_av.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_blocked_by_av.setDescription('total blocked items for all services (HTTP,FTP,POP3,SMTP)')
fwSS_total_blocked = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 2), Unsigned32()).setLabel("fwSS-total-blocked").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_blocked.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_blocked.setDescription('total blocked items for all policies (filetype,size limit, archive limit,internal error)')
fwSS_total_scanned = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 3), Unsigned32()).setLabel("fwSS-total-scanned").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_scanned.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_scanned.setDescription('total scanned items for all services (HTTP,FTP,POP3,SMTP)')
fwSS_total_blocked_by_file_type = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 4), Unsigned32()).setLabel("fwSS-total-blocked-by-file-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_blocked_by_file_type.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_blocked_by_file_type.setDescription("total blocked items by 'File Type' policy for all services (HTTP,FTP,POP3,SMTP)")
fwSS_total_blocked_by_size_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 5), Unsigned32()).setLabel("fwSS-total-blocked-by-size-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_blocked_by_size_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_blocked_by_size_limit.setDescription("total blocked items by 'Size Limit' policy for all services (HTTP,FTP,POP3,SMTP)")
fwSS_total_blocked_by_archive_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 6), Unsigned32()).setLabel("fwSS-total-blocked-by-archive-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_blocked_by_archive_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_blocked_by_archive_limit.setDescription("total blocked items by 'Archive Limit' policy for all services (HTTP,FTP,POP3,SMTP)")
fwSS_total_blocked_by_interal_error = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 7), Unsigned32()).setLabel("fwSS-total-blocked-by-interal-error").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_blocked_by_interal_error.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_blocked_by_interal_error.setDescription("total blocked items by 'Internal Error' for all services (HTTP,FTP,POP3,SMTP)")
fwSS_total_passed_by_av = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 8), Unsigned32()).setLabel("fwSS-total-passed-by-av").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_passed_by_av.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_passed_by_av.setDescription('total passed items for all services (HTTP,FTP,POP3,SMTP)')
fwSS_total_passed_by_file_type = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 9), Unsigned32()).setLabel("fwSS-total-passed-by-file-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_passed_by_file_type.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_passed_by_file_type.setDescription("total passed items by 'File Type' policy for all services (HTTP,FTP,POP3,SMTP)")
fwSS_total_passed_by_size_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 10), Unsigned32()).setLabel("fwSS-total-passed-by-size-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_passed_by_size_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_passed_by_size_limit.setDescription("total passed items by 'Size Limit' policy for all services (HTTP,FTP,POP3,SMTP)")
fwSS_total_passed_by_archive_limit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 11), Unsigned32()).setLabel("fwSS-total-passed-by-archive-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_passed_by_archive_limit.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_passed_by_archive_limit.setDescription("total blocked items by 'Archive Limit' policy for all services (HTTP,FTP,POP3,SMTP)")
fwSS_total_passed_by_interal_error = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 12), Unsigned32()).setLabel("fwSS-total-passed-by-interal-error").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_passed_by_interal_error.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_passed_by_interal_error.setDescription("total blocked items by 'Internal Error' for all services (HTTP,FTP,POP3,SMTP)")
fwSS_total_passed = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 13), Unsigned32()).setLabel("fwSS-total-passed").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_passed.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_passed.setDescription('total passed items for all policies (filetype,size limit, archive limit,internal error)')
fwSS_total_blocked_by_av_settings = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 14), Unsigned32()).setLabel("fwSS-total-blocked-by-av-settings").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_blocked_by_av_settings.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_blocked_by_av_settings.setDescription('total blocked items by AV settings')
fwSS_total_passed_by_av_settings = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 9, 10, 15), Unsigned32()).setLabel("fwSS-total-passed-by-av-settings").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSS_total_passed_by_av_settings.setStatus('current')
if mibBuilder.loadTexts: fwSS_total_passed_by_av_settings.setDescription('total passed items by AV settings')
fwConnectionsStatConnectionsTcp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 11, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwConnectionsStatConnectionsTcp.setStatus('current')
if mibBuilder.loadTexts: fwConnectionsStatConnectionsTcp.setDescription('tcp connections passing through the FireWall-1 Module')
fwConnectionsStatConnectionsUdp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 11, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwConnectionsStatConnectionsUdp.setStatus('current')
if mibBuilder.loadTexts: fwConnectionsStatConnectionsUdp.setDescription('udp connections passing through the FireWall-1 Module')
fwConnectionsStatConnectionsIcmp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 11, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwConnectionsStatConnectionsIcmp.setStatus('current')
if mibBuilder.loadTexts: fwConnectionsStatConnectionsIcmp.setDescription('icmp connections passing through the FireWall-1 Module')
fwConnectionsStatConnectionsOther = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 11, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwConnectionsStatConnectionsOther.setStatus('current')
if mibBuilder.loadTexts: fwConnectionsStatConnectionsOther.setDescription('other connections passing through the FireWall-1 Module')
fwConnectionsStatConnections = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 11, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwConnectionsStatConnections.setStatus('current')
if mibBuilder.loadTexts: fwConnectionsStatConnections.setDescription('total connections passing through the FireWall-1 Module')
fwConnectionsStatConnectionRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 11, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwConnectionsStatConnectionRate.setStatus('current')
if mibBuilder.loadTexts: fwConnectionsStatConnectionRate.setDescription('connection rate (per second) passing through the FireWall-1 Module')
fwHmem64_block_size = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 1), DisplayString()).setLabel("fwHmem64-block-size").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_block_size.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_block_size.setDescription('hmem - block size')
fwHmem64_requested_bytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 2), DisplayString()).setLabel("fwHmem64-requested-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_requested_bytes.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_requested_bytes.setDescription('hmem - requested bytes')
fwHmem64_initial_allocated_bytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 3), DisplayString()).setLabel("fwHmem64-initial-allocated-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_initial_allocated_bytes.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_initial_allocated_bytes.setDescription('hmem - initial allocated bytes')
fwHmem64_initial_allocated_blocks = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 4), Unsigned32()).setLabel("fwHmem64-initial-allocated-blocks").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_initial_allocated_blocks.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_initial_allocated_blocks.setDescription('hmem - initial allocated blocks')
fwHmem64_initial_allocated_pools = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 5), Unsigned32()).setLabel("fwHmem64-initial-allocated-pools").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_initial_allocated_pools.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_initial_allocated_pools.setDescription('hmem - initial allocated pools')
fwHmem64_current_allocated_bytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 6), DisplayString()).setLabel("fwHmem64-current-allocated-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_current_allocated_bytes.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_current_allocated_bytes.setDescription('hmem - current allocated bytes')
fwHmem64_current_allocated_blocks = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 7), Unsigned32()).setLabel("fwHmem64-current-allocated-blocks").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_current_allocated_blocks.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_current_allocated_blocks.setDescription('hmem - current allocated blocks')
fwHmem64_current_allocated_pools = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 8), Unsigned32()).setLabel("fwHmem64-current-allocated-pools").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_current_allocated_pools.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_current_allocated_pools.setDescription('hmem - current allocated pools')
fwHmem64_maximum_bytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 9), DisplayString()).setLabel("fwHmem64-maximum-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_maximum_bytes.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_maximum_bytes.setDescription('hmem - maximum bytes')
fwHmem64_maximum_pools = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 10), Unsigned32()).setLabel("fwHmem64-maximum-pools").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_maximum_pools.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_maximum_pools.setDescription('hmem - maximum pools')
fwHmem64_bytes_used = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 11), DisplayString()).setLabel("fwHmem64-bytes-used").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_bytes_used.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_bytes_used.setDescription('hmem - bytes used')
fwHmem64_blocks_used = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 12), Unsigned32()).setLabel("fwHmem64-blocks-used").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_blocks_used.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_blocks_used.setDescription('hmem - blocks used')
fwHmem64_bytes_unused = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 13), DisplayString()).setLabel("fwHmem64-bytes-unused").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_bytes_unused.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_bytes_unused.setDescription('hmem - bytes unused')
fwHmem64_blocks_unused = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 14), Unsigned32()).setLabel("fwHmem64-blocks-unused").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_blocks_unused.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_blocks_unused.setDescription('hmem - blocks unused')
fwHmem64_bytes_peak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 15), DisplayString()).setLabel("fwHmem64-bytes-peak").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_bytes_peak.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_bytes_peak.setDescription('hmem - bytes peak')
fwHmem64_blocks_peak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 16), Unsigned32()).setLabel("fwHmem64-blocks-peak").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_blocks_peak.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_blocks_peak.setDescription('hmem - blocks peak')
fwHmem64_bytes_internal_use = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 17), Unsigned32()).setLabel("fwHmem64-bytes-internal-use").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_bytes_internal_use.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_bytes_internal_use.setDescription('hmem - bytes internal use')
fwHmem64_number_of_items = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 18), DisplayString()).setLabel("fwHmem64-number-of-items").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_number_of_items.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_number_of_items.setDescription('hmem - number of items')
fwHmem64_alloc_operations = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 19), Unsigned32()).setLabel("fwHmem64-alloc-operations").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_alloc_operations.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_alloc_operations.setDescription('hmem - alloc operations')
fwHmem64_free_operations = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 20), Unsigned32()).setLabel("fwHmem64-free-operations").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_free_operations.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_free_operations.setDescription('hmem - free operations')
fwHmem64_failed_alloc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 21), Unsigned32()).setLabel("fwHmem64-failed-alloc").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_failed_alloc.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_failed_alloc.setDescription('hmem - failed alloc')
fwHmem64_failed_free = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 26, 12, 22), Unsigned32()).setLabel("fwHmem64-failed-free").setMaxAccess("readonly")
if mibBuilder.loadTexts: fwHmem64_failed_free.setStatus('current')
if mibBuilder.loadTexts: fwHmem64_failed_free.setDescription('hmem - failed free')
fwNetIfTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27), )
if mibBuilder.loadTexts: fwNetIfTable.setStatus('current')
if mibBuilder.loadTexts: fwNetIfTable.setDescription('')
fwNetIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwNetIfIndex"))
if mibBuilder.loadTexts: fwNetIfEntry.setStatus('current')
if mibBuilder.loadTexts: fwNetIfEntry.setDescription('')
fwNetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfIndex.setStatus('current')
if mibBuilder.loadTexts: fwNetIfIndex.setDescription('')
fwNetIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfName.setStatus('current')
if mibBuilder.loadTexts: fwNetIfName.setDescription('Interface Name')
fwNetIfIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfIPAddr.setStatus('current')
if mibBuilder.loadTexts: fwNetIfIPAddr.setDescription('IPv4 Address (an empty address will be denoted by 0.0.0.0)')
fwNetIfNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfNetmask.setStatus('current')
if mibBuilder.loadTexts: fwNetIfNetmask.setDescription('Network Mask of the GW behind the Bridge (an empty mask will be denoted by 0.0.0.0)')
fwNetIfFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfFlags.setStatus('current')
if mibBuilder.loadTexts: fwNetIfFlags.setDescription('Flags indicating the type(s) of the device: \n\t  \t\t         Possible values include:\n\t  \t\t         VPN tunnel device\t1\n\t\t\t\t\t Unnumbered device\t2\n\t\t\t\t\t Proxy device\t\t4\n\t\t\t\t\t Bridge\t\t\t8\n\t\t\t\t\t Bond\t\t\t16\n\t\t\t\t\t Slave\t\t\t32 (e.g. belongs to a bond or bridge device)')
fwNetIfPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfPeerName.setStatus('current')
if mibBuilder.loadTexts: fwNetIfPeerName.setDescription('VPN Tunnel Peer Name')
fwNetIfRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfRemoteIp.setStatus('current')
if mibBuilder.loadTexts: fwNetIfRemoteIp.setDescription('VPN Tunnel Remote IP')
fwNetIfTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfTopology.setStatus('current')
if mibBuilder.loadTexts: fwNetIfTopology.setDescription('Planned for future use only - currently should have the constant value of 4')
fwNetIfProxyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfProxyName.setStatus('current')
if mibBuilder.loadTexts: fwNetIfProxyName.setDescription('VPN Tunnel Proxy Name')
fwNetIfSlaves = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfSlaves.setStatus('current')
if mibBuilder.loadTexts: fwNetIfSlaves.setDescription('If this device is acting as a master, this string contains space separated names of all its slave devices.')
fwNetIfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfPorts.setStatus('current')
if mibBuilder.loadTexts: fwNetIfPorts.setDescription('Given an interface which is a port in a bridge, list all its siblings interfaces. The interfaces are separated by a single space.')
fwNetIfIPV6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfIPV6Addr.setStatus('current')
if mibBuilder.loadTexts: fwNetIfIPV6Addr.setDescription(' IPv6 Address given in an hexa format .')
fwNetIfIPV6AddrLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 27, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwNetIfIPV6AddrLen.setStatus('current')
if mibBuilder.loadTexts: fwNetIfIPV6AddrLen.setDescription('IPv6 Address length')
fwLSConn = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30))
fwLSConnOverall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLSConnOverall.setStatus('current')
if mibBuilder.loadTexts: fwLSConnOverall.setDescription('Connectivity with log servers, Ok(0), Warnning(1) and Error(2)')
fwLSConnOverallDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLSConnOverallDesc.setStatus('current')
if mibBuilder.loadTexts: fwLSConnOverallDesc.setDescription('Description of connectivity status with log servers')
fwLSConnTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 3), )
if mibBuilder.loadTexts: fwLSConnTable.setStatus('current')
if mibBuilder.loadTexts: fwLSConnTable.setDescription('')
fwLocalLoggingDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLocalLoggingDesc.setStatus('current')
if mibBuilder.loadTexts: fwLocalLoggingDesc.setDescription('Description of local logging status')
fwLocalLoggingStat = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLocalLoggingStat.setStatus('current')
if mibBuilder.loadTexts: fwLocalLoggingStat.setDescription('Writing logs localy, To log servers(0), Local configured (1) Local due to connectivity(2) Local due to high rate(3)')
fwLocalLoggingWriteRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLocalLoggingWriteRate.setStatus('current')
if mibBuilder.loadTexts: fwLocalLoggingWriteRate.setDescription('Local Logging Writing Rate')
fwLoggingHandlingRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLoggingHandlingRate.setStatus('current')
if mibBuilder.loadTexts: fwLoggingHandlingRate.setDescription('Total Logging Handling Rate (Local writing and Sending to Log Server)')
fwLSConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 3, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fwLSConnIndex"))
if mibBuilder.loadTexts: fwLSConnEntry.setStatus('current')
if mibBuilder.loadTexts: fwLSConnEntry.setDescription('')
fwLSConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLSConnIndex.setStatus('current')
if mibBuilder.loadTexts: fwLSConnIndex.setDescription('')
fwLSConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLSConnName.setStatus('current')
if mibBuilder.loadTexts: fwLSConnName.setDescription('Log Server Name\\IP')
fwLSConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLSConnState.setStatus('current')
if mibBuilder.loadTexts: fwLSConnState.setDescription('Connectivity state with the log server Ok(0), Error(1) and Not Active(2)')
fwLSConnStateDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLSConnStateDesc.setStatus('current')
if mibBuilder.loadTexts: fwLSConnStateDesc.setDescription('Description of connectivity state with the log server')
fwLSConnSendRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 1, 30, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwLSConnSendRate.setStatus('current')
if mibBuilder.loadTexts: fwLSConnSendRate.setDescription('Logs Sending Rate to the Log Server')
fwSXLGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1))
fwSXLStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLStatus.setStatus('current')
if mibBuilder.loadTexts: fwSXLStatus.setDescription('The current status of SecureXL. ')
fwSXLConnsExisting = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLConnsExisting.setStatus('current')
if mibBuilder.loadTexts: fwSXLConnsExisting.setDescription('The number of existing connections handled by SecureXL. ')
fwSXLConnsAdded = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLConnsAdded.setStatus('current')
if mibBuilder.loadTexts: fwSXLConnsAdded.setDescription('The number of connections added by SecureXL. ')
fwSXLConnsDeleted = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 36, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwSXLConnsDeleted.setStatus('current')
if mibBuilder.loadTexts: fwSXLConnsDeleted.setDescription('The number of connections deleted by SecureXL. ')
cpvGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 4))
cpvIpsec = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5))
cpvFwz = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 6))
cpvAccelerator = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8))
cpvIKE = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9))
cpvIPsec = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 10))
cpvStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 4, 1))
cpvErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 4, 2))
cpvSaStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2))
cpvSaErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 3))
cpvIpsecStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4))
cpvFwzStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 6, 1))
cpvFwzErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 6, 2))
cpvHwAccelGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 1))
cpvHwAccelStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 2))
cpvIKEglobals = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1))
cpvIKEerrors = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 2))
cpvIPsecNIC = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2, 10, 1))
cpvProdName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvProdName.setStatus('current')
if mibBuilder.loadTexts: cpvProdName.setDescription('Product name')
cpvVerMajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvVerMajor.setStatus('current')
if mibBuilder.loadTexts: cpvVerMajor.setDescription('Major version')
cpvVerMinor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvVerMinor.setStatus('current')
if mibBuilder.loadTexts: cpvVerMinor.setDescription('Minor version')
cpvEncPackets = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvEncPackets.setStatus('current')
if mibBuilder.loadTexts: cpvEncPackets.setDescription('Encrypted packets')
cpvDecPackets = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvDecPackets.setStatus('current')
if mibBuilder.loadTexts: cpvDecPackets.setDescription('Decrypted packets')
cpvErrOut = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 4, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvErrOut.setStatus('current')
if mibBuilder.loadTexts: cpvErrOut.setDescription('Encryption errors')
cpvErrIn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 4, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvErrIn.setStatus('current')
if mibBuilder.loadTexts: cpvErrIn.setDescription('Decryption errors')
cpvErrIke = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 4, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvErrIke.setStatus('current')
if mibBuilder.loadTexts: cpvErrIke.setDescription('IKE errors')
cpvErrPolicy = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 4, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvErrPolicy.setStatus('current')
if mibBuilder.loadTexts: cpvErrPolicy.setDescription('Policy errors')
cpvCurrEspSAsIn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvCurrEspSAsIn.setStatus('current')
if mibBuilder.loadTexts: cpvCurrEspSAsIn.setDescription('IPsec current Inbound ESP SAs')
cpvTotalEspSAsIn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvTotalEspSAsIn.setStatus('current')
if mibBuilder.loadTexts: cpvTotalEspSAsIn.setDescription('IPsec total Inbound ESP SAs')
cpvCurrEspSAsOut = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvCurrEspSAsOut.setStatus('current')
if mibBuilder.loadTexts: cpvCurrEspSAsOut.setDescription('IPsec current Outbound ESP SAs')
cpvTotalEspSAsOut = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvTotalEspSAsOut.setStatus('current')
if mibBuilder.loadTexts: cpvTotalEspSAsOut.setDescription('IPsec total Outbound ESP SAs')
cpvCurrAhSAsIn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvCurrAhSAsIn.setStatus('current')
if mibBuilder.loadTexts: cpvCurrAhSAsIn.setDescription('IPsec current Inbound AH SAs')
cpvTotalAhSAsIn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvTotalAhSAsIn.setStatus('current')
if mibBuilder.loadTexts: cpvTotalAhSAsIn.setDescription('IPsec total Inbound AH SAs')
cpvCurrAhSAsOut = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvCurrAhSAsOut.setStatus('current')
if mibBuilder.loadTexts: cpvCurrAhSAsOut.setDescription('IPsec current Outbound AH SAs')
cpvTotalAhSAsOut = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvTotalAhSAsOut.setStatus('current')
if mibBuilder.loadTexts: cpvTotalAhSAsOut.setDescription('IPsec total Outbound AH SAs')
cpvMaxConncurEspSAsIn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvMaxConncurEspSAsIn.setStatus('current')
if mibBuilder.loadTexts: cpvMaxConncurEspSAsIn.setDescription('IPsec max concurrent Inbound ESP SAs')
cpvMaxConncurEspSAsOut = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvMaxConncurEspSAsOut.setStatus('current')
if mibBuilder.loadTexts: cpvMaxConncurEspSAsOut.setDescription('IPsec max concurrent Outbound ESP SAs')
cpvMaxConncurAhSAsIn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvMaxConncurAhSAsIn.setStatus('current')
if mibBuilder.loadTexts: cpvMaxConncurAhSAsIn.setDescription('IPsec max concurrent Inbound AH SAs')
cpvMaxConncurAhSAsOut = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 2, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvMaxConncurAhSAsOut.setStatus('current')
if mibBuilder.loadTexts: cpvMaxConncurAhSAsOut.setDescription('IPsec max concurrent Outbound AH SAs')
cpvSaDecrErr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvSaDecrErr.setStatus('current')
if mibBuilder.loadTexts: cpvSaDecrErr.setDescription('IPsec decryption errors')
cpvSaAuthErr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvSaAuthErr.setStatus('current')
if mibBuilder.loadTexts: cpvSaAuthErr.setDescription('IPsec authentication errors')
cpvSaReplayErr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvSaReplayErr.setStatus('current')
if mibBuilder.loadTexts: cpvSaReplayErr.setDescription('IPsec replay errors')
cpvSaPolicyErr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvSaPolicyErr.setStatus('current')
if mibBuilder.loadTexts: cpvSaPolicyErr.setDescription('IPsec policy errors')
cpvSaOtherErrIn = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvSaOtherErrIn.setStatus('current')
if mibBuilder.loadTexts: cpvSaOtherErrIn.setDescription('IPsec other inbound errors')
cpvSaOtherErrOut = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvSaOtherErrOut.setStatus('current')
if mibBuilder.loadTexts: cpvSaOtherErrOut.setDescription('IPsec other outbound errors')
cpvSaUnknownSpiErr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvSaUnknownSpiErr.setStatus('current')
if mibBuilder.loadTexts: cpvSaUnknownSpiErr.setDescription('IPsec unknown SPI errors')
cpvIpsecUdpEspEncPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecUdpEspEncPkts.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecUdpEspEncPkts.setDescription('IPsec UDP ESP encrypted packets')
cpvIpsecUdpEspDecPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecUdpEspDecPkts.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecUdpEspDecPkts.setDescription('IPsec UDP ESP decrypted packets')
cpvIpsecAhEncPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecAhEncPkts.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecAhEncPkts.setDescription('IPsec AH encrypted packets')
cpvIpsecAhDecPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecAhDecPkts.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecAhDecPkts.setDescription('IPsec AH decrypted packets')
cpvIpsecEspEncPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecEspEncPkts.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecEspEncPkts.setDescription('IPsec ESP encrypted packets')
cpvIpsecEspDecPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecEspDecPkts.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecEspDecPkts.setDescription('IPsec ESP decrypted packets')
cpvIpsecDecomprBytesBefore = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecDecomprBytesBefore.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecDecomprBytesBefore.setDescription('IPsec bytes before decompression')
cpvIpsecDecomprBytesAfter = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecDecomprBytesAfter.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecDecomprBytesAfter.setDescription('IPsec bytes after decompression')
cpvIpsecDecomprOverhead = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecDecomprOverhead.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecDecomprOverhead.setDescription('IPsec bytes decompression overhead')
cpvIpsecDecomprPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecDecomprPkts.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecDecomprPkts.setDescription('IPsec packets decompressed')
cpvIpsecDecomprErr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecDecomprErr.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecDecomprErr.setDescription('IPsec decompression errors')
cpvIpsecComprBytesBefore = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecComprBytesBefore.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecComprBytesBefore.setDescription('IPsec bytes before compression')
cpvIpsecComprBytesAfter = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecComprBytesAfter.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecComprBytesAfter.setDescription('IPsec bytes after compression')
cpvIpsecComprOverhead = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecComprOverhead.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecComprOverhead.setDescription('IPsec bytes compression overhead')
cpvIpsecNonCompressibleBytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecNonCompressibleBytes.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecNonCompressibleBytes.setDescription('IPsec bytes non compressible')
cpvIpsecCompressiblePkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecCompressiblePkts.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecCompressiblePkts.setDescription('IPsec packets compressed')
cpvIpsecNonCompressiblePkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecNonCompressiblePkts.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecNonCompressiblePkts.setDescription('IPsec packets non compressible')
cpvIpsecComprErrors = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecComprErrors.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecComprErrors.setDescription('IPsec compression errors')
cpvIpsecEspEncBytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecEspEncBytes.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecEspEncBytes.setDescription('IPsec ESP encrypted bytes')
cpvIpsecEspDecBytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 5, 4, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIpsecEspDecBytes.setStatus('current')
if mibBuilder.loadTexts: cpvIpsecEspDecBytes.setDescription('IPsec ESP decrypted bytes')
cpvFwzEncapsEncPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvFwzEncapsEncPkts.setStatus('current')
if mibBuilder.loadTexts: cpvFwzEncapsEncPkts.setDescription('Fwz encapsulated encrypted packets')
cpvFwzEncapsDecPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvFwzEncapsDecPkts.setStatus('current')
if mibBuilder.loadTexts: cpvFwzEncapsDecPkts.setDescription('Fwz encapsulated decrypted packets')
cpvFwzEncPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvFwzEncPkts.setStatus('current')
if mibBuilder.loadTexts: cpvFwzEncPkts.setDescription('Fwz encrypted packets')
cpvFwzDecPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvFwzDecPkts.setStatus('current')
if mibBuilder.loadTexts: cpvFwzDecPkts.setDescription('Fwz decrypted packets')
cpvFwzEncapsEncErrs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 6, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvFwzEncapsEncErrs.setStatus('current')
if mibBuilder.loadTexts: cpvFwzEncapsEncErrs.setDescription('Fwz encapsulated encryption errors')
cpvFwzEncapsDecErrs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 6, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvFwzEncapsDecErrs.setStatus('current')
if mibBuilder.loadTexts: cpvFwzEncapsDecErrs.setDescription('Fwz encapsulated decryption errors')
cpvFwzEncErrs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 6, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvFwzEncErrs.setStatus('current')
if mibBuilder.loadTexts: cpvFwzEncErrs.setDescription('Fwz encryption errors')
cpvFwzDecErrs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 6, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvFwzDecErrs.setStatus('current')
if mibBuilder.loadTexts: cpvFwzDecErrs.setDescription('Fwz decryption errors')
cpvHwAccelVendor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelVendor.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelVendor.setDescription('HW accel. vendor')
cpvHwAccelStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelStatus.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelStatus.setDescription('HW accel. status')
cpvHwAccelDriverMajorVer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelDriverMajorVer.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelDriverMajorVer.setDescription('HW accel. driver major version')
cpvHwAccelDriverMinorVer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelDriverMinorVer.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelDriverMinorVer.setDescription('HW accel. driver minor version')
cpvHwAccelEspEncPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelEspEncPkts.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelEspEncPkts.setDescription('HW accel. encrypted IPsec ESP packets')
cpvHwAccelEspDecPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelEspDecPkts.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelEspDecPkts.setDescription('HW accel. decrypted IPsec ESP packets')
cpvHwAccelEspEncBytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelEspEncBytes.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelEspEncBytes.setDescription('HW accel. encrypted IPsec ESP bytes')
cpvHwAccelEspDecBytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelEspDecBytes.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelEspDecBytes.setDescription('HW accel. decrypted IPsec ESP bytes')
cpvHwAccelAhEncPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelAhEncPkts.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelAhEncPkts.setDescription('HW accel. encrypted IPsec AH packets')
cpvHwAccelAhDecPkts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelAhDecPkts.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelAhDecPkts.setDescription('HW accel. decrypted IPsec AH packets')
cpvHwAccelAhEncBytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelAhEncBytes.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelAhEncBytes.setDescription('HW accel. encrypted IPsec AH bytes')
cpvHwAccelAhDecBytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 8, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvHwAccelAhDecBytes.setStatus('current')
if mibBuilder.loadTexts: cpvHwAccelAhDecBytes.setDescription('HW accel. decrypted IPsec AH bytes')
cpvIKECurrSAs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKECurrSAs.setStatus('current')
if mibBuilder.loadTexts: cpvIKECurrSAs.setDescription('IKE current SAs')
cpvIKECurrInitSAs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKECurrInitSAs.setStatus('current')
if mibBuilder.loadTexts: cpvIKECurrInitSAs.setDescription('IKE current initiated SAs')
cpvIKECurrRespSAs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKECurrRespSAs.setStatus('current')
if mibBuilder.loadTexts: cpvIKECurrRespSAs.setDescription('IKE current responded SAs')
cpvIKETotalSAs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKETotalSAs.setStatus('current')
if mibBuilder.loadTexts: cpvIKETotalSAs.setDescription('IKE total SAs')
cpvIKETotalInitSAs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKETotalInitSAs.setStatus('current')
if mibBuilder.loadTexts: cpvIKETotalInitSAs.setDescription('IKE total initiated SAs')
cpvIKETotalRespSAs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKETotalRespSAs.setStatus('current')
if mibBuilder.loadTexts: cpvIKETotalRespSAs.setDescription('IKE total responded SAs')
cpvIKETotalSAsAttempts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKETotalSAsAttempts.setStatus('current')
if mibBuilder.loadTexts: cpvIKETotalSAsAttempts.setDescription('IKE total SAs attempts')
cpvIKETotalSAsInitAttempts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKETotalSAsInitAttempts.setStatus('current')
if mibBuilder.loadTexts: cpvIKETotalSAsInitAttempts.setDescription('IKE total SAs initiated attempts')
cpvIKETotalSAsRespAttempts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKETotalSAsRespAttempts.setStatus('current')
if mibBuilder.loadTexts: cpvIKETotalSAsRespAttempts.setDescription('IKE total SAs responded attempts')
cpvIKEMaxConncurSAs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKEMaxConncurSAs.setStatus('current')
if mibBuilder.loadTexts: cpvIKEMaxConncurSAs.setDescription('IKE max concurrent SAs')
cpvIKEMaxConncurInitSAs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKEMaxConncurInitSAs.setStatus('current')
if mibBuilder.loadTexts: cpvIKEMaxConncurInitSAs.setDescription('IKE max concurrent initiated SAs')
cpvIKEMaxConncurRespSAs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKEMaxConncurRespSAs.setStatus('current')
if mibBuilder.loadTexts: cpvIKEMaxConncurRespSAs.setDescription('IKE max concurrent responded SAs')
cpvIKETotalFailuresInit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKETotalFailuresInit.setStatus('current')
if mibBuilder.loadTexts: cpvIKETotalFailuresInit.setDescription('IKE total failures (initiator errors)')
cpvIKENoResp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKENoResp.setStatus('current')
if mibBuilder.loadTexts: cpvIKENoResp.setDescription('IKE no response from peer (initiator errors)')
cpvIKETotalFailuresResp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 9, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIKETotalFailuresResp.setStatus('current')
if mibBuilder.loadTexts: cpvIKETotalFailuresResp.setDescription('IKE total failures (responder errors)')
cpvIPsecNICsNum = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIPsecNICsNum.setStatus('current')
if mibBuilder.loadTexts: cpvIPsecNICsNum.setDescription("IPsec NIC: Number of IPsec NIC's")
cpvIPsecNICTotalDownLoadedSAs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIPsecNICTotalDownLoadedSAs.setStatus('current')
if mibBuilder.loadTexts: cpvIPsecNICTotalDownLoadedSAs.setDescription("IPsec NIC: Total downloaded SA's")
cpvIPsecNICCurrDownLoadedSAs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIPsecNICCurrDownLoadedSAs.setStatus('current')
if mibBuilder.loadTexts: cpvIPsecNICCurrDownLoadedSAs.setDescription("IPsec NIC: Current downloaded SA's")
cpvIPsecNICDecrBytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIPsecNICDecrBytes.setStatus('current')
if mibBuilder.loadTexts: cpvIPsecNICDecrBytes.setDescription('IPsec NIC: Decrypted bytes by NIC')
cpvIPsecNICEncrBytes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIPsecNICEncrBytes.setStatus('current')
if mibBuilder.loadTexts: cpvIPsecNICEncrBytes.setDescription('IPsec NIC: Encrypted bytes by NIC')
cpvIPsecNICDecrPackets = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIPsecNICDecrPackets.setStatus('current')
if mibBuilder.loadTexts: cpvIPsecNICDecrPackets.setDescription('IPsec NIC: Decrypted packets by NIC')
cpvIPsecNICEncrPackets = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2, 10, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpvIPsecNICEncrPackets.setStatus('current')
if mibBuilder.loadTexts: cpvIPsecNICEncrPackets.setDescription('IPsec NIC: Encrypted packets by NIC')
fgProdName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProdName.setStatus('current')
if mibBuilder.loadTexts: fgProdName.setDescription('Product name')
fgVerMajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVerMajor.setStatus('current')
if mibBuilder.loadTexts: fgVerMajor.setDescription('Major version')
fgVerMinor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVerMinor.setStatus('current')
if mibBuilder.loadTexts: fgVerMinor.setDescription('Minor version')
fgVersionString = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVersionString.setStatus('current')
if mibBuilder.loadTexts: fgVersionString.setDescription('Version string')
fgModuleKernelBuild = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgModuleKernelBuild.setStatus('current')
if mibBuilder.loadTexts: fgModuleKernelBuild.setDescription('Kernel build')
fgStrPolicyName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgStrPolicyName.setStatus('current')
if mibBuilder.loadTexts: fgStrPolicyName.setDescription('Policy name')
fgInstallTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgInstallTime.setStatus('current')
if mibBuilder.loadTexts: fgInstallTime.setDescription('Install time')
fgNumInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgNumInterfaces.setStatus('current')
if mibBuilder.loadTexts: fgNumInterfaces.setDescription('Interfaces num')
fgIfTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9), )
if mibBuilder.loadTexts: fgIfTable.setStatus('current')
if mibBuilder.loadTexts: fgIfTable.setDescription('')
fgIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fgIfIndex"))
if mibBuilder.loadTexts: fgIfEntry.setStatus('current')
if mibBuilder.loadTexts: fgIfEntry.setDescription('')
fgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIfIndex.setStatus('current')
if mibBuilder.loadTexts: fgIfIndex.setDescription('')
fgIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIfName.setStatus('current')
if mibBuilder.loadTexts: fgIfName.setDescription('')
fgPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgPolicyName.setStatus('current')
if mibBuilder.loadTexts: fgPolicyName.setDescription('')
fgRateLimitIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgRateLimitIn.setStatus('current')
if mibBuilder.loadTexts: fgRateLimitIn.setDescription('')
fgRateLimitOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgRateLimitOut.setStatus('current')
if mibBuilder.loadTexts: fgRateLimitOut.setDescription('')
fgAvrRateIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvrRateIn.setStatus('current')
if mibBuilder.loadTexts: fgAvrRateIn.setDescription('')
fgAvrRateOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvrRateOut.setStatus('current')
if mibBuilder.loadTexts: fgAvrRateOut.setDescription('')
fgRetransPcktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgRetransPcktsIn.setStatus('current')
if mibBuilder.loadTexts: fgRetransPcktsIn.setDescription('')
fgRetransPcktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgRetransPcktsOut.setStatus('current')
if mibBuilder.loadTexts: fgRetransPcktsOut.setDescription('')
fgPendPcktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgPendPcktsIn.setStatus('current')
if mibBuilder.loadTexts: fgPendPcktsIn.setDescription('')
fgPendPcktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgPendPcktsOut.setStatus('current')
if mibBuilder.loadTexts: fgPendPcktsOut.setDescription('')
fgPendBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgPendBytesIn.setStatus('current')
if mibBuilder.loadTexts: fgPendBytesIn.setDescription('')
fgPendBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgPendBytesOut.setStatus('current')
if mibBuilder.loadTexts: fgPendBytesOut.setDescription('')
fgNumConnIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgNumConnIn.setStatus('current')
if mibBuilder.loadTexts: fgNumConnIn.setDescription('')
fgNumConnOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 3, 9, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgNumConnOut.setStatus('current')
if mibBuilder.loadTexts: fgNumConnOut.setDescription('')
haProdName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haProdName.setStatus('current')
if mibBuilder.loadTexts: haProdName.setDescription('Product name')
haInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haInstalled.setStatus('current')
if mibBuilder.loadTexts: haInstalled.setDescription('HA installed')
haVerMajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haVerMajor.setStatus('current')
if mibBuilder.loadTexts: haVerMajor.setDescription('Major version')
haVerMinor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haVerMinor.setStatus('current')
if mibBuilder.loadTexts: haVerMinor.setDescription('Minor version')
haStarted = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haStarted.setStatus('current')
if mibBuilder.loadTexts: haStarted.setDescription('HA started')
haState = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haState.setStatus('current')
if mibBuilder.loadTexts: haState.setDescription('HA state')
haBlockState = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haBlockState.setStatus('current')
if mibBuilder.loadTexts: haBlockState.setDescription('HA blocking state')
haIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haIdentifier.setStatus('current')
if mibBuilder.loadTexts: haIdentifier.setDescription('HA identifier')
haProtoVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haProtoVersion.setStatus('current')
if mibBuilder.loadTexts: haProtoVersion.setDescription('HA protocol version')
haWorkMode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haWorkMode.setStatus('current')
if mibBuilder.loadTexts: haWorkMode.setDescription('Working mode')
haVersionSting = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haVersionSting.setStatus('current')
if mibBuilder.loadTexts: haVersionSting.setDescription('Version string')
haStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haStatCode.setStatus('current')
if mibBuilder.loadTexts: haStatCode.setDescription('Status code')
haStatShort = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haStatShort.setStatus('current')
if mibBuilder.loadTexts: haStatShort.setDescription('Status short')
haStatLong = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 103), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haStatLong.setStatus('current')
if mibBuilder.loadTexts: haStatLong.setDescription('Status long')
haServicePack = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 5, 999), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haServicePack.setStatus('current')
if mibBuilder.loadTexts: haServicePack.setDescription('Service pack')
haIfTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 5, 12), )
if mibBuilder.loadTexts: haIfTable.setStatus('current')
if mibBuilder.loadTexts: haIfTable.setDescription('')
haIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 5, 12, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "haIfIndex"))
if mibBuilder.loadTexts: haIfEntry.setStatus('current')
if mibBuilder.loadTexts: haIfEntry.setDescription('')
haIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 12, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haIfIndex.setStatus('current')
if mibBuilder.loadTexts: haIfIndex.setDescription('')
haIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haIfName.setStatus('current')
if mibBuilder.loadTexts: haIfName.setDescription('')
haIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 12, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haIP.setStatus('current')
if mibBuilder.loadTexts: haIP.setDescription('')
haStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haStatus.setStatus('current')
if mibBuilder.loadTexts: haStatus.setDescription('')
haVerified = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 12, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haVerified.setStatus('current')
if mibBuilder.loadTexts: haVerified.setDescription('')
haTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haTrusted.setStatus('current')
if mibBuilder.loadTexts: haTrusted.setDescription('')
haShared = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haShared.setStatus('current')
if mibBuilder.loadTexts: haShared.setDescription('')
haProblemTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 5, 13), )
if mibBuilder.loadTexts: haProblemTable.setStatus('current')
if mibBuilder.loadTexts: haProblemTable.setDescription('')
haProblemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 5, 13, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "haIfIndex"))
if mibBuilder.loadTexts: haProblemEntry.setStatus('current')
if mibBuilder.loadTexts: haProblemEntry.setDescription('')
haProblemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 13, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haProblemIndex.setStatus('current')
if mibBuilder.loadTexts: haProblemIndex.setDescription('')
haProblemName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haProblemName.setStatus('current')
if mibBuilder.loadTexts: haProblemName.setDescription('')
haProblemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haProblemStatus.setStatus('current')
if mibBuilder.loadTexts: haProblemStatus.setDescription('')
haProblemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haProblemPriority.setStatus('current')
if mibBuilder.loadTexts: haProblemPriority.setDescription('')
haProblemVerified = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 13, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haProblemVerified.setStatus('current')
if mibBuilder.loadTexts: haProblemVerified.setDescription('')
haProblemDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haProblemDescr.setStatus('current')
if mibBuilder.loadTexts: haProblemDescr.setDescription('')
haClusterIpTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 5, 15), )
if mibBuilder.loadTexts: haClusterIpTable.setStatus('current')
if mibBuilder.loadTexts: haClusterIpTable.setDescription('')
haClusterIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 5, 15, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "haClusterIpIndex"))
if mibBuilder.loadTexts: haClusterIpEntry.setStatus('current')
if mibBuilder.loadTexts: haClusterIpEntry.setDescription('')
haClusterIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 15, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haClusterIpIndex.setStatus('current')
if mibBuilder.loadTexts: haClusterIpIndex.setDescription('Cluster IP index')
haClusterIpIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haClusterIpIfName.setStatus('current')
if mibBuilder.loadTexts: haClusterIpIfName.setDescription('Cluster IP interface name')
haClusterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 15, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haClusterIpAddr.setStatus('current')
if mibBuilder.loadTexts: haClusterIpAddr.setDescription('Cluster IP address')
haClusterIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 15, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haClusterIpNetMask.setStatus('current')
if mibBuilder.loadTexts: haClusterIpNetMask.setDescription('Cluster network mask')
haClusterIpMemberNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 15, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haClusterIpMemberNet.setStatus('current')
if mibBuilder.loadTexts: haClusterIpMemberNet.setDescription('Cluster member network')
haClusterIpMemberNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 15, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haClusterIpMemberNetMask.setStatus('current')
if mibBuilder.loadTexts: haClusterIpMemberNetMask.setDescription('Cluster member network mask')
haClusterSyncTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 5, 16), )
if mibBuilder.loadTexts: haClusterSyncTable.setStatus('current')
if mibBuilder.loadTexts: haClusterSyncTable.setDescription('')
haClusterSyncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 5, 16, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "haClusterSyncIndex"))
if mibBuilder.loadTexts: haClusterSyncEntry.setStatus('current')
if mibBuilder.loadTexts: haClusterSyncEntry.setDescription('')
haClusterSyncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 16, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haClusterSyncIndex.setStatus('current')
if mibBuilder.loadTexts: haClusterSyncIndex.setDescription('Cluster sync index')
haClusterSyncName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haClusterSyncName.setStatus('current')
if mibBuilder.loadTexts: haClusterSyncName.setDescription('Cluster sync name')
haClusterSyncAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haClusterSyncAddr.setStatus('current')
if mibBuilder.loadTexts: haClusterSyncAddr.setDescription('Cluster sync address')
haClusterSyncNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 5, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haClusterSyncNetMask.setStatus('current')
if mibBuilder.loadTexts: haClusterSyncNetMask.setDescription('Cluster sync network mask')
svnInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 4))
svnOSInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 5))
svnPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7))
svnApplianceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 16))
svnMem = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 1))
svnProc = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 2))
svnDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 3))
svnMem64 = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 4))
svnRoutingModify = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 9))
svnLogDaemon = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 11))
svnUpdatesInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20))
svnVsxInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 21))
svnProdName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnProdName.setStatus('current')
if mibBuilder.loadTexts: svnProdName.setDescription('Product name')
svnProdVerMajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnProdVerMajor.setStatus('current')
if mibBuilder.loadTexts: svnProdVerMajor.setDescription('Major version')
svnProdVerMinor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnProdVerMinor.setStatus('current')
if mibBuilder.loadTexts: svnProdVerMinor.setDescription('Minor version')
svnUpdatesInfoBuild = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnUpdatesInfoBuild.setStatus('current')
if mibBuilder.loadTexts: svnUpdatesInfoBuild.setDescription('Deployment agent build number')
svnUpdatesInfoStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnUpdatesInfoStatus.setStatus('current')
if mibBuilder.loadTexts: svnUpdatesInfoStatus.setDescription('Deployment agent status')
svnUpdatesInfoConnection = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnUpdatesInfoConnection.setStatus('current')
if mibBuilder.loadTexts: svnUpdatesInfoConnection.setDescription('Cloud connection')
svnUpdatesInfoAvailablePackages = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnUpdatesInfoAvailablePackages.setStatus('current')
if mibBuilder.loadTexts: svnUpdatesInfoAvailablePackages.setDescription('Available packages count')
svnUpdatesInfoAvailableRecommended = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnUpdatesInfoAvailableRecommended.setStatus('current')
if mibBuilder.loadTexts: svnUpdatesInfoAvailableRecommended.setDescription('Available recommended packages count')
svnUpdatesInfoAvailableHotfixes = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnUpdatesInfoAvailableHotfixes.setStatus('current')
if mibBuilder.loadTexts: svnUpdatesInfoAvailableHotfixes.setDescription('Available hotfixes count')
updatesInstalledTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 7), )
if mibBuilder.loadTexts: updatesInstalledTable.setStatus('current')
if mibBuilder.loadTexts: updatesInstalledTable.setDescription('Installed updates table. This feature is supported only on gaia')
updatesInstalledEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 7, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "updatesInstalledIndex"))
if mibBuilder.loadTexts: updatesInstalledEntry.setStatus('current')
if mibBuilder.loadTexts: updatesInstalledEntry.setDescription('')
updatesInstalledIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: updatesInstalledIndex.setStatus('current')
if mibBuilder.loadTexts: updatesInstalledIndex.setDescription('')
updatesInstalledName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: updatesInstalledName.setStatus('current')
if mibBuilder.loadTexts: updatesInstalledName.setDescription('Installed package name')
updatesInstalledType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: updatesInstalledType.setStatus('current')
if mibBuilder.loadTexts: updatesInstalledType.setDescription('Installed package type')
updatesRecommendedTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 8), )
if mibBuilder.loadTexts: updatesRecommendedTable.setStatus('current')
if mibBuilder.loadTexts: updatesRecommendedTable.setDescription('Recommended updates table. This feature is supported only on gaia')
updatesRecommendedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 8, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "updatesRecommendedIndex"))
if mibBuilder.loadTexts: updatesRecommendedEntry.setStatus('current')
if mibBuilder.loadTexts: updatesRecommendedEntry.setDescription('')
updatesRecommendedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: updatesRecommendedIndex.setStatus('current')
if mibBuilder.loadTexts: updatesRecommendedIndex.setDescription('')
updatesRecommendedName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: updatesRecommendedName.setStatus('current')
if mibBuilder.loadTexts: updatesRecommendedName.setDescription('Recommended package name')
updatesRecommendedType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: updatesRecommendedType.setStatus('current')
if mibBuilder.loadTexts: updatesRecommendedType.setDescription('Recommended package type')
updatesRecommendedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 20, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: updatesRecommendedStatus.setStatus('current')
if mibBuilder.loadTexts: updatesRecommendedStatus.setDescription('Recommended package status')
svnVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnVersion.setStatus('current')
if mibBuilder.loadTexts: svnVersion.setDescription('SVN version')
svnBuild = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 4, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnBuild.setStatus('current')
if mibBuilder.loadTexts: svnBuild.setDescription('SVN build number')
osName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osName.setStatus('current')
if mibBuilder.loadTexts: osName.setDescription('OS name')
osMajorVer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osMajorVer.setStatus('current')
if mibBuilder.loadTexts: osMajorVer.setDescription('OS Major version')
osMinorVer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osMinorVer.setStatus('current')
if mibBuilder.loadTexts: osMinorVer.setDescription('OS minor version')
osBuildNum = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osBuildNum.setStatus('current')
if mibBuilder.loadTexts: osBuildNum.setDescription('OS build number')
osSPmajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osSPmajor.setStatus('current')
if mibBuilder.loadTexts: osSPmajor.setDescription('OS SP major')
osSPminor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osSPminor.setStatus('current')
if mibBuilder.loadTexts: osSPminor.setDescription('OS SP minor')
osVersionLevel = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osVersionLevel.setStatus('current')
if mibBuilder.loadTexts: osVersionLevel.setDescription('OS version level')
svnApplianceSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 16, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnApplianceSerialNumber.setStatus('current')
if mibBuilder.loadTexts: svnApplianceSerialNumber.setDescription('Appliance Serial Number')
svnApplianceManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 16, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnApplianceManufacturer.setStatus('current')
if mibBuilder.loadTexts: svnApplianceManufacturer.setDescription('Appliance Manufacturer')
svnApplianceProductName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 16, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnApplianceProductName.setStatus('current')
if mibBuilder.loadTexts: svnApplianceProductName.setDescription('Appliance Product Name')
svnApplianceSeriesString = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 16, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnApplianceSeriesString.setStatus('current')
if mibBuilder.loadTexts: svnApplianceSeriesString.setDescription('Appliance Series String')
memTotalVirtual = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memTotalVirtual.setStatus('current')
if mibBuilder.loadTexts: memTotalVirtual.setDescription('Total virtual memory (32 bit)\n\t\t\t\t\t  NOTE: This 32 bit object has been superseded by a 64 bit object -\n\t\t\t\t\t  memTotalVirtual64, which is supported by Check Point SVN FP3 and above. The\n\t\t\t\t\t  32 bit object is still supported, but it is recommended to work with the new\n\t\t\t\t\t  64 bit object (avoid receiving erroneous values from 64 bit machines).')
memActiveVirtual = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memActiveVirtual.setStatus('current')
if mibBuilder.loadTexts: memActiveVirtual.setDescription('Active virtual memory (32 bit)\n\t\t\t\t\t  NOTE: This 32 bit object has been superseded by a 64 bit object -\n\t\t\t\t\t  memActiveVirtual64, which is supported by Check Point SVN FP3 and above. The\n\t\t\t\t\t  32 bit object is still supported, but it is recommended to work with the new\n\t\t\t\t\t  64 bit object (avoid receiving erroneous values from 64 bit machines).')
memTotalReal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memTotalReal.setStatus('current')
if mibBuilder.loadTexts: memTotalReal.setDescription('Total real memory (32 bit)\n\t\t\t\t\t  NOTE: This 32 bit object has been superseded by a 64 bit object -\n\t\t\t\t\t  memTotalReal64, which is supported by Check Point SVN FP3 and above. The\n\t\t\t\t\t  32 bit object is still supported, but it is recommended to work with the new\n\t\t\t\t\t  64 bit object (avoid receiving erroneous values from 64 bit machines).')
memActiveReal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memActiveReal.setStatus('current')
if mibBuilder.loadTexts: memActiveReal.setDescription('Active real memory (32 bit)\n\t\t\t\t\t  NOTE: This 32 bit object has been superseded by a 64 bit object -\n\t\t\t\t\t  memActiveReal64, which is supported by Check Point SVN FP3 and above. The\n\t\t\t\t\t  32 bit object is still supported, but it is recommended to work with the new\n\t\t\t\t\t  64 bit object (avoid receiving erroneous values from 64 bit machines).')
memFreeReal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memFreeReal.setStatus('current')
if mibBuilder.loadTexts: memFreeReal.setDescription('Free real memory (32 bit)\n\t\t\t\t\t  NOTE: This 32 bit object has been superseded by a 64 bit object -\n\t\t\t\t\t  memFreeReal64, which is supported by Check Point SVN FP3 and above. The\n\t\t\t\t\t  32 bit object is still supported, but it is recommended to work with the new\n\t\t\t\t\t  64 bit object (avoid receiving erroneous values from 64 bit machines).')
memSwapsSec = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSwapsSec.setStatus('current')
if mibBuilder.loadTexts: memSwapsSec.setDescription('Memory swaped pages/sec (32 bit)\n\t\t\t\t\t  NOTE: This 32 bit object has been superseded by a 64 bit object -\n\t\t\t\t\t  memSwapsSec64, which is supported by Check Point SVN FP3 and above. The\n\t\t\t\t\t  32 bit object is still supported, but it is recommended to work with the new\n\t\t\t\t\t  64 bit object (avoid receiving erroneous values from 64 bit machines).')
memDiskTransfers = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDiskTransfers.setStatus('current')
if mibBuilder.loadTexts: memDiskTransfers.setDescription('Memory to Disk transfers/sec (32 bit)\n\t\t\t\t\t  NOTE: This 32 bit object has been superseded by a 64 bit object -\n\t\t\t\t\t  memDiskTransfers64, which is supported by Check Point SVN FP3 and above. The\n\t\t\t\t\t  32 bit object is still supported, but it is recommended to work with the new\n\t\t\t\t\t  64 bit object (avoid receiving erroneous values from 64 bit machines).')
procUsrTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procUsrTime.setStatus('current')
if mibBuilder.loadTexts: procUsrTime.setDescription('Processor user time')
procSysTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procSysTime.setStatus('current')
if mibBuilder.loadTexts: procSysTime.setDescription('Processor system time')
procIdleTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procIdleTime.setStatus('current')
if mibBuilder.loadTexts: procIdleTime.setDescription('Processor idle time')
procUsage = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procUsage.setStatus('current')
if mibBuilder.loadTexts: procUsage.setDescription('Processor usage')
procQueue = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procQueue.setStatus('current')
if mibBuilder.loadTexts: procQueue.setDescription('Processor queue length')
procInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procInterrupts.setStatus('current')
if mibBuilder.loadTexts: procInterrupts.setDescription('Processor interrupts/sec')
procNum = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procNum.setStatus('current')
if mibBuilder.loadTexts: procNum.setDescription('Number of processors')
diskTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTime.setStatus('current')
if mibBuilder.loadTexts: diskTime.setDescription('Time the disk is performing io requests')
diskQueue = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskQueue.setStatus('current')
if mibBuilder.loadTexts: diskQueue.setDescription('Disk requests queue length')
diskPercent = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPercent.setStatus('current')
if mibBuilder.loadTexts: diskPercent.setDescription('Percent of free space')
diskFreeTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFreeTotal.setStatus('current')
if mibBuilder.loadTexts: diskFreeTotal.setDescription('Disk total free space')
diskFreeAvail = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFreeAvail.setStatus('current')
if mibBuilder.loadTexts: diskFreeAvail.setDescription('Disk available free space')
diskTotal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTotal.setStatus('current')
if mibBuilder.loadTexts: diskTotal.setDescription('Disk total space')
memTotalVirtual64 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memTotalVirtual64.setStatus('current')
if mibBuilder.loadTexts: memTotalVirtual64.setDescription('Total virtual memory')
memActiveVirtual64 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memActiveVirtual64.setStatus('current')
if mibBuilder.loadTexts: memActiveVirtual64.setDescription('Active virtual memory')
memTotalReal64 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memTotalReal64.setStatus('current')
if mibBuilder.loadTexts: memTotalReal64.setDescription('Total real memory')
memActiveReal64 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memActiveReal64.setStatus('current')
if mibBuilder.loadTexts: memActiveReal64.setDescription('Active real memory')
memFreeReal64 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memFreeReal64.setStatus('current')
if mibBuilder.loadTexts: memFreeReal64.setDescription('Free real memory')
memSwapsSec64 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSwapsSec64.setStatus('current')
if mibBuilder.loadTexts: memSwapsSec64.setDescription('Memory swaped pages/sec')
memDiskTransfers64 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDiskTransfers64.setStatus('current')
if mibBuilder.loadTexts: memDiskTransfers64.setDescription('Memory to Disk transfers/sec')
multiProcTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 5), )
if mibBuilder.loadTexts: multiProcTable.setStatus('current')
if mibBuilder.loadTexts: multiProcTable.setDescription('')
vdName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 21, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vdName.setStatus('optional')
if mibBuilder.loadTexts: vdName.setDescription('Virtual-Device name')
vdType = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 21, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vdType.setStatus('optional')
if mibBuilder.loadTexts: vdType.setDescription('Virtual-Device type')
ctxId = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 21, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxId.setStatus('optional')
if mibBuilder.loadTexts: ctxId.setDescription('Virtual-Device Context ID')
multiProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 5, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "multiProcIndex"))
if mibBuilder.loadTexts: multiProcEntry.setStatus('current')
if mibBuilder.loadTexts: multiProcEntry.setDescription('')
multiProcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiProcIndex.setStatus('current')
if mibBuilder.loadTexts: multiProcIndex.setDescription('')
multiProcUserTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiProcUserTime.setStatus('current')
if mibBuilder.loadTexts: multiProcUserTime.setDescription('')
multiProcSystemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiProcSystemTime.setStatus('current')
if mibBuilder.loadTexts: multiProcSystemTime.setDescription('')
multiProcIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiProcIdleTime.setStatus('current')
if mibBuilder.loadTexts: multiProcIdleTime.setDescription('')
multiProcUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiProcUsage.setStatus('current')
if mibBuilder.loadTexts: multiProcUsage.setDescription('')
multiProcRunQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiProcRunQueue.setStatus('current')
if mibBuilder.loadTexts: multiProcRunQueue.setDescription('')
multiProcInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiProcInterrupts.setStatus('current')
if mibBuilder.loadTexts: multiProcInterrupts.setDescription('')
multiDiskTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6), )
if mibBuilder.loadTexts: multiDiskTable.setStatus('current')
if mibBuilder.loadTexts: multiDiskTable.setDescription('')
multiDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "multiDiskIndex"))
if mibBuilder.loadTexts: multiDiskEntry.setStatus('current')
if mibBuilder.loadTexts: multiDiskEntry.setDescription('')
multiDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiDiskIndex.setStatus('current')
if mibBuilder.loadTexts: multiDiskIndex.setDescription('')
multiDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiDiskName.setStatus('current')
if mibBuilder.loadTexts: multiDiskName.setDescription('')
multiDiskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiDiskSize.setStatus('current')
if mibBuilder.loadTexts: multiDiskSize.setDescription('')
multiDiskUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiDiskUsed.setStatus('current')
if mibBuilder.loadTexts: multiDiskUsed.setDescription('')
multiDiskFreeTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiDiskFreeTotalBytes.setStatus('current')
if mibBuilder.loadTexts: multiDiskFreeTotalBytes.setDescription('')
multiDiskFreeTotalPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiDiskFreeTotalPercent.setStatus('current')
if mibBuilder.loadTexts: multiDiskFreeTotalPercent.setDescription('')
multiDiskFreeAvailableBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiDiskFreeAvailableBytes.setStatus('current')
if mibBuilder.loadTexts: multiDiskFreeAvailableBytes.setDescription('')
multiDiskFreeAvailablePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiDiskFreeAvailablePercent.setStatus('current')
if mibBuilder.loadTexts: multiDiskFreeAvailablePercent.setDescription('')
raidInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7))
sensorInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8))
powerSupplyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 9))
raidVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 1), )
if mibBuilder.loadTexts: raidVolumeTable.setStatus('current')
if mibBuilder.loadTexts: raidVolumeTable.setDescription('')
raidVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "raidVolumeIndex"))
if mibBuilder.loadTexts: raidVolumeEntry.setStatus('current')
if mibBuilder.loadTexts: raidVolumeEntry.setDescription('')
raidVolumeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVolumeIndex.setStatus('current')
if mibBuilder.loadTexts: raidVolumeIndex.setDescription('')
raidVolumeID = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVolumeID.setStatus('current')
if mibBuilder.loadTexts: raidVolumeID.setDescription('Raid volume identification number')
raidVolumeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVolumeType.setStatus('current')
if mibBuilder.loadTexts: raidVolumeType.setDescription('Raid volume type, RAID-0, RAID-1E, RAID-1, RAID_10, RAID-4, RAID-5, RAID-6, RAID-60, RAID-50 (value 0-8 respectively)')
numOfDisksOnRaid = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfDisksOnRaid.setStatus('current')
if mibBuilder.loadTexts: numOfDisksOnRaid.setDescription('Number of disks on the raid')
raidVolumeMaxLBA = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVolumeMaxLBA.setStatus('current')
if mibBuilder.loadTexts: raidVolumeMaxLBA.setDescription('Raid maximum number of Logical Block Addressing')
raidVolumeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVolumeState.setStatus('current')
if mibBuilder.loadTexts: raidVolumeState.setDescription('Raid state: OPTIMAL(0), DEGRADED (1), FAILED(2) or UNKNOWN(other))')
raidVolumeFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVolumeFlags.setStatus('current')
if mibBuilder.loadTexts: raidVolumeFlags.setDescription('Raid status flags (can get more then one): ENABLED(0x01), QUIESCED(0x02), RESYNC_IN_PROGRESS(0x04),\n                    VOLUME_INACTIVE(0x08), NOT_CONFIGURED(0x10), USING_INTERIM_RECOVERY_MODE(0x20),\n\t\t    READY_FOR_RECOVERY_OPERATION(0x40), WRONG_PHYSICAL_DRIVE_WAS_REPLACED(0x80),\n\t\t    A_PHYSICAL_DRIVE_IS_NOT_PROPERLY_CONNECTED(0x100), HARDWARE_IS_OVER_HEATING(0x200),\n\t\t    HARDWARE_WAS_OVERHEATED(0x400), CURRENTLY_EXPENDING(0x800), NOT_YET_AVAILABLE(0x1000),\n\t\t    QUEUED_FOR_EXPENSION(0x2000), MIGRATING(0x4000), IMPACTED(0x8000),OFFLINE(0x10000) and CLEARING(0x20000) or NONE(0x00)')
raidVolumeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVolumeSize.setStatus('current')
if mibBuilder.loadTexts: raidVolumeSize.setDescription('Raid Volume Size (GB)')
raidDiskTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2), )
if mibBuilder.loadTexts: raidDiskTable.setStatus('current')
if mibBuilder.loadTexts: raidDiskTable.setDescription('')
raidDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "raidDiskIndex"))
if mibBuilder.loadTexts: raidDiskEntry.setStatus('current')
if mibBuilder.loadTexts: raidDiskEntry.setDescription('')
raidDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskIndex.setStatus('current')
if mibBuilder.loadTexts: raidDiskIndex.setDescription('')
raidDiskVolumeID = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskVolumeID.setStatus('current')
if mibBuilder.loadTexts: raidDiskVolumeID.setDescription('Raid volume identification')
raidDiskID = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskID.setStatus('current')
if mibBuilder.loadTexts: raidDiskID.setDescription('Raid disk SCSI identification number')
raidDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskNumber.setStatus('current')
if mibBuilder.loadTexts: raidDiskNumber.setDescription('Raid disk number: on Appliance 0 - upper disc, 1 - lower disc')
raidDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskVendor.setStatus('current')
if mibBuilder.loadTexts: raidDiskVendor.setDescription('Raid disk vendor')
raidDiskProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskProductID.setStatus('current')
if mibBuilder.loadTexts: raidDiskProductID.setDescription('Raid disk product identification')
raidDiskRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskRevision.setStatus('current')
if mibBuilder.loadTexts: raidDiskRevision.setDescription('Raid disk revision level')
raidDiskMaxLBA = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskMaxLBA.setStatus('current')
if mibBuilder.loadTexts: raidDiskMaxLBA.setDescription('Raid disk maximum number of Logical Block Addressing')
raidDiskState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskState.setStatus('current')
if mibBuilder.loadTexts: raidDiskState.setDescription('Raid disk state (can get more then one): ONLINE(0x00), MISSING(0x01), NOT_COMPATIBLE(0x02), DISC_FAILED(0x03), \n\t\t\t\tINITIALIZING(0x04), OFFLINE_REQUESTED(0x05), FAILED_REQUESTED(0x06), UNCONFIGURED_GOOD_SPUN_UP(0x07), UNCONFIGURED_GOOD_SPUN_DOWN (0x08),\n\t\t\t\tUNCONFIGURED_BAD(0x09), HOTSPARE(0x0A), DRIVE_OFFLINE(0x0B), REBUILD(0x0C), FAILED(0x0D), COPYBACK(0x0F), \n                OTHER_OFFLINE(0xFF) or UNKNOWN (other)')
raidDiskFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskFlags.setStatus('current')
if mibBuilder.loadTexts: raidDiskFlags.setDescription('Raid disk flags: OUT_OF_SYNC(0x01),QUIESCED(0x02),VERIFYING(0x04),READY(0x08) or NONE(other)')
raidDiskSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskSyncState.setStatus('current')
if mibBuilder.loadTexts: raidDiskSyncState.setDescription('Raid disk synchronized percent completed during the synchronization process, relevant only when\n                RESYNC_IN_PROGRESS flag is on')
raidDiskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 7, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskSize.setStatus('current')
if mibBuilder.loadTexts: raidDiskSize.setDescription('Raid disk size (GB)')
tempertureSensorTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 1), )
if mibBuilder.loadTexts: tempertureSensorTable.setStatus('current')
if mibBuilder.loadTexts: tempertureSensorTable.setDescription('')
tempertureSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "tempertureSensorIndex"))
if mibBuilder.loadTexts: tempertureSensorEntry.setStatus('current')
if mibBuilder.loadTexts: tempertureSensorEntry.setDescription('')
tempertureSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempertureSensorIndex.setStatus('current')
if mibBuilder.loadTexts: tempertureSensorIndex.setDescription('')
tempertureSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempertureSensorName.setStatus('current')
if mibBuilder.loadTexts: tempertureSensorName.setDescription('Sensor name')
tempertureSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempertureSensorValue.setStatus('current')
if mibBuilder.loadTexts: tempertureSensorValue.setDescription('Sensor value')
tempertureSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempertureSensorUnit.setStatus('current')
if mibBuilder.loadTexts: tempertureSensorUnit.setDescription('Sensor unit')
tempertureSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempertureSensorType.setStatus('current')
if mibBuilder.loadTexts: tempertureSensorType.setDescription('Sensor type')
tempertureSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempertureSensorStatus.setStatus('current')
if mibBuilder.loadTexts: tempertureSensorStatus.setDescription('Sensor is out of range TRUE(1), FALSE(0), READING ERROR(2)')
fanSpeedSensorTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 2), )
if mibBuilder.loadTexts: fanSpeedSensorTable.setStatus('current')
if mibBuilder.loadTexts: fanSpeedSensorTable.setDescription('')
fanSpeedSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 2, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "fanSpeedSensorIndex"))
if mibBuilder.loadTexts: fanSpeedSensorEntry.setStatus('current')
if mibBuilder.loadTexts: fanSpeedSensorEntry.setDescription('')
fanSpeedSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeedSensorIndex.setStatus('current')
if mibBuilder.loadTexts: fanSpeedSensorIndex.setDescription('')
fanSpeedSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeedSensorName.setStatus('current')
if mibBuilder.loadTexts: fanSpeedSensorName.setDescription('Sensor name')
fanSpeedSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeedSensorValue.setStatus('current')
if mibBuilder.loadTexts: fanSpeedSensorValue.setDescription('Sensor value')
fanSpeedSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeedSensorUnit.setStatus('current')
if mibBuilder.loadTexts: fanSpeedSensorUnit.setDescription('Sensor unit')
fanSpeedSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeedSensorType.setStatus('current')
if mibBuilder.loadTexts: fanSpeedSensorType.setDescription('Sensor type')
fanSpeedSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeedSensorStatus.setStatus('current')
if mibBuilder.loadTexts: fanSpeedSensorStatus.setDescription('Sensor is out of range TRUE(1), FALSE(0), READING ERROR(2)')
voltageSensorTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 3), )
if mibBuilder.loadTexts: voltageSensorTable.setStatus('current')
if mibBuilder.loadTexts: voltageSensorTable.setDescription('')
voltageSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 3, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "voltageSensorIndex"))
if mibBuilder.loadTexts: voltageSensorEntry.setStatus('current')
if mibBuilder.loadTexts: voltageSensorEntry.setDescription('')
voltageSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageSensorIndex.setStatus('current')
if mibBuilder.loadTexts: voltageSensorIndex.setDescription('')
voltageSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageSensorName.setStatus('current')
if mibBuilder.loadTexts: voltageSensorName.setDescription('Sensor name')
voltageSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageSensorValue.setStatus('current')
if mibBuilder.loadTexts: voltageSensorValue.setDescription('Sensor value')
voltageSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageSensorUnit.setStatus('current')
if mibBuilder.loadTexts: voltageSensorUnit.setDescription('Sensor unit')
voltageSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageSensorType.setStatus('current')
if mibBuilder.loadTexts: voltageSensorType.setDescription('Sensor type')
voltageSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageSensorStatus.setStatus('current')
if mibBuilder.loadTexts: voltageSensorStatus.setDescription('Sensor is out of range TRUE(1), FALSE(0), READING ERROR(2)')
powerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 9, 1), )
if mibBuilder.loadTexts: powerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: powerSupplyTable.setDescription('')
powerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 9, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "powerSupplyIndex"))
if mibBuilder.loadTexts: powerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: powerSupplyEntry.setDescription('')
powerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: powerSupplyIndex.setDescription('')
powerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: powerSupplyStatus.setDescription('Power supply status')
routingTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 6), )
if mibBuilder.loadTexts: routingTable.setStatus('current')
if mibBuilder.loadTexts: routingTable.setDescription('')
routingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 6, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "routingIndex"))
if mibBuilder.loadTexts: routingEntry.setStatus('current')
if mibBuilder.loadTexts: routingEntry.setDescription('')
routingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routingIndex.setStatus('current')
if mibBuilder.loadTexts: routingIndex.setDescription('')
routingDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routingDest.setStatus('current')
if mibBuilder.loadTexts: routingDest.setDescription('')
routingMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routingMask.setStatus('current')
if mibBuilder.loadTexts: routingMask.setDescription('')
routingGatweway = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routingGatweway.setStatus('current')
if mibBuilder.loadTexts: routingGatweway.setDescription('')
routingIntrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routingIntrfName.setStatus('current')
if mibBuilder.loadTexts: routingIntrfName.setDescription('')
svnSysTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnSysTime.setStatus('current')
if mibBuilder.loadTexts: svnSysTime.setDescription('System time')
svnRouteModDest = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 9, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnRouteModDest.setStatus('current')
if mibBuilder.loadTexts: svnRouteModDest.setDescription('Destination routing modification')
svnRouteModMask = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 9, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnRouteModMask.setStatus('current')
if mibBuilder.loadTexts: svnRouteModMask.setDescription('Subnet mask routing modification')
svnRouteModGateway = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 9, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnRouteModGateway.setStatus('current')
if mibBuilder.loadTexts: svnRouteModGateway.setDescription('Gateway routing modification')
svnRouteModIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnRouteModIfIndex.setStatus('current')
if mibBuilder.loadTexts: svnRouteModIfIndex.setDescription('Interface index routing modification')
svnRouteModIfName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 9, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnRouteModIfName.setStatus('current')
if mibBuilder.loadTexts: svnRouteModIfName.setDescription('Interface name routing modification')
svnRouteModAction = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 9, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnRouteModAction.setStatus('current')
if mibBuilder.loadTexts: svnRouteModAction.setDescription('Routing modification action')
svnUTCTimeOffset = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnUTCTimeOffset.setStatus('current')
if mibBuilder.loadTexts: svnUTCTimeOffset.setDescription('UTC time offset')
svnLogDStat = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 11, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnLogDStat.setStatus('current')
if mibBuilder.loadTexts: svnLogDStat.setDescription('Log Daemon Status')
svnSysStartTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnSysStartTime.setStatus('current')
if mibBuilder.loadTexts: svnSysStartTime.setDescription('System start time')
svnSysUniqId = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnSysUniqId.setStatus('current')
if mibBuilder.loadTexts: svnSysUniqId.setDescription('System unique ID')
svnWebUIPort = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnWebUIPort.setStatus('current')
if mibBuilder.loadTexts: svnWebUIPort.setDescription('Web UI port (0 - Not supported)')
svnPlatformInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123))
supportedPlatforms = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1))
checkPointUTM_1450 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointUTM-1450").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUTM_1450.setStatus('current')
if mibBuilder.loadTexts: checkPointUTM_1450.setDescription('UTM-1 450')
checkPointUTM_11050 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointUTM-11050").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUTM_11050.setStatus('current')
if mibBuilder.loadTexts: checkPointUTM_11050.setDescription('UTM-1 1050')
checkPointUTM_12050 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointUTM-12050").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUTM_12050.setStatus('current')
if mibBuilder.loadTexts: checkPointUTM_12050.setDescription('UTM-1 2050')
checkPointUTM_1130 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointUTM-1130").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUTM_1130.setStatus('current')
if mibBuilder.loadTexts: checkPointUTM_1130.setDescription('UTM-1 130')
checkPointUTM_1270 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointUTM-1270").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUTM_1270.setStatus('current')
if mibBuilder.loadTexts: checkPointUTM_1270.setDescription('UTM-1 270')
checkPointUTM_1570 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointUTM-1570").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUTM_1570.setStatus('current')
if mibBuilder.loadTexts: checkPointUTM_1570.setDescription('UTM-1 570')
checkPointUTM_11070 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointUTM-11070").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUTM_11070.setStatus('current')
if mibBuilder.loadTexts: checkPointUTM_11070.setDescription('UTM-1 1070')
checkPointUTM_12070 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointUTM-12070").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUTM_12070.setStatus('current')
if mibBuilder.loadTexts: checkPointUTM_12070.setDescription('UTM-1 2070')
checkPointUTM_13070 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointUTM-13070").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUTM_13070.setStatus('current')
if mibBuilder.loadTexts: checkPointUTM_13070.setDescription('UTM-1 3070')
checkPointPower_15070 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointPower-15070").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointPower_15070.setStatus('current')
if mibBuilder.loadTexts: checkPointPower_15070.setDescription('Power-1 5070')
checkPointPower_19070 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointPower-19070").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointPower_19070.setStatus('current')
if mibBuilder.loadTexts: checkPointPower_19070.setDescription('Power-1 9070')
checkPointPower_111000 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointPower-111000").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointPower_111000.setStatus('current')
if mibBuilder.loadTexts: checkPointPower_111000.setDescription('Power-1 11000')
checkPointSmart_15 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-15").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_15.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_15.setDescription('Smart-1 5')
checkPointSmart_125 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-125").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_125.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_125.setDescription('Smart-1 25')
checkPointSmart_150 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-150").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_150.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_150.setDescription('Smart-1 50')
checkPointSmart_1150 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-1150").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_1150.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_1150.setDescription('Smart-1 150')
checkPointIP150 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointIP150.setStatus('current')
if mibBuilder.loadTexts: checkPointIP150.setDescription('IP150')
checkPointIP280 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointIP280.setStatus('current')
if mibBuilder.loadTexts: checkPointIP280.setDescription('IP280')
checkPointIP290 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointIP290.setStatus('current')
if mibBuilder.loadTexts: checkPointIP290.setDescription('IP290')
checkPointIP390 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointIP390.setStatus('current')
if mibBuilder.loadTexts: checkPointIP390.setDescription('IP390')
checkPointIP560 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointIP560.setStatus('current')
if mibBuilder.loadTexts: checkPointIP560.setDescription('IP560')
checkPointIP690 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointIP690.setStatus('current')
if mibBuilder.loadTexts: checkPointIP690.setDescription('IP690')
checkPointIP1280 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointIP1280.setStatus('current')
if mibBuilder.loadTexts: checkPointIP1280.setDescription('IP1280')
checkPointIP2450 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointIP2450.setStatus('current')
if mibBuilder.loadTexts: checkPointIP2450.setDescription('IP2450')
checkPointUNIVERGEUnifiedWall1000 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUNIVERGEUnifiedWall1000.setStatus('current')
if mibBuilder.loadTexts: checkPointUNIVERGEUnifiedWall1000.setDescription('UNIVERGE UnifiedWall 1000')
checkPointUNIVERGEUnifiedWall2000 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUNIVERGEUnifiedWall2000.setStatus('current')
if mibBuilder.loadTexts: checkPointUNIVERGEUnifiedWall2000.setDescription('UNIVERGE UnifiedWall 2000')
checkPointUNIVERGEUnifiedWall4000 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUNIVERGEUnifiedWall4000.setStatus('current')
if mibBuilder.loadTexts: checkPointUNIVERGEUnifiedWall4000.setDescription('UNIVERGE UnifiedWall 4000')
checkPointUNIVERGEUnifiedWall100 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointUNIVERGEUnifiedWall100.setStatus('current')
if mibBuilder.loadTexts: checkPointUNIVERGEUnifiedWall100.setDescription('UNIVERGE UnifiedWall 100')
checkPointDLP_19571 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointDLP-19571").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointDLP_19571.setStatus('current')
if mibBuilder.loadTexts: checkPointDLP_19571.setDescription('DLP-1 9571')
checkPointDLP_12571 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointDLP-12571").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointDLP_12571.setStatus('current')
if mibBuilder.loadTexts: checkPointDLP_12571.setDescription('DLP-1 2571')
checkPointIPS_12076 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointIPS-12076").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointIPS_12076.setStatus('current')
if mibBuilder.loadTexts: checkPointIPS_12076.setDescription('IPS-1 2076')
checkPointIPS_15076 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointIPS-15076").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointIPS_15076.setStatus('current')
if mibBuilder.loadTexts: checkPointIPS_15076.setDescription('IPS-1 5076')
checkPointIPS_19076 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointIPS-19076").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointIPS_19076.setStatus('current')
if mibBuilder.loadTexts: checkPointIPS_19076.setDescription('IPS-1 9076')
checkPoint2200 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint2200.setStatus('current')
if mibBuilder.loadTexts: checkPoint2200.setDescription('Check Point 2200')
checkPoint4200 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint4200.setStatus('current')
if mibBuilder.loadTexts: checkPoint4200.setDescription('Check Point 4200')
checkPoint4400 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint4400.setStatus('current')
if mibBuilder.loadTexts: checkPoint4400.setDescription('Check Point 4400')
checkPoint4600 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint4600.setStatus('current')
if mibBuilder.loadTexts: checkPoint4600.setDescription('Check Point 4600')
checkPoint4800 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint4800.setStatus('current')
if mibBuilder.loadTexts: checkPoint4800.setDescription('Check Point 4800')
checkPointTE250 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointTE250.setStatus('current')
if mibBuilder.loadTexts: checkPointTE250.setDescription('Check Point TE250')
checkPoint12200 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint12200.setStatus('current')
if mibBuilder.loadTexts: checkPoint12200.setDescription('Check Point 12200')
checkPoint12400 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint12400.setStatus('current')
if mibBuilder.loadTexts: checkPoint12400.setDescription('Check Point 12400')
checkPoint12600 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint12600.setStatus('current')
if mibBuilder.loadTexts: checkPoint12600.setDescription('Check Point 12600')
checkPointTE1000 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointTE1000.setStatus('current')
if mibBuilder.loadTexts: checkPointTE1000.setDescription('Check Point TE1000')
checkPoint13500 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint13500.setStatus('current')
if mibBuilder.loadTexts: checkPoint13500.setDescription('Check Point 13500')
checkPoint21400 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint21400.setStatus('current')
if mibBuilder.loadTexts: checkPoint21400.setDescription('Check Point 21400')
checkPoint21600 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint21600.setStatus('current')
if mibBuilder.loadTexts: checkPoint21600.setDescription('Check Point 21600')
checkPoint21700 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint21700.setStatus('current')
if mibBuilder.loadTexts: checkPoint21700.setDescription('Check Point 21700')
checkPointVMware = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointVMware.setStatus('current')
if mibBuilder.loadTexts: checkPointVMware.setDescription('VMware')
checkPointOpenServer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointOpenServer.setStatus('current')
if mibBuilder.loadTexts: checkPointOpenServer.setDescription('Open Server')
checkPointSmart_1205 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-1205").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_1205.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_1205.setDescription('Smart-1 205')
checkPointSmart_1210 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-1210").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_1210.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_1210.setDescription('Smart-1 210')
checkPointSmart_1225 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-1225").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_1225.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_1225.setDescription('Smart-1 225')
checkPointSmart_13050 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-13050").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_13050.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_13050.setDescription('Smart-1 3050')
checkPointSmart_13150 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("checkPointSmart-13150").setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointSmart_13150.setStatus('current')
if mibBuilder.loadTexts: checkPointSmart_13150.setDescription('Smart-1 3150')
checkPoint13800 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint13800.setStatus('current')
if mibBuilder.loadTexts: checkPoint13800.setDescription('Check Point 13800')
checkPoint21800 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint21800.setStatus('current')
if mibBuilder.loadTexts: checkPoint21800.setDescription('Check Point 21800')
checkPointTE250X = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointTE250X.setStatus('current')
if mibBuilder.loadTexts: checkPointTE250X.setDescription('Check Point TE250X')
checkPointTE1000X = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointTE1000X.setStatus('current')
if mibBuilder.loadTexts: checkPointTE1000X.setDescription('Check Point TE1000X')
checkPointTE2000X = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 59), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointTE2000X.setStatus('current')
if mibBuilder.loadTexts: checkPointTE2000X.setDescription('Check Point TE2000X')
checkPointTE100X = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPointTE100X.setStatus('current')
if mibBuilder.loadTexts: checkPointTE100X.setDescription('Check Point TE100X')
checkPoint23500 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 61), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint23500.setStatus('current')
if mibBuilder.loadTexts: checkPoint23500.setDescription('Check Point 23500')
checkPoint23800 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint23800.setStatus('current')
if mibBuilder.loadTexts: checkPoint23800.setDescription('Check Point 23800')
checkPoint15400 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 63), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint15400.setStatus('current')
if mibBuilder.loadTexts: checkPoint15400.setDescription('Check Point 15400')
checkPoint15600 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 64), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint15600.setStatus('current')
if mibBuilder.loadTexts: checkPoint15600.setDescription('Check Point 15600')
checkPoint3200 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint3200.setStatus('current')
if mibBuilder.loadTexts: checkPoint3200.setDescription('Check Point 3200')
checkPoint5200 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 66), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint5200.setStatus('current')
if mibBuilder.loadTexts: checkPoint5200.setDescription('Check Point 5200')
checkPoint5400 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 67), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint5400.setStatus('current')
if mibBuilder.loadTexts: checkPoint5400.setDescription('Check Point 5400')
checkPoint5600 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint5600.setStatus('current')
if mibBuilder.loadTexts: checkPoint5600.setDescription('Check Point 5600')
checkPoint5800 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint5800.setStatus('current')
if mibBuilder.loadTexts: checkPoint5800.setDescription('Check Point 5800')
checkPoint5900 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint5900.setStatus('current')
if mibBuilder.loadTexts: checkPoint5900.setDescription('Check Point 5900')
checkPoint3100 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 71), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint3100.setStatus('current')
if mibBuilder.loadTexts: checkPoint3100.setDescription('Check Point 3100')
checkPoint5100 = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 123, 1, 72), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkPoint5100.setStatus('current')
if mibBuilder.loadTexts: checkPoint5100.setDescription('Check Point 5100')
svnLicensing = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18))
licensingTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1), )
if mibBuilder.loadTexts: licensingTable.setStatus('current')
if mibBuilder.loadTexts: licensingTable.setDescription('')
licensingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "licensingIndex"))
if mibBuilder.loadTexts: licensingEntry.setStatus('current')
if mibBuilder.loadTexts: licensingEntry.setDescription('')
licensingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingIndex.setStatus('current')
if mibBuilder.loadTexts: licensingIndex.setDescription('')
licensingID = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingID.setStatus('current')
if mibBuilder.loadTexts: licensingID.setDescription('')
licensingBladeGUIOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingBladeGUIOrder.setStatus('current')
if mibBuilder.loadTexts: licensingBladeGUIOrder.setDescription('')
licensingBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingBladeName.setStatus('current')
if mibBuilder.loadTexts: licensingBladeName.setDescription('')
licensingState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingState.setStatus('current')
if mibBuilder.loadTexts: licensingState.setDescription('')
licensingExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingExpirationDate.setStatus('current')
if mibBuilder.loadTexts: licensingExpirationDate.setDescription('')
licensingImpact = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingImpact.setStatus('current')
if mibBuilder.loadTexts: licensingImpact.setDescription('')
licensingBladeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingBladeActive.setStatus('current')
if mibBuilder.loadTexts: licensingBladeActive.setDescription('')
licensingTotalQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingTotalQuota.setStatus('current')
if mibBuilder.loadTexts: licensingTotalQuota.setDescription('')
licensingUsedQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingUsedQuota.setStatus('current')
if mibBuilder.loadTexts: licensingUsedQuota.setDescription('')
licensingAssetInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 2))
licensingAssetAccountId = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingAssetAccountId.setStatus('current')
if mibBuilder.loadTexts: licensingAssetAccountId.setDescription('')
licensingAssetPackageDescription = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingAssetPackageDescription.setStatus('current')
if mibBuilder.loadTexts: licensingAssetPackageDescription.setDescription('')
licensingAssetContainerCK = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingAssetContainerCK.setStatus('current')
if mibBuilder.loadTexts: licensingAssetContainerCK.setDescription('')
licensingAssetCKSignature = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingAssetCKSignature.setStatus('current')
if mibBuilder.loadTexts: licensingAssetCKSignature.setDescription('')
licensingAssetContainerSKU = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingAssetContainerSKU.setStatus('current')
if mibBuilder.loadTexts: licensingAssetContainerSKU.setDescription('')
licensingAssetSupportLevel = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingAssetSupportLevel.setStatus('current')
if mibBuilder.loadTexts: licensingAssetSupportLevel.setDescription('')
licensingAssetSupportExpiration = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingAssetSupportExpiration.setStatus('current')
if mibBuilder.loadTexts: licensingAssetSupportExpiration.setDescription('')
licensingAssetActivationStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 18, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingAssetActivationStatus.setStatus('current')
if mibBuilder.loadTexts: licensingAssetActivationStatus.setDescription('')
svnConnectivity = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnConnectivity.setStatus('current')
if mibBuilder.loadTexts: svnConnectivity.setDescription('User Center connectivity')
svnNetStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50))
svnNetIfTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1), )
if mibBuilder.loadTexts: svnNetIfTable.setStatus('current')
if mibBuilder.loadTexts: svnNetIfTable.setDescription('')
svnNetIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "svnNetIfIndex"))
if mibBuilder.loadTexts: svnNetIfTableEntry.setStatus('current')
if mibBuilder.loadTexts: svnNetIfTableEntry.setDescription('')
svnNetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfIndex.setStatus('current')
if mibBuilder.loadTexts: svnNetIfIndex.setDescription('')
svnNetIfVsid = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfVsid.setStatus('current')
if mibBuilder.loadTexts: svnNetIfVsid.setDescription('')
svnNetIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfName.setStatus('current')
if mibBuilder.loadTexts: svnNetIfName.setDescription('')
svnNetIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfAddress.setStatus('current')
if mibBuilder.loadTexts: svnNetIfAddress.setDescription('')
svnNetIfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfMask.setStatus('current')
if mibBuilder.loadTexts: svnNetIfMask.setDescription('')
svnNetIfMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfMTU.setStatus('current')
if mibBuilder.loadTexts: svnNetIfMTU.setDescription('')
svnNetIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfState.setStatus('current')
if mibBuilder.loadTexts: svnNetIfState.setDescription('')
svnNetIfMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfMAC.setStatus('current')
if mibBuilder.loadTexts: svnNetIfMAC.setDescription('')
svnNetIfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfDescription.setStatus('current')
if mibBuilder.loadTexts: svnNetIfDescription.setDescription('')
svnNetIfOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfOperState.setStatus('current')
if mibBuilder.loadTexts: svnNetIfOperState.setDescription('')
svnNetIfRXBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfRXBytes.setStatus('current')
if mibBuilder.loadTexts: svnNetIfRXBytes.setDescription('')
svnNetIfRXDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfRXDrops.setStatus('current')
if mibBuilder.loadTexts: svnNetIfRXDrops.setDescription('')
svnNetIfRXErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfRXErrors.setStatus('current')
if mibBuilder.loadTexts: svnNetIfRXErrors.setDescription('')
svnNetIfRXPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfRXPackets.setStatus('current')
if mibBuilder.loadTexts: svnNetIfRXPackets.setDescription('')
svnNetIfTXBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfTXBytes.setStatus('current')
if mibBuilder.loadTexts: svnNetIfTXBytes.setDescription('')
svnNetIfTXDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfTXDrops.setStatus('current')
if mibBuilder.loadTexts: svnNetIfTXDrops.setDescription('')
svnNetIfTXErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfTXErrors.setStatus('current')
if mibBuilder.loadTexts: svnNetIfTXErrors.setDescription('')
svnNetIfTXPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 50, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnNetIfTXPackets.setStatus('current')
if mibBuilder.loadTexts: svnNetIfTXPackets.setDescription('')
vsRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 6, 51), )
if mibBuilder.loadTexts: vsRoutingTable.setStatus('current')
if mibBuilder.loadTexts: vsRoutingTable.setDescription('')
vsRoutingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 6, 51, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "vsRoutingIndex"))
if mibBuilder.loadTexts: vsRoutingEntry.setStatus('current')
if mibBuilder.loadTexts: vsRoutingEntry.setDescription('')
vsRoutingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 51, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRoutingIndex.setStatus('current')
if mibBuilder.loadTexts: vsRoutingIndex.setDescription('')
vsRoutingDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 51, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRoutingDest.setStatus('current')
if mibBuilder.loadTexts: vsRoutingDest.setDescription('')
vsRoutingMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 51, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRoutingMask.setStatus('current')
if mibBuilder.loadTexts: vsRoutingMask.setDescription('')
vsRoutingGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 51, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRoutingGateway.setStatus('current')
if mibBuilder.loadTexts: vsRoutingGateway.setDescription('')
vsRoutingIntrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 51, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRoutingIntrfName.setStatus('current')
if mibBuilder.loadTexts: vsRoutingIntrfName.setDescription('')
vsRoutingVsId = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 6, 51, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRoutingVsId.setStatus('current')
if mibBuilder.loadTexts: vsRoutingVsId.setDescription('')
svnStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 101), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnStatCode.setStatus('current')
if mibBuilder.loadTexts: svnStatCode.setDescription('Status code')
svnStatShortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnStatShortDescr.setStatus('current')
if mibBuilder.loadTexts: svnStatShortDescr.setDescription('Status short description')
svnStatLongDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 103), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnStatLongDescr.setStatus('current')
if mibBuilder.loadTexts: svnStatLongDescr.setDescription('Status long description')
svnServicePack = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 999), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svnServicePack.setStatus('current')
if mibBuilder.loadTexts: svnServicePack.setDescription('SVN service pack')
mgProdName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgProdName.setStatus('current')
if mibBuilder.loadTexts: mgProdName.setDescription('Product name')
mgVerMajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgVerMajor.setStatus('current')
if mibBuilder.loadTexts: mgVerMajor.setDescription('Major version')
mgVerMinor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgVerMinor.setStatus('current')
if mibBuilder.loadTexts: mgVerMinor.setDescription('Minor version')
mgBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgBuildNumber.setStatus('current')
if mibBuilder.loadTexts: mgBuildNumber.setDescription('Build number')
mgActiveStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgActiveStatus.setStatus('current')
if mibBuilder.loadTexts: mgActiveStatus.setDescription('Active status')
mgFwmIsAlive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgFwmIsAlive.setStatus('current')
if mibBuilder.loadTexts: mgFwmIsAlive.setDescription('Managment is alive')
mgConnectedClientsTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 7, 7), )
if mibBuilder.loadTexts: mgConnectedClientsTable.setStatus('current')
if mibBuilder.loadTexts: mgConnectedClientsTable.setDescription('')
mgMgmtHAJournals = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgMgmtHAJournals.setStatus('current')
if mibBuilder.loadTexts: mgMgmtHAJournals.setDescription('Management HA synchronization journals')
mgIsLicenseViolation = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgIsLicenseViolation.setStatus('current')
if mibBuilder.loadTexts: mgIsLicenseViolation.setDescription('License violation detected')
mgLicenseViolationMsg = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgLicenseViolationMsg.setStatus('current')
if mibBuilder.loadTexts: mgLicenseViolationMsg.setDescription('License violation detected')
mgConnectedClientsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 7, 7, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "mgIndex"))
if mibBuilder.loadTexts: mgConnectedClientsEntry.setStatus('current')
if mibBuilder.loadTexts: mgConnectedClientsEntry.setDescription('')
mgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 7, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgIndex.setStatus('current')
if mibBuilder.loadTexts: mgIndex.setDescription('')
mgClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 7, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgClientName.setStatus('current')
if mibBuilder.loadTexts: mgClientName.setDescription('')
mgClientHost = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 7, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgClientHost.setStatus('current')
if mibBuilder.loadTexts: mgClientHost.setDescription('')
mgClientDbLock = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 7, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgClientDbLock.setStatus('current')
if mibBuilder.loadTexts: mgClientDbLock.setDescription('')
mgApplicationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 7, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgApplicationType.setStatus('current')
if mibBuilder.loadTexts: mgApplicationType.setDescription('')
mgLogServerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14))
mgLSLogReceiveRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 1), Unsigned32())
if mibBuilder.loadTexts: mgLSLogReceiveRate.setStatus('current')
if mibBuilder.loadTexts: mgLSLogReceiveRate.setDescription('MGMT Log Server Log Receive Rate')
mgLSLogReceiveRatePeak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 2), Unsigned32())
if mibBuilder.loadTexts: mgLSLogReceiveRatePeak.setStatus('current')
if mibBuilder.loadTexts: mgLSLogReceiveRatePeak.setDescription('MGMT Log Server Log Receive Rate Peak')
mgLSLogReceiveRate10Min = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 3), Unsigned32())
if mibBuilder.loadTexts: mgLSLogReceiveRate10Min.setStatus('current')
if mibBuilder.loadTexts: mgLSLogReceiveRate10Min.setDescription('MGMT Log Server Log Receive Rate (Last 10 Minutes)')
mgConnectedGatewaysTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 4), )
if mibBuilder.loadTexts: mgConnectedGatewaysTable.setStatus('current')
if mibBuilder.loadTexts: mgConnectedGatewaysTable.setDescription('Connected Gateways Table')
mgConnectedGatewaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 4, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "mglsGWIndex"))
if mibBuilder.loadTexts: mgConnectedGatewaysEntry.setStatus('current')
if mibBuilder.loadTexts: mgConnectedGatewaysEntry.setDescription('')
mglsGWIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mglsGWIndex.setStatus('current')
if mibBuilder.loadTexts: mglsGWIndex.setDescription('')
mglsGWIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mglsGWIP.setStatus('current')
if mibBuilder.loadTexts: mglsGWIP.setDescription('')
mglsGWState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mglsGWState.setStatus('current')
if mibBuilder.loadTexts: mglsGWState.setDescription('')
mglsGWLastLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mglsGWLastLoginTime.setStatus('current')
if mibBuilder.loadTexts: mglsGWLastLoginTime.setDescription('')
mglsGWLogReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mglsGWLogReceiveRate.setStatus('current')
if mibBuilder.loadTexts: mglsGWLogReceiveRate.setDescription('')
mgIndexerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5))
mgIndexerInfoTotalReadLogs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 1), DisplayString())
if mibBuilder.loadTexts: mgIndexerInfoTotalReadLogs.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoTotalReadLogs.setDescription('Total Read Logs')
mgIndexerInfoTotalUpdatesAndLogsIndexed = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 2), DisplayString())
if mibBuilder.loadTexts: mgIndexerInfoTotalUpdatesAndLogsIndexed.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoTotalUpdatesAndLogsIndexed.setDescription('Total Updates and Logs Indexed')
mgIndexerInfoTotalReadLogsErrors = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 3), DisplayString())
if mibBuilder.loadTexts: mgIndexerInfoTotalReadLogsErrors.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoTotalReadLogsErrors.setDescription('Total Read Logs Errors')
mgIndexerInfoTotalUpdatesAndLogsIndexedErrors = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 4), DisplayString())
if mibBuilder.loadTexts: mgIndexerInfoTotalUpdatesAndLogsIndexedErrors.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoTotalUpdatesAndLogsIndexedErrors.setDescription('Total Updates and Logs Indexed Errors')
mgIndexerInfoUpdatesAndLogsIndexedRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 5), Unsigned32())
if mibBuilder.loadTexts: mgIndexerInfoUpdatesAndLogsIndexedRate.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoUpdatesAndLogsIndexedRate.setDescription('Updates and Logs Indexed Rate')
mgIndexerInfoReadLogsRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 6), Unsigned32())
if mibBuilder.loadTexts: mgIndexerInfoReadLogsRate.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoReadLogsRate.setDescription('Read Logs Rate')
mgIndexerInfoUpdatesAndLogsIndexedRate10min = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 7), Unsigned32())
if mibBuilder.loadTexts: mgIndexerInfoUpdatesAndLogsIndexedRate10min.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoUpdatesAndLogsIndexedRate10min.setDescription('Updates and Logs Indexed Rate (10 min)')
mgIndexerInfoReadLogsRate10min = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 8), Unsigned32())
if mibBuilder.loadTexts: mgIndexerInfoReadLogsRate10min.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoReadLogsRate10min.setDescription('Read Logs Rate  (10 min)')
mgIndexerInfoUpdatesAndLogsIndexedRate60min = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 9), Unsigned32())
if mibBuilder.loadTexts: mgIndexerInfoUpdatesAndLogsIndexedRate60min.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoUpdatesAndLogsIndexedRate60min.setDescription('Updates and Logs Indexed Rate (60 min)')
mgIndexerInfoReadLogsRate60min = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 10), Unsigned32())
if mibBuilder.loadTexts: mgIndexerInfoReadLogsRate60min.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoReadLogsRate60min.setDescription('Read Logs Rate (60 min)')
mgIndexerInfoUpdatesAndLogsIndexedRatePeak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 11), Unsigned32())
if mibBuilder.loadTexts: mgIndexerInfoUpdatesAndLogsIndexedRatePeak.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoUpdatesAndLogsIndexedRatePeak.setDescription('Updates and Logs Indexed Rate Peak')
mgIndexerInfoReadLogsRatePeak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 12), Unsigned32())
if mibBuilder.loadTexts: mgIndexerInfoReadLogsRatePeak.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoReadLogsRatePeak.setDescription('Read Logs Rate Peak')
mgIndexerInfoReadLogsDelay = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 5, 13), Unsigned32())
if mibBuilder.loadTexts: mgIndexerInfoReadLogsDelay.setStatus('current')
if mibBuilder.loadTexts: mgIndexerInfoReadLogsDelay.setDescription('Read Logs Delay')
mgStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgStatCode.setStatus('current')
if mibBuilder.loadTexts: mgStatCode.setDescription('Status code')
mgStatShortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgStatShortDescr.setStatus('current')
if mibBuilder.loadTexts: mgStatShortDescr.setDescription('Status short description')
mgStatLongDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 103), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgStatLongDescr.setStatus('current')
if mibBuilder.loadTexts: mgStatLongDescr.setDescription('Status long description')
mgLSLogReceiveRate1Hour = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 7, 14, 6), Unsigned32())
if mibBuilder.loadTexts: mgLSLogReceiveRate1Hour.setStatus('current')
if mibBuilder.loadTexts: mgLSLogReceiveRate1Hour.setDescription('MGMT Log Server Log Receive Rate (Last Hour)')
wamPluginPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 8, 6))
wamPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 8, 7))
wamUagQueries = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 8, 8))
wamGlobalPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 8, 9))
wamProdName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamProdName.setStatus('current')
if mibBuilder.loadTexts: wamProdName.setDescription('Product name')
wamVerMajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamVerMajor.setStatus('current')
if mibBuilder.loadTexts: wamVerMajor.setDescription('Major version')
wamVerMinor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamVerMinor.setStatus('current')
if mibBuilder.loadTexts: wamVerMinor.setDescription('Minor version')
wamState = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamState.setStatus('current')
if mibBuilder.loadTexts: wamState.setDescription('WAM state')
wamName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamName.setStatus('current')
if mibBuilder.loadTexts: wamName.setDescription('WAM name')
wamStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamStatCode.setStatus('current')
if mibBuilder.loadTexts: wamStatCode.setDescription('WAM status code')
wamStatShortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamStatShortDescr.setStatus('current')
if mibBuilder.loadTexts: wamStatShortDescr.setDescription('WAM status short description')
wamStatLongDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 103), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamStatLongDescr.setStatus('current')
if mibBuilder.loadTexts: wamStatLongDescr.setDescription('WAM status full description')
wamAcceptReq = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamAcceptReq.setStatus('current')
if mibBuilder.loadTexts: wamAcceptReq.setDescription('Plugin accepted requests')
wamRejectReq = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamRejectReq.setStatus('current')
if mibBuilder.loadTexts: wamRejectReq.setDescription('Plugin rejected requests')
wamPolicyName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamPolicyName.setStatus('current')
if mibBuilder.loadTexts: wamPolicyName.setDescription('Policy name')
wamPolicyUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamPolicyUpdate.setStatus('current')
if mibBuilder.loadTexts: wamPolicyUpdate.setDescription('Last update time')
wamUagHost = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamUagHost.setStatus('current')
if mibBuilder.loadTexts: wamUagHost.setDescription('UAG host name')
wamUagIp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamUagIp.setStatus('current')
if mibBuilder.loadTexts: wamUagIp.setDescription('UAG IP address')
wamUagPort = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamUagPort.setStatus('current')
if mibBuilder.loadTexts: wamUagPort.setDescription('UAG port')
wamUagNoQueries = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamUagNoQueries.setStatus('current')
if mibBuilder.loadTexts: wamUagNoQueries.setDescription('UAG no. of queries')
wamUagLastQuery = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamUagLastQuery.setStatus('current')
if mibBuilder.loadTexts: wamUagLastQuery.setDescription('UAG last query time')
wamOpenSessions = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamOpenSessions.setStatus('current')
if mibBuilder.loadTexts: wamOpenSessions.setDescription('Open sessions')
wamLastSession = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 8, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wamLastSession.setStatus('current')
if mibBuilder.loadTexts: wamLastSession.setDescription('Last open session time')
dtpsProdName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpsProdName.setStatus('current')
if mibBuilder.loadTexts: dtpsProdName.setDescription('Product name')
dtpsVerMajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpsVerMajor.setStatus('current')
if mibBuilder.loadTexts: dtpsVerMajor.setDescription('Major version')
dtpsVerMinor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpsVerMinor.setStatus('current')
if mibBuilder.loadTexts: dtpsVerMinor.setDescription('Minor version')
dtpsLicensedUsers = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 9, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpsLicensedUsers.setStatus('current')
if mibBuilder.loadTexts: dtpsLicensedUsers.setDescription('Licensed users')
dtpsConnectedUsers = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 9, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpsConnectedUsers.setStatus('current')
if mibBuilder.loadTexts: dtpsConnectedUsers.setDescription('Connected users')
dtpsStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 9, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpsStatCode.setStatus('current')
if mibBuilder.loadTexts: dtpsStatCode.setDescription('Status code')
dtpsStatShortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 9, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpsStatShortDescr.setStatus('current')
if mibBuilder.loadTexts: dtpsStatShortDescr.setDescription('Status short description')
dtpsStatLongDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 9, 103), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpsStatLongDescr.setStatus('current')
if mibBuilder.loadTexts: dtpsStatLongDescr.setDescription('Status long description')
lsProdName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsProdName.setStatus('current')
if mibBuilder.loadTexts: lsProdName.setDescription('Product name')
lsVerMajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsVerMajor.setStatus('current')
if mibBuilder.loadTexts: lsVerMajor.setDescription('Major version')
lsVerMinor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsVerMinor.setStatus('current')
if mibBuilder.loadTexts: lsVerMinor.setDescription('Minor version')
lsBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsBuildNumber.setStatus('current')
if mibBuilder.loadTexts: lsBuildNumber.setDescription('Build number')
lsFwmIsAlive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsFwmIsAlive.setStatus('current')
if mibBuilder.loadTexts: lsFwmIsAlive.setDescription('Log Server is alive')
lsLoggingInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14))
lsLogReceiveRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 1), Unsigned32())
if mibBuilder.loadTexts: lsLogReceiveRate.setStatus('current')
if mibBuilder.loadTexts: lsLogReceiveRate.setDescription('Log Server Log Receive Rate')
lsLogReceiveRatePeak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 2), Unsigned32())
if mibBuilder.loadTexts: lsLogReceiveRatePeak.setStatus('current')
if mibBuilder.loadTexts: lsLogReceiveRatePeak.setDescription('Log Server Log Receive Rate Peak')
lsLogReceiveRate10Min = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 3), Unsigned32())
if mibBuilder.loadTexts: lsLogReceiveRate10Min.setStatus('current')
if mibBuilder.loadTexts: lsLogReceiveRate10Min.setDescription('Log Server Log Receive Rate (Last 10 Minutes)')
lsConnectedGatewaysTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 4), )
if mibBuilder.loadTexts: lsConnectedGatewaysTable.setStatus('current')
if mibBuilder.loadTexts: lsConnectedGatewaysTable.setDescription('Connected Gateways Table')
lsConnectedGatewaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 4, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "lsGWIndex"))
if mibBuilder.loadTexts: lsConnectedGatewaysEntry.setStatus('current')
if mibBuilder.loadTexts: lsConnectedGatewaysEntry.setDescription('')
lsGWIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsGWIndex.setStatus('current')
if mibBuilder.loadTexts: lsGWIndex.setDescription('')
lsGWIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsGWIP.setStatus('current')
if mibBuilder.loadTexts: lsGWIP.setDescription('')
lsGWState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsGWState.setStatus('current')
if mibBuilder.loadTexts: lsGWState.setDescription('')
lsGWLastLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsGWLastLoginTime.setStatus('current')
if mibBuilder.loadTexts: lsGWLastLoginTime.setDescription('')
lsGWLogReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsGWLogReceiveRate.setStatus('current')
if mibBuilder.loadTexts: lsGWLogReceiveRate.setDescription('')
lsIndexerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 5))
lsIndexerInfoTotalReadLogs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 5, 1), Unsigned32())
if mibBuilder.loadTexts: lsIndexerInfoTotalReadLogs.setStatus('current')
if mibBuilder.loadTexts: lsIndexerInfoTotalReadLogs.setDescription('Total Read Logs')
lsIndexerInfoTotalUpdatesAndLogsIndexed = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 5, 2), Unsigned32())
if mibBuilder.loadTexts: lsIndexerInfoTotalUpdatesAndLogsIndexed.setStatus('current')
if mibBuilder.loadTexts: lsIndexerInfoTotalUpdatesAndLogsIndexed.setDescription('Total Updates and Logs Indexed')
lsIndexerInfoTotalReadLogsErrors = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 5, 3), Unsigned32())
if mibBuilder.loadTexts: lsIndexerInfoTotalReadLogsErrors.setStatus('current')
if mibBuilder.loadTexts: lsIndexerInfoTotalReadLogsErrors.setDescription('Total Read Logs Errors')
lsIndexerInfoTotalUpdatesAndLogsIndexedErrors = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 5, 4), Unsigned32())
if mibBuilder.loadTexts: lsIndexerInfoTotalUpdatesAndLogsIndexedErrors.setStatus('current')
if mibBuilder.loadTexts: lsIndexerInfoTotalUpdatesAndLogsIndexedErrors.setDescription('Total Updates and Logs Indexed Errors')
lsIndexerInfoUpdatesAndLogsIndexedRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 5, 5), Unsigned32())
if mibBuilder.loadTexts: lsIndexerInfoUpdatesAndLogsIndexedRate.setStatus('current')
if mibBuilder.loadTexts: lsIndexerInfoUpdatesAndLogsIndexedRate.setDescription('Updates and Logs Indexed Rate')
lsIndexerInfoReadLogsRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 5, 6), Unsigned32())
if mibBuilder.loadTexts: lsIndexerInfoReadLogsRate.setStatus('current')
if mibBuilder.loadTexts: lsIndexerInfoReadLogsRate.setDescription('Read Logs Rate')
lsIndexerInfoUpdatesAndLogsIndexedRatePeak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 5, 7), Unsigned32())
if mibBuilder.loadTexts: lsIndexerInfoUpdatesAndLogsIndexedRatePeak.setStatus('current')
if mibBuilder.loadTexts: lsIndexerInfoUpdatesAndLogsIndexedRatePeak.setDescription('Updates and Logs Indexed Rate Peak')
lsIndexerInfoReadLogsRatePeak = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 5, 8), Unsigned32())
if mibBuilder.loadTexts: lsIndexerInfoReadLogsRatePeak.setStatus('current')
if mibBuilder.loadTexts: lsIndexerInfoReadLogsRatePeak.setDescription('Read Logs Rate Peak')
lsLogReceiveRate1Hour = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 14, 6), Unsigned32())
if mibBuilder.loadTexts: lsLogReceiveRate1Hour.setStatus('current')
if mibBuilder.loadTexts: lsLogReceiveRate1Hour.setDescription('Log Server Log Receive Rate (Last Hour)')
lsStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsStatCode.setStatus('current')
if mibBuilder.loadTexts: lsStatCode.setDescription('Status code')
lsStatShortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsStatShortDescr.setStatus('current')
if mibBuilder.loadTexts: lsStatShortDescr.setDescription('Status short description')
lsStatLongDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 11, 103), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsStatLongDescr.setStatus('current')
if mibBuilder.loadTexts: lsStatLongDescr.setDescription('Status long description')
lsConnectedClientsTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 11, 7), )
if mibBuilder.loadTexts: lsConnectedClientsTable.setStatus('current')
if mibBuilder.loadTexts: lsConnectedClientsTable.setDescription('')
lsConnectedClientsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 11, 7, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "lsIndex"))
if mibBuilder.loadTexts: lsConnectedClientsEntry.setStatus('current')
if mibBuilder.loadTexts: lsConnectedClientsEntry.setDescription('')
lsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 11, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsIndex.setStatus('current')
if mibBuilder.loadTexts: lsIndex.setDescription('')
lsClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 11, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsClientName.setStatus('current')
if mibBuilder.loadTexts: lsClientName.setDescription('')
lsClientHost = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 11, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsClientHost.setStatus('current')
if mibBuilder.loadTexts: lsClientHost.setDescription('')
lsClientDbLock = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 11, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsClientDbLock.setStatus('current')
if mibBuilder.loadTexts: lsClientDbLock.setDescription('')
lsApplicationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 11, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsApplicationType.setStatus('current')
if mibBuilder.loadTexts: lsApplicationType.setDescription('')
gxInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 1))
gxCreateInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5))
gxDeleteInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 6))
gxUpdateInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 7))
gxPathMngInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 8))
gxGpduInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 9))
gxInitiateInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 10))
gxGTPv2CreateInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11))
gxGTPv2DeleteInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 12))
gxGTPv2UpdateInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 13))
gxGTPv2PathMngInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 14))
gxGTPv2CmdInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 20, 15))
gxProdName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxProdName.setStatus('current')
if mibBuilder.loadTexts: gxProdName.setDescription('Product name')
gxProdVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxProdVersion.setStatus('current')
if mibBuilder.loadTexts: gxProdVersion.setDescription('Product Version')
gxProdVerMajor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxProdVerMajor.setStatus('current')
if mibBuilder.loadTexts: gxProdVerMajor.setDescription('Major version')
gxProdVerMinor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxProdVerMinor.setStatus('current')
if mibBuilder.loadTexts: gxProdVerMinor.setDescription('Minor version')
gxBuild = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxBuild.setStatus('current')
if mibBuilder.loadTexts: gxBuild.setDescription('GX build number')
gxCreateSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxCreateSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxCreateSinceInstall.setDescription('Total success create contexts since install policy')
gxActContxt = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxActContxt.setStatus('current')
if mibBuilder.loadTexts: gxActContxt.setDescription('Total active contexts')
gxDropPlicyCreate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropPlicyCreate.setStatus('current')
if mibBuilder.loadTexts: gxDropPlicyCreate.setDescription('Total dropped create messages due to policy violation')
gxDropMalformedReqCreate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropMalformedReqCreate.setStatus('current')
if mibBuilder.loadTexts: gxDropMalformedReqCreate.setDescription('Total dropped create messages due to malformed create-request')
gxDropMalformedRespCreate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropMalformedRespCreate.setStatus('current')
if mibBuilder.loadTexts: gxDropMalformedRespCreate.setDescription('Total dropped create messages due to malformed create-response')
gxExpiredCreate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxExpiredCreate.setStatus('current')
if mibBuilder.loadTexts: gxExpiredCreate.setDescription('Total time-out expired create messages ')
gxBadCauseCreate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxBadCauseCreate.setStatus('current')
if mibBuilder.loadTexts: gxBadCauseCreate.setDescription('Total bad cause create messages')
gxSecondaryNsapiEntries = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxSecondaryNsapiEntries.setStatus('current')
if mibBuilder.loadTexts: gxSecondaryNsapiEntries.setDescription('Total entries in gtp_secondary_nsapi')
gxActv0v1PdnConns = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxActv0v1PdnConns.setStatus('current')
if mibBuilder.loadTexts: gxActv0v1PdnConns.setDescription('Total active v0 v1 PDN connections')
gxTunnelApnsEntries = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxTunnelApnsEntries.setStatus('current')
if mibBuilder.loadTexts: gxTunnelApnsEntries.setDescription('Total entries in gtp_tunnel_apns')
gxTunnelsEntries = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxTunnelsEntries.setStatus('current')
if mibBuilder.loadTexts: gxTunnelsEntries.setDescription('Total entries in gtp_tunnels')
gxDeleteSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDeleteSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxDeleteSinceInstall.setDescription('Total success delete messages since install policy')
gxDropOutOfContxtDelete = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropOutOfContxtDelete.setStatus('current')
if mibBuilder.loadTexts: gxDropOutOfContxtDelete.setDescription('Total dropped out of context delete messages')
gxDropMalformedReqDelete = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropMalformedReqDelete.setStatus('current')
if mibBuilder.loadTexts: gxDropMalformedReqDelete.setDescription('Total dropped delete messages due to malformed delete-request')
gxDropMalformedRespDelete = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropMalformedRespDelete.setStatus('current')
if mibBuilder.loadTexts: gxDropMalformedRespDelete.setDescription('Total dropped delete messages due to malformed delete-response')
gxExpiredDelete = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxExpiredDelete.setStatus('current')
if mibBuilder.loadTexts: gxExpiredDelete.setDescription('Total time-out expired delete messages ')
gxBadCauseDelete = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxBadCauseDelete.setStatus('current')
if mibBuilder.loadTexts: gxBadCauseDelete.setDescription('Total bad cause delete messages')
gxUpdateSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxUpdateSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxUpdateSinceInstall.setDescription('Total success update messages since install policy')
gxDropOutOfContxtUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropOutOfContxtUpdate.setStatus('current')
if mibBuilder.loadTexts: gxDropOutOfContxtUpdate.setDescription('Total dropped out of context update messages')
gxDropMalformedReqUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropMalformedReqUpdate.setStatus('current')
if mibBuilder.loadTexts: gxDropMalformedReqUpdate.setDescription('Total dropped update messages due to malformed update-request')
gxDropMalformedRespUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropMalformedRespUpdate.setStatus('current')
if mibBuilder.loadTexts: gxDropMalformedRespUpdate.setDescription('Total dropped update messages due to malformed update-response')
gxExpiredUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxExpiredUpdate.setStatus('current')
if mibBuilder.loadTexts: gxExpiredUpdate.setDescription('Total time-out expired update messages ')
gxBadCauseUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxBadCauseUpdate.setStatus('current')
if mibBuilder.loadTexts: gxBadCauseUpdate.setDescription('Total bad cause update messages')
gxEchoSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxEchoSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxEchoSinceInstall.setDescription('Total success echo messages since install policy')
gxVnspSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxVnspSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxVnspSinceInstall.setDescription('Total success vnsp messages since install policy')
gxDropPolicyEcho = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropPolicyEcho.setStatus('current')
if mibBuilder.loadTexts: gxDropPolicyEcho.setDescription('Total dropped echo messages due to policy violation')
gxDropMalformedReqEcho = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropMalformedReqEcho.setStatus('current')
if mibBuilder.loadTexts: gxDropMalformedReqEcho.setDescription('Total dropped echo messages due to malformed echo-request')
gxDropMalformedRespEcho = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropMalformedRespEcho.setStatus('current')
if mibBuilder.loadTexts: gxDropMalformedRespEcho.setDescription('Total dropped echo messages due to malformed echo-response')
gxExpiredEcho = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxExpiredEcho.setStatus('current')
if mibBuilder.loadTexts: gxExpiredEcho.setDescription('Total time-out expired echo messages ')
gxDropVnsp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropVnsp.setStatus('current')
if mibBuilder.loadTexts: gxDropVnsp.setDescription('Total dropped vnsp messages')
gxGtpPathEntries = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGtpPathEntries.setStatus('current')
if mibBuilder.loadTexts: gxGtpPathEntries.setDescription('Total gtp path entries')
gxGpdu1MinAvgRate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGpdu1MinAvgRate.setStatus('current')
if mibBuilder.loadTexts: gxGpdu1MinAvgRate.setDescription('GPDU 1 minute average packet rate')
gxDropOutOfContxtGpdu = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropOutOfContxtGpdu.setStatus('current')
if mibBuilder.loadTexts: gxDropOutOfContxtGpdu.setDescription("Total dropped out of context GPDU's ")
gxDropAnti_spoofingGpdu = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 9, 3), Integer32()).setLabel("gxDropAnti-spoofingGpdu").setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropAnti_spoofingGpdu.setStatus('current')
if mibBuilder.loadTexts: gxDropAnti_spoofingGpdu.setDescription("Total dropped GPDU's due to anti-spoofing")
gxDropMs_MsGpdu = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 9, 4), Integer32()).setLabel("gxDropMs-MsGpdu").setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropMs_MsGpdu.setStatus('current')
if mibBuilder.loadTexts: gxDropMs_MsGpdu.setDescription("Total dropped GPDU's due to ms-ms violation ")
gxDropBadSeqGpdu = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropBadSeqGpdu.setStatus('current')
if mibBuilder.loadTexts: gxDropBadSeqGpdu.setDescription("Total dropped GPDU's due bad sequence")
gxDropBadGpdu = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 9, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropBadGpdu.setStatus('current')
if mibBuilder.loadTexts: gxDropBadGpdu.setDescription("Total dropped bad GPDU's")
gxGpduExpiredTunnel = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGpduExpiredTunnel.setStatus('current')
if mibBuilder.loadTexts: gxGpduExpiredTunnel.setDescription('Total expired GTP tunnels')
gxInitiateSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxInitiateSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxInitiateSinceInstall.setDescription('Total successive initate activations since last install policy')
gxDropInitiationReq = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropInitiationReq.setStatus('current')
if mibBuilder.loadTexts: gxDropInitiationReq.setDescription('Total initate activation request messages droped ')
gxDropInitiationResp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxDropInitiationResp.setStatus('current')
if mibBuilder.loadTexts: gxDropInitiationResp.setDescription('Total initate activation response messages droped')
gxExpiredInitiateAct = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxExpiredInitiateAct.setStatus('current')
if mibBuilder.loadTexts: gxExpiredInitiateAct.setDescription('Total time-out expired initate activations messages')
gxGTPv2CreateSessionSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2CreateSessionSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2CreateSessionSinceInstall.setDescription('Total success create session messages since install policy')
gxGTPv2CreateBearerSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2CreateBearerSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2CreateBearerSinceInstall.setDescription('Total success create bearer messages since install policy')
gxGTPv2ExpiredCreateSession = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ExpiredCreateSession.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ExpiredCreateSession.setDescription('Total time-out expired create session messages ')
gxGTPv2ExpiredCreateBearer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ExpiredCreateBearer.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ExpiredCreateBearer.setDescription('Total time-out expired create bearer messages ')
gxGTPv2DropMalformedCreateSessionReq = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedCreateSessionReq.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedCreateSessionReq.setDescription('Total dropped create session request messages due to malformed create-request')
gxGTPv2DropMalformedCreateSessionResp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedCreateSessionResp.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedCreateSessionResp.setDescription('Total dropped create session response messages due to malformed create-response')
gxGTPv2DropMalformedCreateBearerReq = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedCreateBearerReq.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedCreateBearerReq.setDescription('Total dropped create bearer request messages due to malformed create-request')
gxGTPv2DropMalformedCreateBearerResp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedCreateBearerResp.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedCreateBearerResp.setDescription('Total dropped create bearer response messages due to malformed create-response')
gxGTPv2DropPolicyCreateSession = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropPolicyCreateSession.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropPolicyCreateSession.setDescription('Total dropped create session messages due to policy violation')
gxGTPv2DropPolicyCreateBearer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropPolicyCreateBearer.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropPolicyCreateBearer.setDescription('Total dropped create bearer messages due to policy violation')
gxGTPv2ActPDN = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ActPDN.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ActPDN.setDescription('Total active GTPv2 PDN connections')
gxGTPv2ActDataBearers = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 11, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ActDataBearers.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ActDataBearers.setDescription('Total active data bearers')
gxGTPv2DeleteSessionSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DeleteSessionSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DeleteSessionSinceInstall.setDescription('Total success delete session messages since install policy')
gxGTPv2DeleteBearerSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DeleteBearerSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DeleteBearerSinceInstall.setDescription('Total success delete bearer messages since install policy')
gxGTPv2ExpiredDeleteSession = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ExpiredDeleteSession.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ExpiredDeleteSession.setDescription('Total time-out expired delete session messages ')
gxGTPv2ExpiredDeleteBearer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ExpiredDeleteBearer.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ExpiredDeleteBearer.setDescription('Total time-out expired delete bearer messages ')
gxGTPv2DropMalformedDeleteSessionReq = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedDeleteSessionReq.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedDeleteSessionReq.setDescription('Total dropped delete session request messages due to malformed delete-request')
gxGTPv2DropMalformedDeleteSessionResp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 12, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedDeleteSessionResp.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedDeleteSessionResp.setDescription('Total dropped delete session response messages due to malformed delete-response')
gxGTPv2DropMalformedDeleteBearerReq = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 12, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedDeleteBearerReq.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedDeleteBearerReq.setDescription('Total dropped delete bearer request messages due to malformed delete-request')
gxGTPv2DropMalformedDeleteBearerResp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 12, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedDeleteBearerResp.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedDeleteBearerResp.setDescription('Total dropped delete bearer response messages due to malformed delete-response')
gxGTPv2DropPolicyDeleteSession = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 12, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropPolicyDeleteSession.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropPolicyDeleteSession.setDescription('Total dropped delete session messages due to policy violation')
gxGTPv2DropPolicyDeleteBearer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 12, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropPolicyDeleteBearer.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropPolicyDeleteBearer.setDescription('Total dropped delete bearer messages due to policy violation')
gxGTPv2UpdateBearerSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2UpdateBearerSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2UpdateBearerSinceInstall.setDescription('Total success update bearer messages since install policy')
gxGTPv2ExpiredUpdateBearer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ExpiredUpdateBearer.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ExpiredUpdateBearer.setDescription('Total time-out expired update bearer messages ')
gxGTPv2ModifyBearerSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 13, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ModifyBearerSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ModifyBearerSinceInstall.setDescription('Total success modify bearer messages since install policy')
gxGTPv2ExpiredModifyBearer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 13, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ExpiredModifyBearer.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ExpiredModifyBearer.setDescription('Total time-out expired modify bearer messages ')
gxGTPv2DropMalformedUpdateBearerReq = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 13, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedUpdateBearerReq.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedUpdateBearerReq.setDescription('Total dropped update bearer request messages due to malformed update-request')
gxGTPv2DropMalformedUpdateBearerResp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 13, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedUpdateBearerResp.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedUpdateBearerResp.setDescription('Total dropped update bearer response messages due to malformed update-response')
gxGTPv2DropMalformedModifyBearerReq = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 13, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedModifyBearerReq.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedModifyBearerReq.setDescription('Total dropped modify bearer request messages due to malformed modify-request')
gxGTPv2DropMalformedModifyBearerResp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 13, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedModifyBearerResp.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedModifyBearerResp.setDescription('Total dropped modify bearer response messages due to malformed modify-response')
gxGTPv2DropPolicyUpdateBearer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 13, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropPolicyUpdateBearer.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropPolicyUpdateBearer.setDescription('Total dropped update bearer messages due to policy violation')
gxGTPv2DropPolicyModifyBearer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 13, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropPolicyModifyBearer.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropPolicyModifyBearer.setDescription('Total dropped modify bearer messages due to policy violation')
gxGTPv2EchoSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2EchoSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2EchoSinceInstall.setDescription('Total success gtpv2 echo messages since install policy')
gxGTPv2VnspSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2VnspSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2VnspSinceInstall.setDescription('Total success gtpv2 vnsp messages since install policy')
gxGTPv2ExpiredEcho = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 14, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ExpiredEcho.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ExpiredEcho.setDescription('Total time-out expired gtpv2 echo messages ')
gxGTPv2DropMalformedEchoReq = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 14, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedEchoReq.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedEchoReq.setDescription('Total dropped echo request messages due to malformed echo-request')
gxGTPv2DropMalformedEchoResp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 14, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropMalformedEchoResp.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropMalformedEchoResp.setDescription('Total dropped echo response messages due to malformed echo-response')
gxGTPv2DropPolicyEcho = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 14, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DropPolicyEcho.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DropPolicyEcho.setDescription('Total dropped echo messages due to policy violation')
gxGTPv2ModifyBearerCmdSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ModifyBearerCmdSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ModifyBearerCmdSinceInstall.setDescription('Total success gtpv2 modify bearer command messages since install policy')
gxGTPv2ModifyBearerFailIndSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2ModifyBearerFailIndSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2ModifyBearerFailIndSinceInstall.setDescription('Total success gtpv2 modify bearer failure indication messages since install policy')
gxGTPv2DeleteBearerCmdSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 15, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DeleteBearerCmdSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DeleteBearerCmdSinceInstall.setDescription('Total success gtpv2 delete bearer command messages since install policy')
gxGTPv2DeleteBearerFailIndSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 15, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2DeleteBearerFailIndSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2DeleteBearerFailIndSinceInstall.setDescription('Total success gtpv2 delete bearer failure indication messages since install policy')
gxGTPv2BearerResourceCmdSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 15, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2BearerResourceCmdSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2BearerResourceCmdSinceInstall.setDescription('Total success gtpv2 bearer resource command messages since install policy')
gxGTPv2BearerResourceFailIndSinceInstall = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 20, 15, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gxGTPv2BearerResourceFailIndSinceInstall.setStatus('current')
if mibBuilder.loadTexts: gxGTPv2BearerResourceFailIndSinceInstall.setDescription('Total success gtpv2 bearer resource failure indication messages since install policy')
asmAttacks = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1))
asmLayer3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 1))
asmLayer4 = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2))
asmTCP = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1))
asmSynatk = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 1))
asmSmallPmtu = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 2))
asmSeqval = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 3))
asmUDP = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 2))
asmScans = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 3))
asmHostPortScan = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 3, 1))
asmIPSweep = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 3, 2))
asmLayer5 = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3))
asmHTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 1))
asmHttpWorms = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 1, 1))
asmHttpFormatViolatoin = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 1, 2))
asmHttpAsciiViolation = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 1, 3))
asmHttpP2PHeaderFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 1, 4))
asmCIFS = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 2))
asmCIFSWorms = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 2, 1))
asmCIFSNullSession = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 2, 2))
asmCIFSBlockedPopUps = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 2, 3))
asmCIFSBlockedCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 2, 4))
asmCIFSPasswordLengthViolations = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 2, 5))
asmP2P = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3))
asmP2POtherConAttempts = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 1))
asmP2PKazaaConAttempts = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 2))
asmP2PeMuleConAttempts = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 3))
asmP2PGnutellaConAttempts = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 4))
asmP2PSkypeCon = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 5))
asmP2PBitTorrentCon = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 6))
asmSynatkSynAckTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmSynatkSynAckTimeout.setStatus('current')
if mibBuilder.loadTexts: asmSynatkSynAckTimeout.setDescription('SYN attack - Syn-Ack Timeout')
asmSynatkSynAckReset = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmSynatkSynAckReset.setStatus('current')
if mibBuilder.loadTexts: asmSynatkSynAckReset.setDescription('SYN attack - Syn-Ack Reset')
asmSynatkModeChange = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmSynatkModeChange.setStatus('current')
if mibBuilder.loadTexts: asmSynatkModeChange.setDescription('SYN attack  - Mode Change')
asmSynatkCurrentMode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmSynatkCurrentMode.setStatus('current')
if mibBuilder.loadTexts: asmSynatkCurrentMode.setDescription('SYN attack  - Current Mode')
asmSynatkNumberofunAckedSyns = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmSynatkNumberofunAckedSyns.setStatus('current')
if mibBuilder.loadTexts: asmSynatkNumberofunAckedSyns.setDescription('SYN attack  - Number of un-Acked Syns')
smallPMTUNumberOfAttacks = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smallPMTUNumberOfAttacks.setStatus('current')
if mibBuilder.loadTexts: smallPMTUNumberOfAttacks.setDescription('Small PMTU - Number of attacks')
smallPMTUValueOfMinimalMTUsize = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smallPMTUValueOfMinimalMTUsize.setStatus('current')
if mibBuilder.loadTexts: smallPMTUValueOfMinimalMTUsize.setDescription('Small PMTU - Value of Minimal MTU size')
sequenceVerifierInvalidAck = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sequenceVerifierInvalidAck.setStatus('current')
if mibBuilder.loadTexts: sequenceVerifierInvalidAck.setDescription('Sequence Verifier - Invalid Ack')
sequenceVerifierInvalidSequence = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sequenceVerifierInvalidSequence.setStatus('current')
if mibBuilder.loadTexts: sequenceVerifierInvalidSequence.setDescription('Sequence Verifier - Invalid Sequence')
sequenceVerifierInvalidretransmit = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sequenceVerifierInvalidretransmit.setStatus('current')
if mibBuilder.loadTexts: sequenceVerifierInvalidretransmit.setDescription('Sequence Verifier - Invalid retransmit')
httpWorms = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpWorms.setStatus('current')
if mibBuilder.loadTexts: httpWorms.setDescription('HTTP worms')
numOfhostPortScan = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfhostPortScan.setStatus('current')
if mibBuilder.loadTexts: numOfhostPortScan.setDescription('host port scan')
numOfIpSweep = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 2, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfIpSweep.setStatus('current')
if mibBuilder.loadTexts: numOfIpSweep.setDescription('host port scan')
httpURLLengthViolation = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpURLLengthViolation.setStatus('current')
if mibBuilder.loadTexts: httpURLLengthViolation.setDescription('HTTP - URL Length Violations')
httpHeaderLengthViolations = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpHeaderLengthViolations.setStatus('current')
if mibBuilder.loadTexts: httpHeaderLengthViolations.setDescription('HTTP - Header Length Violations')
httpMaxHeaderReached = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpMaxHeaderReached.setStatus('current')
if mibBuilder.loadTexts: httpMaxHeaderReached.setDescription('HTTP - Maximum Headers Reached')
numOfHttpASCIIViolations = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfHttpASCIIViolations.setStatus('current')
if mibBuilder.loadTexts: numOfHttpASCIIViolations.setDescription('HTTP - ASCII Violations')
numOfHttpP2PHeaders = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfHttpP2PHeaders.setStatus('current')
if mibBuilder.loadTexts: numOfHttpP2PHeaders.setDescription('HTTP - Peer To Peer Headers')
numOfCIFSworms = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfCIFSworms.setStatus('current')
if mibBuilder.loadTexts: numOfCIFSworms.setDescription('num of CIFS worms')
numOfCIFSNullSessions = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfCIFSNullSessions.setStatus('current')
if mibBuilder.loadTexts: numOfCIFSNullSessions.setDescription('num of CIFS Null Sessions')
numOfCIFSBlockedPopUps = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfCIFSBlockedPopUps.setStatus('current')
if mibBuilder.loadTexts: numOfCIFSBlockedPopUps.setDescription('num of CIFS Blocked Pop-Ups')
numOfCIFSBlockedCommands = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfCIFSBlockedCommands.setStatus('current')
if mibBuilder.loadTexts: numOfCIFSBlockedCommands.setDescription('num of CIFS Blocked Commands')
numOfCIFSPasswordLengthViolations = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfCIFSPasswordLengthViolations.setStatus('current')
if mibBuilder.loadTexts: numOfCIFSPasswordLengthViolations.setDescription('num of CIFS PasswordLength Violations')
numOfP2POtherConAttempts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfP2POtherConAttempts.setStatus('current')
if mibBuilder.loadTexts: numOfP2POtherConAttempts.setDescription('num of P2P Other Con Attempts')
numOfP2PKazaaConAttempts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfP2PKazaaConAttempts.setStatus('current')
if mibBuilder.loadTexts: numOfP2PKazaaConAttempts.setDescription('num of P2P Kazaa Con Attempts')
numOfP2PeMuleConAttempts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfP2PeMuleConAttempts.setStatus('current')
if mibBuilder.loadTexts: numOfP2PeMuleConAttempts.setDescription('num of P2P eMule Con Attempts')
numOfGnutellaConAttempts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfGnutellaConAttempts.setStatus('current')
if mibBuilder.loadTexts: numOfGnutellaConAttempts.setDescription('num of P2P Gnutella Con Attempts')
numOfP2PSkypeCon = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfP2PSkypeCon.setStatus('current')
if mibBuilder.loadTexts: numOfP2PSkypeCon.setDescription('num of P2P Skype Con')
numOfBitTorrentCon = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 17, 1, 3, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfBitTorrentCon.setStatus('current')
if mibBuilder.loadTexts: numOfBitTorrentCon.setDescription('num of P2P Bit Torrent Con')
aviEngines = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1))
aviTopViruses = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 24, 2))
aviTopEverViruses = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 24, 3))
aviServices = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4))
aviServicesHTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 1))
aviServicesFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 2))
aviServicesSMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 3))
aviServicesPOP3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 4))
aviStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviStatCode.setStatus('current')
if mibBuilder.loadTexts: aviStatCode.setDescription('Status code')
aviStatShortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviStatShortDescr.setStatus('current')
if mibBuilder.loadTexts: aviStatShortDescr.setDescription('Status short description')
aviStatLongDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviStatLongDescr.setStatus('current')
if mibBuilder.loadTexts: aviStatLongDescr.setDescription('Status long description')
aviEngineTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1), )
if mibBuilder.loadTexts: aviEngineTable.setStatus('current')
if mibBuilder.loadTexts: aviEngineTable.setDescription('Table of Anti Virus engines installed. Each engine entry contains information about this engine.')
aviEngineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "aviEngineIndex"))
if mibBuilder.loadTexts: aviEngineEntry.setStatus('current')
if mibBuilder.loadTexts: aviEngineEntry.setDescription('')
aviEngineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviEngineIndex.setStatus('current')
if mibBuilder.loadTexts: aviEngineIndex.setDescription('')
aviEngineName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviEngineName.setStatus('current')
if mibBuilder.loadTexts: aviEngineName.setDescription('')
aviEngineVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviEngineVer.setStatus('current')
if mibBuilder.loadTexts: aviEngineVer.setDescription('')
aviEngineDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviEngineDate.setStatus('current')
if mibBuilder.loadTexts: aviEngineDate.setDescription('')
aviSignatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviSignatureName.setStatus('current')
if mibBuilder.loadTexts: aviSignatureName.setDescription('')
aviSignatureVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviSignatureVer.setStatus('current')
if mibBuilder.loadTexts: aviSignatureVer.setDescription('')
aviSignatureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviSignatureDate.setStatus('current')
if mibBuilder.loadTexts: aviSignatureDate.setDescription('')
aviLastSigCheckTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviLastSigCheckTime.setStatus('current')
if mibBuilder.loadTexts: aviLastSigCheckTime.setDescription('')
aviLastSigLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviLastSigLocation.setStatus('current')
if mibBuilder.loadTexts: aviLastSigLocation.setDescription('')
aviLastLicExp = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviLastLicExp.setStatus('current')
if mibBuilder.loadTexts: aviLastLicExp.setDescription('')
aviTopVirusesTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 24, 2, 1), )
if mibBuilder.loadTexts: aviTopVirusesTable.setStatus('current')
if mibBuilder.loadTexts: aviTopVirusesTable.setDescription('Table for virus count of the most frequent viruses found in the last hour')
aviTopVirusesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 24, 2, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "aviTopVirusesIndex"))
if mibBuilder.loadTexts: aviTopVirusesEntry.setStatus('current')
if mibBuilder.loadTexts: aviTopVirusesEntry.setDescription('')
aviTopVirusesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviTopVirusesIndex.setStatus('current')
if mibBuilder.loadTexts: aviTopVirusesIndex.setDescription('Virus index')
aviTopVirusesName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviTopVirusesName.setStatus('current')
if mibBuilder.loadTexts: aviTopVirusesName.setDescription('Virus Name')
aviTopVirusesCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviTopVirusesCnt.setStatus('current')
if mibBuilder.loadTexts: aviTopVirusesCnt.setDescription('Virus hit count')
aviTopEverVirusesTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 24, 3, 1), )
if mibBuilder.loadTexts: aviTopEverVirusesTable.setStatus('current')
if mibBuilder.loadTexts: aviTopEverVirusesTable.setDescription('Table for virus count of the most frequent viruses found from last system restart')
aviTopEverVirusesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 24, 3, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "aviTopEverVirusesIndex"))
if mibBuilder.loadTexts: aviTopEverVirusesEntry.setStatus('current')
if mibBuilder.loadTexts: aviTopEverVirusesEntry.setDescription('')
aviTopEverVirusesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviTopEverVirusesIndex.setStatus('current')
if mibBuilder.loadTexts: aviTopEverVirusesIndex.setDescription('')
aviTopEverVirusesName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviTopEverVirusesName.setStatus('current')
if mibBuilder.loadTexts: aviTopEverVirusesName.setDescription('')
aviTopEverVirusesCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviTopEverVirusesCnt.setStatus('current')
if mibBuilder.loadTexts: aviTopEverVirusesCnt.setDescription('')
aviHTTPState = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviHTTPState.setStatus('current')
if mibBuilder.loadTexts: aviHTTPState.setDescription('State of the Anti Virus engine that inspects HTTP')
aviHTTPLastVirusName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviHTTPLastVirusName.setStatus('current')
if mibBuilder.loadTexts: aviHTTPLastVirusName.setDescription('Last virus found over HTTP')
aviHTTPLastVirusTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviHTTPLastVirusTime.setStatus('current')
if mibBuilder.loadTexts: aviHTTPLastVirusTime.setDescription('')
aviHTTPTopVirusesTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 1, 4), )
if mibBuilder.loadTexts: aviHTTPTopVirusesTable.setStatus('current')
if mibBuilder.loadTexts: aviHTTPTopVirusesTable.setDescription('Table for virus count of the most frequent viruses found over HTTP in the last day\n\t\t\t\t or from last system restart (the latest of the two)')
aviHTTPTopVirusesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 1, 4, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "aviHTTPTopVirusesIndex"))
if mibBuilder.loadTexts: aviHTTPTopVirusesEntry.setStatus('current')
if mibBuilder.loadTexts: aviHTTPTopVirusesEntry.setDescription('')
aviHTTPTopVirusesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviHTTPTopVirusesIndex.setStatus('current')
if mibBuilder.loadTexts: aviHTTPTopVirusesIndex.setDescription('')
aviHTTPTopVirusesName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviHTTPTopVirusesName.setStatus('current')
if mibBuilder.loadTexts: aviHTTPTopVirusesName.setDescription('')
aviHTTPTopVirusesCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviHTTPTopVirusesCnt.setStatus('current')
if mibBuilder.loadTexts: aviHTTPTopVirusesCnt.setDescription('')
aviFTPState = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviFTPState.setStatus('current')
if mibBuilder.loadTexts: aviFTPState.setDescription('State of the Anti Virus engine that inspects FTP')
aviFTPLastVirusName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviFTPLastVirusName.setStatus('current')
if mibBuilder.loadTexts: aviFTPLastVirusName.setDescription('Last virus found over FTP')
aviFTPLastVirusTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviFTPLastVirusTime.setStatus('current')
if mibBuilder.loadTexts: aviFTPLastVirusTime.setDescription('')
aviFTPTopVirusesTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 2, 4), )
if mibBuilder.loadTexts: aviFTPTopVirusesTable.setStatus('current')
if mibBuilder.loadTexts: aviFTPTopVirusesTable.setDescription('Table for virus count of the most frequent viruses found over FTP in the last day\n\t\t\t or from last system restart (the latest of the two)')
aviFTPTopVirusesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 2, 4, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "aviFTPTopVirusesIndex"))
if mibBuilder.loadTexts: aviFTPTopVirusesEntry.setStatus('current')
if mibBuilder.loadTexts: aviFTPTopVirusesEntry.setDescription('')
aviFTPTopVirusesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 2, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviFTPTopVirusesIndex.setStatus('current')
if mibBuilder.loadTexts: aviFTPTopVirusesIndex.setDescription('')
aviFTPTopVirusesName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviFTPTopVirusesName.setStatus('current')
if mibBuilder.loadTexts: aviFTPTopVirusesName.setDescription('')
aviFTPTopVirusesCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviFTPTopVirusesCnt.setStatus('current')
if mibBuilder.loadTexts: aviFTPTopVirusesCnt.setDescription('')
aviSMTPState = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviSMTPState.setStatus('current')
if mibBuilder.loadTexts: aviSMTPState.setDescription('State of the Anti Virus engine that inspects SMTP')
aviSMTPLastVirusName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviSMTPLastVirusName.setStatus('current')
if mibBuilder.loadTexts: aviSMTPLastVirusName.setDescription('Last virus found over SMTP')
aviSMTPLastVirusTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviSMTPLastVirusTime.setStatus('current')
if mibBuilder.loadTexts: aviSMTPLastVirusTime.setDescription('')
aviSMTPTopVirusesTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 3, 4), )
if mibBuilder.loadTexts: aviSMTPTopVirusesTable.setStatus('current')
if mibBuilder.loadTexts: aviSMTPTopVirusesTable.setDescription('Table for virus count of the most frequent viruses found over SMTP in the last day\n\t\t\t or from last system restart (the latest of the two)')
aviSMTPTopVirusesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 3, 4, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "aviSMTPTopVirusesIndex"))
if mibBuilder.loadTexts: aviSMTPTopVirusesEntry.setStatus('current')
if mibBuilder.loadTexts: aviSMTPTopVirusesEntry.setDescription('')
aviSMTPTopVirusesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 3, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviSMTPTopVirusesIndex.setStatus('current')
if mibBuilder.loadTexts: aviSMTPTopVirusesIndex.setDescription('')
aviSMTPTopVirusesName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 3, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviSMTPTopVirusesName.setStatus('current')
if mibBuilder.loadTexts: aviSMTPTopVirusesName.setDescription('')
aviSMTPTopVirusesCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviSMTPTopVirusesCnt.setStatus('current')
if mibBuilder.loadTexts: aviSMTPTopVirusesCnt.setDescription('')
aviPOP3State = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviPOP3State.setStatus('current')
if mibBuilder.loadTexts: aviPOP3State.setDescription('State of the Anti Virus engine that inspects POP3')
aviPOP3LastVirusName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviPOP3LastVirusName.setStatus('current')
if mibBuilder.loadTexts: aviPOP3LastVirusName.setDescription('Last virus found over POP3')
aviPOP3LastVirusTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviPOP3LastVirusTime.setStatus('current')
if mibBuilder.loadTexts: aviPOP3LastVirusTime.setDescription('')
aviPOP3TopVirusesTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 4, 4), )
if mibBuilder.loadTexts: aviPOP3TopVirusesTable.setStatus('current')
if mibBuilder.loadTexts: aviPOP3TopVirusesTable.setDescription('Table for virus count of the most frequent viruses found over POP3 in the last day\n\t\t\t or from last system restart (the latest of the two)')
aviPOP3TopVirusesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 4, 4, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "aviPOP3TopVirusesIndex"))
if mibBuilder.loadTexts: aviPOP3TopVirusesEntry.setStatus('current')
if mibBuilder.loadTexts: aviPOP3TopVirusesEntry.setDescription('')
aviPOP3TopVirusesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 4, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviPOP3TopVirusesIndex.setStatus('current')
if mibBuilder.loadTexts: aviPOP3TopVirusesIndex.setDescription('')
aviPOP3TopVirusesName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviPOP3TopVirusesName.setStatus('current')
if mibBuilder.loadTexts: aviPOP3TopVirusesName.setDescription('')
aviPOP3TopVirusesCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 24, 4, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviPOP3TopVirusesCnt.setStatus('current')
if mibBuilder.loadTexts: aviPOP3TopVirusesCnt.setDescription('')
cpsemd = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1))
cpsead = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2))
cpsemdStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdStatCode.setStatus('current')
if mibBuilder.loadTexts: cpsemdStatCode.setDescription('Status code')
cpsemdStatShortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdStatShortDescr.setStatus('current')
if mibBuilder.loadTexts: cpsemdStatShortDescr.setDescription('Status short description')
cpsemdStatLongDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdStatLongDescr.setStatus('current')
if mibBuilder.loadTexts: cpsemdStatLongDescr.setDescription('Status long description')
cpsemdProcAlive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdProcAlive.setStatus('current')
if mibBuilder.loadTexts: cpsemdProcAlive.setDescription('cpsemd Process is alive')
cpsemdNewEventsHandled = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdNewEventsHandled.setStatus('current')
if mibBuilder.loadTexts: cpsemdNewEventsHandled.setDescription('New events handled')
cpsemdUpdatesHandled = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdUpdatesHandled.setStatus('current')
if mibBuilder.loadTexts: cpsemdUpdatesHandled.setDescription('Number of updates handled')
cpsemdLastEventTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdLastEventTime.setStatus('current')
if mibBuilder.loadTexts: cpsemdLastEventTime.setDescription('Last processed event time')
cpsemdCurrentDBSize = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdCurrentDBSize.setStatus('current')
if mibBuilder.loadTexts: cpsemdCurrentDBSize.setDescription('Current database size')
cpsemdDBCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdDBCapacity.setStatus('current')
if mibBuilder.loadTexts: cpsemdDBCapacity.setDescription('Database capacity')
cpsemdNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdNumEvents.setStatus('current')
if mibBuilder.loadTexts: cpsemdNumEvents.setDescription('Number of events in database')
cpsemdDBDiskSpace = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdDBDiskSpace.setStatus('current')
if mibBuilder.loadTexts: cpsemdDBDiskSpace.setDescription('Available database disk space')
cpsemdCorrelationUnitTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 9), )
if mibBuilder.loadTexts: cpsemdCorrelationUnitTable.setStatus('current')
if mibBuilder.loadTexts: cpsemdCorrelationUnitTable.setDescription('Table for Correlation Units details')
cpsemdDBIsFull = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdDBIsFull.setStatus('current')
if mibBuilder.loadTexts: cpsemdDBIsFull.setDescription('1 - Database is full; 0 - Database is not full')
cpsemdCorrelationUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 9, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "cpsemdCorrelationUnitIndex"))
if mibBuilder.loadTexts: cpsemdCorrelationUnitEntry.setStatus('current')
if mibBuilder.loadTexts: cpsemdCorrelationUnitEntry.setDescription('')
cpsemdCorrelationUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdCorrelationUnitIndex.setStatus('current')
if mibBuilder.loadTexts: cpsemdCorrelationUnitIndex.setDescription('')
cpsemdCorrelationUnitIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdCorrelationUnitIP.setStatus('current')
if mibBuilder.loadTexts: cpsemdCorrelationUnitIP.setDescription('Correlation Unit IP')
cpsemdCorrelationUnitLastRcvdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdCorrelationUnitLastRcvdTime.setStatus('current')
if mibBuilder.loadTexts: cpsemdCorrelationUnitLastRcvdTime.setDescription('Time of last received event')
cpsemdCorrelationUnitNumEventsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdCorrelationUnitNumEventsRcvd.setStatus('current')
if mibBuilder.loadTexts: cpsemdCorrelationUnitNumEventsRcvd.setDescription('Number of events received')
cpsemdConnectionDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 1, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsemdConnectionDuration.setStatus('current')
if mibBuilder.loadTexts: cpsemdConnectionDuration.setDescription('Connection duration (to the Correlation Unit)')
cpseadStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadStatCode.setStatus('current')
if mibBuilder.loadTexts: cpseadStatCode.setDescription('Status code')
cpseadStatShortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadStatShortDescr.setStatus('current')
if mibBuilder.loadTexts: cpseadStatShortDescr.setDescription('Status short description')
cpseadStatLongDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadStatLongDescr.setStatus('current')
if mibBuilder.loadTexts: cpseadStatLongDescr.setDescription('Status long description')
cpseadProcAlive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadProcAlive.setStatus('current')
if mibBuilder.loadTexts: cpseadProcAlive.setDescription('cpsead Process is alive')
cpseadConnectedToSem = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadConnectedToSem.setStatus('current')
if mibBuilder.loadTexts: cpseadConnectedToSem.setDescription('Connected to SEM (is the Correlation Unit connected to the Analyzer Server)')
cpseadNumProcessedLogs = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadNumProcessedLogs.setStatus('current')
if mibBuilder.loadTexts: cpseadNumProcessedLogs.setDescription('Number of logs processed')
cpseadJobsTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4), )
if mibBuilder.loadTexts: cpseadJobsTable.setStatus('current')
if mibBuilder.loadTexts: cpseadJobsTable.setDescription('Jobs Table')
cpseadJobsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "cpseadJobIndex"))
if mibBuilder.loadTexts: cpseadJobsEntry.setStatus('current')
if mibBuilder.loadTexts: cpseadJobsEntry.setDescription('')
cpseadJobIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadJobIndex.setStatus('current')
if mibBuilder.loadTexts: cpseadJobIndex.setDescription('')
cpseadJobID = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadJobID.setStatus('current')
if mibBuilder.loadTexts: cpseadJobID.setDescription('Job ID')
cpseadJobName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadJobName.setStatus('current')
if mibBuilder.loadTexts: cpseadJobName.setDescription('Job name')
cpseadJobState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadJobState.setStatus('current')
if mibBuilder.loadTexts: cpseadJobState.setDescription('Job state')
cpseadJobIsOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadJobIsOnline.setStatus('current')
if mibBuilder.loadTexts: cpseadJobIsOnline.setDescription('Is job online')
cpseadJobLogServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadJobLogServer.setStatus('current')
if mibBuilder.loadTexts: cpseadJobLogServer.setDescription(' Log Server (the IP of the log server from which the job is reading logs)')
cpseadJobDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadJobDataType.setStatus('current')
if mibBuilder.loadTexts: cpseadJobDataType.setDescription('Data type (the type of date being read: log or audit)')
cpseadConnectedToLogServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadConnectedToLogServer.setStatus('current')
if mibBuilder.loadTexts: cpseadConnectedToLogServer.setDescription('Connected to Log Server (is the Correlation Unit connected to the Log Server)')
cpseadNumAnalyzedLogs = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadNumAnalyzedLogs.setStatus('current')
if mibBuilder.loadTexts: cpseadNumAnalyzedLogs.setDescription('Number of logs analyzed')
cpseadFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadFileName.setStatus('current')
if mibBuilder.loadTexts: cpseadFileName.setDescription('File Name (the name of the file from which the job is reading logs)')
cpseadFileCurrentPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadFileCurrentPosition.setStatus('current')
if mibBuilder.loadTexts: cpseadFileCurrentPosition.setDescription('current position in the file')
cpseadStateDescriptionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadStateDescriptionCode.setStatus('current')
if mibBuilder.loadTexts: cpseadStateDescriptionCode.setDescription('state description code (code for the state description in the next OID)')
cpseadStateDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadStateDescription.setStatus('current')
if mibBuilder.loadTexts: cpseadStateDescription.setDescription("state description (provides more info regarding the job's state (OID 4), for instance details errors.)")
cpseadNoFreeDiskSpace = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 25, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpseadNoFreeDiskSpace.setStatus('current')
if mibBuilder.loadTexts: cpseadNoFreeDiskSpace.setDescription('no free disk space (is there not enough free disk space on the Correlation Unit)')
ufEngine = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 29, 1))
ufSS = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2))
ufStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufStatCode.setStatus('current')
if mibBuilder.loadTexts: ufStatCode.setDescription('Status code')
ufStatShortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufStatShortDescr.setStatus('current')
if mibBuilder.loadTexts: ufStatShortDescr.setDescription('Status short description')
ufStatLongDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufStatLongDescr.setStatus('current')
if mibBuilder.loadTexts: ufStatLongDescr.setDescription('Status long description')
ufEngineName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufEngineName.setStatus('current')
if mibBuilder.loadTexts: ufEngineName.setDescription('Engine name')
ufEngineVer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufEngineVer.setStatus('current')
if mibBuilder.loadTexts: ufEngineVer.setDescription('Engine version')
ufEngineDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufEngineDate.setStatus('current')
if mibBuilder.loadTexts: ufEngineDate.setDescription('Engine build date')
ufSignatureDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufSignatureDate.setStatus('current')
if mibBuilder.loadTexts: ufSignatureDate.setDescription('Creation date of the signature-set used by the engine')
ufSignatureVer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufSignatureVer.setStatus('current')
if mibBuilder.loadTexts: ufSignatureVer.setDescription('Version of the signature')
ufLastSigCheckTime = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufLastSigCheckTime.setStatus('current')
if mibBuilder.loadTexts: ufLastSigCheckTime.setDescription('Last time there was a check for new signature ')
ufLastSigLocation = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufLastSigLocation.setStatus('current')
if mibBuilder.loadTexts: ufLastSigLocation.setDescription('Last signature origine (either from Remote site or from SmartCenter)')
ufLastLicExp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufLastLicExp.setStatus('current')
if mibBuilder.loadTexts: ufLastLicExp.setDescription('Expiration date of the subscription for Web Filtering updates')
ufIsMonitor = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufIsMonitor.setStatus('current')
if mibBuilder.loadTexts: ufIsMonitor.setDescription('Monitor-Only Running mode (ON or OFF)')
ufScannedCnt = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufScannedCnt.setStatus('current')
if mibBuilder.loadTexts: ufScannedCnt.setDescription('Total number of scanned URLs')
ufBlockedCnt = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufBlockedCnt.setStatus('current')
if mibBuilder.loadTexts: ufBlockedCnt.setDescription('Number of blocked URLs')
ufTopBlockedCatTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 4), )
if mibBuilder.loadTexts: ufTopBlockedCatTable.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedCatTable.setDescription('Table for counting of the most frequent categories blocked in the last day')
ufTopBlockedCatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 4, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "ufTopBlockedCatIndex"))
if mibBuilder.loadTexts: ufTopBlockedCatEntry.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedCatEntry.setDescription('')
ufTopBlockedCatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufTopBlockedCatIndex.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedCatIndex.setDescription('Blocked Category index')
ufTopBlockedCatName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufTopBlockedCatName.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedCatName.setDescription('Blocked Category name')
ufTopBlockedCatCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufTopBlockedCatCnt.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedCatCnt.setDescription('Blocked Category count')
ufTopBlockedSiteTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 5), )
if mibBuilder.loadTexts: ufTopBlockedSiteTable.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedSiteTable.setDescription('Table for counting of the most frequent sites blocked in the last day')
ufTopBlockedSiteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 5, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "ufTopBlockedSiteIndex"))
if mibBuilder.loadTexts: ufTopBlockedSiteEntry.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedSiteEntry.setDescription('')
ufTopBlockedSiteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufTopBlockedSiteIndex.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedSiteIndex.setDescription('Blocked URL index')
ufTopBlockedSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufTopBlockedSiteName.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedSiteName.setDescription('Blocked URL name')
ufTopBlockedSiteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufTopBlockedSiteCnt.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedSiteCnt.setDescription('Blocked URL count')
ufTopBlockedUserTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 6), )
if mibBuilder.loadTexts: ufTopBlockedUserTable.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedUserTable.setDescription('Table for counting blocked URLs of the most frequent blocked users in the last day')
ufTopBlockedUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 6, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "ufTopBlockedUserIndex"))
if mibBuilder.loadTexts: ufTopBlockedUserEntry.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedUserEntry.setDescription('')
ufTopBlockedUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufTopBlockedUserIndex.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedUserIndex.setDescription('Blocked User index')
ufTopBlockedUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufTopBlockedUserName.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedUserName.setDescription('Blocked User name')
ufTopBlockedUserCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 29, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufTopBlockedUserCnt.setStatus('current')
if mibBuilder.loadTexts: ufTopBlockedUserCnt.setDescription('Blocked User count')
msProductName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msProductName.setStatus('current')
if mibBuilder.loadTexts: msProductName.setDescription('Product Name')
msMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msMajorVersion.setStatus('current')
if mibBuilder.loadTexts: msMajorVersion.setDescription('Major Version')
msMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msMinorVersion.setStatus('current')
if mibBuilder.loadTexts: msMinorVersion.setDescription('Minor Version')
msBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msBuildNumber.setStatus('current')
if mibBuilder.loadTexts: msBuildNumber.setDescription('Build Number')
msVersionStr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msVersionStr.setStatus('current')
if mibBuilder.loadTexts: msVersionStr.setDescription('Version String')
msSpam = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 30, 6))
msSpamNumScannedEmails = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSpamNumScannedEmails.setStatus('current')
if mibBuilder.loadTexts: msSpamNumScannedEmails.setDescription('Number of scanned emails')
msSpamNumSpamEmails = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSpamNumSpamEmails.setStatus('current')
if mibBuilder.loadTexts: msSpamNumSpamEmails.setDescription('Number of spam emails')
msSpamNumHandledSpamEmails = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSpamNumHandledSpamEmails.setStatus('current')
if mibBuilder.loadTexts: msSpamNumHandledSpamEmails.setDescription('Number of handled spam emails')
msSpamControls = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 30, 6, 4))
msSpamControlsSpamEngine = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSpamControlsSpamEngine.setStatus('current')
if mibBuilder.loadTexts: msSpamControlsSpamEngine.setDescription('Number of spam emails by Anti Spam engine')
msSpamControlsIpRepuatation = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 6, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSpamControlsIpRepuatation.setStatus('current')
if mibBuilder.loadTexts: msSpamControlsIpRepuatation.setDescription('Number of spam emails by IP reputation service')
msSpamControlsSPF = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 6, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSpamControlsSPF.setStatus('current')
if mibBuilder.loadTexts: msSpamControlsSPF.setDescription('Number of spam emails by SPF')
msSpamControlsDomainKeys = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 6, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSpamControlsDomainKeys.setStatus('current')
if mibBuilder.loadTexts: msSpamControlsDomainKeys.setDescription('Number of spam emails by Domain Keys')
msSpamControlsRDNS = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 6, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSpamControlsRDNS.setStatus('current')
if mibBuilder.loadTexts: msSpamControlsRDNS.setDescription('Number of spam emails by Reverse DNS')
msSpamControlsRBL = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 6, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSpamControlsRBL.setStatus('current')
if mibBuilder.loadTexts: msSpamControlsRBL.setDescription('Number of spam emails by RBLs (Including Received headers and URLs)')
msExpirationDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msExpirationDate.setStatus('current')
if mibBuilder.loadTexts: msExpirationDate.setDescription('Subscription expiration date')
msEngineVer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msEngineVer.setStatus('current')
if mibBuilder.loadTexts: msEngineVer.setDescription('Anti Spam Engine Version')
msEngineDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msEngineDate.setStatus('current')
if mibBuilder.loadTexts: msEngineDate.setDescription('Anti Spam Engine Build Date')
msStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msStatCode.setStatus('current')
if mibBuilder.loadTexts: msStatCode.setDescription('Status code')
msStatShortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msStatShortDescr.setStatus('current')
if mibBuilder.loadTexts: msStatShortDescr.setDescription('Status short description')
msStatLongDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msStatLongDescr.setStatus('current')
if mibBuilder.loadTexts: msStatLongDescr.setDescription('Status long description')
msServicePack = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 30, 999), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msServicePack.setStatus('current')
if mibBuilder.loadTexts: msServicePack.setDescription('Service Pack')
voipProductName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipProductName.setStatus('current')
if mibBuilder.loadTexts: voipProductName.setDescription('Product Name')
voipMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipMajorVersion.setStatus('current')
if mibBuilder.loadTexts: voipMajorVersion.setDescription('Major Version')
voipMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipMinorVersion.setStatus('current')
if mibBuilder.loadTexts: voipMinorVersion.setDescription('Minor Version')
voipBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipBuildNumber.setStatus('current')
if mibBuilder.loadTexts: voipBuildNumber.setDescription('Build Number')
voipVersionStr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipVersionStr.setStatus('current')
if mibBuilder.loadTexts: voipVersionStr.setDescription('Version String')
voipDOS = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6))
voipDOSSip = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1))
voipDOSSipNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 1))
voipDOSSipNetworkReqInterval = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipNetworkReqInterval.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipNetworkReqInterval.setDescription('Total Number of SIP Requests to The Internal Network per Interval: Interval (seconds)')
voipDOSSipNetworkReqConfThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipNetworkReqConfThreshold.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipNetworkReqConfThreshold.setDescription('Total Number of SIP Requests to The Internal Network per Interval: Configured Threshold')
voipDOSSipNetworkReqCurrentVal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipNetworkReqCurrentVal.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipNetworkReqCurrentVal.setDescription('Total Number of SIP Requests to The Internal Network per Interval: Current Value')
voipDOSSipNetworkRegInterval = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipNetworkRegInterval.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipNetworkRegInterval.setDescription("Total number of 'REGISTER' Requests to The Internal Network per Interval: Interval (seconds)")
voipDOSSipNetworkRegConfThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipNetworkRegConfThreshold.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipNetworkRegConfThreshold.setDescription("Total number of 'REGISTER' Requests to The Internal Network per Interval: Configured Threshold")
voipDOSSipNetworkRegCurrentVal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipNetworkRegCurrentVal.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipNetworkRegCurrentVal.setDescription("Total number of 'REGISTER' Requests to The Internal Network per Interval: Current Value")
voipDOSSipNetworkCallInitInterval = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipNetworkCallInitInterval.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipNetworkCallInitInterval.setDescription('Total Number of SIP Call Initiations to The Internal Network per Interval: Interval (seconds)')
voipDOSSipNetworkCallInitConfThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipNetworkCallInitConfThreshold.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipNetworkCallInitConfThreshold.setDescription('Total Number of SIP Call Initiations to The Internal Network per Interval: Configured Threshold')
voipDOSSipNetworkCallInitICurrentVal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipNetworkCallInitICurrentVal.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipNetworkCallInitICurrentVal.setDescription('Total Number of SIP Call Initiations to The Internal Network per Interval: Current Value')
voipDOSSipRateLimitingTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 2), )
if mibBuilder.loadTexts: voipDOSSipRateLimitingTable.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipRateLimitingTable.setDescription('Table for counting blocked URLs of the most frequent blocked users in the last day')
voipDOSSipRateLimitingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 2, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "voipDOSSipRateLimitingTableIndex"))
if mibBuilder.loadTexts: voipDOSSipRateLimitingEntry.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipRateLimitingEntry.setDescription('')
voipDOSSipRateLimitingTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableIndex.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableIndex.setDescription('Rate Limiting Defense for Internal SIP Servers: Table Index')
voipDOSSipRateLimitingTableIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableIpAddress.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableIpAddress.setDescription('Rate Limiting Defense for Internal SIP Servers: Ip Address')
voipDOSSipRateLimitingTableInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableInterval.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableInterval.setDescription('Rate Limiting Defense for Internal SIP Servers: Interval (Seconds)')
voipDOSSipRateLimitingTableConfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableConfThreshold.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableConfThreshold.setDescription('Rate Limiting Defense for Internal SIP Servers: Configured Threshold for Number of SIP Requests')
voipDOSSipRateLimitingTableNumDOSSipRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableNumDOSSipRequests.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableNumDOSSipRequests.setDescription('Rate Limiting Defense for Internal SIP Servers: Number of SIP Requests')
voipDOSSipRateLimitingTableNumTrustedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableNumTrustedRequests.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableNumTrustedRequests.setDescription('Rate Limiting Defense for Internal SIP Servers: Number of SIP Requests from Trusted Users')
voipDOSSipRateLimitingTableNumNonTrustedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableNumNonTrustedRequests.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableNumNonTrustedRequests.setDescription('Rate Limiting Defense for Internal SIP Servers: Number of SIP Requests from Non-Trusted Users')
voipDOSSipRateLimitingTableNumRequestsfromServers = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 31, 6, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableNumRequestsfromServers.setStatus('current')
if mibBuilder.loadTexts: voipDOSSipRateLimitingTableNumRequestsfromServers.setDescription('Rate Limiting Defense for Internal SIP Servers: Number of SIP Requests from Non-Trusted Users')
voipCAC = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 31, 7))
voipCACConcurrentCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 31, 7, 1))
voipCACConcurrentCallsConfThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipCACConcurrentCallsConfThreshold.setStatus('current')
if mibBuilder.loadTexts: voipCACConcurrentCallsConfThreshold.setDescription('Number of Concurrent Calls: Configured Threshold')
voipCACConcurrentCallsCurrentVal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipCACConcurrentCallsCurrentVal.setStatus('current')
if mibBuilder.loadTexts: voipCACConcurrentCallsCurrentVal.setDescription('Number of Concurrent Calls: Configured Threshold')
voipStatCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipStatCode.setStatus('current')
if mibBuilder.loadTexts: voipStatCode.setDescription('Status code')
voipStatShortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipStatShortDescr.setStatus('current')
if mibBuilder.loadTexts: voipStatShortDescr.setDescription('Status short description')
voipStatLongDescr = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipStatLongDescr.setStatus('current')
if mibBuilder.loadTexts: voipStatLongDescr.setDescription('Status long description')
voipServicePack = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 31, 999), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipServicePack.setStatus('current')
if mibBuilder.loadTexts: voipServicePack.setDescription('Service Pack')
identityAwarenessProductName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessProductName.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessProductName.setDescription('Product Name')
identityAwarenessAuthUsers = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessAuthUsers.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessAuthUsers.setDescription('Number of users authenticated to the gateway')
identityAwarenessUnAuthUsers = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessUnAuthUsers.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessUnAuthUsers.setDescription('Number of unauthenticated guests')
identityAwarenessAuthUsersKerberos = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessAuthUsersKerberos.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessAuthUsersKerberos.setDescription('Number of authenticated users by Kerberos method')
identityAwarenessAuthMachKerberos = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessAuthMachKerberos.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessAuthMachKerberos.setDescription('Number of authenticated machines by Kerberos method')
identityAwarenessAuthUsersPass = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessAuthUsersPass.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessAuthUsersPass.setDescription('Number of authenticated users by User name and password method')
identityAwarenessAuthUsersADQuery = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessAuthUsersADQuery.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessAuthUsersADQuery.setDescription('Number of authenticated users by ADQuery method')
identityAwarenessAuthMachADQuery = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessAuthMachADQuery.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessAuthMachADQuery.setDescription('Number of authenticated machines by ADQuery method')
identityAwarenessLoggedInAgent = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessLoggedInAgent.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessLoggedInAgent.setDescription('Number of users that are logged in with agents')
identityAwarenessLoggedInCaptivePortal = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessLoggedInCaptivePortal.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessLoggedInCaptivePortal.setDescription('Number of users that are logged in with Captive Portal')
identityAwarenessLoggedInADQuery = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessLoggedInADQuery.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessLoggedInADQuery.setDescription('Number of users that are logged in with ADQuery')
identityAwarenessAntiSpoffProtection = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessAntiSpoffProtection.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessAntiSpoffProtection.setDescription('Number of users with an active Traffic Anti-Spoffing protection')
identityAwarenessSuccUserLoginKerberos = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessSuccUserLoginKerberos.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessSuccUserLoginKerberos.setDescription('Number of successfull Kerberos user login attempts')
identityAwarenessSuccMachLoginKerberos = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessSuccMachLoginKerberos.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessSuccMachLoginKerberos.setDescription('Number of successfull Kerberos machine login attempts')
identityAwarenessSuccUserLoginPass = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessSuccUserLoginPass.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessSuccUserLoginPass.setDescription('Number of successfull User Name And Password login attempts')
identityAwarenessSuccUserLoginADQuery = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessSuccUserLoginADQuery.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessSuccUserLoginADQuery.setDescription('Number of successfull ADQuery user login attempts')
identityAwarenessSuccMachLoginADQuery = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessSuccMachLoginADQuery.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessSuccMachLoginADQuery.setDescription('Number of successfull ADQuery machine login attempts')
identityAwarenessUnSuccUserLoginKerberos = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessUnSuccUserLoginKerberos.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessUnSuccUserLoginKerberos.setDescription('Number of unsuccessfull Kerberos user login attempts')
identityAwarenessUnSuccMachLoginKerberos = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessUnSuccMachLoginKerberos.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessUnSuccMachLoginKerberos.setDescription('Number of unsuccessfull Kerberos machine login attempts')
identityAwarenessUnSuccUserLoginPass = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessUnSuccUserLoginPass.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessUnSuccUserLoginPass.setDescription('Number of unsuccessfull User Name And Password login attempts')
identityAwarenessSuccUserLDAP = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessSuccUserLDAP.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessSuccUserLDAP.setDescription('Number of successful LDAP queries')
identityAwarenessUnSuccUserLDAP = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessUnSuccUserLDAP.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessUnSuccUserLDAP.setDescription('Number of unsuccessful LDAP queries')
identityAwarenessDataTrans = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessDataTrans.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessDataTrans.setDescription('How much data did  gateway transmitted')
identityAwarenessDistributedEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 38, 24), )
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTable.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTable.setDescription('Table for distributed environments')
identityAwarenessDistributedEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 38, 24, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "identityAwarenessDistributedEnvTableIndex"))
if mibBuilder.loadTexts: identityAwarenessDistributedEnvEntry.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessDistributedEnvEntry.setDescription('')
identityAwarenessDistributedEnvTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 38, 24, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableIndex.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableIndex.setDescription('Distributed Environments: Table Index')
identityAwarenessDistributedEnvTableGwName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 38, 24, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableGwName.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableGwName.setDescription('Distributed Environments: GW Name')
identityAwarenessDistributedEnvTableDisconnections = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 38, 24, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableDisconnections.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableDisconnections.setDescription('Distributed Environments: Number of disconnections')
identityAwarenessDistributedEnvTableBruteForceAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 38, 24, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableBruteForceAtt.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableBruteForceAtt.setDescription('Distributed Environments: Number of brute force attack detected')
identityAwarenessDistributedEnvTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 38, 24, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableStatus.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableStatus.setDescription('Distributed Environments: Status\n\t\t              \t\t   Possible values include:\n\t\t\t  \t\t           Ok\t\t0\t\t\t\t\t\t\t   \n\t\t\t\t\t\t\t   Error\t2')
identityAwarenessDistributedEnvTableIsLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 38, 24, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableIsLocal.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessDistributedEnvTableIsLocal.setDescription('Distributed Environments: Is local\n\t\t              \t\t   Possible values include:\n\t\t\t  \t\t           False\t0\n\t\t\t  \t\t           True\t\t1')
identityAwarenessADQueryStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 38, 25), )
if mibBuilder.loadTexts: identityAwarenessADQueryStatusTable.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessADQueryStatusTable.setDescription('Table for AD Query status')
identityAwarenessADQueryStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 38, 25, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "identityAwarenessADQueryStatusTableIndex"))
if mibBuilder.loadTexts: identityAwarenessADQueryStatusEntry.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessADQueryStatusEntry.setDescription('')
identityAwarenessADQueryStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 38, 25, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessADQueryStatusTableIndex.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessADQueryStatusTableIndex.setDescription('AD Query Status: Table Index')
identityAwarenessADQueryStatusCurrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 38, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessADQueryStatusCurrStatus.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessADQueryStatusCurrStatus.setDescription('AD Query Status: Current status\n\t\t              \t\t   Possible values include:\n\t\t\t  \t\t           Ok\t\t\t\t\t0\n\t\t\t  \t\t           Bad Credentials\t\t1\n\t\t\t  \t\t           Connectivity Error\t2\n\t\t\t  \t\t           Internal Error\t\t3\n\t\t\t  \t\t           Connection Time Out\t4')
identityAwarenessADQueryStatusDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 38, 25, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessADQueryStatusDomainName.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessADQueryStatusDomainName.setDescription('AD Query Status: Domain name')
identityAwarenessADQueryStatusDomainIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 38, 25, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessADQueryStatusDomainIP.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessADQueryStatusDomainIP.setDescription('AD Query Status: Domain IP')
identityAwarenessADQueryStatusEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 38, 25, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessADQueryStatusEvents.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessADQueryStatusEvents.setDescription('AD Query Status: Number of events')
identityAwarenessRADIUSAccounting = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessRADIUSAccounting.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessRADIUSAccounting.setDescription('Number of identities logged in with RADIUS Accounting')
identityAwarenessIdentityCollectorActiveDirectory = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessIdentityCollectorActiveDirectory.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessIdentityCollectorActiveDirectory.setDescription('Number of identities logged in with Identity Collector Active Directory')
identityAwarenessIdentityCollectorCiscoISE = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessIdentityCollectorCiscoISE.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessIdentityCollectorCiscoISE.setDescription('Number of identities logged in with Identity Collector Cisco ISE')
identityAwarenessTerminalServer = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessTerminalServer.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessTerminalServer.setDescription('Number of identities logged in with terminal server')
identityAwarenessRemoteAccess = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessRemoteAccess.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessRemoteAccess.setDescription('Number of identities logged in with Remote Access')
identityAwarenessIdentityWebAPI = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessIdentityWebAPI.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessIdentityWebAPI.setDescription('Number of identities logged in with Identity Web API')
identityAwarenessStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessStatus.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessStatus.setDescription('Identity Awarness Status code')
identityAwarenessStatusShortDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessStatusShortDesc.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessStatusShortDesc.setDescription('Identity Awarness Status - Short Description')
identityAwarenessStatusLongDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 38, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identityAwarenessStatusLongDesc.setStatus('current')
if mibBuilder.loadTexts: identityAwarenessStatusLongDesc.setDescription('Identity Awarness Status  - Long Description')
applicationControlSubscription = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 39, 1))
applicationControlSubscriptionStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 39, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationControlSubscriptionStatus.setStatus('current')
if mibBuilder.loadTexts: applicationControlSubscriptionStatus.setDescription('Subscription status\n\t\t\t\t Possible values include:\n\t           \t valid, expired, about-to-expire, not-associated, unknown')
applicationControlSubscriptionExpDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 39, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationControlSubscriptionExpDate.setStatus('current')
if mibBuilder.loadTexts: applicationControlSubscriptionExpDate.setDescription('Application Control subscription expiration date')
applicationControlSubscriptionDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 39, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationControlSubscriptionDesc.setStatus('current')
if mibBuilder.loadTexts: applicationControlSubscriptionDesc.setDescription('Subscription description')
applicationControlUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 39, 2))
applicationControlUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 39, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationControlUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: applicationControlUpdateStatus.setDescription('Update status\n\t\t\t\t Possible values include:\n\t           \t failed, up-to-date, new, degrade, unknown')
applicationControlUpdateDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 39, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationControlUpdateDesc.setStatus('current')
if mibBuilder.loadTexts: applicationControlUpdateDesc.setDescription('Update description')
applicationControlNextUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 39, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationControlNextUpdate.setStatus('current')
if mibBuilder.loadTexts: applicationControlNextUpdate.setDescription('Next update description')
applicationControlVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 39, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationControlVersion.setStatus('current')
if mibBuilder.loadTexts: applicationControlVersion.setDescription('Application Control database version')
applicationControlStatusCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 39, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationControlStatusCode.setStatus('current')
if mibBuilder.loadTexts: applicationControlStatusCode.setDescription('Application Control Status code')
applicationControlStatusShortDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 39, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationControlStatusShortDesc.setStatus('current')
if mibBuilder.loadTexts: applicationControlStatusShortDesc.setDescription('Application Control Status - Short Description')
applicationControlStatusLongDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 39, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationControlStatusLongDesc.setStatus('current')
if mibBuilder.loadTexts: applicationControlStatusLongDesc.setDescription('Application Control Status  - Long Description')
exchangeAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1))
exchangeAgentsTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1), )
if mibBuilder.loadTexts: exchangeAgentsTable.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentsTable.setDescription('Table for exchange agents status')
exchangeAgentsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "exchangeAgentsStatusTableIndex"))
if mibBuilder.loadTexts: exchangeAgentsStatusEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentsStatusEntry.setDescription('')
exchangeAgentsStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentsStatusTableIndex.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentsStatusTableIndex.setDescription('Exchange agents: Table Index')
exchangeAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentName.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentName.setDescription('Exchange agent name')
exchangeAgentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentStatus.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentStatus.setDescription('Exchange agent status')
exchangeAgentTotalMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentTotalMsg.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentTotalMsg.setDescription('Exchange agent total messages')
exchangeAgentTotalScannedMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentTotalScannedMsg.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentTotalScannedMsg.setDescription('Exchange agent total scanned messages')
exchangeAgentDroppedMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentDroppedMsg.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentDroppedMsg.setDescription('Exchange agent dropped messages')
exchangeAgentUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentUpTime.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentUpTime.setDescription('Number of seconds that the exchange agent is up')
exchangeAgentTimeSinceLastMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentTimeSinceLastMsg.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentTimeSinceLastMsg.setDescription('Number of seconds since the last message passed through the exchange agent')
exchangeAgentQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentQueueLen.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentQueueLen.setDescription('The current exchange agent message queue length')
exchangeQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeQueueLen.setStatus('current')
if mibBuilder.loadTexts: exchangeQueueLen.setDescription('The cumulative exchange server queue length')
exchangeAgentAvgTimePerMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentAvgTimePerMsg.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentAvgTimePerMsg.setDescription('The average (for all messages) latency added by the exchange agent')
exchangeAgentAvgTimePerScannedMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentAvgTimePerScannedMsg.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentAvgTimePerScannedMsg.setDescription('The average (for scanned messages only) latency added by the exchange agent')
exchangeAgentVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentVersion.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentVersion.setDescription('The version of the exchange agent')
exchangeCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeCPUUsage.setStatus('current')
if mibBuilder.loadTexts: exchangeCPUUsage.setDescription('The exchange server CPU usage in percentage')
exchangeMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: exchangeMemoryUsage.setDescription('The exchange server memory usage in percentage')
exchangeAgentPolicyTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 44, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exchangeAgentPolicyTimeStamp.setStatus('current')
if mibBuilder.loadTexts: exchangeAgentPolicyTimeStamp.setDescription('The time of the last policy retrieved by the exchange agent from the gateway')
dlpVersionString = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpVersionString.setStatus('current')
if mibBuilder.loadTexts: dlpVersionString.setDescription('Version')
dlpLicenseStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpLicenseStatus.setStatus('current')
if mibBuilder.loadTexts: dlpLicenseStatus.setDescription('License status')
dlpLdapStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpLdapStatus.setStatus('current')
if mibBuilder.loadTexts: dlpLdapStatus.setDescription('LDAP Status')
dlpTotalScans = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpTotalScans.setStatus('current')
if mibBuilder.loadTexts: dlpTotalScans.setDescription('Traffic scans')
dlpSMTPScans = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpSMTPScans.setStatus('current')
if mibBuilder.loadTexts: dlpSMTPScans.setDescription('Scanned e-mails')
dlpSMTPIncidents = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpSMTPIncidents.setStatus('current')
if mibBuilder.loadTexts: dlpSMTPIncidents.setDescription('E-mail incidents')
dlpLastSMTPScan = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpLastSMTPScan.setStatus('current')
if mibBuilder.loadTexts: dlpLastSMTPScan.setDescription('Last E-mail scan')
dlpNumQuarantined = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpNumQuarantined.setStatus('current')
if mibBuilder.loadTexts: dlpNumQuarantined.setDescription('Quarantined messages')
dlpQrntMsgsSize = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpQrntMsgsSize.setStatus('current')
if mibBuilder.loadTexts: dlpQrntMsgsSize.setDescription('Size of quarantined messages')
dlpSentEMails = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpSentEMails.setStatus('current')
if mibBuilder.loadTexts: dlpSentEMails.setDescription('Sent e-mails')
dlpExpiredEMails = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpExpiredEMails.setStatus('current')
if mibBuilder.loadTexts: dlpExpiredEMails.setDescription('Expired e-mails')
dlpDiscardEMails = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpDiscardEMails.setStatus('current')
if mibBuilder.loadTexts: dlpDiscardEMails.setDescription('Discarded e-mails')
dlpPostfixQLen = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpPostfixQLen.setStatus('current')
if mibBuilder.loadTexts: dlpPostfixQLen.setDescription('Postfix queue length')
dlpPostfixErrors = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpPostfixErrors.setStatus('current')
if mibBuilder.loadTexts: dlpPostfixErrors.setDescription('Postfix errors')
dlpPostfixQOldMsg = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpPostfixQOldMsg.setStatus('current')
if mibBuilder.loadTexts: dlpPostfixQOldMsg.setDescription('E-mails in queue older than 1 hour')
dlpPostfixQMsgsSz = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpPostfixQMsgsSz.setStatus('current')
if mibBuilder.loadTexts: dlpPostfixQMsgsSz.setDescription('Size of messages in queue')
dlpPostfixQFreeSp = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpPostfixQFreeSp.setStatus('current')
if mibBuilder.loadTexts: dlpPostfixQFreeSp.setDescription('Free space in queue')
dlpQrntFreeSpace = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpQrntFreeSpace.setStatus('current')
if mibBuilder.loadTexts: dlpQrntFreeSpace.setDescription('Free space for quarantine')
dlpQrntStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpQrntStatus.setStatus('current')
if mibBuilder.loadTexts: dlpQrntStatus.setDescription('Quarantine status')
dlpHttpScans = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpHttpScans.setStatus('current')
if mibBuilder.loadTexts: dlpHttpScans.setDescription('HTTP scans')
dlpHttpIncidents = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpHttpIncidents.setStatus('current')
if mibBuilder.loadTexts: dlpHttpIncidents.setDescription('HTTP incidents')
dlpHttpLastScan = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpHttpLastScan.setStatus('current')
if mibBuilder.loadTexts: dlpHttpLastScan.setDescription('HTTP last scan')
dlpFtpScans = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpFtpScans.setStatus('current')
if mibBuilder.loadTexts: dlpFtpScans.setDescription('FTP scans')
dlpFtpIncidents = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpFtpIncidents.setStatus('current')
if mibBuilder.loadTexts: dlpFtpIncidents.setDescription('FTP incidents')
dlpFtpLastScan = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpFtpLastScan.setStatus('current')
if mibBuilder.loadTexts: dlpFtpLastScan.setDescription('FTP last scan')
dlpBypassStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpBypassStatus.setStatus('current')
if mibBuilder.loadTexts: dlpBypassStatus.setDescription('Bypass status')
dlpUserCheckClnts = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpUserCheckClnts.setStatus('current')
if mibBuilder.loadTexts: dlpUserCheckClnts.setDescription('UserCheck clients')
dlpLastPolStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpLastPolStatus.setStatus('current')
if mibBuilder.loadTexts: dlpLastPolStatus.setDescription('Last policy install status')
dlpStatusCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpStatusCode.setStatus('current')
if mibBuilder.loadTexts: dlpStatusCode.setDescription('DLP Status code')
dlpStatusShortDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpStatusShortDesc.setStatus('current')
if mibBuilder.loadTexts: dlpStatusShortDesc.setDescription('DLP Status - Short Description')
dlpStatusLongDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 44, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlpStatusLongDesc.setStatus('current')
if mibBuilder.loadTexts: dlpStatusLongDesc.setDescription('DLP Status  - Long Description')
thresholdPolicy = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 42, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPolicy.setStatus('current')
if mibBuilder.loadTexts: thresholdPolicy.setDescription('The name of the policy')
thresholdState = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 42, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdState.setStatus('current')
if mibBuilder.loadTexts: thresholdState.setDescription('State of the thresholds engine: Ok (1), Error (0)')
thresholdStateDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 42, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdStateDesc.setStatus('current')
if mibBuilder.loadTexts: thresholdStateDesc.setDescription('Description for the state')
thresholdEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 42, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdEnabled.setStatus('current')
if mibBuilder.loadTexts: thresholdEnabled.setDescription('Number of enabled thresholds (Monitoring statuses)')
thresholdActive = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 42, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdActive.setStatus('current')
if mibBuilder.loadTexts: thresholdActive.setDescription('Number of active thresholds (Generating alerts)')
thresholdEventsSinceStartup = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 42, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdEventsSinceStartup.setStatus('current')
if mibBuilder.loadTexts: thresholdEventsSinceStartup.setDescription('Number of activated thresholds since startup')
thresholdActiveEventsTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 42, 7), )
if mibBuilder.loadTexts: thresholdActiveEventsTable.setStatus('current')
if mibBuilder.loadTexts: thresholdActiveEventsTable.setDescription('')
thresholdActiveEventsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 42, 7, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "thresholdActiveEventsIndex"))
if mibBuilder.loadTexts: thresholdActiveEventsEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdActiveEventsEntry.setDescription('')
thresholdActiveEventsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdActiveEventsIndex.setStatus('current')
if mibBuilder.loadTexts: thresholdActiveEventsIndex.setDescription('')
thresholdActiveEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdActiveEventName.setStatus('current')
if mibBuilder.loadTexts: thresholdActiveEventName.setDescription('Name of the threshold')
thresholdActiveEventCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdActiveEventCategory.setStatus('current')
if mibBuilder.loadTexts: thresholdActiveEventCategory.setDescription('The category of the threshold')
thresholdActiveEventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdActiveEventSeverity.setStatus('current')
if mibBuilder.loadTexts: thresholdActiveEventSeverity.setDescription('Severity of the threshold: Cleared (0), Low (1), Medium (2), High (3), Critical (4)')
thresholdActiveEventSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdActiveEventSubject.setStatus('current')
if mibBuilder.loadTexts: thresholdActiveEventSubject.setDescription('The name of the status been checked by the threshold')
thresholdActiveEventSubjectValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdActiveEventSubjectValue.setStatus('current')
if mibBuilder.loadTexts: thresholdActiveEventSubjectValue.setDescription('The value of the status been checked by the threshold')
thresholdActiveEventActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdActiveEventActivationTime.setStatus('current')
if mibBuilder.loadTexts: thresholdActiveEventActivationTime.setDescription('The activation time of the event')
thresholdActiveEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdActiveEventState.setStatus('current')
if mibBuilder.loadTexts: thresholdActiveEventState.setDescription('The state of the event [Active\\Clearing]')
thresholdDestinationsTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 42, 8), )
if mibBuilder.loadTexts: thresholdDestinationsTable.setStatus('current')
if mibBuilder.loadTexts: thresholdDestinationsTable.setDescription('')
thresholdDestinationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 42, 8, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "thresholdDestinationIndex"))
if mibBuilder.loadTexts: thresholdDestinationsEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdDestinationsEntry.setDescription('')
thresholdDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdDestinationIndex.setStatus('current')
if mibBuilder.loadTexts: thresholdDestinationIndex.setDescription('')
thresholdDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdDestinationName.setStatus('current')
if mibBuilder.loadTexts: thresholdDestinationName.setDescription('Name of the destination')
thresholdDestinationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdDestinationType.setStatus('current')
if mibBuilder.loadTexts: thresholdDestinationType.setDescription('The type of the destination')
thresholdSendingState = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdSendingState.setStatus('current')
if mibBuilder.loadTexts: thresholdSendingState.setDescription('Alerts transmission status: Ok (0), Error (1)')
thresholdSendingStateDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdSendingStateDesc.setStatus('current')
if mibBuilder.loadTexts: thresholdSendingStateDesc.setDescription('Description for the alert transmission state')
thresholdAlertCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdAlertCount.setStatus('current')
if mibBuilder.loadTexts: thresholdAlertCount.setDescription('Number of alerts transmitted to the destination')
thresholdErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 2620, 1, 42, 9), )
if mibBuilder.loadTexts: thresholdErrorsTable.setStatus('current')
if mibBuilder.loadTexts: thresholdErrorsTable.setDescription('')
thresholdErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2620, 1, 42, 9, 1), ).setIndexNames((0, "CHECKPOINT-MIB", "thresholdErrorIndex"))
if mibBuilder.loadTexts: thresholdErrorsEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdErrorsEntry.setDescription('')
thresholdErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdErrorIndex.setStatus('current')
if mibBuilder.loadTexts: thresholdErrorIndex.setDescription('')
thresholdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdName.setStatus('current')
if mibBuilder.loadTexts: thresholdName.setDescription('Name of the threshold')
thresholdThresholdOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdThresholdOID.setStatus('current')
if mibBuilder.loadTexts: thresholdThresholdOID.setDescription('OID of the thresholds alert')
thresholdErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdErrorDesc.setStatus('current')
if mibBuilder.loadTexts: thresholdErrorDesc.setDescription('Description of the error')
thresholdErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2620, 1, 42, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdErrorTime.setStatus('current')
if mibBuilder.loadTexts: thresholdErrorTime.setDescription('The occurrence time of the error')
advancedUrlFilteringSubscription = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 43, 1))
advancedUrlFilteringSubscriptionStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringSubscriptionStatus.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringSubscriptionStatus.setDescription('Subscription status\n\t\t\t\t Possible values include:\n\t           \t valid, expired, about-to-expire, not-associated, unknown')
advancedUrlFilteringSubscriptionExpDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringSubscriptionExpDate.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringSubscriptionExpDate.setDescription('Application Control subscription expiration date')
advancedUrlFilteringSubscriptionDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringSubscriptionDesc.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringSubscriptionDesc.setDescription('Subscription description')
advancedUrlFilteringUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 43, 2))
advancedUrlFilteringUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringUpdateStatus.setDescription('Update status\n\t\t\t\t Possible values include:\n\t           \t failed, up-to-date, new, degrade, unknown')
advancedUrlFilteringUpdateDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringUpdateDesc.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringUpdateDesc.setDescription('Update description')
advancedUrlFilteringNextUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringNextUpdate.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringNextUpdate.setDescription('Next update description')
advancedUrlFilteringVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringVersion.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringVersion.setDescription('Url Filtering database version')
advancedUrlFilteringRADStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 43, 3))
advancedUrlFilteringRADStatusCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringRADStatusCode.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringRADStatusCode.setDescription('RAD Status code')
advancedUrlFilteringRADStatusDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringRADStatusDesc.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringRADStatusDesc.setDescription('RAD status description')
advancedUrlFilteringStatusCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringStatusCode.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringStatusCode.setDescription('Application Control Status code')
advancedUrlFilteringStatusShortDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringStatusShortDesc.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringStatusShortDesc.setDescription('Application Control Status - Short Description')
advancedUrlFilteringStatusLongDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 43, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advancedUrlFilteringStatusLongDesc.setStatus('current')
if mibBuilder.loadTexts: advancedUrlFilteringStatusLongDesc.setDescription('Application Control Status  - Long Description')
antiBotSubscription = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 46, 2))
antiBotSubscriptionStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antiBotSubscriptionStatus.setStatus('current')
if mibBuilder.loadTexts: antiBotSubscriptionStatus.setDescription('Anti-Bot subscription status\n\t\t\t\t Possible values include:\n\t           \t valid, expired, about-to-expire, not-associated, unknown')
antiBotSubscriptionExpDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antiBotSubscriptionExpDate.setStatus('current')
if mibBuilder.loadTexts: antiBotSubscriptionExpDate.setDescription('Anti-Bot subscription expiration date')
antiBotSubscriptionDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antiBotSubscriptionDesc.setStatus('current')
if mibBuilder.loadTexts: antiBotSubscriptionDesc.setDescription('Anti-Bot subscription description')
antiVirusSubscription = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 46, 3))
antiVirusSubscriptionStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antiVirusSubscriptionStatus.setStatus('current')
if mibBuilder.loadTexts: antiVirusSubscriptionStatus.setDescription('Anti-Virus subscription status\n\t\t\t\t Possible values include:\n\t           \t valid, expired, about-to-expire, not-associated, unknown')
antiVirusSubscriptionExpDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antiVirusSubscriptionExpDate.setStatus('current')
if mibBuilder.loadTexts: antiVirusSubscriptionExpDate.setDescription('Anti-Virus subscription expiration date')
antiVirusSubscriptionDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antiVirusSubscriptionDesc.setStatus('current')
if mibBuilder.loadTexts: antiVirusSubscriptionDesc.setDescription('Anti-Virus subscription description')
antiSpamSubscription = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 46, 4))
antiSpamSubscriptionStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antiSpamSubscriptionStatus.setStatus('current')
if mibBuilder.loadTexts: antiSpamSubscriptionStatus.setDescription('Anti-Spam subscription status\n\t\t\t\t Possible values include:\n\t           \t valid, expired, about-to-expire, not-associated, unknown')
antiSpamSubscriptionExpDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antiSpamSubscriptionExpDate.setStatus('current')
if mibBuilder.loadTexts: antiSpamSubscriptionExpDate.setDescription('Anti-Spam subscription expiration date')
antiSpamSubscriptionDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antiSpamSubscriptionDesc.setStatus('current')
if mibBuilder.loadTexts: antiSpamSubscriptionDesc.setDescription('Anti-Spam subscription description')
amwABUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 46, 1))
amwABUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amwABUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: amwABUpdateStatus.setDescription('Anti-Malware update status\n\t\t\t\t Possible values include:\n\t           \t failed, up-to-date, new, degrade, unknown')
amwABUpdateDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amwABUpdateDesc.setStatus('current')
if mibBuilder.loadTexts: amwABUpdateDesc.setDescription('Anti-Malware update description')
amwABNextUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amwABNextUpdate.setStatus('current')
if mibBuilder.loadTexts: amwABNextUpdate.setDescription('Anti-Malware next update description')
amwABVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amwABVersion.setStatus('current')
if mibBuilder.loadTexts: amwABVersion.setDescription('Anti-Malware database version')
amwAVUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 46, 5))
amwAVUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amwAVUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: amwAVUpdateStatus.setDescription('Anti-Virus update status\n\t\t\t\t Possible values include:\n\t           \t failed, up-to-date, new, degrade, unknown')
amwAVUpdateDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amwAVUpdateDesc.setStatus('current')
if mibBuilder.loadTexts: amwAVUpdateDesc.setDescription('Anti-Virus update description')
amwAVNextUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 5, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amwAVNextUpdate.setStatus('current')
if mibBuilder.loadTexts: amwAVNextUpdate.setDescription('Anti-Virus next update description')
amwAVVersion = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 5, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amwAVVersion.setStatus('current')
if mibBuilder.loadTexts: amwAVVersion.setDescription('Anti-Virus database version')
amwStatusCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amwStatusCode.setStatus('current')
if mibBuilder.loadTexts: amwStatusCode.setDescription('Anti-Bot & Anti-Virus Status code')
amwStatusShortDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amwStatusShortDesc.setStatus('current')
if mibBuilder.loadTexts: amwStatusShortDesc.setDescription('Anti-Bot & Anti-Virus Status - Short Description')
amwStatusLongDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 46, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amwStatusLongDesc.setStatus('current')
if mibBuilder.loadTexts: amwStatusLongDesc.setDescription('Anti-Bot & Anti-Virus Status  - Long Description')
teSubscriptionStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 49, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teSubscriptionStatus.setStatus('current')
if mibBuilder.loadTexts: teSubscriptionStatus.setDescription('Subscription status\n\t\t\t\t Possible values include:\n\t           \t up-to-date, expired, about-to-expire, not-associated, unknown')
teCloudSubscriptionStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 49, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teCloudSubscriptionStatus.setStatus('current')
if mibBuilder.loadTexts: teCloudSubscriptionStatus.setDescription('Cloud subscription status\n\t\t\t\t Possible values include:\n\t           \t up-to-date, expired, about-to-expire, not-associated, unknown')
teSubscriptionExpDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 49, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teSubscriptionExpDate.setStatus('current')
if mibBuilder.loadTexts: teSubscriptionExpDate.setDescription('Threat-Emulation subscription expiration date')
teSubscriptionDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 49, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teSubscriptionDesc.setStatus('current')
if mibBuilder.loadTexts: teSubscriptionDesc.setDescription('Threat-Emulation Subscription description')
teUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 49, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: teUpdateStatus.setDescription('Anti-Malware update status\n\t\t\t\t Possible values include:\n\t           \t failed, up-to-date, new, degrade, downloading, unknown')
teUpdateDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 49, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUpdateDesc.setStatus('current')
if mibBuilder.loadTexts: teUpdateDesc.setDescription('Threat-Emulation update description')
teStatusCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 49, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teStatusCode.setStatus('current')
if mibBuilder.loadTexts: teStatusCode.setDescription('Threat-Emulation Status code')
teStatusShortDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 49, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teStatusShortDesc.setStatus('current')
if mibBuilder.loadTexts: teStatusShortDesc.setDescription('Threat-Emulation Status - Short Description')
teStatusLongDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 49, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teStatusLongDesc.setStatus('current')
if mibBuilder.loadTexts: teStatusLongDesc.setDescription('Threat-Emulation Status  - Long Description')
treatExtarctionSubscription = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 50, 1))
treatExtarctionSubscriptionStatus = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 50, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: treatExtarctionSubscriptionStatus.setStatus('current')
if mibBuilder.loadTexts: treatExtarctionSubscriptionStatus.setDescription('Threat Extraction subscription status\n\t\t\tPossible values include:\n\t           \t valid, expired, about-to-expire, not-associated, unknown')
treatExtarctionSubscriptionExpDate = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 50, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: treatExtarctionSubscriptionExpDate.setStatus('current')
if mibBuilder.loadTexts: treatExtarctionSubscriptionExpDate.setDescription('Threat Extraction subscription expiration date')
treatExtarctionSubscriptionDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 50, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: treatExtarctionSubscriptionDesc.setStatus('current')
if mibBuilder.loadTexts: treatExtarctionSubscriptionDesc.setDescription('Threat Extraction subscription description')
treatExtarctionStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 50, 2))
treatExtarctionTotalScannedAttachments = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 50, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: treatExtarctionTotalScannedAttachments.setStatus('current')
if mibBuilder.loadTexts: treatExtarctionTotalScannedAttachments.setDescription('Total scanned attachments')
treatExtarctionCleanedAttachments = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 50, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: treatExtarctionCleanedAttachments.setStatus('current')
if mibBuilder.loadTexts: treatExtarctionCleanedAttachments.setDescription('Cleaned attachments')
treatExtarctionOriginalAttachmentsAccesses = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 50, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: treatExtarctionOriginalAttachmentsAccesses.setStatus('current')
if mibBuilder.loadTexts: treatExtarctionOriginalAttachmentsAccesses.setDescription('Original attachments accesses')
treatExtarctionStatusCode = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 50, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: treatExtarctionStatusCode.setStatus('current')
if mibBuilder.loadTexts: treatExtarctionStatusCode.setDescription('Threat Extraction Status code')
treatExtarctionStatusShortDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 50, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: treatExtarctionStatusShortDesc.setStatus('current')
if mibBuilder.loadTexts: treatExtarctionStatusShortDesc.setDescription('Threat Extraction Status - Short Description')
treatExtarctionStatusLongDesc = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 50, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: treatExtarctionStatusLongDesc.setStatus('current')
if mibBuilder.loadTexts: treatExtarctionStatusLongDesc.setDescription('Threat Extraction Status - Long Description')
mibBuilder.exportSymbols("CHECKPOINT-MIB", cpvSaPolicyErr=cpvSaPolicyErr, haVerMajor=haVerMajor, aviTopVirusesEntry=aviTopVirusesEntry, fwCookies=fwCookies, checkPointUTM_1450=checkPointUTM_1450, raidDiskState=raidDiskState, gxDropMalformedRespUpdate=gxDropMalformedRespUpdate, numOfHttpP2PHeaders=numOfHttpP2PHeaders, voipDOSSipNetworkReqInterval=voipDOSSipNetworkReqInterval, ufScannedCnt=ufScannedCnt, licensingAssetPackageDescription=licensingAssetPackageDescription, fwSS_ftp_rejected_sess=fwSS_ftp_rejected_sess, svnNetIfIndex=svnNetIfIndex, fwSS_ftp_pid=fwSS_ftp_pid, teSubscriptionStatus=teSubscriptionStatus, identityAwarenessADQueryStatusEntry=identityAwarenessADQueryStatusEntry, raUserState=raUserState, fwSS_ufp_ops_ufp_sess_max=fwSS_ufp_ops_ufp_sess_max, wamRejectReq=wamRejectReq, voipDOSSipNetworkCallInitInterval=voipDOSSipNetworkCallInitInterval, fwSS_http_ops_cvp_sess_curr=fwSS_http_ops_cvp_sess_curr, fwSS_http_sess_count=fwSS_http_sess_count, fwSS_POP3_total_mails=fwSS_POP3_total_mails, fwConnectionsStatConnectionRate=fwConnectionsStatConnectionRate, haClusterIpNetMask=haClusterIpNetMask, gxInitiateInfo=gxInitiateInfo, permanentTunnelPeerObjName=permanentTunnelPeerObjName, fwSS_ftp_blocked_total=fwSS_ftp_blocked_total, identityAwarenessSuccUserLoginKerberos=identityAwarenessSuccUserLoginKerberos, fwSS_http_ssl_encryp_sess_count=fwSS_http_ssl_encryp_sess_count, wamUagIp=wamUagIp, applicationControlUpdateStatus=applicationControlUpdateStatus, fwSS_POP3_logical_port=fwSS_POP3_logical_port, fwSS_smtp_is_alive=fwSS_smtp_is_alive, fwHmem64_bytes_internal_use=fwHmem64_bytes_internal_use, treatExtarctionSubscriptionDesc=treatExtarctionSubscriptionDesc, identityAwarenessUnSuccUserLoginPass=identityAwarenessUnSuccUserLoginPass, checkPoint5600=checkPoint5600, licensingTotalQuota=licensingTotalQuota, asmHttpWorms=asmHttpWorms, permanentTunnelLinkPriority=permanentTunnelLinkPriority, fwKmem_blocking_bytes_peak=fwKmem_blocking_bytes_peak, sequenceVerifierInvalidretransmit=sequenceVerifierInvalidretransmit, cpvIKECurrSAs=cpvIKECurrSAs, fwSS_http_passed_by_AV_settings=fwSS_http_passed_by_AV_settings, cpvProdName=cpvProdName, tempertureSensorStatus=tempertureSensorStatus, fwSS_ftp_time_stamp=fwSS_ftp_time_stamp, fwSS_total_passed_by_size_limit=fwSS_total_passed_by_size_limit, fwLSConnIndex=fwLSConnIndex, tables=tables, fwSS_smtp_outgoing_mail_curr=fwSS_smtp_outgoing_mail_curr, fwSS_ftp_max_avail_socket=fwSS_ftp_max_avail_socket, cpvCurrAhSAsOut=cpvCurrAhSAsOut, cpvIpsecAhEncPkts=cpvIpsecAhEncPkts, raidVolumeEntry=raidVolumeEntry, fwSXLConnsDeleted=fwSXLConnsDeleted, haClusterIpEntry=haClusterIpEntry, fwIfIndex64=fwIfIndex64, asmHttpFormatViolatoin=asmHttpFormatViolatoin, fwDroppedTotal=fwDroppedTotal, fwNetIfIPV6Addr=fwNetIfIPV6Addr, cpvFwzEncapsDecErrs=cpvFwzEncapsDecErrs, fwSS_smtp_passed_by_internal_error=fwSS_smtp_passed_by_internal_error, vsx=vsx, wamPolicyUpdate=wamPolicyUpdate, gxDropBadSeqGpdu=gxDropBadSeqGpdu, fwCookies_freefwCookies_total=fwCookies_freefwCookies_total, treatExtarctionTotalScannedAttachments=treatExtarctionTotalScannedAttachments, dlpFtpLastScan=dlpFtpLastScan, wamGlobalPerformance=wamGlobalPerformance, multiDiskSize=multiDiskSize, cpvHwAccelAhEncPkts=cpvHwAccelAhEncPkts, svnNetIfMask=svnNetIfMask, aviEngineEntry=aviEngineEntry, fwSS_total_passed_by_av_settings=fwSS_total_passed_by_av_settings, fwHmem_maximum_bytes=fwHmem_maximum_bytes, haProdName=haProdName, raidVolumeIndex=raidVolumeIndex, procUsrTime=procUsrTime, cpvFwzDecPkts=cpvFwzDecPkts, fwSS_POP3_sess_max=fwSS_POP3_sess_max, mgProdName=mgProdName, svnStatLongDescr=svnStatLongDescr, vsxStatusVSWeight=vsxStatusVSWeight, checkPoint5800=checkPoint5800, fwSS_telnet_auth_sess_max=fwSS_telnet_auth_sess_max, vsxCountersDroppedTotal=vsxCountersDroppedTotal, fwSS_ufp_ops_ufp_sess_count=fwSS_ufp_ops_ufp_sess_count, msSpam=msSpam, haStatLong=haStatLong, fwSS_ftp_logical_port=fwSS_ftp_logical_port, fwSS_smtp_auth_sess_count=fwSS_smtp_auth_sess_count, gxDeleteInfo=gxDeleteInfo, sensorInfo=sensorInfo, fwHmem64_blocks_peak=fwHmem64_blocks_peak, powerSupplyInfo=powerSupplyInfo, fwSS_POP3_proto=fwSS_POP3_proto, fwSS_rlogin_socket_in_use_curr=fwSS_rlogin_socket_in_use_curr, raidVolumeType=raidVolumeType, fgInstallTime=fgInstallTime, memSwapsSec64=memSwapsSec64, svnNetIfTable=svnNetIfTable, asmUDP=asmUDP, advancedUrlFilteringRADStatusDesc=advancedUrlFilteringRADStatusDesc, cpvErrOut=cpvErrOut, fwSS_http_passed_by_file_type=fwSS_http_passed_by_file_type, raidInfo=raidInfo, amwABUpdateDesc=amwABUpdateDesc, fwSS_http_blocked_total=fwSS_http_blocked_total, fwSS_smtp_passed_by_archive_limit=fwSS_smtp_passed_by_archive_limit, fanSpeedSensorIndex=fanSpeedSensorIndex, treatExtarctionStatusLongDesc=treatExtarctionStatusLongDesc, checkPointIP690=checkPointIP690, vsxStatusHAState=vsxStatusHAState, fwSS_http_ops_cvp_sess_max=fwSS_http_ops_cvp_sess_max, cpvFwzEncapsEncErrs=cpvFwzEncapsEncErrs, ufTopBlockedCatIndex=ufTopBlockedCatIndex, voipDOSSipNetworkRegInterval=voipDOSSipNetworkRegInterval, updatesInstalledEntry=updatesInstalledEntry, asmCIFS=asmCIFS, vsxCountersRejectedTotal=vsxCountersRejectedTotal, fwIfEntry=fwIfEntry, msSpamControlsSPF=msSpamControlsSPF, checkPoint5100=checkPoint5100, checkPointIPS_15076=checkPointIPS_15076, fwSS_http_tunneled_sess_max=fwSS_http_tunneled_sess_max, httpWorms=httpWorms, fwSS_http_rejected_sess=fwSS_http_rejected_sess, mglsGWIndex=mglsGWIndex, lsGWIP=lsGWIP, fwSS_smtp_blocked_by_AV_settings=fwSS_smtp_blocked_by_AV_settings, msVersionStr=msVersionStr, dlpDiscardEMails=dlpDiscardEMails, voipBuildNumber=voipBuildNumber, fwHmem_failed_alloc=fwHmem_failed_alloc, fwSS_ftp_ops_cvp_sess_count=fwSS_ftp_ops_cvp_sess_count, multiProcEntry=multiProcEntry, cpvIKETotalInitSAs=cpvIKETotalInitSAs, gxGTPv2UpdateBearerSinceInstall=gxGTPv2UpdateBearerSinceInstall, aviTopEverVirusesIndex=aviTopEverVirusesIndex, voipStatCode=voipStatCode, ufTopBlockedUserName=ufTopBlockedUserName, aviFTPTopVirusesCnt=aviFTPTopVirusesCnt, fwHmem_current_allocated_pools=fwHmem_current_allocated_pools, haProblemEntry=haProblemEntry, fwSS_http_passed_cnt=fwSS_http_passed_cnt, fwHmem64_current_allocated_pools=fwHmem64_current_allocated_pools, licensingState=licensingState, ufTopBlockedSiteIndex=ufTopBlockedSiteIndex, lsVerMinor=lsVerMinor, fwHmem64_current_allocated_bytes=fwHmem64_current_allocated_bytes, cpvIpsecComprBytesAfter=cpvIpsecComprBytesAfter, fwSS_http_ssl_encryp_sess_max=fwSS_http_ssl_encryp_sess_max, identityAwarenessDistributedEnvTableGwName=identityAwarenessDistributedEnvTableGwName, cpvIKEglobals=cpvIKEglobals, identityAwarenessDistributedEnvTableIndex=identityAwarenessDistributedEnvTableIndex, svnUpdatesInfo=svnUpdatesInfo, identityAwarenessAuthUsersADQuery=identityAwarenessAuthUsersADQuery, fwSS_POP3_passed_by_file_type=fwSS_POP3_passed_by_file_type, cpvIPsecNICCurrDownLoadedSAs=cpvIPsecNICCurrDownLoadedSAs, treatExtarctionSubscriptionStatus=treatExtarctionSubscriptionStatus, identityAwarenessDistributedEnvEntry=identityAwarenessDistributedEnvEntry, checkPointPower_15070=checkPointPower_15070, fwSS_smtp_scanned_total=fwSS_smtp_scanned_total, dlpPostfixErrors=dlpPostfixErrors, licensingAssetSupportExpiration=licensingAssetSupportExpiration, numOfGnutellaConAttempts=numOfGnutellaConAttempts, cpvTotalEspSAsIn=cpvTotalEspSAsIn, vsxCountersIsDataValid=vsxCountersIsDataValid, thresholdActiveEventCategory=thresholdActiveEventCategory, fwCookies_allocfwCookies_total=fwCookies_allocfwCookies_total, aviServicesHTTP=aviServicesHTTP, mgIndexerInfo=mgIndexerInfo, fwSS_http_blocked_cnt=fwSS_http_blocked_cnt, fwSS_ftp_blocked_by_internal_error=fwSS_ftp_blocked_by_internal_error, gxCreateSinceInstall=gxCreateSinceInstall, gxGTPv2ExpiredCreateSession=gxGTPv2ExpiredCreateSession, fwSS_rlogin_socket_in_use_max=fwSS_rlogin_socket_in_use_max, cpvIpsecComprBytesBefore=cpvIpsecComprBytesBefore, gxDropOutOfContxtGpdu=gxDropOutOfContxtGpdu, fwNetIfPeerName=fwNetIfPeerName, updatesRecommendedTable=updatesRecommendedTable, dlpLastSMTPScan=dlpLastSMTPScan, dlpHttpScans=dlpHttpScans, permanentTunnelSourceIpAddr=permanentTunnelSourceIpAddr, multiProcIdleTime=multiProcIdleTime, mglsGWIP=mglsGWIP, thresholdDestinationType=thresholdDestinationType, fwHmem64_bytes_unused=fwHmem64_bytes_unused, teUpdateDesc=teUpdateDesc, fwHmem64_free_operations=fwHmem64_free_operations, cpvFwzEncPkts=cpvFwzEncPkts, fgIfTable=fgIfTable, haVersionSting=haVersionSting, memActiveVirtual=memActiveVirtual, gxProdVerMajor=gxProdVerMajor, cpvIKEMaxConncurSAs=cpvIKEMaxConncurSAs, cpvGeneral=cpvGeneral, fgPendBytesIn=fgPendBytesIn, raidDiskTable=raidDiskTable, fwSS_POP3_outgoing_mail_count=fwSS_POP3_outgoing_mail_count, aviHTTPTopVirusesTable=aviHTTPTopVirusesTable, raidDiskVolumeID=raidDiskVolumeID, wamPolicy=wamPolicy, cpvIKETotalSAsAttempts=cpvIKETotalSAsAttempts, vsxVsConfigured=vsxVsConfigured, fwSS_http_socket_in_use_max=fwSS_http_socket_in_use_max, cpvHwAccelEspDecPkts=cpvHwAccelEspDecPkts, dlpStatusCode=dlpStatusCode, raidVolumeTable=raidVolumeTable, vdType=vdType, dlpHttpIncidents=dlpHttpIncidents, gxGTPv2ModifyBearerSinceInstall=gxGTPv2ModifyBearerSinceInstall, vsRoutingDest=vsRoutingDest, fwSS_http_ops_cvp_sess_count=fwSS_http_ops_cvp_sess_count, fwAcceptBytesIn64=fwAcceptBytesIn64, fwSS_rlogin_sess_count=fwSS_rlogin_sess_count, numOfP2PSkypeCon=numOfP2PSkypeCon, fwLogIn=fwLogIn, fwSS_rlogin_rejected_sess=fwSS_rlogin_rejected_sess, gxDropPolicyEcho=gxDropPolicyEcho, identityAwarenessDistributedEnvTableBruteForceAtt=identityAwarenessDistributedEnvTableBruteForceAtt, gxGTPv2DropPolicyCreateBearer=gxGTPv2DropPolicyCreateBearer, ufIsMonitor=ufIsMonitor, fgPendPcktsOut=fgPendPcktsOut, fwSS_smtp_auth_sess_curr=fwSS_smtp_auth_sess_curr, fwRejectedTotal=fwRejectedTotal, checkPoint4400=checkPoint4400, teStatusShortDesc=teStatusShortDesc, asmP2PGnutellaConAttempts=asmP2PGnutellaConAttempts, memActiveReal64=memActiveReal64, fwAcceptBytesOut=fwAcceptBytesOut, fwSS_total_passed_by_file_type=fwSS_total_passed_by_file_type, routingMask=routingMask, fwSS_smtp_pid=fwSS_smtp_pid, fwSS=fwSS, asmIPSweep=asmIPSweep, thresholdErrorDesc=thresholdErrorDesc, advancedUrlFilteringRADStatus=advancedUrlFilteringRADStatus, teStatusCode=teStatusCode, cpvIPsecNICsNum=cpvIPsecNICsNum, antiSpamSubscriptionDesc=antiSpamSubscriptionDesc, fwSS_rlogin_proto=fwSS_rlogin_proto, svnNetIfAddress=svnNetIfAddress, vsxStatusCPUUsageEntry=vsxStatusCPUUsageEntry, vsxCountersBytesDroppedTotal=vsxCountersBytesDroppedTotal, gxGTPv2DropMalformedCreateSessionResp=gxGTPv2DropMalformedCreateSessionResp, voltageSensorUnit=voltageSensorUnit, cpseadJobLogServer=cpseadJobLogServer, cpvIKECurrRespSAs=cpvIKECurrRespSAs, checkPoint23500=checkPoint23500, fwHmem64_failed_free=fwHmem64_failed_free, fwSS_POP3=fwSS_POP3)
mibBuilder.exportSymbols("CHECKPOINT-MIB", asmCIFSWorms=asmCIFSWorms, cpsemdDBIsFull=cpsemdDBIsFull, fwHmem_bytes_unused=fwHmem_bytes_unused, gxDropPlicyCreate=gxDropPlicyCreate, asmHttpAsciiViolation=asmHttpAsciiViolation, licensingExpirationDate=licensingExpirationDate, vsxCountersConnTableLimit=vsxCountersConnTableLimit, cpvSaUnknownSpiErr=cpvSaUnknownSpiErr, asmSynatkSynAckReset=asmSynatkSynAckReset, cpvErrors=cpvErrors, checkPointIP150=checkPointIP150, fwSS_smtp_sess_max=fwSS_smtp_sess_max, cpsead=cpsead, fgIfName=fgIfName, fwIfName64=fwIfName64, wamAcceptReq=wamAcceptReq, wamProdName=wamProdName, dlpPostfixQFreeSp=dlpPostfixQFreeSp, lsIndex=lsIndex, fwSS_ftp_port=fwSS_ftp_port, haBlockState=haBlockState, tunnelSourceIpAddr=tunnelSourceIpAddr, fwIfName=fwIfName, aviLastLicExp=aviLastLicExp, svnRouteModAction=svnRouteModAction, thresholdDestinationsTable=thresholdDestinationsTable, haClusterSyncName=haClusterSyncName, gxGTPv2ExpiredDeleteBearer=gxGTPv2ExpiredDeleteBearer, httpMaxHeaderReached=httpMaxHeaderReached, fwConnectionsStatConnectionsOther=fwConnectionsStatConnectionsOther, fwSS_http_blocked_by_internal_error=fwSS_http_blocked_by_internal_error, fgRetransPcktsOut=fgRetransPcktsOut, fwSS_rlogin_sess_curr=fwSS_rlogin_sess_curr, treatExtarctionOriginalAttachmentsAccesses=treatExtarctionOriginalAttachmentsAccesses, fwFrag_fragments=fwFrag_fragments, ufTopBlockedSiteTable=ufTopBlockedSiteTable, multiDiskFreeAvailableBytes=multiDiskFreeAvailableBytes, fwSS_smtp_passed_by_size_limit=fwSS_smtp_passed_by_size_limit, tempertureSensorIndex=tempertureSensorIndex, lsIndexerInfoUpdatesAndLogsIndexedRate=lsIndexerInfoUpdatesAndLogsIndexedRate, antiVirusSubscriptionStatus=antiVirusSubscriptionStatus, thresholdDestinationIndex=thresholdDestinationIndex, vsRoutingEntry=vsRoutingEntry, lsIndexerInfo=lsIndexerInfo, identityAwarenessADQueryStatusCurrStatus=identityAwarenessADQueryStatusCurrStatus, mgBuildNumber=mgBuildNumber, lsGWLastLoginTime=lsGWLastLoginTime, aviTopEverVirusesEntry=aviTopEverVirusesEntry, raVisitorMode=raVisitorMode, fwSS_telnet_socket_in_use_curr=fwSS_telnet_socket_in_use_curr, cpvMaxConncurEspSAsOut=cpvMaxConncurEspSAsOut, voipDOSSipNetworkReqConfThreshold=voipDOSSipNetworkReqConfThreshold, fwSS_ufp_ops_ufp_sess_curr=fwSS_ufp_ops_ufp_sess_curr, fwSS_total_blocked_by_file_type=fwSS_total_blocked_by_file_type, svnNetIfState=svnNetIfState, fwSS_http_proxied_sess_curr=fwSS_http_proxied_sess_curr, dlpNumQuarantined=dlpNumQuarantined, cpvHwAccelAhEncBytes=cpvHwAccelAhEncBytes, osSPmajor=osSPmajor, gxProdVerMinor=gxProdVerMinor, fwSS_ftp_ops_cvp_sess_curr=fwSS_ftp_ops_cvp_sess_curr, treatExtarctionStatistics=treatExtarctionStatistics, advancedUrlFilteringStatusShortDesc=advancedUrlFilteringStatusShortDesc, fwHmem_initial_allocated_bytes=fwHmem_initial_allocated_bytes, mgLicenseViolationMsg=mgLicenseViolationMsg, fwSS_ftp_blocked_by_file_type=fwSS_ftp_blocked_by_file_type, voipVersionStr=voipVersionStr, fwSS_POP3_passed_by_size_limit=fwSS_POP3_passed_by_size_limit, checkPointUTM_11070=checkPointUTM_11070, multiDiskFreeAvailablePercent=multiDiskFreeAvailablePercent, fwSS_rlogin_auth_sess_max=fwSS_rlogin_auth_sess_max, licensingID=licensingID, cpvFwzEncapsDecPkts=cpvFwzEncapsDecPkts, gxDropInitiationReq=gxDropInitiationReq, identityAwarenessDistributedEnvTableIsLocal=identityAwarenessDistributedEnvTableIsLocal, teCloudSubscriptionStatus=teCloudSubscriptionStatus, svnApplianceInfo=svnApplianceInfo, fwSS_ftp=fwSS_ftp, fanSpeedSensorUnit=fanSpeedSensorUnit, voipDOSSipRateLimitingTableNumNonTrustedRequests=voipDOSSipRateLimitingTableNumNonTrustedRequests, vsxVsInstalled=vsxVsInstalled, svnStatCode=svnStatCode, fwSS_telnet_pid=fwSS_telnet_pid, checkPointIP2450=checkPointIP2450, antiBotSubscriptionStatus=antiBotSubscriptionStatus, fwSS_http_passed_by_URL_filter_category=fwSS_http_passed_by_URL_filter_category, checkPointSmart_13050=checkPointSmart_13050, cpvErrIke=cpvErrIke, permanentTunnelInterface=permanentTunnelInterface, svnNetIfOperState=svnNetIfOperState, ufLastLicExp=ufLastLicExp, gxGTPv2ExpiredEcho=gxGTPv2ExpiredEcho, multiDiskName=multiDiskName, asmSynatkCurrentMode=asmSynatkCurrentMode, ls=ls, gxGTPv2DropMalformedModifyBearerResp=gxGTPv2DropMalformedModifyBearerResp, fwSS_total_blocked_by_av_settings=fwSS_total_blocked_by_av_settings, fwCookies_lenfwCookies_total=fwCookies_lenfwCookies_total, svnSysTime=svnSysTime, voipStatLongDescr=voipStatLongDescr, svnProdVerMinor=svnProdVerMinor, antiSpamSubscriptionExpDate=antiSpamSubscriptionExpDate, cpvHwAccelEspDecBytes=cpvHwAccelEspDecBytes, fwHmem_blocks_used=fwHmem_blocks_used, vsxStatusCPUUsagePerCPU1hour=vsxStatusCPUUsagePerCPU1hour, fwSS_rlogin_auth_failures=fwSS_rlogin_auth_failures, antiSpamSubscriptionStatus=antiSpamSubscriptionStatus, raUsersTable=raUsersTable, checkPoint5900=checkPoint5900, mgIndexerInfoTotalUpdatesAndLogsIndexed=mgIndexerInfoTotalUpdatesAndLogsIndexed, amwABUpdate=amwABUpdate, cpsemdCorrelationUnitTable=cpsemdCorrelationUnitTable, tunnelType=tunnelType, fwAcceptBytesOut64=fwAcceptBytesOut64, haClusterSyncAddr=haClusterSyncAddr, msMajorVersion=msMajorVersion, fgRateLimitOut=fgRateLimitOut, cpseadStateDescriptionCode=cpseadStateDescriptionCode, powerSupplyStatus=powerSupplyStatus, raidDiskRevision=raidDiskRevision, gxGTPv2CreateInfo=gxGTPv2CreateInfo, fwLSConnName=fwLSConnName, haProblemName=haProblemName, gxDeleteSinceInstall=gxDeleteSinceInstall, cpsemdStatShortDescr=cpsemdStatShortDescr, aviHTTPState=aviHTTPState, mgStatLongDescr=mgStatLongDescr, asmP2PeMuleConAttempts=asmP2PeMuleConAttempts, fwAcceptPcktsIn=fwAcceptPcktsIn, fwDropPcktsOut=fwDropPcktsOut, identityAwarenessStatus=identityAwarenessStatus, fwSS_http_transp_sess_max=fwSS_http_transp_sess_max, ufStatCode=ufStatCode, antiVirusSubscription=antiVirusSubscription, fwLoggingHandlingRate=fwLoggingHandlingRate, fgAvrRateOut=fgAvrRateOut, updatesInstalledTable=updatesInstalledTable, powerSupplyTable=powerSupplyTable, exchangeAgentsTable=exchangeAgentsTable, fwSS_telnet_proto=fwSS_telnet_proto, fwSS_av_total=fwSS_av_total, powerSupplyEntry=powerSupplyEntry, svnProdVerMajor=svnProdVerMajor, licensingAssetInfo=licensingAssetInfo, checkPoint2200=checkPoint2200, asmSmallPmtu=asmSmallPmtu, fwSS_total_blocked=fwSS_total_blocked, uf=uf, checkPointSmart_125=checkPointSmart_125, tempertureSensorType=tempertureSensorType, identityAwarenessADQueryStatusTable=identityAwarenessADQueryStatusTable, memTotalVirtual64=memTotalVirtual64, checkPoint4200=checkPoint4200, haProblemDescr=haProblemDescr, fwSS_POP3_blocked_total=fwSS_POP3_blocked_total, fwSS_POP3_is_alive=fwSS_POP3_is_alive, fwSS_telnet_logical_port=fwSS_telnet_logical_port, gxDropBadGpdu=gxDropBadGpdu, cpvIKEMaxConncurInitSAs=cpvIKEMaxConncurInitSAs, ms=ms, sequenceVerifierInvalidSequence=sequenceVerifierInvalidSequence, aviStatShortDescr=aviStatShortDescr, routingIntrfName=routingIntrfName, vsxCountersPackets=vsxCountersPackets, fwFragments=fwFragments, fwSS_ufp_time_stamp=fwSS_ufp_time_stamp, fwSS_http_socket_in_use_count=fwSS_http_socket_in_use_count, haVerified=haVerified, svnRouteModIfName=svnRouteModIfName, cpseadProcAlive=cpseadProcAlive, svnUpdatesInfoAvailablePackages=svnUpdatesInfoAvailablePackages, cpsemdStatCode=cpsemdStatCode, svnNetIfTXBytes=svnNetIfTXBytes, aviEngineVer=aviEngineVer, lsStatLongDescr=lsStatLongDescr, fwLogOut64=fwLogOut64, msProductName=msProductName, routingEntry=routingEntry, aviFTPLastVirusName=aviFTPLastVirusName, msEngineVer=msEngineVer, fwHmem_free_operations=fwHmem_free_operations, svnRouteModIfIndex=svnRouteModIfIndex, asmAttacks=asmAttacks, fwHmem64_alloc_operations=fwHmem64_alloc_operations, svnLicensing=svnLicensing, cpvIPsecNICDecrBytes=cpvIPsecNICDecrBytes, fwSS_smtp=fwSS_smtp, voipDOS=voipDOS, exchangeAgentDroppedMsg=exchangeAgentDroppedMsg, aviHTTPTopVirusesEntry=aviHTTPTopVirusesEntry, numOfHttpASCIIViolations=numOfHttpASCIIViolations, fgNumConnIn=fgNumConnIn, msSpamNumSpamEmails=msSpamNumSpamEmails, fwSS_ftp_sess_count=fwSS_ftp_sess_count, fwSS_rlogin_auth_sess_count=fwSS_rlogin_auth_sess_count, gxGtpPathEntries=gxGtpPathEntries, identityAwarenessSuccUserLDAP=identityAwarenessSuccUserLDAP, smartDefense=smartDefense, fwSS_ftp_passed_by_AV_settings=fwSS_ftp_passed_by_AV_settings, fwSS_POP3_passed_by_archive_limit=fwSS_POP3_passed_by_archive_limit, tunnelPeerType=tunnelPeerType, fwCookies_total=fwCookies_total, checkPointTE100X=checkPointTE100X, fwSS_http_auth_failures=fwSS_http_auth_failures, cpvCurrEspSAsOut=cpvCurrEspSAsOut, treatExtarctionCleanedAttachments=treatExtarctionCleanedAttachments, fwSS_smtp_port=fwSS_smtp_port, diskTotal=diskTotal, fwSS_telnet_accepted_sess=fwSS_telnet_accepted_sess, aviHTTPLastVirusTime=aviHTTPLastVirusTime, cpseadJobIndex=cpseadJobIndex, fwKmem_alloc_operations=fwKmem_alloc_operations, exchangeQueueLen=exchangeQueueLen, updatesInstalledName=updatesInstalledName, fwSS_smtp_passed_total=fwSS_smtp_passed_total, mgLSLogReceiveRate10Min=mgLSLogReceiveRate10Min, cpvIpsecStatistics=cpvIpsecStatistics, fwHmem64_bytes_used=fwHmem64_bytes_used, gxGTPv2ModifyBearerFailIndSinceInstall=gxGTPv2ModifyBearerFailIndSinceInstall, vsxStatusCPUUsage1sec=vsxStatusCPUUsage1sec, numOfP2PeMuleConAttempts=numOfP2PeMuleConAttempts, fwKmem_non_blocking_bytes_peak=fwKmem_non_blocking_bytes_peak, fwHmem64_initial_allocated_pools=fwHmem64_initial_allocated_pools, fgVersionString=fgVersionString, svnNetIfTXDrops=svnNetIfTXDrops, aviServicesPOP3=aviServicesPOP3, raidVolumeSize=raidVolumeSize, fwSS_telnet_auth_sess_curr=fwSS_telnet_auth_sess_curr, exchangeAgentPolicyTimeStamp=exchangeAgentPolicyTimeStamp, amwAVUpdateStatus=amwAVUpdateStatus, mgIndexerInfoReadLogsRate10min=mgIndexerInfoReadLogsRate10min, cpvIPsecNICDecrPackets=cpvIPsecNICDecrPackets, cpvIKE=cpvIKE, cpvIpsecDecomprErr=cpvIpsecDecomprErr, svnInfo=svnInfo, gxTunnelApnsEntries=gxTunnelApnsEntries, mgIndexerInfoUpdatesAndLogsIndexedRate60min=mgIndexerInfoUpdatesAndLogsIndexedRate60min, wamVerMinor=wamVerMinor, checkPoint21700=checkPoint21700, aviTopEverVirusesTable=aviTopEverVirusesTable, identityAwarenessADQueryStatusTableIndex=identityAwarenessADQueryStatusTableIndex, cpseadJobDataType=cpseadJobDataType, svnProc=svnProc, gxExpiredUpdate=gxExpiredUpdate, fwAcceptPcktsIn64=fwAcceptPcktsIn64, fwDropPcktsIn=fwDropPcktsIn, mgIndexerInfoUpdatesAndLogsIndexedRate10min=mgIndexerInfoUpdatesAndLogsIndexedRate10min, fwSXLConnsAdded=fwSXLConnsAdded, fwChains_free=fwChains_free, aviTopVirusesName=aviTopVirusesName, vsxCountersVSId=vsxCountersVSId, cpvIpsecDecomprBytesBefore=cpvIpsecDecomprBytesBefore, procUsage=procUsage, checkPointUTM_12050=checkPointUTM_12050)
mibBuilder.exportSymbols("CHECKPOINT-MIB", asmP2PKazaaConAttempts=asmP2PKazaaConAttempts, fwSS_ftp_accepted_sess=fwSS_ftp_accepted_sess, fwSS_http_time_stamp=fwSS_http_time_stamp, voipDOSSipNetworkCallInitConfThreshold=voipDOSSipNetworkCallInitConfThreshold, gx=gx, ufSignatureVer=ufSignatureVer, voipDOSSip=voipDOSSip, mgIndexerInfoTotalReadLogsErrors=mgIndexerInfoTotalReadLogsErrors, advancedUrlFilteringRADStatusCode=advancedUrlFilteringRADStatusCode, fwNetIfSlaves=fwNetIfSlaves, exchangeAgentAvgTimePerMsg=exchangeAgentAvgTimePerMsg, asmLayer3=asmLayer3, cpvCurrEspSAsIn=cpvCurrEspSAsIn, licensingBladeGUIOrder=licensingBladeGUIOrder, identityAwarenessUnSuccUserLDAP=identityAwarenessUnSuccUserLDAP, vsxCountersBytesAcceptedTotal=vsxCountersBytesAcceptedTotal, fwPolicyStat=fwPolicyStat, licensingAssetContainerSKU=licensingAssetContainerSKU, gxGTPv2DropMalformedCreateSessionReq=gxGTPv2DropMalformedCreateSessionReq, haClusterIpIndex=haClusterIpIndex, gxGpduInfo=gxGpduInfo, advancedUrlFilteringStatusLongDesc=advancedUrlFilteringStatusLongDesc, ufTopBlockedSiteEntry=ufTopBlockedSiteEntry, diskFreeTotal=diskFreeTotal, svnNetIfRXPackets=svnNetIfRXPackets, fwSS_telnet_socket_in_use_count=fwSS_telnet_socket_in_use_count, applicationControlNextUpdate=applicationControlNextUpdate, fwSS_http_passed_by_archive_limit=fwSS_http_passed_by_archive_limit, gxGTPv2DeleteSessionSinceInstall=gxGTPv2DeleteSessionSinceInstall, vsxStatusEntry=vsxStatusEntry, fwUfp=fwUfp, applicationControlSubscriptionExpDate=applicationControlSubscriptionExpDate, fwSS_total_passed_by_interal_error=fwSS_total_passed_by_interal_error, fwCookies_dupfwCookies_total=fwCookies_dupfwCookies_total, fwConnectionsStatConnectionsUdp=fwConnectionsStatConnectionsUdp, vsxStatusCPUUsage10sec=vsxStatusCPUUsage10sec, fwHmem_maximum_pools=fwHmem_maximum_pools, fwInspect_operations=fwInspect_operations, cpvHwAccelAhDecPkts=cpvHwAccelAhDecPkts, gxGTPv2DropMalformedDeleteBearerReq=gxGTPv2DropMalformedDeleteBearerReq, fwSS_smtp_rejected_sess=fwSS_smtp_rejected_sess, fwLSConnStateDesc=fwLSConnStateDesc, mgLSLogReceiveRate=mgLSLogReceiveRate, cpvSaReplayErr=cpvSaReplayErr, fwSS_ftp_socket_in_use_max=fwSS_ftp_socket_in_use_max, fwSS_telnet_rejected_sess=fwSS_telnet_rejected_sess, cpvSaOtherErrIn=cpvSaOtherErrIn, haStatShort=haStatShort, updatesRecommendedStatus=updatesRecommendedStatus, memFreeReal=memFreeReal, identityAwarenessSuccUserLoginADQuery=identityAwarenessSuccUserLoginADQuery, cpseadJobsEntry=cpseadJobsEntry, voipDOSSipRateLimitingTableConfThreshold=voipDOSSipRateLimitingTableConfThreshold, fwSXLStatus=fwSXLStatus, identityAwarenessRADIUSAccounting=identityAwarenessRADIUSAccounting, gxBadCauseUpdate=gxBadCauseUpdate, cpsemdDBDiskSpace=cpsemdDBDiskSpace, identityAwarenessSuccMachLoginKerberos=identityAwarenessSuccMachLoginKerberos, routingGatweway=routingGatweway, svnRouteModDest=svnRouteModDest, gxDropMalformedReqCreate=gxDropMalformedReqCreate, fwConnectionsStat=fwConnectionsStat, fwProduct=fwProduct, mngmt=mngmt, gxGTPv2ModifyBearerCmdSinceInstall=gxGTPv2ModifyBearerCmdSinceInstall, fwAcceptPcktsOut64=fwAcceptPcktsOut64, diskFreeAvail=diskFreeAvail, tempertureSensorName=tempertureSensorName, licensingIndex=licensingIndex, cpvFwzStatistics=cpvFwzStatistics, aviFTPTopVirusesTable=aviFTPTopVirusesTable, advancedUrlFiltering=advancedUrlFiltering, fwSS_POP3_auth_sess_curr=fwSS_POP3_auth_sess_curr, voipCACConcurrentCallsCurrentVal=voipCACConcurrentCallsCurrentVal, cpvFwzEncErrs=cpvFwzEncErrs, routingIndex=routingIndex, fwHmem64_initial_allocated_blocks=fwHmem64_initial_allocated_blocks, raidDiskIndex=raidDiskIndex, aviTopVirusesIndex=aviTopVirusesIndex, fwSS_smtp_auth_sess_max=fwSS_smtp_auth_sess_max, cpvHwAccelVendor=cpvHwAccelVendor, msSpamControlsDomainKeys=msSpamControlsDomainKeys, cpvIpsecUdpEspDecPkts=cpvIpsecUdpEspDecPkts, memTotalVirtual=memTotalVirtual, identityAwarenessAuthUsersPass=identityAwarenessAuthUsersPass, haStatCode=haStatCode, fwSS_POP3_scanned_total=fwSS_POP3_scanned_total, raCommunity=raCommunity, gxProdVersion=gxProdVersion, lsVerMajor=lsVerMajor, teUpdateStatus=teUpdateStatus, fwHmem64_number_of_items=fwHmem64_number_of_items, fwNetIfFlags=fwNetIfFlags, fwAcceptPcktsOut=fwAcceptPcktsOut, licensingAssetAccountId=licensingAssetAccountId, checkPointUNIVERGEUnifiedWall100=checkPointUNIVERGEUnifiedWall100, fwSS_smtp_blocked_cnt=fwSS_smtp_blocked_cnt, asmCIFSNullSession=asmCIFSNullSession, fwSS_http_is_alive=fwSS_http_is_alive, checkPoint12600=checkPoint12600, fwModuleState=fwModuleState, gxExpiredInitiateAct=gxExpiredInitiateAct, amwABNextUpdate=amwABNextUpdate, aviTopVirusesCnt=aviTopVirusesCnt, cpseadStatLongDescr=cpseadStatLongDescr, fwLSConnState=fwLSConnState, mgIndexerInfoTotalUpdatesAndLogsIndexedErrors=mgIndexerInfoTotalUpdatesAndLogsIndexedErrors, fwSS_POP3_blocked_by_archive_limit=fwSS_POP3_blocked_by_archive_limit, fwSS_ftp_passed_by_size_limit=fwSS_ftp_passed_by_size_limit, haIfIndex=haIfIndex, fwSS_ftp_auth_sess_max=fwSS_ftp_auth_sess_max, fwSS_http_logical_port=fwSS_http_logical_port, permanentTunnelPeerType=permanentTunnelPeerType, licensingBladeActive=licensingBladeActive, checkPointUTM_1270=checkPointUTM_1270, tunnelCommunity=tunnelCommunity, cpseadJobID=cpseadJobID, procIdleTime=procIdleTime, permanentTunnelNextHop=permanentTunnelNextHop, permanentTunnelEntry=permanentTunnelEntry, lsClientName=lsClientName, svnNetStat=svnNetStat, diskPercent=diskPercent, checkPoint15400=checkPoint15400, dtpsStatCode=dtpsStatCode, svn=svn, fwSS_POP3_port=fwSS_POP3_port, updatesRecommendedEntry=updatesRecommendedEntry, gxGTPv2DropPolicyUpdateBearer=gxGTPv2DropPolicyUpdateBearer, exchangeAgentVersion=exchangeAgentVersion, ufSS=ufSS, identityAwarenessIdentityWebAPI=identityAwarenessIdentityWebAPI, dlpSMTPIncidents=dlpSMTPIncidents, fwSS_ftp_passed_by_archive_limit=fwSS_ftp_passed_by_archive_limit, gxGTPv2DropMalformedEchoReq=gxGTPv2DropMalformedEchoReq, fwSS_http_blocked_by_file_type=fwSS_http_blocked_by_file_type, fwSS_POP3_pid=fwSS_POP3_pid, powerSupplyIndex=powerSupplyIndex, multiProcUserTime=multiProcUserTime, fwSS_http_passed_by_size_limit=fwSS_http_passed_by_size_limit, msStatShortDescr=msStatShortDescr, fwKmem_bytes_unused=fwKmem_bytes_unused, fwSS_smtp_outgoing_mail_count=fwSS_smtp_outgoing_mail_count, fgIfIndex=fgIfIndex, cpvHwAccelStatus=cpvHwAccelStatus, httpHeaderLengthViolations=httpHeaderLengthViolations, antiVirusSubscriptionExpDate=antiVirusSubscriptionExpDate, mgConnectedClientsEntry=mgConnectedClientsEntry, cpseadStatShortDescr=cpseadStatShortDescr, fwSS_POP3_mail_count=fwSS_POP3_mail_count, vsxStatusMemoryUsageVSName=vsxStatusMemoryUsageVSName, thresholdPolicy=thresholdPolicy, advancedUrlFilteringSubscriptionDesc=advancedUrlFilteringSubscriptionDesc, fwIfEntry64=fwIfEntry64, cpvEncPackets=cpvEncPackets, fwHmem_number_of_items=fwHmem_number_of_items, dlpLdapStatus=dlpLdapStatus, fwSS_ftp_is_alive=fwSS_ftp_is_alive, vsxCountersEntry=vsxCountersEntry, fwNetIfTopology=fwNetIfTopology, fwSS_POP3_max_mail_on_conn=fwSS_POP3_max_mail_on_conn, thresholdEventsSinceStartup=thresholdEventsSinceStartup, gxEchoSinceInstall=gxEchoSinceInstall, mgLSLogReceiveRatePeak=mgLSLogReceiveRatePeak, tunnelPeerIpAddr=tunnelPeerIpAddr, cpsemdStatLongDescr=cpsemdStatLongDescr, gxGTPv2DropMalformedDeleteSessionReq=gxGTPv2DropMalformedDeleteSessionReq, cpvHwAccelDriverMinorVer=cpvHwAccelDriverMinorVer, fwSS_total_scanned=fwSS_total_scanned, fwNetIfTable=fwNetIfTable, wamLastSession=wamLastSession, ctxId=ctxId, fwSS_http_auth_sess_curr=fwSS_http_auth_sess_curr, checkPoint15600=checkPoint15600, lsBuildNumber=lsBuildNumber, fwKmem_bytes_internal_use=fwKmem_bytes_internal_use, vsxStatusTable=vsxStatusTable, supportedPlatforms=supportedPlatforms, identityAwarenessTerminalServer=identityAwarenessTerminalServer, wamUagPort=wamUagPort, cpvIpsecEspDecBytes=cpvIpsecEspDecBytes, gxGTPv2BearerResourceCmdSinceInstall=gxGTPv2BearerResourceCmdSinceInstall, fwSXLConnsExisting=fwSXLConnsExisting, fwNumConn=fwNumConn, asmCIFSBlockedPopUps=asmCIFSBlockedPopUps, fwSS_POP3_socket_in_use_max=fwSS_POP3_socket_in_use_max, identityAwarenessADQueryStatusEvents=identityAwarenessADQueryStatusEvents, msStatLongDescr=msStatLongDescr, treatExtarctionStatusCode=treatExtarctionStatusCode, checkPointIP290=checkPointIP290, fwHmem_bytes_used=fwHmem_bytes_used, checkPointSmart_1210=checkPointSmart_1210, mgMgmtHAJournals=mgMgmtHAJournals, vsxStatusMainIP=vsxStatusMainIP, cpvHwAccelAhDecBytes=cpvHwAccelAhDecBytes, applicationControlStatusShortDesc=applicationControlStatusShortDesc, fwKmem_bytes_used=fwKmem_bytes_used, vsxStatusCPUUsagePerCPU24hours=vsxStatusCPUUsagePerCPU24hours, identityAwarenessIdentityCollectorActiveDirectory=identityAwarenessIdentityCollectorActiveDirectory, raTunnelAuthMethod=raTunnelAuthMethod, gxProdName=gxProdName, mgStatShortDescr=mgStatShortDescr, msMinorVersion=msMinorVersion, voipDOSSipRateLimitingTableInterval=voipDOSSipRateLimitingTableInterval, gxGTPv2CreateBearerSinceInstall=gxGTPv2CreateBearerSinceInstall, asmP2PBitTorrentCon=asmP2PBitTorrentCon, asmSynatkModeChange=asmSynatkModeChange, fwHmem_current_allocated_blocks=fwHmem_current_allocated_blocks, asmSynatkNumberofunAckedSyns=asmSynatkNumberofunAckedSyns, haServicePack=haServicePack, advancedUrlFilteringSubscription=advancedUrlFilteringSubscription, asmScans=asmScans, lsConnectedClientsTable=lsConnectedClientsTable, fwSS_smtp_outgoing_mail_max=fwSS_smtp_outgoing_mail_max, voipDOSSipRateLimitingTableIndex=voipDOSSipRateLimitingTableIndex, voltageSensorName=voltageSensorName, raidDiskProductID=raidDiskProductID, fwKmem_bytes_peak=fwKmem_bytes_peak, fwSS_ftp_socket_in_use_count=fwSS_ftp_socket_in_use_count, fwSS_rlogin_pid=fwSS_rlogin_pid, numOfBitTorrentCon=numOfBitTorrentCon, cpsemdUpdatesHandled=cpsemdUpdatesHandled, gxGTPv2DropPolicyModifyBearer=gxGTPv2DropPolicyModifyBearer, antiBotSubscriptionDesc=antiBotSubscriptionDesc, fwRejectPcktsOut64=fwRejectPcktsOut64, fwSS_POP3_blocked_by_file_type=fwSS_POP3_blocked_by_file_type, lsStatShortDescr=lsStatShortDescr, thresholdSendingState=thresholdSendingState, fwSS_http_sess_curr=fwSS_http_sess_curr, voipDOSSipNetwork=voipDOSSipNetwork, vsxStatusCPUUsageTable=vsxStatusCPUUsageTable, fwSS_telnet_max_avail_socket=fwSS_telnet_max_avail_socket, fwSS_rlogin_auth_sess_curr=fwSS_rlogin_auth_sess_curr, cpvErrPolicy=cpvErrPolicy, advancedUrlFilteringSubscriptionStatus=advancedUrlFilteringSubscriptionStatus, smallPMTUNumberOfAttacks=smallPMTUNumberOfAttacks, vsxStatusVsType=vsxStatusVsType, dlpFtpScans=dlpFtpScans, dlpPostfixQLen=dlpPostfixQLen, fwSS_smtp_total_mails=fwSS_smtp_total_mails, mglsGWLogReceiveRate=mglsGWLogReceiveRate, fwSS_ftp_passed_total=fwSS_ftp_passed_total, multiDiskIndex=multiDiskIndex, amwAVUpdateDesc=amwAVUpdateDesc, fwSS_POP3_time_stamp=fwSS_POP3_time_stamp, thresholdDestinationsEntry=thresholdDestinationsEntry, aviHTTPTopVirusesName=aviHTTPTopVirusesName, gxPathMngInfo=gxPathMngInfo, svnNetIfVsid=svnNetIfVsid, fwHmem64_current_allocated_blocks=fwHmem64_current_allocated_blocks, checkPoint4600=checkPoint4600, cpvIPsecNIC=cpvIPsecNIC, fwSS_telnet_socket_in_use_max=fwSS_telnet_socket_in_use_max, svnPerf=svnPerf)
mibBuilder.exportSymbols("CHECKPOINT-MIB", checkPointSmart_15=checkPointSmart_15, fwSS_telnet_port=fwSS_telnet_port, haClusterIpTable=haClusterIpTable, thresholdActive=thresholdActive, mgConnectedGatewaysEntry=mgConnectedGatewaysEntry, fwSS_telnet_sess_count=fwSS_telnet_sess_count, memSwapsSec=memSwapsSec, lsLogReceiveRate1Hour=lsLogReceiveRate1Hour, cpvIKETotalSAsRespAttempts=cpvIKETotalSAsRespAttempts, lsIndexerInfoTotalUpdatesAndLogsIndexedErrors=lsIndexerInfoTotalUpdatesAndLogsIndexedErrors, gxBadCauseDelete=gxBadCauseDelete, routingDest=routingDest, vsxStatusCPUUsagePerCPUVSName=vsxStatusCPUUsagePerCPUVSName, fwSS_http_transp_sess_count=fwSS_http_transp_sess_count, cpvMaxConncurAhSAsOut=cpvMaxConncurAhSAsOut, fgVerMinor=fgVerMinor, fwNetIfEntry=fwNetIfEntry, cpvFwzEncapsEncPkts=cpvFwzEncapsEncPkts, lsLogReceiveRate10Min=lsLogReceiveRate10Min, cpvHwAccelGeneral=cpvHwAccelGeneral, gxGTPv2DropMalformedModifyBearerReq=gxGTPv2DropMalformedModifyBearerReq, cpvIKETotalSAsInitAttempts=cpvIKETotalSAsInitAttempts, mgVerMinor=mgVerMinor, procNum=procNum, fwHmem_blocks_unused=fwHmem_blocks_unused, wamUagNoQueries=wamUagNoQueries, fwAccepted=fwAccepted, mgIndex=mgIndex, mgFwmIsAlive=mgFwmIsAlive, fwSS_http_pid=fwSS_http_pid, vsxCountersConnNum=vsxCountersConnNum, cpsemdCorrelationUnitIP=cpsemdCorrelationUnitIP, dlpVersionString=dlpVersionString, fwSS_http_sess_max=fwSS_http_sess_max, fwFilterDate=fwFilterDate, fwSS_POP3_sess_curr=fwSS_POP3_sess_curr, fgVerMajor=fgVerMajor, fwSS_ftp_auth_sess_count=fwSS_ftp_auth_sess_count, tempertureSensorTable=tempertureSensorTable, fwLSConnOverallDesc=fwLSConnOverallDesc, fwMajor=fwMajor, fwSS_smtp_auth_failures=fwSS_smtp_auth_failures, ufEngine=ufEngine, exchangeAgents=exchangeAgents, gxGTPv2ActPDN=gxGTPv2ActPDN, amwAVNextUpdate=amwAVNextUpdate, fwIfTable64=fwIfTable64, aviEngineTable=aviEngineTable, vsxStatusCPUUsagePerCPUTable=vsxStatusCPUUsagePerCPUTable, gxInitiateSinceInstall=gxInitiateSinceInstall, mgVerMajor=mgVerMajor, exchangeAgentStatus=exchangeAgentStatus, fgPolicyName=fgPolicyName, vsxStatusVsName=vsxStatusVsName, cpvSaAuthErr=cpvSaAuthErr, fwSS_ftp_blocked_by_AV_settings=fwSS_ftp_blocked_by_AV_settings, cpvIKECurrInitSAs=cpvIKECurrInitSAs, fwSS_telnet_sess_curr=fwSS_telnet_sess_curr, svnApplianceProductName=svnApplianceProductName, cpvTotalAhSAsIn=cpvTotalAhSAsIn, fwKmem_failed_free=fwKmem_failed_free, fwSS_ftp_proto=fwSS_ftp_proto, fwSS_http_blocked_by_URL_filter_category=fwSS_http_blocked_by_URL_filter_category, voipDOSSipNetworkRegConfThreshold=voipDOSSipNetworkRegConfThreshold, identityAwarenessAuthUsersKerberos=identityAwarenessAuthUsersKerberos, lsConnectedClientsEntry=lsConnectedClientsEntry, thresholdActiveEventsTable=thresholdActiveEventsTable, gxGTPv2BearerResourceFailIndSinceInstall=gxGTPv2BearerResourceFailIndSinceInstall, aviFTPTopVirusesName=aviFTPTopVirusesName, fwSS_ufp_ops_ufp_rej_sess=fwSS_ufp_ops_ufp_rej_sess, osMinorVer=osMinorVer, advancedUrlFilteringStatusCode=advancedUrlFilteringStatusCode, lsStatCode=lsStatCode, voltageSensorIndex=voltageSensorIndex, vsxStatusCPUUsageVSId=vsxStatusCPUUsageVSId, voipDOSSipRateLimitingTableIpAddress=voipDOSSipRateLimitingTableIpAddress, vsxVrfConfigured=vsxVrfConfigured, svnNetIfTXPackets=svnNetIfTXPackets, voltageSensorStatus=voltageSensorStatus, cpseadConnectedToSem=cpseadConnectedToSem, cpsemdLastEventTime=cpsemdLastEventTime, lsIndexerInfoTotalReadLogsErrors=lsIndexerInfoTotalReadLogsErrors, amwStatusShortDesc=amwStatusShortDesc, vsxStatusCPUUsagePerCPUVSId=vsxStatusCPUUsagePerCPUVSId, wamOpenSessions=wamOpenSessions, fwHmem64_initial_allocated_bytes=fwHmem64_initial_allocated_bytes, fwCookies_putfwCookies_total=fwCookies_putfwCookies_total, voipCACConcurrentCalls=voipCACConcurrentCalls, licensingEntry=licensingEntry, cpvSaOtherErrOut=cpvSaOtherErrOut, haStarted=haStarted, fwNetIfIPAddr=fwNetIfIPAddr, cpvHwAccelStatistics=cpvHwAccelStatistics, cpsemdNewEventsHandled=cpsemdNewEventsHandled, numOfCIFSPasswordLengthViolations=numOfCIFSPasswordLengthViolations, identityAwarenessUnAuthUsers=identityAwarenessUnAuthUsers, raRouteTraffic=raRouteTraffic, cpvIpsecDecomprOverhead=cpvIpsecDecomprOverhead, gxGTPv2ExpiredUpdateBearer=gxGTPv2ExpiredUpdateBearer, fwHmem_current_allocated_bytes=fwHmem_current_allocated_bytes, fwSS_rlogin=fwSS_rlogin, fwVerMinor=fwVerMinor, aviSignatureVer=aviSignatureVer, gxDropMalformedReqEcho=gxDropMalformedReqEcho, vsxVsSupported=vsxVsSupported, fwSS_rlogin_sess_max=fwSS_rlogin_sess_max, dtps=dtps, exchangeAgentUpTime=exchangeAgentUpTime, fwSS_http_auth_sess_max=fwSS_http_auth_sess_max, numOfhostPortScan=numOfhostPortScan, cpsemdCorrelationUnitIndex=cpsemdCorrelationUnitIndex, numOfCIFSBlockedCommands=numOfCIFSBlockedCommands, dlpUserCheckClnts=dlpUserCheckClnts, voltageSensorEntry=voltageSensorEntry, fwSS_http_passed_by_URL_allow_list=fwSS_http_passed_by_URL_allow_list, gxGTPv2VnspSinceInstall=gxGTPv2VnspSinceInstall, fgStrPolicyName=fgStrPolicyName, cpsemdCorrelationUnitNumEventsRcvd=cpsemdCorrelationUnitNumEventsRcvd, aviPOP3LastVirusTime=aviPOP3LastVirusTime, aviServicesFTP=aviServicesFTP, ufSignatureDate=ufSignatureDate, cpvVerMinor=cpvVerMinor, fwChains=fwChains, raUseUDPEncap=raUseUDPEncap, treatExtarction=treatExtarction, fwDroppedBytesTotal=fwDroppedBytesTotal, vsxStatusCPUUsagePerCPU10sec=vsxStatusCPUUsagePerCPU10sec, checkPointOpenServer=checkPointOpenServer, numOfCIFSBlockedPopUps=numOfCIFSBlockedPopUps, fwTrap=fwTrap, cpvIPsecNICEncrPackets=cpvIPsecNICEncrPackets, identityAwarenessSuccMachLoginADQuery=identityAwarenessSuccMachLoginADQuery, cpvIKETotalSAs=cpvIKETotalSAs, fwSS_smtp_time_stamp=fwSS_smtp_time_stamp, svnApplianceManufacturer=svnApplianceManufacturer, permanentTunnelTable=permanentTunnelTable, raidVolumeID=raidVolumeID, fwRejectPcktsOut=fwRejectPcktsOut, haStatus=haStatus, fwLogIn64=fwLogIn64, dtpsVerMinor=dtpsVerMinor, lsConnectedGatewaysEntry=lsConnectedGatewaysEntry, voipStatShortDescr=voipStatShortDescr, mgApplicationType=mgApplicationType, osName=osName, thresholdActiveEventActivationTime=thresholdActiveEventActivationTime, cpseadStatCode=cpseadStatCode, fwProdName=fwProdName, svnVersion=svnVersion, fwSS_total_blocked_by_av=fwSS_total_blocked_by_av, cpvVerMajor=cpvVerMajor, svnRouteModGateway=svnRouteModGateway, fwNetIfIPV6AddrLen=fwNetIfIPV6AddrLen, fwSS_smtp_socket_in_use_max=fwSS_smtp_socket_in_use_max, fwSS_POP3_passed_by_AV_settings=fwSS_POP3_passed_by_AV_settings, fwSS_total_blocked_by_size_limit=fwSS_total_blocked_by_size_limit, exchangeAgentsStatusTableIndex=exchangeAgentsStatusTableIndex, cpseadNumProcessedLogs=cpseadNumProcessedLogs, fwSS_rlogin_max_avail_socket=fwSS_rlogin_max_avail_socket, dtpsLicensedUsers=dtpsLicensedUsers, ufTopBlockedUserIndex=ufTopBlockedUserIndex, updatesInstalledType=updatesInstalledType, fwSS_POP3_accepted_sess=fwSS_POP3_accepted_sess, fanSpeedSensorEntry=fanSpeedSensorEntry, aviTopEverViruses=aviTopEverViruses, ufBlockedCnt=ufBlockedCnt, fwSS_smtp_socket_in_use_count=fwSS_smtp_socket_in_use_count, dlpQrntMsgsSize=dlpQrntMsgsSize, fwSS_rlogin_logical_port=fwSS_rlogin_logical_port, voipDOSSipRateLimitingTableNumRequestsfromServers=voipDOSSipRateLimitingTableNumRequestsfromServers, cpvIPsecNICEncrBytes=cpvIPsecNICEncrBytes, raidDiskMaxLBA=raidDiskMaxLBA, cpvCurrAhSAsIn=cpvCurrAhSAsIn, fwSS_smtp_proto=fwSS_smtp_proto, haIfEntry=haIfEntry, checkPoint3100=checkPoint3100, thresholdEnabled=thresholdEnabled, checkPointUTM_1130=checkPointUTM_1130, fwSS_ftp_auth_sess_curr=fwSS_ftp_auth_sess_curr, permanentTunnelPeerIpAddr=permanentTunnelPeerIpAddr, identityAwarenessAuthUsers=identityAwarenessAuthUsers, mgIndexerInfoReadLogsRate60min=mgIndexerInfoReadLogsRate60min, procInterrupts=procInterrupts, raidDiskSyncState=raidDiskSyncState, fwKmem_aix_heap_size=fwKmem_aix_heap_size, multiDiskFreeTotalBytes=multiDiskFreeTotalBytes, multiProcIndex=multiProcIndex, cpsemd=cpsemd, fwSS_ftp_sess_max=fwSS_ftp_sess_max, fwRejectPcktsIn=fwRejectPcktsIn, identityAwarenessLoggedInAgent=identityAwarenessLoggedInAgent, asmSynatk=asmSynatk, raidVolumeMaxLBA=raidVolumeMaxLBA, fwAcceptBytesIn=fwAcceptBytesIn, cpsemdCorrelationUnitLastRcvdTime=cpsemdCorrelationUnitLastRcvdTime, wamState=wamState, exchangeMemoryUsage=exchangeMemoryUsage, fwKmem_number_of_items=fwKmem_number_of_items, cpvAccelerator=cpvAccelerator, vsxStatusMemoryUsageTable=vsxStatusMemoryUsageTable, fwAcceptedTotal=fwAcceptedTotal, checkPointUNIVERGEUnifiedWall4000=checkPointUNIVERGEUnifiedWall4000, checkPointTE250X=checkPointTE250X, gxDropMalformedReqUpdate=gxDropMalformedReqUpdate, vsRoutingIntrfName=vsRoutingIntrfName, aviHTTPTopVirusesIndex=aviHTTPTopVirusesIndex, fwLoggedTotal=fwLoggedTotal, fwKmem_non_blocking_bytes_used=fwKmem_non_blocking_bytes_used, aviSMTPLastVirusTime=aviSMTPLastVirusTime, dlpBypassStatus=dlpBypassStatus, fwNetIfName=fwNetIfName, haIdentifier=haIdentifier, applicationControlSubscriptionDesc=applicationControlSubscriptionDesc, fwInspect_record=fwInspect_record, multiProcRunQueue=multiProcRunQueue, gxDropMalformedReqDelete=gxDropMalformedReqDelete, fwSS_smtp_max_mail_on_conn=fwSS_smtp_max_mail_on_conn, fwHmem64_failed_alloc=fwHmem64_failed_alloc, dlpSentEMails=dlpSentEMails, identityAwarenessDataTrans=identityAwarenessDataTrans, exchangeAgentTotalMsg=exchangeAgentTotalMsg, cpvTotalEspSAsOut=cpvTotalEspSAsOut, aviFTPLastVirusTime=aviFTPLastVirusTime, fwSS_http_ftp_sess_max=fwSS_http_ftp_sess_max, ufTopBlockedSiteName=ufTopBlockedSiteName, checkPointIPS_19076=checkPointIPS_19076, licensingAssetActivationStatus=licensingAssetActivationStatus, fwSS_http_ftp_sess_count=fwSS_http_ftp_sess_count, ufEngineDate=ufEngineDate, fwSS_smtp_passed_by_AV_settings=fwSS_smtp_passed_by_AV_settings, cpsemdProcAlive=cpsemdProcAlive, cpseadJobsTable=cpseadJobsTable, msSpamControlsRDNS=msSpamControlsRDNS, vsxCountersLoggedTotal=vsxCountersLoggedTotal, ufLastSigLocation=ufLastSigLocation, advancedUrlFilteringUpdate=advancedUrlFilteringUpdate, thresholdErrorsEntry=thresholdErrorsEntry, fwSS_ftp_auth_failures=fwSS_ftp_auth_failures, gxGTPv2DropPolicyEcho=gxGTPv2DropPolicyEcho, identityAwarenessDistributedEnvTableDisconnections=identityAwarenessDistributedEnvTableDisconnections, thresholdActiveEventSeverity=thresholdActiveEventSeverity, vsxStatusCPUUsagePerCPUCoreNumber=vsxStatusCPUUsagePerCPUCoreNumber, aviTopVirusesTable=aviTopVirusesTable, haVerMinor=haVerMinor, lsClientDbLock=lsClientDbLock, gxVnspSinceInstall=gxVnspSinceInstall, gxGTPv2DropPolicyDeleteSession=gxGTPv2DropPolicyDeleteSession, wamUagQueries=wamUagQueries, msEngineDate=msEngineDate, fwUfpHitRatio=fwUfpHitRatio, fwIfTable=fwIfTable, asmLayer5=asmLayer5, aviFTPState=aviFTPState, gxGTPv2ExpiredDeleteSession=gxGTPv2ExpiredDeleteSession)
mibBuilder.exportSymbols("CHECKPOINT-MIB", identityAwarenessAntiSpoffProtection=identityAwarenessAntiSpoffProtection, fwHmem64=fwHmem64, products=products, haClusterIpMemberNet=haClusterIpMemberNet, svnSysUniqId=svnSysUniqId, haInstalled=haInstalled, msBuildNumber=msBuildNumber, updatesRecommendedIndex=updatesRecommendedIndex, checkPointUNIVERGEUnifiedWall1000=checkPointUNIVERGEUnifiedWall1000, checkPointUTM_12070=checkPointUTM_12070, dlpPostfixQMsgsSz=dlpPostfixQMsgsSz, procSysTime=procSysTime, lsIndexerInfoReadLogsRate=lsIndexerInfoReadLogsRate, numOfP2POtherConAttempts=numOfP2POtherConAttempts, svnDisk=svnDisk, fanSpeedSensorTable=fanSpeedSensorTable, gxGTPv2ExpiredModifyBearer=gxGTPv2ExpiredModifyBearer, aviStatCode=aviStatCode, checkPointTE2000X=checkPointTE2000X, gxDropInitiationResp=gxDropInitiationResp, aviLastSigLocation=aviLastSigLocation, gxDropMalformedRespCreate=gxDropMalformedRespCreate, fwNetIfPorts=fwNetIfPorts, aviPOP3TopVirusesCnt=aviPOP3TopVirusesCnt, svnServicePack=svnServicePack, avi=avi, fwSS_http_ops_cvp_rej_sess=fwSS_http_ops_cvp_rej_sess, fwSS_POP3_outgoing_mail_curr=fwSS_POP3_outgoing_mail_curr, fwSS_total_blocked_by_interal_error=fwSS_total_blocked_by_interal_error, wamUagHost=wamUagHost, fwInspect_lookups=fwInspect_lookups, msSpamNumHandledSpamEmails=msSpamNumHandledSpamEmails, cpvIpsecComprOverhead=cpvIpsecComprOverhead, tunnelNextHop=tunnelNextHop, fwSS_smtp_sess_count=fwSS_smtp_sess_count, fgAvrRateIn=fgAvrRateIn, aviHTTPLastVirusName=aviHTTPLastVirusName, haClusterIpAddr=haClusterIpAddr, checkPointUTM_13070=checkPointUTM_13070, cpvIpsecUdpEspEncPkts=cpvIpsecUdpEspEncPkts, svnLogDStat=svnLogDStat, mgIndexerInfoReadLogsDelay=mgIndexerInfoReadLogsDelay, tunnelLinkPriority=tunnelLinkPriority, lsLoggingInfo=lsLoggingInfo, osSPminor=osSPminor, voltageSensorType=voltageSensorType, fwSS_smtp_logical_port=fwSS_smtp_logical_port, fwHmem_block_size=fwHmem_block_size, tunnelProbState=tunnelProbState, fwHmem_bytes_peak=fwHmem_bytes_peak, fwSS_http_blocked_by_archive_limit=fwSS_http_blocked_by_archive_limit, haWorkMode=haWorkMode, fwKmem_failed_alloc=fwKmem_failed_alloc, msSpamControls=msSpamControls, cpvIpsecCompressiblePkts=cpvIpsecCompressiblePkts, fwSS_ftp_passed_by_file_type=fwSS_ftp_passed_by_file_type, raidDiskID=raidDiskID, haClusterSyncTable=haClusterSyncTable, ufTopBlockedCatEntry=ufTopBlockedCatEntry, fwSS_http_scanned_total=fwSS_http_scanned_total, checkPoint5200=checkPoint5200, fwSS_http_proxied_sess_max=fwSS_http_proxied_sess_max, fwSS_POP3_rejected_sess=fwSS_POP3_rejected_sess, aviPOP3TopVirusesEntry=aviPOP3TopVirusesEntry, gxGTPv2PathMngInfo=gxGTPv2PathMngInfo, cpvIpsecDecomprPkts=cpvIpsecDecomprPkts, fwSS_smtp_sess_curr=fwSS_smtp_sess_curr, mgIndexerInfoTotalReadLogs=mgIndexerInfoTotalReadLogs, licensingAssetContainerCK=licensingAssetContainerCK, haClusterIpIfName=haClusterIpIfName, aviSMTPTopVirusesTable=aviSMTPTopVirusesTable, fwSS_smtp_blocked_by_archive_limit=fwSS_smtp_blocked_by_archive_limit, sequenceVerifierInvalidAck=sequenceVerifierInvalidAck, wamVerMajor=wamVerMajor, checkPointVMware=checkPointVMware, aviEngineDate=aviEngineDate, ufEngineVer=ufEngineVer, vsRoutingTable=vsRoutingTable, fwNetIfIndex=fwNetIfIndex, fwKmem_blocking_bytes_used=fwKmem_blocking_bytes_used, fwSS_smtp_blocked_total=fwSS_smtp_blocked_total, wamName=wamName, msServicePack=msServicePack, gxGpduExpiredTunnel=gxGpduExpiredTunnel, mgConnectedGatewaysTable=mgConnectedGatewaysTable, licensingAssetCKSignature=licensingAssetCKSignature, svnUpdatesInfoBuild=svnUpdatesInfoBuild, fwSS_ftp_scanned_total=fwSS_ftp_scanned_total, cpvTotalAhSAsOut=cpvTotalAhSAsOut, fwLocalLoggingStat=fwLocalLoggingStat, ufTopBlockedCatTable=ufTopBlockedCatTable, fwHmem_failed_free=fwHmem_failed_free, fanSpeedSensorStatus=fanSpeedSensorStatus, fwConnsRate=fwConnsRate, svnNetIfTableEntry=svnNetIfTableEntry, fwHmem_requested_bytes=fwHmem_requested_bytes, gxDropMalformedRespDelete=gxDropMalformedRespDelete, asmTCP=asmTCP, fwSS_telnet_is_alive=fwSS_telnet_is_alive, vsxCountersConnPeakNum=vsxCountersConnPeakNum, fwSS_http_blocked_by_size_limit=fwSS_http_blocked_by_size_limit, voipProductName=voipProductName, fwInspect=fwInspect, thresholdSendingStateDesc=thresholdSendingStateDesc, aviLastSigCheckTime=aviLastSigCheckTime, fwSS_http_proto=fwSS_http_proto, cpvIpsecDecomprBytesAfter=cpvIpsecDecomprBytesAfter, lsLogReceiveRate=lsLogReceiveRate, fwLocalLoggingDesc=fwLocalLoggingDesc, fwSS_rlogin_is_alive=fwSS_rlogin_is_alive, checkpoint=checkpoint, voipDOSSipNetworkCallInitICurrentVal=voipDOSSipNetworkCallInitICurrentVal, cpseadConnectedToLogServer=cpseadConnectedToLogServer, advancedUrlFilteringNextUpdate=advancedUrlFilteringNextUpdate, msSpamControlsIpRepuatation=msSpamControlsIpRepuatation, memTotalReal=memTotalReal, applicationControlUpdate=applicationControlUpdate, voipMinorVersion=voipMinorVersion, fwKmem_system_physical_mem=fwKmem_system_physical_mem, fwSS_POP3_blocked_cnt=fwSS_POP3_blocked_cnt, vsxCountersAcceptedTotal=vsxCountersAcceptedTotal, haTrusted=haTrusted, fwSS_http_accepted_sess=fwSS_http_accepted_sess, checkPointUTM_11050=checkPointUTM_11050, svnNetIfName=svnNetIfName, fwInstallTime=fwInstallTime, fgPendBytesOut=fgPendBytesOut, PYSNMP_MODULE_ID=checkpoint, fwSS_ftp_sess_curr=fwSS_ftp_sess_curr, tunnelTable=tunnelTable, asmSynatkSynAckTimeout=asmSynatkSynAckTimeout, checkPointSmart_13150=checkPointSmart_13150, gxGTPv2DeleteBearerCmdSinceInstall=gxGTPv2DeleteBearerCmdSinceInstall, haProblemPriority=haProblemPriority, ufTopBlockedCatName=ufTopBlockedCatName, cpsemdCurrentDBSize=cpsemdCurrentDBSize, amw=amw, fgModuleKernelBuild=fgModuleKernelBuild, cpvIKENoResp=cpvIKENoResp, dlpExpiredEMails=dlpExpiredEMails, fwHmem_bytes_internal_use=fwHmem_bytes_internal_use, raExternalIpAddr=raExternalIpAddr, dlpStatusLongDesc=dlpStatusLongDesc, checkPointSmart_150=checkPointSmart_150, aviSMTPTopVirusesCnt=aviSMTPTopVirusesCnt, svnUpdatesInfoStatus=svnUpdatesInfoStatus, fwNetIfProxyName=fwNetIfProxyName, dlpQrntStatus=dlpQrntStatus, raIkeOverTCP=raIkeOverTCP, gxCreateInfo=gxCreateInfo, haIP=haIP, fwSICTrustState=fwSICTrustState, mglsGWLastLoginTime=mglsGWLastLoginTime, ufEngineName=ufEngineName, svnWebUIPort=svnWebUIPort, checkPointIPS_12076=checkPointIPS_12076, gxUpdateSinceInstall=gxUpdateSinceInstall, dlpHttpLastScan=dlpHttpLastScan, fwSS_smtp_max_avail_socket=fwSS_smtp_max_avail_socket, asmP2POtherConAttempts=asmP2POtherConAttempts, thresholdActiveEventsIndex=thresholdActiveEventsIndex, gxSecondaryNsapiEntries=gxSecondaryNsapiEntries, identityAwareness=identityAwareness, cpvFwz=cpvFwz, vsxStatusMemoryUsage=vsxStatusMemoryUsage, vsxStatusCPUUsagePerCPU1min=vsxStatusCPUUsagePerCPU1min, fwKmem=fwKmem, mgIndexerInfoUpdatesAndLogsIndexedRatePeak=mgIndexerInfoUpdatesAndLogsIndexedRatePeak, advancedUrlFilteringSubscriptionExpDate=advancedUrlFilteringSubscriptionExpDate, svnOSInfo=svnOSInfo, svnApplianceSeriesString=svnApplianceSeriesString, multiProcInterrupts=multiProcInterrupts, lsIndexerInfoUpdatesAndLogsIndexedRatePeak=lsIndexerInfoUpdatesAndLogsIndexedRatePeak, fg=fg, fwLSConnTable=fwLSConnTable, applicationControlStatusCode=applicationControlStatusCode, memActiveVirtual64=memActiveVirtual64, fw=fw, checkPoint21800=checkPoint21800, gxTunnelsEntries=gxTunnelsEntries, wam=wam, aviSMTPLastVirusName=aviSMTPLastVirusName, updatesRecommendedName=updatesRecommendedName, fwSS_telnet_auth_sess_count=fwSS_telnet_auth_sess_count, amwABUpdateStatus=amwABUpdateStatus, ufTopBlockedUserTable=ufTopBlockedUserTable, identityAwarenessSuccUserLoginPass=identityAwarenessSuccUserLoginPass, fwHmem_blocks_peak=fwHmem_blocks_peak, aviSMTPTopVirusesEntry=aviSMTPTopVirusesEntry, aviFTPTopVirusesIndex=aviFTPTopVirusesIndex, vsxStatusVsPolicyType=vsxStatusVsPolicyType, aviEngines=aviEngines, exchangeAgentName=exchangeAgentName, cpvIKEerrors=cpvIKEerrors, fgProdName=fgProdName, identityAwarenessUnSuccMachLoginKerberos=identityAwarenessUnSuccMachLoginKerberos, asmCIFSPasswordLengthViolations=asmCIFSPasswordLengthViolations, updatesInstalledIndex=updatesInstalledIndex, fwInspect_extract=fwInspect_extract, svnStatShortDescr=svnStatShortDescr, gxExpiredCreate=gxExpiredCreate, raLogonTime=raLogonTime, fwSS_rlogin_time_stamp=fwSS_rlogin_time_stamp, lsClientHost=lsClientHost, fwSS_ftp_blocked_cnt=fwSS_ftp_blocked_cnt, fwHmem_alloc_operations=fwHmem_alloc_operations, voipCAC=voipCAC, vsxStatusCPUUsage24hr=vsxStatusCPUUsage24hr, lsGWState=lsGWState, exchangeAgentAvgTimePerScannedMsg=exchangeAgentAvgTimePerScannedMsg, vsxStatusMemoryUsageVSId=vsxStatusMemoryUsageVSId, wamUagLastQuery=wamUagLastQuery, mgIndexerInfoReadLogsRatePeak=mgIndexerInfoReadLogsRatePeak, mgClientName=mgClientName, mgActiveStatus=mgActiveStatus, antiBotSubscription=antiBotSubscription, ufTopBlockedUserEntry=ufTopBlockedUserEntry, asmHostPortScan=asmHostPortScan, msSpamControlsSpamEngine=msSpamControlsSpamEngine, applicationControl=applicationControl, lsIndexerInfoTotalReadLogs=lsIndexerInfoTotalReadLogs, cpsemdCorrelationUnitEntry=cpsemdCorrelationUnitEntry, raidVolumeState=raidVolumeState, svnConnectivity=svnConnectivity, voipDOSSipRateLimitingTableNumTrustedRequests=voipDOSSipRateLimitingTableNumTrustedRequests, amwAVUpdate=amwAVUpdate, dlp=dlp, lsGWIndex=lsGWIndex, procQueue=procQueue, checkPoint4800=checkPoint4800, multiProcUsage=multiProcUsage, svnBuild=svnBuild, fwSS_POP3_mail_curr=fwSS_POP3_mail_curr, permanentTunnelProbState=permanentTunnelProbState, wamPluginPerformance=wamPluginPerformance, svnApplianceSerialNumber=svnApplianceSerialNumber, gxGTPv2DropPolicyCreateSession=gxGTPv2DropPolicyCreateSession, vsxStatusSicTrustState=vsxStatusSicTrustState, gxGTPv2DropMalformedDeleteSessionResp=gxGTPv2DropMalformedDeleteSessionResp, memDiskTransfers64=memDiskTransfers64, mgConnectedClientsTable=mgConnectedClientsTable, vsRoutingVsId=vsRoutingVsId, fwAcceptedBytesTotal=fwAcceptedBytesTotal, fwVerMajor=fwVerMajor, gxGTPv2DropMalformedUpdateBearerResp=gxGTPv2DropMalformedUpdateBearerResp, aviSMTPTopVirusesIndex=aviSMTPTopVirusesIndex, licensingTable=licensingTable, fgIfEntry=fgIfEntry, cpvSaErrors=cpvSaErrors, fwSS_http_auth_sess_count=fwSS_http_auth_sess_count, aviPOP3TopVirusesIndex=aviPOP3TopVirusesIndex, amwStatusLongDesc=amwStatusLongDesc, antiSpamSubscription=antiSpamSubscription, ufStatLongDescr=ufStatLongDescr)
mibBuilder.exportSymbols("CHECKPOINT-MIB", svnNetIfMAC=svnNetIfMAC, aviSignatureDate=aviSignatureDate, eventiaAnalyzer=eventiaAnalyzer, gxGpdu1MinAvgRate=gxGpdu1MinAvgRate, fwSS_http_port=fwSS_http_port, dlpLicenseStatus=dlpLicenseStatus, wamStatLongDescr=wamStatLongDescr, dlpLastPolStatus=dlpLastPolStatus, checkPointTE1000X=checkPointTE1000X, vsxCountersTable=vsxCountersTable, fwNetIfNetmask=fwNetIfNetmask, thresholdState=thresholdState, fwSS_telnet=fwSS_telnet, checkPoint13500=checkPoint13500, advancedUrlFilteringUpdateStatus=advancedUrlFilteringUpdateStatus, thresholdDestinationName=thresholdDestinationName, identityAwarenessDistributedEnvTable=identityAwarenessDistributedEnvTable, fanSpeedSensorValue=fanSpeedSensorValue, thresholdThresholdOID=thresholdThresholdOID, gxActContxt=gxActContxt, diskQueue=diskQueue, raidVolumeFlags=raidVolumeFlags, vsxStatusVRId=vsxStatusVRId, fwConnTableLimit=fwConnTableLimit, fwLSConnSendRate=fwLSConnSendRate, fwRejected=fwRejected, fwHmem64_blocks_unused=fwHmem64_blocks_unused, checkPointSmart_1150=checkPointSmart_1150, ha=ha, raidDiskVendor=raidDiskVendor, checkPointUNIVERGEUnifiedWall2000=checkPointUNIVERGEUnifiedWall2000, permanentTunnelCommunity=permanentTunnelCommunity, gxGTPv2DropMalformedDeleteBearerResp=gxGTPv2DropMalformedDeleteBearerResp, numOfDisksOnRaid=numOfDisksOnRaid, fwDropPcktsOut64=fwDropPcktsOut64, fwSS_smtp_socket_in_use_curr=fwSS_smtp_socket_in_use_curr, identityAwarenessProductName=identityAwarenessProductName, dlpPostfixQOldMsg=dlpPostfixQOldMsg, fwSS_telnet_auth_failures=fwSS_telnet_auth_failures, fwUfpHits=fwUfpHits, tempertureSensorEntry=tempertureSensorEntry, lsIndexerInfoTotalUpdatesAndLogsIndexed=lsIndexerInfoTotalUpdatesAndLogsIndexed, identityAwarenessLoggedInCaptivePortal=identityAwarenessLoggedInCaptivePortal, amwAVVersion=amwAVVersion, fgNumConnOut=fgNumConnOut, exchangeAgentTotalScannedMsg=exchangeAgentTotalScannedMsg, cpvHwAccelEspEncPkts=cpvHwAccelEspEncPkts, fwDropped=fwDropped, cpvIKETotalRespSAs=cpvIKETotalRespSAs, cpsemdConnectionDuration=cpsemdConnectionDuration, cpvMaxConncurEspSAsIn=cpvMaxConncurEspSAsIn, checkPointIP1280=checkPointIP1280, multiDiskEntry=multiDiskEntry, ufTopBlockedSiteCnt=ufTopBlockedSiteCnt, fwIfIndex=fwIfIndex, svnNetIfRXBytes=svnNetIfRXBytes, fwSS_POP3_socket_in_use_curr=fwSS_POP3_socket_in_use_curr, mgIndexerInfoUpdatesAndLogsIndexedRate=mgIndexerInfoUpdatesAndLogsIndexedRate, haProblemVerified=haProblemVerified, memFreeReal64=memFreeReal64, svnNetIfMTU=svnNetIfMTU, vsxCountersBytesRejectedTotal=vsxCountersBytesRejectedTotal, fwSS_total_passed=fwSS_total_passed, fwSS_http_ftp_sess_curr=fwSS_http_ftp_sess_curr, thresholdActiveEventSubject=thresholdActiveEventSubject, cpvSaStatistics=cpvSaStatistics, fwSS_total_passed_by_av=fwSS_total_passed_by_av, svnNetIfTXErrors=svnNetIfTXErrors, fwSS_smtp_passed_by_file_type=fwSS_smtp_passed_by_file_type, checkPointSmart_1225=checkPointSmart_1225, fwSS_total_passed_by_archive_limit=fwSS_total_passed_by_archive_limit, identityAwarenessAuthMachKerberos=identityAwarenessAuthMachKerberos, applicationControlVersion=applicationControlVersion, permanentTunnelState=permanentTunnelState, checkPointTE1000=checkPointTE1000, osBuildNum=osBuildNum, fwSS_ftp_socket_in_use_curr=fwSS_ftp_socket_in_use_curr, amwABVersion=amwABVersion, multiDiskFreeTotalPercent=multiDiskFreeTotalPercent, dtpsVerMajor=dtpsVerMajor, checkPointPower_111000=checkPointPower_111000, fwSS_POP3_auth_failures=fwSS_POP3_auth_failures, fgNumInterfaces=fgNumInterfaces, fwFrag_packets=fwFrag_packets, fwUfpInspected=fwUfpInspected, svnProdName=svnProdName, gxDropVnsp=gxDropVnsp, voipDOSSipRateLimitingEntry=voipDOSSipRateLimitingEntry, treatExtarctionSubscriptionExpDate=treatExtarctionSubscriptionExpDate, fwRejectPcktsIn64=fwRejectPcktsIn64, checkPointPower_19070=checkPointPower_19070, aviEngineIndex=aviEngineIndex, vsxStatusCPUUsagePerCPU1sec=vsxStatusCPUUsagePerCPU1sec, thresholdActiveEventSubjectValue=thresholdActiveEventSubjectValue, mgClientHost=mgClientHost, cpvIpsecComprErrors=cpvIpsecComprErrors, identityAwarenessStatusLongDesc=identityAwarenessStatusLongDesc, identityAwarenessAuthMachADQuery=identityAwarenessAuthMachADQuery, svnMem64=svnMem64, antiBotSubscriptionExpDate=antiBotSubscriptionExpDate, dlpQrntFreeSpace=dlpQrntFreeSpace, fwNetIfRemoteIp=fwNetIfRemoteIp, voipDOSSipNetworkRegCurrentVal=voipDOSSipNetworkRegCurrentVal, fwSS_POP3_socket_in_use_count=fwSS_POP3_socket_in_use_count, exchangeCPUUsage=exchangeCPUUsage, thresholdErrorIndex=thresholdErrorIndex, fgRetransPcktsIn=fgRetransPcktsIn, thresholdStateDesc=thresholdStateDesc, asmCIFSBlockedCommands=asmCIFSBlockedCommands, raOfficeMode=raOfficeMode, applicationControlSubscriptionStatus=applicationControlSubscriptionStatus, applicationControlSubscription=applicationControlSubscription, cpvIKETotalFailuresInit=cpvIKETotalFailuresInit, memActiveReal=memActiveReal, dtpsProdName=dtpsProdName, cpseadJobState=cpseadJobState, fwPerfStat=fwPerfStat, fwSS_smtp_mail_count=fwSS_smtp_mail_count, svnNetIfDescription=svnNetIfDescription, mgLogServerInfo=mgLogServerInfo, checkPointIP560=checkPointIP560, fwSS_POP3_passed_by_internal_error=fwSS_POP3_passed_by_internal_error, aviFTPTopVirusesEntry=aviFTPTopVirusesEntry, fwHmem64_blocks_used=fwHmem64_blocks_used, gxGTPv2DeleteBearerSinceInstall=gxGTPv2DeleteBearerSinceInstall, asmHTTP=asmHTTP, gxDropOutOfContxtUpdate=gxDropOutOfContxtUpdate, exchangeAgentTimeSinceLastMsg=exchangeAgentTimeSinceLastMsg, exchangeAgentQueueLen=exchangeAgentQueueLen, mgLSLogReceiveRate1Hour=mgLSLogReceiveRate1Hour, identityAwarenessUnSuccUserLoginKerberos=identityAwarenessUnSuccUserLoginKerberos, fwLocalLoggingWriteRate=fwLocalLoggingWriteRate, aviEngineName=aviEngineName, exchangeAgentsStatusEntry=exchangeAgentsStatusEntry, fwHmem64_block_size=fwHmem64_block_size, tunnelPeerObjName=tunnelPeerObjName, voltageSensorValue=voltageSensorValue, fanSpeedSensorType=fanSpeedSensorType, fwSS_smtp_accepted_sess=fwSS_smtp_accepted_sess, vdName=vdName, gxDropOutOfContxtDelete=gxDropOutOfContxtDelete, fwSS_ftp_passed_by_internal_error=fwSS_ftp_passed_by_internal_error, lsProdName=lsProdName, svnNetIfRXDrops=svnNetIfRXDrops, fwSS_POP3_passed_total=fwSS_POP3_passed_total, thresholdActiveEventState=thresholdActiveEventState, asmSeqval=asmSeqval, fwSS_POP3_auth_sess_max=fwSS_POP3_auth_sess_max, gxGTPv2DropMalformedCreateBearerReq=gxGTPv2DropMalformedCreateBearerReq, mglsGWState=mglsGWState, treatExtarctionStatusShortDesc=treatExtarctionStatusShortDesc, tempertureSensorUnit=tempertureSensorUnit, cpvIKETotalFailuresResp=cpvIKETotalFailuresResp, fwKmem_free_operations=fwKmem_free_operations, tunnelEntry=tunnelEntry, checkPointTE250=checkPointTE250, routingTable=routingTable, fwKernelBuild=fwKernelBuild, dlpTotalScans=dlpTotalScans, gxGTPv2DeleteInfo=gxGTPv2DeleteInfo, fwSS_ufp_is_alive=fwSS_ufp_is_alive, wamStatShortDescr=wamStatShortDescr, svnPlatformInfo=svnPlatformInfo, numOfIpSweep=numOfIpSweep, cpsemdDBCapacity=cpsemdDBCapacity, fwSS_ftp_passed_cnt=fwSS_ftp_passed_cnt, mgStatCode=mgStatCode, fwSS_POP3_blocked_by_internal_error=fwSS_POP3_blocked_by_internal_error, haProblemTable=haProblemTable, fwSS_http_tunneled_sess_curr=fwSS_http_tunneled_sess_curr, vsRoutingIndex=vsRoutingIndex, fwSS_smtp_passed_cnt=fwSS_smtp_passed_cnt, gxDropMalformedRespEcho=gxDropMalformedRespEcho, aviHTTPTopVirusesCnt=aviHTTPTopVirusesCnt, cpvHwAccelEspEncBytes=cpvHwAccelEspEncBytes, cpvIpsec=cpvIpsec, aviTopViruses=aviTopViruses, svnLogDaemon=svnLogDaemon, diskTime=diskTime, fwSS_POP3_max_avail_socket=fwSS_POP3_max_avail_socket, numOfCIFSworms=numOfCIFSworms, ufLastSigCheckTime=ufLastSigCheckTime, identityAwarenessLoggedInADQuery=identityAwarenessLoggedInADQuery, svnUTCTimeOffset=svnUTCTimeOffset, lsConnectedGatewaysTable=lsConnectedGatewaysTable, haProtoVersion=haProtoVersion, checkPointDLP_19571=checkPointDLP_19571, thresholdActiveEventName=thresholdActiveEventName, identityAwarenessADQueryStatusDomainIP=identityAwarenessADQueryStatusDomainIP, thresholdName=thresholdName, aviTopEverVirusesName=aviTopEverVirusesName, dtpsConnectedUsers=dtpsConnectedUsers, fwSS_smtp_blocked_by_internal_error=fwSS_smtp_blocked_by_internal_error, fwSS_http_ssl_encryp_sess_curr=fwSS_http_ssl_encryp_sess_curr, aviServicesSMTP=aviServicesSMTP, fwSS_telnet_sess_max=fwSS_telnet_sess_max, licensingImpact=licensingImpact, lsFwmIsAlive=lsFwmIsAlive, sxl=sxl, checkPointIP390=checkPointIP390, fwLSConnOverall=fwLSConnOverall, asmHttpP2PHeaderFilter=asmHttpP2PHeaderFilter, asmP2PSkypeCon=asmP2PSkypeCon, cpvIpsecEspEncPkts=cpvIpsecEspEncPkts, dtpsStatLongDescr=dtpsStatLongDescr, gxGTPv2DropPolicyDeleteBearer=gxGTPv2DropPolicyDeleteBearer, gxGTPv2CmdInfo=gxGTPv2CmdInfo, fwChains_alloc=fwChains_alloc, thresholdAlertCount=thresholdAlertCount, numOfP2PKazaaConAttempts=numOfP2PKazaaConAttempts, cpvMaxConncurAhSAsIn=cpvMaxConncurAhSAsIn, treatExtarctionSubscription=treatExtarctionSubscription, memDiskTransfers=memDiskTransfers, fwSS_POP3_passed_cnt=fwSS_POP3_passed_cnt, vsxStatusPolicyName=vsxStatusPolicyName, haClusterSyncIndex=haClusterSyncIndex, haClusterSyncNetMask=haClusterSyncNetMask, gxExpiredDelete=gxExpiredDelete, checkPoint3200=checkPoint3200, cpseadStateDescription=cpseadStateDescription, gxGTPv2DropMalformedEchoResp=gxGTPv2DropMalformedEchoResp, voltageSensorTable=voltageSensorTable, numOfCIFSNullSessions=numOfCIFSNullSessions, raidDiskEntry=raidDiskEntry, fwCookies_getfwCookies_total=fwCookies_getfwCookies_total, fwSS_POP3_outgoing_mail_max=fwSS_POP3_outgoing_mail_max, fwConnectionsStatConnectionsIcmp=fwConnectionsStatConnectionsIcmp, teStatusLongDesc=teStatusLongDesc, checkPoint5400=checkPoint5400, gxDropMs_MsGpdu=gxDropMs_MsGpdu, fwLogOut=fwLogOut, fwHmem64_maximum_bytes=fwHmem64_maximum_bytes, fwAcceptedPcktsRates=fwAcceptedPcktsRates, gxExpiredEcho=gxExpiredEcho, fwSS_POP3_auth_sess_count=fwSS_POP3_auth_sess_count, checkPoint12400=checkPoint12400, fwSXLGroup=fwSXLGroup, vsxCounters=vsxCounters, lsGWLogReceiveRate=lsGWLogReceiveRate, cpvIpsecNonCompressibleBytes=cpvIpsecNonCompressibleBytes, cpvIpsecNonCompressiblePkts=cpvIpsecNonCompressiblePkts, fwSS_telnet_time_stamp=fwSS_telnet_time_stamp, fgPendPcktsIn=fgPendPcktsIn, aviStatLongDescr=aviStatLongDescr, gxGTPv2DeleteBearerFailIndSinceInstall=gxGTPv2DeleteBearerFailIndSinceInstall, fwKmem_available_physical_mem=fwKmem_available_physical_mem, haProblemStatus=haProblemStatus, cpvDecPackets=cpvDecPackets, fwSS_http_blocked_by_AV_settings=fwSS_http_blocked_by_AV_settings, fwTrapPrefix=fwTrapPrefix, tunnelInterface=tunnelInterface, gxGTPv2DropMalformedCreateBearerResp=gxGTPv2DropMalformedCreateBearerResp, licensingAssetSupportLevel=licensingAssetSupportLevel, wamStatCode=wamStatCode)
mibBuilder.exportSymbols("CHECKPOINT-MIB", fwEvent=fwEvent, fwInspect_packets=fwInspect_packets, raidDiskSize=raidDiskSize, cpseadNumAnalyzedLogs=cpseadNumAnalyzedLogs, svnUpdatesInfoConnection=svnUpdatesInfoConnection, gxActv0v1PdnConns=gxActv0v1PdnConns, gxGTPv2UpdateInfo=gxGTPv2UpdateInfo, voipServicePack=voipServicePack, tempertureSensorValue=tempertureSensorValue, osVersionLevel=osVersionLevel, fwPeakNumConn=fwPeakNumConn, vsxStatus=vsxStatus, asmP2P=asmP2P, aviPOP3TopVirusesTable=aviPOP3TopVirusesTable, fwSS_ftp_ops_cvp_rej_sess=fwSS_ftp_ops_cvp_rej_sess, checkPoint21400=checkPoint21400, fwConnectionsStatConnectionsTcp=fwConnectionsStatConnectionsTcp, haShared=haShared, fwHmem64_maximum_pools=fwHmem64_maximum_pools, asmLayer4=asmLayer4, updatesRecommendedType=updatesRecommendedType, vsxStatusCPUUsagePerCPUEntry=vsxStatusCPUUsagePerCPUEntry, cpseadJobName=cpseadJobName, licensingBladeName=licensingBladeName, cpvIPsec=cpvIPsec, haClusterSyncEntry=haClusterSyncEntry, fanSpeedSensorName=fanSpeedSensorName, fwHmem_initial_allocated_pools=fwHmem_initial_allocated_pools, licensingUsedQuota=licensingUsedQuota, cpvStatistics=cpvStatistics, raInternalIpAddr=raInternalIpAddr, gxGTPv2CreateSessionSinceInstall=gxGTPv2CreateSessionSinceInstall, fwFilterName=fwFilterName, svnMem=svnMem, voipDOSSipRateLimitingTableNumDOSSipRequests=voipDOSSipRateLimitingTableNumDOSSipRequests, mgIndexerInfoReadLogsRate=mgIndexerInfoReadLogsRate, identityAwarenessADQueryStatusDomainName=identityAwarenessADQueryStatusDomainName, fwFrag_expired=fwFrag_expired, fwSS_smtp_blocked_by_size_limit=fwSS_smtp_blocked_by_size_limit, fwSS_ftp_blocked_by_size_limit=fwSS_ftp_blocked_by_size_limit, cpvSaDecrErr=cpvSaDecrErr, gxInfo=gxInfo, cpsemdNumEvents=cpsemdNumEvents, vsxStatusMemoryUsageEntry=vsxStatusMemoryUsageEntry, applicationControlStatusLongDesc=applicationControlStatusLongDesc, httpURLLengthViolation=httpURLLengthViolation, aviServices=aviServices, multiProcSystemTime=multiProcSystemTime, svnUpdatesInfoAvailableHotfixes=svnUpdatesInfoAvailableHotfixes, fwSS_http_socket_in_use_curr=fwSS_http_socket_in_use_curr, fwSS_POP3_blocked_by_size_limit=fwSS_POP3_blocked_by_size_limit, multiDiskUsed=multiDiskUsed, fwSS_rlogin_accepted_sess=fwSS_rlogin_accepted_sess, svnSysStartTime=svnSysStartTime, cpvIpsecEspEncBytes=cpvIpsecEspEncBytes, msSpamControlsRBL=msSpamControlsRBL, identityAwarenessDistributedEnvTableStatus=identityAwarenessDistributedEnvTableStatus, voip=voip, raTunnelEncAlgorithm=raTunnelEncAlgorithm, fwHmem=fwHmem, aviSMTPTopVirusesName=aviSMTPTopVirusesName, fwSS_rlogin_socket_in_use_count=fwSS_rlogin_socket_in_use_count, cpvIpsecAhDecPkts=cpvIpsecAhDecPkts, teSubscriptionExpDate=teSubscriptionExpDate, checkPointIP280=checkPointIP280, te=te, voipCACConcurrentCallsConfThreshold=voipCACConcurrentCallsConfThreshold, smallPMTUValueOfMinimalMTUsize=smallPMTUValueOfMinimalMTUsize, svnNetIfRXErrors=svnNetIfRXErrors, multiDiskTable=multiDiskTable, fwLSConn=fwLSConn, fwHmem64_requested_bytes=fwHmem64_requested_bytes, cpvErrIn=cpvErrIn, aviPOP3State=aviPOP3State, lsApplicationType=lsApplicationType, tunnelState=tunnelState, dlpSMTPScans=dlpSMTPScans, cpseadFileCurrentPosition=cpseadFileCurrentPosition, fwSS_total_blocked_by_archive_limit=fwSS_total_blocked_by_archive_limit, aviTopEverVirusesCnt=aviTopEverVirusesCnt, haClusterIpMemberNetMask=haClusterIpMemberNetMask, fwSS_rlogin_port=fwSS_rlogin_port, vsRoutingGateway=vsRoutingGateway, fwSS_ftp_ops_cvp_sess_max=fwSS_ftp_ops_cvp_sess_max, fwConnectionsStatConnections=fwConnectionsStatConnections, teSubscriptionDesc=teSubscriptionDesc, ufStatShortDescr=ufStatShortDescr, fwSS_ufp=fwSS_ufp, gxBadCauseCreate=gxBadCauseCreate, cpvIpsecEspDecPkts=cpvIpsecEspDecPkts, fwSS_http_transp_sess_curr=fwSS_http_transp_sess_curr, mgClientDbLock=mgClientDbLock, haProblemIndex=haProblemIndex, fwSS_smtp_mail_curr=fwSS_smtp_mail_curr, antiVirusSubscriptionDesc=antiVirusSubscriptionDesc, fwSS_http_max_avail_socket=fwSS_http_max_avail_socket, lsIndexerInfoReadLogsRatePeak=lsIndexerInfoReadLogsRatePeak, fwSS_http_passed_total=fwSS_http_passed_total, thresholdErrorsTable=thresholdErrorsTable, fwLogged=fwLogged, amwStatusCode=amwStatusCode, cpvIPsecNICTotalDownLoadedSAs=cpvIPsecNICTotalDownLoadedSAs, dtpsStatShortDescr=dtpsStatShortDescr, fwSS_ftp_blocked_by_archive_limit=fwSS_ftp_blocked_by_archive_limit, checkPoint13800=checkPoint13800, mgIsLicenseViolation=mgIsLicenseViolation, fwHmem64_bytes_peak=fwHmem64_bytes_peak, haIfName=haIfName, cpvIKEMaxConncurRespSAs=cpvIKEMaxConncurRespSAs, aviPOP3TopVirusesName=aviPOP3TopVirusesName, msStatCode=msStatCode, fwLSConnEntry=fwLSConnEntry, thresholdActiveEventsEntry=thresholdActiveEventsEntry, vpn=vpn, vsxStatusVSId=vsxStatusVSId, dlpStatusShortDesc=dlpStatusShortDesc, raUsersEntry=raUsersEntry, fwPolicyName=fwPolicyName, svnVsxInfo=svnVsxInfo, cpseadJobIsOnline=cpseadJobIsOnline, msExpirationDate=msExpirationDate, wamPolicyName=wamPolicyName, fwSS_http_blocked_by_URL_block_list=fwSS_http_blocked_by_URL_block_list, identityAwarenessStatusShortDesc=identityAwarenessStatusShortDesc, checkPoint23800=checkPoint23800, advancedUrlFilteringUpdateDesc=advancedUrlFilteringUpdateDesc, lsLogReceiveRatePeak=lsLogReceiveRatePeak, fwSS_http_tunneled_sess_count=fwSS_http_tunneled_sess_count, ufTopBlockedUserCnt=ufTopBlockedUserCnt, svnUpdatesInfoAvailableRecommended=svnUpdatesInfoAvailableRecommended, gxGTPv2ExpiredCreateBearer=gxGTPv2ExpiredCreateBearer, fwSS_http_passed_by_internal_error=fwSS_http_passed_by_internal_error, raidDiskFlags=raidDiskFlags, checkPointSmart_1205=checkPointSmart_1205, svnRoutingModify=svnRoutingModify, checkPoint12200=checkPoint12200, cpvHwAccelDriverMajorVer=cpvHwAccelDriverMajorVer, checkPointDLP_12571=checkPointDLP_12571, fwDropPcktsIn64=fwDropPcktsIn64, aviPOP3LastVirusName=aviPOP3LastVirusName, osMajorVer=osMajorVer, multiProcTable=multiProcTable, gxGTPv2EchoSinceInstall=gxGTPv2EchoSinceInstall, thresholds=thresholds, fwMinor=fwMinor, dlpFtpIncidents=dlpFtpIncidents, haState=haState, haIfTable=haIfTable, fwSS_POP3_sess_count=fwSS_POP3_sess_count, msSpamNumScannedEmails=msSpamNumScannedEmails, gxBuild=gxBuild, fgRateLimitIn=fgRateLimitIn, vsxStatusCPUUsage1min=vsxStatusCPUUsage1min, applicationControlUpdateDesc=applicationControlUpdateDesc, fwSS_http=fwSS_http, fwSS_smtp_mail_max=fwSS_smtp_mail_max, aviSignatureName=aviSignatureName, gxUpdateInfo=gxUpdateInfo, fwRejectedBytesTotal=fwRejectedBytesTotal, gxDropAnti_spoofingGpdu=gxDropAnti_spoofingGpdu, vsRoutingMask=vsRoutingMask, vsxStatusCPUUsage1hr=vsxStatusCPUUsage1hr, identityAwarenessIdentityCollectorCiscoISE=identityAwarenessIdentityCollectorCiscoISE, checkPoint21600=checkPoint21600, cpvFwzDecErrs=cpvFwzDecErrs, identityAwarenessRemoteAccess=identityAwarenessRemoteAccess, fwAcceptedBytesRates=fwAcceptedBytesRates, checkPointUTM_1570=checkPointUTM_1570, ufTopBlockedCatCnt=ufTopBlockedCatCnt, fwSS_POP3_mail_max=fwSS_POP3_mail_max, fwHmem_initial_allocated_blocks=fwHmem_initial_allocated_blocks, fwSS_POP3_blocked_by_AV_settings=fwSS_POP3_blocked_by_AV_settings, fwSS_http_proxied_sess_count=fwSS_http_proxied_sess_count, gxGTPv2ActDataBearers=gxGTPv2ActDataBearers, raidDiskNumber=raidDiskNumber, gxGTPv2DropMalformedUpdateBearerReq=gxGTPv2DropMalformedUpdateBearerReq, memTotalReal64=memTotalReal64, fwSS_smtp_blocked_by_file_type=fwSS_smtp_blocked_by_file_type, advancedUrlFilteringVersion=advancedUrlFilteringVersion, cpvFwzErrors=cpvFwzErrors, aviSMTPState=aviSMTPState, voipDOSSipNetworkReqCurrentVal=voipDOSSipNetworkReqCurrentVal, cpseadFileName=cpseadFileName, voipMajorVersion=voipMajorVersion, cpseadNoFreeDiskSpace=cpseadNoFreeDiskSpace, svnRouteModMask=svnRouteModMask, voipDOSSipRateLimitingTable=voipDOSSipRateLimitingTable, thresholdErrorTime=thresholdErrorTime)
