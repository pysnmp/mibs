#
# PySNMP MIB module CTRON-ETHERNET-PARAMETERS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-ETHERNET-PARAMETERS-MIB
# Produced by pysmi-1.1.12 at Fri Jul 19 09:44:17 2024
# On host fv-az1778-45 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ctIfPortIfNumber, ctIfPortPortNumber = mibBuilder.importSymbols("CTIF-EXT-MIB", "ctIfPortIfNumber", "ctIfPortPortNumber")
ctEthernetCtlParameters, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctEthernetCtlParameters")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, ModuleIdentity, Gauge32, Counter32, NotificationType, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, IpAddress, Bits, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "Gauge32", "Counter32", "NotificationType", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "IpAddress", "Bits", "Integer32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ctAutoNegCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 1))
ctAutoNegCtlTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 1, 1), )
if mibBuilder.loadTexts: ctAutoNegCtlTable.setStatus('mandatory')
ctAutoNegCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 1, 1, 1), ).setIndexNames((0, "CTIF-EXT-MIB", "ctIfPortIfNumber"), (0, "CTIF-EXT-MIB", "ctIfPortPortNumber"))
if mibBuilder.loadTexts: ctAutoNegCtlEntry.setStatus('mandatory')
ctAutoNegAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAutoNegAdminStatus.setStatus('mandatory')
ctAutoNegRemoteSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("detected", 1), ("notdetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAutoNegRemoteSignalling.setStatus('mandatory')
ctAutoNegAutoConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("configuring", 2), ("complete", 3), ("disabled", 4), ("paralleldetectfailed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAutoNegAutoConfig.setStatus('mandatory')
ctAutoNegLocalTechnologyAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAutoNegLocalTechnologyAbility.setStatus('mandatory')
ctAutoNegAdvertisedTechnologyAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAutoNegAdvertisedTechnologyAbility.setStatus('mandatory')
ctAutoNegReceivedTechnologyAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAutoNegReceivedTechnologyAbility.setStatus('mandatory')
ctFlowControl = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 2))
ctFlowCtlTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 2, 1), )
if mibBuilder.loadTexts: ctFlowCtlTable.setStatus('mandatory')
ctFlowCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 2, 1, 1), ).setIndexNames((0, "CTIF-EXT-MIB", "ctIfPortIfNumber"), (0, "CTIF-EXT-MIB", "ctIfPortPortNumber"))
if mibBuilder.loadTexts: ctFlowCtlEntry.setStatus('mandatory')
ctFlowCtlHalfDuplexAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctFlowCtlHalfDuplexAdminStatus.setStatus('mandatory')
ctFlowCtlHalfDuplexOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notsupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctFlowCtlHalfDuplexOperStatus.setStatus('mandatory')
ctEtherSupportedPauseModes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctEtherSupportedPauseModes.setStatus('mandatory')
ctFlowCtlPauseAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("symmetric", 1), ("asymmetricRx", 2), ("asymmetricTx", 3), ("disabled", 4), ("autonegotiate", 5))).clone('autonegotiate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctFlowCtlPauseAdminStatus.setStatus('mandatory')
ctFlowCtlPauseOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("symmetric", 1), ("asymmetricRx", 2), ("asymmetricTx", 3), ("disabled", 4), ("unknown", 5), ("notsupported", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctFlowCtlPauseOperStatus.setStatus('mandatory')
ctFlowCtlPauseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctFlowCtlPauseTimer.setStatus('mandatory')
ctFlowCtlRxPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctFlowCtlRxPauseFrames.setStatus('mandatory')
ctFlowCtlTxPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctFlowCtlTxPauseFrames.setStatus('mandatory')
ctEtherManualConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 3))
ctEtherManualConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 3, 1), )
if mibBuilder.loadTexts: ctEtherManualConfigTable.setStatus('mandatory')
ctEtherManualConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 3, 1, 1), ).setIndexNames((0, "CTIF-EXT-MIB", "ctIfPortIfNumber"), (0, "CTIF-EXT-MIB", "ctIfPortPortNumber"))
if mibBuilder.loadTexts: ctEtherManualConfigEntry.setStatus('mandatory')
ctEtherSupportedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctEtherSupportedSpeed.setStatus('mandatory')
ctEtherSpeedAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("tenmegabit", 2), ("hundredmegabit", 3), ("gigabit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctEtherSpeedAdminStatus.setStatus('mandatory')
ctEtherSpeedOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("tenmegabit", 2), ("hundredmegabit", 3), ("gigabit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctEtherSpeedOperStatus.setStatus('mandatory')
ctEtherSupportedDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("halfduplex", 1), ("fullduplex", 2), ("halfandfullduplex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctEtherSupportedDuplex.setStatus('mandatory')
ctEtherDuplexAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("halfduplex", 2), ("fullduplex", 3))).clone('halfduplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctEtherDuplexAdminStatus.setStatus('mandatory')
ctEtherDuplexOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 4, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("halfduplex", 2), ("fullduplex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctEtherDuplexOperStatus.setStatus('mandatory')
mibBuilder.exportSymbols("CTRON-ETHERNET-PARAMETERS-MIB", ctFlowControl=ctFlowControl, ctAutoNegCtlEntry=ctAutoNegCtlEntry, ctFlowCtlHalfDuplexOperStatus=ctFlowCtlHalfDuplexOperStatus, ctEtherManualConfigEntry=ctEtherManualConfigEntry, ctAutoNegAdvertisedTechnologyAbility=ctAutoNegAdvertisedTechnologyAbility, ctAutoNegCtl=ctAutoNegCtl, ctEtherDuplexOperStatus=ctEtherDuplexOperStatus, ctFlowCtlTxPauseFrames=ctFlowCtlTxPauseFrames, ctEtherSpeedOperStatus=ctEtherSpeedOperStatus, ctFlowCtlRxPauseFrames=ctFlowCtlRxPauseFrames, ctAutoNegReceivedTechnologyAbility=ctAutoNegReceivedTechnologyAbility, ctAutoNegLocalTechnologyAbility=ctAutoNegLocalTechnologyAbility, ctEtherManualConfig=ctEtherManualConfig, ctAutoNegRemoteSignalling=ctAutoNegRemoteSignalling, ctAutoNegCtlTable=ctAutoNegCtlTable, ctEtherDuplexAdminStatus=ctEtherDuplexAdminStatus, ctEtherSupportedPauseModes=ctEtherSupportedPauseModes, ctEtherManualConfigTable=ctEtherManualConfigTable, ctFlowCtlPauseAdminStatus=ctFlowCtlPauseAdminStatus, ctAutoNegAdminStatus=ctAutoNegAdminStatus, ctFlowCtlPauseTimer=ctFlowCtlPauseTimer, ctFlowCtlEntry=ctFlowCtlEntry, ctEtherSpeedAdminStatus=ctEtherSpeedAdminStatus, ctEtherSupportedDuplex=ctEtherSupportedDuplex, ctFlowCtlPauseOperStatus=ctFlowCtlPauseOperStatus, ctFlowCtlHalfDuplexAdminStatus=ctFlowCtlHalfDuplexAdminStatus, ctEtherSupportedSpeed=ctEtherSupportedSpeed, ctAutoNegAutoConfig=ctAutoNegAutoConfig, ctFlowCtlTable=ctFlowCtlTable)
