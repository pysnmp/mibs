#
# PySNMP MIB module CTFPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTFPS-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 11:39:47 2024
# On host fv-az842-370 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ctFPS, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctFPS")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter64, Integer32, IpAddress, Bits, Counter32, Unsigned32, ModuleIdentity, ObjectIdentity, MibIdentifier, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "Integer32", "IpAddress", "Bits", "Counter32", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
fpsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 1))
fpsSystemSlotNum = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsSystemSlotNum.setStatus('mandatory')
fpsSystemMode = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridge", 1), ("switch", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsSystemMode.setStatus('mandatory')
fpsMaxPktRam = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsMaxPktRam.setStatus('mandatory')
fpsFreePktRam = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsFreePktRam.setStatus('mandatory')
fpsOperTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsOperTime.setStatus('mandatory')
fpsInPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsInPkts.setStatus('mandatory')
fpsOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsOutPkts.setStatus('mandatory')
fpsInOctets = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsInOctets.setStatus('mandatory')
fpsOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsOutOctets.setStatus('mandatory')
fpsPort = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2))
fpsActivePorts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsActivePorts.setStatus('mandatory')
fpsMaxPortNum = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsMaxPortNum.setStatus('mandatory')
fpsPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3), )
if mibBuilder.loadTexts: fpsPortTable.setStatus('mandatory')
fpsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1), ).setIndexNames((0, "CTFPS-MIB", "fpsPortNum"))
if mibBuilder.loadTexts: fpsPortEntry.setStatus('mandatory')
fpsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortNum.setStatus('mandatory')
fpsPortIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortIfNum.setStatus('mandatory')
fpsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ether", 1), ("tokenRing", 2), ("inb", 3), ("fddi", 4), ("host", 5), ("atm", 6), ("wan", 7), ("other", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortType.setStatus('mandatory')
fpsPortClusterNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortClusterNum.setStatus('mandatory')
fpsPortTotalAvailQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortTotalAvailQueDepth.setStatus('mandatory')
fpsPortMaxQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortMaxQueDepth.setStatus('mandatory')
fpsPortCurrentQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortCurrentQueDepth.setStatus('mandatory')
fpsPortBandwidthRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortBandwidthRequested.setStatus('mandatory')
fpsPortBandwidthAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortBandwidthAllocated.setStatus('mandatory')
fpsPortXmitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortXmitStatus.setStatus('mandatory')
fpsPortFwdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortFwdStatus.setStatus('mandatory')
fpsPortLearningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortLearningStatus.setStatus('mandatory')
fpsPortUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortUnknownStatus.setStatus('mandatory')
fpsPortBroadcastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortBroadcastStatus.setStatus('mandatory')
fpsPortViolationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortViolationStatus.setStatus('mandatory')
fpsPortCopyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortCopyStatus.setStatus('mandatory')
fpsPortStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortStatsStatus.setStatus('mandatory')
fpsPortSpecialPortsSMT = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortSpecialPortsSMT.setStatus('mandatory')
fpsPortSpecialPortsHost = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortSpecialPortsHost.setStatus('mandatory')
fpsPortSpecialPortsError = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortSpecialPortsError.setStatus('mandatory')
fpsCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 3))
fpsActiveClusters = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsActiveClusters.setStatus('mandatory')
fpsClusterTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 3, 2), )
if mibBuilder.loadTexts: fpsClusterTable.setStatus('mandatory')
fpsClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 3, 2, 1), ).setIndexNames((0, "CTFPS-MIB", "fpsClusterNumber"))
if mibBuilder.loadTexts: fpsClusterEntry.setStatus('mandatory')
fpsClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsClusterNumber.setStatus('mandatory')
fpsClusterType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ethernet", 1), ("token-ring", 2), ("inb", 3), ("fnb", 4), ("host", 5), ("atm", 6), ("wan", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsClusterType.setStatus('mandatory')
fpsClusterRoundRobin = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpsClusterRoundRobin.setStatus('mandatory')
fpsPortsPerCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortsPerCluster.setStatus('mandatory')
fpsDMAF = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 4))
dmafBandWidth3SecUtil = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmafBandWidth3SecUtil.setStatus('mandatory')
fpsBAF = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 5))
bafEntryCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bafEntryCount.setStatus('mandatory')
bafMaxEntry = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bafMaxEntry.setStatus('mandatory')
baf3SecUtil = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 5, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baf3SecUtil.setStatus('mandatory')
mibBuilder.exportSymbols("CTFPS-MIB", fpsMaxPortNum=fpsMaxPortNum, fpsClusterType=fpsClusterType, fpsClusterEntry=fpsClusterEntry, fpsPortType=fpsPortType, fpsMaxPktRam=fpsMaxPktRam, fpsSystemMode=fpsSystemMode, fpsClusterRoundRobin=fpsClusterRoundRobin, fpsBAF=fpsBAF, fpsClusterNumber=fpsClusterNumber, fpsActivePorts=fpsActivePorts, fpsSystem=fpsSystem, fpsInOctets=fpsInOctets, fpsPortCopyStatus=fpsPortCopyStatus, fpsPortStatsStatus=fpsPortStatsStatus, fpsCluster=fpsCluster, fpsPortSpecialPortsError=fpsPortSpecialPortsError, bafEntryCount=bafEntryCount, fpsSystemSlotNum=fpsSystemSlotNum, fpsPortViolationStatus=fpsPortViolationStatus, fpsPortEntry=fpsPortEntry, fpsOutOctets=fpsOutOctets, fpsOutPkts=fpsOutPkts, fpsPortIfNum=fpsPortIfNum, fpsPortLearningStatus=fpsPortLearningStatus, fpsPortSpecialPortsHost=fpsPortSpecialPortsHost, fpsPortTable=fpsPortTable, fpsPortTotalAvailQueDepth=fpsPortTotalAvailQueDepth, fpsPortMaxQueDepth=fpsPortMaxQueDepth, fpsFreePktRam=fpsFreePktRam, fpsOperTime=fpsOperTime, fpsPortBandwidthAllocated=fpsPortBandwidthAllocated, fpsPortClusterNum=fpsPortClusterNum, fpsPortXmitStatus=fpsPortXmitStatus, fpsPortBroadcastStatus=fpsPortBroadcastStatus, bafMaxEntry=bafMaxEntry, fpsPortBandwidthRequested=fpsPortBandwidthRequested, fpsPortFwdStatus=fpsPortFwdStatus, dmafBandWidth3SecUtil=dmafBandWidth3SecUtil, fpsActiveClusters=fpsActiveClusters, fpsPortCurrentQueDepth=fpsPortCurrentQueDepth, fpsDMAF=fpsDMAF, fpsClusterTable=fpsClusterTable, fpsPortNum=fpsPortNum, fpsPortSpecialPortsSMT=fpsPortSpecialPortsSMT, fpsPortsPerCluster=fpsPortsPerCluster, fpsInPkts=fpsInPkts, fpsPort=fpsPort, fpsPortUnknownStatus=fpsPortUnknownStatus, baf3SecUtil=baf3SecUtil)
