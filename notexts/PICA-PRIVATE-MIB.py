#
# PySNMP MIB module PICA-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/picos/PICA-PRIVATE-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 13:01:12 2024
# On host fv-az1215-438 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
snmpTraps, = mibBuilder.importSymbols("SNMPv2-MIB", "snmpTraps")
enterprises, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, snmpModules, Counter32, NotificationType, ModuleIdentity, MibIdentifier, Gauge32, mib_2, Counter64, TimeTicks, iso, ObjectIdentity, Unsigned32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "snmpModules", "Counter32", "NotificationType", "ModuleIdentity", "MibIdentifier", "Gauge32", "mib-2", "Counter64", "TimeTicks", "iso", "ObjectIdentity", "Unsigned32", "Bits")
TimeStamp, TruthValue, PhysAddress, DisplayString, AutonomousType, RowStatus, TextualConvention, TestAndIncr = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TruthValue", "PhysAddress", "DisplayString", "AutonomousType", "RowStatus", "TextualConvention", "TestAndIncr")
picaPrivateMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 35098))
picaPrivateMib.setRevisions(('2011-04-28 00:00',))
if mibBuilder.loadTexts: picaPrivateMib.setLastUpdated('201104280000Z')
if mibBuilder.loadTexts: picaPrivateMib.setOrganization('Pica8 Inc.')
hostStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 35098, 1))
cpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 35098, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUsage.setStatus('current')
totalPhyMemory = MibScalar((1, 3, 6, 1, 4, 1, 35098, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPhyMemory.setStatus('current')
usedPhyMemory = MibScalar((1, 3, 6, 1, 4, 1, 35098, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usedPhyMemory.setStatus('current')
freePhyMemory = MibScalar((1, 3, 6, 1, 4, 1, 35098, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freePhyMemory.setStatus('current')
switchTemperature = MibScalar((1, 3, 6, 1, 4, 1, 35098, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchTemperature.setStatus('current')
cpuTemperature = MibScalar((1, 3, 6, 1, 4, 1, 35098, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTemperature.setStatus('current')
switchChipTemperature = MibScalar((1, 3, 6, 1, 4, 1, 35098, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchChipTemperature.setStatus('current')
switchFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 35098, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchFanSpeed.setStatus('current')
switchPWM = MibScalar((1, 3, 6, 1, 4, 1, 35098, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPWM.setStatus('current')
sfpstatusTable = MibTable((1, 3, 6, 1, 4, 1, 35098, 1, 10), )
if mibBuilder.loadTexts: sfpstatusTable.setStatus('current')
sfpstatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35098, 1, 10, 1), ).setIndexNames((0, "PICA-PRIVATE-MIB", "sfpIndex"))
if mibBuilder.loadTexts: sfpstatusEntry.setStatus('current')
sfpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpIndex.setStatus('current')
sfpVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorName.setStatus('current')
sfpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpSerialNumber.setStatus('current')
sfpTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTemp.setStatus('current')
sfpVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVoltage.setStatus('current')
sfpBias = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpBias.setStatus('current')
sfpTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 10, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTxPower.setStatus('current')
sfpRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 10, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpRxPower.setStatus('current')
sfpType = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 10, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpType.setStatus('current')
rpsustatusTable = MibTable((1, 3, 6, 1, 4, 1, 35098, 1, 11), )
if mibBuilder.loadTexts: rpsustatusTable.setStatus('current')
rpsustatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35098, 1, 11, 1), ).setIndexNames((0, "PICA-PRIVATE-MIB", "rpsuIndex"))
if mibBuilder.loadTexts: rpsustatusEntry.setStatus('current')
rpsuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpsuIndex.setStatus('current')
serialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
rpsuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpsuStatus.setStatus('current')
rpsuTemprature = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpsuTemprature.setStatus('current')
rpsuFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpsuFanSpeed.setStatus('current')
rpsuPWM = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpsuPWM.setStatus('current')
switchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 35098, 2))
tftpConfigFilePath = MibScalar((1, 3, 6, 1, 4, 1, 35098, 2, 0), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpConfigFilePath.setStatus('current')
tftpBatchFilePath = MibScalar((1, 3, 6, 1, 4, 1, 35098, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpBatchFilePath.setStatus('current')
picaConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 35098, 20))
picaGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 35098, 20, 1))
picaCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 35098, 20, 2))
picaBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35098, 20, 1, 1)).setObjects(("PICA-PRIVATE-MIB", "cpuUsage"), ("PICA-PRIVATE-MIB", "totalPhyMemory"), ("PICA-PRIVATE-MIB", "usedPhyMemory"), ("PICA-PRIVATE-MIB", "freePhyMemory"), ("PICA-PRIVATE-MIB", "switchTemperature"), ("PICA-PRIVATE-MIB", "cpuTemperature"), ("PICA-PRIVATE-MIB", "switchChipTemperature"), ("PICA-PRIVATE-MIB", "switchFanSpeed"), ("PICA-PRIVATE-MIB", "switchPWM"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    picaBasicGroup = picaBasicGroup.setStatus('current')
picasfpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35098, 20, 1, 2)).setObjects(("PICA-PRIVATE-MIB", "sfpIndex"), ("PICA-PRIVATE-MIB", "sfpVendorName"), ("PICA-PRIVATE-MIB", "sfpSerialNumber"), ("PICA-PRIVATE-MIB", "sfpTemp"), ("PICA-PRIVATE-MIB", "sfpVoltage"), ("PICA-PRIVATE-MIB", "sfpBias"), ("PICA-PRIVATE-MIB", "sfpTxPower"), ("PICA-PRIVATE-MIB", "sfpRxPower"), ("PICA-PRIVATE-MIB", "sfpType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    picasfpGroup = picasfpGroup.setStatus('current')
picarpsuGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35098, 20, 1, 3)).setObjects(("PICA-PRIVATE-MIB", "rpsuIndex"), ("PICA-PRIVATE-MIB", "serialNumber"), ("PICA-PRIVATE-MIB", "rpsuStatus"), ("PICA-PRIVATE-MIB", "rpsuTemprature"), ("PICA-PRIVATE-MIB", "rpsuFanSpeed"), ("PICA-PRIVATE-MIB", "rpsuPWM"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    picarpsuGroup = picarpsuGroup.setStatus('current')
picaConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35098, 20, 1, 4)).setObjects(("PICA-PRIVATE-MIB", "tftpConfigFilePath"), ("PICA-PRIVATE-MIB", "tftpBatchFilePath"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    picaConfigGroup = picaConfigGroup.setStatus('current')
picaCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 35098, 20, 2, 1)).setObjects(("PICA-PRIVATE-MIB", "picaBasicGroup"), ("PICA-PRIVATE-MIB", "picasfpGroup"), ("PICA-PRIVATE-MIB", "picarpsuGroup"), ("PICA-PRIVATE-MIB", "picaConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    picaCompliance = picaCompliance.setStatus('current')
mibBuilder.exportSymbols("PICA-PRIVATE-MIB", tftpConfigFilePath=tftpConfigFilePath, switchTemperature=switchTemperature, picaConformance=picaConformance, sfpIndex=sfpIndex, picaConfigGroup=picaConfigGroup, picarpsuGroup=picarpsuGroup, cpuUsage=cpuUsage, rpsuIndex=rpsuIndex, rpsuStatus=rpsuStatus, switchPWM=switchPWM, tftpBatchFilePath=tftpBatchFilePath, cpuTemperature=cpuTemperature, totalPhyMemory=totalPhyMemory, sfpSerialNumber=sfpSerialNumber, picaGroups=picaGroups, sfpRxPower=sfpRxPower, rpsustatusEntry=rpsustatusEntry, sfpTxPower=sfpTxPower, serialNumber=serialNumber, picasfpGroup=picasfpGroup, sfpType=sfpType, switchFanSpeed=switchFanSpeed, switchChipTemperature=switchChipTemperature, rpsuFanSpeed=rpsuFanSpeed, sfpVendorName=sfpVendorName, usedPhyMemory=usedPhyMemory, rpsuPWM=rpsuPWM, hostStatusGroup=hostStatusGroup, sfpstatusEntry=sfpstatusEntry, picaCompliances=picaCompliances, switchConfigGroup=switchConfigGroup, rpsuTemprature=rpsuTemprature, sfpTemp=sfpTemp, sfpVoltage=sfpVoltage, PYSNMP_MODULE_ID=picaPrivateMib, sfpstatusTable=sfpstatusTable, picaCompliance=picaCompliance, sfpBias=sfpBias, rpsustatusTable=rpsustatusTable, freePhyMemory=freePhyMemory, picaPrivateMib=picaPrivateMib, picaBasicGroup=picaBasicGroup)
