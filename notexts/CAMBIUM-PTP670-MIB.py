#
# PySNMP MIB module CAMBIUM-PTP670-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/cambium/CAMBIUM-PTP670-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 11:43:31 2024
# On host fv-az1427-842 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
iso, IpAddress, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, ObjectIdentity, ModuleIdentity, Gauge32, TimeTicks, Bits, Unsigned32, Counter32, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "ObjectIdentity", "ModuleIdentity", "Gauge32", "TimeTicks", "Bits", "Unsigned32", "Counter32", "MibIdentifier", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cambium = ModuleIdentity((1, 3, 6, 1, 4, 1, 17713))
cambium.setRevisions(('2018-09-04 23:49', '2018-05-25 18:14', '2017-11-24 09:19', '2017-09-06 16:59', '2017-06-15 18:31', '2017-02-24 11:59',))
if mibBuilder.loadTexts: cambium.setLastUpdated('201809042349Z')
if mibBuilder.loadTexts: cambium.setOrganization('Cambium Networks Ltd.')
ptp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 1))
ptmp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 2))
ptp670 = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11))
dfs = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 3))
bridge = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 4))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 5))
ethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 6))
tDM = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 7))
license = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 8))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 9))
phyControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 10))
phyStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 12))
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 13))
apc = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 14))
smtp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 15))
snmpControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 16))
sntp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 17))
reset = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 18))
versions = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 19))
pubStats = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 20))
encryption = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 22))
tDDControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 23))
aAAControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 25))
syslogControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 24))
routerProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 26))
cableDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 27))
unitIdentification = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 28))
authorizationControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 29))
dNS = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 30))
supplementary = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 96))
ptpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 98))
ptpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 99))
ptpTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0))
ptpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 17713, 11, 97)).setObjects(("CAMBIUM-PTP670-MIB", "dfsGroup"), ("CAMBIUM-PTP670-MIB", "bridgeGroup"), ("CAMBIUM-PTP670-MIB", "configurationGroup"), ("CAMBIUM-PTP670-MIB", "ethernetGroup"), ("CAMBIUM-PTP670-MIB", "tDMGroup"), ("CAMBIUM-PTP670-MIB", "licenseGroup"), ("CAMBIUM-PTP670-MIB", "managementGroup"), ("CAMBIUM-PTP670-MIB", "phyControlGroup"), ("CAMBIUM-PTP670-MIB", "phyStatusGroup"), ("CAMBIUM-PTP670-MIB", "alarmsGroup"), ("CAMBIUM-PTP670-MIB", "apcGroup"), ("CAMBIUM-PTP670-MIB", "smtpGroup"), ("CAMBIUM-PTP670-MIB", "snmpControlGroup"), ("CAMBIUM-PTP670-MIB", "sntpGroup"), ("CAMBIUM-PTP670-MIB", "resetGroup"), ("CAMBIUM-PTP670-MIB", "versionsGroup"), ("CAMBIUM-PTP670-MIB", "pubStatsGroup"), ("CAMBIUM-PTP670-MIB", "encryptionGroup"), ("CAMBIUM-PTP670-MIB", "tDDControlGroup"), ("CAMBIUM-PTP670-MIB", "aAAControlGroup"), ("CAMBIUM-PTP670-MIB", "syslogControlGroup"), ("CAMBIUM-PTP670-MIB", "routerProtocolsGroup"), ("CAMBIUM-PTP670-MIB", "cableDiagnosticsGroup"), ("CAMBIUM-PTP670-MIB", "unitIdentificationGroup"), ("CAMBIUM-PTP670-MIB", "authorizationControlGroup"), ("CAMBIUM-PTP670-MIB", "dNSGroup"), ("CAMBIUM-PTP670-MIB", "supplementaryGroup"), ("CAMBIUM-PTP670-MIB", "notificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ptpCompliance = ptpCompliance.setStatus('current')
dfsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 3)).setObjects(("CAMBIUM-PTP670-MIB", "dfsTableNumber"), ("CAMBIUM-PTP670-MIB", "extendedSpectrumScanning"), ("CAMBIUM-PTP670-MIB", "dfsMeans"), ("CAMBIUM-PTP670-MIB", "dfsNineNinePointNinePercentiles"), ("CAMBIUM-PTP670-MIB", "dfsPeaks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfsGroup = dfsGroup.setStatus('current')
bridgeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 4)).setObjects(("CAMBIUM-PTP670-MIB", "localPacketFiltering"), ("CAMBIUM-PTP670-MIB", "packetsToInternalStack"), ("CAMBIUM-PTP670-MIB", "packetsFromInternalStack"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeGroup = bridgeGroup.setStatus('current')
configurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 5)).setObjects(("CAMBIUM-PTP670-MIB", "iPv4Address"), ("CAMBIUM-PTP670-MIB", "subnetMask"), ("CAMBIUM-PTP670-MIB", "gatewayIPAddress"), ("CAMBIUM-PTP670-MIB", "targetMACAddress"), ("CAMBIUM-PTP670-MIB", "masterSlaveMode"), ("CAMBIUM-PTP670-MIB", "maximumTransmitPower"), ("CAMBIUM-PTP670-MIB", "antennaGain"), ("CAMBIUM-PTP670-MIB", "cableLoss"), ("CAMBIUM-PTP670-MIB", "eIRP"), ("CAMBIUM-PTP670-MIB", "channelBandwidth"), ("CAMBIUM-PTP670-MIB", "linkName"), ("CAMBIUM-PTP670-MIB", "siteName"), ("CAMBIUM-PTP670-MIB", "accessMethod"), ("CAMBIUM-PTP670-MIB", "groupID"), ("CAMBIUM-PTP670-MIB", "iPv6Address"), ("CAMBIUM-PTP670-MIB", "iPVersion"), ("CAMBIUM-PTP670-MIB", "iPv6AutoConfiguredLinkLocalAddress"), ("CAMBIUM-PTP670-MIB", "iPv6PrefixLength"), ("CAMBIUM-PTP670-MIB", "iPv6GatewayAddress"), ("CAMBIUM-PTP670-MIB", "remoteInternetAddressTypeLinked"), ("CAMBIUM-PTP670-MIB", "remoteInternetAddressLinked"), ("CAMBIUM-PTP670-MIB", "subbandLowestFrequency"), ("CAMBIUM-PTP670-MIB", "subbandHighestFrequency"), ("CAMBIUM-PTP670-MIB", "enableTransmission"), ("CAMBIUM-PTP670-MIB", "antennaSelection"), ("CAMBIUM-PTP670-MIB", "transmitterChannels"), ("CAMBIUM-PTP670-MIB", "wirelessTopology"), ("CAMBIUM-PTP670-MIB", "configurationInstancedTableNumber"), ("CAMBIUM-PTP670-MIB", "unitName"), ("CAMBIUM-PTP670-MIB", "authorizationMethod"), ("CAMBIUM-PTP670-MIB", "remoteUnitNameLinked"), ("CAMBIUM-PTP670-MIB", "remoteInternetAddressType"), ("CAMBIUM-PTP670-MIB", "remoteInternetAddress"), ("CAMBIUM-PTP670-MIB", "remoteUnitName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configurationGroup = configurationGroup.setStatus('current')
ethernetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 6)).setObjects(("CAMBIUM-PTP670-MIB", "mainPSUPortAutoNegotiation"), ("CAMBIUM-PTP670-MIB", "mainPSUPortAutoNegAdvertisement"), ("CAMBIUM-PTP670-MIB", "mainPSUPortAutoMdix"), ("CAMBIUM-PTP670-MIB", "mainPSUPortStatus"), ("CAMBIUM-PTP670-MIB", "mainPSUPortSpeedAndDuplex"), ("CAMBIUM-PTP670-MIB", "dataPortWirelessDownAlert"), ("CAMBIUM-PTP670-MIB", "useVLANForManagementInterfaces"), ("CAMBIUM-PTP670-MIB", "vLANManagementPriority"), ("CAMBIUM-PTP670-MIB", "vLANManagementVID"), ("CAMBIUM-PTP670-MIB", "auxPortStatus"), ("CAMBIUM-PTP670-MIB", "auxPortSpeedAndDuplex"), ("CAMBIUM-PTP670-MIB", "ethernetPriorityTableNumber"), ("CAMBIUM-PTP670-MIB", "l2CPPriorityTableNumber"), ("CAMBIUM-PTP670-MIB", "iPDSCPPriorityTableNumber"), ("CAMBIUM-PTP670-MIB", "mPLSTCPriorityTableNumber"), ("CAMBIUM-PTP670-MIB", "managementPortWirelessDownAlert"), ("CAMBIUM-PTP670-MIB", "qOSPriorityScheme"), ("CAMBIUM-PTP670-MIB", "unknownNetworkPriorityQueueMapping"), ("CAMBIUM-PTP670-MIB", "dSCPManagementPriority"), ("CAMBIUM-PTP670-MIB", "dataBridgingStatusLinked"), ("CAMBIUM-PTP670-MIB", "mainPSUPortAllocation"), ("CAMBIUM-PTP670-MIB", "auxPortAllocation"), ("CAMBIUM-PTP670-MIB", "sFPPortAllocation"), ("CAMBIUM-PTP670-MIB", "dataPortPauseFrames"), ("CAMBIUM-PTP670-MIB", "sFPPortAutoNegotiation"), ("CAMBIUM-PTP670-MIB", "sFPPortAutoNegAdvertisement"), ("CAMBIUM-PTP670-MIB", "sFPPortAutoMdix"), ("CAMBIUM-PTP670-MIB", "sFPPortStatus"), ("CAMBIUM-PTP670-MIB", "sFPPortSpeedAndDuplex"), ("CAMBIUM-PTP670-MIB", "auxPortPowerOverEthernetOutput"), ("CAMBIUM-PTP670-MIB", "auxPortPowerOverEthernetOutputStatus"), ("CAMBIUM-PTP670-MIB", "syncETracking"), ("CAMBIUM-PTP670-MIB", "syncEEquipmentClock"), ("CAMBIUM-PTP670-MIB", "mainPSUPortQLRxOverwrite"), ("CAMBIUM-PTP670-MIB", "mainPSUPortSSMTx"), ("CAMBIUM-PTP670-MIB", "sFPPortSSMTx"), ("CAMBIUM-PTP670-MIB", "auxPortSSMTx"), ("CAMBIUM-PTP670-MIB", "syncETrackingState"), ("CAMBIUM-PTP670-MIB", "mainPSUPortQLRx"), ("CAMBIUM-PTP670-MIB", "auxPortQLRx"), ("CAMBIUM-PTP670-MIB", "sFPPortQLRx"), ("CAMBIUM-PTP670-MIB", "mainPSUPortQLTx"), ("CAMBIUM-PTP670-MIB", "auxPortQLTx"), ("CAMBIUM-PTP670-MIB", "sFPPortQLTx"), ("CAMBIUM-PTP670-MIB", "mainPSUPortSyncEMasterSlaveStatus"), ("CAMBIUM-PTP670-MIB", "auxPortSyncEMasterSlaveStatus"), ("CAMBIUM-PTP670-MIB", "sFPPortSyncEMasterSlaveStatus"), ("CAMBIUM-PTP670-MIB", "mainPSUPortGigabitMasterSlaveStatus"), ("CAMBIUM-PTP670-MIB", "auxPortGigabitMasterSlaveStatus"), ("CAMBIUM-PTP670-MIB", "sFPPortGigabitMasterSlaveStatus"), ("CAMBIUM-PTP670-MIB", "transparentClock"), ("CAMBIUM-PTP670-MIB", "transparentClockVLAN"), ("CAMBIUM-PTP670-MIB", "transparentClockVID"), ("CAMBIUM-PTP670-MIB", "mainPSUPortAcceptedQLRx"), ("CAMBIUM-PTP670-MIB", "auxPortAcceptedQLRx"), ("CAMBIUM-PTP670-MIB", "sFPPortAcceptedQLRx"), ("CAMBIUM-PTP670-MIB", "mainPSUPortSyncERxStatus"), ("CAMBIUM-PTP670-MIB", "auxPortSyncERxStatus"), ("CAMBIUM-PTP670-MIB", "sFPPortSyncERxStatus"), ("CAMBIUM-PTP670-MIB", "nIDULanPortStatus"), ("CAMBIUM-PTP670-MIB", "nIDULanPortSpeedAndDuplex"), ("CAMBIUM-PTP670-MIB", "oOBPriorityQueueMapping"), ("CAMBIUM-PTP670-MIB", "nIDULanPortAutoNegotiation"), ("CAMBIUM-PTP670-MIB", "nIDULanPortAutoNegAdvertisement"), ("CAMBIUM-PTP670-MIB", "nIDULanPortAutoMdix"), ("CAMBIUM-PTP670-MIB", "nIDULanPortGigabitMasterSlaveStatus"), ("CAMBIUM-PTP670-MIB", "txMABFrames"), ("CAMBIUM-PTP670-MIB", "managementNetworkAccessEnabled"), ("CAMBIUM-PTP670-MIB", "transparentClockPort"), ("CAMBIUM-PTP670-MIB", "syncESlavePort"), ("CAMBIUM-PTP670-MIB", "sFPPortQLRxOverwrite"), ("CAMBIUM-PTP670-MIB", "ethernetInstancedTableNumber"), ("CAMBIUM-PTP670-MIB", "ethernetStatisticsTableNumber"), ("CAMBIUM-PTP670-MIB", "ethernetPriorityQueueMapping"), ("CAMBIUM-PTP670-MIB", "l2CPPriorityQueueMapping"), ("CAMBIUM-PTP670-MIB", "iPDSCPPriorityQueueMapping"), ("CAMBIUM-PTP670-MIB", "mPLSTCPriorityQueueMapping"), ("CAMBIUM-PTP670-MIB", "dataBridgingStatus"), ("CAMBIUM-PTP670-MIB", "ethernetStatisticsDataSource"), ("CAMBIUM-PTP670-MIB", "ethernetStatisticsRxOctets"), ("CAMBIUM-PTP670-MIB", "ethernetStatisticsRxFrames"), ("CAMBIUM-PTP670-MIB", "ethernetStatisticsRxBroadcasts"), ("CAMBIUM-PTP670-MIB", "ethernetStatisticsRxFramesWithError"), ("CAMBIUM-PTP670-MIB", "ethernetStatisticsRxFramesUndersize"), ("CAMBIUM-PTP670-MIB", "ethernetStatisticsRxFramesOversize"), ("CAMBIUM-PTP670-MIB", "ethernetStatisticsTxOctets"), ("CAMBIUM-PTP670-MIB", "ethernetStatisticsTxFrames"), ("CAMBIUM-PTP670-MIB", "ethernetStatisticsTxBroadcasts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetGroup = ethernetGroup.setStatus('current')
tDMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 7)).setObjects(("CAMBIUM-PTP670-MIB", "tDMInterfaceControl"), ("CAMBIUM-PTP670-MIB", "tDMInterfaceStatus"), ("CAMBIUM-PTP670-MIB", "tDMEnabledChannels"), ("CAMBIUM-PTP670-MIB", "tdmTableNumber"), ("CAMBIUM-PTP670-MIB", "tDMConfigurationMismatch"), ("CAMBIUM-PTP670-MIB", "lowestTDMModulationMode"), ("CAMBIUM-PTP670-MIB", "tDMChannelStatus"), ("CAMBIUM-PTP670-MIB", "tDMChannelLineCode"), ("CAMBIUM-PTP670-MIB", "tDMChannelCableLength"), ("CAMBIUM-PTP670-MIB", "tDMChannelLoopback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tDMGroup = tDMGroup.setStatus('current')
licenseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 8)).setObjects(("CAMBIUM-PTP670-MIB", "regulatoryBand"), ("CAMBIUM-PTP670-MIB", "productVariant"), ("CAMBIUM-PTP670-MIB", "productName"), ("CAMBIUM-PTP670-MIB", "frequencyVariant"), ("CAMBIUM-PTP670-MIB", "sNMPv3Enable"), ("CAMBIUM-PTP670-MIB", "licenseVersion"), ("CAMBIUM-PTP670-MIB", "licenseUnitSerialNumber"), ("CAMBIUM-PTP670-MIB", "licenseIssueNumber"), ("CAMBIUM-PTP670-MIB", "licenseCountry"), ("CAMBIUM-PTP670-MIB", "licenseNumberOfRegulatoryBands"), ("CAMBIUM-PTP670-MIB", "licenseBandwidthCap"), ("CAMBIUM-PTP670-MIB", "licenseEncryption"), ("CAMBIUM-PTP670-MIB", "licenseSecurityLevel"), ("CAMBIUM-PTP670-MIB", "licenseGroupAccess"), ("CAMBIUM-PTP670-MIB", "licenseOOBManagementSupport"), ("CAMBIUM-PTP670-MIB", "licenseSFPPortSupport"), ("CAMBIUM-PTP670-MIB", "licenseAuxiliaryPortSupport"), ("CAMBIUM-PTP670-MIB", "licenseCapacity"), ("CAMBIUM-PTP670-MIB", "licenseMaxNumberOfTDMChannels"), ("CAMBIUM-PTP670-MIB", "licenseIEEE1588Support"), ("CAMBIUM-PTP670-MIB", "licenseSyncESupport"), ("CAMBIUM-PTP670-MIB", "licenseIPv6Support"), ("CAMBIUM-PTP670-MIB", "licenseMinimumFirmwareVersion"), ("CAMBIUM-PTP670-MIB", "licenseFullCapabilityTrialStatus"), ("CAMBIUM-PTP670-MIB", "licenseRemainingTrialPeriod"), ("CAMBIUM-PTP670-MIB", "licenseRemainingTrialPeriodAlarm"), ("CAMBIUM-PTP670-MIB", "capacityVariantMismatchLinked"), ("CAMBIUM-PTP670-MIB", "licenseTDDSyncSupport"), ("CAMBIUM-PTP670-MIB", "licenseMaxLinkRange"), ("CAMBIUM-PTP670-MIB", "licenseTrialPeriod"), ("CAMBIUM-PTP670-MIB", "licenseRARSupport"), ("CAMBIUM-PTP670-MIB", "licenseGasGroup"), ("CAMBIUM-PTP670-MIB", "licenseLongMinimumFirmwareVersion"), ("CAMBIUM-PTP670-MIB", "licenseHCMPSupport"), ("CAMBIUM-PTP670-MIB", "licenseInstancedTableNumber"), ("CAMBIUM-PTP670-MIB", "licenseTLSRekey"), ("CAMBIUM-PTP670-MIB", "licenseAdvanceHCMPSupport"), ("CAMBIUM-PTP670-MIB", "licenseMinFirmwareVersionPTP650Emulation"), ("CAMBIUM-PTP670-MIB", "capacityVariantMismatch"), ("CAMBIUM-PTP670-MIB", "licenseRegulatoryBandsList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    licenseGroup = licenseGroup.setStatus('current')
managementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 9)).setObjects(("CAMBIUM-PTP670-MIB", "targetRange"), ("CAMBIUM-PTP670-MIB", "rangingMode"), ("CAMBIUM-PTP670-MIB", "installStatusLinked"), ("CAMBIUM-PTP670-MIB", "installArmState"), ("CAMBIUM-PTP670-MIB", "tFTPServerPortNumber"), ("CAMBIUM-PTP670-MIB", "tFTPSoftwareUpgradeFileName"), ("CAMBIUM-PTP670-MIB", "tFTPStartSoftwareUpgrade"), ("CAMBIUM-PTP670-MIB", "tFTPSoftwareUpgradeStatus"), ("CAMBIUM-PTP670-MIB", "tFTPSoftwareUpgradeStatusText"), ("CAMBIUM-PTP670-MIB", "tFTPSoftwareUpgradeStatusAdditionalText"), ("CAMBIUM-PTP670-MIB", "hTTPAccessEnabled"), ("CAMBIUM-PTP670-MIB", "telnetAccessEnabled"), ("CAMBIUM-PTP670-MIB", "hTTPPortNumber"), ("CAMBIUM-PTP670-MIB", "hTTPSPortNumber"), ("CAMBIUM-PTP670-MIB", "telnetPortNumber"), ("CAMBIUM-PTP670-MIB", "hTTPSAccessEnabled"), ("CAMBIUM-PTP670-MIB", "tFTPServerInternetAddressType"), ("CAMBIUM-PTP670-MIB", "tFTPServerInternetAddress"), ("CAMBIUM-PTP670-MIB", "lowestDataModulationMode"), ("CAMBIUM-PTP670-MIB", "tFTPClient"), ("CAMBIUM-PTP670-MIB", "mgmtInstancedTableNumber"), ("CAMBIUM-PTP670-MIB", "tFTPServerResolvedInternetAddress"), ("CAMBIUM-PTP670-MIB", "installationMode"), ("CAMBIUM-PTP670-MIB", "installStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    managementGroup = managementGroup.setStatus('current')
phyControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 10)).setObjects(("CAMBIUM-PTP670-MIB", "linkSymmetry"), ("CAMBIUM-PTP670-MIB", "userConfiguredMaxModulationMode"), ("CAMBIUM-PTP670-MIB", "linkModeOptimization"), ("CAMBIUM-PTP670-MIB", "txColorCode"), ("CAMBIUM-PTP670-MIB", "rxColorCode"), ("CAMBIUM-PTP670-MIB", "remoteMaximumTransmitPowerLinked"), ("CAMBIUM-PTP670-MIB", "phyControlInstancedTableNumber"), ("CAMBIUM-PTP670-MIB", "remoteMaximumTransmitPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    phyControlGroup = phyControlGroup.setStatus('current')
phyStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 12)).setObjects(("CAMBIUM-PTP670-MIB", "linkLossLinked"), ("CAMBIUM-PTP670-MIB", "receivePowerLinked"), ("CAMBIUM-PTP670-MIB", "vectorErrorLinked"), ("CAMBIUM-PTP670-MIB", "transmitPowerLinked"), ("CAMBIUM-PTP670-MIB", "receiveChannel"), ("CAMBIUM-PTP670-MIB", "transmitChannel"), ("CAMBIUM-PTP670-MIB", "receiveFreqMHz"), ("CAMBIUM-PTP670-MIB", "transmitFreqMHz"), ("CAMBIUM-PTP670-MIB", "signalStrengthRatioLinked"), ("CAMBIUM-PTP670-MIB", "receiveFreqKHz"), ("CAMBIUM-PTP670-MIB", "transmitFreqKHz"), ("CAMBIUM-PTP670-MIB", "rawReceivePowerLinked"), ("CAMBIUM-PTP670-MIB", "rangeLinked"), ("CAMBIUM-PTP670-MIB", "receiveModulationModeLinked"), ("CAMBIUM-PTP670-MIB", "transmitModulationModeLinked"), ("CAMBIUM-PTP670-MIB", "searchStateLinked"), ("CAMBIUM-PTP670-MIB", "remoteMACAddressLinked"), ("CAMBIUM-PTP670-MIB", "phyInstancedStatusTableNumber"), ("CAMBIUM-PTP670-MIB", "tempPcb"), ("CAMBIUM-PTP670-MIB", "linkLoss"), ("CAMBIUM-PTP670-MIB", "receivePower"), ("CAMBIUM-PTP670-MIB", "vectorError"), ("CAMBIUM-PTP670-MIB", "signalStrengthRatio"), ("CAMBIUM-PTP670-MIB", "range"), ("CAMBIUM-PTP670-MIB", "receiveModulationMode"), ("CAMBIUM-PTP670-MIB", "transmitModulationMode"), ("CAMBIUM-PTP670-MIB", "searchState"), ("CAMBIUM-PTP670-MIB", "remoteMACAddress"), ("CAMBIUM-PTP670-MIB", "rawReceivePower"), ("CAMBIUM-PTP670-MIB", "transmitPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    phyStatusGroup = phyStatusGroup.setStatus('current')
alarmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 13)).setObjects(("CAMBIUM-PTP670-MIB", "unitOutOfCalibration"), ("CAMBIUM-PTP670-MIB", "incompatibleRegulatoryBandsLinked"), ("CAMBIUM-PTP670-MIB", "noWirelessChannelAvailable"), ("CAMBIUM-PTP670-MIB", "wirelessLinkDisabledWarning"), ("CAMBIUM-PTP670-MIB", "mainPSUPortDisabledWarning"), ("CAMBIUM-PTP670-MIB", "sFPError"), ("CAMBIUM-PTP670-MIB", "mainPSUPortConfigurationMismatch"), ("CAMBIUM-PTP670-MIB", "incompatibleMasterAndSlaveLinked"), ("CAMBIUM-PTP670-MIB", "tDDSynchronizationStatus"), ("CAMBIUM-PTP670-MIB", "auxPortDisabledWarning"), ("CAMBIUM-PTP670-MIB", "tDDSynchronizationAlarm"), ("CAMBIUM-PTP670-MIB", "linkModeOptimizationMismatchLinked"), ("CAMBIUM-PTP670-MIB", "auxPortConfigurationMismatch"), ("CAMBIUM-PTP670-MIB", "secureModeAlarm"), ("CAMBIUM-PTP670-MIB", "dataBridgingStatusAlarmLinked"), ("CAMBIUM-PTP670-MIB", "sFPPortDisabledWarning"), ("CAMBIUM-PTP670-MIB", "sFPPortConfigurationMismatch"), ("CAMBIUM-PTP670-MIB", "maxLinkRangeExceededLinked"), ("CAMBIUM-PTP670-MIB", "nIDULanPortDisabledWarning"), ("CAMBIUM-PTP670-MIB", "nIDULanPortConfigurationMismatch"), ("CAMBIUM-PTP670-MIB", "portAllocationMismatchLinked"), ("CAMBIUM-PTP670-MIB", "transparentClockSourcePortAlarm"), ("CAMBIUM-PTP670-MIB", "alarmInstancedTableNumber"), ("CAMBIUM-PTP670-MIB", "secureLicenseSignatureAlarm"), ("CAMBIUM-PTP670-MIB", "incompatibleMasterAndSlave"), ("CAMBIUM-PTP670-MIB", "linkModeOptimizationMismatch"), ("CAMBIUM-PTP670-MIB", "dataBridgingStatusAlarm"), ("CAMBIUM-PTP670-MIB", "maxLinkRangeExceeded"), ("CAMBIUM-PTP670-MIB", "portAllocationMismatch"), ("CAMBIUM-PTP670-MIB", "wirelessLinkStatusAlarm"), ("CAMBIUM-PTP670-MIB", "incompatibleRegulatoryBands"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alarmsGroup = alarmsGroup.setStatus('current')
apcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 14)).setObjects(("CAMBIUM-PTP670-MIB", "atpcHcmpMasterTargetRxPower"), ("CAMBIUM-PTP670-MIB", "atpcHcmpMasterTxPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apcGroup = apcGroup.setStatus('current')
smtpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 15)).setObjects(("CAMBIUM-PTP670-MIB", "sMTPEmailAlert"), ("CAMBIUM-PTP670-MIB", "sMTPServerPortNumber"), ("CAMBIUM-PTP670-MIB", "sMTPSourceEmailAddress"), ("CAMBIUM-PTP670-MIB", "sMTPDestinationEmailAddress"), ("CAMBIUM-PTP670-MIB", "sMTPEnabledMessages"), ("CAMBIUM-PTP670-MIB", "sMTPServerInternetAddressType"), ("CAMBIUM-PTP670-MIB", "sMTPServerInternetAddress"), ("CAMBIUM-PTP670-MIB", "sMTPServerResolvedInternetAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    smtpGroup = smtpGroup.setStatus('current')
snmpControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 16)).setObjects(("CAMBIUM-PTP670-MIB", "sNMPPortNumber"), ("CAMBIUM-PTP670-MIB", "sNMPCommunityString"), ("CAMBIUM-PTP670-MIB", "sNMPTrapTableNumber"), ("CAMBIUM-PTP670-MIB", "sNMPTrapVersion"), ("CAMBIUM-PTP670-MIB", "sNMPEnabledTraps"), ("CAMBIUM-PTP670-MIB", "enabledDiagnosticAlarms"), ("CAMBIUM-PTP670-MIB", "sNMPSendAllTrapsAtStartup"), ("CAMBIUM-PTP670-MIB", "sNMPTrapPortNumber"), ("CAMBIUM-PTP670-MIB", "sNMPTrapInternetAddressType"), ("CAMBIUM-PTP670-MIB", "sNMPTrapInternetAddress"), ("CAMBIUM-PTP670-MIB", "sNMPTrapReceiverEnabled"), ("CAMBIUM-PTP670-MIB", "sNMPTrapResolvedInternetAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snmpControlGroup = snmpControlGroup.setStatus('current')
sntpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 17)).setObjects(("CAMBIUM-PTP670-MIB", "sNTPState"), ("CAMBIUM-PTP670-MIB", "sNTPPollInterval"), ("CAMBIUM-PTP670-MIB", "sNTPSync"), ("CAMBIUM-PTP670-MIB", "sNTPLastSync"), ("CAMBIUM-PTP670-MIB", "systemClock"), ("CAMBIUM-PTP670-MIB", "timeZone"), ("CAMBIUM-PTP670-MIB", "daylightSaving"), ("CAMBIUM-PTP670-MIB", "sNTPPrimaryServer"), ("CAMBIUM-PTP670-MIB", "sNTPPrimaryServerDeadTime"), ("CAMBIUM-PTP670-MIB", "sNTPServerRetries"), ("CAMBIUM-PTP670-MIB", "sNTPServerTimeout"), ("CAMBIUM-PTP670-MIB", "sNTPServerTableNumber"), ("CAMBIUM-PTP670-MIB", "sNTPServerPortNumber"), ("CAMBIUM-PTP670-MIB", "sNTPServerStatus"), ("CAMBIUM-PTP670-MIB", "sNTPServerInternetAddressType"), ("CAMBIUM-PTP670-MIB", "sNTPServerInternetAddress"), ("CAMBIUM-PTP670-MIB", "sNTPServerResolvedInternetAddress"), ("CAMBIUM-PTP670-MIB", "sNTPServerAuthenticationProtocol"), ("CAMBIUM-PTP670-MIB", "sNTPServerKeyIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sntpGroup = sntpGroup.setStatus('current')
resetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 18)).setObjects(("CAMBIUM-PTP670-MIB", "systemReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    resetGroup = resetGroup.setStatus('current')
versionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 19)).setObjects(("CAMBIUM-PTP670-MIB", "softwareVersion"), ("CAMBIUM-PTP670-MIB", "hardwareVersion"), ("CAMBIUM-PTP670-MIB", "secondarySoftwareVersion"), ("CAMBIUM-PTP670-MIB", "bootVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    versionsGroup = versionsGroup.setStatus('current')
pubStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 20)).setObjects(("CAMBIUM-PTP670-MIB", "receiveDataRateLinked"), ("CAMBIUM-PTP670-MIB", "transmitDataRateLinked"), ("CAMBIUM-PTP670-MIB", "aggregateDataRateLinked"), ("CAMBIUM-PTP670-MIB", "wirelessLinkAvailabilityLinked"), ("CAMBIUM-PTP670-MIB", "wirelessLinkStatusLinked"), ("CAMBIUM-PTP670-MIB", "byteErrorRatioLinked"), ("CAMBIUM-PTP670-MIB", "receiveModulationModeDetailLinked"), ("CAMBIUM-PTP670-MIB", "dataBridgingAvailabilityLinked"), ("CAMBIUM-PTP670-MIB", "pubInstancedStatsTableNumber"), ("CAMBIUM-PTP670-MIB", "receiveDataRate"), ("CAMBIUM-PTP670-MIB", "transmitDataRate"), ("CAMBIUM-PTP670-MIB", "aggregateDataRate"), ("CAMBIUM-PTP670-MIB", "wirelessLinkAvailability"), ("CAMBIUM-PTP670-MIB", "wirelessLinkStatus"), ("CAMBIUM-PTP670-MIB", "receiveModulationModeDetail"), ("CAMBIUM-PTP670-MIB", "dataBridgingAvailability"), ("CAMBIUM-PTP670-MIB", "byteErrorRatio"), ("CAMBIUM-PTP670-MIB", "wirelessOutEthernetOctets"), ("CAMBIUM-PTP670-MIB", "wirelessOutAllOctets"), ("CAMBIUM-PTP670-MIB", "wirelessOutOctets"), ("CAMBIUM-PTP670-MIB", "erroredSeconds"), ("CAMBIUM-PTP670-MIB", "severelyErroredSeconds"), ("CAMBIUM-PTP670-MIB", "unavailableSeconds"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pubStatsGroup = pubStatsGroup.setStatus('current')
encryptionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 22)).setObjects(("CAMBIUM-PTP670-MIB", "encryptionAlgorithm"), ("CAMBIUM-PTP670-MIB", "tLSMinimumSecurityLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    encryptionGroup = encryptionGroup.setStatus('current')
tDDControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 23)).setObjects(("CAMBIUM-PTP670-MIB", "tDDSynchronizationMode"), ("CAMBIUM-PTP670-MIB", "hCMPMaximumLinkRange"), ("CAMBIUM-PTP670-MIB", "maximumNumberOfSlaves"), ("CAMBIUM-PTP670-MIB", "hCMPLinkSymmetry"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tDDControlGroup = tDDControlGroup.setStatus('current')
aAAControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 25)).setObjects(("CAMBIUM-PTP670-MIB", "userTableNumber"), ("CAMBIUM-PTP670-MIB", "userName"), ("CAMBIUM-PTP670-MIB", "userRole"), ("CAMBIUM-PTP670-MIB", "userEnabled"), ("CAMBIUM-PTP670-MIB", "userPassword"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aAAControlGroup = aAAControlGroup.setStatus('current')
syslogControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 24)).setObjects(("CAMBIUM-PTP670-MIB", "syslogClient"), ("CAMBIUM-PTP670-MIB", "syslogState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    syslogControlGroup = syslogControlGroup.setStatus('current')
routerProtocolsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 26)).setObjects(("CAMBIUM-PTP670-MIB", "microwaveAdaptiveBandwidth"), ("CAMBIUM-PTP670-MIB", "mABNominalModulationMode"), ("CAMBIUM-PTP670-MIB", "mABTransmissionInterval"), ("CAMBIUM-PTP670-MIB", "mABHoldoffPeriod"), ("CAMBIUM-PTP670-MIB", "mABMaintenanceLevel"), ("CAMBIUM-PTP670-MIB", "useVLANForMABProtocol"), ("CAMBIUM-PTP670-MIB", "mABProtocolVID"), ("CAMBIUM-PTP670-MIB", "mABProtocolVLANPriority"), ("CAMBIUM-PTP670-MIB", "mABState"), ("CAMBIUM-PTP670-MIB", "mABNominalTransmitCapacity"), ("CAMBIUM-PTP670-MIB", "mABCurrentTransmitCapacity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    routerProtocolsGroup = routerProtocolsGroup.setStatus('current')
cableDiagnosticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 27)).setObjects(("CAMBIUM-PTP670-MIB", "cableDiagnosticsPorts"), ("CAMBIUM-PTP670-MIB", "cableDiagnosticsControl"), ("CAMBIUM-PTP670-MIB", "cableDiagnosticsWarning"), ("CAMBIUM-PTP670-MIB", "cableDiagnosticsResultTableNumber"), ("CAMBIUM-PTP670-MIB", "cableDiagnosticsResultsDateTime"), ("CAMBIUM-PTP670-MIB", "cableDiagPair1Results"), ("CAMBIUM-PTP670-MIB", "cableDiagPair1Distance"), ("CAMBIUM-PTP670-MIB", "cableDiagPair2Results"), ("CAMBIUM-PTP670-MIB", "cableDiagPair2Distance"), ("CAMBIUM-PTP670-MIB", "cableDiagPair3Results"), ("CAMBIUM-PTP670-MIB", "cableDiagPair3Distance"), ("CAMBIUM-PTP670-MIB", "cableDiagPair4Results"), ("CAMBIUM-PTP670-MIB", "cableDiagPair4Distance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cableDiagnosticsGroup = cableDiagnosticsGroup.setStatus('current')
unitIdentificationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 28)).setObjects(("CAMBIUM-PTP670-MIB", "deviceMACAddress"), ("CAMBIUM-PTP670-MIB", "deviceESN"), ("CAMBIUM-PTP670-MIB", "deviceMSN"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    unitIdentificationGroup = unitIdentificationGroup.setStatus('current')
authorizationControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 29)).setObjects(("CAMBIUM-PTP670-MIB", "authorizationControlTableNumber"), ("CAMBIUM-PTP670-MIB", "whitelistRMMacAddress"), ("CAMBIUM-PTP670-MIB", "whitelistRMEnabled"), ("CAMBIUM-PTP670-MIB", "blacklistRMMacAddress"), ("CAMBIUM-PTP670-MIB", "blacklistRMEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    authorizationControlGroup = authorizationControlGroup.setStatus('current')
dNSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 30)).setObjects(("CAMBIUM-PTP670-MIB", "dNSResolver"), ("CAMBIUM-PTP670-MIB", "dNSPrimaryServer"), ("CAMBIUM-PTP670-MIB", "dNSServerTableNumber"), ("CAMBIUM-PTP670-MIB", "dNSServerInternetAddressType"), ("CAMBIUM-PTP670-MIB", "dNSServerInternetAddress"), ("CAMBIUM-PTP670-MIB", "dNSServerPortNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dNSGroup = dNSGroup.setStatus('current')
supplementaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 96)).setObjects(("CAMBIUM-PTP670-MIB", "longitude"), ("CAMBIUM-PTP670-MIB", "latitude"), ("CAMBIUM-PTP670-MIB", "altitude"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    supplementaryGroup = supplementaryGroup.setStatus('current')
notificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 17713, 11, 98, 99)).setObjects(("CAMBIUM-PTP670-MIB", "channelChangeTrap"), ("CAMBIUM-PTP670-MIB", "dfsImpulsiveInterferenceTrap"), ("CAMBIUM-PTP670-MIB", "mainPSUPortStatusTrap"), ("CAMBIUM-PTP670-MIB", "mainPSUPortDisabledWarningTrap"), ("CAMBIUM-PTP670-MIB", "mainPSUPortConfigurationMismatchTrap"), ("CAMBIUM-PTP670-MIB", "auxPortStatusTrap"), ("CAMBIUM-PTP670-MIB", "auxPortDisabledWarningTrap"), ("CAMBIUM-PTP670-MIB", "regulatoryBandTrap"), ("CAMBIUM-PTP670-MIB", "installStatusTrap"), ("CAMBIUM-PTP670-MIB", "installArmStateTrap"), ("CAMBIUM-PTP670-MIB", "unitOutOfCalibrationTrap"), ("CAMBIUM-PTP670-MIB", "auxPortPowerOverEthernetOutputStatusTrap"), ("CAMBIUM-PTP670-MIB", "incompatibleRegulatoryBandsTrap"), ("CAMBIUM-PTP670-MIB", "noWirelessChannelAvailableTrap"), ("CAMBIUM-PTP670-MIB", "wirelessLinkDisabledWarningTrap"), ("CAMBIUM-PTP670-MIB", "auxPortConfigurationMismatchTrap"), ("CAMBIUM-PTP670-MIB", "sFPErrorTrap"), ("CAMBIUM-PTP670-MIB", "sFPPortStatusTrap"), ("CAMBIUM-PTP670-MIB", "incompatibleMasterAndSlaveTrap"), ("CAMBIUM-PTP670-MIB", "sNTPSyncTrap"), ("CAMBIUM-PTP670-MIB", "tDDSynchronizationAlarmTrap"), ("CAMBIUM-PTP670-MIB", "sFPPortDisabledWarningTrap"), ("CAMBIUM-PTP670-MIB", "sFPPortConfigurationMismatchTrap"), ("CAMBIUM-PTP670-MIB", "linkModeOptimizationMismatchTrap"), ("CAMBIUM-PTP670-MIB", "tDMInterfaceStatusTrap"), ("CAMBIUM-PTP670-MIB", "tDMChannelStatusTrap"), ("CAMBIUM-PTP670-MIB", "tDMChannelLoopbackTrap"), ("CAMBIUM-PTP670-MIB", "nIDULanPortStatusTrap"), ("CAMBIUM-PTP670-MIB", "syslogStateTrap"), ("CAMBIUM-PTP670-MIB", "syslogLocalNearlyFullTrap"), ("CAMBIUM-PTP670-MIB", "syslogLocalWrappedTrap"), ("CAMBIUM-PTP670-MIB", "syslogClientTrap"), ("CAMBIUM-PTP670-MIB", "secureModeAlarmTrap"), ("CAMBIUM-PTP670-MIB", "dataBridgingStatusAlarmTrap"), ("CAMBIUM-PTP670-MIB", "licenseRemainingTrialPeriodAlarmTrap"), ("CAMBIUM-PTP670-MIB", "capacityVariantMismatchTrap"), ("CAMBIUM-PTP670-MIB", "maxLinkRangeExceededTrap"), ("CAMBIUM-PTP670-MIB", "tDMConfigurationMismatchTrap"), ("CAMBIUM-PTP670-MIB", "nIDULanPortDisabledWarningTrap"), ("CAMBIUM-PTP670-MIB", "nIDULanPortConfigurationMismatchTrap"), ("CAMBIUM-PTP670-MIB", "portAllocationMismatchTrap"), ("CAMBIUM-PTP670-MIB", "wirelessLinkStatusAlarmTrap"), ("CAMBIUM-PTP670-MIB", "lbtDetectedTrap"), ("CAMBIUM-PTP670-MIB", "secureLicenseSignatureAlarmTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    notificationsGroup = notificationsGroup.setStatus('current')
dfsTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 11, 3, 2), )
if mibBuilder.loadTexts: dfsTable.setStatus('current')
dfsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 11, 3, 2, 1), ).setIndexNames((0, "CAMBIUM-PTP670-MIB", "dfsTableIndex"))
if mibBuilder.loadTexts: dfsTableEntry.setStatus('current')
configurationInstancedTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 11, 5, 33), )
if mibBuilder.loadTexts: configurationInstancedTable.setStatus('current')
configurationInstancedTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 11, 5, 33, 1), ).setIndexNames((0, "CAMBIUM-PTP670-MIB", "configurationInstancedTableIndex"))
if mibBuilder.loadTexts: configurationInstancedTableEntry.setStatus('current')
ethernetPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 11, 6, 15), )
if mibBuilder.loadTexts: ethernetPriorityTable.setStatus('current')
ethernetPriorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 11, 6, 15, 1), ).setIndexNames((0, "CAMBIUM-PTP670-MIB", "ethernetPriorityTableIndex"))
if mibBuilder.loadTexts: ethernetPriorityTableEntry.setStatus('current')
l2CPPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 11, 6, 17), )
if mibBuilder.loadTexts: l2CPPriorityTable.setStatus('current')
l2CPPriorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 11, 6, 17, 1), ).setIndexNames((0, "CAMBIUM-PTP670-MIB", "l2CPPriorityTableIndex"))
if mibBuilder.loadTexts: l2CPPriorityTableEntry.setStatus('current')
iPDSCPPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 11, 6, 19), )
if mibBuilder.loadTexts: iPDSCPPriorityTable.setStatus('current')
iPDSCPPriorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 11, 6, 19, 1), ).setIndexNames((0, "CAMBIUM-PTP670-MIB", "iPDSCPPriorityTableIndex"))
if mibBuilder.loadTexts: iPDSCPPriorityTableEntry.setStatus('current')
mPLSTCPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 11, 6, 21), )
if mibBuilder.loadTexts: mPLSTCPriorityTable.setStatus('current')
mPLSTCPriorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 11, 6, 21, 1), ).setIndexNames((0, "CAMBIUM-PTP670-MIB", "mPLSTCPriorityTableIndex"))
if mibBuilder.loadTexts: mPLSTCPriorityTableEntry.setStatus('current')
ethernetInstancedTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 11, 6, 85), )
if mibBuilder.loadTexts: ethernetInstancedTable.setStatus('current')
ethernetInstancedTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 11, 6, 85, 1), ).setIndexNames((0, "CAMBIUM-PTP670-MIB", "ethernetInstancedTableIndex"))
if mibBuilder.loadTexts: ethernetInstancedTableEntry.setStatus('current')
ethernetStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 11, 6, 87), )
if mibBuilder.loadTexts: ethernetStatisticsTable.setStatus('current')
ethernetStatisticsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 11, 6, 87, 1), ).setIndexNames((0, "CAMBIUM-PTP670-MIB", "ethernetStatisticsTableIndex"))
if mibBuilder.loadTexts: ethernetStatisticsTableEntry.setStatus('current')
tdmTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 11, 7, 5), )
if mibBuilder.loadTexts: tdmTable.setStatus('current')
tdmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 11, 7, 5, 1), ).setIndexNames((0, "CAMBIUM-PTP670-MIB", "tdmTableIndex"))
if mibBuilder.loadTexts: tdmTableEntry.setStatus('current')
licenseInstancedTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 11, 8, 45), )
if mibBuilder.loadTexts: licenseInstancedTable.setStatus('current')
licenseInstancedTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 11, 8, 45, 1), ).setIndexNames((0, "CAMBIUM-PTP670-MIB", "licenseInstancedTableIndex"))
if mibBuilder.loadTexts: licenseInstancedTableEntry.setStatus('current')
licenseRegulatoryBandsTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 11, 8, 18), )
if mibBuilder.loadTexts: licenseRegulatoryBandsTable.setStatus('current')
licenseRegulatoryBandsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 11, 8, 18, 1), ).setIndexNames((0, "CAMBIUM-PTP670-MIB", "licenseRegulatoryBandsTableIndex"))
if mibBuilder.loadTexts: licenseRegulatoryBandsTableEntry.setStatus('current')
mgmtInstancedTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 11, 9, 24), )
if mibBuilder.loadTexts: mgmtInstancedTable.setStatus('current')
mgmtInstancedTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 11, 9, 24, 1), ).setIndexNames((0, "CAMBIUM-PTP670-MIB", "mgmtInstancedTableIndex"))
if mibBuilder.loadTexts: mgmtInstancedTableEntry.setStatus('current')
phyControlInstancedTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 11, 10, 8), )
if mibBuilder.loadTexts: phyControlInstancedTable.setStatus('current')
phyControlInstancedTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 11, 10, 8, 1), ).setIndexNames((0, "CAMBIUM-PTP670-MIB", "phyControlInstancedTableIndex"))
if mibBuilder.loadTexts: phyControlInstancedTableEntry.setStatus('current')
phyInstancedStatusTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 11, 12, 19), )
if mibBuilder.loadTexts: phyInstancedStatusTable.setStatus('current')
phyInstancedStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 11, 12, 19, 1), ).setIndexNames((0, "CAMBIUM-PTP670-MIB", "phyInstancedStatusTableIndex"))
if mibBuilder.loadTexts: phyInstancedStatusTableEntry.setStatus('current')
alarmInstancedTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 11, 13, 27), )
if mibBuilder.loadTexts: alarmInstancedTable.setStatus('current')
alarmInstancedTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 11, 13, 27, 1), ).setIndexNames((0, "CAMBIUM-PTP670-MIB", "alarmInstancedTableIndex"))
if mibBuilder.loadTexts: alarmInstancedTableEntry.setStatus('current')
sNMPTrapTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 11, 16, 4), )
if mibBuilder.loadTexts: sNMPTrapTable.setStatus('current')
sNMPTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 11, 16, 4, 1), ).setIndexNames((0, "CAMBIUM-PTP670-MIB", "sNMPTrapTableIndex"))
if mibBuilder.loadTexts: sNMPTrapTableEntry.setStatus('current')
sNTPServerTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 11, 17, 15), )
if mibBuilder.loadTexts: sNTPServerTable.setStatus('current')
sNTPServerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 11, 17, 15, 1), ).setIndexNames((0, "CAMBIUM-PTP670-MIB", "sNTPServerTableIndex"))
if mibBuilder.loadTexts: sNTPServerTableEntry.setStatus('current')
pubInstancedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 11, 20, 10), )
if mibBuilder.loadTexts: pubInstancedStatsTable.setStatus('current')
pubInstancedStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 11, 20, 10, 1), ).setIndexNames((0, "CAMBIUM-PTP670-MIB", "pubInstancedStatsTableIndex"))
if mibBuilder.loadTexts: pubInstancedStatsTableEntry.setStatus('current')
userTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 11, 25, 2), )
if mibBuilder.loadTexts: userTable.setStatus('current')
userTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 11, 25, 2, 1), ).setIndexNames((0, "CAMBIUM-PTP670-MIB", "userTableIndex"))
if mibBuilder.loadTexts: userTableEntry.setStatus('current')
cableDiagnosticsResultTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 11, 27, 5), )
if mibBuilder.loadTexts: cableDiagnosticsResultTable.setStatus('current')
cableDiagnosticsResultTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 11, 27, 5, 1), ).setIndexNames((0, "CAMBIUM-PTP670-MIB", "cableDiagnosticsResultTableIndex"))
if mibBuilder.loadTexts: cableDiagnosticsResultTableEntry.setStatus('current')
authorizationControlTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 11, 29, 2), )
if mibBuilder.loadTexts: authorizationControlTable.setStatus('current')
authorizationControlTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 11, 29, 2, 1), ).setIndexNames((0, "CAMBIUM-PTP670-MIB", "authorizationControlTableIndex"))
if mibBuilder.loadTexts: authorizationControlTableEntry.setStatus('current')
dNSServerTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 11, 30, 4), )
if mibBuilder.loadTexts: dNSServerTable.setStatus('current')
dNSServerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 11, 30, 4, 1), ).setIndexNames((0, "CAMBIUM-PTP670-MIB", "dNSServerTableIndex"))
if mibBuilder.loadTexts: dNSServerTableEntry.setStatus('current')
dfsTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 305))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsTableNumber.setStatus('current')
extendedSpectrumScanning = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendedSpectrumScanning.setStatus('current')
dfsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 305)))
if mibBuilder.loadTexts: dfsTableIndex.setStatus('current')
dfsMeans = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsMeans.setStatus('current')
dfsNineNinePointNinePercentiles = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsNineNinePointNinePercentiles.setStatus('current')
dfsPeaks = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsPeaks.setStatus('current')
localPacketFiltering = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localPacketFiltering.setStatus('current')
packetsToInternalStack = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: packetsToInternalStack.setStatus('current')
packetsFromInternalStack = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: packetsFromInternalStack.setStatus('current')
iPv4Address = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4Address.setStatus('current')
subnetMask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask.setStatus('current')
gatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayIPAddress.setStatus('current')
targetMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetMACAddress.setStatus('current')
masterSlaveMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("master", 0), ("slave", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: masterSlaveMode.setStatus('current')
maximumTransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumTransmitPower.setStatus('current')
antennaGain = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 610))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: antennaGain.setStatus('current')
cableLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableLoss.setStatus('current')
eIRP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eIRP.setStatus('current')
channelBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("bw30MHz", 0), ("bw15MHz", 1), ("bw10MHz", 2), ("bw5MHz", 3), ("bw20MHz", 4), ("bw56MHz", 5), ("bw50MHz", 6), ("bw40MHz", 7), ("bw45MHz", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelBandwidth.setStatus('current')
linkName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkName.setStatus('current')
siteName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteName.setStatus('current')
accessMethod = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("linkAccess", 0), ("linkNameAccess", 1), ("groupAccess", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessMethod.setStatus('current')
groupID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupID.setStatus('current')
iPv6Address = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv6Address.setStatus('current')
iPVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("iPv4", 0), ("iPv6", 1), ("dualIPv4andIPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPVersion.setStatus('current')
iPv6AutoConfiguredLinkLocalAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPv6AutoConfiguredLinkLocalAddress.setStatus('current')
iPv6PrefixLength = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv6PrefixLength.setStatus('current')
iPv6GatewayAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv6GatewayAddress.setStatus('current')
remoteInternetAddressTypeLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("unknown6", 5), ("unknown7", 6), ("unknown8", 7), ("unknown9", 8), ("unknown10", 9), ("unknown11", 10), ("unknown12", 11), ("unknown13", 12), ("unknown14", 13), ("unknown15", 14), ("unknown16", 15), ("dns", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteInternetAddressTypeLinked.setStatus('current')
remoteInternetAddressLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 25), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteInternetAddressLinked.setStatus('current')
subbandLowestFrequency = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subbandLowestFrequency.setStatus('current')
subbandHighestFrequency = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subbandHighestFrequency.setStatus('current')
enableTransmission = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("muted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableTransmission.setStatus('current')
antennaSelection = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("integrated", 0), ("connectorized", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: antennaSelection.setStatus('current')
transmitterChannels = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("handV", 0), ("hOnly", 1), ("vOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transmitterChannels.setStatus('current')
wirelessTopology = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pointToPoint", 0), ("highCapacityMultiPoint", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessTopology.setStatus('current')
configurationInstancedTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationInstancedTableNumber.setStatus('current')
unitName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitName.setStatus('current')
authorizationMethod = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("whitelist", 0), ("blacklist", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authorizationMethod.setStatus('current')
remoteUnitNameLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 5, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteUnitNameLinked.setStatus('current')
configurationInstancedTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 5, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: configurationInstancedTableIndex.setStatus('current')
remoteInternetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 5, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("unknown6", 5), ("unknown7", 6), ("unknown8", 7), ("unknown9", 8), ("unknown10", 9), ("unknown11", 10), ("unknown12", 11), ("unknown13", 12), ("unknown14", 13), ("unknown15", 14), ("unknown16", 15), ("dns", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteInternetAddressType.setStatus('current')
remoteInternetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 5, 33, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteInternetAddress.setStatus('current')
remoteUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 5, 33, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteUnitName.setStatus('current')
mainPSUPortAutoNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainPSUPortAutoNegotiation.setStatus('current')
mainPSUPortAutoNegAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 2), Bits().clone(namedValues=NamedValues(("negInvalid", 2), ("neg10MbpsHalfDuplex", 3), ("neg10MbpsFullDuplex", 4), ("neg100MbpsHalfDuplex", 5), ("neg100MbpsFullDuplex", 6), ("neg1000MbpsFullDuplex", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainPSUPortAutoNegAdvertisement.setStatus('current')
mainPSUPortAutoMdix = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainPSUPortAutoMdix.setStatus('current')
mainPSUPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("copperLinkUp", 1), ("fiberLinkUp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainPSUPortStatus.setStatus('current')
mainPSUPortSpeedAndDuplex = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("speed1000MbpsFullDuplex", 0), ("speed100MbpsFullDuplex", 1), ("speed100MbpsHalfDuplex", 2), ("speed10MbpsFullDuplex", 3), ("speed10MbpsHalfDuplex", 4), ("speedUnknown6", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainPSUPortSpeedAndDuplex.setStatus('current')
dataPortWirelessDownAlert = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortWirelessDownAlert.setStatus('current')
useVLANForManagementInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noVLANTagging", 0), ("iEEE8021QTaggedCTagType8100", 1), ("iEEE8021adTaggedSTagorBTagType88a8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useVLANForManagementInterfaces.setStatus('current')
vLANManagementPriority = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("p0", 0), ("p1", 1), ("p2", 2), ("p3", 3), ("p4", 4), ("p5", 5), ("p6", 6), ("p7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLANManagementPriority.setStatus('current')
vLANManagementVID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLANManagementVID.setStatus('current')
auxPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("copperLinkUp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxPortStatus.setStatus('current')
auxPortSpeedAndDuplex = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("speed1000MbpsFullDuplex", 0), ("speed100MbpsFullDuplex", 1), ("speed100MbpsHalfDuplex", 2), ("speed10MbpsFullDuplex", 3), ("speed10MbpsHalfDuplex", 4), ("speedUnknown6", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxPortSpeedAndDuplex.setStatus('current')
ethernetPriorityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPriorityTableNumber.setStatus('current')
l2CPPriorityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2CPPriorityTableNumber.setStatus('current')
iPDSCPPriorityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPDSCPPriorityTableNumber.setStatus('current')
mPLSTCPriorityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mPLSTCPriorityTableNumber.setStatus('current')
managementPortWirelessDownAlert = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementPortWirelessDownAlert.setStatus('current')
qOSPriorityScheme = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ethernet", 0), ("iPMPLS", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qOSPriorityScheme.setStatus('current')
unknownNetworkPriorityQueueMapping = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unknownNetworkPriorityQueueMapping.setStatus('current')
dSCPManagementPriority = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dSCPManagementPriority.setStatus('current')
dataBridgingStatusLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataBridgingStatusLinked.setStatus('current')
mainPSUPortAllocation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("dataOnly", 1), ("dataandInBandManagement", 2), ("outofBandLocalManagement", 3), ("outofBandRemoteManagement", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainPSUPortAllocation.setStatus('current')
auxPortAllocation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("dataOnly", 1), ("dataandInBandManagement", 2), ("outofBandLocalManagement", 3), ("outofBandRemoteManagement", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxPortAllocation.setStatus('current')
sFPPortAllocation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("dataOnly", 1), ("dataandInBandManagement", 2), ("outofBandLocalManagement", 3), ("outofBandRemoteManagement", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFPPortAllocation.setStatus('current')
dataPortPauseFrames = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tunnel", 0), ("discard", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortPauseFrames.setStatus('current')
sFPPortAutoNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFPPortAutoNegotiation.setStatus('current')
sFPPortAutoNegAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 33), Bits().clone(namedValues=NamedValues(("negInvalid", 2), ("neg10MbpsHalfDuplex", 3), ("neg10MbpsFullDuplex", 4), ("neg100MbpsHalfDuplex", 5), ("neg100MbpsFullDuplex", 6), ("neg1000MbpsFullDuplex", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFPPortAutoNegAdvertisement.setStatus('current')
sFPPortAutoMdix = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFPPortAutoMdix.setStatus('current')
sFPPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("copperLinkUp", 1), ("fiberLinkUp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFPPortStatus.setStatus('current')
sFPPortSpeedAndDuplex = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("speed1000MbpsFullDuplex", 0), ("speed100MbpsFullDuplex", 1), ("speed100MbpsHalfDuplex", 2), ("speed10MbpsFullDuplex", 3), ("speed10MbpsHalfDuplex", 4), ("speedUnknown6", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFPPortSpeedAndDuplex.setStatus('current')
auxPortPowerOverEthernetOutput = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxPortPowerOverEthernetOutput.setStatus('current')
auxPortPowerOverEthernetOutputStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("poEOutputOn", 0), ("poEOutputDisabled", 1), ("poEOutputEnabledbutNotActiveErrororNoLoadPresent", 2), ("poEOutputOverloadError", 3), ("poEOutputOverTempError", 4), ("poEOutputErrorDetected", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxPortPowerOverEthernetOutputStatus.setStatus('current')
syncETracking = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("internalTDMUseOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syncETracking.setStatus('current')
syncEEquipmentClock = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("eECOption1", 0), ("eECOption2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syncEEquipmentClock.setStatus('current')
mainPSUPortQLRxOverwrite = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("disabled", 0), ("qLPRS", 1), ("qLSTU", 2), ("qLPRC", 3), ("qLST2", 4), ("qLSSUAQLTNC", 5), ("qLSSUB", 6), ("qLST3E", 7), ("qLEEC2QLST3", 8), ("qLEEC1QLSEC", 9), ("qLSMC", 10), ("qLPROV", 11), ("qLDNUQLDUS", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainPSUPortQLRxOverwrite.setStatus('current')
mainPSUPortSSMTx = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainPSUPortSSMTx.setStatus('current')
sFPPortSSMTx = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sFPPortSSMTx.setStatus('current')
auxPortSSMTx = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auxPortSSMTx.setStatus('current')
syncETrackingState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 0), ("acquiringWirelessLock", 1), ("freeRunning", 2), ("lockedLocalAcquiringHoldover", 3), ("lockedLocalHoldoverAcquired", 4), ("holdover", 5), ("lockedRemoteAcquiringHoldover", 6), ("lockedRemoteHoldoverAcquired", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syncETrackingState.setStatus('current')
mainPSUPortQLRx = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 0), ("qLPRS", 1), ("qLSTU", 2), ("qLPRC", 3), ("qLST2", 4), ("qLSSUAQLTNC", 5), ("qLSSUB", 6), ("qLST3E", 7), ("qLEEC2QLST3", 8), ("qLEEC1QLSEC", 9), ("qLSMC", 10), ("qLPROV", 11), ("qLDNUQLDUS", 12), ("qLFAILED", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainPSUPortQLRx.setStatus('current')
auxPortQLRx = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 0), ("qLPRS", 1), ("qLSTU", 2), ("qLPRC", 3), ("qLST2", 4), ("qLSSUAQLTNC", 5), ("qLSSUB", 6), ("qLST3E", 7), ("qLEEC2QLST3", 8), ("qLEEC1QLSEC", 9), ("qLSMC", 10), ("qLPROV", 11), ("qLDNUQLDUS", 12), ("qLFAILED", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxPortQLRx.setStatus('current')
sFPPortQLRx = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 0), ("qLPRS", 1), ("qLSTU", 2), ("qLPRC", 3), ("qLST2", 4), ("qLSSUAQLTNC", 5), ("qLSSUB", 6), ("qLST3E", 7), ("qLEEC2QLST3", 8), ("qLEEC1QLSEC", 9), ("qLSMC", 10), ("qLPROV", 11), ("qLDNUQLDUS", 12), ("qLFAILED", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFPPortQLRx.setStatus('current')
mainPSUPortQLTx = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 0), ("qLPRS", 1), ("qLSTU", 2), ("qLPRC", 3), ("qLST2", 4), ("qLSSUAQLTNC", 5), ("qLSSUB", 6), ("qLST3E", 7), ("qLEEC2QLST3", 8), ("qLEEC1QLSEC", 9), ("qLSMC", 10), ("qLPROV", 11), ("qLDNUQLDUS", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainPSUPortQLTx.setStatus('current')
auxPortQLTx = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 0), ("qLPRS", 1), ("qLSTU", 2), ("qLPRC", 3), ("qLST2", 4), ("qLSSUAQLTNC", 5), ("qLSSUB", 6), ("qLST3E", 7), ("qLEEC2QLST3", 8), ("qLEEC1QLSEC", 9), ("qLSMC", 10), ("qLPROV", 11), ("qLDNUQLDUS", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxPortQLTx.setStatus('current')
sFPPortQLTx = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 0), ("qLPRS", 1), ("qLSTU", 2), ("qLPRC", 3), ("qLST2", 4), ("qLSSUAQLTNC", 5), ("qLSSUB", 6), ("qLST3E", 7), ("qLEEC2QLST3", 8), ("qLEEC1QLSEC", 9), ("qLSMC", 10), ("qLPROV", 11), ("qLDNUQLDUS", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFPPortQLTx.setStatus('current')
mainPSUPortSyncEMasterSlaveStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("master", 0), ("slave", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainPSUPortSyncEMasterSlaveStatus.setStatus('current')
auxPortSyncEMasterSlaveStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("master", 0), ("slave", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxPortSyncEMasterSlaveStatus.setStatus('current')
sFPPortSyncEMasterSlaveStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("master", 0), ("slave", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFPPortSyncEMasterSlaveStatus.setStatus('current')
mainPSUPortGigabitMasterSlaveStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("master", 0), ("slave", 1), ("notApplicable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainPSUPortGigabitMasterSlaveStatus.setStatus('current')
auxPortGigabitMasterSlaveStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("master", 0), ("slave", 1), ("notApplicable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxPortGigabitMasterSlaveStatus.setStatus('current')
sFPPortGigabitMasterSlaveStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("master", 0), ("slave", 1), ("notApplicable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFPPortGigabitMasterSlaveStatus.setStatus('current')
transparentClock = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transparentClock.setStatus('current')
transparentClockVLAN = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("all", 0), ("sTagged", 1), ("cTagged", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transparentClockVLAN.setStatus('current')
transparentClockVID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transparentClockVID.setStatus('current')
mainPSUPortAcceptedQLRx = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 0), ("qLPRS", 1), ("qLSTU", 2), ("qLPRC", 3), ("qLST2", 4), ("qLSSUAQLTNC", 5), ("qLSSUB", 6), ("qLST3E", 7), ("qLEEC2QLST3", 8), ("qLEEC1QLSEC", 9), ("qLSMC", 10), ("qLPROV", 11), ("qLDNUQLDUS", 12), ("qLFAILED", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainPSUPortAcceptedQLRx.setStatus('current')
auxPortAcceptedQLRx = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 0), ("qLPRS", 1), ("qLSTU", 2), ("qLPRC", 3), ("qLST2", 4), ("qLSSUAQLTNC", 5), ("qLSSUB", 6), ("qLST3E", 7), ("qLEEC2QLST3", 8), ("qLEEC1QLSEC", 9), ("qLSMC", 10), ("qLPROV", 11), ("qLDNUQLDUS", 12), ("qLFAILED", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxPortAcceptedQLRx.setStatus('current')
sFPPortAcceptedQLRx = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 0), ("qLPRS", 1), ("qLSTU", 2), ("qLPRC", 3), ("qLST2", 4), ("qLSSUAQLTNC", 5), ("qLSSUB", 6), ("qLST3E", 7), ("qLEEC2QLST3", 8), ("qLEEC1QLSEC", 9), ("qLSMC", 10), ("qLPROV", 11), ("qLDNUQLDUS", 12), ("qLFAILED", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFPPortAcceptedQLRx.setStatus('current')
mainPSUPortSyncERxStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("good", 0), ("waittoRestore", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainPSUPortSyncERxStatus.setStatus('current')
auxPortSyncERxStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("good", 0), ("waittoRestore", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxPortSyncERxStatus.setStatus('current')
sFPPortSyncERxStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("good", 0), ("waittoRestore", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFPPortSyncERxStatus.setStatus('current')
nIDULanPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("copperLinkUp", 1), ("fiberLinkUp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nIDULanPortStatus.setStatus('current')
nIDULanPortSpeedAndDuplex = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("speed1000MbpsFullDuplex", 0), ("speed100MbpsFullDuplex", 1), ("speed100MbpsHalfDuplex", 2), ("speed10MbpsFullDuplex", 3), ("speed10MbpsHalfDuplex", 4), ("speedUnknown6", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nIDULanPortSpeedAndDuplex.setStatus('current')
oOBPriorityQueueMapping = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oOBPriorityQueueMapping.setStatus('current')
nIDULanPortAutoNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nIDULanPortAutoNegotiation.setStatus('current')
nIDULanPortAutoNegAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 71), Bits().clone(namedValues=NamedValues(("negInvalid", 2), ("neg10MbpsHalfDuplex", 3), ("neg10MbpsFullDuplex", 4), ("neg100MbpsHalfDuplex", 5), ("neg100MbpsFullDuplex", 6), ("neg1000MbpsFullDuplex", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nIDULanPortAutoNegAdvertisement.setStatus('current')
nIDULanPortAutoMdix = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nIDULanPortAutoMdix.setStatus('current')
nIDULanPortGigabitMasterSlaveStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("master", 0), ("slave", 1), ("notApplicable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nIDULanPortGigabitMasterSlaveStatus.setStatus('current')
txMABFrames = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMABFrames.setStatus('current')
managementNetworkAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementNetworkAccessEnabled.setStatus('current')
transparentClockPort = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("mainPSU", 0), ("aux", 1), ("sFP", 2), ("mainPSUplusAux", 3), ("mainPSUplusSFP", 4), ("auxplusSFP", 5), ("mainPSUplusAuxplusSFP", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transparentClockPort.setStatus('current')
syncESlavePort = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mainPSUPort", 0), ("sFPPort", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syncESlavePort.setStatus('current')
sFPPortQLRxOverwrite = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("disabled", 0), ("qLPRS", 1), ("qLSTU", 2), ("qLPRC", 3), ("qLST2", 4), ("qLSSUAQLTNC", 5), ("qLSSUB", 6), ("qLST3E", 7), ("qLEEC2QLST3", 8), ("qLEEC1QLSEC", 9), ("qLSMC", 10), ("qLPROV", 11), ("qLDNUQLDUS", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sFPPortQLRxOverwrite.setStatus('current')
ethernetInstancedTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInstancedTableNumber.setStatus('current')
ethernetStatisticsTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 6, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetStatisticsTableNumber.setStatus('current')
ethernetPriorityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 6, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("p0", 1), ("p1", 2), ("p2", 3), ("p3", 4), ("p4", 5), ("p5", 6), ("p6", 7), ("p7", 8), ("untagged", 9))))
if mibBuilder.loadTexts: ethernetPriorityTableIndex.setStatus('current')
ethernetPriorityQueueMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 6, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetPriorityQueueMapping.setStatus('current')
l2CPPriorityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 6, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("bridge", 1), ("mRP", 2), ("cFM", 3), ("rAPS", 4), ("eAPS", 5), ("pPPoEDiscoveryLCP", 6))))
if mibBuilder.loadTexts: l2CPPriorityTableIndex.setStatus('current')
l2CPPriorityQueueMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 6, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2CPPriorityQueueMapping.setStatus('current')
iPDSCPPriorityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 6, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: iPDSCPPriorityTableIndex.setStatus('current')
iPDSCPPriorityQueueMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 6, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPDSCPPriorityQueueMapping.setStatus('current')
mPLSTCPriorityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 6, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: mPLSTCPriorityTableIndex.setStatus('current')
mPLSTCPriorityQueueMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 6, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mPLSTCPriorityQueueMapping.setStatus('current')
ethernetInstancedTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 6, 85, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: ethernetInstancedTableIndex.setStatus('current')
dataBridgingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 6, 85, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataBridgingStatus.setStatus('current')
ethernetStatisticsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 6, 87, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: ethernetStatisticsTableIndex.setStatus('current')
ethernetStatisticsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 6, 87, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetStatisticsDataSource.setStatus('current')
ethernetStatisticsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 6, 87, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetStatisticsRxOctets.setStatus('current')
ethernetStatisticsRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 6, 87, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetStatisticsRxFrames.setStatus('current')
ethernetStatisticsRxBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 6, 87, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetStatisticsRxBroadcasts.setStatus('current')
ethernetStatisticsRxFramesWithError = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 6, 87, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetStatisticsRxFramesWithError.setStatus('current')
ethernetStatisticsRxFramesUndersize = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 6, 87, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetStatisticsRxFramesUndersize.setStatus('current')
ethernetStatisticsRxFramesOversize = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 6, 87, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetStatisticsRxFramesOversize.setStatus('current')
ethernetStatisticsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 6, 87, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetStatisticsTxOctets.setStatus('current')
ethernetStatisticsTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 6, 87, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetStatisticsTxFrames.setStatus('current')
ethernetStatisticsTxBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 6, 87, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetStatisticsTxBroadcasts.setStatus('current')
tDMInterfaceControl = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("e1", 1), ("t1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDMInterfaceControl.setStatus('current')
tDMInterfaceStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("connectedNotConfigured", 1), ("notConnected", 2), ("nIDUdetectedonAUXport", 3), ("error", 4), ("codeDownloadInProgress", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDMInterfaceStatus.setStatus('current')
tDMEnabledChannels = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDMEnabledChannels.setStatus('current')
tdmTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmTableNumber.setStatus('current')
tDMConfigurationMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("linetypemismatch", 1), ("enabledchannelsmismatch", 2), ("linetypeandenabledchannelsmismatch", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDMConfigurationMismatch.setStatus('current')
lowestTDMModulationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("modAcquisition", 0), ("modBpsk63percent", 1), ("modQpsk63percentSingle", 2), ("modTransient1", 3), ("modQpsk87percentSingle", 4), ("modTransient2", 5), ("mod16qam63percentSingleA", 6), ("modTransient3", 7), ("mod16qam87percentSingle", 8), ("modTransient4", 9), ("mod64qam75percentSingle", 10), ("modTransient5", 11), ("mod64qam92percentSingle", 12), ("modTransient6", 13), ("mod256qam81percentSingle", 14), ("mod16qam63percentSingleB", 15), ("mod16qam63percentDual", 16), ("modTransient7", 17), ("mod16qam87percentDual", 18), ("modTransient8", 19), ("mod64qam75percentDual", 20), ("modTransient9", 21), ("mod64qam92percentDual", 22), ("modTransient10", 23), ("mod256qam81percentDual", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lowestTDMModulationMode.setStatus('current')
tdmTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tdmTableIndex.setStatus('current')
tDMChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 0), ("noSignalLocal", 1), ("noSignalRemote", 2), ("noSignalLocalandRemote", 3), ("remoteTiming", 4), ("noSignalLocalandRemoteTiming", 5), ("disabled", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDMChannelStatus.setStatus('current')
tDMChannelLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 7, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("aMI", 0), ("b8ZSorHDB3", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDMChannelLineCode.setStatus('current')
tDMChannelCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 7, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("feet133", 0), ("feet266", 1), ("feet399", 2), ("feet533", 3), ("feet655", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDMChannelCableLength.setStatus('current')
tDMChannelLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 7, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("copper", 1), ("wireless", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDMChannelLoopback.setStatus('current')
regulatoryBand = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255))).clone(namedValues=NamedValues(("regInvalid", 0), ("reg158GHz", 1), ("reg258GHz", 2), ("reg358GHz", 3), ("reg458GHzWithRTTT", 4), ("reg558GHz", 5), ("reg658GHz", 6), ("reg754GHz", 7), ("reg854GHz", 8), ("reg954GHz", 9), ("reg1058GHz", 10), ("reg1158GHz", 11), ("reg1254GHz", 12), ("reg1354GHz", 13), ("reg1449GHzPublicSafety", 14), ("reg15", 15), ("reg1659GHz", 16), ("reg1759GHz", 17), ("reg1849GHzPublicSafety", 18), ("reg1958GHz", 19), ("reg2054GHz", 20), ("reg2154GHz", 21), ("reg2258GHz", 22), ("reg23", 23), ("reg2458GHz", 24), ("reg2558GHz", 25), ("reg2654GHz", 26), ("reg2758GHz", 27), ("reg2858GHz", 28), ("reg2958GHz", 29), ("reg3054GHz", 30), ("reg3158GHz", 31), ("reg3249GHzLicensed", 32), ("reg3349GHzETSIBroadbandDisasterRelief", 33), ("reg3458GHz", 34), ("reg3558GHz", 35), ("reg3654GHz", 36), ("reg3758GHz", 37), ("reg3852GHz", 38), ("reg3951GHzETSIBroadbandDisasterRelief", 39), ("reg4054GHz", 40), ("reg4154GHz", 41), ("reg4254GHz", 42), ("reg4354GHz", 43), ("reg4458GHz", 44), ("reg4558GHz", 45), ("reg4658GHz", 46), ("reg4758GHz", 47), ("reg4858GHz", 48), ("reg4958GHz", 49), ("reg5058GHz", 50), ("reg5158GHz", 51), ("reg5258GHz", 52), ("reg5358GHz", 53), ("reg5458GHz", 54), ("reg5558GHz", 55), ("reg5654GHz", 56), ("reg5754GHz", 57), ("reg5858GHz", 58), ("reg5958GHz", 59), ("reg6058GHz", 60), ("reg6149GHz", 61), ("reg6251GHz52GHz", 62), ("reg6352GHz", 63), ("reg6451GHz", 64), ("reg6551GHz", 65), ("reg6651GHz", 66), ("reg6752GHz", 67), ("reg6852GHz", 68), ("reg6952GHz", 69), ("reg7052GHz", 70), ("reg7152GHz", 71), ("reg7252GHz", 72), ("reg7352GHz", 73), ("reg7452GHz", 74), ("reg7552GHz", 75), ("reg7652GHz", 76), ("reg7752GHz", 77), ("reg7849GHz", 78), ("reg7954GHz", 79), ("reg8049GHz", 80), ("reg8147GHz", 81), ("reg8247GHz", 82), ("reg8352GHz", 83), ("reg8451GHz", 84), ("reg8551GHz52GHz", 85), ("reg8652GHz54GHz", 86), ("reg8758GHz", 87), ("reg8849GHz", 88), ("reg8949GHz", 89), ("reg9054GHzParabolicantenna", 90), ("reg9152GHzParabolicantenna", 91), ("reg9251GHzParabolicantenna", 92), ("reg9349GHz", 93), ("reg9449GHz", 94), ("reg9545GHz", 95), ("reg9648GHz", 96), ("reg9752GHz", 97), ("reg9849GHz27dBiantenna", 98), ("reg9949GHz29dBiantenna", 99), ("reg10048GHz", 100), ("reg10158GHz", 101), ("reg102", 102), ("reg103", 103), ("reg10458GHzNoRTTT", 104), ("reg105", 105), ("reg106", 106), ("reg107", 107), ("reg108", 108), ("reg109", 109), ("reg110", 110), ("reg111", 111), ("reg112", 112), ("reg113", 113), ("reg114", 114), ("reg115", 115), ("reg116", 116), ("reg117", 117), ("reg118", 118), ("reg119", 119), ("reg120", 120), ("reg121", 121), ("reg122", 122), ("reg123", 123), ("reg124", 124), ("reg125", 125), ("reg126", 126), ("reg127", 127), ("reg128", 128), ("reg129", 129), ("reg130", 130), ("reg131", 131), ("reg132", 132), ("reg133", 133), ("reg134", 134), ("reg135", 135), ("reg136", 136), ("reg137", 137), ("reg138", 138), ("reg139", 139), ("reg140", 140), ("reg141", 141), ("reg142", 142), ("reg143", 143), ("reg144", 144), ("reg145", 145), ("reg146", 146), ("reg147", 147), ("reg148", 148), ("reg149", 149), ("reg150", 150), ("reg151", 151), ("reg152", 152), ("reg153", 153), ("reg154", 154), ("reg155", 155), ("reg156", 156), ("reg157", 157), ("reg158", 158), ("reg159", 159), ("reg160", 160), ("reg161", 161), ("reg162", 162), ("reg163", 163), ("reg164", 164), ("reg165", 165), ("reg166", 166), ("reg167", 167), ("reg168", 168), ("reg169", 169), ("reg170", 170), ("reg171", 171), ("reg172", 172), ("reg173", 173), ("reg174", 174), ("reg175", 175), ("reg176", 176), ("reg177", 177), ("reg178", 178), ("reg179", 179), ("reg180", 180), ("reg181", 181), ("reg182", 182), ("reg183", 183), ("reg184", 184), ("reg185", 185), ("reg186", 186), ("reg187", 187), ("reg188", 188), ("reg189", 189), ("reg190", 190), ("reg191", 191), ("reg192", 192), ("reg193", 193), ("reg194", 194), ("reg195", 195), ("reg196", 196), ("reg197", 197), ("reg198", 198), ("reg199", 199), ("reg200", 200), ("reg201", 201), ("reg202", 202), ("reg203", 203), ("reg204", 204), ("reg205", 205), ("reg206", 206), ("reg207", 207), ("reg208", 208), ("reg209", 209), ("reg210", 210), ("reg211", 211), ("reg212", 212), ("reg213", 213), ("reg214", 214), ("reg215", 215), ("reg216", 216), ("reg217", 217), ("reg218", 218), ("reg219", 219), ("reg220", 220), ("reg221", 221), ("reg222", 222), ("reg223", 223), ("reg224", 224), ("reg225", 225), ("reg226", 226), ("reg227", 227), ("reg228", 228), ("reg229", 229), ("reg230", 230), ("reg231", 231), ("reg232", 232), ("reg233", 233), ("reg234", 234), ("reg235", 235), ("reg236", 236), ("reg237", 237), ("reg238", 238), ("reg239", 239), ("reg240", 240), ("reg241", 241), ("reg242", 242), ("reg243", 243), ("reg244", 244), ("reg245", 245), ("reg246", 246), ("reg247", 247), ("reg248", 248), ("reg249", 249), ("reg250", 250), ("reg251", 251), ("reg252", 252), ("reg253", 253), ("reg254", 254)) + NamedValues(("reg255", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: regulatoryBand.setStatus('current')
productVariant = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("pTPxx400Full", 0), ("pTPxx400Deprecated1", 1), ("pTPxx400Deprecated2", 2), ("pTPxx400Lite", 3), ("spare1", 4), ("pTPxx300", 5), ("spare2", 6), ("spare3", 7), ("pTPxx500FullDeprecated", 8), ("pTPxx500LiteDeprecated", 9), ("pTPxx500", 10), ("pTPxx600Lite", 11), ("pTPxx600Full", 12), ("pTPxx650", 13), ("pMP455", 14), ("pTP800", 15), ("pMPMedusa", 16), ("pTPxx700", 17), ("pTP50670", 18), ("pTP50670ATEX", 19), ("pTP48670", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVariant.setStatus('current')
productName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productName.setStatus('current')
frequencyVariant = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("freq50XXX", 0), ("freq45XXX", 1), ("freq48XXX", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequencyVariant.setStatus('current')
sNMPv3Enable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPv3Enable.setStatus('current')
licenseVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseVersion.setStatus('current')
licenseUnitSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseUnitSerialNumber.setStatus('current')
licenseIssueNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseIssueNumber.setStatus('current')
licenseCountry = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 103))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseCountry.setStatus('current')
licenseNumberOfRegulatoryBands = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseNumberOfRegulatoryBands.setStatus('current')
licenseBandwidthCap = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseBandwidthCap.setStatus('current')
licenseEncryption = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("aES128bit", 1), ("aES192bit", 2), ("aES256bit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseEncryption.setStatus('current')
licenseSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("fIPS", 1), ("uCAPL", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseSecurityLevel.setStatus('current')
licenseGroupAccess = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseGroupAccess.setStatus('current')
licenseOOBManagementSupport = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseOOBManagementSupport.setStatus('current')
licenseSFPPortSupport = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseSFPPortSupport.setStatus('current')
licenseAuxiliaryPortSupport = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseAuxiliaryPortSupport.setStatus('current')
licenseCapacity = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("full", 0), ("mid", 1), ("lite", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseCapacity.setStatus('current')
licenseMaxNumberOfTDMChannels = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseMaxNumberOfTDMChannels.setStatus('current')
licenseIEEE1588Support = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseIEEE1588Support.setStatus('current')
licenseSyncESupport = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseSyncESupport.setStatus('current')
licenseIPv6Support = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseIPv6Support.setStatus('current')
licenseMinimumFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseMinimumFirmwareVersion.setStatus('current')
licenseFullCapabilityTrialStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("available", 0), ("active", 1), ("inactive", 2), ("expired", 3), ("unavailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFullCapabilityTrialStatus.setStatus('current')
licenseRemainingTrialPeriod = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31536000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseRemainingTrialPeriod.setStatus('current')
licenseRemainingTrialPeriodAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("fullCapabilityTrialNotActiveOrMoreThan7DaysRemaining", 0), ("fullCapabilityTrialExpiringInLessThan7Days", 1), ("fullCapabilityTrialExpiringInLessThan6Days", 2), ("fullCapabilityTrialExpiringInLessThan5Days", 3), ("fullCapabilityTrialExpiringInLessThan4Days", 4), ("fullCapabilityTrialExpiringInLessThan3Days", 5), ("fullCapabilityTrialExpiringInLessThan2Days", 6), ("fullCapabilityTrialExpiringInLessThan1Day", 7), ("fullCapabilityTrialHasExpired", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseRemainingTrialPeriodAlarm.setStatus('current')
capacityVariantMismatchLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noError", 0), ("mismatchDetected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: capacityVariantMismatchLinked.setStatus('current')
licenseTDDSyncSupport = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseTDDSyncSupport.setStatus('current')
licenseMaxLinkRange = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2499))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseMaxLinkRange.setStatus('current')
licenseTrialPeriod = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseTrialPeriod.setStatus('current')
licenseRARSupport = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("mAB", 1), ("dLEP", 2), ("mABandDLEP", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseRARSupport.setStatus('current')
licenseGasGroup = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("nonHAZLOCUnit", 0), ("gasGroupA", 1), ("gasGroupB", 2), ("gasGroupC", 3), ("gasGroupD", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseGasGroup.setStatus('current')
licenseLongMinimumFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseLongMinimumFirmwareVersion.setStatus('current')
licenseHCMPSupport = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("slaveEnabled", 1), ("masterEnabled", 2), ("masterandSlaveEnabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseHCMPSupport.setStatus('current')
licenseInstancedTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseInstancedTableNumber.setStatus('current')
licenseTLSRekey = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseTLSRekey.setStatus('current')
licenseAdvanceHCMPSupport = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("slaveEnabled", 1), ("masterEnabled", 2), ("masterandSlaveEnabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseAdvanceHCMPSupport.setStatus('current')
licenseMinFirmwareVersionPTP650Emulation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 8, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseMinFirmwareVersionPTP650Emulation.setStatus('current')
licenseInstancedTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 8, 45, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: licenseInstancedTableIndex.setStatus('current')
capacityVariantMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 8, 45, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noError", 0), ("mismatchDetected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: capacityVariantMismatch.setStatus('current')
licenseRegulatoryBandsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 8, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: licenseRegulatoryBandsTableIndex.setStatus('current')
licenseRegulatoryBandsList = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 8, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255))).clone(namedValues=NamedValues(("regInvalid", 0), ("reg158GHz", 1), ("reg258GHz", 2), ("reg358GHz", 3), ("reg458GHzWithRTTT", 4), ("reg558GHz", 5), ("reg658GHz", 6), ("reg754GHz", 7), ("reg854GHz", 8), ("reg954GHz", 9), ("reg1058GHz", 10), ("reg1158GHz", 11), ("reg1254GHz", 12), ("reg1354GHz", 13), ("reg1449GHzPublicSafety", 14), ("reg15", 15), ("reg1659GHz", 16), ("reg1759GHz", 17), ("reg1849GHzPublicSafety", 18), ("reg1958GHz", 19), ("reg2054GHz", 20), ("reg2154GHz", 21), ("reg2258GHz", 22), ("reg23", 23), ("reg2458GHz", 24), ("reg2558GHz", 25), ("reg2654GHz", 26), ("reg2758GHz", 27), ("reg2858GHz", 28), ("reg2958GHz", 29), ("reg3054GHz", 30), ("reg3158GHz", 31), ("reg3249GHzLicensed", 32), ("reg3349GHzETSIBroadbandDisasterRelief", 33), ("reg3458GHz", 34), ("reg3558GHz", 35), ("reg3654GHz", 36), ("reg3758GHz", 37), ("reg3852GHz", 38), ("reg3951GHzETSIBroadbandDisasterRelief", 39), ("reg4054GHz", 40), ("reg4154GHz", 41), ("reg4254GHz", 42), ("reg4354GHz", 43), ("reg4458GHz", 44), ("reg4558GHz", 45), ("reg4658GHz", 46), ("reg4758GHz", 47), ("reg4858GHz", 48), ("reg4958GHz", 49), ("reg5058GHz", 50), ("reg5158GHz", 51), ("reg5258GHz", 52), ("reg5358GHz", 53), ("reg5458GHz", 54), ("reg5558GHz", 55), ("reg5654GHz", 56), ("reg5754GHz", 57), ("reg5858GHz", 58), ("reg5958GHz", 59), ("reg6058GHz", 60), ("reg6149GHz", 61), ("reg6251GHz52GHz", 62), ("reg6352GHz", 63), ("reg6451GHz", 64), ("reg6551GHz", 65), ("reg6651GHz", 66), ("reg6752GHz", 67), ("reg6852GHz", 68), ("reg6952GHz", 69), ("reg7052GHz", 70), ("reg7152GHz", 71), ("reg7252GHz", 72), ("reg7352GHz", 73), ("reg7452GHz", 74), ("reg7552GHz", 75), ("reg7652GHz", 76), ("reg7752GHz", 77), ("reg7849GHz", 78), ("reg7954GHz", 79), ("reg8049GHz", 80), ("reg8147GHz", 81), ("reg8247GHz", 82), ("reg8352GHz", 83), ("reg8451GHz", 84), ("reg8551GHz52GHz", 85), ("reg8652GHz54GHz", 86), ("reg8758GHz", 87), ("reg8849GHz", 88), ("reg8949GHz", 89), ("reg9054GHzParabolicantenna", 90), ("reg9152GHzParabolicantenna", 91), ("reg9251GHzParabolicantenna", 92), ("reg9349GHz", 93), ("reg9449GHz", 94), ("reg9545GHz", 95), ("reg9648GHz", 96), ("reg9752GHz", 97), ("reg9849GHz27dBiantenna", 98), ("reg9949GHz29dBiantenna", 99), ("reg10048GHz", 100), ("reg10158GHz", 101), ("reg102", 102), ("reg103", 103), ("reg10458GHzNoRTTT", 104), ("reg105", 105), ("reg106", 106), ("reg107", 107), ("reg108", 108), ("reg109", 109), ("reg110", 110), ("reg111", 111), ("reg112", 112), ("reg113", 113), ("reg114", 114), ("reg115", 115), ("reg116", 116), ("reg117", 117), ("reg118", 118), ("reg119", 119), ("reg120", 120), ("reg121", 121), ("reg122", 122), ("reg123", 123), ("reg124", 124), ("reg125", 125), ("reg126", 126), ("reg127", 127), ("reg128", 128), ("reg129", 129), ("reg130", 130), ("reg131", 131), ("reg132", 132), ("reg133", 133), ("reg134", 134), ("reg135", 135), ("reg136", 136), ("reg137", 137), ("reg138", 138), ("reg139", 139), ("reg140", 140), ("reg141", 141), ("reg142", 142), ("reg143", 143), ("reg144", 144), ("reg145", 145), ("reg146", 146), ("reg147", 147), ("reg148", 148), ("reg149", 149), ("reg150", 150), ("reg151", 151), ("reg152", 152), ("reg153", 153), ("reg154", 154), ("reg155", 155), ("reg156", 156), ("reg157", 157), ("reg158", 158), ("reg159", 159), ("reg160", 160), ("reg161", 161), ("reg162", 162), ("reg163", 163), ("reg164", 164), ("reg165", 165), ("reg166", 166), ("reg167", 167), ("reg168", 168), ("reg169", 169), ("reg170", 170), ("reg171", 171), ("reg172", 172), ("reg173", 173), ("reg174", 174), ("reg175", 175), ("reg176", 176), ("reg177", 177), ("reg178", 178), ("reg179", 179), ("reg180", 180), ("reg181", 181), ("reg182", 182), ("reg183", 183), ("reg184", 184), ("reg185", 185), ("reg186", 186), ("reg187", 187), ("reg188", 188), ("reg189", 189), ("reg190", 190), ("reg191", 191), ("reg192", 192), ("reg193", 193), ("reg194", 194), ("reg195", 195), ("reg196", 196), ("reg197", 197), ("reg198", 198), ("reg199", 199), ("reg200", 200), ("reg201", 201), ("reg202", 202), ("reg203", 203), ("reg204", 204), ("reg205", 205), ("reg206", 206), ("reg207", 207), ("reg208", 208), ("reg209", 209), ("reg210", 210), ("reg211", 211), ("reg212", 212), ("reg213", 213), ("reg214", 214), ("reg215", 215), ("reg216", 216), ("reg217", 217), ("reg218", 218), ("reg219", 219), ("reg220", 220), ("reg221", 221), ("reg222", 222), ("reg223", 223), ("reg224", 224), ("reg225", 225), ("reg226", 226), ("reg227", 227), ("reg228", 228), ("reg229", 229), ("reg230", 230), ("reg231", 231), ("reg232", 232), ("reg233", 233), ("reg234", 234), ("reg235", 235), ("reg236", 236), ("reg237", 237), ("reg238", 238), ("reg239", 239), ("reg240", 240), ("reg241", 241), ("reg242", 242), ("reg243", 243), ("reg244", 244), ("reg245", 245), ("reg246", 246), ("reg247", 247), ("reg248", 248), ("reg249", 249), ("reg250", 250), ("reg251", 251), ("reg252", 252), ("reg253", 253), ("reg254", 254)) + NamedValues(("reg255", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseRegulatoryBandsList.setStatus('current')
targetRange = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetRange.setStatus('current')
rangingMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("auto0to40km", 0), ("auto0to100km", 1), ("auto0to200km", 2), ("auto0to250km", 3), ("targetRange", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rangingMode.setStatus('current')
installStatusLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("wrongPeer", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: installStatusLinked.setStatus('current')
installArmState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disarmed", 0), ("armed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: installArmState.setStatus('current')
tFTPServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPServerPortNumber.setStatus('current')
tFTPSoftwareUpgradeFileName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeFileName.setStatus('current')
tFTPStartSoftwareUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPStartSoftwareUpgrade.setStatus('current')
tFTPSoftwareUpgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 0), ("uploadinprogress", 1), ("uploadsuccessfulprogrammingFLASH", 2), ("upgradesuccessfulreboottorunthenewsoftwareimage", 3), ("upgradefailed", 4), ("upgradewarning", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatus.setStatus('current')
tFTPSoftwareUpgradeStatusText = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusText.setStatus('current')
tFTPSoftwareUpgradeStatusAdditionalText = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusAdditionalText.setStatus('current')
hTTPAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPAccessEnabled.setStatus('current')
telnetAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetAccessEnabled.setStatus('current')
hTTPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPPortNumber.setStatus('current')
hTTPSPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPSPortNumber.setStatus('current')
telnetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortNumber.setStatus('current')
hTTPSAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPSAccessEnabled.setStatus('current')
tFTPServerInternetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("unknown6", 5), ("unknown7", 6), ("unknown8", 7), ("unknown9", 8), ("unknown10", 9), ("unknown11", 10), ("unknown12", 11), ("unknown13", 12), ("unknown14", 13), ("unknown15", 14), ("unknown16", 15), ("dns", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPServerInternetAddressType.setStatus('current')
tFTPServerInternetAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 19), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPServerInternetAddress.setStatus('current')
lowestDataModulationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("modAcquisition", 0), ("modBpsk63percent", 1), ("modQpsk63percentSingle", 2), ("modTransient1", 3), ("modQpsk87percentSingle", 4), ("modTransient2", 5), ("mod16qam63percentSingleA", 6), ("modTransient3", 7), ("mod16qam87percentSingle", 8), ("modTransient4", 9), ("mod64qam75percentSingle", 10), ("modTransient5", 11), ("mod64qam92percentSingle", 12), ("modTransient6", 13), ("mod256qam81percentSingle", 14), ("mod16qam63percentSingleB", 15), ("mod16qam63percentDual", 16), ("modTransient7", 17), ("mod16qam87percentDual", 18), ("modTransient8", 19), ("mod64qam75percentDual", 20), ("modTransient9", 21), ("mod64qam92percentDual", 22), ("modTransient10", 23), ("mod256qam81percentDual", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lowestDataModulationMode.setStatus('current')
tFTPClient = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPClient.setStatus('current')
mgmtInstancedTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtInstancedTableNumber.setStatus('current')
tFTPServerResolvedInternetAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPServerResolvedInternetAddress.setStatus('current')
installationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 9, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("armWithTones", 0), ("armWithoutTones", 1), ("changeConfigWithoutArming", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: installationMode.setStatus('current')
mgmtInstancedTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 9, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: mgmtInstancedTableIndex.setStatus('current')
installStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 9, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("wrongPeer", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: installStatus.setStatus('current')
linkSymmetry = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("symmetryAdaptive", 0), ("symmetry2to1", 1), ("symmetry1to1", 2), ("symmetry1to2", 3), ("symmetry3to1", 4), ("symmetry1to3", 5), ("symmetry5to1", 6), ("symmetry1to5", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSymmetry.setStatus('current')
userConfiguredMaxModulationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("modBpsk63percent", 0), ("modQpsk63percent", 1), ("modQpsk87percent", 2), ("mod16qam63percent", 3), ("mod16qam87percent", 4), ("mod64qam75percent", 5), ("mod64qam92percent", 6), ("mod256qam81percent", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userConfiguredMaxModulationMode.setStatus('current')
linkModeOptimization = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("iPTraffic", 0), ("tDMTraffic", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkModeOptimization.setStatus('current')
txColorCode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("a", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txColorCode.setStatus('current')
rxColorCode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("a", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxColorCode.setStatus('current')
remoteMaximumTransmitPowerLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 10, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteMaximumTransmitPowerLinked.setStatus('current')
phyControlInstancedTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyControlInstancedTableNumber.setStatus('current')
phyControlInstancedTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 10, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: phyControlInstancedTableIndex.setStatus('current')
remoteMaximumTransmitPower = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 10, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteMaximumTransmitPower.setStatus('current')
linkLossLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkLossLinked.setStatus('current')
receivePowerLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receivePowerLinked.setStatus('current')
vectorErrorLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vectorErrorLinked.setStatus('current')
transmitPowerLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitPowerLinked.setStatus('current')
receiveChannel = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 12, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 305))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveChannel.setStatus('current')
transmitChannel = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 12, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 305))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitChannel.setStatus('current')
receiveFreqMHz = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 12, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6050))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveFreqMHz.setStatus('current')
transmitFreqMHz = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 12, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6050))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitFreqMHz.setStatus('current')
signalStrengthRatioLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 12, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalStrengthRatioLinked.setStatus('current')
receiveFreqKHz = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 12, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6050000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveFreqKHz.setStatus('current')
transmitFreqKHz = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 12, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6050000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitFreqKHz.setStatus('current')
rawReceivePowerLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 12, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rawReceivePowerLinked.setStatus('current')
rangeLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 12, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rangeLinked.setStatus('current')
receiveModulationModeLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 12, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveModulationModeLinked.setStatus('current')
transmitModulationModeLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 12, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitModulationModeLinked.setStatus('current')
searchStateLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 12, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("registering", 0), ("searching", 1), ("acquiring", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: searchStateLinked.setStatus('current')
remoteMACAddressLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 12, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteMACAddressLinked.setStatus('current')
phyInstancedStatusTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 12, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyInstancedStatusTableNumber.setStatus('current')
tempPcb = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 12, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempPcb.setStatus('current')
phyInstancedStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 12, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: phyInstancedStatusTableIndex.setStatus('current')
linkLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 12, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkLoss.setStatus('current')
receivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 12, 19, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receivePower.setStatus('current')
vectorError = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 12, 19, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vectorError.setStatus('current')
signalStrengthRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 12, 19, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalStrengthRatio.setStatus('current')
range = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 12, 19, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range.setStatus('current')
receiveModulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 12, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("modAcquisition", 0), ("modBpsk63percent", 1), ("modQpsk63percentSingle", 2), ("modTransient1", 3), ("modQpsk87percentSingle", 4), ("modTransient2", 5), ("mod16qam63percentSingleA", 6), ("modTransient3", 7), ("mod16qam87percentSingle", 8), ("modTransient4", 9), ("mod64qam75percentSingle", 10), ("modTransient5", 11), ("mod64qam92percentSingle", 12), ("modTransient6", 13), ("mod256qam81percentSingle", 14), ("mod16qam63percentSingleB", 15), ("mod16qam63percentDual", 16), ("modTransient7", 17), ("mod16qam87percentDual", 18), ("modTransient8", 19), ("mod64qam75percentDual", 20), ("modTransient9", 21), ("mod64qam92percentDual", 22), ("modTransient10", 23), ("mod256qam81percentDual", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveModulationMode.setStatus('current')
transmitModulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 12, 19, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("modAcquisition", 0), ("modBpsk63percent", 1), ("modQpsk63percentSingle", 2), ("modTransient1", 3), ("modQpsk87percentSingle", 4), ("modTransient2", 5), ("mod16qam63percentSingleA", 6), ("modTransient3", 7), ("mod16qam87percentSingle", 8), ("modTransient4", 9), ("mod64qam75percentSingle", 10), ("modTransient5", 11), ("mod64qam92percentSingle", 12), ("modTransient6", 13), ("mod256qam81percentSingle", 14), ("mod16qam63percentSingleB", 15), ("mod16qam63percentDual", 16), ("modTransient7", 17), ("mod16qam87percentDual", 18), ("modTransient8", 19), ("mod64qam75percentDual", 20), ("modTransient9", 21), ("mod64qam92percentDual", 22), ("modTransient10", 23), ("mod256qam81percentDual", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitModulationMode.setStatus('current')
searchState = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 12, 19, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("registering", 0), ("searching", 1), ("acquiring", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: searchState.setStatus('current')
remoteMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 12, 19, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteMACAddress.setStatus('current')
rawReceivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 12, 19, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rawReceivePower.setStatus('current')
transmitPower = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 12, 19, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitPower.setStatus('current')
unitOutOfCalibration = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("calibrated", 0), ("partialCalibration", 1), ("invalidCalibration", 2), ("bandwidthvariantunsupportedPAsShutdown", 3), ("outOfCalibrationPAsShutdown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitOutOfCalibration.setStatus('current')
incompatibleRegulatoryBandsLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("regOK", 0), ("regIncompatibleLicenseKeys", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: incompatibleRegulatoryBandsLinked.setStatus('current')
noWirelessChannelAvailable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("noWirelessChannelAvailable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: noWirelessChannelAvailable.setStatus('current')
wirelessLinkDisabledWarning = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("disabledBySNMPifAdminStatus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkDisabledWarning.setStatus('current')
mainPSUPortDisabledWarning = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("disabledBySNMPifAdminStatus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainPSUPortDisabledWarning.setStatus('current')
sFPError = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("installedSFPNotLicensed", 1), ("fiberLinkNotEstablishedButLOSNotDetected", 2), ("fiberLinkNotEstablishedAndLOSDetected", 3), ("installedSFPNotSupported", 4), ("sFPInitializationFailed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFPError.setStatus('current')
mainPSUPortConfigurationMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noError", 0), ("mismatchDetected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainPSUPortConfigurationMismatch.setStatus('current')
incompatibleMasterAndSlaveLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("incompatibleProductVariants", 1), ("differentSoftwareVersionsRunning", 2), ("tDDFrameConfigurationModeMismatch", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: incompatibleMasterAndSlaveLinked.setStatus('current')
tDDSynchronizationStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("locked", 0), ("holdover", 1), ("holdoverNoGPSSyncIn", 2), ("notSynchronized", 3), ("notSynchronizedNoGPSSyncIn", 4), ("pTPSYNCNotConnected", 5), ("initialising", 6), ("clusterTimingMaster", 7), ("acquiringLock", 8), ("inactive", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDDSynchronizationStatus.setStatus('current')
auxPortDisabledWarning = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("disabledBySNMPifAdminStatus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxPortDisabledWarning.setStatus('current')
tDDSynchronizationAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("synchronizationLost", 1), ("referenceSignalLost", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDDSynchronizationAlarm.setStatus('current')
linkModeOptimizationMismatchLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("linkModeOptimizationMismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkModeOptimizationMismatchLinked.setStatus('current')
auxPortConfigurationMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noError", 0), ("mismatchDetected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxPortConfigurationMismatch.setStatus('current')
secureModeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("secureModeIsActive", 0), ("secureModeIsNotConfigured", 1), ("secureModeIsConfiguredButNotActive", 2), ("secureModeIsNotSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureModeAlarm.setStatus('current')
dataBridgingStatusAlarmLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bridgingEnabled", 0), ("bridgingDisabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataBridgingStatusAlarmLinked.setStatus('current')
sFPPortDisabledWarning = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("disabledBySNMPifAdminStatus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFPPortDisabledWarning.setStatus('current')
sFPPortConfigurationMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noError", 0), ("mismatchDetected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFPPortConfigurationMismatch.setStatus('current')
maxLinkRangeExceededLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("maxLinkRangeOK", 0), ("maxLinkRangeExceeded", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxLinkRangeExceededLinked.setStatus('current')
nIDULanPortDisabledWarning = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("disabledBySNMPifAdminStatus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nIDULanPortDisabledWarning.setStatus('current')
nIDULanPortConfigurationMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noError", 0), ("mismatchDetected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nIDULanPortConfigurationMismatch.setStatus('current')
portAllocationMismatchLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("portAllocationOK", 0), ("mismatchinOutofBandRemoteManagementService", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAllocationMismatchLinked.setStatus('current')
transparentClockSourcePortAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("invalidTransparentClockSourcePort", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transparentClockSourcePortAlarm.setStatus('current')
alarmInstancedTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmInstancedTableNumber.setStatus('current')
secureLicenseSignatureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 13, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("licenseisDSA2048signed", 0), ("licenseisDSA1024signed", 1), ("licensesignaturealarmisnotrelevant", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureLicenseSignatureAlarm.setStatus('current')
alarmInstancedTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 13, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: alarmInstancedTableIndex.setStatus('current')
incompatibleMasterAndSlave = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 13, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("incompatibleProductVariants", 1), ("differentSoftwareVersionsRunning", 2), ("tDDFrameConfigurationModeMismatch", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: incompatibleMasterAndSlave.setStatus('current')
linkModeOptimizationMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 13, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("linkModeOptimizationMismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkModeOptimizationMismatch.setStatus('current')
dataBridgingStatusAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 13, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bridgingEnabled", 0), ("bridgingDisabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataBridgingStatusAlarm.setStatus('current')
maxLinkRangeExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 13, 27, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("maxLinkRangeOK", 0), ("maxLinkRangeExceeded", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxLinkRangeExceeded.setStatus('current')
portAllocationMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 13, 27, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("portAllocationOK", 0), ("mismatchinOutofBandRemoteManagementService", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAllocationMismatch.setStatus('current')
wirelessLinkStatusAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 13, 27, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("up", 0), ("down", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkStatusAlarm.setStatus('current')
incompatibleRegulatoryBands = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 13, 27, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("regOK", 0), ("regIncompatibleLicenseKeys", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: incompatibleRegulatoryBands.setStatus('current')
atpcHcmpMasterTargetRxPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 14, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, -30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atpcHcmpMasterTargetRxPower.setStatus('current')
atpcHcmpMasterTxPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atpcHcmpMasterTxPower.setStatus('current')
sMTPEmailAlert = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPEmailAlert.setStatus('current')
sMTPServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPServerPortNumber.setStatus('current')
sMTPSourceEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 15, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPSourceEmailAddress.setStatus('current')
sMTPDestinationEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 15, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPDestinationEmailAddress.setStatus('current')
sMTPEnabledMessages = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 15, 6), Bits().clone(namedValues=NamedValues(("nIDULanPortUpDown", 0), ("sFPPortUpDown", 1), ("auxPortUpDown", 2), ("mainPSUPortUpDown", 3), ("enabledDiagnosticAlarms", 4), ("dFSImpulseInterference", 5), ("channelChange", 6), ("wirelessPortUpDown", 7), ("listenBeforeTalk", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPEnabledMessages.setStatus('current')
sMTPServerInternetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 15, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("unknown6", 5), ("unknown7", 6), ("unknown8", 7), ("unknown9", 8), ("unknown10", 9), ("unknown11", 10), ("unknown12", 11), ("unknown13", 12), ("unknown14", 13), ("unknown15", 14), ("unknown16", 15), ("dns", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sMTPServerInternetAddressType.setStatus('current')
sMTPServerInternetAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 15, 8), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPServerInternetAddress.setStatus('current')
sMTPServerResolvedInternetAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 15, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sMTPServerResolvedInternetAddress.setStatus('current')
sNMPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 16, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPPortNumber.setStatus('current')
sNMPCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 16, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPCommunityString.setStatus('current')
sNMPTrapTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 16, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPTrapTableNumber.setStatus('current')
sNMPTrapVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 16, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("v1", 0), ("v2c", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapVersion.setStatus('current')
sNMPEnabledTraps = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 16, 6), Bits().clone(namedValues=NamedValues(("auxPortUpDown", 0), ("mainPSUPortUpDown", 1), ("authenticationFailure", 2), ("enabledDiagnosticAlarms", 3), ("dFSImpulseInterference", 4), ("channelChange", 5), ("wirelessPortUpDown", 6), ("coldStart", 7), ("listenBeforeTalk", 13), ("nIDULanPortUpDown", 14), ("sFPPortUpDown", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPEnabledTraps.setStatus('current')
enabledDiagnosticAlarms = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 16, 7), Bits().clone(namedValues=NamedValues(("portState", 0), ("incompatibleMasterAndSlave", 1), ("incompatibleRegulatoryBands", 2), ("maximumLinkRangeExceeded", 3), ("unitOutOfCalibration", 4), ("installArmState", 5), ("installStatus", 6), ("regulatoryBand", 7), ("syslogLocalWrapped", 8), ("syslogLocalNearlyFull", 9), ("syslogDisabledWarning", 10), ("linkModeOptimizationMismatch", 11), ("tDDSynchronizationAlarm", 12), ("wirelessLinkDisabledWarning", 13), ("sNTPSynchronizationFailed", 14), ("noWirelessChannelAvailable", 15), ("licenseSignatureLengthAlarm", 16), ("wirelessLinkStatus", 17), ("tDMAlarms", 18), ("capacityVariantMismatch", 19), ("remainingFullCapacityTrialTime", 20), ("dataBridgingStatus", 21), ("secureModeAlarm", 22), ("syslogClientDisabledWarning", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enabledDiagnosticAlarms.setStatus('current')
sNMPSendAllTrapsAtStartup = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 16, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPSendAllTrapsAtStartup.setStatus('current')
sNMPTrapTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: sNMPTrapTableIndex.setStatus('current')
sNMPTrapPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 16, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapPortNumber.setStatus('current')
sNMPTrapInternetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 16, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("unknown6", 5), ("unknown7", 6), ("unknown8", 7), ("unknown9", 8), ("unknown10", 9), ("unknown11", 10), ("unknown12", 11), ("unknown13", 12), ("unknown14", 13), ("unknown15", 14), ("unknown16", 15), ("dns", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPTrapInternetAddressType.setStatus('current')
sNMPTrapInternetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 16, 4, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapInternetAddress.setStatus('current')
sNMPTrapReceiverEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 16, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapReceiverEnabled.setStatus('current')
sNMPTrapResolvedInternetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 16, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPTrapResolvedInternetAddress.setStatus('current')
sNTPState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPState.setStatus('current')
sNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 17, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 43200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPPollInterval.setStatus('current')
sNTPSync = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 17, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noSync", 0), ("inSync", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPSync.setStatus('current')
sNTPLastSync = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 17, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPLastSync.setStatus('current')
systemClock = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 17, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemClock.setStatus('current')
timeZone = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 17, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50))).clone(namedValues=NamedValues(("gmtMinus1200", 0), ("gmtMinus1130", 1), ("gmtMinus1100", 2), ("gmtMinus1030", 3), ("gmtMinus1000", 4), ("gmtMinus0930", 5), ("gmtMinus0900", 6), ("gmtMinus0830", 7), ("gmtMinus0800", 8), ("gmtMinus0730", 9), ("gmtMinus0700", 10), ("gmtMinus0630", 11), ("gmtMinus0600", 12), ("gmtMinus0530", 13), ("gmtMinus0500", 14), ("gmtMinus0430", 15), ("gmtMinus0400", 16), ("gmtMinus0330", 17), ("gmtMinus0300", 18), ("gmtMinus0230", 19), ("gmtMinus0200", 20), ("gmtMinus0130", 21), ("gmtMinus0100", 22), ("gmtMinus0030", 23), ("gmtZero", 24), ("gmtPlus0030", 25), ("gmtPlus0100", 26), ("gmtPlus0130", 27), ("gmtPlus0200", 28), ("gmtPlus0230", 29), ("gmtPlus0300", 30), ("gmtPlus0330", 31), ("gmtPlus0400", 32), ("gmtPlus0430", 33), ("gmtPlus0500", 34), ("gmtPlus0530", 35), ("gmtPlus0600", 36), ("gmtPlus0630", 37), ("gmtPlus0700", 38), ("gmtPlus0730", 39), ("gmtPlus0800", 40), ("gmtPlus0830", 41), ("gmtPlus0900", 42), ("gmtPlus0930", 43), ("gmtPlus1000", 44), ("gmtPlus1030", 45), ("gmtPlus1100", 46), ("gmtPlus1130", 47), ("gmtPlus1200", 48), ("gmtPlus1230", 49), ("gmtPlus1300", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZone.setStatus('current')
daylightSaving = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 17, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daylightSaving.setStatus('current')
sNTPPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 17, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("server1", 0), ("server2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPPrimaryServer.setStatus('current')
sNTPPrimaryServerDeadTime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 17, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPPrimaryServerDeadTime.setStatus('current')
sNTPServerRetries = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 17, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerRetries.setStatus('current')
sNTPServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 17, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerTimeout.setStatus('current')
sNTPServerTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 17, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPServerTableNumber.setStatus('current')
sNTPServerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 17, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: sNTPServerTableIndex.setStatus('current')
sNTPServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 17, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerPortNumber.setStatus('current')
sNTPServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 17, 15, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPServerStatus.setStatus('current')
sNTPServerInternetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 17, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("unknown6", 5), ("unknown7", 6), ("unknown8", 7), ("unknown9", 8), ("unknown10", 9), ("unknown11", 10), ("unknown12", 11), ("unknown13", 12), ("unknown14", 13), ("unknown15", 14), ("unknown16", 15), ("dns", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPServerInternetAddressType.setStatus('current')
sNTPServerInternetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 17, 15, 1, 6), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerInternetAddress.setStatus('current')
sNTPServerResolvedInternetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 17, 15, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPServerResolvedInternetAddress.setStatus('current')
sNTPServerAuthenticationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 17, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("mD5", 1), ("sHA1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPServerAuthenticationProtocol.setStatus('current')
sNTPServerKeyIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 17, 15, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPServerKeyIdentifier.setStatus('current')
systemReset = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("running", 0), ("consoleReboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemReset.setStatus('current')
softwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 19, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('current')
hardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 19, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareVersion.setStatus('current')
secondarySoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 19, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secondarySoftwareVersion.setStatus('current')
bootVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 19, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootVersion.setStatus('current')
receiveDataRateLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveDataRateLinked.setStatus('current')
transmitDataRateLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 20, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitDataRateLinked.setStatus('current')
aggregateDataRateLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 20, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregateDataRateLinked.setStatus('current')
wirelessLinkAvailabilityLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 20, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkAvailabilityLinked.setStatus('current')
wirelessLinkStatusLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 0), ("registering", 1), ("searching", 2), ("acquiring", 3), ("radarCAC", 4), ("initialising", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkStatusLinked.setStatus('current')
byteErrorRatioLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 20, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: byteErrorRatioLinked.setStatus('current')
receiveModulationModeDetailLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 20, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("runningAtMaximumReceiveMode", 0), ("runningAtUserConfiguredMaxModulationMode", 1), ("restrictedBecauseInstallationIsArmed", 2), ("restrictedBecauseOfByteErrorsOnTheWirelessLink", 3), ("restrictedBecauseTheLinkParametersAreUpdating", 4), ("restrictedBecauseChannelChangeIsInProgress", 5), ("restrictedDueToTheLowEthernetLinkSpeed", 6), ("runningAtMaximumReceiveModeForChannelBandwidth", 7), ("limitedByTheWirelessConditions", 8), ("restrictedBecauseFullCapabilityTrialLicenseExpired", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveModulationModeDetailLinked.setStatus('current')
dataBridgingAvailabilityLinked = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 20, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataBridgingAvailabilityLinked.setStatus('current')
pubInstancedStatsTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 20, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pubInstancedStatsTableNumber.setStatus('current')
pubInstancedStatsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 20, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: pubInstancedStatsTableIndex.setStatus('current')
receiveDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 20, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveDataRate.setStatus('current')
transmitDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 20, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitDataRate.setStatus('current')
aggregateDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 20, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregateDataRate.setStatus('current')
wirelessLinkAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 20, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkAvailability.setStatus('current')
wirelessLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 20, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 0), ("registering", 1), ("searching", 2), ("acquiring", 3), ("radarCAC", 4), ("initialising", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkStatus.setStatus('current')
receiveModulationModeDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 20, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("runningAtMaximumReceiveMode", 0), ("runningAtUserConfiguredMaxModulationMode", 1), ("restrictedBecauseInstallationIsArmed", 2), ("restrictedBecauseOfByteErrorsOnTheWirelessLink", 3), ("restrictedBecauseTheLinkParametersAreUpdating", 4), ("restrictedBecauseChannelChangeIsInProgress", 5), ("restrictedDueToTheLowEthernetLinkSpeed", 6), ("runningAtMaximumReceiveModeForChannelBandwidth", 7), ("limitedByTheWirelessConditions", 8), ("restrictedBecauseFullCapabilityTrialLicenseExpired", 9), ("acquiringLink", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveModulationModeDetail.setStatus('current')
dataBridgingAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 20, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataBridgingAvailability.setStatus('current')
byteErrorRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 20, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: byteErrorRatio.setStatus('current')
wirelessOutEthernetOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 20, 10, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessOutEthernetOctets.setStatus('current')
wirelessOutAllOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 20, 10, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessOutAllOctets.setStatus('current')
wirelessOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 20, 10, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessOutOctets.setStatus('current')
erroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 20, 10, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erroredSeconds.setStatus('current')
severelyErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 20, 10, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: severelyErroredSeconds.setStatus('current')
unavailableSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 20, 10, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unavailableSeconds.setStatus('current')
encryptionAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("pSKAES128bit", 1), ("pSKAES192bit", 2), ("pSKAES256bit", 3), ("tLSRSA", 4), ("tLSPSK128bit", 5), ("tLSPSK256bit", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: encryptionAlgorithm.setStatus('current')
tLSMinimumSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 22, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("aES128bitTLSRSA", 1), ("aES256bitTLSRSA", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLSMinimumSecurityLevel.setStatus('current')
tDDSynchronizationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDDSynchronizationMode.setStatus('current')
hCMPMaximumLinkRange = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 23, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hCMPMaximumLinkRange.setStatus('current')
maximumNumberOfSlaves = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 23, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumNumberOfSlaves.setStatus('current')
hCMPLinkSymmetry = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 23, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("symmetry4to1", 0), ("symmetry3to1", 1), ("symmetry2to1", 2), ("symmetry1to1", 3), ("symmetry1to2", 4), ("symmetry1to3", 5), ("symmetry1to4", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hCMPLinkSymmetry.setStatus('current')
userTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 25, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userTableNumber.setStatus('current')
userTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 25, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: userTableIndex.setStatus('current')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 25, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 67))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('current')
userRole = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 25, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("readOnly", 0), ("systemAdministrator", 1), ("securityOfficer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userRole.setStatus('current')
userEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 25, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userEnabled.setStatus('current')
userPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 25, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 67))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPassword.setStatus('current')
syslogClient = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogClient.setStatus('current')
syslogState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 24, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogState.setStatus('current')
microwaveAdaptiveBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 26, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: microwaveAdaptiveBandwidth.setStatus('current')
mABNominalModulationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 26, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("modAcquisition", 0), ("modBpsk63percent", 1), ("modQpsk63percentSingle", 2), ("modTransient1", 3), ("modQpsk87percentSingle", 4), ("modTransient2", 5), ("mod16qam63percentSingleA", 6), ("modTransient3", 7), ("mod16qam87percentSingle", 8), ("modTransient4", 9), ("mod64qam75percentSingle", 10), ("modTransient5", 11), ("mod64qam92percentSingle", 12), ("modTransient6", 13), ("mod256qam81percentSingle", 14), ("mod16qam63percentSingleB", 15), ("mod16qam63percentDual", 16), ("modTransient7", 17), ("mod16qam87percentDual", 18), ("modTransient8", 19), ("mod64qam75percentDual", 20), ("modTransient9", 21), ("mod64qam92percentDual", 22), ("modTransient10", 23), ("mod256qam81percentDual", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mABNominalModulationMode.setStatus('current')
mABTransmissionInterval = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 26, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transmissionInterval1s", 0), ("transmissionInterval10s", 1), ("transmissionInterval60s", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mABTransmissionInterval.setStatus('current')
mABHoldoffPeriod = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 26, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mABHoldoffPeriod.setStatus('current')
mABMaintenanceLevel = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 26, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mABMaintenanceLevel.setStatus('current')
useVLANForMABProtocol = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 26, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noVLANTagging", 0), ("iEEE8021QTaggedCTagType8100", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: useVLANForMABProtocol.setStatus('current')
mABProtocolVID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 26, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mABProtocolVID.setStatus('current')
mABProtocolVLANPriority = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 26, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mABProtocolVLANPriority.setStatus('current')
mABState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 26, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("degraded", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mABState.setStatus('current')
mABNominalTransmitCapacity = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 26, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mABNominalTransmitCapacity.setStatus('current')
mABCurrentTransmitCapacity = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 26, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mABCurrentTransmitCapacity.setStatus('current')
cableDiagnosticsPorts = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 27, 1), Bits().clone(namedValues=NamedValues(("auxPort", 6), ("mainPSUPort", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableDiagnosticsPorts.setStatus('current')
cableDiagnosticsControl = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 27, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("startTest", 0), ("testInProgress", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableDiagnosticsControl.setStatus('current')
cableDiagnosticsWarning = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 27, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("testInProgress", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagnosticsWarning.setStatus('current')
cableDiagnosticsResultTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 27, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagnosticsResultTableNumber.setStatus('current')
cableDiagnosticsResultTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 27, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: cableDiagnosticsResultTableIndex.setStatus('current')
cableDiagnosticsResultsDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 27, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagnosticsResultsDateTime.setStatus('current')
cableDiagPair1Results = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 27, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("unknown", 1), ("inProgress", 2), ("notTested", 3), ("openCircuit", 4), ("shortCircuit", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair1Results.setStatus('current')
cableDiagPair1Distance = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 27, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair1Distance.setStatus('current')
cableDiagPair2Results = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 27, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("unknown", 1), ("inProgress", 2), ("notTested", 3), ("openCircuit", 4), ("shortCircuit", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair2Results.setStatus('current')
cableDiagPair2Distance = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 27, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair2Distance.setStatus('current')
cableDiagPair3Results = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 27, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("unknown", 1), ("inProgress", 2), ("notTested", 3), ("openCircuit", 4), ("shortCircuit", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair3Results.setStatus('current')
cableDiagPair3Distance = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 27, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair3Distance.setStatus('current')
cableDiagPair4Results = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 27, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("unknown", 1), ("inProgress", 2), ("notTested", 3), ("openCircuit", 4), ("shortCircuit", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair4Results.setStatus('current')
cableDiagPair4Distance = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 27, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair4Distance.setStatus('current')
deviceMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 28, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceMACAddress.setStatus('current')
deviceESN = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 28, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceESN.setStatus('current')
deviceMSN = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 28, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceMSN.setStatus('current')
authorizationControlTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 29, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authorizationControlTableNumber.setStatus('current')
authorizationControlTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 29, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: authorizationControlTableIndex.setStatus('current')
whitelistRMMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 29, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whitelistRMMacAddress.setStatus('current')
whitelistRMEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 29, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whitelistRMEnabled.setStatus('current')
blacklistRMMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 29, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: blacklistRMMacAddress.setStatus('current')
blacklistRMEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 29, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: blacklistRMEnabled.setStatus('current')
dNSResolver = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dNSResolver.setStatus('current')
dNSPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 30, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("server1", 0), ("server2", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dNSPrimaryServer.setStatus('current')
dNSServerTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 30, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dNSServerTableNumber.setStatus('current')
dNSServerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 30, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: dNSServerTableIndex.setStatus('current')
dNSServerInternetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 30, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("unknown6", 5), ("unknown7", 6), ("unknown8", 7), ("unknown9", 8), ("unknown10", 9), ("unknown11", 10), ("unknown12", 11), ("unknown13", 12), ("unknown14", 13), ("unknown15", 14), ("unknown16", 15), ("dns", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dNSServerInternetAddressType.setStatus('current')
dNSServerInternetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 30, 4, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dNSServerInternetAddress.setStatus('current')
dNSServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 11, 30, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dNSServerPortNumber.setStatus('current')
longitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 96, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: longitude.setStatus('current')
latitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 96, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latitude.setStatus('current')
altitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 11, 96, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: altitude.setStatus('current')
channelChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 1)).setObjects(("CAMBIUM-PTP670-MIB", "receiveChannel"))
if mibBuilder.loadTexts: channelChangeTrap.setStatus('current')
dfsImpulsiveInterferenceTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 2)).setObjects(("CAMBIUM-PTP670-MIB", "receiveChannel"))
if mibBuilder.loadTexts: dfsImpulsiveInterferenceTrap.setStatus('current')
lbtDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 46)).setObjects(("CAMBIUM-PTP670-MIB", "receiveChannel"))
if mibBuilder.loadTexts: lbtDetectedTrap.setStatus('current')
mainPSUPortStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 3)).setObjects(("CAMBIUM-PTP670-MIB", "mainPSUPortStatus"))
if mibBuilder.loadTexts: mainPSUPortStatusTrap.setStatus('current')
mainPSUPortDisabledWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 4)).setObjects(("CAMBIUM-PTP670-MIB", "mainPSUPortDisabledWarning"))
if mibBuilder.loadTexts: mainPSUPortDisabledWarningTrap.setStatus('current')
mainPSUPortConfigurationMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 5)).setObjects(("CAMBIUM-PTP670-MIB", "mainPSUPortConfigurationMismatch"))
if mibBuilder.loadTexts: mainPSUPortConfigurationMismatchTrap.setStatus('current')
auxPortStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 6)).setObjects(("CAMBIUM-PTP670-MIB", "auxPortStatus"))
if mibBuilder.loadTexts: auxPortStatusTrap.setStatus('current')
auxPortDisabledWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 7)).setObjects(("CAMBIUM-PTP670-MIB", "auxPortDisabledWarning"))
if mibBuilder.loadTexts: auxPortDisabledWarningTrap.setStatus('current')
regulatoryBandTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 8)).setObjects(("CAMBIUM-PTP670-MIB", "regulatoryBand"))
if mibBuilder.loadTexts: regulatoryBandTrap.setStatus('current')
installStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 9)).setObjects(("CAMBIUM-PTP670-MIB", "installStatus"))
if mibBuilder.loadTexts: installStatusTrap.setStatus('current')
installArmStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 10)).setObjects(("CAMBIUM-PTP670-MIB", "installArmState"))
if mibBuilder.loadTexts: installArmStateTrap.setStatus('current')
unitOutOfCalibrationTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 11)).setObjects(("CAMBIUM-PTP670-MIB", "unitOutOfCalibration"))
if mibBuilder.loadTexts: unitOutOfCalibrationTrap.setStatus('current')
auxPortPowerOverEthernetOutputStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 12)).setObjects(("CAMBIUM-PTP670-MIB", "auxPortPowerOverEthernetOutputStatus"))
if mibBuilder.loadTexts: auxPortPowerOverEthernetOutputStatusTrap.setStatus('current')
incompatibleRegulatoryBandsTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 14)).setObjects(("CAMBIUM-PTP670-MIB", "incompatibleRegulatoryBands"), ("CAMBIUM-PTP670-MIB", "remoteMACAddress"))
if mibBuilder.loadTexts: incompatibleRegulatoryBandsTrap.setStatus('current')
noWirelessChannelAvailableTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 15)).setObjects(("CAMBIUM-PTP670-MIB", "noWirelessChannelAvailable"))
if mibBuilder.loadTexts: noWirelessChannelAvailableTrap.setStatus('current')
wirelessLinkDisabledWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 16)).setObjects(("CAMBIUM-PTP670-MIB", "wirelessLinkDisabledWarning"))
if mibBuilder.loadTexts: wirelessLinkDisabledWarningTrap.setStatus('current')
auxPortConfigurationMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 17)).setObjects(("CAMBIUM-PTP670-MIB", "auxPortConfigurationMismatch"))
if mibBuilder.loadTexts: auxPortConfigurationMismatchTrap.setStatus('current')
sFPErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 18)).setObjects(("CAMBIUM-PTP670-MIB", "sFPError"))
if mibBuilder.loadTexts: sFPErrorTrap.setStatus('current')
sFPPortStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 19)).setObjects(("CAMBIUM-PTP670-MIB", "sFPPortStatus"))
if mibBuilder.loadTexts: sFPPortStatusTrap.setStatus('current')
incompatibleMasterAndSlaveTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 20)).setObjects(("CAMBIUM-PTP670-MIB", "incompatibleMasterAndSlave"), ("CAMBIUM-PTP670-MIB", "remoteMACAddress"))
if mibBuilder.loadTexts: incompatibleMasterAndSlaveTrap.setStatus('current')
sNTPSyncTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 21)).setObjects(("CAMBIUM-PTP670-MIB", "sNTPSync"))
if mibBuilder.loadTexts: sNTPSyncTrap.setStatus('current')
tDDSynchronizationAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 22)).setObjects(("CAMBIUM-PTP670-MIB", "tDDSynchronizationAlarm"))
if mibBuilder.loadTexts: tDDSynchronizationAlarmTrap.setStatus('current')
sFPPortDisabledWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 23)).setObjects(("CAMBIUM-PTP670-MIB", "sFPPortDisabledWarning"))
if mibBuilder.loadTexts: sFPPortDisabledWarningTrap.setStatus('current')
sFPPortConfigurationMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 24)).setObjects(("CAMBIUM-PTP670-MIB", "sFPPortConfigurationMismatch"))
if mibBuilder.loadTexts: sFPPortConfigurationMismatchTrap.setStatus('current')
linkModeOptimizationMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 25)).setObjects(("CAMBIUM-PTP670-MIB", "linkModeOptimizationMismatch"), ("CAMBIUM-PTP670-MIB", "remoteMACAddress"))
if mibBuilder.loadTexts: linkModeOptimizationMismatchTrap.setStatus('current')
tDMInterfaceStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 26)).setObjects(("CAMBIUM-PTP670-MIB", "tDMInterfaceStatus"))
if mibBuilder.loadTexts: tDMInterfaceStatusTrap.setStatus('current')
tDMChannelStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 27)).setObjects(("CAMBIUM-PTP670-MIB", "tDMChannelStatus"))
if mibBuilder.loadTexts: tDMChannelStatusTrap.setStatus('current')
tDMChannelLoopbackTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 28)).setObjects(("CAMBIUM-PTP670-MIB", "tDMChannelLoopback"))
if mibBuilder.loadTexts: tDMChannelLoopbackTrap.setStatus('current')
nIDULanPortStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 29)).setObjects(("CAMBIUM-PTP670-MIB", "nIDULanPortStatus"))
if mibBuilder.loadTexts: nIDULanPortStatusTrap.setStatus('current')
syslogStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 30)).setObjects(("CAMBIUM-PTP670-MIB", "syslogState"))
if mibBuilder.loadTexts: syslogStateTrap.setStatus('current')
syslogLocalNearlyFullTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 31))
if mibBuilder.loadTexts: syslogLocalNearlyFullTrap.setStatus('current')
syslogLocalWrappedTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 32))
if mibBuilder.loadTexts: syslogLocalWrappedTrap.setStatus('current')
syslogClientTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 33)).setObjects(("CAMBIUM-PTP670-MIB", "syslogClient"))
if mibBuilder.loadTexts: syslogClientTrap.setStatus('current')
secureModeAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 34)).setObjects(("CAMBIUM-PTP670-MIB", "secureModeAlarm"))
if mibBuilder.loadTexts: secureModeAlarmTrap.setStatus('current')
dataBridgingStatusAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 35)).setObjects(("CAMBIUM-PTP670-MIB", "dataBridgingStatusAlarm"), ("CAMBIUM-PTP670-MIB", "remoteMACAddress"))
if mibBuilder.loadTexts: dataBridgingStatusAlarmTrap.setStatus('current')
licenseRemainingTrialPeriodAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 36)).setObjects(("CAMBIUM-PTP670-MIB", "licenseRemainingTrialPeriodAlarm"))
if mibBuilder.loadTexts: licenseRemainingTrialPeriodAlarmTrap.setStatus('current')
capacityVariantMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 37)).setObjects(("CAMBIUM-PTP670-MIB", "capacityVariantMismatch"))
if mibBuilder.loadTexts: capacityVariantMismatchTrap.setStatus('current')
maxLinkRangeExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 38)).setObjects(("CAMBIUM-PTP670-MIB", "maxLinkRangeExceeded"), ("CAMBIUM-PTP670-MIB", "remoteMACAddress"))
if mibBuilder.loadTexts: maxLinkRangeExceededTrap.setStatus('current')
tDMConfigurationMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 39)).setObjects(("CAMBIUM-PTP670-MIB", "tDMConfigurationMismatch"))
if mibBuilder.loadTexts: tDMConfigurationMismatchTrap.setStatus('current')
nIDULanPortDisabledWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 40)).setObjects(("CAMBIUM-PTP670-MIB", "nIDULanPortDisabledWarning"))
if mibBuilder.loadTexts: nIDULanPortDisabledWarningTrap.setStatus('current')
nIDULanPortConfigurationMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 41)).setObjects(("CAMBIUM-PTP670-MIB", "nIDULanPortConfigurationMismatch"))
if mibBuilder.loadTexts: nIDULanPortConfigurationMismatchTrap.setStatus('current')
portAllocationMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 44)).setObjects(("CAMBIUM-PTP670-MIB", "portAllocationMismatch"), ("CAMBIUM-PTP670-MIB", "remoteMACAddress"))
if mibBuilder.loadTexts: portAllocationMismatchTrap.setStatus('current')
wirelessLinkStatusAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 45)).setObjects(("CAMBIUM-PTP670-MIB", "wirelessLinkStatusAlarm"), ("CAMBIUM-PTP670-MIB", "remoteMACAddress"))
if mibBuilder.loadTexts: wirelessLinkStatusAlarmTrap.setStatus('current')
secureLicenseSignatureAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 11, 99, 0, 47)).setObjects(("CAMBIUM-PTP670-MIB", "secureLicenseSignatureAlarm"))
if mibBuilder.loadTexts: secureLicenseSignatureAlarmTrap.setStatus('current')
mibBuilder.exportSymbols("CAMBIUM-PTP670-MIB", timeZone=timeZone, receiveModulationModeLinked=receiveModulationModeLinked, sNTPServerPortNumber=sNTPServerPortNumber, capacityVariantMismatchTrap=capacityVariantMismatchTrap, ethernetStatisticsTableEntry=ethernetStatisticsTableEntry, licenseInstancedTableIndex=licenseInstancedTableIndex, oOBPriorityQueueMapping=oOBPriorityQueueMapping, txColorCode=txColorCode, sMTPServerResolvedInternetAddress=sMTPServerResolvedInternetAddress, mainPSUPortAcceptedQLRx=mainPSUPortAcceptedQLRx, incompatibleMasterAndSlave=incompatibleMasterAndSlave, cableDiagnosticsResultTableEntry=cableDiagnosticsResultTableEntry, encryptionGroup=encryptionGroup, sFPPortQLTx=sFPPortQLTx, licenseRARSupport=licenseRARSupport, installArmState=installArmState, ethernetStatisticsRxOctets=ethernetStatisticsRxOctets, licenseIssueNumber=licenseIssueNumber, snmpControl=snmpControl, sFPPortSSMTx=sFPPortSSMTx, frequencyVariant=frequencyVariant, ethernetStatisticsRxFramesOversize=ethernetStatisticsRxFramesOversize, wirelessLinkDisabledWarning=wirelessLinkDisabledWarning, incompatibleRegulatoryBands=incompatibleRegulatoryBands, alarmInstancedTable=alarmInstancedTable, sNTPServerInternetAddress=sNTPServerInternetAddress, mABNominalTransmitCapacity=mABNominalTransmitCapacity, tdmTableNumber=tdmTableNumber, phyStatusGroup=phyStatusGroup, mainPSUPortQLRx=mainPSUPortQLRx, smtpGroup=smtpGroup, tDMChannelLoopback=tDMChannelLoopback, auxPortPowerOverEthernetOutput=auxPortPowerOverEthernetOutput, nIDULanPortStatusTrap=nIDULanPortStatusTrap, ethernetStatisticsTable=ethernetStatisticsTable, authorizationMethod=authorizationMethod, enabledDiagnosticAlarms=enabledDiagnosticAlarms, l2CPPriorityTableIndex=l2CPPriorityTableIndex, tFTPServerResolvedInternetAddress=tFTPServerResolvedInternetAddress, deviceMSN=deviceMSN, phyControlInstancedTableIndex=phyControlInstancedTableIndex, mPLSTCPriorityTableIndex=mPLSTCPriorityTableIndex, tDDSynchronizationStatus=tDDSynchronizationStatus, wirelessTopology=wirelessTopology, authorizationControlTableNumber=authorizationControlTableNumber, longitude=longitude, sntpGroup=sntpGroup, antennaGain=antennaGain, capacityVariantMismatch=capacityVariantMismatch, mABMaintenanceLevel=mABMaintenanceLevel, useVLANForManagementInterfaces=useVLANForManagementInterfaces, transmitPower=transmitPower, ethernetInstancedTable=ethernetInstancedTable, blacklistRMEnabled=blacklistRMEnabled, cableDiagPair2Results=cableDiagPair2Results, authorizationControlTableEntry=authorizationControlTableEntry, licenseUnitSerialNumber=licenseUnitSerialNumber, byteErrorRatio=byteErrorRatio, linkName=linkName, iPDSCPPriorityQueueMapping=iPDSCPPriorityQueueMapping, sFPPortAllocation=sFPPortAllocation, sFPPortConfigurationMismatch=sFPPortConfigurationMismatch, licenseRemainingTrialPeriodAlarm=licenseRemainingTrialPeriodAlarm, tFTPSoftwareUpgradeStatusAdditionalText=tFTPSoftwareUpgradeStatusAdditionalText, bootVersion=bootVersion, alarmInstancedTableNumber=alarmInstancedTableNumber, remoteMACAddressLinked=remoteMACAddressLinked, phyInstancedStatusTableEntry=phyInstancedStatusTableEntry, l2CPPriorityTableNumber=l2CPPriorityTableNumber, receiveFreqKHz=receiveFreqKHz, dNSPrimaryServer=dNSPrimaryServer, remoteInternetAddress=remoteInternetAddress, transparentClockPort=transparentClockPort, management=management, cableDiagnosticsResultTableNumber=cableDiagnosticsResultTableNumber, syslogClientTrap=syslogClientTrap, tDDSynchronizationAlarm=tDDSynchronizationAlarm, cableDiagPair4Results=cableDiagPair4Results, pubInstancedStatsTableIndex=pubInstancedStatsTableIndex, dataPortPauseFrames=dataPortPauseFrames, iPVersion=iPVersion, wirelessLinkAvailability=wirelessLinkAvailability, licenseHCMPSupport=licenseHCMPSupport, dfsTableNumber=dfsTableNumber, iPDSCPPriorityTableEntry=iPDSCPPriorityTableEntry, transparentClockVID=transparentClockVID, licenseGasGroup=licenseGasGroup, remoteInternetAddressLinked=remoteInternetAddressLinked, mainPSUPortSSMTx=mainPSUPortSSMTx, sNMPTrapTableNumber=sNMPTrapTableNumber, transparentClockVLAN=transparentClockVLAN, licenseSecurityLevel=licenseSecurityLevel, licenseTLSRekey=licenseTLSRekey, tFTPStartSoftwareUpgrade=tFTPStartSoftwareUpgrade, wirelessOutOctets=wirelessOutOctets, phyInstancedStatusTableNumber=phyInstancedStatusTableNumber, userTableNumber=userTableNumber, tdmTableEntry=tdmTableEntry, targetMACAddress=targetMACAddress, apcGroup=apcGroup, phyControlInstancedTable=phyControlInstancedTable, extendedSpectrumScanning=extendedSpectrumScanning, auxPortAllocation=auxPortAllocation, cableDiagnosticsControl=cableDiagnosticsControl, hTTPPortNumber=hTTPPortNumber, iPv4Address=iPv4Address, licenseIEEE1588Support=licenseIEEE1588Support, sMTPEnabledMessages=sMTPEnabledMessages, mainPSUPortStatus=mainPSUPortStatus, auxPortSSMTx=auxPortSSMTx, tDDControlGroup=tDDControlGroup, ethernetStatisticsRxBroadcasts=ethernetStatisticsRxBroadcasts, aAAControl=aAAControl, sNTPServerKeyIdentifier=sNTPServerKeyIdentifier, sNTPPrimaryServer=sNTPPrimaryServer, groupID=groupID, receiveFreqMHz=receiveFreqMHz, byteErrorRatioLinked=byteErrorRatioLinked, tDM=tDM, linkModeOptimizationMismatchLinked=linkModeOptimizationMismatchLinked, mPLSTCPriorityTableEntry=mPLSTCPriorityTableEntry, secureLicenseSignatureAlarmTrap=secureLicenseSignatureAlarmTrap, range=range, ptpTraps=ptpTraps, syncETracking=syncETracking, incompatibleMasterAndSlaveTrap=incompatibleMasterAndSlaveTrap, rawReceivePowerLinked=rawReceivePowerLinked, nIDULanPortConfigurationMismatchTrap=nIDULanPortConfigurationMismatchTrap, managementGroup=managementGroup, ethernetPriorityTableIndex=ethernetPriorityTableIndex, pubStats=pubStats, mgmtInstancedTableIndex=mgmtInstancedTableIndex, auxPortSpeedAndDuplex=auxPortSpeedAndDuplex, transmitDataRate=transmitDataRate, mABProtocolVID=mABProtocolVID, sFPPortQLRx=sFPPortQLRx, tFTPServerPortNumber=tFTPServerPortNumber, auxPortQLRx=auxPortQLRx, transparentClock=transparentClock, sNMPEnabledTraps=sNMPEnabledTraps, licenseIPv6Support=licenseIPv6Support, searchStateLinked=searchStateLinked, alarms=alarms, authorizationControl=authorizationControl, syncEEquipmentClock=syncEEquipmentClock, alarmInstancedTableIndex=alarmInstancedTableIndex, aAAControlGroup=aAAControlGroup, txMABFrames=txMABFrames, ptpCompliance=ptpCompliance, alarmsGroup=alarmsGroup, mainPSUPortGigabitMasterSlaveStatus=mainPSUPortGigabitMasterSlaveStatus, enableTransmission=enableTransmission, noWirelessChannelAvailableTrap=noWirelessChannelAvailableTrap, linkSymmetry=linkSymmetry, packetsFromInternalStack=packetsFromInternalStack, l2CPPriorityTableEntry=l2CPPriorityTableEntry, mgmtInstancedTableNumber=mgmtInstancedTableNumber, ethernetStatisticsDataSource=ethernetStatisticsDataSource, cableDiagnosticsWarning=cableDiagnosticsWarning, sNTPServerTimeout=sNTPServerTimeout, transmitModulationMode=transmitModulationMode, syslogLocalWrappedTrap=syslogLocalWrappedTrap, dNSServerTable=dNSServerTable, sNMPTrapTableIndex=sNMPTrapTableIndex, licenseMaxNumberOfTDMChannels=licenseMaxNumberOfTDMChannels, latitude=latitude, ethernetStatisticsTableNumber=ethernetStatisticsTableNumber, remoteUnitName=remoteUnitName, altitude=altitude, pubStatsGroup=pubStatsGroup, sFPPortStatusTrap=sFPPortStatusTrap, ethernetGroup=ethernetGroup, dataBridgingStatusAlarmTrap=dataBridgingStatusAlarmTrap, telnetPortNumber=telnetPortNumber, licenseInstancedTable=licenseInstancedTable, sNTPSync=sNTPSync, tempPcb=tempPcb, systemClock=systemClock, iPDSCPPriorityTableNumber=iPDSCPPriorityTableNumber, licenseEncryption=licenseEncryption, sFPPortGigabitMasterSlaveStatus=sFPPortGigabitMasterSlaveStatus, sFPError=sFPError, portAllocationMismatch=portAllocationMismatch, licenseRemainingTrialPeriodAlarmTrap=licenseRemainingTrialPeriodAlarmTrap, regulatoryBandTrap=regulatoryBandTrap, pubInstancedStatsTable=pubInstancedStatsTable, masterSlaveMode=masterSlaveMode, transmitPowerLinked=transmitPowerLinked, incompatibleMasterAndSlaveLinked=incompatibleMasterAndSlaveLinked, useVLANForMABProtocol=useVLANForMABProtocol, tDMChannelStatus=tDMChannelStatus, dNSServerInternetAddressType=dNSServerInternetAddressType, dNS=dNS, sNMPPortNumber=sNMPPortNumber, localPacketFiltering=localPacketFiltering, authorizationControlTable=authorizationControlTable, mainPSUPortStatusTrap=mainPSUPortStatusTrap, phyControl=phyControl, tFTPSoftwareUpgradeStatusText=tFTPSoftwareUpgradeStatusText, sNTPState=sNTPState, cableDiagnosticsResultsDateTime=cableDiagnosticsResultsDateTime, transmitterChannels=transmitterChannels, signalStrengthRatioLinked=signalStrengthRatioLinked, auxPortPowerOverEthernetOutputStatus=auxPortPowerOverEthernetOutputStatus, sFPPortQLRxOverwrite=sFPPortQLRxOverwrite, ptpGroups=ptpGroups, userEnabled=userEnabled, mPLSTCPriorityTableNumber=mPLSTCPriorityTableNumber, licenseLongMinimumFirmwareVersion=licenseLongMinimumFirmwareVersion, sNTPServerTableEntry=sNTPServerTableEntry, receiveModulationMode=receiveModulationMode, userName=userName, cableDiagPair2Distance=cableDiagPair2Distance, smtp=smtp, dNSServerTableNumber=dNSServerTableNumber, mainPSUPortSyncERxStatus=mainPSUPortSyncERxStatus, userPassword=userPassword, licenseInstancedTableNumber=licenseInstancedTableNumber, sNMPTrapInternetAddress=sNMPTrapInternetAddress, channelBandwidth=channelBandwidth, configurationInstancedTable=configurationInstancedTable, eIRP=eIRP, licenseSyncESupport=licenseSyncESupport, deviceMACAddress=deviceMACAddress, ethernetStatisticsTableIndex=ethernetStatisticsTableIndex, ethernetPriorityQueueMapping=ethernetPriorityQueueMapping, unitIdentification=unitIdentification, ethernetStatisticsRxFramesUndersize=ethernetStatisticsRxFramesUndersize, erroredSeconds=erroredSeconds, tDMInterfaceStatus=tDMInterfaceStatus, mPLSTCPriorityQueueMapping=mPLSTCPriorityQueueMapping, syncESlavePort=syncESlavePort, pubInstancedStatsTableNumber=pubInstancedStatsTableNumber, receiveChannel=receiveChannel, installArmStateTrap=installArmStateTrap, encryptionAlgorithm=encryptionAlgorithm, licenseAdvanceHCMPSupport=licenseAdvanceHCMPSupport, resetGroup=resetGroup, regulatoryBand=regulatoryBand, mainPSUPortAutoNegAdvertisement=mainPSUPortAutoNegAdvertisement, sNMPv3Enable=sNMPv3Enable, nIDULanPortConfigurationMismatch=nIDULanPortConfigurationMismatch, licenseRegulatoryBandsList=licenseRegulatoryBandsList, mainPSUPortSyncEMasterSlaveStatus=mainPSUPortSyncEMasterSlaveStatus, dNSGroup=dNSGroup, nIDULanPortGigabitMasterSlaveStatus=nIDULanPortGigabitMasterSlaveStatus, accessMethod=accessMethod, mPLSTCPriorityTable=mPLSTCPriorityTable, sFPPortAutoMdix=sFPPortAutoMdix, sNMPTrapReceiverEnabled=sNMPTrapReceiverEnabled, tDDSynchronizationMode=tDDSynchronizationMode, sNMPTrapInternetAddressType=sNMPTrapInternetAddressType, sFPPortAutoNegAdvertisement=sFPPortAutoNegAdvertisement, qOSPriorityScheme=qOSPriorityScheme)
mibBuilder.exportSymbols("CAMBIUM-PTP670-MIB", receiveModulationModeDetail=receiveModulationModeDetail, wirelessLinkStatusAlarm=wirelessLinkStatusAlarm, licenseMinFirmwareVersionPTP650Emulation=licenseMinFirmwareVersionPTP650Emulation, dfsTable=dfsTable, cambium=cambium, auxPortSyncEMasterSlaveStatus=auxPortSyncEMasterSlaveStatus, secureModeAlarmTrap=secureModeAlarmTrap, syncETrackingState=syncETrackingState, bridgeGroup=bridgeGroup, phyControlInstancedTableNumber=phyControlInstancedTableNumber, wirelessOutAllOctets=wirelessOutAllOctets, siteName=siteName, sNTPServerInternetAddressType=sNTPServerInternetAddressType, sNTPServerResolvedInternetAddress=sNTPServerResolvedInternetAddress, versions=versions, remoteMaximumTransmitPower=remoteMaximumTransmitPower, daylightSaving=daylightSaving, ethernetInstancedTableNumber=ethernetInstancedTableNumber, telnetAccessEnabled=telnetAccessEnabled, vLANManagementPriority=vLANManagementPriority, sNTPServerAuthenticationProtocol=sNTPServerAuthenticationProtocol, sNTPServerTableIndex=sNTPServerTableIndex, mgmtInstancedTable=mgmtInstancedTable, PYSNMP_MODULE_ID=cambium, ptmp=ptmp, licenseBandwidthCap=licenseBandwidthCap, hTTPAccessEnabled=hTTPAccessEnabled, cableDiagPair3Results=cableDiagPair3Results, tFTPServerInternetAddress=tFTPServerInternetAddress, aggregateDataRate=aggregateDataRate, configurationInstancedTableNumber=configurationInstancedTableNumber, ethernetPriorityTableNumber=ethernetPriorityTableNumber, blacklistRMMacAddress=blacklistRMMacAddress, sMTPEmailAlert=sMTPEmailAlert, tDMChannelLineCode=tDMChannelLineCode, routerProtocols=routerProtocols, sFPPortAutoNegotiation=sFPPortAutoNegotiation, dfsPeaks=dfsPeaks, remoteUnitNameLinked=remoteUnitNameLinked, syslogClient=syslogClient, wirelessLinkStatus=wirelessLinkStatus, noWirelessChannelAvailable=noWirelessChannelAvailable, snmpControlGroup=snmpControlGroup, vectorErrorLinked=vectorErrorLinked, ethernetStatisticsTxOctets=ethernetStatisticsTxOctets, systemReset=systemReset, lbtDetectedTrap=lbtDetectedTrap, mainPSUPortSpeedAndDuplex=mainPSUPortSpeedAndDuplex, cableDiagPair1Distance=cableDiagPair1Distance, secureLicenseSignatureAlarm=secureLicenseSignatureAlarm, configuration=configuration, remoteMACAddress=remoteMACAddress, iPv6PrefixLength=iPv6PrefixLength, cableDiagnosticsResultTableIndex=cableDiagnosticsResultTableIndex, tFTPClient=tFTPClient, licenseAuxiliaryPortSupport=licenseAuxiliaryPortSupport, rangingMode=rangingMode, vLANManagementVID=vLANManagementVID, dfsTableEntry=dfsTableEntry, licenseCountry=licenseCountry, license=license, supplementary=supplementary, ptp670=ptp670, signalStrengthRatio=signalStrengthRatio, licenseMaxLinkRange=licenseMaxLinkRange, mainPSUPortAllocation=mainPSUPortAllocation, sNTPPrimaryServerDeadTime=sNTPPrimaryServerDeadTime, auxPortQLTx=auxPortQLTx, sNMPTrapTable=sNMPTrapTable, maximumNumberOfSlaves=maximumNumberOfSlaves, phyInstancedStatusTable=phyInstancedStatusTable, hCMPLinkSymmetry=hCMPLinkSymmetry, cableDiagnosticsPorts=cableDiagnosticsPorts, transmitFreqMHz=transmitFreqMHz, licenseGroupAccess=licenseGroupAccess, dNSServerInternetAddress=dNSServerInternetAddress, targetRange=targetRange, cableDiagPair1Results=cableDiagPair1Results, auxPortDisabledWarningTrap=auxPortDisabledWarningTrap, iPv6Address=iPv6Address, atpcHcmpMasterTargetRxPower=atpcHcmpMasterTargetRxPower, licenseFullCapabilityTrialStatus=licenseFullCapabilityTrialStatus, licenseNumberOfRegulatoryBands=licenseNumberOfRegulatoryBands, productName=productName, configurationGroup=configurationGroup, unknownNetworkPriorityQueueMapping=unknownNetworkPriorityQueueMapping, hTTPSPortNumber=hTTPSPortNumber, auxPortStatus=auxPortStatus, linkModeOptimization=linkModeOptimization, sFPPortAcceptedQLRx=sFPPortAcceptedQLRx, installationMode=installationMode, sNMPTrapResolvedInternetAddress=sNMPTrapResolvedInternetAddress, supplementaryGroup=supplementaryGroup, tDMConfigurationMismatch=tDMConfigurationMismatch, mABTransmissionInterval=mABTransmissionInterval, capacityVariantMismatchLinked=capacityVariantMismatchLinked, sFPPortStatus=sFPPortStatus, atpcHcmpMasterTxPower=atpcHcmpMasterTxPower, mainPSUPortConfigurationMismatchTrap=mainPSUPortConfigurationMismatchTrap, dfsGroup=dfsGroup, transparentClockSourcePortAlarm=transparentClockSourcePortAlarm, tDMConfigurationMismatchTrap=tDMConfigurationMismatchTrap, syslogState=syslogState, licenseSFPPortSupport=licenseSFPPortSupport, mainPSUPortAutoNegotiation=mainPSUPortAutoNegotiation, routerProtocolsGroup=routerProtocolsGroup, userTable=userTable, searchState=searchState, transmitFreqKHz=transmitFreqKHz, iPv6AutoConfiguredLinkLocalAddress=iPv6AutoConfiguredLinkLocalAddress, ethernetStatisticsTxBroadcasts=ethernetStatisticsTxBroadcasts, wirelessLinkDisabledWarningTrap=wirelessLinkDisabledWarningTrap, l2CPPriorityTable=l2CPPriorityTable, auxPortDisabledWarning=auxPortDisabledWarning, tDMChannelLoopbackTrap=tDMChannelLoopbackTrap, rawReceivePower=rawReceivePower, sNMPTrapPortNumber=sNMPTrapPortNumber, encryption=encryption, maximumTransmitPower=maximumTransmitPower, hardwareVersion=hardwareVersion, cableDiagnosticsGroup=cableDiagnosticsGroup, mgmtInstancedTableEntry=mgmtInstancedTableEntry, licenseTDDSyncSupport=licenseTDDSyncSupport, sMTPServerInternetAddressType=sMTPServerInternetAddressType, sNMPTrapVersion=sNMPTrapVersion, mainPSUPortQLTx=mainPSUPortQLTx, mABNominalModulationMode=mABNominalModulationMode, sNMPSendAllTrapsAtStartup=sNMPSendAllTrapsAtStartup, transmitChannel=transmitChannel, phyInstancedStatusTableIndex=phyInstancedStatusTableIndex, aggregateDataRateLinked=aggregateDataRateLinked, wirelessLinkAvailabilityLinked=wirelessLinkAvailabilityLinked, versionsGroup=versionsGroup, syslogControlGroup=syslogControlGroup, ethernetStatisticsRxFramesWithError=ethernetStatisticsRxFramesWithError, cableDiagnosticsResultTable=cableDiagnosticsResultTable, sNTPLastSync=sNTPLastSync, sFPErrorTrap=sFPErrorTrap, licenseRegulatoryBandsTable=licenseRegulatoryBandsTable, unitOutOfCalibration=unitOutOfCalibration, remoteMaximumTransmitPowerLinked=remoteMaximumTransmitPowerLinked, auxPortConfigurationMismatchTrap=auxPortConfigurationMismatchTrap, secureModeAlarm=secureModeAlarm, tDMChannelCableLength=tDMChannelCableLength, tDMEnabledChannels=tDMEnabledChannels, installStatusTrap=installStatusTrap, cableDiagPair3Distance=cableDiagPair3Distance, sFPPortSyncERxStatus=sFPPortSyncERxStatus, ptpTrapPrefix=ptpTrapPrefix, vectorError=vectorError, productVariant=productVariant, auxPortGigabitMasterSlaveStatus=auxPortGigabitMasterSlaveStatus, dNSServerPortNumber=dNSServerPortNumber, rangeLinked=rangeLinked, licenseInstancedTableEntry=licenseInstancedTableEntry, mainPSUPortDisabledWarning=mainPSUPortDisabledWarning, bridge=bridge, linkLossLinked=linkLossLinked, tDMInterfaceStatusTrap=tDMInterfaceStatusTrap, deviceESN=deviceESN, configurationInstancedTableIndex=configurationInstancedTableIndex, tdmTableIndex=tdmTableIndex, whitelistRMEnabled=whitelistRMEnabled, maxLinkRangeExceededLinked=maxLinkRangeExceededLinked, phyStatus=phyStatus, tDMGroup=tDMGroup, cableDiagPair4Distance=cableDiagPair4Distance, subbandLowestFrequency=subbandLowestFrequency, mainPSUPortAutoMdix=mainPSUPortAutoMdix, sNTPServerStatus=sNTPServerStatus, configurationInstancedTableEntry=configurationInstancedTableEntry, cableDiagnostics=cableDiagnostics, licenseRemainingTrialPeriod=licenseRemainingTrialPeriod, managementPortWirelessDownAlert=managementPortWirelessDownAlert, auxPortSyncERxStatus=auxPortSyncERxStatus, pubInstancedStatsTableEntry=pubInstancedStatsTableEntry, unavailableSeconds=unavailableSeconds, ethernetInstancedTableEntry=ethernetInstancedTableEntry, tdmTable=tdmTable, dfsNineNinePointNinePercentiles=dfsNineNinePointNinePercentiles, receiveModulationModeDetailLinked=receiveModulationModeDetailLinked, receivePowerLinked=receivePowerLinked, ethernetStatisticsTxFrames=ethernetStatisticsTxFrames, sMTPSourceEmailAddress=sMTPSourceEmailAddress, dfsImpulsiveInterferenceTrap=dfsImpulsiveInterferenceTrap, licenseOOBManagementSupport=licenseOOBManagementSupport, mainPSUPortQLRxOverwrite=mainPSUPortQLRxOverwrite, sNTPPollInterval=sNTPPollInterval, dataPortWirelessDownAlert=dataPortWirelessDownAlert, dfsTableIndex=dfsTableIndex, alarmInstancedTableEntry=alarmInstancedTableEntry, tDDSynchronizationAlarmTrap=tDDSynchronizationAlarmTrap, maxLinkRangeExceededTrap=maxLinkRangeExceededTrap, unitOutOfCalibrationTrap=unitOutOfCalibrationTrap, auxPortStatusTrap=auxPortStatusTrap, dataBridgingStatusAlarmLinked=dataBridgingStatusAlarmLinked, sNTPSyncTrap=sNTPSyncTrap, dNSServerTableIndex=dNSServerTableIndex, tDMInterfaceControl=tDMInterfaceControl, ethernetInstancedTableIndex=ethernetInstancedTableIndex, installStatusLinked=installStatusLinked, wirelessLinkStatusLinked=wirelessLinkStatusLinked, syslogLocalNearlyFullTrap=syslogLocalNearlyFullTrap, l2CPPriorityQueueMapping=l2CPPriorityQueueMapping, subbandHighestFrequency=subbandHighestFrequency, linkLoss=linkLoss, receiveDataRate=receiveDataRate, sNTPServerTableNumber=sNTPServerTableNumber, unitName=unitName, transmitModulationModeLinked=transmitModulationModeLinked, licenseTrialPeriod=licenseTrialPeriod, iPDSCPPriorityTableIndex=iPDSCPPriorityTableIndex, remoteInternetAddressTypeLinked=remoteInternetAddressTypeLinked, sMTPServerInternetAddress=sMTPServerInternetAddress, channelChangeTrap=channelChangeTrap, ptp=ptp, secondarySoftwareVersion=secondarySoftwareVersion, incompatibleRegulatoryBandsTrap=incompatibleRegulatoryBandsTrap, nIDULanPortAutoMdix=nIDULanPortAutoMdix, auxPortConfigurationMismatch=auxPortConfigurationMismatch, tFTPSoftwareUpgradeFileName=tFTPSoftwareUpgradeFileName, microwaveAdaptiveBandwidth=microwaveAdaptiveBandwidth, dNSResolver=dNSResolver, reset=reset, syslogControl=syslogControl, rxColorCode=rxColorCode, userTableEntry=userTableEntry, mainPSUPortConfigurationMismatch=mainPSUPortConfigurationMismatch, managementNetworkAccessEnabled=managementNetworkAccessEnabled, whitelistRMMacAddress=whitelistRMMacAddress, tLSMinimumSecurityLevel=tLSMinimumSecurityLevel, tDDControl=tDDControl, sNMPCommunityString=sNMPCommunityString, tDMChannelStatusTrap=tDMChannelStatusTrap, dataBridgingStatusLinked=dataBridgingStatusLinked, dataBridgingStatusAlarm=dataBridgingStatusAlarm, severelyErroredSeconds=severelyErroredSeconds, licenseRegulatoryBandsTableIndex=licenseRegulatoryBandsTableIndex, receivePower=receivePower, notificationsGroup=notificationsGroup, mABProtocolVLANPriority=mABProtocolVLANPriority, authorizationControlTableIndex=authorizationControlTableIndex, dNSServerTableEntry=dNSServerTableEntry, tFTPServerInternetAddressType=tFTPServerInternetAddressType, dfs=dfs, hCMPMaximumLinkRange=hCMPMaximumLinkRange, tFTPSoftwareUpgradeStatus=tFTPSoftwareUpgradeStatus, sMTPServerPortNumber=sMTPServerPortNumber, cableLoss=cableLoss, dSCPManagementPriority=dSCPManagementPriority, iPDSCPPriorityTable=iPDSCPPriorityTable, lowestTDMModulationMode=lowestTDMModulationMode, transmitDataRateLinked=transmitDataRateLinked, portAllocationMismatchLinked=portAllocationMismatchLinked)
mibBuilder.exportSymbols("CAMBIUM-PTP670-MIB", auxPortPowerOverEthernetOutputStatusTrap=auxPortPowerOverEthernetOutputStatusTrap, incompatibleRegulatoryBandsLinked=incompatibleRegulatoryBandsLinked, linkModeOptimizationMismatch=linkModeOptimizationMismatch, dataBridgingAvailabilityLinked=dataBridgingAvailabilityLinked, ethernetStatisticsRxFrames=ethernetStatisticsRxFrames, installStatus=installStatus, nIDULanPortDisabledWarning=nIDULanPortDisabledWarning, syslogStateTrap=syslogStateTrap, lowestDataModulationMode=lowestDataModulationMode, gatewayIPAddress=gatewayIPAddress, dfsMeans=dfsMeans, sFPPortSyncEMasterSlaveStatus=sFPPortSyncEMasterSlaveStatus, phyControlGroup=phyControlGroup, userTableIndex=userTableIndex, licenseGroup=licenseGroup, licenseMinimumFirmwareVersion=licenseMinimumFirmwareVersion, userRole=userRole, sFPPortDisabledWarning=sFPPortDisabledWarning, linkModeOptimizationMismatchTrap=linkModeOptimizationMismatchTrap, maxLinkRangeExceeded=maxLinkRangeExceeded, nIDULanPortAutoNegotiation=nIDULanPortAutoNegotiation, dataBridgingAvailability=dataBridgingAvailability, antennaSelection=antennaSelection, softwareVersion=softwareVersion, sNTPServerTable=sNTPServerTable, sFPPortConfigurationMismatchTrap=sFPPortConfigurationMismatchTrap, sNTPServerRetries=sNTPServerRetries, sntp=sntp, licenseVersion=licenseVersion, licenseRegulatoryBandsTableEntry=licenseRegulatoryBandsTableEntry, sNMPTrapTableEntry=sNMPTrapTableEntry, mABState=mABState, sFPPortSpeedAndDuplex=sFPPortSpeedAndDuplex, nIDULanPortStatus=nIDULanPortStatus, ethernetPriorityTableEntry=ethernetPriorityTableEntry, subnetMask=subnetMask, licenseCapacity=licenseCapacity, auxPortAcceptedQLRx=auxPortAcceptedQLRx, mABCurrentTransmitCapacity=mABCurrentTransmitCapacity, portAllocationMismatchTrap=portAllocationMismatchTrap, apc=apc, sFPPortDisabledWarningTrap=sFPPortDisabledWarningTrap, mABHoldoffPeriod=mABHoldoffPeriod, phyControlInstancedTableEntry=phyControlInstancedTableEntry, iPv6GatewayAddress=iPv6GatewayAddress, wirelessOutEthernetOctets=wirelessOutEthernetOctets, receiveDataRateLinked=receiveDataRateLinked, authorizationControlGroup=authorizationControlGroup, ethernetPriorityTable=ethernetPriorityTable, nIDULanPortDisabledWarningTrap=nIDULanPortDisabledWarningTrap, nIDULanPortSpeedAndDuplex=nIDULanPortSpeedAndDuplex, hTTPSAccessEnabled=hTTPSAccessEnabled, remoteInternetAddressType=remoteInternetAddressType, userConfiguredMaxModulationMode=userConfiguredMaxModulationMode, nIDULanPortAutoNegAdvertisement=nIDULanPortAutoNegAdvertisement, packetsToInternalStack=packetsToInternalStack, wirelessLinkStatusAlarmTrap=wirelessLinkStatusAlarmTrap, mainPSUPortDisabledWarningTrap=mainPSUPortDisabledWarningTrap, dataBridgingStatus=dataBridgingStatus, sMTPDestinationEmailAddress=sMTPDestinationEmailAddress, ethernet=ethernet, unitIdentificationGroup=unitIdentificationGroup)
