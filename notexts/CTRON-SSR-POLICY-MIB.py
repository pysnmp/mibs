#
# PySNMP MIB module CTRON-SSR-POLICY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-SSR-POLICY-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 12:56:48 2024
# On host fv-az1215-438 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
ssrMibs, = mibBuilder.importSymbols("CTRON-SSR-SMI-MIB", "ssrMibs")
dot1qVlanStaticEntry, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qVlanStaticEntry")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, Counter32, Gauge32, Integer32, NotificationType, Unsigned32, iso, Bits, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "Gauge32", "Integer32", "NotificationType", "Unsigned32", "iso", "Bits", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "Counter64")
MacAddress, TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
policyMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 52, 2501, 1, 210))
policyMIB.setRevisions(('2003-12-19 17:12', '2003-07-21 15:01', '2000-07-15 00:00', '1999-08-11 00:00', '1999-07-21 00:00', '1998-08-04 00:00',))
if mibBuilder.loadTexts: policyMIB.setLastUpdated('200312191712Z')
if mibBuilder.loadTexts: policyMIB.setOrganization('Enterasys Networks, Inc')
class InterfaceIndex(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class InterfaceIndexOrZero(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class SSRPortComparator(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("notused", 1), ("eq", 2), ("neq", 3), ("lt", 4), ("gt", 5), ("range", 6))

class SSRProtocol(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("ip", 1), ("tcp", 2), ("udp", 3), ("icmp", 4), ("igmp", 5), ("ipx", 6), ("ipxsap", 7), ("ipxrip", 8))

class SSRsocketId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class SSRVlanIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4100)

class SSRPortList(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class SSRFlowPolicyType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("permitFlow", 1), ("denyFlow", 2))

class SSRFlowPolicyAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("policyBeforeRouteLookup", 1), ("policyAfterRouteLookup", 2), ("useOnlyPolicyLookup", 3))

class SSRFlowPolicyAclList(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 4096)

class SSRFlowNextHopList(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 4096)

class SSRFlowLoadPolicy(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3))
    namedValues = NamedValues(("firstAvailable", 2), ("roundRobin", 3))

polL3Group = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12))
polAclServer = MibScalar((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polAclServer.setStatus('current')
polAclNumber = MibScalar((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: polAclNumber.setStatus('current')
polAclLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polAclLastChanged.setStatus('current')
polAclTable = MibTable((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 4), )
if mibBuilder.loadTexts: polAclTable.setStatus('current')
polAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 4, 1), ).setIndexNames((0, "CTRON-SSR-POLICY-MIB", "polAclName"), (0, "CTRON-SSR-POLICY-MIB", "polAclItem"))
if mibBuilder.loadTexts: polAclEntry.setStatus('current')
polAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polAclName.setStatus('current')
polAclItem = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: polAclItem.setStatus('current')
polAclRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polAclRestriction.setStatus('current')
polAclProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 4, 1, 4), SSRProtocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polAclProtocol.setStatus('current')
polAclSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 4, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polAclSrcIp.setStatus('current')
polAclSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 4, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polAclSrcMask.setStatus('current')
polAclDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 4, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polAclDstIp.setStatus('current')
polAclDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 4, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polAclDstMask.setStatus('current')
polAclTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polAclTOS.setStatus('current')
polAclSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 4, 1, 10), SSRsocketId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polAclSrcPort.setStatus('current')
polAclDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 4, 1, 11), SSRsocketId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polAclDstPort.setStatus('current')
polAclSrcOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 4, 1, 12), SSRPortComparator().clone('eq')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polAclSrcOperator.setStatus('current')
polAclDstOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 4, 1, 13), SSRPortComparator().clone('eq')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polAclDstOperator.setStatus('current')
polAclSrcHighRange = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polAclSrcHighRange.setStatus('current')
polAclDstHighRange = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polAclDstHighRange.setStatus('current')
polAclAuditTrail = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 4, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polAclAuditTrail.setStatus('current')
polAclCheckpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("hourly", 1), ("daily", 2), ("weekly", 3), ("monthly", 4), ("endofcall", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polAclCheckpoint.setStatus('current')
polAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 4, 1, 18), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polAclRowStatus.setStatus('current')
polAclServiceNumber = MibScalar((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: polAclServiceNumber.setStatus('current')
polAclServiceLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polAclServiceLastChanged.setStatus('current')
polAclServiceTable = MibTable((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 7), )
if mibBuilder.loadTexts: polAclServiceTable.setStatus('current')
polAclServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 7, 1), ).setIndexNames((0, "CTRON-SSR-POLICY-MIB", "polAclServiceIfIndex"), (0, "CTRON-SSR-POLICY-MIB", "polAclName2"))
if mibBuilder.loadTexts: polAclServiceEntry.setStatus('current')
polAclServiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 7, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polAclServiceIfIndex.setStatus('current')
polAclName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polAclName2.setStatus('current')
polAclServiceDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polAclServiceDirection.setStatus('current')
polAclServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 7, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polAclServiceRowStatus.setStatus('current')
polAclRemoteAllowed = MibScalar((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polAclRemoteAllowed.setStatus('current')
polAclInterfaceNumber = MibScalar((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: polAclInterfaceNumber.setStatus('current')
polAclInterfaceLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polAclInterfaceLastChanged.setStatus('current')
polAclInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 12), )
if mibBuilder.loadTexts: polAclInterfaceTable.setStatus('current')
polAclInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 12, 1), ).setIndexNames((0, "CTRON-SSR-POLICY-MIB", "polAclInterfaceIfIndex"), (0, "CTRON-SSR-POLICY-MIB", "polAclInterfaceDirection"))
if mibBuilder.loadTexts: polAclInterfaceEntry.setStatus('current')
polAclInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 12, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polAclInterfaceIfIndex.setStatus('current')
polAclInterfaceDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: polAclInterfaceDirection.setStatus('current')
polAclPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 12, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: polAclPolicyStatus.setStatus('current')
polL2Group = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 2501, 1, 16))
polL2FilterNumber = MibScalar((1, 3, 6, 1, 4, 1, 52, 2501, 1, 16, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: polL2FilterNumber.setStatus('current')
polL2FilterLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 52, 2501, 1, 16, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polL2FilterLastChanged.setStatus('current')
polL2FilterTable = MibTable((1, 3, 6, 1, 4, 1, 52, 2501, 1, 16, 3), )
if mibBuilder.loadTexts: polL2FilterTable.setStatus('current')
polL2FilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 2501, 1, 16, 3, 1), ).setIndexNames((0, "CTRON-SSR-POLICY-MIB", "polL2FilterIndex"))
if mibBuilder.loadTexts: polL2FilterEntry.setStatus('current')
polL2FilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: polL2FilterIndex.setStatus('current')
polL2FilterDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 16, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: polL2FilterDesc.setStatus('current')
polL2FilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 16, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("staticEntry", 1), ("addressFilter", 2), ("portAddressLock", 3), ("securePort", 4))).clone('staticEntry')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: polL2FilterType.setStatus('current')
polL2FilterRestrictions = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 16, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("allow", 1), ("disallow", 2), ("force", 3), ("none", 4), ("blockIngress", 5), ("blockEgress", 6))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: polL2FilterRestrictions.setStatus('current')
polL2FilterSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 16, 3, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: polL2FilterSrcMacAddr.setStatus('current')
polL2FilterDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 16, 3, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: polL2FilterDstMacAddr.setStatus('current')
polL2FilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 16, 3, 1, 7), SSRVlanIndex().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: polL2FilterVlanId.setStatus('current')
polL2FilterInPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 16, 3, 1, 8), SSRPortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: polL2FilterInPorts.setStatus('current')
polL2FilterOutPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 16, 3, 1, 9), SSRPortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: polL2FilterOutPorts.setStatus('current')
polL2FilterCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 16, 3, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polL2FilterCreationTime.setStatus('current')
polL2FilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 16, 3, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: polL2FilterStatus.setStatus('current')
polL2Dot1qVlanStaticTable = MibTable((1, 3, 6, 1, 4, 1, 52, 2501, 1, 16, 4), )
if mibBuilder.loadTexts: polL2Dot1qVlanStaticTable.setStatus('current')
polL2Dot1qVlanStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 2501, 1, 16, 4, 1), )
dot1qVlanStaticEntry.registerAugmentions(("CTRON-SSR-POLICY-MIB", "polL2Dot1qVlanStaticEntry"))
polL2Dot1qVlanStaticEntry.setIndexNames(*dot1qVlanStaticEntry.getIndexNames())
if mibBuilder.loadTexts: polL2Dot1qVlanStaticEntry.setStatus('current')
polL2Dot1qVlanStaticProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 16, 4, 1, 1), Bits().clone(namedValues=NamedValues(("reserved", 0), ("bridged-protocols", 1), ("ip", 2), ("ipx", 3), ("appletalk", 4), ("dec", 5), ("sna", 6), ("ipv6", 7))).clone(namedValues=NamedValues(("ip", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: polL2Dot1qVlanStaticProtocols.setStatus('current')
polL2Dot1qVlanStaticL4Bridging = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 16, 4, 1, 2), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: polL2Dot1qVlanStaticL4Bridging.setStatus('current')
polL4Group = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15))
polL4PolicyBasedRoutingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polL4PolicyBasedRoutingEnabled.setStatus('current')
polL4NumRouters = MibScalar((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: polL4NumRouters.setStatus('current')
polL4NextHopTableLastChange = MibScalar((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polL4NextHopTableLastChange.setStatus('current')
polL4NextHopTable = MibTable((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 20), )
if mibBuilder.loadTexts: polL4NextHopTable.setStatus('current')
polL4NextHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 20, 1), ).setIndexNames((0, "CTRON-SSR-POLICY-MIB", "polL4NextHopRouter"))
if mibBuilder.loadTexts: polL4NextHopEntry.setStatus('current')
polL4NextHopRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 20, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polL4NextHopRouter.setStatus('current')
polL4NextHopState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("waitingForArp", 2), ("macAcquired", 3), ("noArpReply", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: polL4NextHopState.setStatus('current')
polL4NextHopPortOfExit = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 20, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polL4NextHopPortOfExit.setStatus('current')
polL4NextHopMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 20, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polL4NextHopMacAddress.setStatus('current')
polL4NextHopLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 20, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polL4NextHopLastChange.setStatus('current')
polL4lowControlTableLastChange = MibScalar((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 25), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polL4lowControlTableLastChange.setStatus('current')
polL4NumPolicies = MibScalar((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: polL4NumPolicies.setStatus('current')
polL4lowControlTable = MibTable((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 30), )
if mibBuilder.loadTexts: polL4lowControlTable.setStatus('current')
polL4lowControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 30, 1), ).setIndexNames((0, "CTRON-SSR-POLICY-MIB", "polL4PolicyName"), (0, "CTRON-SSR-POLICY-MIB", "polL4PolicySequence"), (0, "CTRON-SSR-POLICY-MIB", "polL4PolicyInstance"))
if mibBuilder.loadTexts: polL4lowControlEntry.setStatus('current')
polL4PolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 30, 1, 1), DisplayString())
if mibBuilder.loadTexts: polL4PolicyName.setStatus('current')
polL4PolicySequence = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 30, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: polL4PolicySequence.setStatus('current')
polL4PolicyInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 30, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: polL4PolicyInstance.setStatus('current')
polL4PolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 30, 1, 4), SSRFlowPolicyType().clone('permitFlow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: polL4PolicyType.setStatus('current')
polL4PolicyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 30, 1, 5), SSRFlowPolicyAction().clone('policyBeforeRouteLookup')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: polL4PolicyAction.setStatus('current')
polL4PolicyMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 30, 1, 6), SSRFlowPolicyAclList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: polL4PolicyMatch.setStatus('current')
polL4PolicyNextHops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 30, 1, 7), SSRFlowNextHopList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: polL4PolicyNextHops.setStatus('current')
polL4PolicyLoading = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 30, 1, 8), SSRFlowLoadPolicy().clone('firstAvailable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: polL4PolicyLoading.setStatus('current')
polL4PolicyWatch = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 30, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: polL4PolicyWatch.setStatus('current')
polL4lowCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 30, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polL4lowCreationTime.setStatus('current')
polL4lowActiveGates = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 30, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polL4lowActiveGates.setStatus('current')
polL4lowAppliedTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 30, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polL4lowAppliedTimes.setStatus('current')
polL4lowControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 30, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: polL4lowControlStatus.setStatus('current')
polL4GroupStats = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 35))
polL4lowLostRouters = MibScalar((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 35, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polL4lowLostRouters.setStatus('current')
polL4lowControlTableActivates = MibScalar((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 35, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polL4lowControlTableActivates.setStatus('current')
polL4lowControlTableActivateFails = MibScalar((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 35, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polL4lowControlTableActivateFails.setStatus('current')
polL4lowArpMappingChanges = MibScalar((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 35, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polL4lowArpMappingChanges.setStatus('current')
polL4lowIcmpRedirects = MibScalar((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 35, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polL4lowIcmpRedirects.setStatus('current')
polL4lowMatchAttempts = MibScalar((1, 3, 6, 1, 4, 1, 52, 2501, 1, 15, 35, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polL4lowMatchAttempts.setStatus('current')
polConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 2501, 1, 210, 2))
polCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 2501, 1, 210, 2, 1))
polGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 2501, 1, 210, 2, 2))
polComplianceV10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 52, 2501, 1, 210, 2, 1, 1)).setObjects(("CTRON-SSR-POLICY-MIB", "polGroupV10"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    polComplianceV10 = polComplianceV10.setStatus('deprecated')
polComplianceV11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 52, 2501, 1, 210, 2, 1, 2)).setObjects(("CTRON-SSR-POLICY-MIB", "polGroupV11"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    polComplianceV11 = polComplianceV11.setStatus('deprecated')
polComplianceV12 = ModuleCompliance((1, 3, 6, 1, 4, 1, 52, 2501, 1, 210, 2, 1, 3)).setObjects(("CTRON-SSR-POLICY-MIB", "polGroupV12"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    polComplianceV12 = polComplianceV12.setStatus('current')
polComplianceV13 = ModuleCompliance((1, 3, 6, 1, 4, 1, 52, 2501, 1, 210, 2, 1, 4)).setObjects(("CTRON-SSR-POLICY-MIB", "polGroupV13"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    polComplianceV13 = polComplianceV13.setStatus('current')
polGroupV10 = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 2501, 1, 210, 2, 2, 1)).setObjects(("CTRON-SSR-POLICY-MIB", "polAclServer"), ("CTRON-SSR-POLICY-MIB", "polAclNumber"), ("CTRON-SSR-POLICY-MIB", "polAclLastChanged"), ("CTRON-SSR-POLICY-MIB", "polAclName"), ("CTRON-SSR-POLICY-MIB", "polAclItem"), ("CTRON-SSR-POLICY-MIB", "polAclRestriction"), ("CTRON-SSR-POLICY-MIB", "polAclProtocol"), ("CTRON-SSR-POLICY-MIB", "polAclSrcIp"), ("CTRON-SSR-POLICY-MIB", "polAclSrcMask"), ("CTRON-SSR-POLICY-MIB", "polAclDstIp"), ("CTRON-SSR-POLICY-MIB", "polAclDstMask"), ("CTRON-SSR-POLICY-MIB", "polAclTOS"), ("CTRON-SSR-POLICY-MIB", "polAclSrcPort"), ("CTRON-SSR-POLICY-MIB", "polAclDstPort"), ("CTRON-SSR-POLICY-MIB", "polAclSrcOperator"), ("CTRON-SSR-POLICY-MIB", "polAclDstOperator"), ("CTRON-SSR-POLICY-MIB", "polAclSrcHighRange"), ("CTRON-SSR-POLICY-MIB", "polAclDstHighRange"), ("CTRON-SSR-POLICY-MIB", "polAclAuditTrail"), ("CTRON-SSR-POLICY-MIB", "polAclCheckpoint"), ("CTRON-SSR-POLICY-MIB", "polAclRowStatus"), ("CTRON-SSR-POLICY-MIB", "polAclServiceNumber"), ("CTRON-SSR-POLICY-MIB", "polAclServiceLastChanged"), ("CTRON-SSR-POLICY-MIB", "polAclServiceIfIndex"), ("CTRON-SSR-POLICY-MIB", "polAclName2"), ("CTRON-SSR-POLICY-MIB", "polAclServiceDirection"), ("CTRON-SSR-POLICY-MIB", "polAclServiceRowStatus"), ("CTRON-SSR-POLICY-MIB", "polAclRemoteAllowed"), ("CTRON-SSR-POLICY-MIB", "polAclInterfaceNumber"), ("CTRON-SSR-POLICY-MIB", "polAclInterfaceLastChanged"), ("CTRON-SSR-POLICY-MIB", "polAclInterfaceIfIndex"), ("CTRON-SSR-POLICY-MIB", "polAclInterfaceDirection"), ("CTRON-SSR-POLICY-MIB", "polAclPolicyStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    polGroupV10 = polGroupV10.setStatus('deprecated')
polGroupV11 = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 2501, 1, 210, 2, 2, 2)).setObjects(("CTRON-SSR-POLICY-MIB", "polAclServer"), ("CTRON-SSR-POLICY-MIB", "polAclNumber"), ("CTRON-SSR-POLICY-MIB", "polAclLastChanged"), ("CTRON-SSR-POLICY-MIB", "polAclName"), ("CTRON-SSR-POLICY-MIB", "polAclItem"), ("CTRON-SSR-POLICY-MIB", "polAclRestriction"), ("CTRON-SSR-POLICY-MIB", "polAclProtocol"), ("CTRON-SSR-POLICY-MIB", "polAclSrcIp"), ("CTRON-SSR-POLICY-MIB", "polAclSrcMask"), ("CTRON-SSR-POLICY-MIB", "polAclDstIp"), ("CTRON-SSR-POLICY-MIB", "polAclDstMask"), ("CTRON-SSR-POLICY-MIB", "polAclTOS"), ("CTRON-SSR-POLICY-MIB", "polAclSrcPort"), ("CTRON-SSR-POLICY-MIB", "polAclDstPort"), ("CTRON-SSR-POLICY-MIB", "polAclSrcOperator"), ("CTRON-SSR-POLICY-MIB", "polAclDstOperator"), ("CTRON-SSR-POLICY-MIB", "polAclSrcHighRange"), ("CTRON-SSR-POLICY-MIB", "polAclDstHighRange"), ("CTRON-SSR-POLICY-MIB", "polAclAuditTrail"), ("CTRON-SSR-POLICY-MIB", "polAclCheckpoint"), ("CTRON-SSR-POLICY-MIB", "polAclRowStatus"), ("CTRON-SSR-POLICY-MIB", "polAclServiceNumber"), ("CTRON-SSR-POLICY-MIB", "polAclServiceLastChanged"), ("CTRON-SSR-POLICY-MIB", "polAclServiceIfIndex"), ("CTRON-SSR-POLICY-MIB", "polAclName2"), ("CTRON-SSR-POLICY-MIB", "polAclServiceDirection"), ("CTRON-SSR-POLICY-MIB", "polAclServiceRowStatus"), ("CTRON-SSR-POLICY-MIB", "polAclRemoteAllowed"), ("CTRON-SSR-POLICY-MIB", "polAclInterfaceNumber"), ("CTRON-SSR-POLICY-MIB", "polAclInterfaceLastChanged"), ("CTRON-SSR-POLICY-MIB", "polAclInterfaceIfIndex"), ("CTRON-SSR-POLICY-MIB", "polAclInterfaceDirection"), ("CTRON-SSR-POLICY-MIB", "polAclPolicyStatus"), ("CTRON-SSR-POLICY-MIB", "polL2FilterLastChanged"), ("CTRON-SSR-POLICY-MIB", "polL2FilterNumber"), ("CTRON-SSR-POLICY-MIB", "polL2FilterDesc"), ("CTRON-SSR-POLICY-MIB", "polL2FilterType"), ("CTRON-SSR-POLICY-MIB", "polL2FilterRestrictions"), ("CTRON-SSR-POLICY-MIB", "polL2FilterSrcMacAddr"), ("CTRON-SSR-POLICY-MIB", "polL2FilterDstMacAddr"), ("CTRON-SSR-POLICY-MIB", "polL2FilterVlanId"), ("CTRON-SSR-POLICY-MIB", "polL2FilterInPorts"), ("CTRON-SSR-POLICY-MIB", "polL2FilterOutPorts"), ("CTRON-SSR-POLICY-MIB", "polL2FilterCreationTime"), ("CTRON-SSR-POLICY-MIB", "polL2FilterStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    polGroupV11 = polGroupV11.setStatus('deprecated')
polGroupV12 = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 2501, 1, 210, 2, 2, 3)).setObjects(("CTRON-SSR-POLICY-MIB", "polAclServer"), ("CTRON-SSR-POLICY-MIB", "polAclNumber"), ("CTRON-SSR-POLICY-MIB", "polAclLastChanged"), ("CTRON-SSR-POLICY-MIB", "polAclName"), ("CTRON-SSR-POLICY-MIB", "polAclItem"), ("CTRON-SSR-POLICY-MIB", "polAclRestriction"), ("CTRON-SSR-POLICY-MIB", "polAclProtocol"), ("CTRON-SSR-POLICY-MIB", "polAclSrcIp"), ("CTRON-SSR-POLICY-MIB", "polAclSrcMask"), ("CTRON-SSR-POLICY-MIB", "polAclDstIp"), ("CTRON-SSR-POLICY-MIB", "polAclDstMask"), ("CTRON-SSR-POLICY-MIB", "polAclTOS"), ("CTRON-SSR-POLICY-MIB", "polAclSrcPort"), ("CTRON-SSR-POLICY-MIB", "polAclDstPort"), ("CTRON-SSR-POLICY-MIB", "polAclSrcOperator"), ("CTRON-SSR-POLICY-MIB", "polAclDstOperator"), ("CTRON-SSR-POLICY-MIB", "polAclSrcHighRange"), ("CTRON-SSR-POLICY-MIB", "polAclDstHighRange"), ("CTRON-SSR-POLICY-MIB", "polAclAuditTrail"), ("CTRON-SSR-POLICY-MIB", "polAclCheckpoint"), ("CTRON-SSR-POLICY-MIB", "polAclRowStatus"), ("CTRON-SSR-POLICY-MIB", "polAclServiceNumber"), ("CTRON-SSR-POLICY-MIB", "polAclServiceLastChanged"), ("CTRON-SSR-POLICY-MIB", "polAclServiceIfIndex"), ("CTRON-SSR-POLICY-MIB", "polAclName2"), ("CTRON-SSR-POLICY-MIB", "polAclServiceDirection"), ("CTRON-SSR-POLICY-MIB", "polAclServiceRowStatus"), ("CTRON-SSR-POLICY-MIB", "polAclRemoteAllowed"), ("CTRON-SSR-POLICY-MIB", "polAclInterfaceNumber"), ("CTRON-SSR-POLICY-MIB", "polAclInterfaceLastChanged"), ("CTRON-SSR-POLICY-MIB", "polAclInterfaceIfIndex"), ("CTRON-SSR-POLICY-MIB", "polAclInterfaceDirection"), ("CTRON-SSR-POLICY-MIB", "polAclPolicyStatus"), ("CTRON-SSR-POLICY-MIB", "polL2FilterLastChanged"), ("CTRON-SSR-POLICY-MIB", "polL2FilterNumber"), ("CTRON-SSR-POLICY-MIB", "polL2FilterDesc"), ("CTRON-SSR-POLICY-MIB", "polL2FilterType"), ("CTRON-SSR-POLICY-MIB", "polL2FilterRestrictions"), ("CTRON-SSR-POLICY-MIB", "polL2FilterSrcMacAddr"), ("CTRON-SSR-POLICY-MIB", "polL2FilterDstMacAddr"), ("CTRON-SSR-POLICY-MIB", "polL2FilterVlanId"), ("CTRON-SSR-POLICY-MIB", "polL2FilterInPorts"), ("CTRON-SSR-POLICY-MIB", "polL2FilterOutPorts"), ("CTRON-SSR-POLICY-MIB", "polL2FilterCreationTime"), ("CTRON-SSR-POLICY-MIB", "polL2FilterStatus"), ("CTRON-SSR-POLICY-MIB", "polL4PolicyBasedRoutingEnabled"), ("CTRON-SSR-POLICY-MIB", "polL4NumRouters"), ("CTRON-SSR-POLICY-MIB", "polL4NextHopTableLastChange"), ("CTRON-SSR-POLICY-MIB", "polL4NextHopRouter"), ("CTRON-SSR-POLICY-MIB", "polL4NextHopState"), ("CTRON-SSR-POLICY-MIB", "polL4NextHopPortOfExit"), ("CTRON-SSR-POLICY-MIB", "polL4NextHopMacAddress"), ("CTRON-SSR-POLICY-MIB", "polL4NextHopLastChange"), ("CTRON-SSR-POLICY-MIB", "polL4lowControlTableLastChange"), ("CTRON-SSR-POLICY-MIB", "polL4NumPolicies"), ("CTRON-SSR-POLICY-MIB", "polL4PolicyType"), ("CTRON-SSR-POLICY-MIB", "polL4PolicyAction"), ("CTRON-SSR-POLICY-MIB", "polL4PolicyMatch"), ("CTRON-SSR-POLICY-MIB", "polL4PolicyNextHops"), ("CTRON-SSR-POLICY-MIB", "polL4PolicyLoading"), ("CTRON-SSR-POLICY-MIB", "polL4PolicyWatch"), ("CTRON-SSR-POLICY-MIB", "polL4lowCreationTime"), ("CTRON-SSR-POLICY-MIB", "polL4lowActiveGates"), ("CTRON-SSR-POLICY-MIB", "polL4lowAppliedTimes"), ("CTRON-SSR-POLICY-MIB", "polL4lowControlStatus"), ("CTRON-SSR-POLICY-MIB", "polL4lowLostRouters"), ("CTRON-SSR-POLICY-MIB", "polL4lowControlTableActivates"), ("CTRON-SSR-POLICY-MIB", "polL4lowControlTableActivateFails"), ("CTRON-SSR-POLICY-MIB", "polL4lowArpMappingChanges"), ("CTRON-SSR-POLICY-MIB", "polL4lowIcmpRedirects"), ("CTRON-SSR-POLICY-MIB", "polL4lowMatchAttempts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    polGroupV12 = polGroupV12.setStatus('current')
polGroupV13 = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 2501, 1, 210, 2, 2, 4)).setObjects(("CTRON-SSR-POLICY-MIB", "polAclServer"), ("CTRON-SSR-POLICY-MIB", "polAclNumber"), ("CTRON-SSR-POLICY-MIB", "polAclLastChanged"), ("CTRON-SSR-POLICY-MIB", "polAclName"), ("CTRON-SSR-POLICY-MIB", "polAclItem"), ("CTRON-SSR-POLICY-MIB", "polAclRestriction"), ("CTRON-SSR-POLICY-MIB", "polAclProtocol"), ("CTRON-SSR-POLICY-MIB", "polAclSrcIp"), ("CTRON-SSR-POLICY-MIB", "polAclSrcMask"), ("CTRON-SSR-POLICY-MIB", "polAclDstIp"), ("CTRON-SSR-POLICY-MIB", "polAclDstMask"), ("CTRON-SSR-POLICY-MIB", "polAclTOS"), ("CTRON-SSR-POLICY-MIB", "polAclSrcPort"), ("CTRON-SSR-POLICY-MIB", "polAclDstPort"), ("CTRON-SSR-POLICY-MIB", "polAclSrcOperator"), ("CTRON-SSR-POLICY-MIB", "polAclDstOperator"), ("CTRON-SSR-POLICY-MIB", "polAclSrcHighRange"), ("CTRON-SSR-POLICY-MIB", "polAclDstHighRange"), ("CTRON-SSR-POLICY-MIB", "polAclAuditTrail"), ("CTRON-SSR-POLICY-MIB", "polAclCheckpoint"), ("CTRON-SSR-POLICY-MIB", "polAclRowStatus"), ("CTRON-SSR-POLICY-MIB", "polAclServiceNumber"), ("CTRON-SSR-POLICY-MIB", "polAclServiceLastChanged"), ("CTRON-SSR-POLICY-MIB", "polAclServiceIfIndex"), ("CTRON-SSR-POLICY-MIB", "polAclName2"), ("CTRON-SSR-POLICY-MIB", "polAclServiceDirection"), ("CTRON-SSR-POLICY-MIB", "polAclServiceRowStatus"), ("CTRON-SSR-POLICY-MIB", "polAclRemoteAllowed"), ("CTRON-SSR-POLICY-MIB", "polAclInterfaceNumber"), ("CTRON-SSR-POLICY-MIB", "polAclInterfaceLastChanged"), ("CTRON-SSR-POLICY-MIB", "polAclInterfaceIfIndex"), ("CTRON-SSR-POLICY-MIB", "polAclInterfaceDirection"), ("CTRON-SSR-POLICY-MIB", "polAclPolicyStatus"), ("CTRON-SSR-POLICY-MIB", "polL2FilterLastChanged"), ("CTRON-SSR-POLICY-MIB", "polL2FilterNumber"), ("CTRON-SSR-POLICY-MIB", "polL2FilterDesc"), ("CTRON-SSR-POLICY-MIB", "polL2FilterType"), ("CTRON-SSR-POLICY-MIB", "polL2FilterRestrictions"), ("CTRON-SSR-POLICY-MIB", "polL2FilterSrcMacAddr"), ("CTRON-SSR-POLICY-MIB", "polL2FilterDstMacAddr"), ("CTRON-SSR-POLICY-MIB", "polL2FilterVlanId"), ("CTRON-SSR-POLICY-MIB", "polL2FilterInPorts"), ("CTRON-SSR-POLICY-MIB", "polL2FilterOutPorts"), ("CTRON-SSR-POLICY-MIB", "polL2FilterCreationTime"), ("CTRON-SSR-POLICY-MIB", "polL2FilterStatus"), ("CTRON-SSR-POLICY-MIB", "polL2Dot1qVlanStaticProtocols"), ("CTRON-SSR-POLICY-MIB", "polL2Dot1qVlanStaticL4Bridging"), ("CTRON-SSR-POLICY-MIB", "polL4PolicyBasedRoutingEnabled"), ("CTRON-SSR-POLICY-MIB", "polL4NumRouters"), ("CTRON-SSR-POLICY-MIB", "polL4NextHopTableLastChange"), ("CTRON-SSR-POLICY-MIB", "polL4NextHopRouter"), ("CTRON-SSR-POLICY-MIB", "polL4NextHopState"), ("CTRON-SSR-POLICY-MIB", "polL4NextHopPortOfExit"), ("CTRON-SSR-POLICY-MIB", "polL4NextHopMacAddress"), ("CTRON-SSR-POLICY-MIB", "polL4NextHopLastChange"), ("CTRON-SSR-POLICY-MIB", "polL4lowControlTableLastChange"), ("CTRON-SSR-POLICY-MIB", "polL4NumPolicies"), ("CTRON-SSR-POLICY-MIB", "polL4PolicyType"), ("CTRON-SSR-POLICY-MIB", "polL4PolicyAction"), ("CTRON-SSR-POLICY-MIB", "polL4PolicyMatch"), ("CTRON-SSR-POLICY-MIB", "polL4PolicyNextHops"), ("CTRON-SSR-POLICY-MIB", "polL4PolicyLoading"), ("CTRON-SSR-POLICY-MIB", "polL4PolicyWatch"), ("CTRON-SSR-POLICY-MIB", "polL4lowCreationTime"), ("CTRON-SSR-POLICY-MIB", "polL4lowActiveGates"), ("CTRON-SSR-POLICY-MIB", "polL4lowAppliedTimes"), ("CTRON-SSR-POLICY-MIB", "polL4lowControlStatus"), ("CTRON-SSR-POLICY-MIB", "polL4lowLostRouters"), ("CTRON-SSR-POLICY-MIB", "polL4lowControlTableActivates"), ("CTRON-SSR-POLICY-MIB", "polL4lowControlTableActivateFails"), ("CTRON-SSR-POLICY-MIB", "polL4lowArpMappingChanges"), ("CTRON-SSR-POLICY-MIB", "polL4lowIcmpRedirects"), ("CTRON-SSR-POLICY-MIB", "polL4lowMatchAttempts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    polGroupV13 = polGroupV13.setStatus('current')
mibBuilder.exportSymbols("CTRON-SSR-POLICY-MIB", polL2FilterSrcMacAddr=polL2FilterSrcMacAddr, polL2Group=polL2Group, polAclInterfaceEntry=polAclInterfaceEntry, polL4lowLostRouters=polL4lowLostRouters, polL2FilterInPorts=polL2FilterInPorts, polAclDstOperator=polAclDstOperator, polL4lowCreationTime=polL4lowCreationTime, polL2FilterIndex=polL2FilterIndex, polGroupV13=polGroupV13, SSRVlanIndex=SSRVlanIndex, polL4PolicyInstance=polL4PolicyInstance, polAclItem=polAclItem, SSRPortComparator=SSRPortComparator, polL4lowControlTableActivates=polL4lowControlTableActivates, polAclInterfaceTable=polAclInterfaceTable, polL3Group=polL3Group, SSRProtocol=SSRProtocol, polL4PolicyName=polL4PolicyName, polL4PolicyWatch=polL4PolicyWatch, SSRFlowNextHopList=SSRFlowNextHopList, polL4lowControlStatus=polL4lowControlStatus, polL4lowControlTableActivateFails=polL4lowControlTableActivateFails, polAclNumber=polAclNumber, polAclRowStatus=polAclRowStatus, polL2FilterTable=polL2FilterTable, polAclDstPort=polAclDstPort, polAclAuditTrail=polAclAuditTrail, SSRFlowPolicyAction=SSRFlowPolicyAction, polGroupV11=polGroupV11, polAclSrcHighRange=polAclSrcHighRange, polL2Dot1qVlanStaticEntry=polL2Dot1qVlanStaticEntry, polGroupV10=polGroupV10, polL4NextHopPortOfExit=polL4NextHopPortOfExit, polAclName2=polAclName2, polAclInterfaceDirection=polAclInterfaceDirection, polL4lowControlTable=polL4lowControlTable, polL4PolicyLoading=polL4PolicyLoading, polL2FilterEntry=polL2FilterEntry, polL2FilterDstMacAddr=polL2FilterDstMacAddr, polL4lowControlEntry=polL4lowControlEntry, polAclDstHighRange=polAclDstHighRange, polL4NumRouters=polL4NumRouters, polL4NextHopTableLastChange=polL4NextHopTableLastChange, polComplianceV12=polComplianceV12, policyMIB=policyMIB, polL4NextHopRouter=polL4NextHopRouter, polL4PolicyBasedRoutingEnabled=polL4PolicyBasedRoutingEnabled, polAclServiceNumber=polAclServiceNumber, InterfaceIndexOrZero=InterfaceIndexOrZero, polL4NumPolicies=polL4NumPolicies, polAclDstIp=polAclDstIp, SSRFlowLoadPolicy=SSRFlowLoadPolicy, polL4lowMatchAttempts=polL4lowMatchAttempts, polL4GroupStats=polL4GroupStats, PYSNMP_MODULE_ID=policyMIB, polL2Dot1qVlanStaticTable=polL2Dot1qVlanStaticTable, polAclLastChanged=polAclLastChanged, polL2FilterRestrictions=polL2FilterRestrictions, polAclTable=polAclTable, polL4PolicyMatch=polL4PolicyMatch, polL2FilterLastChanged=polL2FilterLastChanged, polL4lowControlTableLastChange=polL4lowControlTableLastChange, polAclServiceRowStatus=polAclServiceRowStatus, polL4lowIcmpRedirects=polL4lowIcmpRedirects, polAclSrcMask=polAclSrcMask, polAclInterfaceLastChanged=polAclInterfaceLastChanged, polL2FilterDesc=polL2FilterDesc, polL2FilterCreationTime=polL2FilterCreationTime, polAclInterfaceNumber=polAclInterfaceNumber, polAclServiceTable=polAclServiceTable, polL4NextHopLastChange=polL4NextHopLastChange, polL4PolicyAction=polL4PolicyAction, polL4PolicyType=polL4PolicyType, polAclDstMask=polAclDstMask, polAclEntry=polAclEntry, polAclServiceIfIndex=polAclServiceIfIndex, polL4lowAppliedTimes=polL4lowAppliedTimes, polAclServiceEntry=polAclServiceEntry, polAclServiceDirection=polAclServiceDirection, polL2FilterType=polL2FilterType, polAclProtocol=polAclProtocol, polL4NextHopTable=polL4NextHopTable, polL4NextHopMacAddress=polL4NextHopMacAddress, SSRFlowPolicyType=SSRFlowPolicyType, polL2FilterStatus=polL2FilterStatus, SSRPortList=SSRPortList, polConformance=polConformance, polAclRemoteAllowed=polAclRemoteAllowed, polAclName=polAclName, polL2Dot1qVlanStaticL4Bridging=polL2Dot1qVlanStaticL4Bridging, polAclCheckpoint=polAclCheckpoint, polL4lowActiveGates=polL4lowActiveGates, polL2FilterVlanId=polL2FilterVlanId, polGroups=polGroups, polComplianceV13=polComplianceV13, polL4NextHopEntry=polL4NextHopEntry, polL4PolicyNextHops=polL4PolicyNextHops, polL4lowArpMappingChanges=polL4lowArpMappingChanges, polAclSrcIp=polAclSrcIp, polL4NextHopState=polL4NextHopState, polL2FilterOutPorts=polL2FilterOutPorts, polAclSrcOperator=polAclSrcOperator, polAclSrcPort=polAclSrcPort, polL2Dot1qVlanStaticProtocols=polL2Dot1qVlanStaticProtocols, polL2FilterNumber=polL2FilterNumber, InterfaceIndex=InterfaceIndex, polAclInterfaceIfIndex=polAclInterfaceIfIndex, polAclServiceLastChanged=polAclServiceLastChanged, polL4PolicySequence=polL4PolicySequence, SSRsocketId=SSRsocketId, polAclPolicyStatus=polAclPolicyStatus, polComplianceV11=polComplianceV11, polAclServer=polAclServer, polAclRestriction=polAclRestriction, polComplianceV10=polComplianceV10, polCompliances=polCompliances, polAclTOS=polAclTOS, polGroupV12=polGroupV12, SSRFlowPolicyAclList=SSRFlowPolicyAclList, polL4Group=polL4Group)
