#
# PySNMP MIB module RAD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/packetlight/RAD-MIB
# Produced by pysmi-1.1.12 at Wed May 29 08:14:21 2024
# On host fv-az698-992 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
ifIndex, ifAlias = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifAlias")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
PerfCurrentCount, PerfTotalCount, PerfIntervalCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfCurrentCount", "PerfTotalCount", "PerfIntervalCount")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, Gauge32, enterprises, iso, ObjectIdentity, IpAddress, Counter64, Unsigned32, Bits, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "Gauge32", "enterprises", "iso", "ObjectIdentity", "IpAddress", "Counter64", "Unsigned32", "Bits", "TimeTicks", "NotificationType")
RowStatus, DisplayString, TruthValue, RowPointer, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "RowPointer", "TimeStamp", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

rad = MibIdentifier((1, 3, 6, 1, 4, 1, 164))
radGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6))
systems = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1))
agnt = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 2))
agnHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnHwVersion.setStatus('current')
agnTrapMask = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnTrapMask.setStatus('current')
agnTrapValue = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(100, 100)).setFixedLength(100)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnTrapValue.setStatus('deprecated')
agnChangeCnt = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnChangeCnt.setStatus('current')
agnSpecific = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSpecific.setStatus('current')
agnConfigMsg = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnConfigMsg.setStatus('current')
mngTrapIpTable = MibTable((1, 3, 6, 1, 4, 1, 164, 6, 2, 7), )
if mibBuilder.loadTexts: mngTrapIpTable.setStatus('current')
mngEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1), ).setIndexNames((0, "RAD-MIB", "mngID"))
if mibBuilder.loadTexts: mngEntry.setStatus('current')
mngID = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mngID.setStatus('current')
mngIP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngIP.setStatus('current')
mngIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngIPMask.setStatus('deprecated')
mngTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngTrapMask.setStatus('current')
mngAlarmTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngAlarmTrapMask.setStatus('current')
mngSnmpTrapUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngSnmpTrapUdpPort.setStatus('current')
agnIndication = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("faulty", 1), ("warning", 2), ("normal", 3), ("minor", 4), ("major", 5), ("event", 6), ("critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnIndication.setStatus('current')
agnMonitorModeCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnMonitorModeCmd.setStatus('current')
agnLed = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnLed.setStatus('current')
trapTable = MibTable((1, 3, 6, 1, 4, 1, 164, 6, 2, 11), )
if mibBuilder.loadTexts: trapTable.setStatus('current')
trapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 6, 2, 11, 1), ).setIndexNames((0, "RAD-MIB", "trapID"))
if mibBuilder.loadTexts: trapEntry.setStatus('current')
trapID = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapID.setStatus('current')
trapVal = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapVal.setStatus('current')
trapTimeSinceOccurrence = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 11, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapTimeSinceOccurrence.setStatus('current')
fileTransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 2, 12))
fileServerIP = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServerIP.setStatus('current')
fileName = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileName.setStatus('current')
fileTransCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 255))).clone(namedValues=NamedValues(("swDwnLoad", 1), ("configDwnLoad", 2), ("configUpLoad", 3), ("coProcDwnLoad", 4), ("stateUpLoad", 5), ("dwnLoadUserFile", 6), ("upLoadUserFile", 7), ("swDwnLoadAndReset", 8), ("swUpLoad", 9), ("swDwnLoad2BkupStorage", 10), ("bootDwnLoad", 11), ("bootUpLoad", 12), ("swUpLoadFromBkupStorage", 13), ("licenseDwnLoad", 14), ("configDwnLoadToDefaultFile", 15), ("noOp", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileTransCmd.setStatus('current')
tftpRetryTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpRetryTimeOut.setStatus('current')
tftpTotalTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpTotalTimeOut.setStatus('current')
tftpStatus = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noOp", 2), ("connecting", 3), ("transferringData", 4), ("endedTimeOut", 5), ("endedOk", 6), ("error", 7))).clone('noOp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpStatus.setStatus('current')
tftpError = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2).clone(hexValue="0000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpError.setStatus('current')
fileTransferToSubSystems = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileTransferToSubSystems.setStatus('current')
fileNameWithinProduct = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileNameWithinProduct.setStatus('current')
intSwdlTable = MibTable((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10), )
if mibBuilder.loadTexts: intSwdlTable.setStatus('current')
intSwdlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10, 1), ).setIndexNames((0, "RAD-MIB", "intSwdlObjIdx"), (0, "RAD-MIB", "intSwdlFileIdx"))
if mibBuilder.loadTexts: intSwdlEntry.setStatus('current')
intSwdlObjIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intSwdlObjIdx.setStatus('current')
intSwdlFileIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intSwdlFileIdx.setStatus('current')
intSwdlFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intSwdlFileName.setStatus('current')
intSwdlFileSwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intSwdlFileSwVer.setStatus('current')
intSwdlSwDate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intSwdlSwDate.setStatus('current')
intSwdlSize = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intSwdlSize.setStatus('current')
intSwdlCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: intSwdlCmd.setStatus('current')
intSwdlToSubSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: intSwdlToSubSystem.setStatus('current')
intSwdlCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 220, 221, 222, 223, 270, 271, 272, 273, 280, 290, 300, 301, 302, 303, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325))).clone(namedValues=NamedValues(("unknown", 1), ("gstm1", 220), ("goc3", 221), ("gstm1D", 222), ("goc3D", 223), ("serverE1", 270), ("serverT1", 271), ("serverE1Pw", 272), ("serverT1Pw", 273), ("gigabitEth", 280), ("channelizedT3Pw1", 290), ("cesT128", 300), ("cesE128", 301), ("cesT1Pw28", 302), ("cesE1Pw28", 303), ("vmxE1VeDe", 310), ("vmxE1VeDi", 311), ("vmxE1ViDe", 312), ("vmxE1ViDi", 313), ("vmxT1VeDe", 314), ("vmxT1VeDi", 315), ("vmxT1ViDe", 316), ("vmxT1ViDi", 317), ("vc12E1UeNe", 318), ("vc12E1UeNi", 319), ("vc12E1UiNe", 320), ("vc12E1UiNi", 321), ("vc12T1UeNe", 322), ("vc12T1UeNi", 323), ("vc12T1UiNe", 324), ("vc12T1UiNi", 325)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intSwdlCardType.setStatus('current')
intSwdlFlashIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intSwdlFlashIdx.setStatus('current')
swdlStatusTable = MibTable((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 11), )
if mibBuilder.loadTexts: swdlStatusTable.setStatus('current')
swdlStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 11, 1), ).setIndexNames((0, "RAD-MIB", "swdlStatusTypeIdx"), (0, "RAD-MIB", "swdlStatusIdx"))
if mibBuilder.loadTexts: swdlStatusEntry.setStatus('current')
swdlStatusTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swdlStatusTypeIdx.setStatus('current')
swdlStatusIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swdlStatusIdx.setStatus('current')
swdlStatusFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swdlStatusFileName.setStatus('current')
swdlStatusSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swdlStatusSlot.setStatus('current')
swdlStatusSubSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swdlStatusSubSystem.setStatus('current')
swdlStatusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swdlStatusStatus.setStatus('current')
swdlStatusTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 11, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swdlStatusTime.setStatus('current')
clearDwldStatusLog = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearDwldStatusLog.setStatus('current')
autoFileTransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 13))
autoFileTransferTable = MibTable((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 13, 1), )
if mibBuilder.loadTexts: autoFileTransferTable.setStatus('current')
autoFileTransferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 13, 1, 1), ).setIndexNames((0, "RAD-MIB", "autoFileTransferType"))
if mibBuilder.loadTexts: autoFileTransferEntry.setStatus('current')
autoFileTransferType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("alarmsBuffer", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoFileTransferType.setStatus('current')
autoFileTransferServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 13, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFileTransferServerIp.setStatus('current')
autoFileTransferFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 13, 1, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFileTransferFileName.setStatus('current')
autoFileTransferScheduling = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("now", 2), ("recurrence", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFileTransferScheduling.setStatus('current')
autoFileTransferTimeRecurrence = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 13, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFileTransferTimeRecurrence.setStatus('current')
autoFileTransferOccurrenceRecurrence = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 13, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFileTransferOccurrenceRecurrence.setStatus('current')
fileTransferServerPort = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileTransferServerPort.setStatus('current')
fileTransferProtocol = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tftp", 1), ("sftp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileTransferProtocol.setStatus('current')
systemReset = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 2), ("on", 3), ("resetConfig", 4), ("resetMapping", 5), ("resetStandby", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemReset.setStatus('current')
systemTiming = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 2, 14))
systemDate = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 14, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDate.setStatus('current')
systemTime = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 14, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemTime.setStatus('current')
systemTimeElapsed = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 14, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTimeElapsed.setStatus('current')
systemResetAllStatsCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemResetAllStatsCmd.setStatus('current')
systemClearTablesCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("tempCnfgTables", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemClearTablesCmd.setStatus('current')
systemParameter = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemParameter.setStatus('current')
agnGlobalAlarmMask = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(100, 100)).setFixedLength(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnGlobalAlarmMask.setStatus('current')
alarmSeverity = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("event", 3), ("minor", 4), ("major", 5), ("warning", 6), ("critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSeverity.setStatus('current')
alarmState = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmState.setStatus('current')
agnTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnTestStatus.setStatus('current')
systemSaveAndResetAllStatsCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSaveAndResetAllStatsCmd.setStatus('current')
systemDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDefaultGateway.setStatus('current')
agnSendTrapParameter = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnSendTrapParameter.setStatus('current')
agnDeviceCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 42), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnDeviceCapabilities.setStatus('current')
agnStoreCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("off", 2), ("inFlash", 3), ("asDefConfigFile", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnStoreCmd.setStatus('current')
agnSwVersionSwapCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("mainAndBackup", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnSwVersionSwapCmd.setStatus('current')
agnTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 60), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnTrapDelay.setStatus('current')
systemsEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 164, 6, 1, 0))
if mibBuilder.loadTexts: systemsEvents.setStatus('current')
tftpStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 1)).setObjects(("RAD-MIB", "tftpStatus"))
if mibBuilder.loadTexts: tftpStatusChangeTrap.setStatus('current')
agnStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 2)).setObjects(("RAD-MIB", "agnIndication"))
if mibBuilder.loadTexts: agnStatusChangeTrap.setStatus('current')
swdlStatusResult = NotificationType((1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 4)).setObjects(("RAD-MIB", "swdlStatusFileName"))
if mibBuilder.loadTexts: swdlStatusResult.setStatus('current')
intSwdlSlotFileMismatch = NotificationType((1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 5)).setObjects(("RAD-MIB", "intSwdlFileName"))
if mibBuilder.loadTexts: intSwdlSlotFileMismatch.setStatus('current')
mibBuilder.exportSymbols("RAD-MIB", intSwdlCmd=intSwdlCmd, swdlStatusResult=swdlStatusResult, autoFileTransferServerIp=autoFileTransferServerIp, agnLed=agnLed, agnTrapValue=agnTrapValue, tftpRetryTimeOut=tftpRetryTimeOut, swdlStatusTable=swdlStatusTable, intSwdlFileSwVer=intSwdlFileSwVer, trapID=trapID, autoFileTransferScheduling=autoFileTransferScheduling, systemClearTablesCmd=systemClearTablesCmd, intSwdlToSubSystem=intSwdlToSubSystem, intSwdlEntry=intSwdlEntry, MacAddress=MacAddress, agnConfigMsg=agnConfigMsg, systemTiming=systemTiming, swdlStatusEntry=swdlStatusEntry, systemSaveAndResetAllStatsCmd=systemSaveAndResetAllStatsCmd, intSwdlCardType=intSwdlCardType, agnStatusChangeTrap=agnStatusChangeTrap, agnTrapMask=agnTrapMask, fileTransferToSubSystems=fileTransferToSubSystems, mngID=mngID, swdlStatusTime=swdlStatusTime, clearDwldStatusLog=clearDwldStatusLog, mngIP=mngIP, autoFileTransferTable=autoFileTransferTable, mngSnmpTrapUdpPort=mngSnmpTrapUdpPort, mngEntry=mngEntry, tftpStatus=tftpStatus, trapEntry=trapEntry, autoFileTransferTimeRecurrence=autoFileTransferTimeRecurrence, mngTrapIpTable=mngTrapIpTable, intSwdlSlotFileMismatch=intSwdlSlotFileMismatch, swdlStatusIdx=swdlStatusIdx, agnSpecific=agnSpecific, systemTimeElapsed=systemTimeElapsed, autoFileTransferEntry=autoFileTransferEntry, systemsEvents=systemsEvents, alarmState=alarmState, swdlStatusFileName=swdlStatusFileName, fileNameWithinProduct=fileNameWithinProduct, tftpStatusChangeTrap=tftpStatusChangeTrap, intSwdlFlashIdx=intSwdlFlashIdx, swdlStatusTypeIdx=swdlStatusTypeIdx, fileTransfer=fileTransfer, agnMonitorModeCmd=agnMonitorModeCmd, agnTestStatus=agnTestStatus, intSwdlFileIdx=intSwdlFileIdx, intSwdlFileName=intSwdlFileName, mngTrapMask=mngTrapMask, swdlStatusStatus=swdlStatusStatus, systemTime=systemTime, systems=systems, autoFileTransfer=autoFileTransfer, alarmSeverity=alarmSeverity, agnTrapDelay=agnTrapDelay, fileName=fileName, tftpTotalTimeOut=tftpTotalTimeOut, agnChangeCnt=agnChangeCnt, agnSendTrapParameter=agnSendTrapParameter, agnHwVersion=agnHwVersion, tftpError=tftpError, systemDefaultGateway=systemDefaultGateway, trapTimeSinceOccurrence=trapTimeSinceOccurrence, intSwdlObjIdx=intSwdlObjIdx, trapTable=trapTable, agnDeviceCapabilities=agnDeviceCapabilities, agnStoreCmd=agnStoreCmd, intSwdlSwDate=intSwdlSwDate, intSwdlTable=intSwdlTable, swdlStatusSlot=swdlStatusSlot, autoFileTransferFileName=autoFileTransferFileName, systemDate=systemDate, mngIPMask=mngIPMask, agnt=agnt, fileTransferProtocol=fileTransferProtocol, systemReset=systemReset, autoFileTransferType=autoFileTransferType, radGen=radGen, agnSwVersionSwapCmd=agnSwVersionSwapCmd, agnIndication=agnIndication, fileTransferServerPort=fileTransferServerPort, fileTransCmd=fileTransCmd, agnGlobalAlarmMask=agnGlobalAlarmMask, systemResetAllStatsCmd=systemResetAllStatsCmd, fileServerIP=fileServerIP, intSwdlSize=intSwdlSize, trapVal=trapVal, swdlStatusSubSystem=swdlStatusSubSystem, systemParameter=systemParameter, autoFileTransferOccurrenceRecurrence=autoFileTransferOccurrenceRecurrence, rad=rad, mngAlarmTrapMask=mngAlarmTrapMask)
