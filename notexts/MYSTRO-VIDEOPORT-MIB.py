#
# PySNMP MIB module MYSTRO-VIDEOPORT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/mystro/MYSTRO-VIDEOPORT-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 15:13:37 2024
# On host fv-az692-788 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
generic, = mibBuilder.importSymbols("MYSTRO-ROOT-MIB", "generic")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Bits, IpAddress, iso, Counter32, Gauge32, NotificationType, enterprises, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "IpAddress", "iso", "Counter32", "Gauge32", "NotificationType", "enterprises", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "Unsigned32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
udpLocalPort, udpLocalAddress = mibBuilder.importSymbols("UDP-MIB", "udpLocalPort", "udpLocalAddress")
videoport = ModuleIdentity((1, 3, 6, 1, 4, 1, 14373, 2, 1))
videoport.setRevisions(('2002-11-05 01:00',))
if mibBuilder.loadTexts: videoport.setLastUpdated('200211052324Z')
if mibBuilder.loadTexts: videoport.setOrganization('Mystro TV - an AOL Time Warner Company')
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
videoServicesTable = MibTable((1, 3, 6, 1, 4, 1, 14373, 2, 1, 1), )
if mibBuilder.loadTexts: videoServicesTable.setStatus('current')
videoServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14373, 2, 1, 1, 1), ).setIndexNames((0, "MYSTRO-VIDEOPORT-MIB", "serviceID"), (0, "MYSTRO-VIDEOPORT-MIB", "definition"))
if mibBuilder.loadTexts: videoServicesEntry.setStatus('current')
serviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceID.setStatus('current')
definition = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stddef", 1), ("highdef", 2), ("mixture", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: definition.setStatus('current')
transportType = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("udp", 1), ("asi", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transportType.setStatus('current')
bitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitRate.setStatus('current')
udpServicesTable = MibTable((1, 3, 6, 1, 4, 1, 14373, 2, 1, 10), )
if mibBuilder.loadTexts: udpServicesTable.setStatus('current')
udpServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14373, 2, 1, 10, 1), ).setIndexNames((0, "MYSTRO-VIDEOPORT-MIB", "serviceID"), (0, "MYSTRO-VIDEOPORT-MIB", "definition"))
if mibBuilder.loadTexts: udpServicesEntry.setStatus('current')
destIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destIPAddr.setStatus('current')
dataUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataUdpPort.setStatus('current')
trickModeUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trickModeUdpPort.setStatus('current')
asiServicesTable = MibTable((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15), )
if mibBuilder.loadTexts: asiServicesTable.setStatus('current')
asiServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15, 1), ).setIndexNames((0, "MYSTRO-VIDEOPORT-MIB", "serviceID"), (0, "MYSTRO-VIDEOPORT-MIB", "definition"))
if mibBuilder.loadTexts: asiServicesEntry.setStatus('current')
progNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: progNumber.setStatus('current')
pidPMT = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15, 1, 2), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidPMT.setStatus('current')
pidVideo = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15, 1, 3), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidVideo.setStatus('current')
pidAudio0 = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15, 1, 4), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidAudio0.setStatus('current')
pidAudio1 = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15, 1, 5), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidAudio1.setStatus('current')
pidAudio2 = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15, 1, 6), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidAudio2.setStatus('current')
pidAudio3 = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15, 1, 7), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidAudio3.setStatus('current')
pidAudio4 = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15, 1, 8), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidAudio4.setStatus('current')
pidAudio5 = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15, 1, 9), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidAudio5.setStatus('current')
connector = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connector.setStatus('current')
notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 14373, 2, 1, 500))
addService = NotificationType((1, 3, 6, 1, 4, 1, 14373, 2, 1, 500, 1)).setObjects(("MYSTRO-VIDEOPORT-MIB", "serviceID"), ("MYSTRO-VIDEOPORT-MIB", "definition"), ("MYSTRO-VIDEOPORT-MIB", "transportType"))
if mibBuilder.loadTexts: addService.setStatus('current')
removeService = NotificationType((1, 3, 6, 1, 4, 1, 14373, 2, 1, 500, 2)).setObjects(("MYSTRO-VIDEOPORT-MIB", "serviceID"), ("MYSTRO-VIDEOPORT-MIB", "definition"), ("MYSTRO-VIDEOPORT-MIB", "transportType"))
if mibBuilder.loadTexts: removeService.setStatus('current')
updateService = NotificationType((1, 3, 6, 1, 4, 1, 14373, 2, 1, 500, 3)).setObjects(("MYSTRO-VIDEOPORT-MIB", "serviceID"), ("MYSTRO-VIDEOPORT-MIB", "definition"), ("MYSTRO-VIDEOPORT-MIB", "transportType"))
if mibBuilder.loadTexts: updateService.setStatus('current')
mibBuilder.exportSymbols("MYSTRO-VIDEOPORT-MIB", pidAudio0=pidAudio0, internet=internet, pidAudio1=pidAudio1, dataUdpPort=dataUdpPort, videoServicesTable=videoServicesTable, updateService=updateService, notifications=notifications, pidAudio4=pidAudio4, addService=addService, progNumber=progNumber, udpServicesEntry=udpServicesEntry, destIPAddr=destIPAddr, pidVideo=pidVideo, videoport=videoport, pidAudio5=pidAudio5, pidAudio2=pidAudio2, asiServicesTable=asiServicesTable, connector=connector, asiServicesEntry=asiServicesEntry, dod=dod, definition=definition, pidAudio3=pidAudio3, private=private, enterprises=enterprises, PYSNMP_MODULE_ID=videoport, bitRate=bitRate, udpServicesTable=udpServicesTable, org=org, serviceID=serviceID, videoServicesEntry=videoServicesEntry, transportType=transportType, pidPMT=pidPMT, trickModeUdpPort=trickModeUdpPort, removeService=removeService)
