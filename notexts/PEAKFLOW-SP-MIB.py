#
# PySNMP MIB module PEAKFLOW-SP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/arbornet/ARBORNET-PEAKFLOW-SP-MIB
# Produced by pysmi-1.1.12 at Wed Nov  6 08:27:20 2024
# On host fv-az984-999 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
arbornetworksProducts, = mibBuilder.importSymbols("ARBOR-SMI", "arbornetworksProducts")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
pdosAnomalyStart, pdosUrl, pdosAnomalyDirection, pdosAnomalyClassification, pdosAnomalyDuration = mibBuilder.importSymbols("PEAKFLOW-DOS-MIB", "pdosAnomalyStart", "pdosUrl", "pdosAnomalyDirection", "pdosAnomalyClassification", "pdosAnomalyDuration")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Integer32, Counter32, Unsigned32, ModuleIdentity, NotificationType, TimeTicks, IpAddress, ObjectIdentity, MibIdentifier, Counter64, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "Counter32", "Unsigned32", "ModuleIdentity", "NotificationType", "TimeTicks", "IpAddress", "ObjectIdentity", "MibIdentifier", "Counter64", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
peakflowSPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9694, 1, 4))
peakflowSPMIB.setRevisions(('2016-12-06 00:00', '2016-01-11 00:00', '2015-11-20 00:00', '2014-04-04 00:00', '2013-12-04 00:00', '2013-10-03 00:00', '2013-08-19 00:00', '2013-01-15 00:00', '2012-07-30 00:00', '2012-05-13 00:00', '2011-06-03 00:00', '2010-06-08 00:00', '2010-05-20 00:00', '2009-09-24 00:00', '2009-04-01 00:00', '2009-03-30 00:00', '2009-02-02 00:00', '2008-12-16 00:00', '2008-11-13 00:00', '2008-05-19 00:00', '2008-02-19 00:00', '2008-02-11 00:00', '2007-08-07 00:00', '2006-04-26 00:00', '2006-03-23 00:00', '2005-11-14 00:00', '2005-10-19 00:00', '2005-09-12 00:00', '2005-08-23 00:00', '2005-05-17 01:00', '2005-05-17 00:00', '2005-02-11 00:00', '2004-12-10 00:00', '2004-03-30 00:00', '2002-08-28 00:00',))
if mibBuilder.loadTexts: peakflowSPMIB.setLastUpdated('201612060000Z')
if mibBuilder.loadTexts: peakflowSPMIB.setOrganization('Arbor Networks, Inc.')
peakflowSPCMI = MibIdentifier((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1))
peakflowSPMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2))
peakflowSPTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3))
spCollector = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spCollector.setStatus('current')
spRouter = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spRouter.setStatus('current')
spInterface = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spInterface.setStatus('current')
spInterfaceIndex = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spInterfaceIndex.setStatus('current')
spDuration = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 5), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spDuration.setStatus('current')
spBGPEvent = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spBGPEvent.setStatus('current')
spBGPInstability = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 7), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spBGPInstability.setStatus('current')
spBGPTrapName = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spBGPTrapName.setStatus('current')
spBGPTrapEvent = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spBGPTrapEvent.setStatus('current')
spBGPTrapPrefix = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spBGPTrapPrefix.setStatus('current')
spBGPTrapOldAttributes = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 11), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spBGPTrapOldAttributes.setStatus('current')
spBGPTrapNewAttributes = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 12), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spBGPTrapNewAttributes.setStatus('current')
spInterfaceSpeed = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 13), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spInterfaceSpeed.setStatus('current')
spInterfaceUsage = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 14), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spInterfaceUsage.setStatus('current')
spReportURL = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spReportURL.setStatus('current')
spReportName = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spReportName.setStatus('current')
spReportID = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spReportID.setStatus('current')
spAlertID = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 18), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spAlertID.setStatus('current')
spHijackRoute = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spHijackRoute.setStatus('current')
spHijackAttr = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spHijackAttr.setStatus('current')
spHijackLocal = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spHijackLocal.setStatus('current')
spUsername = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spUsername.setStatus('current')
spVersion = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spVersion.setStatus('current')
spUsageType = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spUsageType.setStatus('current')
spManagedObject = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spManagedObject.setStatus('current')
spManagedObjectFamily = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spManagedObjectFamily.setStatus('current')
spThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 27), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spThreshold.setStatus('current')
spUsage = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 28), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spUsage.setStatus('current')
spUnit = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spUnit.setStatus('current')
spHardwareFailureDescription = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spHardwareFailureDescription.setStatus('current')
spFingerprintName = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spFingerprintName.setStatus('current')
spFingerprintFeedback = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spFingerprintFeedback.setStatus('current')
spFingerprintSender = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spFingerprintSender.setStatus('current')
spFingerprintMessage = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spFingerprintMessage.setStatus('current')
spMitigationID = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 35), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spMitigationID.setStatus('current')
spDNSName = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spDNSName.setStatus('current')
spDNSExpected = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 37), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spDNSExpected.setStatus('current')
spDNSObserved = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 38), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spDNSObserved.setStatus('current')
spDNSObservedMean = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 39), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spDNSObservedMean.setStatus('current')
spDNSObservedMax = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 40), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spDNSObservedMax.setStatus('current')
spMitigationName = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spMitigationName.setStatus('current')
spScriptCommand = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spScriptCommand.setStatus('current')
spScriptHost = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spScriptHost.setStatus('current')
spScriptPort = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spScriptPort.setStatus('current')
spScriptStart = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spScriptStart.setStatus('current')
spTMSPrefix = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spTMSPrefix.setStatus('current')
spTMSCommunity = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spTMSCommunity.setStatus('current')
spTMSTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spTMSTimeout.setStatus('current')
spThirdPartyZone = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spThirdPartyZone.setStatus('current')
spThirdPartyAddr = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spThirdPartyAddr.setStatus('current')
spMitigationStart = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spMitigationStart.setStatus('current')
spBlackholeCommunity = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spBlackholeCommunity.setStatus('current')
spBlackholeTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spBlackholeTimeout.setStatus('current')
spBlackholePrefix = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spBlackholePrefix.setStatus('current')
spBlackholeNexthop = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spBlackholeNexthop.setStatus('current')
spFlowspecCommunity = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spFlowspecCommunity.setStatus('current')
spFlowspecTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spFlowspecTimeout.setStatus('current')
spCommFailureDestination = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spCommFailureDestination.setStatus('current')
spCommFailureDescription = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 59), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spCommFailureDescription.setStatus('current')
spGreTunnelDestination = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 60), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spGreTunnelDestination.setStatus('current')
spSystemErrorType = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 61), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spSystemErrorType.setStatus('current')
spSystemErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spSystemErrorDescription.setStatus('current')
spServiceName = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 63), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spServiceName.setStatus('current')
spServiceElement = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 64), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spServiceElement.setStatus('current')
spApplicationName = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spApplicationName.setStatus('current')
spAlertDetectionSignatures = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 66), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spAlertDetectionSignatures.setStatus('current')
spManagedObjects = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 67), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spManagedObjects.setStatus('current')
spInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 68), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spInetAddressType.setStatus('current')
spInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 69), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spInetAddress.setStatus('current')
spImpactBps = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 70), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spImpactBps.setStatus('current')
spImpactPps = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 71), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spImpactPps.setStatus('current')
spDetectedCountries = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 72), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 152))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spDetectedCountries.setStatus('current')
spRoutingFailoverInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 73), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spRoutingFailoverInterfaces.setStatus('current')
spPravail = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 74), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spPravail.setStatus('current')
spDetector = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 75), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spDetector.setStatus('current')
spTMSMultiPrefix = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 76), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spTMSMultiPrefix.setStatus('current')
spLicenseErrType = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 77), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spLicenseErrType.setStatus('current')
spLicenseErrCount = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 78), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spLicenseErrCount.setStatus('current')
spLicenseErrLimit = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 79), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spLicenseErrLimit.setStatus('current')
spLicenseErrDescription = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1023))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spLicenseErrDescription.setStatus('current')
spInterfaceSpeedHC = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 81), CounterBasedGauge64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spInterfaceSpeedHC.setStatus('current')
spInterfaceUsageHC = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 82), CounterBasedGauge64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spInterfaceUsageHC.setStatus('current')
spGreTunnelName = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 83), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spGreTunnelName.setStatus('current')
spCloudSignalFaultDescription = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 84), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spCloudSignalFaultDescription.setStatus('current')
spTMSMultiDiversionPrefix = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 85), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spTMSMultiDiversionPrefix.setStatus('current')
deviceHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1))
deviceCpuLoadAvg1min = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceCpuLoadAvg1min.setStatus('current')
deviceCpuLoadAvg5min = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceCpuLoadAvg5min.setStatus('current')
deviceCpuLoadAvg15min = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceCpuLoadAvg15min.setStatus('current')
deviceDiskUsage = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDiskUsage.setStatus('current')
devicePhysicalMemory = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePhysicalMemory.setStatus('current')
devicePhysicalMemoryInUse = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePhysicalMemoryInUse.setStatus('current')
devicePhysicalMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePhysicalMemoryUsage.setStatus('current')
deviceSwapSpace = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSwapSpace.setStatus('current')
deviceSwapSpaceInUse = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSwapSpaceInUse.setStatus('current')
deviceSwapSpaceUsage = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSwapSpaceUsage.setStatus('current')
deviceTotalFlows = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTotalFlows.setStatus('deprecated')
deviceTotalFlowsHC = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTotalFlowsHC.setStatus('current')
peakflowSPTrapsEnumerate = MibIdentifier((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0))
flowDown = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 1)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spRouter"))
if mibBuilder.loadTexts: flowDown.setStatus('current')
flowUp = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 2)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spRouter"))
if mibBuilder.loadTexts: flowUp.setStatus('current')
snmpDown = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 3)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spRouter"))
if mibBuilder.loadTexts: snmpDown.setStatus('current')
snmpUp = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 4)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spRouter"))
if mibBuilder.loadTexts: snmpUp.setStatus('current')
bgpDown = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 5)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spRouter"))
if mibBuilder.loadTexts: bgpDown.setStatus('current')
bgpUp = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 6)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spRouter"))
if mibBuilder.loadTexts: bgpUp.setStatus('current')
collectorDown = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 7)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spDetector"))
if mibBuilder.loadTexts: collectorDown.setStatus('current')
collectorUp = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 8)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"))
if mibBuilder.loadTexts: collectorUp.setStatus('current')
collectorStart = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 9)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"))
if mibBuilder.loadTexts: collectorStart.setStatus('obsolete')
bgpInstability = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 10)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spRouter"), ("PEAKFLOW-SP-MIB", "spBGPInstability"))
if mibBuilder.loadTexts: bgpInstability.setStatus('current')
bgpInstabilityDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 11)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spRouter"))
if mibBuilder.loadTexts: bgpInstabilityDone.setStatus('current')
bgpTrap = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 12)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spBGPTrapName"), ("PEAKFLOW-SP-MIB", "spBGPTrapEvent"), ("PEAKFLOW-SP-MIB", "spBGPTrapPrefix"), ("PEAKFLOW-SP-MIB", "spBGPTrapOldAttributes"), ("PEAKFLOW-SP-MIB", "spBGPTrapNewAttributes"))
if mibBuilder.loadTexts: bgpTrap.setStatus('current')
interfaceUsage = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 13)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spRouter"), ("PEAKFLOW-SP-MIB", "spInterface"), ("PEAKFLOW-SP-MIB", "spInterfaceIndex"), ("PEAKFLOW-SP-MIB", "spInterfaceSpeed"), ("PEAKFLOW-SP-MIB", "spUsageType"), ("PEAKFLOW-SP-MIB", "spInterfaceUsage"), ("PEAKFLOW-SP-MIB", "spInterfaceSpeedHC"), ("PEAKFLOW-SP-MIB", "spInterfaceUsageHC"))
if mibBuilder.loadTexts: interfaceUsage.setStatus('current')
interfaceUsageDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 14)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spRouter"), ("PEAKFLOW-SP-MIB", "spInterface"), ("PEAKFLOW-SP-MIB", "spInterfaceIndex"), ("PEAKFLOW-SP-MIB", "spUsageType"))
if mibBuilder.loadTexts: interfaceUsageDone.setStatus('current')
autoclassifyStart = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 15)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spUsername"))
if mibBuilder.loadTexts: autoclassifyStart.setStatus('obsolete')
configChange = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 16)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spUsername"), ("PEAKFLOW-SP-MIB", "spVersion"))
if mibBuilder.loadTexts: configChange.setStatus('current')
notificationLimit = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 17)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"))
if mibBuilder.loadTexts: notificationLimit.setStatus('obsolete')
reportDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 18)).setObjects(("PEAKFLOW-SP-MIB", "spReportName"), ("PEAKFLOW-SP-MIB", "spReportID"), ("PEAKFLOW-SP-MIB", "spReportURL"))
if mibBuilder.loadTexts: reportDone.setStatus('obsolete')
bgpHijack = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 19)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spRouter"), ("PEAKFLOW-SP-MIB", "spHijackRoute"), ("PEAKFLOW-SP-MIB", "spHijackAttr"), ("PEAKFLOW-SP-MIB", "spHijackLocal"))
if mibBuilder.loadTexts: bgpHijack.setStatus('current')
managedObjectUsage = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 20)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spManagedObject"), ("PEAKFLOW-SP-MIB", "spManagedObjectFamily"), ("PEAKFLOW-SP-MIB", "spUsageType"), ("PEAKFLOW-SP-MIB", "spThreshold"), ("PEAKFLOW-SP-MIB", "spUsage"), ("PEAKFLOW-SP-MIB", "spUnit"))
if mibBuilder.loadTexts: managedObjectUsage.setStatus('current')
managedObjectUsageDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 21)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spManagedObject"), ("PEAKFLOW-SP-MIB", "spManagedObjectFamily"), ("PEAKFLOW-SP-MIB", "spUsageType"), ("PEAKFLOW-SP-MIB", "spUnit"))
if mibBuilder.loadTexts: managedObjectUsageDone.setStatus('current')
hardwareFailure = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 22)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spHardwareFailureDescription"))
if mibBuilder.loadTexts: hardwareFailure.setStatus('current')
hardwareFailureDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 23)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spHardwareFailureDescription"))
if mibBuilder.loadTexts: hardwareFailureDone.setStatus('current')
fingerprintFeedback = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 24)).setObjects(("PEAKFLOW-SP-MIB", "spMitigationID"), ("PEAKFLOW-SP-MIB", "spFingerprintName"), ("PEAKFLOW-SP-MIB", "spFingerprintFeedback"))
if mibBuilder.loadTexts: fingerprintFeedback.setStatus('current')
fingerprintReceive = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 25)).setObjects(("PEAKFLOW-SP-MIB", "spMitigationID"), ("PEAKFLOW-SP-MIB", "spFingerprintName"), ("PEAKFLOW-SP-MIB", "spFingerprintSender"), ("PEAKFLOW-SP-MIB", "spFingerprintMessage"))
if mibBuilder.loadTexts: fingerprintReceive.setStatus('current')
dnsBaseline = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 26)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spDNSName"), ("PEAKFLOW-SP-MIB", "spDNSExpected"), ("PEAKFLOW-SP-MIB", "spDNSObserved"))
if mibBuilder.loadTexts: dnsBaseline.setStatus('current')
dnsBaselineDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 27)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spDNSName"), ("PEAKFLOW-SP-MIB", "spDNSExpected"), ("PEAKFLOW-SP-MIB", "spDNSObservedMean"), ("PEAKFLOW-SP-MIB", "spDNSObservedMax"))
if mibBuilder.loadTexts: dnsBaselineDone.setStatus('current')
alertScript = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 28)).setObjects(("PEAKFLOW-SP-MIB", "spMitigationID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spMitigationName"), ("PEAKFLOW-SP-MIB", "spScriptCommand"), ("PEAKFLOW-SP-MIB", "spScriptHost"), ("PEAKFLOW-SP-MIB", "spScriptPort"), ("PEAKFLOW-SP-MIB", "spScriptStart"))
if mibBuilder.loadTexts: alertScript.setStatus('current')
mitigationDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 29)).setObjects(("PEAKFLOW-SP-MIB", "spMitigationID"), ("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"))
if mibBuilder.loadTexts: mitigationDone.setStatus('current')
mitigationTMSStart = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 30)).setObjects(("PEAKFLOW-SP-MIB", "spMitigationID"), ("PEAKFLOW-SP-MIB", "spMitigationName"), ("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spManagedObject"), ("PEAKFLOW-SP-MIB", "spTMSPrefix"), ("PEAKFLOW-SP-MIB", "spTMSCommunity"), ("PEAKFLOW-SP-MIB", "spTMSTimeout"), ("PEAKFLOW-SP-MIB", "spMitigationStart"), ("PEAKFLOW-SP-MIB", "spTMSMultiPrefix"))
if mibBuilder.loadTexts: mitigationTMSStart.setStatus('deprecated')
mitigationThirdPartyStart = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 31)).setObjects(("PEAKFLOW-SP-MIB", "spMitigationID"), ("PEAKFLOW-SP-MIB", "spMitigationName"), ("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spManagedObject"), ("PEAKFLOW-SP-MIB", "spThirdPartyZone"), ("PEAKFLOW-SP-MIB", "spThirdPartyAddr"), ("PEAKFLOW-SP-MIB", "spMitigationStart"))
if mibBuilder.loadTexts: mitigationThirdPartyStart.setStatus('current')
mitigationBlackholeStart = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 32)).setObjects(("PEAKFLOW-SP-MIB", "spMitigationID"), ("PEAKFLOW-SP-MIB", "spMitigationName"), ("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spBlackholeCommunity"), ("PEAKFLOW-SP-MIB", "spBlackholeTimeout"), ("PEAKFLOW-SP-MIB", "spBlackholePrefix"), ("PEAKFLOW-SP-MIB", "spBlackholeNexthop"), ("PEAKFLOW-SP-MIB", "spMitigationStart"))
if mibBuilder.loadTexts: mitigationBlackholeStart.setStatus('current')
mitigationFlowspecStart = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 33)).setObjects(("PEAKFLOW-SP-MIB", "spMitigationID"), ("PEAKFLOW-SP-MIB", "spMitigationName"), ("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spFlowspecCommunity"), ("PEAKFLOW-SP-MIB", "spFlowspecTimeout"), ("PEAKFLOW-SP-MIB", "spMitigationStart"))
if mibBuilder.loadTexts: mitigationFlowspecStart.setStatus('current')
spcommFailure = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 34)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spCommFailureDestination"), ("PEAKFLOW-SP-MIB", "spCommFailureDescription"))
if mibBuilder.loadTexts: spcommFailure.setStatus('current')
spcommFailureDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 35)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spCommFailureDestination"), ("PEAKFLOW-SP-MIB", "spCommFailureDescription"))
if mibBuilder.loadTexts: spcommFailureDone.setStatus('current')
greDown = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 36)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spGreTunnelDestination"), ("PEAKFLOW-SP-MIB", "spGreTunnelName"))
if mibBuilder.loadTexts: greDown.setStatus('current')
greDownDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 37)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spGreTunnelDestination"), ("PEAKFLOW-SP-MIB", "spGreTunnelName"))
if mibBuilder.loadTexts: greDownDone.setStatus('current')
deviceSystemError = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 38)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spSystemErrorType"), ("PEAKFLOW-SP-MIB", "spThreshold"), ("PEAKFLOW-SP-MIB", "spSystemErrorDescription"))
if mibBuilder.loadTexts: deviceSystemError.setStatus('current')
deviceSystemErrorDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 39)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spSystemErrorType"), ("PEAKFLOW-SP-MIB", "spThreshold"), ("PEAKFLOW-SP-MIB", "spSystemErrorDescription"))
if mibBuilder.loadTexts: deviceSystemErrorDone.setStatus('current')
fingerprintUsage = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 40)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spFingerprintName"), ("PEAKFLOW-SP-MIB", "spUsageType"), ("PEAKFLOW-SP-MIB", "spThreshold"), ("PEAKFLOW-SP-MIB", "spUsage"), ("PEAKFLOW-SP-MIB", "spUnit"))
if mibBuilder.loadTexts: fingerprintUsage.setStatus('current')
fingerprintUsageDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 41)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spFingerprintName"), ("PEAKFLOW-SP-MIB", "spUsageType"), ("PEAKFLOW-SP-MIB", "spUnit"))
if mibBuilder.loadTexts: fingerprintUsageDone.setStatus('current')
serviceUsage = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 42)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spServiceName"), ("PEAKFLOW-SP-MIB", "spUsageType"), ("PEAKFLOW-SP-MIB", "spApplicationName"), ("PEAKFLOW-SP-MIB", "spServiceElement"), ("PEAKFLOW-SP-MIB", "spThreshold"), ("PEAKFLOW-SP-MIB", "spUsage"))
if mibBuilder.loadTexts: serviceUsage.setStatus('current')
serviceUsageDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 43)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spServiceName"))
if mibBuilder.loadTexts: serviceUsageDone.setStatus('current')
dosNetworkProfiledAlert = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 44)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyClassification"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyDirection"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyStart"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyDuration"), ("PEAKFLOW-DOS-MIB", "pdosUrl"), ("PEAKFLOW-SP-MIB", "spImpactBps"), ("PEAKFLOW-SP-MIB", "spImpactPps"), ("PEAKFLOW-SP-MIB", "spManagedObject"), ("PEAKFLOW-SP-MIB", "spDetectedCountries"))
if mibBuilder.loadTexts: dosNetworkProfiledAlert.setStatus('current')
dosNetworkProfiledAlertDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 45)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyClassification"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyDirection"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyStart"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyDuration"), ("PEAKFLOW-DOS-MIB", "pdosUrl"), ("PEAKFLOW-SP-MIB", "spImpactBps"), ("PEAKFLOW-SP-MIB", "spImpactPps"), ("PEAKFLOW-SP-MIB", "spManagedObject"), ("PEAKFLOW-SP-MIB", "spDetectedCountries"))
if mibBuilder.loadTexts: dosNetworkProfiledAlertDone.setStatus('current')
dosHostDetectionAlert = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 46)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spAlertDetectionSignatures"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyDirection"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyStart"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyDuration"), ("PEAKFLOW-DOS-MIB", "pdosUrl"), ("PEAKFLOW-SP-MIB", "spInetAddress"), ("PEAKFLOW-SP-MIB", "spInetAddressType"), ("PEAKFLOW-SP-MIB", "spImpactBps"), ("PEAKFLOW-SP-MIB", "spImpactPps"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyClassification"), ("PEAKFLOW-SP-MIB", "spManagedObjects"))
if mibBuilder.loadTexts: dosHostDetectionAlert.setStatus('current')
dosHostDetectionAlertDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 47)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spAlertDetectionSignatures"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyDirection"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyStart"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyDuration"), ("PEAKFLOW-DOS-MIB", "pdosUrl"), ("PEAKFLOW-SP-MIB", "spInetAddress"), ("PEAKFLOW-SP-MIB", "spInetAddressType"), ("PEAKFLOW-SP-MIB", "spImpactBps"), ("PEAKFLOW-SP-MIB", "spImpactPps"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyClassification"), ("PEAKFLOW-SP-MIB", "spManagedObjects"))
if mibBuilder.loadTexts: dosHostDetectionAlertDone.setStatus('current')
routingFailover = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 48)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-DOS-MIB", "pdosUrl"), ("PEAKFLOW-SP-MIB", "spCollector"))
if mibBuilder.loadTexts: routingFailover.setStatus('current')
routingFailoverInterfaceDownAlert = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 49)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-DOS-MIB", "pdosUrl"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spRoutingFailoverInterfaces"))
if mibBuilder.loadTexts: routingFailoverInterfaceDownAlert.setStatus('current')
routingFailoverInterfaceDownAlertDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 50)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-DOS-MIB", "pdosUrl"), ("PEAKFLOW-SP-MIB", "spCollector"))
if mibBuilder.loadTexts: routingFailoverInterfaceDownAlertDone.setStatus('current')
trafficAutoMitigation = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 51)).setObjects(("PEAKFLOW-SP-MIB", "spManagedObject"))
if mibBuilder.loadTexts: trafficAutoMitigation.setStatus('current')
cloudSignalingMitigationRequest = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 52)).setObjects(("PEAKFLOW-SP-MIB", "spManagedObject"), ("PEAKFLOW-SP-MIB", "spPravail"))
if mibBuilder.loadTexts: cloudSignalingMitigationRequest.setStatus('current')
licenseError = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 53)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spLicenseErrType"), ("PEAKFLOW-SP-MIB", "spLicenseErrCount"), ("PEAKFLOW-SP-MIB", "spThreshold"), ("PEAKFLOW-SP-MIB", "spLicenseErrDescription"))
if mibBuilder.loadTexts: licenseError.setStatus('current')
licenseErrorDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 54)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spLicenseErrType"), ("PEAKFLOW-SP-MIB", "spThreshold"), ("PEAKFLOW-SP-MIB", "spLicenseErrLimit"), ("PEAKFLOW-SP-MIB", "spLicenseErrDescription"))
if mibBuilder.loadTexts: licenseErrorDone.setStatus('current')
cloudSignalingFault = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 55)).setObjects(("PEAKFLOW-SP-MIB", "spAlertId"), ("PEAKFLOW-SP-MIB", "spPravail"), ("PEAKFLOW-SP-MIB", "spCloudSignalFaultDescription"))
if mibBuilder.loadTexts: cloudSignalingFault.setStatus('current')
cloudSignalingFaultDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 56)).setObjects(("PEAKFLOW-SP-MIB", "spAlertId"), ("PEAKFLOW-SP-MIB", "spPravail"), ("PEAKFLOW-SP-MIB", "spCloudSignalFaultDescription"))
if mibBuilder.loadTexts: cloudSignalingFaultDone.setStatus('current')
mitigationTMSStartV2 = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 57)).setObjects(("PEAKFLOW-SP-MIB", "spMitigationID"), ("PEAKFLOW-SP-MIB", "spMitigationName"), ("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spManagedObject"), ("PEAKFLOW-SP-MIB", "spTMSPrefix"), ("PEAKFLOW-SP-MIB", "spTMSCommunity"), ("PEAKFLOW-SP-MIB", "spTMSTimeout"), ("PEAKFLOW-SP-MIB", "spMitigationStart"), ("PEAKFLOW-SP-MIB", "spTMSMultiPrefix"), ("PEAKFLOW-SP-MIB", "spTMSMultiDiversionPrefix"))
if mibBuilder.loadTexts: mitigationTMSStartV2.setStatus('current')
mibBuilder.exportSymbols("PEAKFLOW-SP-MIB", spVersion=spVersion, spFingerprintFeedback=spFingerprintFeedback, dnsBaselineDone=dnsBaselineDone, greDown=greDown, bgpUp=bgpUp, deviceSystemErrorDone=deviceSystemErrorDone, spScriptCommand=spScriptCommand, spBGPEvent=spBGPEvent, spApplicationName=spApplicationName, flowUp=flowUp, bgpInstability=bgpInstability, devicePhysicalMemoryUsage=devicePhysicalMemoryUsage, spRoutingFailoverInterfaces=spRoutingFailoverInterfaces, collectorStart=collectorStart, spBGPTrapPrefix=spBGPTrapPrefix, peakflowSPMIB=peakflowSPMIB, spGreTunnelDestination=spGreTunnelDestination, spMitigationName=spMitigationName, spLicenseErrLimit=spLicenseErrLimit, cloudSignalingMitigationRequest=cloudSignalingMitigationRequest, mitigationTMSStartV2=mitigationTMSStartV2, spCommFailureDescription=spCommFailureDescription, spScriptHost=spScriptHost, flowDown=flowDown, spBlackholeCommunity=spBlackholeCommunity, spMitigationID=spMitigationID, dosNetworkProfiledAlertDone=dosNetworkProfiledAlertDone, spImpactPps=spImpactPps, spUnit=spUnit, mitigationThirdPartyStart=mitigationThirdPartyStart, cloudSignalingFault=cloudSignalingFault, routingFailover=routingFailover, spLicenseErrCount=spLicenseErrCount, collectorUp=collectorUp, spFlowspecCommunity=spFlowspecCommunity, devicePhysicalMemory=devicePhysicalMemory, spBGPInstability=spBGPInstability, spScriptStart=spScriptStart, cloudSignalingFaultDone=cloudSignalingFaultDone, bgpDown=bgpDown, deviceSwapSpace=deviceSwapSpace, spTMSCommunity=spTMSCommunity, deviceCpuLoadAvg5min=deviceCpuLoadAvg5min, mitigationDone=mitigationDone, dosHostDetectionAlert=dosHostDetectionAlert, devicePhysicalMemoryInUse=devicePhysicalMemoryInUse, licenseErrorDone=licenseErrorDone, bgpHijack=bgpHijack, spDuration=spDuration, spBlackholeNexthop=spBlackholeNexthop, spHijackAttr=spHijackAttr, spServiceName=spServiceName, deviceSwapSpaceUsage=deviceSwapSpaceUsage, spBGPTrapNewAttributes=spBGPTrapNewAttributes, spTMSPrefix=spTMSPrefix, deviceHealth=deviceHealth, spThreshold=spThreshold, spUsageType=spUsageType, spDNSObserved=spDNSObserved, spAlertDetectionSignatures=spAlertDetectionSignatures, spUsername=spUsername, bgpTrap=bgpTrap, spDNSObservedMean=spDNSObservedMean, spTMSMultiDiversionPrefix=spTMSMultiDiversionPrefix, spcommFailure=spcommFailure, fingerprintUsage=fingerprintUsage, spBlackholeTimeout=spBlackholeTimeout, trafficAutoMitigation=trafficAutoMitigation, interfaceUsage=interfaceUsage, spManagedObjects=spManagedObjects, snmpDown=snmpDown, PYSNMP_MODULE_ID=peakflowSPMIB, mitigationFlowspecStart=mitigationFlowspecStart, spImpactBps=spImpactBps, licenseError=licenseError, spThirdPartyZone=spThirdPartyZone, spInetAddressType=spInetAddressType, routingFailoverInterfaceDownAlertDone=routingFailoverInterfaceDownAlertDone, spInterfaceIndex=spInterfaceIndex, spHardwareFailureDescription=spHardwareFailureDescription, deviceTotalFlowsHC=deviceTotalFlowsHC, spBlackholePrefix=spBlackholePrefix, deviceSystemError=deviceSystemError, deviceDiskUsage=deviceDiskUsage, peakflowSPMgr=peakflowSPMgr, spReportID=spReportID, spMitigationStart=spMitigationStart, spInetAddress=spInetAddress, spCommFailureDestination=spCommFailureDestination, spTMSMultiPrefix=spTMSMultiPrefix, serviceUsage=serviceUsage, spBGPTrapEvent=spBGPTrapEvent, managedObjectUsage=managedObjectUsage, dosNetworkProfiledAlert=dosNetworkProfiledAlert, managedObjectUsageDone=managedObjectUsageDone, spServiceElement=spServiceElement, alertScript=alertScript, interfaceUsageDone=interfaceUsageDone, spRouter=spRouter, fingerprintUsageDone=fingerprintUsageDone, spHijackLocal=spHijackLocal, spDNSExpected=spDNSExpected, spReportName=spReportName, snmpUp=snmpUp, spInterfaceSpeed=spInterfaceSpeed, fingerprintFeedback=fingerprintFeedback, spInterfaceUsage=spInterfaceUsage, deviceCpuLoadAvg1min=deviceCpuLoadAvg1min, spcommFailureDone=spcommFailureDone, bgpInstabilityDone=bgpInstabilityDone, spUsage=spUsage, spDetectedCountries=spDetectedCountries, spFlowspecTimeout=spFlowspecTimeout, reportDone=reportDone, spInterfaceUsageHC=spInterfaceUsageHC, spPravail=spPravail, deviceSwapSpaceInUse=deviceSwapSpaceInUse, spInterfaceSpeedHC=spInterfaceSpeedHC, spDNSObservedMax=spDNSObservedMax, spThirdPartyAddr=spThirdPartyAddr, mitigationBlackholeStart=mitigationBlackholeStart, spFingerprintName=spFingerprintName, spInterface=spInterface, spDNSName=spDNSName, spHijackRoute=spHijackRoute, deviceTotalFlows=deviceTotalFlows, peakflowSPTraps=peakflowSPTraps, spAlertID=spAlertID, notificationLimit=notificationLimit, fingerprintReceive=fingerprintReceive, routingFailoverInterfaceDownAlert=routingFailoverInterfaceDownAlert, configChange=configChange, serviceUsageDone=serviceUsageDone, spBGPTrapOldAttributes=spBGPTrapOldAttributes, spSystemErrorDescription=spSystemErrorDescription, spFingerprintMessage=spFingerprintMessage, spManagedObject=spManagedObject, spReportURL=spReportURL, spManagedObjectFamily=spManagedObjectFamily, spLicenseErrType=spLicenseErrType, peakflowSPCMI=peakflowSPCMI, collectorDown=collectorDown, autoclassifyStart=autoclassifyStart, hardwareFailure=hardwareFailure, mitigationTMSStart=mitigationTMSStart, spCollector=spCollector, spLicenseErrDescription=spLicenseErrDescription, spDetector=spDetector, spCloudSignalFaultDescription=spCloudSignalFaultDescription, spScriptPort=spScriptPort, greDownDone=greDownDone, deviceCpuLoadAvg15min=deviceCpuLoadAvg15min, spTMSTimeout=spTMSTimeout, hardwareFailureDone=hardwareFailureDone, spFingerprintSender=spFingerprintSender, dnsBaseline=dnsBaseline, peakflowSPTrapsEnumerate=peakflowSPTrapsEnumerate, dosHostDetectionAlertDone=dosHostDetectionAlertDone, spBGPTrapName=spBGPTrapName, spSystemErrorType=spSystemErrorType, spGreTunnelName=spGreTunnelName)
