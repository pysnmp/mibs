#
# PySNMP MIB module IMCO-LS110-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/imco/IMCO-LS110-MIB
# Produced by pysmi-1.1.12 at Tue May 28 12:14:14 2024
# On host fv-az1567-4 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, ModuleIdentity, IpAddress, iso, Counter64, Bits, NotificationType, NotificationType, MibIdentifier, Integer32, Unsigned32, enterprises, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "IpAddress", "iso", "Counter64", "Bits", "NotificationType", "NotificationType", "MibIdentifier", "Integer32", "Unsigned32", "enterprises", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
mib_AN_Dcz_SDS = ModuleIdentity((1, 3, 6, 1, 4, 1, 33283)).setLabel("mib-AN-Dcz-SDS")
mib_AN_Dcz_SDS.setRevisions(('2017-02-09 00:00',))
if mibBuilder.loadTexts: mib_AN_Dcz_SDS.setLastUpdated('201702090000Z')
if mibBuilder.loadTexts: mib_AN_Dcz_SDS.setOrganization('ViaNet.sk')
sdsxpublic = MibIdentifier((1, 3, 6, 1, 4, 1, 33283, 1))
sdsBIGandSTSW = MibIdentifier((1, 3, 6, 1, 4, 1, 33283, 1, 30))
sdsOptoInput = MibIdentifier((1, 3, 6, 1, 4, 1, 33283, 1, 30, 2))
opto1 = MibScalar((1, 3, 6, 1, 4, 1, 33283, 1, 30, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 32768))).clone(namedValues=NamedValues(("activeSignalPresent", 0), ("noSignal", 32768)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opto1.setStatus('current')
opto2 = MibScalar((1, 3, 6, 1, 4, 1, 33283, 1, 30, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("activeSignalPresent", 0), ("noSignal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opto2.setStatus('current')
opto3 = MibScalar((1, 3, 6, 1, 4, 1, 33283, 1, 30, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("activeSignalPresent", 0), ("noSignal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opto3.setStatus('current')
sdsOutputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 33283, 1, 30, 3))
sdsOutputRelay1 = MibIdentifier((1, 3, 6, 1, 4, 1, 33283, 1, 30, 3, 1))
sdsRE1state = MibScalar((1, 3, 6, 1, 4, 1, 33283, 1, 30, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 255))).clone(namedValues=NamedValues(("off", 0), ("activated", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdsRE1state.setStatus('current')
sdsOutputRelay2 = MibIdentifier((1, 3, 6, 1, 4, 1, 33283, 1, 30, 3, 2))
sdsRE2state = MibScalar((1, 3, 6, 1, 4, 1, 33283, 1, 30, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 255))).clone(namedValues=NamedValues(("off", 0), ("activated", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdsRE2state.setStatus('current')
sdsOutputRelay3 = MibIdentifier((1, 3, 6, 1, 4, 1, 33283, 1, 30, 3, 3))
sdsRE3state = MibScalar((1, 3, 6, 1, 4, 1, 33283, 1, 30, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 255))).clone(namedValues=NamedValues(("off", 0), ("activated", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdsRE3state.setStatus('current')
sdsADCinputs = MibIdentifier((1, 3, 6, 1, 4, 1, 33283, 1, 30, 5))
sdsADCitem0 = MibIdentifier((1, 3, 6, 1, 4, 1, 33283, 1, 30, 5, 1))
sdsTempSensValue = MibScalar((1, 3, 6, 1, 4, 1, 33283, 1, 30, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsTempSensValue.setStatus('current')
sdsTempSensName = MibScalar((1, 3, 6, 1, 4, 1, 33283, 1, 30, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsTempSensName.setStatus('current')
sdsADCvalues = MibIdentifier((1, 3, 6, 1, 4, 1, 33283, 1, 30, 7))
sdsMaximumLoad = MibScalar((1, 3, 6, 1, 4, 1, 33283, 1, 30, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsMaximumLoad.setStatus('current')
sdsAlarmText = MibScalar((1, 3, 6, 1, 4, 1, 33283, 1, 30, 7, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsAlarmText.setStatus('current')
sdsOutputVoltage1 = MibScalar((1, 3, 6, 1, 4, 1, 33283, 1, 30, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsOutputVoltage1.setStatus('current')
sdsOutputVoltage2 = MibScalar((1, 3, 6, 1, 4, 1, 33283, 1, 30, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsOutputVoltage2.setStatus('current')
sdsOutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 33283, 1, 30, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsOutputCurrent.setStatus('current')
sdsBatteryCapacity = MibScalar((1, 3, 6, 1, 4, 1, 33283, 1, 30, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsBatteryCapacity.setStatus('current')
sdsLoad = MibScalar((1, 3, 6, 1, 4, 1, 33283, 1, 30, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsLoad.setStatus('current')
sdsCapTestTime = MibScalar((1, 3, 6, 1, 4, 1, 33283, 1, 30, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsCapTestTime.setStatus('current')
sdsGeneralInfoEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 33283, 1, 30, 8))
sdsManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 33283, 1, 30, 8, 80), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsManufacturer.setStatus('current')
sdsModel = MibScalar((1, 3, 6, 1, 4, 1, 33283, 1, 30, 8, 81), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsModel.setStatus('current')
sdsName = MibScalar((1, 3, 6, 1, 4, 1, 33283, 1, 30, 8, 82), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsName.setStatus('current')
sdsSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 33283, 1, 30, 8, 83), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsSerialNumber.setStatus('current')
sdsSoftware = MibScalar((1, 3, 6, 1, 4, 1, 33283, 1, 30, 8, 84), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsSoftware.setStatus('current')
opto1_trap = NotificationType((1, 3, 6, 1, 4, 1, 33283) + (0,100)).setLabel("opto1-trap").setObjects(("IMCO-LS110-MIB", "opto1"))
opto2_trap = NotificationType((1, 3, 6, 1, 4, 1, 33283) + (0,101)).setLabel("opto2-trap").setObjects(("IMCO-LS110-MIB", "opto2"))
opto3_trap = NotificationType((1, 3, 6, 1, 4, 1, 33283) + (0,102)).setLabel("opto3-trap").setObjects(("IMCO-LS110-MIB", "opto3"))
sdsRE1state_trap = NotificationType((1, 3, 6, 1, 4, 1, 33283) + (0,150)).setLabel("sdsRE1state-trap").setObjects(("IMCO-LS110-MIB", "sdsRE1state"))
sdsRE2state_trap = NotificationType((1, 3, 6, 1, 4, 1, 33283) + (0,153)).setLabel("sdsRE2state-trap").setObjects(("IMCO-LS110-MIB", "sdsRE2state"))
sdsTempSensValue_trap = NotificationType((1, 3, 6, 1, 4, 1, 33283) + (0,222)).setLabel("sdsTempSensValue-trap").setObjects(("IMCO-LS110-MIB", "sdsTempSensValue"))
sdsTempSensName_trap = NotificationType((1, 3, 6, 1, 4, 1, 33283) + (0,223)).setLabel("sdsTempSensName-trap").setObjects(("IMCO-LS110-MIB", "sdsTempSensName"))
sdsMaximumLoad_trap = NotificationType((1, 3, 6, 1, 4, 1, 33283) + (0,401)).setLabel("sdsMaximumLoad-trap").setObjects(("IMCO-LS110-MIB", "sdsMaximumLoad"))
sdsAlarmText_trap = NotificationType((1, 3, 6, 1, 4, 1, 33283) + (0,402)).setLabel("sdsAlarmText-trap").setObjects(("IMCO-LS110-MIB", "sdsAlarmText"))
sdsOutputVoltage1_trap = NotificationType((1, 3, 6, 1, 4, 1, 33283) + (0,403)).setLabel("sdsOutputVoltage1-trap").setObjects(("IMCO-LS110-MIB", "sdsOutputVoltage1"))
sdsOutputVoltage2_trap = NotificationType((1, 3, 6, 1, 4, 1, 33283) + (0,404)).setLabel("sdsOutputVoltage2-trap").setObjects(("IMCO-LS110-MIB", "sdsOutputVoltage2"))
sdsOutputCurrent_trap = NotificationType((1, 3, 6, 1, 4, 1, 33283) + (0,405)).setLabel("sdsOutputCurrent-trap").setObjects(("IMCO-LS110-MIB", "sdsOutputCurrent"))
sdsBatteryCapacity_trap = NotificationType((1, 3, 6, 1, 4, 1, 33283) + (0,406)).setLabel("sdsBatteryCapacity-trap").setObjects(("IMCO-LS110-MIB", "sdsBatteryCapacity"))
sdsLoad_trap = NotificationType((1, 3, 6, 1, 4, 1, 33283) + (0,407)).setLabel("sdsLoad-trap").setObjects(("IMCO-LS110-MIB", "sdsLoad"))
sdsCapTestTime_trap = NotificationType((1, 3, 6, 1, 4, 1, 33283) + (0,408)).setLabel("sdsCapTestTime-trap").setObjects(("IMCO-LS110-MIB", "sdsCapTestTime"))
mibBuilder.exportSymbols("IMCO-LS110-MIB", sdsRE2state_trap=sdsRE2state_trap, sdsBatteryCapacity=sdsBatteryCapacity, opto1=opto1, sdsOutputRelay1=sdsOutputRelay1, sdsAlarmText_trap=sdsAlarmText_trap, sdsCapTestTime=sdsCapTestTime, sdsMaximumLoad_trap=sdsMaximumLoad_trap, sdsSoftware=sdsSoftware, sdsTempSensName_trap=sdsTempSensName_trap, sdsOutputCurrent_trap=sdsOutputCurrent_trap, sdsTempSensName=sdsTempSensName, sdsTempSensValue_trap=sdsTempSensValue_trap, sdsBatteryCapacity_trap=sdsBatteryCapacity_trap, sdsOutputVoltage2=sdsOutputVoltage2, sdsADCvalues=sdsADCvalues, sdsRE2state=sdsRE2state, sdsManufacturer=sdsManufacturer, sdsRE3state=sdsRE3state, sdsOutputRelays=sdsOutputRelays, mib_AN_Dcz_SDS=mib_AN_Dcz_SDS, PYSNMP_MODULE_ID=mib_AN_Dcz_SDS, sdsCapTestTime_trap=sdsCapTestTime_trap, sdsOutputRelay2=sdsOutputRelay2, sdsOutputCurrent=sdsOutputCurrent, sdsRE1state=sdsRE1state, sdsLoad=sdsLoad, sdsMaximumLoad=sdsMaximumLoad, opto3_trap=opto3_trap, sdsRE1state_trap=sdsRE1state_trap, sdsGeneralInfoEntry=sdsGeneralInfoEntry, opto2_trap=opto2_trap, sdsName=sdsName, sdsLoad_trap=sdsLoad_trap, sdsxpublic=sdsxpublic, sdsOutputRelay3=sdsOutputRelay3, sdsADCinputs=sdsADCinputs, sdsSerialNumber=sdsSerialNumber, sdsOptoInput=sdsOptoInput, opto1_trap=opto1_trap, sdsOutputVoltage2_trap=sdsOutputVoltage2_trap, sdsAlarmText=sdsAlarmText, sdsOutputVoltage1=sdsOutputVoltage1, opto2=opto2, sdsOutputVoltage1_trap=sdsOutputVoltage1_trap, opto3=opto3, sdsModel=sdsModel, sdsTempSensValue=sdsTempSensValue, sdsADCitem0=sdsADCitem0, sdsBIGandSTSW=sdsBIGandSTSW)
