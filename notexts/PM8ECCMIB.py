#
# PySNMP MIB module PM8ECCMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/schneider/PM8ECCMIB
# Produced by pysmi-1.1.12 at Tue Jun  4 02:45:03 2024
# On host fv-az1200-411 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Bits, NotificationType, Integer32, MibIdentifier, ModuleIdentity, TimeTicks, Counter32, IpAddress, Gauge32, enterprises, ObjectIdentity, Unsigned32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "NotificationType", "Integer32", "MibIdentifier", "ModuleIdentity", "TimeTicks", "Counter32", "IpAddress", "Gauge32", "enterprises", "ObjectIdentity", "Unsigned32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class AlarmType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(10, 11, 12, 20, 21, 51, 52, 53, 54, 55, 60, 61, 70, 80, 90, 100, 101, 102, 103, 104, 105, 1280))
    namedValues = NamedValues(("overValue", 10), ("overPower", 11), ("overReversePower", 12), ("underValue", 20), ("underPower", 21), ("phaseRotationReversal", 51), ("phaseLossVoltage", 52), ("phaseLossCurrent", 53), ("powerFactorLeading", 54), ("powerFactorLagging", 55), ("digitalInputOFFtoON", 60), ("digitalInputONtoOFF", 61), ("unaryEvent", 70), ("voltageOrCurrentSwell", 80), ("voltageOrCurrentSag", 90), ("combinatorialAND", 100), ("combinatorialNAND", 101), ("combinatorialOR", 102), ("combinatorialNOR", 103), ("combinatorialXOR", 104), ("combinatorialNOT", 105), ("diagnostic", 1280))

class IOPointType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("digitalInput", 1), ("digitalOutput", 2), ("analogInput", 3), ("analogOutput", 4))

class IOPointLabel(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class AlarmLabel(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

schneiderElectric = MibIdentifier((1, 3, 6, 1, 4, 1, 3833))
transparentFactoryEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 3833, 1))
equipmentProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3833, 1, 7))
tfProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255))
ecc = MibIdentifier((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15))
pm8ecc = MibIdentifier((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1))
metering = MibIdentifier((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1))
systemWiringTypeTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 1), )
if mibBuilder.loadTexts: systemWiringTypeTable.setStatus('mandatory')
systemWiringTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 1, 1), ).setIndexNames((0, "PM8ECCMIB", "swtIndex"))
if mibBuilder.loadTexts: systemWiringTypeEntry.setStatus('mandatory')
swtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swtIndex.setStatus('mandatory')
swtWiringType = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 10), ValueRangeConstraint(11, 11), ValueRangeConstraint(12, 12), ValueRangeConstraint(30, 30), ValueRangeConstraint(31, 31), ValueRangeConstraint(32, 32), ValueRangeConstraint(40, 40), ValueRangeConstraint(42, 42), ValueRangeConstraint(44, 44), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swtWiringType.setStatus('mandatory')
loadCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 2), )
if mibBuilder.loadTexts: loadCurrentTable.setStatus('mandatory')
loadCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 2, 1), ).setIndexNames((0, "PM8ECCMIB", "lcIndex"))
if mibBuilder.loadTexts: loadCurrentEntry.setStatus('mandatory')
lcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcIndex.setStatus('mandatory')
lcIa = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcIa.setStatus('mandatory')
lcIb = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcIb.setStatus('mandatory')
lcIc = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcIc.setStatus('mandatory')
lcIAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcIAvg.setStatus('mandatory')
powerTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 3), )
if mibBuilder.loadTexts: powerTable.setStatus('mandatory')
powerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 3, 1), ).setIndexNames((0, "PM8ECCMIB", "pIndex"))
if mibBuilder.loadTexts: powerEntry.setStatus('mandatory')
pIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIndex.setStatus('mandatory')
pReal = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pReal.setStatus('mandatory')
pReactive = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pReactive.setStatus('mandatory')
pApparent = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pApparent.setStatus('mandatory')
powerFactorTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 4), )
if mibBuilder.loadTexts: powerFactorTable.setStatus('mandatory')
powerFactorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 4, 1), ).setIndexNames((0, "PM8ECCMIB", "pfIndex"))
if mibBuilder.loadTexts: powerFactorEntry.setStatus('mandatory')
pfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIndex.setStatus('mandatory')
pfPowerFactorTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfPowerFactorTotal.setStatus('mandatory')
pfPowerFactorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfPowerFactorDescription.setStatus('mandatory')
voltageTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 5), )
if mibBuilder.loadTexts: voltageTable.setStatus('mandatory')
voltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 5, 1), ).setIndexNames((0, "PM8ECCMIB", "vIndex"))
if mibBuilder.loadTexts: voltageEntry.setStatus('mandatory')
vIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vIndex.setStatus('mandatory')
vVab = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vVab.setStatus('mandatory')
vVbc = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 5, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vVbc.setStatus('mandatory')
vVca = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vVca.setStatus('mandatory')
vVllAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vVllAvg.setStatus('mandatory')
vVan = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 5, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vVan.setStatus('mandatory')
vVbn = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 5, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vVbn.setStatus('mandatory')
vVcn = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 5, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vVcn.setStatus('mandatory')
vVlnAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 5, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vVlnAvg.setStatus('mandatory')
frequencyTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 6), )
if mibBuilder.loadTexts: frequencyTable.setStatus('mandatory')
frequencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 6, 1), ).setIndexNames((0, "PM8ECCMIB", "fIndex"))
if mibBuilder.loadTexts: frequencyEntry.setStatus('mandatory')
fIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fIndex.setStatus('mandatory')
fFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 6, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fFrequency.setStatus('mandatory')
currentDemandTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 7), )
if mibBuilder.loadTexts: currentDemandTable.setStatus('mandatory')
currentDemandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 7, 1), ).setIndexNames((0, "PM8ECCMIB", "cdPhase"), (0, "PM8ECCMIB", "cdIndex"))
if mibBuilder.loadTexts: currentDemandEntry.setStatus('mandatory')
cdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdIndex.setStatus('mandatory')
cdPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdPhase.setStatus('mandatory')
cdPresentCurrentDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdPresentCurrentDemand.setStatus('mandatory')
cdPeakCurrentDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 7, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdPeakCurrentDemand.setStatus('mandatory')
cdLastCurrentDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 7, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdLastCurrentDemand.setStatus('mandatory')
cdPeakDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 7, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdPeakDateTime.setStatus('mandatory')
cdResetDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 7, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdResetDateTime.setStatus('mandatory')
cdPhaseEnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("currentPhaseA", 1), ("currentPhaseB", 2), ("currentPhaseC", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdPhaseEnum.setStatus('mandatory')
powerDemandTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 8), )
if mibBuilder.loadTexts: powerDemandTable.setStatus('mandatory')
powerDemandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 8, 1), ).setIndexNames((0, "PM8ECCMIB", "pdComponent"), (0, "PM8ECCMIB", "pdIndex"))
if mibBuilder.loadTexts: powerDemandEntry.setStatus('mandatory')
pdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdIndex.setStatus('mandatory')
pdComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdComponent.setStatus('mandatory')
pdPresentPowerDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 8, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdPresentPowerDemand.setStatus('mandatory')
pdPeakPowerDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 8, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdPeakPowerDemand.setStatus('mandatory')
pdLastPowerDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 8, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdLastPowerDemand.setStatus('mandatory')
pdPeakDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 8, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdPeakDateTime.setStatus('mandatory')
pdResetDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 8, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdResetDateTime.setStatus('mandatory')
pdComponentEnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("realPower", 1), ("reactivePower", 2), ("apparentPower", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdComponentEnum.setStatus('mandatory')
energyTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 9), )
if mibBuilder.loadTexts: energyTable.setStatus('mandatory')
energyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 9, 1), ).setIndexNames((0, "PM8ECCMIB", "eIndex"))
if mibBuilder.loadTexts: energyEntry.setStatus('mandatory')
eIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eIndex.setStatus('mandatory')
eRealEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 9, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRealEnergy.setStatus('mandatory')
eDateTimeRealEnergyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 9, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eDateTimeRealEnergyReset.setStatus('mandatory')
eReactiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 9, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eReactiveEnergy.setStatus('mandatory')
eDateTimeReactiveEnergyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 9, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eDateTimeReactiveEnergyReset.setStatus('mandatory')
eApparentEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 9, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eApparentEnergy.setStatus('mandatory')
eDateTimeApparentEnergyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 9, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eDateTimeApparentEnergyReset.setStatus('mandatory')
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2))
alarmConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1), )
if mibBuilder.loadTexts: alarmConfigurationTable.setStatus('mandatory')
alarmConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1), ).setIndexNames((0, "PM8ECCMIB", "acIndex"), (0, "PM8ECCMIB", "acPosition"))
if mibBuilder.loadTexts: alarmConfigurationEntry.setStatus('mandatory')
acIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acIndex.setStatus('mandatory')
acPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 74))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPosition.setStatus('mandatory')
acAlarmLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 3), AlarmLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAlarmLabel.setStatus('mandatory')
acEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnabled.setStatus('mandatory')
acStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acStatus.setStatus('mandatory')
acCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acCounter.setStatus('mandatory')
acPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPriority.setStatus('mandatory')
acType = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 8), AlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acType.setStatus('mandatory')
acAlarmList1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAlarmList1.setStatus('mandatory')
acAlarmList2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAlarmList2.setStatus('mandatory')
acAlarmList3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAlarmList3.setStatus('mandatory')
acAlarmList4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAlarmList4.setStatus('mandatory')
alarmSummaryBitmapsTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 2), )
if mibBuilder.loadTexts: alarmSummaryBitmapsTable.setStatus('mandatory')
alarmSummaryBitmapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 2, 1), ).setIndexNames((0, "PM8ECCMIB", "alSumIndex"))
if mibBuilder.loadTexts: alarmSummaryBitmapsEntry.setStatus('mandatory')
alSumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSumIndex.setStatus('mandatory')
alSumAlarms1to16 = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSumAlarms1to16.setStatus('mandatory')
alSumAlarms17to32 = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSumAlarms17to32.setStatus('mandatory')
alSumAlarms33to48 = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSumAlarms33to48.setStatus('mandatory')
alSumAlarms49to64 = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSumAlarms49to64.setStatus('mandatory')
alSumAlarms65to74 = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSumAlarms65to74.setStatus('mandatory')
alarmCountersTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 3), )
if mibBuilder.loadTexts: alarmCountersTable.setStatus('mandatory')
alarmCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 3, 1), ).setIndexNames((0, "PM8ECCMIB", "alCntAlarmPosition"), (0, "PM8ECCMIB", "alCntIndex"))
if mibBuilder.loadTexts: alarmCountersEntry.setStatus('mandatory')
alCntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alCntIndex.setStatus('mandatory')
alCntAlarmPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 74))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alCntAlarmPosition.setStatus('mandatory')
alCntCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alCntCount.setStatus('mandatory')
io = MibIdentifier((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3))
ioOptionIDTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 1), )
if mibBuilder.loadTexts: ioOptionIDTable.setStatus('mandatory')
ioOptionIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 1, 1), ).setIndexNames((0, "PM8ECCMIB", "ioIDIndex"))
if mibBuilder.loadTexts: ioOptionIDEntry.setStatus('mandatory')
ioIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioIDIndex.setStatus('mandatory')
ioIDInstalledOptionSlot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unused", 1), ("io-22", 2), ("io-26", 3), ("io-2222", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioIDInstalledOptionSlot1.setStatus('mandatory')
ioIDInstalledOptionSlot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unused", 1), ("io-22", 2), ("io-26", 3), ("io-2222", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioIDInstalledOptionSlot2.setStatus('mandatory')
ioConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 2), )
if mibBuilder.loadTexts: ioConfigurationTable.setStatus('mandatory')
ioConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 2, 1), ).setIndexNames((0, "PM8ECCMIB", "iocIndex"), (0, "PM8ECCMIB", "iocPointNumber"))
if mibBuilder.loadTexts: ioConfigurationEntry.setStatus('mandatory')
iocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iocIndex.setStatus('mandatory')
iocPointNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iocPointNumber.setStatus('mandatory')
iocLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 2, 1, 3), IOPointLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iocLabel.setStatus('mandatory')
iocStateOrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iocStateOrValue.setStatus('mandatory')
iocPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 2, 1, 5), IOPointType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iocPointType.setStatus('mandatory')
iocMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iocMode.setStatus('mandatory')
iocType = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iocType.setStatus('mandatory')
iocCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: iocCount.setStatus('mandatory')
ioStatusBitmapsTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 3), )
if mibBuilder.loadTexts: ioStatusBitmapsTable.setStatus('mandatory')
ioStatusBitmapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 3, 1), ).setIndexNames((0, "PM8ECCMIB", "ioStatIndex"))
if mibBuilder.loadTexts: ioStatusBitmapsEntry.setStatus('mandatory')
ioStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioStatIndex.setStatus('mandatory')
ioStatSummaryBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioStatSummaryBitmap.setStatus('mandatory')
meterSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 4))
meterIdentificationTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 4, 1), )
if mibBuilder.loadTexts: meterIdentificationTable.setStatus('mandatory')
meterIdentificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 4, 1, 1), ).setIndexNames((0, "PM8ECCMIB", "midIndex"))
if mibBuilder.loadTexts: meterIdentificationEntry.setStatus('mandatory')
midIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: midIndex.setStatus('mandatory')
midSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midSerialNumber.setStatus('mandatory')
midFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 4, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midFirmwareVersion.setStatus('mandatory')
midModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 4, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midModelNumber.setStatus('mandatory')
midDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 4, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midDeviceName.setStatus('mandatory')
trapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 5))
alarmDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 5, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDateAndTime.setStatus('mandatory')
alarmLabel = MibScalar((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 5, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLabel.setStatus('mandatory')
alarmState = MibScalar((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 5, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmState.setStatus('mandatory')
alarmValue = MibScalar((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmValue.setStatus('mandatory')
alarmPriority = MibScalar((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("highPriority", 1), ("mediumPriority", 2), ("lowPriority", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmPriority.setStatus('mandatory')
mibVersion = MibScalar((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibVersion.setStatus('mandatory')
pm8OnBoardAlarmP1 = NotificationType((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1) + (0,1)).setObjects(("PM8ECCMIB", "alarmDateAndTime"), ("PM8ECCMIB", "alarmLabel"), ("PM8ECCMIB", "alarmState"), ("PM8ECCMIB", "alarmValue"), ("PM8ECCMIB", "alarmPriority"))
pm8OnBoardAlarmP2 = NotificationType((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1) + (0,2)).setObjects(("PM8ECCMIB", "alarmDateAndTime"), ("PM8ECCMIB", "alarmLabel"), ("PM8ECCMIB", "alarmState"), ("PM8ECCMIB", "alarmValue"), ("PM8ECCMIB", "alarmPriority"))
pm8OnBoardAlarmP3 = NotificationType((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1) + (0,3)).setObjects(("PM8ECCMIB", "alarmDateAndTime"), ("PM8ECCMIB", "alarmLabel"), ("PM8ECCMIB", "alarmState"), ("PM8ECCMIB", "alarmValue"), ("PM8ECCMIB", "alarmPriority"))
mibBuilder.exportSymbols("PM8ECCMIB", eIndex=eIndex, loadCurrentEntry=loadCurrentEntry, currentDemandEntry=currentDemandEntry, acStatus=acStatus, pdIndex=pdIndex, pReal=pReal, lcIndex=lcIndex, cdPeakCurrentDemand=cdPeakCurrentDemand, eDateTimeReactiveEnergyReset=eDateTimeReactiveEnergyReset, ioStatusBitmapsEntry=ioStatusBitmapsEntry, voltageTable=voltageTable, loadCurrentTable=loadCurrentTable, pm8ecc=pm8ecc, meterIdentificationEntry=meterIdentificationEntry, alarmCountersEntry=alarmCountersEntry, vVab=vVab, systemWiringTypeEntry=systemWiringTypeEntry, currentDemandTable=currentDemandTable, powerFactorEntry=powerFactorEntry, ioOptionIDEntry=ioOptionIDEntry, vVcn=vVcn, pdComponentEnum=pdComponentEnum, midSerialNumber=midSerialNumber, cdResetDateTime=cdResetDateTime, vVllAvg=vVllAvg, pfIndex=pfIndex, iocCount=iocCount, meterIdentificationTable=meterIdentificationTable, eApparentEnergy=eApparentEnergy, cdPhase=cdPhase, alSumAlarms17to32=alSumAlarms17to32, tfProducts=tfProducts, ioConfigurationEntry=ioConfigurationEntry, lcIc=lcIc, vVca=vVca, iocMode=iocMode, cdPhaseEnum=cdPhaseEnum, ioStatIndex=ioStatIndex, alarmValue=alarmValue, acAlarmList2=acAlarmList2, lcIAvg=lcIAvg, lcIa=lcIa, swtWiringType=swtWiringType, alarms=alarms, pApparent=pApparent, ioOptionIDTable=ioOptionIDTable, ioStatusBitmapsTable=ioStatusBitmapsTable, iocType=iocType, alarmPriority=alarmPriority, ioIDIndex=ioIDIndex, IOPointType=IOPointType, eRealEnergy=eRealEnergy, vVbn=vVbn, pdComponent=pdComponent, vIndex=vIndex, alarmState=alarmState, alarmConfigurationEntry=alarmConfigurationEntry, iocPointNumber=iocPointNumber, alSumAlarms1to16=alSumAlarms1to16, pm8OnBoardAlarmP3=pm8OnBoardAlarmP3, alarmDateAndTime=alarmDateAndTime, pdPeakDateTime=pdPeakDateTime, io=io, cdIndex=cdIndex, cdPeakDateTime=cdPeakDateTime, acIndex=acIndex, fIndex=fIndex, acAlarmList4=acAlarmList4, AlarmType=AlarmType, acPriority=acPriority, iocLabel=iocLabel, eDateTimeRealEnergyReset=eDateTimeRealEnergyReset, acAlarmList3=acAlarmList3, ecc=ecc, pdResetDateTime=pdResetDateTime, AlarmLabel=AlarmLabel, systemWiringTypeTable=systemWiringTypeTable, acPosition=acPosition, fFrequency=fFrequency, alarmCountersTable=alarmCountersTable, pm8OnBoardAlarmP1=pm8OnBoardAlarmP1, midDeviceName=midDeviceName, ioIDInstalledOptionSlot1=ioIDInstalledOptionSlot1, powerFactorTable=powerFactorTable, midIndex=midIndex, equipmentProfile=equipmentProfile, alCntAlarmPosition=alCntAlarmPosition, iocStateOrValue=iocStateOrValue, eReactiveEnergy=eReactiveEnergy, cdPresentCurrentDemand=cdPresentCurrentDemand, alarmSummaryBitmapsEntry=alarmSummaryBitmapsEntry, alSumIndex=alSumIndex, midModelNumber=midModelNumber, schneiderElectric=schneiderElectric, pdPresentPowerDemand=pdPresentPowerDemand, alarmConfigurationTable=alarmConfigurationTable, pIndex=pIndex, cdLastCurrentDemand=cdLastCurrentDemand, pfPowerFactorDescription=pfPowerFactorDescription, trapVariables=trapVariables, pdLastPowerDemand=pdLastPowerDemand, mibVersion=mibVersion, acEnabled=acEnabled, powerTable=powerTable, pdPeakPowerDemand=pdPeakPowerDemand, frequencyTable=frequencyTable, ioStatSummaryBitmap=ioStatSummaryBitmap, meterSystem=meterSystem, alSumAlarms33to48=alSumAlarms33to48, alarmLabel=alarmLabel, eDateTimeApparentEnergyReset=eDateTimeApparentEnergyReset, acAlarmList1=acAlarmList1, metering=metering, pfPowerFactorTotal=pfPowerFactorTotal, iocPointType=iocPointType, vVlnAvg=vVlnAvg, alarmSummaryBitmapsTable=alarmSummaryBitmapsTable, vVbc=vVbc, midFirmwareVersion=midFirmwareVersion, IOPointLabel=IOPointLabel, swtIndex=swtIndex, acType=acType, acCounter=acCounter, alCntIndex=alCntIndex, transparentFactoryEthernet=transparentFactoryEthernet, vVan=vVan, ioIDInstalledOptionSlot2=ioIDInstalledOptionSlot2, pReactive=pReactive, frequencyEntry=frequencyEntry, lcIb=lcIb, voltageEntry=voltageEntry, alSumAlarms65to74=alSumAlarms65to74, pm8OnBoardAlarmP2=pm8OnBoardAlarmP2, alCntCount=alCntCount, iocIndex=iocIndex, powerDemandEntry=powerDemandEntry, powerEntry=powerEntry, acAlarmLabel=acAlarmLabel, alSumAlarms49to64=alSumAlarms49to64, powerDemandTable=powerDemandTable, energyEntry=energyEntry, energyTable=energyTable, ioConfigurationTable=ioConfigurationTable)
