#
# PySNMP MIB module CAMBIUM-PTP500-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/cambium/CAMBIUM-PTP500-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 12:00:47 2024
# On host fv-az768-763 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
IpAddress, ObjectIdentity, TimeTicks, ModuleIdentity, MibIdentifier, Counter32, NotificationType, Gauge32, enterprises, Unsigned32, Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "MibIdentifier", "Counter32", "NotificationType", "Gauge32", "enterprises", "Unsigned32", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cambium = ModuleIdentity((1, 3, 6, 1, 4, 1, 17713))
cambium.setRevisions(('2014-03-14 16:04', '2013-02-08 08:38', '2012-07-09 17:50', '2012-03-28 10:37', '2011-07-13 16:57', '2010-09-22 14:49', '2009-05-29 09:25', '2008-11-04 10:22', '2008-06-26 16:44', '2008-04-11 18:08',))
if mibBuilder.loadTexts: cambium.setLastUpdated('201403141604Z')
if mibBuilder.loadTexts: cambium.setOrganization('Cambium Networks Ltd.')
ptp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 1))
ptmp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 2))
ptp500 = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5))
dfs = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 3))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 5))
ethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 6))
telecom = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 7))
licence = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 8))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 9))
phyControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 10))
phyStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 12))
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 13))
smtp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 15))
snmpControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 16))
sntp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 17))
reset = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 18))
versions = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 19))
pubStats = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 20))
encryption = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 22))
tDDControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 23))
aAAControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 25))
syslogControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 24))
supplementary = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 96))
ptpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 98))
ptpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 99))
ptpTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0))
ptpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 17713, 5, 97)).setObjects(("CAMBIUM-PTP500-MIB", "dfsGroup"), ("CAMBIUM-PTP500-MIB", "configurationGroup"), ("CAMBIUM-PTP500-MIB", "ethernetGroup"), ("CAMBIUM-PTP500-MIB", "telecomGroup"), ("CAMBIUM-PTP500-MIB", "licenceGroup"), ("CAMBIUM-PTP500-MIB", "managementGroup"), ("CAMBIUM-PTP500-MIB", "phyControlGroup"), ("CAMBIUM-PTP500-MIB", "phyStatusGroup"), ("CAMBIUM-PTP500-MIB", "alarmsGroup"), ("CAMBIUM-PTP500-MIB", "smtpGroup"), ("CAMBIUM-PTP500-MIB", "snmpControlGroup"), ("CAMBIUM-PTP500-MIB", "sntpGroup"), ("CAMBIUM-PTP500-MIB", "resetGroup"), ("CAMBIUM-PTP500-MIB", "versionsGroup"), ("CAMBIUM-PTP500-MIB", "pubStatsGroup"), ("CAMBIUM-PTP500-MIB", "encryptionGroup"), ("CAMBIUM-PTP500-MIB", "tDDControlGroup"), ("CAMBIUM-PTP500-MIB", "aAAControlGroup"), ("CAMBIUM-PTP500-MIB", "syslogControlGroup"), ("CAMBIUM-PTP500-MIB", "supplementaryGroup"), ("CAMBIUM-PTP500-MIB", "notificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ptpCompliance = ptpCompliance.setStatus('current')
dfsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 3)).setObjects(("CAMBIUM-PTP500-MIB", "dfsTableNumber"), ("CAMBIUM-PTP500-MIB", "dfsMeans"), ("CAMBIUM-PTP500-MIB", "dfsNineNinePointNinePercentiles"), ("CAMBIUM-PTP500-MIB", "dfsPeaks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfsGroup = dfsGroup.setStatus('current')
configurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 5)).setObjects(("CAMBIUM-PTP500-MIB", "iPAddress"), ("CAMBIUM-PTP500-MIB", "subnetMask"), ("CAMBIUM-PTP500-MIB", "gatewayIPAddress"), ("CAMBIUM-PTP500-MIB", "targetMACAddress"), ("CAMBIUM-PTP500-MIB", "masterSlaveMode"), ("CAMBIUM-PTP500-MIB", "maximumTransmitPower"), ("CAMBIUM-PTP500-MIB", "antennaGain"), ("CAMBIUM-PTP500-MIB", "cableLoss"), ("CAMBIUM-PTP500-MIB", "eIRP"), ("CAMBIUM-PTP500-MIB", "channelBandwidth"), ("CAMBIUM-PTP500-MIB", "remoteIPAddress"), ("CAMBIUM-PTP500-MIB", "linkName"), ("CAMBIUM-PTP500-MIB", "siteName"), ("CAMBIUM-PTP500-MIB", "accessMethod"), ("CAMBIUM-PTP500-MIB", "groupID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configurationGroup = configurationGroup.setStatus('current')
ethernetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 6)).setObjects(("CAMBIUM-PTP500-MIB", "dataPortAutoNegotiation"), ("CAMBIUM-PTP500-MIB", "dataPortAutoNegAdvertisement"), ("CAMBIUM-PTP500-MIB", "dataPortAutoMdix"), ("CAMBIUM-PTP500-MIB", "dataPortStatus"), ("CAMBIUM-PTP500-MIB", "dataPortSpeedAndDuplex"), ("CAMBIUM-PTP500-MIB", "dataPortWirelessDownAlert"), ("CAMBIUM-PTP500-MIB", "useVLANForManagementInterfaces"), ("CAMBIUM-PTP500-MIB", "vLANManagementPriority"), ("CAMBIUM-PTP500-MIB", "vLANManagementVID"), ("CAMBIUM-PTP500-MIB", "vLANPriorityTableNumber"), ("CAMBIUM-PTP500-MIB", "vLANPriorityQueueMapping"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetGroup = ethernetGroup.setStatus('current')
telecomGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 7)).setObjects(("CAMBIUM-PTP500-MIB", "telecomsInterface"), ("CAMBIUM-PTP500-MIB", "telecomsChannelStatus"), ("CAMBIUM-PTP500-MIB", "telecomsLineCode"), ("CAMBIUM-PTP500-MIB", "telecomsCableLength"), ("CAMBIUM-PTP500-MIB", "telecomsLoopback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    telecomGroup = telecomGroup.setStatus('current')
licenceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 8)).setObjects(("CAMBIUM-PTP500-MIB", "regionCode"), ("CAMBIUM-PTP500-MIB", "productVariant"), ("CAMBIUM-PTP500-MIB", "productName"), ("CAMBIUM-PTP500-MIB", "ethernetFiberSupport"), ("CAMBIUM-PTP500-MIB", "frequencyVariant"), ("CAMBIUM-PTP500-MIB", "bandwidthVariant"), ("CAMBIUM-PTP500-MIB", "constantPowerSpectralDensity"), ("CAMBIUM-PTP500-MIB", "sNMPv3Enable"), ("CAMBIUM-PTP500-MIB", "licensedCapacity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    licenceGroup = licenceGroup.setStatus('current')
managementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 9)).setObjects(("CAMBIUM-PTP500-MIB", "installStatus"), ("CAMBIUM-PTP500-MIB", "installArmState"), ("CAMBIUM-PTP500-MIB", "tFTPServerIPAddress"), ("CAMBIUM-PTP500-MIB", "tFTPServerPortNumber"), ("CAMBIUM-PTP500-MIB", "tFTPSoftwareUpgradeFileName"), ("CAMBIUM-PTP500-MIB", "tFTPStartSoftwareUpgrade"), ("CAMBIUM-PTP500-MIB", "tFTPSoftwareUpgradeStatus"), ("CAMBIUM-PTP500-MIB", "tFTPSoftwareUpgradeStatusText"), ("CAMBIUM-PTP500-MIB", "tFTPSoftwareUpgradeStatusAdditionalText"), ("CAMBIUM-PTP500-MIB", "hTTPAccessEnabled"), ("CAMBIUM-PTP500-MIB", "telnetAccessEnabled"), ("CAMBIUM-PTP500-MIB", "hTTPPortNumber"), ("CAMBIUM-PTP500-MIB", "hTTPSPortNumber"), ("CAMBIUM-PTP500-MIB", "telnetPortNumber"), ("CAMBIUM-PTP500-MIB", "hTTPSAccessEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    managementGroup = managementGroup.setStatus('current')
phyControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 10)).setObjects(("CAMBIUM-PTP500-MIB", "linkSymmetry"), ("CAMBIUM-PTP500-MIB", "linkModeOptimisation"), ("CAMBIUM-PTP500-MIB", "userConfiguredMaxModulationMode"), ("CAMBIUM-PTP500-MIB", "remoteMaximumTransmitPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    phyControlGroup = phyControlGroup.setStatus('current')
phyStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 12)).setObjects(("CAMBIUM-PTP500-MIB", "receivePower"), ("CAMBIUM-PTP500-MIB", "vectorError"), ("CAMBIUM-PTP500-MIB", "transmitPower"), ("CAMBIUM-PTP500-MIB", "range"), ("CAMBIUM-PTP500-MIB", "linkLoss"), ("CAMBIUM-PTP500-MIB", "receiveChannel"), ("CAMBIUM-PTP500-MIB", "transmitChannel"), ("CAMBIUM-PTP500-MIB", "receiveModulationMode"), ("CAMBIUM-PTP500-MIB", "transmitModulationMode"), ("CAMBIUM-PTP500-MIB", "receiveFreqMHz"), ("CAMBIUM-PTP500-MIB", "transmitFreqMHz"), ("CAMBIUM-PTP500-MIB", "signalStrengthRatio"), ("CAMBIUM-PTP500-MIB", "receiveFreqKHz"), ("CAMBIUM-PTP500-MIB", "transmitFreqKHz"), ("CAMBIUM-PTP500-MIB", "searchState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    phyStatusGroup = phyStatusGroup.setStatus('current')
alarmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 13)).setObjects(("CAMBIUM-PTP500-MIB", "unitOutOfCalibration"), ("CAMBIUM-PTP500-MIB", "incompatibleRegionCodes"), ("CAMBIUM-PTP500-MIB", "noWirelessChannelAvailable"), ("CAMBIUM-PTP500-MIB", "wirelessLinkDisabledWarning"), ("CAMBIUM-PTP500-MIB", "dataPortDisabledWarning"), ("CAMBIUM-PTP500-MIB", "dataPortConfigurationMismatch"), ("CAMBIUM-PTP500-MIB", "incompatibleMasterAndSlave"), ("CAMBIUM-PTP500-MIB", "tDDSynchronizationStatus"), ("CAMBIUM-PTP500-MIB", "tDDSynchronizationAlarm"), ("CAMBIUM-PTP500-MIB", "linkModeOptimizationMismatch"), ("CAMBIUM-PTP500-MIB", "capacityLicenseMismatch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alarmsGroup = alarmsGroup.setStatus('current')
smtpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 15)).setObjects(("CAMBIUM-PTP500-MIB", "sMTPEmailAlert"), ("CAMBIUM-PTP500-MIB", "sMTPServerIPAddress"), ("CAMBIUM-PTP500-MIB", "sMTPServerPortNumber"), ("CAMBIUM-PTP500-MIB", "sMTPSourceEmailAddress"), ("CAMBIUM-PTP500-MIB", "sMTPDestinationEmailAddress"), ("CAMBIUM-PTP500-MIB", "sMTPEnabledMessages"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    smtpGroup = smtpGroup.setStatus('current')
snmpControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 16)).setObjects(("CAMBIUM-PTP500-MIB", "sNMPPortNumber"), ("CAMBIUM-PTP500-MIB", "sNMPCommunityString"), ("CAMBIUM-PTP500-MIB", "sNMPTrapTableNumber"), ("CAMBIUM-PTP500-MIB", "sNMPTrapVersion"), ("CAMBIUM-PTP500-MIB", "sNMPEnabledTraps"), ("CAMBIUM-PTP500-MIB", "enabledDiagnosticAlarms"), ("CAMBIUM-PTP500-MIB", "sNMPSendAllTrapsAtStartup"), ("CAMBIUM-PTP500-MIB", "sNMPTrapIPAddress"), ("CAMBIUM-PTP500-MIB", "sNMPTrapPortNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snmpControlGroup = snmpControlGroup.setStatus('current')
sntpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 17)).setObjects(("CAMBIUM-PTP500-MIB", "sNTPState"), ("CAMBIUM-PTP500-MIB", "sNTPServerIPAddress"), ("CAMBIUM-PTP500-MIB", "sNTPServerPortNumber"), ("CAMBIUM-PTP500-MIB", "sNTPPollInterval"), ("CAMBIUM-PTP500-MIB", "sNTPSync"), ("CAMBIUM-PTP500-MIB", "sNTPLastSync"), ("CAMBIUM-PTP500-MIB", "systemClock"), ("CAMBIUM-PTP500-MIB", "timeZone"), ("CAMBIUM-PTP500-MIB", "daylightSaving"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sntpGroup = sntpGroup.setStatus('current')
resetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 18)).setObjects(("CAMBIUM-PTP500-MIB", "systemReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    resetGroup = resetGroup.setStatus('current')
versionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 19)).setObjects(("CAMBIUM-PTP500-MIB", "softwareVersion"), ("CAMBIUM-PTP500-MIB", "hardwareVersion"), ("CAMBIUM-PTP500-MIB", "secondarySoftwareVersion"), ("CAMBIUM-PTP500-MIB", "bootVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    versionsGroup = versionsGroup.setStatus('current')
pubStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 20)).setObjects(("CAMBIUM-PTP500-MIB", "receiveDataRate"), ("CAMBIUM-PTP500-MIB", "transmitDataRate"), ("CAMBIUM-PTP500-MIB", "aggregateDataRate"), ("CAMBIUM-PTP500-MIB", "wirelessLinkAvailability"), ("CAMBIUM-PTP500-MIB", "wirelessLinkStatus"), ("CAMBIUM-PTP500-MIB", "byteErrorRatio"), ("CAMBIUM-PTP500-MIB", "receiveModulationModeDetail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pubStatsGroup = pubStatsGroup.setStatus('current')
encryptionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 22)).setObjects(("CAMBIUM-PTP500-MIB", "encryptionAlgorithm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    encryptionGroup = encryptionGroup.setStatus('current')
tDDControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 23)).setObjects(("CAMBIUM-PTP500-MIB", "tDDSynchronizationMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tDDControlGroup = tDDControlGroup.setStatus('current')
aAAControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 25)).setObjects(("CAMBIUM-PTP500-MIB", "userTableNumber"), ("CAMBIUM-PTP500-MIB", "userName"), ("CAMBIUM-PTP500-MIB", "userRole"), ("CAMBIUM-PTP500-MIB", "userEnabled"), ("CAMBIUM-PTP500-MIB", "userPassword"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aAAControlGroup = aAAControlGroup.setStatus('current')
syslogControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 24)).setObjects(("CAMBIUM-PTP500-MIB", "syslogClient"), ("CAMBIUM-PTP500-MIB", "syslogState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    syslogControlGroup = syslogControlGroup.setStatus('current')
supplementaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 96)).setObjects(("CAMBIUM-PTP500-MIB", "longitude"), ("CAMBIUM-PTP500-MIB", "latitude"), ("CAMBIUM-PTP500-MIB", "altitude"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    supplementaryGroup = supplementaryGroup.setStatus('current')
notificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 99)).setObjects(("CAMBIUM-PTP500-MIB", "channelChangeTrap"), ("CAMBIUM-PTP500-MIB", "dfsImpulsiveInterferenceTrap"), ("CAMBIUM-PTP500-MIB", "dataPortStatusTrap"), ("CAMBIUM-PTP500-MIB", "telecomsChannelStatusTrap"), ("CAMBIUM-PTP500-MIB", "telecomsLoopbackTrap"), ("CAMBIUM-PTP500-MIB", "regionCodeTrap"), ("CAMBIUM-PTP500-MIB", "installStatusTrap"), ("CAMBIUM-PTP500-MIB", "installArmStateTrap"), ("CAMBIUM-PTP500-MIB", "unitOutOfCalibrationTrap"), ("CAMBIUM-PTP500-MIB", "incompatibleRegionCodesTrap"), ("CAMBIUM-PTP500-MIB", "noWirelessChannelAvailableTrap"), ("CAMBIUM-PTP500-MIB", "wirelessLinkDisabledWarningTrap"), ("CAMBIUM-PTP500-MIB", "dataPortDisabledWarningTrap"), ("CAMBIUM-PTP500-MIB", "dataPortConfigurationMismatchTrap"), ("CAMBIUM-PTP500-MIB", "incompatibleMasterAndSlaveTrap"), ("CAMBIUM-PTP500-MIB", "sNTPSyncTrap"), ("CAMBIUM-PTP500-MIB", "tDDSynchronizationAlarmTrap"), ("CAMBIUM-PTP500-MIB", "linkModeOptimizationMismatchTrap"), ("CAMBIUM-PTP500-MIB", "capacityLicenseMismatchTrap"), ("CAMBIUM-PTP500-MIB", "syslogStateTrap"), ("CAMBIUM-PTP500-MIB", "syslogLocalNearlyFullTrap"), ("CAMBIUM-PTP500-MIB", "syslogLocalWrappedTrap"), ("CAMBIUM-PTP500-MIB", "syslogClientTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    notificationsGroup = notificationsGroup.setStatus('current')
dfsTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 5, 3, 2), )
if mibBuilder.loadTexts: dfsTable.setStatus('current')
dfsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 5, 3, 2, 1), ).setIndexNames((0, "CAMBIUM-PTP500-MIB", "dfsTableIndex"))
if mibBuilder.loadTexts: dfsTableEntry.setStatus('current')
vLANPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 5, 6, 15), )
if mibBuilder.loadTexts: vLANPriorityTable.setStatus('current')
vLANPriorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 5, 6, 15, 1), ).setIndexNames((0, "CAMBIUM-PTP500-MIB", "vLANPriorityTableIndex"))
if mibBuilder.loadTexts: vLANPriorityTableEntry.setStatus('current')
sNMPTrapTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 5, 16, 4), )
if mibBuilder.loadTexts: sNMPTrapTable.setStatus('current')
sNMPTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 5, 16, 4, 1), ).setIndexNames((0, "CAMBIUM-PTP500-MIB", "sNMPTrapTableIndex"))
if mibBuilder.loadTexts: sNMPTrapTableEntry.setStatus('current')
userTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 5, 25, 2), )
if mibBuilder.loadTexts: userTable.setStatus('current')
userTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 5, 25, 2, 1), ).setIndexNames((0, "CAMBIUM-PTP500-MIB", "userTableIndex"))
if mibBuilder.loadTexts: userTableEntry.setStatus('current')
dfsTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsTableNumber.setStatus('current')
dfsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)))
if mibBuilder.loadTexts: dfsTableIndex.setStatus('current')
dfsMeans = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsMeans.setStatus('current')
dfsNineNinePointNinePercentiles = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsNineNinePointNinePercentiles.setStatus('current')
dfsPeaks = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsPeaks.setStatus('current')
iPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPAddress.setStatus('current')
subnetMask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask.setStatus('current')
gatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayIPAddress.setStatus('current')
targetMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetMACAddress.setStatus('current')
masterSlaveMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("master", 0), ("slave", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: masterSlaveMode.setStatus('current')
maximumTransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumTransmitPower.setStatus('current')
antennaGain = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 610))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: antennaGain.setStatus('current')
cableLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableLoss.setStatus('current')
eIRP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eIRP.setStatus('current')
channelBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("bw30MHz", 0), ("bw15MHz", 1), ("bw10MHz", 2), ("bw5MHz", 3), ("bw20MHz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelBandwidth.setStatus('current')
remoteIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteIPAddress.setStatus('current')
linkName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkName.setStatus('current')
siteName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteName.setStatus('current')
accessMethod = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("linkAccess", 0), ("linkNameAccess", 1), ("groupAccess", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessMethod.setStatus('current')
groupID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupID.setStatus('current')
dataPortAutoNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortAutoNegotiation.setStatus('current')
dataPortAutoNegAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 6, 2), Bits().clone(namedValues=NamedValues(("negInvalid", 2), ("neg10MbpsHalfDuplex", 3), ("neg10MbpsFullDuplex", 4), ("neg100MbpsHalfDuplex", 5), ("neg100MbpsFullDuplex", 6), ("negUnknown1", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortAutoNegAdvertisement.setStatus('current')
dataPortAutoMdix = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortAutoMdix.setStatus('current')
dataPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("copperLinkUp", 1), ("fiberLinkUp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortStatus.setStatus('current')
dataPortSpeedAndDuplex = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("speed1000MbpsFullDuplex", 0), ("speed100MbpsFullDuplex", 1), ("speed100MbpsHalfDuplex", 2), ("speed10MbpsFullDuplex", 3), ("speed10MbpsHalfDuplex", 4), ("speedUnknown6", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortSpeedAndDuplex.setStatus('current')
dataPortWirelessDownAlert = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortWirelessDownAlert.setStatus('current')
useVLANForManagementInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noVLANTagging", 0), ("iEEE8021QTaggedCTagType8100", 1), ("iEEE8021adTaggedSTagorBTagType88a8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useVLANForManagementInterfaces.setStatus('current')
vLANManagementPriority = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLANManagementPriority.setStatus('current')
vLANManagementVID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLANManagementVID.setStatus('current')
vLANPriorityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 6, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLANPriorityTableNumber.setStatus('current')
vLANPriorityQueueMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 6, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLANPriorityQueueMapping.setStatus('current')
vLANPriorityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 6, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("p0", 1), ("p1", 2), ("p2", 3), ("p3", 4), ("p4", 5), ("p5", 6), ("p6", 7), ("p7", 8), ("untagged", 9))))
if mibBuilder.loadTexts: vLANPriorityTableIndex.setStatus('current')
telecomsInterface = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("e1", 1), ("t1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telecomsInterface.setStatus('current')
telecomsChannelStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 0), ("noSignalLocal", 1), ("noSignalRemote", 2), ("noSignalLocalandRemote", 3), ("up", 4), ("remoteTiming", 5), ("noSignalLocalandRemoteTiming", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telecomsChannelStatus.setStatus('current')
telecomsLineCode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("aMI", 0), ("b8ZSHDB3", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telecomsLineCode.setStatus('current')
telecomsCableLength = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("feet133", 0), ("feet266", 1), ("feet399", 2), ("feet533", 3), ("feet655", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telecomsCableLength.setStatus('current')
telecomsLoopback = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("copper", 1), ("wireless", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telecomsLoopback.setStatus('current')
regionCode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("regionCodeInvalid", 0), ("regionCode1", 1), ("regionCode2", 2), ("regionCode3", 3), ("regionCode4", 4), ("regionCode5", 5), ("regionCode6", 6), ("regionCode7", 7), ("regionCode8", 8), ("regionCode9", 9), ("regionCode10", 10), ("regionCode11", 11), ("regionCode12", 12), ("regionCode13", 13), ("regionCode14", 14), ("regionCode15", 15), ("regionCode16", 16), ("regionCode17", 17), ("regionCode18", 18), ("regionCode19", 19), ("regionCode20", 20), ("regionCode21", 21), ("regionCode22", 22), ("regionCode23", 23), ("regionCode24", 24), ("regionCode25", 25), ("regionCode26", 26), ("regionCode27", 27), ("regionCode28", 28), ("regionCode29", 29), ("regionCode30", 30), ("regionCode31", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: regionCode.setStatus('current')
productVariant = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("pTPxx400Full", 0), ("pTPxx400Deprecated1", 1), ("pTPxx400Deprecated2", 2), ("pTPxx400Lite", 3), ("spare1", 4), ("pTPxx300", 5), ("spare2", 6), ("spare3", 7), ("pTPxx500FullDeprecated", 8), ("pTPxx500LiteDeprecated", 9), ("pTPxx500", 10), ("pTPxx600Lite", 11), ("pTPxx600Full", 12), ("spare5", 13), ("spare6", 14), ("pTP800", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVariant.setStatus('current')
productName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productName.setStatus('current')
ethernetFiberSupport = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetFiberSupport.setStatus('current')
frequencyVariant = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("freq5800MHz", 0), ("freq5400MHz", 1), ("freq4900MHz", 2), ("freq2500MHz", 3), ("freq5800MHz2", 4), ("freq5400MHz2", 5), ("freq4500MHz", 6), ("freq5900MHz", 7), ("freq5200MHz", 8), ("freq5100MHz", 9), ("freq4800MHz", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequencyVariant.setStatus('current')
bandwidthVariant = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("bw30MHz", 0), ("bw15MHz", 1), ("bw10MHz", 2), ("bw5MHz", 3), ("bw20MHz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthVariant.setStatus('current')
constantPowerSpectralDensity = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("constant", 0), ("fullPower", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: constantPowerSpectralDensity.setStatus('current')
sNMPv3Enable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPv3Enable.setStatus('current')
licensedCapacity = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("capacity25Mbps", 0), ("capacity52Mbps", 1), ("capacity105Mbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensedCapacity.setStatus('current')
installStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("wrongPeer", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: installStatus.setStatus('current')
installArmState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disarmed", 0), ("armed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: installArmState.setStatus('current')
tFTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPServerIPAddress.setStatus('current')
tFTPServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPServerPortNumber.setStatus('current')
tFTPSoftwareUpgradeFileName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeFileName.setStatus('current')
tFTPStartSoftwareUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPStartSoftwareUpgrade.setStatus('current')
tFTPSoftwareUpgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 0), ("uploadinprogress", 1), ("uploadsuccessfulprogrammingFLASH", 2), ("upgradesuccessfulreboottorunthenewsoftwareimage", 3), ("upgradefailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatus.setStatus('current')
tFTPSoftwareUpgradeStatusText = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusText.setStatus('current')
tFTPSoftwareUpgradeStatusAdditionalText = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusAdditionalText.setStatus('current')
hTTPAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPAccessEnabled.setStatus('current')
telnetAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetAccessEnabled.setStatus('current')
hTTPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPPortNumber.setStatus('current')
hTTPSPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPSPortNumber.setStatus('current')
telnetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortNumber.setStatus('current')
hTTPSAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPSAccessEnabled.setStatus('current')
linkSymmetry = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("symmetryAdaptive", 0), ("symmetry3to1", 1), ("symmetry1to1", 2), ("symmetry1to3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSymmetry.setStatus('current')
linkModeOptimisation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("iPTraffic", 0), ("tDMTraffic", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkModeOptimisation.setStatus('current')
userConfiguredMaxModulationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("modBpsk50percent", 0), ("modQpsk50percent", 1), ("modQpsk75percent", 2), ("mod16qam50percent", 3), ("mod16qam75percent", 4), ("mod64qam67percent", 5), ("mod64qam83percent", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userConfiguredMaxModulationMode.setStatus('current')
remoteMaximumTransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteMaximumTransmitPower.setStatus('current')
receivePower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receivePower.setStatus('current')
vectorError = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vectorError.setStatus('current')
transmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitPower.setStatus('current')
range = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range.setStatus('current')
linkLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkLoss.setStatus('current')
receiveChannel = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveChannel.setStatus('current')
transmitChannel = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitChannel.setStatus('current')
receiveModulationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("modAcquisition", 0), ("modBpsk50percent", 1), ("modQpsk50percentSingle", 2), ("modQpsk75percentSingle", 3), ("mod16qam50percentSingle", 4), ("mod16qam75percentSingle", 5), ("mod64qam67percentSingle", 6), ("mod64qam83percentSingle", 7), ("modReserved1", 8), ("modQpsk50percentDual", 9), ("modQpsk75percentDual", 10), ("mod16qam50percentDual", 11), ("mod16qam75percentDual", 12), ("mod64qam67percentDual", 13), ("mod64qam83percentDual", 14), ("modReserved2", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveModulationMode.setStatus('current')
transmitModulationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("modAcquisition", 0), ("modBpsk50percent", 1), ("modQpsk50percentSingle", 2), ("modQpsk75percentSingle", 3), ("mod16qam50percentSingle", 4), ("mod16qam75percentSingle", 5), ("mod64qam67percentSingle", 6), ("mod64qam83percentSingle", 7), ("modReserved1", 8), ("modQpsk50percentDual", 9), ("modQpsk75percentDual", 10), ("mod16qam50percentDual", 11), ("mod16qam75percentDual", 12), ("mod64qam67percentDual", 13), ("mod64qam83percentDual", 14), ("modReserved2", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitModulationMode.setStatus('current')
receiveFreqMHz = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5925))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveFreqMHz.setStatus('current')
transmitFreqMHz = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5925))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitFreqMHz.setStatus('current')
signalStrengthRatio = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalStrengthRatio.setStatus('current')
receiveFreqKHz = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5925000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveFreqKHz.setStatus('current')
transmitFreqKHz = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5925000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitFreqKHz.setStatus('current')
searchState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("registering", 0), ("searching", 1), ("acquiring", 2), ("registeringAcquiring2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: searchState.setStatus('current')
unitOutOfCalibration = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("calibrated", 0), ("partialCalibration", 1), ("invalidCalibration", 2), ("bandwidthvariantunsupportedPAsShutdown", 3), ("outOfCalibrationPAsShutdown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitOutOfCalibration.setStatus('current')
incompatibleRegionCodes = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("incompatibleLicenceKeys", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: incompatibleRegionCodes.setStatus('current')
noWirelessChannelAvailable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("noWirelessChannelAvailable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: noWirelessChannelAvailable.setStatus('current')
wirelessLinkDisabledWarning = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("disabledBySNMPifAdminStatus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkDisabledWarning.setStatus('current')
dataPortDisabledWarning = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 13, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("disabledBySNMPifAdminStatus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortDisabledWarning.setStatus('current')
dataPortConfigurationMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 13, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noError", 0), ("mismatchDetected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortConfigurationMismatch.setStatus('current')
incompatibleMasterAndSlave = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 13, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("incompatibleProductVariants", 1), ("differentSoftwareVersionsRunning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: incompatibleMasterAndSlave.setStatus('current')
tDDSynchronizationStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 13, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("locked", 0), ("holdover", 1), ("holdoverNotConnected", 2), ("acquiringLock", 3), ("noTimingReference", 4), ("timingSystemNotConnected", 5), ("initialising", 6), ("clusterTimingMaster", 7), ("tDDSyncNotActive", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDDSynchronizationStatus.setStatus('current')
tDDSynchronizationAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 13, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("notSynchronized", 1), ("timingSystemFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDDSynchronizationAlarm.setStatus('current')
linkModeOptimizationMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 13, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("linkModeOptimizationMismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkModeOptimizationMismatch.setStatus('current')
capacityLicenseMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 13, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("mismatchDetected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: capacityLicenseMismatch.setStatus('current')
sMTPEmailAlert = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPEmailAlert.setStatus('current')
sMTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 15, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPServerIPAddress.setStatus('current')
sMTPServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPServerPortNumber.setStatus('current')
sMTPSourceEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 15, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPSourceEmailAddress.setStatus('current')
sMTPDestinationEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 15, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPDestinationEmailAddress.setStatus('current')
sMTPEnabledMessages = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 15, 6), Bits().clone(namedValues=NamedValues(("telecomsChannelUpDown", 1), ("unknown6", 2), ("dataPortUpDown", 3), ("enabledDiagnosticAlarms", 4), ("dFSImpulseInterference", 5), ("channelChange", 6), ("wirelessLinkUpDown", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPEnabledMessages.setStatus('current')
sNMPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 16, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPPortNumber.setStatus('current')
sNMPCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 16, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPCommunityString.setStatus('current')
sNMPTrapTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 16, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPTrapTableNumber.setStatus('current')
sNMPTrapVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 16, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("v1", 0), ("v2c", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapVersion.setStatus('current')
sNMPEnabledTraps = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 16, 6), Bits().clone(namedValues=NamedValues(("unknown8", 0), ("dataPortUpDown", 1), ("authenticationFailure", 2), ("enabledDiagnosticAlarms", 3), ("dFSImpulseInterference", 4), ("channelChange", 5), ("wirelessLinkUpDown", 6), ("coldStart", 7), ("telecomsChannelUpDown", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPEnabledTraps.setStatus('current')
enabledDiagnosticAlarms = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 16, 7), Bits().clone(namedValues=NamedValues(("incompatibleMasterAndSlave", 0), ("incompatibleRegionCodes", 1), ("unknown6", 2), ("unknown5", 3), ("unitOutOfCalibration", 4), ("installArmState", 5), ("installStatus", 6), ("regionCode", 7), ("telecomsChannelStatus", 8), ("unknown15", 9), ("dataPortStatus", 10), ("dataPortDisabledWarning", 11), ("wirelessLinkDisabledWarning", 12), ("sNTPSynchronizationFailed", 13), ("noWirelessChannelAvailable", 14), ("dataPortConfigurationMismatch", 15), ("syslogClientDisabledWarning", 16), ("licensedCapacityMismatch", 17), ("syslogLocalWrapped", 18), ("syslogLocalNearlyFull", 19), ("syslogLocalEnableDisable", 20), ("linkModeOptimizationMismatch", 21), ("tDDSynchronizationAlarm", 22), ("telecomsChannelLoopback", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enabledDiagnosticAlarms.setStatus('current')
sNMPSendAllTrapsAtStartup = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 16, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPSendAllTrapsAtStartup.setStatus('current')
sNMPTrapTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: sNMPTrapTableIndex.setStatus('current')
sNMPTrapIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 16, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapIPAddress.setStatus('current')
sNMPTrapPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 16, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapPortNumber.setStatus('current')
sNTPState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPState.setStatus('current')
sNTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 17, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerIPAddress.setStatus('current')
sNTPServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 17, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerPortNumber.setStatus('current')
sNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 17, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 43200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPPollInterval.setStatus('current')
sNTPSync = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 17, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noSync", 0), ("inSync", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPSync.setStatus('current')
sNTPLastSync = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 17, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPLastSync.setStatus('current')
systemClock = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 17, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemClock.setStatus('current')
timeZone = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 17, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50))).clone(namedValues=NamedValues(("gmtMinus1200", 0), ("gmtMinus1130", 1), ("gmtMinus1100", 2), ("gmtMinus1030", 3), ("gmtMinus1000", 4), ("gmtMinus0930", 5), ("gmtMinus0900", 6), ("gmtMinus0830", 7), ("gmtMinus0800", 8), ("gmtMinus0730", 9), ("gmtMinus0700", 10), ("gmtMinus0630", 11), ("gmtMinus0600", 12), ("gmtMinus0530", 13), ("gmtMinus0500", 14), ("gmtMinus0430", 15), ("gmtMinus0400", 16), ("gmtMinus0330", 17), ("gmtMinus0300", 18), ("gmtMinus0230", 19), ("gmtMinus0200", 20), ("gmtMinus0130", 21), ("gmtMinus0100", 22), ("gmtMinus0030", 23), ("gmtZero", 24), ("gmtPlus0030", 25), ("gmtPlus0100", 26), ("gmtPlus0130", 27), ("gmtPlus0200", 28), ("gmtPlus0230", 29), ("gmtPlus0300", 30), ("gmtPlus0330", 31), ("gmtPlus0400", 32), ("gmtPlus0430", 33), ("gmtPlus0500", 34), ("gmtPlus0530", 35), ("gmtPlus0600", 36), ("gmtPlus0630", 37), ("gmtPlus0700", 38), ("gmtPlus0730", 39), ("gmtPlus0800", 40), ("gmtPlus0830", 41), ("gmtPlus0900", 42), ("gmtPlus0930", 43), ("gmtPlus1000", 44), ("gmtPlus1030", 45), ("gmtPlus1100", 46), ("gmtPlus1130", 47), ("gmtPlus1200", 48), ("gmtPlus1230", 49), ("gmtPlus1300", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZone.setStatus('current')
daylightSaving = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 17, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daylightSaving.setStatus('current')
systemReset = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("running", 0), ("consoleReboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemReset.setStatus('current')
softwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 19, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('current')
hardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 19, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareVersion.setStatus('current')
secondarySoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 19, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secondarySoftwareVersion.setStatus('current')
bootVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 19, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootVersion.setStatus('current')
receiveDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveDataRate.setStatus('current')
transmitDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 20, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitDataRate.setStatus('current')
aggregateDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 20, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregateDataRate.setStatus('current')
wirelessLinkAvailability = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 20, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkAvailability.setStatus('current')
wirelessLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 0), ("registering", 1), ("acquiring", 2), ("searching", 3), ("radarCAC", 4), ("initialising", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkStatus.setStatus('current')
byteErrorRatio = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 20, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: byteErrorRatio.setStatus('current')
receiveModulationModeDetail = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 20, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("runningAtMaximumReceiveMode", 0), ("runningAtUserConfiguredMaxModulationMode", 1), ("restrictedBecauseInstallationIsArmed", 2), ("restrictedBecauseOfByteErrorsOnTheWirelessLink", 3), ("restrictedBecauseTheLinkParametersAreUpdating", 4), ("restrictedBecauseChannelChangeIsInProgress", 5), ("restrictedDueToTheLowEthernetLinkSpeed", 6), ("runningAtMaximumReceiveModeForChannelBandwidth", 7), ("limitedByTheWirelessConditions", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveModulationModeDetail.setStatus('current')
encryptionAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("aESRijndael", 1), ("aES256bitRijndael", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: encryptionAlgorithm.setStatus('current')
tDDSynchronizationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDDSynchronizationMode.setStatus('current')
userTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 25, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userTableNumber.setStatus('current')
userTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 25, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: userTableIndex.setStatus('current')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 25, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('current')
userRole = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 25, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("readOnly", 0), ("systemAdministrator", 1), ("securityOfficer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userRole.setStatus('current')
userEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 25, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userEnabled.setStatus('current')
userPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 25, 2, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPassword.setStatus('current')
syslogClient = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogClient.setStatus('current')
syslogState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 24, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogState.setStatus('current')
longitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 96, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: longitude.setStatus('current')
latitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 96, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latitude.setStatus('current')
altitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 96, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: altitude.setStatus('current')
channelChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 1)).setObjects(("CAMBIUM-PTP500-MIB", "receiveChannel"))
if mibBuilder.loadTexts: channelChangeTrap.setStatus('current')
dfsImpulsiveInterferenceTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 2)).setObjects(("CAMBIUM-PTP500-MIB", "receiveChannel"))
if mibBuilder.loadTexts: dfsImpulsiveInterferenceTrap.setStatus('current')
dataPortStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 3)).setObjects(("CAMBIUM-PTP500-MIB", "dataPortStatus"))
if mibBuilder.loadTexts: dataPortStatusTrap.setStatus('current')
telecomsChannelStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 4)).setObjects(("CAMBIUM-PTP500-MIB", "telecomsChannelStatus"))
if mibBuilder.loadTexts: telecomsChannelStatusTrap.setStatus('current')
telecomsLoopbackTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 6)).setObjects(("CAMBIUM-PTP500-MIB", "telecomsLoopback"))
if mibBuilder.loadTexts: telecomsLoopbackTrap.setStatus('current')
regionCodeTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 8)).setObjects(("CAMBIUM-PTP500-MIB", "regionCode"))
if mibBuilder.loadTexts: regionCodeTrap.setStatus('current')
installStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 9)).setObjects(("CAMBIUM-PTP500-MIB", "installStatus"))
if mibBuilder.loadTexts: installStatusTrap.setStatus('current')
installArmStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 10)).setObjects(("CAMBIUM-PTP500-MIB", "installArmState"))
if mibBuilder.loadTexts: installArmStateTrap.setStatus('current')
unitOutOfCalibrationTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 11)).setObjects(("CAMBIUM-PTP500-MIB", "unitOutOfCalibration"))
if mibBuilder.loadTexts: unitOutOfCalibrationTrap.setStatus('current')
incompatibleRegionCodesTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 14)).setObjects(("CAMBIUM-PTP500-MIB", "incompatibleRegionCodes"))
if mibBuilder.loadTexts: incompatibleRegionCodesTrap.setStatus('current')
noWirelessChannelAvailableTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 15)).setObjects(("CAMBIUM-PTP500-MIB", "noWirelessChannelAvailable"))
if mibBuilder.loadTexts: noWirelessChannelAvailableTrap.setStatus('current')
wirelessLinkDisabledWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 16)).setObjects(("CAMBIUM-PTP500-MIB", "wirelessLinkDisabledWarning"))
if mibBuilder.loadTexts: wirelessLinkDisabledWarningTrap.setStatus('current')
dataPortDisabledWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 17)).setObjects(("CAMBIUM-PTP500-MIB", "dataPortDisabledWarning"))
if mibBuilder.loadTexts: dataPortDisabledWarningTrap.setStatus('current')
dataPortConfigurationMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 19)).setObjects(("CAMBIUM-PTP500-MIB", "dataPortConfigurationMismatch"))
if mibBuilder.loadTexts: dataPortConfigurationMismatchTrap.setStatus('current')
incompatibleMasterAndSlaveTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 20)).setObjects(("CAMBIUM-PTP500-MIB", "incompatibleMasterAndSlave"))
if mibBuilder.loadTexts: incompatibleMasterAndSlaveTrap.setStatus('current')
sNTPSyncTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 21)).setObjects(("CAMBIUM-PTP500-MIB", "sNTPSync"))
if mibBuilder.loadTexts: sNTPSyncTrap.setStatus('current')
tDDSynchronizationAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 22)).setObjects(("CAMBIUM-PTP500-MIB", "tDDSynchronizationAlarm"))
if mibBuilder.loadTexts: tDDSynchronizationAlarmTrap.setStatus('current')
linkModeOptimizationMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 25)).setObjects(("CAMBIUM-PTP500-MIB", "linkModeOptimizationMismatch"))
if mibBuilder.loadTexts: linkModeOptimizationMismatchTrap.setStatus('current')
capacityLicenseMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 27)).setObjects(("CAMBIUM-PTP500-MIB", "capacityLicenseMismatch"))
if mibBuilder.loadTexts: capacityLicenseMismatchTrap.setStatus('current')
syslogStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 30)).setObjects(("CAMBIUM-PTP500-MIB", "syslogState"))
if mibBuilder.loadTexts: syslogStateTrap.setStatus('current')
syslogLocalNearlyFullTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 31))
if mibBuilder.loadTexts: syslogLocalNearlyFullTrap.setStatus('current')
syslogLocalWrappedTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 32))
if mibBuilder.loadTexts: syslogLocalWrappedTrap.setStatus('current')
syslogClientTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 33)).setObjects(("CAMBIUM-PTP500-MIB", "syslogClient"))
if mibBuilder.loadTexts: syslogClientTrap.setStatus('current')
mibBuilder.exportSymbols("CAMBIUM-PTP500-MIB", sNTPPollInterval=sNTPPollInterval, pubStatsGroup=pubStatsGroup, linkModeOptimizationMismatchTrap=linkModeOptimizationMismatchTrap, ptp500=ptp500, ethernetFiberSupport=ethernetFiberSupport, sNTPState=sNTPState, dfs=dfs, dataPortStatusTrap=dataPortStatusTrap, smtpGroup=smtpGroup, tDDSynchronizationAlarm=tDDSynchronizationAlarm, useVLANForManagementInterfaces=useVLANForManagementInterfaces, ptmp=ptmp, hTTPAccessEnabled=hTTPAccessEnabled, linkModeOptimizationMismatch=linkModeOptimizationMismatch, tDDSynchronizationMode=tDDSynchronizationMode, dfsTableIndex=dfsTableIndex, vLANManagementVID=vLANManagementVID, transmitFreqKHz=transmitFreqKHz, userTableNumber=userTableNumber, dfsImpulsiveInterferenceTrap=dfsImpulsiveInterferenceTrap, gatewayIPAddress=gatewayIPAddress, signalStrengthRatio=signalStrengthRatio, sntpGroup=sntpGroup, transmitPower=transmitPower, aAAControlGroup=aAAControlGroup, searchState=searchState, remoteMaximumTransmitPower=remoteMaximumTransmitPower, capacityLicenseMismatchTrap=capacityLicenseMismatchTrap, longitude=longitude, wirelessLinkDisabledWarning=wirelessLinkDisabledWarning, reset=reset, syslogControl=syslogControl, ptpCompliance=ptpCompliance, incompatibleMasterAndSlaveTrap=incompatibleMasterAndSlaveTrap, vectorError=vectorError, dfsGroup=dfsGroup, bandwidthVariant=bandwidthVariant, ptpTraps=ptpTraps, encryptionGroup=encryptionGroup, sNTPSync=sNTPSync, vLANPriorityTableNumber=vLANPriorityTableNumber, dataPortWirelessDownAlert=dataPortWirelessDownAlert, sNMPPortNumber=sNMPPortNumber, dataPortDisabledWarningTrap=dataPortDisabledWarningTrap, sNMPCommunityString=sNMPCommunityString, userName=userName, antennaGain=antennaGain, dfsTable=dfsTable, sNMPTrapPortNumber=sNMPTrapPortNumber, ethernet=ethernet, versionsGroup=versionsGroup, sNMPv3Enable=sNMPv3Enable, noWirelessChannelAvailableTrap=noWirelessChannelAvailableTrap, PYSNMP_MODULE_ID=cambium, telecomGroup=telecomGroup, constantPowerSpectralDensity=constantPowerSpectralDensity, transmitDataRate=transmitDataRate, userRole=userRole, phyStatus=phyStatus, ethernetGroup=ethernetGroup, alarmsGroup=alarmsGroup, systemClock=systemClock, receiveFreqMHz=receiveFreqMHz, secondarySoftwareVersion=secondarySoftwareVersion, vLANPriorityTable=vLANPriorityTable, accessMethod=accessMethod, remoteIPAddress=remoteIPAddress, enabledDiagnosticAlarms=enabledDiagnosticAlarms, telecomsLineCode=telecomsLineCode, wirelessLinkAvailability=wirelessLinkAvailability, dataPortStatus=dataPortStatus, userPassword=userPassword, sNMPTrapTableNumber=sNMPTrapTableNumber, encryptionAlgorithm=encryptionAlgorithm, capacityLicenseMismatch=capacityLicenseMismatch, aggregateDataRate=aggregateDataRate, licensedCapacity=licensedCapacity, tDDSynchronizationStatus=tDDSynchronizationStatus, userEnabled=userEnabled, userTable=userTable, dfsPeaks=dfsPeaks, subnetMask=subnetMask, syslogClientTrap=syslogClientTrap, masterSlaveMode=masterSlaveMode, sNTPServerIPAddress=sNTPServerIPAddress, supplementary=supplementary, sNMPEnabledTraps=sNMPEnabledTraps, managementGroup=managementGroup, tDDSynchronizationAlarmTrap=tDDSynchronizationAlarmTrap, hTTPSPortNumber=hTTPSPortNumber, receiveDataRate=receiveDataRate, siteName=siteName, bootVersion=bootVersion, management=management, dataPortConfigurationMismatch=dataPortConfigurationMismatch, wirelessLinkStatus=wirelessLinkStatus, telecomsLoopback=telecomsLoopback, userTableEntry=userTableEntry, dataPortAutoNegotiation=dataPortAutoNegotiation, telnetAccessEnabled=telnetAccessEnabled, unitOutOfCalibration=unitOutOfCalibration, sMTPDestinationEmailAddress=sMTPDestinationEmailAddress, latitude=latitude, altitude=altitude, sMTPSourceEmailAddress=sMTPSourceEmailAddress, snmpControl=snmpControl, tFTPSoftwareUpgradeStatusText=tFTPSoftwareUpgradeStatusText, tFTPSoftwareUpgradeStatus=tFTPSoftwareUpgradeStatus, syslogLocalWrappedTrap=syslogLocalWrappedTrap, unitOutOfCalibrationTrap=unitOutOfCalibrationTrap, phyControl=phyControl, snmpControlGroup=snmpControlGroup, softwareVersion=softwareVersion, syslogClient=syslogClient, maximumTransmitPower=maximumTransmitPower, eIRP=eIRP, productVariant=productVariant, aAAControl=aAAControl, cableLoss=cableLoss, incompatibleMasterAndSlave=incompatibleMasterAndSlave, installArmStateTrap=installArmStateTrap, channelBandwidth=channelBandwidth, dataPortAutoNegAdvertisement=dataPortAutoNegAdvertisement, tFTPSoftwareUpgradeFileName=tFTPSoftwareUpgradeFileName, userConfiguredMaxModulationMode=userConfiguredMaxModulationMode, productName=productName, encryption=encryption, cambium=cambium, iPAddress=iPAddress, telecomsCableLength=telecomsCableLength, configurationGroup=configurationGroup, dataPortAutoMdix=dataPortAutoMdix, telecomsChannelStatusTrap=telecomsChannelStatusTrap, linkLoss=linkLoss, alarms=alarms, tFTPSoftwareUpgradeStatusAdditionalText=tFTPSoftwareUpgradeStatusAdditionalText, frequencyVariant=frequencyVariant, pubStats=pubStats, dfsNineNinePointNinePercentiles=dfsNineNinePointNinePercentiles, hTTPPortNumber=hTTPPortNumber, hTTPSAccessEnabled=hTTPSAccessEnabled, sMTPEmailAlert=sMTPEmailAlert, smtp=smtp, sMTPServerPortNumber=sMTPServerPortNumber, tDDControl=tDDControl, wirelessLinkDisabledWarningTrap=wirelessLinkDisabledWarningTrap, sNMPTrapTableEntry=sNMPTrapTableEntry, vLANManagementPriority=vLANManagementPriority, receiveModulationMode=receiveModulationMode, dataPortConfigurationMismatchTrap=dataPortConfigurationMismatchTrap, syslogState=syslogState, groupID=groupID, channelChangeTrap=channelChangeTrap, range=range, sNTPLastSync=sNTPLastSync, hardwareVersion=hardwareVersion, installArmState=installArmState, licenceGroup=licenceGroup, ptpTrapPrefix=ptpTrapPrefix, supplementaryGroup=supplementaryGroup, telnetPortNumber=telnetPortNumber, vLANPriorityQueueMapping=vLANPriorityQueueMapping, dfsTableNumber=dfsTableNumber, resetGroup=resetGroup, dataPortDisabledWarning=dataPortDisabledWarning, dfsMeans=dfsMeans, linkName=linkName, receivePower=receivePower, telecom=telecom, dataPortSpeedAndDuplex=dataPortSpeedAndDuplex, licence=licence, noWirelessChannelAvailable=noWirelessChannelAvailable, installStatusTrap=installStatusTrap, syslogLocalNearlyFullTrap=syslogLocalNearlyFullTrap, sNMPTrapTable=sNMPTrapTable, sMTPServerIPAddress=sMTPServerIPAddress, incompatibleRegionCodes=incompatibleRegionCodes, tFTPServerIPAddress=tFTPServerIPAddress, sMTPEnabledMessages=sMTPEnabledMessages, byteErrorRatio=byteErrorRatio, transmitModulationMode=transmitModulationMode, sNMPTrapTableIndex=sNMPTrapTableIndex, telecomsInterface=telecomsInterface, sntp=sntp, phyStatusGroup=phyStatusGroup, linkSymmetry=linkSymmetry, transmitFreqMHz=transmitFreqMHz, transmitChannel=transmitChannel, sNTPServerPortNumber=sNTPServerPortNumber, targetMACAddress=targetMACAddress, ptp=ptp, vLANPriorityTableIndex=vLANPriorityTableIndex, tFTPServerPortNumber=tFTPServerPortNumber, installStatus=installStatus, tFTPStartSoftwareUpgrade=tFTPStartSoftwareUpgrade, sNMPTrapIPAddress=sNMPTrapIPAddress, syslogStateTrap=syslogStateTrap, telecomsChannelStatus=telecomsChannelStatus, systemReset=systemReset, regionCodeTrap=regionCodeTrap, configuration=configuration, ptpGroups=ptpGroups, daylightSaving=daylightSaving, linkModeOptimisation=linkModeOptimisation, phyControlGroup=phyControlGroup, telecomsLoopbackTrap=telecomsLoopbackTrap, sNMPSendAllTrapsAtStartup=sNMPSendAllTrapsAtStartup, timeZone=timeZone, receiveChannel=receiveChannel, sNTPSyncTrap=sNTPSyncTrap, receiveModulationModeDetail=receiveModulationModeDetail, syslogControlGroup=syslogControlGroup, notificationsGroup=notificationsGroup, receiveFreqKHz=receiveFreqKHz, sNMPTrapVersion=sNMPTrapVersion, tDDControlGroup=tDDControlGroup, versions=versions, userTableIndex=userTableIndex, regionCode=regionCode, vLANPriorityTableEntry=vLANPriorityTableEntry, dfsTableEntry=dfsTableEntry, incompatibleRegionCodesTrap=incompatibleRegionCodesTrap)
