#
# PySNMP MIB module IB-PLATFORMONE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/infoblox/IB-PLATFORMONE-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 12:24:33 2024
# On host fv-az1019-803 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
IbFloat, IbIpAddr, IbString, ibPlatformOne = mibBuilder.importSymbols("IB-SMI-MIB", "IbFloat", "IbIpAddr", "IbString", "ibPlatformOne")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, ObjectIdentity, MibIdentifier, Gauge32, enterprises, NotificationType, TimeTicks, Unsigned32, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "ObjectIdentity", "MibIdentifier", "Gauge32", "enterprises", "NotificationType", "TimeTicks", "Unsigned32", "IpAddress", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ibPlatformModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1))
ibPlatformModule.setRevisions(('2016-06-12 00:00', '2016-06-07 00:00', '2016-05-06 00:00', '2015-11-19 00:00', '2015-10-29 00:00', '2015-10-09 00:00', '2015-05-19 00:00', '2014-07-30 00:00', '2013-10-29 00:00', '2013-10-22 00:00', '2013-08-02 00:00', '2013-05-07 00:00', '2012-05-24 00:00', '2012-04-13 00:00', '2011-12-02 00:00', '2011-12-01 00:00', '2011-05-05 00:00', '2010-11-15 00:00', '2010-10-19 00:00', '2010-07-28 00:00', '2009-06-05 00:00', '2008-09-29 00:00', '2005-01-10 00:00', '2004-05-21 00:00',))
if mibBuilder.loadTexts: ibPlatformModule.setLastUpdated('201606120000Z')
if mibBuilder.loadTexts: ibPlatformModule.setOrganization('Infoblox')
ibClusterReplicationStatusTable = MibTable((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2), )
if mibBuilder.loadTexts: ibClusterReplicationStatusTable.setStatus('current')
ibClusterReplicationStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2, 1), ).setIndexNames((0, "IB-PLATFORMONE-MIB", "ibNodeIPAddress"))
if mibBuilder.loadTexts: ibClusterReplicationStatusEntry.setStatus('current')
ibNodeIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2, 1, 1), IbIpAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeIPAddress.setStatus('current')
ibNodeReplicationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2, 1, 2), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeReplicationStatus.setStatus('current')
ibNodeQueueFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeQueueFromMaster.setStatus('current')
ibNodeLastRepTimeFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2, 1, 4), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeLastRepTimeFromMaster.setStatus('current')
ibNodeQueueToMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeQueueToMaster.setStatus('current')
ibNodeLastRepTimeToMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2, 1, 6), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeLastRepTimeToMaster.setStatus('current')
ibNetworkMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3))
ibHardwareType = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 4), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibHardwareType.setStatus('current')
ibHardwareId = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 5), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibHardwareId.setStatus('current')
ibSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 6), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSerialNumber.setStatus('current')
ibNiosVersion = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 7), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNiosVersion.setStatus('current')
ibSystemMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8))
ibSystemMonitorCpu = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 1))
ibSystemMonitorMem = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 2))
ibSystemMonitorSwap = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 3))
ibSystemMonitorSnic = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4))
ibSystemMonitorCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSystemMonitorCpuUsage.setStatus('current')
ibSystemMonitorMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSystemMonitorMemUsage.setStatus('current')
ibSystemMonitorSwapUsage = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSystemMonitorSwapUsage.setStatus('current')
ibNetworkMonitorDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1))
ibNetworkMonitorDNSActive = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nonactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSActive.setStatus('current')
ibNetworkMonitorDNSNonAA = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2))
ibNetworkMonitorDNSNonAAT1 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 1))
ibNetworkMonitorDNSNonAAT5 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 2))
ibNetworkMonitorDNSNonAAT15 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 3))
ibNetworkMonitorDNSNonAAT60 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 4))
ibNetworkMonitorDNSNonAAT1440 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 5))
ibNetworkMonitorDNSAA = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3))
ibNetworkMonitorDNSAAT1 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 1))
ibNetworkMonitorDNSAAT5 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 2))
ibNetworkMonitorDNSAAT15 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 3))
ibNetworkMonitorDNSAAT60 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 4))
ibNetworkMonitorDNSAAT1440 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 5))
ibNetworkMonitorDNSNonAAT1AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT1AvgLatency.setStatus('current')
ibNetworkMonitorDNSNonAAT1Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT1Count.setStatus('current')
ibNetworkMonitorDNSNonAAT5AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT5AvgLatency.setStatus('current')
ibNetworkMonitorDNSNonAAT5Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT5Count.setStatus('current')
ibNetworkMonitorDNSNonAAT15AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT15AvgLatency.setStatus('current')
ibNetworkMonitorDNSNonAAT15Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT15Count.setStatus('current')
ibNetworkMonitorDNSNonAAT60AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT60AvgLatency.setStatus('current')
ibNetworkMonitorDNSNonAAT60Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT60Count.setStatus('current')
ibNetworkMonitorDNSNonAAT1440AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT1440AvgLatency.setStatus('current')
ibNetworkMonitorDNSNonAAT1440Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT1440Count.setStatus('current')
ibNetworkMonitorDNSAAT1AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT1AvgLatency.setStatus('current')
ibNetworkMonitorDNSAAT1Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT1Count.setStatus('current')
ibNetworkMonitorDNSAAT5AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT5AvgLatency.setStatus('current')
ibNetworkMonitorDNSAAT5Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT5Count.setStatus('current')
ibNetworkMonitorDNSAAT15AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT15AvgLatency.setStatus('current')
ibNetworkMonitorDNSAAT15Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT15Count.setStatus('current')
ibNetworkMonitorDNSAAT60AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT60AvgLatency.setStatus('current')
ibNetworkMonitorDNSAAT60Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT60Count.setStatus('current')
ibNetworkMonitorDNSAAT1440AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT1440AvgLatency.setStatus('current')
ibNetworkMonitorDNSAAT1440Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT1440Count.setStatus('current')
ibNetworkMonitorDNSSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4))
ibNetworkMonitorDNSSecurityInvalidPort = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 1))
ibNetworkMonitorDNSSecurityInvalidPort1 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort1.setStatus('current')
ibNetworkMonitorDNSSecurityInvalidPort5 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort5.setStatus('current')
ibNetworkMonitorDNSSecurityInvalidPort15 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort15.setStatus('current')
ibNetworkMonitorDNSSecurityInvalidPort60 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort60.setStatus('current')
ibNetworkMonitorDNSSecurityInvalidPort1440 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort1440.setStatus('current')
ibNetworkMonitorDNSSecurityInvalidPortCount = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPortCount.setStatus('current')
ibNetworkMonitorDNSSecurityInvalidTxid = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 2))
ibNetworkMonitorDNSSecurityInvalidTxid1 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid1.setStatus('current')
ibNetworkMonitorDNSSecurityInvalidTxid5 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid5.setStatus('current')
ibNetworkMonitorDNSSecurityInvalidTxid15 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid15.setStatus('current')
ibNetworkMonitorDNSSecurityInvalidTxid60 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid60.setStatus('current')
ibNetworkMonitorDNSSecurityInvalidTxid1440 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid1440.setStatus('current')
ibNetworkMonitorDNSSecurityInvalidTxidCount = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxidCount.setStatus('current')
ibNetworkMonitorDNSSecurityInvalidPortOnly = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPortOnly.setStatus('current')
ibNetworkMonitorDNSSecurityInvalidTxidOnly = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxidOnly.setStatus('current')
ibNetworkMonitorDNSSecurityInvalidTxidAndPort = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxidAndPort.setStatus('current')
class IbServiceStates(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("working", 1), ("warning", 2), ("failed", 3), ("inactive", 4), ("unknown", 5))

class IbServiceNames(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))
    namedValues = NamedValues(("dhcp", 1), ("dns", 2), ("ntp", 3), ("tftp", 4), ("http-file-dist", 5), ("ftp", 6), ("bloxtools-move", 7), ("bloxtools", 8), ("node-status", 9), ("disk-usage", 10), ("enet-lan", 11), ("enet-lan2", 12), ("enet-ha", 13), ("enet-mgmt", 14), ("lcd", 15), ("memory", 16), ("replication", 17), ("db-object", 18), ("raid-summary", 19), ("raid-disk1", 20), ("raid-disk2", 21), ("raid-disk3", 22), ("raid-disk4", 23), ("raid-disk5", 24), ("raid-disk6", 25), ("raid-disk7", 26), ("raid-disk8", 27), ("fan1", 28), ("fan2", 29), ("fan3", 30), ("fan4", 31), ("fan5", 32), ("fan6", 33), ("fan7", 34), ("fan8", 35), ("power-supply1", 36), ("power-supply2", 37), ("ntp-sync", 38), ("cpu1-temp", 39), ("cpu2-temp", 40), ("sys-temp", 41), ("raid-battery", 42), ("cpu-usage", 43), ("ospf", 44), ("bgp", 45), ("mgm-service", 46), ("subgrid-conn", 47), ("network-capacity", 48), ("reporting", 49), ("dns-cache-acceleration", 50), ("ospf6", 51), ("swap-usage", 52), ("discovery-consolidator", 53), ("discovery-collector", 54), ("discovery-capacity", 55), ("threat-protection", 56), ("cloud-api", 57), ("threat-analytics", 58), ("taxii", 59), ("bfd", 60), ("outbound", 61))

ibMemberServiceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 9), )
if mibBuilder.loadTexts: ibMemberServiceStatusTable.setStatus('current')
ibMemberServiceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 9, 1), ).setIndexNames((0, "IB-PLATFORMONE-MIB", "ibServiceName"))
if mibBuilder.loadTexts: ibMemberServiceStatusEntry.setStatus('current')
ibServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 9, 1, 1), IbServiceNames()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibServiceName.setStatus('current')
ibServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 9, 1, 2), IbServiceStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibServiceStatus.setStatus('current')
ibServiceDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 9, 1, 3), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibServiceDesc.setStatus('current')
ibMemberNodeServiceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 10), )
if mibBuilder.loadTexts: ibMemberNodeServiceStatusTable.setStatus('current')
ibMemberNodeServiceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 10, 1), ).setIndexNames((0, "IB-PLATFORMONE-MIB", "ibNodeServiceName"))
if mibBuilder.loadTexts: ibMemberNodeServiceStatusEntry.setStatus('current')
ibNodeServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 10, 1, 1), IbServiceNames()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeServiceName.setStatus('current')
ibNodeServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 10, 1, 2), IbServiceStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeServiceStatus.setStatus('current')
ibNodeServiceDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 10, 1, 3), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeServiceDesc.setStatus('current')
ibMemberPasiveNodeServiceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 11), )
if mibBuilder.loadTexts: ibMemberPasiveNodeServiceStatusTable.setStatus('current')
ibMemberPasiveNodeServiceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 11, 1), ).setIndexNames((0, "IB-PLATFORMONE-MIB", "ibPasiveNodeServiceName"))
if mibBuilder.loadTexts: ibMemberPasiveNodeServiceStatusEntry.setStatus('current')
ibPasiveNodeServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 11, 1, 1), IbServiceNames()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibPasiveNodeServiceName.setStatus('current')
ibPasiveNodeServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 11, 1, 2), IbServiceStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibPasiveNodeServiceStatus.setStatus('current')
ibPasiveNodeServiceDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 11, 1, 3), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibPasiveNodeServiceDesc.setStatus('current')
ibGridStatus = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 12), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibGridStatus.setStatus('current')
ibHaStatus = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 13), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibHaStatus.setStatus('current')
ibGridMasterCandStatus = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 14), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibGridMasterCandStatus.setStatus('current')
ibGridMasterVIP = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 15), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibGridMasterVIP.setStatus('current')
ibGridReplicationState = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 16), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibGridReplicationState.setStatus('current')
ibCPU1Temperature = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 17), IbFloat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibCPU1Temperature.setStatus('current')
ibCPU2Temperature = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 18), IbFloat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibCPU2Temperature.setStatus('current')
class IbSnicNames(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("lan1", 1), ("lan2", 2), ("ha", 3))

ibSystemMonitorSnicStatsTable1 = MibTable((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 1), )
if mibBuilder.loadTexts: ibSystemMonitorSnicStatsTable1.setStatus('current')
ibSystemMonitorSnicStatsEntry1 = MibTableRow((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 1, 1), ).setIndexNames((0, "IB-PLATFORMONE-MIB", "ibSnicName1"))
if mibBuilder.loadTexts: ibSystemMonitorSnicStatsEntry1.setStatus('current')
ibSnicName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 1, 1, 1), IbSnicNames()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicName1.setStatus('current')
ibSnicRxBits1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicRxBits1.setStatus('current')
ibSnicRxPackets1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicRxPackets1.setStatus('current')
ibSnicTxBits1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicTxBits1.setStatus('current')
ibSnicTxPackets1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicTxPackets1.setStatus('current')
ibSnicDropBits1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicDropBits1.setStatus('current')
ibSnicDropPackets1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicDropPackets1.setStatus('current')
ibSystemMonitorSnicStatsTable5 = MibTable((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 2), )
if mibBuilder.loadTexts: ibSystemMonitorSnicStatsTable5.setStatus('current')
ibSystemMonitorSnicStatsEntry5 = MibTableRow((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 2, 1), ).setIndexNames((0, "IB-PLATFORMONE-MIB", "ibSnicName5"))
if mibBuilder.loadTexts: ibSystemMonitorSnicStatsEntry5.setStatus('current')
ibSnicName5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 2, 1, 1), IbSnicNames()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicName5.setStatus('current')
ibSnicRxBits5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicRxBits5.setStatus('current')
ibSnicRxPackets5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicRxPackets5.setStatus('current')
ibSnicTxBits5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicTxBits5.setStatus('current')
ibSnicTxPackets5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicTxPackets5.setStatus('current')
ibSnicDropBits5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicDropBits5.setStatus('current')
ibSnicDropPackets5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicDropPackets5.setStatus('current')
mibBuilder.exportSymbols("IB-PLATFORMONE-MIB", ibPlatformModule=ibPlatformModule, ibNetworkMonitorDNSSecurityInvalidPort1440=ibNetworkMonitorDNSSecurityInvalidPort1440, ibPasiveNodeServiceStatus=ibPasiveNodeServiceStatus, ibNetworkMonitorDNSAAT15AvgLatency=ibNetworkMonitorDNSAAT15AvgLatency, ibSystemMonitorSnicStatsEntry1=ibSystemMonitorSnicStatsEntry1, ibSystemMonitorMemUsage=ibSystemMonitorMemUsage, ibSystemMonitorSwap=ibSystemMonitorSwap, ibCPU1Temperature=ibCPU1Temperature, ibSnicRxPackets5=ibSnicRxPackets5, ibSnicDropPackets5=ibSnicDropPackets5, ibSystemMonitorCpu=ibSystemMonitorCpu, ibGridMasterVIP=ibGridMasterVIP, ibNetworkMonitorDNSNonAAT15=ibNetworkMonitorDNSNonAAT15, ibSystemMonitor=ibSystemMonitor, ibNetworkMonitorDNSAAT60Count=ibNetworkMonitorDNSAAT60Count, ibSnicRxBits5=ibSnicRxBits5, ibSnicTxBits5=ibSnicTxBits5, ibPasiveNodeServiceDesc=ibPasiveNodeServiceDesc, ibNetworkMonitorDNSAAT15=ibNetworkMonitorDNSAAT15, ibNodeQueueToMaster=ibNodeQueueToMaster, ibNetworkMonitorDNSAAT1440AvgLatency=ibNetworkMonitorDNSAAT1440AvgLatency, ibNetworkMonitorDNSSecurity=ibNetworkMonitorDNSSecurity, ibSystemMonitorSnicStatsTable1=ibSystemMonitorSnicStatsTable1, ibSystemMonitorSnic=ibSystemMonitorSnic, ibNetworkMonitorDNSSecurityInvalidPort=ibNetworkMonitorDNSSecurityInvalidPort, ibNodeQueueFromMaster=ibNodeQueueFromMaster, ibNetworkMonitorDNSSecurityInvalidTxid=ibNetworkMonitorDNSSecurityInvalidTxid, ibNetworkMonitorDNSNonAAT5=ibNetworkMonitorDNSNonAAT5, ibNetworkMonitor=ibNetworkMonitor, ibNetworkMonitorDNSAAT5=ibNetworkMonitorDNSAAT5, ibNetworkMonitorDNSNonAAT1AvgLatency=ibNetworkMonitorDNSNonAAT1AvgLatency, ibNetworkMonitorDNSAA=ibNetworkMonitorDNSAA, ibNetworkMonitorDNSSecurityInvalidTxid1=ibNetworkMonitorDNSSecurityInvalidTxid1, ibClusterReplicationStatusTable=ibClusterReplicationStatusTable, ibNetworkMonitorDNSSecurityInvalidTxidOnly=ibNetworkMonitorDNSSecurityInvalidTxidOnly, ibSerialNumber=ibSerialNumber, IbServiceNames=IbServiceNames, ibNetworkMonitorDNSNonAAT15AvgLatency=ibNetworkMonitorDNSNonAAT15AvgLatency, ibNetworkMonitorDNSAAT5AvgLatency=ibNetworkMonitorDNSAAT5AvgLatency, ibSnicTxBits1=ibSnicTxBits1, ibNetworkMonitorDNSNonAAT15Count=ibNetworkMonitorDNSNonAAT15Count, ibNetworkMonitorDNSSecurityInvalidPort5=ibNetworkMonitorDNSSecurityInvalidPort5, ibSnicDropBits1=ibSnicDropBits1, ibSnicName5=ibSnicName5, ibHardwareId=ibHardwareId, ibNetworkMonitorDNSAAT5Count=ibNetworkMonitorDNSAAT5Count, ibMemberServiceStatusEntry=ibMemberServiceStatusEntry, ibSnicTxPackets1=ibSnicTxPackets1, ibNetworkMonitorDNSAAT60AvgLatency=ibNetworkMonitorDNSAAT60AvgLatency, ibNetworkMonitorDNSAAT1=ibNetworkMonitorDNSAAT1, ibNetworkMonitorDNSSecurityInvalidPortCount=ibNetworkMonitorDNSSecurityInvalidPortCount, ibMemberServiceStatusTable=ibMemberServiceStatusTable, ibNetworkMonitorDNSNonAAT5Count=ibNetworkMonitorDNSNonAAT5Count, ibNetworkMonitorDNSAAT1440Count=ibNetworkMonitorDNSAAT1440Count, ibNodeIPAddress=ibNodeIPAddress, ibNetworkMonitorDNSNonAAT1Count=ibNetworkMonitorDNSNonAAT1Count, ibSnicDropPackets1=ibSnicDropPackets1, ibNetworkMonitorDNSNonAAT1440AvgLatency=ibNetworkMonitorDNSNonAAT1440AvgLatency, ibNetworkMonitorDNSAAT1AvgLatency=ibNetworkMonitorDNSAAT1AvgLatency, ibHaStatus=ibHaStatus, ibNetworkMonitorDNSNonAAT1=ibNetworkMonitorDNSNonAAT1, ibNetworkMonitorDNSNonAAT60=ibNetworkMonitorDNSNonAAT60, ibNetworkMonitorDNSAAT1Count=ibNetworkMonitorDNSAAT1Count, ibGridReplicationState=ibGridReplicationState, ibNetworkMonitorDNSSecurityInvalidTxid1440=ibNetworkMonitorDNSSecurityInvalidTxid1440, ibServiceName=ibServiceName, ibNetworkMonitorDNSAAT1440=ibNetworkMonitorDNSAAT1440, ibSnicRxBits1=ibSnicRxBits1, ibNetworkMonitorDNSSecurityInvalidPort15=ibNetworkMonitorDNSSecurityInvalidPort15, ibNetworkMonitorDNS=ibNetworkMonitorDNS, ibNetworkMonitorDNSSecurityInvalidPortOnly=ibNetworkMonitorDNSSecurityInvalidPortOnly, ibNodeLastRepTimeFromMaster=ibNodeLastRepTimeFromMaster, ibSystemMonitorSwapUsage=ibSystemMonitorSwapUsage, ibSystemMonitorSnicStatsTable5=ibSystemMonitorSnicStatsTable5, ibNetworkMonitorDNSSecurityInvalidTxidAndPort=ibNetworkMonitorDNSSecurityInvalidTxidAndPort, ibNetworkMonitorDNSNonAAT60Count=ibNetworkMonitorDNSNonAAT60Count, ibClusterReplicationStatusEntry=ibClusterReplicationStatusEntry, ibNodeServiceStatus=ibNodeServiceStatus, IbServiceStates=IbServiceStates, ibMemberPasiveNodeServiceStatusEntry=ibMemberPasiveNodeServiceStatusEntry, ibNetworkMonitorDNSSecurityInvalidTxid15=ibNetworkMonitorDNSSecurityInvalidTxid15, ibNetworkMonitorDNSSecurityInvalidPort1=ibNetworkMonitorDNSSecurityInvalidPort1, ibNetworkMonitorDNSNonAAT1440Count=ibNetworkMonitorDNSNonAAT1440Count, IbSnicNames=IbSnicNames, ibMemberNodeServiceStatusTable=ibMemberNodeServiceStatusTable, ibSnicRxPackets1=ibSnicRxPackets1, ibNetworkMonitorDNSSecurityInvalidPort60=ibNetworkMonitorDNSSecurityInvalidPort60, PYSNMP_MODULE_ID=ibPlatformModule, ibNetworkMonitorDNSAAT15Count=ibNetworkMonitorDNSAAT15Count, ibSystemMonitorMem=ibSystemMonitorMem, ibNiosVersion=ibNiosVersion, ibMemberPasiveNodeServiceStatusTable=ibMemberPasiveNodeServiceStatusTable, ibNetworkMonitorDNSAAT60=ibNetworkMonitorDNSAAT60, ibNetworkMonitorDNSSecurityInvalidTxid5=ibNetworkMonitorDNSSecurityInvalidTxid5, ibSystemMonitorSnicStatsEntry5=ibSystemMonitorSnicStatsEntry5, ibSystemMonitorCpuUsage=ibSystemMonitorCpuUsage, ibSnicTxPackets5=ibSnicTxPackets5, ibNodeLastRepTimeToMaster=ibNodeLastRepTimeToMaster, ibPasiveNodeServiceName=ibPasiveNodeServiceName, ibSnicDropBits5=ibSnicDropBits5, ibCPU2Temperature=ibCPU2Temperature, ibNetworkMonitorDNSNonAAT5AvgLatency=ibNetworkMonitorDNSNonAAT5AvgLatency, ibNetworkMonitorDNSSecurityInvalidTxid60=ibNetworkMonitorDNSSecurityInvalidTxid60, ibNodeServiceName=ibNodeServiceName, ibServiceStatus=ibServiceStatus, ibHardwareType=ibHardwareType, ibServiceDesc=ibServiceDesc, ibMemberNodeServiceStatusEntry=ibMemberNodeServiceStatusEntry, ibNetworkMonitorDNSActive=ibNetworkMonitorDNSActive, ibNetworkMonitorDNSNonAAT1440=ibNetworkMonitorDNSNonAAT1440, ibGridStatus=ibGridStatus, ibNetworkMonitorDNSNonAA=ibNetworkMonitorDNSNonAA, ibNetworkMonitorDNSSecurityInvalidTxidCount=ibNetworkMonitorDNSSecurityInvalidTxidCount, ibNetworkMonitorDNSNonAAT60AvgLatency=ibNetworkMonitorDNSNonAAT60AvgLatency, ibNodeReplicationStatus=ibNodeReplicationStatus, ibSnicName1=ibSnicName1, ibNodeServiceDesc=ibNodeServiceDesc, ibGridMasterCandStatus=ibGridMasterCandStatus)
