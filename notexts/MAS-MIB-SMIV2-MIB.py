#
# PySNMP MIB module MAS-MIB-SMIV2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/citrix/MAS-MIB-SMIV2-MIB
# Produced by pysmi-1.1.12 at Wed May 29 10:52:30 2024
# On host fv-az1206-254 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Unsigned32, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, Gauge32, iso, Integer32, ObjectIdentity, enterprises, Counter32, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "Gauge32", "iso", "Integer32", "ObjectIdentity", "enterprises", "Counter32", "TimeTicks", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
netScaler = ModuleIdentity((1, 3, 6, 1, 4, 1, 5951))
if mibBuilder.loadTexts: netScaler.setLastUpdated('201312050000Z')
if mibBuilder.loadTexts: netScaler.setOrganization('Citrix Systems, Inc.')
masRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 7))
masEventGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 7, 1))
systemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 7, 2))
systemPlatform = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPlatform.setStatus('current')
systemProduct = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemProduct.setStatus('current')
systemBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBuildNumber.setStatus('current')
systemIPAddressType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemIPAddressType.setStatus('current')
systemIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemIPAddress.setStatus('current')
systemNetmaskType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNetmaskType.setStatus('current')
systemNetmask = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNetmask.setStatus('current')
systemGatewayType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemGatewayType.setStatus('current')
systemGateway = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemGateway.setStatus('current')
systemDnsType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDnsType.setStatus('current')
systemDns = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDns.setStatus('current')
systemSysId = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSysId.setStatus('current')
systemSerial = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSerial.setStatus('current')
systemCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCurrentTime.setStatus('current')
systemUptime = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUptime.setStatus('current')
systemBiosVersion = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBiosVersion.setStatus('current')
systemCustomID = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCustomID.setStatus('current')
systemCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCpuUsage.setStatus('current')
systemMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMemoryUsage.setStatus('current')
systemDiskUsage = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDiskUsage.setStatus('current')
deviceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 7, 3))
netscalerTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2), )
if mibBuilder.loadTexts: netscalerTable.setStatus('current')
netscalerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1), ).setIndexNames((0, "MAS-MIB-SMIV2-MIB", "nsIpAddressType"), (0, "MAS-MIB-SMIV2-MIB", "nsIpAddress"), (0, "MAS-MIB-SMIV2-MIB", "nsHostIPAddressType"), (0, "MAS-MIB-SMIV2-MIB", "nsHostIPAddress"))
if mibBuilder.loadTexts: netscalerEntry.setStatus('current')
nsIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIpAddressType.setStatus('current')
nsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIpAddress.setStatus('current')
nsHostIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHostIPAddressType.setStatus('current')
nsHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHostIPAddress.setStatus('current')
nsProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsProfileName.setStatus('current')
nsName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsName.setStatus('current')
nsNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNetmaskType.setStatus('current')
nsNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNetmask.setStatus('current')
nsGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsGatewayType.setStatus('current')
nsGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsGateway.setStatus('current')
nsHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHostname.setStatus('current')
nsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsDescription.setStatus('current')
nsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVersion.setStatus('current')
nsUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsUuid.setStatus('current')
nsInstanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsInstanceState.setStatus('current')
nsVirtualFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVirtualFunctions.setStatus('current')
nsSslVirtualFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSslVirtualFunctions.setStatus('current')
nsVmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVmState.setStatus('current')
nsNumberOfCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNumberOfCPU.setStatus('current')
nsVmMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVmMemoryTotal.setStatus('current')
nsUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsUptime.setStatus('current')
nsNumberOfSSLCores = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNumberOfSSLCores.setStatus('current')
nsCpuCoreMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCpuCoreMgmt.setStatus('current')
nsCpuCorePE = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCpuCorePE.setStatus('current')
nsVmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVmDescription.setStatus('current')
nsThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsThroughput.setStatus('current')
nsNumberOfCores = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNumberOfCores.setStatus('current')
nsNsCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsCPUUsage.setStatus('current')
nsNsMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsMemoryUsage.setStatus('current')
nsNsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsTx.setStatus('current')
nsNsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsRx.setStatus('current')
nsHttpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHttpReq.setStatus('current')
nsUpsince = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsUpsince.setStatus('current')
nsLicense = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsLicense.setStatus('current')
nsHaMasterState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHaMasterState.setStatus('current')
nsHaIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 42), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHaIPAddressType.setStatus('current')
nsHaIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 43), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHaIPAddress.setStatus('current')
nsNodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNodeState.setStatus('current')
nsHaSync = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 45), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHaSync.setStatus('current')
nsPps = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 46), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPps.setStatus('current')
nsNumberOfSslCoresUp = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNumberOfSslCoresUp.setStatus('current')
nsIfOby1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 48), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfOby1.setStatus('current')
nsIf0by2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 49), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIf0by2.setStatus('current')
nsNsVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsVLANId.setStatus('current')
nsNsVLANTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 51), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsVLANTagged.setStatus('current')
nsVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVlanType.setStatus('current')
cloudBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3), )
if mibBuilder.loadTexts: cloudBridgeTable.setStatus('current')
cloudBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1), ).setIndexNames((0, "MAS-MIB-SMIV2-MIB", "cbIpAddressType"), (0, "MAS-MIB-SMIV2-MIB", "cbIpAddress"), (0, "MAS-MIB-SMIV2-MIB", "cbHostIPAddressType"), (0, "MAS-MIB-SMIV2-MIB", "cbHostIPAddress"))
if mibBuilder.loadTexts: cloudBridgeEntry.setStatus('current')
cbIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbIpAddressType.setStatus('current')
cbIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbIpAddress.setStatus('current')
cbHostIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbHostIPAddressType.setStatus('current')
cbHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbHostIPAddress.setStatus('current')
cbProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbProfileName.setStatus('current')
cbName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbName.setStatus('current')
cbNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbNetmaskType.setStatus('current')
cbNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbNetmask.setStatus('current')
cbGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbGatewayType.setStatus('current')
cbGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbGateway.setStatus('current')
cbHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbHostname.setStatus('current')
cbDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbDescription.setStatus('current')
cbVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVersion.setStatus('current')
cbInstanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbInstanceState.setStatus('current')
cbUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbUuid.setStatus('current')
cbVirtualFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVirtualFunctions.setStatus('current')
cbVmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVmState.setStatus('current')
cbNumberOfCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbNumberOfCPU.setStatus('current')
cbVmCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVmCPUUsage.setStatus('current')
cbVmMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVmMemoryTotal.setStatus('current')
cbVmMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVmMemoryFree.setStatus('current')
cbVmMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVmMemoryUsage.setStatus('current')
cbUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbUptime.setStatus('current')
cbDiskAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbDiskAllocation.setStatus('current')
cbAPAIPADDRESSType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 47), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPAIPADDRESSType.setStatus('current')
cbAPAIPADDRESS = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 48), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPAIPADDRESS.setStatus('current')
cbAPANetMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 49), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPANetMaskType.setStatus('current')
cbAPANetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 50), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPANetMask.setStatus('current')
cbAPAGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 51), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPAGatewayType.setStatus('current')
cbAPAGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 52), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPAGateway.setStatus('current')
cbPluginIPADDRESSType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 53), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbPluginIPADDRESSType.setStatus('current')
cbPluginIPADDRESS = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 54), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbPluginIPADDRESS.setStatus('current')
cbMgmtIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 57), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbMgmtIPAddressType.setStatus('current')
cbMgmtIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 58), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbMgmtIPAddress.setStatus('current')
cloudBridgeAcceleratorTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4), )
if mibBuilder.loadTexts: cloudBridgeAcceleratorTable.setStatus('current')
cloudBridgeAcceleratorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1), ).setIndexNames((0, "MAS-MIB-SMIV2-MIB", "cbAcceleratorIpAddressType"), (0, "MAS-MIB-SMIV2-MIB", "cbAcceleratorIpAddress"), (0, "MAS-MIB-SMIV2-MIB", "cbAcceleratorHostIPAddressType"), (0, "MAS-MIB-SMIV2-MIB", "cbAcceleratorHostIPAddress"))
if mibBuilder.loadTexts: cloudBridgeAcceleratorEntry.setStatus('current')
cbAcceleratorIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorIpAddressType.setStatus('current')
cbAcceleratorIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorIpAddress.setStatus('current')
cbAcceleratorHostIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorHostIPAddressType.setStatus('current')
cbAcceleratorHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorHostIPAddress.setStatus('current')
cbAcceleratorProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorProfileName.setStatus('current')
cbAcceleratorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorName.setStatus('current')
cbAcceleratorNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorNetmaskType.setStatus('current')
cbAcceleratorNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorNetmask.setStatus('current')
cbAcceleratorGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorGatewayType.setStatus('current')
cbAcceleratorGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorGateway.setStatus('current')
cbAcceleratorHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorHostname.setStatus('current')
cbAcceleratorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorDescription.setStatus('current')
cbAcceleratorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVersion.setStatus('current')
cbAcceleratorInstanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorInstanceState.setStatus('current')
cbAcceleratorUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorUuid.setStatus('current')
cbAcceleratorVmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVmState.setStatus('current')
cbAcceleratorNumberOfCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorNumberOfCPU.setStatus('current')
cbAcceleratorVmCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVmCPUUsage.setStatus('current')
cbAcceleratorVmMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVmMemoryTotal.setStatus('current')
cbAcceleratorVmMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVmMemoryFree.setStatus('current')
cbAcceleratorVmMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVmMemoryUsage.setStatus('current')
cbAcceleratorUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorUptime.setStatus('current')
cbAcceleratorIpList = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorIpList.setStatus('current')
cbAcceleratorMgmtIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 38), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorMgmtIPAddressType.setStatus('current')
cbAcceleratorMgmtIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 39), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorMgmtIPAddress.setStatus('current')
eventVarBindOids = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 7, 1, 1))
source = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 1, 1, 1), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: source.setStatus('current')
entityName = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 1, 1, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: entityName.setStatus('current')
entityType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 1, 1, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: entityType.setStatus('current')
eventMessage = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 1, 1, 4), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventMessage.setStatus('current')
thresholdValue = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 1, 1, 5), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: thresholdValue.setStatus('current')
currentValue = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 1, 1, 6), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: currentValue.setStatus('current')
severity = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 1, 1, 7), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: severity.setStatus('current')
mpsEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2))
cpuUsageHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 1)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "currentValue"), ("MAS-MIB-SMIV2-MIB", "thresholdValue"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: cpuUsageHigh.setStatus('current')
cpuUsageNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 2)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "currentValue"), ("MAS-MIB-SMIV2-MIB", "thresholdValue"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: cpuUsageNormal.setStatus('current')
memoryUsageHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 3)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "currentValue"), ("MAS-MIB-SMIV2-MIB", "thresholdValue"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: memoryUsageHigh.setStatus('current')
memoryUsageNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 4)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "currentValue"), ("MAS-MIB-SMIV2-MIB", "thresholdValue"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: memoryUsageNormal.setStatus('current')
diskUtilizationHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 35)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "currentValue"), ("MAS-MIB-SMIV2-MIB", "thresholdValue"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: diskUtilizationHigh.setStatus('current')
diskUtilizationNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 36)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "currentValue"), ("MAS-MIB-SMIV2-MIB", "thresholdValue"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: diskUtilizationNormal.setStatus('current')
subSystemDown = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 43)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: subSystemDown.setStatus('current')
subSystemUp = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 44)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: subSystemUp.setStatus('current')
subSystemFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 45)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: subSystemFailed.setStatus('current')
mpsDown = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 46)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: mpsDown.setStatus('current')
mpsUp = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 47)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: mpsUp.setStatus('current')
passwordRecoveryFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 48)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: passwordRecoveryFailed.setStatus('current')
passwordRecoverySuccess = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 49)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: passwordRecoverySuccess.setStatus('current')
deviceStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 54)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: deviceStateChanged.setStatus('current')
backupFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 58)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: backupFailed.setStatus('current')
loginFailure = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 71)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: loginFailure.setStatus('current')
inventoryFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 72)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: inventoryFailed.setStatus('current')
trapConfigFailure = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 78)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: trapConfigFailure.setStatus('current')
pooledLicenseGrace = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 80)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: pooledLicenseGrace.setStatus('current')
pooledLicenseGraceNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 81)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: pooledLicenseGraceNormal.setStatus('current')
licensePoolThresholdWarning = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 84)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: licensePoolThresholdWarning.setStatus('current')
licensePoolThresholdNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 85)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: licensePoolThresholdNormal.setStatus('current')
vipLicenseLimitWarning = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 86)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: vipLicenseLimitWarning.setStatus('current')
vipLicenseLimitNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 87)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: vipLicenseLimitNormal.setStatus('current')
remoteBackupFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 88)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: remoteBackupFailed.setStatus('current')
remoteBackupResumed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 89)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: remoteBackupResumed.setStatus('current')
perfCounterThresholdHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 90)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: perfCounterThresholdHigh.setStatus('current')
perfCounterThresholdNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 91)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: perfCounterThresholdNormal.setStatus('current')
devicebackupFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 92)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: devicebackupFailed.setStatus('current')
remoteDeviceBackupFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 93)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: remoteDeviceBackupFailed.setStatus('current')
dataStorageExceeded = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 94)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: dataStorageExceeded.setStatus('current')
dataStorageNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 95)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: dataStorageNormal.setStatus('current')
sslCertThresholdBreached = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 96)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: sslCertThresholdBreached.setStatus('current')
sslCertThresholdNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 97)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: sslCertThresholdNormal.setStatus('current')
haFailover = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 98)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: haFailover.setStatus('current')
haNoHeartBeats = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 99)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: haNoHeartBeats.setStatus('current')
haDatabaseOutOfSync = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 100)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: haDatabaseOutOfSync.setStatus('current')
inventoryUp = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 101)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: inventoryUp.setStatus('current')
deviceBooted = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 104)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: deviceBooted.setStatus('current')
deviceRebooted = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 105)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: deviceRebooted.setStatus('current')
autoScaleGroupAdded = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 106)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: autoScaleGroupAdded.setStatus('current')
autoScaleGroupModified = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 107)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: autoScaleGroupModified.setStatus('current')
autoScaleGroupDeleted = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 108)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: autoScaleGroupDeleted.setStatus('current')
clusterProvisionStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 109)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: clusterProvisionStatus.setStatus('current')
nodeProvisionStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 110)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: nodeProvisionStatus.setStatus('current')
coolDownPeriodStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 111)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: coolDownPeriodStatus.setStatus('current')
clusterDeprovisionStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 112)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: clusterDeprovisionStatus.setStatus('current')
nodeDeprovisionStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 113)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: nodeDeprovisionStatus.setStatus('current')
drainConnPeriodStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 114)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: drainConnPeriodStatus.setStatus('current')
deployAppStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 115)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: deployAppStatus.setStatus('current')
modifyAppStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 116)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: modifyAppStatus.setStatus('current')
deleteAppStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 117)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: deleteAppStatus.setStatus('current')
ipLimitReached = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 118)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: ipLimitReached.setStatus('current')
scaleOutStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 119)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: scaleOutStatus.setStatus('current')
scaleInStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 120)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: scaleInStatus.setStatus('current')
addIPSetStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 121)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: addIPSetStatus.setStatus('current')
deleteIPSetStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 122)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: deleteIPSetStatus.setStatus('current')
addZone = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 123)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: addZone.setStatus('current')
deleteZone = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 124)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: deleteZone.setStatus('current')
addRecord = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 125)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: addRecord.setStatus('current')
deleteRecord = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 126)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: deleteRecord.setStatus('current')
addRRData = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 127)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: addRRData.setStatus('current')
deleteRRData = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 128)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: deleteRRData.setStatus('current')
instancePolicyReconfigurationFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 131)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: instancePolicyReconfigurationFailed.setStatus('current')
instancePolicyReconfigurationSucceeded = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 132)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: instancePolicyReconfigurationSucceeded.setStatus('current')
autoscalegroupUpgrade = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 133)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: autoscalegroupUpgrade.setStatus('current')
mibBuilder.exportSymbols("MAS-MIB-SMIV2-MIB", cbDescription=cbDescription, thresholdValue=thresholdValue, nsVmMemoryTotal=nsVmMemoryTotal, cbVersion=cbVersion, sslCertThresholdBreached=sslCertThresholdBreached, systemBuildNumber=systemBuildNumber, cloudBridgeAcceleratorEntry=cloudBridgeAcceleratorEntry, systemDnsType=systemDnsType, cbAcceleratorVmMemoryTotal=cbAcceleratorVmMemoryTotal, deleteAppStatus=deleteAppStatus, sslCertThresholdNormal=sslCertThresholdNormal, cloudBridgeTable=cloudBridgeTable, cbAcceleratorHostIPAddress=cbAcceleratorHostIPAddress, systemSysId=systemSysId, systemSerial=systemSerial, cbAPAGateway=cbAPAGateway, nsThroughput=nsThroughput, nsHaIPAddress=nsHaIPAddress, systemGatewayType=systemGatewayType, nsNsVLANTagged=nsNsVLANTagged, nsHttpReq=nsHttpReq, deleteRRData=deleteRRData, systemNetmask=systemNetmask, cbMgmtIPAddressType=cbMgmtIPAddressType, autoscalegroupUpgrade=autoscalegroupUpgrade, cbHostname=cbHostname, deviceBooted=deviceBooted, nsIf0by2=nsIf0by2, nsDescription=nsDescription, haFailover=haFailover, nsHaMasterState=nsHaMasterState, PYSNMP_MODULE_ID=netScaler, nsNsVLANId=nsNsVLANId, cbAcceleratorUuid=cbAcceleratorUuid, deleteZone=deleteZone, systemProduct=systemProduct, cbGateway=cbGateway, nsNumberOfCPU=nsNumberOfCPU, perfCounterThresholdHigh=perfCounterThresholdHigh, cbIpAddress=cbIpAddress, backupFailed=backupFailed, cbIpAddressType=cbIpAddressType, eventVarBindOids=eventVarBindOids, cbAcceleratorVersion=cbAcceleratorVersion, cbAcceleratorDescription=cbAcceleratorDescription, nsName=nsName, diskUtilizationNormal=diskUtilizationNormal, deviceStateChanged=deviceStateChanged, vipLicenseLimitNormal=vipLicenseLimitNormal, nsProfileName=nsProfileName, cbName=cbName, deployAppStatus=deployAppStatus, nsVersion=nsVersion, devicebackupFailed=devicebackupFailed, entityType=entityType, systemMemoryUsage=systemMemoryUsage, nsNsCPUUsage=nsNsCPUUsage, cbAcceleratorVmCPUUsage=cbAcceleratorVmCPUUsage, nsSslVirtualFunctions=nsSslVirtualFunctions, licensePoolThresholdNormal=licensePoolThresholdNormal, cbAcceleratorNumberOfCPU=cbAcceleratorNumberOfCPU, haNoHeartBeats=haNoHeartBeats, deviceRebooted=deviceRebooted, cbInstanceState=cbInstanceState, nsVmState=nsVmState, dataStorageNormal=dataStorageNormal, nodeProvisionStatus=nodeProvisionStatus, cloudBridgeEntry=cloudBridgeEntry, nsIfOby1=nsIfOby1, nsCpuCoreMgmt=nsCpuCoreMgmt, remoteDeviceBackupFailed=remoteDeviceBackupFailed, cbAcceleratorHostname=cbAcceleratorHostname, remoteBackupResumed=remoteBackupResumed, nsNumberOfCores=nsNumberOfCores, nsIpAddress=nsIpAddress, nsIpAddressType=nsIpAddressType, nsCpuCorePE=nsCpuCorePE, cbHostIPAddressType=cbHostIPAddressType, systemIPAddress=systemIPAddress, nsVirtualFunctions=nsVirtualFunctions, masEventGroup=masEventGroup, systemGateway=systemGateway, cbAcceleratorIpAddress=cbAcceleratorIpAddress, subSystemUp=subSystemUp, nsLicense=nsLicense, cbAcceleratorGateway=cbAcceleratorGateway, cpuUsageNormal=cpuUsageNormal, autoScaleGroupDeleted=autoScaleGroupDeleted, nsNsRx=nsNsRx, pooledLicenseGrace=pooledLicenseGrace, cbPluginIPADDRESS=cbPluginIPADDRESS, source=source, cbProfileName=cbProfileName, deleteIPSetStatus=deleteIPSetStatus, pooledLicenseGraceNormal=pooledLicenseGraceNormal, remoteBackupFailed=remoteBackupFailed, cbAPAIPADDRESS=cbAPAIPADDRESS, clusterDeprovisionStatus=clusterDeprovisionStatus, subSystemDown=subSystemDown, nsHaIPAddressType=nsHaIPAddressType, cbUptime=cbUptime, cbAcceleratorVmState=cbAcceleratorVmState, licensePoolThresholdWarning=licensePoolThresholdWarning, autoScaleGroupAdded=autoScaleGroupAdded, currentValue=currentValue, dataStorageExceeded=dataStorageExceeded, cbGatewayType=cbGatewayType, cbNumberOfCPU=cbNumberOfCPU, addIPSetStatus=addIPSetStatus, nsGatewayType=nsGatewayType, cbAPANetMask=cbAPANetMask, addRRData=addRRData, netscalerTable=netscalerTable, cbAcceleratorProfileName=cbAcceleratorProfileName, nsVlanType=nsVlanType, cbAcceleratorNetmaskType=cbAcceleratorNetmaskType, loginFailure=loginFailure, cbVmMemoryFree=cbVmMemoryFree, cbVmCPUUsage=cbVmCPUUsage, systemUptime=systemUptime, nsNetmaskType=nsNetmaskType, cbAcceleratorName=cbAcceleratorName, ipLimitReached=ipLimitReached, nodeDeprovisionStatus=nodeDeprovisionStatus, nsNumberOfSslCoresUp=nsNumberOfSslCoresUp, cbAPAIPADDRESSType=cbAPAIPADDRESSType, cbAcceleratorInstanceState=cbAcceleratorInstanceState, cbAcceleratorNetmask=cbAcceleratorNetmask, inventoryFailed=inventoryFailed, cbNetmask=cbNetmask, systemPlatform=systemPlatform, memoryUsageNormal=memoryUsageNormal, cbMgmtIPAddress=cbMgmtIPAddress, nsInstanceState=nsInstanceState, cbAcceleratorGatewayType=cbAcceleratorGatewayType, netScaler=netScaler, cbDiskAllocation=cbDiskAllocation, instancePolicyReconfigurationFailed=instancePolicyReconfigurationFailed, systemGroup=systemGroup, scaleOutStatus=scaleOutStatus, systemDiskUsage=systemDiskUsage, cbAPANetMaskType=cbAPANetMaskType, nsHostname=nsHostname, nsNetmask=nsNetmask, cbAcceleratorIpAddressType=cbAcceleratorIpAddressType, nsUptime=nsUptime, instancePolicyReconfigurationSucceeded=instancePolicyReconfigurationSucceeded, nsGateway=nsGateway, nsNsTx=nsNsTx, cbNetmaskType=cbNetmaskType, cbAcceleratorVmMemoryFree=cbAcceleratorVmMemoryFree, cbPluginIPADDRESSType=cbPluginIPADDRESSType, cbAcceleratorMgmtIPAddressType=cbAcceleratorMgmtIPAddressType, mpsUp=mpsUp, cbUuid=cbUuid, systemCpuUsage=systemCpuUsage, nsNodeState=nsNodeState, systemDns=systemDns, cbVmMemoryTotal=cbVmMemoryTotal, cbAcceleratorMgmtIPAddress=cbAcceleratorMgmtIPAddress, nsUuid=nsUuid, mpsEvents=mpsEvents, clusterProvisionStatus=clusterProvisionStatus, cpuUsageHigh=cpuUsageHigh, masRoot=masRoot, inventoryUp=inventoryUp, diskUtilizationHigh=diskUtilizationHigh, cbVmState=cbVmState, severity=severity, systemCurrentTime=systemCurrentTime, subSystemFailed=subSystemFailed, cbAcceleratorUptime=cbAcceleratorUptime, cbAcceleratorIpList=cbAcceleratorIpList, vipLicenseLimitWarning=vipLicenseLimitWarning, deleteRecord=deleteRecord, nsNumberOfSSLCores=nsNumberOfSSLCores, netscalerEntry=netscalerEntry, systemIPAddressType=systemIPAddressType, addZone=addZone, systemCustomID=systemCustomID, cbAcceleratorHostIPAddressType=cbAcceleratorHostIPAddressType, nsHostIPAddress=nsHostIPAddress, entityName=entityName, perfCounterThresholdNormal=perfCounterThresholdNormal, coolDownPeriodStatus=coolDownPeriodStatus, cloudBridgeAcceleratorTable=cloudBridgeAcceleratorTable, cbVirtualFunctions=cbVirtualFunctions, nsHostIPAddressType=nsHostIPAddressType, modifyAppStatus=modifyAppStatus, nsPps=nsPps, autoScaleGroupModified=autoScaleGroupModified, deviceGroup=deviceGroup, nsHaSync=nsHaSync, cbHostIPAddress=cbHostIPAddress, cbVmMemoryUsage=cbVmMemoryUsage, systemBiosVersion=systemBiosVersion, passwordRecoveryFailed=passwordRecoveryFailed, drainConnPeriodStatus=drainConnPeriodStatus, scaleInStatus=scaleInStatus, cbAcceleratorVmMemoryUsage=cbAcceleratorVmMemoryUsage, trapConfigFailure=trapConfigFailure, eventMessage=eventMessage, nsUpsince=nsUpsince, memoryUsageHigh=memoryUsageHigh, cbAPAGatewayType=cbAPAGatewayType, addRecord=addRecord, systemNetmaskType=systemNetmaskType, haDatabaseOutOfSync=haDatabaseOutOfSync, passwordRecoverySuccess=passwordRecoverySuccess, nsNsMemoryUsage=nsNsMemoryUsage, nsVmDescription=nsVmDescription, mpsDown=mpsDown)
