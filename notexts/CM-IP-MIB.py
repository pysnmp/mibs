#
# PySNMP MIB module CM-IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/CM-IP-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 11:59:05 2024
# On host fv-az888-540 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
VlanId, IpVersion = mibBuilder.importSymbols("CM-COMMON-MIB", "VlanId", "IpVersion")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
iso, Bits, NotificationType, TimeTicks, Unsigned32, IpAddress, ModuleIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ObjectIdentity, Gauge32, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "NotificationType", "TimeTicks", "Unsigned32", "IpAddress", "ModuleIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ObjectIdentity", "Gauge32", "Counter32", "Integer32")
VariablePointer, RowStatus, StorageType, DisplayString, TextualConvention, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "VariablePointer", "RowStatus", "StorageType", "DisplayString", "TextualConvention", "TruthValue", "MacAddress")
cmIPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11))
cmIPMIB.setRevisions(('2019-03-14 00:00',))
if mibBuilder.loadTexts: cmIPMIB.setLastUpdated('201903140000Z')
if mibBuilder.loadTexts: cmIPMIB.setOrganization('ADVA Optical Networking SE')
cmIpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1))
cmIpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 2))
cmIpScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3))
class CmDhcpRole(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("dhcp-client", 1), ("dhcp-server", 2))

class IpManagementTunnelType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("macbased", 1), ("vlanbased", 2), ("itagbased", 3), ("gcc0based", 4), ("gcc1based", 5), ("gcc2based", 6))

class IpManagementTunnelEncapsulationType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ethernet", 1), ("ppp", 2))

class IpEntryType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("static", 1), ("dynamic", 2))

class IpSourceAddrType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("systemipaddr", 1), ("outipinterfaceaddr", 2))

class IpActionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("not-applicable", 0), ("initiate", 1))

class Ipv6OverIpv4TunnelType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("sixToFour", 1), ("ipv4-compatible", 2), ("isatap", 3), ("static-config", 4), ("gre", 5), ("ipv6-6rd", 6))

class IpMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("ipv4-only", 0), ("ipv6-only", 1), ("ipv4-and-ipv6", 2))

class DHCPCIDType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("notApplicable", 1), ("sysName", 2), ("macAddr", 3), ("userDefined", 4), ("serialNumber", 5))

class DHCPHostNameType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("notApplicable", 1), ("sysName", 2), ("userDefined", 3))

class PtpArpActionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("not-applicable", 0), ("retrieve", 1))

class DHCPVendorInfoType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("notApplicable", 1), ("sysName", 2), ("userDefined", 3))

cmIpSystemScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1))
cmIpSourceAddrScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 2))
cmIpFlushARPCacheAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 1), IpActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpFlushARPCacheAction.setStatus('current')
cmIpProxyARPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpProxyARPEnabled.setStatus('current')
cmIpPingDestination = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpPingDestination.setStatus('current')
cmIpInitiatePingAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 4), IpActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInitiatePingAction.setStatus('current')
cmIpPingResult = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIpPingResult.setStatus('current')
cmIpTraceRouteDestination = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpTraceRouteDestination.setStatus('current')
cmIpInitiateTraceRouteAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 7), IpActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInitiateTraceRouteAction.setStatus('current')
cmIpTraceRouteResult = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIpTraceRouteResult.setStatus('current')
cmIpManagementTrafficBridgingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpManagementTrafficBridgingEnabled.setStatus('current')
cmIpManagementTrafficBridgingSecurityEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpManagementTrafficBridgingSecurityEnabled.setStatus('current')
cmIpv6PingInterface = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6PingInterface.setStatus('current')
cmIpv6PingDestination = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 12), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6PingDestination.setStatus('current')
cmIpv6InitiatePingAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 13), IpActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6InitiatePingAction.setStatus('current')
cmIpv6TraceRouteDestination = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 14), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6TraceRouteDestination.setStatus('current')
cmIpv6InitiateTraceRouteAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 15), IpActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6InitiateTraceRouteAction.setStatus('current')
cmIpv6ProxyNDPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6ProxyNDPEnabled.setStatus('current')
cmIpv6FwdEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6FwdEnabled.setStatus('current')
cmIpFlushNDPCacheAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 18), IpActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpFlushNDPCacheAction.setStatus('current')
cmIpPtpArpRtrvAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 19), PtpArpActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpPtpArpRtrvAction.setStatus('current')
cmIpManagementTrafficDscpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpManagementTrafficDscpEnabled.setStatus('current')
cmIpManagementTrafficDscp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpManagementTrafficDscp.setStatus('current')
cmIpManagementTrafficBridgingInterface = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpManagementTrafficBridgingInterface.setStatus('current')
cmIpManagementTrafficBridgingIpv4Gateway = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpManagementTrafficBridgingIpv4Gateway.setStatus('current')
cmIpManagementTrafficBridgingIpv6Gateway = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 24), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpManagementTrafficBridgingIpv6Gateway.setStatus('current')
cmPingInterface = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPingInterface.setStatus('current')
cmIpTraceRouteInterface = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpTraceRouteInterface.setStatus('current')
cmIpv6TraceRouteInterface = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6TraceRouteInterface.setStatus('current')
cmIpSNMPv1InterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpSNMPv1InterfaceName.setStatus('current')
cmIpSourceAddressType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 2, 2), IpSourceAddrType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpSourceAddressType.setStatus('current')
cmIpSourceAddressInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpSourceAddressInterfaceName.setStatus('current')
cmIpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1), )
if mibBuilder.loadTexts: cmIpInterfaceTable.setStatus('current')
cmIpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1), ).setIndexNames((0, "CM-IP-MIB", "cmIpInterfaceName"))
if mibBuilder.loadTexts: cmIpInterfaceEntry.setStatus('current')
cmIpInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIpInterfaceName.setStatus('current')
cmIpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInterface.setStatus('current')
cmIpInterfaceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInterfaceMask.setStatus('current')
cmIpInterfaceDhcpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInterfaceDhcpEnabled.setStatus('current')
cmIpInterfaceMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInterfaceMTU.setStatus('current')
cmIpInterfaceDhcpRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 6), CmDhcpRole()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInterfaceDhcpRole.setStatus('current')
cmIpInterfacePhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIpInterfacePhysicalAddress.setStatus('current')
cmIpInterfaceRIPv2Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInterfaceRIPv2Enabled.setStatus('current')
cmIpInterfaceDHCPClientIdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInterfaceDHCPClientIdEnabled.setStatus('current')
cmIpInterfaceDHCPClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInterfaceDHCPClientId.setStatus('current')
cmIpInterfaceIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 11), IpMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInterfaceIpMode.setStatus('current')
cmIpInterfaceDhcpClassIdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInterfaceDhcpClassIdEnabled.setStatus('current')
cmIpInterfaceDhcpHostNameEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInterfaceDhcpHostNameEnabled.setStatus('current')
cmIpInterfaceDhcpHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInterfaceDhcpHostName.setStatus('current')
cmIpInterfaceDhcpLogServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInterfaceDhcpLogServerEnabled.setStatus('current')
cmIpInterfaceDhcpNTPServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInterfaceDhcpNTPServerEnabled.setStatus('current')
cmIpInterfaceDhcpClientIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 17), DHCPCIDType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInterfaceDhcpClientIdType.setStatus('current')
cmIpInterfaceDhcpHostNameType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 18), DHCPHostNameType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInterfaceDhcpHostNameType.setStatus('current')
cmIpInterfaceDhcpVendorInfoEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInterfaceDhcpVendorInfoEnabled.setStatus('current')
cmIpInterfaceDhcpVendorInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 20), DHCPVendorInfoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInterfaceDhcpVendorInfoType.setStatus('current')
cmIpInterfaceDhcpVendorInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInterfaceDhcpVendorInfo.setStatus('current')
cmIpInterfaceDhcpVendorInfoHideControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInterfaceDhcpVendorInfoHideControl.setStatus('current')
cmIpInterfaceGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 1, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpInterfaceGateway.setStatus('current')
cmStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 2), )
if mibBuilder.loadTexts: cmStaticRouteTable.setStatus('current')
cmStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 2, 1), ).setIndexNames((0, "CM-IP-MIB", "cmStaticRouteDest"), (0, "CM-IP-MIB", "cmStaticRouteMask"), (0, "CM-IP-MIB", "cmStaticRouteNextHop"), (0, "CM-IP-MIB", "cmStaticRouteInterface"))
if mibBuilder.loadTexts: cmStaticRouteEntry.setStatus('current')
cmStaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmStaticRouteDest.setStatus('current')
cmStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmStaticRouteMask.setStatus('current')
cmStaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmStaticRouteNextHop.setStatus('current')
cmStaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmStaticRouteMetric.setStatus('current')
cmStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmStaticRouteRowStatus.setStatus('current')
cmStaticRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmStaticRouteInterface.setStatus('current')
cmStaticRouteAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 2, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmStaticRouteAdvertise.setStatus('current')
cmARPTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 3), )
if mibBuilder.loadTexts: cmARPTable.setStatus('current')
cmARPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 3, 1), ).setIndexNames((0, "CM-IP-MIB", "cmARPInterface"), (0, "CM-IP-MIB", "cmARPIPAddress"))
if mibBuilder.loadTexts: cmARPEntry.setStatus('current')
cmARPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmARPIndex.setStatus('deprecated')
cmARPIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmARPIPAddress.setStatus('current')
cmARPMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 3, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmARPMacAddress.setStatus('current')
cmARPInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmARPInterface.setStatus('current')
cmARPStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 3, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmARPStorageType.setStatus('current')
cmARPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 3, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmARPRowStatus.setStatus('current')
cmARPEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 3, 1, 7), IpEntryType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmARPEntryType.setStatus('current')
cmProxyARPTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 4), )
if mibBuilder.loadTexts: cmProxyARPTable.setStatus('current')
cmProxyARPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 4, 1), ).setIndexNames((0, "CM-IP-MIB", "cmProxyARPInterface"), (0, "CM-IP-MIB", "cmProxyARPIPAddress"), (0, "CM-IP-MIB", "cmProxyARPSubnetMask"))
if mibBuilder.loadTexts: cmProxyARPEntry.setStatus('current')
cmProxyARPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmProxyARPIndex.setStatus('deprecated')
cmProxyARPIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 4, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmProxyARPIPAddress.setStatus('current')
cmProxyARPSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 4, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmProxyARPSubnetMask.setStatus('current')
cmProxyARPInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmProxyARPInterface.setStatus('current')
cmProxyARPStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 4, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmProxyARPStorageType.setStatus('current')
cmProxyARPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 4, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmProxyARPRowStatus.setStatus('current')
ipManagementTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5), )
if mibBuilder.loadTexts: ipManagementTunnelTable.setStatus('current')
ipManagementTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1), ).setIndexNames((0, "CM-IP-MIB", "ipManagementTunnelIndex"))
if mibBuilder.loadTexts: ipManagementTunnelEntry.setStatus('current')
ipManagementTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipManagementTunnelIndex.setStatus('current')
ipManagementTunnelAssociatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 2), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipManagementTunnelAssociatedPort.setStatus('current')
ipManagementTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipManagementTunnelName.setStatus('current')
ipManagementTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 4), IpManagementTunnelType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipManagementTunnelType.setStatus('current')
ipManagementTunnelMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelMTU.setStatus('current')
ipManagementTunnelEncapsulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 6), IpManagementTunnelEncapsulationType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipManagementTunnelEncapsulationType.setStatus('current')
ipManagementTunnelIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipManagementTunnelIpAddress.setStatus('current')
ipManagementTunnelSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipManagementTunnelSubnetMask.setStatus('current')
ipManagementTunnelVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 9), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipManagementTunnelVlanId.setStatus('current')
ipManagementTunnelSVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipManagementTunnelSVlanEnabled.setStatus('current')
ipManagementTunnelSVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 11), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipManagementTunnelSVlanId.setStatus('current')
ipManagementTunnelDhcpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipManagementTunnelDhcpEnabled.setStatus('current')
ipManagementTunnelRip2PktsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipManagementTunnelRip2PktsEnabled.setStatus('current')
ipManagementTunnelPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipManagementTunnelPhysicalAddress.setStatus('current')
ipManagementTunnelCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipManagementTunnelCOS.setStatus('current')
ipManagementTunnelCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 16), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipManagementTunnelCIR.setStatus('current')
ipManagementTunnelEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipManagementTunnelEIR.setStatus('current')
ipManagementTunnelBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipManagementTunnelBufferSize.setStatus('current')
ipManagementTunnelStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 19), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipManagementTunnelStorageType.setStatus('current')
ipManagementTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 20), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelRowStatus.setStatus('current')
ipManagementTunnelDHCPClientIdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelDHCPClientIdEnabled.setStatus('current')
ipManagementTunnelDHCPClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelDHCPClientId.setStatus('current')
ipManagementTunnelQosQueueProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 23), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelQosQueueProfile.setStatus('current')
ipManagementTunnelCVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelCVlanEnabled.setStatus('current')
ipManagementTunnelDHCPv6Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelDHCPv6Enabled.setStatus('current')
ipManagementTunnelIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 26), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelIpv6Address.setStatus('current')
ipManagementTunnelIpv6AddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelIpv6AddrPrefixLen.setStatus('current')
ipManagementTunnelIpv6StateAddrAutoConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelIpv6StateAddrAutoConfigEnabled.setStatus('current')
ipManagementTunnellinkLocIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 29), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipManagementTunnellinkLocIpv6Addr.setStatus('current')
ipManagementTunnellinkLocIpv6AddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipManagementTunnellinkLocIpv6AddrPrefixLen.setStatus('current')
ipManagementTunnelIpv6PrefixAdvertiseEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 31), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelIpv6PrefixAdvertiseEnabled.setStatus('current')
ipManagementTunnelIpv6Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 32), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelIpv6Prefix.setStatus('current')
ipManagementTunnelIpv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelIpv6PrefixLen.setStatus('current')
ipManagementTunnelIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 34), IpMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelIpMode.setStatus('current')
ipManagementTunnelIpv6RipngEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 35), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelIpv6RipngEnabled.setStatus('current')
ipManagementTunnelDhcpClassIdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 36), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelDhcpClassIdEnabled.setStatus('current')
ipManagementTunnelDhcpHostNameEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 37), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelDhcpHostNameEnabled.setStatus('current')
ipManagementTunnelDhcpHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 38), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelDhcpHostName.setStatus('current')
ipManagementTunnelDhcpLogServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 39), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelDhcpLogServerEnabled.setStatus('current')
ipManagementTunnelDhcpNTPServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 40), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelDhcpNTPServerEnabled.setStatus('current')
ipManagementTunnelDhcpClientIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 41), DHCPCIDType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelDhcpClientIdType.setStatus('current')
ipManagementTunnelDhcpHostNameType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 42), DHCPHostNameType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelDhcpHostNameType.setStatus('current')
ipManagementTunnelDhcpVendorInfoEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 43), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelDhcpVendorInfoEnabled.setStatus('current')
ipManagementTunnelDhcpVendorInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 44), DHCPVendorInfoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelDhcpVendorInfoType.setStatus('current')
ipManagementTunnelDhcpVendorInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 45), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelDhcpVendorInfo.setStatus('current')
ipManagementTunnelDhcpVendorInfoHideControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 46), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelDhcpVendorInfoHideControl.setStatus('current')
ipManagementTunnelSharedVim = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 5, 1, 47), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipManagementTunnelSharedVim.setStatus('current')
cmIpv6InterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 6), )
if mibBuilder.loadTexts: cmIpv6InterfaceTable.setStatus('current')
cmIpv6InterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 6, 1), )
cmIpInterfaceEntry.registerAugmentions(("CM-IP-MIB", "cmIpv6InterfaceEntry"))
cmIpv6InterfaceEntry.setIndexNames(*cmIpInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: cmIpv6InterfaceEntry.setStatus('current')
cmIpv6InterfaceMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 6, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6InterfaceMTU.setStatus('current')
cmIpv6UnicastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 6, 1, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6UnicastAddr.setStatus('current')
cmIpv6UnicastAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6UnicastAddrPrefixLen.setStatus('current')
cmIpv6PrefixAdvertiseEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6PrefixAdvertiseEnabled.setStatus('current')
cmIpv6RAPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 6, 1, 5), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6RAPrefix.setStatus('current')
cmIpv6RAPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6RAPrefixLength.setStatus('current')
cmIpv6StateAddrAutoConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 6, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6StateAddrAutoConfigEnabled.setStatus('current')
cmIpv6DhcpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 6, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6DhcpEnabled.setStatus('current')
cmIpv6DhcpRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 6, 1, 9), CmDhcpRole()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6DhcpRole.setStatus('current')
cmIpv6RIPngEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 6, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6RIPngEnabled.setStatus('current')
cmIpv6LinkLocAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 6, 1, 11), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIpv6LinkLocAddr.setStatus('current')
cmIpv6LinkLocAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIpv6LinkLocAddrPrefixLen.setStatus('current')
cmIpv6InterfaceGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 6, 1, 13), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6InterfaceGateway.setStatus('current')
cmIpv6StaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 7), )
if mibBuilder.loadTexts: cmIpv6StaticRouteTable.setStatus('current')
cmIpv6StaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 7, 1), ).setIndexNames((0, "CM-IP-MIB", "cmIpv6StaticRouteDest"), (0, "CM-IP-MIB", "cmIpv6StaticRoutePrefixLen"), (0, "CM-IP-MIB", "cmIpv6StaticRouteNextHop"), (0, "CM-IP-MIB", "cmIpv6StaticRouteInterface"))
if mibBuilder.loadTexts: cmIpv6StaticRouteEntry.setStatus('current')
cmIpv6StaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 7, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: cmIpv6StaticRouteDest.setStatus('current')
cmIpv6StaticRoutePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: cmIpv6StaticRoutePrefixLen.setStatus('current')
cmIpv6StaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 7, 1, 3), Ipv6Address())
if mibBuilder.loadTexts: cmIpv6StaticRouteNextHop.setStatus('current')
cmIpv6StaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmIpv6StaticRouteMetric.setStatus('current')
cmIpv6StaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 7, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmIpv6StaticRouteRowStatus.setStatus('current')
cmIpv6StaticRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)))
if mibBuilder.loadTexts: cmIpv6StaticRouteInterface.setStatus('current')
cmIpv6StaticRouteAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 7, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmIpv6StaticRouteAdvertise.setStatus('current')
cmNDPTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 8), )
if mibBuilder.loadTexts: cmNDPTable.setStatus('current')
cmNDPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 8, 1), ).setIndexNames((0, "CM-IP-MIB", "cmNDPInterface"), (0, "CM-IP-MIB", "cmNDPIpv6Address"))
if mibBuilder.loadTexts: cmNDPEntry.setStatus('current')
cmNDPIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 8, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: cmNDPIpv6Address.setStatus('current')
cmNDPMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 8, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmNDPMacAddress.setStatus('current')
cmNDPInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: cmNDPInterface.setStatus('current')
cmNDPStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 8, 1, 4), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmNDPStorageType.setStatus('current')
cmNDPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 8, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNDPRowStatus.setStatus('current')
cmNDPEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 8, 1, 6), IpEntryType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNDPEntryType.setStatus('current')
cmProxyNDPTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 9), )
if mibBuilder.loadTexts: cmProxyNDPTable.setStatus('current')
cmProxyNDPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 9, 1), ).setIndexNames((0, "CM-IP-MIB", "cmProxyNDPInterface"), (0, "CM-IP-MIB", "cmProxyNDPIpv6Address"), (0, "CM-IP-MIB", "cmProxyNDPIpv6PrefixLen"))
if mibBuilder.loadTexts: cmProxyNDPEntry.setStatus('current')
cmProxyNDPIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 9, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: cmProxyNDPIpv6Address.setStatus('current')
cmProxyNDPIpv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: cmProxyNDPIpv6PrefixLen.setStatus('current')
cmProxyNDPInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmProxyNDPInterface.setStatus('current')
cmProxyNDPStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 9, 1, 4), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmProxyNDPStorageType.setStatus('current')
cmProxyNDPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 9, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmProxyNDPRowStatus.setStatus('current')
cmIpv6OverIpv4TunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 10), )
if mibBuilder.loadTexts: cmIpv6OverIpv4TunnelTable.setStatus('current')
cmIpv6OverIpv4TunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 10, 1), ).setIndexNames((0, "CM-IP-MIB", "cmIpv6OverIpv4TunnelIndex"))
if mibBuilder.loadTexts: cmIpv6OverIpv4TunnelEntry.setStatus('current')
cmIpv6OverIpv4TunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: cmIpv6OverIpv4TunnelIndex.setStatus('current')
cmIpv6OverIpv4TunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6OverIpv4TunnelName.setStatus('current')
cmIpv6OverIpv4TunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 10, 1, 3), Ipv6OverIpv4TunnelType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6OverIpv4TunnelType.setStatus('current')
cmIpv6OverIpv4TunnelDestIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6OverIpv4TunnelDestIpv4Addr.setStatus('current')
cmIpv6OverIpv4TunnelIpv6UnicastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 10, 1, 5), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6OverIpv4TunnelIpv6UnicastAddress.setStatus('current')
cmIpv6OverIpv4TunnelIpv6UnicastAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6OverIpv4TunnelIpv6UnicastAddrPrefixLen.setStatus('current')
cmIpv6OverIpv4TunnelLinkLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 10, 1, 7), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIpv6OverIpv4TunnelLinkLocalAddress.setStatus('current')
cmIpv60verIpv4TunnelLinkLocalAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIpv60verIpv4TunnelLinkLocalAddrPrefixLen.setStatus('current')
cmIpv6OverIpv4TunnelAssociatedIpv4Interface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 10, 1, 9), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6OverIpv4TunnelAssociatedIpv4Interface.setStatus('current')
cmIpv6OverIpv4TunnelStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 10, 1, 10), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmIpv6OverIpv4TunnelStorageType.setStatus('current')
cmIpv6OverIpv4TunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 10, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpv6OverIpv4TunnelRowStatus.setStatus('current')
cmIpv6OverIpv4PotentialRouterList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 10, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmIpv6OverIpv4PotentialRouterList.setStatus('current')
ipLoopbackInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 11), )
if mibBuilder.loadTexts: ipLoopbackInterfaceTable.setStatus('current')
ipLoopbackInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 11, 1), ).setIndexNames((0, "CM-IP-MIB", "ipLoopbackInterfaceIndex"))
if mibBuilder.loadTexts: ipLoopbackInterfaceEntry.setStatus('current')
ipLoopbackInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ipLoopbackInterfaceIndex.setStatus('current')
ipLoopbackInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipLoopbackInterfaceName.setStatus('current')
ipLoopbackInterfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 11, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipLoopbackInterfaceIpAddress.setStatus('current')
ipLoopbackInterfaceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 11, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipLoopbackInterfaceMask.setStatus('current')
ipLoopbackInterfaceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 11, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipLoopbackInterfaceStorageType.setStatus('current')
ipLoopbackInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 11, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipLoopbackInterfaceRowStatus.setStatus('current')
ipLoopbackInterfaceIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 11, 1, 7), IpMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipLoopbackInterfaceIpMode.setStatus('current')
ipLoopbackInterfaceIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 11, 1, 8), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipLoopbackInterfaceIpv6Address.setStatus('current')
ipLoopbackInterfaceIpv6AddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 1, 11, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipLoopbackInterfaceIpv6AddrPrefixLen.setStatus('current')
ipCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 2, 1))
ipGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 2, 2))
ipCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 2, 1, 1)).setObjects(("CM-IP-MIB", "ipGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipCompliance = ipCompliance.setStatus('current')
ipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 2, 2, 1)).setObjects(("CM-IP-MIB", "cmIpFlushARPCacheAction"), ("CM-IP-MIB", "cmIpProxyARPEnabled"), ("CM-IP-MIB", "cmIpPingDestination"), ("CM-IP-MIB", "cmIpInitiatePingAction"), ("CM-IP-MIB", "cmIpPingResult"), ("CM-IP-MIB", "cmPingInterface"), ("CM-IP-MIB", "cmIpTraceRouteDestination"), ("CM-IP-MIB", "cmIpInitiateTraceRouteAction"), ("CM-IP-MIB", "cmIpTraceRouteResult"), ("CM-IP-MIB", "cmIpTraceRouteInterface"), ("CM-IP-MIB", "cmIpSNMPv1InterfaceName"), ("CM-IP-MIB", "cmIpSourceAddressType"), ("CM-IP-MIB", "cmIpSourceAddressInterfaceName"), ("CM-IP-MIB", "cmIpManagementTrafficBridgingEnabled"), ("CM-IP-MIB", "cmIpManagementTrafficBridgingSecurityEnabled"), ("CM-IP-MIB", "cmIpInterfaceName"), ("CM-IP-MIB", "cmIpInterface"), ("CM-IP-MIB", "cmIpInterfaceMask"), ("CM-IP-MIB", "cmIpInterfaceDhcpEnabled"), ("CM-IP-MIB", "cmIpInterfaceMTU"), ("CM-IP-MIB", "cmIpInterfaceDhcpRole"), ("CM-IP-MIB", "cmIpInterfacePhysicalAddress"), ("CM-IP-MIB", "cmIpInterfaceRIPv2Enabled"), ("CM-IP-MIB", "cmIpInterfaceDHCPClientIdEnabled"), ("CM-IP-MIB", "cmIpInterfaceDHCPClientId"), ("CM-IP-MIB", "cmIpInterfaceIpMode"), ("CM-IP-MIB", "cmIpInterfaceDhcpClassIdEnabled"), ("CM-IP-MIB", "cmIpInterfaceDhcpHostNameEnabled"), ("CM-IP-MIB", "cmIpInterfaceDhcpHostName"), ("CM-IP-MIB", "cmIpInterfaceDhcpLogServerEnabled"), ("CM-IP-MIB", "cmIpInterfaceDhcpNTPServerEnabled"), ("CM-IP-MIB", "cmIpInterfaceDhcpClientIdType"), ("CM-IP-MIB", "cmIpInterfaceDhcpHostNameType"), ("CM-IP-MIB", "cmIpInterfaceDhcpVendorInfoEnabled"), ("CM-IP-MIB", "cmIpInterfaceDhcpVendorInfoType"), ("CM-IP-MIB", "cmIpInterfaceDhcpVendorInfo"), ("CM-IP-MIB", "cmIpInterfaceDhcpVendorInfoHideControl"), ("CM-IP-MIB", "cmIpInterfaceGateway"), ("CM-IP-MIB", "cmStaticRouteDest"), ("CM-IP-MIB", "cmStaticRouteMask"), ("CM-IP-MIB", "cmStaticRouteNextHop"), ("CM-IP-MIB", "cmStaticRouteMetric"), ("CM-IP-MIB", "cmStaticRouteRowStatus"), ("CM-IP-MIB", "cmStaticRouteInterface"), ("CM-IP-MIB", "cmStaticRouteAdvertise"), ("CM-IP-MIB", "cmARPIndex"), ("CM-IP-MIB", "cmARPIPAddress"), ("CM-IP-MIB", "cmARPMacAddress"), ("CM-IP-MIB", "cmARPInterface"), ("CM-IP-MIB", "cmARPStorageType"), ("CM-IP-MIB", "cmARPRowStatus"), ("CM-IP-MIB", "cmARPEntryType"), ("CM-IP-MIB", "cmProxyARPIndex"), ("CM-IP-MIB", "cmProxyARPIPAddress"), ("CM-IP-MIB", "cmProxyARPSubnetMask"), ("CM-IP-MIB", "cmProxyARPInterface"), ("CM-IP-MIB", "cmProxyARPStorageType"), ("CM-IP-MIB", "cmProxyARPRowStatus"), ("CM-IP-MIB", "ipManagementTunnelIndex"), ("CM-IP-MIB", "ipManagementTunnelAssociatedPort"), ("CM-IP-MIB", "ipManagementTunnelName"), ("CM-IP-MIB", "ipManagementTunnelType"), ("CM-IP-MIB", "ipManagementTunnelMTU"), ("CM-IP-MIB", "ipManagementTunnelEncapsulationType"), ("CM-IP-MIB", "ipManagementTunnelIpAddress"), ("CM-IP-MIB", "ipManagementTunnelSubnetMask"), ("CM-IP-MIB", "ipManagementTunnelVlanId"), ("CM-IP-MIB", "ipManagementTunnelSVlanEnabled"), ("CM-IP-MIB", "ipManagementTunnelSVlanId"), ("CM-IP-MIB", "ipManagementTunnelDhcpEnabled"), ("CM-IP-MIB", "ipManagementTunnelRip2PktsEnabled"), ("CM-IP-MIB", "ipManagementTunnelPhysicalAddress"), ("CM-IP-MIB", "ipManagementTunnelCOS"), ("CM-IP-MIB", "ipManagementTunnelCIR"), ("CM-IP-MIB", "ipManagementTunnelEIR"), ("CM-IP-MIB", "ipManagementTunnelBufferSize"), ("CM-IP-MIB", "ipManagementTunnelStorageType"), ("CM-IP-MIB", "ipManagementTunnelRowStatus"), ("CM-IP-MIB", "ipManagementTunnelQosQueueProfile"), ("CM-IP-MIB", "ipManagementTunnelDHCPClientIdEnabled"), ("CM-IP-MIB", "ipManagementTunnelDHCPClientId"), ("CM-IP-MIB", "ipManagementTunnelCVlanEnabled"), ("CM-IP-MIB", "ipManagementTunnelIpMode"), ("CM-IP-MIB", "ipManagementTunnelDhcpClassIdEnabled"), ("CM-IP-MIB", "ipManagementTunnelDhcpHostNameEnabled"), ("CM-IP-MIB", "ipManagementTunnelDhcpHostName"), ("CM-IP-MIB", "ipManagementTunnelDhcpLogServerEnabled"), ("CM-IP-MIB", "ipManagementTunnelDhcpNTPServerEnabled"), ("CM-IP-MIB", "ipManagementTunnelDhcpClientIdType"), ("CM-IP-MIB", "ipManagementTunnelDhcpHostNameType"), ("CM-IP-MIB", "cmIpManagementTrafficDscpEnabled"), ("CM-IP-MIB", "cmIpManagementTrafficDscp"), ("CM-IP-MIB", "cmIpManagementTrafficBridgingInterface"), ("CM-IP-MIB", "cmIpManagementTrafficBridgingIpv4Gateway"), ("CM-IP-MIB", "cmIpManagementTrafficBridgingIpv6Gateway"), ("CM-IP-MIB", "ipManagementTunnelDhcpVendorInfoEnabled"), ("CM-IP-MIB", "ipManagementTunnelDhcpVendorInfoType"), ("CM-IP-MIB", "ipManagementTunnelDhcpVendorInfo"), ("CM-IP-MIB", "ipManagementTunnelDhcpVendorInfoHideControl"), ("CM-IP-MIB", "ipManagementTunnelSharedVim"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipGroup = ipGroup.setStatus('current')
ipv6Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 11, 2, 2, 2)).setObjects(("CM-IP-MIB", "ipManagementTunnelDHCPv6Enabled"), ("CM-IP-MIB", "ipManagementTunnelIpv6Address"), ("CM-IP-MIB", "ipManagementTunnelIpv6AddrPrefixLen"), ("CM-IP-MIB", "ipManagementTunnelIpv6StateAddrAutoConfigEnabled"), ("CM-IP-MIB", "ipManagementTunnellinkLocIpv6Addr"), ("CM-IP-MIB", "ipManagementTunnellinkLocIpv6AddrPrefixLen"), ("CM-IP-MIB", "ipManagementTunnelIpv6PrefixAdvertiseEnabled"), ("CM-IP-MIB", "ipManagementTunnelIpv6Prefix"), ("CM-IP-MIB", "ipManagementTunnelIpv6PrefixLen"), ("CM-IP-MIB", "ipManagementTunnelIpv6RipngEnabled"), ("CM-IP-MIB", "cmIpv6InterfaceMTU"), ("CM-IP-MIB", "cmIpv6UnicastAddr"), ("CM-IP-MIB", "cmIpv6UnicastAddrPrefixLen"), ("CM-IP-MIB", "cmIpv6PrefixAdvertiseEnabled"), ("CM-IP-MIB", "cmIpv6RAPrefix"), ("CM-IP-MIB", "cmIpv6RAPrefixLength"), ("CM-IP-MIB", "cmIpv6StateAddrAutoConfigEnabled"), ("CM-IP-MIB", "cmIpv6DhcpEnabled"), ("CM-IP-MIB", "cmIpv6DhcpRole"), ("CM-IP-MIB", "cmIpv6RIPngEnabled"), ("CM-IP-MIB", "cmIpv6LinkLocAddr"), ("CM-IP-MIB", "cmIpv6LinkLocAddrPrefixLen"), ("CM-IP-MIB", "cmIpv6InterfaceGateway"), ("CM-IP-MIB", "cmIpv6StaticRouteDest"), ("CM-IP-MIB", "cmIpv6StaticRoutePrefixLen"), ("CM-IP-MIB", "cmIpv6StaticRouteNextHop"), ("CM-IP-MIB", "cmIpv6StaticRouteMetric"), ("CM-IP-MIB", "cmIpv6StaticRouteRowStatus"), ("CM-IP-MIB", "cmIpv6StaticRouteInterface"), ("CM-IP-MIB", "cmIpv6StaticRouteAdvertise"), ("CM-IP-MIB", "cmNDPIpv6Address"), ("CM-IP-MIB", "cmNDPMacAddress"), ("CM-IP-MIB", "cmNDPInterface"), ("CM-IP-MIB", "cmNDPStorageType"), ("CM-IP-MIB", "cmNDPRowStatus"), ("CM-IP-MIB", "cmNDPEntryType"), ("CM-IP-MIB", "cmProxyNDPIpv6Address"), ("CM-IP-MIB", "cmProxyNDPIpv6PrefixLen"), ("CM-IP-MIB", "cmProxyNDPInterface"), ("CM-IP-MIB", "cmProxyNDPStorageType"), ("CM-IP-MIB", "cmProxyNDPRowStatus"), ("CM-IP-MIB", "cmIpv6OverIpv4TunnelIndex"), ("CM-IP-MIB", "cmIpv6OverIpv4TunnelName"), ("CM-IP-MIB", "cmIpv6OverIpv4TunnelType"), ("CM-IP-MIB", "cmIpv6OverIpv4TunnelDestIpv4Addr"), ("CM-IP-MIB", "cmIpv6OverIpv4TunnelIpv6UnicastAddress"), ("CM-IP-MIB", "cmIpv6OverIpv4TunnelAssociatedIpv4Interface"), ("CM-IP-MIB", "cmIpv6OverIpv4TunnelStorageType"), ("CM-IP-MIB", "cmIpv6OverIpv4TunnelRowStatus"), ("CM-IP-MIB", "cmIpv6InitiatePingAction"), ("CM-IP-MIB", "cmIpv6InitiatePingAction"), ("CM-IP-MIB", "cmIpv6TraceRouteDestination"), ("CM-IP-MIB", "cmIpv6InitiateTraceRouteAction"), ("CM-IP-MIB", "cmIpv6PingInterface"), ("CM-IP-MIB", "cmIpv6OverIpv4TunnelIpv6UnicastAddrPrefixLen"), ("CM-IP-MIB", "cmIpv6OverIpv4TunnelLinkLocalAddress"), ("CM-IP-MIB", "cmIpv60verIpv4TunnelLinkLocalAddrPrefixLen"), ("CM-IP-MIB", "cmIpv6OverIpv4PotentialRouterList"), ("CM-IP-MIB", "cmIpv6FwdEnabled"), ("CM-IP-MIB", "cmIpv6ProxyNDPEnabled"), ("CM-IP-MIB", "cmIpFlushNDPCacheAction"), ("CM-IP-MIB", "cmIpPtpArpRtrvAction"), ("CM-IP-MIB", "ipLoopbackInterfaceIndex"), ("CM-IP-MIB", "ipLoopbackInterfaceName"), ("CM-IP-MIB", "ipLoopbackInterfaceIpAddress"), ("CM-IP-MIB", "ipLoopbackInterfaceMask"), ("CM-IP-MIB", "ipLoopbackInterfaceStorageType"), ("CM-IP-MIB", "ipLoopbackInterfaceRowStatus"), ("CM-IP-MIB", "ipLoopbackInterfaceIpMode"), ("CM-IP-MIB", "ipLoopbackInterfaceIpv6Address"), ("CM-IP-MIB", "ipLoopbackInterfaceIpv6AddrPrefixLen"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipv6Group = ipv6Group.setStatus('current')
mibBuilder.exportSymbols("CM-IP-MIB", cmIpSystemScalars=cmIpSystemScalars, cmIpManagementTrafficBridgingSecurityEnabled=cmIpManagementTrafficBridgingSecurityEnabled, cmPingInterface=cmPingInterface, cmIpInterfaceMask=cmIpInterfaceMask, ipManagementTunnelIpv6PrefixLen=ipManagementTunnelIpv6PrefixLen, cmIpTraceRouteResult=cmIpTraceRouteResult, cmIpInterfaceDHCPClientIdEnabled=cmIpInterfaceDHCPClientIdEnabled, ipManagementTunnelDHCPClientIdEnabled=ipManagementTunnelDHCPClientIdEnabled, ipv6Group=ipv6Group, cmIpInterfaceDHCPClientId=cmIpInterfaceDHCPClientId, cmProxyARPInterface=cmProxyARPInterface, cmIpv6StaticRouteTable=cmIpv6StaticRouteTable, cmIpSourceAddrScalars=cmIpSourceAddrScalars, cmStaticRouteNextHop=cmStaticRouteNextHop, cmIpv6RAPrefixLength=cmIpv6RAPrefixLength, cmIpScalars=cmIpScalars, cmProxyARPEntry=cmProxyARPEntry, cmIpv6StaticRoutePrefixLen=cmIpv6StaticRoutePrefixLen, CmDhcpRole=CmDhcpRole, IpMode=IpMode, cmIpv6TraceRouteDestination=cmIpv6TraceRouteDestination, ipManagementTunnelDhcpLogServerEnabled=ipManagementTunnelDhcpLogServerEnabled, cmNDPIpv6Address=cmNDPIpv6Address, cmProxyNDPEntry=cmProxyNDPEntry, cmIpTraceRouteInterface=cmIpTraceRouteInterface, cmIpInterface=cmIpInterface, ipManagementTunnelCIR=ipManagementTunnelCIR, cmIpManagementTrafficBridgingInterface=cmIpManagementTrafficBridgingInterface, cmIpInterfaceDhcpEnabled=cmIpInterfaceDhcpEnabled, cmProxyNDPStorageType=cmProxyNDPStorageType, ipManagementTunnellinkLocIpv6AddrPrefixLen=ipManagementTunnellinkLocIpv6AddrPrefixLen, cmIpv6InterfaceEntry=cmIpv6InterfaceEntry, cmStaticRouteAdvertise=cmStaticRouteAdvertise, cmIpv6RAPrefix=cmIpv6RAPrefix, cmIpManagementTrafficBridgingEnabled=cmIpManagementTrafficBridgingEnabled, cmIPMIB=cmIPMIB, cmARPIndex=cmARPIndex, cmProxyARPSubnetMask=cmProxyARPSubnetMask, ipManagementTunnelIpMode=ipManagementTunnelIpMode, cmNDPEntryType=cmNDPEntryType, cmIpv6RIPngEnabled=cmIpv6RIPngEnabled, cmStaticRouteEntry=cmStaticRouteEntry, cmNDPRowStatus=cmNDPRowStatus, cmIpManagementTrafficDscpEnabled=cmIpManagementTrafficDscpEnabled, ipManagementTunnelIpv6Prefix=ipManagementTunnelIpv6Prefix, ipManagementTunnelCOS=ipManagementTunnelCOS, ipManagementTunnelAssociatedPort=ipManagementTunnelAssociatedPort, cmIpManagementTrafficDscp=cmIpManagementTrafficDscp, ipManagementTunnelDHCPClientId=ipManagementTunnelDHCPClientId, cmNDPTable=cmNDPTable, ipManagementTunnelDHCPv6Enabled=ipManagementTunnelDHCPv6Enabled, ipLoopbackInterfaceIpAddress=ipLoopbackInterfaceIpAddress, cmIpv6OverIpv4TunnelDestIpv4Addr=cmIpv6OverIpv4TunnelDestIpv4Addr, ipGroups=ipGroups, cmIpManagementTrafficBridgingIpv4Gateway=cmIpManagementTrafficBridgingIpv4Gateway, cmARPInterface=cmARPInterface, ipManagementTunnelRip2PktsEnabled=ipManagementTunnelRip2PktsEnabled, ipLoopbackInterfaceIndex=ipLoopbackInterfaceIndex, cmIpPtpArpRtrvAction=cmIpPtpArpRtrvAction, cmIpv6OverIpv4PotentialRouterList=cmIpv6OverIpv4PotentialRouterList, ipManagementTunnelSharedVim=ipManagementTunnelSharedVim, cmIpv6LinkLocAddrPrefixLen=cmIpv6LinkLocAddrPrefixLen, DHCPVendorInfoType=DHCPVendorInfoType, ipManagementTunnelIpv6AddrPrefixLen=ipManagementTunnelIpv6AddrPrefixLen, cmARPEntry=cmARPEntry, ipManagementTunnelIpv6StateAddrAutoConfigEnabled=ipManagementTunnelIpv6StateAddrAutoConfigEnabled, cmIpInterfaceDhcpHostName=cmIpInterfaceDhcpHostName, ipManagementTunnelDhcpVendorInfo=ipManagementTunnelDhcpVendorInfo, cmIpInterfaceRIPv2Enabled=cmIpInterfaceRIPv2Enabled, cmIpv6TraceRouteInterface=cmIpv6TraceRouteInterface, cmIpv6OverIpv4TunnelIpv6UnicastAddrPrefixLen=cmIpv6OverIpv4TunnelIpv6UnicastAddrPrefixLen, cmIpv6OverIpv4TunnelIpv6UnicastAddress=cmIpv6OverIpv4TunnelIpv6UnicastAddress, cmIpFlushNDPCacheAction=cmIpFlushNDPCacheAction, cmIpInterfaceName=cmIpInterfaceName, DHCPCIDType=DHCPCIDType, cmIpv6StaticRouteRowStatus=cmIpv6StaticRouteRowStatus, ipManagementTunnelSubnetMask=ipManagementTunnelSubnetMask, cmIpv6InterfaceTable=cmIpv6InterfaceTable, PtpArpActionType=PtpArpActionType, cmIpSourceAddressType=cmIpSourceAddressType, ipManagementTunnelIpv6Address=ipManagementTunnelIpv6Address, cmProxyNDPInterface=cmProxyNDPInterface, cmIpv6StaticRouteNextHop=cmIpv6StaticRouteNextHop, ipLoopbackInterfaceName=ipLoopbackInterfaceName, ipManagementTunnelIndex=ipManagementTunnelIndex, ipLoopbackInterfaceTable=ipLoopbackInterfaceTable, ipManagementTunnelSVlanId=ipManagementTunnelSVlanId, ipLoopbackInterfaceIpMode=ipLoopbackInterfaceIpMode, ipManagementTunnelDhcpVendorInfoHideControl=ipManagementTunnelDhcpVendorInfoHideControl, cmStaticRouteTable=cmStaticRouteTable, cmIpv6OverIpv4TunnelTable=cmIpv6OverIpv4TunnelTable, cmIpv6StaticRouteMetric=cmIpv6StaticRouteMetric, ipManagementTunnelEncapsulationType=ipManagementTunnelEncapsulationType, cmIpInterfaceEntry=cmIpInterfaceEntry, cmNDPEntry=cmNDPEntry, ipLoopbackInterfaceIpv6AddrPrefixLen=ipLoopbackInterfaceIpv6AddrPrefixLen, IpSourceAddrType=IpSourceAddrType, cmIpv6OverIpv4TunnelRowStatus=cmIpv6OverIpv4TunnelRowStatus, cmIpFlushARPCacheAction=cmIpFlushARPCacheAction, cmStaticRouteMetric=cmStaticRouteMetric, cmIpv60verIpv4TunnelLinkLocalAddrPrefixLen=cmIpv60verIpv4TunnelLinkLocalAddrPrefixLen, ipManagementTunnelType=ipManagementTunnelType, cmIpv6StateAddrAutoConfigEnabled=cmIpv6StateAddrAutoConfigEnabled, cmIpv6StaticRouteEntry=cmIpv6StaticRouteEntry, cmARPMacAddress=cmARPMacAddress, cmNDPInterface=cmNDPInterface, cmStaticRouteInterface=cmStaticRouteInterface, cmStaticRouteRowStatus=cmStaticRouteRowStatus, cmIpInterfaceDhcpClientIdType=cmIpInterfaceDhcpClientIdType, ipManagementTunnelTable=ipManagementTunnelTable, PYSNMP_MODULE_ID=cmIPMIB, ipManagementTunnelPhysicalAddress=ipManagementTunnelPhysicalAddress, cmIpv6FwdEnabled=cmIpv6FwdEnabled, cmIpInterfaceDhcpVendorInfo=cmIpInterfaceDhcpVendorInfo, cmNDPMacAddress=cmNDPMacAddress, cmIpv6PrefixAdvertiseEnabled=cmIpv6PrefixAdvertiseEnabled, ipManagementTunnelMTU=ipManagementTunnelMTU, cmIpInterfaceTable=cmIpInterfaceTable, ipManagementTunnelQosQueueProfile=ipManagementTunnelQosQueueProfile, ipGroup=ipGroup, cmIpManagementTrafficBridgingIpv6Gateway=cmIpManagementTrafficBridgingIpv6Gateway, cmProxyNDPIpv6PrefixLen=cmProxyNDPIpv6PrefixLen, cmProxyARPIndex=cmProxyARPIndex, IpActionType=IpActionType, ipManagementTunnelIpAddress=ipManagementTunnelIpAddress, cmStaticRouteMask=cmStaticRouteMask, cmIpv6InterfaceMTU=cmIpv6InterfaceMTU, ipManagementTunnelVlanId=ipManagementTunnelVlanId, cmIpv6UnicastAddr=cmIpv6UnicastAddr, cmIpv6UnicastAddrPrefixLen=cmIpv6UnicastAddrPrefixLen, cmIpv6InitiateTraceRouteAction=cmIpv6InitiateTraceRouteAction, cmARPIPAddress=cmARPIPAddress, ipManagementTunnelDhcpEnabled=ipManagementTunnelDhcpEnabled, DHCPHostNameType=DHCPHostNameType, cmIpv6OverIpv4TunnelType=cmIpv6OverIpv4TunnelType, cmARPEntryType=cmARPEntryType, ipLoopbackInterfaceEntry=ipLoopbackInterfaceEntry, cmProxyARPIPAddress=cmProxyARPIPAddress, ipManagementTunnelDhcpClientIdType=ipManagementTunnelDhcpClientIdType, ipManagementTunnelBufferSize=ipManagementTunnelBufferSize, ipCompliance=ipCompliance, cmIpv6DhcpRole=cmIpv6DhcpRole, Ipv6OverIpv4TunnelType=Ipv6OverIpv4TunnelType, cmIpTraceRouteDestination=cmIpTraceRouteDestination, cmIpObjects=cmIpObjects, IpEntryType=IpEntryType, cmIpInterfaceDhcpHostNameEnabled=cmIpInterfaceDhcpHostNameEnabled, cmIpv6OverIpv4TunnelLinkLocalAddress=cmIpv6OverIpv4TunnelLinkLocalAddress, cmIpv6OverIpv4TunnelEntry=cmIpv6OverIpv4TunnelEntry, cmProxyNDPRowStatus=cmProxyNDPRowStatus, ipManagementTunnelDhcpVendorInfoEnabled=ipManagementTunnelDhcpVendorInfoEnabled, cmProxyARPRowStatus=cmProxyARPRowStatus, cmIpv6LinkLocAddr=cmIpv6LinkLocAddr, ipManagementTunnelSVlanEnabled=ipManagementTunnelSVlanEnabled, cmIpv6StaticRouteInterface=cmIpv6StaticRouteInterface, ipCompliances=ipCompliances, ipManagementTunnelEIR=ipManagementTunnelEIR, cmIpInitiatePingAction=cmIpInitiatePingAction, cmIpPingResult=cmIpPingResult, cmARPTable=cmARPTable, cmIpv6PingDestination=cmIpv6PingDestination, cmIpv6InitiatePingAction=cmIpv6InitiatePingAction, cmProxyARPTable=cmProxyARPTable, cmIpSourceAddressInterfaceName=cmIpSourceAddressInterfaceName, cmIpv6DhcpEnabled=cmIpv6DhcpEnabled, cmStaticRouteDest=cmStaticRouteDest, ipManagementTunnelStorageType=ipManagementTunnelStorageType, cmNDPStorageType=cmNDPStorageType, ipManagementTunnelDhcpVendorInfoType=ipManagementTunnelDhcpVendorInfoType, IpManagementTunnelType=IpManagementTunnelType, cmIpInterfaceDhcpNTPServerEnabled=cmIpInterfaceDhcpNTPServerEnabled, ipManagementTunnellinkLocIpv6Addr=ipManagementTunnellinkLocIpv6Addr, cmProxyNDPTable=cmProxyNDPTable, ipManagementTunnelDhcpHostName=ipManagementTunnelDhcpHostName, cmIpProxyARPEnabled=cmIpProxyARPEnabled, cmIpInterfaceGateway=cmIpInterfaceGateway, cmIpSNMPv1InterfaceName=cmIpSNMPv1InterfaceName, cmIpv6OverIpv4TunnelIndex=cmIpv6OverIpv4TunnelIndex, cmIpv6OverIpv4TunnelAssociatedIpv4Interface=cmIpv6OverIpv4TunnelAssociatedIpv4Interface, IpManagementTunnelEncapsulationType=IpManagementTunnelEncapsulationType, cmIpv6InterfaceGateway=cmIpv6InterfaceGateway, cmIpInterfaceMTU=cmIpInterfaceMTU, ipLoopbackInterfaceStorageType=ipLoopbackInterfaceStorageType, cmIpInterfaceDhcpLogServerEnabled=cmIpInterfaceDhcpLogServerEnabled, cmProxyARPStorageType=cmProxyARPStorageType, ipManagementTunnelName=ipManagementTunnelName, ipManagementTunnelDhcpHostNameEnabled=ipManagementTunnelDhcpHostNameEnabled, ipLoopbackInterfaceRowStatus=ipLoopbackInterfaceRowStatus, ipManagementTunnelCVlanEnabled=ipManagementTunnelCVlanEnabled, ipManagementTunnelDhcpClassIdEnabled=ipManagementTunnelDhcpClassIdEnabled, cmIpInterfaceDhcpVendorInfoHideControl=cmIpInterfaceDhcpVendorInfoHideControl, cmIpInterfaceDhcpHostNameType=cmIpInterfaceDhcpHostNameType, cmIpv6OverIpv4TunnelStorageType=cmIpv6OverIpv4TunnelStorageType, cmIpInterfaceDhcpVendorInfoEnabled=cmIpInterfaceDhcpVendorInfoEnabled, cmIpv6ProxyNDPEnabled=cmIpv6ProxyNDPEnabled, ipLoopbackInterfaceMask=ipLoopbackInterfaceMask, cmIpInterfaceDhcpClassIdEnabled=cmIpInterfaceDhcpClassIdEnabled, cmIpv6StaticRouteAdvertise=cmIpv6StaticRouteAdvertise, cmIpv6OverIpv4TunnelName=cmIpv6OverIpv4TunnelName, ipManagementTunnelIpv6RipngEnabled=ipManagementTunnelIpv6RipngEnabled, ipManagementTunnelEntry=ipManagementTunnelEntry, cmIpInterfaceDhcpRole=cmIpInterfaceDhcpRole, ipManagementTunnelRowStatus=ipManagementTunnelRowStatus, cmARPRowStatus=cmARPRowStatus, cmIpInterfaceIpMode=cmIpInterfaceIpMode, ipManagementTunnelDhcpNTPServerEnabled=ipManagementTunnelDhcpNTPServerEnabled, cmIpConformance=cmIpConformance, cmARPStorageType=cmARPStorageType, ipLoopbackInterfaceIpv6Address=ipLoopbackInterfaceIpv6Address, ipManagementTunnelDhcpHostNameType=ipManagementTunnelDhcpHostNameType, ipManagementTunnelIpv6PrefixAdvertiseEnabled=ipManagementTunnelIpv6PrefixAdvertiseEnabled, cmIpPingDestination=cmIpPingDestination, cmIpv6PingInterface=cmIpv6PingInterface, cmIpInterfacePhysicalAddress=cmIpInterfacePhysicalAddress, cmIpInitiateTraceRouteAction=cmIpInitiateTraceRouteAction, cmIpInterfaceDhcpVendorInfoType=cmIpInterfaceDhcpVendorInfoType, cmProxyNDPIpv6Address=cmProxyNDPIpv6Address, cmIpv6StaticRouteDest=cmIpv6StaticRouteDest)
