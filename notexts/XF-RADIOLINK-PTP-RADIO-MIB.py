#
# PySNMP MIB module XF-RADIOLINK-PTP-RADIO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/ericsson/XF-RADIOLINK-PTP-RADIO-MIB
# Produced by pysmi-1.1.12 at Wed May 29 08:09:52 2024
# On host fv-az698-992 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter64, iso, TimeTicks, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, NotificationType, Counter32, Gauge32, Bits, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "iso", "TimeTicks", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "NotificationType", "Counter32", "Gauge32", "Bits", "IpAddress", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xfTermRowIndex, = mibBuilder.importSymbols("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermRowIndex")
xfRadioLink, = mibBuilder.importSymbols("XF-TOP-MIB", "xfRadioLink")
xfRadioLinkPtpRadioMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3))
xfRadioLinkPtpRadioMIB.setRevisions(('2020-09-22 00:00', '2019-11-26 00:00', '2019-10-14 00:00', '2019-06-04 00:00', '2019-05-16 00:00', '2019-04-30 00:00', '2019-01-17 00:00', '2018-10-29 00:00', '2018-09-03 00:00', '2018-04-06 00:00', '2018-01-30 00:00', '2017-11-23 00:00', '2017-09-19 00:00', '2017-09-05 00:00', '2017-07-25 00:00', '2017-06-28 00:00', '2017-05-24 00:00', '2016-12-20 00:00', '2016-06-16 00:00', '2016-06-01 00:00', '2016-05-16 00:00', '2016-05-10 00:00', '2016-04-12 00:00', '2016-02-22 00:00', '2016-02-06 00:00', '2016-02-05 00:00', '2015-12-11 00:00', '2015-11-05 00:00', '2015-08-31 00:00', '2015-07-02 00:00', '2015-06-25 00:00', '2015-06-08 00:00', '2015-04-23 00:00', '2015-04-20 00:00', '2015-04-02 00:00', '2015-02-26 00:00', '2015-01-23 10:00', '2015-01-23 00:00', '2015-01-09 00:00', '2014-02-20 00:00', '2013-11-22 00:00', '2013-11-19 14:00', '2011-05-23 00:00', '2011-02-09 00:00', '2011-02-01 00:00', '2010-12-10 00:00', '2010-10-20 00:00', '2010-09-23 00:00', '2010-06-15 00:00', '2010-06-04 00:00', '2010-01-19 00:00', '2009-12-01 00:00', '2009-11-18 00:00', '2009-06-26 00:00', '2009-06-24 00:00', '2009-04-20 00:00', '2009-04-14 00:00', '2008-10-02 00:00', '2008-09-16 00:00', '2008-06-25 00:00', '2008-06-24 00:00', '2008-06-18 00:00', '2008-06-17 00:00', '2008-06-04 00:00', '2007-06-04 00:00', '2006-09-19 13:20', '2006-08-29 00:00', '2006-03-20 00:00', '2006-02-24 00:00', '2006-01-31 00:00', '2004-12-13 00:00', '2004-07-02 00:00', '2004-06-16 00:00', '2004-05-25 00:00', '2004-04-26 00:00', '2004-01-20 00:00', '2003-12-17 10:00',))
if mibBuilder.loadTexts: xfRadioLinkPtpRadioMIB.setLastUpdated('202009220000Z')
if mibBuilder.loadTexts: xfRadioLinkPtpRadioMIB.setOrganization('Ericsson AB')
class RFTxOperStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("txOff", 2), ("txOn", 3), ("txStandby", 4))

class RAURfLoopAvailable(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("rfLoopAvailable", 2), ("rfLoopNotAvailable", 3))

class RAUAtpcCapability(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("noAtpcSupport", 2), ("doesNotExist", 3), ("atpcCapabilityUnknown", 4), ("supportsAtpc", 5))

class RAUModCapability(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("cqpsk", 0), ("qam16", 1), ("qam128", 2), ("qam32", 3), ("qam64", 4))

class RAUChannelSpacingCapability(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("chspUnknown", 0), ("chsp7MHz", 1), ("chsp14MHz", 2), ("chsp20MHz", 3), ("chsp28MHz", 4), ("chsp30MHz", 5), ("chsp40MHz", 6), ("chsp50MHz", 7), ("chsp56MHz", 8), ("chsp10MHz", 9), ("chsp3500KHz", 10), ("chsp60MHz", 11))

class RauSec(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("other", 1), ("sec2", 2), ("sec3", 3), ("sec4L", 4), ("sec4H", 5), ("sec5A", 6), ("sec5B", 7), ("sec6A", 8), ("sec6B", 9))

class RAUModulation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("other", 1), ("cqpsk", 2), ("qam16", 3), ("qam128", 4), ("qam32", 5), ("qam64", 6), ("qam4", 7), ("qam8", 8), ("qam256", 9), ("qam512", 10), ("qam1024", 11))

class ATPCFallbackEnable(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("disable", 2), ("enable", 3))

class RfOutputPower(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), )
class RfInputPower(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), )
class BoosterCapability(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("noBoosterSupport", 2), ("boosterSupport", 3))

xfRadioLinkPtpRadioObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1))
xfRadioLinkPtpRadioConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 2))
xfRAUTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1), )
if mibBuilder.loadTexts: xfRAUTable.setStatus('current')
xfRAUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: xfRAUEntry.setStatus('current')
xfRAUAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("atpcCapability0", 0), ("atpcCapability1", 1), ("atpcCapability2", 2), ("configurationInvalid0", 3), ("configurationInvalid1", 4), ("configurationInvalid2", 5), ("sdcHwErrorMain0", 6), ("sdcHwErrorMain1", 7), ("sdcHwErrorMain2", 8), ("sdcHwErrorDiv0", 9), ("sdcHwErrorDiv1", 10), ("sdcHwErrorDiv2", 11), ("sdcDadeCalMismatch0", 12), ("sdcDadeCalMismatch1", 13), ("sdcDadeCalMismatch2", 14), ("insufficientResourceRauXpic0", 15), ("insufficientResourceRauXpic1", 16), ("insufficientResourceRauXpic2", 17), ("companionRauMismatch0", 18), ("companionRauMismatch1", 19), ("companionRauMismatch2", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUAlarmStatus.setStatus('current')
xfRAURfLoopAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 2), RAURfLoopAvailable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAURfLoopAvailable.setStatus('current')
xfRAUAtpcCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 3), RAUAtpcCapability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUAtpcCapability.setStatus('current')
xfRAULocalCtrlCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noLocalControlSupport", 2), ("supportsLocalControl", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAULocalCtrlCapability.setStatus('current')
xfRAUModCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 5), RAUModCapability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUModCapability.setStatus('current')
xfRAUFrequencyband = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUFrequencyband.setStatus('current')
xfRAUSubBand = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRAUSubBand.setStatus('current')
xfRAUTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUTemperature.setStatus('current')
xfRAUProtectionPath = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("rauRa1", 2), ("rauRa2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUProtectionPath.setStatus('current')
xfRAURxCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("rxSupport", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAURxCapability.setStatus('current')
xfRAUNotes = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRAUNotes.setStatus('current')
xfRauAtpcVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("version1", 2), ("version2", 3), ("version3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRauAtpcVersion.setStatus('current')
xfRauBoosterCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 13), BoosterCapability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRauBoosterCapability.setStatus('current')
xfRauBoosterSelectedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRauBoosterSelectedIndex.setStatus('current')
xfRFIFTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2), )
if mibBuilder.loadTexts: xfRFIFTable.setStatus('current')
xfRFIFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRFIFEntry.setStatus('current')
xfRFBaseTxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFBaseTxFrequency.setStatus('current')
xfRFBaseRxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFBaseRxFrequency.setStatus('current')
xfRFStepSize = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFStepSize.setStatus('current')
xfRFStepLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFStepLimitLow.setStatus('current')
xfRFStepLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFStepLimitHigh.setStatus('current')
xfRFCurrentStepNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFCurrentStepNumber.setStatus('current')
xfRFTxOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 7), RFTxOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFTxOperStatus.setStatus('current')
xfRFTxAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("txOff", 2), ("txOn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFTxAdminStatus.setStatus('current')
xfRFLoopEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFLoopEnable.setStatus('current')
xfRFAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 10), Bits().clone(namedValues=NamedValues(("txFrequency0", 0), ("txFrequency1", 1), ("txFrequency2", 2), ("rxFrequency0", 3), ("rxFrequency1", 4), ("rxFrequency2", 5), ("rfOutputLevel0", 6), ("rfOutputLevel1", 7), ("rfOutputLevel2", 8), ("rxAfc0", 9), ("rxAfc1", 10), ("rxAfc2", 11), ("rfInputLevel0", 12), ("rfInputLevel1", 13), ("rfInputLevel2", 14), ("rfInputThreshold0", 15), ("rfInputThreshold1", 16), ("rfInputThreshold2", 17), ("rfOutputLevelATPC0", 18), ("rfOutputLevelATPC1", 19), ("rfOutputLevelATPC2", 20), ("sdcRfInputLevelMain0", 21), ("sdcRfInputLevelMain1", 22), ("sdcRfInputLevelMain2", 23), ("sdcRfInputLevelDiv0", 24), ("sdcRfInputLevelDiv1", 25), ("sdcRfInputLevelDiv2", 26), ("rlts1Counter15m0", 27), ("rlts1Counter15m1", 28), ("rlts1Counter15m2", 29), ("rlts2Counter15m0", 30), ("rlts2Counter15m1", 31), ("rlts2Counter15m2", 32), ("rltmCounter15m0", 33), ("rltmCounter15m1", 34), ("rltmCounter15m2", 35), ("tlts1Counter15m0", 36), ("tlts1Counter15m1", 37), ("tlts1Counter15m2", 38), ("tltmCounter15m0", 39), ("tltmCounter15m1", 40), ("tltmCounter15m2", 41), ("rlts1Counter24h0", 42), ("rlts1Counter24h1", 43), ("rlts1Counter24h2", 44), ("rlts2Counter24h0", 45), ("rlts2Counter24h1", 46), ("rlts2Counter24h2", 47), ("rltmCounter24h0", 48), ("rltmCounter24h1", 49), ("rltmCounter24h2", 50), ("tlts1Counter24h0", 51), ("tlts1Counter24h1", 52), ("tlts1Counter24h2", 53), ("tltmCounter24h0", 54), ("tltmCounter24h1", 55), ("tltmCounter24h2", 56), ("remoteRfIfHighestSeverityAlarm0", 57), ("remoteRfIfHighestSeverityAlarm1", 58), ("remoteRfIfHighestSeverityAlarm2", 59), ("ifcabledamaged0", 60), ("ifcabledamaged1", 61), ("ifcabledamaged2", 62)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFAlarms.setStatus('current')
xfRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 11), Bits().clone(namedValues=NamedValues(("rfLoop0", 0), ("rfLoop1", 1), ("rfLoop2", 2), ("txOff0", 3), ("txOff1", 4), ("txOff2", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFStatus.setStatus('current')
xfRFStepSizeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFStepSizeRx.setStatus('current')
xfRFStepLimitLowRx = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFStepLimitLowRx.setStatus('current')
xfRFStepLimitHighRx = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFStepLimitHighRx.setStatus('current')
xfRFCurrentStepNumberRx = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFCurrentStepNumberRx.setStatus('current')
xfRFDuplexType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("fixed", 2), ("variable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFDuplexType.setStatus('current')
xfRFDuplexConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFDuplexConfig.setStatus('current')
xfRFDuplexDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFDuplexDistance.setStatus('current')
xfRFPowerTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3), )
if mibBuilder.loadTexts: xfRFPowerTable.setStatus('current')
xfRFPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRFPowerEntry.setStatus('current')
xfRFCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFCurrentOutputPower.setStatus('current')
xfRFRtpcMinOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFRtpcMinOutputPower.setStatus('current')
xfRFRtpcMaxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFRtpcMaxOutputPower.setStatus('current')
xfRFRtpcSelectedOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(254, 254), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFRtpcSelectedOutputPower.setStatus('current')
xfRFAtpcMinOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFAtpcMinOutputPower.setStatus('current')
xfRFAtpcMaxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(254, 254), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFAtpcMaxOutputPower.setStatus('current')
xfRFAtpcMinInputPowerFar = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-99, -30), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFAtpcMinInputPowerFar.setStatus('current')
xfRFAtpcSelectedInputPowerFar = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFAtpcSelectedInputPowerFar.setStatus('current')
xfRFAttenuator = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFAttenuator.setStatus('current')
xfRFCurrentInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, -200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFCurrentInputPower.setStatus('current')
xfRFMaxInputPowerLast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMaxInputPowerLast7Days.setStatus('current')
xfRFMinInputPowerLast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMinInputPowerLast7Days.setStatus('current')
xfRFMaxInputPowerSinceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, -200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMaxInputPowerSinceReset.setStatus('current')
xfRFMinInputPowerSinceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, -200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMinInputPowerSinceReset.setStatus('current')
xfRFInputPowerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("inputPowerReset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFInputPowerReset.setStatus('current')
xfRFInputAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFInputAlarmThreshold.setStatus('current')
xfRFOutputPower4QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFOutputPower4QAM.setStatus('current')
xfRFOutputPower8QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFOutputPower8QAM.setStatus('current')
xfRFOutputPower16QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFOutputPower16QAM.setStatus('current')
xfRFOutputPower32QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFOutputPower32QAM.setStatus('current')
xfRFOutputPower64QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFOutputPower64QAM.setStatus('current')
xfRFOutputPower128QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFOutputPower128QAM.setStatus('current')
xfRFOutputPower256QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFOutputPower256QAM.setStatus('current')
xfRFOutputPower512QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFOutputPower512QAM.setStatus('current')
xfRFAtpcFallbackOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(254, 254), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFAtpcFallbackOutputPower.setStatus('current')
xfRFAtpcFallbackEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 26), ATPCFallbackEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFAtpcFallbackEnable.setStatus('current')
xfRFAtpcFallbackTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFAtpcFallbackTimer.setStatus('current')
xfRFOutputPower1024QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFOutputPower1024QAM.setStatus('current')
xfRFMaxOutputPowerNotLimited = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMaxOutputPowerNotLimited.setStatus('current')
xfRFMaxOutputPowerNotPossible = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("isPossible", 1), ("isNotPossible", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMaxOutputPowerNotPossible.setStatus('current')
xfRFCurrentInputPowerSdcMain = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFCurrentInputPowerSdcMain.setStatus('current')
xfRFCurrentInputPowerSdcDiv = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFCurrentInputPowerSdcDiv.setStatus('current')
xfRFMeanInputPower1m = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMeanInputPower1m.setStatus('current')
xfRFMaxOutputPowerLast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMaxOutputPowerLast7Days.setStatus('current')
xfRFMinOutputPowerLast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMinOutputPowerLast7Days.setStatus('current')
xfRFMaxOutputPowerSinceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMaxOutputPowerSinceReset.setStatus('current')
xfRFMinOutputPowerSinceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMinOutputPowerSinceReset.setStatus('current')
xfRFMaxMSELast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMaxMSELast7Days.setStatus('current')
xfRFMinMSELast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMinMSELast7Days.setStatus('current')
xfRFMaxXPILast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMaxXPILast7Days.setStatus('current')
xfRFMinXPILast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMinXPILast7Days.setStatus('current')
xfRFOutputPowerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("outputPowerReset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFOutputPowerReset.setStatus('current')
xfRFBoosterGain = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFBoosterGain.setStatus('current')
xfRFBoosterMaxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 35), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFBoosterMaxInputPower.setStatus('current')
xfRFBoosterCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 45), BoosterCapability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFBoosterCapability.setStatus('current')
xfRFBoosterProductNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFBoosterProductNumber.setStatus('current')
xfRFBoosterHWRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFBoosterHWRevision.setStatus('current')
xfRAUCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 4), )
if mibBuilder.loadTexts: xfRAUCapabilityTable.setStatus('current')
xfRAUCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermRowIndex"))
if mibBuilder.loadTexts: xfRAUCapabilityEntry.setStatus('current')
xfRAUChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 4, 1, 1), RAUChannelSpacingCapability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUChannelSpacing.setStatus('current')
xfRAUChannelModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 4, 1, 2), RAUModulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUChannelModulation.setStatus('current')
xfRAUSpectrumEfficiencyClass = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 4, 1, 3), RauSec()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUSpectrumEfficiencyClass.setStatus('current')
xfRAUCarrierMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("singleCarrier", 1), ("xpicDualCarrier", 2), ("mimoMultiCarrier", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUCarrierMode.setStatus('current')
xfRAUSubBandTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 5), )
if mibBuilder.loadTexts: xfRAUSubBandTable.setStatus('current')
xfRAUSubBandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUSubBandIndex"))
if mibBuilder.loadTexts: xfRAUSubBandEntry.setStatus('current')
xfRAUSubBandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUSubBandIndex.setStatus('current')
xfRAUSubBandRange = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUSubBandRange.setStatus('current')
xfRFSpectrumDiagTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6), )
if mibBuilder.loadTexts: xfRFSpectrumDiagTable.setStatus('current')
xfRFSpectrumDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRFSpectrumDiagEntry.setStatus('current')
xfRFSpectrumDiagAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("other", 1), ("channelScanStart", 2), ("subBandScanStart", 3), ("scanStop", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFSpectrumDiagAdminStatus.setStatus('current')
xfRFSpectrumDiagOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("scanNotStarted", 0), ("subBandScanOngoing", 1), ("channelScanOngoing", 2), ("scanCanceled", 3), ("subBandScanFinished", 4), ("channelScanFinished", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagOperStatus.setStatus('current')
xfRFSpectrumDiagChannelScanEstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagChannelScanEstTime.setStatus('current')
xfRFSpectrumDiagSubBandScanEstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagSubBandScanEstTime.setStatus('current')
xfRFSpectrumDiagScanDate = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagScanDate.setStatus('current')
xfRFSpectrumDiagChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagChannelSpacing.setStatus('current')
xfRFSpectrumDiagCurrRxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagCurrRxFrequency.setStatus('current')
xfRFSpectrumDiagMinRxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagMinRxFrequency.setStatus('current')
xfRFSpectrumDiagMaxRxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagMaxRxFrequency.setStatus('current')
xfRFSpectrumDiagIdxCompanion1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagIdxCompanion1.setStatus('current')
xfRFSpectrumDiagIdxCompanion2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagIdxCompanion2.setStatus('current')
xfRFSpectrumDiagIdxCompanion3 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagIdxCompanion3.setStatus('current')
xfRFSpectrumDiagProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagProgress.setStatus('current')
xfRFSpectrumDiagResultTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 7), )
if mibBuilder.loadTexts: xfRFSpectrumDiagResultTable.setStatus('current')
xfRFSpectrumDiagResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagResultIndex"))
if mibBuilder.loadTexts: xfRFSpectrumDiagResultEntry.setStatus('current')
xfRFSpectrumDiagResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagResultIndex.setStatus('current')
xfRFSpectrumDiagResultRxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagResultRxFrequency.setStatus('current')
xfRFSpectrumDiagResultRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, -200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagResultRxPower.setStatus('current')
xfRfIfPowerTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8), )
if mibBuilder.loadTexts: xfRfIfPowerTable.setStatus('current')
xfRfIfPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRfIfPowerEntry.setStatus('current')
xfRfSelectedMinOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 1), RfOutputPower()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRfSelectedMinOutputPower.setStatus('current')
xfRfSelectedMaxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 2), RfOutputPower()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRfSelectedMaxOutputPower.setStatus('current')
xfRfCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 3), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfCurrentOutputPower.setStatus('current')
xfRfMinOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 4), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMinOutputPower.setStatus('current')
xfRfMaxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 5), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMaxOutputPower.setStatus('current')
xfRfAtpcTargetInputPowerFE = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRfAtpcTargetInputPowerFE.setStatus('current')
xfRfCurrentInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 7), RfInputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfCurrentInputPower.setStatus('current')
xfRfMaxInputPowerLast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 8), RfInputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMaxInputPowerLast7Days.setStatus('current')
xfRfMinInputPowerLast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 9), RfInputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMinInputPowerLast7Days.setStatus('current')
xfRfMaxInputPowerSinceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 10), RfInputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMaxInputPowerSinceReset.setStatus('current')
xfRfMinInputPowerSinceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 11), RfInputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMinInputPowerSinceReset.setStatus('current')
xfRfInputPowerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("inputPowerNoReset", 2), ("inputPowerReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRfInputPowerReset.setStatus('current')
xfRfInputAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRfInputAlarmThreshold.setStatus('current')
xfRfOutputPower4QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 14), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower4QAM.setStatus('current')
xfRfOutputPower16QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 15), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower16QAM.setStatus('current')
xfRfOutputPower32QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 16), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower32QAM.setStatus('current')
xfRfOutputPower64QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 17), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower64QAM.setStatus('current')
xfRfOutputPower128QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 18), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower128QAM.setStatus('current')
xfRfOutputPower256QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 19), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower256QAM.setStatus('current')
xfRfOutputPower512QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 20), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower512QAM.setStatus('current')
xfRfOutputPower1024QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 21), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower1024QAM.setStatus('current')
xfRfOutputPower2048QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 22), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower2048QAM.setStatus('current')
xfRfOutputPower4096QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 23), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower4096QAM.setStatus('current')
xfRfMaxOutputPowerNotLimited = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 24), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMaxOutputPowerNotLimited.setStatus('current')
xfRfMaxOutputPowerPossible = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("possible", 2), ("notPossible", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMaxOutputPowerPossible.setStatus('current')
xfRfMeanInputPower1m = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMeanInputPower1m.setStatus('current')
xfRfMaxOutputPowerLast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMaxOutputPowerLast7Days.setStatus('current')
xfRfMinOutputPowerLast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMinOutputPowerLast7Days.setStatus('current')
xfRfMaxOutputPowerSinceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMaxOutputPowerSinceReset.setStatus('current')
xfRfMinOutputPowerSinceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMinOutputPowerSinceReset.setStatus('current')
xfRfOutputPowerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("outputPowerNoReset", 2), ("outputPowerReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRfOutputPowerReset.setStatus('current')
xfRfAvailableOutputPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("standardPower", 2), ("highPower", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfAvailableOutputPowerType.setStatus('current')
xfRfSelectedOutputPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("standardPower", 2), ("highPower", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRfSelectedOutputPowerType.setStatus('current')
xfRfTaps = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRfTaps.setStatus('current')
xfRfCurrentInputPowerSdcMain = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 35), RfInputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfCurrentInputPowerSdcMain.setStatus('current')
xfRfCurrentInputPowerSdcDiv = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 36), RfInputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfCurrentInputPowerSdcDiv.setStatus('current')
xfRfOutputPower8192QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 37), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower8192QAM.setStatus('current')
xfRfOutputPower16384QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 38), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower16384QAM.setStatus('current')
xfRfAtpcFallbackOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 39), RfOutputPower()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRfAtpcFallbackOutputPower.setStatus('current')
xfRfAtpcFallbackEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 40), ATPCFallbackEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRfAtpcFallbackEnable.setStatus('current')
xfRfAtpcFallbackTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRfAtpcFallbackTimer.setStatus('current')
xfRFIFCableMonitoringTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9), )
if mibBuilder.loadTexts: xfRFIFCableMonitoringTable.setStatus('current')
xfRFIFCableMonitoringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRFIFCableMonitoringEntry.setStatus('current')
xfRFIFCMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFIFCMStatus.setStatus('current')
xfRFOutlierAgc = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFOutlierAgc.setStatus('current')
xfRFOutlierSetTh = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFOutlierSetTh.setStatus('current')
xfRFOutlierCeaseTh = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFOutlierCeaseTh.setStatus('current')
xfRFRangeAgc = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFRangeAgc.setStatus('current')
xfRFRangeSetTh = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFRangeSetTh.setStatus('current')
xfRFRangeCeaseTh = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFRangeCeaseTh.setStatus('current')
xfRFStddevAgc = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFStddevAgc.setStatus('current')
xfRFStddevSetTh = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFStddevSetTh.setStatus('current')
xfRFStddevCeaseTh = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFStddevCeaseTh.setStatus('current')
xfRFDegradationAgc = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFDegradationAgc.setStatus('current')
xfRFDegradationSetTh = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFDegradationSetTh.setStatus('current')
xfRFDegradationCeaseTh = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFDegradationCeaseTh.setStatus('current')
xfRFMarginAgc = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFMarginAgc.setStatus('current')
xfRFMarginSetTh = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFMarginSetTh.setStatus('current')
xfRFMarginCeaseTh = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFMarginCeaseTh.setStatus('current')
xfRFOutlierValue = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFOutlierValue.setStatus('current')
xfRFRangeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFRangeValue.setStatus('current')
xfRFStddevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFStddevValue.setStatus('current')
xfRFDegradationValue = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFDegradationValue.setStatus('current')
xfRFMarginValue = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMarginValue.setStatus('current')
xfRFOutlierTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noSetThreshold", 2), ("setThreshold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFOutlierTrigger.setStatus('current')
xfRFRangeTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noSetThreshold", 2), ("setThreshold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFRangeTrigger.setStatus('current')
xfRFStddevTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noSetThreshold", 2), ("setThreshold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFStddevTrigger.setStatus('current')
xfRFDegradationTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noSetThreshold", 2), ("setThreshold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFDegradationTrigger.setStatus('current')
xfRFMarginTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noSetThreshold", 2), ("setThreshold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMarginTrigger.setStatus('current')
xfSdcTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10), )
if mibBuilder.loadTexts: xfSdcTable.setStatus('current')
xfSdcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: xfSdcEntry.setStatus('current')
xfSdcCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("sdcSupported", 2), ("sdcNotSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfSdcCapability.setStatus('current')
xfSdcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("sdcEnabled", 2), ("sdcDisabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfSdcAdminStatus.setStatus('current')
xfSdcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("sdcEnabled", 2), ("sdcDisabled", 3), ("sdcInProgress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfSdcOperStatus.setStatus('current')
xfSdcDadeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("sdcDadeStart", 2), ("sdcDadeAbort", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfSdcDadeControl.setStatus('current')
xfSdcDadeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("sdcCalibrated", 2), ("sdcNotCalibrated", 3), ("sdcCalInProgress", 4), ("sdcCalMismatch", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfSdcDadeStatus.setStatus('current')
xfSdcPath = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("sdcAuto", 2), ("sdcMain", 3), ("sdcDiv", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfSdcPath.setStatus('current')
xfSdcOduDateTimeCalibration = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfSdcOduDateTimeCalibration.setStatus('current')
xfSdcOduSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfSdcOduSerialNumber.setStatus('current')
xfSdcGain = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfSdcGain.setStatus('current')
xfSdcActualPath = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("sdcAuto", 2), ("sdcMain", 3), ("sdcDiv", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfSdcActualPath.setStatus('current')
xfSdcDadeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfSdcDadeDelay.setStatus('current')
xfRadioLinkPtpRadioCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 2, 1))
xfRadioLinkPtpRadioGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 2, 2))
xfRADIOLINKPTPRADIOFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 2, 1, 1)).setObjects(("XF-RADIOLINK-PTP-RADIO-MIB", "xfRadioLinkPtpRadioCompleteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xfRADIOLINKPTPRADIOFullCompliance = xfRADIOLINKPTPRADIOFullCompliance.setStatus('current')
xfRadioLinkPtpRadioCompleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 2, 2, 1)).setObjects(("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUAlarmStatus"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAURfLoopAvailable"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUAtpcCapability"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAULocalCtrlCapability"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUModCapability"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUFrequencyband"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUSubBand"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUTemperature"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUProtectionPath"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAURxCapability"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUNotes"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRauAtpcVersion"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRauBoosterCapability"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRauBoosterSelectedIndex"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFBaseTxFrequency"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFBaseRxFrequency"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStepSize"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStepLimitLow"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStepLimitHigh"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFCurrentStepNumber"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFTxOperStatus"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFTxAdminStatus"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFLoopEnable"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFAlarms"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStatus"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStepSizeRx"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStepLimitLowRx"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStepLimitHighRx"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFCurrentStepNumberRx"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFDuplexType"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFDuplexConfig"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFDuplexDistance"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFCurrentOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFRtpcMinOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFRtpcMaxOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFRtpcSelectedOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFAtpcMinOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFAtpcMaxOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFAtpcMinInputPowerFar"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFAtpcSelectedInputPowerFar"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFAttenuator"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFCurrentInputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMaxInputPowerLast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMinInputPowerLast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMaxInputPowerSinceReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMinInputPowerSinceReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFInputPowerReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFInputAlarmThreshold"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUChannelSpacing"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUChannelModulation"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUSpectrumEfficiencyClass"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUCarrierMode"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutputPower4QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutputPower8QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutputPower16QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutputPower32QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutputPower64QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutputPower128QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutputPower256QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutputPower512QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFAtpcFallbackOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFAtpcFallbackEnable"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFAtpcFallbackTimer"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutputPower1024QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMaxOutputPowerNotLimited"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMaxOutputPowerNotPossible"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFCurrentInputPowerSdcMain"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFCurrentInputPowerSdcDiv"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUSubBandIndex"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUSubBandRange"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMeanInputPower1m"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMaxOutputPowerLast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMinOutputPowerLast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMaxOutputPowerSinceReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMinOutputPowerSinceReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMaxMSELast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMinMSELast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMaxXPILast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMinXPILast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutputPowerReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfAvailableOutputPowerType"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfSelectedOutputPowerType"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfTaps"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfSelectedMinOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfSelectedMaxOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfCurrentOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMinOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMaxOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfAtpcTargetInputPowerFE"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfCurrentInputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMaxInputPowerLast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMinInputPowerLast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMaxInputPowerSinceReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMinInputPowerSinceReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfInputPowerReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfInputAlarmThreshold"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower4QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower16QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower32QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower64QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower128QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower256QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower512QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower1024QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower2048QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower4096QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower8192QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower16384QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfAtpcFallbackOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfAtpcFallbackEnable"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfAtpcFallbackTimer"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMaxOutputPowerNotLimited"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMaxOutputPowerPossible"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMeanInputPower1m"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMaxOutputPowerLast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMinOutputPowerLast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMaxOutputPowerSinceReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMinOutputPowerSinceReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPowerReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagAdminStatus"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagOperStatus"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagChannelScanEstTime"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagSubBandScanEstTime"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagScanDate"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagChannelSpacing"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagCurrRxFrequency"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagMinRxFrequency"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagMaxRxFrequency"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagIdxCompanion1"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagIdxCompanion2"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagIdxCompanion3"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagProgress"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagResultIndex"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagResultRxFrequency"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagResultRxPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFBoosterGain"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFBoosterMaxInputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFBoosterCapability"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFBoosterProductNumber"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFBoosterHWRevision"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFIFCMStatus"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutlierAgc"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutlierSetTh"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutlierCeaseTh"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFRangeAgc"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFRangeSetTh"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFRangeCeaseTh"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStddevAgc"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStddevSetTh"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStddevCeaseTh"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFDegradationAgc"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFDegradationSetTh"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFDegradationCeaseTh"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMarginAgc"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMarginSetTh"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMarginCeaseTh"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutlierValue"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFRangeValue"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStddevValue"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFDegradationValue"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMarginValue"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutlierTrigger"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFRangeTrigger"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStddevTrigger"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFDegradationTrigger"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMarginTrigger"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfSdcCapability"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfSdcAdminStatus"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfSdcOperStatus"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfSdcDadeControl"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfSdcDadeStatus"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfSdcPath"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfSdcOduDateTimeCalibration"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfSdcOduSerialNumber"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfSdcGain"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfSdcActualPath"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfSdcDadeDelay"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfCurrentInputPowerSdcMain"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfCurrentInputPowerSdcDiv"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xfRadioLinkPtpRadioCompleteGroup = xfRadioLinkPtpRadioCompleteGroup.setStatus('current')
mibBuilder.exportSymbols("XF-RADIOLINK-PTP-RADIO-MIB", xfRAUSubBandTable=xfRAUSubBandTable, xfRfCurrentInputPower=xfRfCurrentInputPower, xfRFRtpcMinOutputPower=xfRFRtpcMinOutputPower, xfRFSpectrumDiagResultIndex=xfRFSpectrumDiagResultIndex, xfRFDegradationValue=xfRFDegradationValue, xfRFTxAdminStatus=xfRFTxAdminStatus, xfRfCurrentInputPowerSdcMain=xfRfCurrentInputPowerSdcMain, xfRFIFCMStatus=xfRFIFCMStatus, xfSdcDadeStatus=xfSdcDadeStatus, xfRFMinMSELast7Days=xfRFMinMSELast7Days, xfRfMinInputPowerSinceReset=xfRfMinInputPowerSinceReset, xfSdcOperStatus=xfSdcOperStatus, xfRFMaxMSELast7Days=xfRFMaxMSELast7Days, xfRAULocalCtrlCapability=xfRAULocalCtrlCapability, xfRFRangeSetTh=xfRFRangeSetTh, xfRFCurrentInputPowerSdcDiv=xfRFCurrentInputPowerSdcDiv, xfRAURxCapability=xfRAURxCapability, xfRfIfPowerTable=xfRfIfPowerTable, xfRFDegradationAgc=xfRFDegradationAgc, xfRFBaseTxFrequency=xfRFBaseTxFrequency, xfRFMaxOutputPowerSinceReset=xfRFMaxOutputPowerSinceReset, xfRfOutputPower8192QAM=xfRfOutputPower8192QAM, xfRFInputAlarmThreshold=xfRFInputAlarmThreshold, xfRFStddevValue=xfRFStddevValue, xfSdcAdminStatus=xfSdcAdminStatus, xfRauAtpcVersion=xfRauAtpcVersion, xfRFRtpcSelectedOutputPower=xfRFRtpcSelectedOutputPower, xfRadioLinkPtpRadioMIB=xfRadioLinkPtpRadioMIB, xfRAUFrequencyband=xfRAUFrequencyband, xfRFDuplexConfig=xfRFDuplexConfig, PYSNMP_MODULE_ID=xfRadioLinkPtpRadioMIB, xfRFOutputPower256QAM=xfRFOutputPower256QAM, xfRFSpectrumDiagCurrRxFrequency=xfRFSpectrumDiagCurrRxFrequency, xfRfAvailableOutputPowerType=xfRfAvailableOutputPowerType, xfRadioLinkPtpRadioGroups=xfRadioLinkPtpRadioGroups, xfRAUSpectrumEfficiencyClass=xfRAUSpectrumEfficiencyClass, xfRAUCarrierMode=xfRAUCarrierMode, xfRFBoosterMaxInputPower=xfRFBoosterMaxInputPower, xfRauBoosterSelectedIndex=xfRauBoosterSelectedIndex, xfRFDegradationSetTh=xfRFDegradationSetTh, xfRAUNotes=xfRAUNotes, xfRfCurrentInputPowerSdcDiv=xfRfCurrentInputPowerSdcDiv, xfRFIFEntry=xfRFIFEntry, xfRFSpectrumDiagResultEntry=xfRFSpectrumDiagResultEntry, xfRFAtpcFallbackTimer=xfRFAtpcFallbackTimer, xfRfOutputPower16384QAM=xfRfOutputPower16384QAM, xfRFBoosterCapability=xfRFBoosterCapability, xfRFMarginTrigger=xfRFMarginTrigger, xfRadioLinkPtpRadioConformance=xfRadioLinkPtpRadioConformance, xfRFRtpcMaxOutputPower=xfRFRtpcMaxOutputPower, xfRFOutputPower128QAM=xfRFOutputPower128QAM, xfRFSpectrumDiagChannelSpacing=xfRFSpectrumDiagChannelSpacing, xfRfOutputPower4096QAM=xfRfOutputPower4096QAM, xfRFOutputPower8QAM=xfRFOutputPower8QAM, xfRfMaxInputPowerLast7Days=xfRfMaxInputPowerLast7Days, xfRFBaseRxFrequency=xfRFBaseRxFrequency, xfRFAlarms=xfRFAlarms, RFTxOperStatus=RFTxOperStatus, xfSdcPath=xfSdcPath, xfSdcGain=xfSdcGain, xfRfOutputPowerReset=xfRfOutputPowerReset, ATPCFallbackEnable=ATPCFallbackEnable, xfRFAtpcSelectedInputPowerFar=xfRFAtpcSelectedInputPowerFar, xfRfSelectedMaxOutputPower=xfRfSelectedMaxOutputPower, xfRFSpectrumDiagIdxCompanion3=xfRFSpectrumDiagIdxCompanion3, RAUModCapability=RAUModCapability, xfSdcDadeControl=xfSdcDadeControl, RAUChannelSpacingCapability=RAUChannelSpacingCapability, xfRFMinInputPowerLast7Days=xfRFMinInputPowerLast7Days, xfRAUTemperature=xfRAUTemperature, xfRFDegradationCeaseTh=xfRFDegradationCeaseTh, xfRAUAtpcCapability=xfRAUAtpcCapability, xfRFStepLimitHigh=xfRFStepLimitHigh, xfRFOutputPower32QAM=xfRFOutputPower32QAM, xfRAUCapabilityEntry=xfRAUCapabilityEntry, xfRFIFCableMonitoringTable=xfRFIFCableMonitoringTable, xfRFStddevCeaseTh=xfRFStddevCeaseTh, xfRFOutputPower512QAM=xfRFOutputPower512QAM, xfRadioLinkPtpRadioObjects=xfRadioLinkPtpRadioObjects, xfRFStatus=xfRFStatus, xfRFOutlierCeaseTh=xfRFOutlierCeaseTh, xfRfMeanInputPower1m=xfRfMeanInputPower1m, xfRFAttenuator=xfRFAttenuator, xfRfMinOutputPowerSinceReset=xfRfMinOutputPowerSinceReset, xfRFCurrentOutputPower=xfRFCurrentOutputPower, xfRAUChannelModulation=xfRAUChannelModulation, xfRFLoopEnable=xfRFLoopEnable, xfRFMaxOutputPowerNotPossible=xfRFMaxOutputPowerNotPossible, xfRFSpectrumDiagMinRxFrequency=xfRFSpectrumDiagMinRxFrequency, xfRFMinOutputPowerLast7Days=xfRFMinOutputPowerLast7Days, xfRFMarginSetTh=xfRFMarginSetTh, xfRFStepLimitLowRx=xfRFStepLimitLowRx, xfRfAtpcTargetInputPowerFE=xfRfAtpcTargetInputPowerFE, xfRFSpectrumDiagAdminStatus=xfRFSpectrumDiagAdminStatus, xfRAUAlarmStatus=xfRAUAlarmStatus, xfRfMaxInputPowerSinceReset=xfRfMaxInputPowerSinceReset, xfSdcTable=xfSdcTable, xfRFBoosterHWRevision=xfRFBoosterHWRevision, xfRfOutputPower32QAM=xfRfOutputPower32QAM, xfRauBoosterCapability=xfRauBoosterCapability, xfRAUSubBandRange=xfRAUSubBandRange, xfRAUSubBandEntry=xfRAUSubBandEntry, xfRFAtpcMinInputPowerFar=xfRFAtpcMinInputPowerFar, xfRFMarginValue=xfRFMarginValue, xfRFSpectrumDiagChannelScanEstTime=xfRFSpectrumDiagChannelScanEstTime, xfRFStddevTrigger=xfRFStddevTrigger, RauSec=RauSec, xfSdcCapability=xfSdcCapability, xfRFSpectrumDiagResultRxPower=xfRFSpectrumDiagResultRxPower, xfRfMaxOutputPowerPossible=xfRfMaxOutputPowerPossible, xfRFStddevAgc=xfRFStddevAgc, xfRFOutlierSetTh=xfRFOutlierSetTh, RfInputPower=RfInputPower, xfRFInputPowerReset=xfRFInputPowerReset, xfRFSpectrumDiagIdxCompanion2=xfRFSpectrumDiagIdxCompanion2, xfRFIFTable=xfRFIFTable, xfRFOutputPower4QAM=xfRFOutputPower4QAM, xfRfSelectedOutputPowerType=xfRfSelectedOutputPowerType, RAURfLoopAvailable=RAURfLoopAvailable, xfRFSpectrumDiagIdxCompanion1=xfRFSpectrumDiagIdxCompanion1, xfRfMinInputPowerLast7Days=xfRfMinInputPowerLast7Days, xfRFAtpcMaxOutputPower=xfRFAtpcMaxOutputPower, xfRfMinOutputPower=xfRfMinOutputPower, xfRfCurrentOutputPower=xfRfCurrentOutputPower, xfRfOutputPower64QAM=xfRfOutputPower64QAM, RAUModulation=RAUModulation, xfRfTaps=xfRfTaps, xfRadioLinkPtpRadioCompleteGroup=xfRadioLinkPtpRadioCompleteGroup, xfRfInputPowerReset=xfRfInputPowerReset, xfRAUSubBand=xfRAUSubBand, xfRAUModCapability=xfRAUModCapability, xfRFSpectrumDiagResultRxFrequency=xfRFSpectrumDiagResultRxFrequency, xfRFMinInputPowerSinceReset=xfRFMinInputPowerSinceReset, xfRFMaxXPILast7Days=xfRFMaxXPILast7Days, xfRfOutputPower128QAM=xfRfOutputPower128QAM, xfRFDuplexDistance=xfRFDuplexDistance, xfRfOutputPower4QAM=xfRfOutputPower4QAM, xfRfOutputPower1024QAM=xfRfOutputPower1024QAM, xfRFAtpcMinOutputPower=xfRFAtpcMinOutputPower, xfRfAtpcFallbackOutputPower=xfRfAtpcFallbackOutputPower, xfSdcEntry=xfSdcEntry, xfRFStepSizeRx=xfRFStepSizeRx, xfRFDuplexType=xfRFDuplexType, xfRAURfLoopAvailable=xfRAURfLoopAvailable, xfRFSpectrumDiagMaxRxFrequency=xfRFSpectrumDiagMaxRxFrequency, xfRFRangeTrigger=xfRFRangeTrigger, xfRFPowerTable=xfRFPowerTable, xfSdcOduDateTimeCalibration=xfSdcOduDateTimeCalibration, xfRfOutputPower512QAM=xfRfOutputPower512QAM, xfRFMaxOutputPowerLast7Days=xfRFMaxOutputPowerLast7Days, xfRFMarginAgc=xfRFMarginAgc, xfRFDegradationTrigger=xfRFDegradationTrigger, xfRFMinOutputPowerSinceReset=xfRFMinOutputPowerSinceReset, xfRfOutputPower2048QAM=xfRfOutputPower2048QAM, xfRFAtpcFallbackEnable=xfRFAtpcFallbackEnable, xfRAUProtectionPath=xfRAUProtectionPath, xfRFCurrentStepNumber=xfRFCurrentStepNumber, xfRFOutputPower64QAM=xfRFOutputPower64QAM, xfRFOutputPowerReset=xfRFOutputPowerReset, xfSdcOduSerialNumber=xfSdcOduSerialNumber, xfRFMaxInputPowerLast7Days=xfRFMaxInputPowerLast7Days, xfRFMeanInputPower1m=xfRFMeanInputPower1m, xfRFTxOperStatus=xfRFTxOperStatus, xfRfMaxOutputPowerNotLimited=xfRfMaxOutputPowerNotLimited, xfSdcActualPath=xfSdcActualPath, xfRAUEntry=xfRAUEntry, xfRFStddevSetTh=xfRFStddevSetTh, xfRFOutputPower16QAM=xfRFOutputPower16QAM, xfRFBoosterGain=xfRFBoosterGain, xfRFMaxOutputPowerNotLimited=xfRFMaxOutputPowerNotLimited, xfRfMaxOutputPower=xfRfMaxOutputPower, xfRADIOLINKPTPRADIOFullCompliance=xfRADIOLINKPTPRADIOFullCompliance, xfRfInputAlarmThreshold=xfRfInputAlarmThreshold, xfRAUSubBandIndex=xfRAUSubBandIndex, RAUAtpcCapability=RAUAtpcCapability, xfRfOutputPower256QAM=xfRfOutputPower256QAM, xfRFOutlierValue=xfRFOutlierValue, xfRFPowerEntry=xfRFPowerEntry, xfRAUCapabilityTable=xfRAUCapabilityTable, xfRFSpectrumDiagOperStatus=xfRFSpectrumDiagOperStatus, xfRFMaxInputPowerSinceReset=xfRFMaxInputPowerSinceReset, xfRFMinXPILast7Days=xfRFMinXPILast7Days, xfRfOutputPower16QAM=xfRfOutputPower16QAM, xfRFMarginCeaseTh=xfRFMarginCeaseTh, xfRFStepLimitLow=xfRFStepLimitLow, xfRFRangeCeaseTh=xfRFRangeCeaseTh, xfRadioLinkPtpRadioCompliances=xfRadioLinkPtpRadioCompliances, xfRAUChannelSpacing=xfRAUChannelSpacing, xfRFSpectrumDiagScanDate=xfRFSpectrumDiagScanDate, xfRfMaxOutputPowerSinceReset=xfRfMaxOutputPowerSinceReset, xfRFOutputPower1024QAM=xfRFOutputPower1024QAM, xfRFCurrentInputPower=xfRFCurrentInputPower, xfRFCurrentInputPowerSdcMain=xfRFCurrentInputPowerSdcMain, xfRFRangeAgc=xfRFRangeAgc, xfSdcDadeDelay=xfSdcDadeDelay, xfRFStepSize=xfRFStepSize, xfRFBoosterProductNumber=xfRFBoosterProductNumber, xfRFAtpcFallbackOutputPower=xfRFAtpcFallbackOutputPower, xfRfSelectedMinOutputPower=xfRfSelectedMinOutputPower, xfRFStepLimitHighRx=xfRFStepLimitHighRx, xfRfAtpcFallbackTimer=xfRfAtpcFallbackTimer, xfRFRangeValue=xfRFRangeValue, xfRfAtpcFallbackEnable=xfRfAtpcFallbackEnable, xfRFSpectrumDiagProgress=xfRFSpectrumDiagProgress, xfRfMinOutputPowerLast7Days=xfRfMinOutputPowerLast7Days, BoosterCapability=BoosterCapability, xfRfMaxOutputPowerLast7Days=xfRfMaxOutputPowerLast7Days, xfRFOutlierAgc=xfRFOutlierAgc, xfRFCurrentStepNumberRx=xfRFCurrentStepNumberRx, xfRFIFCableMonitoringEntry=xfRFIFCableMonitoringEntry, xfRFSpectrumDiagTable=xfRFSpectrumDiagTable, xfRFSpectrumDiagSubBandScanEstTime=xfRFSpectrumDiagSubBandScanEstTime, xfRFOutlierTrigger=xfRFOutlierTrigger, xfRAUTable=xfRAUTable, xfRFSpectrumDiagResultTable=xfRFSpectrumDiagResultTable, RfOutputPower=RfOutputPower, xfRfIfPowerEntry=xfRfIfPowerEntry, xfRFSpectrumDiagEntry=xfRFSpectrumDiagEntry)
