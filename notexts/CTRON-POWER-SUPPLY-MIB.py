#
# PySNMP MIB module CTRON-POWER-SUPPLY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-POWER-SUPPLY-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 12:34:41 2024
# On host fv-az658-333 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ctps, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctps")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Integer32, ObjectIdentity, TimeTicks, iso, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, Counter64, Unsigned32, MibIdentifier, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "ObjectIdentity", "TimeTicks", "iso", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "Counter64", "Unsigned32", "MibIdentifier", "ModuleIdentity", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
chPower = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 1))
boardPower = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2))
psPower = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 3))
bbuPower = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 4))
termPower = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 5))
chPowerOperationalStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("powerAC", 1), ("powerACRedundant", 2), ("powerDC", 3), ("powerDCRedundant", 4), ("battery", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPowerOperationalStatus.setStatus('mandatory')
chPowerMainVoltageStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("powerOK", 1), ("overCurrent", 2), ("overVoltage", 3), ("underVoltage", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPowerMainVoltageStatus.setStatus('mandatory')
chPowerMainVoltage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPowerMainVoltage.setStatus('mandatory')
chPowerTotalSupply = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPowerTotalSupply.setStatus('mandatory')
chPowerTotalLoad = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPowerTotalLoad.setStatus('mandatory')
chPowerMaxSupply = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPowerMaxSupply.setStatus('mandatory')
chPowerMaxLoad = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPowerMaxLoad.setStatus('mandatory')
chPowerTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 1, 8), )
if mibBuilder.loadTexts: chPowerTable.setStatus('mandatory')
chPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 1, 8, 1), ).setIndexNames((0, "CTRON-POWER-SUPPLY-MIB", "chPowerLineID"))
if mibBuilder.loadTexts: chPowerEntry.setStatus('mandatory')
chPowerLineID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPowerLineID.setStatus('mandatory')
chPowerLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 1, 8, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPowerLineType.setStatus('mandatory')
chPowerLineTotalSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPowerLineTotalSupply.setStatus('mandatory')
chPowerLineTotalLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 1, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPowerLineTotalLoad.setStatus('mandatory')
chPowerLineMaxSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPowerLineMaxSupply.setStatus('mandatory')
chPowerLineMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 1, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPowerLineMaxLoad.setStatus('mandatory')
chPowerDiagVoltageStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("powerOK", 1), ("overCurrent", 2), ("overVoltage", 3), ("underVoltage", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPowerDiagVoltageStatus.setStatus('mandatory')
chPowerDiagVoltage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPowerDiagVoltage.setStatus('mandatory')
boardPowerSlotStatusTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2, 1), )
if mibBuilder.loadTexts: boardPowerSlotStatusTable.setStatus('mandatory')
boardPowerSlotStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2, 1, 1), ).setIndexNames((0, "CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardPowerSlotStatusEntry.setStatus('mandatory')
boardPowerSlotStatusID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardPowerSlotStatusID.setStatus('mandatory')
boardPowerOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("powerOn", 1), ("powerOff", 2), ("reset", 3), ("overVoltage", 4), ("underVoltage", 5), ("overCurrent", 6), ("overCurrentShutdown", 7), ("temperatureShutdown", 8), ("remotePowerOff", 9), ("powerConservationShutdown", 10), ("frontPanelPowerOff", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardPowerOperationalStatus.setStatus('mandatory')
boardPowerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("powerOn", 1), ("powerOff", 2), ("reset", 3))).clone('powerOn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardPowerAdminStatus.setStatus('mandatory')
boardPowerLocalAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("localMode", 1), ("secureMode", 2))).clone('localMode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardPowerLocalAdminStatus.setStatus('mandatory')
boardPowerLocalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("resetRequest", 1), ("powerDownRequest", 2), ("powerOnRequest", 3), ("normal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardPowerLocalStatus.setStatus('mandatory')
boardPowerShutdownAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardPowerShutdownAdmin.setStatus('mandatory')
boardPowerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)).clone(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardPowerPriority.setStatus('mandatory')
boardPowerMaxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardPowerMaxInputPower.setStatus('mandatory')
boardPowerManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("not-supported", 7))).clone('not-supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardPowerManagement.setStatus('mandatory')
boardPowerSlotTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2, 2), )
if mibBuilder.loadTexts: boardPowerSlotTable.setStatus('mandatory')
boardPowerSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2, 2, 1), ).setIndexNames((0, "CTRON-POWER-SUPPLY-MIB", "boardPowerSlotID"), (0, "CTRON-POWER-SUPPLY-MIB", "boardPowerID"))
if mibBuilder.loadTexts: boardPowerSlotEntry.setStatus('mandatory')
boardPowerSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardPowerSlotID.setStatus('mandatory')
boardPowerID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardPowerID.setStatus('mandatory')
boardPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardPowerType.setStatus('mandatory')
boardPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("powerOK", 1), ("powerOff", 2), ("overCurrent", 3), ("overVoltage", 4), ("underVoltage", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardPowerStatus.setStatus('mandatory')
boardPowerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardPowerVoltage.setStatus('mandatory')
boardPowerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardPowerCurrent.setStatus('mandatory')
boardPowerMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardPowerMaxVoltage.setStatus('mandatory')
boardPowerMinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardPowerMinVoltage.setStatus('mandatory')
boardPowerMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardPowerMaxPower.setStatus('mandatory')
psPowerSlotStatusTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 3, 1), )
if mibBuilder.loadTexts: psPowerSlotStatusTable.setStatus('mandatory')
psPowerSlotStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 3, 1, 1), ).setIndexNames((0, "CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psPowerSlotStatusEntry.setStatus('mandatory')
psPowerSlotStatusID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerSlotStatusID.setStatus('mandatory')
psPowerOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("powerOn", 1), ("powerOff", 2), ("reset", 3), ("overVoltage", 4), ("underVoltage", 5), ("overCurrent", 6), ("overCurrentShutdown", 7), ("temperatureShutdown", 8), ("remotePowerOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerOperationalStatus.setStatus('mandatory')
psPowerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerOn", 1), ("powerOff", 2))).clone('powerOn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPowerAdminStatus.setStatus('mandatory')
psPowerMaxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerMaxOutputPower.setStatus('mandatory')
psPowerSlotTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 3, 2), )
if mibBuilder.loadTexts: psPowerSlotTable.setStatus('mandatory')
psPowerSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 3, 2, 1), ).setIndexNames((0, "CTRON-POWER-SUPPLY-MIB", "psPowerSlotID"), (0, "CTRON-POWER-SUPPLY-MIB", "psPowerID"))
if mibBuilder.loadTexts: psPowerSlotEntry.setStatus('mandatory')
psPowerSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerSlotID.setStatus('mandatory')
psPowerID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerID.setStatus('mandatory')
psPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 3, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerType.setStatus('mandatory')
psPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("powerOK", 1), ("powerOff", 2), ("overCurrent", 3), ("overVoltage", 4), ("underVoltage", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerStatus.setStatus('mandatory')
psPowerAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerOn", 1), ("powerOff", 2))).clone('powerOn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPowerAdmin.setStatus('mandatory')
psPowerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerVoltage.setStatus('mandatory')
psPowerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerCurrent.setStatus('mandatory')
psPowerLineFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerLineFrequency.setStatus('mandatory')
psPowerMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerMaxVoltage.setStatus('mandatory')
psPowerMinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerMinVoltage.setStatus('mandatory')
psPowerMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerMaxPower.setStatus('mandatory')
termPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("powerOK", 1), ("overCurrent", 2), ("overVoltage", 3), ("underVolatge", 4), ("overPower", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: termPowerStatus.setStatus('mandatory')
termPowerVoltage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: termPowerVoltage.setStatus('mandatory')
termPowerCurrent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: termPowerCurrent.setStatus('mandatory')
termPowerModule1Status = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("iNBaFault", 2), ("iNBbFault", 3), ("fault", 4), ("termModuleNotInstalled", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: termPowerModule1Status.setStatus('mandatory')
termPowerModule2Status = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 7, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("iNBaFault", 2), ("iNBbFault", 3), ("fault", 4), ("termModuleNotInstalled", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: termPowerModule2Status.setStatus('mandatory')
mibBuilder.exportSymbols("CTRON-POWER-SUPPLY-MIB", chPowerMainVoltageStatus=chPowerMainVoltageStatus, boardPowerMinVoltage=boardPowerMinVoltage, chPowerMainVoltage=chPowerMainVoltage, boardPowerOperationalStatus=boardPowerOperationalStatus, psPowerSlotStatusEntry=psPowerSlotStatusEntry, chPowerEntry=chPowerEntry, psPower=psPower, boardPowerSlotEntry=boardPowerSlotEntry, boardPowerID=boardPowerID, termPowerVoltage=termPowerVoltage, chPowerLineType=chPowerLineType, psPowerType=psPowerType, bbuPower=bbuPower, psPowerSlotTable=psPowerSlotTable, boardPowerSlotStatusEntry=boardPowerSlotStatusEntry, boardPowerLocalStatus=boardPowerLocalStatus, boardPowerVoltage=boardPowerVoltage, chPowerTotalLoad=chPowerTotalLoad, psPowerStatus=psPowerStatus, psPowerVoltage=psPowerVoltage, boardPowerSlotTable=boardPowerSlotTable, boardPowerLocalAdminStatus=boardPowerLocalAdminStatus, boardPowerManagement=boardPowerManagement, psPowerMinVoltage=psPowerMinVoltage, termPowerModule1Status=termPowerModule1Status, boardPowerType=boardPowerType, psPowerID=psPowerID, boardPowerMaxInputPower=boardPowerMaxInputPower, psPowerCurrent=psPowerCurrent, termPowerStatus=termPowerStatus, psPowerMaxVoltage=psPowerMaxVoltage, chPowerLineMaxLoad=chPowerLineMaxLoad, boardPowerStatus=boardPowerStatus, boardPowerAdminStatus=boardPowerAdminStatus, boardPowerPriority=boardPowerPriority, psPowerMaxOutputPower=psPowerMaxOutputPower, psPowerSlotID=psPowerSlotID, chPowerMaxSupply=chPowerMaxSupply, psPowerLineFrequency=psPowerLineFrequency, psPowerAdminStatus=psPowerAdminStatus, boardPowerCurrent=boardPowerCurrent, chPowerLineTotalSupply=chPowerLineTotalSupply, chPowerTotalSupply=chPowerTotalSupply, chPowerMaxLoad=chPowerMaxLoad, boardPowerMaxPower=boardPowerMaxPower, chPower=chPower, psPowerMaxPower=psPowerMaxPower, boardPowerMaxVoltage=boardPowerMaxVoltage, chPowerDiagVoltageStatus=chPowerDiagVoltageStatus, psPowerOperationalStatus=psPowerOperationalStatus, chPowerOperationalStatus=chPowerOperationalStatus, chPowerLineTotalLoad=chPowerLineTotalLoad, boardPowerSlotStatusTable=boardPowerSlotStatusTable, psPowerSlotEntry=psPowerSlotEntry, chPowerTable=chPowerTable, boardPowerSlotStatusID=boardPowerSlotStatusID, psPowerSlotStatusTable=psPowerSlotStatusTable, termPowerCurrent=termPowerCurrent, termPower=termPower, boardPowerSlotID=boardPowerSlotID, psPowerAdmin=psPowerAdmin, chPowerLineMaxSupply=chPowerLineMaxSupply, chPowerLineID=chPowerLineID, boardPowerShutdownAdmin=boardPowerShutdownAdmin, psPowerSlotStatusID=psPowerSlotStatusID, chPowerDiagVoltage=chPowerDiagVoltage, termPowerModule2Status=termPowerModule2Status, boardPower=boardPower)
