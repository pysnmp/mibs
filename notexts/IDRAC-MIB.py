#
# PySNMP MIB module IDRAC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/drac/IDRAC-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 11:57:17 2024
# On host fv-az1385-213 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Integer32, ObjectIdentity, enterprises, Unsigned32, iso, NotificationType, Gauge32, ModuleIdentity, Bits, IpAddress, MibIdentifier, NotificationType, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "ObjectIdentity", "enterprises", "Unsigned32", "iso", "NotificationType", "Gauge32", "ModuleIdentity", "Bits", "IpAddress", "MibIdentifier", "NotificationType", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dell = MibIdentifier((1, 3, 6, 1, 4, 1, 674))
server3 = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892))
outOfBandGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5))
informationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1))
racInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1))
chassisInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 2))
systemInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3))
statusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 2))
alertGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3))
alertVariablesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1))
alertTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2))
systemAlertTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1))
storageAlertTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2))
updatesAlertTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 3))
auditAlertTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4))
configurationAlertTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5))
systemDetailsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4))
mIBVersionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1))
systemStateGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200))
chassisInformationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300))
powerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600))
thermalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700))
deviceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100))
slotGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200))
fruGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000))
storageDetailsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5))
software = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1))
storageManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20))
physicalDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130))
logicalDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140))
class StringType(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 1023)

class String64(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 64)

class FQDDString(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 512)

class MACAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class ObjectRange(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 128)

class Unsigned8BitRange(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class Unsigned16BitRange(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class Unsigned32BitRange(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class Signed32BitRange(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-2147483647, 2147483647)

class BooleanType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 1)

class DateName(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(25, 25)
    fixedLength = 25

class StateCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))
    namedValues = NamedValues(("unknownCapabilities", 1), ("enableCapable", 2), ("notReadyCapable", 4), ("enableAndNotReadyCapable", 6))

class StateSettingsFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("notReady", 4), ("enabledAndNotReady", 6))

class ProbeCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("upperNonCriticalThresholdSetCapable", 1), ("lowerNonCriticalThresholdSetCapable", 2), ("upperNonCriticalThresholdDefaultCapable", 4), ("lowerNonCriticalThresholdDefaultCapable", 8))

class StatusProbeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCriticalUpper", 4), ("criticalUpper", 5), ("nonRecoverableUpper", 6), ("nonCriticalLower", 7), ("criticalLower", 8), ("nonRecoverableLower", 9), ("failed", 10))

class StatusRedundancyEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("full", 3), ("degraded", 4), ("lost", 5), ("notRedundant", 6), ("redundancyOffline", 7))

class ObjectStatusEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6))

class RacTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 16, 17, 32, 33))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("idrac7monolithic", 16), ("idrac7modular", 17), ("idrac8monolithic", 32), ("idrac8modular", 33))

class SystemFormFactorEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("u1", 3), ("u2", 4), ("u4", 5), ("u7", 6), ("singleWidthHalfHeight", 7), ("dualWidthHalfHeight", 8), ("singleWidthFullHeight", 9), ("dualWidthFullHeight", 10), ("singleWidthQuarterHeight", 11), ("u5", 12), ("u1HalfWidth", 13), ("u1QuarterWidth", 14), ("u1FullWidth", 15))

class BladeGeometryEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("singleWidthHalfHeight", 3), ("dualWidthHalfHeight", 4), ("singleWidthFullHeight", 5), ("dualWidthFullHeight", 6), ("singleWidthQuarterHeight", 7), ("u1HalfWidth", 8), ("u1QuarterWidth", 9), ("u1FullWidth", 10))

class PowerStateStatusEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("off", 3), ("on", 4))

racName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 1), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racName.setStatus('mandatory')
racShortName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 2), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racShortName.setStatus('mandatory')
racDescription = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 3), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racDescription.setStatus('mandatory')
racManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 4), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racManufacturer.setStatus('mandatory')
racVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 5), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racVersion.setStatus('mandatory')
racURL = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 6), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racURL.setStatus('mandatory')
racType = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 7), RacTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racType.setStatus('mandatory')
racFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 8), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racFirmwareVersion.setStatus('mandatory')
chassisServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 2, 1), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisServiceTag.setStatus('mandatory')
chassisNameModular = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 2, 2), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNameModular.setStatus('mandatory')
chassisModelModular = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 2, 3), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisModelModular.setStatus('mandatory')
systemFQDN = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 1), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFQDN.setStatus('mandatory')
systemServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 2), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServiceTag.setStatus('mandatory')
systemExpressServiceCode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 3), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemExpressServiceCode.setStatus('mandatory')
systemAssetTag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 4), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAssetTag.setStatus('mandatory')
systemBladeSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 5), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBladeSlotNumber.setStatus('mandatory')
systemOSName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 6), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemOSName.setStatus('mandatory')
systemFormFactor = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 7), SystemFormFactorEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFormFactor.setStatus('mandatory')
systemDataCenterName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 8), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDataCenterName.setStatus('mandatory')
systemAisleName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 9), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAisleName.setStatus('mandatory')
systemRackName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 10), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemRackName.setStatus('mandatory')
systemRackSlot = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 11), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemRackSlot.setStatus('mandatory')
systemModelName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 12), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemModelName.setStatus('mandatory')
systemSystemID = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 13), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSystemID.setStatus('mandatory')
systemOSVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 14), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemOSVersion.setStatus('mandatory')
systemRoomName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 15), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemRoomName.setStatus('mandatory')
systemChassisSystemHeight = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 16), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemChassisSystemHeight.setStatus('mandatory')
systemBladeGeometry = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 17), BladeGeometryEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBladeGeometry.setStatus('mandatory')
systemNodeID = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 18), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNodeID.setStatus('mandatory')
globalSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 2, 1), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalSystemStatus.setStatus('mandatory')
systemLCDStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 2, 2), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemLCDStatus.setStatus('mandatory')
globalStorageStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 2, 3), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalStorageStatus.setStatus('mandatory')
systemPowerState = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 2, 4), PowerStateStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPowerState.setStatus('mandatory')
systemPowerUpTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 2, 5), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPowerUpTime.setStatus('mandatory')
alertMessageID = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertMessageID.setStatus('mandatory')
alertMessage = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 2), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertMessage.setStatus('mandatory')
alertCurrentStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 3), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertCurrentStatus.setStatus('mandatory')
alertSystemServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertSystemServiceTag.setStatus('mandatory')
alertSystemFQDN = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 5), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertSystemFQDN.setStatus('mandatory')
alertFQDD = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertFQDD.setStatus('mandatory')
alertDeviceDisplayName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertDeviceDisplayName.setStatus('mandatory')
alertMessageArguments = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 8), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertMessageArguments.setStatus('mandatory')
alertChassisServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertChassisServiceTag.setStatus('mandatory')
alertChassisName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertChassisName.setStatus('mandatory')
alertRacFQDN = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 11), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertRacFQDN.setStatus('mandatory')
mIBMajorVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1, 1), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mIBMajorVersionNumber.setStatus('mandatory')
mIBMinorVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1, 2), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mIBMinorVersionNumber.setStatus('mandatory')
mIBMaintenanceVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1, 3), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mIBMaintenanceVersionNumber.setStatus('mandatory')
systemStateTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10), )
if mibBuilder.loadTexts: systemStateTable.setStatus('mandatory')
systemStateTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1), ).setIndexNames((0, "IDRAC-MIB", "systemStatechassisIndex"))
if mibBuilder.loadTexts: systemStateTableEntry.setStatus('mandatory')
systemStatechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatechassisIndex.setStatus('mandatory')
systemStateGlobalSystemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 2), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateGlobalSystemStatus.setStatus('mandatory')
systemStateChassisState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 3), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateChassisState.setStatus('mandatory')
systemStateChassisStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 4), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateChassisStatus.setStatus('mandatory')
systemStatePowerUnitStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerUnitStateDetails.setStatus('mandatory')
systemStatePowerUnitStatusRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 6), StatusRedundancyEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerUnitStatusRedundancy.setStatus('mandatory')
systemStatePowerUnitStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerUnitStatusDetails.setStatus('mandatory')
systemStatePowerSupplyStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerSupplyStateDetails.setStatus('mandatory')
systemStatePowerSupplyStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 9), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerSupplyStatusCombined.setStatus('mandatory')
systemStatePowerSupplyStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerSupplyStatusDetails.setStatus('mandatory')
systemStateVoltageStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateVoltageStateDetails.setStatus('mandatory')
systemStateVoltageStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 12), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateVoltageStatusCombined.setStatus('mandatory')
systemStateVoltageStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateVoltageStatusDetails.setStatus('mandatory')
systemStateAmperageStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateAmperageStateDetails.setStatus('mandatory')
systemStateAmperageStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 15), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateAmperageStatusCombined.setStatus('mandatory')
systemStateAmperageStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateAmperageStatusDetails.setStatus('mandatory')
systemStateCoolingUnitStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingUnitStateDetails.setStatus('mandatory')
systemStateCoolingUnitStatusRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 18), StatusRedundancyEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingUnitStatusRedundancy.setStatus('mandatory')
systemStateCoolingUnitStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingUnitStatusDetails.setStatus('mandatory')
systemStateCoolingDeviceStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingDeviceStateDetails.setStatus('mandatory')
systemStateCoolingDeviceStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 21), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingDeviceStatusCombined.setStatus('mandatory')
systemStateCoolingDeviceStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingDeviceStatusDetails.setStatus('mandatory')
systemStateTemperatureStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateTemperatureStateDetails.setStatus('mandatory')
systemStateTemperatureStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 24), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateTemperatureStatusCombined.setStatus('mandatory')
systemStateTemperatureStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateTemperatureStatusDetails.setStatus('mandatory')
systemStateMemoryDeviceStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateMemoryDeviceStateDetails.setStatus('mandatory')
systemStateMemoryDeviceStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 27), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateMemoryDeviceStatusCombined.setStatus('mandatory')
systemStateMemoryDeviceStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateMemoryDeviceStatusDetails.setStatus('mandatory')
systemStateChassisIntrusionStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateChassisIntrusionStateDetails.setStatus('mandatory')
systemStateChassisIntrusionStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 30), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateChassisIntrusionStatusCombined.setStatus('mandatory')
systemStateChassisIntrusionStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateChassisIntrusionStatusDetails.setStatus('mandatory')
systemStatePowerUnitStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 42), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerUnitStatusCombined.setStatus('mandatory')
systemStatePowerUnitStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 43), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerUnitStatusList.setStatus('mandatory')
systemStateCoolingUnitStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 44), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingUnitStatusCombined.setStatus('mandatory')
systemStateCoolingUnitStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingUnitStatusList.setStatus('mandatory')
systemStateProcessorDeviceStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 50), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateProcessorDeviceStatusCombined.setStatus('mandatory')
systemStateProcessorDeviceStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 51), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateProcessorDeviceStatusList.setStatus('mandatory')
systemStateBatteryStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 52), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateBatteryStatusCombined.setStatus('mandatory')
systemStateBatteryStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 53), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateBatteryStatusList.setStatus('mandatory')
systemStateSDCardUnitStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 54), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateSDCardUnitStatusCombined.setStatus('mandatory')
systemStateSDCardUnitStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateSDCardUnitStatusList.setStatus('mandatory')
systemStateSDCardDeviceStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 56), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateSDCardDeviceStatusCombined.setStatus('mandatory')
systemStateSDCardDeviceStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 57), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateSDCardDeviceStatusList.setStatus('mandatory')
systemStateIDSDMCardUnitStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 58), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateIDSDMCardUnitStatusCombined.setStatus('mandatory')
systemStateIDSDMCardUnitStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 59), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateIDSDMCardUnitStatusList.setStatus('mandatory')
systemStateIDSDMCardDeviceStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 60), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateIDSDMCardDeviceStatusCombined.setStatus('mandatory')
systemStateIDSDMCardDeviceStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateIDSDMCardDeviceStatusList.setStatus('mandatory')
systemStateTemperatureStatisticsStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 62), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateTemperatureStatisticsStateDetails.setStatus('mandatory')
systemStateTemperatureStatisticsStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 63), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateTemperatureStatisticsStatusCombined.setStatus('mandatory')
systemStateTemperatureStatisticsStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateTemperatureStatisticsStatusDetails.setStatus('mandatory')
class StateCapabilitiesLogUniqueFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("unknown", 1), ("onlineCapable", 2), ("notReadyCapable", 4), ("resetCapable", 8))

class StateSettingsLogUniqueFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("unknown", 1), ("online", 2), ("notReady", 4), ("reset", 8))

class LogFormatType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("raw", 1), ("ascii", 2), ("uniCode", 3))

numEventLogEntries = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 1), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numEventLogEntries.setStatus('mandatory')
numLCLogEntries = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 2), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numLCLogEntries.setStatus('mandatory')
class ChassisTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("desktop", 3), ("lowProfileDesktop", 4), ("pizzaBox", 5), ("miniTower", 6), ("tower", 7), ("portable", 8), ("lapTop", 9), ("noteBook", 10), ("handHeld", 11), ("dockingStation", 12), ("allInOne", 13), ("subNoteBook", 14), ("spaceSaving", 15), ("lunchBox", 16), ("mainSystemChassis", 17), ("expansionChassis", 18), ("subChassis", 19), ("busExpansionChassis", 20), ("peripheralChassis", 21), ("raidChassis", 22), ("rackMountChassis", 23), ("sealedCasePC", 24), ("multiSystemChassis", 25))

class ChassisSystemClassEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("workstationClass", 3), ("serverClass", 4), ("desktopClass", 5), ("portableClass", 6), ("netPCClass", 7), ("storageClass", 8))

class LEDControlCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))
    namedValues = NamedValues(("unknown", 1), ("alertOnErrorCapable", 2), ("alertOnWarningAndErrorCapable", 4), ("alertOnWarningOrErrorCapable", 6))

class LEDControlSettingsFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknown", 1), ("alertOnError", 2), ("alertOnWarningAndError", 4))

class ChassisIdentifyControlCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("unknownCapabilities", 1), ("enableCapable", 2), ("notReadyCapable", 4), ("identifyCapable", 8))

class ChassisIdentifyControlSettingsFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("notReady", 4), ("identifyChassis", 8), ("identifyChassisAndEnable", 10))

class HostControlCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 7, 8, 15, 16, 32, 64, 128, 256, 512))
    namedValues = NamedValues(("manualRebootCapable", 1), ("manualPowerOFFCapable", 2), ("manualPowerCycleCapable", 4), ("manualAllExceptOperatingSystemShutdownCapable", 7), ("manualOperatingSystemShutdownCapable", 8), ("manualFullyCapable", 15), ("manualRebootWithOSShutdownCapable", 16), ("manualRebootWithoutOSShutdownCapable", 32), ("manualPowerOffWithOSShutdownCapable", 64), ("manualPowerOffWithoutOSShutdownCapable", 128), ("manualPowerCycleWithOSShutdownCapable", 256), ("manualPowerCycleWithoutOSShutdownCapable", 512))

class HostControlSettingsFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 9, 10, 12))
    namedValues = NamedValues(("manualReboot", 1), ("manualPowerOFF", 2), ("manualPowerCycle", 4), ("manualOperatingSystemShutdown", 8), ("manualOperatingSystemShutdownThenReboot", 9), ("manualOperatingSystemShutdownThenPowerOFF", 10), ("manualOperatingSystemShutdownThenPowerCycle", 12))

class WatchDogControlCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 27, 31))
    namedValues = NamedValues(("automaticRebootCapable", 1), ("automaticPowerCycleCapable", 2), ("automaticNotificationCapable", 4), ("automaticWatchDogTimerCapable", 8), ("automaticPowerOffCapable", 16), ("automaticAllExceptNotificationCapable", 27), ("automaticFullyCapable", 31))

class WatchControlSettingsFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("automaticRebootEnabled", 1), ("automaticPowerCycleEnabled", 2), ("automaticNotificationEnabled", 4), ("automaticPowerOffEnabled", 8))

class WatchDogTimerCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("type1Capable", 1), ("type2Capable", 2), ("type3Capable", 4))

class PowerButtonControlCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unknownCapabilities", 1), ("enableCapable", 2))

class PowerButtonControlSettingsFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("disabled", 4))

class NMIButtonControlCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unknownCapabilities", 1), ("enableCapable", 2))

class NMIButtonControlSettingsFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("disabled", 4))

class SystemPropertiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("energySmart", 1))

chassisInformationTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10), )
if mibBuilder.loadTexts: chassisInformationTable.setStatus('mandatory')
chassisInformationTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1), ).setIndexNames((0, "IDRAC-MIB", "chassisIndexChassisInformation"))
if mibBuilder.loadTexts: chassisInformationTableEntry.setStatus('mandatory')
chassisIndexChassisInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisIndexChassisInformation.setStatus('mandatory')
chassisStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 2), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisStateCapabilities.setStatus('mandatory')
chassisStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 3), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisStateSettings.setStatus('mandatory')
chassisStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 4), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisStatus.setStatus('mandatory')
chassisparentIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 5), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisparentIndexReference.setStatus('mandatory')
chassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 6), ChassisTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisType.setStatus('mandatory')
chassisName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 7), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisName.setStatus('mandatory')
chassisManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisManufacturerName.setStatus('mandatory')
chassisModelTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 9), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisModelTypeName.setStatus('mandatory')
chassisAssetTagName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisAssetTagName.setStatus('mandatory')
chassisServiceTagName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisServiceTagName.setStatus('mandatory')
chassisID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 12), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisID.setStatus('mandatory')
chassisIDExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 13), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisIDExtension.setStatus('mandatory')
chassisSystemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 14), ChassisSystemClassEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemClass.setStatus('mandatory')
chassisSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 15), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemName.setStatus('mandatory')
chassisLEDControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 24), LEDControlCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLEDControlCapabilitiesUnique.setStatus('mandatory')
chassisLEDControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 25), LEDControlSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLEDControlSettingsUnique.setStatus('mandatory')
chassisIdentifyFlashControlCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 28), ChassisIdentifyControlCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisIdentifyFlashControlCapabilities.setStatus('mandatory')
chassisIdentifyFlashControlSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 29), ChassisIdentifyControlSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisIdentifyFlashControlSettings.setStatus('mandatory')
chassisLockPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 30), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLockPresent.setStatus('mandatory')
chassishostControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 31), HostControlCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassishostControlCapabilitiesUnique.setStatus('mandatory')
chassishostControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 32), HostControlSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassishostControlSettingsUnique.setStatus('mandatory')
chassiswatchDogControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 33), WatchDogControlCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassiswatchDogControlCapabilitiesUnique.setStatus('mandatory')
chassiswatchDogControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 34), WatchControlSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassiswatchDogControlSettingsUnique.setStatus('mandatory')
chassiswatchDogControlExpiryTimeCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 35), WatchDogTimerCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassiswatchDogControlExpiryTimeCapabilitiesUnique.setStatus('mandatory')
chassiswatchDogControlExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 36), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassiswatchDogControlExpiryTime.setStatus('mandatory')
chassisPowerButtonControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 38), PowerButtonControlCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerButtonControlCapabilitiesUnique.setStatus('mandatory')
chassisPowerButtonControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 39), PowerButtonControlSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerButtonControlSettingsUnique.setStatus('mandatory')
chassisNMIButtonControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 44), NMIButtonControlCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNMIButtonControlCapabilitiesUnique.setStatus('mandatory')
chassisNMIButtonControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 45), NMIButtonControlSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNMIButtonControlSettingsUnique.setStatus('mandatory')
chassisSystemProperties = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 46), SystemPropertiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemProperties.setStatus('mandatory')
chassisSystemRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 47), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemRevisionNumber.setStatus('mandatory')
chassisSystemRevisionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 48), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemRevisionName.setStatus('mandatory')
chassisExpressServiceCodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 49), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisExpressServiceCodeName.setStatus('mandatory')
eventLogTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40), )
if mibBuilder.loadTexts: eventLogTable.setStatus('mandatory')
eventLogTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1), ).setIndexNames((0, "IDRAC-MIB", "eventLogchassisIndex"), (0, "IDRAC-MIB", "eventLogRecordIndex"))
if mibBuilder.loadTexts: eventLogTableEntry.setStatus('mandatory')
eventLogchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogchassisIndex.setStatus('mandatory')
eventLogRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 2), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogRecordIndex.setStatus('mandatory')
eventLogStateCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 3), StateCapabilitiesLogUniqueFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogStateCapabilitiesUnique.setStatus('mandatory')
eventLogStateSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 4), StateSettingsLogUniqueFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogStateSettingsUnique.setStatus('mandatory')
eventLogRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogRecord.setStatus('mandatory')
eventLogFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 6), LogFormatType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogFormat.setStatus('mandatory')
eventLogSeverityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 7), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogSeverityStatus.setStatus('mandatory')
eventLogDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 8), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogDateName.setStatus('mandatory')
systemBIOSTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50), )
if mibBuilder.loadTexts: systemBIOSTable.setStatus('mandatory')
systemBIOSTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1), ).setIndexNames((0, "IDRAC-MIB", "systemBIOSchassisIndex"), (0, "IDRAC-MIB", "systemBIOSIndex"))
if mibBuilder.loadTexts: systemBIOSTableEntry.setStatus('mandatory')
systemBIOSchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSchassisIndex.setStatus('mandatory')
systemBIOSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSIndex.setStatus('mandatory')
systemBIOSStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSStateCapabilities.setStatus('mandatory')
systemBIOSStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSStateSettings.setStatus('mandatory')
systemBIOSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSStatus.setStatus('mandatory')
systemBIOSReleaseDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 7), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSReleaseDateName.setStatus('mandatory')
systemBIOSVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSVersionName.setStatus('mandatory')
systemBIOSManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 11), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSManufacturerName.setStatus('mandatory')
class FirmwareType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 20, 21, 22))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("lifecycleController", 20), ("iDRAC7", 21), ("iDRAC8", 22))

firmwareTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60), )
if mibBuilder.loadTexts: firmwareTable.setStatus('mandatory')
firmwareTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1), ).setIndexNames((0, "IDRAC-MIB", "firmwarechassisIndex"), (0, "IDRAC-MIB", "firmwareIndex"))
if mibBuilder.loadTexts: firmwareTableEntry.setStatus('mandatory')
firmwarechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwarechassisIndex.setStatus('mandatory')
firmwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareIndex.setStatus('mandatory')
firmwareStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareStateCapabilities.setStatus('mandatory')
firmwareStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareStateSettings.setStatus('mandatory')
firmwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareStatus.setStatus('mandatory')
firmwareSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 6), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareSize.setStatus('mandatory')
firmwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 7), FirmwareType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareType.setStatus('mandatory')
firmwareTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareTypeName.setStatus('mandatory')
firmwareUpdateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 9), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateCapabilities.setStatus('mandatory')
firmwareVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 11), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersionName.setStatus('mandatory')
class IntrusionReadingEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("chassisNotBreached", 1), ("chassisBreached", 2), ("chassisBreachedPrior", 3), ("chassisBreachSensorFailure", 4))

class IntrusionTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("chassisBreachDetectionWhenPowerON", 1), ("chassisBreachDetectionWhenPowerOFF", 2))

intrusionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70), )
if mibBuilder.loadTexts: intrusionTable.setStatus('mandatory')
intrusionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1), ).setIndexNames((0, "IDRAC-MIB", "intrusionchassisIndex"), (0, "IDRAC-MIB", "intrusionIndex"))
if mibBuilder.loadTexts: intrusionTableEntry.setStatus('mandatory')
intrusionchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionchassisIndex.setStatus('mandatory')
intrusionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionIndex.setStatus('mandatory')
intrusionStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionStateCapabilities.setStatus('mandatory')
intrusionStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionStateSettings.setStatus('mandatory')
intrusionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionStatus.setStatus('mandatory')
intrusionReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 6), IntrusionReadingEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionReading.setStatus('mandatory')
intrusionType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 7), IntrusionTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionType.setStatus('mandatory')
intrusionLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionLocationName.setStatus('mandatory')
class LcLogCategoryEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("system", 1), ("storage", 2), ("updates", 3), ("audit", 4), ("configuration", 5), ("workNotes", 6))

lcLogTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90), )
if mibBuilder.loadTexts: lcLogTable.setStatus('mandatory')
lcLogTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1), ).setIndexNames((0, "IDRAC-MIB", "lcLogChassisIndex"), (0, "IDRAC-MIB", "lcLogRecordIndex"))
if mibBuilder.loadTexts: lcLogTableEntry.setStatus('mandatory')
lcLogChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogChassisIndex.setStatus('mandatory')
lcLogRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 2), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogRecordIndex.setStatus('mandatory')
lcLogSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 3), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogSequenceNumber.setStatus('mandatory')
lcLogCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 4), LcLogCategoryEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogCategory.setStatus('mandatory')
lcLogSeverityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogSeverityStatus.setStatus('mandatory')
lcLogDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 6), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogDateName.setStatus('mandatory')
lcLogFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 7), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogFQDD.setStatus('mandatory')
lcLogMessageID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogMessageID.setStatus('mandatory')
lcLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogMessage.setStatus('mandatory')
lcLogDetailedDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogDetailedDescription.setStatus('mandatory')
lcLogRecommededAction = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogRecommededAction.setStatus('mandatory')
lcLogComment = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogComment.setStatus('mandatory')
powerUnitTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10), )
if mibBuilder.loadTexts: powerUnitTable.setStatus('mandatory')
powerUnitTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1), ).setIndexNames((0, "IDRAC-MIB", "powerUnitchassisIndex"), (0, "IDRAC-MIB", "powerUnitIndex"))
if mibBuilder.loadTexts: powerUnitTableEntry.setStatus('mandatory')
powerUnitchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitchassisIndex.setStatus('mandatory')
powerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitIndex.setStatus('mandatory')
powerUnitStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitStateCapabilities.setStatus('mandatory')
powerUnitStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitStateSettings.setStatus('mandatory')
powerUnitRedundancyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 5), StatusRedundancyEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitRedundancyStatus.setStatus('mandatory')
powerSupplyCountForRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 6), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyCountForRedundancy.setStatus('mandatory')
powerUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 7), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitName.setStatus('mandatory')
powerUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 8), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitStatus.setStatus('mandatory')
class PowerSupplyStateCapabilitiesUniqueFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknown", 1), ("onlineCapable", 2), ("notReadyCapable", 4))

class PowerSupplyStateSettingsUniqueFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10, 16, 32, 64, 66, 128, 130, 210, 242))
    namedValues = NamedValues(("unknown", 1), ("onLine", 2), ("notReady", 4), ("fanFailure", 8), ("onlineAndFanFailure", 10), ("powerSupplyIsON", 16), ("powerSupplyIsOK", 32), ("acSwitchIsON", 64), ("onlineandAcSwitchIsON", 66), ("acPowerIsON", 128), ("onlineAndAcPowerIsON", 130), ("onlineAndPredictiveFailure", 210), ("acPowerAndSwitchAreOnPowerSupplyIsOnIsOkAndOnline", 242))

class PowerSupplyTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("powerSupplyTypeIsOther", 1), ("powerSupplyTypeIsUnknown", 2), ("powerSupplyTypeIsLinear", 3), ("powerSupplyTypeIsSwitching", 4), ("powerSupplyTypeIsBattery", 5), ("powerSupplyTypeIsUPS", 6), ("powerSupplyTypeIsConverter", 7), ("powerSupplyTypeIsRegulator", 8), ("powerSupplyTypeIsAC", 9), ("powerSupplyTypeIsDC", 10), ("powerSupplyTypeIsVRM", 11))

class PowerSupplySensorStateFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64))
    namedValues = NamedValues(("presenceDetected", 1), ("psFailureDetected", 2), ("predictiveFailure", 4), ("psACLost", 8), ("acLostOrOutOfRange", 16), ("acOutOfRangeButPresent", 32), ("configurationError", 64))

class PowerSupplyConfigurationErrorTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("vendorMismatch", 1), ("revisionMismatch", 2), ("processorMissing", 3))

powerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12), )
if mibBuilder.loadTexts: powerSupplyTable.setStatus('mandatory')
powerSupplyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1), ).setIndexNames((0, "IDRAC-MIB", "powerSupplychassisIndex"), (0, "IDRAC-MIB", "powerSupplyIndex"))
if mibBuilder.loadTexts: powerSupplyTableEntry.setStatus('mandatory')
powerSupplychassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplychassisIndex.setStatus('mandatory')
powerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyIndex.setStatus('mandatory')
powerSupplyStateCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 3), PowerSupplyStateCapabilitiesUniqueFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyStateCapabilitiesUnique.setStatus('mandatory')
powerSupplyStateSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 4), PowerSupplyStateSettingsUniqueFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyStateSettingsUnique.setStatus('mandatory')
powerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyStatus.setStatus('mandatory')
powerSupplyOutputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 6), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyOutputWatts.setStatus('mandatory')
powerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 7), PowerSupplyTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyType.setStatus('mandatory')
powerSupplyLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyLocationName.setStatus('mandatory')
powerSupplyMaximumInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 9), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyMaximumInputVoltage.setStatus('mandatory')
powerSupplypowerUnitIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 10), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplypowerUnitIndexReference.setStatus('mandatory')
powerSupplySensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 11), PowerSupplySensorStateFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplySensorState.setStatus('mandatory')
powerSupplyConfigurationErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 12), PowerSupplyConfigurationErrorTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyConfigurationErrorType.setStatus('mandatory')
powerSupplyPowerMonitorCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 13), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyPowerMonitorCapable.setStatus('mandatory')
powerSupplyRatedInputWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 14), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyRatedInputWattage.setStatus('mandatory')
powerSupplyFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 15), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyFQDD.setStatus('mandatory')
powerSupplyCurrentInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 16), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyCurrentInputVoltage.setStatus('mandatory')
class VoltageTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))
    namedValues = NamedValues(("voltageProbeTypeIsOther", 1), ("voltageProbeTypeIsUnknown", 2), ("voltageProbeTypeIs1Point5Volt", 3), ("voltageProbeTypeIs3Point3Volt", 4), ("voltageProbeTypeIs5Volt", 5), ("voltageProbeTypeIsMinus5Volt", 6), ("voltageProbeTypeIs12Volt", 7), ("voltageProbeTypeIsMinus12Volt", 8), ("voltageProbeTypeIsIO", 9), ("voltageProbeTypeIsCore", 10), ("voltageProbeTypeIsFLEA", 11), ("voltageProbeTypeIsBattery", 12), ("voltageProbeTypeIsTerminator", 13), ("voltageProbeTypeIs2Point5Volt", 14), ("voltageProbeTypeIsGTL", 15), ("voltageProbeTypeIsDiscrete", 16), ("voltageProbeTypeIsGenericDiscrete", 17), ("voltageProbeTypeIsPSVoltage", 18), ("voltageProbeTypeIsMemoryStatus", 19))

class VoltageDiscreteReadingEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("voltageIsGood", 1), ("voltageIsBad", 2))

voltageProbeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20), )
if mibBuilder.loadTexts: voltageProbeTable.setStatus('mandatory')
voltageProbeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1), ).setIndexNames((0, "IDRAC-MIB", "voltageProbechassisIndex"), (0, "IDRAC-MIB", "voltageProbeIndex"))
if mibBuilder.loadTexts: voltageProbeTableEntry.setStatus('mandatory')
voltageProbechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbechassisIndex.setStatus('mandatory')
voltageProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeIndex.setStatus('mandatory')
voltageProbeStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeStateCapabilities.setStatus('mandatory')
voltageProbeStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeStateSettings.setStatus('mandatory')
voltageProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 5), StatusProbeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeStatus.setStatus('mandatory')
voltageProbeReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 6), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeReading.setStatus('mandatory')
voltageProbeType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 7), VoltageTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeType.setStatus('mandatory')
voltageProbeLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeLocationName.setStatus('mandatory')
voltageProbeUpperNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 9), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeUpperNonRecoverableThreshold.setStatus('mandatory')
voltageProbeUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 10), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeUpperCriticalThreshold.setStatus('mandatory')
voltageProbeUpperNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 11), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeUpperNonCriticalThreshold.setStatus('mandatory')
voltageProbeLowerNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 12), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeLowerNonCriticalThreshold.setStatus('mandatory')
voltageProbeLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 13), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeLowerCriticalThreshold.setStatus('mandatory')
voltageProbeLowerNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 14), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeLowerNonRecoverableThreshold.setStatus('mandatory')
voltageProbeProbeCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 15), ProbeCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeProbeCapabilities.setStatus('mandatory')
voltageProbeDiscreteReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 16), VoltageDiscreteReadingEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeDiscreteReading.setStatus('mandatory')
class AmperageProbeTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25, 26))
    namedValues = NamedValues(("amperageProbeTypeIsOther", 1), ("amperageProbeTypeIsUnknown", 2), ("amperageProbeTypeIs1Point5Volt", 3), ("amperageProbeTypeIs3Point3volt", 4), ("amperageProbeTypeIs5Volt", 5), ("amperageProbeTypeIsMinus5Volt", 6), ("amperageProbeTypeIs12Volt", 7), ("amperageProbeTypeIsMinus12Volt", 8), ("amperageProbeTypeIsIO", 9), ("amperageProbeTypeIsCore", 10), ("amperageProbeTypeIsFLEA", 11), ("amperageProbeTypeIsBattery", 12), ("amperageProbeTypeIsTerminator", 13), ("amperageProbeTypeIs2Point5Volt", 14), ("amperageProbeTypeIsGTL", 15), ("amperageProbeTypeIsDiscrete", 16), ("amperageProbeTypeIsPowerSupplyAmps", 23), ("amperageProbeTypeIsPowerSupplyWatts", 24), ("amperageProbeTypeIsSystemAmps", 25), ("amperageProbeTypeIsSystemWatts", 26))

class AmperageDiscreteReadingEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("amperageIsGood", 1), ("amperageIsBad", 2))

amperageProbeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30), )
if mibBuilder.loadTexts: amperageProbeTable.setStatus('mandatory')
amperageProbeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1), ).setIndexNames((0, "IDRAC-MIB", "amperageProbechassisIndex"), (0, "IDRAC-MIB", "amperageProbeIndex"))
if mibBuilder.loadTexts: amperageProbeTableEntry.setStatus('mandatory')
amperageProbechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbechassisIndex.setStatus('mandatory')
amperageProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeIndex.setStatus('mandatory')
amperageProbeStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeStateCapabilities.setStatus('mandatory')
amperageProbeStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeStateSettings.setStatus('mandatory')
amperageProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 5), StatusProbeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeStatus.setStatus('mandatory')
amperageProbeReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 6), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeReading.setStatus('mandatory')
amperageProbeType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 7), AmperageProbeTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeType.setStatus('mandatory')
amperageProbeLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeLocationName.setStatus('mandatory')
amperageProbeUpperNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 9), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeUpperNonRecoverableThreshold.setStatus('mandatory')
amperageProbeUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 10), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeUpperCriticalThreshold.setStatus('mandatory')
amperageProbeUpperNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 11), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeUpperNonCriticalThreshold.setStatus('mandatory')
amperageProbeLowerNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 12), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeLowerNonCriticalThreshold.setStatus('mandatory')
amperageProbeLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 13), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeLowerCriticalThreshold.setStatus('mandatory')
amperageProbeLowerNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 14), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeLowerNonRecoverableThreshold.setStatus('mandatory')
amperageProbeProbeCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 15), ProbeCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeProbeCapabilities.setStatus('mandatory')
amperageProbeDiscreteReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 16), AmperageDiscreteReadingEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeDiscreteReading.setStatus('mandatory')
class SystemBatteryReadingFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("predictiveFailure", 1), ("failed", 2), ("presenceDetected", 4))

systemBatteryTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50), )
if mibBuilder.loadTexts: systemBatteryTable.setStatus('mandatory')
systemBatteryTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1), ).setIndexNames((0, "IDRAC-MIB", "systemBatteryChassisIndex"), (0, "IDRAC-MIB", "systemBatteryIndex"))
if mibBuilder.loadTexts: systemBatteryTableEntry.setStatus('mandatory')
systemBatteryChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBatteryChassisIndex.setStatus('mandatory')
systemBatteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBatteryIndex.setStatus('mandatory')
systemBatteryStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBatteryStateCapabilities.setStatus('mandatory')
systemBatteryStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBatteryStateSettings.setStatus('mandatory')
systemBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBatteryStatus.setStatus('mandatory')
systemBatteryReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1, 6), SystemBatteryReadingFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBatteryReading.setStatus('mandatory')
systemBatteryLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1, 7), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBatteryLocationName.setStatus('mandatory')
class PowerCapCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enable", 1), ("disable", 2))

class PowerCapSettingEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("enabled", 1))

powerUsageTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60), )
if mibBuilder.loadTexts: powerUsageTable.setStatus('mandatory')
powerUsageTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1), ).setIndexNames((0, "IDRAC-MIB", "powerUsageChassisIndex"), (0, "IDRAC-MIB", "powerUsageIndex"))
if mibBuilder.loadTexts: powerUsageTableEntry.setStatus('mandatory')
powerUsageChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageChassisIndex.setStatus('mandatory')
powerUsageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageIndex.setStatus('mandatory')
powerUsageStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageStateCapabilities.setStatus('mandatory')
powerUsageStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageStateSettings.setStatus('mandatory')
powerUsageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageStatus.setStatus('mandatory')
powerUsageEntityName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 6), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageEntityName.setStatus('mandatory')
powerUsageCumulativeWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 7), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageCumulativeWattage.setStatus('mandatory')
powerUsageCumulativeWattageStartDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 8), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageCumulativeWattageStartDateName.setStatus('mandatory')
powerUsagePeakWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 9), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakWatts.setStatus('mandatory')
powerUsagePeakWattsStartDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 10), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakWattsStartDateName.setStatus('mandatory')
powerUsagePeakWattsReadingDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 11), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakWattsReadingDateName.setStatus('mandatory')
powerUsagePeakAmps = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 12), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakAmps.setStatus('mandatory')
powerUsagePeakAmpsStartDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 13), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakAmpsStartDateName.setStatus('mandatory')
powerUsagePeakAmpsReadingDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 14), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakAmpsReadingDateName.setStatus('mandatory')
powerUsageIdlePower = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 15), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageIdlePower.setStatus('mandatory')
powerUsageMaxPotentialPower = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 16), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageMaxPotentialPower.setStatus('mandatory')
powerUsagePowerCapCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 17), PowerCapCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePowerCapCapabilities.setStatus('mandatory')
powerUsagePowerCapSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 18), PowerCapSettingEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePowerCapSetting.setStatus('mandatory')
powerUsagePowerCapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 19), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePowerCapValue.setStatus('mandatory')
powerUsageInstantaneousHeadroom = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 20), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageInstantaneousHeadroom.setStatus('mandatory')
powerUsagePeakHeadroom = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 21), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakHeadroom.setStatus('mandatory')
coolingUnitTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10), )
if mibBuilder.loadTexts: coolingUnitTable.setStatus('mandatory')
coolingUnitTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1), ).setIndexNames((0, "IDRAC-MIB", "coolingUnitchassisIndex"), (0, "IDRAC-MIB", "coolingUnitIndex"))
if mibBuilder.loadTexts: coolingUnitTableEntry.setStatus('mandatory')
coolingUnitchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitchassisIndex.setStatus('mandatory')
coolingUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitIndex.setStatus('mandatory')
coolingUnitStateCapabilties = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStateCapabilties.setStatus('mandatory')
coolingUnitStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStateSettings.setStatus('mandatory')
coolingUnitRedundancyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 5), StatusRedundancyEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitRedundancyStatus.setStatus('mandatory')
coolingDeviceCountForRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 6), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceCountForRedundancy.setStatus('mandatory')
coolingUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 7), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitName.setStatus('mandatory')
coolingUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 8), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatus.setStatus('mandatory')
class CoolingDeviceTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("coolingDeviceTypeIsOther", 1), ("coolingDeviceTypeIsUnknown", 2), ("coolingDeviceTypeIsAFan", 3), ("coolingDeviceTypeIsABlower", 4), ("coolingDeviceTypeIsAChipFan", 5), ("coolingDeviceTypeIsACabinetFan", 6), ("coolingDeviceTypeIsAPowerSupplyFan", 7), ("coolingDeviceTypeIsAHeatPipe", 8), ("coolingDeviceTypeIsRefrigeration", 9), ("coolingDeviceTypeIsActiveCooling", 10), ("coolingDeviceTypeIsPassiveCooling", 11))

class CoolingDeviceSubTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 16))
    namedValues = NamedValues(("coolingDeviceSubTypeIsOther", 1), ("coolingDeviceSubTypeIsUnknown", 2), ("coolingDeviceSubTypeIsAFanThatReadsInRPM", 3), ("coolingDeviceSubTypeIsAFanReadsONorOFF", 4), ("coolingDeviceSubTypeIsAPowerSupplyFanThatReadsinRPM", 5), ("coolingDeviceSubTypeIsAPowerSupplyFanThatReadsONorOFF", 6), ("coolingDeviceSubTypeIsDiscrete", 16))

class CoolingDeviceDiscreteReadingEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("coolingDeviceIsGood", 1), ("coolingDeviceIsBad", 2))

coolingDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12), )
if mibBuilder.loadTexts: coolingDeviceTable.setStatus('mandatory')
coolingDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1), ).setIndexNames((0, "IDRAC-MIB", "coolingDevicechassisIndex"), (0, "IDRAC-MIB", "coolingDeviceIndex"))
if mibBuilder.loadTexts: coolingDeviceTableEntry.setStatus('mandatory')
coolingDevicechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDevicechassisIndex.setStatus('mandatory')
coolingDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceIndex.setStatus('mandatory')
coolingDeviceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceStateCapabilities.setStatus('mandatory')
coolingDeviceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceStateSettings.setStatus('mandatory')
coolingDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 5), StatusProbeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceStatus.setStatus('mandatory')
coolingDeviceReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 6), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceReading.setStatus('mandatory')
coolingDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 7), CoolingDeviceTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceType.setStatus('mandatory')
coolingDeviceLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceLocationName.setStatus('mandatory')
coolingDeviceUpperNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 9), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceUpperNonRecoverableThreshold.setStatus('mandatory')
coolingDeviceUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 10), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceUpperCriticalThreshold.setStatus('mandatory')
coolingDeviceUpperNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 11), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceUpperNonCriticalThreshold.setStatus('mandatory')
coolingDeviceLowerNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 12), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceLowerNonCriticalThreshold.setStatus('mandatory')
coolingDeviceLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 13), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceLowerCriticalThreshold.setStatus('mandatory')
coolingDeviceLowerNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 14), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceLowerNonRecoverableThreshold.setStatus('mandatory')
coolingDevicecoolingUnitIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 15), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDevicecoolingUnitIndexReference.setStatus('mandatory')
coolingDeviceSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 16), CoolingDeviceSubTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceSubType.setStatus('mandatory')
coolingDeviceProbeCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 17), ProbeCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceProbeCapabilities.setStatus('mandatory')
coolingDeviceDiscreteReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 18), CoolingDeviceDiscreteReadingEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceDiscreteReading.setStatus('mandatory')
coolingDeviceFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 19), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceFQDD.setStatus('mandatory')
class TemperatureProbeTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 16))
    namedValues = NamedValues(("temperatureProbeTypeIsOther", 1), ("temperatureProbeTypeIsUnknown", 2), ("temperatureProbeTypeIsAmbientESM", 3), ("temperatureProbeTypeIsDiscrete", 16))

class TemperatureDiscreteReadingEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("temperatureIsGood", 1), ("temperatureIsBad", 2))

temperatureProbeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20), )
if mibBuilder.loadTexts: temperatureProbeTable.setStatus('mandatory')
temperatureProbeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1), ).setIndexNames((0, "IDRAC-MIB", "temperatureProbechassisIndex"), (0, "IDRAC-MIB", "temperatureProbeIndex"))
if mibBuilder.loadTexts: temperatureProbeTableEntry.setStatus('mandatory')
temperatureProbechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbechassisIndex.setStatus('mandatory')
temperatureProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeIndex.setStatus('mandatory')
temperatureProbeStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeStateCapabilities.setStatus('mandatory')
temperatureProbeStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeStateSettings.setStatus('mandatory')
temperatureProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 5), StatusProbeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeStatus.setStatus('mandatory')
temperatureProbeReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 6), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeReading.setStatus('mandatory')
temperatureProbeType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 7), TemperatureProbeTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeType.setStatus('mandatory')
temperatureProbeLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeLocationName.setStatus('mandatory')
temperatureProbeUpperNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 9), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeUpperNonRecoverableThreshold.setStatus('mandatory')
temperatureProbeUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 10), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeUpperCriticalThreshold.setStatus('mandatory')
temperatureProbeUpperNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 11), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeUpperNonCriticalThreshold.setStatus('mandatory')
temperatureProbeLowerNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 12), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeLowerNonCriticalThreshold.setStatus('mandatory')
temperatureProbeLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 13), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeLowerCriticalThreshold.setStatus('mandatory')
temperatureProbeLowerNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 14), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeLowerNonRecoverableThreshold.setStatus('mandatory')
temperatureProbeProbeCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 15), ProbeCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeProbeCapabilities.setStatus('mandatory')
temperatureProbeDiscreteReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 16), TemperatureDiscreteReadingEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeDiscreteReading.setStatus('mandatory')
class ProcessorDeviceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("deviceTypeIsOther", 1), ("deviceTypeIsUnknown", 2), ("deviceTypeIsCPU", 3), ("deviceTypeIsMathProcessor", 4), ("deviceTypeIsDSP", 5), ("deviceTypeIsAVideoProcessor", 6))

class ProcessorDeviceFamily(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 80, 81, 82, 83, 84, 85, 86, 87, 88, 96, 97, 98, 99, 100, 101, 112, 120, 121, 122, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 250, 251))
    namedValues = NamedValues(("deviceFamilyIsOther", 1), ("deviceFamilyIsUnknown", 2), ("deviceFamilyIs8086", 3), ("deviceFamilyIs80286", 4), ("deviceFamilyIsIntel386", 5), ("deviceFamilyIsIntel486", 6), ("deviceFamilyIs8087", 7), ("deviceFamilyIs80287", 8), ("deviceFamilyIs80387", 9), ("deviceFamilyIs80487", 10), ("deviceFamilyIsPentium", 11), ("deviceFamilyIsPentiumPro", 12), ("deviceFamilyIsPentiumII", 13), ("deviceFamilyIsPentiumMMX", 14), ("deviceFamilyIsCeleron", 15), ("deviceFamilyIsPentiumIIXeon", 16), ("deviceFamilyIsPentiumIII", 17), ("deviceFamilyIsPentiumIIIXeon", 18), ("deviceFamilyIsPentiumIIISpeedStep", 19), ("deviceFamilyIsItanium", 20), ("deviceFamilyIsIntelXeon", 21), ("deviceFamilyIsPentium4", 22), ("deviceFamilyIsIntelXeonMP", 23), ("deviceFamilyIsIntelItanium2", 24), ("deviceFamilyIsK5", 25), ("deviceFamilyIsK6", 26), ("deviceFamilyIsK6Dash2", 27), ("deviceFamilyIsK6Dash3", 28), ("deviceFamilyIsAMDAthlon", 29), ("deviceFamilyIsAMD2900", 30), ("deviceFamilyIsK6Dash2Plus", 31), ("deviceFamilyIsPowerPC", 32), ("deviceFamilyIsPowerPC601", 33), ("deviceFamilyIsPowerPC603", 34), ("deviceFamilyIsPowerPC603Plus", 35), ("deviceFamilyIsPowerPC604", 36), ("deviceFamilyIsPowerPC620", 37), ("deviceFamilyIsPowerPCx704", 38), ("deviceFamilyIsPowerPC750", 39), ("deviceFamilyIsIntelCoreDuo", 40), ("deviceFamilyIsIntelCoreDuoMobile", 41), ("deviceFamilyIsIntelCoreSoloMobile", 42), ("deviceFamilyIsIntelAtom", 43), ("deviceFamilyIsAlpha", 48), ("deviceFamilyIsAlpha21064", 49), ("deviceFamilyIsAlpha21066", 50), ("deviceFamilyIsAlpha21164", 51), ("deviceFamilyIsAlpha21164PC", 52), ("deviceFamilyIsAlpha21164a", 53), ("deviceFamilyIsAlpha21264", 54), ("deviceFamilyIsAlpha21364", 55), ("deviceFamilyIsAMDTurionIIUltraDualMobileM", 56), ("deviceFamilyIsAMDTurionIIDualMobileM", 57), ("deviceFamilyIsAMDAthlonIIDualMobileM", 58), ("deviceFamilyIsAMDOpteron6100", 59), ("deviceFamilyIsAMDOpteron4100", 60), ("deviceFamilyIsAMDOpteron6200", 61), ("deviceFamilyIsAMDOpteron4200", 62), ("deviceFamilyIsMIPS", 64), ("deviceFamilyIsMIPSR4000", 65), ("deviceFamilyIsMIPSR4200", 66), ("deviceFamilyIsMIPSR4400", 67), ("deviceFamilyIsMIPSR4600", 68), ("deviceFamilyIsMIPSR10000", 69), ("deviceFamilyIsSPARC", 80), ("deviceFamilyIsSuperSPARC", 81), ("deviceFamilyIsmicroSPARCII", 82), ("deviceFamilyIsmicroSPARCIIep", 83), ("deviceFamilyIsUltraSPARC", 84), ("deviceFamilyIsUltraSPARCII", 85), ("deviceFamilyIsUltraSPARCIIi", 86), ("deviceFamilyIsUltraSPARCIII", 87), ("deviceFamilyIsUltraSPARCIIIi", 88), ("deviceFamilyIs68040", 96), ("deviceFamilyIs68xxx", 97), ("deviceFamilyIs68000", 98), ("deviceFamilyIs68010", 99), ("deviceFamilyIs68020", 100), ("deviceFamilyIs68030", 101), ("deviceFamilyIsHobbit", 112), ("deviceFamilyIsCrusoeTM5000", 120), ("deviceFamilyIsCrusoeTM3000", 121), ("deviceFamilyIsEfficeonTM8000", 122), ("deviceFamilyIsWeitek", 128), ("deviceFamilyIsIntelCeleronM", 130), ("deviceFamilyIsAMDAthlon64", 131), ("deviceFamilyIsAMDOpteron", 132), ("deviceFamilyIsAMDSempron", 133), ("deviceFamilyIsAMDTurion64Mobile", 134), ("deviceFamilyIsDualCoreAMDOpteron", 135), ("deviceFamilyIsAMDAthlon64X2DualCore", 136), ("deviceFamilyIsAMDTurion64X2Mobile", 137), ("deviceFamilyIsQuadCoreAMDOpteron", 138), ("deviceFamilyIsThirdGenerationAMDOpteron", 139), ("deviceFamilyIsAMDPhenomFXQuadCore", 140), ("deviceFamilyIsAMDPhenomX4QuadCore", 141), ("deviceFamilyIsAMDPhenomX2DualCore", 142), ("deviceFamilyIsAMDAthlonX2DualCore", 143), ("deviceFamilyIsPARISC", 144), ("deviceFamilyIsPARISC8500", 145), ("deviceFamilyIsPARISC8000", 146), ("deviceFamilyIsPARISC7300LC", 147), ("deviceFamilyIsPARISC7200", 148), ("deviceFamilyIsPARISC7100LC", 149), ("deviceFamilyIsPARISC7100", 150), ("deviceFamilyIsV30", 160), ("deviceFamilyIsQuadCoreIntelXeon3200", 161), ("deviceFamilyIsDualCoreIntelXeon3000", 162), ("deviceFamilyIsQuadCoreIntelXeon5300", 163), ("deviceFamilyIsDualCoreIntelXeon5100", 164), ("deviceFamilyIsDualCoreIntelXeon5000", 165), ("deviceFamilyIsDualCoreIntelXeonLV", 166), ("deviceFamilyIsDualCoreIntelXeonULV", 167), ("deviceFamilyIsDualCoreIntelXeon7100", 168), ("deviceFamilyIsQuadCoreIntelXeon5400", 169), ("deviceFamilyIsQuadCoreIntelXeon", 170), ("deviceFamilyIsDualCoreIntelXeon5200", 171), ("deviceFamilyIsDualCoreIntelXeon7200", 172), ("deviceFamilyIsQuadCoreIntelXeon7300", 173), ("deviceFamilyIsQuadCoreIntelXeon7400", 174), ("deviceFamilyIsMultiCoreIntelXeon7400", 175), ("deviceFamilyIsM1", 176), ("deviceFamilyIsM2", 177), ("deviceFamilyIsIntelPentium4HT", 179), ("deviceFamilyIsAS400", 180), ("deviceFamilyIsAMDAthlonXP", 182), ("deviceFamilyIsAMDAthlonMP", 183), ("deviceFamilyIsAMDDuron", 184), ("deviceFamilyIsIntelPentiumM", 185), ("deviceFamilyIsIntelCeleronD", 186), ("deviceFamilyIsIntelPentiumD", 187), ("deviceFamilyIsIntelPentiumExtreme", 188), ("deviceFamilyIsIntelCoreSolo", 189), ("deviceFamilyIsIntelCore2", 190), ("deviceFamilyIsIntelCore2Duo", 191), ("deviceFamilyIsIntelCore2Solo", 192), ("deviceFamilyIsIntelCore2Extreme", 193), ("deviceFamilyIsIntelCore2Quad", 194), ("deviceFamilyIsIntelCore2ExtremeMobile", 195), ("deviceFamilyIsIntelCore2DuoMobile", 196), ("deviceFamilyIsIntelCore2SoloMobile", 197), ("deviceFamilyIsIntelCorei7", 198), ("deviceFamilyIsDualCoreIntelCeleron", 199), ("deviceFamilyIsIBM390", 200), ("deviceFamilyIsG4", 201), ("deviceFamilyIsG5", 202), ("deviceFamilyIsESA390G6", 203), ("deviceFamilyIszArchitectur", 204), ("deviceFamilyIsIntelCorei5", 205), ("deviceFamilyIsIntelCorei3", 206), ("deviceFamilyIsVIAC7M", 210), ("deviceFamilyIsVIAC7D", 211), ("deviceFamilyIsVIAC7", 212), ("deviceFamilyIsVIAEden", 213), ("deviceFamilyIsMultiCoreIntelXeon", 214), ("deviceFamilyIsDualCoreIntelXeon3xxx", 215), ("deviceFamilyIsQuadCoreIntelXeon3xxx", 216), ("deviceFamilyIsVIANano", 217), ("deviceFamilyIsDualCoreIntelXeon5xxx", 218), ("deviceFamilyIsQuadCoreIntelXeon5xxx", 219), ("deviceFamilyIsDualCoreIntelXeon7xxx", 221), ("deviceFamilyIsQuadCoreIntelXeon7xxx", 222), ("deviceFamilyIsMultiCoreIntelXeon7xxx", 223), ("deviceFamilyIsMultiCoreIntelXeon3400", 224), ("deviceFamilyIsEmbeddedAMDOpertonQuadCore", 230), ("deviceFamilyIsAMDPhenomTripleCore", 231), ("deviceFamilyIsAMDTurionUltraDualCoreMobile", 232), ("deviceFamilyIsAMDTurionDualCoreMobile", 233), ("deviceFamilyIsAMDAthlonDualCore", 234), ("deviceFamilyIsAMDSempronSI", 235), ("deviceFamilyIsAMDPhenomII", 236), ("deviceFamilyIsAMDAthlonII", 237), ("deviceFamilyIsSixCoreAMDOpteron", 238), ("deviceFamilyIsAMDSempronM", 239), ("deviceFamilyIsi860", 250), ("deviceFamilyIsi960", 251))

class ProcessorDeviceStatusState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("userDisabled", 4), ("biosDisabled", 5), ("idle", 6))

processorDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30), )
if mibBuilder.loadTexts: processorDeviceTable.setStatus('mandatory')
processorDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1), ).setIndexNames((0, "IDRAC-MIB", "processorDevicechassisIndex"), (0, "IDRAC-MIB", "processorDeviceIndex"))
if mibBuilder.loadTexts: processorDeviceTableEntry.setStatus('mandatory')
processorDevicechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDevicechassisIndex.setStatus('mandatory')
processorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceIndex.setStatus('mandatory')
processorDeviceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStateCapabilities.setStatus('mandatory')
processorDeviceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStateSettings.setStatus('mandatory')
processorDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatus.setStatus('mandatory')
processorDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 7), ProcessorDeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceType.setStatus('mandatory')
processorDeviceManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceManufacturerName.setStatus('mandatory')
processorDeviceStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 9), ProcessorDeviceStatusState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusState.setStatus('mandatory')
processorDeviceFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 10), ProcessorDeviceFamily()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceFamily.setStatus('mandatory')
processorDeviceMaximumSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 11), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceMaximumSpeed.setStatus('mandatory')
processorDeviceCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 12), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceCurrentSpeed.setStatus('mandatory')
processorDeviceExternalClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 13), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceExternalClockSpeed.setStatus('mandatory')
processorDeviceVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 14), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceVoltage.setStatus('mandatory')
processorDeviceVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 16), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceVersionName.setStatus('mandatory')
processorDeviceCoreCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 17), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceCoreCount.setStatus('mandatory')
processorDeviceCoreEnabledCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 18), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceCoreEnabledCount.setStatus('mandatory')
processorDeviceThreadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 19), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceThreadCount.setStatus('mandatory')
processorDeviceCharacteristics = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 20), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceCharacteristics.setStatus('mandatory')
processorDeviceExtendedCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 21), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceExtendedCapabilities.setStatus('mandatory')
processorDeviceExtendedSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 22), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceExtendedSettings.setStatus('mandatory')
processorDeviceBrandName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 23), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceBrandName.setStatus('mandatory')
processorDeviceFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 26), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceFQDD.setStatus('mandatory')
class ProcessorDeviceStatusReadingFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 32, 128, 256, 512, 1024))
    namedValues = NamedValues(("internalError", 1), ("thermalTrip", 2), ("configurationError", 32), ("processorPresent", 128), ("processorDisabled", 256), ("terminatorPresent", 512), ("processorThrottled", 1024))

processorDeviceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32), )
if mibBuilder.loadTexts: processorDeviceStatusTable.setStatus('mandatory')
processorDeviceStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1), ).setIndexNames((0, "IDRAC-MIB", "processorDeviceStatusChassisIndex"), (0, "IDRAC-MIB", "processorDeviceStatusIndex"))
if mibBuilder.loadTexts: processorDeviceStatusTableEntry.setStatus('mandatory')
processorDeviceStatusChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusChassisIndex.setStatus('mandatory')
processorDeviceStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusIndex.setStatus('mandatory')
processorDeviceStatusStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusStateCapabilities.setStatus('mandatory')
processorDeviceStatusStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusStateSettings.setStatus('mandatory')
processorDeviceStatusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusStatus.setStatus('mandatory')
processorDeviceStatusReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1, 6), ProcessorDeviceStatusReadingFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusReading.setStatus('mandatory')
processorDeviceStatusLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1, 7), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusLocationName.setStatus('mandatory')
class MemoryDeviceTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26))
    namedValues = NamedValues(("deviceTypeIsOther", 1), ("deviceTypeIsUnknown", 2), ("deviceTypeIsDRAM", 3), ("deviceTypeIsEDRAM", 4), ("deviceTypeIsVRAM", 5), ("deviceTypeIsSRAM", 6), ("deviceTypeIsRAM", 7), ("deviceTypeIsROM", 8), ("deviceTypeIsFLASH", 9), ("deviceTypeIsEEPROM", 10), ("deviceTypeIsFEPROM", 11), ("deviceTypeIsEPROM", 12), ("deviceTypeIsCDRAM", 13), ("deviceTypeIs3DRAM", 14), ("deviceTypeIsSDRAM", 15), ("deviceTypeIsSGRAM", 16), ("deviceTypeIsRDRAM", 17), ("deviceTypeIsDDR", 18), ("deviceTypeIsDDR2", 19), ("deviceTypeIsDDR2FBDIMM", 20), ("deviceTypeIsDDR3", 24), ("deviceTypeIsFBD2", 25), ("deviceTypeIsDDR4", 26))

memoryDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50), )
if mibBuilder.loadTexts: memoryDeviceTable.setStatus('mandatory')
memoryDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1), ).setIndexNames((0, "IDRAC-MIB", "memoryDevicechassisIndex"), (0, "IDRAC-MIB", "memoryDeviceIndex"))
if mibBuilder.loadTexts: memoryDeviceTableEntry.setStatus('mandatory')
memoryDevicechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDevicechassisIndex.setStatus('mandatory')
memoryDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceIndex.setStatus('mandatory')
memoryDeviceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceStateCapabilities.setStatus('mandatory')
memoryDeviceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceStateSettings.setStatus('mandatory')
memoryDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceStatus.setStatus('mandatory')
memoryDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 7), MemoryDeviceTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceType.setStatus('mandatory')
memoryDeviceLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceLocationName.setStatus('mandatory')
memoryDeviceBankLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 10), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceBankLocationName.setStatus('mandatory')
memoryDeviceSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 14), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceSize.setStatus('mandatory')
memoryDeviceSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 15), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceSpeed.setStatus('mandatory')
memoryDeviceManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 21), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceManufacturerName.setStatus('mandatory')
memoryDevicePartNumberName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 22), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDevicePartNumberName.setStatus('mandatory')
memoryDeviceSerialNumberName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 23), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceSerialNumberName.setStatus('mandatory')
memoryDeviceFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 26), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceFQDD.setStatus('mandatory')
memoryDeviceCurrentOperatingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 27), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceCurrentOperatingSpeed.setStatus('mandatory')
pCIDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80), )
if mibBuilder.loadTexts: pCIDeviceTable.setStatus('mandatory')
pCIDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1), ).setIndexNames((0, "IDRAC-MIB", "pCIDevicechassisIndex"), (0, "IDRAC-MIB", "pCIDeviceIndex"))
if mibBuilder.loadTexts: pCIDeviceTableEntry.setStatus('mandatory')
pCIDevicechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDevicechassisIndex.setStatus('mandatory')
pCIDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceIndex.setStatus('mandatory')
pCIDeviceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceStateCapabilities.setStatus('mandatory')
pCIDeviceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceStateSettings.setStatus('mandatory')
pCIDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceStatus.setStatus('mandatory')
pCIDeviceDataBusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 7), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceDataBusWidth.setStatus('mandatory')
pCIDeviceManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceManufacturerName.setStatus('mandatory')
pCIDeviceDescriptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 9), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceDescriptionName.setStatus('mandatory')
pCIDeviceFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 12), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceFQDD.setStatus('mandatory')
class NetworkDeviceConnectionStatusEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10, 11, 12, 13))
    namedValues = NamedValues(("connected", 1), ("disconnected", 2), ("driverBad", 3), ("driverDisabled", 4), ("hardwareInitalizing", 10), ("hardwareResetting", 11), ("hardwareClosing", 12), ("hardwareNotReady", 13))

class NetworkDeviceTOECapabilityFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))
    namedValues = NamedValues(("unknown", 1), ("available", 2), ("notAvailable", 4), ("cannotBeDetermined", 8), ("driverNotResponding", 16))

class NetworkDeviceiSCSICapabilityFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))
    namedValues = NamedValues(("unknown", 1), ("available", 2), ("notAvailable", 4), ("cannotBeDetermined", 8), ("driverNotResponding", 16))

class NetworkDeviceCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("supported", 1), ("toe", 2), ("iscsiOffload", 4), ("fcoeOffload", 8))

networkDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90), )
if mibBuilder.loadTexts: networkDeviceTable.setStatus('mandatory')
networkDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1), ).setIndexNames((0, "IDRAC-MIB", "networkDeviceChassisIndex"), (0, "IDRAC-MIB", "networkDeviceIndex"))
if mibBuilder.loadTexts: networkDeviceTableEntry.setStatus('mandatory')
networkDeviceChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceChassisIndex.setStatus('mandatory')
networkDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceIndex.setStatus('mandatory')
networkDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 3), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceStatus.setStatus('mandatory')
networkDeviceConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 4), NetworkDeviceConnectionStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceConnectionStatus.setStatus('mandatory')
networkDeviceProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 6), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceProductName.setStatus('mandatory')
networkDeviceVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 7), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceVendorName.setStatus('mandatory')
networkDeviceCurrentMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 15), MACAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceCurrentMACAddress.setStatus('mandatory')
networkDevicePermanentMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 16), MACAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDevicePermanentMACAddress.setStatus('mandatory')
networkDevicePCIBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 17), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDevicePCIBusNumber.setStatus('mandatory')
networkDevicePCIDeviceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 18), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDevicePCIDeviceNumber.setStatus('mandatory')
networkDevicePCIFunctionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 19), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDevicePCIFunctionNumber.setStatus('mandatory')
networkDeviceTOECapabilityFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 23), NetworkDeviceTOECapabilityFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceTOECapabilityFlags.setStatus('mandatory')
networkDeviceiSCSICapabilityFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 27), NetworkDeviceiSCSICapabilityFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceiSCSICapabilityFlags.setStatus('mandatory')
networkDeviceiSCSIEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 28), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceiSCSIEnabled.setStatus('mandatory')
networkDeviceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 29), NetworkDeviceCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceCapabilities.setStatus('mandatory')
networkDeviceFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 30), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceFQDD.setStatus('mandatory')
class SystemSlotStateCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 126, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32640, 32766))
    namedValues = NamedValues(("systemSlotHotPlugIsUnknown", 1), ("systemSlotHotPlugIsHotPluggableCapable", 2), ("systemSlotHotPlugCanBePoweredOn", 4), ("systemSlotHotPlugCanSignalAttention", 8), ("systemSlotHotPlugCanSignalPowerFault", 16), ("systemSlotHotPlugCanSignalAdapterPresent", 32), ("systemSlotHotPlugCanSignalPowerButtonPressed", 64), ("canSupportAllHotPlugCapabilities", 126), ("systemSlotCanProvide5Volts", 128), ("systemSlotCanProvide3Point3Volts", 256), ("systemSlotCanSignalIfShared", 512), ("systemSlotCanSupportCard16", 1024), ("systemSlotCanSupportCardBus", 2048), ("systemSlotCanSupportZoomVideo", 4096), ("systemSlotCanSupportModemRingResume", 8192), ("systemSlotCanSupportPMESignal", 16384), ("canSupportAllSlotCapabilities", 32640), ("canSupportAllSlotAndAllHotPlugCapabilities", 32766))

class SystemSlotStateSettingsFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 36, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 16770, 16804, 16806, 17316))
    namedValues = NamedValues(("systemSlotHotPlugIsUnknown", 1), ("systemSlotHotPlugIsHotPluggable", 2), ("systemSlotHotPlugIsPoweredOn", 4), ("systemSlotHotPlugIsAtAttention", 8), ("systemSlotHotPlugHasPowerFaulted", 16), ("systemSlotHotPlugAdapterIsPresent", 32), ("systemSlotHotPlugAdapterPresentAndPoweredOn", 36), ("systemSlotHotPlugPowerButtonPressed", 64), ("systemSlotProvides5Volts", 128), ("systemSlotProvides3Point3Volts", 256), ("systemSlotIsShared", 512), ("systemSlotSupportsCard16", 1024), ("systemSlotSupportsCardBus", 2048), ("systemSlotSupportsZoomVideo", 4096), ("systemSlotSupportsModemRingResume", 8192), ("systemSlotSupportsPMESignal", 16384), ("supportsPMEand3P3Vand5VandHotPluggable", 16770), ("supportsPMEand3P3Vand5VhasAdapterOn", 16804), ("supportsPMEand3P3Vand5VhasAdapterOnandisHotPluggable", 16806), ("supportsPMEand3P3VIsSharedand5VhasAdapterOnandHotPlugable", 17316))

class SystemSlotTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176))
    namedValues = NamedValues(("systemSlotIsOther", 1), ("systemSlotIsUnknown", 2), ("systemSlotIsISA", 3), ("systemSlotIsMCA", 4), ("systemSlotIsEISA", 5), ("systemSlotIsPCI", 6), ("systemSlotIsPCMCIA", 7), ("systemSlotIsVLVESA", 8), ("systemSlotIsProprietary", 9), ("systemSlotIsProcessorCard", 10), ("systemSlotIsProprietaryMemory", 11), ("systemSlotIsIORiserCard", 12), ("systemSlotIsNuBUS", 13), ("systemSlotIsPCI66MHz", 14), ("systemSlotIsAGP", 15), ("systemSlotIsAGP2X", 16), ("systemSlotIsAGP4X", 17), ("systemSlotIsPC98C20", 18), ("systemSlotIsPC98C24", 19), ("systemSlotIsPC98E", 20), ("systemSlotIsPC98LocalBus", 21), ("systemSlotIsPC98Card", 22), ("systemSlotIsPCIX", 23), ("systemSlotIsPCIExpress", 24), ("systemSlotIsAGP8X", 25), ("systemSlotIsPCIExpressX1", 166), ("systemSlotIsPCIExpressX2", 167), ("systemSlotIsPCIExpressX4", 168), ("systemSlotIsPCIExpressX8", 169), ("systemSlotIsPCIExpressX16", 170), ("systemSlotIsPCIExpressGen2", 171), ("systemSlotIsPCIExpressGen2X1", 172), ("systemSlotIsPCIExpressGen2X2", 173), ("systemSlotIsPCIExpressGen2X4", 174), ("systemSlotIsPCIExpressGen2X8", 175), ("systemSlotIsPCIExpressGen2X16", 176))

class SystemSlotUsageEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("systemSlotUsageIsOther", 1), ("systemSlotUsageIsUnknown", 2), ("systemSlotUsageIsAvailable", 3), ("systemSlotUsageIsInUse", 4))

class SystemSlotCategoryEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("systemSlotCategoryIsOther", 1), ("systemSlotCategoryIsUnknown", 2), ("systemSlotCategoryIsBusConnector", 3), ("systemSlotCategoryIsPCMCIA", 4), ("systemSlotCategoryIsMotherboard", 5))

systemSlotTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10), )
if mibBuilder.loadTexts: systemSlotTable.setStatus('mandatory')
systemSlotTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1), ).setIndexNames((0, "IDRAC-MIB", "systemSlotchassisIndex"), (0, "IDRAC-MIB", "systemSlotIndex"))
if mibBuilder.loadTexts: systemSlotTableEntry.setStatus('mandatory')
systemSlotchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotchassisIndex.setStatus('mandatory')
systemSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotIndex.setStatus('mandatory')
systemSlotStateCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 3), SystemSlotStateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotStateCapabilitiesUnique.setStatus('mandatory')
systemSlotStateSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 4), SystemSlotStateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotStateSettingsUnique.setStatus('mandatory')
systemSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotStatus.setStatus('mandatory')
systemSlotCurrentUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 6), SystemSlotUsageEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotCurrentUsage.setStatus('mandatory')
systemSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 7), SystemSlotTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotType.setStatus('mandatory')
systemSlotSlotExternalSlotName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotSlotExternalSlotName.setStatus('mandatory')
systemSlotCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 11), SystemSlotCategoryEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotCategory.setStatus('mandatory')
fruTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10), )
if mibBuilder.loadTexts: fruTable.setStatus('mandatory')
fruTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1), ).setIndexNames((0, "IDRAC-MIB", "fruChassisIndex"), (0, "IDRAC-MIB", "fruIndex"))
if mibBuilder.loadTexts: fruTableEntry.setStatus('mandatory')
fruChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruChassisIndex.setStatus('mandatory')
fruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruIndex.setStatus('mandatory')
fruInformationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 3), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruInformationStatus.setStatus('mandatory')
fruManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruManufacturerName.setStatus('mandatory')
fruSerialNumberName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruSerialNumberName.setStatus('mandatory')
fruPartNumberName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruPartNumberName.setStatus('mandatory')
fruRevisionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruRevisionName.setStatus('mandatory')
fruFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 12), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruFQDD.setStatus('mandatory')
batteryTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15), )
if mibBuilder.loadTexts: batteryTable.setStatus('mandatory')
batteryTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15, 1), ).setIndexNames((0, "IDRAC-MIB", "batteryNumber"))
if mibBuilder.loadTexts: batteryTableEntry.setStatus('mandatory')
batteryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryNumber.setStatus('mandatory')
batteryState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("failed", 3), ("degraded", 4), ("missing", 5), ("charging", 6), ("belowThreshold", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryState.setStatus('mandatory')
batteryComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15, 1, 6), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryComponentStatus.setStatus('mandatory')
batteryPredictedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("failed", 2), ("ready", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryPredictedCapacity.setStatus('obsolete')
batteryFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryFQDD.setStatus('mandatory')
batteryDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryDisplayName.setStatus('mandatory')
controllerTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1), )
if mibBuilder.loadTexts: controllerTable.setStatus('mandatory')
controllerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1), ).setIndexNames((0, "IDRAC-MIB", "controllerNumber"))
if mibBuilder.loadTexts: controllerTableEntry.setStatus('mandatory')
controllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerNumber.setStatus('mandatory')
controllerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerName.setStatus('mandatory')
controllerRebuildRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerRebuildRate.setStatus('mandatory')
controllerFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerFWVersion.setStatus('mandatory')
controllerCacheSizeInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerCacheSizeInMB.setStatus('mandatory')
controllerRollUpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 37), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerRollUpStatus.setStatus('mandatory')
controllerComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 38), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerComponentStatus.setStatus('mandatory')
controllerDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerDriverVersion.setStatus('mandatory')
controllerPCISlot = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPCISlot.setStatus('mandatory')
controllerReconstructRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerReconstructRate.setStatus('mandatory')
controllerPatrolReadRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPatrolReadRate.setStatus('mandatory')
controllerBGIRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerBGIRate.setStatus('mandatory')
controllerCheckConsistencyRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerCheckConsistencyRate.setStatus('mandatory')
controllerPatrolReadMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("disabled", 3), ("auto", 4), ("manual", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPatrolReadMode.setStatus('mandatory')
controllerPatrolReadState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("stopped", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPatrolReadState.setStatus('mandatory')
controllerPersistentHotSpare = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 59), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPersistentHotSpare.setStatus('mandatory')
controllerSpinDownUnconfiguredDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 60), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerSpinDownUnconfiguredDrives.setStatus('mandatory')
controllerSpinDownHotSpareDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 61), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerSpinDownHotSpareDrives.setStatus('mandatory')
controllerSpinDownTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerSpinDownTimeInterval.setStatus('mandatory')
controllerPreservedCache = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 69), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPreservedCache.setStatus('mandatory')
controllerCheckConsistencyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unsupported", 2), ("normal", 3), ("stopOnError", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerCheckConsistencyMode.setStatus('mandatory')
controllerCopyBackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unsupported", 2), ("on", 3), ("onWithSmart", 4), ("off", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerCopyBackMode.setStatus('mandatory')
controllerSecurityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("lkm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerSecurityStatus.setStatus('mandatory')
controllerEncryptionKeyPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 73), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerEncryptionKeyPresent.setStatus('mandatory')
controllerEncryptionCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("lkm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerEncryptionCapability.setStatus('mandatory')
controllerLoadBalanceSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unsupported", 2), ("auto", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerLoadBalanceSetting.setStatus('mandatory')
controllerMaxCapSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("oneDotFiveGbps", 2), ("threeGbps", 3), ("sixGbps", 4), ("twelveGbps", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerMaxCapSpeed.setStatus('mandatory')
controllerSASAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 77), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerSASAddress.setStatus('mandatory')
controllerFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 78), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerFQDD.setStatus('mandatory')
controllerDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 79), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerDisplayName.setStatus('mandatory')
controllerT10PICapability = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("capable", 2), ("notCapable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerT10PICapability.setStatus('mandatory')
controllerRAID10UnevenSpansSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 81), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerRAID10UnevenSpansSupported.setStatus('mandatory')
controllerEnhancedAutoImportForeignConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("disabled", 3), ("enabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerEnhancedAutoImportForeignConfigMode.setStatus('mandatory')
controllerBootModeSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 83), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerBootModeSupported.setStatus('mandatory')
controllerBootMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("user", 2), ("contOnError", 3), ("headlessContOnError", 4), ("headlessSafe", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerBootMode.setStatus('mandatory')
physicalDiskTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4), )
if mibBuilder.loadTexts: physicalDiskTable.setStatus('mandatory')
physicalDiskTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1), ).setIndexNames((0, "IDRAC-MIB", "physicalDiskNumber"))
if mibBuilder.loadTexts: physicalDiskTableEntry.setStatus('mandatory')
physicalDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskNumber.setStatus('mandatory')
physicalDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskName.setStatus('mandatory')
physicalDiskManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskManufacturer.setStatus('mandatory')
physicalDiskState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("online", 3), ("foreign", 4), ("offline", 5), ("blocked", 6), ("failed", 7), ("nonraid", 8), ("removed", 9), ("readonly", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskState.setStatus('mandatory')
physicalDiskProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskProductID.setStatus('mandatory')
physicalDiskSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskSerialNo.setStatus('mandatory')
physicalDiskRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskRevision.setStatus('mandatory')
physicalDiskCapacityInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskCapacityInMB.setStatus('mandatory')
physicalDiskUsedSpaceInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskUsedSpaceInMB.setStatus('mandatory')
physicalDiskFreeSpaceInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskFreeSpaceInMB.setStatus('mandatory')
physicalDiskBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("scsi", 2), ("sas", 3), ("sata", 4), ("fibre", 5), ("pcie", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskBusType.setStatus('mandatory')
physicalDiskSpareState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notASpare", 1), ("dedicatedHotSpare", 2), ("globalHotSpare", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskSpareState.setStatus('mandatory')
physicalDiskComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 24), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskComponentStatus.setStatus('mandatory')
physicalDiskPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskPartNumber.setStatus('mandatory')
physicalDiskSASAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskSASAddress.setStatus('mandatory')
physicalDiskNegotiatedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("oneDotFiveGbps", 2), ("threeGbps", 3), ("sixGbps", 4), ("twelveGbps", 5), ("fiveGTps", 6), ("eightGTps", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskNegotiatedSpeed.setStatus('mandatory')
physicalDiskCapableSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("oneDotFiveGbps", 2), ("threeGbps", 3), ("sixGbps", 4), ("twelveGbps", 5), ("fiveGTps", 6), ("eightGTps", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskCapableSpeed.setStatus('mandatory')
physicalDiskSmartAlertIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 31), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskSmartAlertIndication.setStatus('mandatory')
physicalDiskManufactureDay = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskManufactureDay.setStatus('mandatory')
physicalDiskManufactureWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskManufactureWeek.setStatus('mandatory')
physicalDiskManufactureYear = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskManufactureYear.setStatus('mandatory')
physicalDiskMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("hdd", 2), ("ssd", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskMediaType.setStatus('mandatory')
physicalDiskPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("spunUp", 2), ("spunDown", 3), ("transition", 4), ("on", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskPowerState.setStatus('mandatory')
physicalDiskRemainingRatedWriteEndurance = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskRemainingRatedWriteEndurance.setStatus('mandatory')
physicalDiskOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("rebuild", 2), ("clear", 3), ("copyback", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskOperationalState.setStatus('mandatory')
physicalDiskProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskProgress.setStatus('mandatory')
physicalDiskSecurityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2), ("secured", 3), ("locked", 4), ("foreign", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskSecurityStatus.setStatus('mandatory')
physicalDiskFormFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("oneDotEight", 2), ("twoDotFive", 3), ("threeDotFive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskFormFactor.setStatus('mandatory')
physicalDiskFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 54), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskFQDD.setStatus('mandatory')
physicalDiskDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 55), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskDisplayName.setStatus('mandatory')
physicalDiskT10PICapability = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("capable", 2), ("notCapable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskT10PICapability.setStatus('mandatory')
physicalDiskBlockSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskBlockSizeInBytes.setStatus('mandatory')
physicalDiskProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 59), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskProtocolVersion.setStatus('mandatory')
physicalDiskPCIeNegotiatedLinkWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("notApplicable", 2), ("byOne", 3), ("byTwp", 4), ("byFour", 5), ("byEight", 6), ("bySixteen", 7), ("byThirtyTwp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskPCIeNegotiatedLinkWidth.setStatus('mandatory')
physicalDiskPCIeCapableLinkWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("notApplicable", 2), ("byOne", 3), ("byTwp", 4), ("byFour", 5), ("byEight", 6), ("bySixteen", 7), ("byThirtyTwp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskPCIeCapableLinkWidth.setStatus('mandatory')
virtualDiskTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1), )
if mibBuilder.loadTexts: virtualDiskTable.setStatus('mandatory')
virtualDiskTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1), ).setIndexNames((0, "IDRAC-MIB", "virtualDiskNumber"))
if mibBuilder.loadTexts: virtualDiskTableEntry.setStatus('mandatory')
virtualDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskNumber.setStatus('mandatory')
virtualDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskName.setStatus('mandatory')
virtualDiskState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("online", 2), ("failed", 3), ("degraded", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskState.setStatus('mandatory')
virtualDiskSizeInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskSizeInMB.setStatus('mandatory')
virtualDiskWritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("writeThrough", 1), ("writeBack", 2), ("writeBackForce", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskWritePolicy.setStatus('mandatory')
virtualDiskReadPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noReadAhead", 1), ("readAhead", 2), ("adaptiveReadAhead", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskReadPolicy.setStatus('mandatory')
virtualDiskLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("r0", 2), ("r1", 3), ("r5", 4), ("r6", 5), ("r10", 6), ("r50", 7), ("r60", 8), ("concatRaid1", 9), ("concatRaid5", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskLayout.setStatus('mandatory')
virtualDiskStripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("other", 1), ("default", 2), ("fiveHundredAndTwelvebytes", 3), ("oneKilobytes", 4), ("twoKilobytes", 5), ("fourKilobytes", 6), ("eightKilobytes", 7), ("sixteenKilobytes", 8), ("thirtyTwoKilobytes", 9), ("sixtyFourKilobytes", 10), ("oneTwentyEightKilobytes", 11), ("twoFiftySixKilobytes", 12), ("fiveOneTwoKilobytes", 13), ("oneMegabye", 14), ("twoMegabytes", 15), ("fourMegabytes", 16), ("eightMegabytes", 17), ("sixteenMegabytes", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskStripeSize.setStatus('mandatory')
virtualDiskComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 20), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskComponentStatus.setStatus('mandatory')
virtualDiskBadBlocksDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 23), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskBadBlocksDetected.setStatus('mandatory')
virtualDiskSecured = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 24), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskSecured.setStatus('mandatory')
virtualDiskIsCacheCade = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 25), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskIsCacheCade.setStatus('mandatory')
virtualDiskDiskCachePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("defullt", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskDiskCachePolicy.setStatus('mandatory')
virtualDiskOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("reconstructing", 2), ("resynching", 3), ("initializing", 4), ("backgroundInit", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskOperationalState.setStatus('mandatory')
virtualDiskProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskProgress.setStatus('mandatory')
virtualDiskAvailableProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskAvailableProtocols.setStatus('mandatory')
virtualDiskMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskMediaType.setStatus('mandatory')
virtualDiskRemainingRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskRemainingRedundancy.setStatus('mandatory')
virtualDiskFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 35), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskFQDD.setStatus('mandatory')
virtualDiskDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskDisplayName.setStatus('mandatory')
virtualDiskT10PIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskT10PIStatus.setStatus('mandatory')
virtualDiskBlockSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskBlockSizeInBytes.setStatus('mandatory')
enclosureTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3), )
if mibBuilder.loadTexts: enclosureTable.setStatus('mandatory')
enclosureTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1), ).setIndexNames((0, "IDRAC-MIB", "enclosureNumber"))
if mibBuilder.loadTexts: enclosureTableEntry.setStatus('mandatory')
enclosureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureNumber.setStatus('mandatory')
enclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureName.setStatus('mandatory')
enclosureState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("failed", 3), ("missing", 4), ("degraded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureState.setStatus('mandatory')
enclosureServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureServiceTag.setStatus('mandatory')
enclosureAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAssetTag.setStatus('mandatory')
enclosureConnectedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureConnectedPort.setStatus('mandatory')
enclosureRollUpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 23), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureRollUpStatus.setStatus('mandatory')
enclosureComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 24), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureComponentStatus.setStatus('mandatory')
enclosureFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFirmwareVersion.setStatus('mandatory')
enclosureSASAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureSASAddress.setStatus('mandatory')
enclosureDriveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureDriveCount.setStatus('mandatory')
enclosureTotalSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTotalSlots.setStatus('mandatory')
enclosureFanCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanCount.setStatus('mandatory')
enclosurePSUCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePSUCount.setStatus('mandatory')
enclosureEMMCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureEMMCount.setStatus('mandatory')
enclosureTempProbeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTempProbeCount.setStatus('mandatory')
enclosureRedundantPath = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureRedundantPath.setStatus('mandatory')
enclosurePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePosition.setStatus('mandatory')
enclosureBackplaneBayID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureBackplaneBayID.setStatus('mandatory')
enclosureFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 47), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFQDD.setStatus('mandatory')
enclosureDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureDisplayName.setStatus('mandatory')
enclosureType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("notApplicable", 2), ("sassata", 3), ("pcie", 4), ("universal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureType.setStatus('mandatory')
enclosureManagementModuleTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13), )
if mibBuilder.loadTexts: enclosureManagementModuleTable.setStatus('mandatory')
enclosureManagementModuleTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1), ).setIndexNames((0, "IDRAC-MIB", "enclosureManagementModuleNumber"))
if mibBuilder.loadTexts: enclosureManagementModuleTableEntry.setStatus('mandatory')
enclosureManagementModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleNumber.setStatus('mandatory')
enclosureManagementModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleName.setStatus('mandatory')
enclosureManagementModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("failed", 3), ("missing", 4), ("degraded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleState.setStatus('mandatory')
enclosureManagementModulePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModulePartNumber.setStatus('mandatory')
enclosureManagementModuleFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleFWVersion.setStatus('mandatory')
enclosureManagementModuleComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 11), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleComponentStatus.setStatus('mandatory')
enclosureManagementModuleFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 15), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleFQDD.setStatus('mandatory')
enclosureManagementModuleDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleDisplayName.setStatus('mandatory')
enclosureFanTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7), )
if mibBuilder.loadTexts: enclosureFanTable.setStatus('mandatory')
enclosureFanTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1), ).setIndexNames((0, "IDRAC-MIB", "enclosureFanNumber"))
if mibBuilder.loadTexts: enclosureFanTableEntry.setStatus('mandatory')
enclosureFanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanNumber.setStatus('mandatory')
enclosureFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanName.setStatus('mandatory')
enclosureFanState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("failed", 3), ("missing", 4), ("degraded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanState.setStatus('mandatory')
enclosureFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("stopped", 2), ("slow", 3), ("medium", 4), ("fast", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanSpeed.setStatus('mandatory')
enclosureFanComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1, 15), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanComponentStatus.setStatus('mandatory')
enclosureFanFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1, 20), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanFQDD.setStatus('mandatory')
enclosureFanDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanDisplayName.setStatus('mandatory')
enclosurePowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9), )
if mibBuilder.loadTexts: enclosurePowerSupplyTable.setStatus('mandatory')
enclosurePowerSupplyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1), ).setIndexNames((0, "IDRAC-MIB", "enclosurePowerSupplyNumber"))
if mibBuilder.loadTexts: enclosurePowerSupplyTableEntry.setStatus('mandatory')
enclosurePowerSupplyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePowerSupplyNumber.setStatus('mandatory')
enclosurePowerSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePowerSupplyName.setStatus('mandatory')
enclosurePowerSupplyState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("failed", 3), ("missing", 4), ("degraded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePowerSupplyState.setStatus('mandatory')
enclosurePowerSupplyPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePowerSupplyPartNumber.setStatus('mandatory')
enclosurePowerSupplyComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1, 9), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePowerSupplyComponentStatus.setStatus('mandatory')
enclosurePowerSupplyFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1, 15), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePowerSupplyFQDD.setStatus('mandatory')
enclosurePowerSupplyDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePowerSupplyDisplayName.setStatus('mandatory')
enclosureTemperatureProbeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11), )
if mibBuilder.loadTexts: enclosureTemperatureProbeTable.setStatus('mandatory')
enclosureTemperatureProbeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1), ).setIndexNames((0, "IDRAC-MIB", "enclosureTemperatureProbeNumber"))
if mibBuilder.loadTexts: enclosureTemperatureProbeTableEntry.setStatus('mandatory')
enclosureTemperatureProbeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeNumber.setStatus('mandatory')
enclosureTemperatureProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeName.setStatus('mandatory')
enclosureTemperatureProbeState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("failed", 3), ("missing", 4), ("degraded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeState.setStatus('mandatory')
enclosureTemperatureProbeMinWarningValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeMinWarningValue.setStatus('mandatory')
enclosureTemperatureProbeMinCriticalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeMinCriticalValue.setStatus('mandatory')
enclosureTemperatureProbeMaxWarningValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeMaxWarningValue.setStatus('mandatory')
enclosureTemperatureProbeMaxCriticalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeMaxCriticalValue.setStatus('mandatory')
enclosureTemperatureProbeCurValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeCurValue.setStatus('mandatory')
enclosureTemperatureProbeComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 13), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeComponentStatus.setStatus('mandatory')
enclosureTemperatureProbeFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 15), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeFQDD.setStatus('mandatory')
enclosureTemperatureProbeDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeDisplayName.setStatus('mandatory')
alertAmperageProbeNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2179)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertAmperageProbeWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2178)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertAmperageProbeFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2177)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertAutomaticSystemRecovery = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2233)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertBatteryNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2227)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertBatteryWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2226)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertBatteryFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2225)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertCableFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2393)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertCMCWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2546)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertCMCFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2545)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertProcessorDeviceStatusNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2243)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertProcessorDeviceStatusWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2242)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertProcessorDeviceStatusFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2241)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertProcessorDeviceAbsent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2457)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertFanInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2155)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertFanWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2154)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2153)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertFiberChannelInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2539)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertFiberChannelWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2538)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertFiberChannelFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2537)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertHardwareConfigurationInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2331)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertHardwareConfigurationWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2330)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertHardwareConfigurationFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2329)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertIOVirtualizationFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2553)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertLinkStatusInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2251)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertLinkStatusWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2250)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertLinkStatusFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2249)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertMemoryDeviceInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2267)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertMemoryDeviceWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2266)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertMemoryDeviceFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2265)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertNetworkInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2091)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertNetworkWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2090)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertNetworkFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2089)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertOSInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2411)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertOSFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2409)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertPCIDeviceInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2419)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertPCIDeviceWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2418)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertPCIDeviceFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2417)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertPhysicalDiskInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2299)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertPhysicalDiskWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2298)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertPhysicalDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2297)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertBiosPostFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2425)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertPowerSupplyNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2187)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertPowerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2186)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2185)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertPowerSupplyAbsent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2465)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertPowerUsageInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2275)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertPowerUsageWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2274)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertPowerUsageFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2273)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertRedundancyInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2475)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertRedundancyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2474)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertRedundancyLost = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2473)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertIntegratedDualSDModuleInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2211)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertIntegratedDualSDModuleWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2210)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertIntegratedDualSDModuleFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2209)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertIntegratedDualSDModuleAbsent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2481)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertIntegratedDualSDModuleRedundancyInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2491)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertIntegratedDualSDModuleRedundancyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2490)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertIntegratedDualSDModuleRedundancyLost = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2489)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertSecurityInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2387)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertSecurityWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2386)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertSecurityFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2385)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertSystemEventLogInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2379)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertSystemEventLogWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2378)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertSystemEventLogFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2377)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertSoftwareConfigurationInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2339)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertSoftwareConfigurationWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2338)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertSoftwareConfigurationFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2337)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertTemperatureProbeNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2163)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertTemperatureProbeWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2162)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertTemperatureProbeFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2161)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertTemperatureStatisticsWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2522)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertTemperatureStatisticsFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2521)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertvFlashMediaDeviceInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2507)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertvFlashMediaDeviceWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2506)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertvFlashMediaDeviceFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2505)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertvFlashMediaDeviceAbsent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2515)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertVoltageProbeNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2171)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertVoltageProbeWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2170)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertVoltageProbeFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2169)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertRACInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2531)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertSystemPerformanceWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2650)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageBatteryInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4275)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageBatteryWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4274)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageBatteryFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4273)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageControllerInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4331)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageControllerWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4330)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageControllerFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4329)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageEnclosureInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4339)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageEnclosureWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4338)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageEnclosureFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4337)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageFanInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4203)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageFanWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4202)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4201)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStoragePhysicalDiskInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4347)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStoragePhysicalDiskWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4346)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStoragePhysicalDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4345)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStoragePowerSupplyInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4235)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStoragePowerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4234)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStoragePowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4233)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageSecurityInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4435)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageSecurityWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4434)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageSecurityFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4433)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageManagementInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4179)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageManagementWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4178)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageManagementFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4177)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageTemperatureProbeInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4211)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageTemperatureProbeWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4210)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageTemperatureProbeFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4209)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageVirtualDiskInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4355)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageVirtualDiskWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4354)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertStorageVirtualDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4353)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertUpdateJobInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 3) + (0,6211)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertSoftwareChangeUpdateWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 3) + (0,6314)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertCMCAuditInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8691)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertCMCAuditWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8690)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertCMCAuditFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8689)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertDebugInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8595)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertDebugWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8594)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertiDRACIPAddressChange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8499)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertLicenseInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8515)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertLicenseWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8514)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertLicenseFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8513)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertPCIDeviceAuditWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8562)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertPowerSupplyAuditWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8330)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertPowerSupplyAuditFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8329)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertPowerUsageAuditInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8419)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertPowerUsageAuditWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8418)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertPowerUsageAuditFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8417)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertSystemPowerStateChangeInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8579)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertUserTrackingWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8490)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertAutoDiscoveryInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5) + (0,10635)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertNetworkConfigurationInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5) + (0,10771)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertNetworkConfigurationWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5) + (0,10770)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertIPAddressConfigurationInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5) + (0,10547)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertJobControlConfigurationInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5) + (0,10267)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertPCIDeviceConfigurationInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5) + (0,10611)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertSecurityConfigurationWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5) + (0,10578)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertSWCConfigurationWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5) + (0,10530)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertSWCConfigurationFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5) + (0,10529)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
alertTestTrapEvent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5) + (0,10395)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
mibBuilder.exportSymbols("IDRAC-MIB", auditAlertTrapGroup=auditAlertTrapGroup, temperatureProbeProbeCapabilities=temperatureProbeProbeCapabilities, processorDeviceType=processorDeviceType, systemStateBatteryStatusCombined=systemStateBatteryStatusCombined, voltageProbeDiscreteReading=voltageProbeDiscreteReading, temperatureProbeType=temperatureProbeType, controllerReconstructRate=controllerReconstructRate, alertCMCAuditFailure=alertCMCAuditFailure, coolingDeviceType=coolingDeviceType, racManufacturer=racManufacturer, intrusionReading=intrusionReading, systemStateChassisIntrusionStatusDetails=systemStateChassisIntrusionStatusDetails, coolingDeviceProbeCapabilities=coolingDeviceProbeCapabilities, systemStateIDSDMCardDeviceStatusList=systemStateIDSDMCardDeviceStatusList, eventLogchassisIndex=eventLogchassisIndex, powerSupplyStateCapabilitiesUnique=powerSupplyStateCapabilitiesUnique, alertFanFailure=alertFanFailure, virtualDiskComponentStatus=virtualDiskComponentStatus, alertPCIDeviceWarning=alertPCIDeviceWarning, physicalDiskProtocolVersion=physicalDiskProtocolVersion, physicalDiskMediaType=physicalDiskMediaType, networkDeviceVendorName=networkDeviceVendorName, SystemSlotTypeEnum=SystemSlotTypeEnum, controllerT10PICapability=controllerT10PICapability, mIBVersionGroup=mIBVersionGroup, pCIDeviceStateSettings=pCIDeviceStateSettings, systemStateMemoryDeviceStatusCombined=systemStateMemoryDeviceStatusCombined, coolingDeviceTable=coolingDeviceTable, processorDeviceStateCapabilities=processorDeviceStateCapabilities, PowerSupplyStateCapabilitiesUniqueFlags=PowerSupplyStateCapabilitiesUniqueFlags, memoryDeviceLocationName=memoryDeviceLocationName, controllerPatrolReadMode=controllerPatrolReadMode, alertProcessorDeviceStatusFailure=alertProcessorDeviceStatusFailure, physicalDiskPCIeCapableLinkWidth=physicalDiskPCIeCapableLinkWidth, systemBIOSVersionName=systemBIOSVersionName, alertRedundancyLost=alertRedundancyLost, eventLogSeverityStatus=eventLogSeverityStatus, enclosureManagementModulePartNumber=enclosureManagementModulePartNumber, VoltageTypeEnum=VoltageTypeEnum, enclosureFanState=enclosureFanState, powerUsageIdlePower=powerUsageIdlePower, processorDeviceIndex=processorDeviceIndex, enclosureTable=enclosureTable, alertIOVirtualizationFailure=alertIOVirtualizationFailure, alertHardwareConfigurationInformation=alertHardwareConfigurationInformation, numEventLogEntries=numEventLogEntries, lcLogTableEntry=lcLogTableEntry, processorDeviceExternalClockSpeed=processorDeviceExternalClockSpeed, physicalDiskDisplayName=physicalDiskDisplayName, amperageProbeLocationName=amperageProbeLocationName, firmwareStateCapabilities=firmwareStateCapabilities, coolingUnitStatus=coolingUnitStatus, coolingDeviceSubType=coolingDeviceSubType, systemPowerUpTime=systemPowerUpTime, fruTableEntry=fruTableEntry, enclosureDisplayName=enclosureDisplayName, physicalDiskSerialNo=physicalDiskSerialNo, systemBladeSlotNumber=systemBladeSlotNumber, enclosureType=enclosureType, enclosureBackplaneBayID=enclosureBackplaneBayID, alertvFlashMediaDeviceInformation=alertvFlashMediaDeviceInformation, chassisSystemRevisionName=chassisSystemRevisionName, powerSupplyLocationName=powerSupplyLocationName, ObjectRange=ObjectRange, alertStoragePhysicalDiskFailure=alertStoragePhysicalDiskFailure, powerUsageStatus=powerUsageStatus, alertStorageTemperatureProbeWarning=alertStorageTemperatureProbeWarning, chassiswatchDogControlExpiryTime=chassiswatchDogControlExpiryTime, TemperatureProbeTypeEnum=TemperatureProbeTypeEnum, physicalDiskSmartAlertIndication=physicalDiskSmartAlertIndication, enclosureNumber=enclosureNumber, physicalDiskT10PICapability=physicalDiskT10PICapability, systemBIOSStateCapabilities=systemBIOSStateCapabilities, alertFanInformation=alertFanInformation, systemStateVoltageStateDetails=systemStateVoltageStateDetails, alertStorageBatteryFailure=alertStorageBatteryFailure, ChassisIdentifyControlCapabilitiesFlags=ChassisIdentifyControlCapabilitiesFlags, powerUnitStateSettings=powerUnitStateSettings, coolingDeviceLocationName=coolingDeviceLocationName, amperageProbeIndex=amperageProbeIndex, coolingDeviceStateSettings=coolingDeviceStateSettings, temperatureProbeTableEntry=temperatureProbeTableEntry, virtualDiskDiskCachePolicy=virtualDiskDiskCachePolicy, virtualDiskFQDD=virtualDiskFQDD, alertFiberChannelFailure=alertFiberChannelFailure, processorDeviceCoreEnabledCount=processorDeviceCoreEnabledCount, alertSoftwareConfigurationWarning=alertSoftwareConfigurationWarning, alertOSFailure=alertOSFailure, virtualDiskNumber=virtualDiskNumber, powerSupplyFQDD=powerSupplyFQDD, processorDeviceExtendedSettings=processorDeviceExtendedSettings, systemStateAmperageStateDetails=systemStateAmperageStateDetails, firmwareSize=firmwareSize, systemStateMemoryDeviceStatusDetails=systemStateMemoryDeviceStatusDetails, AmperageDiscreteReadingEnum=AmperageDiscreteReadingEnum, controllerName=controllerName, alertBatteryWarning=alertBatteryWarning, networkDeviceTableEntry=networkDeviceTableEntry, processorDeviceStatusIndex=processorDeviceStatusIndex, enclosureManagementModuleTable=enclosureManagementModuleTable, pCIDeviceManufacturerName=pCIDeviceManufacturerName, voltageProbeType=voltageProbeType, CoolingDeviceSubTypeEnum=CoolingDeviceSubTypeEnum, alertPhysicalDiskInformation=alertPhysicalDiskInformation, WatchDogTimerCapabilitiesFlags=WatchDogTimerCapabilitiesFlags, alertMessageArguments=alertMessageArguments, chassiswatchDogControlExpiryTimeCapabilitiesUnique=chassiswatchDogControlExpiryTimeCapabilitiesUnique, chassisNMIButtonControlSettingsUnique=chassisNMIButtonControlSettingsUnique, chassiswatchDogControlCapabilitiesUnique=chassiswatchDogControlCapabilitiesUnique, amperageProbeTable=amperageProbeTable, voltageProbechassisIndex=voltageProbechassisIndex, firmwarechassisIndex=firmwarechassisIndex, networkDeviceiSCSICapabilityFlags=networkDeviceiSCSICapabilityFlags, statusGroup=statusGroup, voltageProbeStateCapabilities=voltageProbeStateCapabilities, systemStateTableEntry=systemStateTableEntry, temperatureProbeLowerNonCriticalThreshold=temperatureProbeLowerNonCriticalThreshold, chassisSystemName=chassisSystemName, processorDevicechassisIndex=processorDevicechassisIndex, alertDebugInformation=alertDebugInformation, powerSupplyStatus=powerSupplyStatus, firmwareStatus=firmwareStatus, alertStorageVirtualDiskFailure=alertStorageVirtualDiskFailure, systemStateCoolingUnitStatusCombined=systemStateCoolingUnitStatusCombined, StateCapabilitiesLogUniqueFlags=StateCapabilitiesLogUniqueFlags, alertStorageManagementInformation=alertStorageManagementInformation, controllerPCISlot=controllerPCISlot, alertSecurityWarning=alertSecurityWarning, systemServiceTag=systemServiceTag, physicalDiskNegotiatedSpeed=physicalDiskNegotiatedSpeed, alertNetworkWarning=alertNetworkWarning, alertVoltageProbeNormal=alertVoltageProbeNormal, coolingDeviceFQDD=coolingDeviceFQDD, systemStateIDSDMCardUnitStatusCombined=systemStateIDSDMCardUnitStatusCombined, chassisIdentifyFlashControlCapabilities=chassisIdentifyFlashControlCapabilities, alertPowerUsageInformation=alertPowerUsageInformation, server3=server3, systemStateAmperageStatusCombined=systemStateAmperageStatusCombined, batteryTableEntry=batteryTableEntry, voltageProbeReading=voltageProbeReading, processorDeviceVersionName=processorDeviceVersionName, systemStateChassisIntrusionStatusCombined=systemStateChassisIntrusionStatusCombined, physicalDiskRemainingRatedWriteEndurance=physicalDiskRemainingRatedWriteEndurance, HostControlCapabilitiesFlags=HostControlCapabilitiesFlags, alertTemperatureProbeNormal=alertTemperatureProbeNormal, networkDevicePermanentMACAddress=networkDevicePermanentMACAddress, systemSlotTableEntry=systemSlotTableEntry, alertProcessorDeviceAbsent=alertProcessorDeviceAbsent, controllerEnhancedAutoImportForeignConfigMode=controllerEnhancedAutoImportForeignConfigMode, PowerCapCapabilitiesFlags=PowerCapCapabilitiesFlags, alertLinkStatusWarning=alertLinkStatusWarning, systemPowerState=systemPowerState, alertRacFQDN=alertRacFQDN, systemStatePowerSupplyStateDetails=systemStatePowerSupplyStateDetails, controllerPatrolReadState=controllerPatrolReadState, chassisType=chassisType, alertSoftwareConfigurationInformation=alertSoftwareConfigurationInformation, systemStateGlobalSystemStatus=systemStateGlobalSystemStatus, alertPCIDeviceInformation=alertPCIDeviceInformation, StateSettingsFlags=StateSettingsFlags, PowerButtonControlCapabilitiesFlags=PowerButtonControlCapabilitiesFlags, systemSlotIndex=systemSlotIndex, physicalDiskNumber=physicalDiskNumber, lcLogSeverityStatus=lcLogSeverityStatus, lcLogRecommededAction=lcLogRecommededAction, temperatureProbeDiscreteReading=temperatureProbeDiscreteReading, racType=racType, systemStateSDCardUnitStatusCombined=systemStateSDCardUnitStatusCombined, enclosurePowerSupplyState=enclosurePowerSupplyState, processorDeviceStatusState=processorDeviceStatusState, processorDeviceCoreCount=processorDeviceCoreCount, alertFanWarning=alertFanWarning, alertRedundancyDegraded=alertRedundancyDegraded, alertVoltageProbeWarning=alertVoltageProbeWarning, alertStorageManagementFailure=alertStorageManagementFailure, firmwareVersionName=firmwareVersionName, alertBiosPostFailure=alertBiosPostFailure, temperatureProbeLowerCriticalThreshold=temperatureProbeLowerCriticalThreshold, processorDeviceStatusStateSettings=processorDeviceStatusStateSettings, controllerPersistentHotSpare=controllerPersistentHotSpare, enclosureAssetTag=enclosureAssetTag, systemBIOSStateSettings=systemBIOSStateSettings, LcLogCategoryEnum=LcLogCategoryEnum, AmperageProbeTypeEnum=AmperageProbeTypeEnum, eventLogTable=eventLogTable, BooleanType=BooleanType, memoryDeviceIndex=memoryDeviceIndex, informationGroup=informationGroup, voltageProbeTable=voltageProbeTable, alertCableFailure=alertCableFailure, firmwareType=firmwareType, networkDeviceTOECapabilityFlags=networkDeviceTOECapabilityFlags, globalSystemStatus=globalSystemStatus, alertStorageVirtualDiskWarning=alertStorageVirtualDiskWarning, chassisServiceTag=chassisServiceTag, powerUnitRedundancyStatus=powerUnitRedundancyStatus, alertIntegratedDualSDModuleWarning=alertIntegratedDualSDModuleWarning, coolingDeviceIndex=coolingDeviceIndex, systemStateChassisStatus=systemStateChassisStatus, lcLogRecordIndex=lcLogRecordIndex, SystemBatteryReadingFlags=SystemBatteryReadingFlags, String64=String64, chassisModelTypeName=chassisModelTypeName, chassisAssetTagName=chassisAssetTagName, amperageProbeUpperNonCriticalThreshold=amperageProbeUpperNonCriticalThreshold, Signed32BitRange=Signed32BitRange, physicalDiskName=physicalDiskName, enclosureRedundantPath=enclosureRedundantPath, voltageProbeLowerNonRecoverableThreshold=voltageProbeLowerNonRecoverableThreshold, physicalDiskFreeSpaceInMB=physicalDiskFreeSpaceInMB, systemSlotSlotExternalSlotName=systemSlotSlotExternalSlotName, NMIButtonControlSettingsFlags=NMIButtonControlSettingsFlags, powerSupplyTableEntry=powerSupplyTableEntry, fruPartNumberName=fruPartNumberName, virtualDiskIsCacheCade=virtualDiskIsCacheCade, systemFormFactor=systemFormFactor, controllerSecurityStatus=controllerSecurityStatus, alertSystemEventLogInformation=alertSystemEventLogInformation, RacTypeEnum=RacTypeEnum, intrusionIndex=intrusionIndex, physicalDiskUsedSpaceInMB=physicalDiskUsedSpaceInMB, enclosureState=enclosureState, enclosureTemperatureProbeName=enclosureTemperatureProbeName, memoryDeviceManufacturerName=memoryDeviceManufacturerName, systemDataCenterName=systemDataCenterName, TemperatureDiscreteReadingEnum=TemperatureDiscreteReadingEnum, amperageProbeUpperNonRecoverableThreshold=amperageProbeUpperNonRecoverableThreshold, coolingDeviceTableEntry=coolingDeviceTableEntry, systemLCDStatus=systemLCDStatus, controllerDisplayName=controllerDisplayName, enclosureTemperatureProbeTableEntry=enclosureTemperatureProbeTableEntry, enclosurePowerSupplyNumber=enclosurePowerSupplyNumber, alertMessageID=alertMessageID, powerUsageEntityName=powerUsageEntityName, racURL=racURL, powerUsagePeakAmps=powerUsagePeakAmps, alertSystemFQDN=alertSystemFQDN, systemRoomName=systemRoomName, enclosureTempProbeCount=enclosureTempProbeCount, globalStorageStatus=globalStorageStatus, voltageProbeUpperNonRecoverableThreshold=voltageProbeUpperNonRecoverableThreshold, chassishostControlCapabilitiesUnique=chassishostControlCapabilitiesUnique, processorDeviceStatusChassisIndex=processorDeviceStatusChassisIndex, systemSlotchassisIndex=systemSlotchassisIndex, lcLogComment=lcLogComment, firmwareTypeName=firmwareTypeName, processorDeviceMaximumSpeed=processorDeviceMaximumSpeed, alertDeviceDisplayName=alertDeviceDisplayName, pCIDeviceDataBusWidth=pCIDeviceDataBusWidth, memoryDeviceSerialNumberName=memoryDeviceSerialNumberName, alertStorageTemperatureProbeInformation=alertStorageTemperatureProbeInformation, pCIDevicechassisIndex=pCIDevicechassisIndex, BladeGeometryEnum=BladeGeometryEnum, virtualDiskWritePolicy=virtualDiskWritePolicy)
mibBuilder.exportSymbols("IDRAC-MIB", systemStateCoolingUnitStatusDetails=systemStateCoolingUnitStatusDetails, FQDDString=FQDDString, PowerCapSettingEnum=PowerCapSettingEnum, chassisIDExtension=chassisIDExtension, batteryFQDD=batteryFQDD, alertVariablesGroup=alertVariablesGroup, systemBladeGeometry=systemBladeGeometry, networkDeviceCapabilities=networkDeviceCapabilities, controllerRollUpStatus=controllerRollUpStatus, pCIDeviceDescriptionName=pCIDeviceDescriptionName, alertBatteryFailure=alertBatteryFailure, alertPowerUsageWarning=alertPowerUsageWarning, enclosurePowerSupplyTable=enclosurePowerSupplyTable, amperageProbeDiscreteReading=amperageProbeDiscreteReading, coolingDeviceUpperNonCriticalThreshold=coolingDeviceUpperNonCriticalThreshold, virtualDiskTable=virtualDiskTable, powerUsageInstantaneousHeadroom=powerUsageInstantaneousHeadroom, alertPowerSupplyAuditWarning=alertPowerSupplyAuditWarning, mIBMinorVersionNumber=mIBMinorVersionNumber, processorDeviceFQDD=processorDeviceFQDD, enclosureName=enclosureName, systemBatteryLocationName=systemBatteryLocationName, systemBIOSManufacturerName=systemBIOSManufacturerName, temperatureProbeUpperNonRecoverableThreshold=temperatureProbeUpperNonRecoverableThreshold, eventLogStateSettingsUnique=eventLogStateSettingsUnique, enclosurePowerSupplyName=enclosurePowerSupplyName, thermalGroup=thermalGroup, racName=racName, enclosureManagementModuleFWVersion=enclosureManagementModuleFWVersion, alertStorageVirtualDiskInformation=alertStorageVirtualDiskInformation, processorDeviceManufacturerName=processorDeviceManufacturerName, systemRackSlot=systemRackSlot, lcLogMessageID=lcLogMessageID, systemOSName=systemOSName, chassisStatus=chassisStatus, batteryState=batteryState, alertTrapGroup=alertTrapGroup, Unsigned8BitRange=Unsigned8BitRange, voltageProbeLowerCriticalThreshold=voltageProbeLowerCriticalThreshold, virtualDiskStripeSize=virtualDiskStripeSize, powerUsagePowerCapValue=powerUsagePowerCapValue, systemStateIDSDMCardDeviceStatusCombined=systemStateIDSDMCardDeviceStatusCombined, amperageProbeLowerNonRecoverableThreshold=amperageProbeLowerNonRecoverableThreshold, physicalDiskManufacturer=physicalDiskManufacturer, enclosureFanComponentStatus=enclosureFanComponentStatus, systemChassisSystemHeight=systemChassisSystemHeight, StatusRedundancyEnum=StatusRedundancyEnum, alertPowerUsageAuditWarning=alertPowerUsageAuditWarning, systemStateProcessorDeviceStatusCombined=systemStateProcessorDeviceStatusCombined, temperatureProbeReading=temperatureProbeReading, systemSystemID=systemSystemID, processorDeviceExtendedCapabilities=processorDeviceExtendedCapabilities, alertTestTrapEvent=alertTestTrapEvent, controllerBootModeSupported=controllerBootModeSupported, systemStateCoolingDeviceStatusCombined=systemStateCoolingDeviceStatusCombined, systemAisleName=systemAisleName, enclosureTableEntry=enclosureTableEntry, alertSWCConfigurationWarning=alertSWCConfigurationWarning, alertFQDD=alertFQDD, fruInformationStatus=fruInformationStatus, fruRevisionName=fruRevisionName, networkDevicePCIDeviceNumber=networkDevicePCIDeviceNumber, eventLogFormat=eventLogFormat, mIBMaintenanceVersionNumber=mIBMaintenanceVersionNumber, alertLinkStatusInformation=alertLinkStatusInformation, processorDeviceFamily=processorDeviceFamily, physicalDevices=physicalDevices, temperatureProbeIndex=temperatureProbeIndex, coolingDeviceUpperCriticalThreshold=coolingDeviceUpperCriticalThreshold, voltageProbeTableEntry=voltageProbeTableEntry, alertMemoryDeviceInformation=alertMemoryDeviceInformation, enclosureFirmwareVersion=enclosureFirmwareVersion, chassisLEDControlCapabilitiesUnique=chassisLEDControlCapabilitiesUnique, enclosureManagementModuleComponentStatus=enclosureManagementModuleComponentStatus, virtualDiskName=virtualDiskName, enclosureTemperatureProbeMaxCriticalValue=enclosureTemperatureProbeMaxCriticalValue, pCIDeviceIndex=pCIDeviceIndex, ProcessorDeviceStatusState=ProcessorDeviceStatusState, virtualDiskProgress=virtualDiskProgress, amperageProbeReading=amperageProbeReading, eventLogRecord=eventLogRecord, alertIntegratedDualSDModuleRedundancyLost=alertIntegratedDualSDModuleRedundancyLost, powerSupplyCountForRedundancy=powerSupplyCountForRedundancy, chassisNameModular=chassisNameModular, systemBatteryStateSettings=systemBatteryStateSettings, systemNodeID=systemNodeID, controllerPreservedCache=controllerPreservedCache, controllerCacheSizeInMB=controllerCacheSizeInMB, enclosureRollUpStatus=enclosureRollUpStatus, storageManagement=storageManagement, alertJobControlConfigurationInformation=alertJobControlConfigurationInformation, lcLogDateName=lcLogDateName, alertPowerUsageAuditInformation=alertPowerUsageAuditInformation, alertProcessorDeviceStatusWarning=alertProcessorDeviceStatusWarning, enclosureSASAddress=enclosureSASAddress, systemStateVoltageStatusCombined=systemStateVoltageStatusCombined, chassisPowerButtonControlSettingsUnique=chassisPowerButtonControlSettingsUnique, MACAddress=MACAddress, mIBMajorVersionNumber=mIBMajorVersionNumber, coolingUnitStateSettings=coolingUnitStateSettings, coolingDeviceStatus=coolingDeviceStatus, alertVoltageProbeFailure=alertVoltageProbeFailure, systemStateAmperageStatusDetails=systemStateAmperageStatusDetails, enclosureConnectedPort=enclosureConnectedPort, controllerBGIRate=controllerBGIRate, physicalDiskSpareState=physicalDiskSpareState, enclosureManagementModuleNumber=enclosureManagementModuleNumber, systemBIOSIndex=systemBIOSIndex, alertStoragePhysicalDiskInformation=alertStoragePhysicalDiskInformation, alertStorageFanInformation=alertStorageFanInformation, controllerSASAddress=controllerSASAddress, physicalDiskManufactureDay=physicalDiskManufactureDay, IntrusionReadingEnum=IntrusionReadingEnum, enclosureDriveCount=enclosureDriveCount, virtualDiskRemainingRedundancy=virtualDiskRemainingRedundancy, PowerSupplyTypeEnum=PowerSupplyTypeEnum, voltageProbeLocationName=voltageProbeLocationName, PowerSupplyStateSettingsUniqueFlags=PowerSupplyStateSettingsUniqueFlags, enclosureFanNumber=enclosureFanNumber, processorDeviceTableEntry=processorDeviceTableEntry, systemSlotType=systemSlotType, firmwareStateSettings=firmwareStateSettings, enclosurePowerSupplyComponentStatus=enclosurePowerSupplyComponentStatus, ProcessorDeviceType=ProcessorDeviceType, enclosureManagementModuleTableEntry=enclosureManagementModuleTableEntry, enclosurePowerSupplyTableEntry=enclosurePowerSupplyTableEntry, systemBIOSTable=systemBIOSTable, enclosureFanSpeed=enclosureFanSpeed, coolingUnitName=coolingUnitName, systemStateChassisIntrusionStateDetails=systemStateChassisIntrusionStateDetails, systemStateIDSDMCardUnitStatusList=systemStateIDSDMCardUnitStatusList, powerSupplychassisIndex=powerSupplychassisIndex, alertSecurityFailure=alertSecurityFailure, memoryDevicePartNumberName=memoryDevicePartNumberName, alertStorageEnclosureInformation=alertStorageEnclosureInformation, powerUsagePeakHeadroom=powerUsagePeakHeadroom, processorDeviceStatusStatus=processorDeviceStatusStatus, ProbeCapabilitiesFlags=ProbeCapabilitiesFlags, physicalDiskTableEntry=physicalDiskTableEntry, controllerNumber=controllerNumber, pCIDeviceTable=pCIDeviceTable, lcLogSequenceNumber=lcLogSequenceNumber, systemBatteryChassisIndex=systemBatteryChassisIndex, eventLogTableEntry=eventLogTableEntry, alertStoragePowerSupplyInformation=alertStoragePowerSupplyInformation, systemAssetTag=systemAssetTag, memoryDeviceTable=memoryDeviceTable, alertStorageSecurityWarning=alertStorageSecurityWarning, networkDeviceChassisIndex=networkDeviceChassisIndex, systemStateTable=systemStateTable, alertSystemPerformanceWarning=alertSystemPerformanceWarning, powerSupplyOutputWatts=powerSupplyOutputWatts, memoryDeviceStateSettings=memoryDeviceStateSettings, coolingDeviceCountForRedundancy=coolingDeviceCountForRedundancy, PowerSupplyConfigurationErrorTypeEnum=PowerSupplyConfigurationErrorTypeEnum, systemStateTemperatureStatusDetails=systemStateTemperatureStatusDetails, coolingDeviceUpperNonRecoverableThreshold=coolingDeviceUpperNonRecoverableThreshold, chassisIndexChassisInformation=chassisIndexChassisInformation, SystemPropertiesFlags=SystemPropertiesFlags, powerUnitTable=powerUnitTable, memoryDeviceSize=memoryDeviceSize, chassisID=chassisID, amperageProbechassisIndex=amperageProbechassisIndex, alertProcessorDeviceStatusNormal=alertProcessorDeviceStatusNormal, systemModelName=systemModelName, enclosureTemperatureProbeMinCriticalValue=enclosureTemperatureProbeMinCriticalValue, numLCLogEntries=numLCLogEntries, coolingDeviceLowerCriticalThreshold=coolingDeviceLowerCriticalThreshold, intrusionTable=intrusionTable, enclosureFanFQDD=enclosureFanFQDD, voltageProbeUpperNonCriticalThreshold=voltageProbeUpperNonCriticalThreshold, racShortName=racShortName, ProcessorDeviceStatusReadingFlags=ProcessorDeviceStatusReadingFlags, LEDControlCapabilitiesFlags=LEDControlCapabilitiesFlags, alertSystemEventLogWarning=alertSystemEventLogWarning, chassisStateSettings=chassisStateSettings, configurationAlertTrapGroup=configurationAlertTrapGroup, voltageProbeStateSettings=voltageProbeStateSettings, controllerLoadBalanceSetting=controllerLoadBalanceSetting, alertSystemEventLogFailure=alertSystemEventLogFailure, alertIntegratedDualSDModuleAbsent=alertIntegratedDualSDModuleAbsent, enclosurePowerSupplyFQDD=enclosurePowerSupplyFQDD, coolingDeviceStateCapabilities=coolingDeviceStateCapabilities, pCIDeviceStateCapabilities=pCIDeviceStateCapabilities, enclosureFQDD=enclosureFQDD, virtualDiskLayout=virtualDiskLayout, alertOSInformation=alertOSInformation, alertHardwareConfigurationWarning=alertHardwareConfigurationWarning, alertSWCConfigurationFailure=alertSWCConfigurationFailure, memoryDeviceStateCapabilities=memoryDeviceStateCapabilities, alertIntegratedDualSDModuleFailure=alertIntegratedDualSDModuleFailure, alertStorageControllerInformation=alertStorageControllerInformation, fruSerialNumberName=fruSerialNumberName, HostControlSettingsFlags=HostControlSettingsFlags, powerUsageCumulativeWattage=powerUsageCumulativeWattage, coolingDeviceLowerNonRecoverableThreshold=coolingDeviceLowerNonRecoverableThreshold, virtualDiskSecured=virtualDiskSecured, alertCMCWarning=alertCMCWarning, memoryDeviceType=memoryDeviceType, alertPowerSupplyNormal=alertPowerSupplyNormal, alertStorageTemperatureProbeFailure=alertStorageTemperatureProbeFailure, systemStateBatteryStatusList=systemStateBatteryStatusList, controllerEncryptionKeyPresent=controllerEncryptionKeyPresent, systemStateProcessorDeviceStatusList=systemStateProcessorDeviceStatusList, coolingDeviceDiscreteReading=coolingDeviceDiscreteReading, alertStorageBatteryWarning=alertStorageBatteryWarning, systemSlotStateSettingsUnique=systemSlotStateSettingsUnique, physicalDiskManufactureWeek=physicalDiskManufactureWeek, alertPowerSupplyFailure=alertPowerSupplyFailure, intrusionStatus=intrusionStatus, networkDeviceCurrentMACAddress=networkDeviceCurrentMACAddress, controllerCheckConsistencyRate=controllerCheckConsistencyRate, enclosurePSUCount=enclosurePSUCount, memoryDeviceBankLocationName=memoryDeviceBankLocationName, powerUsageTable=powerUsageTable, virtualDiskT10PIStatus=virtualDiskT10PIStatus, systemStateSDCardDeviceStatusList=systemStateSDCardDeviceStatusList, firmwareIndex=firmwareIndex, voltageProbeLowerNonCriticalThreshold=voltageProbeLowerNonCriticalThreshold, deviceGroup=deviceGroup, alertSoftwareChangeUpdateWarning=alertSoftwareChangeUpdateWarning, LEDControlSettingsFlags=LEDControlSettingsFlags, chassisStateCapabilities=chassisStateCapabilities, physicalDiskSASAddress=physicalDiskSASAddress, physicalDiskPCIeNegotiatedLinkWidth=physicalDiskPCIeNegotiatedLinkWidth, alertStoragePowerSupplyWarning=alertStoragePowerSupplyWarning, alertStoragePhysicalDiskWarning=alertStoragePhysicalDiskWarning, alertPowerUsageAuditFailure=alertPowerUsageAuditFailure, batteryComponentStatus=batteryComponentStatus, chassisInformationTable=chassisInformationTable, alertLinkStatusFailure=alertLinkStatusFailure, StatusProbeEnum=StatusProbeEnum, systemStateTemperatureStatisticsStateDetails=systemStateTemperatureStatisticsStateDetails, alertNetworkInformation=alertNetworkInformation, enclosureFanDisplayName=enclosureFanDisplayName, PowerButtonControlSettingsFlags=PowerButtonControlSettingsFlags, systemStatePowerUnitStatusDetails=systemStatePowerUnitStatusDetails, chassisInfoGroup=chassisInfoGroup, chassisIdentifyFlashControlSettings=chassisIdentifyFlashControlSettings, chassisServiceTagName=chassisServiceTagName, firmwareUpdateCapabilities=firmwareUpdateCapabilities, systemSlotCategory=systemSlotCategory, virtualDiskReadPolicy=virtualDiskReadPolicy, intrusionStateCapabilities=intrusionStateCapabilities, enclosureTemperatureProbeComponentStatus=enclosureTemperatureProbeComponentStatus, systemStateCoolingDeviceStateDetails=systemStateCoolingDeviceStateDetails, powerUsageStateSettings=powerUsageStateSettings, racDescription=racDescription, systemBatteryTable=systemBatteryTable, systemBIOSTableEntry=systemBIOSTableEntry, systemStatePowerSupplyStatusDetails=systemStatePowerSupplyStatusDetails, Unsigned16BitRange=Unsigned16BitRange, FirmwareType=FirmwareType, alertStorageControllerWarning=alertStorageControllerWarning)
mibBuilder.exportSymbols("IDRAC-MIB", StateSettingsLogUniqueFlags=StateSettingsLogUniqueFlags, enclosureManagementModuleFQDD=enclosureManagementModuleFQDD, coolingDevicechassisIndex=coolingDevicechassisIndex, SystemSlotStateSettingsFlags=SystemSlotStateSettingsFlags, alertDebugWarning=alertDebugWarning, powerSupplyType=powerSupplyType, slotGroup=slotGroup, intrusionchassisIndex=intrusionchassisIndex, coolingUnitTableEntry=coolingUnitTableEntry, networkDeviceiSCSIEnabled=networkDeviceiSCSIEnabled, amperageProbeTableEntry=amperageProbeTableEntry, coolingUnitRedundancyStatus=coolingUnitRedundancyStatus, eventLogDateName=eventLogDateName, networkDeviceStatus=networkDeviceStatus, CoolingDeviceDiscreteReadingEnum=CoolingDeviceDiscreteReadingEnum, chassisInformationGroup=chassisInformationGroup, dell=dell, enclosureManagementModuleDisplayName=enclosureManagementModuleDisplayName, DateName=DateName, powerSupplyRatedInputWattage=powerSupplyRatedInputWattage, enclosureTemperatureProbeMinWarningValue=enclosureTemperatureProbeMinWarningValue, alertAutoDiscoveryInformation=alertAutoDiscoveryInformation, temperatureProbeStatus=temperatureProbeStatus, alertLicenseInformation=alertLicenseInformation, alertCurrentStatus=alertCurrentStatus, alertNetworkConfigurationInformation=alertNetworkConfigurationInformation, chassisManufacturerName=chassisManufacturerName, firmwareTable=firmwareTable, controllerComponentStatus=controllerComponentStatus, systemSlotStateCapabilitiesUnique=systemSlotStateCapabilitiesUnique, powerUnitStatus=powerUnitStatus, pCIDeviceFQDD=pCIDeviceFQDD, processorDeviceCurrentSpeed=processorDeviceCurrentSpeed, processorDeviceStatusLocationName=processorDeviceStatusLocationName, alertBatteryNormal=alertBatteryNormal, physicalDiskCapacityInMB=physicalDiskCapacityInMB, alertIntegratedDualSDModuleRedundancyDegraded=alertIntegratedDualSDModuleRedundancyDegraded, systemStatePowerUnitStatusCombined=systemStatePowerUnitStatusCombined, powerUsageMaxPotentialPower=powerUsageMaxPotentialPower, alertFiberChannelInformation=alertFiberChannelInformation, physicalDiskFQDD=physicalDiskFQDD, powerUsageChassisIndex=powerUsageChassisIndex, alertRACInformation=alertRACInformation, virtualDiskBlockSizeInBytes=virtualDiskBlockSizeInBytes, coolingDeviceReading=coolingDeviceReading, controllerSpinDownUnconfiguredDrives=controllerSpinDownUnconfiguredDrives, ObjectStatusEnum=ObjectStatusEnum, memoryDeviceTableEntry=memoryDeviceTableEntry, systemStatePowerUnitStatusRedundancy=systemStatePowerUnitStatusRedundancy, PowerStateStatusEnum=PowerStateStatusEnum, StateCapabilitiesFlags=StateCapabilitiesFlags, enclosureFanName=enclosureFanName, enclosureFanCount=enclosureFanCount, coolingUnitIndex=coolingUnitIndex, ChassisSystemClassEnum=ChassisSystemClassEnum, temperatureProbeUpperNonCriticalThreshold=temperatureProbeUpperNonCriticalThreshold, powerUsageIndex=powerUsageIndex, powerUnitStateCapabilities=powerUnitStateCapabilities, enclosureTotalSlots=enclosureTotalSlots, amperageProbeLowerNonCriticalThreshold=amperageProbeLowerNonCriticalThreshold, voltageProbeProbeCapabilities=voltageProbeProbeCapabilities, networkDeviceFQDD=networkDeviceFQDD, alertPCIDeviceAuditWarning=alertPCIDeviceAuditWarning, enclosurePosition=enclosurePosition, controllerCopyBackMode=controllerCopyBackMode, alertGroup=alertGroup, systemBatteryReading=systemBatteryReading, alertLicenseFailure=alertLicenseFailure, racInfoGroup=racInfoGroup, processorDeviceStatusTable=processorDeviceStatusTable, intrusionTableEntry=intrusionTableEntry, systemBatteryTableEntry=systemBatteryTableEntry, alertIntegratedDualSDModuleRedundancyInformation=alertIntegratedDualSDModuleRedundancyInformation, LogFormatType=LogFormatType, alertNetworkFailure=alertNetworkFailure, memoryDeviceCurrentOperatingSpeed=memoryDeviceCurrentOperatingSpeed, amperageProbeType=amperageProbeType, networkDeviceIndex=networkDeviceIndex, processorDeviceStatusStateCapabilities=processorDeviceStatusStateCapabilities, networkDevicePCIBusNumber=networkDevicePCIBusNumber, physicalDiskManufactureYear=physicalDiskManufactureYear, physicalDiskSecurityStatus=physicalDiskSecurityStatus, physicalDiskOperationalState=physicalDiskOperationalState, virtualDiskMediaType=virtualDiskMediaType, alertAutomaticSystemRecovery=alertAutomaticSystemRecovery, alertStorageEnclosureFailure=alertStorageEnclosureFailure, enclosureTemperatureProbeMaxWarningValue=enclosureTemperatureProbeMaxWarningValue, amperageProbeLowerCriticalThreshold=amperageProbeLowerCriticalThreshold, fruFQDD=fruFQDD, Unsigned32BitRange=Unsigned32BitRange, physicalDiskState=physicalDiskState, alertStorageFanWarning=alertStorageFanWarning, storageDetailsGroup=storageDetailsGroup, systemStateMemoryDeviceStateDetails=systemStateMemoryDeviceStateDetails, lcLogFQDD=lcLogFQDD, alertIntegratedDualSDModuleInformation=alertIntegratedDualSDModuleInformation, alertStorageEnclosureWarning=alertStorageEnclosureWarning, alertStorageSecurityFailure=alertStorageSecurityFailure, powerSupplyTable=powerSupplyTable, powerSupplyIndex=powerSupplyIndex, coolingUnitStateCapabilties=coolingUnitStateCapabilties, enclosurePowerSupplyPartNumber=enclosurePowerSupplyPartNumber, enclosureTemperatureProbeDisplayName=enclosureTemperatureProbeDisplayName, systemBatteryIndex=systemBatteryIndex, NetworkDeviceConnectionStatusEnum=NetworkDeviceConnectionStatusEnum, controllerEncryptionCapability=controllerEncryptionCapability, coolingUnitTable=coolingUnitTable, processorDeviceStatusTableEntry=processorDeviceStatusTableEntry, alertPCIDeviceFailure=alertPCIDeviceFailure, systemBIOSStatus=systemBIOSStatus, alertFiberChannelWarning=alertFiberChannelWarning, physicalDiskBlockSizeInBytes=physicalDiskBlockSizeInBytes, MemoryDeviceTypeEnum=MemoryDeviceTypeEnum, systemInfoGroup=systemInfoGroup, updatesAlertTrapGroup=updatesAlertTrapGroup, systemSlotCurrentUsage=systemSlotCurrentUsage, physicalDiskBusType=physicalDiskBusType, processorDeviceCharacteristics=processorDeviceCharacteristics, powerSupplyPowerMonitorCapable=powerSupplyPowerMonitorCapable, powerSupplyCurrentInputVoltage=powerSupplyCurrentInputVoltage, ChassisTypeEnum=ChassisTypeEnum, networkDeviceConnectionStatus=networkDeviceConnectionStatus, controllerFWVersion=controllerFWVersion, enclosureTemperatureProbeState=enclosureTemperatureProbeState, alertPowerUsageFailure=alertPowerUsageFailure, racFirmwareVersion=racFirmwareVersion, systemStatechassisIndex=systemStatechassisIndex, fruIndex=fruIndex, memoryDevicechassisIndex=memoryDevicechassisIndex, enclosureTemperatureProbeFQDD=enclosureTemperatureProbeFQDD, alertMemoryDeviceFailure=alertMemoryDeviceFailure, alertAmperageProbeNormal=alertAmperageProbeNormal, powerSupplypowerUnitIndexReference=powerSupplypowerUnitIndexReference, intrusionStateSettings=intrusionStateSettings, processorDeviceStatus=processorDeviceStatus, systemFQDN=systemFQDN, SystemSlotUsageEnum=SystemSlotUsageEnum, fruTable=fruTable, systemStateTemperatureStateDetails=systemStateTemperatureStateDetails, controllerSpinDownTimeInterval=controllerSpinDownTimeInterval, alertStorageManagementWarning=alertStorageManagementWarning, systemStatePowerUnitStatusList=systemStatePowerUnitStatusList, batteryPredictedCapacity=batteryPredictedCapacity, virtualDiskDisplayName=virtualDiskDisplayName, NetworkDeviceTOECapabilityFlags=NetworkDeviceTOECapabilityFlags, powerUsagePeakAmpsStartDateName=powerUsagePeakAmpsStartDateName, coolingDeviceLowerNonCriticalThreshold=coolingDeviceLowerNonCriticalThreshold, temperatureProbeTable=temperatureProbeTable, logicalDevices=logicalDevices, systemExpressServiceCode=systemExpressServiceCode, alertSystemServiceTag=alertSystemServiceTag, alertTemperatureStatisticsFailure=alertTemperatureStatisticsFailure, enclosureComponentStatus=enclosureComponentStatus, alertPowerSupplyWarning=alertPowerSupplyWarning, systemBatteryStatus=systemBatteryStatus, powerUsagePowerCapCapabilities=powerUsagePowerCapCapabilities, controllerPatrolReadRate=controllerPatrolReadRate, controllerCheckConsistencyMode=controllerCheckConsistencyMode, PowerSupplySensorStateFlags=PowerSupplySensorStateFlags, WatchControlSettingsFlags=WatchControlSettingsFlags, systemStateSDCardUnitStatusList=systemStateSDCardUnitStatusList, powerUsageStateCapabilities=powerUsageStateCapabilities, alertLicenseWarning=alertLicenseWarning, temperatureProbeLocationName=temperatureProbeLocationName, processorDeviceThreadCount=processorDeviceThreadCount, alertCMCAuditWarning=alertCMCAuditWarning, powerSupplySensorState=powerSupplySensorState, ProcessorDeviceFamily=ProcessorDeviceFamily, systemStateTemperatureStatisticsStatusDetails=systemStateTemperatureStatisticsStatusDetails, powerUsageCumulativeWattageStartDateName=powerUsageCumulativeWattageStartDateName, temperatureProbechassisIndex=temperatureProbechassisIndex, virtualDiskState=virtualDiskState, batteryTable=batteryTable, alertChassisName=alertChassisName, chassisNMIButtonControlCapabilitiesUnique=chassisNMIButtonControlCapabilitiesUnique, alertvFlashMediaDeviceFailure=alertvFlashMediaDeviceFailure, amperageProbeStatus=amperageProbeStatus, alertChassisServiceTag=alertChassisServiceTag, networkDeviceProductName=networkDeviceProductName, amperageProbeStateSettings=amperageProbeStateSettings, alertHardwareConfigurationFailure=alertHardwareConfigurationFailure, alertTemperatureProbeWarning=alertTemperatureProbeWarning, chassisModelModular=chassisModelModular, processorDeviceBrandName=processorDeviceBrandName, physicalDiskProductID=physicalDiskProductID, processorDeviceStatusReading=processorDeviceStatusReading, physicalDiskFormFactor=physicalDiskFormFactor, physicalDiskComponentStatus=physicalDiskComponentStatus, chassisSystemProperties=chassisSystemProperties, lcLogTable=lcLogTable, enclosureServiceTag=enclosureServiceTag, powerGroup=powerGroup, fruGroup=fruGroup, outOfBandGroup=outOfBandGroup, intrusionLocationName=intrusionLocationName, alertPowerSupplyAuditFailure=alertPowerSupplyAuditFailure, systemStatePowerUnitStateDetails=systemStatePowerUnitStateDetails, lcLogChassisIndex=lcLogChassisIndex, eventLogRecordIndex=eventLogRecordIndex, alertAmperageProbeFailure=alertAmperageProbeFailure, systemStateChassisState=systemStateChassisState, controllerTable=controllerTable, alertTemperatureStatisticsWarning=alertTemperatureStatisticsWarning, coolingUnitchassisIndex=coolingUnitchassisIndex, fruChassisIndex=fruChassisIndex, enclosureEMMCount=enclosureEMMCount, powerUsagePeakAmpsReadingDateName=powerUsagePeakAmpsReadingDateName, controllerRAID10UnevenSpansSupported=controllerRAID10UnevenSpansSupported, alertAmperageProbeWarning=alertAmperageProbeWarning, alertPhysicalDiskFailure=alertPhysicalDiskFailure, alertStoragePowerSupplyFailure=alertStoragePowerSupplyFailure, voltageProbeStatus=voltageProbeStatus, systemStateVoltageStatusDetails=systemStateVoltageStatusDetails, amperageProbeStateCapabilities=amperageProbeStateCapabilities, chassisName=chassisName, systemBIOSReleaseDateName=systemBIOSReleaseDateName, systemStateCoolingUnitStatusRedundancy=systemStateCoolingUnitStatusRedundancy, systemStatePowerSupplyStatusCombined=systemStatePowerSupplyStatusCombined, coolingDevicecoolingUnitIndexReference=coolingDevicecoolingUnitIndexReference, systemRackName=systemRackName, systemSlotTable=systemSlotTable, memoryDeviceSpeed=memoryDeviceSpeed, alertiDRACIPAddressChange=alertiDRACIPAddressChange, alertSecurityConfigurationWarning=alertSecurityConfigurationWarning, chassisInformationTableEntry=chassisInformationTableEntry, pCIDeviceStatus=pCIDeviceStatus, controllerTableEntry=controllerTableEntry, chassisSystemClass=chassisSystemClass, alertTemperatureProbeFailure=alertTemperatureProbeFailure, storageAlertTrapGroup=storageAlertTrapGroup, systemDetailsGroup=systemDetailsGroup, temperatureProbeUpperCriticalThreshold=temperatureProbeUpperCriticalThreshold, enclosureTemperatureProbeCurValue=enclosureTemperatureProbeCurValue, physicalDiskCapableSpeed=physicalDiskCapableSpeed, alertSoftwareConfigurationFailure=alertSoftwareConfigurationFailure, chassisPowerButtonControlCapabilitiesUnique=chassisPowerButtonControlCapabilitiesUnique, intrusionType=intrusionType, WatchDogControlCapabilitiesFlags=WatchDogControlCapabilitiesFlags, SystemFormFactorEnum=SystemFormFactorEnum, enclosureFanTable=enclosureFanTable, alertStorageControllerFailure=alertStorageControllerFailure, controllerFQDD=controllerFQDD, systemStateCoolingUnitStatusList=systemStateCoolingUnitStatusList, ChassisIdentifyControlSettingsFlags=ChassisIdentifyControlSettingsFlags, enclosureManagementModuleState=enclosureManagementModuleState, processorDeviceStateSettings=processorDeviceStateSettings, alertUserTrackingWarning=alertUserTrackingWarning, enclosureTemperatureProbeNumber=enclosureTemperatureProbeNumber, NetworkDeviceiSCSICapabilityFlags=NetworkDeviceiSCSICapabilityFlags, memoryDeviceStatus=memoryDeviceStatus, StringType=StringType, alertPowerSupplyAbsent=alertPowerSupplyAbsent, alertStorageFanFailure=alertStorageFanFailure, amperageProbeUpperCriticalThreshold=amperageProbeUpperCriticalThreshold)
mibBuilder.exportSymbols("IDRAC-MIB", batteryNumber=batteryNumber, systemStateTemperatureStatisticsStatusCombined=systemStateTemperatureStatisticsStatusCombined, pCIDeviceTableEntry=pCIDeviceTableEntry, networkDevicePCIFunctionNumber=networkDevicePCIFunctionNumber, alertMessage=alertMessage, virtualDiskOperationalState=virtualDiskOperationalState, alertUpdateJobInformation=alertUpdateJobInformation, systemStateSDCardDeviceStatusCombined=systemStateSDCardDeviceStatusCombined, networkDeviceTable=networkDeviceTable, enclosurePowerSupplyDisplayName=enclosurePowerSupplyDisplayName, voltageProbeIndex=voltageProbeIndex, chassisExpressServiceCodeName=chassisExpressServiceCodeName, alertStorageSecurityInformation=alertStorageSecurityInformation, alertIPAddressConfigurationInformation=alertIPAddressConfigurationInformation, IntrusionTypeEnum=IntrusionTypeEnum, CoolingDeviceTypeEnum=CoolingDeviceTypeEnum, fruManufacturerName=fruManufacturerName, alertSecurityInformation=alertSecurityInformation, racVersion=racVersion, powerSupplyConfigurationErrorType=powerSupplyConfigurationErrorType, amperageProbeProbeCapabilities=amperageProbeProbeCapabilities, virtualDiskSizeInMB=virtualDiskSizeInMB, controllerBootMode=controllerBootMode, alertPhysicalDiskWarning=alertPhysicalDiskWarning, SystemSlotCategoryEnum=SystemSlotCategoryEnum, lcLogMessage=lcLogMessage, powerUsageTableEntry=powerUsageTableEntry, temperatureProbeLowerNonRecoverableThreshold=temperatureProbeLowerNonRecoverableThreshold, chassisparentIndexReference=chassisparentIndexReference, firmwareTableEntry=firmwareTableEntry, lcLogCategory=lcLogCategory, alertCMCFailure=alertCMCFailure, SystemSlotStateCapabilitiesFlags=SystemSlotStateCapabilitiesFlags, chassisLockPresent=chassisLockPresent, controllerMaxCapSpeed=controllerMaxCapSpeed, NMIButtonControlCapabilitiesFlags=NMIButtonControlCapabilitiesFlags, systemOSVersion=systemOSVersion, systemStateCoolingDeviceStatusDetails=systemStateCoolingDeviceStatusDetails, physicalDiskTable=physicalDiskTable, chassiswatchDogControlSettingsUnique=chassiswatchDogControlSettingsUnique, powerUsagePowerCapSetting=powerUsagePowerCapSetting, powerSupplyMaximumInputVoltage=powerSupplyMaximumInputVoltage, physicalDiskPowerState=physicalDiskPowerState, enclosureTemperatureProbeTable=enclosureTemperatureProbeTable, virtualDiskAvailableProtocols=virtualDiskAvailableProtocols, powerUnitTableEntry=powerUnitTableEntry, alertSystemPowerStateChangeInformation=alertSystemPowerStateChangeInformation, chassishostControlSettingsUnique=chassishostControlSettingsUnique, alertStorageBatteryInformation=alertStorageBatteryInformation, alertPCIDeviceConfigurationInformation=alertPCIDeviceConfigurationInformation, powerUnitchassisIndex=powerUnitchassisIndex, powerUnitName=powerUnitName, controllerDriverVersion=controllerDriverVersion, alertNetworkConfigurationWarning=alertNetworkConfigurationWarning, systemStateGroup=systemStateGroup, physicalDiskPartNumber=physicalDiskPartNumber, alertvFlashMediaDeviceWarning=alertvFlashMediaDeviceWarning, powerUnitIndex=powerUnitIndex, VoltageDiscreteReadingEnum=VoltageDiscreteReadingEnum, alertMemoryDeviceWarning=alertMemoryDeviceWarning, physicalDiskRevision=physicalDiskRevision, voltageProbeUpperCriticalThreshold=voltageProbeUpperCriticalThreshold, powerUsagePeakWattsReadingDateName=powerUsagePeakWattsReadingDateName, systemAlertTrapGroup=systemAlertTrapGroup, virtualDiskTableEntry=virtualDiskTableEntry, enclosureFanTableEntry=enclosureFanTableEntry, chassisLEDControlSettingsUnique=chassisLEDControlSettingsUnique, processorDeviceTable=processorDeviceTable, physicalDiskProgress=physicalDiskProgress, lcLogDetailedDescription=lcLogDetailedDescription, temperatureProbeStateCapabilities=temperatureProbeStateCapabilities, batteryDisplayName=batteryDisplayName, systemStateCoolingUnitStateDetails=systemStateCoolingUnitStateDetails, systemBIOSchassisIndex=systemBIOSchassisIndex, alertRedundancyInformation=alertRedundancyInformation, chassisSystemRevisionNumber=chassisSystemRevisionNumber, powerUsagePeakWatts=powerUsagePeakWatts, temperatureProbeStateSettings=temperatureProbeStateSettings, systemSlotStatus=systemSlotStatus, enclosureManagementModuleName=enclosureManagementModuleName, eventLogStateCapabilitiesUnique=eventLogStateCapabilitiesUnique, powerSupplyStateSettingsUnique=powerSupplyStateSettingsUnique, software=software, virtualDiskBadBlocksDetected=virtualDiskBadBlocksDetected, powerUsagePeakWattsStartDateName=powerUsagePeakWattsStartDateName, alertCMCAuditInformation=alertCMCAuditInformation, alertvFlashMediaDeviceAbsent=alertvFlashMediaDeviceAbsent, memoryDeviceFQDD=memoryDeviceFQDD, systemBatteryStateCapabilities=systemBatteryStateCapabilities, processorDeviceVoltage=processorDeviceVoltage, controllerSpinDownHotSpareDrives=controllerSpinDownHotSpareDrives, systemStateTemperatureStatusCombined=systemStateTemperatureStatusCombined, NetworkDeviceCapabilitiesFlags=NetworkDeviceCapabilitiesFlags, controllerRebuildRate=controllerRebuildRate)
