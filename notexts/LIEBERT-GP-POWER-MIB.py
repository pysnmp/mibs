#
# PySNMP MIB module LIEBERT-GP-POWER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/liebert/LIEBERT-GP-POWER-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 11:23:50 2024
# On host fv-az1766-862 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
liebertPowerModuleReg, lgpPower = mibBuilder.importSymbols("LIEBERT-GP-REGISTRATION-MIB", "liebertPowerModuleReg", "lgpPower")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, ModuleIdentity, Unsigned32, Counter32, Counter64, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, TimeTicks, MibIdentifier, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "Counter32", "Counter64", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "TimeTicks", "MibIdentifier", "IpAddress", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
liebertGlobalProductsPowerModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 1, 6, 1))
liebertGlobalProductsPowerModule.setRevisions(('2013-07-10 00:00', '2008-11-17 00:00', '2008-07-02 00:00', '2008-01-10 00:00', '2006-02-22 00:00',))
if mibBuilder.loadTexts: liebertGlobalProductsPowerModule.setLastUpdated('201307100000Z')
if mibBuilder.loadTexts: liebertGlobalProductsPowerModule.setOrganization('Liebert Corporation')
lgpPwrBattery = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1))
if mibBuilder.loadTexts: lgpPwrBattery.setStatus('current')
lgpPwrMeasurements = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2))
if mibBuilder.loadTexts: lgpPwrMeasurements.setStatus('current')
lgpPwrStatus = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3))
if mibBuilder.loadTexts: lgpPwrStatus.setStatus('current')
lgpPwrSettings = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4))
if mibBuilder.loadTexts: lgpPwrSettings.setStatus('current')
lgpPwrConversion = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 5))
if mibBuilder.loadTexts: lgpPwrConversion.setStatus('current')
lgpPwrControl = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 6))
if mibBuilder.loadTexts: lgpPwrControl.setStatus('current')
lgpPwrTopology = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 7))
if mibBuilder.loadTexts: lgpPwrTopology.setStatus('current')
lgpPwrStatistic = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 8))
if mibBuilder.loadTexts: lgpPwrStatistic.setStatus('current')
lgpPwrConfig = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 9))
if mibBuilder.loadTexts: lgpPwrConfig.setStatus('current')
lgpPwrNumberInstalledBatteryModules = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrNumberInstalledBatteryModules.setStatus('current')
lgpPwrNumberFailedBatteryModules = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrNumberFailedBatteryModules.setStatus('current')
lgpPwrNumberRedundantBatteryModules = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrNumberRedundantBatteryModules.setStatus('current')
lgpPwrNumberActiveBatteryModules = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrNumberActiveBatteryModules.setStatus('current')
lgpPwrConfigLowBatteryWarningTime = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 5), Integer32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrConfigLowBatteryWarningTime.setStatus('current')
lgpPwrNumberBatteryModuleWarnings = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrNumberBatteryModuleWarnings.setStatus('current')
lgpPwrBatteryCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 7), Integer32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBatteryCount.setStatus('current')
lgpPwrBatteryTestResult = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("passed", 2), ("failed", 3), ("inProgress", 4), ("systemFailure", 5), ("inhibited", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBatteryTestResult.setStatus('current')
lgpPwrNominalBatteryCapacity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 9), Integer32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrNominalBatteryCapacity.setStatus('current')
lgpPwrBatteryFloatVoltage = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 10), Integer32()).setUnits('Volt').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrBatteryFloatVoltage.setStatus('current')
lgpPwrBatteryEndOfDischargeVoltage = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrBatteryEndOfDischargeVoltage.setStatus('current')
lgpPwrAutomaticBatteryTestInterval = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 12), Integer32()).setUnits('hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrAutomaticBatteryTestInterval.setStatus('current')
lgpPwrAutomaticBatteryTestCountdown = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 13), Integer32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrAutomaticBatteryTestCountdown.setStatus('current')
lgpPwrBatteryChargeStatus = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fullycharged", 1), ("notfullycharged", 2), ("charging", 3), ("discharging", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBatteryChargeStatus.setStatus('current')
lgpPwrBatteryLifeEnhancer = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBatteryLifeEnhancer.setStatus('current')
lgpPwrBatteryCharger = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBatteryCharger.setStatus('current')
lgpPwrBatteryChargeMode = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("float", 1), ("equalize", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBatteryChargeMode.setStatus('current')
lgpPwrBatteryTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 18), Integer32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBatteryTimeRemaining.setStatus('current')
lgpPwrBatteryCapacity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 19), Integer32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBatteryCapacity.setStatus('current')
lgpPwrBatteryCabinet = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 20))
if mibBuilder.loadTexts: lgpPwrBatteryCabinet.setStatus('current')
lgpPwrBatteryCabinetCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 20, 1), Integer32()).setUnits('Count').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrBatteryCabinetCount.setStatus('current')
lgpPwrBatteryCabinetType = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSpecified", 1), ("internal", 2), ("external", 3), ("lrt", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrBatteryCabinetType.setStatus('current')
lgpPwrBatteryCabinetRatedCapacity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 20, 3), Integer32()).setUnits('0.1 Amp-hour').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrBatteryCabinetRatedCapacity.setStatus('current')
lgpPwrBatteryLeadAcidCellCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 20, 4), Integer32()).setUnits('Count').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrBatteryLeadAcidCellCount.setStatus('current')
lgpPwrBatteryNiCadCellCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 20, 5), Integer32()).setUnits('Count').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrBatteryNiCadCellCount.setStatus('current')
lgpPwrBatteryAmpHoursConsumed = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 21), Integer32()).setUnits('Amp-hour').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrBatteryAmpHoursConsumed.setStatus('current')
lgpPwrBatteryAmpHoursDischargeConsumed = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 22), Integer32()).setUnits('Amp-hour').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrBatteryAmpHoursDischargeConsumed.setStatus('current')
lgpPwrBatteryLastDischargeTime = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 23), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrBatteryLastDischargeTime.setStatus('current')
lgpPwrBatteryLastCommissionTime = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 24), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrBatteryLastCommissionTime.setStatus('current')
lgpPwrBatteryPresentDischargeTime = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 25), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBatteryPresentDischargeTime.setStatus('current')
lgpPwrBatteryCapacityStatus = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("batteryNormal", 2), ("batteryLow", 3), ("batteryDepleted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBatteryCapacityStatus.setStatus('current')
lgpPwrBatteryCircuitBreakerState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBatteryCircuitBreakerState.setStatus('current')
lgpPwrWellKnownMeasurementPoints = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 1))
if mibBuilder.loadTexts: lgpPwrWellKnownMeasurementPoints.setStatus('current')
lgpPwrSource1Input = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 1, 1))
if mibBuilder.loadTexts: lgpPwrSource1Input.setStatus('current')
lgpPwrSource2Input = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 1, 2))
if mibBuilder.loadTexts: lgpPwrSource2Input.setStatus('current')
lgpPwrSourcePdu1Input = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 1, 3))
if mibBuilder.loadTexts: lgpPwrSourcePdu1Input.setStatus('current')
lgpPwrSourcePdu2Input = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 1, 4))
if mibBuilder.loadTexts: lgpPwrSourcePdu2Input.setStatus('current')
lgpPwrOutputToLoad = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 1, 5))
if mibBuilder.loadTexts: lgpPwrOutputToLoad.setStatus('current')
lgpPwrMeasBattery = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 1, 6))
if mibBuilder.loadTexts: lgpPwrMeasBattery.setStatus('current')
lgpPwrMeasBypass = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 1, 7))
if mibBuilder.loadTexts: lgpPwrMeasBypass.setStatus('current')
lgpPwrMeasDcBus = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 1, 8))
if mibBuilder.loadTexts: lgpPwrMeasDcBus.setStatus('current')
lgpPwrMeasSystemOutput = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 1, 9))
if mibBuilder.loadTexts: lgpPwrMeasSystemOutput.setStatus('current')
lgpPwrMeasBatteryCabinet = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 1, 10))
if mibBuilder.loadTexts: lgpPwrMeasBatteryCabinet.setStatus('current')
lgpPwrMeasurementPointTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 2), )
if mibBuilder.loadTexts: lgpPwrMeasurementPointTable.setStatus('current')
lgpPwrMeasurementPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 2, 1), ).setIndexNames((0, "LIEBERT-GP-POWER-MIB", "lgpPwrMeasurementPointIndex"))
if mibBuilder.loadTexts: lgpPwrMeasurementPointEntry.setStatus('current')
lgpPwrMeasurementPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpPwrMeasurementPointIndex.setStatus('current')
lgpPwrMeasurementPointId = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrMeasurementPointId.setStatus('current')
lgpPwrMeasurementPointNumLines = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 2, 1, 3), Integer32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrMeasurementPointNumLines.setStatus('current')
lgpPwrMeasurementPointNomVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 2, 1, 4), Integer32()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrMeasurementPointNomVolts.setStatus('current')
lgpPwrMeasurementPointNomFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 2, 1, 5), Integer32()).setUnits('Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrMeasurementPointNomFrequency.setStatus('current')
lgpPwrMeasurementPointFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 2, 1, 6), Integer32()).setUnits('Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrMeasurementPointFrequency.setStatus('current')
lgpPwrMeasurementPointApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 2, 1, 7), Integer32()).setUnits('Volt-Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrMeasurementPointApparentPower.setStatus('current')
lgpPwrMeasurementPointTruePower = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 2, 1, 8), Integer32()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrMeasurementPointTruePower.setStatus('current')
lgpPwrMeasurementPointPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 2, 1, 9), Integer32()).setUnits('.01 Power Factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrMeasurementPointPowerFactor.setStatus('current')
lgpPwrMeasurementPointWattHours = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 2, 1, 10), Integer32()).setUnits('Watt-Hour').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrMeasurementPointWattHours.setStatus('current')
lgpPwrMeasurementPointVAPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 2, 1, 11), Integer32()).setUnits('0.1 Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrMeasurementPointVAPercent.setStatus('current')
lgpPwrMeasurementPointNeutralCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 2, 1, 12), Integer32()).setUnits('Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrMeasurementPointNeutralCurrent.setStatus('current')
lgpPwrMeasurementPointGroundCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 2, 1, 13), Integer32()).setUnits('0.1 Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrMeasurementPointGroundCurrent.setStatus('current')
lgpPwrMeasurementPointNomCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 2, 1, 14), Integer32()).setUnits('0.1 Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrMeasurementPointNomCurrent.setStatus('current')
lgpPwrMeasurementPointNomPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 2, 1, 15), Integer32()).setUnits('.01 Power Factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrMeasurementPointNomPowerFactor.setStatus('current')
lgpPwrMeasurementPointNomVA = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 2, 1, 16), Integer32()).setUnits('Volt-Amp').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrMeasurementPointNomVA.setStatus('current')
lgpPwrMeasurementPointNomW = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 2, 1, 17), Integer32()).setUnits('Watt').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrMeasurementPointNomW.setStatus('current')
lgpPwrMeasurementPointPowerFactorTag = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leading", 1), ("lagging", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrMeasurementPointPowerFactorTag.setStatus('current')
lgpPwrLineMeasurementTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3), )
if mibBuilder.loadTexts: lgpPwrLineMeasurementTable.setStatus('current')
lgpPwrLineMeasurementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3, 1), ).setIndexNames((0, "LIEBERT-GP-POWER-MIB", "lgpPwrMeasurementPtIndex"), (0, "LIEBERT-GP-POWER-MIB", "lgpPwrLineMeasurementIndex"))
if mibBuilder.loadTexts: lgpPwrLineMeasurementEntry.setStatus('current')
lgpPwrMeasurementPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpPwrMeasurementPtIndex.setStatus('current')
lgpPwrLineMeasurementIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: lgpPwrLineMeasurementIndex.setStatus('current')
lgpPwrMeasurementPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrMeasurementPoint.setStatus('current')
lgpPwrLineMeasurementVoltsLL = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3, 1, 4), Integer32()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrLineMeasurementVoltsLL.setStatus('current')
lgpPwrLineMeasurementVoltsLN = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3, 1, 5), Integer32()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrLineMeasurementVoltsLN.setStatus('current')
lgpPwrLineMeasurementCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3, 1, 6), Integer32()).setUnits('Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrLineMeasurementCurrent.setStatus('current')
lgpPwrLineMeasurementCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3, 1, 7), Integer32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrLineMeasurementCapacity.setStatus('current')
lgpPwrLineMeasurementVA = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3, 1, 8), Integer32()).setUnits('Volt-Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrLineMeasurementVA.setStatus('current')
lgpPwrLineMeasurementTruePower = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3, 1, 9), Integer32()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrLineMeasurementTruePower.setStatus('current')
lgpPwrLineMeasurementVoltageTHD = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3, 1, 10), Integer32()).setUnits('0.1 Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrLineMeasurementVoltageTHD.setStatus('current')
lgpPwrLineMeasurementCurrentTHD = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3, 1, 11), Integer32()).setUnits('0.1 Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrLineMeasurementCurrentTHD.setStatus('current')
lgpPwrLineMeasurementKFactorCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3, 1, 12), Integer32()).setUnits('0.1 K Factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrLineMeasurementKFactorCurrent.setStatus('current')
lgpPwrLineMeasurementCrestFactorCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3, 1, 13), Integer32()).setUnits('0.1 Crest Factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrLineMeasurementCrestFactorCurrent.setStatus('current')
lgpPwrLineMeasurementPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3, 1, 14), Integer32()).setUnits('0.01 Power Factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrLineMeasurementPowerFactor.setStatus('current')
lgpPwrLineMeasurementPowerFactorTag = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leading", 1), ("lagging", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrLineMeasurementPowerFactorTag.setStatus('current')
lgpPwrLineMeasurementMaxVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3, 1, 16), Integer32()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrLineMeasurementMaxVolts.setStatus('current')
lgpPwrLineMeasurementMinVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3, 1, 17), Integer32()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrLineMeasurementMinVolts.setStatus('current')
lgpPwrLineMeasurementVAR = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3, 1, 18), Integer32()).setUnits('Volt-Amp-Reactive').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrLineMeasurementVAR.setStatus('current')
lgpPwrLineMeasurementPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3, 1, 19), Integer32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrLineMeasurementPercentLoad.setStatus('current')
lgpPwrLineMeasurementVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3, 1, 20), Integer32()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrLineMeasurementVolts.setStatus('current')
lgpPwrLineMeasurementVACapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 3, 1, 21), Integer32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrLineMeasurementVACapacity.setStatus('current')
lgpPwrDcMeasurementPointTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 4), )
if mibBuilder.loadTexts: lgpPwrDcMeasurementPointTable.setStatus('current')
lgpPwrDcMeasurementPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 4, 1), ).setIndexNames((0, "LIEBERT-GP-POWER-MIB", "lgpPwrDcMeasurementPointIndex"))
if mibBuilder.loadTexts: lgpPwrDcMeasurementPointEntry.setStatus('current')
lgpPwrDcMeasurementPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpPwrDcMeasurementPointIndex.setStatus('current')
lgpPwrDcMeasurementPointId = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 4, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrDcMeasurementPointId.setStatus('current')
lgpPwrDcMeasurementPointSubID = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 4, 1, 3), Integer32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrDcMeasurementPointSubID.setStatus('current')
lgpPwrDcMeasurementPointVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 4, 1, 4), Integer32()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrDcMeasurementPointVolts.setStatus('current')
lgpPwrDcMeasurementPointCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 4, 1, 5), Integer32()).setUnits('Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrDcMeasurementPointCurrent.setStatus('current')
lgpPwrDcMeasurementPointNomVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 4, 1, 6), Integer32()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrDcMeasurementPointNomVolts.setStatus('current')
lgpPwrDcMeasurementPointTruePower = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 4, 1, 7), Integer32()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrDcMeasurementPointTruePower.setStatus('current')
lgpPwrWellKnownMeasurementTypes = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 5))
if mibBuilder.loadTexts: lgpPwrWellKnownMeasurementTypes.setStatus('current')
lgpPwrVoltsAc = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 5, 1))
if mibBuilder.loadTexts: lgpPwrVoltsAc.setStatus('current')
lgpPwrVoltsDc = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 5, 2))
if mibBuilder.loadTexts: lgpPwrVoltsDc.setStatus('current')
lgpPwrAmpsNeutral = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 2, 5, 3))
if mibBuilder.loadTexts: lgpPwrAmpsNeutral.setStatus('current')
lgpPwrWellKnownControlPoints = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 6, 1))
if mibBuilder.loadTexts: lgpPwrWellKnownControlPoints.setStatus('current')
lgpPwrLoadCircuit = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 6, 1, 1))
if mibBuilder.loadTexts: lgpPwrLoadCircuit.setStatus('current')
lgpPwrLoadCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 6, 2), )
if mibBuilder.loadTexts: lgpPwrLoadCircuitTable.setStatus('current')
lgpPwrLoadCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 6, 2, 1), ).setIndexNames((0, "LIEBERT-GP-POWER-MIB", "lgpPwrLoadCircuitIndex"))
if mibBuilder.loadTexts: lgpPwrLoadCircuitEntry.setStatus('current')
lgpPwrLoadCircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 6, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpPwrLoadCircuitIndex.setStatus('current')
lgpPwrLoadCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 6, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrLoadCircuitId.setStatus('current')
lgpPwrLoadCircuitSubID = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 6, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrLoadCircuitSubID.setStatus('current')
lgpPwrLoadCircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("default", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrLoadCircuitState.setStatus('current')
lgpPwrLoadCircuitStateAndControl = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("reboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrLoadCircuitStateAndControl.setStatus('current')
lgpPwrAlarmSilence = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrAlarmSilence.setStatus('current')
lgpPwrBatteryTest = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("abort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrBatteryTest.setStatus('current')
lgpPwrUpsAbortCommand = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrUpsAbortCommand.setStatus('current')
lgpPwrTransferToBypass = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrTransferToBypass.setStatus('current')
lgpPwrTransferToInverter = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrTransferToInverter.setStatus('current')
lgpPwrOutputOnDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 6, 8), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrOutputOnDelay.setStatus('current')
lgpPwrOutputOffDelayWithRestart = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 6, 9), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrOutputOffDelayWithRestart.setStatus('current')
lgpPwrOutputOffDelayWithoutRestart = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 6, 10), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrOutputOffDelayWithoutRestart.setStatus('current')
lgpPwrTransferCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 1), Integer32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrTransferCount.setStatus('current')
lgpPwrAutoTransferTimer = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 2), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrAutoTransferTimer.setStatus('current')
lgpPwrAutoReTransferEnabled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrAutoReTransferEnabled.setStatus('current')
lgpPwrSyncPhaseAngle = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-3600, 3600))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrSyncPhaseAngle.setStatus('current')
lgpPwrParallelSystemOutputToLoadSource = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("utility", 1), ("battery", 2), ("bypass", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrParallelSystemOutputToLoadSource.setStatus('current')
lgpPwrDcToDcConverter = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrDcToDcConverter.setStatus('current')
lgpPwrOutputToLoadOnInverter = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrOutputToLoadOnInverter.setStatus('current')
lgpPwrBatteryChargeCompensating = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBatteryChargeCompensating.setStatus('current')
lgpPwrInverterReady = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrInverterReady.setStatus('current')
lgpPwrOutputToLoadOnBypass = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrOutputToLoadOnBypass.setStatus('current')
lgpPwrBoost = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBoost.setStatus('current')
lgpPwrBuck = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBuck.setStatus('current')
lgpPwrShutdownOverTemperature = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrShutdownOverTemperature.setStatus('current')
lgpPwrShutdownOverload = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrShutdownOverload.setStatus('current')
lgpPwrShutdownDcBusOverload = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrShutdownDcBusOverload.setStatus('current')
lgpPwrShutdownOutputShort = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrShutdownOutputShort.setStatus('current')
lgpPwrShutdownLineSwap = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrShutdownLineSwap.setStatus('current')
lgpPwrShutdownLowBattery = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrShutdownLowBattery.setStatus('current')
lgpPwrShutdownRemote = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrShutdownRemote.setStatus('current')
lgpPwrShutdownInputUnderVoltage = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrShutdownInputUnderVoltage.setStatus('current')
lgpPwrShutdownPowerFactorCorrectionFailure = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrShutdownPowerFactorCorrectionFailure.setStatus('current')
lgpPwrShutdownHardware = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrShutdownHardware.setStatus('current')
lgpPwrRedundantSubModule = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrRedundantSubModule.setStatus('current')
lgpPwrBypassReady = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBypassReady.setStatus('current')
lgpPwrGeneratorStatus = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("disconnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrGeneratorStatus.setStatus('current')
lgpPwrRotaryBreakerStatus = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("closed", 2), ("test", 3), ("normal", 4), ("bypass", 5), ("maintenance", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrRotaryBreakerStatus.setStatus('current')
lgpPwrPowerFactorCorrection = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrPowerFactorCorrection.setStatus('current')
lgpPwrBypassSyncDiff = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 28), Integer32()).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBypassSyncDiff.setStatus('current')
lgpPwrBypassOverloadShutdownTime = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 29), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBypassOverloadShutdownTime.setStatus('current')
lgpPwrInverterOverloadShutdownTime = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 30), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrInverterOverloadShutdownTime.setStatus('current')
lgpPwrStateOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inverter", 2), ("bypass", 3), ("maintenanceBypass", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateOutputSource.setStatus('current')
lgpPwrStateInputSource = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("utility", 2), ("generator", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateInputSource.setStatus('current')
lgpPwrStateInputQualification = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fail", 1), ("marginalLow", 2), ("normal", 3), ("marginalHigh", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateInputQualification.setStatus('current')
lgpPwrStateBypassStaticSwitchState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateBypassStaticSwitchState.setStatus('current')
lgpPwrStateBypassQualification = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fail", 1), ("marginalLow", 2), ("normal", 3), ("marginalHigh", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateBypassQualification.setStatus('current')
lgpPwrStateDCBusQualification = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fail", 1), ("marginalLow", 2), ("normal", 3), ("marginalHigh", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateDCBusQualification.setStatus('current')
lgpPwrStateOutQualification = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fail", 1), ("marginalLow", 2), ("normal", 3), ("marginalHigh", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateOutQualification.setStatus('current')
lgpPwrStateInverterQualification = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fail", 1), ("marginalLow", 2), ("normal", 3), ("marginalHigh", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateInverterQualification.setStatus('current')
lgpPwrStateInverterState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateInverterState.setStatus('current')
lgpPwrStateRectifierState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateRectifierState.setStatus('current')
lgpPwrStateModuleGroup = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 41))
if mibBuilder.loadTexts: lgpPwrStateModuleGroup.setStatus('current')
lgpPwrStateUpsModuleCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 41, 1), Integer32()).setUnits('Count').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrStateUpsModuleCount.setStatus('current')
lgpPwrStateUpsModuleRedundantCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 41, 2), Integer32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateUpsModuleRedundantCount.setStatus('current')
lgpPwrStateBackfeedBrkrState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateBackfeedBrkrState.setStatus('current')
lgpPwrStateLoadDisconnectState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateLoadDisconnectState.setStatus('current')
lgpPwrStateInputBrkrState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateInputBrkrState.setStatus('current')
lgpPwrStateTrapFilterBrkrState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateTrapFilterBrkrState.setStatus('current')
lgpPwrStateInvOutputBrkrState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateInvOutputBrkrState.setStatus('current')
lgpPwrStateIntBypassBrkrState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateIntBypassBrkrState.setStatus('current')
lgpPwrStateBypassIsolBrkrState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateBypassIsolBrkrState.setStatus('current')
lgpPwrStateRectifierIsolBrkrState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateRectifierIsolBrkrState.setStatus('current')
lgpPwrStateMaintBypassBrkrState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateMaintBypassBrkrState.setStatus('current')
lgpPwrStateMaintIsolBrkrState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateMaintIsolBrkrState.setStatus('current')
lgpPwrStateOutStaticSwState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateOutStaticSwState.setStatus('current')
lgpPwrStateModuleOutBrkrState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateModuleOutBrkrState.setStatus('current')
lgpPwrBypassReXfrRemainTime = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 54), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBypassReXfrRemainTime.setStatus('current')
lgpPwrStateUpsOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("normal", 3), ("bypass", 4), ("battery", 5), ("booster", 6), ("reducer", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateUpsOutputSource.setStatus('current')
lgpPwrStateLoadBusSynchronization = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("active", 1), ("abnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateLoadBusSynchronization.setStatus('current')
lgpPwrStateCircuitBrkrStateGroup = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 57))
if mibBuilder.loadTexts: lgpPwrStateCircuitBrkrStateGroup.setStatus('current')
lgpPwrStateSource1InputBrkrState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 57, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateSource1InputBrkrState.setStatus('current')
lgpPwrStateSource2InputBrkrState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 57, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateSource2InputBrkrState.setStatus('current')
lgpPwrStateSource1BypassBrkrState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 57, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateSource1BypassBrkrState.setStatus('current')
lgpPwrStateSource2BypassBrkrState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 57, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateSource2BypassBrkrState.setStatus('current')
lgpPwrStateOutputBrkrState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 57, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateOutputBrkrState.setStatus('current')
lgpPwrStateAuxOutputBrkrState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 57, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateAuxOutputBrkrState.setStatus('current')
lgpPwrStateSource1PduInputBrkrState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 57, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateSource1PduInputBrkrState.setStatus('current')
lgpPwrStateSource2PduInputBrkrState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 57, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateSource2PduInputBrkrState.setStatus('current')
lgpPwrEconomicOperation = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 3, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrEconomicOperation.setStatus('current')
lgpPwrPreferredSource = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrPreferredSource.setStatus('current')
lgpPwrLoadOnSource = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrLoadOnSource.setStatus('current')
lgpPwrNominalVoltageDeviation = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 3), Integer32()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrNominalVoltageDeviation.setStatus('current')
lgpPwrNominalVoltageDeviationPercent = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 4), Integer32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrNominalVoltageDeviationPercent.setStatus('current')
lgpPwrPhaseDifferenceLimit = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 5), Integer32()).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrPhaseDifferenceLimit.setStatus('current')
lgpPwrFrequencyDeviationLimit = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 6), Integer32()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrFrequencyDeviationLimit.setStatus('current')
lgpPwrThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 7), )
if mibBuilder.loadTexts: lgpPwrThresholdTable.setStatus('current')
lgpPwrThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 7, 1), ).setIndexNames((0, "LIEBERT-GP-POWER-MIB", "lgpPwrThresholdIndex"))
if mibBuilder.loadTexts: lgpPwrThresholdEntry.setStatus('current')
lgpPwrThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpPwrThresholdIndex.setStatus('current')
lgpPwrThresholdPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 7, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrThresholdPoint.setStatus('current')
lgpPwrThresholdSubID = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrThresholdSubID.setStatus('current')
lgpPwrThresholdType = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 7, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrThresholdType.setStatus('current')
lgpPwrThresholdHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrThresholdHighWarning.setStatus('current')
lgpPwrThresholdHighFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrThresholdHighFailure.setStatus('current')
lgpPwrThresholdLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrThresholdLowWarning.setStatus('current')
lgpPwrThresholdLowFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrThresholdLowFailure.setStatus('current')
lgpPwrUpsAutoRestart = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrUpsAutoRestart.setStatus('current')
lgpPwrUpsAutoRestartDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 9), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrUpsAutoRestartDelay.setStatus('current')
lgpPwrAutoRestartBatteryChargeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 10), Integer32()).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrAutoRestartBatteryChargeThreshold.setStatus('current')
lgpPwrParallelModuleCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 11), Integer32()).setUnits('Count').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrParallelModuleCount.setStatus('current')
lgpPwrParallelRedundancyCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 12), Integer32()).setUnits('Count').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrParallelRedundancyCount.setStatus('current')
lgpPwrLoadBusSyncMode = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrLoadBusSyncMode.setStatus('current')
lgpPwrEconomicOperationMode = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrEconomicOperationMode.setStatus('current')
lgpPwrAutomaticBatteryTest = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrAutomaticBatteryTest.setStatus('current')
lgpPwrMinimumRedundantPowerModule = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 16), Integer32()).setUnits('Count').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrMinimumRedundantPowerModule.setStatus('current')
lgpPwrMinimumRedundantBatteryModule = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 17), Integer32()).setUnits('Count').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrMinimumRedundantBatteryModule.setStatus('current')
lgpPwrOutputToLoadUserOverloadLimit = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 18), Integer32()).setUnits('Volt-Amp').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrOutputToLoadUserOverloadLimit.setStatus('current')
lgpPwrNoLoadWarningLimit = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 19), Integer32()).setUnits('Amp').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrNoLoadWarningLimit.setStatus('current')
lgpPwrNoLoadWarningDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrNoLoadWarningDelay.setStatus('current')
lgpPwrEconomicOperationModeControl = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 4, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("mode1", 1), ("mode2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrEconomicOperationModeControl.setStatus('current')
lgpPwrBrownOutCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 8, 1), Integer32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBrownOutCount.setStatus('current')
lgpPwrBlackOutCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 8, 2), Integer32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBlackOutCount.setStatus('current')
lgpPwrTransientCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 8, 3), Integer32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrTransientCount.setStatus('current')
lgpPwrBatteryDischargeCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 8, 4), Integer32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBatteryDischargeCount.setStatus('current')
lgpPwrBatteryDischargeTime = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 8, 5), Integer32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBatteryDischargeTime.setStatus('current')
lgpPwrBatteryAmpHours = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 8, 6), Integer32()).setUnits('Amp-hour').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBatteryAmpHours.setStatus('current')
lgpPwrBatteryWattHours = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 8, 7), Integer32()).setUnits('Watt-Hour').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrBatteryWattHours.setStatus('current')
lgpPwrBatteryStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 8, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrBatteryStatisticsReset.setStatus('current')
lgpPwrStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 8, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrStatisticsReset.setStatus('current')
lgpPwrNumberInstalledPowerModules = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 5, 1), Integer32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrNumberInstalledPowerModules.setStatus('current')
lgpPwrNumberFailedPowerModules = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 5, 2), Integer32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrNumberFailedPowerModules.setStatus('current')
lgpPwrNumberRedundantPowerModules = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 5, 3), Integer32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrNumberRedundantPowerModules.setStatus('current')
lgpPwrNumberActivePowerModules = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 5, 4), Integer32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrNumberActivePowerModules.setStatus('current')
lgpPwrNumberPowerModuleWarnings = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 5, 6), Integer32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrNumberPowerModuleWarnings.setStatus('current')
lgpPwrUpsInverterStandby = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrUpsInverterStandby.setStatus('current')
lgpPwrUpsTopOffline = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrUpsTopOffline.setStatus('current')
lgpPwrUpsTopLineInteractive = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrUpsTopLineInteractive.setStatus('current')
lgpPwrUPSTopDualInput = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrUPSTopDualInput.setStatus('current')
lgpPwrTopFrequencyConverter = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrTopFrequencyConverter.setStatus('current')
lgpPwrTopVoltageConverter = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrTopVoltageConverter.setStatus('current')
lgpPwrTopMaximumFrameCapacity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 7, 6), Integer32()).setUnits('Volt-Amp').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrTopMaximumFrameCapacity.setStatus('current')
lgpPwrTopRedundantControlModules = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrTopRedundantControlModules.setStatus('current')
lgpPwrInputIsolationTransformerInstalled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInstalled", 1), ("installed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrInputIsolationTransformerInstalled.setStatus('current')
lgpPwrStateStaticSwitchType = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("continuousDuty", 2), ("momentaryDuty", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateStaticSwitchType.setStatus('current')
lgpPwrStateModuleType = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("singleModuleSystem", 1), ("module1plus1", 2), ("module1plusN", 3), ("moduleNplus1", 4), ("systemControlCabinet", 5), ("mainStaticSwitch", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateModuleType.setStatus('current')
lgpPwrStateBypassInputConfig = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("singlePhase2WireL1WithReturn", 1), ("twoPhase2WireL1L2", 2), ("twoPhase3WireL1L2WithNeutral", 3), ("threePhase3WireL1L2L3", 4), ("threePhase4WireL1L2L3WithNeutral", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateBypassInputConfig.setStatus('current')
lgpPwrStateOutputConfig = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 7, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("singlePhase2WireL1WithReturn", 1), ("twoPhase2WireL1L2", 2), ("twoPhase3WireL1L2WithNeutral", 3), ("threePhase3WireL1L2L3", 4), ("threePhase4WireL1L2L3WithNeutral", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrStateOutputConfig.setStatus('current')
lgpPwrRectifierPassiveFilterInstalled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 7, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInstalled", 1), ("installed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrRectifierPassiveFilterInstalled.setStatus('current')
lgpPwrRectifierTrapInstalled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 7, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInstalled", 1), ("installed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrRectifierTrapInstalled.setStatus('current')
lgpPwrRectifierActiveFilterInstalled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 7, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInstalled", 1), ("installed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrRectifierActiveFilterInstalled.setStatus('current')
lgpPwrSysCapacity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 9, 1), Integer32()).setUnits('Volt-Amp').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrSysCapacity.setStatus('current')
lgpPwrUPSModuleMode = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("single", 1), ("parallel", 2), ("hotmaster", 3), ("hotslave", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPwrUPSModuleMode.setStatus('current')
lgpPwrMaxRatedCurrent = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 9, 3), Integer32()).setUnits('Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrMaxRatedCurrent.setStatus('current')
lgpPwrRectifierPulseCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 5, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sixPulse", 1), ("twelvePulse", 2), ("eighteenPulse", 3), ("twentyFourPulse", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPwrRectifierPulseCount.setStatus('current')
mibBuilder.exportSymbols("LIEBERT-GP-POWER-MIB", lgpPwrOutputToLoadOnInverter=lgpPwrOutputToLoadOnInverter, lgpPwrNumberInstalledPowerModules=lgpPwrNumberInstalledPowerModules, lgpPwrAlarmSilence=lgpPwrAlarmSilence, lgpPwrBatteryPresentDischargeTime=lgpPwrBatteryPresentDischargeTime, lgpPwrNominalVoltageDeviation=lgpPwrNominalVoltageDeviation, lgpPwrNumberInstalledBatteryModules=lgpPwrNumberInstalledBatteryModules, lgpPwrStateBypassQualification=lgpPwrStateBypassQualification, lgpPwrNominalBatteryCapacity=lgpPwrNominalBatteryCapacity, lgpPwrLineMeasurementVoltsLN=lgpPwrLineMeasurementVoltsLN, lgpPwrUpsAutoRestart=lgpPwrUpsAutoRestart, lgpPwrMeasurementPointNomPowerFactor=lgpPwrMeasurementPointNomPowerFactor, lgpPwrShutdownOutputShort=lgpPwrShutdownOutputShort, lgpPwrStateInvOutputBrkrState=lgpPwrStateInvOutputBrkrState, lgpPwrSyncPhaseAngle=lgpPwrSyncPhaseAngle, lgpPwrBatteryChargeStatus=lgpPwrBatteryChargeStatus, lgpPwrMeasurementPointNomVA=lgpPwrMeasurementPointNomVA, lgpPwrDcToDcConverter=lgpPwrDcToDcConverter, lgpPwrStateTrapFilterBrkrState=lgpPwrStateTrapFilterBrkrState, lgpPwrStateUpsOutputSource=lgpPwrStateUpsOutputSource, lgpPwrPreferredSource=lgpPwrPreferredSource, lgpPwrLineMeasurementKFactorCurrent=lgpPwrLineMeasurementKFactorCurrent, lgpPwrVoltsDc=lgpPwrVoltsDc, lgpPwrStateUpsModuleRedundantCount=lgpPwrStateUpsModuleRedundantCount, lgpPwrStatisticsReset=lgpPwrStatisticsReset, lgpPwrMeasurementPointId=lgpPwrMeasurementPointId, lgpPwrLoadCircuitState=lgpPwrLoadCircuitState, lgpPwrMeasurementPointNumLines=lgpPwrMeasurementPointNumLines, lgpPwrNoLoadWarningLimit=lgpPwrNoLoadWarningLimit, lgpPwrThresholdIndex=lgpPwrThresholdIndex, lgpPwrUpsTopOffline=lgpPwrUpsTopOffline, lgpPwrBatteryNiCadCellCount=lgpPwrBatteryNiCadCellCount, lgpPwrLineMeasurementVAR=lgpPwrLineMeasurementVAR, lgpPwrAmpsNeutral=lgpPwrAmpsNeutral, lgpPwrStateOutputSource=lgpPwrStateOutputSource, lgpPwrLineMeasurementIndex=lgpPwrLineMeasurementIndex, lgpPwrLineMeasurementCurrent=lgpPwrLineMeasurementCurrent, lgpPwrThresholdLowWarning=lgpPwrThresholdLowWarning, lgpPwrMeasurementPointPowerFactor=lgpPwrMeasurementPointPowerFactor, PYSNMP_MODULE_ID=liebertGlobalProductsPowerModule, lgpPwrMeasurementPointNomW=lgpPwrMeasurementPointNomW, lgpPwrAutomaticBatteryTest=lgpPwrAutomaticBatteryTest, lgpPwrMeasurementPointIndex=lgpPwrMeasurementPointIndex, lgpPwrBatteryCount=lgpPwrBatteryCount, lgpPwrBatteryLastDischargeTime=lgpPwrBatteryLastDischargeTime, lgpPwrStateAuxOutputBrkrState=lgpPwrStateAuxOutputBrkrState, lgpPwrNumberRedundantBatteryModules=lgpPwrNumberRedundantBatteryModules, lgpPwrOutputOnDelay=lgpPwrOutputOnDelay, lgpPwrTransferCount=lgpPwrTransferCount, lgpPwrBoost=lgpPwrBoost, lgpPwrStateStaticSwitchType=lgpPwrStateStaticSwitchType, lgpPwrMeasurements=lgpPwrMeasurements, lgpPwrBatteryEndOfDischargeVoltage=lgpPwrBatteryEndOfDischargeVoltage, lgpPwrStateModuleGroup=lgpPwrStateModuleGroup, lgpPwrStateSource2InputBrkrState=lgpPwrStateSource2InputBrkrState, lgpPwrDcMeasurementPointEntry=lgpPwrDcMeasurementPointEntry, lgpPwrTransientCount=lgpPwrTransientCount, lgpPwrThresholdEntry=lgpPwrThresholdEntry, lgpPwrBatteryCapacity=lgpPwrBatteryCapacity, lgpPwrBatteryCabinetType=lgpPwrBatteryCabinetType, lgpPwrLineMeasurementVoltageTHD=lgpPwrLineMeasurementVoltageTHD, lgpPwrMeasBypass=lgpPwrMeasBypass, lgpPwrConversion=lgpPwrConversion, lgpPwrMaxRatedCurrent=lgpPwrMaxRatedCurrent, lgpPwrStatus=lgpPwrStatus, lgpPwrMeasurementPointApparentPower=lgpPwrMeasurementPointApparentPower, lgpPwrEconomicOperationModeControl=lgpPwrEconomicOperationModeControl, lgpPwrStatistic=lgpPwrStatistic, lgpPwrLoadCircuitEntry=lgpPwrLoadCircuitEntry, lgpPwrParallelModuleCount=lgpPwrParallelModuleCount, lgpPwrBatteryCabinet=lgpPwrBatteryCabinet, lgpPwrStateInputSource=lgpPwrStateInputSource, lgpPwrUpsInverterStandby=lgpPwrUpsInverterStandby, lgpPwrStateSource1BypassBrkrState=lgpPwrStateSource1BypassBrkrState, lgpPwrControl=lgpPwrControl, lgpPwrBrownOutCount=lgpPwrBrownOutCount, lgpPwrBatteryWattHours=lgpPwrBatteryWattHours, lgpPwrLineMeasurementVACapacity=lgpPwrLineMeasurementVACapacity, lgpPwrStateCircuitBrkrStateGroup=lgpPwrStateCircuitBrkrStateGroup, lgpPwrShutdownInputUnderVoltage=lgpPwrShutdownInputUnderVoltage, lgpPwrShutdownLowBattery=lgpPwrShutdownLowBattery, lgpPwrAutoTransferTimer=lgpPwrAutoTransferTimer, lgpPwrMeasurementPtIndex=lgpPwrMeasurementPtIndex, lgpPwrStateBypassIsolBrkrState=lgpPwrStateBypassIsolBrkrState, lgpPwrStateSource1InputBrkrState=lgpPwrStateSource1InputBrkrState, lgpPwrDcMeasurementPointIndex=lgpPwrDcMeasurementPointIndex, lgpPwrSysCapacity=lgpPwrSysCapacity, lgpPwrBatteryTimeRemaining=lgpPwrBatteryTimeRemaining, lgpPwrNumberRedundantPowerModules=lgpPwrNumberRedundantPowerModules, lgpPwrBatteryDischargeTime=lgpPwrBatteryDischargeTime, lgpPwrRedundantSubModule=lgpPwrRedundantSubModule, lgpPwrLoadCircuitSubID=lgpPwrLoadCircuitSubID, lgpPwrLineMeasurementTruePower=lgpPwrLineMeasurementTruePower, lgpPwrSourcePdu1Input=lgpPwrSourcePdu1Input, lgpPwrMeasurementPointVAPercent=lgpPwrMeasurementPointVAPercent, lgpPwrWellKnownMeasurementTypes=lgpPwrWellKnownMeasurementTypes, lgpPwrShutdownOverTemperature=lgpPwrShutdownOverTemperature, lgpPwrMeasBattery=lgpPwrMeasBattery, lgpPwrTransferToBypass=lgpPwrTransferToBypass, lgpPwrShutdownRemote=lgpPwrShutdownRemote, lgpPwrStateIntBypassBrkrState=lgpPwrStateIntBypassBrkrState, lgpPwrLoadCircuitTable=lgpPwrLoadCircuitTable, lgpPwrBatteryStatisticsReset=lgpPwrBatteryStatisticsReset, lgpPwrDcMeasurementPointSubID=lgpPwrDcMeasurementPointSubID, lgpPwrRectifierPassiveFilterInstalled=lgpPwrRectifierPassiveFilterInstalled, lgpPwrBatteryTestResult=lgpPwrBatteryTestResult, lgpPwrLineMeasurementCurrentTHD=lgpPwrLineMeasurementCurrentTHD, lgpPwrVoltsAc=lgpPwrVoltsAc, lgpPwrBypassReady=lgpPwrBypassReady, lgpPwrStateLoadDisconnectState=lgpPwrStateLoadDisconnectState, lgpPwrMeasurementPointNomCurrent=lgpPwrMeasurementPointNomCurrent, lgpPwrBypassSyncDiff=lgpPwrBypassSyncDiff, lgpPwrDcMeasurementPointVolts=lgpPwrDcMeasurementPointVolts, lgpPwrMinimumRedundantBatteryModule=lgpPwrMinimumRedundantBatteryModule, lgpPwrNumberBatteryModuleWarnings=lgpPwrNumberBatteryModuleWarnings, lgpPwrStateInverterQualification=lgpPwrStateInverterQualification, lgpPwrUpsTopLineInteractive=lgpPwrUpsTopLineInteractive, lgpPwrLineMeasurementCapacity=lgpPwrLineMeasurementCapacity, lgpPwrTopFrequencyConverter=lgpPwrTopFrequencyConverter, lgpPwrMinimumRedundantPowerModule=lgpPwrMinimumRedundantPowerModule, lgpPwrMeasurementPointGroundCurrent=lgpPwrMeasurementPointGroundCurrent, lgpPwrBatteryDischargeCount=lgpPwrBatteryDischargeCount, lgpPwrPowerFactorCorrection=lgpPwrPowerFactorCorrection, lgpPwrLoadCircuit=lgpPwrLoadCircuit, lgpPwrLineMeasurementMinVolts=lgpPwrLineMeasurementMinVolts, lgpPwrDcMeasurementPointTruePower=lgpPwrDcMeasurementPointTruePower, lgpPwrShutdownOverload=lgpPwrShutdownOverload, lgpPwrDcMeasurementPointId=lgpPwrDcMeasurementPointId, lgpPwrMeasurementPointWattHours=lgpPwrMeasurementPointWattHours, lgpPwrUpsAbortCommand=lgpPwrUpsAbortCommand, lgpPwrDcMeasurementPointNomVolts=lgpPwrDcMeasurementPointNomVolts, lgpPwrAutoReTransferEnabled=lgpPwrAutoReTransferEnabled, lgpPwrThresholdHighWarning=lgpPwrThresholdHighWarning, lgpPwrBypassOverloadShutdownTime=lgpPwrBypassOverloadShutdownTime, lgpPwrBatteryChargeMode=lgpPwrBatteryChargeMode, lgpPwrLineMeasurementPowerFactorTag=lgpPwrLineMeasurementPowerFactorTag, lgpPwrBatteryLifeEnhancer=lgpPwrBatteryLifeEnhancer, lgpPwrLineMeasurementMaxVolts=lgpPwrLineMeasurementMaxVolts, lgpPwrStateInputQualification=lgpPwrStateInputQualification, lgpPwrMeasurementPointPowerFactorTag=lgpPwrMeasurementPointPowerFactorTag, lgpPwrRectifierPulseCount=lgpPwrRectifierPulseCount, lgpPwrStateSource2BypassBrkrState=lgpPwrStateSource2BypassBrkrState, lgpPwrEconomicOperationMode=lgpPwrEconomicOperationMode, lgpPwrBatteryAmpHoursDischargeConsumed=lgpPwrBatteryAmpHoursDischargeConsumed, lgpPwrThresholdSubID=lgpPwrThresholdSubID, lgpPwrBatteryChargeCompensating=lgpPwrBatteryChargeCompensating, lgpPwrOutputOffDelayWithRestart=lgpPwrOutputOffDelayWithRestart, lgpPwrStateInputBrkrState=lgpPwrStateInputBrkrState, lgpPwrLoadCircuitIndex=lgpPwrLoadCircuitIndex, lgpPwrStateMaintIsolBrkrState=lgpPwrStateMaintIsolBrkrState, lgpPwrMeasurementPointEntry=lgpPwrMeasurementPointEntry, lgpPwrOutputToLoad=lgpPwrOutputToLoad, lgpPwrMeasurementPointNeutralCurrent=lgpPwrMeasurementPointNeutralCurrent, lgpPwrDcMeasurementPointCurrent=lgpPwrDcMeasurementPointCurrent, lgpPwrStateSource1PduInputBrkrState=lgpPwrStateSource1PduInputBrkrState, lgpPwrTopVoltageConverter=lgpPwrTopVoltageConverter, lgpPwrStateModuleType=lgpPwrStateModuleType, lgpPwrStateOutStaticSwState=lgpPwrStateOutStaticSwState, lgpPwrStateBypassStaticSwitchState=lgpPwrStateBypassStaticSwitchState, lgpPwrLoadCircuitStateAndControl=lgpPwrLoadCircuitStateAndControl, lgpPwrNumberActiveBatteryModules=lgpPwrNumberActiveBatteryModules, lgpPwrStateBypassInputConfig=lgpPwrStateBypassInputConfig, lgpPwrParallelSystemOutputToLoadSource=lgpPwrParallelSystemOutputToLoadSource, lgpPwrBatteryAmpHours=lgpPwrBatteryAmpHours, lgpPwrStateDCBusQualification=lgpPwrStateDCBusQualification, lgpPwrTopMaximumFrameCapacity=lgpPwrTopMaximumFrameCapacity, lgpPwrBypassReXfrRemainTime=lgpPwrBypassReXfrRemainTime, lgpPwrShutdownHardware=lgpPwrShutdownHardware, lgpPwrBatteryFloatVoltage=lgpPwrBatteryFloatVoltage, lgpPwrStateModuleOutBrkrState=lgpPwrStateModuleOutBrkrState, lgpPwrLineMeasurementVoltsLL=lgpPwrLineMeasurementVoltsLL, lgpPwrFrequencyDeviationLimit=lgpPwrFrequencyDeviationLimit, lgpPwrSettings=lgpPwrSettings, lgpPwrAutomaticBatteryTestInterval=lgpPwrAutomaticBatteryTestInterval, lgpPwrBatteryLastCommissionTime=lgpPwrBatteryLastCommissionTime, lgpPwrDcMeasurementPointTable=lgpPwrDcMeasurementPointTable, lgpPwrAutomaticBatteryTestCountdown=lgpPwrAutomaticBatteryTestCountdown, lgpPwrGeneratorStatus=lgpPwrGeneratorStatus, lgpPwrRotaryBreakerStatus=lgpPwrRotaryBreakerStatus, lgpPwrConfigLowBatteryWarningTime=lgpPwrConfigLowBatteryWarningTime, lgpPwrThresholdType=lgpPwrThresholdType, lgpPwrNumberFailedBatteryModules=lgpPwrNumberFailedBatteryModules, lgpPwrShutdownDcBusOverload=lgpPwrShutdownDcBusOverload, lgpPwrEconomicOperation=lgpPwrEconomicOperation, lgpPwrThresholdLowFailure=lgpPwrThresholdLowFailure, lgpPwrOutputToLoadUserOverloadLimit=lgpPwrOutputToLoadUserOverloadLimit, lgpPwrLoadCircuitId=lgpPwrLoadCircuitId, lgpPwrAutoRestartBatteryChargeThreshold=lgpPwrAutoRestartBatteryChargeThreshold, lgpPwrWellKnownMeasurementPoints=lgpPwrWellKnownMeasurementPoints, lgpPwrBatteryCapacityStatus=lgpPwrBatteryCapacityStatus, lgpPwrThresholdHighFailure=lgpPwrThresholdHighFailure, lgpPwrBatteryCharger=lgpPwrBatteryCharger, lgpPwrNominalVoltageDeviationPercent=lgpPwrNominalVoltageDeviationPercent, lgpPwrBatteryCabinetRatedCapacity=lgpPwrBatteryCabinetRatedCapacity, lgpPwrBatteryAmpHoursConsumed=lgpPwrBatteryAmpHoursConsumed, liebertGlobalProductsPowerModule=liebertGlobalProductsPowerModule, lgpPwrLineMeasurementPercentLoad=lgpPwrLineMeasurementPercentLoad, lgpPwrInverterOverloadShutdownTime=lgpPwrInverterOverloadShutdownTime, lgpPwrTopRedundantControlModules=lgpPwrTopRedundantControlModules, lgpPwrSource2Input=lgpPwrSource2Input, lgpPwrRectifierActiveFilterInstalled=lgpPwrRectifierActiveFilterInstalled, lgpPwrStateMaintBypassBrkrState=lgpPwrStateMaintBypassBrkrState, lgpPwrLineMeasurementTable=lgpPwrLineMeasurementTable, lgpPwrTopology=lgpPwrTopology, lgpPwrUPSTopDualInput=lgpPwrUPSTopDualInput, lgpPwrThresholdTable=lgpPwrThresholdTable, lgpPwrSourcePdu2Input=lgpPwrSourcePdu2Input, lgpPwrStateRectifierState=lgpPwrStateRectifierState, lgpPwrBatteryTest=lgpPwrBatteryTest, lgpPwrStateOutQualification=lgpPwrStateOutQualification, lgpPwrNumberActivePowerModules=lgpPwrNumberActivePowerModules, lgpPwrBatteryLeadAcidCellCount=lgpPwrBatteryLeadAcidCellCount, lgpPwrLineMeasurementEntry=lgpPwrLineMeasurementEntry, lgpPwrMeasDcBus=lgpPwrMeasDcBus, lgpPwrMeasurementPointTable=lgpPwrMeasurementPointTable, lgpPwrBlackOutCount=lgpPwrBlackOutCount, lgpPwrMeasBatteryCabinet=lgpPwrMeasBatteryCabinet, lgpPwrShutdownLineSwap=lgpPwrShutdownLineSwap, lgpPwrInputIsolationTransformerInstalled=lgpPwrInputIsolationTransformerInstalled, lgpPwrMeasurementPointFrequency=lgpPwrMeasurementPointFrequency, lgpPwrThresholdPoint=lgpPwrThresholdPoint, lgpPwrStateLoadBusSynchronization=lgpPwrStateLoadBusSynchronization, lgpPwrSource1Input=lgpPwrSource1Input, lgpPwrMeasSystemOutput=lgpPwrMeasSystemOutput, lgpPwrOutputToLoadOnBypass=lgpPwrOutputToLoadOnBypass, lgpPwrBatteryCabinetCount=lgpPwrBatteryCabinetCount, lgpPwrWellKnownControlPoints=lgpPwrWellKnownControlPoints, lgpPwrStateInverterState=lgpPwrStateInverterState, lgpPwrStateRectifierIsolBrkrState=lgpPwrStateRectifierIsolBrkrState, lgpPwrUpsAutoRestartDelay=lgpPwrUpsAutoRestartDelay, lgpPwrOutputOffDelayWithoutRestart=lgpPwrOutputOffDelayWithoutRestart, lgpPwrMeasurementPointNomFrequency=lgpPwrMeasurementPointNomFrequency, lgpPwrLineMeasurementPowerFactor=lgpPwrLineMeasurementPowerFactor, lgpPwrStateBackfeedBrkrState=lgpPwrStateBackfeedBrkrState, lgpPwrPhaseDifferenceLimit=lgpPwrPhaseDifferenceLimit, lgpPwrTransferToInverter=lgpPwrTransferToInverter, lgpPwrMeasurementPointTruePower=lgpPwrMeasurementPointTruePower, lgpPwrLineMeasurementCrestFactorCurrent=lgpPwrLineMeasurementCrestFactorCurrent, lgpPwrBattery=lgpPwrBattery, lgpPwrShutdownPowerFactorCorrectionFailure=lgpPwrShutdownPowerFactorCorrectionFailure, lgpPwrParallelRedundancyCount=lgpPwrParallelRedundancyCount, lgpPwrNumberPowerModuleWarnings=lgpPwrNumberPowerModuleWarnings, lgpPwrStateOutputConfig=lgpPwrStateOutputConfig, lgpPwrRectifierTrapInstalled=lgpPwrRectifierTrapInstalled, lgpPwrLoadBusSyncMode=lgpPwrLoadBusSyncMode, lgpPwrMeasurementPoint=lgpPwrMeasurementPoint, lgpPwrBuck=lgpPwrBuck, lgpPwrInverterReady=lgpPwrInverterReady, lgpPwrConfig=lgpPwrConfig, lgpPwrStateUpsModuleCount=lgpPwrStateUpsModuleCount, lgpPwrNumberFailedPowerModules=lgpPwrNumberFailedPowerModules, lgpPwrStateSource2PduInputBrkrState=lgpPwrStateSource2PduInputBrkrState, lgpPwrLineMeasurementVA=lgpPwrLineMeasurementVA, lgpPwrLoadOnSource=lgpPwrLoadOnSource, lgpPwrStateOutputBrkrState=lgpPwrStateOutputBrkrState)
mibBuilder.exportSymbols("LIEBERT-GP-POWER-MIB", lgpPwrNoLoadWarningDelay=lgpPwrNoLoadWarningDelay, lgpPwrMeasurementPointNomVolts=lgpPwrMeasurementPointNomVolts, lgpPwrBatteryCircuitBreakerState=lgpPwrBatteryCircuitBreakerState, lgpPwrUPSModuleMode=lgpPwrUPSModuleMode, lgpPwrLineMeasurementVolts=lgpPwrLineMeasurementVolts)
