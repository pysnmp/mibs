#
# PySNMP MIB module TAIT-INFRA93SERIES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/tait/TAIT-INFRA93SERIES-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 08:12:25 2024
# On host fv-az1110-484 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, Counter32, ObjectIdentity, NotificationType, TimeTicks, IpAddress, iso, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "ObjectIdentity", "NotificationType", "TimeTicks", "IpAddress", "iso", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "ModuleIdentity", "Integer32")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
taitGeneric, = mibBuilder.importSymbols("TAIT-COMMON-MIB", "taitGeneric")
infra93_94MibModule, = mibBuilder.importSymbols("TAIT-INFRA93-94SERIES-COMMON-MIB", "infra93-94MibModule")
Milliseconds, GateState, AlarmState, TimingControlType, FrequencyHz, VoltageV, OptionState, TransmitterStatus, ChannelGroupStatus, CurrentmA, Condition, PowerW, BaseStationMode = mibBuilder.importSymbols("TAIT-INFRA93-94SERIES-TC-MIB", "Milliseconds", "GateState", "AlarmState", "TimingControlType", "FrequencyHz", "VoltageV", "OptionState", "TransmitterStatus", "ChannelGroupStatus", "CurrentmA", "Condition", "PowerW", "BaseStationMode")
ControlProtocolStatus, FrequencydHz, LogicalChannelState, MPTControlProtocolStatus, FallbackNodeStatus, LeveldBm, SubAudibleType, TransmitterSyncStatus, SINADLevel, StandaloneNodeStatus, Temperature, RxFrequencyResponse, TxFrequencyResponse, DcsCode, ReceiverSyncStatus, OperationalMode, Ratio, ColourCode = mibBuilder.importSymbols("TAIT-INFRA93SERIES-TC-MIB", "ControlProtocolStatus", "FrequencydHz", "LogicalChannelState", "MPTControlProtocolStatus", "FallbackNodeStatus", "LeveldBm", "SubAudibleType", "TransmitterSyncStatus", "SINADLevel", "StandaloneNodeStatus", "Temperature", "RxFrequencyResponse", "TxFrequencyResponse", "DcsCode", "ReceiverSyncStatus", "OperationalMode", "Ratio", "ColourCode")
infra93MibMonitored = ModuleIdentity((1, 3, 6, 1, 4, 1, 3570, 1, 1, 10, 2))
infra93MibMonitored.setRevisions(('2019-08-30 15:38', '2019-05-29 00:00', '2019-03-30 00:00', '2018-08-30 00:00', '2018-07-30 00:00', '2018-05-22 00:26', '2017-09-14 01:30', '2017-08-24 14:00', '2017-05-05 15:00', '2017-03-07 00:00', '2017-02-03 00:00', '2016-12-05 00:00', '2016-07-01 00:00', '2016-02-18 00:00', '2015-11-03 04:00', '2015-03-23 04:00', '2014-10-30 15:00', '2014-07-29 00:00', '2014-07-10 00:00', '2014-04-14 00:00', '2014-04-13 00:00', '2014-03-14 00:00', '2014-01-26 00:00', '2014-01-14 11:00', '2014-01-01 00:00',))
if mibBuilder.loadTexts: infra93MibMonitored.setLastUpdated('201908301538Z')
if mibBuilder.loadTexts: infra93MibMonitored.setOrganization('www.taitradio.com')
infra93MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2))
monitored = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2))
mibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1))
productInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 1))
productSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 1, 1))
info = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 1, 1, 1))
health = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 1, 1, 2))
productEnabledFeatures = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 1, 2))
modules = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2))
reciter = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2))
rctSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 1))
rctInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 1, 1))
rctHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 1, 2))
rctSelectedChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 2))
rctRfReceiveQuality = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 3))
rctRfReceiver = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 4))
rctRfTransmitter = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 5))
rctTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 6))
rctSystemInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 7))
powerAmplifier = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 3))
paSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 3, 1))
paInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 3, 1, 1))
paHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 3, 1, 2))
paTxOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 3, 2))
paTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 3, 4))
paGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 3, 5))
powerManagementUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 4))
pmuSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 4, 1))
pmuInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 4, 1, 1))
pmuHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 4, 1, 2))
pmuSubmodules = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 4, 1, 3))
pmuState = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 4, 2))
frontPanel = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 5))
fpSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 5, 1))
fpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 5, 1, 1))
fpHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 5, 1, 2))
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3))
alarmSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 1))
reciterAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 3))
paAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 4))
pmuAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 5))
customAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 6))
fpAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 7))
systemAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 8))
networkLinks = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 4))
networkLinksSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 4, 1))
linkInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 4, 1, 1))
linkHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 4, 1, 2))
networkInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 5))
nwNtpInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 5, 1))
nwChannelGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 5, 2))
nwPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 5, 3))
mibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5))
mibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1))
mibCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 2))
licenceDmrFull = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 1, 2, 300), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenceDmrFull.setStatus('current')
licenceDmrExpress = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 1, 2, 302), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenceDmrExpress.setStatus('current')
licenceDmrAccess = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 1, 2, 303), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenceDmrAccess.setStatus('current')
licenceDmrConventional = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 1, 2, 304), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenceDmrConventional.setStatus('current')
licenceAnalogConventional = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 1, 2, 301), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenceAnalogConventional.setStatus('current')
licenceDmrExpress20 = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 1, 2, 305), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenceDmrExpress20.setStatus('current')
licenceDmrCentralVoter = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 1, 2, 306), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenceDmrCentralVoter.setStatus('current')
licenceDmrNetworkSatellite = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 1, 2, 307), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenceDmrNetworkSatellite.setStatus('current')
infoTransmitterStatus = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 1, 1, 1, 1), TransmitterStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoTransmitterStatus.setStatus('current')
infoStandaloneNodeStatus = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 1, 1, 1, 2), StandaloneNodeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoStandaloneNodeStatus.setStatus('deprecated')
infoMPTFallbackNodeStatus = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 1, 1, 1, 3), FallbackNodeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoMPTFallbackNodeStatus.setStatus('current')
infoDMRFallbackNodeStatus = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 1, 1, 1, 4), FallbackNodeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoDMRFallbackNodeStatus.setStatus('current')
healthRunMode = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 1, 1, 2, 2), BaseStationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthRunMode.setStatus('current')
healthNetworkConnLogChan1State = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 1, 1, 2, 3), LogicalChannelState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthNetworkConnLogChan1State.setStatus('current')
healthNetworkConnLogChan2State = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 1, 1, 2, 4), LogicalChannelState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthNetworkConnLogChan2State.setStatus('current')
healthSecureShellRunning = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 1, 1, 2, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthSecureShellRunning.setStatus('current')
rctInfoProductCode = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctInfoProductCode.setStatus('current')
rctInfoSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctInfoSerialNumber.setStatus('current')
rctInfoHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctInfoHardwareVersion.setStatus('current')
rctInfoFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctInfoFirmwareVersion.setStatus('current')
rctRfReceiverRSSI = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 4, 1), LeveldBm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctRfReceiverRSSI.setStatus('current')
rctRfReceiverLC1RSSI = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 4, 2), LeveldBm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctRfReceiverLC1RSSI.setStatus('current')
rctRfReceiverLC2RSSI = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 4, 3), LeveldBm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctRfReceiverLC2RSSI.setStatus('current')
rctRfReceiverLC1RxGateState = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 4, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctRfReceiverLC1RxGateState.setStatus('current')
rctRfReceiverLC2RxGateState = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 4, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctRfReceiverLC2RxGateState.setStatus('current')
rctRfReceiverSelectedDecodeCTCSS = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 4, 8), FrequencydHz()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctRfReceiverSelectedDecodeCTCSS.setStatus('current')
rctRfReceiverSelectedDecodeSubAudibleType = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 4, 9), SubAudibleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctRfReceiverSelectedDecodeSubAudibleType.setStatus('current')
rctRfReceiverSelectedSINADGatingLevel = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 4, 10), SINADLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctRfReceiverSelectedSINADGatingLevel.setStatus('current')
rctRfReceiverSelectedDecodeDCS = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 4, 11), DcsCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctRfReceiverSelectedDecodeDCS.setStatus('current')
rctRfReceiverSelectedFrequencyResponse = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 4, 12), RxFrequencyResponse()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctRfReceiverSelectedFrequencyResponse.setStatus('current')
rctRfReceiverAnalogGateState = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 4, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctRfReceiverAnalogGateState.setStatus('current')
rctRfReceiverIsDisabled = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 4, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctRfReceiverIsDisabled.setStatus('current')
rctRfTxSelectedEncodeCTCSS = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 5, 10), FrequencydHz()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctRfTxSelectedEncodeCTCSS.setStatus('current')
rctRfTxSelectedEncodeSubAudibleType = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 5, 11), SubAudibleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctRfTxSelectedEncodeSubAudibleType.setStatus('current')
rctRfTxSelectFrequencyResponse = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 5, 12), TxFrequencyResponse()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctRfTxSelectFrequencyResponse.setStatus('current')
rctRfTxSelectedEncodeDCS = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 5, 13), DcsCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctRfTxSelectedEncodeDCS.setStatus('current')
rctRfTxSelectedEncodeSubAudibleDeviation = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 5, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctRfTxSelectedEncodeSubAudibleDeviation.setStatus('current')
rctRfTxRfRepeatState = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 5, 16), OptionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctRfTxRfRepeatState.setStatus('current')
rctTemperatureBoard = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 6, 1), Temperature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctTemperatureBoard.setStatus('current')
rctSiConfiguredBalancedLineInLevel = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 7, 1), LeveldBm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctSiConfiguredBalancedLineInLevel.setStatus('current')
rctSiConfiguredBalancedLineOutLevel = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 7, 2), LeveldBm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctSiConfiguredBalancedLineOutLevel.setStatus('current')
rctSiTxKey = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 7, 3), GateState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctSiTxKey.setStatus('current')
rctSiRxGate = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 7, 4), GateState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctSiRxGate.setStatus('current')
paInfoProductCode = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 3, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paInfoProductCode.setStatus('current')
paInfoSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 3, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paInfoSerialNumber.setStatus('current')
paInfoHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 3, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paInfoHardwareVersion.setStatus('current')
paInfoFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 3, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paInfoFirmwareVersion.setStatus('current')
fpInfoProductCode = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 5, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpInfoProductCode.setStatus('current')
fpInfoSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 5, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpInfoSerialNumber.setStatus('current')
fpInfoHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 5, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpInfoHardwareVersion.setStatus('current')
fpInfoFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 5, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpInfoFirmwareVersion.setStatus('current')
pmuInfoProductCode = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 4, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuInfoProductCode.setStatus('current')
pmuInfoSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 4, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuInfoSerialNumber.setStatus('current')
pmuInfoHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 4, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuInfoHardwareVersion.setStatus('current')
pmuInfoFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 4, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuInfoFirmwareVersion.setStatus('current')
pmuInfoCalibrationUpdateDate = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 4, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuInfoCalibrationUpdateDate.setStatus('current')
pmuStateMainsInState = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 4, 2, 1), Condition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuStateMainsInState.setStatus('current')
pmuStateBatteryInState = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 4, 2, 2), Condition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuStateBatteryInState.setStatus('current')
pmuStateBatteryInVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 4, 2, 3), VoltageV()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuStateBatteryInVoltage.setStatus('current')
pmuStateOutCurrent = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 4, 2, 4), CurrentmA()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuStateOutCurrent.setStatus('current')
pmuStateOutVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 4, 2, 5), VoltageV()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuStateOutVoltage.setStatus('current')
pmuStateOutStatus = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 4, 2, 6), Condition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuStateOutStatus.setStatus('current')
pmuStateAuxOutState = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 4, 2, 7), Condition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuStateAuxOutState.setStatus('current')
pmuStateBusConnect = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 4, 2, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuStateBusConnect.setStatus('current')
rctSelectedChannelNumber = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctSelectedChannelNumber.setStatus('current')
rctSelectedChannelName = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 2, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctSelectedChannelName.setStatus('current')
rctSelectedChannelProfileName = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 2, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctSelectedChannelProfileName.setStatus('current')
rctSelectedChannelSigProfileName = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 2, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctSelectedChannelSigProfileName.setStatus('current')
rctSelectedChannelTransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 2, 5), PowerW()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctSelectedChannelTransmitPower.setStatus('current')
rctSelectedChannelTxFreq = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 2, 6), FrequencyHz()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctSelectedChannelTxFreq.setStatus('current')
rctSelectedChannelRxFreq = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 2, 7), FrequencyHz()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctSelectedChannelRxFreq.setStatus('current')
rctSelectedChannelSystemType = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 2, 10), OperationalMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctSelectedChannelSystemType.setStatus('current')
rctSelectedChannelColourCode = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 2, 11), ColourCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctSelectedChannelColourCode.setStatus('current')
rctSelectedChannelGroupName = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 2, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctSelectedChannelGroupName.setStatus('current')
rctRfRcvInterference = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 3, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctRfRcvInterference.setStatus('current')
rctRfInterferenceCounter = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctRfInterferenceCounter.setStatus('current')
rctRfInterferenceEvents = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctRfInterferenceEvents.setStatus('current')
paTxOutputForwardPower = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 3, 2, 1), PowerW()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paTxOutputForwardPower.setStatus('current')
paTxOutputVSWR = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 2, 3, 2, 2), Ratio()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paTxOutputVSWR.setStatus('current')
linkInfoCtrlProtocolStatus = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 4, 1, 1, 1), ControlProtocolStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInfoCtrlProtocolStatus.setStatus('current')
linkInfoNetworkPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInfoNetworkPacketCount.setStatus('current')
linkInfoMPTCtrlProtocolStatus = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 4, 1, 1, 3), MPTControlProtocolStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInfoMPTCtrlProtocolStatus.setStatus('current')
linkInfoDMRNodeIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 4, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInfoDMRNodeIPAddress.setStatus('current')
linkInfoDMRNodePriority = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInfoDMRNodePriority.setStatus('current')
linkInfoMPTNodeIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 4, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInfoMPTNodeIPAddress.setStatus('current')
linkInfoMPTNodePriority = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 4, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInfoMPTNodePriority.setStatus('current')
linkHealthNetworkPacketLostCount = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 4, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkHealthNetworkPacketLostCount.setStatus('current')
linkHealthNetworkJitterLastOver = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 4, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkHealthNetworkJitterLastOver.setStatus('current')
linkHealthNetworkJitterCount = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 4, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkHealthNetworkJitterCount.setStatus('current')
linkHealthSequenceErrorsCount = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 4, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkHealthSequenceErrorsCount.setStatus('current')
nwConfiguredNtpServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwConfiguredNtpServerAddress.setStatus('current')
nwConfiguredNtpBackupServerAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwConfiguredNtpBackupServerAddress1.setStatus('current')
nwConfiguredNtpBackupServerAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwConfiguredNtpBackupServerAddress2.setStatus('current')
alarmSummaryBaseStation = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 1, 1), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSummaryBaseStation.setStatus('current')
alarmSummaryReciter = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 1, 2), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSummaryReciter.setStatus('current')
alarmSummaryPowerAmplifier = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 1, 3), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSummaryPowerAmplifier.setStatus('current')
alarmSummaryPowerManagementUnit = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 1, 4), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSummaryPowerManagementUnit.setStatus('current')
alarmSummaryCustomAlarms = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 1, 5), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSummaryCustomAlarms.setStatus('current')
alarmSummaryFrontPanel = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 1, 6), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSummaryFrontPanel.setStatus('current')
alarmSummarySystem = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 1, 7), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSummarySystem.setStatus('current')
alarmSummaryMinor = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 1, 8), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSummaryMinor.setStatus('current')
alarmSummaryMajor = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 1, 9), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSummaryMajor.setStatus('current')
rctAlarmRxSynthOutOfLock = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 3, 2), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctAlarmRxSynthOutOfLock.setStatus('current')
rctAlarmInvalidChannelSelected = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 3, 3), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctAlarmInvalidChannelSelected.setStatus('current')
rctAlarmOverTemperature = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 3, 10), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctAlarmOverTemperature.setStatus('current')
rctAlarmTxCalibrationInvalid = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 3, 13), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctAlarmTxCalibrationInvalid.setStatus('current')
rctAlarmRxCalibrationInvalid = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 3, 14), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctAlarmRxCalibrationInvalid.setStatus('current')
rctAlarmInvalidConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 3, 15), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctAlarmInvalidConfiguration.setStatus('current')
rctAlarm25MHzSynthOutOfLock = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 3, 16), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctAlarm25MHzSynthOutOfLock.setStatus('current')
rctAlarm6144MHzSynthOutOfLock = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 3, 17), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctAlarm6144MHzSynthOutOfLock.setStatus('current')
rctAlarmTxFSynthOutOfLock = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 3, 18), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctAlarmTxFSynthOutOfLock.setStatus('current')
rctAlarmSimulcastSynch = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 3, 19), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctAlarmSimulcastSynch.setStatus('current')
rctAlarmReceiverSynch = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 3, 20), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctAlarmReceiverSynch.setStatus('current')
rctAlarmTxRSynthOutOfLock = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 3, 21), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rctAlarmTxRSynthOutOfLock.setStatus('current')
paAlarmNoPADetected = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 4, 1), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paAlarmNoPADetected.setStatus('current')
paAlarmInvalidFirmware = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 4, 2), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paAlarmInvalidFirmware.setStatus('current')
paAlarmInvalidCalibration = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 4, 3), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paAlarmInvalidCalibration.setStatus('current')
paAlarmForwardPowerLow = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 4, 5), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paAlarmForwardPowerLow.setStatus('current')
paAlarmPowerFoldback = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 4, 7), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paAlarmPowerFoldback.setStatus('current')
paAlarmReversePowerHigh = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 4, 8), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paAlarmReversePowerHigh.setStatus('current')
paAlarmShutdownImminent = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 4, 9), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paAlarmShutdownImminent.setStatus('current')
paAlarmVSWRFault = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 4, 10), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paAlarmVSWRFault.setStatus('current')
paAlarmDriverCurrentHigh = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 4, 11), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paAlarmDriverCurrentHigh.setStatus('current')
paAlarmFinal1CurrentHigh = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 4, 12), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paAlarmFinal1CurrentHigh.setStatus('current')
paAlarmFinal2CurrentHigh = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 4, 13), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paAlarmFinal2CurrentHigh.setStatus('current')
paAlarmCurrentImbalance = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 4, 14), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paAlarmCurrentImbalance.setStatus('current')
paAlarmSupplyVoltageLow = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 4, 15), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paAlarmSupplyVoltageLow.setStatus('current')
paAlarmSupplyVoltageHigh = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 4, 16), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paAlarmSupplyVoltageHigh.setStatus('current')
paAlarmDriverTemperatureHigh = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 4, 17), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paAlarmDriverTemperatureHigh.setStatus('current')
paAlarmFinal1TemperatureHigh = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 4, 18), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paAlarmFinal1TemperatureHigh.setStatus('current')
paAlarmFinal2TemperatureHigh = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 4, 19), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paAlarmFinal2TemperatureHigh.setStatus('current')
pmuAlarmNoPMUDetected = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 5, 1), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuAlarmNoPMUDetected.setStatus('current')
pmuAlarmInvalidFirmware = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 5, 2), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuAlarmInvalidFirmware.setStatus('current')
pmuAlarmMainsFailure = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 5, 4), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuAlarmMainsFailure.setStatus('current')
pmuAlarmSelfTestFailure = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 5, 5), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuAlarmSelfTestFailure.setStatus('current')
pmuAlarmShutdownImminent = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 5, 6), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuAlarmShutdownImminent.setStatus('current')
pmuAlarmTemperatureHigh = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 5, 7), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuAlarmTemperatureHigh.setStatus('current')
pmuAlarmBatteryProtect = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 5, 8), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuAlarmBatteryProtect.setStatus('current')
pmuAlarmBatteryVoltageLow = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 5, 9), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuAlarmBatteryVoltageLow.setStatus('current')
pmuAlarmBatteryVoltageHigh = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 5, 10), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuAlarmBatteryVoltageHigh.setStatus('current')
pmuAlarmCurrentOutHigh = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 5, 11), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuAlarmCurrentOutHigh.setStatus('current')
pmuAlarmVoltageOutLow = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 5, 12), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuAlarmVoltageOutLow.setStatus('current')
pmuAlarmVoltageOutHigh = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 5, 13), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmuAlarmVoltageOutHigh.setStatus('current')
systemAlarmAmbientTempLow = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 8, 1), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAlarmAmbientTempLow.setStatus('current')
systemAlarmAmbientTempHigh = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 8, 2), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAlarmAmbientTempHigh.setStatus('current')
systemAlarmExternalRefAbsent = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 8, 3), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAlarmExternalRefAbsent.setStatus('current')
systemAlarmQoSJitter = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 8, 4), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAlarmQoSJitter.setStatus('current')
systemAlarmQoSLostPackets = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 8, 5), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAlarmQoSLostPackets.setStatus('current')
systemAlarmFallbackControlled = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 8, 6), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAlarmFallbackControlled.setStatus('current')
systemAlarmDuplicateNodePriority = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 8, 7), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAlarmDuplicateNodePriority.setStatus('current')
systemAlarmNTPSynchronisation = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 8, 8), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAlarmNTPSynchronisation.setStatus('current')
systemAlarm1PPSAbsent = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 8, 9), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAlarm1PPSAbsent.setStatus('current')
systemAlarmQoSTransmitBuffer = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 8, 10), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAlarmQoSTransmitBuffer.setStatus('current')
systemAlarmCartesianLoopUnstable = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 8, 11), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAlarmCartesianLoopUnstable.setStatus('current')
systemAlarmTxRCableAbsent = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 8, 12), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAlarmTxRCableAbsent.setStatus('current')
fpAlarmFan1 = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 7, 1), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpAlarmFan1.setStatus('current')
fpAlarmFan2 = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 7, 2), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpAlarmFan2.setStatus('current')
fpAlarmFan3 = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 7, 3), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpAlarmFan3.setStatus('current')
fpAlarmNoFPDetected = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 7, 4), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpAlarmNoFPDetected.setStatus('current')
fpAlarmInvalidFirmware = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 7, 5), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpAlarmInvalidFirmware.setStatus('current')
customAlarm1 = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 6, 1), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customAlarm1.setStatus('current')
customAlarm2 = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 6, 2), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customAlarm2.setStatus('current')
customAlarm3 = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 6, 3), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customAlarm3.setStatus('current')
customAlarm4 = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 6, 4), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customAlarm4.setStatus('current')
customAlarm5 = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 6, 5), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customAlarm5.setStatus('current')
customAlarm6 = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 6, 6), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customAlarm6.setStatus('current')
customAlarm7 = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 6, 7), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customAlarm7.setStatus('current')
customAlarm8 = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 6, 8), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customAlarm8.setStatus('current')
customAlarm9 = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 6, 9), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customAlarm9.setStatus('current')
customAlarm10 = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 6, 10), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customAlarm10.setStatus('current')
customAlarm11 = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 6, 11), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customAlarm11.setStatus('current')
customAlarm12 = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 3, 6, 12), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customAlarm12.setStatus('current')
nwSvpPort = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 5, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSvpPort.setStatus('current')
nwChannelGroupStatus = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 5, 2, 1), ChannelGroupStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwChannelGroupStatus.setStatus('current')
nwChannelGroupLocalBufferLevel = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 5, 2, 2), Milliseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwChannelGroupLocalBufferLevel.setStatus('current')
nwChannelGroupEmptiestBufferLevel = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 5, 2, 3), Milliseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwChannelGroupEmptiestBufferLevel.setStatus('current')
nwChannelGroupMarshallingType = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 5, 2, 4), TimingControlType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwChannelGroupMarshallingType.setStatus('current')
nwChannelGroupMarshallingDuration = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 5, 2, 5), Milliseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwChannelGroupMarshallingDuration.setStatus('current')
nwChannelGroupReceiverSynchStatus = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 5, 2, 6), ReceiverSyncStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwChannelGroupReceiverSynchStatus.setStatus('current')
nwChannelGroupTransmitterSynchStatus = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 5, 2, 7), TransmitterSyncStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwChannelGroupTransmitterSynchStatus.setStatus('current')
nwChannelGroupLateStreamsCount = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 5, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwChannelGroupLateStreamsCount.setStatus('current')
nwChannelGroupOverflowCount = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 5, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwChannelGroupOverflowCount.setStatus('current')
nwChannelGroupUnderflowCount = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 5, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwChannelGroupUnderflowCount.setStatus('current')
nwChannelGroupLostPacketsCount = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 5, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwChannelGroupLostPacketsCount.setStatus('current')
nwChannelGroupJitter = MibScalar((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 1, 5, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwChannelGroupJitter.setStatus('current')
healthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 1)).setObjects(("TAIT-INFRA93SERIES-MIB", "healthRunMode"), ("TAIT-INFRA93SERIES-MIB", "healthNetworkConnLogChan1State"), ("TAIT-INFRA93SERIES-MIB", "healthNetworkConnLogChan2State"), ("TAIT-INFRA93SERIES-MIB", "healthSecureShellRunning"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    healthGroup = healthGroup.setStatus('current')
alarmSummaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 2)).setObjects(("TAIT-INFRA93SERIES-MIB", "alarmSummaryPowerAmplifier"), ("TAIT-INFRA93SERIES-MIB", "alarmSummaryFrontPanel"), ("TAIT-INFRA93SERIES-MIB", "alarmSummaryReciter"), ("TAIT-INFRA93SERIES-MIB", "alarmSummaryBaseStation"), ("TAIT-INFRA93SERIES-MIB", "alarmSummarySystem"), ("TAIT-INFRA93SERIES-MIB", "alarmSummaryPowerManagementUnit"), ("TAIT-INFRA93SERIES-MIB", "alarmSummaryCustomAlarms"), ("TAIT-INFRA93SERIES-MIB", "alarmSummaryMinor"), ("TAIT-INFRA93SERIES-MIB", "alarmSummaryMajor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alarmSummaryGroup = alarmSummaryGroup.setStatus('current')
rctSelectedChannelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 3)).setObjects(("TAIT-INFRA93SERIES-MIB", "rctSelectedChannelNumber"), ("TAIT-INFRA93SERIES-MIB", "rctSelectedChannelName"), ("TAIT-INFRA93SERIES-MIB", "rctSelectedChannelProfileName"), ("TAIT-INFRA93SERIES-MIB", "rctSelectedChannelSigProfileName"), ("TAIT-INFRA93SERIES-MIB", "rctSelectedChannelTransmitPower"), ("TAIT-INFRA93SERIES-MIB", "rctSelectedChannelTxFreq"), ("TAIT-INFRA93SERIES-MIB", "rctSelectedChannelRxFreq"), ("TAIT-INFRA93SERIES-MIB", "rctSelectedChannelSystemType"), ("TAIT-INFRA93SERIES-MIB", "rctSelectedChannelColourCode"), ("TAIT-INFRA93SERIES-MIB", "rctSelectedChannelGroupName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rctSelectedChannelGroup = rctSelectedChannelGroup.setStatus('current')
paTxOutputGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 5)).setObjects(("TAIT-INFRA93SERIES-MIB", "paTxOutputForwardPower"), ("TAIT-INFRA93SERIES-MIB", "paTxOutputVSWR"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    paTxOutputGroup = paTxOutputGroup.setStatus('current')
linkInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 6)).setObjects(("TAIT-INFRA93SERIES-MIB", "linkInfoCtrlProtocolStatus"), ("TAIT-INFRA93SERIES-MIB", "linkInfoNetworkPacketCount"), ("TAIT-INFRA93SERIES-MIB", "linkInfoMPTCtrlProtocolStatus"), ("TAIT-INFRA93SERIES-MIB", "linkInfoDMRNodeIPAddress"), ("TAIT-INFRA93SERIES-MIB", "linkInfoDMRNodePriority"), ("TAIT-INFRA93SERIES-MIB", "linkInfoMPTNodeIPAddress"), ("TAIT-INFRA93SERIES-MIB", "linkInfoMPTNodePriority"), ("TAIT-INFRA93SERIES-MIB", "linkHealthSequenceErrorsCount"), ("TAIT-INFRA93SERIES-MIB", "linkHealthNetworkPacketLostCount"), ("TAIT-INFRA93SERIES-MIB", "linkHealthNetworkJitterLastOver"), ("TAIT-INFRA93SERIES-MIB", "linkHealthNetworkJitterCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    linkInfoGroup = linkInfoGroup.setStatus('current')
customAlarmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 7)).setObjects(("TAIT-INFRA93SERIES-MIB", "customAlarm1"), ("TAIT-INFRA93SERIES-MIB", "customAlarm2"), ("TAIT-INFRA93SERIES-MIB", "customAlarm3"), ("TAIT-INFRA93SERIES-MIB", "customAlarm4"), ("TAIT-INFRA93SERIES-MIB", "customAlarm5"), ("TAIT-INFRA93SERIES-MIB", "customAlarm6"), ("TAIT-INFRA93SERIES-MIB", "customAlarm7"), ("TAIT-INFRA93SERIES-MIB", "customAlarm8"), ("TAIT-INFRA93SERIES-MIB", "customAlarm9"), ("TAIT-INFRA93SERIES-MIB", "customAlarm10"), ("TAIT-INFRA93SERIES-MIB", "customAlarm11"), ("TAIT-INFRA93SERIES-MIB", "customAlarm12"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    customAlarmsGroup = customAlarmsGroup.setStatus('current')
systemAlarmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 8)).setObjects(("TAIT-INFRA93SERIES-MIB", "systemAlarmExternalRefAbsent"), ("TAIT-INFRA93SERIES-MIB", "systemAlarmAmbientTempHigh"), ("TAIT-INFRA93SERIES-MIB", "systemAlarmAmbientTempLow"), ("TAIT-INFRA93SERIES-MIB", "systemAlarmQoSJitter"), ("TAIT-INFRA93SERIES-MIB", "systemAlarmQoSLostPackets"), ("TAIT-INFRA93SERIES-MIB", "systemAlarmFallbackControlled"), ("TAIT-INFRA93SERIES-MIB", "systemAlarmDuplicateNodePriority"), ("TAIT-INFRA93SERIES-MIB", "systemAlarmNTPSynchronisation"), ("TAIT-INFRA93SERIES-MIB", "systemAlarm1PPSAbsent"), ("TAIT-INFRA93SERIES-MIB", "systemAlarmQoSTransmitBuffer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemAlarmsGroup = systemAlarmsGroup.setStatus('current')
fpAlarmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 9)).setObjects(("TAIT-INFRA93SERIES-MIB", "fpAlarmInvalidFirmware"), ("TAIT-INFRA93SERIES-MIB", "fpAlarmFan2"), ("TAIT-INFRA93SERIES-MIB", "fpAlarmNoFPDetected"), ("TAIT-INFRA93SERIES-MIB", "fpAlarmFan3"), ("TAIT-INFRA93SERIES-MIB", "fpAlarmFan1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fpAlarmsGroup = fpAlarmsGroup.setStatus('current')
paAlarmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 10)).setObjects(("TAIT-INFRA93SERIES-MIB", "paAlarmFinal1CurrentHigh"), ("TAIT-INFRA93SERIES-MIB", "paAlarmDriverCurrentHigh"), ("TAIT-INFRA93SERIES-MIB", "paAlarmSupplyVoltageLow"), ("TAIT-INFRA93SERIES-MIB", "paAlarmFinal2TemperatureHigh"), ("TAIT-INFRA93SERIES-MIB", "paAlarmFinal2CurrentHigh"), ("TAIT-INFRA93SERIES-MIB", "paAlarmVSWRFault"), ("TAIT-INFRA93SERIES-MIB", "paAlarmDriverTemperatureHigh"), ("TAIT-INFRA93SERIES-MIB", "paAlarmForwardPowerLow"), ("TAIT-INFRA93SERIES-MIB", "paAlarmNoPADetected"), ("TAIT-INFRA93SERIES-MIB", "paAlarmFinal1TemperatureHigh"), ("TAIT-INFRA93SERIES-MIB", "paAlarmSupplyVoltageHigh"), ("TAIT-INFRA93SERIES-MIB", "paAlarmPowerFoldback"), ("TAIT-INFRA93SERIES-MIB", "paAlarmInvalidCalibration"), ("TAIT-INFRA93SERIES-MIB", "paAlarmInvalidFirmware"), ("TAIT-INFRA93SERIES-MIB", "paAlarmShutdownImminent"), ("TAIT-INFRA93SERIES-MIB", "paAlarmReversePowerHigh"), ("TAIT-INFRA93SERIES-MIB", "paAlarmCurrentImbalance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    paAlarmsGroup = paAlarmsGroup.setStatus('current')
pmuAlarmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 11)).setObjects(("TAIT-INFRA93SERIES-MIB", "pmuAlarmMainsFailure"), ("TAIT-INFRA93SERIES-MIB", "pmuAlarmBatteryVoltageLow"), ("TAIT-INFRA93SERIES-MIB", "pmuAlarmBatteryVoltageHigh"), ("TAIT-INFRA93SERIES-MIB", "pmuAlarmBatteryProtect"), ("TAIT-INFRA93SERIES-MIB", "pmuAlarmInvalidFirmware"), ("TAIT-INFRA93SERIES-MIB", "pmuAlarmVoltageOutHigh"), ("TAIT-INFRA93SERIES-MIB", "pmuAlarmNoPMUDetected"), ("TAIT-INFRA93SERIES-MIB", "pmuAlarmVoltageOutLow"), ("TAIT-INFRA93SERIES-MIB", "pmuAlarmShutdownImminent"), ("TAIT-INFRA93SERIES-MIB", "pmuAlarmCurrentOutHigh"), ("TAIT-INFRA93SERIES-MIB", "pmuAlarmSelfTestFailure"), ("TAIT-INFRA93SERIES-MIB", "pmuAlarmTemperatureHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pmuAlarmsGroup = pmuAlarmsGroup.setStatus('current')
reciterAlarmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 12)).setObjects(("TAIT-INFRA93SERIES-MIB", "rctAlarmRxSynthOutOfLock"), ("TAIT-INFRA93SERIES-MIB", "rctAlarmInvalidChannelSelected"), ("TAIT-INFRA93SERIES-MIB", "rctAlarmRxCalibrationInvalid"), ("TAIT-INFRA93SERIES-MIB", "rctAlarmOverTemperature"), ("TAIT-INFRA93SERIES-MIB", "rctAlarmInvalidConfiguration"), ("TAIT-INFRA93SERIES-MIB", "rctAlarm25MHzSynthOutOfLock"), ("TAIT-INFRA93SERIES-MIB", "rctAlarmTxCalibrationInvalid"), ("TAIT-INFRA93SERIES-MIB", "rctAlarmTxFSynthOutOfLock"), ("TAIT-INFRA93SERIES-MIB", "rctAlarm6144MHzSynthOutOfLock"), ("TAIT-INFRA93SERIES-MIB", "rctAlarmSimulcastSynch"), ("TAIT-INFRA93SERIES-MIB", "rctAlarmReceiverSynch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    reciterAlarmsGroup = reciterAlarmsGroup.setStatus('current')
infoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 13)).setObjects(("TAIT-INFRA93SERIES-MIB", "infoTransmitterStatus"), ("TAIT-INFRA93SERIES-MIB", "infoMPTFallbackNodeStatus"), ("TAIT-INFRA93SERIES-MIB", "infoDMRFallbackNodeStatus"), ("TAIT-INFRA93SERIES-MIB", "rctInfoProductCode"), ("TAIT-INFRA93SERIES-MIB", "rctInfoSerialNumber"), ("TAIT-INFRA93SERIES-MIB", "rctInfoHardwareVersion"), ("TAIT-INFRA93SERIES-MIB", "rctInfoFirmwareVersion"), ("TAIT-INFRA93SERIES-MIB", "paInfoProductCode"), ("TAIT-INFRA93SERIES-MIB", "paInfoSerialNumber"), ("TAIT-INFRA93SERIES-MIB", "paInfoHardwareVersion"), ("TAIT-INFRA93SERIES-MIB", "paInfoFirmwareVersion"), ("TAIT-INFRA93SERIES-MIB", "fpInfoProductCode"), ("TAIT-INFRA93SERIES-MIB", "fpInfoSerialNumber"), ("TAIT-INFRA93SERIES-MIB", "fpInfoHardwareVersion"), ("TAIT-INFRA93SERIES-MIB", "fpInfoFirmwareVersion"), ("TAIT-INFRA93SERIES-MIB", "licenceDmrFull"), ("TAIT-INFRA93SERIES-MIB", "licenceDmrExpress"), ("TAIT-INFRA93SERIES-MIB", "licenceDmrAccess"), ("TAIT-INFRA93SERIES-MIB", "licenceDmrConventional"), ("TAIT-INFRA93SERIES-MIB", "licenceAnalogConventional"), ("TAIT-INFRA93SERIES-MIB", "licenceDmrExpress20"), ("TAIT-INFRA93SERIES-MIB", "licenceDmrCentralVoter"), ("TAIT-INFRA93SERIES-MIB", "licenceDmrNetworkSatellite"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    infoGroup = infoGroup.setStatus('current')
rctReceiveQualityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 14)).setObjects(("TAIT-INFRA93SERIES-MIB", "rctRfRcvInterference"), ("TAIT-INFRA93SERIES-MIB", "rctRfInterferenceCounter"), ("TAIT-INFRA93SERIES-MIB", "rctRfInterferenceEvents"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rctReceiveQualityGroup = rctReceiveQualityGroup.setStatus('current')
rctReceiverGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 15)).setObjects(("TAIT-INFRA93SERIES-MIB", "rctRfReceiverRSSI"), ("TAIT-INFRA93SERIES-MIB", "rctRfReceiverLC1RSSI"), ("TAIT-INFRA93SERIES-MIB", "rctRfReceiverLC2RSSI"), ("TAIT-INFRA93SERIES-MIB", "rctRfReceiverLC1RxGateState"), ("TAIT-INFRA93SERIES-MIB", "rctRfReceiverLC2RxGateState"), ("TAIT-INFRA93SERIES-MIB", "rctRfReceiverSelectedDecodeCTCSS"), ("TAIT-INFRA93SERIES-MIB", "rctRfReceiverSelectedDecodeSubAudibleType"), ("TAIT-INFRA93SERIES-MIB", "rctRfReceiverSelectedSINADGatingLevel"), ("TAIT-INFRA93SERIES-MIB", "rctRfReceiverSelectedDecodeDCS"), ("TAIT-INFRA93SERIES-MIB", "rctRfReceiverSelectedFrequencyResponse"), ("TAIT-INFRA93SERIES-MIB", "rctRfReceiverAnalogGateState"), ("TAIT-INFRA93SERIES-MIB", "rctRfReceiverIsDisabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rctReceiverGroup = rctReceiverGroup.setStatus('current')
rctTemperatureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 16)).setObjects(("TAIT-INFRA93SERIES-MIB", "rctTemperatureBoard"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rctTemperatureGroup = rctTemperatureGroup.setStatus('current')
pmuStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 17)).setObjects(("TAIT-INFRA93SERIES-MIB", "pmuStateMainsInState"), ("TAIT-INFRA93SERIES-MIB", "pmuStateBatteryInState"), ("TAIT-INFRA93SERIES-MIB", "pmuStateBatteryInVoltage"), ("TAIT-INFRA93SERIES-MIB", "pmuStateOutCurrent"), ("TAIT-INFRA93SERIES-MIB", "pmuStateOutVoltage"), ("TAIT-INFRA93SERIES-MIB", "pmuStateOutStatus"), ("TAIT-INFRA93SERIES-MIB", "pmuStateAuxOutState"), ("TAIT-INFRA93SERIES-MIB", "pmuStateBusConnect"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pmuStateGroup = pmuStateGroup.setStatus('current')
nwNtpInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 18)).setObjects(("TAIT-INFRA93SERIES-MIB", "nwConfiguredNtpServerAddress"), ("TAIT-INFRA93SERIES-MIB", "nwConfiguredNtpBackupServerAddress1"), ("TAIT-INFRA93SERIES-MIB", "nwConfiguredNtpBackupServerAddress2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nwNtpInterfaceGroup = nwNtpInterfaceGroup.setStatus('current')
rctTransmitterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 19)).setObjects(("TAIT-INFRA93SERIES-MIB", "rctRfTxSelectedEncodeCTCSS"), ("TAIT-INFRA93SERIES-MIB", "rctRfTxSelectedEncodeSubAudibleType"), ("TAIT-INFRA93SERIES-MIB", "rctRfTxSelectFrequencyResponse"), ("TAIT-INFRA93SERIES-MIB", "rctRfTxSelectedEncodeDCS"), ("TAIT-INFRA93SERIES-MIB", "rctRfTxSelectedEncodeSubAudibleDeviation"), ("TAIT-INFRA93SERIES-MIB", "rctRfTxRfRepeatState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rctTransmitterGroup = rctTransmitterGroup.setStatus('current')
nwChannelGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 20)).setObjects(("TAIT-INFRA93SERIES-MIB", "nwChannelGroupStatus"), ("TAIT-INFRA93SERIES-MIB", "nwChannelGroupLocalBufferLevel"), ("TAIT-INFRA93SERIES-MIB", "nwChannelGroupEmptiestBufferLevel"), ("TAIT-INFRA93SERIES-MIB", "nwChannelGroupMarshallingType"), ("TAIT-INFRA93SERIES-MIB", "nwChannelGroupMarshallingDuration"), ("TAIT-INFRA93SERIES-MIB", "nwChannelGroupReceiverSynchStatus"), ("TAIT-INFRA93SERIES-MIB", "nwChannelGroupTransmitterSynchStatus"), ("TAIT-INFRA93SERIES-MIB", "nwChannelGroupLateStreamsCount"), ("TAIT-INFRA93SERIES-MIB", "nwChannelGroupOverflowCount"), ("TAIT-INFRA93SERIES-MIB", "nwChannelGroupUnderflowCount"), ("TAIT-INFRA93SERIES-MIB", "nwChannelGroupLostPacketsCount"), ("TAIT-INFRA93SERIES-MIB", "nwChannelGroupJitter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nwChannelGroupGroup = nwChannelGroupGroup.setStatus('current')
nwPortsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 21)).setObjects(("TAIT-INFRA93SERIES-MIB", "nwSvpPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nwPortsGroup = nwPortsGroup.setStatus('current')
mibComplianceList = ModuleCompliance((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 2, 1)).setObjects(("TAIT-INFRA93SERIES-MIB", "rctTransmitterGroup"), ("TAIT-INFRA93SERIES-MIB", "rctReceiverGroup"), ("TAIT-INFRA93SERIES-MIB", "rctReceiveQualityGroup"), ("TAIT-INFRA93SERIES-MIB", "infoGroup"), ("TAIT-INFRA93SERIES-MIB", "healthGroup"), ("TAIT-INFRA93SERIES-MIB", "alarmSummaryGroup"), ("TAIT-INFRA93SERIES-MIB", "rctSelectedChannelGroup"), ("TAIT-INFRA93SERIES-MIB", "paTxOutputGroup"), ("TAIT-INFRA93SERIES-MIB", "linkInfoGroup"), ("TAIT-INFRA93SERIES-MIB", "customAlarmsGroup"), ("TAIT-INFRA93SERIES-MIB", "systemAlarmsGroup"), ("TAIT-INFRA93SERIES-MIB", "fpAlarmsGroup"), ("TAIT-INFRA93SERIES-MIB", "paAlarmsGroup"), ("TAIT-INFRA93SERIES-MIB", "reciterAlarmsGroup"), ("TAIT-INFRA93SERIES-MIB", "rctTemperatureGroup"), ("TAIT-INFRA93SERIES-MIB", "nwNtpInterfaceGroup"), ("TAIT-INFRA93SERIES-MIB", "nwChannelGroupGroup"), ("TAIT-INFRA93SERIES-MIB", "nwPortsGroup"), ("TAIT-INFRA93SERIES-MIB", "linearTransmissionCapability"), ("TAIT-INFRA93SERIES-MIB", "pmuAlarmsGroup"), ("TAIT-INFRA93SERIES-MIB", "pmuInfoGroup"), ("TAIT-INFRA93SERIES-MIB", "pmuStateGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mibComplianceList = mibComplianceList.setStatus('current')
rctSystemInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 22)).setObjects(("TAIT-INFRA93SERIES-MIB", "rctSiConfiguredBalancedLineInLevel"), ("TAIT-INFRA93SERIES-MIB", "rctSiConfiguredBalancedLineOutLevel"), ("TAIT-INFRA93SERIES-MIB", "rctSiTxKey"), ("TAIT-INFRA93SERIES-MIB", "rctSiRxGate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rctSystemInterfaceGroup = rctSystemInterfaceGroup.setStatus('current')
linearTransmissionCapability = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 23)).setObjects(("TAIT-INFRA93SERIES-MIB", "rctAlarmTxRSynthOutOfLock"), ("TAIT-INFRA93SERIES-MIB", "systemAlarmCartesianLoopUnstable"), ("TAIT-INFRA93SERIES-MIB", "systemAlarmTxRCableAbsent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    linearTransmissionCapability = linearTransmissionCapability.setStatus('current')
pmuInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 24)).setObjects(("TAIT-INFRA93SERIES-MIB", "pmuInfoProductCode"), ("TAIT-INFRA93SERIES-MIB", "pmuInfoSerialNumber"), ("TAIT-INFRA93SERIES-MIB", "pmuInfoHardwareVersion"), ("TAIT-INFRA93SERIES-MIB", "pmuInfoFirmwareVersion"), ("TAIT-INFRA93SERIES-MIB", "pmuInfoCalibrationUpdateDate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pmuInfoGroup = pmuInfoGroup.setStatus('current')
deprecatedOidGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 2, 2, 2, 5, 1, 27)).setObjects(("TAIT-INFRA93SERIES-MIB", "infoStandaloneNodeStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    deprecatedOidGroup = deprecatedOidGroup.setStatus('deprecated')
mibBuilder.exportSymbols("TAIT-INFRA93SERIES-MIB", rctRfTxSelectFrequencyResponse=rctRfTxSelectFrequencyResponse, linkHealthNetworkPacketLostCount=linkHealthNetworkPacketLostCount, linkHealthNetworkJitterLastOver=linkHealthNetworkJitterLastOver, customAlarm5=customAlarm5, rctSelectedChannelGroup=rctSelectedChannelGroup, reciterAlarmsGroup=reciterAlarmsGroup, paTemperature=paTemperature, paAlarmVSWRFault=paAlarmVSWRFault, systemAlarmNTPSynchronisation=systemAlarmNTPSynchronisation, rctSelectedChannelNumber=rctSelectedChannelNumber, rctAlarmInvalidChannelSelected=rctAlarmInvalidChannelSelected, infoDMRFallbackNodeStatus=infoDMRFallbackNodeStatus, systemAlarms=systemAlarms, rctRfTransmitter=rctRfTransmitter, paTxOutputVSWR=paTxOutputVSWR, mibCompliance=mibCompliance, fpInfoHardwareVersion=fpInfoHardwareVersion, alarmSummaryMinor=alarmSummaryMinor, pmuAlarmShutdownImminent=pmuAlarmShutdownImminent, rctRfReceiverSelectedDecodeCTCSS=rctRfReceiverSelectedDecodeCTCSS, customAlarm9=customAlarm9, nwChannelGroupLostPacketsCount=nwChannelGroupLostPacketsCount, rctSiConfiguredBalancedLineInLevel=rctSiConfiguredBalancedLineInLevel, rctAlarmTxCalibrationInvalid=rctAlarmTxCalibrationInvalid, fpInfoProductCode=fpInfoProductCode, rctRfReceiverSelectedDecodeSubAudibleType=rctRfReceiverSelectedDecodeSubAudibleType, rctInfo=rctInfo, paInfoHardwareVersion=paInfoHardwareVersion, rctTemperatureGroup=rctTemperatureGroup, pmuInfoFirmwareVersion=pmuInfoFirmwareVersion, licenceDmrExpress20=licenceDmrExpress20, paAlarmDriverTemperatureHigh=paAlarmDriverTemperatureHigh, nwChannelGroup=nwChannelGroup, paInfoFirmwareVersion=paInfoFirmwareVersion, paGeneral=paGeneral, infoMPTFallbackNodeStatus=infoMPTFallbackNodeStatus, linkInfoCtrlProtocolStatus=linkInfoCtrlProtocolStatus, licenceDmrConventional=licenceDmrConventional, healthRunMode=healthRunMode, productSummary=productSummary, rctRfReceiverRSSI=rctRfReceiverRSSI, nwPortsGroup=nwPortsGroup, fpInfo=fpInfo, rctAlarmRxCalibrationInvalid=rctAlarmRxCalibrationInvalid, healthSecureShellRunning=healthSecureShellRunning, rctRfTxSelectedEncodeSubAudibleDeviation=rctRfTxSelectedEncodeSubAudibleDeviation, rctSelectedChannelRxFreq=rctSelectedChannelRxFreq, alarmSummaryPowerManagementUnit=alarmSummaryPowerManagementUnit, rctRfReceiverAnalogGateState=rctRfReceiverAnalogGateState, paAlarmShutdownImminent=paAlarmShutdownImminent, paTxOutputGroup=paTxOutputGroup, pmuSummary=pmuSummary, nwConfiguredNtpBackupServerAddress1=nwConfiguredNtpBackupServerAddress1, fpInfoFirmwareVersion=fpInfoFirmwareVersion, customAlarm1=customAlarm1, nwChannelGroupReceiverSynchStatus=nwChannelGroupReceiverSynchStatus, networkLinksSummary=networkLinksSummary, rctSystemInterfaceGroup=rctSystemInterfaceGroup, linkInfoNetworkPacketCount=linkInfoNetworkPacketCount, fpAlarmsGroup=fpAlarmsGroup, nwChannelGroupOverflowCount=nwChannelGroupOverflowCount, pmuSubmodules=pmuSubmodules, healthNetworkConnLogChan1State=healthNetworkConnLogChan1State, rctInfoFirmwareVersion=rctInfoFirmwareVersion, systemAlarmDuplicateNodePriority=systemAlarmDuplicateNodePriority, paInfoProductCode=paInfoProductCode, rctAlarmInvalidConfiguration=rctAlarmInvalidConfiguration, linkHealthNetworkJitterCount=linkHealthNetworkJitterCount, licenceDmrNetworkSatellite=licenceDmrNetworkSatellite, pmuInfoProductCode=pmuInfoProductCode, paAlarmInvalidFirmware=paAlarmInvalidFirmware, systemAlarmCartesianLoopUnstable=systemAlarmCartesianLoopUnstable, customAlarm7=customAlarm7, rctInfoSerialNumber=rctInfoSerialNumber, rctAlarmReceiverSynch=rctAlarmReceiverSynch, fpAlarmInvalidFirmware=fpAlarmInvalidFirmware, infra93MibMonitored=infra93MibMonitored, pmuStateOutCurrent=pmuStateOutCurrent, paAlarms=paAlarms, rctRfTxSelectedEncodeDCS=rctRfTxSelectedEncodeDCS, networkInterfaces=networkInterfaces, pmuInfoSerialNumber=pmuInfoSerialNumber, alarmSummaryMajor=alarmSummaryMajor, paSummary=paSummary, rctRfTxRfRepeatState=rctRfTxRfRepeatState, paAlarmCurrentImbalance=paAlarmCurrentImbalance, systemAlarmsGroup=systemAlarmsGroup, pmuStateOutVoltage=pmuStateOutVoltage, rctRfRcvInterference=rctRfRcvInterference, pmuAlarms=pmuAlarms, rctSiTxKey=rctSiTxKey, pmuStateOutStatus=pmuStateOutStatus, paAlarmNoPADetected=paAlarmNoPADetected, alarmSummaryCustomAlarms=alarmSummaryCustomAlarms, rctSelectedChannelTxFreq=rctSelectedChannelTxFreq, pmuAlarmTemperatureHigh=pmuAlarmTemperatureHigh, pmuAlarmBatteryProtect=pmuAlarmBatteryProtect, pmuStateGroup=pmuStateGroup, paAlarmReversePowerHigh=paAlarmReversePowerHigh, fpAlarmFan3=fpAlarmFan3, pmuAlarmNoPMUDetected=pmuAlarmNoPMUDetected, alarmSummaryReciter=alarmSummaryReciter, paAlarmFinal2CurrentHigh=paAlarmFinal2CurrentHigh, nwChannelGroupJitter=nwChannelGroupJitter, alarmSummaryPowerAmplifier=alarmSummaryPowerAmplifier, rctSelectedChannelSystemType=rctSelectedChannelSystemType, paHealth=paHealth, health=health, nwChannelGroupLateStreamsCount=nwChannelGroupLateStreamsCount, systemAlarmExternalRefAbsent=systemAlarmExternalRefAbsent, linkInfo=linkInfo, rctRfReceiverLC1RxGateState=rctRfReceiverLC1RxGateState, paAlarmDriverCurrentHigh=paAlarmDriverCurrentHigh, alarmSummaryFrontPanel=alarmSummaryFrontPanel, rctRfReceiver=rctRfReceiver, fpInfoSerialNumber=fpInfoSerialNumber, rctSiRxGate=rctSiRxGate, nwChannelGroupLocalBufferLevel=nwChannelGroupLocalBufferLevel, paAlarmSupplyVoltageLow=paAlarmSupplyVoltageLow, pmuInfoCalibrationUpdateDate=pmuInfoCalibrationUpdateDate, paAlarmsGroup=paAlarmsGroup, rctReceiverGroup=rctReceiverGroup, reciter=reciter, linearTransmissionCapability=linearTransmissionCapability, rctRfInterferenceEvents=rctRfInterferenceEvents, pmuStateMainsInState=pmuStateMainsInState, pmuAlarmSelfTestFailure=pmuAlarmSelfTestFailure, fpAlarmFan1=fpAlarmFan1, productInfo=productInfo, systemAlarmQoSLostPackets=systemAlarmQoSLostPackets, customAlarm2=customAlarm2, healthNetworkConnLogChan2State=healthNetworkConnLogChan2State, linkHealth=linkHealth, linkInfoDMRNodePriority=linkInfoDMRNodePriority, pmuAlarmVoltageOutHigh=pmuAlarmVoltageOutHigh, paAlarmFinal1TemperatureHigh=paAlarmFinal1TemperatureHigh, customAlarm10=customAlarm10, paInfoSerialNumber=paInfoSerialNumber, nwChannelGroupMarshallingDuration=nwChannelGroupMarshallingDuration, monitored=monitored, infoStandaloneNodeStatus=infoStandaloneNodeStatus, systemAlarmTxRCableAbsent=systemAlarmTxRCableAbsent, customAlarm3=customAlarm3, rctAlarmSimulcastSynch=rctAlarmSimulcastSynch, customAlarm12=customAlarm12, nwConfiguredNtpBackupServerAddress2=nwConfiguredNtpBackupServerAddress2, systemAlarmAmbientTempLow=systemAlarmAmbientTempLow, nwNtpInterfaceGroup=nwNtpInterfaceGroup, rctTemperature=rctTemperature, pmuInfo=pmuInfo, rctRfTxSelectedEncodeSubAudibleType=rctRfTxSelectedEncodeSubAudibleType, customAlarm6=customAlarm6, customAlarm4=customAlarm4, powerAmplifier=powerAmplifier, networkLinks=networkLinks, reciterAlarms=reciterAlarms, mibComplianceList=mibComplianceList, licenceDmrFull=licenceDmrFull, fpHealth=fpHealth, rctSelectedChannelProfileName=rctSelectedChannelProfileName, infoTransmitterStatus=infoTransmitterStatus, licenceDmrAccess=licenceDmrAccess, rctSelectedChannel=rctSelectedChannel, linkInfoMPTCtrlProtocolStatus=linkInfoMPTCtrlProtocolStatus, linkInfoDMRNodeIPAddress=linkInfoDMRNodeIPAddress, alarmSummarySystem=alarmSummarySystem, pmuAlarmsGroup=pmuAlarmsGroup, pmuStateBatteryInState=pmuStateBatteryInState, paInfo=paInfo, fpAlarmNoFPDetected=fpAlarmNoFPDetected, rctSelectedChannelName=rctSelectedChannelName, pmuInfoGroup=pmuInfoGroup, rctRfReceiverIsDisabled=rctRfReceiverIsDisabled, nwChannelGroupUnderflowCount=nwChannelGroupUnderflowCount, pmuHealth=pmuHealth, nwChannelGroupEmptiestBufferLevel=nwChannelGroupEmptiestBufferLevel, rctRfReceiveQuality=rctRfReceiveQuality, paAlarmPowerFoldback=paAlarmPowerFoldback, nwChannelGroupTransmitterSynchStatus=nwChannelGroupTransmitterSynchStatus, alarms=alarms, mibConformance=mibConformance, customAlarmsGroup=customAlarmsGroup, pmuAlarmVoltageOutLow=pmuAlarmVoltageOutLow, deprecatedOidGroup=deprecatedOidGroup, alarmSummaryBaseStation=alarmSummaryBaseStation, nwSvpPort=nwSvpPort, rctReceiveQualityGroup=rctReceiveQualityGroup, nwConfiguredNtpServerAddress=nwConfiguredNtpServerAddress, customAlarm8=customAlarm8, paTxOutput=paTxOutput, healthGroup=healthGroup, frontPanel=frontPanel, alarmSummaryGroup=alarmSummaryGroup, linkInfoMPTNodeIPAddress=linkInfoMPTNodeIPAddress, systemAlarm1PPSAbsent=systemAlarm1PPSAbsent, licenceDmrExpress=licenceDmrExpress, mibGroups=mibGroups, rctSiConfiguredBalancedLineOutLevel=rctSiConfiguredBalancedLineOutLevel, paAlarmFinal2TemperatureHigh=paAlarmFinal2TemperatureHigh, customAlarms=customAlarms, rctInfoHardwareVersion=rctInfoHardwareVersion, systemAlarmFallbackControlled=systemAlarmFallbackControlled, linkHealthSequenceErrorsCount=linkHealthSequenceErrorsCount, rctRfReceiverLC2RxGateState=rctRfReceiverLC2RxGateState, pmuAlarmMainsFailure=pmuAlarmMainsFailure, rctTransmitterGroup=rctTransmitterGroup, systemAlarmQoSJitter=systemAlarmQoSJitter, nwChannelGroupStatus=nwChannelGroupStatus, nwChannelGroupMarshallingType=nwChannelGroupMarshallingType, paAlarmInvalidCalibration=paAlarmInvalidCalibration, PYSNMP_MODULE_ID=infra93MibMonitored, rctSelectedChannelGroupName=rctSelectedChannelGroupName, rctSummary=rctSummary, info=info, systemAlarmAmbientTempHigh=systemAlarmAmbientTempHigh, infra93MIB=infra93MIB, linkInfoGroup=linkInfoGroup, systemAlarmQoSTransmitBuffer=systemAlarmQoSTransmitBuffer, pmuState=pmuState, licenceAnalogConventional=licenceAnalogConventional, rctRfReceiverSelectedSINADGatingLevel=rctRfReceiverSelectedSINADGatingLevel, pmuInfoHardwareVersion=pmuInfoHardwareVersion, rctHealth=rctHealth, rctTemperatureBoard=rctTemperatureBoard, pmuAlarmBatteryVoltageHigh=pmuAlarmBatteryVoltageHigh, pmuStateBusConnect=pmuStateBusConnect, modules=modules, paAlarmSupplyVoltageHigh=paAlarmSupplyVoltageHigh, rctRfTxSelectedEncodeCTCSS=rctRfTxSelectedEncodeCTCSS, fpSummary=fpSummary, linkInfoMPTNodePriority=linkInfoMPTNodePriority, pmuAlarmInvalidFirmware=pmuAlarmInvalidFirmware, pmuAlarmBatteryVoltageLow=pmuAlarmBatteryVoltageLow, rctRfReceiverSelectedDecodeDCS=rctRfReceiverSelectedDecodeDCS, mibObjects=mibObjects, productEnabledFeatures=productEnabledFeatures, nwPorts=nwPorts, rctRfInterferenceCounter=rctRfInterferenceCounter, rctRfReceiverSelectedFrequencyResponse=rctRfReceiverSelectedFrequencyResponse, rctSystemInterface=rctSystemInterface, nwNtpInterface=nwNtpInterface, infoGroup=infoGroup, rctAlarmTxFSynthOutOfLock=rctAlarmTxFSynthOutOfLock, nwChannelGroupGroup=nwChannelGroupGroup, rctInfoProductCode=rctInfoProductCode, rctRfReceiverLC1RSSI=rctRfReceiverLC1RSSI, paAlarmFinal1CurrentHigh=paAlarmFinal1CurrentHigh, licenceDmrCentralVoter=licenceDmrCentralVoter, paAlarmForwardPowerLow=paAlarmForwardPowerLow, rctSelectedChannelSigProfileName=rctSelectedChannelSigProfileName, pmuAlarmCurrentOutHigh=pmuAlarmCurrentOutHigh, pmuStateAuxOutState=pmuStateAuxOutState, pmuStateBatteryInVoltage=pmuStateBatteryInVoltage, rctRfReceiverLC2RSSI=rctRfReceiverLC2RSSI)
mibBuilder.exportSymbols("TAIT-INFRA93SERIES-MIB", powerManagementUnit=powerManagementUnit, customAlarm11=customAlarm11, rctAlarm25MHzSynthOutOfLock=rctAlarm25MHzSynthOutOfLock, paTxOutputForwardPower=paTxOutputForwardPower, rctSelectedChannelColourCode=rctSelectedChannelColourCode, rctAlarmOverTemperature=rctAlarmOverTemperature, rctAlarmTxRSynthOutOfLock=rctAlarmTxRSynthOutOfLock, fpAlarmFan2=fpAlarmFan2, rctAlarmRxSynthOutOfLock=rctAlarmRxSynthOutOfLock, rctAlarm6144MHzSynthOutOfLock=rctAlarm6144MHzSynthOutOfLock, rctSelectedChannelTransmitPower=rctSelectedChannelTransmitPower, fpAlarms=fpAlarms, alarmSummary=alarmSummary)
