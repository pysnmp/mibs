#
# PySNMP MIB module SL-SFP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/packetlight/SL-SFP-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 11:43:55 2024
# On host fv-az842-370 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
Float64TC, Float128TC, Float32TC = mibBuilder.importSymbols("FLOAT-TC-MIB", "Float64TC", "Float128TC", "Float32TC")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
PerfCurrentCount, PerfTotalCount, PerfIntervalCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfCurrentCount", "PerfTotalCount", "PerfIntervalCount")
CleiCode, = mibBuilder.importSymbols("SL-ENTITY-MIB", "CleiCode")
sitelight, = mibBuilder.importSymbols("SL-NE-MIB", "sitelight")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, Bits, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, IpAddress, MibIdentifier, Counter32, Counter64, iso, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "IpAddress", "MibIdentifier", "Counter32", "Counter64", "iso", "TimeTicks", "ObjectIdentity")
TimeStamp, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "TruthValue", "DisplayString")
slSfp = ModuleIdentity((1, 3, 6, 1, 4, 1, 4515, 1, 10))
if mibBuilder.loadTexts: slSfp.setLastUpdated('200501250000Z')
if mibBuilder.loadTexts: slSfp.setOrganization('PacketLight Networks Ltd.')
sfpConf = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1))
sfpDiag = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2))
sfpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 10, 3))
sfpTune = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 10, 4))
sfpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1), )
if mibBuilder.loadTexts: sfpConfigTable.setStatus('current')
sfpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1), ).setIndexNames((0, "SL-SFP-MIB", "sfpConfigInterface"))
if mibBuilder.loadTexts: sfpConfigEntry.setStatus('current')
sfpConfigInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigInterface.setStatus('current')
sfpConfigXcvrId = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 6, 11, 12, 13, 14, 15, 16, 17, 20))).clone(namedValues=NamedValues(("unknone", 0), ("gbic", 1), ("module", 2), ("sfp1310", 3), ("xfp", 6), ("sfpDwdm", 11), ("qsfp", 12), ("qsfpPlus", 13), ("cfp", 14), ("cxp", 15), ("coherent", 16), ("qsfp28", 17), ("cfp2", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXcvrId.setStatus('current')
sfpConfig1310ExtXcvrId = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("modDef0", 0), ("modDef1", 1), ("modDef2", 2), ("modDef3", 3), ("modDef4", 4), ("modDef5", 5), ("modDef6", 6), ("modDef7", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfig1310ExtXcvrId.setStatus('current')
sfpConfigWdmExtXcvrId = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigWdmExtXcvrId.setStatus('current')
sfpConfigConnectorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33))).clone(namedValues=NamedValues(("conUnknown", 0), ("conSc", 1), ("conFcCopper1", 2), ("conFcCopper2", 3), ("conBncTnc", 4), ("conFcCoaxial", 5), ("conFiberJack", 6), ("conLc", 7), ("conMtRj", 8), ("conMu", 9), ("comSg", 10), ("conOpticalPigtail", 11), ("conHssdc2", 32), ("conCopperPigtail", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigConnectorCode.setStatus('current')
sfpConfigInfibandCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigInfibandCompliance.setStatus('current')
sfpConfigEsconCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigEsconCompliance.setStatus('current')
sfpConfigSonetCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigSonetCompliance.setStatus('current')
sfpConfigGbeCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigGbeCompliance.setStatus('current')
sfpConfigFcCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigFcCompliance.setStatus('current')
sfpConfigEncodingCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("encUnspecified", 0), ("enc8B10B", 1), ("enc4B5B", 2), ("encNrz", 3), ("encManchester", 4), ("encSonet", 5), ("enc64B66B", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigEncodingCode.setStatus('current')
sfpConfigNominalBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigNominalBitRate.setStatus('current')
sfpConfigLength9mKm = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigLength9mKm.setStatus('current')
sfpConfigLength9m100m = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigLength9m100m.setStatus('current')
sfpConfigLength50m10m = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigLength50m10m.setStatus('current')
sfpConfigLength62m10m = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigLength62m10m.setStatus('current')
sfpConfigLengthCopper1m = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigLengthCopper1m.setStatus('current')
sfpConfigMaxTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigMaxTemp.setStatus('current')
sfpConfigMinTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigMinTemp.setStatus('current')
sfpConfigMaxSupplyCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigMaxSupplyCurrent.setStatus('current')
sfpConfigChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigChannelSpacing.setStatus('current')
sfpConfigVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 22), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigVendorName.setStatus('current')
sfpConfigOptionalWdm = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigOptionalWdm.setStatus('current')
sfpConfigVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigVendorOUI.setStatus('current')
sfpConfigVendorPN = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 25), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigVendorPN.setStatus('current')
sfpConfigVendorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 26), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigVendorRev.setStatus('current')
sfpConfigWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigWaveLength.setStatus('current')
sfpConfigExtendedOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigExtendedOptions.setStatus('current')
sfpConfigMaxBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigMaxBitRate.setStatus('current')
sfpConfigMinBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigMinBitRate.setStatus('current')
sfpConfigVendorSN = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 31), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigVendorSN.setStatus('current')
sfpConfigDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 32), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigDateCode.setStatus('current')
sfpConfigDiagnosticMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigDiagnosticMonitoring.setStatus('current')
sfpConfigEnhanceOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigEnhanceOptions.setStatus('current')
sfpConfig8472Compliance = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noDiag", 0), ("rev93", 1), ("rev94", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfig8472Compliance.setStatus('current')
sfpConfigTunableWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigTunableWaveLength.setStatus('current')
sfpConfigVoaControl = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigVoaControl.setStatus('current')
sfpConfigVdtControl = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigVdtControl.setStatus('current')
sfpConfigPilotToneModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigPilotToneModulation.setStatus('current')
sfpConfigCleiCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCleiCode.setStatus('current')
sfpConfigXfpExtXcvrId = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpExtXcvrId.setStatus('current')
sfpConfigXfpEncodingCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpEncodingCode.setStatus('current')
sfpConfigXfpMinBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpMinBitRate.setStatus('current')
sfpConfigXfpMaxBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpMaxBitRate.setStatus('current')
sfpConfig10GSonetCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfig10GSonetCompliance.setStatus('current')
sfpConfig10GbeCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfig10GbeCompliance.setStatus('current')
sfpConfig10GFcCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfig10GFcCompliance.setStatus('current')
sfpConfigXfpDeviceTech = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpDeviceTech.setStatus('current')
sfpConfigXfpTuningSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpTuningSupported.setStatus('current')
sfpConfigXfpDesiredChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigXfpDesiredChannel.setStatus('current')
sfpConfigXfpDesiredWl = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigXfpDesiredWl.setStatus('current')
sfpConfigXfpWlError = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpWlError.setStatus('current')
sfpConfigXfpDesiredFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigXfpDesiredFreq.setStatus('current')
sfpConfigXfpFreqError = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpFreqError.setStatus('current')
sfpConfigXfpDitherSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 55), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpDitherSupported.setStatus('current')
sfpConfigXfpDitherAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigXfpDitherAdmin.setStatus('current')
sfpConfigXfpCapFreqFirstThz = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpCapFreqFirstThz.setStatus('current')
sfpConfigXfpCapFreqFirst10Ghz = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpCapFreqFirst10Ghz.setStatus('current')
sfpConfigXfpCapFreqLastThz = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpCapFreqLastThz.setStatus('current')
sfpConfigXfpCapFreqLast10Ghz = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpCapFreqLast10Ghz.setStatus('current')
sfpConfigXfpCapMaxSpacing10Ghz = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpCapMaxSpacing10Ghz.setStatus('current')
sfpConfigXfpCalibrationSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 62), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpCalibrationSupported.setStatus('current')
sfpConfigXfpCalibrationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 63), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigXfpCalibrationEnabled.setStatus('current')
sfpConfigCfpExtId = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpExtId.setStatus('current')
sfpConfigCfpConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpConnectorType.setStatus('current')
sfpConfigCfpEthernetCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpEthernetCode.setStatus('current')
sfpConfigCfpFcCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpFcCode.setStatus('current')
sfpConfigCfpCopperCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpCopperCode.setStatus('current')
sfpConfigCfpSonetCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpSonetCode.setStatus('current')
sfpConfigCfpOtnCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpOtnCode.setStatus('current')
sfpConfigCfpSupportedRates = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpSupportedRates.setStatus('current')
sfpConfigCfpSupportedLanes = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpSupportedLanes.setStatus('current')
sfpConfigCfpMediaProperties = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpMediaProperties.setStatus('current')
sfpConfigCfpMaxNetworkLaneRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpMaxNetworkLaneRate.setStatus('current')
sfpConfigCfpMaxHostLaneRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpMaxHostLaneRate.setStatus('current')
sfpConfigCfpMaxSmFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpMaxSmFiberLength.setStatus('current')
sfpConfigCfpMaxMmFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpMaxMmFiberLength.setStatus('current')
sfpConfigCfpMaxCopperCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpMaxCopperCableLength.setStatus('current')
sfpConfigCfpMinWavelenPerActive = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpMinWavelenPerActive.setStatus('current')
sfpConfigCfpMaxWavelenPerActive = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpMaxWavelenPerActive.setStatus('current')
sfpConfigCfpMaxLenOpticalWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpMaxLenOpticalWidth.setStatus('current')
sfpConfigCfpSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 88), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigCfpSpacing.setStatus('current')
sfpConfigQsfppEthernetCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigQsfppEthernetCode.setStatus('current')
sfpConfigQsfppSonetCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 101), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigQsfppSonetCode.setStatus('current')
sfpConfigCxpExtId = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 110), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigCxpExtId.setStatus('current')
sfpConfigCxpConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 111), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigCxpConnectorType.setStatus('current')
sfpConfigCxpMaxSupportedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 112), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigCxpMaxSupportedRate.setStatus('current')
sfpConfigCxpNominalWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 113), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigCxpNominalWavelength.setStatus('current')
sfpConfigCxpDeviceTech = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 114), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigCxpDeviceTech.setStatus('current')
sfpConfigCohRxDesiredChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 115), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigCohRxDesiredChannel.setStatus('current')
sfpConfigCohRxDesiredWl = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 116), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigCohRxDesiredWl.setStatus('current')
sfpConfigCohRxDesiredFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 117), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigCohRxDesiredFreq.setStatus('current')
sfpConfigCohCurrentCD = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 118), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCohCurrentCD.setStatus('current')
sfpConfigCohCurrentOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 119), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCohCurrentOSNR.setStatus('current')
sfpConfigCohAverageOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 120), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCohAverageOSNR.setStatus('current')
sfpConfigCohMaxCD = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 121), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCohMaxCD.setStatus('current')
sfpConfigNyquist = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 122), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigNyquist.setStatus('current')
sfpDiagTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1), )
if mibBuilder.loadTexts: sfpDiagTable.setStatus('current')
sfpDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1), ).setIndexNames((0, "SL-SFP-MIB", "sfpDiagInterface"))
if mibBuilder.loadTexts: sfpDiagEntry.setStatus('current')
sfpDiagInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagInterface.setStatus('current')
sfpDiagHighTempAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighTempAlmThreshold.setStatus('current')
sfpDiagLowTempAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowTempAlmThreshold.setStatus('current')
sfpDiagHighTempWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighTempWrnThreshold.setStatus('current')
sfpDiagLowTempWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowTempWrnThreshold.setStatus('current')
sfpDiagHighVoltAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighVoltAlmThreshold.setStatus('current')
sfpDiagLowVoltAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowVoltAlmThreshold.setStatus('current')
sfpDiagHighVoltWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighVoltWrnThreshold.setStatus('current')
sfpDiagLowVoltWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowVoltWrnThreshold.setStatus('current')
sfpDiagHighTxBiasAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighTxBiasAlmThreshold.setStatus('current')
sfpDiagLowTxBiasAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowTxBiasAlmThreshold.setStatus('current')
sfpDiagHighTxBiasWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighTxBiasWrnThreshold.setStatus('current')
sfpDiagLowTxBiasWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowTxBiasWrnThreshold.setStatus('current')
sfpDiagHighTxPowerAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighTxPowerAlmThreshold.setStatus('current')
sfpDiagLowTxPowerAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowTxPowerAlmThreshold.setStatus('current')
sfpDiagHighTxPowerWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighTxPowerWrnThreshold.setStatus('current')
sfpDiagLowTxPowerWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowTxPowerWrnThreshold.setStatus('current')
sfpDiagHighRxPowerAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighRxPowerAlmThreshold.setStatus('current')
sfpDiagLowRxPowerAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowRxPowerAlmThreshold.setStatus('current')
sfpDiagHighRxPowerWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighRxPowerWrnThreshold.setStatus('current')
sfpDiagLowRxPowerWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowRxPowerWrnThreshold.setStatus('current')
sfpDiagHighLaserTempAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighLaserTempAlmThreshold.setStatus('current')
sfpDiagLowLaserTempAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowLaserTempAlmThreshold.setStatus('current')
sfpDiagHighLaserTempWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighLaserTempWrnThreshold.setStatus('current')
sfpDiagLowLaserTempWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowLaserTempWrnThreshold.setStatus('current')
sfpDiagHighWaveLenAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighWaveLenAlmThreshold.setStatus('current')
sfpDiagLowWaveLenAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowWaveLenAlmThreshold.setStatus('current')
sfpDiagHighWaveLenWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighWaveLenWrnThreshold.setStatus('current')
sfpDiagLowWaveLenWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowWaveLenWrnThreshold.setStatus('current')
sfpDiagHighTecCurrAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighTecCurrAlmThreshold.setStatus('current')
sfpDiagLowTecCurrAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowTecCurrAlmThreshold.setStatus('current')
sfpDiagHighTecCurrWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighTecCurrWrnThreshold.setStatus('current')
sfpDiagLowTecCurrWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowTecCurrWrnThreshold.setStatus('current')
sfpDiagModuleTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagModuleTemperature.setStatus('current')
sfpDiagSupplyVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagSupplyVoltage.setStatus('current')
sfpDiagTxBias = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagTxBias.setStatus('current')
sfpDiagTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagTxOutputPower.setStatus('current')
sfpDiagRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagRxInputPower.setStatus('current')
sfpDiagRxLaserTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagRxLaserTemperature.setStatus('current')
sfpDiagRxMeasuredWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagRxMeasuredWavelength.setStatus('current')
sfpDiagRxTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagRxTecCurrent.setStatus('current')
sfpDiagAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagAlarms.setStatus('current')
sfpDiagAlarmsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagAlarmsMask.setStatus('current')
sfpDiagWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagWarnings.setStatus('current')
sfpDiagWarningsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagWarningsMask.setStatus('current')
sfpDiagConfLowRxPowerAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagConfLowRxPowerAlmThreshold.setStatus('current')
sfpDiagRxInputPowerFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 47), Float32TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagRxInputPowerFloat.setStatus('current')
sfpDiagCxpTxTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagCxpTxTemp.setStatus('current')
sfpDiagCxpHighTxTempAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagCxpHighTxTempAlmThreshold.setStatus('current')
sfpDiagCxpLowTxTempAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagCxpLowTxTempAlmThreshold.setStatus('current')
sfpDiagCxpRxTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagCxpRxTemp.setStatus('current')
sfpDiagCxpHighRxTempAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagCxpHighRxTempAlmThreshold.setStatus('current')
sfpDiagCxpLowRxTempAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagCxpLowRxTempAlmThreshold.setStatus('current')
sfpDiagOtdrFiberCutRange = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagOtdrFiberCutRange.setStatus('current')
sfpDiagModuleTemperatureCelsius = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagModuleTemperatureCelsius.setStatus('current')
sfpConfigChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 4515, 1, 10, 3, 1)).setObjects(("SL-SFP-MIB", "sfpConfigInterface"))
if mibBuilder.loadTexts: sfpConfigChangeTrap.setStatus('current')
mibBuilder.exportSymbols("SL-SFP-MIB", sfpDiagHighTecCurrWrnThreshold=sfpDiagHighTecCurrWrnThreshold, sfpConfigCfpMaxCopperCableLength=sfpConfigCfpMaxCopperCableLength, sfpDiagHighTxBiasAlmThreshold=sfpDiagHighTxBiasAlmThreshold, sfpConfigFcCompliance=sfpConfigFcCompliance, sfpConfigCfpMinWavelenPerActive=sfpConfigCfpMinWavelenPerActive, sfpDiagAlarms=sfpDiagAlarms, sfpDiagHighVoltAlmThreshold=sfpDiagHighVoltAlmThreshold, sfpConfigCohCurrentOSNR=sfpConfigCohCurrentOSNR, sfpDiagWarnings=sfpDiagWarnings, sfpConfigXfpDitherSupported=sfpConfigXfpDitherSupported, sfpDiagCxpHighRxTempAlmThreshold=sfpDiagCxpHighRxTempAlmThreshold, sfpDiagHighTempWrnThreshold=sfpDiagHighTempWrnThreshold, sfpConfigCfpCopperCode=sfpConfigCfpCopperCode, sfpDiagAlarmsMask=sfpDiagAlarmsMask, sfpConfigTable=sfpConfigTable, sfpDiagConfLowRxPowerAlmThreshold=sfpDiagConfLowRxPowerAlmThreshold, sfpConfigCfpOtnCode=sfpConfigCfpOtnCode, sfpDiagRxMeasuredWavelength=sfpDiagRxMeasuredWavelength, sfpConfigCxpMaxSupportedRate=sfpConfigCxpMaxSupportedRate, sfpConfigDateCode=sfpConfigDateCode, sfpDiagRxTecCurrent=sfpDiagRxTecCurrent, sfpTraps=sfpTraps, sfpDiagModuleTemperature=sfpDiagModuleTemperature, sfpConfigXfpCapFreqLast10Ghz=sfpConfigXfpCapFreqLast10Ghz, sfpConfigLength50m10m=sfpConfigLength50m10m, sfpConfig10GSonetCompliance=sfpConfig10GSonetCompliance, sfpConfigChangeTrap=sfpConfigChangeTrap, sfpDiagHighTempAlmThreshold=sfpDiagHighTempAlmThreshold, sfpConfigXfpTuningSupported=sfpConfigXfpTuningSupported, sfpDiagCxpTxTemp=sfpDiagCxpTxTemp, sfpConfigVendorRev=sfpConfigVendorRev, sfpConfigCfpMaxSmFiberLength=sfpConfigCfpMaxSmFiberLength, sfpDiagLowTxPowerWrnThreshold=sfpDiagLowTxPowerWrnThreshold, sfpConfigEnhanceOptions=sfpConfigEnhanceOptions, sfpConfigCfpFcCode=sfpConfigCfpFcCode, sfpConfigExtendedOptions=sfpConfigExtendedOptions, sfpConfigCxpConnectorType=sfpConfigCxpConnectorType, sfpConfigTunableWaveLength=sfpConfigTunableWaveLength, sfpDiagLowWaveLenWrnThreshold=sfpDiagLowWaveLenWrnThreshold, sfpConfigXfpCalibrationEnabled=sfpConfigXfpCalibrationEnabled, sfpConfigCfpMaxHostLaneRate=sfpConfigCfpMaxHostLaneRate, sfpDiagCxpRxTemp=sfpDiagCxpRxTemp, sfpConfigLength9mKm=sfpConfigLength9mKm, sfpConfigEncodingCode=sfpConfigEncodingCode, sfpDiagLowLaserTempAlmThreshold=sfpDiagLowLaserTempAlmThreshold, sfpConfigCfpConnectorType=sfpConfigCfpConnectorType, sfpConfigQsfppSonetCode=sfpConfigQsfppSonetCode, sfpConfigXfpMinBitRate=sfpConfigXfpMinBitRate, sfpDiagTxOutputPower=sfpDiagTxOutputPower, sfpConfigVendorOUI=sfpConfigVendorOUI, sfpConfigOptionalWdm=sfpConfigOptionalWdm, sfpConfigXfpDesiredChannel=sfpConfigXfpDesiredChannel, sfpConfigXfpCapFreqLastThz=sfpConfigXfpCapFreqLastThz, sfpDiagHighTxPowerWrnThreshold=sfpDiagHighTxPowerWrnThreshold, sfpConfigXfpCalibrationSupported=sfpConfigXfpCalibrationSupported, sfpConfig1310ExtXcvrId=sfpConfig1310ExtXcvrId, sfpConfigXfpExtXcvrId=sfpConfigXfpExtXcvrId, sfpConfigCohAverageOSNR=sfpConfigCohAverageOSNR, sfpConfigXfpEncodingCode=sfpConfigXfpEncodingCode, sfpConfig8472Compliance=sfpConfig8472Compliance, sfpDiagLowVoltAlmThreshold=sfpDiagLowVoltAlmThreshold, sfpConfigCfpSonetCode=sfpConfigCfpSonetCode, sfpConfigGbeCompliance=sfpConfigGbeCompliance, sfpDiagRxLaserTemperature=sfpDiagRxLaserTemperature, sfpConfigCohRxDesiredFreq=sfpConfigCohRxDesiredFreq, sfpDiagLowTxBiasAlmThreshold=sfpDiagLowTxBiasAlmThreshold, sfpConfigCfpExtId=sfpConfigCfpExtId, sfpDiagLowWaveLenAlmThreshold=sfpDiagLowWaveLenAlmThreshold, sfpConfigCxpExtId=sfpConfigCxpExtId, sfpDiagLowTxBiasWrnThreshold=sfpDiagLowTxBiasWrnThreshold, sfpConfigCohRxDesiredWl=sfpConfigCohRxDesiredWl, sfpConfigCohCurrentCD=sfpConfigCohCurrentCD, sfpDiagEntry=sfpDiagEntry, sfpConfigQsfppEthernetCode=sfpConfigQsfppEthernetCode, sfpDiagRxInputPower=sfpDiagRxInputPower, sfpConfigCxpDeviceTech=sfpConfigCxpDeviceTech, sfpConfigVendorName=sfpConfigVendorName, sfpDiagLowTxPowerAlmThreshold=sfpDiagLowTxPowerAlmThreshold, sfpConfigChannelSpacing=sfpConfigChannelSpacing, sfpConfigCfpSpacing=sfpConfigCfpSpacing, sfpConfigXfpCapMaxSpacing10Ghz=sfpConfigXfpCapMaxSpacing10Ghz, sfpConfigXfpDesiredFreq=sfpConfigXfpDesiredFreq, sfpConfigNyquist=sfpConfigNyquist, sfpConfigNominalBitRate=sfpConfigNominalBitRate, sfpDiagSupplyVoltage=sfpDiagSupplyVoltage, sfpConfigWdmExtXcvrId=sfpConfigWdmExtXcvrId, sfpConfigCfpMaxMmFiberLength=sfpConfigCfpMaxMmFiberLength, sfpDiagTable=sfpDiagTable, sfpDiagTxBias=sfpDiagTxBias, sfpDiagHighWaveLenAlmThreshold=sfpDiagHighWaveLenAlmThreshold, sfpDiagLowVoltWrnThreshold=sfpDiagLowVoltWrnThreshold, sfpDiagModuleTemperatureCelsius=sfpDiagModuleTemperatureCelsius, sfpConfigLengthCopper1m=sfpConfigLengthCopper1m, sfpConfigCfpEthernetCode=sfpConfigCfpEthernetCode, sfpDiagHighTxBiasWrnThreshold=sfpDiagHighTxBiasWrnThreshold, sfpDiagWarningsMask=sfpDiagWarningsMask, sfpConfigMinTemp=sfpConfigMinTemp, sfpConfigPilotToneModulation=sfpConfigPilotToneModulation, sfpDiagHighTecCurrAlmThreshold=sfpDiagHighTecCurrAlmThreshold, sfpDiagOtdrFiberCutRange=sfpDiagOtdrFiberCutRange, sfpDiagHighVoltWrnThreshold=sfpDiagHighVoltWrnThreshold, sfpConfigCfpMaxLenOpticalWidth=sfpConfigCfpMaxLenOpticalWidth, sfpConfigConnectorCode=sfpConfigConnectorCode, sfpConfigSonetCompliance=sfpConfigSonetCompliance, sfpDiagLowTecCurrWrnThreshold=sfpDiagLowTecCurrWrnThreshold, sfpConfigMaxBitRate=sfpConfigMaxBitRate, sfpDiagLowTempAlmThreshold=sfpDiagLowTempAlmThreshold, sfpConfigCfpMaxNetworkLaneRate=sfpConfigCfpMaxNetworkLaneRate, sfpDiagLowTempWrnThreshold=sfpDiagLowTempWrnThreshold, sfpDiagHighRxPowerAlmThreshold=sfpDiagHighRxPowerAlmThreshold, sfpConfigXfpDesiredWl=sfpConfigXfpDesiredWl, slSfp=slSfp, sfpConfigWaveLength=sfpConfigWaveLength, sfpConfigCxpNominalWavelength=sfpConfigCxpNominalWavelength, sfpDiagCxpHighTxTempAlmThreshold=sfpDiagCxpHighTxTempAlmThreshold, sfpConfig10GbeCompliance=sfpConfig10GbeCompliance, sfpDiagLowLaserTempWrnThreshold=sfpDiagLowLaserTempWrnThreshold, sfpDiagLowRxPowerAlmThreshold=sfpDiagLowRxPowerAlmThreshold, sfpDiagHighWaveLenWrnThreshold=sfpDiagHighWaveLenWrnThreshold, sfpConfigXfpDitherAdmin=sfpConfigXfpDitherAdmin, sfpDiagCxpLowTxTempAlmThreshold=sfpDiagCxpLowTxTempAlmThreshold, sfpConfigInterface=sfpConfigInterface, sfpConfigVendorPN=sfpConfigVendorPN, sfpDiagLowTecCurrAlmThreshold=sfpDiagLowTecCurrAlmThreshold, sfpConfigLength62m10m=sfpConfigLength62m10m, sfpDiagHighTxPowerAlmThreshold=sfpDiagHighTxPowerAlmThreshold, sfpConfigLength9m100m=sfpConfigLength9m100m, sfpConfigXcvrId=sfpConfigXcvrId, sfpConfigXfpCapFreqFirst10Ghz=sfpConfigXfpCapFreqFirst10Ghz, sfpConfigDiagnosticMonitoring=sfpConfigDiagnosticMonitoring, sfpConfigCfpMediaProperties=sfpConfigCfpMediaProperties, sfpConfigXfpWlError=sfpConfigXfpWlError, sfpConf=sfpConf, sfpDiag=sfpDiag, sfpConfigCohMaxCD=sfpConfigCohMaxCD, sfpDiagHighLaserTempWrnThreshold=sfpDiagHighLaserTempWrnThreshold, sfpConfigEsconCompliance=sfpConfigEsconCompliance, sfpConfigVdtControl=sfpConfigVdtControl, sfpConfigVendorSN=sfpConfigVendorSN, sfpConfigMaxTemp=sfpConfigMaxTemp, sfpConfigCleiCode=sfpConfigCleiCode, sfpConfigCfpMaxWavelenPerActive=sfpConfigCfpMaxWavelenPerActive, PYSNMP_MODULE_ID=slSfp, sfpConfigXfpDeviceTech=sfpConfigXfpDeviceTech, sfpConfigInfibandCompliance=sfpConfigInfibandCompliance, sfpConfigCfpSupportedRates=sfpConfigCfpSupportedRates, sfpTune=sfpTune, sfpConfigXfpFreqError=sfpConfigXfpFreqError, sfpConfigCohRxDesiredChannel=sfpConfigCohRxDesiredChannel, sfpDiagInterface=sfpDiagInterface, sfpConfig10GFcCompliance=sfpConfig10GFcCompliance, sfpDiagHighLaserTempAlmThreshold=sfpDiagHighLaserTempAlmThreshold, sfpDiagCxpLowRxTempAlmThreshold=sfpDiagCxpLowRxTempAlmThreshold, sfpConfigEntry=sfpConfigEntry, sfpConfigMaxSupplyCurrent=sfpConfigMaxSupplyCurrent, sfpConfigXfpCapFreqFirstThz=sfpConfigXfpCapFreqFirstThz, sfpDiagLowRxPowerWrnThreshold=sfpDiagLowRxPowerWrnThreshold, sfpDiagRxInputPowerFloat=sfpDiagRxInputPowerFloat, sfpConfigVoaControl=sfpConfigVoaControl, sfpDiagHighRxPowerWrnThreshold=sfpDiagHighRxPowerWrnThreshold, sfpConfigMinBitRate=sfpConfigMinBitRate, sfpConfigCfpSupportedLanes=sfpConfigCfpSupportedLanes, sfpConfigXfpMaxBitRate=sfpConfigXfpMaxBitRate)
