#
# PySNMP MIB module SCSI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/equallogic/SCSI-MIB
# Produced by pysmi-1.1.12 at Thu May 30 02:15:40 2024
# On host fv-az775-912 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Gauge32, Counter64, IpAddress, mib_2, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, Integer32, Bits, TimeTicks, MibIdentifier, ObjectIdentity, ModuleIdentity, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "IpAddress", "mib-2", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "Integer32", "Bits", "TimeTicks", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "Counter32")
TextualConvention, AutonomousType, TruthValue, RowPointer, RowStatus, TimeStamp, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "AutonomousType", "TruthValue", "RowPointer", "RowStatus", "TimeStamp", "DisplayString")
scsiModule = ModuleIdentity((1, 3, 6, 1, 2, 1, 999))
scsiModule.setRevisions(('2002-02-25 00:00',))
if mibBuilder.loadTexts: scsiModule.setLastUpdated('200202250000Z')
if mibBuilder.loadTexts: scsiModule.setOrganization('IETF')
class ScsiLUNOrZero(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(2, 2), ValueSizeConstraint(8, 8), )
class ScsiIndexValue(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class ScsiPortIndexValueOrZero(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class ScsiIndexValueOrZero(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class ScsiIdentifier(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 1), ValueSizeConstraint(2, 2), ValueSizeConstraint(3, 3), ValueSizeConstraint(11, 11), ValueSizeConstraint(16, 16), ValueSizeConstraint(256, 256), ValueSizeConstraint(258, 258), ValueSizeConstraint(262, 262), )
class ScsiName(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), ValueSizeConstraint(11, 11), ValueSizeConstraint(16, 16), ValueSizeConstraint(256, 256), ValueSizeConstraint(258, 258), ValueSizeConstraint(262, 262), )
class ScsiNameIdOrZero(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), )
class ScsiDeviceOrPort(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("device", 1), ("port", 2), ("other", 3))

class ScsiIdCodeSet(TextualConvention, Unsigned32):
    reference = ' ANSI - SCSI Primary Commands - 2 (SPC-2), Revision 20, 18 July 2001 Chapter 8: section 8.4.4, page 210 Vital Product Data Parameters [16]'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 15)

class ScsiIdAssociation(TextualConvention, Unsigned32):
    reference = ' ANSI - SCSI Primary Commands - 2 (SPC-2), Revision 20, 18 July 2001 - Chapter 8: section 8.4.4, page 210 Vital Product Data Parameters [16]'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 3)

class ScsiIdType(TextualConvention, Unsigned32):
    reference = ' ANSI - SCSI Primary Commands - 2 (SPC-2), Revision 20, Chapter 8: section 8.4.4, page 210 Vital Product Data Parameters [16]'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 15)

class ScsiIdValue(TextualConvention, OctetString):
    reference = ' ANSI - SCSI Primary Commands - 2 (SPC-2), Revision 20, 18 July 2001 - Chapter 8: section 8.4.4, page 210 Vital Product Data Parameters [16]'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class HrSWInstalledIndexOrZero(TextualConvention, Integer32):
    reference = 'hrSWInstalledTable is defined in the Host Resources MIB, RFC 2790.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

scsiObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1))
scsiNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 2))
scsiConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 3))
scsiTransportTypes = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 1))
scsiGeneral = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 2))
scsiInitiator = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 3))
scsiTarget = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 4))
scsiLogicalUnit = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 5))
scsiTranportOther = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 1, 1))
scsiTranportSPI = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 1, 2))
scsiTransportFCP = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 1, 3))
scsiTransportSRP = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 1, 4))
scsiTransportISCSI = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 1, 5))
scsiTransportSBP = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 1, 6))
scsiInstanceTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 2, 1), )
if mibBuilder.loadTexts: scsiInstanceTable.setStatus('current')
scsiInstanceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"))
if mibBuilder.loadTexts: scsiInstanceEntry.setStatus('current')
scsiInstIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiInstIndex.setStatus('current')
scsiInstAlias = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiInstAlias.setStatus('current')
scsiInstSoftwareIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 1, 3), HrSWInstalledIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiInstSoftwareIndex.setStatus('current')
scsiInstVendorVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiInstVendorVersion.setStatus('current')
scsiInstScsiNotificationsEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiInstScsiNotificationsEnable.setStatus('current')
scsiDeviceTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 2, 2), )
if mibBuilder.loadTexts: scsiDeviceTable.setStatus('current')
scsiDeviceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 2, 2, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"))
if mibBuilder.loadTexts: scsiDeviceEntry.setStatus('current')
scsiDeviceIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 2, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiDeviceIndex.setStatus('current')
scsiDeviceAlias = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiDeviceAlias.setStatus('current')
scsiDeviceRole = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 2, 1, 3), Bits().clone(namedValues=NamedValues(("target", 0), ("initiator", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDeviceRole.setStatus('current')
scsiDevicePortNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDevicePortNumber.setStatus('current')
scsiDeviceResets = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDeviceResets.setStatus('current')
scsiPortTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 2, 3), )
if mibBuilder.loadTexts: scsiPortTable.setStatus('current')
scsiPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 2, 3, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"))
if mibBuilder.loadTexts: scsiPortEntry.setStatus('current')
scsiPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 3, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiPortIndex.setStatus('current')
scsiPortRole = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 3, 1, 2), Bits().clone(namedValues=NamedValues(("target", 0), ("initiator", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiPortRole.setStatus('current')
scsiPortTrnsptPtr = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiPortTrnsptPtr.setStatus('current')
scsiPortBusyStatuses = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiPortBusyStatuses.setStatus('current')
scsiTrnsptTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 2, 5), )
if mibBuilder.loadTexts: scsiTrnsptTable.setStatus('current')
scsiTrnsptEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 2, 5, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiTrnsptIndex"))
if mibBuilder.loadTexts: scsiTrnsptEntry.setStatus('current')
scsiTrnsptIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 5, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiTrnsptIndex.setStatus('current')
scsiTrnsptType = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTrnsptType.setStatus('current')
scsiTrnsptPointer = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTrnsptPointer.setStatus('current')
scsiTrnsptDevName = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 5, 1, 4), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTrnsptDevName.setStatus('current')
scsiIntrDevTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 3, 1), )
if mibBuilder.loadTexts: scsiIntrDevTable.setStatus('current')
scsiIntrDevEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 3, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"))
if mibBuilder.loadTexts: scsiIntrDevEntry.setStatus('current')
scsiIntrDevTgtAccessMode = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("autoEnable", 2), ("manualEnable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiIntrDevTgtAccessMode.setStatus('current')
scsiIntrDevOutResets = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrDevOutResets.setStatus('current')
scsiIntrPrtTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 3, 3), )
if mibBuilder.loadTexts: scsiIntrPrtTable.setStatus('current')
scsiIntrPrtEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 3, 3, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"))
if mibBuilder.loadTexts: scsiIntrPrtEntry.setStatus('current')
scsiIntrPrtName = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 3, 1, 1), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPrtName.setStatus('current')
scsiIntrPrtIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 3, 1, 2), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPrtIdentifier.setStatus('current')
scsiIntrPrtOutCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 3, 1, 3), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPrtOutCommands.setStatus('current')
scsiIntrPrtWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 3, 1, 4), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPrtWrittenMegaBytes.setStatus('current')
scsiIntrPrtReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 3, 1, 5), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPrtReadMegaBytes.setStatus('current')
scsiIntrPrtHSOutCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 3, 1, 6), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPrtHSOutCommands.setStatus('current')
scsiRemoteTarget = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 3, 4))
scsiDscTgtTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1), )
if mibBuilder.loadTexts: scsiDscTgtTable.setStatus('current')
scsiDscTgtEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiDscTgtIntrPortIndex"), (0, "SCSI-MIB", "scsiDscTgtIndex"))
if mibBuilder.loadTexts: scsiDscTgtEntry.setStatus('current')
scsiDscTgtIntrPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 1), ScsiPortIndexValueOrZero())
if mibBuilder.loadTexts: scsiDscTgtIntrPortIndex.setStatus('current')
scsiDscTgtIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 2), ScsiIndexValue())
if mibBuilder.loadTexts: scsiDscTgtIndex.setStatus('current')
scsiDscTgtDevOrPort = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 3), ScsiDeviceOrPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiDscTgtDevOrPort.setStatus('current')
scsiDscTgtName = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 4), ScsiName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiDscTgtName.setStatus('current')
scsiDscTgtConfigured = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiDscTgtConfigured.setStatus('current')
scsiDscTgtDiscovered = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtDiscovered.setStatus('current')
scsiDscTgtInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 7), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtInCommands.setStatus('current')
scsiDscTgtWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 8), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtWrittenMegaBytes.setStatus('current')
scsiDscTgtReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 9), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtReadMegaBytes.setStatus('current')
scsiDscTgtHSInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 10), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtHSInCommands.setStatus('current')
scsiDscTgtLastCreation = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtLastCreation.setStatus('current')
scsiDscTgtRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiDscTgtRowStatus.setStatus('current')
scsiDscLunTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 2), )
if mibBuilder.loadTexts: scsiDscLunTable.setStatus('current')
scsiDscLunEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 2, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiDscTgtIntrPortIndex"), (0, "SCSI-MIB", "scsiDscTgtIndex"), (0, "SCSI-MIB", "scsiDscLunIndex"))
if mibBuilder.loadTexts: scsiDscLunEntry.setStatus('current')
scsiDscLunIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 2, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiDscLunIndex.setStatus('current')
scsiDscLunLun = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 2, 1, 2), ScsiLUNOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunLun.setStatus('current')
scsiDscLunIdTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 3), )
if mibBuilder.loadTexts: scsiDscLunIdTable.setStatus('current')
scsiDscLunIdEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 3, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiDscTgtIntrPortIndex"), (0, "SCSI-MIB", "scsiDscTgtIndex"), (0, "SCSI-MIB", "scsiDscLunIndex"), (0, "SCSI-MIB", "scsiDscLunIdIndex"))
if mibBuilder.loadTexts: scsiDscLunIdEntry.setStatus('current')
scsiDscLunIdIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 3, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiDscLunIdIndex.setStatus('current')
scsiDscLunIdCodeSet = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 3, 1, 2), ScsiIdCodeSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunIdCodeSet.setStatus('current')
scsiDscLunIdAssociation = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 3, 1, 3), ScsiIdAssociation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunIdAssociation.setStatus('current')
scsiDscLunIdType = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 3, 1, 4), ScsiIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunIdType.setStatus('current')
scsiDscLunIdValue = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 3, 1, 5), ScsiIdValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunIdValue.setStatus('current')
scsiAttTgtPortTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 6), )
if mibBuilder.loadTexts: scsiAttTgtPortTable.setStatus('current')
scsiAttTgtPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 6, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"), (0, "SCSI-MIB", "scsiAttTgtPortIndex"))
if mibBuilder.loadTexts: scsiAttTgtPortEntry.setStatus('current')
scsiAttTgtPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 6, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiAttTgtPortIndex.setStatus('current')
scsiAttTgtPortDscTgtIdx = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 6, 1, 2), ScsiIndexValueOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttTgtPortDscTgtIdx.setStatus('current')
scsiAttTgtPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 6, 1, 3), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttTgtPortName.setStatus('current')
scsiAttTgtPortIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 6, 1, 4), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttTgtPortIdentifier.setStatus('current')
scsiTgtDevTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 4, 1), )
if mibBuilder.loadTexts: scsiTgtDevTable.setStatus('current')
scsiTgtDevEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 4, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"))
if mibBuilder.loadTexts: scsiTgtDevEntry.setStatus('current')
scsiTgtDevNumberOfLUs = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtDevNumberOfLUs.setStatus('current')
scsiTgtDeviceStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("available", 2), ("broken", 3), ("readying", 4), ("abnormal", 5), ("nonAddrFailure", 6), ("nonAddrFailReadying", 7), ("nonAddrFailAbnormal", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtDeviceStatus.setStatus('current')
scsiTgtDevNonAccessibleLUs = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtDevNonAccessibleLUs.setStatus('current')
scsiTgtPortTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 4, 2), )
if mibBuilder.loadTexts: scsiTgtPortTable.setStatus('current')
scsiTgtPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 4, 2, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"))
if mibBuilder.loadTexts: scsiTgtPortEntry.setStatus('current')
scsiTgtPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 2, 1, 1), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortName.setStatus('current')
scsiTgtPortIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 2, 1, 2), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortIdentifier.setStatus('current')
scsiTgtPortInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 2, 1, 3), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortInCommands.setStatus('current')
scsiTgtPortWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 2, 1, 4), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortWrittenMegaBytes.setStatus('current')
scsiTgtPortReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 2, 1, 5), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortReadMegaBytes.setStatus('current')
scsiTgtPortHSInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 2, 1, 6), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortHSInCommands.setStatus('current')
scsiRemoteInitiators = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 4, 3))
scsiAuthorizedIntrTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1), )
if mibBuilder.loadTexts: scsiAuthorizedIntrTable.setStatus('current')
scsiAuthorizedIntrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiAuthIntrTgtPortIndex"), (0, "SCSI-MIB", "scsiAuthIntrIndex"))
if mibBuilder.loadTexts: scsiAuthorizedIntrEntry.setStatus('current')
scsiAuthIntrTgtPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 1), ScsiPortIndexValueOrZero())
if mibBuilder.loadTexts: scsiAuthIntrTgtPortIndex.setStatus('current')
scsiAuthIntrIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 2), ScsiIndexValue())
if mibBuilder.loadTexts: scsiAuthIntrIndex.setStatus('current')
scsiAuthIntrDevOrPort = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 3), ScsiDeviceOrPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiAuthIntrDevOrPort.setStatus('current')
scsiAuthIntrName = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 4), ScsiName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiAuthIntrName.setStatus('current')
scsiAuthIntrLunMapIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 5), ScsiIndexValueOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiAuthIntrLunMapIndex.setStatus('current')
scsiAuthIntrAttachedTimes = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 6), Counter32()).setUnits('Times').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrAttachedTimes.setStatus('current')
scsiAuthIntrOutCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 7), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrOutCommands.setStatus('current')
scsiAuthIntrReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 8), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrReadMegaBytes.setStatus('current')
scsiAuthIntrWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 9), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrWrittenMegaBytes.setStatus('current')
scsiAuthIntrHSOutCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 10), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrHSOutCommands.setStatus('current')
scsiAuthIntrLastCreation = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrLastCreation.setStatus('current')
scsiAuthIntrRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiAuthIntrRowStatus.setStatus('current')
scsiAttIntrPrtTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 2), )
if mibBuilder.loadTexts: scsiAttIntrPrtTable.setStatus('current')
scsiAttIntrPrtEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 2, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"), (0, "SCSI-MIB", "scsiAttIntrPrtIdx"))
if mibBuilder.loadTexts: scsiAttIntrPrtEntry.setStatus('current')
scsiAttIntrPrtIdx = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 2, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiAttIntrPrtIdx.setStatus('current')
scsiAttIntrPrtAuthIntrIdx = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 2, 1, 2), ScsiIndexValueOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttIntrPrtAuthIntrIdx.setStatus('current')
scsiAttIntrPrtName = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 2, 1, 3), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttIntrPrtName.setStatus('current')
scsiAttIntrPrtId = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 2, 1, 4), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttIntrPrtId.setStatus('current')
scsiLuTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 5, 1), )
if mibBuilder.loadTexts: scsiLuTable.setStatus('current')
scsiLuEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiLuIndex"))
if mibBuilder.loadTexts: scsiLuEntry.setStatus('current')
scsiLuIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiLuIndex.setStatus('current')
scsiLuDefaultLun = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 2), ScsiLUNOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuDefaultLun.setStatus('current')
scsiLuWwnName = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 3), ScsiNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuWwnName.setStatus('current')
scsiLuVendorId = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuVendorId.setStatus('current')
scsiLuProductId = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuProductId.setStatus('current')
scsiLuRevisionId = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuRevisionId.setStatus('current')
scsiLuPeripheralType = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuPeripheralType.setStatus('current')
scsiLuStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("available", 2), ("notAvailable", 3), ("broken", 4), ("readying", 5), ("abnormal", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuStatus.setStatus('current')
scsiLuState = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 9), Bits().clone(namedValues=NamedValues(("dataLost", 0), ("dynamicReconfigurationInProgress", 1), ("exposed", 2), ("fractionallyExposed", 3), ("partiallyExposed", 4), ("protectedRebuild", 5), ("protectionDisabled", 6), ("rebuild", 7), ("recalculate", 8), ("spareInUse", 9), ("verifyInProgress", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuState.setStatus('current')
scsiLuInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 10), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuInCommands.setStatus('current')
scsiLuReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 11), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuReadMegaBytes.setStatus('current')
scsiLuWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 12), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuWrittenMegaBytes.setStatus('current')
scsiLuInResets = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 13), Counter32()).setUnits('resets').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuInResets.setStatus('current')
scsiLuOutQueueFullStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuOutQueueFullStatus.setStatus('current')
scsiLuHSInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 15), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuHSInCommands.setStatus('current')
scsiLuIdTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 5, 2), )
if mibBuilder.loadTexts: scsiLuIdTable.setStatus('current')
scsiLuIdEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 5, 2, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiLuIndex"), (0, "SCSI-MIB", "scsiLuIdIndex"))
if mibBuilder.loadTexts: scsiLuIdEntry.setStatus('current')
scsiLuIdIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 2, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiLuIdIndex.setStatus('current')
scsiLuIdCodeSet = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 2, 1, 2), ScsiIdCodeSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuIdCodeSet.setStatus('current')
scsiLuIdAssociation = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 2, 1, 3), ScsiIdAssociation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuIdAssociation.setStatus('current')
scsiLuIdType = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 2, 1, 4), ScsiIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuIdType.setStatus('current')
scsiLuIdValue = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 2, 1, 5), ScsiIdValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuIdValue.setStatus('current')
scsiLunMapTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 5, 3), )
if mibBuilder.loadTexts: scsiLunMapTable.setStatus('current')
scsiLunMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 5, 3, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiLunMapIndex"), (0, "SCSI-MIB", "scsiLunMapLun"))
if mibBuilder.loadTexts: scsiLunMapEntry.setStatus('current')
scsiLunMapIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 3, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiLunMapIndex.setStatus('current')
scsiLunMapLun = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 3, 1, 2), ScsiLUNOrZero())
if mibBuilder.loadTexts: scsiLunMapLun.setStatus('current')
scsiLunMapLuIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 3, 1, 3), ScsiIndexValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiLunMapLuIndex.setStatus('current')
scsiLunMapRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiLunMapRowStatus.setStatus('current')
scsiNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 2, 0))
scsiTgtDeviceStatusChanged = NotificationType((1, 3, 6, 1, 2, 1, 999, 2, 0, 1)).setObjects(("SCSI-MIB", "scsiTgtDeviceStatus"))
if mibBuilder.loadTexts: scsiTgtDeviceStatusChanged.setStatus('current')
scsiLuStatusChanged = NotificationType((1, 3, 6, 1, 2, 1, 999, 2, 0, 2)).setObjects(("SCSI-MIB", "scsiLuStatus"))
if mibBuilder.loadTexts: scsiLuStatusChanged.setStatus('current')
scsiCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 3, 1))
scsiCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 999, 3, 1, 1)).setObjects(("SCSI-MIB", "scsiDeviceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiCompliance = scsiCompliance.setStatus('current')
scsiGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 3, 2))
scsiDeviceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 1)).setObjects(("SCSI-MIB", "scsiInstAlias"), ("SCSI-MIB", "scsiInstSoftwareIndex"), ("SCSI-MIB", "scsiInstVendorVersion"), ("SCSI-MIB", "scsiInstScsiNotificationsEnable"), ("SCSI-MIB", "scsiDeviceAlias"), ("SCSI-MIB", "scsiDeviceRole"), ("SCSI-MIB", "scsiDevicePortNumber"), ("SCSI-MIB", "scsiPortRole"), ("SCSI-MIB", "scsiPortTrnsptPtr"), ("SCSI-MIB", "scsiTrnsptType"), ("SCSI-MIB", "scsiTrnsptPointer"), ("SCSI-MIB", "scsiTrnsptDevName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiDeviceGroup = scsiDeviceGroup.setStatus('current')
scsiInitiatorGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 2)).setObjects(("SCSI-MIB", "scsiIntrDevTgtAccessMode"), ("SCSI-MIB", "scsiIntrPrtName"), ("SCSI-MIB", "scsiIntrPrtIdentifier"), ("SCSI-MIB", "scsiAttTgtPortDscTgtIdx"), ("SCSI-MIB", "scsiAttTgtPortName"), ("SCSI-MIB", "scsiAttTgtPortIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiInitiatorGroup = scsiInitiatorGroup.setStatus('current')
scsiDiscoveryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 3)).setObjects(("SCSI-MIB", "scsiDscTgtDevOrPort"), ("SCSI-MIB", "scsiDscTgtName"), ("SCSI-MIB", "scsiDscTgtConfigured"), ("SCSI-MIB", "scsiDscTgtDiscovered"), ("SCSI-MIB", "scsiDscTgtRowStatus"), ("SCSI-MIB", "scsiDscTgtLastCreation"), ("SCSI-MIB", "scsiDscLunLun"), ("SCSI-MIB", "scsiDscLunIdCodeSet"), ("SCSI-MIB", "scsiDscLunIdAssociation"), ("SCSI-MIB", "scsiDscLunIdType"), ("SCSI-MIB", "scsiDscLunIdValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiDiscoveryGroup = scsiDiscoveryGroup.setStatus('current')
scsiTargetGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 4)).setObjects(("SCSI-MIB", "scsiTgtDevNumberOfLUs"), ("SCSI-MIB", "scsiTgtDeviceStatus"), ("SCSI-MIB", "scsiTgtDevNonAccessibleLUs"), ("SCSI-MIB", "scsiTgtPortName"), ("SCSI-MIB", "scsiTgtPortIdentifier"), ("SCSI-MIB", "scsiAttIntrPrtAuthIntrIdx"), ("SCSI-MIB", "scsiAttIntrPrtName"), ("SCSI-MIB", "scsiAttIntrPrtId"), ("SCSI-MIB", "scsiLuDefaultLun"), ("SCSI-MIB", "scsiLuWwnName"), ("SCSI-MIB", "scsiLuVendorId"), ("SCSI-MIB", "scsiLuProductId"), ("SCSI-MIB", "scsiLuRevisionId"), ("SCSI-MIB", "scsiLuPeripheralType"), ("SCSI-MIB", "scsiLuStatus"), ("SCSI-MIB", "scsiLuState"), ("SCSI-MIB", "scsiLuIdCodeSet"), ("SCSI-MIB", "scsiLuIdAssociation"), ("SCSI-MIB", "scsiLuIdType"), ("SCSI-MIB", "scsiLuIdValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiTargetGroup = scsiTargetGroup.setStatus('current')
scsiLunMapGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 5)).setObjects(("SCSI-MIB", "scsiLunMapLuIndex"), ("SCSI-MIB", "scsiLunMapRowStatus"), ("SCSI-MIB", "scsiAuthIntrDevOrPort"), ("SCSI-MIB", "scsiAuthIntrName"), ("SCSI-MIB", "scsiAuthIntrLunMapIndex"), ("SCSI-MIB", "scsiAuthIntrLastCreation"), ("SCSI-MIB", "scsiAuthIntrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiLunMapGroup = scsiLunMapGroup.setStatus('current')
scsiTargetStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 6)).setObjects(("SCSI-MIB", "scsiTgtPortInCommands"), ("SCSI-MIB", "scsiTgtPortWrittenMegaBytes"), ("SCSI-MIB", "scsiTgtPortReadMegaBytes"), ("SCSI-MIB", "scsiLuInCommands"), ("SCSI-MIB", "scsiLuReadMegaBytes"), ("SCSI-MIB", "scsiLuWrittenMegaBytes"), ("SCSI-MIB", "scsiLuInResets"), ("SCSI-MIB", "scsiLuOutQueueFullStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiTargetStatsGroup = scsiTargetStatsGroup.setStatus('current')
scsiTargetHSStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 7)).setObjects(("SCSI-MIB", "scsiTgtPortHSInCommands"), ("SCSI-MIB", "scsiLuHSInCommands"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiTargetHSStatsGroup = scsiTargetHSStatsGroup.setStatus('current')
scsiLunMapStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 8)).setObjects(("SCSI-MIB", "scsiAuthIntrAttachedTimes"), ("SCSI-MIB", "scsiAuthIntrOutCommands"), ("SCSI-MIB", "scsiAuthIntrReadMegaBytes"), ("SCSI-MIB", "scsiAuthIntrWrittenMegaBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiLunMapStatsGroup = scsiLunMapStatsGroup.setStatus('current')
scsiLunMapHSStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 9)).setObjects(("SCSI-MIB", "scsiAuthIntrHSOutCommands"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiLunMapHSStatsGroup = scsiLunMapHSStatsGroup.setStatus('current')
scsiInitiatorStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 10)).setObjects(("SCSI-MIB", "scsiIntrDevOutResets"), ("SCSI-MIB", "scsiIntrPrtOutCommands"), ("SCSI-MIB", "scsiIntrPrtWrittenMegaBytes"), ("SCSI-MIB", "scsiIntrPrtReadMegaBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiInitiatorStatsGroup = scsiInitiatorStatsGroup.setStatus('current')
scsiInitiatorHSStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 11)).setObjects(("SCSI-MIB", "scsiIntrPrtHSOutCommands"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiInitiatorHSStatsGroup = scsiInitiatorHSStatsGroup.setStatus('current')
scsiDiscoveryStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 12)).setObjects(("SCSI-MIB", "scsiDscTgtInCommands"), ("SCSI-MIB", "scsiDscTgtReadMegaBytes"), ("SCSI-MIB", "scsiDscTgtWrittenMegaBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiDiscoveryStatsGroup = scsiDiscoveryStatsGroup.setStatus('current')
scsiDiscoveryHSStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 13)).setObjects(("SCSI-MIB", "scsiDscTgtHSInCommands"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiDiscoveryHSStatsGroup = scsiDiscoveryHSStatsGroup.setStatus('current')
scsiDeviceStatGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 14)).setObjects(("SCSI-MIB", "scsiDeviceResets"), ("SCSI-MIB", "scsiPortBusyStatuses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiDeviceStatGroup = scsiDeviceStatGroup.setStatus('current')
mibBuilder.exportSymbols("SCSI-MIB", scsiIntrPrtIdentifier=scsiIntrPrtIdentifier, scsiInitiatorGroup=scsiInitiatorGroup, scsiAuthIntrOutCommands=scsiAuthIntrOutCommands, ScsiIndexValue=ScsiIndexValue, scsiIntrPrtWrittenMegaBytes=scsiIntrPrtWrittenMegaBytes, scsiDscTgtLastCreation=scsiDscTgtLastCreation, scsiLunMapLun=scsiLunMapLun, scsiDscTgtRowStatus=scsiDscTgtRowStatus, scsiLunMapLuIndex=scsiLunMapLuIndex, scsiLuRevisionId=scsiLuRevisionId, scsiDevicePortNumber=scsiDevicePortNumber, scsiTranportOther=scsiTranportOther, scsiDeviceEntry=scsiDeviceEntry, scsiIntrDevOutResets=scsiIntrDevOutResets, scsiAuthIntrLastCreation=scsiAuthIntrLastCreation, scsiAttIntrPrtAuthIntrIdx=scsiAttIntrPrtAuthIntrIdx, scsiTrnsptDevName=scsiTrnsptDevName, scsiDeviceAlias=scsiDeviceAlias, scsiDeviceStatGroup=scsiDeviceStatGroup, scsiDscLunIdCodeSet=scsiDscLunIdCodeSet, scsiTgtPortWrittenMegaBytes=scsiTgtPortWrittenMegaBytes, scsiInstanceTable=scsiInstanceTable, scsiDscTgtName=scsiDscTgtName, scsiDscTgtHSInCommands=scsiDscTgtHSInCommands, scsiLuIdIndex=scsiLuIdIndex, scsiCompliance=scsiCompliance, scsiTransportSRP=scsiTransportSRP, scsiLuInResets=scsiLuInResets, scsiLunMapStatsGroup=scsiLunMapStatsGroup, scsiAttIntrPrtName=scsiAttIntrPrtName, scsiPortTable=scsiPortTable, scsiInitiatorStatsGroup=scsiInitiatorStatsGroup, scsiAuthIntrReadMegaBytes=scsiAuthIntrReadMegaBytes, scsiAttIntrPrtIdx=scsiAttIntrPrtIdx, scsiLunMapRowStatus=scsiLunMapRowStatus, scsiDscTgtDiscovered=scsiDscTgtDiscovered, scsiConformance=scsiConformance, scsiIntrDevTable=scsiIntrDevTable, scsiAttTgtPortEntry=scsiAttTgtPortEntry, scsiDeviceResets=scsiDeviceResets, scsiDscLunIdTable=scsiDscLunIdTable, scsiLuVendorId=scsiLuVendorId, scsiDscTgtConfigured=scsiDscTgtConfigured, scsiObjects=scsiObjects, scsiIntrDevEntry=scsiIntrDevEntry, scsiLuStatusChanged=scsiLuStatusChanged, scsiDscLunLun=scsiDscLunLun, scsiInstanceEntry=scsiInstanceEntry, HrSWInstalledIndexOrZero=HrSWInstalledIndexOrZero, scsiTgtPortInCommands=scsiTgtPortInCommands, scsiLuStatus=scsiLuStatus, scsiTgtPortHSInCommands=scsiTgtPortHSInCommands, scsiDiscoveryHSStatsGroup=scsiDiscoveryHSStatsGroup, scsiDiscoveryGroup=scsiDiscoveryGroup, scsiTgtPortReadMegaBytes=scsiTgtPortReadMegaBytes, scsiAttTgtPortDscTgtIdx=scsiAttTgtPortDscTgtIdx, scsiAttIntrPrtId=scsiAttIntrPrtId, scsiDscLunTable=scsiDscLunTable, ScsiLUNOrZero=ScsiLUNOrZero, scsiIntrPrtTable=scsiIntrPrtTable, ScsiIdAssociation=ScsiIdAssociation, scsiTarget=scsiTarget, scsiLuIdEntry=scsiLuIdEntry, scsiInstAlias=scsiInstAlias, scsiLuInCommands=scsiLuInCommands, scsiLuOutQueueFullStatus=scsiLuOutQueueFullStatus, scsiDscTgtReadMegaBytes=scsiDscTgtReadMegaBytes, scsiPortIndex=scsiPortIndex, scsiAuthIntrHSOutCommands=scsiAuthIntrHSOutCommands, scsiTransportISCSI=scsiTransportISCSI, scsiDscTgtTable=scsiDscTgtTable, scsiIntrPrtEntry=scsiIntrPrtEntry, scsiLuIdCodeSet=scsiLuIdCodeSet, scsiDscLunIdType=scsiDscLunIdType, scsiLogicalUnit=scsiLogicalUnit, scsiDiscoveryStatsGroup=scsiDiscoveryStatsGroup, scsiLuEntry=scsiLuEntry, scsiPortTrnsptPtr=scsiPortTrnsptPtr, scsiLuDefaultLun=scsiLuDefaultLun, scsiTgtPortIdentifier=scsiTgtPortIdentifier, scsiTargetHSStatsGroup=scsiTargetHSStatsGroup, scsiRemoteTarget=scsiRemoteTarget, scsiLuProductId=scsiLuProductId, scsiLuIdType=scsiLuIdType, scsiTgtPortEntry=scsiTgtPortEntry, scsiDscLunEntry=scsiDscLunEntry, scsiLuIdValue=scsiLuIdValue, scsiDscTgtIntrPortIndex=scsiDscTgtIntrPortIndex, scsiLuIndex=scsiLuIndex, ScsiIndexValueOrZero=ScsiIndexValueOrZero, scsiDscLunIdAssociation=scsiDscLunIdAssociation, scsiLuWrittenMegaBytes=scsiLuWrittenMegaBytes, scsiAuthorizedIntrTable=scsiAuthorizedIntrTable, scsiDscTgtWrittenMegaBytes=scsiDscTgtWrittenMegaBytes, scsiAuthIntrTgtPortIndex=scsiAuthIntrTgtPortIndex, scsiLunMapGroup=scsiLunMapGroup, scsiDscTgtEntry=scsiDscTgtEntry, scsiAuthorizedIntrEntry=scsiAuthorizedIntrEntry, ScsiIdValue=ScsiIdValue, ScsiDeviceOrPort=ScsiDeviceOrPort, scsiDeviceIndex=scsiDeviceIndex, scsiTransportSBP=scsiTransportSBP, ScsiIdType=ScsiIdType, scsiModule=scsiModule, scsiTrnsptEntry=scsiTrnsptEntry, scsiLunMapTable=scsiLunMapTable, scsiTargetStatsGroup=scsiTargetStatsGroup, scsiAuthIntrLunMapIndex=scsiAuthIntrLunMapIndex, scsiAuthIntrIndex=scsiAuthIntrIndex, scsiAuthIntrName=scsiAuthIntrName, scsiIntrPrtOutCommands=scsiIntrPrtOutCommands, scsiLuIdTable=scsiLuIdTable, scsiNotifications=scsiNotifications, scsiNotificationsPrefix=scsiNotificationsPrefix, scsiLuPeripheralType=scsiLuPeripheralType, scsiTgtDeviceStatusChanged=scsiTgtDeviceStatusChanged, scsiDscLunIdEntry=scsiDscLunIdEntry, scsiTransportFCP=scsiTransportFCP, scsiLuReadMegaBytes=scsiLuReadMegaBytes, scsiLunMapHSStatsGroup=scsiLunMapHSStatsGroup, scsiCompliances=scsiCompliances, scsiTgtDevNonAccessibleLUs=scsiTgtDevNonAccessibleLUs, scsiLunMapEntry=scsiLunMapEntry, scsiDscTgtIndex=scsiDscTgtIndex, scsiAuthIntrDevOrPort=scsiAuthIntrDevOrPort, scsiDscLunIdValue=scsiDscLunIdValue, ScsiIdCodeSet=ScsiIdCodeSet, scsiInstVendorVersion=scsiInstVendorVersion, scsiLuWwnName=scsiLuWwnName, scsiTranportSPI=scsiTranportSPI, scsiTransportTypes=scsiTransportTypes, scsiGeneral=scsiGeneral, scsiIntrDevTgtAccessMode=scsiIntrDevTgtAccessMode, ScsiIdentifier=ScsiIdentifier, scsiAuthIntrRowStatus=scsiAuthIntrRowStatus, scsiTgtDevTable=scsiTgtDevTable, scsiTgtDevNumberOfLUs=scsiTgtDevNumberOfLUs, scsiTgtPortTable=scsiTgtPortTable, ScsiNameIdOrZero=ScsiNameIdOrZero, scsiLunMapIndex=scsiLunMapIndex, scsiAttTgtPortTable=scsiAttTgtPortTable, scsiAttTgtPortIndex=scsiAttTgtPortIndex, scsiIntrPrtReadMegaBytes=scsiIntrPrtReadMegaBytes, scsiGroups=scsiGroups, scsiLuTable=scsiLuTable, scsiLuIdAssociation=scsiLuIdAssociation, scsiTargetGroup=scsiTargetGroup, scsiTgtPortName=scsiTgtPortName, scsiAttIntrPrtEntry=scsiAttIntrPrtEntry, scsiAuthIntrWrittenMegaBytes=scsiAuthIntrWrittenMegaBytes, scsiInstScsiNotificationsEnable=scsiInstScsiNotificationsEnable, scsiPortRole=scsiPortRole, scsiPortBusyStatuses=scsiPortBusyStatuses, scsiIntrPrtName=scsiIntrPrtName, scsiIntrPrtHSOutCommands=scsiIntrPrtHSOutCommands, scsiInstSoftwareIndex=scsiInstSoftwareIndex, scsiInitiatorHSStatsGroup=scsiInitiatorHSStatsGroup, ScsiName=ScsiName, scsiDscTgtDevOrPort=scsiDscTgtDevOrPort, scsiAttTgtPortName=scsiAttTgtPortName, scsiDscTgtInCommands=scsiDscTgtInCommands, scsiInstIndex=scsiInstIndex, scsiTrnsptPointer=scsiTrnsptPointer, scsiDscLunIdIndex=scsiDscLunIdIndex, scsiRemoteInitiators=scsiRemoteInitiators, scsiAttIntrPrtTable=scsiAttIntrPrtTable, scsiTrnsptIndex=scsiTrnsptIndex, scsiInitiator=scsiInitiator, ScsiPortIndexValueOrZero=ScsiPortIndexValueOrZero, scsiLuHSInCommands=scsiLuHSInCommands, scsiDeviceRole=scsiDeviceRole, scsiTrnsptTable=scsiTrnsptTable, scsiDeviceTable=scsiDeviceTable, PYSNMP_MODULE_ID=scsiModule, scsiPortEntry=scsiPortEntry, scsiDeviceGroup=scsiDeviceGroup, scsiDscLunIndex=scsiDscLunIndex, scsiAuthIntrAttachedTimes=scsiAuthIntrAttachedTimes, scsiTrnsptType=scsiTrnsptType, scsiLuState=scsiLuState, scsiTgtDeviceStatus=scsiTgtDeviceStatus, scsiAttTgtPortIdentifier=scsiAttTgtPortIdentifier, scsiTgtDevEntry=scsiTgtDevEntry)
