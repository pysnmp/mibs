#
# PySNMP MIB module HIRSCHMANN-DISCOVERY-MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/hirschmann/HIRSCHMANN-DISCOVERY-MGMT-MIB
# Produced by pysmi-1.1.12 at Thu May 30 02:16:51 2024
# On host fv-az775-912 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
hmManagement, = mibBuilder.importSymbols("HIRSCHMANN-MGMT-MIB", "hmManagement")
InetAddressType, InetAddressPrefixLength, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddressPrefixLength", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Unsigned32, MibIdentifier, Bits, Integer32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, ModuleIdentity, iso, Counter32, NotificationType, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "MibIdentifier", "Bits", "Integer32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "ModuleIdentity", "iso", "Counter32", "NotificationType", "Gauge32")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
hmMgmtDiscoveryGroup = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 16, 100))
hmMgmtDiscoveryGroup.setRevisions(('2014-07-07 12:00',))
if mibBuilder.loadTexts: hmMgmtDiscoveryGroup.setLastUpdated('201407071200Z')
if mibBuilder.loadTexts: hmMgmtDiscoveryGroup.setOrganization('Hirschmann Automation and Control GmbH')
hmMgmtDiscoveryStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 16, 100, 1))
hmMgmtDiscoveryCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 16, 100, 2))
hmMgmtDiscMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read-write", 1), ("read-only", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMgmtDiscMode.setStatus('current')
hmMgmtDiscMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMgmtDiscMacAddr.setStatus('current')
hmMgmtDiscIpIntfType = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopback-intf", 1), ("router-intf", 2), ("mgmt-intf", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMgmtDiscIpIntfType.setStatus('current')
hmMgmtDiscSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMgmtDiscSwVersion.setStatus('current')
hmMgmtDiscProductDescr = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMgmtDiscProductDescr.setStatus('current')
hmMgmtDiscCfgUUID = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMgmtDiscCfgUUID.setStatus('current')
hmMgmtDiscCfgProto = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMgmtDiscCfgProto.setStatus('current')
hmMgmtDiscCfgIPAddrType = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 2, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMgmtDiscCfgIPAddrType.setStatus('current')
hmMgmtDiscCfgIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 2, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMgmtDiscCfgIPAddr.setStatus('current')
hmMgmtDiscCfgPrefLen = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 2, 5), InetAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMgmtDiscCfgPrefLen.setStatus('current')
hmMgmtDiscCfgGwIPAddrType = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 2, 6), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMgmtDiscCfgGwIPAddrType.setStatus('current')
hmMgmtDiscCfgGwIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 2, 7), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMgmtDiscCfgGwIPAddr.setStatus('current')
hmMgmtDiscCfgAction = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("activate", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMgmtDiscCfgAction.setStatus('current')
hmMgmtDiscCfgBlinking = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMgmtDiscCfgBlinking.setStatus('current')
mibBuilder.exportSymbols("HIRSCHMANN-DISCOVERY-MGMT-MIB", hmMgmtDiscMacAddr=hmMgmtDiscMacAddr, hmMgmtDiscSwVersion=hmMgmtDiscSwVersion, PYSNMP_MODULE_ID=hmMgmtDiscoveryGroup, hmMgmtDiscoveryCfgGroup=hmMgmtDiscoveryCfgGroup, hmMgmtDiscCfgUUID=hmMgmtDiscCfgUUID, hmMgmtDiscoveryGroup=hmMgmtDiscoveryGroup, hmMgmtDiscoveryStatusGroup=hmMgmtDiscoveryStatusGroup, hmMgmtDiscMode=hmMgmtDiscMode, hmMgmtDiscProductDescr=hmMgmtDiscProductDescr, hmMgmtDiscCfgIPAddr=hmMgmtDiscCfgIPAddr, hmMgmtDiscCfgBlinking=hmMgmtDiscCfgBlinking, hmMgmtDiscCfgProto=hmMgmtDiscCfgProto, hmMgmtDiscCfgIPAddrType=hmMgmtDiscCfgIPAddrType, hmMgmtDiscCfgPrefLen=hmMgmtDiscCfgPrefLen, hmMgmtDiscCfgAction=hmMgmtDiscCfgAction, hmMgmtDiscCfgGwIPAddr=hmMgmtDiscCfgGwIPAddr, hmMgmtDiscIpIntfType=hmMgmtDiscIpIntfType, hmMgmtDiscCfgGwIPAddrType=hmMgmtDiscCfgGwIPAddrType)
