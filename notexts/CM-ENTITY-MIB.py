#
# PySNMP MIB module CM-ENTITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/CM-ENTITY-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 09:38:59 2024
# On host fv-az566-8 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
CmPmIntervalType, TDMFrequencySourceType, RestartType, UsbOperationalMode, VlanId, SecondaryState, AdminState, OperationalState = mibBuilder.importSymbols("CM-COMMON-MIB", "CmPmIntervalType", "TDMFrequencySourceType", "RestartType", "UsbOperationalMode", "VlanId", "SecondaryState", "AdminState", "OperationalState")
CmAutoProvMode, = mibBuilder.importSymbols("CM-SYSTEM-MIB", "CmAutoProvMode")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits, Gauge32, Unsigned32, Counter32, Counter64, NotificationType, ObjectIdentity, IpAddress, iso, Integer32, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits", "Gauge32", "Unsigned32", "Counter32", "Counter64", "NotificationType", "ObjectIdentity", "IpAddress", "iso", "Integer32", "TimeTicks", "MibIdentifier")
RowStatus, DateAndTime, DisplayString, TruthValue, VariablePointer, StorageType, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DateAndTime", "DisplayString", "TruthValue", "VariablePointer", "StorageType", "TextualConvention")
cmEntityMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3))
cmEntityMIB.setRevisions(('2021-01-27 00:00',))
if mibBuilder.loadTexts: cmEntityMIB.setLastUpdated('202101270000Z')
if mibBuilder.loadTexts: cmEntityMIB.setOrganization('ADVA Optical Networking SE')
cmEntityObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1))
cmEntityConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2))
class NeProvAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("accept", 1), ("decline", 2))

class NetworkElementType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57))
    namedValues = NamedValues(("onerackunit", 1), ("hubshelf", 2), ("cle", 3), ("aggregation", 4), ("cpmr", 5), ("ccge101", 6), ("ccge206", 7), ("ccge201", 8), ("ccge201se", 9), ("ccge206f", 10), ("ccge112", 11), ("ccge114", 12), ("ccge206v", 13), ("ccxg210", 14), ("cct1804", 15), ("cct3204", 16), ("ccsyncprobe", 17), ("ccge114h", 18), ("ccge114ph", 19), ("ccge114sh", 20), ("ccge114s", 21), ("sh1pcs", 22), ("ccosa5411", 23), ("ccge112pro", 24), ("ccge112proM", 25), ("ccge114pro", 26), ("ccge114proC", 27), ("ccge114proSH", 28), ("ccge114proCSH", 29), ("ccge114proHE", 30), ("ccge112proH", 31), ("ccxg210c", 32), ("ccosa5420", 33), ("ccosa5421", 34), ("ccge114g", 35), ("ccge114proVmH", 36), ("ccge114proVmCH", 37), ("ccge114proVmCSH", 38), ("ccge101pro", 39), ("ccgo102ProS", 40), ("ccgo102ProSP", 41), ("cccx101Pro30A", 42), ("cccx102Pro30A", 43), ("ccxg116pro", 44), ("ccxg120pro", 45), ("ccge112proVm", 46), ("ccosa5430", 47), ("ccosa5440", 48), ("ge102proh", 49), ("ge102proefmh", 50), ("ccxg116proH", 51), ("ccgo102ProSM", 52), ("ccxg118proSH", 53), ("ccxg118proacSH", 54), ("ccge114proVmSH", 55), ("ccge104", 56), ("ccxg120proSH", 57))

class SlotType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("scu", 1), ("psu", 2), ("fan", 3), ("generic", 4), ("lag", 5), ("nemi", 6), ("stu", 7), ("swf-140g", 8), ("ami", 9), ("sti", 10))

class ShelfType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59))
    namedValues = NamedValues(("onerackunit", 1), ("hubshelf", 2), ("cle", 3), ("aggregation", 4), ("cpmr", 5), ("onerackunit-ge101", 6), ("onerackunit-ge206", 7), ("onerackunit-ge201", 8), ("onerackunit-ge201se", 9), ("onerackunit-ge206f", 10), ("onerackunit-ge112", 11), ("onerackunit-ge114", 12), ("onerackunit-ge206v", 13), ("onerackunit-xg210", 14), ("onerackunit-t1804", 15), ("onerackunit-t3204", 16), ("onerackunit-syncprobe", 17), ("onerackunit-ge114h", 18), ("onerackunit-ge114ph", 19), ("onerackunit-ge114sh", 20), ("onerackunit-ge114s", 21), ("onerackunit-sh1pcs", 22), ("onerackunit-osa5411", 23), ("onerackunitGe112Pro", 24), ("ge112ProM", 25), ("onerackunitGe114Pro", 26), ("onerackunitGe114ProC", 27), ("onerackunitGe114ProSH", 28), ("onerackunitGe114ProCSH", 29), ("onerackunitGe114ProHE", 30), ("onerackunitGe112ProH", 31), ("onerackunit-xg210c", 32), ("onerackunit-osa5420", 33), ("onerackunit-osa5421", 34), ("onerackunit-ge114g", 35), ("onerackunitGe114ProVmH", 36), ("onerackunitGe114ProVmCH", 37), ("onerackunitGe114ProVmCSH", 38), ("ge101pro", 39), ("go102proS", 40), ("go102proSP", 41), ("onerackunit-cx101pro30A", 42), ("onerackunit-cx102pro30A", 43), ("onerackunit-xg116pro", 44), ("onerackunit-xg120pro", 45), ("onerackunitGe112ProVm", 46), ("osa5401", 47), ("osa5405", 48), ("onerackunit-osa5430", 49), ("threerackunit-osa5440", 50), ("ge102proh", 51), ("ge102proefmh", 52), ("onerackunit-xg116proH", 53), ("go102proSM", 54), ("onerackunit-xg118proSH", 55), ("onerackunit-xg118proacSH", 56), ("onerackunitGe114ProVmSH", 57), ("onerackunitGe104", 58), ("onerackunit-xg120proSH", 59))

class ShelfAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("initiateLampTest", 1), ("initiateACO", 2), ("coldRestart", 3))

class PsuType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("ac", 1), ("dc", 2))

class CardType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99))
    namedValues = NamedValues(("none", 1), ("psu", 2), ("fan", 3), ("nemi", 4), ("scu", 5), ("eth-10-100-1000-ntu", 6), ("eth-cpmr", 7), ("eth-ge-101", 8), ("eth-ge-206", 9), ("eth-ge-201", 10), ("eth-ge-201se", 11), ("eth-10-100-1000-nte", 12), ("scu-t", 13), ("eth-ge-206f", 14), ("eth-xg-1x", 15), ("swf-140g", 16), ("stu", 17), ("eth-ge-10s", 18), ("ami", 19), ("sti", 20), ("eth-ge-112", 21), ("eth-ge-114", 22), ("eth-ge-206v", 23), ("eth-ge-4e-cc", 24), ("eth-ge-4s-cc", 25), ("eth-xg-210", 26), ("eth-xg-1x-cc", 27), ("eth-xg-1s-cc", 28), ("stm1-4-et", 29), ("pwe3-ocnstm", 30), ("pwe3-e1t1", 31), ("eth-xg-1x-h", 32), ("eth-ge-10s-h", 33), ("eth-t1804", 34), ("eth-t3204", 35), ("eth-ge-syncprobe", 36), ("eth-ge-8s-cc", 37), ("eth-ge-114h", 38), ("eth-ge-114ph", 39), ("eth-fe-36e", 40), ("eth-ge-114sh", 41), ("eth-ge-114s", 42), ("sti-h", 43), ("stu-h", 44), ("eth-ge-8e-cc", 45), ("eth-sh1pcs", 46), ("eth-osa5411", 47), ("ethGe112Pro", 48), ("ethGe112ProM", 49), ("ethGe114Pro", 50), ("ethGe114ProC", 51), ("ethGe114ProSH", 52), ("ethGe114ProCSH", 53), ("ethGe114ProHE", 54), ("ethGe112ProH", 55), ("eth-xg-210c", 56), ("eth-ge-8sc-cc", 57), ("eth-osa5420", 58), ("eth-osa5421", 59), ("bits-x16", 60), ("eth-ge-114g", 61), ("ethGe114ProVmH", 62), ("ethGe114ProVmCH", 63), ("ethGe114ProVmCSH", 64), ("serverCard", 65), ("eth-ptpv2-osa", 66), ("gnss-osa", 67), ("thc-osa", 68), ("sgc-osa", 69), ("pps-x16", 70), ("clk-x16", 71), ("todAndPps-x16", 72), ("eth-ge-101pro", 73), ("ethgo102proS", 74), ("ethgo102proSP", 75), ("ethcx101pro30A", 76), ("ethcx102pro30A", 77), ("osa-ge-4s", 78), ("eth-xg-116pro", 79), ("eth-xg-120pro", 80), ("ethGe112ProVm", 81), ("eth-osa5401", 82), ("eth-osa5405", 83), ("eth-csm", 84), ("aux-osa", 85), ("bits-x16-enhanced", 86), ("osa-ge-4s-protected", 87), ("eth-ge-102pro-h", 88), ("eth-ge-102pro-efmh", 89), ("eth-xg-116pro-h", 90), ("ethgo102proSM", 91), ("eth-xg-118pro-sh", 92), ("eth-xg-118proac-sh", 93), ("ethGe114ProVmSH", 94), ("ethGe104", 95), ("eth-xg-120pro-sh", 96), ("irig", 97), ("mb-gnss", 98), ("composite-clock", 99))

class CmCPMRLinkLossFwdMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("llfmode-none", 1), ("llfmode-acc2acc", 2), ("llfmode-net2acc", 3), ("llfmode-both", 4))

class PWE3OCNSTMCardMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("stm4", 1), ("oc12", 2), ("stm1", 3), ("oc3", 4))

class PWE3E1T1CardMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("t1-16", 1), ("e1-16", 2))

class PSNEncapsulationMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ethernet", 1), ("mpls", 2))

class LLDPEnableAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 0), ("enableLLDP", 1), ("disableLLDP", 2), ("enableLLDPTxOnly", 3), ("enableLLDPRxOnly", 4))

class LedControlType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("normal", 1), ("status-led-only", 2), ("all-disabled", 3))

class ResyncType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("no-action", 1), ("resync-to-pps", 2))

class StorageStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("formatting", 1), ("empty", 2), ("ready", 3), ("unformatted", 4), ("unmounted", 5))

networkElementTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1), )
if mibBuilder.loadTexts: networkElementTable.setStatus('current')
networkElementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"))
if mibBuilder.loadTexts: networkElementEntry.setStatus('current')
neIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neIndex.setStatus('current')
neName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neName.setStatus('current')
neType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 3), NetworkElementType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neType.setStatus('current')
neContact = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neContact.setStatus('current')
neLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neLocation.setStatus('current')
neDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neDescription.setStatus('current')
neCmdPromptPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neCmdPromptPrefix.setStatus('current')
neAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neAccepted.setStatus('current')
neFromPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 9), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neFromPort.setStatus('current')
neProvAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 10), NeProvAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neProvAction.setStatus('current')
neStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 11), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neStorageType.setStatus('current')
neRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neRowStatus.setStatus('current')
neAutoProvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 13), CmAutoProvMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neAutoProvMode.setStatus('current')
neFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 14), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neFineGrainedPmInterval.setStatus('current')
shelfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2), )
if mibBuilder.loadTexts: shelfTable.setStatus('current')
shelfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"))
if mibBuilder.loadTexts: shelfEntry.setStatus('current')
shelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfIndex.setStatus('current')
shelfEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 2), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfEntityIndex.setStatus('current')
shelfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 3), ShelfType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelfType.setStatus('current')
shelfbackplaneRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfbackplaneRev.setStatus('current')
shelfbackplaneDOM = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfbackplaneDOM.setStatus('current')
shelfbackplaneSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfbackplaneSerialNo.setStatus('current')
shelfAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 7), ShelfAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelfAction.setStatus('current')
shelfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 8), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelfAdminState.setStatus('current')
shelfOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 9), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfOperationalState.setStatus('current')
shelfSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 10), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfSecondaryState.setStatus('current')
shelfMfgSite = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfMfgSite.setStatus('current')
shelfOscillatorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfOscillatorType.setStatus('current')
shelfLedControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 13), LedControlType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelfLedControl.setStatus('current')
slotTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3), )
if mibBuilder.loadTexts: slotTable.setStatus('current')
slotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: slotEntry.setStatus('current')
slotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIndex.setStatus('current')
slotEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 2), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotEntityIndex.setStatus('current')
slotType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 3), SlotType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotType.setStatus('current')
slotCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 4), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardType.setStatus('current')
slotCardUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardUnitName.setStatus('current')
slotCardFormatVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardFormatVersion.setStatus('current')
slotCardCLEICode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardCLEICode.setStatus('current')
slotCardPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardPartNumber.setStatus('current')
slotCardHwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardHwRev.setStatus('current')
slotCardSwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardSwRev.setStatus('current')
slotCardSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardSerialNum.setStatus('current')
slotCardMfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardMfgName.setStatus('current')
slotCardMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardMfgDate.setStatus('current')
slotCardMfgSite = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardMfgSite.setStatus('current')
slotSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 15), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotSecondaryState.setStatus('current')
slotCardPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardPhysicalAddress.setStatus('current')
psuTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4), )
if mibBuilder.loadTexts: psuTable.setStatus('current')
psuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: psuEntry.setStatus('current')
psuEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuEntityIndex.setStatus('current')
psuType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4, 1, 2), PsuType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuType.setStatus('current')
psuAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psuAdminState.setStatus('current')
psuOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuOperationalState.setStatus('current')
psuSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuSecondaryState.setStatus('current')
psuOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuOutputVoltage.setStatus('current')
psuTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuTemperature.setStatus('current')
psuOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuOutputCurrent.setStatus('current')
psuStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4, 1, 9), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: psuStorageType.setStatus('current')
psuRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: psuRowStatus.setStatus('current')
fanTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 5), )
if mibBuilder.loadTexts: fanTable.setStatus('current')
fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: fanEntry.setStatus('current')
fanEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 5, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanEntityIndex.setStatus('current')
fanAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 5, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanAdminState.setStatus('current')
fanOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 5, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanOperationalState.setStatus('current')
fanSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 5, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSecondaryState.setStatus('current')
fanStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 5, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fanStorageType.setStatus('current')
fanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fanRowStatus.setStatus('current')
scuTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6), )
if mibBuilder.loadTexts: scuTable.setStatus('current')
scuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: scuEntry.setStatus('current')
scuEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuEntityIndex.setStatus('current')
scuAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scuAdminState.setStatus('current')
scuOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuOperationalState.setStatus('current')
scuSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuSecondaryState.setStatus('current')
scuVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuVoltage.setStatus('current')
scuTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuTemperature.setStatus('current')
scuRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scuRestartAction.setStatus('current')
scuStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scuStorageType.setStatus('current')
scuRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scuRowStatus.setStatus('current')
scuFlashModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuFlashModelNum.setStatus('current')
scuFlashFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuFlashFirmwareRev.setStatus('current')
scuFlashSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuFlashSerialNum.setStatus('current')
nemiTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7), )
if mibBuilder.loadTexts: nemiTable.setStatus('current')
nemiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: nemiEntry.setStatus('current')
nemiEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemiEntityIndex.setStatus('current')
nemiAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nemiAdminState.setStatus('current')
nemiOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemiOperationalState.setStatus('current')
nemiSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemiSecondaryState.setStatus('current')
nemiVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemiVoltage.setStatus('current')
nemiTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemiTemperature.setStatus('current')
nemiRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nemiRestartAction.setStatus('current')
nemiStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nemiStorageType.setStatus('current')
nemiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nemiRowStatus.setStatus('current')
nemiForceOffLineAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nemiForceOffLineAction.setStatus('current')
nemiFlashModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemiFlashModelNum.setStatus('current')
nemiFlashFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemiFlashFirmwareRev.setStatus('current')
nemiFlashSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemiFlashSerialNum.setStatus('current')
ethernetNTUCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8), )
if mibBuilder.loadTexts: ethernetNTUCardTable.setStatus('current')
ethernetNTUCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTUCardEntry.setStatus('current')
ethernetNTUCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTUCardEntityIndex.setStatus('current')
ethernetNTUCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTUCardAdminState.setStatus('current')
ethernetNTUCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTUCardOperationalState.setStatus('current')
ethernetNTUCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTUCardSecondaryState.setStatus('current')
ethernetNTUCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTUCardVoltage.setStatus('current')
ethernetNTUCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTUCardTemperature.setStatus('current')
ethernetNTUCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTUCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTUCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTUCardRestartAction.setStatus('current')
ethernetNTUCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8, 1, 9), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTUCardStorageType.setStatus('current')
ethernetNTUCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTUCardRowStatus.setStatus('current')
ethernetCPMRCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9), )
if mibBuilder.loadTexts: ethernetCPMRCardTable.setStatus('current')
ethernetCPMRCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetCPMRCardEntry.setStatus('current')
ethernetCPMRCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCPMRCardEntityIndex.setStatus('current')
ethernetCPMRCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetCPMRCardAdminState.setStatus('current')
ethernetCPMRCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCPMRCardOperationalState.setStatus('current')
ethernetCPMRCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCPMRCardSecondaryState.setStatus('current')
ethernetCPMRCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCPMRCardVoltage.setStatus('current')
ethernetCPMRCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCPMRCardTemperature.setStatus('current')
ethernetCPMRCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetCPMRCardRestartAction.setStatus('current')
ethernetCPMRCardPSU1State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 8), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCPMRCardPSU1State.setStatus('current')
ethernetCPMRCardPSU2State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 9), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCPMRCardPSU2State.setStatus('current')
ethernetCPMRCardFAN1State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 10), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCPMRCardFAN1State.setStatus('current')
ethernetCPMRCardFAN2State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 11), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCPMRCardFAN2State.setStatus('current')
ethernetCPMRCardPsuType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 12), PsuType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCPMRCardPsuType.setStatus('current')
ethernetCPMRCardLLFMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 13), CmCPMRLinkLossFwdMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCPMRCardLLFMode.setStatus('current')
ethernetCPMRCardLLFModeAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 14), CmCPMRLinkLossFwdMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetCPMRCardLLFModeAction.setStatus('current')
ethernetNTEGE101CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 10), )
if mibBuilder.loadTexts: ethernetNTEGE101CardTable.setStatus('current')
ethernetNTEGE101CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 10, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE101CardEntry.setStatus('current')
ethernetNTEGE101CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 10, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE101CardEntityIndex.setStatus('current')
ethernetNTEGE101CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 10, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE101CardAdminState.setStatus('current')
ethernetNTEGE101CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 10, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE101CardOperationalState.setStatus('current')
ethernetNTEGE101CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 10, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE101CardSecondaryState.setStatus('current')
ethernetNTEGE101CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE101CardVoltage.setStatus('current')
ethernetNTEGE101CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE101CardTemperature.setStatus('current')
ethernetNTEGE101CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 10, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE101CardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE101CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 10, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE101CardRestartAction.setStatus('current')
ethernetNTEGE206CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 11), )
if mibBuilder.loadTexts: ethernetNTEGE206CardTable.setStatus('current')
ethernetNTEGE206CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 11, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE206CardEntry.setStatus('current')
ethernetNTEGE206CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 11, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206CardEntityIndex.setStatus('current')
ethernetNTEGE206CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 11, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206CardAdminState.setStatus('current')
ethernetNTEGE206CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 11, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206CardOperationalState.setStatus('current')
ethernetNTEGE206CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 11, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206CardSecondaryState.setStatus('current')
ethernetNTEGE206CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206CardVoltage.setStatus('current')
ethernetNTEGE206CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206CardTemperature.setStatus('current')
ethernetNTEGE206CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 11, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206CardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE206CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 11, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206CardRestartAction.setStatus('current')
ethernetNTEGE206CardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 11, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206CardFineGrainedPmInterval.setStatus('current')
pseudoWireE3CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12), )
if mibBuilder.loadTexts: pseudoWireE3CardTable.setStatus('obsolete')
pseudoWireE3CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: pseudoWireE3CardEntry.setStatus('obsolete')
pseudoWireE3CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireE3CardEntityIndex.setStatus('obsolete')
pseudoWireE3CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE3CardAdminState.setStatus('obsolete')
pseudoWireE3CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireE3CardOperationalState.setStatus('obsolete')
pseudoWireE3CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireE3CardSecondaryState.setStatus('obsolete')
pseudoWireE3CardIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE3CardIpAddress.setStatus('obsolete')
pseudoWireE3CardIpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE3CardIpNetmask.setStatus('obsolete')
pseudoWireE3CardIpGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE3CardIpGateway.setStatus('obsolete')
pseudoWireE3CardDhcpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE3CardDhcpEnabled.setStatus('obsolete')
pseudoWireE3CardMgmtVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1, 9), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE3CardMgmtVlanId.setStatus('obsolete')
pseudoWireE3CardTimeOfDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1, 10), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE3CardTimeOfDay.setStatus('obsolete')
pseudoWireE3CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1, 11), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE3CardRestartAction.setStatus('obsolete')
scuTTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 13), )
if mibBuilder.loadTexts: scuTTable.setStatus('current')
scuTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 13, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: scuTEntry.setStatus('current')
scuTEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 13, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuTEntityIndex.setStatus('current')
scuTAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 13, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scuTAdminState.setStatus('current')
scuTOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 13, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuTOperationalState.setStatus('current')
scuTSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 13, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuTSecondaryState.setStatus('current')
scuTVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuTVoltage.setStatus('current')
scuTTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuTTemperature.setStatus('current')
scuTRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 13, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scuTRestartAction.setStatus('current')
scuTStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 13, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scuTStorageType.setStatus('current')
scuTRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 13, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scuTRowStatus.setStatus('current')
ethernetNTECardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14), )
if mibBuilder.loadTexts: ethernetNTECardTable.setStatus('current')
ethernetNTECardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTECardEntry.setStatus('current')
ethernetNTECardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECardEntityIndex.setStatus('current')
ethernetNTECardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECardAdminState.setStatus('current')
ethernetNTECardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECardOperationalState.setStatus('current')
ethernetNTECardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECardSecondaryState.setStatus('current')
ethernetNTECardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECardVoltage.setStatus('current')
ethernetNTECardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECardTemperature.setStatus('current')
ethernetNTECardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTECardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECardRestartAction.setStatus('current')
ethernetNTECardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14, 1, 9), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTECardStorageType.setStatus('current')
ethernetNTECardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTECardRowStatus.setStatus('current')
ethernetNTEGE201CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 15), )
if mibBuilder.loadTexts: ethernetNTEGE201CardTable.setStatus('current')
ethernetNTEGE201CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 15, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE201CardEntry.setStatus('current')
ethernetNTEGE201CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 15, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE201CardEntityIndex.setStatus('current')
ethernetNTEGE201CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 15, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE201CardAdminState.setStatus('current')
ethernetNTEGE201CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 15, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE201CardOperationalState.setStatus('current')
ethernetNTEGE201CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 15, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE201CardSecondaryState.setStatus('current')
ethernetNTEGE201CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 15, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE201CardVoltage.setStatus('current')
ethernetNTEGE201CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 15, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE201CardTemperature.setStatus('current')
ethernetNTEGE201CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 15, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE201CardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE201CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 15, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE201CardRestartAction.setStatus('current')
ethernetNTEGE201CardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 15, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE201CardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE201SyncECardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 16), )
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardTable.setStatus('current')
ethernetNTEGE201SyncECardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 16, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardEntry.setStatus('current')
ethernetNTEGE201SyncECardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 16, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardEntityIndex.setStatus('current')
ethernetNTEGE201SyncECardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 16, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardAdminState.setStatus('current')
ethernetNTEGE201SyncECardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 16, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardOperationalState.setStatus('current')
ethernetNTEGE201SyncECardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 16, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardSecondaryState.setStatus('current')
ethernetNTEGE201SyncECardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardVoltage.setStatus('current')
ethernetNTEGE201SyncECardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 16, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardTemperature.setStatus('current')
ethernetNTEGE201SyncECardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 16, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE201SyncECardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 16, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardRestartAction.setStatus('current')
ethernetNTEGE201SyncECardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 16, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE206FCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 17), )
if mibBuilder.loadTexts: ethernetNTEGE206FCardTable.setStatus('current')
ethernetNTEGE206FCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 17, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE206FCardEntry.setStatus('current')
ethernetNTEGE206FCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 17, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206FCardEntityIndex.setStatus('current')
ethernetNTEGE206FCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 17, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206FCardAdminState.setStatus('current')
ethernetNTEGE206FCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 17, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206FCardOperationalState.setStatus('current')
ethernetNTEGE206FCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 17, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206FCardSecondaryState.setStatus('current')
ethernetNTEGE206FCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 17, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206FCardVoltage.setStatus('current')
ethernetNTEGE206FCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206FCardTemperature.setStatus('current')
ethernetNTEGE206FCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 17, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206FCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE206FCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 17, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206FCardRestartAction.setStatus('current')
ethernetNTEGE206FCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 17, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206FCardFineGrainedPmInterval.setStatus('current')
ethernet1x10GCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18), )
if mibBuilder.loadTexts: ethernet1x10GCardTable.setStatus('current')
ethernet1x10GCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernet1x10GCardEntry.setStatus('current')
ethernet1x10GCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet1x10GCardEntityIndex.setStatus('current')
ethernet1x10GCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet1x10GCardAdminState.setStatus('current')
ethernet1x10GCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet1x10GCardOperationalState.setStatus('current')
ethernet1x10GCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet1x10GCardSecondaryState.setStatus('current')
ethernet1x10GCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet1x10GCardTemperature.setStatus('current')
ethernet1x10GCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet1x10GCardSnmpDyingGaspEnabled.setStatus('current')
ethernet1x10GCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet1x10GCardRestartAction.setStatus('current')
ethernet1x10GCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernet1x10GCardStorageType.setStatus('current')
ethernet1x10GCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernet1x10GCardRowStatus.setStatus('current')
ethernet1x10GCardForceOffLineAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet1x10GCardForceOffLineAction.setStatus('current')
ethernet10x1GCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19), )
if mibBuilder.loadTexts: ethernet10x1GCardTable.setStatus('current')
ethernet10x1GCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernet10x1GCardEntry.setStatus('current')
ethernet10x1GCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet10x1GCardEntityIndex.setStatus('current')
ethernet10x1GCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet10x1GCardAdminState.setStatus('current')
ethernet10x1GCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet10x1GCardOperationalState.setStatus('current')
ethernet10x1GCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet10x1GCardSecondaryState.setStatus('current')
ethernet10x1GCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet10x1GCardTemperature.setStatus('current')
ethernet10x1GCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet10x1GCardSnmpDyingGaspEnabled.setStatus('current')
ethernet10x1GCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet10x1GCardRestartAction.setStatus('current')
ethernet10x1GCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernet10x1GCardStorageType.setStatus('current')
ethernet10x1GCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernet10x1GCardRowStatus.setStatus('current')
ethernet10x1GCardForceOffLineAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet10x1GCardForceOffLineAction.setStatus('current')
ethernetSWFCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 20), )
if mibBuilder.loadTexts: ethernetSWFCardTable.setStatus('current')
ethernetSWFCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 20, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetSWFCardEntry.setStatus('current')
ethernetSWFCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 20, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetSWFCardEntityIndex.setStatus('current')
ethernetSWFCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 20, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetSWFCardAdminState.setStatus('current')
ethernetSWFCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 20, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetSWFCardOperationalState.setStatus('current')
ethernetSWFCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 20, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetSWFCardSecondaryState.setStatus('current')
ethernetSWFCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 20, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetSWFCardTemperature.setStatus('current')
ethernetSWFCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 20, 1, 6), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetSWFCardRestartAction.setStatus('current')
ethernetSWFCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 20, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetSWFCardStorageType.setStatus('current')
ethernetSWFCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 20, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetSWFCardRowStatus.setStatus('current')
ethernetSWFCardForceOffLineAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 20, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetSWFCardForceOffLineAction.setStatus('current')
stuCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 21), )
if mibBuilder.loadTexts: stuCardTable.setStatus('current')
stuCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 21, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: stuCardEntry.setStatus('current')
stuCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 21, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCardEntityIndex.setStatus('current')
stuCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 21, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuCardAdminState.setStatus('current')
stuCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 21, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCardOperationalState.setStatus('current')
stuCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 21, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCardSecondaryState.setStatus('current')
stuCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 21, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCardTemperature.setStatus('current')
stuCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 21, 1, 6), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuCardRestartAction.setStatus('current')
stuCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 21, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stuCardStorageType.setStatus('current')
stuCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 21, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stuCardRowStatus.setStatus('current')
stuCardForceOffLineAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 21, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuCardForceOffLineAction.setStatus('current')
amiTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 22), )
if mibBuilder.loadTexts: amiTable.setStatus('current')
amiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 22, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: amiEntry.setStatus('current')
amiEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 22, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amiEntityIndex.setStatus('current')
amiAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 22, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amiAdminState.setStatus('current')
amiOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 22, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amiOperationalState.setStatus('current')
amiSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 22, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amiSecondaryState.setStatus('current')
amiTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 22, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amiTemperature.setStatus('current')
amiRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 22, 1, 6), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amiRestartAction.setStatus('current')
stiTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 23), )
if mibBuilder.loadTexts: stiTable.setStatus('current')
stiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 23, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: stiEntry.setStatus('current')
stiEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 23, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stiEntityIndex.setStatus('current')
stiAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 23, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stiAdminState.setStatus('current')
stiOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 23, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stiOperationalState.setStatus('current')
stiSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 23, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stiSecondaryState.setStatus('current')
stiTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 23, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stiTemperature.setStatus('current')
stiStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 23, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiStorageType.setStatus('current')
stiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 23, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiRowStatus.setStatus('current')
f3UsbHostTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24), )
if mibBuilder.loadTexts: f3UsbHostTable.setStatus('current')
f3UsbHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-ENTITY-MIB", "f3UsbHostIndex"))
if mibBuilder.loadTexts: f3UsbHostEntry.setStatus('current')
f3UsbHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostIndex.setStatus('current')
f3UsbHostEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 2), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostEntityIndex.setStatus('current')
f3UsbHostUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostUnitName.setStatus('current')
f3UsbHostFormatVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostFormatVersion.setStatus('current')
f3UsbHostCLEICode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostCLEICode.setStatus('current')
f3UsbHostPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostPartNumber.setStatus('current')
f3UsbHostHwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostHwRev.setStatus('current')
f3UsbHostSwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostSwRev.setStatus('current')
f3UsbHostSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostSerialNum.setStatus('current')
f3UsbHostMfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostMfgName.setStatus('current')
f3UsbHostMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostMfgDate.setStatus('current')
f3UsbHostMfgSite = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostMfgSite.setStatus('current')
f3UsbHostSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 13), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostSecondaryState.setStatus('current')
f3UsbHostPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostPhysicalAddress.setStatus('current')
f3UsbHostMuxOperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 15), UsbOperationalMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3UsbHostMuxOperationalMode.setStatus('current')
ethernetNTEGE112CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25), )
if mibBuilder.loadTexts: ethernetNTEGE112CardTable.setStatus('current')
ethernetNTEGE112CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE112CardEntry.setStatus('current')
class SwitchPortAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("not-applicable", 0), ("switch", 1))

ethernetNTEGE112CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112CardEntityIndex.setStatus('current')
ethernetNTEGE112CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112CardAdminState.setStatus('current')
ethernetNTEGE112CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112CardOperationalState.setStatus('current')
ethernetNTEGE112CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112CardSecondaryState.setStatus('current')
ethernetNTEGE112CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112CardVoltage.setStatus('current')
ethernetNTEGE112CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112CardTemperature.setStatus('current')
ethernetNTEGE112CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112CardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE112CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112CardRestartAction.setStatus('current')
ethernetNTEGE112CardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112CardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE112CardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE112CardSwitchPortActionPort.setStatus('current')
ethernetNTEGE112CardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112CardSwitchPortAction.setStatus('current')
ethernetNTEGE114CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26), )
if mibBuilder.loadTexts: ethernetNTEGE114CardTable.setStatus('current')
ethernetNTEGE114CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114CardEntry.setStatus('current')
ethernetNTEGE114CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114CardEntityIndex.setStatus('current')
ethernetNTEGE114CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114CardAdminState.setStatus('current')
ethernetNTEGE114CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114CardOperationalState.setStatus('current')
ethernetNTEGE114CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114CardSecondaryState.setStatus('current')
ethernetNTEGE114CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114CardVoltage.setStatus('current')
ethernetNTEGE114CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114CardTemperature.setStatus('current')
ethernetNTEGE114CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114CardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE114CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114CardRestartAction.setStatus('current')
ethernetNTEGE114CardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114CardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE114CardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114CardSwitchPortActionPort.setStatus('current')
ethernetNTEGE114CardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114CardSwitchPortAction.setStatus('current')
ethernetNTEGE206VCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 27), )
if mibBuilder.loadTexts: ethernetNTEGE206VCardTable.setStatus('current')
ethernetNTEGE206VCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 27, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE206VCardEntry.setStatus('current')
ethernetNTEGE206VCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 27, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206VCardEntityIndex.setStatus('current')
ethernetNTEGE206VCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 27, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206VCardAdminState.setStatus('current')
ethernetNTEGE206VCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 27, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206VCardOperationalState.setStatus('current')
ethernetNTEGE206VCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 27, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206VCardSecondaryState.setStatus('current')
ethernetNTEGE206VCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 27, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206VCardVoltage.setStatus('current')
ethernetNTEGE206VCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 27, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206VCardTemperature.setStatus('current')
ethernetNTEGE206VCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 27, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206VCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE206VCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 27, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206VCardRestartAction.setStatus('current')
ethernetNTEGE206VCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 27, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206VCardFineGrainedPmInterval.setStatus('current')
ethernetGE4SCCCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 28), )
if mibBuilder.loadTexts: ethernetGE4SCCCardTable.setStatus('current')
ethernetGE4SCCCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 28, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetGE4SCCCardEntry.setStatus('current')
ethernetGE4SCCCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 28, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE4SCCCardEntityIndex.setStatus('current')
ethernetGE4SCCCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 28, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetGE4SCCCardAdminState.setStatus('current')
ethernetGE4SCCCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 28, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE4SCCCardOperationalState.setStatus('current')
ethernetGE4SCCCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 28, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE4SCCCardSecondaryState.setStatus('current')
ethernetGE4SCCCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 28, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE4SCCCardVoltage.setStatus('current')
ethernetGE4SCCCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 28, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE4SCCCardTemperature.setStatus('current')
ethernetGE4SCCCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 28, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetGE4SCCCardRestartAction.setStatus('current')
ethernetGE4SCCCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 28, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetGE4SCCCardStorageType.setStatus('current')
ethernetGE4SCCCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 28, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetGE4SCCCardRowStatus.setStatus('current')
ethernetGE4ECCCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 29), )
if mibBuilder.loadTexts: ethernetGE4ECCCardTable.setStatus('current')
ethernetGE4ECCCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 29, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetGE4ECCCardEntry.setStatus('current')
ethernetGE4ECCCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 29, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE4ECCCardEntityIndex.setStatus('current')
ethernetGE4ECCCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 29, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetGE4ECCCardAdminState.setStatus('current')
ethernetGE4ECCCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 29, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE4ECCCardOperationalState.setStatus('current')
ethernetGE4ECCCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 29, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE4ECCCardSecondaryState.setStatus('current')
ethernetGE4ECCCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 29, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE4ECCCardVoltage.setStatus('current')
ethernetGE4ECCCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 29, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE4ECCCardTemperature.setStatus('current')
ethernetGE4ECCCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 29, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetGE4ECCCardRestartAction.setStatus('current')
ethernetGE4ECCCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 29, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetGE4ECCCardStorageType.setStatus('current')
ethernetGE4ECCCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 29, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetGE4ECCCardRowStatus.setStatus('current')
ethernetNTEXG210CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 30), )
if mibBuilder.loadTexts: ethernetNTEXG210CardTable.setStatus('current')
ethernetNTEXG210CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 30, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEXG210CardEntry.setStatus('current')
ethernetNTEXG210CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 30, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG210CardEntityIndex.setStatus('current')
ethernetNTEXG210CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 30, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG210CardAdminState.setStatus('current')
ethernetNTEXG210CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 30, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG210CardOperationalState.setStatus('current')
ethernetNTEXG210CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 30, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG210CardSecondaryState.setStatus('current')
ethernetNTEXG210CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 30, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG210CardVoltage.setStatus('current')
ethernetNTEXG210CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 30, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG210CardTemperature.setStatus('current')
ethernetNTEXG210CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 30, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG210CardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEXG210CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 30, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG210CardRestartAction.setStatus('current')
ethernetNTEXG210CardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 30, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG210CardFineGrainedPmInterval.setStatus('current')
ethernetXG1XCCCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 31), )
if mibBuilder.loadTexts: ethernetXG1XCCCardTable.setStatus('current')
ethernetXG1XCCCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 31, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetXG1XCCCardEntry.setStatus('current')
ethernetXG1XCCCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 31, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetXG1XCCCardEntityIndex.setStatus('current')
ethernetXG1XCCCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 31, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetXG1XCCCardAdminState.setStatus('current')
ethernetXG1XCCCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 31, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetXG1XCCCardOperationalState.setStatus('current')
ethernetXG1XCCCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 31, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetXG1XCCCardSecondaryState.setStatus('current')
ethernetXG1XCCCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 31, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetXG1XCCCardVoltage.setStatus('current')
ethernetXG1XCCCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 31, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetXG1XCCCardTemperature.setStatus('current')
ethernetXG1XCCCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 31, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetXG1XCCCardRestartAction.setStatus('current')
ethernetXG1XCCCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 31, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetXG1XCCCardStorageType.setStatus('current')
ethernetXG1XCCCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 31, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetXG1XCCCardRowStatus.setStatus('current')
ethernetXG1SCCCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 32), )
if mibBuilder.loadTexts: ethernetXG1SCCCardTable.setStatus('current')
ethernetXG1SCCCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 32, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetXG1SCCCardEntry.setStatus('current')
ethernetXG1SCCCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 32, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetXG1SCCCardEntityIndex.setStatus('current')
ethernetXG1SCCCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 32, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetXG1SCCCardAdminState.setStatus('current')
ethernetXG1SCCCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 32, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetXG1SCCCardOperationalState.setStatus('current')
ethernetXG1SCCCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 32, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetXG1SCCCardSecondaryState.setStatus('current')
ethernetXG1SCCCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 32, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetXG1SCCCardVoltage.setStatus('current')
ethernetXG1SCCCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 32, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetXG1SCCCardTemperature.setStatus('current')
ethernetXG1SCCCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 32, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetXG1SCCCardRestartAction.setStatus('current')
ethernetXG1SCCCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 32, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetXG1SCCCardStorageType.setStatus('current')
ethernetXG1SCCCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 32, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetXG1SCCCardRowStatus.setStatus('current')
class PortCarrierType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("not-applicable", 0), ("t1", 1), ("e1", 2), ("t3", 3), ("e3", 4), ("oc3", 5), ("oc12", 6), ("stm1", 7), ("stm4", 8))

ethernetOverOCSTMCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33), )
if mibBuilder.loadTexts: ethernetOverOCSTMCardTable.setStatus('current')
ethernetOverOCSTMCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetOverOCSTMCardEntry.setStatus('current')
ethernetOverOCSTMCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOverOCSTMCardEntityIndex.setStatus('current')
ethernetOverOCSTMCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetOverOCSTMCardAdminState.setStatus('current')
ethernetOverOCSTMCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOverOCSTMCardOperationalState.setStatus('current')
ethernetOverOCSTMCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOverOCSTMCardSecondaryState.setStatus('current')
ethernetOverOCSTMCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOverOCSTMCardTemperature.setStatus('current')
ethernetOverOCSTMCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetOverOCSTMCardSnmpDyingGaspEnabled.setStatus('current')
ethernetOverOCSTMCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetOverOCSTMCardRestartAction.setStatus('current')
ethernetOverOCSTMCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetOverOCSTMCardStorageType.setStatus('current')
ethernetOverOCSTMCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetOverOCSTMCardRowStatus.setStatus('current')
ethernetOverOCSTMCardForceOffLineAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetOverOCSTMCardForceOffLineAction.setStatus('current')
ethernetOverOCSTMCardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1, 11), PortCarrierType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetOverOCSTMCardMode.setStatus('current')
pseudoWireOcnStmCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34), )
if mibBuilder.loadTexts: pseudoWireOcnStmCardTable.setStatus('current')
pseudoWireOcnStmCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: pseudoWireOcnStmCardEntry.setStatus('current')
pseudoWireOcnStmCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireOcnStmCardEntityIndex.setStatus('current')
pseudoWireOcnStmCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireOcnStmCardAdminState.setStatus('current')
pseudoWireOcnStmCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireOcnStmCardOperationalState.setStatus('current')
pseudoWireOcnStmCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireOcnStmCardSecondaryState.setStatus('current')
pseudoWireOcnStmCardIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireOcnStmCardIpAddress.setStatus('current')
pseudoWireOcnStmCardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 6), PWE3OCNSTMCardMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireOcnStmCardMode.setStatus('current')
pseudoWireOcnStmCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireOcnStmCardVoltage.setStatus('current')
pseudoWireOcnStmCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireOcnStmCardTemperature.setStatus('current')
pseudoWireOcnStmCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 9), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireOcnStmCardRestartAction.setStatus('current')
pseudoWireOcnStmCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 10), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pseudoWireOcnStmCardStorageType.setStatus('current')
pseudoWireOcnStmCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pseudoWireOcnStmCardRowStatus.setStatus('current')
pseudoWireOcnStmCardPSNEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 12), PSNEncapsulationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireOcnStmCardPSNEncapsulation.setStatus('current')
pseudoWireOcnStmCardFreqSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 13), TDMFrequencySourceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireOcnStmCardFreqSourceType.setStatus('current')
pseudoWireOcnStmCardFreqSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 14), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireOcnStmCardFreqSource.setStatus('current')
pseudoWireOcnStmCardForceOffLineAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireOcnStmCardForceOffLineAction.setStatus('current')
pseudoWireE1T1CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35), )
if mibBuilder.loadTexts: pseudoWireE1T1CardTable.setStatus('current')
pseudoWireE1T1CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: pseudoWireE1T1CardEntry.setStatus('current')
pseudoWireE1T1CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireE1T1CardEntityIndex.setStatus('current')
pseudoWireE1T1CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE1T1CardAdminState.setStatus('current')
pseudoWireE1T1CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireE1T1CardOperationalState.setStatus('current')
pseudoWireE1T1CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireE1T1CardSecondaryState.setStatus('current')
pseudoWireE1T1CardIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE1T1CardIpAddress.setStatus('current')
pseudoWireE1T1CardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 6), PWE3E1T1CardMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE1T1CardMode.setStatus('current')
pseudoWireE1T1CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireE1T1CardVoltage.setStatus('current')
pseudoWireE1T1CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireE1T1CardTemperature.setStatus('current')
pseudoWireE1T1CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 9), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE1T1CardRestartAction.setStatus('current')
pseudoWireE1T1CardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 10), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pseudoWireE1T1CardStorageType.setStatus('current')
pseudoWireE1T1CardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pseudoWireE1T1CardRowStatus.setStatus('current')
pseudoWireE1T1CardPSNEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 12), PSNEncapsulationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE1T1CardPSNEncapsulation.setStatus('current')
ethernet1x10GHighPerCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36), )
if mibBuilder.loadTexts: ethernet1x10GHighPerCardTable.setStatus('current')
ethernet1x10GHighPerCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernet1x10GHighPerCardEntry.setStatus('current')
ethernet1x10GHighPerCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet1x10GHighPerCardEntityIndex.setStatus('current')
ethernet1x10GHighPerCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet1x10GHighPerCardAdminState.setStatus('current')
ethernet1x10GHighPerCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet1x10GHighPerCardOperationalState.setStatus('current')
ethernet1x10GHighPerCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet1x10GHighPerCardSecondaryState.setStatus('current')
ethernet1x10GHighPerCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet1x10GHighPerCardTemperature.setStatus('current')
ethernet1x10GHighPerCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet1x10GHighPerCardSnmpDyingGaspEnabled.setStatus('current')
ethernet1x10GHighPerCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet1x10GHighPerCardRestartAction.setStatus('current')
ethernet1x10GHighPerCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernet1x10GHighPerCardStorageType.setStatus('current')
ethernet1x10GHighPerCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernet1x10GHighPerCardRowStatus.setStatus('current')
ethernet1x10GHighPerCardForceOffLineAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet1x10GHighPerCardForceOffLineAction.setStatus('current')
ethernet10x1GHighPerCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37), )
if mibBuilder.loadTexts: ethernet10x1GHighPerCardTable.setStatus('current')
ethernet10x1GHighPerCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernet10x1GHighPerCardEntry.setStatus('current')
ethernet10x1GHighPerCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet10x1GHighPerCardEntityIndex.setStatus('current')
ethernet10x1GHighPerCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet10x1GHighPerCardAdminState.setStatus('current')
ethernet10x1GHighPerCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet10x1GHighPerCardOperationalState.setStatus('current')
ethernet10x1GHighPerCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet10x1GHighPerCardSecondaryState.setStatus('current')
ethernet10x1GHighPerCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet10x1GHighPerCardTemperature.setStatus('current')
ethernet10x1GHighPerCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet10x1GHighPerCardSnmpDyingGaspEnabled.setStatus('current')
ethernet10x1GHighPerCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet10x1GHighPerCardRestartAction.setStatus('current')
ethernet10x1GHighPerCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernet10x1GHighPerCardStorageType.setStatus('current')
ethernet10x1GHighPerCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernet10x1GHighPerCardRowStatus.setStatus('current')
ethernet10x1GHighPerCardForceOffLineAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet10x1GHighPerCardForceOffLineAction.setStatus('current')
ethernetNTET1804CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38), )
if mibBuilder.loadTexts: ethernetNTET1804CardTable.setStatus('current')
ethernetNTET1804CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTET1804CardEntry.setStatus('current')
ethernetNTET1804CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTET1804CardEntityIndex.setStatus('current')
ethernetNTET1804CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTET1804CardAdminState.setStatus('current')
ethernetNTET1804CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTET1804CardOperationalState.setStatus('current')
ethernetNTET1804CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTET1804CardSecondaryState.setStatus('current')
ethernetNTET1804CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTET1804CardVoltage.setStatus('current')
ethernetNTET1804CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTET1804CardTemperature.setStatus('current')
ethernetNTET1804CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTET1804CardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTET1804CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTET1804CardRestartAction.setStatus('current')
ethernetNTET1804CardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTET1804CardFineGrainedPmInterval.setStatus('current')
ethernetNTET1804CardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38, 1, 10), PortCarrierType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTET1804CardMode.setStatus('current')
ethernetNTET3204CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39), )
if mibBuilder.loadTexts: ethernetNTET3204CardTable.setStatus('current')
ethernetNTET3204CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTET3204CardEntry.setStatus('current')
ethernetNTET3204CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTET3204CardEntityIndex.setStatus('current')
ethernetNTET3204CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTET3204CardAdminState.setStatus('current')
ethernetNTET3204CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTET3204CardOperationalState.setStatus('current')
ethernetNTET3204CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTET3204CardSecondaryState.setStatus('current')
ethernetNTET3204CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTET3204CardVoltage.setStatus('current')
ethernetNTET3204CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTET3204CardTemperature.setStatus('current')
ethernetNTET3204CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTET3204CardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTET3204CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTET3204CardRestartAction.setStatus('current')
ethernetNTET3204CardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTET3204CardFineGrainedPmInterval.setStatus('current')
ethernetNTET3204CardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39, 1, 10), PortCarrierType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTET3204CardMode.setStatus('current')
ethernetNTEGESyncProbeCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 40), )
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardTable.setStatus('current')
ethernetNTEGESyncProbeCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 40, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardEntry.setStatus('current')
ethernetNTEGESyncProbeCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 40, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardEntityIndex.setStatus('current')
ethernetNTEGESyncProbeCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 40, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardAdminState.setStatus('current')
ethernetNTEGESyncProbeCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 40, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardOperationalState.setStatus('current')
ethernetNTEGESyncProbeCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 40, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardSecondaryState.setStatus('current')
ethernetNTEGESyncProbeCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 40, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardVoltage.setStatus('current')
ethernetNTEGESyncProbeCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 40, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardTemperature.setStatus('current')
ethernetNTEGESyncProbeCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 40, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGESyncProbeCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 40, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardRestartAction.setStatus('current')
ethernetNTEGESyncProbeCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 40, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardFineGrainedPmInterval.setStatus('current')
ethernetGE8SCCCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 41), )
if mibBuilder.loadTexts: ethernetGE8SCCCardTable.setStatus('current')
ethernetGE8SCCCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 41, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetGE8SCCCardEntry.setStatus('current')
ethernetGE8SCCCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 41, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8SCCCardEntityIndex.setStatus('current')
ethernetGE8SCCCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 41, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetGE8SCCCardAdminState.setStatus('current')
ethernetGE8SCCCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 41, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8SCCCardOperationalState.setStatus('current')
ethernetGE8SCCCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 41, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8SCCCardSecondaryState.setStatus('current')
ethernetGE8SCCCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 41, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8SCCCardVoltage.setStatus('current')
ethernetGE8SCCCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 41, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8SCCCardTemperature.setStatus('current')
ethernetGE8SCCCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 41, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetGE8SCCCardRestartAction.setStatus('current')
ethernetGE8SCCCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 41, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetGE8SCCCardStorageType.setStatus('current')
ethernetGE8SCCCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 41, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetGE8SCCCardRowStatus.setStatus('current')
ethernetNTEGE114HCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42), )
if mibBuilder.loadTexts: ethernetNTEGE114HCardTable.setStatus('current')
ethernetNTEGE114HCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114HCardEntry.setStatus('current')
ethernetNTEGE114HCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114HCardEntityIndex.setStatus('current')
ethernetNTEGE114HCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114HCardAdminState.setStatus('current')
ethernetNTEGE114HCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114HCardOperationalState.setStatus('current')
ethernetNTEGE114HCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114HCardSecondaryState.setStatus('current')
ethernetNTEGE114HCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114HCardVoltage.setStatus('current')
ethernetNTEGE114HCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114HCardTemperature.setStatus('current')
ethernetNTEGE114HCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114HCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE114HCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114HCardRestartAction.setStatus('current')
ethernetNTEGE114HCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114HCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE114HCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114HCardSwitchPortActionPort.setStatus('current')
ethernetNTEGE114HCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114HCardSwitchPortAction.setStatus('current')
ethernetNTEGE114PHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43), )
if mibBuilder.loadTexts: ethernetNTEGE114PHCardTable.setStatus('current')
ethernetNTEGE114PHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114PHCardEntry.setStatus('current')
ethernetNTEGE114PHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114PHCardEntityIndex.setStatus('current')
ethernetNTEGE114PHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114PHCardAdminState.setStatus('current')
ethernetNTEGE114PHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114PHCardOperationalState.setStatus('current')
ethernetNTEGE114PHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114PHCardSecondaryState.setStatus('current')
ethernetNTEGE114PHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114PHCardVoltage.setStatus('current')
ethernetNTEGE114PHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114PHCardTemperature.setStatus('current')
ethernetNTEGE114PHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114PHCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE114PHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114PHCardRestartAction.setStatus('current')
ethernetNTEGE114PHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114PHCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE114PHCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114PHCardSwitchPortActionPort.setStatus('current')
ethernetNTEGE114PHCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114PHCardSwitchPortAction.setStatus('current')
ethernetFE36ECardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44), )
if mibBuilder.loadTexts: ethernetFE36ECardTable.setStatus('current')
ethernetFE36ECardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetFE36ECardEntry.setStatus('current')
ethernetFE36ECardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetFE36ECardEntityIndex.setStatus('current')
ethernetFE36ECardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetFE36ECardAdminState.setStatus('current')
ethernetFE36ECardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetFE36ECardOperationalState.setStatus('current')
ethernetFE36ECardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetFE36ECardSecondaryState.setStatus('current')
ethernetFE36ECardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetFE36ECardTemperature.setStatus('current')
ethernetFE36ECardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44, 1, 6), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetFE36ECardRestartAction.setStatus('current')
ethernetFE36ECardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetFE36ECardStorageType.setStatus('current')
ethernetFE36ECardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetFE36ECardRowStatus.setStatus('current')
ethernetFE36ECardForceOffLineAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetFE36ECardForceOffLineAction.setStatus('current')
ethernetFE36ECard8023azEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetFE36ECard8023azEnabled.setStatus('current')
ethernetNTEGE114SHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45), )
if mibBuilder.loadTexts: ethernetNTEGE114SHCardTable.setStatus('current')
ethernetNTEGE114SHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114SHCardEntry.setStatus('current')
ethernetNTEGE114SHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114SHCardEntityIndex.setStatus('current')
ethernetNTEGE114SHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114SHCardAdminState.setStatus('current')
ethernetNTEGE114SHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114SHCardOperationalState.setStatus('current')
ethernetNTEGE114SHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114SHCardSecondaryState.setStatus('current')
ethernetNTEGE114SHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114SHCardVoltage.setStatus('current')
ethernetNTEGE114SHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114SHCardTemperature.setStatus('current')
ethernetNTEGE114SHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114SHCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE114SHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114SHCardRestartAction.setStatus('current')
ethernetNTEGE114SHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114SHCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE114SHCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114SHCardSwitchPortActionPort.setStatus('current')
ethernetNTEGE114SHCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114SHCardSwitchPortAction.setStatus('current')
ethernetNTEGE114SCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46), )
if mibBuilder.loadTexts: ethernetNTEGE114SCardTable.setStatus('current')
ethernetNTEGE114SCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114SCardEntry.setStatus('current')
ethernetNTEGE114SCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114SCardEntityIndex.setStatus('current')
ethernetNTEGE114SCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114SCardAdminState.setStatus('current')
ethernetNTEGE114SCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114SCardOperationalState.setStatus('current')
ethernetNTEGE114SCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114SCardSecondaryState.setStatus('current')
ethernetNTEGE114SCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114SCardVoltage.setStatus('current')
ethernetNTEGE114SCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114SCardTemperature.setStatus('current')
ethernetNTEGE114SCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114SCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE114SCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114SCardRestartAction.setStatus('current')
ethernetNTEGE114SCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114SCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE114SCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114SCardSwitchPortActionPort.setStatus('current')
ethernetNTEGE114SCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114SCardSwitchPortAction.setStatus('current')
stuHighPerCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 47), )
if mibBuilder.loadTexts: stuHighPerCardTable.setStatus('current')
stuHighPerCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 47, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: stuHighPerCardEntry.setStatus('current')
stuHighPerCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 47, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuHighPerCardEntityIndex.setStatus('current')
stuHighPerCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 47, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuHighPerCardAdminState.setStatus('current')
stuHighPerCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 47, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuHighPerCardOperationalState.setStatus('current')
stuHighPerCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 47, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuHighPerCardSecondaryState.setStatus('current')
stuHighPerCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 47, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuHighPerCardTemperature.setStatus('current')
stuHighPerCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 47, 1, 6), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuHighPerCardRestartAction.setStatus('current')
stuHighPerCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 47, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stuHighPerCardStorageType.setStatus('current')
stuHighPerCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 47, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stuHighPerCardRowStatus.setStatus('current')
stuHighPerCardForceOffLineAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 47, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuHighPerCardForceOffLineAction.setStatus('current')
stiHighPerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 48), )
if mibBuilder.loadTexts: stiHighPerTable.setStatus('current')
stiHighPerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 48, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: stiHighPerEntry.setStatus('current')
stiHighPerEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 48, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stiHighPerEntityIndex.setStatus('current')
stiHighPerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 48, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stiHighPerAdminState.setStatus('current')
stiHighPerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 48, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stiHighPerOperationalState.setStatus('current')
stiHighPerSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 48, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stiHighPerSecondaryState.setStatus('current')
stiHighPerTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 48, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stiHighPerTemperature.setStatus('current')
stiHighPerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 48, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiHighPerStorageType.setStatus('current')
stiHighPerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 48, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiHighPerRowStatus.setStatus('current')
ethernetGE8ECCCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 49), )
if mibBuilder.loadTexts: ethernetGE8ECCCardTable.setStatus('current')
ethernetGE8ECCCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 49, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetGE8ECCCardEntry.setStatus('current')
ethernetGE8ECCCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 49, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8ECCCardEntityIndex.setStatus('current')
ethernetGE8ECCCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 49, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetGE8ECCCardAdminState.setStatus('current')
ethernetGE8ECCCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 49, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8ECCCardOperationalState.setStatus('current')
ethernetGE8ECCCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 49, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8ECCCardSecondaryState.setStatus('current')
ethernetGE8ECCCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 49, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8ECCCardVoltage.setStatus('current')
ethernetGE8ECCCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 49, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8ECCCardTemperature.setStatus('current')
ethernetGE8ECCCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 49, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetGE8ECCCardRestartAction.setStatus('current')
ethernetGE8ECCCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 49, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetGE8ECCCardStorageType.setStatus('current')
ethernetGE8ECCCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 49, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetGE8ECCCardRowStatus.setStatus('current')
networkElementLLDPParamsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 50), )
if mibBuilder.loadTexts: networkElementLLDPParamsTable.setStatus('current')
networkElementLLDPParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 50, 1), )
networkElementEntry.registerAugmentions(("CM-ENTITY-MIB", "networkElementLLDPParamsEntry"))
networkElementLLDPParamsEntry.setIndexNames(*networkElementEntry.getIndexNames())
if mibBuilder.loadTexts: networkElementLLDPParamsEntry.setStatus('current')
neLLDPParamsLLDPEnableAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 50, 1, 1), LLDPEnableAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neLLDPParamsLLDPEnableAction.setStatus('current')
ethernetNTESH1PCSCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 51), )
if mibBuilder.loadTexts: ethernetNTESH1PCSCardTable.setStatus('current')
ethernetNTESH1PCSCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 51, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTESH1PCSCardEntry.setStatus('current')
ethernetNTESH1PCSCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 51, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTESH1PCSCardEntityIndex.setStatus('current')
ethernetNTESH1PCSCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 51, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTESH1PCSCardAdminState.setStatus('current')
ethernetNTESH1PCSCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 51, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTESH1PCSCardOperationalState.setStatus('current')
ethernetNTESH1PCSCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 51, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTESH1PCSCardSecondaryState.setStatus('current')
ethernetNTESH1PCSCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 51, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTESH1PCSCardVoltage.setStatus('current')
ethernetNTESH1PCSCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 51, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTESH1PCSCardTemperature.setStatus('current')
ethernetNTESH1PCSCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 51, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTESH1PCSCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTESH1PCSCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 51, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTESH1PCSCardRestartAction.setStatus('current')
ethernetNTESH1PCSCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 51, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTESH1PCSCardFineGrainedPmInterval.setStatus('current')
ethernetNTEOSA5411CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 52), )
if mibBuilder.loadTexts: ethernetNTEOSA5411CardTable.setStatus('current')
ethernetNTEOSA5411CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 52, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEOSA5411CardEntry.setStatus('current')
ethernetNTEOSA5411CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 52, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5411CardEntityIndex.setStatus('current')
ethernetNTEOSA5411CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 52, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5411CardAdminState.setStatus('current')
ethernetNTEOSA5411CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 52, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5411CardOperationalState.setStatus('current')
ethernetNTEOSA5411CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 52, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5411CardSecondaryState.setStatus('current')
ethernetNTEOSA5411CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 52, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5411CardVoltage.setStatus('current')
ethernetNTEOSA5411CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 52, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5411CardTemperature.setStatus('current')
ethernetNTEOSA5411CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 52, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5411CardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEOSA5411CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 52, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5411CardRestartAction.setStatus('current')
ethernetNTEOSA5411CardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 52, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5411CardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE112ProCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53), )
if mibBuilder.loadTexts: ethernetNTEGE112ProCardTable.setStatus('current')
ethernetNTEGE112ProCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE112ProCardEntry.setStatus('current')
ethernetNTEGE112ProCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProCardEntityIndex.setStatus('current')
ethernetNTEGE112ProCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProCardAdminState.setStatus('current')
ethernetNTEGE112ProCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProCardOperationalState.setStatus('current')
ethernetNTEGE112ProCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProCardSecondaryState.setStatus('current')
ethernetNTEGE112ProCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProCardVoltage.setStatus('current')
ethernetNTEGE112ProCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProCardTemperature.setStatus('current')
ethernetNTEGE112ProCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE112ProCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProCardRestartAction.setStatus('current')
ethernetNTEGE112ProCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE112ProCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE112ProCardSwitchPortActionPort.setStatus('current')
ethernetNTEGE112ProCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProCardSwitchPortAction.setStatus('current')
ethernetNTEGE112ProMCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54), )
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardTable.setStatus('current')
ethernetNTEGE112ProMCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardEntry.setStatus('current')
ethernetNTEGE112ProMCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardEntityIndex.setStatus('current')
ethernetNTEGE112ProMCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardAdminState.setStatus('current')
ethernetNTEGE112ProMCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardOperationalState.setStatus('current')
ethernetNTEGE112ProMCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardSecondaryState.setStatus('current')
ethernetNTEGE112ProMCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardVoltage.setStatus('current')
ethernetNTEGE112ProMCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardTemperature.setStatus('current')
ethernetNTEGE112ProMCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE112ProMCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardRestartAction.setStatus('current')
ethernetNTEGE112ProMCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE112ProMCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardSwitchPortActionPort.setStatus('current')
ethernetNTEGE112ProMCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardSwitchPortAction.setStatus('current')
ethernetNTEXG210CCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 55), )
if mibBuilder.loadTexts: ethernetNTEXG210CCardTable.setStatus('current')
ethernetNTEXG210CCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 55, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEXG210CCardEntry.setStatus('current')
ethernetNTEXG210CCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 55, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG210CCardEntityIndex.setStatus('current')
ethernetNTEXG210CCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 55, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG210CCardAdminState.setStatus('current')
ethernetNTEXG210CCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 55, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG210CCardOperationalState.setStatus('current')
ethernetNTEXG210CCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 55, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG210CCardSecondaryState.setStatus('current')
ethernetNTEXG210CCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 55, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG210CCardVoltage.setStatus('current')
ethernetNTEXG210CCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 55, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG210CCardTemperature.setStatus('current')
ethernetNTEXG210CCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 55, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG210CCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEXG210CCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 55, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG210CCardRestartAction.setStatus('current')
ethernetNTEXG210CCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 55, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG210CCardFineGrainedPmInterval.setStatus('current')
ethernetGE8SCryptoConnectorCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 56), )
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardTable.setStatus('current')
ethernetGE8SCryptoConnectorCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 56, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardEntry.setStatus('current')
ethernetGE8SCryptoConnectorCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 56, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardEntityIndex.setStatus('current')
ethernetGE8SCryptoConnectorCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 56, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardAdminState.setStatus('current')
ethernetGE8SCryptoConnectorCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 56, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardOperationalState.setStatus('current')
ethernetGE8SCryptoConnectorCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 56, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardSecondaryState.setStatus('current')
ethernetGE8SCryptoConnectorCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 56, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardVoltage.setStatus('current')
ethernetGE8SCryptoConnectorCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 56, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardTemperature.setStatus('current')
ethernetGE8SCryptoConnectorCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 56, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardRestartAction.setStatus('current')
ethernetGE8SCryptoConnectorCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 56, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardStorageType.setStatus('current')
ethernetGE8SCryptoConnectorCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 56, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardRowStatus.setStatus('current')
ethernetNTEGE114ProCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57), )
if mibBuilder.loadTexts: ethernetNTEGE114ProCardTable.setStatus('current')
ethernetNTEGE114ProCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114ProCardEntry.setStatus('current')
ethernetNTEGE114ProCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCardEntityIndex.setStatus('current')
ethernetNTEGE114ProCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCardAdminState.setStatus('current')
ethernetNTEGE114ProCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCardOperationalState.setStatus('current')
ethernetNTEGE114ProCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCardSecondaryState.setStatus('current')
ethernetNTEGE114ProCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCardVoltage.setStatus('current')
ethernetNTEGE114ProCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCardTemperature.setStatus('current')
ethernetNTEGE114ProCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE114ProCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCardRestartAction.setStatus('current')
ethernetNTEGE114ProCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE114ProCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114ProCardSwitchPortActionPort.setStatus('current')
ethernetNTEGE114ProCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCardSwitchPortAction.setStatus('current')
ethernetNTEGE114ProCCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58), )
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardTable.setStatus('current')
ethernetNTEGE114ProCCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardEntry.setStatus('current')
ethernetNTEGE114ProCCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardEntityIndex.setStatus('current')
ethernetNTEGE114ProCCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardAdminState.setStatus('current')
ethernetNTEGE114ProCCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardOperationalState.setStatus('current')
ethernetNTEGE114ProCCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardSecondaryState.setStatus('current')
ethernetNTEGE114ProCCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardVoltage.setStatus('current')
ethernetNTEGE114ProCCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardTemperature.setStatus('current')
ethernetNTEGE114ProCCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE114ProCCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardRestartAction.setStatus('current')
ethernetNTEGE114ProCCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE114ProCCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardSwitchPortActionPort.setStatus('current')
ethernetNTEGE114ProCCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardSwitchPortAction.setStatus('current')
ethernetNTEGE114ProSHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59), )
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardTable.setStatus('current')
ethernetNTEGE114ProSHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardEntry.setStatus('current')
ethernetNTEGE114ProSHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardEntityIndex.setStatus('current')
ethernetNTEGE114ProSHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardAdminState.setStatus('current')
ethernetNTEGE114ProSHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardOperationalState.setStatus('current')
ethernetNTEGE114ProSHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardSecondaryState.setStatus('current')
ethernetNTEGE114ProSHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardVoltage.setStatus('current')
ethernetNTEGE114ProSHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardTemperature.setStatus('current')
ethernetNTEGE114ProSHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE114ProSHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardRestartAction.setStatus('current')
ethernetNTEGE114ProSHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE114ProSHCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardSwitchPortActionPort.setStatus('current')
ethernetNTEGE114ProSHCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardSwitchPortAction.setStatus('current')
ethernetNTEGE114ProCSHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60), )
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardTable.setStatus('current')
ethernetNTEGE114ProCSHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardEntry.setStatus('current')
ethernetNTEGE114ProCSHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardEntityIndex.setStatus('current')
ethernetNTEGE114ProCSHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardAdminState.setStatus('current')
ethernetNTEGE114ProCSHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardOperationalState.setStatus('current')
ethernetNTEGE114ProCSHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardSecondaryState.setStatus('current')
ethernetNTEGE114ProCSHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardVoltage.setStatus('current')
ethernetNTEGE114ProCSHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardTemperature.setStatus('current')
ethernetNTEGE114ProCSHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE114ProCSHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardRestartAction.setStatus('current')
ethernetNTEGE114ProCSHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE114ProCSHCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardSwitchPortActionPort.setStatus('current')
ethernetNTEGE114ProCSHCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardSwitchPortAction.setStatus('current')
ethernetNTEGE114ProHECardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61), )
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardTable.setStatus('current')
ethernetNTEGE114ProHECardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardEntry.setStatus('current')
ethernetNTEGE114ProHECardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardEntityIndex.setStatus('current')
ethernetNTEGE114ProHECardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardAdminState.setStatus('current')
ethernetNTEGE114ProHECardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardOperationalState.setStatus('current')
ethernetNTEGE114ProHECardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardSecondaryState.setStatus('current')
ethernetNTEGE114ProHECardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardVoltage.setStatus('current')
ethernetNTEGE114ProHECardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardTemperature.setStatus('current')
ethernetNTEGE114ProHECardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE114ProHECardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardRestartAction.setStatus('current')
ethernetNTEGE114ProHECardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE114ProHECardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardSwitchPortActionPort.setStatus('current')
ethernetNTEGE114ProHECardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardSwitchPortAction.setStatus('current')
ethernetNTEGE112ProHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62), )
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardTable.setStatus('current')
ethernetNTEGE112ProHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardEntry.setStatus('current')
ethernetNTEGE112ProHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardEntityIndex.setStatus('current')
ethernetNTEGE112ProHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardAdminState.setStatus('current')
ethernetNTEGE112ProHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardOperationalState.setStatus('current')
ethernetNTEGE112ProHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardSecondaryState.setStatus('current')
ethernetNTEGE112ProHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardVoltage.setStatus('current')
ethernetNTEGE112ProHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardTemperature.setStatus('current')
ethernetNTEGE112ProHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE112ProHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardRestartAction.setStatus('current')
ethernetNTEGE112ProHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE112ProHCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardSwitchPortActionPort.setStatus('current')
ethernetNTEGE112ProHCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardSwitchPortAction.setStatus('current')
ethernetNTEOSA5420CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 63), )
if mibBuilder.loadTexts: ethernetNTEOSA5420CardTable.setStatus('current')
ethernetNTEOSA5420CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 63, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEOSA5420CardEntry.setStatus('current')
ethernetNTEOSA5420CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 63, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5420CardEntityIndex.setStatus('current')
ethernetNTEOSA5420CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 63, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5420CardAdminState.setStatus('current')
ethernetNTEOSA5420CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 63, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5420CardOperationalState.setStatus('current')
ethernetNTEOSA5420CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 63, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5420CardSecondaryState.setStatus('current')
ethernetNTEOSA5420CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 63, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5420CardVoltage.setStatus('current')
ethernetNTEOSA5420CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 63, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5420CardTemperature.setStatus('current')
ethernetNTEOSA5420CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 63, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5420CardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEOSA5420CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 63, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5420CardRestartAction.setStatus('current')
ethernetNTEOSA5420CardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 63, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5420CardFineGrainedPmInterval.setStatus('current')
ethernetNTEOSA5421CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 64), )
if mibBuilder.loadTexts: ethernetNTEOSA5421CardTable.setStatus('current')
ethernetNTEOSA5421CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 64, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEOSA5421CardEntry.setStatus('current')
ethernetNTEOSA5421CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 64, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5421CardEntityIndex.setStatus('current')
ethernetNTEOSA5421CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 64, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5421CardAdminState.setStatus('current')
ethernetNTEOSA5421CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 64, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5421CardOperationalState.setStatus('current')
ethernetNTEOSA5421CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 64, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5421CardSecondaryState.setStatus('current')
ethernetNTEOSA5421CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 64, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5421CardVoltage.setStatus('current')
ethernetNTEOSA5421CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 64, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5421CardTemperature.setStatus('current')
ethernetNTEOSA5421CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 64, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5421CardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEOSA5421CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 64, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5421CardRestartAction.setStatus('current')
ethernetNTEOSA5421CardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 64, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5421CardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE114GCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65), )
if mibBuilder.loadTexts: ethernetNTEGE114GCardTable.setStatus('current')
ethernetNTEGE114GCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114GCardEntry.setStatus('current')
ethernetNTEGE114GCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114GCardEntityIndex.setStatus('current')
ethernetNTEGE114GCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114GCardAdminState.setStatus('current')
ethernetNTEGE114GCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114GCardOperationalState.setStatus('current')
ethernetNTEGE114GCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114GCardSecondaryState.setStatus('current')
ethernetNTEGE114GCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114GCardVoltage.setStatus('current')
ethernetNTEGE114GCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114GCardTemperature.setStatus('current')
ethernetNTEGE114GCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114GCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE114GCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114GCardRestartAction.setStatus('current')
ethernetNTEGE114GCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114GCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE114GCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114GCardSwitchPortActionPort.setStatus('current')
ethernetNTEGE114GCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114GCardSwitchPortAction.setStatus('current')
bits16PortCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 66), )
if mibBuilder.loadTexts: bits16PortCardTable.setStatus('current')
bits16PortCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 66, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: bits16PortCardEntry.setStatus('current')
bits16PortCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 66, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bits16PortCardEntityIndex.setStatus('current')
bits16PortCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 66, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits16PortCardAdminState.setStatus('current')
bits16PortCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 66, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bits16PortCardOperationalState.setStatus('current')
bits16PortCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 66, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bits16PortCardSecondaryState.setStatus('current')
bits16PortCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 66, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bits16PortCardRowStatus.setStatus('current')
bits16PortCardAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 66, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits16PortCardAlias.setStatus('current')
bits16PortCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 66, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bits16PortCardTemperature.setStatus('current')
ethernetNTEGE114ProVmHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67), )
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardTable.setStatus('current')
ethernetNTEGE114ProVmHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardEntry.setStatus('current')
ethernetNTEGE114ProVmHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardEntityIndex.setStatus('current')
ethernetNTEGE114ProVmHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardAdminState.setStatus('current')
ethernetNTEGE114ProVmHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardOperationalState.setStatus('current')
ethernetNTEGE114ProVmHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardSecondaryState.setStatus('current')
ethernetNTEGE114ProVmHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardVoltage.setStatus('current')
ethernetNTEGE114ProVmHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardTemperature.setStatus('current')
ethernetNTEGE114ProVmHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE114ProVmHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardRestartAction.setStatus('current')
ethernetNTEGE114ProVmHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE114ProVmHCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardSwitchPortActionPort.setStatus('current')
ethernetNTEGE114ProVmHCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardSwitchPortAction.setStatus('current')
ethernetNTEGE114ProVmCHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68), )
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardTable.setStatus('current')
ethernetNTEGE114ProVmCHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardEntry.setStatus('current')
ethernetNTEGE114ProVmCHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardEntityIndex.setStatus('current')
ethernetNTEGE114ProVmCHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardAdminState.setStatus('current')
ethernetNTEGE114ProVmCHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardOperationalState.setStatus('current')
ethernetNTEGE114ProVmCHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardSecondaryState.setStatus('current')
ethernetNTEGE114ProVmCHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardVoltage.setStatus('current')
ethernetNTEGE114ProVmCHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardTemperature.setStatus('current')
ethernetNTEGE114ProVmCHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE114ProVmCHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardRestartAction.setStatus('current')
ethernetNTEGE114ProVmCHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE114ProVmCHCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardSwitchPortActionPort.setStatus('current')
ethernetNTEGE114ProVmCHCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardSwitchPortAction.setStatus('current')
ethernetNTEGE114ProVmCSHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69), )
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardTable.setStatus('current')
ethernetNTEGE114ProVmCSHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardEntry.setStatus('current')
ethernetNTEGE114ProVmCSHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardEntityIndex.setStatus('current')
ethernetNTEGE114ProVmCSHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardAdminState.setStatus('current')
ethernetNTEGE114ProVmCSHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardOperationalState.setStatus('current')
ethernetNTEGE114ProVmCSHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardSecondaryState.setStatus('current')
ethernetNTEGE114ProVmCSHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardVoltage.setStatus('current')
ethernetNTEGE114ProVmCSHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardTemperature.setStatus('current')
ethernetNTEGE114ProVmCSHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE114ProVmCSHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardRestartAction.setStatus('current')
ethernetNTEGE114ProVmCSHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE114ProVmCSHCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardSwitchPortActionPort.setStatus('current')
ethernetNTEGE114ProVmCSHCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardSwitchPortAction.setStatus('current')
serverCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70), )
if mibBuilder.loadTexts: serverCardTable.setStatus('current')
serverCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: serverCardEntry.setStatus('current')
serverCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardEntityIndex.setStatus('current')
serverCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverCardAdminState.setStatus('current')
serverCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardOperationalState.setStatus('current')
serverCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardSecondaryState.setStatus('current')
serverCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serverCardStorageType.setStatus('current')
serverCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardVoltage.setStatus('current')
serverCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardTemperature.setStatus('current')
serverCardUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardUpTime.setStatus('current')
serverCardVmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardVmNumber.setStatus('current')
serverCardVirtualCpuTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardVirtualCpuTotal.setStatus('current')
serverCardVirtualCpuAvailiable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardVirtualCpuAvailiable.setStatus('current')
serverCardMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardMemoryTotal.setStatus('current')
serverCardMemoryAvailiable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardMemoryAvailiable.setStatus('current')
serverCardStorageTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardStorageTotal.setStatus('current')
serverCardStorageAvailiable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardStorageAvailiable.setStatus('current')
serverCardHvVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardHvVersion.setStatus('current')
serverCardHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serverCardHostName.setStatus('current')
serverCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 18), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverCardRestartAction.setStatus('current')
serverCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serverCardRowStatus.setStatus('current')
serverCardIgnoreWatchdog = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverCardIgnoreWatchdog.setStatus('current')
pps16PortCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 71), )
if mibBuilder.loadTexts: pps16PortCardTable.setStatus('current')
pps16PortCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 71, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: pps16PortCardEntry.setStatus('current')
pps16PortCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 71, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortCardEntityIndex.setStatus('current')
pps16PortCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 71, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pps16PortCardAdminState.setStatus('current')
pps16PortCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 71, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortCardOperationalState.setStatus('current')
pps16PortCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 71, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortCardSecondaryState.setStatus('current')
pps16PortCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 71, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pps16PortCardRowStatus.setStatus('current')
pps16PortCardAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 71, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pps16PortCardAlias.setStatus('current')
clk16PortCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 72), )
if mibBuilder.loadTexts: clk16PortCardTable.setStatus('current')
clk16PortCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 72, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: clk16PortCardEntry.setStatus('current')
clk16PortCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 72, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortCardEntityIndex.setStatus('current')
clk16PortCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 72, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clk16PortCardAdminState.setStatus('current')
clk16PortCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 72, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortCardOperationalState.setStatus('current')
clk16PortCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 72, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortCardSecondaryState.setStatus('current')
clk16PortCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 72, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clk16PortCardRowStatus.setStatus('current')
clk16PortCardAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 72, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clk16PortCardAlias.setStatus('current')
todPps16PortCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 73), )
if mibBuilder.loadTexts: todPps16PortCardTable.setStatus('current')
todPps16PortCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 73, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: todPps16PortCardEntry.setStatus('current')
todPps16PortCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 73, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortCardEntityIndex.setStatus('current')
todPps16PortCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 73, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: todPps16PortCardAdminState.setStatus('current')
todPps16PortCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 73, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortCardOperationalState.setStatus('current')
todPps16PortCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 73, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortCardSecondaryState.setStatus('current')
todPps16PortCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 73, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: todPps16PortCardRowStatus.setStatus('current')
todPps16PortCardAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 73, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: todPps16PortCardAlias.setStatus('current')
ethernetNTEGE101ProCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74), )
if mibBuilder.loadTexts: ethernetNTEGE101ProCardTable.setStatus('current')
ethernetNTEGE101ProCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE101ProCardEntry.setStatus('current')
ethernetNTEGE101ProCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE101ProCardEntityIndex.setStatus('current')
ethernetNTEGE101ProCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE101ProCardAdminState.setStatus('current')
ethernetNTEGE101ProCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE101ProCardOperationalState.setStatus('current')
ethernetNTEGE101ProCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE101ProCardSecondaryState.setStatus('current')
ethernetNTEGE101ProCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE101ProCardVoltage.setStatus('current')
ethernetNTEGE101ProCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE101ProCardTemperature.setStatus('current')
ethernetNTEGE101ProCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE101ProCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE101ProCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE101ProCardRestartAction.setStatus('current')
ethernetNTEGE101ProCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE101ProCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE101ProCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE101ProCardSwitchPortActionPort.setStatus('current')
ethernetNTEGE101ProCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE101ProCardSwitchPortAction.setStatus('current')
ethernetNTEGO102ProSCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75), )
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardTable.setStatus('current')
ethernetNTEGO102ProSCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardEntry.setStatus('current')
ethernetNTEGO102ProSCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardEntityIndex.setStatus('current')
ethernetNTEGO102ProSCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardAdminState.setStatus('current')
ethernetNTEGO102ProSCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardOperationalState.setStatus('current')
ethernetNTEGO102ProSCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardSecondaryState.setStatus('current')
ethernetNTEGO102ProSCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardVoltage.setStatus('current')
ethernetNTEGO102ProSCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardTemperature.setStatus('current')
ethernetNTEGO102ProSCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGO102ProSCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardRestartAction.setStatus('current')
ethernetNTEGO102ProSCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGO102ProSCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardSwitchPortActionPort.setStatus('current')
ethernetNTEGO102ProSCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardSwitchPortAction.setStatus('current')
ethernetNTEGO102ProSPCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76), )
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardTable.setStatus('current')
ethernetNTEGO102ProSPCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardEntry.setStatus('current')
ethernetNTEGO102ProSPCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardEntityIndex.setStatus('current')
ethernetNTEGO102ProSPCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardAdminState.setStatus('current')
ethernetNTEGO102ProSPCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardOperationalState.setStatus('current')
ethernetNTEGO102ProSPCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardSecondaryState.setStatus('current')
ethernetNTEGO102ProSPCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardVoltage.setStatus('current')
ethernetNTEGO102ProSPCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardTemperature.setStatus('current')
ethernetNTEGO102ProSPCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGO102ProSPCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardRestartAction.setStatus('current')
ethernetNTEGO102ProSPCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGO102ProSPCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardSwitchPortActionPort.setStatus('current')
ethernetNTEGO102ProSPCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardSwitchPortAction.setStatus('current')
ethernetNTECX101Pro30ACardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77), )
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardTable.setStatus('current')
ethernetNTECX101Pro30ACardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardEntry.setStatus('current')
ethernetNTECX101Pro30ACardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardEntityIndex.setStatus('current')
ethernetNTECX101Pro30ACardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardAdminState.setStatus('current')
ethernetNTECX101Pro30ACardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardOperationalState.setStatus('current')
ethernetNTECX101Pro30ACardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardSecondaryState.setStatus('current')
ethernetNTECX101Pro30ACardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardVoltage.setStatus('current')
ethernetNTECX101Pro30ACardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardTemperature.setStatus('current')
ethernetNTECX101Pro30ACardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTECX101Pro30ACardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardRestartAction.setStatus('current')
ethernetNTECX101Pro30ACardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardFineGrainedPmInterval.setStatus('current')
ethernetNTECX101Pro30ACardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardSwitchPortActionPort.setStatus('current')
ethernetNTECX101Pro30ACardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardSwitchPortAction.setStatus('current')
ethernetNTECX102Pro30ACardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78), )
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardTable.setStatus('current')
ethernetNTECX102Pro30ACardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardEntry.setStatus('current')
ethernetNTECX102Pro30ACardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardEntityIndex.setStatus('current')
ethernetNTECX102Pro30ACardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardAdminState.setStatus('current')
ethernetNTECX102Pro30ACardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardOperationalState.setStatus('current')
ethernetNTECX102Pro30ACardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardSecondaryState.setStatus('current')
ethernetNTECX102Pro30ACardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardVoltage.setStatus('current')
ethernetNTECX102Pro30ACardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardTemperature.setStatus('current')
ethernetNTECX102Pro30ACardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTECX102Pro30ACardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardRestartAction.setStatus('current')
ethernetNTECX102Pro30ACardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardFineGrainedPmInterval.setStatus('current')
ethernetNTECX102Pro30ACardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardSwitchPortActionPort.setStatus('current')
ethernetNTECX102Pro30ACardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardSwitchPortAction.setStatus('current')
ge4PortCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 79), )
if mibBuilder.loadTexts: ge4PortCardTable.setStatus('current')
ge4PortCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 79, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ge4PortCardEntry.setStatus('current')
ge4PortCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 79, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ge4PortCardEntityIndex.setStatus('current')
ge4PortCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 79, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ge4PortCardAdminState.setStatus('current')
ge4PortCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 79, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ge4PortCardOperationalState.setStatus('current')
ge4PortCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 79, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ge4PortCardSecondaryState.setStatus('current')
ge4PortCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 79, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ge4PortCardRowStatus.setStatus('current')
ge4PortCardAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 79, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ge4PortCardAlias.setStatus('current')
ge4PortCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 79, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ge4PortCardTemperature.setStatus('current')
ethernetNTEXG116PROCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 80), )
if mibBuilder.loadTexts: ethernetNTEXG116PROCardTable.setStatus('current')
ethernetNTEXG116PROCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 80, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEXG116PROCardEntry.setStatus('current')
ethernetNTEXG116PROCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 80, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG116PROCardEntityIndex.setStatus('current')
ethernetNTEXG116PROCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 80, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG116PROCardAdminState.setStatus('current')
ethernetNTEXG116PROCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 80, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG116PROCardOperationalState.setStatus('current')
ethernetNTEXG116PROCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 80, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG116PROCardSecondaryState.setStatus('current')
ethernetNTEXG116PROCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 80, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG116PROCardVoltage.setStatus('current')
ethernetNTEXG116PROCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 80, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG116PROCardTemperature.setStatus('current')
ethernetNTEXG116PROCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 80, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG116PROCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEXG116PROCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 80, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG116PROCardRestartAction.setStatus('current')
ethernetNTEXG116PROCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 80, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG116PROCardFineGrainedPmInterval.setStatus('current')
ethernetNTEXG120PROCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 81), )
if mibBuilder.loadTexts: ethernetNTEXG120PROCardTable.setStatus('current')
ethernetNTEXG120PROCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 81, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEXG120PROCardEntry.setStatus('current')
ethernetNTEXG120PROCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 81, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG120PROCardEntityIndex.setStatus('current')
ethernetNTEXG120PROCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 81, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG120PROCardAdminState.setStatus('current')
ethernetNTEXG120PROCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 81, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG120PROCardOperationalState.setStatus('current')
ethernetNTEXG120PROCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 81, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG120PROCardSecondaryState.setStatus('current')
ethernetNTEXG120PROCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 81, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG120PROCardVoltage.setStatus('current')
ethernetNTEXG120PROCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 81, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG120PROCardTemperature.setStatus('current')
ethernetNTEXG120PROCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 81, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG120PROCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEXG120PROCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 81, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG120PROCardRestartAction.setStatus('current')
ethernetNTEXG120PROCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 81, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG120PROCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE112ProVmCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82), )
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardTable.setStatus('current')
ethernetNTEGE112ProVmCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardEntry.setStatus('current')
ethernetNTEGE112ProVmCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardEntityIndex.setStatus('current')
ethernetNTEGE112ProVmCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardAdminState.setStatus('current')
ethernetNTEGE112ProVmCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardOperationalState.setStatus('current')
ethernetNTEGE112ProVmCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardSecondaryState.setStatus('current')
ethernetNTEGE112ProVmCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardVoltage.setStatus('current')
ethernetNTEGE112ProVmCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardTemperature.setStatus('current')
ethernetNTEGE112ProVmCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE112ProVmCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardRestartAction.setStatus('current')
ethernetNTEGE112ProVmCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE112ProVmCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardSwitchPortActionPort.setStatus('current')
ethernetNTEGE112ProVmCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardSwitchPortAction.setStatus('current')
ethernetNTEOSA5401CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 83), )
if mibBuilder.loadTexts: ethernetNTEOSA5401CardTable.setStatus('current')
ethernetNTEOSA5401CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 83, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEOSA5401CardEntry.setStatus('current')
ethernetNTEOSA5401CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 83, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5401CardEntityIndex.setStatus('current')
ethernetNTEOSA5401CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 83, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5401CardAdminState.setStatus('current')
ethernetNTEOSA5401CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 83, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5401CardOperationalState.setStatus('current')
ethernetNTEOSA5401CardTableRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 83, 1, 4), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5401CardTableRestartAction.setStatus('current')
ethernetNTEOSA5405CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 84), )
if mibBuilder.loadTexts: ethernetNTEOSA5405CardTable.setStatus('current')
ethernetNTEOSA5405CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 84, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEOSA5405CardEntry.setStatus('current')
ethernetNTEOSA5405CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 84, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5405CardEntityIndex.setStatus('current')
ethernetNTEOSA5405CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 84, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5405CardAdminState.setStatus('current')
ethernetNTEOSA5405CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 84, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5405CardOperationalState.setStatus('current')
ethernetNTEOSA5405CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 84, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5405CardVoltage.setStatus('current')
ethernetNTEOSA5405CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 84, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5405CardTemperature.setStatus('current')
ethernetNTEOSA5405CardTableRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 84, 1, 6), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5405CardTableRestartAction.setStatus('current')
ethernetCSMCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85), )
if mibBuilder.loadTexts: ethernetCSMCardTable.setStatus('current')
ethernetCSMCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetCSMCardEntry.setStatus('current')
ethernetCSMCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCSMCardEntityIndex.setStatus('current')
ethernetCSMCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetCSMCardAdminState.setStatus('current')
ethernetCSMCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCSMCardOperationalState.setStatus('current')
ethernetCSMCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCSMCardSecondaryState.setStatus('current')
ethernetCSMCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCSMCardVoltage.setStatus('current')
ethernetCSMCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCSMCardTemperature.setStatus('current')
ethernetCSMCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetCSMCardSnmpDyingGaspEnabled.setStatus('current')
ethernetCSMCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetCSMCardRestartAction.setStatus('current')
ethernetCSMCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetCSMCardFineGrainedPmInterval.setStatus('current')
ethernetCSMCardOscillatorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCSMCardOscillatorType.setStatus('current')
auxPortCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 87), )
if mibBuilder.loadTexts: auxPortCardTable.setStatus('current')
auxPortCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 87, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: auxPortCardEntry.setStatus('current')
auxPortCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 87, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxPortCardEntityIndex.setStatus('current')
auxPortCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 87, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auxPortCardAdminState.setStatus('current')
auxPortCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 87, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxPortCardOperationalState.setStatus('current')
auxPortCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 87, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxPortCardSecondaryState.setStatus('current')
auxPortCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 87, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: auxPortCardRowStatus.setStatus('current')
auxPortCardAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 87, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auxPortCardAlias.setStatus('current')
auxPortCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 87, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxPortCardTemperature.setStatus('current')
ethernetNTEGE102ProHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88), )
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardTable.setStatus('current')
ethernetNTEGE102ProHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardEntry.setStatus('current')
ethernetNTEGE102ProHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardEntityIndex.setStatus('current')
ethernetNTEGE102ProHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardAdminState.setStatus('current')
ethernetNTEGE102ProHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardOperationalState.setStatus('current')
ethernetNTEGE102ProHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardSecondaryState.setStatus('current')
ethernetNTEGE102ProHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardVoltage.setStatus('current')
ethernetNTEGE102ProHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardTemperature.setStatus('current')
ethernetNTEGE102ProHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE102ProHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardRestartAction.setStatus('current')
ethernetNTEGE102ProHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE102ProHCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardSwitchPortActionPort.setStatus('current')
ethernetNTEGE102ProHCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardSwitchPortAction.setStatus('current')
ethernetNTEGE102ProHCardPSU1State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 12), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardPSU1State.setStatus('current')
ethernetNTEGE102ProHCardPSU2State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 13), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardPSU2State.setStatus('current')
ethernetNTEGE102ProHCardFAN1State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 14), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardFAN1State.setStatus('current')
ethernetNTEGE102ProHCardFAN2State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 15), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardFAN2State.setStatus('current')
ethernetNTEGE102ProHCardPsuType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 16), PsuType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardPsuType.setStatus('current')
ethernetNTEGE102ProEFMHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89), )
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardTable.setStatus('current')
ethernetNTEGE102ProEFMHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardEntry.setStatus('current')
ethernetNTEGE102ProEFMHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardEntityIndex.setStatus('current')
ethernetNTEGE102ProEFMHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardAdminState.setStatus('current')
ethernetNTEGE102ProEFMHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardOperationalState.setStatus('current')
ethernetNTEGE102ProEFMHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardSecondaryState.setStatus('current')
ethernetNTEGE102ProEFMHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardVoltage.setStatus('current')
ethernetNTEGE102ProEFMHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardTemperature.setStatus('current')
ethernetNTEGE102ProEFMHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardRestartAction.setStatus('current')
ethernetNTEGE102ProEFMHCardPSU1State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 8), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardPSU1State.setStatus('current')
ethernetNTEGE102ProEFMHCardPSU2State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 9), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardPSU2State.setStatus('current')
ethernetNTEGE102ProEFMHCardFAN1State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 10), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardFAN1State.setStatus('current')
ethernetNTEGE102ProEFMHCardFAN2State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 11), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardFAN2State.setStatus('current')
ethernetNTEGE102ProEFMHCardPsuType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 12), PsuType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardPsuType.setStatus('current')
ethernetNTEGE102ProEFMHCardLLFMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 13), CmCPMRLinkLossFwdMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardLLFMode.setStatus('current')
ethernetNTEGE102ProEFMHCardLLFModeAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 14), CmCPMRLinkLossFwdMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardLLFModeAction.setStatus('current')
ethernetOsa3350MgntCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 90), )
if mibBuilder.loadTexts: ethernetOsa3350MgntCardTable.setStatus('current')
ethernetOsa3350MgntCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 90, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetOsa3350MgntCardEntry.setStatus('current')
ethernetOsa3350MgntCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 90, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOsa3350MgntCardEntityIndex.setStatus('current')
ethernetOsa3350MgntCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 90, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetOsa3350MgntCardAdminState.setStatus('current')
ethernetOsa3350MgntCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 90, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOsa3350MgntCardOperationalState.setStatus('current')
ethernetOsa3350MgntCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 90, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOsa3350MgntCardSecondaryState.setStatus('current')
ethernetOsa3350MgntCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 90, 1, 5), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetOsa3350MgntCardRestartAction.setStatus('current')
ethernetOsa3350MgntCardResyncAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 90, 1, 6), ResyncType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetOsa3350MgntCardResyncAction.setStatus('current')
ethernetNTEXG116PROHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 91), )
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardTable.setStatus('current')
ethernetNTEXG116PROHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 91, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardEntry.setStatus('current')
ethernetNTEXG116PROHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 91, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardEntityIndex.setStatus('current')
ethernetNTEXG116PROHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 91, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardAdminState.setStatus('current')
ethernetNTEXG116PROHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 91, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardOperationalState.setStatus('current')
ethernetNTEXG116PROHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 91, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardSecondaryState.setStatus('current')
ethernetNTEXG116PROHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 91, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardVoltage.setStatus('current')
ethernetNTEXG116PROHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 91, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardTemperature.setStatus('current')
ethernetNTEXG116PROHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 91, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEXG116PROHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 91, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardRestartAction.setStatus('current')
ethernetNTEXG116PROHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 91, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGO102ProSMCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92), )
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardTable.setStatus('current')
ethernetNTEGO102ProSMCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardEntry.setStatus('current')
ethernetNTEGO102ProSMCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardEntityIndex.setStatus('current')
ethernetNTEGO102ProSMCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardAdminState.setStatus('current')
ethernetNTEGO102ProSMCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardOperationalState.setStatus('current')
ethernetNTEGO102ProSMCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardSecondaryState.setStatus('current')
ethernetNTEGO102ProSMCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardVoltage.setStatus('current')
ethernetNTEGO102ProSMCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardTemperature.setStatus('current')
ethernetNTEGO102ProSMCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGO102ProSMCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardRestartAction.setStatus('current')
ethernetNTEGO102ProSMCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGO102ProSMCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardSwitchPortActionPort.setStatus('current')
ethernetNTEGO102ProSMCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardSwitchPortAction.setStatus('current')
ethernetNTEXG118PROSHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 93), )
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardTable.setStatus('current')
ethernetNTEXG118PROSHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 93, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardEntry.setStatus('current')
ethernetNTEXG118PROSHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 93, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardEntityIndex.setStatus('current')
ethernetNTEXG118PROSHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 93, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardAdminState.setStatus('current')
ethernetNTEXG118PROSHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 93, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardOperationalState.setStatus('current')
ethernetNTEXG118PROSHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 93, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardSecondaryState.setStatus('current')
ethernetNTEXG118PROSHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 93, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardVoltage.setStatus('current')
ethernetNTEXG118PROSHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 93, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardTemperature.setStatus('current')
ethernetNTEXG118PROSHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 93, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEXG118PROSHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 93, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardRestartAction.setStatus('current')
ethernetNTEXG118PROSHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 93, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardFineGrainedPmInterval.setStatus('current')
ethernetNTEXG118PROACSHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 94), )
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardTable.setStatus('current')
ethernetNTEXG118PROACSHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 94, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardEntry.setStatus('current')
ethernetNTEXG118PROACSHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 94, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardEntityIndex.setStatus('current')
ethernetNTEXG118PROACSHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 94, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardAdminState.setStatus('current')
ethernetNTEXG118PROACSHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 94, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardOperationalState.setStatus('current')
ethernetNTEXG118PROACSHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 94, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardSecondaryState.setStatus('current')
ethernetNTEXG118PROACSHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 94, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardVoltage.setStatus('current')
ethernetNTEXG118PROACSHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 94, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardTemperature.setStatus('current')
ethernetNTEXG118PROACSHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 94, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEXG118PROACSHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 94, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardRestartAction.setStatus('current')
ethernetNTEXG118PROACSHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 94, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE114ProVmSHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95), )
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardTable.setStatus('current')
ethernetNTEGE114ProVmSHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardEntry.setStatus('current')
ethernetNTEGE114ProVmSHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardEntityIndex.setStatus('current')
ethernetNTEGE114ProVmSHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardAdminState.setStatus('current')
ethernetNTEGE114ProVmSHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardOperationalState.setStatus('current')
ethernetNTEGE114ProVmSHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardSecondaryState.setStatus('current')
ethernetNTEGE114ProVmSHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardVoltage.setStatus('current')
ethernetNTEGE114ProVmSHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardTemperature.setStatus('current')
ethernetNTEGE114ProVmSHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE114ProVmSHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardRestartAction.setStatus('current')
ethernetNTEGE114ProVmSHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE114ProVmSHCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardSwitchPortActionPort.setStatus('current')
ethernetNTEGE114ProVmSHCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardSwitchPortAction.setStatus('current')
ethernetNTEGE104CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96), )
if mibBuilder.loadTexts: ethernetNTEGE104CardTable.setStatus('current')
ethernetNTEGE104CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE104CardEntry.setStatus('current')
ethernetNTEGE104CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE104CardEntityIndex.setStatus('current')
ethernetNTEGE104CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE104CardAdminState.setStatus('current')
ethernetNTEGE104CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE104CardOperationalState.setStatus('current')
ethernetNTEGE104CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE104CardSecondaryState.setStatus('current')
ethernetNTEGE104CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE104CardVoltage.setStatus('current')
ethernetNTEGE104CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE104CardTemperature.setStatus('current')
ethernetNTEGE104CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE104CardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEGE104CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE104CardRestartAction.setStatus('current')
ethernetNTEGE104CardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE104CardFineGrainedPmInterval.setStatus('current')
ethernetNTEGE104CardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE104CardSwitchPortActionPort.setStatus('current')
ethernetNTEGE104CardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE104CardSwitchPortAction.setStatus('current')
ethernetNTEXG120PROSHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 97), )
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardTable.setStatus('current')
ethernetNTEXG120PROSHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 97, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardEntry.setStatus('current')
ethernetNTEXG120PROSHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 97, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardEntityIndex.setStatus('current')
ethernetNTEXG120PROSHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 97, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardAdminState.setStatus('current')
ethernetNTEXG120PROSHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 97, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardOperationalState.setStatus('current')
ethernetNTEXG120PROSHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 97, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardSecondaryState.setStatus('current')
ethernetNTEXG120PROSHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 97, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardVoltage.setStatus('current')
ethernetNTEXG120PROSHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 97, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardTemperature.setStatus('current')
ethernetNTEXG120PROSHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 97, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardSnmpDyingGaspEnabled.setStatus('current')
ethernetNTEXG120PROSHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 97, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardRestartAction.setStatus('current')
ethernetNTEXG120PROSHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 97, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardFineGrainedPmInterval.setStatus('current')
mbGnssCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 98), )
if mibBuilder.loadTexts: mbGnssCardTable.setStatus('current')
mbGnssCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 98, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: mbGnssCardEntry.setStatus('current')
mbGnssCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 98, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbGnssCardEntityIndex.setStatus('current')
mbGnssCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 98, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbGnssCardAdminState.setStatus('current')
mbGnssCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 98, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbGnssCardOperationalState.setStatus('current')
mbGnssCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 98, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbGnssCardSecondaryState.setStatus('current')
mbGnssCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 98, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mbGnssCardRowStatus.setStatus('current')
mbGnssCardAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 98, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbGnssCardAlias.setStatus('current')
f3IrigCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 99), )
if mibBuilder.loadTexts: f3IrigCardTable.setStatus('current')
f3IrigCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 99, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: f3IrigCardEntry.setStatus('current')
f3IrigCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 99, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigCardEntityIndex.setStatus('current')
f3IrigCardAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 99, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigCardAlias.setStatus('current')
f3IrigCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 99, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigCardAdminState.setStatus('current')
f3IrigCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 99, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigCardOperationalState.setStatus('current')
f3IrigCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 99, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigCardSecondaryState.setStatus('current')
f3IrigCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 99, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigCardTemperature.setStatus('current')
f3IrigCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 99, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3IrigCardStorageType.setStatus('current')
f3IrigCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 99, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3IrigCardRowStatus.setStatus('current')
compositeClockCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 100), )
if mibBuilder.loadTexts: compositeClockCardTable.setStatus('current')
compositeClockCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 100, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: compositeClockCardEntry.setStatus('current')
compositeClockCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 100, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compositeClockCardEntityIndex.setStatus('current')
compositeClockCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 100, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compositeClockCardAdminState.setStatus('current')
compositeClockCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 100, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compositeClockCardOperationalState.setStatus('current')
compositeClockCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 100, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compositeClockCardSecondaryState.setStatus('current')
compositeClockCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 100, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: compositeClockCardRowStatus.setStatus('current')
compositeClockCardAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 100, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compositeClockCardAlias.setStatus('current')
f3StorageDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 101), )
if mibBuilder.loadTexts: f3StorageDeviceTable.setStatus('current')
f3StorageDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 101, 1), )
serverCardEntry.registerAugmentions(("CM-ENTITY-MIB", "f3StorageDeviceEntry"))
f3StorageDeviceEntry.setIndexNames(*serverCardEntry.getIndexNames())
if mibBuilder.loadTexts: f3StorageDeviceEntry.setStatus('current')
f3StorageDeviceInternalSsdHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 101, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3StorageDeviceInternalSsdHealth.setStatus('current')
f3StorageDeviceExternalSsdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 101, 1, 2), StorageStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3StorageDeviceExternalSsdStatus.setStatus('current')
f3StorageDeviceWearoutLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 101, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3StorageDeviceWearoutLevel.setStatus('current')
cmEntityCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 1))
cmEntityGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2))
cmEntityCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 1, 1)).setObjects(("CM-ENTITY-MIB", "cmEntityObjectGroup"), ("CM-ENTITY-MIB", "commonEntityGroup"), ("CM-ENTITY-MIB", "psuGroup"), ("CM-ENTITY-MIB", "fanGroup"), ("CM-ENTITY-MIB", "hubshelfGroup"), ("CM-ENTITY-MIB", "nteGe206CardGroup"), ("CM-ENTITY-MIB", "nteGe201SyncECardGroup"), ("CM-ENTITY-MIB", "nteGe201NonSyncECardGroup"), ("CM-ENTITY-MIB", "nteGe206FCardGroup"), ("CM-ENTITY-MIB", "nteGe206VCardGroup"), ("CM-ENTITY-MIB", "nteXg210CardGroup"), ("CM-ENTITY-MIB", "neLLDPParamsGroup"), ("CM-ENTITY-MIB", "nteSh1PcsCardGroup"), ("CM-ENTITY-MIB", "nteXg210CCardGroup"), ("CM-ENTITY-MIB", "geGE8SCryptoConnectorCardGroup"), ("CM-ENTITY-MIB", "nteOsa5420CardGroup"), ("CM-ENTITY-MIB", "nteOsa5421CardGroup"), ("CM-ENTITY-MIB", "bits16PortCardGroup"), ("CM-ENTITY-MIB", "pps16PortCardGroup"), ("CM-ENTITY-MIB", "clk16PortCardGroup"), ("CM-ENTITY-MIB", "todPps16PortCardGroup"), ("CM-ENTITY-MIB", "ge4PortCardGroup"), ("CM-ENTITY-MIB", "nteXg116ProCardGroup"), ("CM-ENTITY-MIB", "nteXg120ProCardGroup"), ("CM-ENTITY-MIB", "nteOsa5401CardGroup"), ("CM-ENTITY-MIB", "nteOsa5405CardGroup"), ("CM-ENTITY-MIB", "csmCardGroup"), ("CM-ENTITY-MIB", "auxPortCardGroup"), ("CM-ENTITY-MIB", "nteGe102ProHCardGroup"), ("CM-ENTITY-MIB", "nteGe102ProEFMHCardGroup"), ("CM-ENTITY-MIB", "nteXg116ProHCardGroup"), ("CM-ENTITY-MIB", "nteXg118ProSHCardGroup"), ("CM-ENTITY-MIB", "nteXg118ProacSHCardGroup"), ("CM-ENTITY-MIB", "nteXg120ProSHCardGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmEntityCompliance = cmEntityCompliance.setStatus('current')
cmEntityObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 1))
for _cmEntityObjectGroup_obj in [[("CM-ENTITY-MIB", "neIndex"), ("CM-ENTITY-MIB", "neName"), ("CM-ENTITY-MIB", "neType"), ("CM-ENTITY-MIB", "neContact"), ("CM-ENTITY-MIB", "neLocation"), ("CM-ENTITY-MIB", "neDescription"), ("CM-ENTITY-MIB", "neCmdPromptPrefix"), ("CM-ENTITY-MIB", "neAccepted"), ("CM-ENTITY-MIB", "neFromPort"), ("CM-ENTITY-MIB", "neProvAction"), ("CM-ENTITY-MIB", "neStorageType"), ("CM-ENTITY-MIB", "neRowStatus"), ("CM-ENTITY-MIB", "shelfIndex"), ("CM-ENTITY-MIB", "shelfEntityIndex"), ("CM-ENTITY-MIB", "shelfType"), ("CM-ENTITY-MIB", "shelfbackplaneRev"), ("CM-ENTITY-MIB", "shelfbackplaneDOM"), ("CM-ENTITY-MIB", "shelfbackplaneSerialNo"), ("CM-ENTITY-MIB", "shelfAction"), ("CM-ENTITY-MIB", "shelfAdminState"), ("CM-ENTITY-MIB", "shelfOperationalState"), ("CM-ENTITY-MIB", "shelfSecondaryState"), ("CM-ENTITY-MIB", "shelfMfgSite"), ("CM-ENTITY-MIB", "shelfOscillatorType"), ("CM-ENTITY-MIB", "shelfLedControl"), ("CM-ENTITY-MIB", "slotIndex"), ("CM-ENTITY-MIB", "slotEntityIndex"), ("CM-ENTITY-MIB", "slotType"), ("CM-ENTITY-MIB", "slotCardType"), ("CM-ENTITY-MIB", "slotCardUnitName"), ("CM-ENTITY-MIB", "slotCardFormatVersion"), ("CM-ENTITY-MIB", "slotCardCLEICode"), ("CM-ENTITY-MIB", "slotCardPartNumber"), ("CM-ENTITY-MIB", "slotCardHwRev"), ("CM-ENTITY-MIB", "slotCardSwRev"), ("CM-ENTITY-MIB", "slotCardSerialNum"), ("CM-ENTITY-MIB", "slotCardMfgName"), ("CM-ENTITY-MIB", "slotCardMfgDate"), ("CM-ENTITY-MIB", "slotCardMfgSite"), ("CM-ENTITY-MIB", "slotSecondaryState"), ("CM-ENTITY-MIB", "slotCardPhysicalAddress"), ("CM-ENTITY-MIB", "psuEntityIndex"), ("CM-ENTITY-MIB", "psuType"), ("CM-ENTITY-MIB", "psuAdminState"), ("CM-ENTITY-MIB", "psuOperationalState"), ("CM-ENTITY-MIB", "psuSecondaryState"), ("CM-ENTITY-MIB", "psuOutputVoltage"), ("CM-ENTITY-MIB", "psuTemperature"), ("CM-ENTITY-MIB", "psuOutputCurrent"), ("CM-ENTITY-MIB", "psuStorageType"), ("CM-ENTITY-MIB", "psuRowStatus"), ("CM-ENTITY-MIB", "fanEntityIndex"), ("CM-ENTITY-MIB", "fanAdminState"), ("CM-ENTITY-MIB", "fanOperationalState"), ("CM-ENTITY-MIB", "fanSecondaryState"), ("CM-ENTITY-MIB", "scuEntityIndex"), ("CM-ENTITY-MIB", "scuAdminState"), ("CM-ENTITY-MIB", "scuOperationalState"), ("CM-ENTITY-MIB", "scuSecondaryState"), ("CM-ENTITY-MIB", "scuVoltage"), ("CM-ENTITY-MIB", "scuTemperature"), ("CM-ENTITY-MIB", "scuRestartAction"), ("CM-ENTITY-MIB", "scuStorageType"), ("CM-ENTITY-MIB", "scuRowStatus"), ("CM-ENTITY-MIB", "nemiEntityIndex"), ("CM-ENTITY-MIB", "nemiAdminState"), ("CM-ENTITY-MIB", "nemiOperationalState"), ("CM-ENTITY-MIB", "nemiSecondaryState"), ("CM-ENTITY-MIB", "nemiVoltage"), ("CM-ENTITY-MIB", "nemiTemperature"), ("CM-ENTITY-MIB", "nemiRestartAction"), ("CM-ENTITY-MIB", "nemiStorageType"), ("CM-ENTITY-MIB", "nemiRowStatus"), ("CM-ENTITY-MIB", "nemiForceOffLineAction"), ("CM-ENTITY-MIB", "ethernetNTUCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTUCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTUCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTUCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTUCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTUCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTUCardStorageType"), ("CM-ENTITY-MIB", "ethernetNTUCardRowStatus"), ("CM-ENTITY-MIB", "ethernetCPMRCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetCPMRCardAdminState"), ("CM-ENTITY-MIB", "ethernetCPMRCardOperationalState"), ("CM-ENTITY-MIB", "ethernetCPMRCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetCPMRCardVoltage"), ("CM-ENTITY-MIB", "ethernetCPMRCardTemperature"), ("CM-ENTITY-MIB", "ethernetCPMRCardRestartAction"), ("CM-ENTITY-MIB", "ethernetCPMRCardPSU1State"), ("CM-ENTITY-MIB", "ethernetCPMRCardPSU2State"), ("CM-ENTITY-MIB", "ethernetCPMRCardFAN1State"), ("CM-ENTITY-MIB", "ethernetCPMRCardFAN2State"), ("CM-ENTITY-MIB", "ethernetCPMRCardPsuType"), ("CM-ENTITY-MIB", "ethernetCPMRCardLLFMode"), ("CM-ENTITY-MIB", "ethernetCPMRCardLLFModeAction"), ("CM-ENTITY-MIB", "ethernetNTEGE101CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE101CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE101CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE101CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE101CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE101CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE101CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE101CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardRestartAction"), ("CM-ENTITY-MIB", "pseudoWireE3CardEntityIndex"), ("CM-ENTITY-MIB", "pseudoWireE3CardAdminState"), ("CM-ENTITY-MIB", "pseudoWireE3CardOperationalState"), ("CM-ENTITY-MIB", "pseudoWireE3CardSecondaryState"), ("CM-ENTITY-MIB", "pseudoWireE3CardIpAddress"), ("CM-ENTITY-MIB", "pseudoWireE3CardIpNetmask"), ("CM-ENTITY-MIB", "pseudoWireE3CardIpGateway"), ("CM-ENTITY-MIB", "pseudoWireE3CardDhcpEnabled"), ("CM-ENTITY-MIB", "pseudoWireE3CardMgmtVlanId"), ("CM-ENTITY-MIB", "pseudoWireE3CardTimeOfDay"), ("CM-ENTITY-MIB", "pseudoWireE3CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardRestartAction"), ("CM-ENTITY-MIB", "ethernet1x10GCardEntityIndex"), ("CM-ENTITY-MIB", "ethernet1x10GCardAdminState"), ("CM-ENTITY-MIB", "ethernet1x10GCardOperationalState"), ("CM-ENTITY-MIB", "ethernet1x10GCardSecondaryState"), ("CM-ENTITY-MIB", "ethernet1x10GCardTemperature"), ("CM-ENTITY-MIB", "ethernet1x10GCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernet1x10GCardRestartAction"), ("CM-ENTITY-MIB", "ethernet1x10GCardStorageType"), ("CM-ENTITY-MIB", "ethernet1x10GCardRowStatus"), ("CM-ENTITY-MIB", "ethernet1x10GCardForceOffLineAction"), ("CM-ENTITY-MIB", "ethernet10x1GCardEntityIndex"), ("CM-ENTITY-MIB", "ethernet10x1GCardAdminState"), ("CM-ENTITY-MIB", "ethernet10x1GCardOperationalState"), ("CM-ENTITY-MIB", "ethernet10x1GCardSecondaryState"), ("CM-ENTITY-MIB", "ethernet10x1GCardTemperature"), ("CM-ENTITY-MIB", "ethernet10x1GCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernet10x1GCardRestartAction"), ("CM-ENTITY-MIB", "ethernet10x1GCardStorageType"), ("CM-ENTITY-MIB", "ethernet10x1GCardRowStatus"), ("CM-ENTITY-MIB", "ethernet10x1GCardForceOffLineAction"), ("CM-ENTITY-MIB", "ethernetSWFCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetSWFCardAdminState"), ("CM-ENTITY-MIB", "ethernetSWFCardOperationalState"), ("CM-ENTITY-MIB", "ethernetSWFCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetSWFCardTemperature"), ("CM-ENTITY-MIB", "ethernetSWFCardRestartAction"), ("CM-ENTITY-MIB", "ethernetSWFCardStorageType"), ("CM-ENTITY-MIB", "ethernetSWFCardRowStatus"), ("CM-ENTITY-MIB", "ethernetSWFCardForceOffLineAction"), ("CM-ENTITY-MIB", "stuCardEntityIndex"), ("CM-ENTITY-MIB", "stuCardAdminState"), ("CM-ENTITY-MIB", "stuCardOperationalState"), ("CM-ENTITY-MIB", "stuCardSecondaryState"), ("CM-ENTITY-MIB", "stuCardTemperature"), ("CM-ENTITY-MIB", "stuCardRestartAction"), ("CM-ENTITY-MIB", "stuCardStorageType"), ("CM-ENTITY-MIB", "stuCardRowStatus"), ("CM-ENTITY-MIB", "stuCardForceOffLineAction"), ("CM-ENTITY-MIB", "amiEntityIndex"), ("CM-ENTITY-MIB", "amiAdminState"), ("CM-ENTITY-MIB", "amiOperationalState"), ("CM-ENTITY-MIB", "amiSecondaryState"), ("CM-ENTITY-MIB", "amiTemperature"), ("CM-ENTITY-MIB", "amiRestartAction"), ("CM-ENTITY-MIB", "stiEntityIndex"), ("CM-ENTITY-MIB", "stiAdminState"), ("CM-ENTITY-MIB", "stiOperationalState"), ("CM-ENTITY-MIB", "stiSecondaryState"), ("CM-ENTITY-MIB", "stiTemperature"), ("CM-ENTITY-MIB", "stiStorageType"), ("CM-ENTITY-MIB", "stiRowStatus"), ("CM-ENTITY-MIB", "f3UsbHostIndex"), ("CM-ENTITY-MIB", "f3UsbHostEntityIndex"), ("CM-ENTITY-MIB", "f3UsbHostUnitName"), ("CM-ENTITY-MIB", "f3UsbHostFormatVersion"), ("CM-ENTITY-MIB", "f3UsbHostCLEICode"), ("CM-ENTITY-MIB", "f3UsbHostPartNumber"), ("CM-ENTITY-MIB", "f3UsbHostHwRev"), ("CM-ENTITY-MIB", "f3UsbHostSwRev"), ("CM-ENTITY-MIB", "f3UsbHostSerialNum"), ("CM-ENTITY-MIB", "f3UsbHostMfgName"), ("CM-ENTITY-MIB", "f3UsbHostMfgDate"), ("CM-ENTITY-MIB", "f3UsbHostMfgSite"), ("CM-ENTITY-MIB", "f3UsbHostSecondaryState"), ("CM-ENTITY-MIB", "f3UsbHostPhysicalAddress"), ("CM-ENTITY-MIB", "f3UsbHostMuxOperationalMode"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardSwitchPortAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardSwitchPortAction"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardAdminState"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardOperationalState"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardTemperature"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardRestartAction"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardStorageType"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardRowStatus"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardForceOffLineAction"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardMode"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardEntityIndex"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardAdminState"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardOperationalState"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardSecondaryState"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardTemperature"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardRestartAction"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardStorageType"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardRowStatus")], [("CM-ENTITY-MIB", "ethernet1x10GHighPerCardForceOffLineAction"), ("CM-ENTITY-MIB", "ethernet10x1GHighPerCardEntityIndex"), ("CM-ENTITY-MIB", "ethernet10x1GHighPerCardAdminState"), ("CM-ENTITY-MIB", "ethernet10x1GHighPerCardOperationalState"), ("CM-ENTITY-MIB", "ethernet10x1GHighPerCardSecondaryState"), ("CM-ENTITY-MIB", "ethernet10x1GHighPerCardTemperature"), ("CM-ENTITY-MIB", "ethernet10x1GHighPerCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernet10x1GHighPerCardRestartAction"), ("CM-ENTITY-MIB", "ethernet10x1GHighPerCardStorageType"), ("CM-ENTITY-MIB", "ethernet10x1GHighPerCardRowStatus"), ("CM-ENTITY-MIB", "ethernet10x1GHighPerCardForceOffLineAction")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        cmEntityObjectGroup = cmEntityObjectGroup.setObjects(*_cmEntityObjectGroup_obj)
    else:
        cmEntityObjectGroup = cmEntityObjectGroup.setObjects(*_cmEntityObjectGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmEntityObjectGroup = cmEntityObjectGroup.setStatus('deprecated')
commonEntityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 2)).setObjects(("CM-ENTITY-MIB", "neIndex"), ("CM-ENTITY-MIB", "neName"), ("CM-ENTITY-MIB", "neType"), ("CM-ENTITY-MIB", "neContact"), ("CM-ENTITY-MIB", "neLocation"), ("CM-ENTITY-MIB", "neDescription"), ("CM-ENTITY-MIB", "neCmdPromptPrefix"), ("CM-ENTITY-MIB", "neAccepted"), ("CM-ENTITY-MIB", "neFromPort"), ("CM-ENTITY-MIB", "neProvAction"), ("CM-ENTITY-MIB", "neStorageType"), ("CM-ENTITY-MIB", "neRowStatus"), ("CM-ENTITY-MIB", "neAutoProvMode"), ("CM-ENTITY-MIB", "neFineGrainedPmInterval"), ("CM-ENTITY-MIB", "shelfIndex"), ("CM-ENTITY-MIB", "shelfEntityIndex"), ("CM-ENTITY-MIB", "shelfType"), ("CM-ENTITY-MIB", "shelfbackplaneRev"), ("CM-ENTITY-MIB", "shelfbackplaneDOM"), ("CM-ENTITY-MIB", "shelfbackplaneSerialNo"), ("CM-ENTITY-MIB", "shelfAction"), ("CM-ENTITY-MIB", "shelfAdminState"), ("CM-ENTITY-MIB", "shelfOperationalState"), ("CM-ENTITY-MIB", "shelfSecondaryState"), ("CM-ENTITY-MIB", "shelfMfgSite"), ("CM-ENTITY-MIB", "shelfOscillatorType"), ("CM-ENTITY-MIB", "shelfLedControl"), ("CM-ENTITY-MIB", "slotIndex"), ("CM-ENTITY-MIB", "slotEntityIndex"), ("CM-ENTITY-MIB", "slotType"), ("CM-ENTITY-MIB", "slotCardType"), ("CM-ENTITY-MIB", "slotCardUnitName"), ("CM-ENTITY-MIB", "slotCardFormatVersion"), ("CM-ENTITY-MIB", "slotCardCLEICode"), ("CM-ENTITY-MIB", "slotCardPartNumber"), ("CM-ENTITY-MIB", "slotCardHwRev"), ("CM-ENTITY-MIB", "slotCardSwRev"), ("CM-ENTITY-MIB", "slotCardSerialNum"), ("CM-ENTITY-MIB", "slotCardMfgName"), ("CM-ENTITY-MIB", "slotCardMfgDate"), ("CM-ENTITY-MIB", "slotCardMfgSite"), ("CM-ENTITY-MIB", "slotSecondaryState"), ("CM-ENTITY-MIB", "slotCardPhysicalAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonEntityGroup = commonEntityGroup.setStatus('current')
psuGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 3)).setObjects(("CM-ENTITY-MIB", "psuEntityIndex"), ("CM-ENTITY-MIB", "psuType"), ("CM-ENTITY-MIB", "psuAdminState"), ("CM-ENTITY-MIB", "psuOperationalState"), ("CM-ENTITY-MIB", "psuSecondaryState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    psuGroup = psuGroup.setStatus('current')
fanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 4)).setObjects(("CM-ENTITY-MIB", "fanEntityIndex"), ("CM-ENTITY-MIB", "fanAdminState"), ("CM-ENTITY-MIB", "fanOperationalState"), ("CM-ENTITY-MIB", "fanSecondaryState"), ("CM-ENTITY-MIB", "fanStorageType"), ("CM-ENTITY-MIB", "fanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fanGroup = fanGroup.setStatus('current')
hubshelfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 5)).setObjects(("CM-ENTITY-MIB", "scuEntityIndex"), ("CM-ENTITY-MIB", "scuAdminState"), ("CM-ENTITY-MIB", "scuOperationalState"), ("CM-ENTITY-MIB", "scuSecondaryState"), ("CM-ENTITY-MIB", "scuVoltage"), ("CM-ENTITY-MIB", "scuTemperature"), ("CM-ENTITY-MIB", "scuRestartAction"), ("CM-ENTITY-MIB", "scuStorageType"), ("CM-ENTITY-MIB", "scuRowStatus"), ("CM-ENTITY-MIB", "scuFlashModelNum"), ("CM-ENTITY-MIB", "scuFlashFirmwareRev"), ("CM-ENTITY-MIB", "scuFlashSerialNum"), ("CM-ENTITY-MIB", "nemiEntityIndex"), ("CM-ENTITY-MIB", "nemiAdminState"), ("CM-ENTITY-MIB", "nemiOperationalState"), ("CM-ENTITY-MIB", "nemiSecondaryState"), ("CM-ENTITY-MIB", "nemiVoltage"), ("CM-ENTITY-MIB", "nemiTemperature"), ("CM-ENTITY-MIB", "nemiRestartAction"), ("CM-ENTITY-MIB", "nemiStorageType"), ("CM-ENTITY-MIB", "nemiRowStatus"), ("CM-ENTITY-MIB", "nemiFlashModelNum"), ("CM-ENTITY-MIB", "nemiFlashFirmwareRev"), ("CM-ENTITY-MIB", "nemiFlashSerialNum"), ("CM-ENTITY-MIB", "ethernetNTUCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTUCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTUCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTUCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTUCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTUCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTUCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTUCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTUCardStorageType"), ("CM-ENTITY-MIB", "ethernetNTUCardRowStatus"), ("CM-ENTITY-MIB", "ethernetCPMRCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetCPMRCardAdminState"), ("CM-ENTITY-MIB", "ethernetCPMRCardOperationalState"), ("CM-ENTITY-MIB", "ethernetCPMRCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetCPMRCardVoltage"), ("CM-ENTITY-MIB", "ethernetCPMRCardTemperature"), ("CM-ENTITY-MIB", "ethernetCPMRCardRestartAction"), ("CM-ENTITY-MIB", "ethernetCPMRCardPSU1State"), ("CM-ENTITY-MIB", "ethernetCPMRCardPSU2State"), ("CM-ENTITY-MIB", "ethernetCPMRCardFAN1State"), ("CM-ENTITY-MIB", "ethernetCPMRCardFAN2State"), ("CM-ENTITY-MIB", "ethernetCPMRCardPsuType"), ("CM-ENTITY-MIB", "ethernetCPMRCardLLFMode"), ("CM-ENTITY-MIB", "ethernetCPMRCardLLFModeAction"), ("CM-ENTITY-MIB", "scuTEntityIndex"), ("CM-ENTITY-MIB", "scuTAdminState"), ("CM-ENTITY-MIB", "scuTOperationalState"), ("CM-ENTITY-MIB", "scuTSecondaryState"), ("CM-ENTITY-MIB", "scuTVoltage"), ("CM-ENTITY-MIB", "scuTTemperature"), ("CM-ENTITY-MIB", "scuTRestartAction"), ("CM-ENTITY-MIB", "scuTStorageType"), ("CM-ENTITY-MIB", "scuTRowStatus"), ("CM-ENTITY-MIB", "ethernetNTECardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTECardAdminState"), ("CM-ENTITY-MIB", "ethernetNTECardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTECardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTECardVoltage"), ("CM-ENTITY-MIB", "ethernetNTECardTemperature"), ("CM-ENTITY-MIB", "ethernetNTECardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTECardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTECardStorageType"), ("CM-ENTITY-MIB", "ethernetNTECardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubshelfGroup = hubshelfGroup.setStatus('current')
nteGe206CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 6)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE206CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe206CardGroup = nteGe206CardGroup.setStatus('current')
nteGe201SyncECardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 7)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe201SyncECardGroup = nteGe201SyncECardGroup.setStatus('current')
nteGe201NonSyncECardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 8)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE201CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe201NonSyncECardGroup = nteGe201NonSyncECardGroup.setStatus('current')
nteGe206FCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 9)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE206FCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe206FCardGroup = nteGe206FCardGroup.setStatus('current')
nteGe112CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 10)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE112CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe112CardGroup = nteGe112CardGroup.setStatus('current')
nteGe114CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 11)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe114CardGroup = nteGe114CardGroup.setStatus('current')
nteGe206VCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 12)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE206VCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE206VCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE206VCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE206VCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE206VCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE206VCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE206VCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE206VCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE206VCardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe206VCardGroup = nteGe206VCardGroup.setStatus('current')
nteXg210CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 13)).setObjects(("CM-ENTITY-MIB", "ethernetNTEXG210CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEXG210CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEXG210CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEXG210CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEXG210CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEXG210CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEXG210CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEXG210CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEXG210CardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteXg210CardGroup = nteXg210CardGroup.setStatus('current')
pseudoWireCardOcnStmCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 14)).setObjects(("CM-ENTITY-MIB", "pseudoWireOcnStmCardEntityIndex"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardAdminState"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardOperationalState"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardSecondaryState"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardIpAddress"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardMode"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardVoltage"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardTemperature"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardRestartAction"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardStorageType"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardRowStatus"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardPSNEncapsulation"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardFreqSourceType"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardFreqSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pseudoWireCardOcnStmCardGroup = pseudoWireCardOcnStmCardGroup.setStatus('current')
pseudoWireCardE1T1CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 15)).setObjects(("CM-ENTITY-MIB", "pseudoWireE1T1CardEntityIndex"), ("CM-ENTITY-MIB", "pseudoWireE1T1CardAdminState"), ("CM-ENTITY-MIB", "pseudoWireE1T1CardOperationalState"), ("CM-ENTITY-MIB", "pseudoWireE1T1CardSecondaryState"), ("CM-ENTITY-MIB", "pseudoWireE1T1CardIpAddress"), ("CM-ENTITY-MIB", "pseudoWireE1T1CardMode"), ("CM-ENTITY-MIB", "pseudoWireE1T1CardVoltage"), ("CM-ENTITY-MIB", "pseudoWireE1T1CardTemperature"), ("CM-ENTITY-MIB", "pseudoWireE1T1CardRestartAction"), ("CM-ENTITY-MIB", "pseudoWireE1T1CardStorageType"), ("CM-ENTITY-MIB", "pseudoWireE1T1CardRowStatus"), ("CM-ENTITY-MIB", "pseudoWireE1T1CardPSNEncapsulation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pseudoWireCardE1T1CardGroup = pseudoWireCardE1T1CardGroup.setStatus('current')
nteT1804CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 16)).setObjects(("CM-ENTITY-MIB", "ethernetNTET1804CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTET1804CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTET1804CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTET1804CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTET1804CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTET1804CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTET1804CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTET1804CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTET1804CardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTET1804CardMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteT1804CardGroup = nteT1804CardGroup.setStatus('current')
nteT3204CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 17)).setObjects(("CM-ENTITY-MIB", "ethernetNTET3204CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTET3204CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTET3204CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTET3204CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTET3204CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTET3204CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTET3204CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTET3204CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTET3204CardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTET3204CardMode"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardTemperature"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardStorageType"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteT3204CardGroup = nteT3204CardGroup.setStatus('current')
nteGeSyncProbeCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 18)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGESyncProbeCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGESyncProbeCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGESyncProbeCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGESyncProbeCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGESyncProbeCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGESyncProbeCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGESyncProbeCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGESyncProbeCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGESyncProbeCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardTemperature"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardStorageType"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGeSyncProbeCardGroup = nteGeSyncProbeCardGroup.setStatus('current')
xg1XCCCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 19)).setObjects(("CM-ENTITY-MIB", "ethernetXG1XCCCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetXG1XCCCardAdminState"), ("CM-ENTITY-MIB", "ethernetXG1XCCCardOperationalState"), ("CM-ENTITY-MIB", "ethernetXG1XCCCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetXG1XCCCardVoltage"), ("CM-ENTITY-MIB", "ethernetXG1XCCCardTemperature"), ("CM-ENTITY-MIB", "ethernetXG1XCCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetXG1XCCCardStorageType"), ("CM-ENTITY-MIB", "ethernetXG1XCCCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xg1XCCCardGroup = xg1XCCCardGroup.setStatus('current')
xg1SCCCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 20)).setObjects(("CM-ENTITY-MIB", "ethernetXG1SCCCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetXG1SCCCardAdminState"), ("CM-ENTITY-MIB", "ethernetXG1SCCCardOperationalState"), ("CM-ENTITY-MIB", "ethernetXG1SCCCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetXG1SCCCardVoltage"), ("CM-ENTITY-MIB", "ethernetXG1SCCCardTemperature"), ("CM-ENTITY-MIB", "ethernetXG1SCCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetXG1SCCCardStorageType"), ("CM-ENTITY-MIB", "ethernetXG1SCCCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xg1SCCCardGroup = xg1SCCCardGroup.setStatus('current')
ge4ECCCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 21)).setObjects(("CM-ENTITY-MIB", "ethernetGE4ECCCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardAdminState"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardOperationalState"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardVoltage"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardTemperature"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardStorageType"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ge4ECCCardGroup = ge4ECCCardGroup.setStatus('current')
ge4SCCCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 22)).setObjects(("CM-ENTITY-MIB", "ethernetGE4SCCCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardAdminState"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardOperationalState"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardVoltage"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardTemperature"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardStorageType"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ge4SCCCardGroup = ge4SCCCardGroup.setStatus('current')
ge8SCCCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 23)).setObjects(("CM-ENTITY-MIB", "ethernetGE8SCCCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetGE8SCCCardAdminState"), ("CM-ENTITY-MIB", "ethernetGE8SCCCardOperationalState"), ("CM-ENTITY-MIB", "ethernetGE8SCCCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetGE8SCCCardVoltage"), ("CM-ENTITY-MIB", "ethernetGE8SCCCardTemperature"), ("CM-ENTITY-MIB", "ethernetGE8SCCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetGE8SCCCardStorageType"), ("CM-ENTITY-MIB", "ethernetGE8SCCCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ge8SCCCardGroup = ge8SCCCardGroup.setStatus('current')
nteGe114HCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 24)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114HCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114HCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114HCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114HCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114HCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114HCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114HCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114HCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114HCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114HCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114HCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe114HCardGroup = nteGe114HCardGroup.setStatus('current')
nteGe114PHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 25)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114PHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114PHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114PHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114PHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114PHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114PHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114PHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114PHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114PHCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114PHCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114PHCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe114PHCardGroup = nteGe114PHCardGroup.setStatus('current')
ethernetOverOCSTMCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 26)).setObjects(("CM-ENTITY-MIB", "ethernetOverOCSTMCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardAdminState"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardOperationalState"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardTemperature"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardRestartAction"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardStorageType"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardRowStatus"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardForceOffLineAction"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetOverOCSTMCardGroup = ethernetOverOCSTMCardGroup.setStatus('current')
ethernet1x10GHighPerCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 27)).setObjects(("CM-ENTITY-MIB", "ethernet1x10GHighPerCardEntityIndex"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardAdminState"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardOperationalState"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardSecondaryState"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardTemperature"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardRestartAction"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardStorageType"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardRowStatus"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardForceOffLineAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernet1x10GHighPerCardGroup = ethernet1x10GHighPerCardGroup.setStatus('current')
ethernetFE36ECardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 28)).setObjects(("CM-ENTITY-MIB", "ethernetFE36ECardEntityIndex"), ("CM-ENTITY-MIB", "ethernetFE36ECardAdminState"), ("CM-ENTITY-MIB", "ethernetFE36ECardOperationalState"), ("CM-ENTITY-MIB", "ethernetFE36ECardSecondaryState"), ("CM-ENTITY-MIB", "ethernetFE36ECardTemperature"), ("CM-ENTITY-MIB", "ethernetFE36ECardRestartAction"), ("CM-ENTITY-MIB", "ethernetFE36ECardStorageType"), ("CM-ENTITY-MIB", "ethernetFE36ECardRowStatus"), ("CM-ENTITY-MIB", "ethernetFE36ECardForceOffLineAction"), ("CM-ENTITY-MIB", "ethernetFE36ECard8023azEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetFE36ECardGroup = ethernetFE36ECardGroup.setStatus('current')
nteGe114SHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 29)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114SHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114SHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114SHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114SHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114SHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114SHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114SHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114SHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114SHCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114SHCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114SHCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe114SHCardGroup = nteGe114SHCardGroup.setStatus('current')
nteGe114SCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 30)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114SCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114SCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114SCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114SCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114SCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114SCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114SCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114SCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114SCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114SCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114SCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe114SCardGroup = nteGe114SCardGroup.setStatus('current')
ge8ECCCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 31)).setObjects(("CM-ENTITY-MIB", "ethernetGE8ECCCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetGE8ECCCardAdminState"), ("CM-ENTITY-MIB", "ethernetGE8ECCCardOperationalState"), ("CM-ENTITY-MIB", "ethernetGE8ECCCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetGE8ECCCardVoltage"), ("CM-ENTITY-MIB", "ethernetGE8ECCCardTemperature"), ("CM-ENTITY-MIB", "ethernetGE8ECCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetGE8ECCCardStorageType"), ("CM-ENTITY-MIB", "ethernetGE8ECCCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ge8ECCCardGroup = ge8ECCCardGroup.setStatus('current')
neLLDPParamsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 32)).setObjects(("CM-ENTITY-MIB", "neLLDPParamsLLDPEnableAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    neLLDPParamsGroup = neLLDPParamsGroup.setStatus('current')
nteSh1PcsCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 33)).setObjects(("CM-ENTITY-MIB", "ethernetNTESH1PCSCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTESH1PCSCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTESH1PCSCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTESH1PCSCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTESH1PCSCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTESH1PCSCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTESH1PCSCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTESH1PCSCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTESH1PCSCardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteSh1PcsCardGroup = nteSh1PcsCardGroup.setStatus('current')
nteOsa5411CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 34)).setObjects(("CM-ENTITY-MIB", "ethernetNTEOSA5411CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEOSA5411CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5411CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5411CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5411CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEOSA5411CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEOSA5411CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEOSA5411CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEOSA5411CardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardTemperature"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardStorageType"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteOsa5411CardGroup = nteOsa5411CardGroup.setStatus('current')
nteGe112ProCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 35)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE112ProCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe112ProCardGroup = nteGe112ProCardGroup.setStatus('current')
nteGe112ProMCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 36)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE112ProMCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProMCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProMCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProMCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProMCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProMCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProMCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProMCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProMCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProMCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProMCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe112ProMCardGroup = nteGe112ProMCardGroup.setStatus('current')
nteGe114ProCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 37)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114ProCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe114ProCardGroup = nteGe114ProCardGroup.setStatus('current')
nteGe114ProCCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 38)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114ProCCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe114ProCCardGroup = nteGe114ProCCardGroup.setStatus('current')
nteGe114ProSHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 39)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114ProSHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProSHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProSHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProSHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProSHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProSHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProSHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProSHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProSHCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProSHCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProSHCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe114ProSHCardGroup = nteGe114ProSHCardGroup.setStatus('current')
nteGe114ProCSHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 40)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114ProCSHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCSHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCSHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCSHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCSHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCSHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCSHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCSHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCSHCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCSHCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCSHCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe114ProCSHCardGroup = nteGe114ProCSHCardGroup.setStatus('current')
nteGe114ProHECardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 41)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114ProHECardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProHECardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProHECardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProHECardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProHECardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProHECardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProHECardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProHECardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProHECardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProHECardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProHECardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe114ProHECardGroup = nteGe114ProHECardGroup.setStatus('current')
nteGe112ProHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 42)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE112ProHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProHCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProHCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProHCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe112ProHCardGroup = nteGe112ProHCardGroup.setStatus('current')
nteXg210CCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 43)).setObjects(("CM-ENTITY-MIB", "ethernetNTEXG210CCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEXG210CCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEXG210CCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEXG210CCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEXG210CCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEXG210CCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEXG210CCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEXG210CCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEXG210CCardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteXg210CCardGroup = nteXg210CCardGroup.setStatus('current')
geGE8SCryptoConnectorCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 44)).setObjects(("CM-ENTITY-MIB", "ethernetGE8SCryptoConnectorCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetGE8SCryptoConnectorCardAdminState"), ("CM-ENTITY-MIB", "ethernetGE8SCryptoConnectorCardOperationalState"), ("CM-ENTITY-MIB", "ethernetGE8SCryptoConnectorCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetGE8SCryptoConnectorCardVoltage"), ("CM-ENTITY-MIB", "ethernetGE8SCryptoConnectorCardTemperature"), ("CM-ENTITY-MIB", "ethernetGE8SCryptoConnectorCardRestartAction"), ("CM-ENTITY-MIB", "ethernetGE8SCryptoConnectorCardStorageType"), ("CM-ENTITY-MIB", "ethernetGE8SCryptoConnectorCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    geGE8SCryptoConnectorCardGroup = geGE8SCryptoConnectorCardGroup.setStatus('current')
nteOsa5420CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 45)).setObjects(("CM-ENTITY-MIB", "ethernetNTEOSA5420CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEOSA5420CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5420CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5420CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5420CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEOSA5420CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEOSA5420CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEOSA5420CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEOSA5420CardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardTemperature"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardStorageType"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteOsa5420CardGroup = nteOsa5420CardGroup.setStatus('current')
nteOsa5421CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 46)).setObjects(("CM-ENTITY-MIB", "ethernetNTEOSA5421CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEOSA5421CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5421CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5421CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5421CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEOSA5421CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEOSA5421CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEOSA5421CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEOSA5421CardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardTemperature"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardStorageType"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteOsa5421CardGroup = nteOsa5421CardGroup.setStatus('current')
nteGe114GCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 47)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114GCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114GCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114GCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114GCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114GCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114GCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114GCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114GCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114GCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114GCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114GCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe114GCardGroup = nteGe114GCardGroup.setStatus('current')
bits16PortCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 48)).setObjects(("CM-ENTITY-MIB", "bits16PortCardEntityIndex"), ("CM-ENTITY-MIB", "bits16PortCardAdminState"), ("CM-ENTITY-MIB", "bits16PortCardOperationalState"), ("CM-ENTITY-MIB", "bits16PortCardSecondaryState"), ("CM-ENTITY-MIB", "bits16PortCardRowStatus"), ("CM-ENTITY-MIB", "bits16PortCardAlias"), ("CM-ENTITY-MIB", "bits16PortCardTemperature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bits16PortCardGroup = bits16PortCardGroup.setStatus('current')
nteGE114ProVmHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 49)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114ProVmHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmHCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmHCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmHCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGE114ProVmHCardGroup = nteGE114ProVmHCardGroup.setStatus('current')
nteGE114ProVmCHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 50)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCHCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCHCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCHCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGE114ProVmCHCardGroup = nteGE114ProVmCHCardGroup.setStatus('current')
nteGE114ProVmCSHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 51)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCSHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCSHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCSHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCSHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCSHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCSHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCSHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCSHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCSHCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCSHCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCSHCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGE114ProVmCSHCardGroup = nteGE114ProVmCSHCardGroup.setStatus('current')
serverCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 52)).setObjects(("CM-ENTITY-MIB", "serverCardEntityIndex"), ("CM-ENTITY-MIB", "serverCardAdminState"), ("CM-ENTITY-MIB", "serverCardOperationalState"), ("CM-ENTITY-MIB", "serverCardSecondaryState"), ("CM-ENTITY-MIB", "serverCardStorageType"), ("CM-ENTITY-MIB", "serverCardVoltage"), ("CM-ENTITY-MIB", "serverCardTemperature"), ("CM-ENTITY-MIB", "serverCardUpTime"), ("CM-ENTITY-MIB", "serverCardVmNumber"), ("CM-ENTITY-MIB", "serverCardVirtualCpuTotal"), ("CM-ENTITY-MIB", "serverCardVirtualCpuAvailiable"), ("CM-ENTITY-MIB", "serverCardMemoryTotal"), ("CM-ENTITY-MIB", "serverCardMemoryAvailiable"), ("CM-ENTITY-MIB", "serverCardStorageTotal"), ("CM-ENTITY-MIB", "serverCardStorageAvailiable"), ("CM-ENTITY-MIB", "serverCardHvVersion"), ("CM-ENTITY-MIB", "serverCardHostName"), ("CM-ENTITY-MIB", "serverCardRestartAction"), ("CM-ENTITY-MIB", "serverCardRowStatus"), ("CM-ENTITY-MIB", "serverCardIgnoreWatchdog"), ("CM-ENTITY-MIB", "f3StorageDeviceInternalSsdHealth"), ("CM-ENTITY-MIB", "f3StorageDeviceExternalSsdStatus"), ("CM-ENTITY-MIB", "f3StorageDeviceWearoutLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    serverCardGroup = serverCardGroup.setStatus('current')
pps16PortCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 53)).setObjects(("CM-ENTITY-MIB", "pps16PortCardEntityIndex"), ("CM-ENTITY-MIB", "pps16PortCardAdminState"), ("CM-ENTITY-MIB", "pps16PortCardOperationalState"), ("CM-ENTITY-MIB", "pps16PortCardSecondaryState"), ("CM-ENTITY-MIB", "pps16PortCardRowStatus"), ("CM-ENTITY-MIB", "pps16PortCardAlias"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pps16PortCardGroup = pps16PortCardGroup.setStatus('current')
clk16PortCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 54)).setObjects(("CM-ENTITY-MIB", "clk16PortCardEntityIndex"), ("CM-ENTITY-MIB", "clk16PortCardAdminState"), ("CM-ENTITY-MIB", "clk16PortCardOperationalState"), ("CM-ENTITY-MIB", "clk16PortCardSecondaryState"), ("CM-ENTITY-MIB", "clk16PortCardRowStatus"), ("CM-ENTITY-MIB", "clk16PortCardAlias"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clk16PortCardGroup = clk16PortCardGroup.setStatus('current')
todPps16PortCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 55)).setObjects(("CM-ENTITY-MIB", "todPps16PortCardEntityIndex"), ("CM-ENTITY-MIB", "todPps16PortCardAdminState"), ("CM-ENTITY-MIB", "todPps16PortCardOperationalState"), ("CM-ENTITY-MIB", "todPps16PortCardSecondaryState"), ("CM-ENTITY-MIB", "todPps16PortCardRowStatus"), ("CM-ENTITY-MIB", "todPps16PortCardAlias"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    todPps16PortCardGroup = todPps16PortCardGroup.setStatus('current')
nteGe101ProCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 56)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE101ProCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE101ProCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE101ProCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE101ProCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE101ProCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE101ProCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE101ProCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE101ProCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE101ProCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE101ProCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE101ProCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe101ProCardGroup = nteGe101ProCardGroup.setStatus('current')
nteGo102ProSCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 57)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGO102ProSCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGo102ProSCardGroup = nteGo102ProSCardGroup.setStatus('current')
nteGo102ProSPCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 58)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGO102ProSPCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSPCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSPCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSPCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSPCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSPCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSPCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSPCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSPCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSPCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSPCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGo102ProSPCardGroup = nteGo102ProSPCardGroup.setStatus('current')
nteCx101Pro30ACardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 59)).setObjects(("CM-ENTITY-MIB", "ethernetNTECX101Pro30ACardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTECX101Pro30ACardAdminState"), ("CM-ENTITY-MIB", "ethernetNTECX101Pro30ACardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTECX101Pro30ACardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTECX101Pro30ACardVoltage"), ("CM-ENTITY-MIB", "ethernetNTECX101Pro30ACardTemperature"), ("CM-ENTITY-MIB", "ethernetNTECX101Pro30ACardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTECX101Pro30ACardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTECX101Pro30ACardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTECX101Pro30ACardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTECX101Pro30ACardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteCx101Pro30ACardGroup = nteCx101Pro30ACardGroup.setStatus('current')
nteCx102Pro30ACardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 60)).setObjects(("CM-ENTITY-MIB", "ethernetNTECX102Pro30ACardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTECX102Pro30ACardAdminState"), ("CM-ENTITY-MIB", "ethernetNTECX102Pro30ACardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTECX102Pro30ACardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTECX102Pro30ACardVoltage"), ("CM-ENTITY-MIB", "ethernetNTECX102Pro30ACardTemperature"), ("CM-ENTITY-MIB", "ethernetNTECX102Pro30ACardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTECX102Pro30ACardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTECX102Pro30ACardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTECX102Pro30ACardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTECX102Pro30ACardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteCx102Pro30ACardGroup = nteCx102Pro30ACardGroup.setStatus('current')
ge4PortCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 61)).setObjects(("CM-ENTITY-MIB", "ge4PortCardEntityIndex"), ("CM-ENTITY-MIB", "ge4PortCardAdminState"), ("CM-ENTITY-MIB", "ge4PortCardOperationalState"), ("CM-ENTITY-MIB", "ge4PortCardSecondaryState"), ("CM-ENTITY-MIB", "ge4PortCardRowStatus"), ("CM-ENTITY-MIB", "ge4PortCardAlias"), ("CM-ENTITY-MIB", "ge4PortCardTemperature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ge4PortCardGroup = ge4PortCardGroup.setStatus('current')
nteXg116ProCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 62)).setObjects(("CM-ENTITY-MIB", "ethernetNTEXG116PROCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROCardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteXg116ProCardGroup = nteXg116ProCardGroup.setStatus('current')
nteXg120ProCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 63)).setObjects(("CM-ENTITY-MIB", "ethernetNTEXG120PROCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROCardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteXg120ProCardGroup = nteXg120ProCardGroup.setStatus('current')
nteGE112ProVmCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 64)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE112ProVmCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProVmCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProVmCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProVmCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProVmCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProVmCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProVmCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProVmCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProVmCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProVmCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProVmCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGE112ProVmCardGroup = nteGE112ProVmCardGroup.setStatus('current')
nteOsa5401CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 65)).setObjects(("CM-ENTITY-MIB", "ethernetNTEOSA5401CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEOSA5401CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5401CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5401CardTableRestartAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteOsa5401CardGroup = nteOsa5401CardGroup.setStatus('current')
nteOsa5405CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 66)).setObjects(("CM-ENTITY-MIB", "ethernetNTEOSA5405CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEOSA5405CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5405CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5405CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEOSA5405CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEOSA5405CardTableRestartAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteOsa5405CardGroup = nteOsa5405CardGroup.setStatus('current')
csmCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 67)).setObjects(("CM-ENTITY-MIB", "ethernetCSMCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetCSMCardAdminState"), ("CM-ENTITY-MIB", "ethernetCSMCardOperationalState"), ("CM-ENTITY-MIB", "ethernetCSMCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetCSMCardVoltage"), ("CM-ENTITY-MIB", "ethernetCSMCardTemperature"), ("CM-ENTITY-MIB", "ethernetCSMCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetCSMCardRestartAction"), ("CM-ENTITY-MIB", "ethernetCSMCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetCSMCardOscillatorType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csmCardGroup = csmCardGroup.setStatus('current')
auxPortCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 68)).setObjects(("CM-ENTITY-MIB", "auxPortCardEntityIndex"), ("CM-ENTITY-MIB", "auxPortCardAdminState"), ("CM-ENTITY-MIB", "auxPortCardOperationalState"), ("CM-ENTITY-MIB", "auxPortCardSecondaryState"), ("CM-ENTITY-MIB", "auxPortCardRowStatus"), ("CM-ENTITY-MIB", "auxPortCardAlias"), ("CM-ENTITY-MIB", "auxPortCardTemperature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    auxPortCardGroup = auxPortCardGroup.setStatus('current')
nteGe102ProHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 69)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardSwitchPortAction"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardPSU1State"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardPSU2State"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardFAN1State"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardFAN2State"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardPsuType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe102ProHCardGroup = nteGe102ProHCardGroup.setStatus('current')
nteGe102ProEFMHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 70)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardPSU1State"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardPSU2State"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardFAN1State"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardFAN2State"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardPsuType"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardLLFMode"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardLLFModeAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe102ProEFMHCardGroup = nteGe102ProEFMHCardGroup.setStatus('current')
ethernetOsa3350MgntCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 71)).setObjects(("CM-ENTITY-MIB", "ethernetOsa3350MgntCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetOsa3350MgntCardAdminState"), ("CM-ENTITY-MIB", "ethernetOsa3350MgntCardOperationalState"), ("CM-ENTITY-MIB", "ethernetOsa3350MgntCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetOsa3350MgntCardRestartAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetOsa3350MgntCardGroup = ethernetOsa3350MgntCardGroup.setStatus('current')
nteXg116ProHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 72)).setObjects(("CM-ENTITY-MIB", "ethernetNTEXG116PROHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROHCardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteXg116ProHCardGroup = nteXg116ProHCardGroup.setStatus('current')
nteGo102ProSMCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 73)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGO102ProSMCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSMCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSMCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSMCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSMCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSMCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSMCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSMCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSMCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSMCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSMCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGo102ProSMCardGroup = nteGo102ProSMCardGroup.setStatus('current')
nteXg118ProSHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 74)).setObjects(("CM-ENTITY-MIB", "ethernetNTEXG118PROSHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROSHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROSHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROSHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROSHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROSHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROSHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROSHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROSHCardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteXg118ProSHCardGroup = nteXg118ProSHCardGroup.setStatus('current')
nteXg118ProacSHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 75)).setObjects(("CM-ENTITY-MIB", "ethernetNTEXG118PROACSHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROACSHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROACSHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROACSHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROACSHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROACSHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROACSHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROACSHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROACSHCardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteXg118ProacSHCardGroup = nteXg118ProacSHCardGroup.setStatus('current')
nteGE114ProVmSHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 76)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114ProVmSHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmSHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmSHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmSHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmSHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmSHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmSHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmSHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmSHCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmSHCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmSHCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGE114ProVmSHCardGroup = nteGE114ProVmSHCardGroup.setStatus('current')
nteGE104CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 77)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE104CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE104CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE104CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE104CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE104CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE104CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE104CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE104CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE104CardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE104CardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE104CardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGE104CardGroup = nteGE104CardGroup.setStatus('current')
nteXg120ProSHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 78)).setObjects(("CM-ENTITY-MIB", "ethernetNTEXG120PROSHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROSHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROSHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROSHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROSHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROSHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROSHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROSHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROSHCardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteXg120ProSHCardGroup = nteXg120ProSHCardGroup.setStatus('current')
mbGnssCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 79)).setObjects(("CM-ENTITY-MIB", "mbGnssCardEntityIndex"), ("CM-ENTITY-MIB", "mbGnssCardAdminState"), ("CM-ENTITY-MIB", "mbGnssCardOperationalState"), ("CM-ENTITY-MIB", "mbGnssCardSecondaryState"), ("CM-ENTITY-MIB", "mbGnssCardRowStatus"), ("CM-ENTITY-MIB", "mbGnssCardAlias"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbGnssCardGroup = mbGnssCardGroup.setStatus('current')
f3IrigCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 80)).setObjects(("CM-ENTITY-MIB", "f3IrigCardEntityIndex"), ("CM-ENTITY-MIB", "f3IrigCardAlias"), ("CM-ENTITY-MIB", "f3IrigCardAdminState"), ("CM-ENTITY-MIB", "f3IrigCardOperationalState"), ("CM-ENTITY-MIB", "f3IrigCardSecondaryState"), ("CM-ENTITY-MIB", "f3IrigCardTemperature"), ("CM-ENTITY-MIB", "f3IrigCardStorageType"), ("CM-ENTITY-MIB", "f3IrigCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3IrigCardGroup = f3IrigCardGroup.setStatus('current')
compositeClockCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 81)).setObjects(("CM-ENTITY-MIB", "compositeClockCardEntityIndex"), ("CM-ENTITY-MIB", "compositeClockCardAdminState"), ("CM-ENTITY-MIB", "compositeClockCardOperationalState"), ("CM-ENTITY-MIB", "compositeClockCardSecondaryState"), ("CM-ENTITY-MIB", "compositeClockCardRowStatus"), ("CM-ENTITY-MIB", "compositeClockCardAlias"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    compositeClockCardGroup = compositeClockCardGroup.setStatus('current')
mibBuilder.exportSymbols("CM-ENTITY-MIB", ethernetXG1SCCCardOperationalState=ethernetXG1SCCCardOperationalState, ethernetNTET3204CardVoltage=ethernetNTET3204CardVoltage, pseudoWireOcnStmCardTemperature=pseudoWireOcnStmCardTemperature, ethernet1x10GCardRestartAction=ethernet1x10GCardRestartAction, scuTAdminState=scuTAdminState, ethernetNTECardTemperature=ethernetNTECardTemperature, ethernetOverOCSTMCardRowStatus=ethernetOverOCSTMCardRowStatus, ethernetNTEXG116PROHCardVoltage=ethernetNTEXG116PROHCardVoltage, ethernet10x1GHighPerCardStorageType=ethernet10x1GHighPerCardStorageType, ethernetNTEOSA5411CardOperationalState=ethernetNTEOSA5411CardOperationalState, ethernetNTEOSA5420CardOperationalState=ethernetNTEOSA5420CardOperationalState, serverCardVirtualCpuAvailiable=serverCardVirtualCpuAvailiable, ethernetNTEXG120PROSHCardAdminState=ethernetNTEXG120PROSHCardAdminState, ethernetNTEGO102ProSPCardEntry=ethernetNTEGO102ProSPCardEntry, mbGnssCardSecondaryState=mbGnssCardSecondaryState, scuTRowStatus=scuTRowStatus, ethernetNTEGE114PHCardTable=ethernetNTEGE114PHCardTable, nteGE114ProVmSHCardGroup=nteGE114ProVmSHCardGroup, nteOsa5401CardGroup=nteOsa5401CardGroup, ethernetNTEGE112ProCardEntityIndex=ethernetNTEGE112ProCardEntityIndex, ethernetNTEGE112ProVmCardSwitchPortAction=ethernetNTEGE112ProVmCardSwitchPortAction, ethernetNTEGE114ProCardSecondaryState=ethernetNTEGE114ProCardSecondaryState, ethernetNTEGE114ProHECardEntityIndex=ethernetNTEGE114ProHECardEntityIndex, ethernetGE8SCCCardAdminState=ethernetGE8SCCCardAdminState, ethernetNTEGE114ProHECardTable=ethernetNTEGE114ProHECardTable, ethernetNTEGE114HCardAdminState=ethernetNTEGE114HCardAdminState, ethernetNTEXG120PROSHCardOperationalState=ethernetNTEXG120PROSHCardOperationalState, pseudoWireE3CardAdminState=pseudoWireE3CardAdminState, ethernetNTEGE114ProCSHCardOperationalState=ethernetNTEGE114ProCSHCardOperationalState, ethernetNTEGE112ProVmCardTable=ethernetNTEGE112ProVmCardTable, ethernetNTEGO102ProSPCardOperationalState=ethernetNTEGO102ProSPCardOperationalState, ethernetNTEOSA5420CardAdminState=ethernetNTEOSA5420CardAdminState, ethernetGE4SCCCardTable=ethernetGE4SCCCardTable, ethernetNTEGE201CardOperationalState=ethernetNTEGE201CardOperationalState, ethernetGE8ECCCardVoltage=ethernetGE8ECCCardVoltage, ethernetNTEGE101CardEntry=ethernetNTEGE101CardEntry, ethernetGE4ECCCardOperationalState=ethernetGE4ECCCardOperationalState, ethernetNTESH1PCSCardFineGrainedPmInterval=ethernetNTESH1PCSCardFineGrainedPmInterval, todPps16PortCardRowStatus=todPps16PortCardRowStatus, ethernetNTEXG118PROACSHCardSecondaryState=ethernetNTEXG118PROACSHCardSecondaryState, ethernetNTEGO102ProSPCardTable=ethernetNTEGO102ProSPCardTable, ethernetNTEGE104CardAdminState=ethernetNTEGE104CardAdminState, ethernetGE4SCCCardEntityIndex=ethernetGE4SCCCardEntityIndex, auxPortCardGroup=auxPortCardGroup, pseudoWireE3CardEntry=pseudoWireE3CardEntry, slotCardUnitName=slotCardUnitName, ethernetNTEOSA5411CardTable=ethernetNTEOSA5411CardTable, ge4PortCardTable=ge4PortCardTable, f3IrigCardRowStatus=f3IrigCardRowStatus, ethernetNTEGE114ProHECardAdminState=ethernetNTEGE114ProHECardAdminState, ethernetNTEGE112ProCardRestartAction=ethernetNTEGE112ProCardRestartAction, ethernetNTECX101Pro30ACardEntry=ethernetNTECX101Pro30ACardEntry, ethernetNTECX101Pro30ACardSecondaryState=ethernetNTECX101Pro30ACardSecondaryState, ethernetNTEGE206VCardTable=ethernetNTEGE206VCardTable, ethernetNTECX101Pro30ACardFineGrainedPmInterval=ethernetNTECX101Pro30ACardFineGrainedPmInterval, ethernetNTEGE112CardAdminState=ethernetNTEGE112CardAdminState, ethernetGE8SCryptoConnectorCardTemperature=ethernetGE8SCryptoConnectorCardTemperature, ethernetNTEGO102ProSPCardSwitchPortActionPort=ethernetNTEGO102ProSPCardSwitchPortActionPort, ethernetNTEGE114ProCSHCardSecondaryState=ethernetNTEGE114ProCSHCardSecondaryState, stuCardStorageType=stuCardStorageType, ethernetNTEXG118PROSHCardFineGrainedPmInterval=ethernetNTEXG118PROSHCardFineGrainedPmInterval, ethernetCPMRCardPsuType=ethernetCPMRCardPsuType, ethernetNTEGE114SCardEntityIndex=ethernetNTEGE114SCardEntityIndex, ethernet10x1GHighPerCardTable=ethernet10x1GHighPerCardTable, ethernetNTUCardAdminState=ethernetNTUCardAdminState, ethernetNTEXG118PROACSHCardRestartAction=ethernetNTEXG118PROACSHCardRestartAction, compositeClockCardEntry=compositeClockCardEntry, ethernetNTEGE201SyncECardFineGrainedPmInterval=ethernetNTEGE201SyncECardFineGrainedPmInterval, ethernetNTEGE114HCardSwitchPortAction=ethernetNTEGE114HCardSwitchPortAction, ethernetNTEGE114GCardRestartAction=ethernetNTEGE114GCardRestartAction, neIndex=neIndex, ethernetNTEGE114ProCCardVoltage=ethernetNTEGE114ProCCardVoltage, ethernetNTUCardStorageType=ethernetNTUCardStorageType, slotCardType=slotCardType, ethernetNTET1804CardMode=ethernetNTET1804CardMode, ethernetNTEGE114GCardOperationalState=ethernetNTEGE114GCardOperationalState, neProvAction=neProvAction, todPps16PortCardEntityIndex=todPps16PortCardEntityIndex, ethernetNTEGE114ProVmCSHCardSnmpDyingGaspEnabled=ethernetNTEGE114ProVmCSHCardSnmpDyingGaspEnabled, ethernetNTEGE101ProCardOperationalState=ethernetNTEGE101ProCardOperationalState, ethernetNTEOSA5421CardAdminState=ethernetNTEOSA5421CardAdminState, ethernetNTEOSA5421CardTemperature=ethernetNTEOSA5421CardTemperature, ethernetNTEGE114ProSHCardFineGrainedPmInterval=ethernetNTEGE114ProSHCardFineGrainedPmInterval, ethernet1x10GCardAdminState=ethernet1x10GCardAdminState, ethernetNTEGO102ProSCardVoltage=ethernetNTEGO102ProSCardVoltage, stuCardEntry=stuCardEntry, ethernetNTEGE114SCardOperationalState=ethernetNTEGE114SCardOperationalState, ethernetNTEGE114HCardSwitchPortActionPort=ethernetNTEGE114HCardSwitchPortActionPort, ethernetNTEXG118PROSHCardVoltage=ethernetNTEXG118PROSHCardVoltage, ethernetNTEGESyncProbeCardFineGrainedPmInterval=ethernetNTEGESyncProbeCardFineGrainedPmInterval, ethernetNTEGE114ProCSHCardAdminState=ethernetNTEGE114ProCSHCardAdminState, ethernetNTEGE114ProVmSHCardOperationalState=ethernetNTEGE114ProVmSHCardOperationalState, ethernetNTEXG120PROSHCardTemperature=ethernetNTEXG120PROSHCardTemperature, ethernetCSMCardSnmpDyingGaspEnabled=ethernetCSMCardSnmpDyingGaspEnabled, ethernetOverOCSTMCardTable=ethernetOverOCSTMCardTable, ethernetXG1SCCCardVoltage=ethernetXG1SCCCardVoltage, ethernetNTEGE114ProVmSHCardVoltage=ethernetNTEGE114ProVmSHCardVoltage, ethernetNTEGE114ProCCardSnmpDyingGaspEnabled=ethernetNTEGE114ProCCardSnmpDyingGaspEnabled, ethernetNTEGE114ProHECardSwitchPortAction=ethernetNTEGE114ProHECardSwitchPortAction, ethernetNTEGE102ProEFMHCardFAN2State=ethernetNTEGE102ProEFMHCardFAN2State, pps16PortCardRowStatus=pps16PortCardRowStatus, ethernetCSMCardEntityIndex=ethernetCSMCardEntityIndex, pps16PortCardAdminState=pps16PortCardAdminState, ethernetOverOCSTMCardGroup=ethernetOverOCSTMCardGroup, hubshelfGroup=hubshelfGroup, bits16PortCardOperationalState=bits16PortCardOperationalState, serverCardOperationalState=serverCardOperationalState, ethernetNTEGO102ProSMCardAdminState=ethernetNTEGO102ProSMCardAdminState, ethernetNTEXG210CCardFineGrainedPmInterval=ethernetNTEXG210CCardFineGrainedPmInterval, ethernetNTEGE114ProSHCardRestartAction=ethernetNTEGE114ProSHCardRestartAction, ethernetNTEXG210CardSnmpDyingGaspEnabled=ethernetNTEXG210CardSnmpDyingGaspEnabled, ethernetNTET1804CardFineGrainedPmInterval=ethernetNTET1804CardFineGrainedPmInterval, stuCardEntityIndex=stuCardEntityIndex, fanSecondaryState=fanSecondaryState, ethernetGE8SCryptoConnectorCardRestartAction=ethernetGE8SCryptoConnectorCardRestartAction, ethernetNTEOSA5421CardOperationalState=ethernetNTEOSA5421CardOperationalState, stuCardForceOffLineAction=stuCardForceOffLineAction, f3UsbHostUnitName=f3UsbHostUnitName, compositeClockCardGroup=compositeClockCardGroup, ethernetNTEGE206CardEntry=ethernetNTEGE206CardEntry, ethernetNTEOSA5411CardEntry=ethernetNTEOSA5411CardEntry, ethernetNTEXG210CardVoltage=ethernetNTEXG210CardVoltage, ethernetNTECX101Pro30ACardSwitchPortAction=ethernetNTECX101Pro30ACardSwitchPortAction, nteGe114ProHECardGroup=nteGe114ProHECardGroup, ethernetNTEGE114ProVmSHCardAdminState=ethernetNTEGE114ProVmSHCardAdminState, ethernetNTEGO102ProSPCardSwitchPortAction=ethernetNTEGO102ProSPCardSwitchPortAction, ethernetNTEXG118PROACSHCardOperationalState=ethernetNTEXG118PROACSHCardOperationalState, ethernetNTEGE114ProCardEntry=ethernetNTEGE114ProCardEntry, ethernetNTEGESyncProbeCardSecondaryState=ethernetNTEGESyncProbeCardSecondaryState, ethernetXG1SCCCardStorageType=ethernetXG1SCCCardStorageType, ethernetNTEGE114ProVmHCardSecondaryState=ethernetNTEGE114ProVmHCardSecondaryState, nteGeSyncProbeCardGroup=nteGeSyncProbeCardGroup, ethernetNTEXG120PROCardAdminState=ethernetNTEXG120PROCardAdminState, ethernetNTEGE112ProHCardEntityIndex=ethernetNTEGE112ProHCardEntityIndex, neName=neName, ethernetNTUCardRestartAction=ethernetNTUCardRestartAction, ethernetNTEGE114CardTemperature=ethernetNTEGE114CardTemperature, ethernetNTEGE104CardTable=ethernetNTEGE104CardTable, ethernetGE4ECCCardVoltage=ethernetGE4ECCCardVoltage, compositeClockCardAlias=compositeClockCardAlias, nteGe114PHCardGroup=nteGe114PHCardGroup, ethernetNTEGE102ProEFMHCardSecondaryState=ethernetNTEGE102ProEFMHCardSecondaryState, ethernetNTECX102Pro30ACardEntityIndex=ethernetNTECX102Pro30ACardEntityIndex, serverCardGroup=serverCardGroup, CardType=CardType, serverCardEntry=serverCardEntry, ethernetNTEGE206FCardOperationalState=ethernetNTEGE206FCardOperationalState, nteGo102ProSPCardGroup=nteGo102ProSPCardGroup, pseudoWireOcnStmCardFreqSourceType=pseudoWireOcnStmCardFreqSourceType, scuTSecondaryState=scuTSecondaryState, ethernetCPMRCardEntry=ethernetCPMRCardEntry, nteGE114ProVmCSHCardGroup=nteGE114ProVmCSHCardGroup, ethernetNTEGE104CardRestartAction=ethernetNTEGE104CardRestartAction, commonEntityGroup=commonEntityGroup, ethernetOverOCSTMCardMode=ethernetOverOCSTMCardMode, ethernetFE36ECardTemperature=ethernetFE36ECardTemperature, ethernet10x1GHighPerCardForceOffLineAction=ethernet10x1GHighPerCardForceOffLineAction, ethernet1x10GCardEntityIndex=ethernet1x10GCardEntityIndex, ethernetOverOCSTMCardForceOffLineAction=ethernetOverOCSTMCardForceOffLineAction, psuType=psuType, ge8SCCCardGroup=ge8SCCCardGroup, ethernetNTEGE101CardTemperature=ethernetNTEGE101CardTemperature, pseudoWireOcnStmCardIpAddress=pseudoWireOcnStmCardIpAddress, ethernetNTEGE201SyncECardTable=ethernetNTEGE201SyncECardTable, ethernetNTEXG116PROCardVoltage=ethernetNTEXG116PROCardVoltage, ethernetNTEGE114ProCCardSwitchPortAction=ethernetNTEGE114ProCCardSwitchPortAction, ethernetNTEGE114HCardFineGrainedPmInterval=ethernetNTEGE114HCardFineGrainedPmInterval, ethernetNTEGE114SCardSnmpDyingGaspEnabled=ethernetNTEGE114SCardSnmpDyingGaspEnabled, ethernetNTET3204CardEntityIndex=ethernetNTET3204CardEntityIndex, scuTable=scuTable, ethernetGE4ECCCardRowStatus=ethernetGE4ECCCardRowStatus, stuHighPerCardTemperature=stuHighPerCardTemperature, ethernetNTEGE114ProVmHCardEntry=ethernetNTEGE114ProVmHCardEntry, ethernetNTEXG118PROACSHCardAdminState=ethernetNTEXG118PROACSHCardAdminState, slotCardMfgSite=slotCardMfgSite, ethernetNTEGE114ProCardRestartAction=ethernetNTEGE114ProCardRestartAction, ethernet1x10GHighPerCardSecondaryState=ethernet1x10GHighPerCardSecondaryState, amiEntityIndex=amiEntityIndex, ethernetNTEOSA5411CardTemperature=ethernetNTEOSA5411CardTemperature, stuHighPerCardSecondaryState=stuHighPerCardSecondaryState, ethernetNTEXG116PROHCardFineGrainedPmInterval=ethernetNTEXG116PROHCardFineGrainedPmInterval, ethernetOverOCSTMCardStorageType=ethernetOverOCSTMCardStorageType, shelfbackplaneRev=shelfbackplaneRev, ethernetSWFCardRowStatus=ethernetSWFCardRowStatus, ethernetNTEGE114ProVmCSHCardFineGrainedPmInterval=ethernetNTEGE114ProVmCSHCardFineGrainedPmInterval, slotCardFormatVersion=slotCardFormatVersion, bits16PortCardTemperature=bits16PortCardTemperature, ethernetNTEGE114ProVmCSHCardTable=ethernetNTEGE114ProVmCSHCardTable, ethernetFE36ECardRestartAction=ethernetFE36ECardRestartAction, ethernetNTET1804CardEntityIndex=ethernetNTET1804CardEntityIndex, ethernetSWFCardAdminState=ethernetSWFCardAdminState, ethernetNTEOSA5420CardSnmpDyingGaspEnabled=ethernetNTEOSA5420CardSnmpDyingGaspEnabled, f3UsbHostMuxOperationalMode=f3UsbHostMuxOperationalMode, ethernetNTEGE112ProCardTable=ethernetNTEGE112ProCardTable, nteOsa5420CardGroup=nteOsa5420CardGroup, neAutoProvMode=neAutoProvMode, ethernetNTEXG116PROHCardSecondaryState=ethernetNTEXG116PROHCardSecondaryState, ethernetNTEGE114PHCardSwitchPortActionPort=ethernetNTEGE114PHCardSwitchPortActionPort, ethernetNTEGE101ProCardSwitchPortAction=ethernetNTEGE101ProCardSwitchPortAction, networkElementLLDPParamsTable=networkElementLLDPParamsTable, ethernetNTEGE114SHCardAdminState=ethernetNTEGE114SHCardAdminState, ethernetCSMCardEntry=ethernetCSMCardEntry, pps16PortCardEntry=pps16PortCardEntry, shelfAction=shelfAction, nteXg210CardGroup=nteXg210CardGroup, ethernetNTEOSA5421CardEntry=ethernetNTEOSA5421CardEntry, ethernetNTEGE114SHCardEntry=ethernetNTEGE114SHCardEntry, ethernetNTEXG116PROHCardRestartAction=ethernetNTEXG116PROHCardRestartAction, ethernetNTEGE206FCardTemperature=ethernetNTEGE206FCardTemperature, stiHighPerSecondaryState=stiHighPerSecondaryState, neFromPort=neFromPort, scuTemperature=scuTemperature, ethernetNTECX101Pro30ACardRestartAction=ethernetNTECX101Pro30ACardRestartAction, ethernetNTEGE201SyncECardEntityIndex=ethernetNTEGE201SyncECardEntityIndex, ethernetNTEOSA5421CardSecondaryState=ethernetNTEOSA5421CardSecondaryState, ethernetNTEGE201CardSnmpDyingGaspEnabled=ethernetNTEGE201CardSnmpDyingGaspEnabled, SwitchPortAction=SwitchPortAction, ethernetNTEGE114PHCardSnmpDyingGaspEnabled=ethernetNTEGE114PHCardSnmpDyingGaspEnabled, ethernetNTEGE112ProMCardSwitchPortActionPort=ethernetNTEGE112ProMCardSwitchPortActionPort, ethernetNTEGE206VCardTemperature=ethernetNTEGE206VCardTemperature, stuHighPerCardForceOffLineAction=stuHighPerCardForceOffLineAction, psuGroup=psuGroup, ethernetNTEGE206FCardFineGrainedPmInterval=ethernetNTEGE206FCardFineGrainedPmInterval, fanStorageType=fanStorageType, ethernetNTUCardVoltage=ethernetNTUCardVoltage, ethernetNTUCardEntityIndex=ethernetNTUCardEntityIndex, auxPortCardEntityIndex=auxPortCardEntityIndex, ethernetNTEXG120PROSHCardEntry=ethernetNTEXG120PROSHCardEntry, ethernetNTEGE112CardEntityIndex=ethernetNTEGE112CardEntityIndex, ethernetNTEGE206VCardEntityIndex=ethernetNTEGE206VCardEntityIndex, ethernetGE8SCCCardEntry=ethernetGE8SCCCardEntry, todPps16PortCardOperationalState=todPps16PortCardOperationalState, psuOutputVoltage=psuOutputVoltage, ethernetNTEGE114ProVmSHCardTemperature=ethernetNTEGE114ProVmSHCardTemperature, ethernetNTEGE112CardSwitchPortAction=ethernetNTEGE112CardSwitchPortAction, ethernetGE8ECCCardStorageType=ethernetGE8ECCCardStorageType, nteGe102ProHCardGroup=nteGe102ProHCardGroup, nteGo102ProSMCardGroup=nteGo102ProSMCardGroup, ethernetNTECX102Pro30ACardTemperature=ethernetNTECX102Pro30ACardTemperature, nemiEntry=nemiEntry, ethernetNTEGE114ProCardEntityIndex=ethernetNTEGE114ProCardEntityIndex, auxPortCardAdminState=auxPortCardAdminState, psuTemperature=psuTemperature, f3UsbHostSwRev=f3UsbHostSwRev, ethernetNTEGE102ProHCardTable=ethernetNTEGE102ProHCardTable, stuCardTable=stuCardTable, ethernetNTEXG120PROCardTemperature=ethernetNTEXG120PROCardTemperature, shelfAdminState=shelfAdminState, ethernetNTEGE114GCardFineGrainedPmInterval=ethernetNTEGE114GCardFineGrainedPmInterval, ethernetNTEXG118PROACSHCardTable=ethernetNTEXG118PROACSHCardTable, bits16PortCardSecondaryState=bits16PortCardSecondaryState, ethernetNTEGE114ProCCardOperationalState=ethernetNTEGE114ProCCardOperationalState, ethernetNTEGE114ProCSHCardFineGrainedPmInterval=ethernetNTEGE114ProCSHCardFineGrainedPmInterval, ethernetNTEGE102ProEFMHCardEntityIndex=ethernetNTEGE102ProEFMHCardEntityIndex)
mibBuilder.exportSymbols("CM-ENTITY-MIB", ethernetNTET3204CardFineGrainedPmInterval=ethernetNTET3204CardFineGrainedPmInterval, ethernetNTEGE114ProCardTable=ethernetNTEGE114ProCardTable, ethernetNTEGE112ProVmCardSnmpDyingGaspEnabled=ethernetNTEGE112ProVmCardSnmpDyingGaspEnabled, ethernetNTEGE112ProCardFineGrainedPmInterval=ethernetNTEGE112ProCardFineGrainedPmInterval, mbGnssCardEntry=mbGnssCardEntry, slotCardCLEICode=slotCardCLEICode, nteSh1PcsCardGroup=nteSh1PcsCardGroup, ethernetNTECardRestartAction=ethernetNTECardRestartAction, ethernetNTEGE101ProCardAdminState=ethernetNTEGE101ProCardAdminState, ethernetNTESH1PCSCardEntityIndex=ethernetNTESH1PCSCardEntityIndex, nemiSecondaryState=nemiSecondaryState, ethernetNTEGE114ProVmSHCardRestartAction=ethernetNTEGE114ProVmSHCardRestartAction, ethernetNTEGE114PHCardVoltage=ethernetNTEGE114PHCardVoltage, cmEntityObjects=cmEntityObjects, ethernet1x10GHighPerCardTemperature=ethernet1x10GHighPerCardTemperature, PSNEncapsulationMode=PSNEncapsulationMode, ethernetNTEXG210CCardTemperature=ethernetNTEXG210CCardTemperature, ethernetGE8SCryptoConnectorCardVoltage=ethernetGE8SCryptoConnectorCardVoltage, ethernetNTET3204CardRestartAction=ethernetNTET3204CardRestartAction, f3UsbHostPartNumber=f3UsbHostPartNumber, pseudoWireE1T1CardAdminState=pseudoWireE1T1CardAdminState, ethernetNTEGE114CardSwitchPortAction=ethernetNTEGE114CardSwitchPortAction, ethernet10x1GHighPerCardSnmpDyingGaspEnabled=ethernet10x1GHighPerCardSnmpDyingGaspEnabled, ethernetNTEGE114PHCardOperationalState=ethernetNTEGE114PHCardOperationalState, ethernetNTEGE102ProHCardEntry=ethernetNTEGE102ProHCardEntry, slotType=slotType, ethernetGE4ECCCardStorageType=ethernetGE4ECCCardStorageType, ethernetNTEGE114ProVmCHCardTemperature=ethernetNTEGE114ProVmCHCardTemperature, ethernetNTEGE112CardEntry=ethernetNTEGE112CardEntry, ethernetNTEGE114ProVmHCardSnmpDyingGaspEnabled=ethernetNTEGE114ProVmHCardSnmpDyingGaspEnabled, ethernetNTEXG120PROCardVoltage=ethernetNTEXG120PROCardVoltage, networkElementTable=networkElementTable, ethernetXG1SCCCardRestartAction=ethernetXG1SCCCardRestartAction, ethernetNTEGE114ProHECardOperationalState=ethernetNTEGE114ProHECardOperationalState, ethernetNTEOSA5421CardFineGrainedPmInterval=ethernetNTEOSA5421CardFineGrainedPmInterval, ethernetNTEGE206VCardOperationalState=ethernetNTEGE206VCardOperationalState, ethernetNTEGE114ProHECardFineGrainedPmInterval=ethernetNTEGE114ProHECardFineGrainedPmInterval, ethernetGE8ECCCardSecondaryState=ethernetGE8ECCCardSecondaryState, ethernetNTEXG120PROCardSnmpDyingGaspEnabled=ethernetNTEXG120PROCardSnmpDyingGaspEnabled, ethernetCPMRCardOperationalState=ethernetCPMRCardOperationalState, nemiAdminState=nemiAdminState, nteOsa5411CardGroup=nteOsa5411CardGroup, ethernetNTEXG210CCardSecondaryState=ethernetNTEXG210CCardSecondaryState, ethernetNTEXG116PROHCardEntry=ethernetNTEXG116PROHCardEntry, ethernetNTEOSA5420CardRestartAction=ethernetNTEOSA5420CardRestartAction, nteGE114ProVmCHCardGroup=nteGE114ProVmCHCardGroup, pseudoWireOcnStmCardRowStatus=pseudoWireOcnStmCardRowStatus, ethernetNTEGE114HCardTable=ethernetNTEGE114HCardTable, ethernetNTEGE114ProHECardSecondaryState=ethernetNTEGE114ProHECardSecondaryState, f3UsbHostTable=f3UsbHostTable, ethernetCPMRCardAdminState=ethernetCPMRCardAdminState, ethernetNTEGE112ProHCardSwitchPortAction=ethernetNTEGE112ProHCardSwitchPortAction, ethernetNTEGE104CardSwitchPortAction=ethernetNTEGE104CardSwitchPortAction, stiSecondaryState=stiSecondaryState, ethernetXG1SCCCardAdminState=ethernetXG1SCCCardAdminState, ethernetNTEGO102ProSMCardTable=ethernetNTEGO102ProSMCardTable, nteOsa5405CardGroup=nteOsa5405CardGroup, ethernetNTEGE114ProHECardRestartAction=ethernetNTEGE114ProHECardRestartAction, ethernetNTEXG120PROCardTable=ethernetNTEXG120PROCardTable, ethernetNTEGE101CardVoltage=ethernetNTEGE101CardVoltage, pseudoWireE3CardOperationalState=pseudoWireE3CardOperationalState, ethernetCPMRCardFAN1State=ethernetCPMRCardFAN1State, ethernetNTEGE206FCardEntityIndex=ethernetNTEGE206FCardEntityIndex, stiTemperature=stiTemperature, shelfbackplaneDOM=shelfbackplaneDOM, ethernet1x10GCardSnmpDyingGaspEnabled=ethernet1x10GCardSnmpDyingGaspEnabled, ethernetNTEGE114CardTable=ethernetNTEGE114CardTable, ethernetNTEOSA5401CardAdminState=ethernetNTEOSA5401CardAdminState, nteXg210CCardGroup=nteXg210CCardGroup, ethernetNTEGE102ProEFMHCardTemperature=ethernetNTEGE102ProEFMHCardTemperature, serverCardMemoryAvailiable=serverCardMemoryAvailiable, ethernetNTEGO102ProSCardEntityIndex=ethernetNTEGO102ProSCardEntityIndex, ethernetNTEGE114ProHECardSnmpDyingGaspEnabled=ethernetNTEGE114ProHECardSnmpDyingGaspEnabled, ethernetGE8SCryptoConnectorCardStorageType=ethernetGE8SCryptoConnectorCardStorageType, stuHighPerCardOperationalState=stuHighPerCardOperationalState, neAccepted=neAccepted, ethernetNTEGE102ProEFMHCardPsuType=ethernetNTEGE102ProEFMHCardPsuType, ethernetNTECardTable=ethernetNTECardTable, ethernetGE4ECCCardEntityIndex=ethernetGE4ECCCardEntityIndex, ethernetNTEGE114ProCardAdminState=ethernetNTEGE114ProCardAdminState, nemiForceOffLineAction=nemiForceOffLineAction, ethernetNTEGE114ProVmCSHCardSwitchPortActionPort=ethernetNTEGE114ProVmCSHCardSwitchPortActionPort, ethernetCSMCardAdminState=ethernetCSMCardAdminState, neDescription=neDescription, ethernetNTEGE112ProMCardTable=ethernetNTEGE112ProMCardTable, ethernetCSMCardOscillatorType=ethernetCSMCardOscillatorType, ethernet10x1GHighPerCardEntityIndex=ethernet10x1GHighPerCardEntityIndex, ethernetNTEGE114ProCSHCardSnmpDyingGaspEnabled=ethernetNTEGE114ProCSHCardSnmpDyingGaspEnabled, pseudoWireOcnStmCardSecondaryState=pseudoWireOcnStmCardSecondaryState, ethernetNTET3204CardAdminState=ethernetNTET3204CardAdminState, ethernetNTEOSA5411CardSnmpDyingGaspEnabled=ethernetNTEOSA5411CardSnmpDyingGaspEnabled, scuRestartAction=scuRestartAction, ethernetFE36ECardStorageType=ethernetFE36ECardStorageType, ethernet1x10GCardEntry=ethernet1x10GCardEntry, clk16PortCardTable=clk16PortCardTable, ethernetNTEGE114CardOperationalState=ethernetNTEGE114CardOperationalState, ethernetNTEGE102ProHCardOperationalState=ethernetNTEGE102ProHCardOperationalState, ethernetSWFCardTable=ethernetSWFCardTable, ethernetNTEGO102ProSMCardSnmpDyingGaspEnabled=ethernetNTEGO102ProSMCardSnmpDyingGaspEnabled, pps16PortCardTable=pps16PortCardTable, ethernetSWFCardSecondaryState=ethernetSWFCardSecondaryState, fanTable=fanTable, scuTVoltage=scuTVoltage, ethernetNTEGE112CardSnmpDyingGaspEnabled=ethernetNTEGE112CardSnmpDyingGaspEnabled, ethernetNTEGO102ProSCardSnmpDyingGaspEnabled=ethernetNTEGO102ProSCardSnmpDyingGaspEnabled, ethernetNTEGE114ProVmSHCardSnmpDyingGaspEnabled=ethernetNTEGE114ProVmSHCardSnmpDyingGaspEnabled, serverCardAdminState=serverCardAdminState, ethernetNTEGE114GCardEntry=ethernetNTEGE114GCardEntry, ge4PortCardRowStatus=ge4PortCardRowStatus, ethernetGE4SCCCardTemperature=ethernetGE4SCCCardTemperature, ethernetNTET3204CardEntry=ethernetNTET3204CardEntry, ethernetNTECX101Pro30ACardSwitchPortActionPort=ethernetNTECX101Pro30ACardSwitchPortActionPort, serverCardVmNumber=serverCardVmNumber, scuEntityIndex=scuEntityIndex, ethernet10x1GHighPerCardRowStatus=ethernet10x1GHighPerCardRowStatus, ethernetNTEGE102ProEFMHCardTable=ethernetNTEGE102ProEFMHCardTable, ethernetNTEGE114ProVmCHCardTable=ethernetNTEGE114ProVmCHCardTable, ethernetNTEOSA5405CardAdminState=ethernetNTEOSA5405CardAdminState, ethernetNTEOSA5411CardFineGrainedPmInterval=ethernetNTEOSA5411CardFineGrainedPmInterval, ethernetNTEXG210CardSecondaryState=ethernetNTEXG210CardSecondaryState, ethernetNTECardRowStatus=ethernetNTECardRowStatus, ethernetGE4SCCCardEntry=ethernetGE4SCCCardEntry, ethernetSWFCardEntry=ethernetSWFCardEntry, scuTStorageType=scuTStorageType, ethernetNTEGE114ProSHCardAdminState=ethernetNTEGE114ProSHCardAdminState, pseudoWireE3CardTimeOfDay=pseudoWireE3CardTimeOfDay, ethernetNTEGO102ProSMCardVoltage=ethernetNTEGO102ProSMCardVoltage, ethernetNTEGE114PHCardTemperature=ethernetNTEGE114PHCardTemperature, ethernetGE8ECCCardOperationalState=ethernetGE8ECCCardOperationalState, fanAdminState=fanAdminState, ethernetNTEXG210CCardRestartAction=ethernetNTEXG210CCardRestartAction, ethernetNTEGE112ProCardSwitchPortAction=ethernetNTEGE112ProCardSwitchPortAction, ethernetNTEGE114ProVmCHCardEntry=ethernetNTEGE114ProVmCHCardEntry, ethernetNTEGESyncProbeCardTable=ethernetNTEGESyncProbeCardTable, ethernetNTEGE114ProVmHCardTable=ethernetNTEGE114ProVmHCardTable, ethernetOverOCSTMCardRestartAction=ethernetOverOCSTMCardRestartAction, f3IrigCardAdminState=f3IrigCardAdminState, serverCardStorageType=serverCardStorageType, f3IrigCardOperationalState=f3IrigCardOperationalState, ethernetNTESH1PCSCardSnmpDyingGaspEnabled=ethernetNTESH1PCSCardSnmpDyingGaspEnabled, ethernetNTEGO102ProSMCardOperationalState=ethernetNTEGO102ProSMCardOperationalState, ethernetCSMCardVoltage=ethernetCSMCardVoltage, ethernetNTEXG116PROCardFineGrainedPmInterval=ethernetNTEXG116PROCardFineGrainedPmInterval, pseudoWireE1T1CardOperationalState=pseudoWireE1T1CardOperationalState, scuFlashSerialNum=scuFlashSerialNum, ethernetNTEGE114CardVoltage=ethernetNTEGE114CardVoltage, ethernetCPMRCardSecondaryState=ethernetCPMRCardSecondaryState, ethernetCPMRCardPSU2State=ethernetCPMRCardPSU2State, ethernetNTEGE114ProVmHCardTemperature=ethernetNTEGE114ProVmHCardTemperature, ethernet10x1GCardForceOffLineAction=ethernet10x1GCardForceOffLineAction, stiHighPerOperationalState=stiHighPerOperationalState, ethernetNTEXG118PROSHCardTemperature=ethernetNTEXG118PROSHCardTemperature, ethernetNTEGE206CardEntityIndex=ethernetNTEGE206CardEntityIndex, amiAdminState=amiAdminState, ethernetGE8ECCCardTable=ethernetGE8ECCCardTable, ethernetNTEXG210CCardOperationalState=ethernetNTEXG210CCardOperationalState, ethernetXG1SCCCardSecondaryState=ethernetXG1SCCCardSecondaryState, ethernetNTEXG120PROSHCardFineGrainedPmInterval=ethernetNTEXG120PROSHCardFineGrainedPmInterval, ethernetNTUCardSecondaryState=ethernetNTUCardSecondaryState, ge8ECCCardGroup=ge8ECCCardGroup, ethernetNTEGE114ProSHCardTable=ethernetNTEGE114ProSHCardTable, ethernetNTEGE114ProVmHCardAdminState=ethernetNTEGE114ProVmHCardAdminState, ethernet1x10GHighPerCardRestartAction=ethernet1x10GHighPerCardRestartAction, ethernetXG1SCCCardTemperature=ethernetXG1SCCCardTemperature, serverCardSecondaryState=serverCardSecondaryState, ethernetNTEXG116PROCardAdminState=ethernetNTEXG116PROCardAdminState, ethernetGE8SCryptoConnectorCardSecondaryState=ethernetGE8SCryptoConnectorCardSecondaryState, ethernetNTEGE114HCardTemperature=ethernetNTEGE114HCardTemperature, stuCardSecondaryState=stuCardSecondaryState, ethernet1x10GHighPerCardSnmpDyingGaspEnabled=ethernet1x10GHighPerCardSnmpDyingGaspEnabled, ethernetFE36ECardTable=ethernetFE36ECardTable, f3UsbHostIndex=f3UsbHostIndex, ResyncType=ResyncType, f3UsbHostFormatVersion=f3UsbHostFormatVersion, nteGe114ProCardGroup=nteGe114ProCardGroup, ethernetNTEGE104CardEntityIndex=ethernetNTEGE104CardEntityIndex, ethernetNTEGE112ProMCardSnmpDyingGaspEnabled=ethernetNTEGE112ProMCardSnmpDyingGaspEnabled, ethernetNTEGE102ProHCardAdminState=ethernetNTEGE102ProHCardAdminState, slotCardSwRev=slotCardSwRev, ethernetNTEGE114GCardTemperature=ethernetNTEGE114GCardTemperature, ethernetGE8SCCCardRowStatus=ethernetGE8SCCCardRowStatus, slotCardPartNumber=slotCardPartNumber, ethernetNTEGE112ProMCardSwitchPortAction=ethernetNTEGE112ProMCardSwitchPortAction, clk16PortCardAlias=clk16PortCardAlias, shelfLedControl=shelfLedControl, psuStorageType=psuStorageType, nteGe114SHCardGroup=nteGe114SHCardGroup, ethernetNTEGE102ProEFMHCardVoltage=ethernetNTEGE102ProEFMHCardVoltage, nteGE114ProVmHCardGroup=nteGE114ProVmHCardGroup, mbGnssCardTable=mbGnssCardTable, nemiTemperature=nemiTemperature, amiTemperature=amiTemperature, networkElementEntry=networkElementEntry, ethernetNTEGO102ProSMCardFineGrainedPmInterval=ethernetNTEGO102ProSMCardFineGrainedPmInterval, ethernetNTEGE114GCardSwitchPortAction=ethernetNTEGE114GCardSwitchPortAction, ethernetNTEGE101ProCardTable=ethernetNTEGE101ProCardTable, ethernet1x10GCardTemperature=ethernet1x10GCardTemperature, scuFlashFirmwareRev=scuFlashFirmwareRev, scuTOperationalState=scuTOperationalState, ethernetOsa3350MgntCardTable=ethernetOsa3350MgntCardTable, auxPortCardTemperature=auxPortCardTemperature, ethernetNTEOSA5420CardEntry=ethernetNTEOSA5420CardEntry, ethernetNTEXG116PROCardEntityIndex=ethernetNTEXG116PROCardEntityIndex, ethernetNTEGE114ProVmSHCardEntry=ethernetNTEGE114ProVmSHCardEntry, xg1XCCCardGroup=xg1XCCCardGroup, ethernetGE8ECCCardAdminState=ethernetGE8ECCCardAdminState, ethernetGE8SCryptoConnectorCardOperationalState=ethernetGE8SCryptoConnectorCardOperationalState, ethernetNTEGO102ProSCardSwitchPortActionPort=ethernetNTEGO102ProSCardSwitchPortActionPort, ethernetNTEGE102ProHCardSwitchPortActionPort=ethernetNTEGE102ProHCardSwitchPortActionPort, ethernetNTEOSA5421CardRestartAction=ethernetNTEOSA5421CardRestartAction, ethernetNTEXG118PROSHCardTable=ethernetNTEXG118PROSHCardTable, ethernetNTEGO102ProSMCardSecondaryState=ethernetNTEGO102ProSMCardSecondaryState, ethernetNTEGE114SCardFineGrainedPmInterval=ethernetNTEGE114SCardFineGrainedPmInterval, ethernetNTEXG116PROHCardEntityIndex=ethernetNTEXG116PROHCardEntityIndex, ethernetNTEGE114HCardVoltage=ethernetNTEGE114HCardVoltage, pseudoWireE3CardRestartAction=pseudoWireE3CardRestartAction, amiTable=amiTable, ethernetXG1XCCCardTable=ethernetXG1XCCCardTable, ethernetNTEXG120PROCardOperationalState=ethernetNTEXG120PROCardOperationalState, ethernetXG1XCCCardVoltage=ethernetXG1XCCCardVoltage, ethernetOverOCSTMCardSecondaryState=ethernetOverOCSTMCardSecondaryState, ethernetNTEGE112ProHCardOperationalState=ethernetNTEGE112ProHCardOperationalState, ethernetNTEGE114CardFineGrainedPmInterval=ethernetNTEGE114CardFineGrainedPmInterval, ethernetNTEGO102ProSCardTable=ethernetNTEGO102ProSCardTable, ethernetNTEGE102ProEFMHCardAdminState=ethernetNTEGE102ProEFMHCardAdminState, stiEntityIndex=stiEntityIndex, ethernetNTEGE112ProMCardOperationalState=ethernetNTEGE112ProMCardOperationalState, ethernetNTEGE102ProHCardRestartAction=ethernetNTEGE102ProHCardRestartAction, bits16PortCardRowStatus=bits16PortCardRowStatus, PortCarrierType=PortCarrierType, ethernetXG1SCCCardTable=ethernetXG1SCCCardTable, csmCardGroup=csmCardGroup, ethernetNTEGE112ProMCardFineGrainedPmInterval=ethernetNTEGE112ProMCardFineGrainedPmInterval, ethernetNTEGE201CardAdminState=ethernetNTEGE201CardAdminState, ethernetNTET1804CardTable=ethernetNTET1804CardTable, ethernetNTEGE114HCardRestartAction=ethernetNTEGE114HCardRestartAction, stuCardTemperature=stuCardTemperature, ethernetNTET1804CardVoltage=ethernetNTET1804CardVoltage, ethernetNTEXG120PROCardSecondaryState=ethernetNTEXG120PROCardSecondaryState, ethernetNTEGO102ProSCardFineGrainedPmInterval=ethernetNTEGO102ProSCardFineGrainedPmInterval, neType=neType, ethernetNTEOSA5411CardRestartAction=ethernetNTEOSA5411CardRestartAction, ethernetNTEXG210CardOperationalState=ethernetNTEXG210CardOperationalState, ethernetNTEGESyncProbeCardTemperature=ethernetNTEGESyncProbeCardTemperature, ethernetNTEGE104CardSnmpDyingGaspEnabled=ethernetNTEGE104CardSnmpDyingGaspEnabled, nemiRestartAction=nemiRestartAction, ethernetNTEGE102ProHCardFineGrainedPmInterval=ethernetNTEGE102ProHCardFineGrainedPmInterval, ethernetOsa3350MgntCardRestartAction=ethernetOsa3350MgntCardRestartAction, ethernetNTEGE114ProVmCHCardVoltage=ethernetNTEGE114ProVmCHCardVoltage, ethernetNTEXG120PROSHCardVoltage=ethernetNTEXG120PROSHCardVoltage, shelfEntry=shelfEntry, ethernetNTUCardTemperature=ethernetNTUCardTemperature, ethernetNTECX102Pro30ACardAdminState=ethernetNTECX102Pro30ACardAdminState, serverCardVirtualCpuTotal=serverCardVirtualCpuTotal)
mibBuilder.exportSymbols("CM-ENTITY-MIB", ethernetNTUCardTable=ethernetNTUCardTable, ethernetNTEOSA5411CardSecondaryState=ethernetNTEOSA5411CardSecondaryState, nteXg120ProCardGroup=nteXg120ProCardGroup, clk16PortCardOperationalState=clk16PortCardOperationalState, f3IrigCardEntityIndex=f3IrigCardEntityIndex, nemiRowStatus=nemiRowStatus, ethernetNTEGE112ProHCardTemperature=ethernetNTEGE112ProHCardTemperature, ethernetNTEGE102ProHCardSnmpDyingGaspEnabled=ethernetNTEGE102ProHCardSnmpDyingGaspEnabled, stuCardRestartAction=stuCardRestartAction, ethernetNTEGE114ProCardSwitchPortAction=ethernetNTEGE114ProCardSwitchPortAction, ethernetGE4SCCCardSecondaryState=ethernetGE4SCCCardSecondaryState, pseudoWireOcnStmCardVoltage=pseudoWireOcnStmCardVoltage, ethernet1x10GHighPerCardForceOffLineAction=ethernet1x10GHighPerCardForceOffLineAction, shelfTable=shelfTable, nteGe114CardGroup=nteGe114CardGroup, ethernetNTEGESyncProbeCardAdminState=ethernetNTEGESyncProbeCardAdminState, ethernetNTEOSA5411CardVoltage=ethernetNTEOSA5411CardVoltage, ethernetNTEGE102ProHCardTemperature=ethernetNTEGE102ProHCardTemperature, ethernetNTEGE112ProHCardAdminState=ethernetNTEGE112ProHCardAdminState, ethernetNTEXG116PROCardTemperature=ethernetNTEXG116PROCardTemperature, ethernetNTEGE114ProVmCSHCardEntityIndex=ethernetNTEGE114ProVmCSHCardEntityIndex, ethernetNTEGE114CardRestartAction=ethernetNTEGE114CardRestartAction, PWE3E1T1CardMode=PWE3E1T1CardMode, ethernetNTEGE114ProCCardTable=ethernetNTEGE114ProCCardTable, ethernetNTECX102Pro30ACardEntry=ethernetNTECX102Pro30ACardEntry, ethernetNTECX102Pro30ACardTable=ethernetNTECX102Pro30ACardTable, nteGe206CardGroup=nteGe206CardGroup, ethernetGE8SCCCardOperationalState=ethernetGE8SCCCardOperationalState, ethernetNTESH1PCSCardOperationalState=ethernetNTESH1PCSCardOperationalState, ethernetNTEGE114ProVmCHCardSwitchPortActionPort=ethernetNTEGE114ProVmCHCardSwitchPortActionPort, ethernetNTEGO102ProSCardTemperature=ethernetNTEGO102ProSCardTemperature, auxPortCardSecondaryState=auxPortCardSecondaryState, ethernet1x10GHighPerCardTable=ethernet1x10GHighPerCardTable, clk16PortCardEntry=clk16PortCardEntry, nteGe114ProSHCardGroup=nteGe114ProSHCardGroup, ethernetNTEGE114GCardSecondaryState=ethernetNTEGE114GCardSecondaryState, scuAdminState=scuAdminState, scuTTable=scuTTable, ethernetNTEGE114ProVmCSHCardOperationalState=ethernetNTEGE114ProVmCSHCardOperationalState, ethernetNTEGE206FCardEntry=ethernetNTEGE206FCardEntry, pseudoWireOcnStmCardEntry=pseudoWireOcnStmCardEntry, ethernetNTECX102Pro30ACardVoltage=ethernetNTECX102Pro30ACardVoltage, bits16PortCardAlias=bits16PortCardAlias, ethernetNTEGO102ProSPCardEntityIndex=ethernetNTEGO102ProSPCardEntityIndex, ethernetOverOCSTMCardEntityIndex=ethernetOverOCSTMCardEntityIndex, ethernetNTEXG120PROSHCardRestartAction=ethernetNTEXG120PROSHCardRestartAction, ethernetNTEGE114GCardEntityIndex=ethernetNTEGE114GCardEntityIndex, ethernetNTEGESyncProbeCardEntityIndex=ethernetNTEGESyncProbeCardEntityIndex, ethernetNTEGE114ProVmCSHCardSwitchPortAction=ethernetNTEGE114ProVmCSHCardSwitchPortAction, ethernetCPMRCardTable=ethernetCPMRCardTable, ethernetNTEGE114ProVmCSHCardTemperature=ethernetNTEGE114ProVmCSHCardTemperature, ethernetNTEGE201SyncECardSnmpDyingGaspEnabled=ethernetNTEGE201SyncECardSnmpDyingGaspEnabled, serverCardRowStatus=serverCardRowStatus, ethernetNTEGE206FCardRestartAction=ethernetNTEGE206FCardRestartAction, ethernetNTECX102Pro30ACardFineGrainedPmInterval=ethernetNTECX102Pro30ACardFineGrainedPmInterval, ethernetNTEGE101CardOperationalState=ethernetNTEGE101CardOperationalState, pseudoWireOcnStmCardAdminState=pseudoWireOcnStmCardAdminState, psuOutputCurrent=psuOutputCurrent, ethernetNTEXG118PROACSHCardTemperature=ethernetNTEXG118PROACSHCardTemperature, ethernetNTEGE112ProMCardTemperature=ethernetNTEGE112ProMCardTemperature, serverCardTable=serverCardTable, ethernetNTEGE114ProVmCSHCardAdminState=ethernetNTEGE114ProVmCSHCardAdminState, ethernet1x10GHighPerCardOperationalState=ethernet1x10GHighPerCardOperationalState, ethernetNTEGO102ProSMCardEntityIndex=ethernetNTEGO102ProSMCardEntityIndex, ethernetCSMCardOperationalState=ethernetCSMCardOperationalState, ethernetNTEGESyncProbeCardVoltage=ethernetNTEGESyncProbeCardVoltage, ethernetNTEOSA5405CardOperationalState=ethernetNTEOSA5405CardOperationalState, ethernetNTEGE114SHCardOperationalState=ethernetNTEGE114SHCardOperationalState, ethernetGE4SCCCardStorageType=ethernetGE4SCCCardStorageType, ethernetNTEGE206FCardAdminState=ethernetNTEGE206FCardAdminState, ethernet10x1GCardRestartAction=ethernet10x1GCardRestartAction, ethernetNTEGE112CardFineGrainedPmInterval=ethernetNTEGE112CardFineGrainedPmInterval, fanEntry=fanEntry, mbGnssCardEntityIndex=mbGnssCardEntityIndex, ethernetNTEGE114CardEntry=ethernetNTEGE114CardEntry, stiAdminState=stiAdminState, ethernetNTEGE112ProMCardVoltage=ethernetNTEGE112ProMCardVoltage, ethernetNTEGE112CardRestartAction=ethernetNTEGE112CardRestartAction, pseudoWireE1T1CardEntityIndex=pseudoWireE1T1CardEntityIndex, ethernetNTEGE114ProVmHCardRestartAction=ethernetNTEGE114ProVmHCardRestartAction, ethernetNTEXG210CardRestartAction=ethernetNTEXG210CardRestartAction, ethernetNTEGE114SHCardRestartAction=ethernetNTEGE114SHCardRestartAction, neStorageType=neStorageType, ethernetNTEGE201CardTemperature=ethernetNTEGE201CardTemperature, stiRowStatus=stiRowStatus, ethernetNTEGO102ProSCardAdminState=ethernetNTEGO102ProSCardAdminState, ethernetGE8SCCCardVoltage=ethernetGE8SCCCardVoltage, slotCardHwRev=slotCardHwRev, f3UsbHostCLEICode=f3UsbHostCLEICode, ethernetNTET3204CardOperationalState=ethernetNTET3204CardOperationalState, f3StorageDeviceTable=f3StorageDeviceTable, ethernetNTET1804CardOperationalState=ethernetNTET1804CardOperationalState, networkElementLLDPParamsEntry=networkElementLLDPParamsEntry, ethernetNTEGE112ProCardOperationalState=ethernetNTEGE112ProCardOperationalState, ethernetNTEGE114ProSHCardTemperature=ethernetNTEGE114ProSHCardTemperature, ethernetNTEGE114ProHECardSwitchPortActionPort=ethernetNTEGE114ProHECardSwitchPortActionPort, ethernetNTEGE112ProVmCardVoltage=ethernetNTEGE112ProVmCardVoltage, slotEntityIndex=slotEntityIndex, ethernetGE4ECCCardSecondaryState=ethernetGE4ECCCardSecondaryState, ethernetNTEGO102ProSCardOperationalState=ethernetNTEGO102ProSCardOperationalState, ethernetNTEGE114ProVmCSHCardSecondaryState=ethernetNTEGE114ProVmCSHCardSecondaryState, ethernetNTEOSA5405CardEntry=ethernetNTEOSA5405CardEntry, scuTEntityIndex=scuTEntityIndex, nteXg118ProacSHCardGroup=nteXg118ProacSHCardGroup, bits16PortCardEntry=bits16PortCardEntry, shelfOscillatorType=shelfOscillatorType, pseudoWireOcnStmCardTable=pseudoWireOcnStmCardTable, ethernetNTESH1PCSCardAdminState=ethernetNTESH1PCSCardAdminState, serverCardTemperature=serverCardTemperature, stuHighPerCardRestartAction=stuHighPerCardRestartAction, amiSecondaryState=amiSecondaryState, ethernetNTEOSA5420CardTemperature=ethernetNTEOSA5420CardTemperature, ethernetSWFCardStorageType=ethernetSWFCardStorageType, ethernetNTEGO102ProSPCardSnmpDyingGaspEnabled=ethernetNTEGO102ProSPCardSnmpDyingGaspEnabled, ethernetNTEOSA5401CardEntry=ethernetNTEOSA5401CardEntry, ethernetSWFCardOperationalState=ethernetSWFCardOperationalState, stiHighPerEntry=stiHighPerEntry, auxPortCardTable=auxPortCardTable, ethernetNTEGE101CardRestartAction=ethernetNTEGE101CardRestartAction, ethernetNTEXG120PROCardEntry=ethernetNTEXG120PROCardEntry, ShelfType=ShelfType, LLDPEnableAction=LLDPEnableAction, stiHighPerTable=stiHighPerTable, ethernetNTEGE114SCardTemperature=ethernetNTEGE114SCardTemperature, ethernetFE36ECardSecondaryState=ethernetFE36ECardSecondaryState, ethernetNTEGE114ProVmCHCardOperationalState=ethernetNTEGE114ProVmCHCardOperationalState, ethernetNTEGE112ProVmCardEntityIndex=ethernetNTEGE112ProVmCardEntityIndex, compositeClockCardRowStatus=compositeClockCardRowStatus, PsuType=PsuType, stiHighPerTemperature=stiHighPerTemperature, ethernetGE8ECCCardTemperature=ethernetGE8ECCCardTemperature, nteGe114ProCCardGroup=nteGe114ProCCardGroup, todPps16PortCardEntry=todPps16PortCardEntry, pseudoWireOcnStmCardPSNEncapsulation=pseudoWireOcnStmCardPSNEncapsulation, ethernetGE4ECCCardEntry=ethernetGE4ECCCardEntry, ethernetNTEGE114SHCardSwitchPortAction=ethernetNTEGE114SHCardSwitchPortAction, ethernetNTEXG120PROCardEntityIndex=ethernetNTEXG120PROCardEntityIndex, ethernetNTEGE114ProVmCHCardRestartAction=ethernetNTEGE114ProVmCHCardRestartAction, ethernetXG1XCCCardAdminState=ethernetXG1XCCCardAdminState, f3IrigCardEntry=f3IrigCardEntry, ethernetNTEGE114ProVmHCardVoltage=ethernetNTEGE114ProVmHCardVoltage, neContact=neContact, pseudoWireE3CardEntityIndex=pseudoWireE3CardEntityIndex, ethernetNTESH1PCSCardTemperature=ethernetNTESH1PCSCardTemperature, ethernetNTEGE114ProVmCHCardAdminState=ethernetNTEGE114ProVmCHCardAdminState, serverCardEntityIndex=serverCardEntityIndex, ethernetNTEGE114CardAdminState=ethernetNTEGE114CardAdminState, auxPortCardEntry=auxPortCardEntry, ethernetNTEGE114PHCardAdminState=ethernetNTEGE114PHCardAdminState, ge4PortCardOperationalState=ge4PortCardOperationalState, ethernetNTEXG120PROCardRestartAction=ethernetNTEXG120PROCardRestartAction, ethernetFE36ECard8023azEnabled=ethernetFE36ECard8023azEnabled, ethernetNTEGE104CardSwitchPortActionPort=ethernetNTEGE104CardSwitchPortActionPort, ethernetCPMRCardLLFMode=ethernetCPMRCardLLFMode, ethernetNTEXG116PROCardSnmpDyingGaspEnabled=ethernetNTEXG116PROCardSnmpDyingGaspEnabled, ethernetNTECardEntityIndex=ethernetNTECardEntityIndex, nteT1804CardGroup=nteT1804CardGroup, ethernetNTEGE114ProSHCardSecondaryState=ethernetNTEGE114ProSHCardSecondaryState, ethernetNTEGE206VCardRestartAction=ethernetNTEGE206VCardRestartAction, CmCPMRLinkLossFwdMode=CmCPMRLinkLossFwdMode, slotCardMfgName=slotCardMfgName, ethernetNTEGO102ProSCardRestartAction=ethernetNTEGO102ProSCardRestartAction, ethernet1x10GHighPerCardEntityIndex=ethernet1x10GHighPerCardEntityIndex, ethernetNTEGE101CardAdminState=ethernetNTEGE101CardAdminState, ethernetSWFCardForceOffLineAction=ethernetSWFCardForceOffLineAction, ethernetOsa3350MgntCardEntityIndex=ethernetOsa3350MgntCardEntityIndex, f3UsbHostMfgName=f3UsbHostMfgName, ethernetNTEGE114ProHECardTemperature=ethernetNTEGE114ProHECardTemperature, serverCardStorageAvailiable=serverCardStorageAvailiable, ethernetNTEGE114SCardAdminState=ethernetNTEGE114SCardAdminState, f3IrigCardTable=f3IrigCardTable, stuHighPerCardRowStatus=stuHighPerCardRowStatus, ethernetNTEXG210CCardEntityIndex=ethernetNTEXG210CCardEntityIndex, ethernetNTEGE114PHCardSwitchPortAction=ethernetNTEGE114PHCardSwitchPortAction, ethernetNTEGO102ProSMCardTemperature=ethernetNTEGO102ProSMCardTemperature, ethernetNTEGE114ProVmHCardOperationalState=ethernetNTEGE114ProVmHCardOperationalState, pseudoWireE1T1CardMode=pseudoWireE1T1CardMode, nemiVoltage=nemiVoltage, ethernetNTEGE206VCardSnmpDyingGaspEnabled=ethernetNTEGE206VCardSnmpDyingGaspEnabled, ethernetNTEGE112ProMCardRestartAction=ethernetNTEGE112ProMCardRestartAction, ethernetNTEGE112ProMCardEntityIndex=ethernetNTEGE112ProMCardEntityIndex, nteGE104CardGroup=nteGE104CardGroup, ethernetNTET1804CardAdminState=ethernetNTET1804CardAdminState, pps16PortCardEntityIndex=pps16PortCardEntityIndex, ethernetNTEGE114ProCardOperationalState=ethernetNTEGE114ProCardOperationalState, ethernetGE4ECCCardRestartAction=ethernetGE4ECCCardRestartAction, ethernetNTEGE104CardOperationalState=ethernetNTEGE104CardOperationalState, neLocation=neLocation, ethernet1x10GCardTable=ethernet1x10GCardTable, ethernetGE8SCCCardEntityIndex=ethernetGE8SCCCardEntityIndex, ethernetNTEGE114ProCCardEntityIndex=ethernetNTEGE114ProCCardEntityIndex, ethernetNTEGO102ProSPCardRestartAction=ethernetNTEGO102ProSPCardRestartAction, pseudoWireE3CardMgmtVlanId=pseudoWireE3CardMgmtVlanId, f3UsbHostMfgSite=f3UsbHostMfgSite, serverCardRestartAction=serverCardRestartAction, ethernetCPMRCardEntityIndex=ethernetCPMRCardEntityIndex, ethernetNTEGE201CardFineGrainedPmInterval=ethernetNTEGE201CardFineGrainedPmInterval, ethernetNTEGE201CardEntry=ethernetNTEGE201CardEntry, pseudoWireE1T1CardPSNEncapsulation=pseudoWireE1T1CardPSNEncapsulation, ethernetNTEGE114ProVmCSHCardVoltage=ethernetNTEGE114ProVmCSHCardVoltage, auxPortCardAlias=auxPortCardAlias, ethernetNTEGO102ProSPCardAdminState=ethernetNTEGO102ProSPCardAdminState, ethernetGE4SCCCardOperationalState=ethernetGE4SCCCardOperationalState, pseudoWireE1T1CardSecondaryState=pseudoWireE1T1CardSecondaryState, ethernetNTEGE112CardSecondaryState=ethernetNTEGE112CardSecondaryState, nteGe114SCardGroup=nteGe114SCardGroup, ethernetNTEOSA5421CardEntityIndex=ethernetNTEOSA5421CardEntityIndex, nteGe201SyncECardGroup=nteGe201SyncECardGroup, ethernetNTESH1PCSCardRestartAction=ethernetNTESH1PCSCardRestartAction, ethernetCPMRCardPSU1State=ethernetCPMRCardPSU1State, ethernetNTEGE206FCardVoltage=ethernetNTEGE206FCardVoltage, ethernetNTECX101Pro30ACardSnmpDyingGaspEnabled=ethernetNTECX101Pro30ACardSnmpDyingGaspEnabled, pseudoWireE3CardIpNetmask=pseudoWireE3CardIpNetmask, ethernetNTEGE112ProMCardSecondaryState=ethernetNTEGE112ProMCardSecondaryState, ethernetNTEGE206VCardFineGrainedPmInterval=ethernetNTEGE206VCardFineGrainedPmInterval, ethernetNTEGE114GCardTable=ethernetNTEGE114GCardTable, ethernetNTEGE114HCardEntityIndex=ethernetNTEGE114HCardEntityIndex, ethernetNTEGE201CardRestartAction=ethernetNTEGE201CardRestartAction, ethernetNTEGE102ProHCardPSU2State=ethernetNTEGE102ProHCardPSU2State, ethernetNTESH1PCSCardVoltage=ethernetNTESH1PCSCardVoltage, serverCardMemoryTotal=serverCardMemoryTotal, f3UsbHostPhysicalAddress=f3UsbHostPhysicalAddress, ethernetNTEGE201SyncECardTemperature=ethernetNTEGE201SyncECardTemperature, nteXg118ProSHCardGroup=nteXg118ProSHCardGroup, pseudoWireE3CardIpGateway=pseudoWireE3CardIpGateway, ethernetNTEXG120PROSHCardSnmpDyingGaspEnabled=ethernetNTEXG120PROSHCardSnmpDyingGaspEnabled, ethernetNTEGE206VCardAdminState=ethernetNTEGE206VCardAdminState, ethernetNTEGE112ProCardAdminState=ethernetNTEGE112ProCardAdminState, pseudoWireCardE1T1CardGroup=pseudoWireCardE1T1CardGroup, ethernet10x1GCardStorageType=ethernet10x1GCardStorageType, ethernetNTEGE102ProHCardPsuType=ethernetNTEGE102ProHCardPsuType, ethernetGE8SCryptoConnectorCardTable=ethernetGE8SCryptoConnectorCardTable, ethernetNTEGE114SHCardEntityIndex=ethernetNTEGE114SHCardEntityIndex, ethernetNTEGE114SCardTable=ethernetNTEGE114SCardTable, ethernetXG1XCCCardRestartAction=ethernetXG1XCCCardRestartAction, ethernetNTEGE112ProCardVoltage=ethernetNTEGE112ProCardVoltage, ethernetNTECardOperationalState=ethernetNTECardOperationalState, ethernetOsa3350MgntCardAdminState=ethernetOsa3350MgntCardAdminState, ethernetFE36ECardRowStatus=ethernetFE36ECardRowStatus, shelfIndex=shelfIndex, ethernetNTEGE206FCardTable=ethernetNTEGE206FCardTable, ethernetNTEXG118PROSHCardRestartAction=ethernetNTEXG118PROSHCardRestartAction, ethernetNTEGE114GCardSnmpDyingGaspEnabled=ethernetNTEGE114GCardSnmpDyingGaspEnabled, ethernetNTEOSA5420CardSecondaryState=ethernetNTEOSA5420CardSecondaryState, ethernet10x1GCardOperationalState=ethernet10x1GCardOperationalState, ethernetNTUCardOperationalState=ethernetNTUCardOperationalState, ethernetXG1XCCCardEntry=ethernetXG1XCCCardEntry, auxPortCardOperationalState=auxPortCardOperationalState, pps16PortCardOperationalState=pps16PortCardOperationalState, ethernetGE8SCCCardTemperature=ethernetGE8SCCCardTemperature, ethernetNTEGE112ProVmCardSwitchPortActionPort=ethernetNTEGE112ProVmCardSwitchPortActionPort, ethernetNTEGE114ProSHCardSwitchPortAction=ethernetNTEGE114ProSHCardSwitchPortAction, nteGo102ProSCardGroup=nteGo102ProSCardGroup, nteCx102Pro30ACardGroup=nteCx102Pro30ACardGroup)
mibBuilder.exportSymbols("CM-ENTITY-MIB", ethernetXG1SCCCardRowStatus=ethernetXG1SCCCardRowStatus, ethernetNTEGE112ProHCardSecondaryState=ethernetNTEGE112ProHCardSecondaryState, serverCardStorageTotal=serverCardStorageTotal, ethernetNTECX102Pro30ACardSnmpDyingGaspEnabled=ethernetNTECX102Pro30ACardSnmpDyingGaspEnabled, ethernetNTEXG116PROHCardAdminState=ethernetNTEXG116PROHCardAdminState, ethernetNTEGE114ProHECardVoltage=ethernetNTEGE114ProHECardVoltage, ethernetNTEGE102ProHCardVoltage=ethernetNTEGE102ProHCardVoltage, ethernetNTEGE114ProCSHCardSwitchPortAction=ethernetNTEGE114ProCSHCardSwitchPortAction, ethernet10x1GCardSecondaryState=ethernet10x1GCardSecondaryState, ethernetNTEGE201SyncECardVoltage=ethernetNTEGE201SyncECardVoltage, cmEntityMIB=cmEntityMIB, ethernetNTEGE206VCardSecondaryState=ethernetNTEGE206VCardSecondaryState, ethernetGE8SCryptoConnectorCardEntityIndex=ethernetGE8SCryptoConnectorCardEntityIndex, ethernetNTEGE102ProEFMHCardLLFModeAction=ethernetNTEGE102ProEFMHCardLLFModeAction, ethernetNTEGE104CardSecondaryState=ethernetNTEGE104CardSecondaryState, ethernetNTEGE112ProMCardAdminState=ethernetNTEGE112ProMCardAdminState, ethernetNTEXG116PROCardEntry=ethernetNTEXG116PROCardEntry, ethernetNTEGE112ProMCardEntry=ethernetNTEGE112ProMCardEntry, ethernetNTEGE114ProCardFineGrainedPmInterval=ethernetNTEGE114ProCardFineGrainedPmInterval, ethernetFE36ECardEntry=ethernetFE36ECardEntry, ethernetNTEGE112ProVmCardFineGrainedPmInterval=ethernetNTEGE112ProVmCardFineGrainedPmInterval, ethernetNTEGE201SyncECardSecondaryState=ethernetNTEGE201SyncECardSecondaryState, ethernetNTEXG120PROSHCardEntityIndex=ethernetNTEXG120PROSHCardEntityIndex, ethernet1x10GHighPerCardRowStatus=ethernet1x10GHighPerCardRowStatus, slotTable=slotTable, nteGe201NonSyncECardGroup=nteGe201NonSyncECardGroup, ethernetNTEGE114SHCardFineGrainedPmInterval=ethernetNTEGE114SHCardFineGrainedPmInterval, cmEntityConformance=cmEntityConformance, pps16PortCardAlias=pps16PortCardAlias, ethernet10x1GCardRowStatus=ethernet10x1GCardRowStatus, ethernetNTEGESyncProbeCardOperationalState=ethernetNTEGESyncProbeCardOperationalState, ethernetNTEGE114ProSHCardEntry=ethernetNTEGE114ProSHCardEntry, ethernetNTEGE114ProCSHCardTable=ethernetNTEGE114ProCSHCardTable, ethernetNTEGE112ProHCardSnmpDyingGaspEnabled=ethernetNTEGE112ProHCardSnmpDyingGaspEnabled, f3StorageDeviceWearoutLevel=f3StorageDeviceWearoutLevel, ethernetNTECX101Pro30ACardOperationalState=ethernetNTECX101Pro30ACardOperationalState, ethernetGE8SCCCardStorageType=ethernetGE8SCCCardStorageType, f3StorageDeviceInternalSsdHealth=f3StorageDeviceInternalSsdHealth, stiEntry=stiEntry, ethernetNTEGESyncProbeCardEntry=ethernetNTEGESyncProbeCardEntry, ethernetNTEGE112ProHCardRestartAction=ethernetNTEGE112ProHCardRestartAction, auxPortCardRowStatus=auxPortCardRowStatus, ethernetNTEGE112ProHCardEntry=ethernetNTEGE112ProHCardEntry, ethernetGE8SCCCardSecondaryState=ethernetGE8SCCCardSecondaryState, ethernetNTEGE114ProVmCHCardSecondaryState=ethernetNTEGE114ProVmCHCardSecondaryState, ethernetCSMCardRestartAction=ethernetCSMCardRestartAction, ethernetNTEGE206CardTable=ethernetNTEGE206CardTable, nteGE112ProVmCardGroup=nteGE112ProVmCardGroup, ethernetXG1XCCCardTemperature=ethernetXG1XCCCardTemperature, ethernetNTEGE114PHCardRestartAction=ethernetNTEGE114PHCardRestartAction, ethernetNTEGE102ProEFMHCardEntry=ethernetNTEGE102ProEFMHCardEntry, ethernetCSMCardFineGrainedPmInterval=ethernetCSMCardFineGrainedPmInterval, ethernetNTEGE112ProCardSwitchPortActionPort=ethernetNTEGE112ProCardSwitchPortActionPort, ethernetNTEGE114CardSecondaryState=ethernetNTEGE114CardSecondaryState, ethernetNTEGE114ProCardSwitchPortActionPort=ethernetNTEGE114ProCardSwitchPortActionPort, ethernetNTEGE201SyncECardEntry=ethernetNTEGE201SyncECardEntry, ethernetNTECX102Pro30ACardSecondaryState=ethernetNTECX102Pro30ACardSecondaryState, ethernetNTEGE104CardVoltage=ethernetNTEGE104CardVoltage, stuHighPerCardEntry=stuHighPerCardEntry, ethernetNTEGE114ProCCardEntry=ethernetNTEGE114ProCCardEntry, ethernetNTEGE206FCardSecondaryState=ethernetNTEGE206FCardSecondaryState, ethernetNTEGE206VCardVoltage=ethernetNTEGE206VCardVoltage, ethernetXG1XCCCardEntityIndex=ethernetXG1XCCCardEntityIndex, ethernetNTEXG116PROHCardOperationalState=ethernetNTEXG116PROHCardOperationalState, compositeClockCardEntityIndex=compositeClockCardEntityIndex, ethernetNTECardSnmpDyingGaspEnabled=ethernetNTECardSnmpDyingGaspEnabled, ethernetGE4SCCCardAdminState=ethernetGE4SCCCardAdminState, scuRowStatus=scuRowStatus, pseudoWireOcnStmCardStorageType=pseudoWireOcnStmCardStorageType, ethernetGE8ECCCardEntry=ethernetGE8ECCCardEntry, ethernetCPMRCardFAN2State=ethernetCPMRCardFAN2State, ethernetOverOCSTMCardSnmpDyingGaspEnabled=ethernetOverOCSTMCardSnmpDyingGaspEnabled, psuOperationalState=psuOperationalState, f3UsbHostSerialNum=f3UsbHostSerialNum, ethernetOverOCSTMCardTemperature=ethernetOverOCSTMCardTemperature, ethernetNTEGE114ProCCardRestartAction=ethernetNTEGE114ProCCardRestartAction, ethernetNTEGO102ProSMCardSwitchPortAction=ethernetNTEGO102ProSMCardSwitchPortAction, ethernetNTEGE112CardVoltage=ethernetNTEGE112CardVoltage, ethernetNTEGE112CardTable=ethernetNTEGE112CardTable, ethernetNTEGE112ProVmCardAdminState=ethernetNTEGE112ProVmCardAdminState, ethernetNTEGO102ProSPCardFineGrainedPmInterval=ethernetNTEGO102ProSPCardFineGrainedPmInterval, ethernetNTEGE114ProCSHCardEntityIndex=ethernetNTEGE114ProCSHCardEntityIndex, ethernetNTET1804CardEntry=ethernetNTET1804CardEntry, nemiStorageType=nemiStorageType, shelfEntityIndex=shelfEntityIndex, ethernetNTET1804CardSnmpDyingGaspEnabled=ethernetNTET1804CardSnmpDyingGaspEnabled, psuAdminState=psuAdminState, nteGe112ProHCardGroup=nteGe112ProHCardGroup, ethernetNTECX101Pro30ACardVoltage=ethernetNTECX101Pro30ACardVoltage, ethernetNTEGE114GCardAdminState=ethernetNTEGE114GCardAdminState, nteGe114HCardGroup=nteGe114HCardGroup, f3IrigCardGroup=f3IrigCardGroup, ethernetGE8ECCCardRestartAction=ethernetGE8ECCCardRestartAction, ethernetNTEXG118PROSHCardAdminState=ethernetNTEXG118PROSHCardAdminState, ethernetNTEGE114ProVmHCardSwitchPortAction=ethernetNTEGE114ProVmHCardSwitchPortAction, stuCardRowStatus=stuCardRowStatus, ethernet1x10GHighPerCardAdminState=ethernet1x10GHighPerCardAdminState, ethernetNTEGE112ProVmCardSecondaryState=ethernetNTEGE112ProVmCardSecondaryState, psuTable=psuTable, nemiOperationalState=nemiOperationalState, ethernet1x10GCardRowStatus=ethernet1x10GCardRowStatus, ethernetNTET1804CardRestartAction=ethernetNTET1804CardRestartAction, nteGe112ProMCardGroup=nteGe112ProMCardGroup, nemiEntityIndex=nemiEntityIndex, f3IrigCardAlias=f3IrigCardAlias, stiHighPerRowStatus=stiHighPerRowStatus, ethernetNTEGE206CardSecondaryState=ethernetNTEGE206CardSecondaryState, shelfOperationalState=shelfOperationalState, ethernetNTEGO102ProSPCardVoltage=ethernetNTEGO102ProSPCardVoltage, ethernetXG1XCCCardOperationalState=ethernetXG1XCCCardOperationalState, ethernetNTEGE101CardTable=ethernetNTEGE101CardTable, ethernetNTEGE102ProHCardFAN2State=ethernetNTEGE102ProHCardFAN2State, ethernetNTEXG118PROSHCardEntityIndex=ethernetNTEXG118PROSHCardEntityIndex, clk16PortCardSecondaryState=clk16PortCardSecondaryState, pseudoWireOcnStmCardMode=pseudoWireOcnStmCardMode, ethernetNTEOSA5411CardEntityIndex=ethernetNTEOSA5411CardEntityIndex, ethernetNTECX101Pro30ACardTable=ethernetNTECX101Pro30ACardTable, ethernetNTEXG210CardTemperature=ethernetNTEXG210CardTemperature, ethernetNTEGO102ProSPCardTemperature=ethernetNTEGO102ProSPCardTemperature, neFineGrainedPmInterval=neFineGrainedPmInterval, ethernetNTEXG210CardFineGrainedPmInterval=ethernetNTEXG210CardFineGrainedPmInterval, ethernetNTECX101Pro30ACardAdminState=ethernetNTECX101Pro30ACardAdminState, ethernetOsa3350MgntCardEntry=ethernetOsa3350MgntCardEntry, SlotType=SlotType, psuEntityIndex=psuEntityIndex, ethernetNTEGE114SHCardSecondaryState=ethernetNTEGE114SHCardSecondaryState, bits16PortCardTable=bits16PortCardTable, ethernetNTEGE114ProVmSHCardSwitchPortAction=ethernetNTEGE114ProVmSHCardSwitchPortAction, slotCardSerialNum=slotCardSerialNum, ethernet1x10GCardForceOffLineAction=ethernet1x10GCardForceOffLineAction, ethernetNTEGE114ProCSHCardEntry=ethernetNTEGE114ProCSHCardEntry, mbGnssCardRowStatus=mbGnssCardRowStatus, ethernetNTEGE114ProCCardFineGrainedPmInterval=ethernetNTEGE114ProCCardFineGrainedPmInterval, ethernetOverOCSTMCardOperationalState=ethernetOverOCSTMCardOperationalState, ethernetNTEOSA5421CardSnmpDyingGaspEnabled=ethernetNTEOSA5421CardSnmpDyingGaspEnabled, ethernetNTESH1PCSCardTable=ethernetNTESH1PCSCardTable, nteOsa5421CardGroup=nteOsa5421CardGroup, nteXg116ProCardGroup=nteXg116ProCardGroup, ethernetNTEGE114ProSHCardOperationalState=ethernetNTEGE114ProSHCardOperationalState, ethernetNTEGE114GCardVoltage=ethernetNTEGE114GCardVoltage, ethernet10x1GCardTemperature=ethernet10x1GCardTemperature, ethernetNTEGE114HCardOperationalState=ethernetNTEGE114HCardOperationalState, ethernet1x10GCardSecondaryState=ethernet1x10GCardSecondaryState, ethernetGE8SCryptoConnectorCardEntry=ethernetGE8SCryptoConnectorCardEntry, cmEntityGroups=cmEntityGroups, amiEntry=amiEntry, ethernetNTEGE114ProVmSHCardSecondaryState=ethernetNTEGE114ProVmSHCardSecondaryState, ethernetNTEGE112CardOperationalState=ethernetNTEGE112CardOperationalState, ethernetNTEOSA5405CardTableRestartAction=ethernetNTEOSA5405CardTableRestartAction, StorageStatus=StorageStatus, ethernetNTEGE114ProSHCardVoltage=ethernetNTEGE114ProSHCardVoltage, ethernetNTEXG118PROSHCardSecondaryState=ethernetNTEXG118PROSHCardSecondaryState, ethernetNTEGE114ProCardVoltage=ethernetNTEGE114ProCardVoltage, ethernetNTEGE114ProVmHCardEntityIndex=ethernetNTEGE114ProVmHCardEntityIndex, ethernetNTECX102Pro30ACardSwitchPortAction=ethernetNTECX102Pro30ACardSwitchPortAction, ethernetNTEXG116PROCardOperationalState=ethernetNTEXG116PROCardOperationalState, compositeClockCardTable=compositeClockCardTable, ethernetNTEXG210CCardVoltage=ethernetNTEXG210CCardVoltage, ethernetNTEXG120PROCardFineGrainedPmInterval=ethernetNTEXG120PROCardFineGrainedPmInterval, ge4PortCardEntry=ge4PortCardEntry, ge4PortCardGroup=ge4PortCardGroup, psuEntry=psuEntry, clk16PortCardAdminState=clk16PortCardAdminState, ethernetNTEGO102ProSCardSecondaryState=ethernetNTEGO102ProSCardSecondaryState, ethernet10x1GHighPerCardRestartAction=ethernet10x1GHighPerCardRestartAction, ethernetNTEOSA5401CardOperationalState=ethernetNTEOSA5401CardOperationalState, ethernetNTEGE101ProCardFineGrainedPmInterval=ethernetNTEGE101ProCardFineGrainedPmInterval, ethernetNTEXG116PROHCardSnmpDyingGaspEnabled=ethernetNTEXG116PROHCardSnmpDyingGaspEnabled, ethernetNTEGE114SCardEntry=ethernetNTEGE114SCardEntry, scuTEntry=scuTEntry, ethernetNTEXG116PROHCardTable=ethernetNTEXG116PROHCardTable, pseudoWireE3CardTable=pseudoWireE3CardTable, pseudoWireOcnStmCardEntityIndex=pseudoWireOcnStmCardEntityIndex, ethernetNTEGE114ProVmSHCardTable=ethernetNTEGE114ProVmSHCardTable, ethernetGE4ECCCardAdminState=ethernetGE4ECCCardAdminState, ethernetNTET3204CardSnmpDyingGaspEnabled=ethernetNTET3204CardSnmpDyingGaspEnabled, ethernetSWFCardEntityIndex=ethernetSWFCardEntityIndex, pseudoWireCardOcnStmCardGroup=pseudoWireCardOcnStmCardGroup, ethernetNTEGE112ProCardSnmpDyingGaspEnabled=ethernetNTEGE112ProCardSnmpDyingGaspEnabled, pseudoWireE1T1CardVoltage=pseudoWireE1T1CardVoltage, compositeClockCardAdminState=compositeClockCardAdminState, ethernetGE8ECCCardRowStatus=ethernetGE8ECCCardRowStatus, compositeClockCardSecondaryState=compositeClockCardSecondaryState, pseudoWireE1T1CardEntry=pseudoWireE1T1CardEntry, ethernetNTEGE114ProVmCHCardSnmpDyingGaspEnabled=ethernetNTEGE114ProVmCHCardSnmpDyingGaspEnabled, ethernetNTEGE102ProHCardPSU1State=ethernetNTEGE102ProHCardPSU1State, compositeClockCardOperationalState=compositeClockCardOperationalState, ethernetNTECX101Pro30ACardEntityIndex=ethernetNTECX101Pro30ACardEntityIndex, ethernetNTEGE114PHCardEntityIndex=ethernetNTEGE114PHCardEntityIndex, pseudoWireOcnStmCardForceOffLineAction=pseudoWireOcnStmCardForceOffLineAction, slotSecondaryState=slotSecondaryState, ethernetGE8SCryptoConnectorCardRowStatus=ethernetGE8SCryptoConnectorCardRowStatus, ethernetNTEGE114ProCardSnmpDyingGaspEnabled=ethernetNTEGE114ProCardSnmpDyingGaspEnabled, ethernetNTEXG118PROSHCardOperationalState=ethernetNTEXG118PROSHCardOperationalState, ethernetNTEGE114SCardSwitchPortActionPort=ethernetNTEGE114SCardSwitchPortActionPort, ethernetNTEGE201SyncECardRestartAction=ethernetNTEGE201SyncECardRestartAction, ethernetNTEXG210CardEntry=ethernetNTEXG210CardEntry, ethernetOsa3350MgntCardGroup=ethernetOsa3350MgntCardGroup, ethernetNTEOSA5421CardTable=ethernetNTEOSA5421CardTable, ethernetNTEGE114SHCardTable=ethernetNTEGE114SHCardTable, ethernetFE36ECardGroup=ethernetFE36ECardGroup, f3UsbHostEntry=f3UsbHostEntry, ethernetNTEXG120PROSHCardTable=ethernetNTEXG120PROSHCardTable, todPps16PortCardGroup=todPps16PortCardGroup, ethernetNTEGE114ProVmCHCardSwitchPortAction=ethernetNTEGE114ProVmCHCardSwitchPortAction, ethernetXG1SCCCardEntry=ethernetXG1SCCCardEntry, ethernet10x1GHighPerCardAdminState=ethernet10x1GHighPerCardAdminState, ethernetNTEGE101ProCardRestartAction=ethernetNTEGE101ProCardRestartAction, psuRowStatus=psuRowStatus, ethernetCPMRCardLLFModeAction=ethernetCPMRCardLLFModeAction, bits16PortCardEntityIndex=bits16PortCardEntityIndex, ethernetNTET1804CardSecondaryState=ethernetNTET1804CardSecondaryState, ethernetGE8SCCCardTable=ethernetGE8SCCCardTable, ethernetNTEGE201SyncECardAdminState=ethernetNTEGE201SyncECardAdminState, PWE3OCNSTMCardMode=PWE3OCNSTMCardMode, ethernetNTEGE201CardVoltage=ethernetNTEGE201CardVoltage, serverCardVoltage=serverCardVoltage, pseudoWireE1T1CardTable=pseudoWireE1T1CardTable, cmEntityCompliance=cmEntityCompliance, LedControlType=LedControlType, ethernetNTEXG118PROACSHCardSnmpDyingGaspEnabled=ethernetNTEXG118PROACSHCardSnmpDyingGaspEnabled, ge4PortCardAlias=ge4PortCardAlias, ethernetNTEGE114SCardRestartAction=ethernetNTEGE114SCardRestartAction, serverCardHostName=serverCardHostName, ethernetNTEGE114PHCardFineGrainedPmInterval=ethernetNTEGE114PHCardFineGrainedPmInterval, ethernetOverOCSTMCardEntry=ethernetOverOCSTMCardEntry, ethernetNTEOSA5411CardAdminState=ethernetNTEOSA5411CardAdminState, cmEntityObjectGroup=cmEntityObjectGroup, NetworkElementType=NetworkElementType, ethernetNTEGE112ProCardEntry=ethernetNTEGE112ProCardEntry, ethernetNTEGE101CardSnmpDyingGaspEnabled=ethernetNTEGE101CardSnmpDyingGaspEnabled, ethernetNTEGE206CardFineGrainedPmInterval=ethernetNTEGE206CardFineGrainedPmInterval, ethernet10x1GHighPerCardEntry=ethernet10x1GHighPerCardEntry, ethernetNTEGE114ProVmSHCardSwitchPortActionPort=ethernetNTEGE114ProVmSHCardSwitchPortActionPort, ethernetCSMCardTable=ethernetCSMCardTable, ethernetXG1XCCCardStorageType=ethernetXG1XCCCardStorageType, ethernetNTEGE114HCardEntry=ethernetNTEGE114HCardEntry, f3UsbHostMfgDate=f3UsbHostMfgDate, fanEntityIndex=fanEntityIndex, ethernetNTEXG116PROCardTable=ethernetNTEXG116PROCardTable, f3UsbHostEntityIndex=f3UsbHostEntityIndex, ethernetNTECardStorageType=ethernetNTECardStorageType, ethernetNTEXG210CCardEntry=ethernetNTEXG210CCardEntry, ethernetNTECX102Pro30ACardOperationalState=ethernetNTECX102Pro30ACardOperationalState, slotEntry=slotEntry, ethernetNTECardAdminState=ethernetNTECardAdminState, ethernetNTEGE101ProCardEntityIndex=ethernetNTEGE101ProCardEntityIndex, clk16PortCardRowStatus=clk16PortCardRowStatus, ethernetNTEOSA5420CardFineGrainedPmInterval=ethernetNTEOSA5420CardFineGrainedPmInterval, ethernetNTESH1PCSCardSecondaryState=ethernetNTESH1PCSCardSecondaryState, pseudoWireE1T1CardTemperature=pseudoWireE1T1CardTemperature, stuHighPerCardEntityIndex=stuHighPerCardEntityIndex, ethernetNTEGO102ProSMCardRestartAction=ethernetNTEGO102ProSMCardRestartAction, ethernetNTEGE102ProEFMHCardOperationalState=ethernetNTEGE102ProEFMHCardOperationalState)
mibBuilder.exportSymbols("CM-ENTITY-MIB", ethernet10x1GCardAdminState=ethernet10x1GCardAdminState, ethernetNTEGE102ProEFMHCardPSU1State=ethernetNTEGE102ProEFMHCardPSU1State, ethernetNTEGO102ProSCardEntry=ethernetNTEGO102ProSCardEntry, ethernetNTET3204CardTable=ethernetNTET3204CardTable, ge4PortCardTemperature=ge4PortCardTemperature, ethernetCPMRCardVoltage=ethernetCPMRCardVoltage, fanGroup=fanGroup, pseudoWireOcnStmCardFreqSource=pseudoWireOcnStmCardFreqSource, nteCx101Pro30ACardGroup=nteCx101Pro30ACardGroup, nemiFlashSerialNum=nemiFlashSerialNum, ethernetNTEXG116PROCardRestartAction=ethernetNTEXG116PROCardRestartAction, ethernetNTECardVoltage=ethernetNTECardVoltage, ethernetNTEXG210CardEntityIndex=ethernetNTEXG210CardEntityIndex, serverCardHvVersion=serverCardHvVersion, ethernetNTEXG116PROHCardTemperature=ethernetNTEXG116PROHCardTemperature, f3IrigCardTemperature=f3IrigCardTemperature, ethernetNTEXG210CardTable=ethernetNTEXG210CardTable, ethernetNTECX102Pro30ACardSwitchPortActionPort=ethernetNTECX102Pro30ACardSwitchPortActionPort, ethernetGE4SCCCardVoltage=ethernetGE4SCCCardVoltage, ethernetNTEXG210CCardTable=ethernetNTEXG210CCardTable, mbGnssCardAlias=mbGnssCardAlias, ethernetNTECX101Pro30ACardTemperature=ethernetNTECX101Pro30ACardTemperature, ethernetNTEGE114ProCCardSwitchPortActionPort=ethernetNTEGE114ProCCardSwitchPortActionPort, ethernetNTEGE101ProCardSecondaryState=ethernetNTEGE101ProCardSecondaryState, ethernetGE4ECCCardTemperature=ethernetGE4ECCCardTemperature, f3StorageDeviceExternalSsdStatus=f3StorageDeviceExternalSsdStatus, ethernet1x10GHighPerCardStorageType=ethernet1x10GHighPerCardStorageType, ethernetFE36ECardEntityIndex=ethernetFE36ECardEntityIndex, ethernetNTEGE201CardSecondaryState=ethernetNTEGE201CardSecondaryState, ethernetNTEOSA5405CardTemperature=ethernetNTEOSA5405CardTemperature, ethernetNTEGE206CardTemperature=ethernetNTEGE206CardTemperature, ethernetNTEGE206CardVoltage=ethernetNTEGE206CardVoltage, ethernetNTEXG118PROACSHCardEntry=ethernetNTEXG118PROACSHCardEntry, pseudoWireE1T1CardIpAddress=pseudoWireE1T1CardIpAddress, pps16PortCardSecondaryState=pps16PortCardSecondaryState, ethernetNTEGE101ProCardVoltage=ethernetNTEGE101ProCardVoltage, pseudoWireE1T1CardStorageType=pseudoWireE1T1CardStorageType, ethernetNTEGE201CardEntityIndex=ethernetNTEGE201CardEntityIndex, ethernetNTEOSA5420CardEntityIndex=ethernetNTEOSA5420CardEntityIndex, scuFlashModelNum=scuFlashModelNum, stuCardAdminState=stuCardAdminState, ethernetNTEGO102ProSPCardSecondaryState=ethernetNTEGO102ProSPCardSecondaryState, stiHighPerAdminState=stiHighPerAdminState, ethernetNTEGO102ProSMCardSwitchPortActionPort=ethernetNTEGO102ProSMCardSwitchPortActionPort, ethernetNTEGE102ProEFMHCardFAN1State=ethernetNTEGE102ProEFMHCardFAN1State, ethernetNTEGE112ProCardSecondaryState=ethernetNTEGE112ProCardSecondaryState, f3UsbHostSecondaryState=f3UsbHostSecondaryState, ethernetGE4ECCCardTable=ethernetGE4ECCCardTable, ethernetNTEGE104CardTemperature=ethernetNTEGE104CardTemperature, ethernetNTUCardEntry=ethernetNTUCardEntry, ethernetNTEGE102ProHCardEntityIndex=ethernetNTEGE102ProHCardEntityIndex, ethernetNTEGE112ProVmCardOperationalState=ethernetNTEGE112ProVmCardOperationalState, ethernet10x1GCardEntityIndex=ethernet10x1GCardEntityIndex, scuTTemperature=scuTTemperature, ethernetNTET3204CardMode=ethernetNTET3204CardMode, ethernetNTEGE114ProCSHCardRestartAction=ethernetNTEGE114ProCSHCardRestartAction, ethernetNTEGE114ProVmHCardSwitchPortActionPort=ethernetNTEGE114ProVmHCardSwitchPortActionPort, ethernetNTEOSA5401CardTable=ethernetNTEOSA5401CardTable, ethernetNTEGE101CardSecondaryState=ethernetNTEGE101CardSecondaryState, pseudoWireE1T1CardRestartAction=pseudoWireE1T1CardRestartAction, ethernetNTET3204CardSecondaryState=ethernetNTET3204CardSecondaryState, stiTable=stiTable, ethernetNTEGO102ProSMCardEntry=ethernetNTEGO102ProSMCardEntry, xg1SCCCardGroup=xg1SCCCardGroup, slotCardPhysicalAddress=slotCardPhysicalAddress, ethernetNTEGE114ProHECardEntry=ethernetNTEGE114ProHECardEntry, ethernet1x10GCardStorageType=ethernet1x10GCardStorageType, ethernetFE36ECardForceOffLineAction=ethernetFE36ECardForceOffLineAction, ethernetNTEOSA5420CardVoltage=ethernetNTEOSA5420CardVoltage, ethernetNTEGE201SyncECardOperationalState=ethernetNTEGE201SyncECardOperationalState, ethernetNTEGE112ProHCardVoltage=ethernetNTEGE112ProHCardVoltage, ethernetNTEGE101ProCardSwitchPortActionPort=ethernetNTEGE101ProCardSwitchPortActionPort, ge4PortCardAdminState=ge4PortCardAdminState, mbGnssCardGroup=mbGnssCardGroup, ethernetNTEGE206CardOperationalState=ethernetNTEGE206CardOperationalState, ethernetNTEGE112ProVmCardRestartAction=ethernetNTEGE112ProVmCardRestartAction, pseudoWireE3CardIpAddress=pseudoWireE3CardIpAddress, ethernet10x1GHighPerCardOperationalState=ethernet10x1GHighPerCardOperationalState, ethernetNTEGE114HCardSecondaryState=ethernetNTEGE114HCardSecondaryState, f3StorageDeviceEntry=f3StorageDeviceEntry, ethernetOsa3350MgntCardSecondaryState=ethernetOsa3350MgntCardSecondaryState, bits16PortCardGroup=bits16PortCardGroup, ethernet10x1GHighPerCardSecondaryState=ethernet10x1GHighPerCardSecondaryState, ethernetNTEGE114SCardVoltage=ethernetNTEGE114SCardVoltage, ethernetNTEGE114SHCardSnmpDyingGaspEnabled=ethernetNTEGE114SHCardSnmpDyingGaspEnabled, ethernet1x10GHighPerCardEntry=ethernet1x10GHighPerCardEntry, ethernetNTEGE101ProCardEntry=ethernetNTEGE101ProCardEntry, PYSNMP_MODULE_ID=cmEntityMIB, nteGe114GCardGroup=nteGe114GCardGroup, ethernetNTEOSA5401CardTableRestartAction=ethernetNTEOSA5401CardTableRestartAction, stiHighPerStorageType=stiHighPerStorageType, ethernetNTEGE114ProVmCSHCardEntry=ethernetNTEGE114ProVmCSHCardEntry, geGE8SCryptoConnectorCardGroup=geGE8SCryptoConnectorCardGroup, ethernetCPMRCardTemperature=ethernetCPMRCardTemperature, ethernetNTEGE114PHCardSecondaryState=ethernetNTEGE114PHCardSecondaryState, ethernetNTEOSA5405CardVoltage=ethernetNTEOSA5405CardVoltage, ethernetNTESH1PCSCardEntry=ethernetNTESH1PCSCardEntry, pps16PortCardGroup=pps16PortCardGroup, ShelfAction=ShelfAction, ethernetNTET1804CardTemperature=ethernetNTET1804CardTemperature, ethernetNTEOSA5405CardTable=ethernetNTEOSA5405CardTable, ethernetNTEGE114ProCSHCardVoltage=ethernetNTEGE114ProCSHCardVoltage, ethernetNTEXG118PROSHCardSnmpDyingGaspEnabled=ethernetNTEXG118PROSHCardSnmpDyingGaspEnabled, ethernetNTEGE114CardSnmpDyingGaspEnabled=ethernetNTEGE114CardSnmpDyingGaspEnabled, ethernetNTEGE114ProSHCardEntityIndex=ethernetNTEGE114ProSHCardEntityIndex, ethernetNTEGE114SHCardTemperature=ethernetNTEGE114SHCardTemperature, pseudoWireE1T1CardRowStatus=pseudoWireE1T1CardRowStatus, ethernetNTEGE112CardSwitchPortActionPort=ethernetNTEGE112CardSwitchPortActionPort, nteGe112CardGroup=nteGe112CardGroup, shelfMfgSite=shelfMfgSite, scuSecondaryState=scuSecondaryState, ethernetNTEOSA5421CardVoltage=ethernetNTEOSA5421CardVoltage, ethernetNTECX102Pro30ACardRestartAction=ethernetNTECX102Pro30ACardRestartAction, ethernet10x1GCardTable=ethernet10x1GCardTable, ethernetCSMCardSecondaryState=ethernetCSMCardSecondaryState, todPps16PortCardSecondaryState=todPps16PortCardSecondaryState, ethernetNTEGE112ProHCardFineGrainedPmInterval=ethernetNTEGE112ProHCardFineGrainedPmInterval, slotIndex=slotIndex, scuEntry=scuEntry, ethernetNTEGE104CardEntry=ethernetNTEGE104CardEntry, nemiFlashFirmwareRev=nemiFlashFirmwareRev, cmEntityCompliances=cmEntityCompliances, ethernetNTEGE114ProSHCardSwitchPortActionPort=ethernetNTEGE114ProSHCardSwitchPortActionPort, fanOperationalState=fanOperationalState, amiOperationalState=amiOperationalState, ethernetNTEGE112ProHCardSwitchPortActionPort=ethernetNTEGE112ProHCardSwitchPortActionPort, ethernetNTEGE114ProCardTemperature=ethernetNTEGE114ProCardTemperature, ethernetXG1SCCCardEntityIndex=ethernetXG1SCCCardEntityIndex, nteGe112ProCardGroup=nteGe112ProCardGroup, nemiTable=nemiTable, ethernetNTEGE102ProEFMHCardRestartAction=ethernetNTEGE102ProEFMHCardRestartAction, ethernetNTEXG210CardAdminState=ethernetNTEXG210CardAdminState, ethernetNTEGE114SHCardSwitchPortActionPort=ethernetNTEGE114SHCardSwitchPortActionPort, NeProvAction=NeProvAction, ethernetNTEGE114CardSwitchPortActionPort=ethernetNTEGE114CardSwitchPortActionPort, serverCardIgnoreWatchdog=serverCardIgnoreWatchdog, ethernetNTEOSA5405CardEntityIndex=ethernetNTEOSA5405CardEntityIndex, pseudoWireOcnStmCardRestartAction=pseudoWireOcnStmCardRestartAction, ethernetNTEGE206VCardEntry=ethernetNTEGE206VCardEntry, ethernetNTEGE114PHCardEntry=ethernetNTEGE114PHCardEntry, ethernetNTEGE114SCardSecondaryState=ethernetNTEGE114SCardSecondaryState, ethernetNTEGE114ProCCardSecondaryState=ethernetNTEGE114ProCCardSecondaryState, neRowStatus=neRowStatus, ge4ECCCardGroup=ge4ECCCardGroup, ethernetNTEOSA5420CardTable=ethernetNTEOSA5420CardTable, ethernetSWFCardTemperature=ethernetSWFCardTemperature, ethernetNTEGE206CardAdminState=ethernetNTEGE206CardAdminState, ethernetNTEGE104CardFineGrainedPmInterval=ethernetNTEGE104CardFineGrainedPmInterval, ethernetGE4SCCCardRowStatus=ethernetGE4SCCCardRowStatus, ethernetNTEGESyncProbeCardRestartAction=ethernetNTEGESyncProbeCardRestartAction, serverCardUpTime=serverCardUpTime, scuVoltage=scuVoltage, nteXg120ProSHCardGroup=nteXg120ProSHCardGroup, ethernetGE8SCryptoConnectorCardAdminState=ethernetGE8SCryptoConnectorCardAdminState, ethernetNTEGE114GCardSwitchPortActionPort=ethernetNTEGE114GCardSwitchPortActionPort, ethernetNTEGE114SHCardVoltage=ethernetNTEGE114SHCardVoltage, ethernetXG1XCCCardRowStatus=ethernetXG1XCCCardRowStatus, ethernetNTUCardRowStatus=ethernetNTUCardRowStatus, ethernetOverOCSTMCardAdminState=ethernetOverOCSTMCardAdminState, ge4PortCardSecondaryState=ge4PortCardSecondaryState, ethernetCSMCardTemperature=ethernetCSMCardTemperature, nteGe114ProCSHCardGroup=nteGe114ProCSHCardGroup, ethernetNTEXG118PROSHCardEntry=ethernetNTEXG118PROSHCardEntry, scuTRestartAction=scuTRestartAction, ethernetNTEXG118PROACSHCardFineGrainedPmInterval=ethernetNTEXG118PROACSHCardFineGrainedPmInterval, ethernet10x1GHighPerCardTemperature=ethernet10x1GHighPerCardTemperature, f3UsbHostHwRev=f3UsbHostHwRev, f3IrigCardStorageType=f3IrigCardStorageType, scuStorageType=scuStorageType, bits16PortCardAdminState=bits16PortCardAdminState, stuHighPerCardTable=stuHighPerCardTable, ethernetNTEGE102ProEFMHCardPSU2State=ethernetNTEGE102ProEFMHCardPSU2State, ethernetGE8ECCCardEntityIndex=ethernetGE8ECCCardEntityIndex, nteGe206FCardGroup=nteGe206FCardGroup, ethernetNTEGE102ProHCardFAN1State=ethernetNTEGE102ProHCardFAN1State, ethernetNTEOSA5401CardEntityIndex=ethernetNTEOSA5401CardEntityIndex, ethernetNTEGE112ProVmCardEntry=ethernetNTEGE112ProVmCardEntry, ethernetNTEGE102ProHCardSwitchPortAction=ethernetNTEGE102ProHCardSwitchPortAction, ethernetNTEGE114CardEntityIndex=ethernetNTEGE114CardEntityIndex, nteT3204CardGroup=nteT3204CardGroup, stuCardOperationalState=stuCardOperationalState, pseudoWireE3CardDhcpEnabled=pseudoWireE3CardDhcpEnabled, ethernetNTEGE101CardEntityIndex=ethernetNTEGE101CardEntityIndex, neLLDPParamsLLDPEnableAction=neLLDPParamsLLDPEnableAction, ethernetNTEGE101ProCardTemperature=ethernetNTEGE101ProCardTemperature, ethernetNTEGE102ProEFMHCardLLFMode=ethernetNTEGE102ProEFMHCardLLFMode, ethernetNTEGESyncProbeCardSnmpDyingGaspEnabled=ethernetNTEGESyncProbeCardSnmpDyingGaspEnabled, ethernetOsa3350MgntCardResyncAction=ethernetOsa3350MgntCardResyncAction, ethernet1x10GCardOperationalState=ethernet1x10GCardOperationalState, nteGe206VCardGroup=nteGe206VCardGroup, ethernetOsa3350MgntCardOperationalState=ethernetOsa3350MgntCardOperationalState, ethernetSWFCardRestartAction=ethernetSWFCardRestartAction, shelfbackplaneSerialNo=shelfbackplaneSerialNo, ethernetGE4SCCCardRestartAction=ethernetGE4SCCCardRestartAction, nteGe101ProCardGroup=nteGe101ProCardGroup, ethernetNTEGE114ProCSHCardSwitchPortActionPort=ethernetNTEGE114ProCSHCardSwitchPortActionPort, todPps16PortCardTable=todPps16PortCardTable, stiStorageType=stiStorageType, ethernetNTEGE114HCardSnmpDyingGaspEnabled=ethernetNTEGE114HCardSnmpDyingGaspEnabled, ethernetNTECardEntry=ethernetNTECardEntry, ethernetNTEGE114ProCCardTemperature=ethernetNTEGE114ProCCardTemperature, mbGnssCardOperationalState=mbGnssCardOperationalState, todPps16PortCardAlias=todPps16PortCardAlias, ge4SCCCardGroup=ge4SCCCardGroup, ethernetNTEGE114ProVmCHCardFineGrainedPmInterval=ethernetNTEGE114ProVmCHCardFineGrainedPmInterval, amiRestartAction=amiRestartAction, clk16PortCardEntityIndex=clk16PortCardEntityIndex, ethernet1x10GHighPerCardGroup=ethernet1x10GHighPerCardGroup, scuOperationalState=scuOperationalState, ethernetNTUCardSnmpDyingGaspEnabled=ethernetNTUCardSnmpDyingGaspEnabled, ethernetNTEGE102ProHCardSecondaryState=ethernetNTEGE102ProHCardSecondaryState, fanRowStatus=fanRowStatus, ge4PortCardEntityIndex=ge4PortCardEntityIndex, todPps16PortCardAdminState=todPps16PortCardAdminState, psuSecondaryState=psuSecondaryState, ethernetNTEGE114SCardSwitchPortAction=ethernetNTEGE114SCardSwitchPortAction, nemiFlashModelNum=nemiFlashModelNum, shelfSecondaryState=shelfSecondaryState, ethernetNTEGE114ProSHCardSnmpDyingGaspEnabled=ethernetNTEGE114ProSHCardSnmpDyingGaspEnabled, ethernetCPMRCardRestartAction=ethernetCPMRCardRestartAction, ethernetNTEGE112ProCardTemperature=ethernetNTEGE112ProCardTemperature, ethernetNTEGE206FCardSnmpDyingGaspEnabled=ethernetNTEGE206FCardSnmpDyingGaspEnabled, ethernetNTEGE206CardRestartAction=ethernetNTEGE206CardRestartAction, ethernet10x1GCardEntry=ethernet10x1GCardEntry, ethernetFE36ECardAdminState=ethernetFE36ECardAdminState, shelfType=shelfType, ethernetNTEXG210CCardAdminState=ethernetNTEXG210CCardAdminState, neLLDPParamsGroup=neLLDPParamsGroup, ethernetNTEGE114ProVmSHCardEntityIndex=ethernetNTEGE114ProVmSHCardEntityIndex, ethernetNTEGE114ProVmCHCardEntityIndex=ethernetNTEGE114ProVmCHCardEntityIndex, ethernetNTEXG120PROSHCardSecondaryState=ethernetNTEXG120PROSHCardSecondaryState, ethernetXG1XCCCardSecondaryState=ethernetXG1XCCCardSecondaryState, ethernetNTET3204CardTemperature=ethernetNTET3204CardTemperature, stuHighPerCardAdminState=stuHighPerCardAdminState, ethernetNTEGE114ProCSHCardTemperature=ethernetNTEGE114ProCSHCardTemperature, ethernet10x1GCardSnmpDyingGaspEnabled=ethernet10x1GCardSnmpDyingGaspEnabled, ethernetNTEXG210CCardSnmpDyingGaspEnabled=ethernetNTEXG210CCardSnmpDyingGaspEnabled, f3IrigCardSecondaryState=f3IrigCardSecondaryState, stiHighPerEntityIndex=stiHighPerEntityIndex, ethernetNTEGE112ProHCardTable=ethernetNTEGE112ProHCardTable, ethernetNTEGE112ProVmCardTemperature=ethernetNTEGE112ProVmCardTemperature, ethernetNTEGE114ProVmCSHCardRestartAction=ethernetNTEGE114ProVmCSHCardRestartAction, ethernetNTEXG118PROACSHCardEntityIndex=ethernetNTEXG118PROACSHCardEntityIndex, nteXg116ProHCardGroup=nteXg116ProHCardGroup, pseudoWireE3CardSecondaryState=pseudoWireE3CardSecondaryState, stiOperationalState=stiOperationalState, ethernetNTEGE201CardTable=ethernetNTEGE201CardTable, ethernetNTEGE112CardTemperature=ethernetNTEGE112CardTemperature, ethernetNTEGE101ProCardSnmpDyingGaspEnabled=ethernetNTEGE101ProCardSnmpDyingGaspEnabled, ethernetNTEGE206CardSnmpDyingGaspEnabled=ethernetNTEGE206CardSnmpDyingGaspEnabled, ethernetNTEGE114ProCCardAdminState=ethernetNTEGE114ProCCardAdminState, ethernetNTEGO102ProSCardSwitchPortAction=ethernetNTEGO102ProSCardSwitchPortAction, neCmdPromptPrefix=neCmdPromptPrefix, ethernetNTEGE114ProVmHCardFineGrainedPmInterval=ethernetNTEGE114ProVmHCardFineGrainedPmInterval)
mibBuilder.exportSymbols("CM-ENTITY-MIB", nteGe102ProEFMHCardGroup=nteGe102ProEFMHCardGroup, clk16PortCardGroup=clk16PortCardGroup, stuHighPerCardStorageType=stuHighPerCardStorageType, ethernetNTEXG116PROCardSecondaryState=ethernetNTEXG116PROCardSecondaryState, mbGnssCardAdminState=mbGnssCardAdminState, pseudoWireOcnStmCardOperationalState=pseudoWireOcnStmCardOperationalState, ethernetGE8SCCCardRestartAction=ethernetGE8SCCCardRestartAction, ethernetNTECardSecondaryState=ethernetNTECardSecondaryState, ethernetFE36ECardOperationalState=ethernetFE36ECardOperationalState, ethernetNTEGE114ProVmSHCardFineGrainedPmInterval=ethernetNTEGE114ProVmSHCardFineGrainedPmInterval, ethernetNTEXG118PROACSHCardVoltage=ethernetNTEXG118PROACSHCardVoltage, slotCardMfgDate=slotCardMfgDate)
