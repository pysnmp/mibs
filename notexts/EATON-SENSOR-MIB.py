#
# PySNMP MIB module EATON-SENSOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/eaton/EATON-SENSOR-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 12:14:46 2024
# On host fv-az573-178 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
sensorAgent, = mibBuilder.importSymbols("EATON-OIDS", "sensorAgent")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, Integer32, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, IpAddress, Counter64, Gauge32, Counter32, Bits, ModuleIdentity, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "IpAddress", "Counter64", "Gauge32", "Counter32", "Bits", "ModuleIdentity", "TimeTicks", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
eatonSensor = ModuleIdentity((1, 3, 6, 1, 4, 1, 534, 6, 8, 1))
eatonSensor.setRevisions(('2018-12-17 12:00',))
if mibBuilder.loadTexts: eatonSensor.setLastUpdated('201812171200Z')
if mibBuilder.loadTexts: eatonSensor.setOrganization('Eaton Corporation')
sensor = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1))
temperature = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2))
humidity = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3))
digitalInput = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4))
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 10))
class UnixTimeStamp(TextualConvention, Counter32):
    status = 'current'
    displayHint = 'dddddddddd'

class PositionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("other", 1), ("rackRear", 2), ("rackFront", 3), ("batteryRoom", 4))

class ElevationType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("other", 1), ("bottom", 2), ("middle", 3), ("top", 4))

class CommunicationStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 2, 3))
    namedValues = NamedValues(("unknown", 0), ("communicationOK", 2), ("communicationLost", 3))

class ProbeConnectionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("internal", 1), ("wired", 2), ("wireless", 3))

class EnableType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disabled", 0), ("enabled", 1))

class AlarmType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("good", 0), ("lowWarning", 1), ("lowCritical", 2), ("highWarning", 3), ("highCritical", 4))

class ResetCommandType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("none", 0), ("reset", 1))

class PolarityType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("normallyOpened", 0), ("normallyClosed", 1))

class AlarmSeverityType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("informationnal", 1), ("warning", 2), ("critical", 3))

class AlarmLevelType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("good", 0), ("informationnal", 1), ("warning", 2), ("critical", 3))

class StateType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("inactive", 0), ("active", 1))

class TemperatureUnitType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("tenthOfDegKelvin", 0), ("tenthOfDegCelsius", 1), ("tenthOfDegFarhenheit", 2))

sensorCount = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorCount.setStatus('current')
sensorIdentificationTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2), )
if mibBuilder.loadTexts: sensorIdentificationTable.setStatus('current')
sensorIdentificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"))
if mibBuilder.loadTexts: sensorIdentificationEntry.setStatus('current')
sensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sensorIndex.setStatus('current')
sensorUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorUuid.setStatus('current')
sensorConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2, 1, 3), ProbeConnectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorConnectionType.setStatus('current')
sensorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAddress.setStatus('current')
sensorMonitoredBy = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorMonitoredBy.setStatus('current')
sensorManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorManufacturer.setStatus('current')
sensorModel = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorModel.setStatus('current')
sensorPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPartNumber.setStatus('current')
sensorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSerialNumber.setStatus('current')
sensorFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorFirmwareVersion.setStatus('current')
sensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 3), )
if mibBuilder.loadTexts: sensorConfigurationTable.setStatus('current')
sensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 3, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"))
if mibBuilder.loadTexts: sensorConfigurationEntry.setStatus('current')
sensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorName.setStatus('current')
sensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorLocation.setStatus('current')
sensorPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 3, 1, 3), PositionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPosition.setStatus('current')
sensorElevation = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 3, 1, 4), ElevationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorElevation.setStatus('current')
sensorUElevation = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorUElevation.setStatus('current')
sensorMonitoringTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 4), )
if mibBuilder.loadTexts: sensorMonitoringTable.setStatus('current')
sensorMonitoringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 4, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"))
if mibBuilder.loadTexts: sensorMonitoringEntry.setStatus('current')
sensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 4, 1, 1), CommunicationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorStatus.setStatus('current')
sensorStatusSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 4, 1, 2), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorStatusSince.setStatus('current')
sensorTemperatureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureCount.setStatus('current')
sensorHumidityCount = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumidityCount.setStatus('current')
sensorDigitalInputCount = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDigitalInputCount.setStatus('current')
sensorAnalogInputCount = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAnalogInputCount.setStatus('current')
sensorNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 0))
notifySensorCount = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 0, 1)).setObjects(("EATON-SENSOR-MIB", "sensorCount"))
if mibBuilder.loadTexts: notifySensorCount.setStatus('current')
notifySensorStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 0, 2)).setObjects(("EATON-SENSOR-MIB", "sensorIndex"), ("EATON-SENSOR-MIB", "sensorUuid"), ("EATON-SENSOR-MIB", "sensorStatus"), ("EATON-SENSOR-MIB", "sensorStatusSince"))
if mibBuilder.loadTexts: notifySensorStatus.setStatus('current')
temperatureIdentificationTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 1), )
if mibBuilder.loadTexts: temperatureIdentificationTable.setStatus('current')
temperatureIdentificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 1, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"), (0, "EATON-SENSOR-MIB", "temperatureIndex"))
if mibBuilder.loadTexts: temperatureIdentificationEntry.setStatus('current')
temperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: temperatureIndex.setStatus('current')
temperatureUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureUuid.setStatus('current')
temperatureConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 1, 1, 3), ProbeConnectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureConnectionType.setStatus('current')
temperatureConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2), )
if mibBuilder.loadTexts: temperatureConfigurationTable.setStatus('current')
temperatureConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"), (0, "EATON-SENSOR-MIB", "temperatureIndex"))
if mibBuilder.loadTexts: temperatureConfigurationEntry.setStatus('current')
temperatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureName.setStatus('current')
temperatureEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2, 1, 2), EnableType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureEnable.setStatus('current')
temperatureOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureOffset.setStatus('current')
temperatureAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2, 1, 4), EnableType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureAlarmEnable.setStatus('current')
temperatureThresholdLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureThresholdLowWarning.setStatus('current')
temperatureThresholdLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureThresholdLowCritical.setStatus('current')
temperatureThresholdHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureThresholdHighWarning.setStatus('current')
temperatureThresholdHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureThresholdHighCritical.setStatus('current')
temperatureThresholdHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureThresholdHysteresis.setStatus('current')
temperatureAlarmGracePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureAlarmGracePeriod.setStatus('current')
temperatureMonitoringTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 3), )
if mibBuilder.loadTexts: temperatureMonitoringTable.setStatus('current')
temperatureMonitoringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 3, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"), (0, "EATON-SENSOR-MIB", "temperatureIndex"))
if mibBuilder.loadTexts: temperatureMonitoringEntry.setStatus('current')
temperatureAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 3, 1, 1), AlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureAlarm.setStatus('current')
temperatureAlarmChangeSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 3, 1, 2), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureAlarmChangeSince.setStatus('current')
temperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureValue.setStatus('current')
temperatureCommunicationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 3, 1, 4), CommunicationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCommunicationStatus.setStatus('current')
temperatureCommunicationStatusSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 3, 1, 5), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCommunicationStatusSince.setStatus('current')
temperatureMonitoringMinMaxTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 4), )
if mibBuilder.loadTexts: temperatureMonitoringMinMaxTable.setStatus('current')
temperatureMonitoringMinMaxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 4, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"), (0, "EATON-SENSOR-MIB", "temperatureIndex"))
if mibBuilder.loadTexts: temperatureMonitoringMinMaxEntry.setStatus('current')
temperatureMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureMinValue.setStatus('current')
temperatureMinValueSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 4, 1, 2), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureMinValueSince.setStatus('current')
temperatureMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureMaxValue.setStatus('current')
temperatureMaxValueSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 4, 1, 4), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureMaxValueSince.setStatus('current')
temperatureResetMinMax = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 4, 1, 5), ResetCommandType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureResetMinMax.setStatus('current')
temperatureUnit = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 5), TemperatureUnitType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureUnit.setStatus('current')
temperatureNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 0))
notifyTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 0, 1)).setObjects(("EATON-SENSOR-MIB", "sensorIndex"), ("EATON-SENSOR-MIB", "temperatureIndex"), ("EATON-SENSOR-MIB", "temperatureUuid"), ("EATON-SENSOR-MIB", "temperatureAlarm"), ("EATON-SENSOR-MIB", "temperatureAlarmChangeSince"), ("EATON-SENSOR-MIB", "temperatureValue"))
if mibBuilder.loadTexts: notifyTemperatureAlarm.setStatus('current')
notifyTemperatureCommunicationStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 0, 2)).setObjects(("EATON-SENSOR-MIB", "sensorIndex"), ("EATON-SENSOR-MIB", "temperatureIndex"), ("EATON-SENSOR-MIB", "temperatureUuid"), ("EATON-SENSOR-MIB", "temperatureCommunicationStatus"), ("EATON-SENSOR-MIB", "temperatureCommunicationStatusSince"))
if mibBuilder.loadTexts: notifyTemperatureCommunicationStatus.setStatus('current')
humidityIdentificationTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 1), )
if mibBuilder.loadTexts: humidityIdentificationTable.setStatus('current')
humidityIdentificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 1, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"), (0, "EATON-SENSOR-MIB", "humidityIndex"))
if mibBuilder.loadTexts: humidityIdentificationEntry.setStatus('current')
humidityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: humidityIndex.setStatus('current')
humidityUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityUuid.setStatus('current')
humidityConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 1, 1, 3), ProbeConnectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityConnectionType.setStatus('current')
humidityConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2), )
if mibBuilder.loadTexts: humidityConfigurationTable.setStatus('current')
humidityConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"), (0, "EATON-SENSOR-MIB", "humidityIndex"))
if mibBuilder.loadTexts: humidityConfigurationEntry.setStatus('current')
humidityName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityName.setStatus('current')
humidityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2, 1, 2), EnableType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityEnable.setStatus('current')
humidityOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityOffset.setStatus('current')
humidityAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2, 1, 4), EnableType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityAlarmEnable.setStatus('current')
humidityThresholdLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityThresholdLowWarning.setStatus('current')
humidityThresholdLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityThresholdLowCritical.setStatus('current')
humidityThresholdHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityThresholdHighWarning.setStatus('current')
humidityThresholdHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityThresholdHighCritical.setStatus('current')
humidityThresholdHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityThresholdHysteresis.setStatus('current')
humidityAlarmGracePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityAlarmGracePeriod.setStatus('current')
humidityMonitoringTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 3), )
if mibBuilder.loadTexts: humidityMonitoringTable.setStatus('current')
humidityMonitoringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 3, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"), (0, "EATON-SENSOR-MIB", "humidityIndex"))
if mibBuilder.loadTexts: humidityMonitoringEntry.setStatus('current')
humidityAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 3, 1, 1), AlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityAlarm.setStatus('current')
humidityAlarmChangeSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 3, 1, 2), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityAlarmChangeSince.setStatus('current')
humidityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityValue.setStatus('current')
humidityCommunicationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 3, 1, 4), CommunicationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityCommunicationStatus.setStatus('current')
humidityCommunicationStatusSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 3, 1, 5), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityCommunicationStatusSince.setStatus('current')
humidityMonitoringMinMaxTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 4), )
if mibBuilder.loadTexts: humidityMonitoringMinMaxTable.setStatus('current')
humidityMonitoringMinMaxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 4, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"), (0, "EATON-SENSOR-MIB", "humidityIndex"))
if mibBuilder.loadTexts: humidityMonitoringMinMaxEntry.setStatus('current')
humidityMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityMinValue.setStatus('current')
humidityMinValueSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 4, 1, 2), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityMinValueSince.setStatus('current')
humidityMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityMaxValue.setStatus('current')
humidityMaxValueSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 4, 1, 4), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityMaxValueSince.setStatus('current')
humidityResetMinMax = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 4, 1, 5), ResetCommandType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityResetMinMax.setStatus('current')
humidityNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 0))
notifyHumidityAlarm = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 0, 1)).setObjects(("EATON-SENSOR-MIB", "sensorIndex"), ("EATON-SENSOR-MIB", "humidityIndex"), ("EATON-SENSOR-MIB", "humidityUuid"), ("EATON-SENSOR-MIB", "humidityAlarm"), ("EATON-SENSOR-MIB", "humidityAlarmChangeSince"), ("EATON-SENSOR-MIB", "humidityValue"))
if mibBuilder.loadTexts: notifyHumidityAlarm.setStatus('current')
notifyHumidityCommunicationStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 0, 2)).setObjects(("EATON-SENSOR-MIB", "sensorIndex"), ("EATON-SENSOR-MIB", "humidityIndex"), ("EATON-SENSOR-MIB", "humidityUuid"), ("EATON-SENSOR-MIB", "humidityCommunicationStatus"), ("EATON-SENSOR-MIB", "humidityCommunicationStatusSince"))
if mibBuilder.loadTexts: notifyHumidityCommunicationStatus.setStatus('current')
digitalInputIdentificationTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 1), )
if mibBuilder.loadTexts: digitalInputIdentificationTable.setStatus('current')
digitalInputIdentificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 1, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"), (0, "EATON-SENSOR-MIB", "digitalInputIndex"))
if mibBuilder.loadTexts: digitalInputIdentificationEntry.setStatus('current')
digitalInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: digitalInputIndex.setStatus('current')
digitalInputUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInputUuid.setStatus('current')
digitalInputConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 1, 1, 3), ProbeConnectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInputConnectionType.setStatus('current')
digitalInputConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 2), )
if mibBuilder.loadTexts: digitalInputConfigurationTable.setStatus('current')
digitalInputConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 2, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"), (0, "EATON-SENSOR-MIB", "digitalInputIndex"))
if mibBuilder.loadTexts: digitalInputConfigurationEntry.setStatus('current')
digitalInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalInputName.setStatus('current')
digitalInputEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 2, 1, 2), EnableType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalInputEnable.setStatus('current')
digitalInputPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 2, 1, 3), PolarityType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalInputPolarity.setStatus('current')
digitalInputAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 2, 1, 4), EnableType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalInputAlarmEnable.setStatus('current')
digitalInputAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 2, 1, 5), AlarmSeverityType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalInputAlarmSeverity.setStatus('current')
digitalInputAlarmGracePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalInputAlarmGracePeriod.setStatus('current')
digitalInputMonitoringTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 3), )
if mibBuilder.loadTexts: digitalInputMonitoringTable.setStatus('current')
digitalInputMonitoringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 3, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"), (0, "EATON-SENSOR-MIB", "digitalInputIndex"))
if mibBuilder.loadTexts: digitalInputMonitoringEntry.setStatus('current')
digitalInputAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 3, 1, 1), AlarmLevelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInputAlarm.setStatus('current')
digitalInputAlarmChangeSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 3, 1, 2), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInputAlarmChangeSince.setStatus('current')
digitalInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 3, 1, 3), StateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInputState.setStatus('current')
digitalInputStateSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 3, 1, 4), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInputStateSince.setStatus('current')
digitalInputCommunicationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 3, 1, 5), CommunicationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInputCommunicationStatus.setStatus('current')
digitalInputCommunicationStatusSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 3, 1, 6), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInputCommunicationStatusSince.setStatus('current')
digitalInputNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 0))
notifyDigitalInputAlarm = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 0, 1)).setObjects(("EATON-SENSOR-MIB", "sensorIndex"), ("EATON-SENSOR-MIB", "digitalInputIndex"), ("EATON-SENSOR-MIB", "digitalInputUuid"), ("EATON-SENSOR-MIB", "digitalInputAlarm"), ("EATON-SENSOR-MIB", "digitalInputAlarmChangeSince"), ("EATON-SENSOR-MIB", "digitalInputState"), ("EATON-SENSOR-MIB", "digitalInputStateSince"))
if mibBuilder.loadTexts: notifyDigitalInputAlarm.setStatus('current')
notifydigitalInputCommunicationStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 0, 2)).setObjects(("EATON-SENSOR-MIB", "sensorIndex"), ("EATON-SENSOR-MIB", "digitalInputIndex"), ("EATON-SENSOR-MIB", "digitalInputUuid"), ("EATON-SENSOR-MIB", "digitalInputCommunicationStatus"), ("EATON-SENSOR-MIB", "digitalInputCommunicationStatusSince"))
if mibBuilder.loadTexts: notifydigitalInputCommunicationStatus.setStatus('current')
eatonSensorCompliances = ModuleCompliance((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 10, 1)).setObjects(("EATON-SENSOR-MIB", "sensorRequiredGroup"), ("EATON-SENSOR-MIB", "sensorOptionalGroup"), ("EATON-SENSOR-MIB", "sensorNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eatonSensorCompliances = eatonSensorCompliances.setStatus('current')
objectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 10, 2))
sensorRequiredGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 10, 2, 1)).setObjects(("EATON-SENSOR-MIB", "sensorCount"), ("EATON-SENSOR-MIB", "sensorIndex"), ("EATON-SENSOR-MIB", "sensorManufacturer"), ("EATON-SENSOR-MIB", "sensorModel"), ("EATON-SENSOR-MIB", "sensorPartNumber"), ("EATON-SENSOR-MIB", "sensorSerialNumber"), ("EATON-SENSOR-MIB", "sensorFirmwareVersion"), ("EATON-SENSOR-MIB", "sensorName"), ("EATON-SENSOR-MIB", "sensorStatus"), ("EATON-SENSOR-MIB", "sensorStatusSince"), ("EATON-SENSOR-MIB", "sensorTemperatureCount"), ("EATON-SENSOR-MIB", "sensorHumidityCount"), ("EATON-SENSOR-MIB", "sensorDigitalInputCount"), ("EATON-SENSOR-MIB", "temperatureIndex"), ("EATON-SENSOR-MIB", "temperatureName"), ("EATON-SENSOR-MIB", "temperatureValue"), ("EATON-SENSOR-MIB", "temperatureUnit"), ("EATON-SENSOR-MIB", "humidityIndex"), ("EATON-SENSOR-MIB", "humidityName"), ("EATON-SENSOR-MIB", "humidityValue"), ("EATON-SENSOR-MIB", "digitalInputIndex"), ("EATON-SENSOR-MIB", "digitalInputName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sensorRequiredGroup = sensorRequiredGroup.setStatus('current')
sensorOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 10, 2, 2)).setObjects(("EATON-SENSOR-MIB", "sensorUuid"), ("EATON-SENSOR-MIB", "sensorConnectionType"), ("EATON-SENSOR-MIB", "sensorAddress"), ("EATON-SENSOR-MIB", "sensorMonitoredBy"), ("EATON-SENSOR-MIB", "sensorLocation"), ("EATON-SENSOR-MIB", "sensorPosition"), ("EATON-SENSOR-MIB", "sensorElevation"), ("EATON-SENSOR-MIB", "sensorUElevation"), ("EATON-SENSOR-MIB", "sensorAnalogInputCount"), ("EATON-SENSOR-MIB", "temperatureUuid"), ("EATON-SENSOR-MIB", "temperatureConnectionType"), ("EATON-SENSOR-MIB", "temperatureEnable"), ("EATON-SENSOR-MIB", "temperatureOffset"), ("EATON-SENSOR-MIB", "temperatureAlarmEnable"), ("EATON-SENSOR-MIB", "temperatureThresholdLowWarning"), ("EATON-SENSOR-MIB", "temperatureThresholdLowCritical"), ("EATON-SENSOR-MIB", "temperatureThresholdHighWarning"), ("EATON-SENSOR-MIB", "temperatureThresholdHighCritical"), ("EATON-SENSOR-MIB", "temperatureThresholdHysteresis"), ("EATON-SENSOR-MIB", "temperatureAlarmGracePeriod"), ("EATON-SENSOR-MIB", "temperatureAlarm"), ("EATON-SENSOR-MIB", "temperatureAlarmChangeSince"), ("EATON-SENSOR-MIB", "temperatureCommunicationStatus"), ("EATON-SENSOR-MIB", "temperatureCommunicationStatusSince"), ("EATON-SENSOR-MIB", "temperatureMinValue"), ("EATON-SENSOR-MIB", "temperatureMinValueSince"), ("EATON-SENSOR-MIB", "temperatureMaxValue"), ("EATON-SENSOR-MIB", "temperatureMaxValueSince"), ("EATON-SENSOR-MIB", "temperatureResetMinMax"), ("EATON-SENSOR-MIB", "humidityUuid"), ("EATON-SENSOR-MIB", "humidityConnectionType"), ("EATON-SENSOR-MIB", "humidityEnable"), ("EATON-SENSOR-MIB", "humidityOffset"), ("EATON-SENSOR-MIB", "humidityAlarmEnable"), ("EATON-SENSOR-MIB", "humidityThresholdLowWarning"), ("EATON-SENSOR-MIB", "humidityThresholdLowCritical"), ("EATON-SENSOR-MIB", "humidityThresholdHighWarning"), ("EATON-SENSOR-MIB", "humidityThresholdHighCritical"), ("EATON-SENSOR-MIB", "humidityThresholdHysteresis"), ("EATON-SENSOR-MIB", "humidityAlarmGracePeriod"), ("EATON-SENSOR-MIB", "humidityAlarm"), ("EATON-SENSOR-MIB", "humidityAlarmChangeSince"), ("EATON-SENSOR-MIB", "humidityCommunicationStatus"), ("EATON-SENSOR-MIB", "humidityCommunicationStatusSince"), ("EATON-SENSOR-MIB", "humidityMinValue"), ("EATON-SENSOR-MIB", "humidityMinValueSince"), ("EATON-SENSOR-MIB", "humidityMaxValue"), ("EATON-SENSOR-MIB", "humidityMaxValueSince"), ("EATON-SENSOR-MIB", "humidityResetMinMax"), ("EATON-SENSOR-MIB", "digitalInputUuid"), ("EATON-SENSOR-MIB", "digitalInputConnectionType"), ("EATON-SENSOR-MIB", "digitalInputEnable"), ("EATON-SENSOR-MIB", "digitalInputPolarity"), ("EATON-SENSOR-MIB", "digitalInputAlarmEnable"), ("EATON-SENSOR-MIB", "digitalInputAlarmSeverity"), ("EATON-SENSOR-MIB", "digitalInputAlarmGracePeriod"), ("EATON-SENSOR-MIB", "digitalInputState"), ("EATON-SENSOR-MIB", "digitalInputStateSince"), ("EATON-SENSOR-MIB", "digitalInputAlarm"), ("EATON-SENSOR-MIB", "digitalInputAlarmChangeSince"), ("EATON-SENSOR-MIB", "digitalInputCommunicationStatus"), ("EATON-SENSOR-MIB", "digitalInputCommunicationStatusSince"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sensorOptionalGroup = sensorOptionalGroup.setStatus('current')
sensorNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 10, 2, 3)).setObjects(("EATON-SENSOR-MIB", "notifySensorStatus"), ("EATON-SENSOR-MIB", "notifySensorCount"), ("EATON-SENSOR-MIB", "notifyTemperatureAlarm"), ("EATON-SENSOR-MIB", "notifyTemperatureCommunicationStatus"), ("EATON-SENSOR-MIB", "notifyHumidityAlarm"), ("EATON-SENSOR-MIB", "notifyHumidityCommunicationStatus"), ("EATON-SENSOR-MIB", "notifyDigitalInputAlarm"), ("EATON-SENSOR-MIB", "notifydigitalInputCommunicationStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sensorNotifyGroup = sensorNotifyGroup.setStatus('current')
mibBuilder.exportSymbols("EATON-SENSOR-MIB", notifyTemperatureAlarm=notifyTemperatureAlarm, humidityIndex=humidityIndex, notifyTemperatureCommunicationStatus=notifyTemperatureCommunicationStatus, sensorNotifyGroup=sensorNotifyGroup, humidityUuid=humidityUuid, EnableType=EnableType, temperatureName=temperatureName, humidityMonitoringTable=humidityMonitoringTable, sensorSerialNumber=sensorSerialNumber, temperatureThresholdHysteresis=temperatureThresholdHysteresis, humidityEnable=humidityEnable, notifydigitalInputCommunicationStatus=notifydigitalInputCommunicationStatus, temperatureMaxValueSince=temperatureMaxValueSince, humidityIdentificationTable=humidityIdentificationTable, AlarmType=AlarmType, humidityMonitoringMinMaxEntry=humidityMonitoringMinMaxEntry, sensorStatusSince=sensorStatusSince, sensorElevation=sensorElevation, temperatureMonitoringMinMaxEntry=temperatureMonitoringMinMaxEntry, temperatureAlarmGracePeriod=temperatureAlarmGracePeriod, sensorModel=sensorModel, sensorManufacturer=sensorManufacturer, digitalInputConnectionType=digitalInputConnectionType, UnixTimeStamp=UnixTimeStamp, digitalInputUuid=digitalInputUuid, digitalInputEnable=digitalInputEnable, AlarmLevelType=AlarmLevelType, humidityMaxValue=humidityMaxValue, digitalInputAlarmSeverity=digitalInputAlarmSeverity, temperatureMinValue=temperatureMinValue, sensorName=sensorName, digitalInputMonitoringTable=digitalInputMonitoringTable, digitalInputAlarmChangeSince=digitalInputAlarmChangeSince, temperatureThresholdHighWarning=temperatureThresholdHighWarning, humidityNotification=humidityNotification, digitalInputPolarity=digitalInputPolarity, temperatureUnit=temperatureUnit, PYSNMP_MODULE_ID=eatonSensor, temperatureResetMinMax=temperatureResetMinMax, PositionType=PositionType, temperatureMonitoringMinMaxTable=temperatureMonitoringMinMaxTable, StateType=StateType, temperatureMinValueSince=temperatureMinValueSince, temperatureUuid=temperatureUuid, sensorOptionalGroup=sensorOptionalGroup, sensorPosition=sensorPosition, humidityAlarm=humidityAlarm, sensorLocation=sensorLocation, temperatureThresholdLowWarning=temperatureThresholdLowWarning, temperatureAlarmChangeSince=temperatureAlarmChangeSince, eatonSensorCompliances=eatonSensorCompliances, temperatureMaxValue=temperatureMaxValue, humidityValue=humidityValue, digitalInputConfigurationTable=digitalInputConfigurationTable, humidityCommunicationStatus=humidityCommunicationStatus, ProbeConnectionType=ProbeConnectionType, humidityIdentificationEntry=humidityIdentificationEntry, eatonSensor=eatonSensor, sensorHumidityCount=sensorHumidityCount, temperatureEnable=temperatureEnable, temperatureMonitoringEntry=temperatureMonitoringEntry, temperatureAlarmEnable=temperatureAlarmEnable, sensorUuid=sensorUuid, temperatureIdentificationEntry=temperatureIdentificationEntry, temperatureConfigurationEntry=temperatureConfigurationEntry, temperatureIndex=temperatureIndex, humidityAlarmGracePeriod=humidityAlarmGracePeriod, sensorStatus=sensorStatus, temperatureConfigurationTable=temperatureConfigurationTable, temperature=temperature, humidityMonitoringMinMaxTable=humidityMonitoringMinMaxTable, sensorTemperatureCount=sensorTemperatureCount, humidityThresholdHighCritical=humidityThresholdHighCritical, digitalInputNotification=digitalInputNotification, sensorMonitoredBy=sensorMonitoredBy, digitalInputState=digitalInputState, sensorRequiredGroup=sensorRequiredGroup, humidityThresholdHighWarning=humidityThresholdHighWarning, humidity=humidity, humidityThresholdLowWarning=humidityThresholdLowWarning, sensorAddress=sensorAddress, humidityMonitoringEntry=humidityMonitoringEntry, humidityOffset=humidityOffset, humidityMinValueSince=humidityMinValueSince, digitalInputCommunicationStatusSince=digitalInputCommunicationStatusSince, ElevationType=ElevationType, sensorMonitoringTable=sensorMonitoringTable, notifySensorStatus=notifySensorStatus, temperatureThresholdHighCritical=temperatureThresholdHighCritical, humidityMinValue=humidityMinValue, digitalInputMonitoringEntry=digitalInputMonitoringEntry, sensorAnalogInputCount=sensorAnalogInputCount, sensorMonitoringEntry=sensorMonitoringEntry, temperatureOffset=temperatureOffset, humidityConfigurationTable=humidityConfigurationTable, temperatureAlarm=temperatureAlarm, digitalInputAlarm=digitalInputAlarm, CommunicationStatus=CommunicationStatus, digitalInputName=digitalInputName, humidityCommunicationStatusSince=humidityCommunicationStatusSince, notifyHumidityAlarm=notifyHumidityAlarm, sensorIndex=sensorIndex, sensorIdentificationTable=sensorIdentificationTable, digitalInputConfigurationEntry=digitalInputConfigurationEntry, humidityThresholdHysteresis=humidityThresholdHysteresis, sensorUElevation=sensorUElevation, humidityThresholdLowCritical=humidityThresholdLowCritical, temperatureIdentificationTable=temperatureIdentificationTable, objectGroups=objectGroups, temperatureNotification=temperatureNotification, temperatureValue=temperatureValue, humidityName=humidityName, sensorConfigurationTable=sensorConfigurationTable, ResetCommandType=ResetCommandType, temperatureConnectionType=temperatureConnectionType, humidityConfigurationEntry=humidityConfigurationEntry, notifyDigitalInputAlarm=notifyDigitalInputAlarm, temperatureMonitoringTable=temperatureMonitoringTable, humidityAlarmEnable=humidityAlarmEnable, temperatureCommunicationStatusSince=temperatureCommunicationStatusSince, AlarmSeverityType=AlarmSeverityType, sensor=sensor, sensorIdentificationEntry=sensorIdentificationEntry, digitalInputStateSince=digitalInputStateSince, humidityResetMinMax=humidityResetMinMax, notifyHumidityCommunicationStatus=notifyHumidityCommunicationStatus, humidityMaxValueSince=humidityMaxValueSince, temperatureThresholdLowCritical=temperatureThresholdLowCritical, digitalInput=digitalInput, temperatureCommunicationStatus=temperatureCommunicationStatus, sensorConfigurationEntry=sensorConfigurationEntry, digitalInputAlarmEnable=digitalInputAlarmEnable, digitalInputCommunicationStatus=digitalInputCommunicationStatus, sensorFirmwareVersion=sensorFirmwareVersion, sensorDigitalInputCount=sensorDigitalInputCount, sensorNotification=sensorNotification, TemperatureUnitType=TemperatureUnitType, humidityConnectionType=humidityConnectionType, PolarityType=PolarityType, conformance=conformance, sensorPartNumber=sensorPartNumber, humidityAlarmChangeSince=humidityAlarmChangeSince, sensorConnectionType=sensorConnectionType, digitalInputIndex=digitalInputIndex, digitalInputIdentificationTable=digitalInputIdentificationTable, digitalInputIdentificationEntry=digitalInputIdentificationEntry, notifySensorCount=notifySensorCount, digitalInputAlarmGracePeriod=digitalInputAlarmGracePeriod, sensorCount=sensorCount)
