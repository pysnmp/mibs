#
# PySNMP MIB module AT-LOOPPROTECT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/allied/AT-LOOPPROTECT-MIB
# Produced by pysmi-1.1.12 at Mon Sep 16 14:51:05 2024
# On host fv-az1272-448 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
modules, = mibBuilder.importSymbols("AT-SMI-MIB", "modules")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, iso, Integer32, Counter32, Counter64, ObjectIdentity, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, Gauge32, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "Integer32", "Counter32", "Counter64", "ObjectIdentity", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "Gauge32", "TimeTicks", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
atLoopProtect = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 54))
atLoopProtect.setRevisions(('2012-06-19 00:00', '2010-09-07 00:00', '2010-06-15 01:00', '2008-08-12 00:00',))
if mibBuilder.loadTexts: atLoopProtect.setLastUpdated('201206190000Z')
if mibBuilder.loadTexts: atLoopProtect.setOrganization('Allied Telesis, Inc.')
atLoopProtectTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 54, 0))
atLoopProtectDetectedLoopBlockedTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 54, 0, 1)).setObjects(("AT-LOOPPROTECT-MIB", "atLoopProtectIfIndex"), ("AT-LOOPPROTECT-MIB", "atLoopProtectVlanId"), ("AT-LOOPPROTECT-MIB", "atLoopProtectAction"))
if mibBuilder.loadTexts: atLoopProtectDetectedLoopBlockedTrap.setStatus('current')
atLoopProtectRecoverLoopBlockedTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 54, 0, 2)).setObjects(("AT-LOOPPROTECT-MIB", "atLoopProtectIfIndex"), ("AT-LOOPPROTECT-MIB", "atLoopProtectVlanId"), ("AT-LOOPPROTECT-MIB", "atLoopProtectAction"))
if mibBuilder.loadTexts: atLoopProtectRecoverLoopBlockedTrap.setStatus('current')
atLoopProtectDetectedByLoopDetectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 54, 0, 3)).setObjects(("AT-LOOPPROTECT-MIB", "atLoopProtectIfIndex"), ("AT-LOOPPROTECT-MIB", "atLoopProtectVlanId"), ("AT-LOOPPROTECT-MIB", "atLoopProtectRxLDFIfIndex"), ("AT-LOOPPROTECT-MIB", "atLoopProtectRxLDFVlanId"))
if mibBuilder.loadTexts: atLoopProtectDetectedByLoopDetectionTrap.setStatus('current')
atLoopProtectDetectedByThrashLimitTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 54, 0, 4)).setObjects(("AT-LOOPPROTECT-MIB", "atLoopProtectIfIndex"), ("AT-LOOPPROTECT-MIB", "atLoopProtectVlanId"))
if mibBuilder.loadTexts: atLoopProtectDetectedByThrashLimitTrap.setStatus('current')
atLoopProtectAction = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 54, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("atLoopProtectAction-LearnDisable", 0), ("atLoopProtectAction-LearnEnable", 1), ("atLoopProtectAction-PortDisable", 2), ("atLoopProtectAction-PortEnable", 3), ("atLoopProtectAction-LinkDown", 4), ("atLoopProtectAction-LinkUp", 5), ("atLoopProtectAction-VlanDisable", 6), ("atLoopProtectAction-VlanEnable", 7)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atLoopProtectAction.setStatus('current')
atLoopProtectIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 54, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atLoopProtectIfIndex.setStatus('current')
atLoopProtectVlanId = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 54, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atLoopProtectVlanId.setStatus('current')
atLoopProtectRxLDFIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 54, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atLoopProtectRxLDFIfIndex.setStatus('current')
atLoopProtectRxLDFVlanId = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 54, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atLoopProtectRxLDFVlanId.setStatus('current')
mibBuilder.exportSymbols("AT-LOOPPROTECT-MIB", atLoopProtectDetectedByLoopDetectionTrap=atLoopProtectDetectedByLoopDetectionTrap, atLoopProtectRxLDFVlanId=atLoopProtectRxLDFVlanId, atLoopProtectDetectedByThrashLimitTrap=atLoopProtectDetectedByThrashLimitTrap, atLoopProtectRxLDFIfIndex=atLoopProtectRxLDFIfIndex, atLoopProtectRecoverLoopBlockedTrap=atLoopProtectRecoverLoopBlockedTrap, atLoopProtectAction=atLoopProtectAction, atLoopProtect=atLoopProtect, atLoopProtectIfIndex=atLoopProtectIfIndex, atLoopProtectTrap=atLoopProtectTrap, atLoopProtectVlanId=atLoopProtectVlanId, atLoopProtectDetectedLoopBlockedTrap=atLoopProtectDetectedLoopBlockedTrap, PYSNMP_MODULE_ID=atLoopProtect)
