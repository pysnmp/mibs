#
# PySNMP MIB module LLDP-EXT-DCBX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/iee/LLDP-EXT-DCBX-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 12:22:05 2024
# On host fv-az573-178 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
LldpPortNumber, lldpExtensions = mibBuilder.importSymbols("LLDP-MIB", "LldpPortNumber", "lldpExtensions")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, Gauge32, IpAddress, Counter64, Unsigned32, ModuleIdentity, TimeTicks, NotificationType, Counter32, ObjectIdentity, Bits, iso, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "IpAddress", "Counter64", "Unsigned32", "ModuleIdentity", "TimeTicks", "NotificationType", "Counter32", "ObjectIdentity", "Bits", "iso", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
lldpXdcbxMIB = ModuleIdentity((1, 0, 8802, 1, 1, 2, 1, 5, 6945))
if mibBuilder.loadTexts: lldpXdcbxMIB.setLastUpdated('200811200000Z')
if mibBuilder.loadTexts: lldpXdcbxMIB.setOrganization('IEEE ??? Working Group')
class LldpXdcbxPriority(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 7)

class LldpXdcbxPriorityGroup(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("priorityGroupId0", 0), ("priorityGroupId1", 1), ("priorityGroupId2", 2), ("priorityGroupId3", 3), ("priorityGroupId4", 4), ("priorityGroupId5", 5), ("priorityGroupId6", 6), ("priorityGroupId7", 7), ("reserved8", 8), ("reserved9", 9), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("reserved14", 14), ("noBandwidthLimit", 15))

class LldpXdcbxFeatureType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3, 4))
    namedValues = NamedValues(("priorityGroup", 2), ("priorityFlowControl", 3), ("applicationProtocol", 4))

class LldpXdcbxFeatureSubType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class LldpXdcbxVersion(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class LldpXdcbxTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 7)

class LldpXdcbxPgBw(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 100)

class LldpXdcbxTCPFC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 8)

class LldpXdcbxTCPeer(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 8)

class LldpXdcbxAppProtos(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 15)

class LldpXdcbxSF(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("l2EtherType", 0), ("socketNumber", 1), ("reserved2", 2), ("reserved3", 3))

lldpXdcbxNotifications = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 0))
lldpXdcbxObjects = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 1))
lldpXdcbxFeatures = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2))
lldpXdcbxPortTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 1, 1), )
if mibBuilder.loadTexts: lldpXdcbxPortTable.setStatus('current')
lldpXdcbxPortEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 1, 1, 1), ).setIndexNames((0, "LLDP-EXT-DCBX-MIB", "lldpXdcbxPortNumber"))
if mibBuilder.loadTexts: lldpXdcbxPortEntry.setStatus('current')
lldpXdcbxPortNumber = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 1, 1, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxPortNumber.setStatus('current')
lldpXdcbxPortEnable = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 1, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdcbxPortEnable.setStatus('current')
lldpXdcbxPortVersionOper = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 1, 1, 1, 3), LldpXdcbxVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxPortVersionOper.setStatus('current')
lldpXdcbxPortVersionMax = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 1, 1, 1, 4), LldpXdcbxVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxPortVersionMax.setStatus('current')
lldpXdcbxPortSeqNo = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxPortSeqNo.setStatus('current')
lldpXdcbxPortAckNo = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxPortAckNo.setStatus('current')
lldpXdcbxFeatTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 1), )
if mibBuilder.loadTexts: lldpXdcbxFeatTable.setStatus('current')
lldpXdcbxFeatEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 1, 1), ).setIndexNames((0, "LLDP-EXT-DCBX-MIB", "lldpXdcbxPortNumber"), (0, "LLDP-EXT-DCBX-MIB", "lldpXdcbxFeatType"), (0, "LLDP-EXT-DCBX-MIB", "lldpXdcbxFeatSubType"))
if mibBuilder.loadTexts: lldpXdcbxFeatEntry.setStatus('current')
lldpXdcbxFeatType = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 1, 1, 1), LldpXdcbxFeatureType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdcbxFeatType.setStatus('current')
lldpXdcbxFeatSubType = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 1, 1, 2), LldpXdcbxFeatureSubType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdcbxFeatSubType.setStatus('current')
lldpXdcbxFeatVersionOper = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 1, 1, 3), LldpXdcbxVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxFeatVersionOper.setStatus('current')
lldpXdcbxFeatVersionMax = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 1, 1, 4), LldpXdcbxVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxFeatVersionMax.setStatus('current')
lldpXdcbxFeatEnable = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdcbxFeatEnable.setStatus('current')
lldpXdcbxFeatWilling = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdcbxFeatWilling.setStatus('current')
lldpXdcbxFeatError = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxFeatError.setStatus('current')
lldpXdcbxFeatAdvertise = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdcbxFeatAdvertise.setStatus('current')
lldpXdcbxFeatOperMode = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxFeatOperMode.setStatus('current')
lldpXdcbxFeatSyncd = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxFeatSyncd.setStatus('current')
lldpXdcbxFeatSeqNo = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxFeatSeqNo.setStatus('current')
lldpXdcbxFeatPeerWilling = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxFeatPeerWilling.setStatus('current')
lldpXdcbxFeatLocalParameterChange = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxFeatLocalParameterChange.setStatus('current')
lldpXdcbxFeatPeerEnable = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxFeatPeerEnable.setStatus('current')
lldpXdcbxFeatPeerError = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxFeatPeerError.setStatus('current')
lldpXdcbxFeatPeerAdvertise = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 1, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdcbxFeatPeerAdvertise.setStatus('current')
lldpXdcbxFeatPeerTC = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 1, 1, 17), LldpXdcbxTCPeer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxFeatPeerTC.setStatus('current')
lldpXdcbxFeatPg = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 2))
lldpXdcbxFeatPgNumTCsSupported = MibScalar((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 2, 1), LldpXdcbxTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdcbxFeatPgNumTCsSupported.setStatus('current')
lldpXdcbxFeatPgPrioAllocTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 2, 2), )
if mibBuilder.loadTexts: lldpXdcbxFeatPgPrioAllocTable.setStatus('current')
lldpXdcbxFeatPgPrioAllocEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 2, 2, 1), ).setIndexNames((0, "LLDP-EXT-DCBX-MIB", "lldpXdcbxPortNumber"), (0, "LLDP-EXT-DCBX-MIB", "lldpXdcbxFeatPgPrioAllocPrioId"))
if mibBuilder.loadTexts: lldpXdcbxFeatPgPrioAllocEntry.setStatus('current')
lldpXdcbxFeatPgPrioAllocPrioId = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 2, 2, 1, 1), LldpXdcbxPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdcbxFeatPgPrioAllocPrioId.setStatus('current')
lldpXdcbxFeatPgPrioAllocPgIdDesired = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 2, 2, 1, 2), LldpXdcbxPriorityGroup()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdcbxFeatPgPrioAllocPgIdDesired.setStatus('current')
lldpXdcbxFeatPgPrioAllocPgIdOper = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 2, 2, 1, 3), LldpXdcbxPriorityGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxFeatPgPrioAllocPgIdOper.setStatus('current')
lldpXdcbxFeatPgPrioAllocPgIdPeer = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 2, 2, 1, 4), LldpXdcbxPriorityGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxFeatPgPrioAllocPgIdPeer.setStatus('current')
lldpXdcbxFeatPgBwAllocTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 2, 3), )
if mibBuilder.loadTexts: lldpXdcbxFeatPgBwAllocTable.setStatus('current')
lldpXdcbxFeatPgBwAllocEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 2, 3, 1), ).setIndexNames((0, "LLDP-EXT-DCBX-MIB", "lldpXdcbxPortNumber"), (0, "LLDP-EXT-DCBX-MIB", "lldpXdcbxFeatPgBwAllocPgId"))
if mibBuilder.loadTexts: lldpXdcbxFeatPgBwAllocEntry.setStatus('current')
lldpXdcbxFeatPgBwAllocPgId = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 2, 3, 1, 1), LldpXdcbxPriorityGroup()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdcbxFeatPgBwAllocPgId.setStatus('current')
lldpXdcbxFeatPgBwAllocBwDesired = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 2, 3, 1, 2), LldpXdcbxPgBw()).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdcbxFeatPgBwAllocBwDesired.setStatus('current')
lldpXdcbxFeatPgBwAllocBwOper = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 2, 3, 1, 3), LldpXdcbxPgBw()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxFeatPgBwAllocBwOper.setStatus('current')
lldpXdcbxFeatPgBwAllocBwPeer = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 2, 3, 1, 4), LldpXdcbxPgBw()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxFeatPgBwAllocBwPeer.setStatus('current')
lldpXdcbxFeatPfc = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 3))
lldpXdcbxFeatPfcNumTCPFCSupported = MibScalar((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 3, 1), LldpXdcbxTCPFC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdcbxFeatPfcNumTCPFCSupported.setStatus('current')
lldpXdcbxFeatPfcTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 3, 2), )
if mibBuilder.loadTexts: lldpXdcbxFeatPfcTable.setStatus('current')
lldpXdcbxFeatPfcEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 3, 2, 1), ).setIndexNames((0, "LLDP-EXT-DCBX-MIB", "lldpXdcbxPortNumber"), (0, "LLDP-EXT-DCBX-MIB", "lldpXdcbxFeatPfcPriority"))
if mibBuilder.loadTexts: lldpXdcbxFeatPfcEntry.setStatus('current')
lldpXdcbxFeatPfcPriority = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 3, 2, 1, 1), LldpXdcbxPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdcbxFeatPfcPriority.setStatus('current')
lldpXdcbxFeatPfcEnableDesired = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 3, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdcbxFeatPfcEnableDesired.setStatus('current')
lldpXdcbxFeatPfcEnableOper = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxFeatPfcEnableOper.setStatus('current')
lldpXdcbxFeatPfcEnablePeer = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 3, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxFeatPfcEnablePeer.setStatus('current')
lldpXdcbxFeatAppProto = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 4))
lldpXdcbxFeatAppProtoTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 4, 1), )
if mibBuilder.loadTexts: lldpXdcbxFeatAppProtoTable.setStatus('current')
lldpXdcbxFeatAppProtoEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 4, 1, 1), ).setIndexNames((0, "LLDP-EXT-DCBX-MIB", "lldpXdcbxPortNumber"), (0, "LLDP-EXT-DCBX-MIB", "lldpXdcbxFeatAppProtoIndex"))
if mibBuilder.loadTexts: lldpXdcbxFeatAppProtoEntry.setStatus('current')
lldpXdcbxFeatAppProtoIndex = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 4, 1, 1, 1), LldpXdcbxAppProtos()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdcbxFeatAppProtoIndex.setStatus('current')
lldpXdcbxFeatAppProtoSF = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 4, 1, 1, 2), LldpXdcbxSF()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdcbxFeatAppProtoSF.setStatus('current')
lldpXdcbxFeatAppProtoOUI = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdcbxFeatAppProtoOUI.setStatus('current')
lldpXdcbxFeatAppProtoId = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdcbxFeatAppProtoId.setStatus('current')
lldpXdcbxFeatAppProtoPrioTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 4, 2), )
if mibBuilder.loadTexts: lldpXdcbxFeatAppProtoPrioTable.setStatus('current')
lldpXdcbxFeatAppProtoPrioEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 4, 2, 1), ).setIndexNames((0, "LLDP-EXT-DCBX-MIB", "lldpXdcbxPortNumber"), (0, "LLDP-EXT-DCBX-MIB", "lldpXdcbxFeatAppProtoIndex"), (0, "LLDP-EXT-DCBX-MIB", "lldpXdcbxFeatAppProtoPriority"))
if mibBuilder.loadTexts: lldpXdcbxFeatAppProtoPrioEntry.setStatus('current')
lldpXdcbxFeatAppProtoPriority = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 4, 2, 1, 1), LldpXdcbxPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdcbxFeatAppProtoPriority.setStatus('current')
lldpXdcbxFeatAppProtoEnableDesired = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 4, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdcbxFeatAppProtoEnableDesired.setStatus('current')
lldpXdcbxFeatAppProtoEnableOper = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 4, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxFeatAppProtoEnableOper.setStatus('current')
lldpXdcbxFeatAppProtoEnablePeer = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 2, 4, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdcbxFeatAppProtoEnablePeer.setStatus('current')
lldpXdcbxMiscControlError = NotificationType((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 0, 1)).setObjects(("LLDP-EXT-DCBX-MIB", "lldpXdcbxPortNumber"))
if mibBuilder.loadTexts: lldpXdcbxMiscControlError.setStatus('current')
lldpXdcbxMiscFeatureError = NotificationType((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 0, 2)).setObjects(("LLDP-EXT-DCBX-MIB", "lldpXdcbxFeatError"))
if mibBuilder.loadTexts: lldpXdcbxMiscFeatureError.setStatus('current')
lldpXdcbxMultiplePeers = NotificationType((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 0, 3)).setObjects(("LLDP-EXT-DCBX-MIB", "lldpXdcbxPortNumber"))
if mibBuilder.loadTexts: lldpXdcbxMultiplePeers.setStatus('current')
lldpXdcbxLldpTxDisabled = NotificationType((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 0, 4)).setObjects(("LLDP-EXT-DCBX-MIB", "lldpXdcbxPortNumber"))
if mibBuilder.loadTexts: lldpXdcbxLldpTxDisabled.setStatus('current')
lldpXdcbxLldpRxDisabled = NotificationType((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 0, 5)).setObjects(("LLDP-EXT-DCBX-MIB", "lldpXdcbxPortNumber"))
if mibBuilder.loadTexts: lldpXdcbxLldpRxDisabled.setStatus('current')
lldpXdcbxDupControlTlv = NotificationType((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 0, 6)).setObjects(("LLDP-EXT-DCBX-MIB", "lldpXdcbxPortNumber"))
if mibBuilder.loadTexts: lldpXdcbxDupControlTlv.setStatus('current')
lldpXdcbxDupFeatureTlv = NotificationType((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 0, 7)).setObjects(("LLDP-EXT-DCBX-MIB", "lldpXdcbxFeatType"))
if mibBuilder.loadTexts: lldpXdcbxDupFeatureTlv.setStatus('current')
lldpXdcbxPeerNoFeat = NotificationType((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 0, 8)).setObjects(("LLDP-EXT-DCBX-MIB", "lldpXdcbxFeatType"))
if mibBuilder.loadTexts: lldpXdcbxPeerNoFeat.setStatus('current')
lldpXdcbxPeerNoResp = NotificationType((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 0, 9)).setObjects(("LLDP-EXT-DCBX-MIB", "lldpXdcbxPortNumber"))
if mibBuilder.loadTexts: lldpXdcbxPeerNoResp.setStatus('current')
lldpXdcbxPeerConfigMismatch = NotificationType((1, 0, 8802, 1, 1, 2, 1, 5, 6945, 0, 10)).setObjects(("LLDP-EXT-DCBX-MIB", "lldpXdcbxPortNumber"))
if mibBuilder.loadTexts: lldpXdcbxPeerConfigMismatch.setStatus('current')
mibBuilder.exportSymbols("LLDP-EXT-DCBX-MIB", LldpXdcbxTCPeer=LldpXdcbxTCPeer, lldpXdcbxFeatSyncd=lldpXdcbxFeatSyncd, lldpXdcbxFeatPgBwAllocBwOper=lldpXdcbxFeatPgBwAllocBwOper, lldpXdcbxFeatSeqNo=lldpXdcbxFeatSeqNo, lldpXdcbxFeatError=lldpXdcbxFeatError, lldpXdcbxMultiplePeers=lldpXdcbxMultiplePeers, lldpXdcbxFeatAppProtoOUI=lldpXdcbxFeatAppProtoOUI, lldpXdcbxFeatAppProtoId=lldpXdcbxFeatAppProtoId, lldpXdcbxFeatPgPrioAllocEntry=lldpXdcbxFeatPgPrioAllocEntry, lldpXdcbxFeatAppProtoIndex=lldpXdcbxFeatAppProtoIndex, lldpXdcbxFeatPeerError=lldpXdcbxFeatPeerError, lldpXdcbxFeatPgBwAllocBwDesired=lldpXdcbxFeatPgBwAllocBwDesired, lldpXdcbxFeatAppProtoTable=lldpXdcbxFeatAppProtoTable, lldpXdcbxFeatPgBwAllocEntry=lldpXdcbxFeatPgBwAllocEntry, lldpXdcbxFeatEnable=lldpXdcbxFeatEnable, lldpXdcbxFeatPeerAdvertise=lldpXdcbxFeatPeerAdvertise, lldpXdcbxFeatPfcTable=lldpXdcbxFeatPfcTable, lldpXdcbxFeatPgPrioAllocPrioId=lldpXdcbxFeatPgPrioAllocPrioId, LldpXdcbxVersion=LldpXdcbxVersion, lldpXdcbxFeatAppProtoPriority=lldpXdcbxFeatAppProtoPriority, LldpXdcbxPgBw=LldpXdcbxPgBw, lldpXdcbxFeatPfcEnablePeer=lldpXdcbxFeatPfcEnablePeer, lldpXdcbxFeatPgBwAllocBwPeer=lldpXdcbxFeatPgBwAllocBwPeer, lldpXdcbxFeatLocalParameterChange=lldpXdcbxFeatLocalParameterChange, lldpXdcbxPeerNoResp=lldpXdcbxPeerNoResp, lldpXdcbxMiscControlError=lldpXdcbxMiscControlError, lldpXdcbxFeatPfcEntry=lldpXdcbxFeatPfcEntry, lldpXdcbxPortEnable=lldpXdcbxPortEnable, lldpXdcbxFeatPgPrioAllocPgIdOper=lldpXdcbxFeatPgPrioAllocPgIdOper, LldpXdcbxAppProtos=LldpXdcbxAppProtos, lldpXdcbxPeerNoFeat=lldpXdcbxPeerNoFeat, LldpXdcbxSF=LldpXdcbxSF, lldpXdcbxFeatAdvertise=lldpXdcbxFeatAdvertise, lldpXdcbxNotifications=lldpXdcbxNotifications, lldpXdcbxMIB=lldpXdcbxMIB, lldpXdcbxFeatType=lldpXdcbxFeatType, lldpXdcbxPortVersionMax=lldpXdcbxPortVersionMax, lldpXdcbxFeatAppProtoEntry=lldpXdcbxFeatAppProtoEntry, lldpXdcbxFeatPfcNumTCPFCSupported=lldpXdcbxFeatPfcNumTCPFCSupported, lldpXdcbxFeatEntry=lldpXdcbxFeatEntry, LldpXdcbxPriorityGroup=LldpXdcbxPriorityGroup, lldpXdcbxFeatAppProtoEnableOper=lldpXdcbxFeatAppProtoEnableOper, lldpXdcbxFeatPgPrioAllocTable=lldpXdcbxFeatPgPrioAllocTable, lldpXdcbxFeatPeerEnable=lldpXdcbxFeatPeerEnable, LldpXdcbxFeatureType=LldpXdcbxFeatureType, lldpXdcbxFeatOperMode=lldpXdcbxFeatOperMode, lldpXdcbxPortNumber=lldpXdcbxPortNumber, lldpXdcbxDupFeatureTlv=lldpXdcbxDupFeatureTlv, LldpXdcbxTCPFC=LldpXdcbxTCPFC, lldpXdcbxFeatPgBwAllocTable=lldpXdcbxFeatPgBwAllocTable, lldpXdcbxFeatPgNumTCsSupported=lldpXdcbxFeatPgNumTCsSupported, lldpXdcbxFeatPgPrioAllocPgIdDesired=lldpXdcbxFeatPgPrioAllocPgIdDesired, lldpXdcbxObjects=lldpXdcbxObjects, PYSNMP_MODULE_ID=lldpXdcbxMIB, lldpXdcbxLldpTxDisabled=lldpXdcbxLldpTxDisabled, LldpXdcbxPriority=LldpXdcbxPriority, lldpXdcbxFeatPeerWilling=lldpXdcbxFeatPeerWilling, lldpXdcbxFeatPeerTC=lldpXdcbxFeatPeerTC, lldpXdcbxFeatAppProtoSF=lldpXdcbxFeatAppProtoSF, lldpXdcbxFeatPfcEnableDesired=lldpXdcbxFeatPfcEnableDesired, lldpXdcbxFeatures=lldpXdcbxFeatures, lldpXdcbxFeatVersionMax=lldpXdcbxFeatVersionMax, lldpXdcbxFeatSubType=lldpXdcbxFeatSubType, lldpXdcbxFeatAppProtoPrioEntry=lldpXdcbxFeatAppProtoPrioEntry, lldpXdcbxPortAckNo=lldpXdcbxPortAckNo, lldpXdcbxFeatWilling=lldpXdcbxFeatWilling, lldpXdcbxPeerConfigMismatch=lldpXdcbxPeerConfigMismatch, LldpXdcbxTC=LldpXdcbxTC, lldpXdcbxPortVersionOper=lldpXdcbxPortVersionOper, lldpXdcbxFeatAppProtoPrioTable=lldpXdcbxFeatAppProtoPrioTable, lldpXdcbxLldpRxDisabled=lldpXdcbxLldpRxDisabled, lldpXdcbxFeatVersionOper=lldpXdcbxFeatVersionOper, lldpXdcbxPortSeqNo=lldpXdcbxPortSeqNo, lldpXdcbxMiscFeatureError=lldpXdcbxMiscFeatureError, lldpXdcbxFeatAppProtoEnableDesired=lldpXdcbxFeatAppProtoEnableDesired, lldpXdcbxFeatPfcEnableOper=lldpXdcbxFeatPfcEnableOper, lldpXdcbxDupControlTlv=lldpXdcbxDupControlTlv, lldpXdcbxFeatPgBwAllocPgId=lldpXdcbxFeatPgBwAllocPgId, lldpXdcbxFeatTable=lldpXdcbxFeatTable, lldpXdcbxFeatPfcPriority=lldpXdcbxFeatPfcPriority, lldpXdcbxPortEntry=lldpXdcbxPortEntry, LldpXdcbxFeatureSubType=LldpXdcbxFeatureSubType, lldpXdcbxFeatPgPrioAllocPgIdPeer=lldpXdcbxFeatPgPrioAllocPgIdPeer, lldpXdcbxFeatPg=lldpXdcbxFeatPg, lldpXdcbxFeatAppProto=lldpXdcbxFeatAppProto, lldpXdcbxPortTable=lldpXdcbxPortTable, lldpXdcbxFeatPfc=lldpXdcbxFeatPfc, lldpXdcbxFeatAppProtoEnablePeer=lldpXdcbxFeatAppProtoEnablePeer)
