#
# PySNMP MIB module SAEUROPE-DCM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/saeurope/SAEUROPE-DCM-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 13:02:02 2024
# On host fv-az1215-438 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
tsProcessorsMIBGroups, tsProcessors = mibBuilder.importSymbols("SAEUROPE-ROOT-MIB", "tsProcessorsMIBGroups", "tsProcessors")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, ObjectIdentity, Integer32, Unsigned32, Bits, Counter32, IpAddress, Gauge32, MibIdentifier, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "Integer32", "Unsigned32", "Bits", "Counter32", "IpAddress", "Gauge32", "MibIdentifier", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64")
RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
saEuropeDcmModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 1))
saEuropeDcmModule.setRevisions(('2006-02-16 14:40', '2006-10-11 14:58', '2006-12-04 13:00', '2006-12-21 13:00', '2007-01-05 13:00', '2007-05-24 13:00', '2007-11-13 13:00', '2008-01-14 13:00', '2009-01-13 13:00', '2009-10-13 13:00', '2010-01-15 13:00', '2011-05-27 13:00', '2012-03-02 13:00', '2012-06-14 13:00', '2013-07-12 13:00',))
if mibBuilder.loadTexts: saEuropeDcmModule.setLastUpdated('201206141300Z')
if mibBuilder.loadTexts: saEuropeDcmModule.setOrganization('Synamedia')
dcmMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 2, 1))
saEuropeDcmModuleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 2, 1, 1)).setObjects(("SAEUROPE-DCM-MIB", "dcmMandatoryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    saEuropeDcmModuleCompliance = saEuropeDcmModuleCompliance.setStatus('current')
dcmMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 2, 1, 2)).setObjects(("SAEUROPE-DCM-MIB", "dcmInputTsBoard"), ("SAEUROPE-DCM-MIB", "dcmInputTsPort"), ("SAEUROPE-DCM-MIB", "dcmInputTsUdpPort"), ("SAEUROPE-DCM-MIB", "dcmInputTsIpAddress"), ("SAEUROPE-DCM-MIB", "dcmInputTsSrcIpAddress"), ("SAEUROPE-DCM-MIB", "dcmCfgInputTsIndex"), ("SAEUROPE-DCM-MIB", "dcmCfgInputTsSrcIpAddress"), ("SAEUROPE-DCM-MIB", "dcmCfgInputTsState"), ("SAEUROPE-DCM-MIB", "dcmOutputTsBoard"), ("SAEUROPE-DCM-MIB", "dcmOutputTsPort"), ("SAEUROPE-DCM-MIB", "dcmOutputTsUdpPort"), ("SAEUROPE-DCM-MIB", "dcmOutputTsIpAddress"), ("SAEUROPE-DCM-MIB", "dcmOutputTsTransportStreamId"), ("SAEUROPE-DCM-MIB", "dcmOutputTsOriginalNetworkId"), ("SAEUROPE-DCM-MIB", "dcmOutputTsStandard"), ("SAEUROPE-DCM-MIB", "dcmOutputTsActive"), ("SAEUROPE-DCM-MIB", "dcmOutputTsTransportStreamBitRate"), ("SAEUROPE-DCM-MIB", "dcmCfgOutputTsIndex"), ("SAEUROPE-DCM-MIB", "dcmCfgOutputTsTransportStreamId"), ("SAEUROPE-DCM-MIB", "dcmCfgOutputTsOriginalNetworkId"), ("SAEUROPE-DCM-MIB", "dcmCfgOutputTsStandard"), ("SAEUROPE-DCM-MIB", "dcmCfgOutputTsActive"), ("SAEUROPE-DCM-MIB", "dcmCfgOutputTsTransportStreamBitRate"), ("SAEUROPE-DCM-MIB", "dcmCfgOutputTsRowStatus"), ("SAEUROPE-DCM-MIB", "dcmTrGroupBitRate"), ("SAEUROPE-DCM-MIB", "dcmTrGroupType"), ("SAEUROPE-DCM-MIB", "dcmTrGroupRowStatus"), ("SAEUROPE-DCM-MIB", "dcmCfgSrvForceOutputServiceID"), ("SAEUROPE-DCM-MIB", "dcmCfgSrvOutputServiceID"), ("SAEUROPE-DCM-MIB", "dcmCfgSrvForceOutputServiceName"), ("SAEUROPE-DCM-MIB", "dcmCfgSrvOutputServiceName"), ("SAEUROPE-DCM-MIB", "dcmCfgSrvRowStatus"), ("SAEUROPE-DCM-MIB", "dcmCfgSrvState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dcmMandatoryGroup = dcmMandatoryGroup.setStatus('current')
dcmOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 2, 1, 3)).setObjects(("SAEUROPE-DCM-MIB", "dcmCfgInputTsRowStatus"), ("SAEUROPE-DCM-MIB", "dcmTrTsGroupId"), ("SAEUROPE-DCM-MIB", "dcmTrTsRowStatus"), ("SAEUROPE-DCM-MIB", "dcmTrSrvGroupId"), ("SAEUROPE-DCM-MIB", "dcmTrSrvTypeForService"), ("SAEUROPE-DCM-MIB", "dcmTrSrvLowerLimitServiceBitRate"), ("SAEUROPE-DCM-MIB", "dcmTrSrvUpperLimitServiceBitRate"), ("SAEUROPE-DCM-MIB", "dcmTrSrvPriority"), ("SAEUROPE-DCM-MIB", "dcmTrSrvRowStatus"), ("SAEUROPE-DCM-MIB", "dcmDpiPrimaryChannelName"), ("SAEUROPE-DCM-MIB", "dcmDpiPrimaryChannelMode"), ("SAEUROPE-DCM-MIB", "dcmDpiInputTsIndex"), ("SAEUROPE-DCM-MIB", "dcmDpiInputServiceId"), ("SAEUROPE-DCM-MIB", "dcmDpiManualTrigger"), ("SAEUROPE-DCM-MIB", "dcmDpiChannelStatus"), ("SAEUROPE-DCM-MIB", "dcmDpiRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dcmOptionalGroup = dcmOptionalGroup.setStatus('current')
dcmIpgwGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 2, 1, 4)).setObjects(("SAEUROPE-DCM-MIB", "dcmIpgwSdiInConfigMaxAllowedVideoFormat"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiInConfigUserName"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiInFormatFramerate"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiInFormatVideoformat"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiInFormatAspectRatio"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiInFormatNbrOfLinesPerFrame"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiInFormatFrameBuildUp"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiInStatisticsReset"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiInStatisticsCrcErrors1Min"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiInStatisticsCrcErrors1Hour"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiInStatisticsCrcErrors1Day"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInTSMaxAllowedVideoFormat"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInTSUsername"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInTSIpAddress"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInTSUdpPort"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInTSDejitter"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInTSVideoOffset"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInTSRowStatus"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInJp2kEnableState"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsReset"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsValidPackets"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsMissingPackets"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsFixedPackets"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsDuplicatePackets"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsReorderedPackets"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsCrcReset"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsCrcErrors1min"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsCrcErrors1Hour"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsCrcErrors1Day"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecConfigMode"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecConfigColumnIpAddress"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecConfigColumnUdpPort"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecConfigRowIpAddress"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecConfigRowUdpPort"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecStatusColumnPresent"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecStatusRowPresent"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecStatusFecColumnDepth"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecStatusFecRowLength"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecStatusColumnOverhead"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecStatusRowOverhead"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecStatusTotalOverhead"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecStatusLatency"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInHitlessMode"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInHitlessWindowPackets"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInHitlessDelay"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSActive"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSGbePortType"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSRowStatus"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kEnableState"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigVideoRate"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigMaxStreamBitRate"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigChromaWeight"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigVitcEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigViiEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigAfdEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigTeletextBEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigCCEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigEncapsulationType"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutAdvancedVlanEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutAdvancedVlanId"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutAdvancedVlanPriority"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutAdvancedTtl"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutAdvancedTos"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutAdvancedSourceIpAddress"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutAdvancedSourceUdpPort"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecMode"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecSendingArrangement"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecRowLength"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecColumnDepth"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecOverheadColumn"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecOverheadRow"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiOutTSSrcRef"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiOutTSSrcPort"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiOutTSSrcBoard"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecDestinationColIpAddressA"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecDestinationColUdpPortA"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecDestinationRowIpAddressA"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecDestinationRowUdpPortA"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecDestinationColIpAddressB"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecDestinationColUdpPortB"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecDestinationRowIpAddressB"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecDestinationRowUdpPortB"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSDestinationIpAddressA"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSDestinationUdpPortA"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSDestinationIpAddressB"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSDestinationUdpPortB"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecOverheadTotal"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiOutTSActive"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSSrcBoard"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSSrcPort"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutAdvancedUseSourceAddress"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigTrans525F2Line"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigTrans525F1Line"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigTrans625F2Line"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigTrans625F1Line"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigVPSEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSSrcRef"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsOutOfRangePackets"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair2Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair1Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair1Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair6Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair7Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair7Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair8Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair8Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair4Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair4Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair5Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair5Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInConfigMaxAllowedVideoFormat"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInConfigUserName"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInConfigVideoOffset"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInFormatFramerate"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInFormatVideoformat"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInFormatAspectRatio"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInFormatNbrOfLinesPerFrame"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInFormatFrameBuildUp"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInStatisticsReset"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInStatisticsCrcErrors1Min"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInStatisticsCrcErrors1Hour"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInStatisticsCrcErrors1Day"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiOutTSActive"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigVideoRate"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigMaxStreamBitRate"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigChromaWeight"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigVitcEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigViiEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigAfdEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigTeletextBEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigCCEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigVPSEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigTrans625F1Line"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigTrans625F2Line"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigTrans525F1Line"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigTrans525F2Line"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair1Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair1Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair2Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair2Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair3Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair3Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair4Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair4Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair5Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair5Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair6Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair6Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair7Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair7Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair8Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair8Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwSystemGenlockEnableState"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFormatFramerate"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFormatVideoformat"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFormatAspectRatio"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFormatNbrOfLinesPerFrame"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFormatFrameBuildUp"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair6Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair2Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair3Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair3Present"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dcmIpgwGroup = dcmIpgwGroup.setStatus('current')
dcmMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3))
dcmSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1))
dcmMuxSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1))
dcmInputTransportStreamTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 1), )
if mibBuilder.loadTexts: dcmInputTransportStreamTable.setStatus('current')
dcmInputTransportStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmInputTsIndex"))
if mibBuilder.loadTexts: dcmInputTransportStreamEntry.setStatus('current')
dcmInputTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmInputTsIndex.setStatus('current')
dcmInputTsBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmInputTsBoard.setStatus('current')
dcmInputTsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmInputTsPort.setStatus('current')
dcmInputTsUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmInputTsUdpPort.setStatus('current')
dcmInputTsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmInputTsIpAddress.setStatus('current')
dcmInputTsSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmInputTsSrcIpAddress.setStatus('current')
dcmConfigInputTsTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 2), )
if mibBuilder.loadTexts: dcmConfigInputTsTable.setStatus('current')
dcmConfigInputTsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 2, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmCfgInputTsBoard"), (0, "SAEUROPE-DCM-MIB", "dcmCfgInputTsPort"), (0, "SAEUROPE-DCM-MIB", "dcmCfgInputTsUdpPort"), (0, "SAEUROPE-DCM-MIB", "dcmCfgInputTsIpAddress"))
if mibBuilder.loadTexts: dcmConfigInputTsEntry.setStatus('current')
dcmCfgInputTsBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmCfgInputTsBoard.setStatus('current')
dcmCfgInputTsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: dcmCfgInputTsPort.setStatus('current')
dcmCfgInputTsUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmCfgInputTsUdpPort.setStatus('current')
dcmCfgInputTsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 2, 1, 4), IpAddress())
if mibBuilder.loadTexts: dcmCfgInputTsIpAddress.setStatus('current')
dcmCfgInputTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmCfgInputTsIndex.setStatus('current')
dcmCfgInputTsSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmCfgInputTsSrcIpAddress.setStatus('current')
dcmCfgInputTsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgInputTsRowStatus.setStatus('current')
dcmCfgInputTsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmCfgInputTsState.setStatus('current')
dcmOutputTransportStreamTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3), )
if mibBuilder.loadTexts: dcmOutputTransportStreamTable.setStatus('current')
dcmOutputTransportStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmOutputTsIndex"))
if mibBuilder.loadTexts: dcmOutputTransportStreamEntry.setStatus('current')
dcmOutputTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmOutputTsIndex.setStatus('current')
dcmOutputTsBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmOutputTsBoard.setStatus('current')
dcmOutputTsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmOutputTsPort.setStatus('current')
dcmOutputTsUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsUdpPort.setStatus('current')
dcmOutputTsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsIpAddress.setStatus('current')
dcmOutputTsTransportStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsTransportStreamId.setStatus('current')
dcmOutputTsOriginalNetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsOriginalNetworkId.setStatus('current')
dcmOutputTsStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7))).clone(namedValues=NamedValues(("transparent", 1), ("forceUpLink", 5), ("forceVideo", 6), ("forceAudio3", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsStandard.setStatus('current')
dcmOutputTsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsActive.setStatus('current')
dcmOutputTsTransportStreamBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3, 1, 10), Integer32()).setUnits('kbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsTransportStreamBitRate.setStatus('current')
dcmConfigOutputTsTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4), )
if mibBuilder.loadTexts: dcmConfigOutputTsTable.setStatus('current')
dcmConfigOutputTsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmCfgOutputTsBoard"), (0, "SAEUROPE-DCM-MIB", "dcmCfgOutputTsPort"), (0, "SAEUROPE-DCM-MIB", "dcmCfgOutputTsUdpPort"), (0, "SAEUROPE-DCM-MIB", "dcmCfgOutputTsIpAddress"))
if mibBuilder.loadTexts: dcmConfigOutputTsEntry.setStatus('current')
dcmCfgOutputTsBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmCfgOutputTsBoard.setStatus('current')
dcmCfgOutputTsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: dcmCfgOutputTsPort.setStatus('current')
dcmCfgOutputTsUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmCfgOutputTsUdpPort.setStatus('current')
dcmCfgOutputTsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1, 4), IpAddress())
if mibBuilder.loadTexts: dcmCfgOutputTsIpAddress.setStatus('current')
dcmCfgOutputTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmCfgOutputTsIndex.setStatus('current')
dcmCfgOutputTsTransportStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgOutputTsTransportStreamId.setStatus('current')
dcmCfgOutputTsOriginalNetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgOutputTsOriginalNetworkId.setStatus('current')
dcmCfgOutputTsStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("transparent", 1), ("dvb", 2), ("atsc", 3), ("motorola", 4), ("forceUpLink", 5), ("forceVideo", 6), ("forceAudio3", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgOutputTsStandard.setStatus('current')
dcmCfgOutputTsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgOutputTsActive.setStatus('current')
dcmCfgOutputTsTransportStreamBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1, 10), Integer32()).setUnits('kbit/s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgOutputTsTransportStreamBitRate.setStatus('current')
dcmCfgOutputTsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgOutputTsRowStatus.setStatus('current')
dcmConfigServiceTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 5), )
if mibBuilder.loadTexts: dcmConfigServiceTable.setStatus('current')
dcmConfigServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 5, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmCfgSrvInputTsIndex"), (0, "SAEUROPE-DCM-MIB", "dcmCfgSrvInputServiceID"), (0, "SAEUROPE-DCM-MIB", "dcmCfgSrvOutputTsIndex"))
if mibBuilder.loadTexts: dcmConfigServiceEntry.setStatus('current')
dcmCfgSrvInputTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmCfgSrvInputTsIndex.setStatus('current')
dcmCfgSrvInputServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmCfgSrvInputServiceID.setStatus('current')
dcmCfgSrvOutputTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmCfgSrvOutputTsIndex.setStatus('current')
dcmCfgSrvForceOutputServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 5, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgSrvForceOutputServiceID.setStatus('current')
dcmCfgSrvOutputServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgSrvOutputServiceID.setStatus('current')
dcmCfgSrvForceOutputServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 5, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgSrvForceOutputServiceName.setStatus('current')
dcmCfgSrvOutputServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 5, 1, 7), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgSrvOutputServiceName.setStatus('current')
dcmCfgSrvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 5, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgSrvRowStatus.setStatus('current')
dcmCfgSrvState = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmCfgSrvState.setStatus('current')
dcmTsAutoPassTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 6), )
if mibBuilder.loadTexts: dcmTsAutoPassTable.setStatus('current')
dcmTsAutoPassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 6, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmOutputTsIndex"), (0, "SAEUROPE-DCM-MIB", "dcmInputTsIndex"))
if mibBuilder.loadTexts: dcmTsAutoPassEntry.setStatus('current')
dcmTsAutoPassNewServices = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 6, 1, 1), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTsAutoPassNewServices.setStatus('current')
dcmTsAutoPassNewEMMs = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 6, 1, 2), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTsAutoPassNewEMMs.setStatus('current')
dcmTsAutoPassUnreferencedPIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 6, 1, 3), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTsAutoPassUnreferencedPIDs.setStatus('current')
dcmTsAutoPassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTsAutoPassRowStatus.setStatus('current')
dcmConfigTransparentOutputTsTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 7), )
if mibBuilder.loadTexts: dcmConfigTransparentOutputTsTable.setStatus('current')
dcmConfigTransparentOutputTsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 7, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmCfgTransparentOutputTsBoard"), (0, "SAEUROPE-DCM-MIB", "dcmCfgTransparentOutputTsPort"), (0, "SAEUROPE-DCM-MIB", "dcmCfgTransparentOutputTsUdpPort"), (0, "SAEUROPE-DCM-MIB", "dcmCfgTransparentOutputTsIpAddress"), (0, "SAEUROPE-DCM-MIB", "dcmCfgTransparentSourceTsIndex"))
if mibBuilder.loadTexts: dcmConfigTransparentOutputTsEntry.setStatus('current')
dcmCfgTransparentOutputTsBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmCfgTransparentOutputTsBoard.setStatus('current')
dcmCfgTransparentOutputTsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: dcmCfgTransparentOutputTsPort.setStatus('current')
dcmCfgTransparentOutputTsUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmCfgTransparentOutputTsUdpPort.setStatus('current')
dcmCfgTransparentOutputTsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 7, 1, 4), IpAddress())
if mibBuilder.loadTexts: dcmCfgTransparentOutputTsIpAddress.setStatus('current')
dcmCfgTransparentSourceTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmCfgTransparentSourceTsIndex.setStatus('current')
dcmCfgTransparentOutputTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmCfgTransparentOutputTsIndex.setStatus('current')
dcmCfgTransparentOutputTsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgTransparentOutputTsActive.setStatus('current')
dcmCfgTransparentOutputTsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 7, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgTransparentOutputTsRowStatus.setStatus('current')
dcmServiceBackup = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8))
dcmServiceBackupByBoardTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 1), )
if mibBuilder.loadTexts: dcmServiceBackupByBoardTable.setStatus('current')
dcmServiceBackupByBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmServiceBackupByBoardBoard"))
if mibBuilder.loadTexts: dcmServiceBackupByBoardEntry.setStatus('current')
dcmServiceBackupByBoardBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmServiceBackupByBoardBoard.setStatus('current')
dcmServiceBackupByBoardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("main", 2), ("backup", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmServiceBackupByBoardStatus.setStatus('current')
dcmServiceBackupByTsTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 2), )
if mibBuilder.loadTexts: dcmServiceBackupByTsTable.setStatus('current')
dcmServiceBackupByTsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 2, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmServiceBackupByTsTsIndex"))
if mibBuilder.loadTexts: dcmServiceBackupByTsEntry.setStatus('current')
dcmServiceBackupByTsTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmServiceBackupByTsTsIndex.setStatus('current')
dcmServiceBackupByTsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("main", 2), ("backup", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmServiceBackupByTsStatus.setStatus('current')
dcmServiceBackupSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 3), )
if mibBuilder.loadTexts: dcmServiceBackupSettingsTable.setStatus('current')
dcmServiceBackupSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 3, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmSrvBuSettingsTsIndex"), (0, "SAEUROPE-DCM-MIB", "dcmSrvBuSettingsServiceID"))
if mibBuilder.loadTexts: dcmServiceBackupSettingsEntry.setStatus('current')
dcmSrvBuSettingsTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmSrvBuSettingsTsIndex.setStatus('current')
dcmSrvBuSettingsServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmSrvBuSettingsServiceID.setStatus('current')
dcmSrvBuSettingsBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nonRevertive", 1), ("revertive", 2), ("floating", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmSrvBuSettingsBehavior.setStatus('current')
dcmSrvBuSettingsToBackupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmSrvBuSettingsToBackupDelay.setStatus('current')
dcmSrvBuSettingsToMainDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmSrvBuSettingsToMainDelay.setStatus('current')
dcmSrvBuSettingsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("main", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmSrvBuSettingsState.setStatus('current')
dcmServiceBackupServicesTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 4), )
if mibBuilder.loadTexts: dcmServiceBackupServicesTable.setStatus('current')
dcmServiceBackupServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 4, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmSrvBuOutputSrvTsIndex"), (0, "SAEUROPE-DCM-MIB", "dcmSrvBuOutputSrvServiceID"), (0, "SAEUROPE-DCM-MIB", "dcmSrvBuBuSrvTsIndex"), (0, "SAEUROPE-DCM-MIB", "dcmSrvBuBuSrvServiceID"))
if mibBuilder.loadTexts: dcmServiceBackupServicesEntry.setStatus('current')
dcmSrvBuOutputSrvTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmSrvBuOutputSrvTsIndex.setStatus('current')
dcmSrvBuOutputSrvServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmSrvBuOutputSrvServiceID.setStatus('current')
dcmSrvBuBuSrvTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmSrvBuBuSrvTsIndex.setStatus('current')
dcmSrvBuBuSrvServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmSrvBuBuSrvServiceID.setStatus('current')
dcmSrvBuBuSrvState = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmSrvBuBuSrvState.setStatus('current')
dcmSrvBuRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmSrvBuRowStatus.setStatus('current')
dcmTsBackup = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 9))
dcmTsBackupSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 9, 1), )
if mibBuilder.loadTexts: dcmTsBackupSettingsTable.setStatus('current')
dcmTsBackupSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 9, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmTsBuSettingsTsIndex"))
if mibBuilder.loadTexts: dcmTsBackupSettingsEntry.setStatus('current')
dcmTsBuSettingsTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmTsBuSettingsTsIndex.setStatus('current')
dcmTsBuSettingsBuTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmTsBuSettingsBuTsIndex.setStatus('current')
dcmTsBuSettingsBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nonRevertive", 1), ("revertive", 2), ("floating", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmTsBuSettingsBehavior.setStatus('current')
dcmTsBuSettingsToBackupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmTsBuSettingsToBackupDelay.setStatus('current')
dcmTsBuSettingsToMainDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmTsBuSettingsToMainDelay.setStatus('current')
dcmTsBuSettingsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("main", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmTsBuSettingsState.setStatus('current')
dcmTsBuSettingsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 9, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTsBuSettingsRowStatus.setStatus('current')
dcmInputServiceTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 10), )
if mibBuilder.loadTexts: dcmInputServiceTable.setStatus('current')
dcmInputServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 10, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmInputSrvTsIndex"), (0, "SAEUROPE-DCM-MIB", "dcmInputSrvServiceID"))
if mibBuilder.loadTexts: dcmInputServiceEntry.setStatus('current')
dcmInputSrvTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmInputSrvTsIndex.setStatus('current')
dcmInputSrvServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmInputSrvServiceID.setStatus('current')
dcmInputSrvName = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 10, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmInputSrvName.setStatus('current')
dcmInputSrvState = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmInputSrvState.setStatus('current')
dcmProcessingServiceTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 11), )
if mibBuilder.loadTexts: dcmProcessingServiceTable.setStatus('current')
dcmProcessingServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 11, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmProcessingSrvTsIndex"), (0, "SAEUROPE-DCM-MIB", "dcmProcessingSrvServiceID"))
if mibBuilder.loadTexts: dcmProcessingServiceEntry.setStatus('current')
dcmProcessingSrvTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmProcessingSrvTsIndex.setStatus('current')
dcmProcessingSrvServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmProcessingSrvServiceID.setStatus('current')
dcmProcessingSrvName = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmProcessingSrvName.setStatus('current')
dcmProcessingSrvState = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmProcessingSrvState.setStatus('current')
dcmDvbS2InputStreamTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 12), )
if mibBuilder.loadTexts: dcmDvbS2InputStreamTable.setStatus('current')
dcmDvbS2InputStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 12, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmDvbS2InputStreamTsIndex"))
if mibBuilder.loadTexts: dcmDvbS2InputStreamEntry.setStatus('current')
dcmDvbS2InputStreamTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmDvbS2InputStreamTsIndex.setStatus('current')
dcmDvbS2InputStreamISI = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmDvbS2InputStreamISI.setStatus('current')
dcmTrSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2))
dcmTrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 1), )
if mibBuilder.loadTexts: dcmTrGroupTable.setStatus('current')
dcmTrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmTrGroupBoardNumber"), (0, "SAEUROPE-DCM-MIB", "dcmTrGroupPortNumber"), (0, "SAEUROPE-DCM-MIB", "dcmTrGroupId"), (0, "SAEUROPE-DCM-MIB", "dcmTrGroupOutputTs"))
if mibBuilder.loadTexts: dcmTrGroupEntry.setStatus('current')
dcmTrGroupBoardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmTrGroupBoardNumber.setStatus('current')
dcmTrGroupPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: dcmTrGroupPortNumber.setStatus('current')
dcmTrGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 501)))
if mibBuilder.loadTexts: dcmTrGroupId.setStatus('current')
dcmTrGroupOutputTs = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmTrGroupOutputTs.setStatus('current')
dcmTrGroupBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 1, 1, 5), Integer32()).setUnits('kbit/s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTrGroupBitRate.setStatus('current')
dcmTrGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sPTS", 1), ("mPTS", 2), ("mPTSSelectiveService", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTrGroupType.setStatus('current')
dcmTrGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTrGroupRowStatus.setStatus('current')
dcmTrTransportStreamTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 2), )
if mibBuilder.loadTexts: dcmTrTransportStreamTable.setStatus('current')
dcmTrTransportStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 2, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmTrTsOutputTsIndex"))
if mibBuilder.loadTexts: dcmTrTransportStreamEntry.setStatus('current')
dcmTrTsOutputTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmTrTsOutputTsIndex.setStatus('current')
dcmTrTsGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 501))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTrTsGroupId.setStatus('current')
dcmTrTsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTrTsRowStatus.setStatus('current')
dcmTrServiceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 3), )
if mibBuilder.loadTexts: dcmTrServiceConfigTable.setStatus('current')
dcmTrServiceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 3, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmTrSrvOutputTsIndex"), (0, "SAEUROPE-DCM-MIB", "dcmTrSrvOutputServiceID"))
if mibBuilder.loadTexts: dcmTrServiceConfigEntry.setStatus('current')
dcmTrSrvOutputTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmTrSrvOutputTsIndex.setStatus('current')
dcmTrSrvOutputServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmTrSrvOutputServiceID.setStatus('current')
dcmTrSrvGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 501))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTrSrvGroupId.setStatus('current')
dcmTrSrvTypeForService = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("passThrough", 1), ("statMuxed", 2), ("rateLimited", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTrSrvTypeForService.setStatus('current')
dcmTrSrvLowerLimitServiceBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 3, 1, 5), Integer32()).setUnits('kbit/s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTrSrvLowerLimitServiceBitRate.setStatus('current')
dcmTrSrvUpperLimitServiceBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 3, 1, 6), Integer32()).setUnits('kbit/s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTrSrvUpperLimitServiceBitRate.setStatus('current')
dcmTrSrvPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTrSrvPriority.setStatus('current')
dcmTrSrvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTrSrvRowStatus.setStatus('current')
dcmDpiSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 3))
dcmDpiChannelTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 3, 1), )
if mibBuilder.loadTexts: dcmDpiChannelTable.setStatus('current')
dcmDpiChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 3, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmCfgSrvOutputTsIndex"), (0, "SAEUROPE-DCM-MIB", "dcmCfgSrvOutputServiceID"))
if mibBuilder.loadTexts: dcmDpiChannelEntry.setStatus('current')
dcmDpiPrimaryChannelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 3, 1, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmDpiPrimaryChannelName.setStatus('current')
dcmDpiPrimaryChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 1), ("scte30", 2), ("scte35", 3), ("manual", 4), ("scte35custom", 5), ("manualcustom", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmDpiPrimaryChannelMode.setStatus('current')
dcmDpiInputTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmDpiInputTsIndex.setStatus('current')
dcmDpiInputServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmDpiInputServiceId.setStatus('current')
dcmDpiManualTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("startSplice", 2), ("stopSplice", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmDpiManualTrigger.setStatus('current')
dcmDpiChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("ad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmDpiChannelStatus.setStatus('current')
dcmDpiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 3, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmDpiRowStatus.setStatus('current')
dcmGbeSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5))
dcmOutputTsFecTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 1), )
if mibBuilder.loadTexts: dcmOutputTsFecTable.setStatus('current')
dcmOutputTsFecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmOutputTsIndex"))
if mibBuilder.loadTexts: dcmOutputTsFecEntry.setStatus('current')
dcmOutputTsFecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("fec1D", 2), ("fec2D", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsFecMode.setStatus('current')
dcmOutputTsFecSendingArrangement = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pro-mpeg-cop3-annex-B", 1), ("pro-mpeg-cop3-annex-A", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsFecSendingArrangement.setStatus('current')
dcmOutputTsFecRowL = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsFecRowL.setStatus('current')
dcmOutputTsFecColD = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsFecColD.setStatus('current')
dcmOutputTsFecColIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsFecColIp.setStatus('current')
dcmOutputTsFecColUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsFecColUdp.setStatus('current')
dcmOutputTsFecRowIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsFecRowIp.setStatus('current')
dcmOutputTsFecRowUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsFecRowUdp.setStatus('current')
dcmGbePortModeTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 2), )
if mibBuilder.loadTexts: dcmGbePortModeTable.setStatus('current')
dcmGbePortModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 2, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmGbePortModeBoardNumber"))
if mibBuilder.loadTexts: dcmGbePortModeEntry.setStatus('current')
dcmGbePortModeBoardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmGbePortModeBoardNumber.setStatus('current')
dcmGbePortModeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pair", 1), ("individual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmGbePortModeMode.setStatus('current')
dcmAsiSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 6))
dcmConfigAsiInputBandwidthLimitTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 6, 1), )
if mibBuilder.loadTexts: dcmConfigAsiInputBandwidthLimitTable.setStatus('current')
dcmConfigAsiInputBandwidthLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 6, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmConfigAsiInputBandwidthLimitBoard"), (0, "SAEUROPE-DCM-MIB", "dcmConfigAsiInputBandwidthLimitPort"))
if mibBuilder.loadTexts: dcmConfigAsiInputBandwidthLimitEntry.setStatus('current')
dcmConfigAsiInputBandwidthLimitBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmConfigAsiInputBandwidthLimitBoard.setStatus('current')
dcmConfigAsiInputBandwidthLimitPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: dcmConfigAsiInputBandwidthLimitPort.setStatus('current')
dcmConfigAsiInputBandwidthLimitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmConfigAsiInputBandwidthLimitStatus.setStatus('current')
dcmConfigAsiInputBandwidthLimitBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 213000))).setUnits('kbit/s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmConfigAsiInputBandwidthLimitBitrate.setStatus('current')
dcmDeviceSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 7))
dcmDeviceBackupSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 7, 1))
dcmDeviceBackupActivateDevice = MibScalar((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eUnknown", 1), ("eActive", 2), ("eNotActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmDeviceBackupActivateDevice.setStatus('current')
dcmIpgwSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8))
dcmIpgwSdiIn = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1))
dcmIpgwSdiInConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 1), )
if mibBuilder.loadTexts: dcmIpgwSdiInConfigTable.setStatus('current')
dcmIpgwSdiInConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiInConfigBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiInConfigPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiInConfigRef"))
if mibBuilder.loadTexts: dcmIpgwSdiInConfigEntry.setStatus('current')
dcmIpgwSdiInConfigBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwSdiInConfigBoard.setStatus('current')
dcmIpgwSdiInConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)))
if mibBuilder.loadTexts: dcmIpgwSdiInConfigPort.setStatus('current')
dcmIpgwSdiInConfigRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwSdiInConfigRef.setStatus('current')
dcmIpgwSdiInConfigMaxAllowedVideoFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eSD", 1), ("eHD", 2), ("e3G", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwSdiInConfigMaxAllowedVideoFormat.setStatus('current')
dcmIpgwSdiInConfigUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwSdiInConfigUserName.setStatus('current')
dcmIpgwSdiInFormatTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 2), )
if mibBuilder.loadTexts: dcmIpgwSdiInFormatTable.setStatus('current')
dcmIpgwSdiInFormatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 2, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiInFormatBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiInFormatPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiInFormatRef"))
if mibBuilder.loadTexts: dcmIpgwSdiInFormatEntry.setStatus('current')
dcmIpgwSdiInFormatBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwSdiInFormatBoard.setStatus('current')
dcmIpgwSdiInFormatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)))
if mibBuilder.loadTexts: dcmIpgwSdiInFormatPort.setStatus('current')
dcmIpgwSdiInFormatRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwSdiInFormatRef.setStatus('current')
dcmIpgwSdiInFormatFramerate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("e24fps", 1), ("e25fps", 2), ("e30fps", 3), ("e50fps", 4), ("e60fps", 5), ("e2997fps", 6), ("e5994fps", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwSdiInFormatFramerate.setStatus('current')
dcmIpgwSdiInFormatVideoformat = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eSD", 1), ("eHD", 2), ("e3G", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwSdiInFormatVideoformat.setStatus('current')
dcmIpgwSdiInFormatAspectRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("e4n3", 1), ("e16n9", 2), ("e14n9", 3), ("eNotAvailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwSdiInFormatAspectRatio.setStatus('current')
dcmIpgwSdiInFormatNbrOfLinesPerFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwSdiInFormatNbrOfLinesPerFrame.setStatus('current')
dcmIpgwSdiInFormatFrameBuildUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eProgressive", 1), ("eInterlaced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwSdiInFormatFrameBuildUp.setStatus('current')
dcmIpgwSdiInStatisticsCrcTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 3), )
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsCrcTable.setStatus('current')
dcmIpgwSdiInStatisticsCrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 3, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiInStatisticsBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiInStatisticsPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiInStatisticsRef"))
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsCrcEntry.setStatus('current')
dcmIpgwSdiInStatisticsBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsBoard.setStatus('current')
dcmIpgwSdiInStatisticsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)))
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsPort.setStatus('current')
dcmIpgwSdiInStatisticsRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsRef.setStatus('current')
dcmIpgwSdiInStatisticsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("eReset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsReset.setStatus('current')
dcmIpgwSdiInStatisticsCrcErrors1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsCrcErrors1Min.setStatus('current')
dcmIpgwSdiInStatisticsCrcErrors1Hour = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsCrcErrors1Hour.setStatus('current')
dcmIpgwSdiInStatisticsCrcErrors1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsCrcErrors1Day.setStatus('current')
dcmIpgwSdiOut = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 2))
dcmIpgwSdiOutTSTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 2, 1), )
if mibBuilder.loadTexts: dcmIpgwSdiOutTSTable.setStatus('current')
dcmIpgwSdiOutTSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 2, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiOutTSBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiOutTSPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiOutTSRef"))
if mibBuilder.loadTexts: dcmIpgwSdiOutTSEntry.setStatus('current')
dcmIpgwSdiOutTSBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwSdiOutTSBoard.setStatus('current')
dcmIpgwSdiOutTSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 8)))
if mibBuilder.loadTexts: dcmIpgwSdiOutTSPort.setStatus('current')
dcmIpgwSdiOutTSRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwSdiOutTSRef.setStatus('current')
dcmIpgwSdiOutTSSrcBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwSdiOutTSSrcBoard.setStatus('current')
dcmIpgwSdiOutTSSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 7), ValueRangeConstraint(101, 106), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwSdiOutTSSrcPort.setStatus('current')
dcmIpgwSdiOutTSSrcRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwSdiOutTSSrcRef.setStatus('current')
dcmIpgwSdiOutTSActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eActive", 1), ("eNotActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwSdiOutTSActive.setStatus('current')
dcmIpgwRtpIn = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3))
dcmIpgwRtpInTSTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1), )
if mibBuilder.loadTexts: dcmIpgwRtpInTSTable.setStatus('current')
dcmIpgwRtpInTSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInTsBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInTSPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInTSRef"))
if mibBuilder.loadTexts: dcmIpgwRtpInTSEntry.setStatus('current')
dcmIpgwRtpInTsBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpInTsBoard.setStatus('current')
dcmIpgwRtpInTSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpInTSPort.setStatus('current')
dcmIpgwRtpInTSRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpInTSRef.setStatus('current')
dcmIpgwRtpInTSMaxAllowedVideoFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eSD", 1), ("eHD", 2), ("e3G", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpInTSMaxAllowedVideoFormat.setStatus('current')
dcmIpgwRtpInTSUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpInTSUsername.setStatus('current')
dcmIpgwRtpInTSIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpInTSIpAddress.setStatus('current')
dcmIpgwRtpInTSUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpInTSUdpPort.setStatus('current')
dcmIpgwRtpInTSDejitter = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpInTSDejitter.setStatus('current')
dcmIpgwRtpInTSVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpInTSVideoOffset.setStatus('current')
dcmIpgwRtpInTSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpInTSRowStatus.setStatus('current')
dcmIpgwRtpInFormatTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 2), )
if mibBuilder.loadTexts: dcmIpgwRtpInFormatTable.setStatus('current')
dcmIpgwRtpInFormatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 2, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInFormatBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInFormatPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInFormatRef"))
if mibBuilder.loadTexts: dcmIpgwRtpInFormatEntry.setStatus('current')
dcmIpgwRtpInFormatBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpInFormatBoard.setStatus('current')
dcmIpgwRtpInFormatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)))
if mibBuilder.loadTexts: dcmIpgwRtpInFormatPort.setStatus('current')
dcmIpgwRtpInFormatRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpInFormatRef.setStatus('current')
dcmIpgwRtpInFormatFramerate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("e24fps", 1), ("e25fps", 2), ("e30fps", 3), ("e50fps", 4), ("e60fps", 5), ("e2997fps", 6), ("e5994fps", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFormatFramerate.setStatus('current')
dcmIpgwRtpInFormatVideoformat = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eSD", 1), ("eHD", 2), ("e3G", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFormatVideoformat.setStatus('current')
dcmIpgwRtpInFormatAspectRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("e4n3", 1), ("e16n9", 2), ("e14n9", 3), ("eNotAvailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFormatAspectRatio.setStatus('current')
dcmIpgwRtpInFormatNbrOfLinesPerFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFormatNbrOfLinesPerFrame.setStatus('current')
dcmIpgwRtpInFormatFrameBuildUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eProgressive", 1), ("eInterlaced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFormatFrameBuildUp.setStatus('current')
dcmIpgwRtpInJp2kEnableTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 3), )
if mibBuilder.loadTexts: dcmIpgwRtpInJp2kEnableTable.setStatus('current')
dcmIpgwRtpInJp2kEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 3, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInJp2kEnableBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInJp2kEnablePort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInJp2kEnableRef"))
if mibBuilder.loadTexts: dcmIpgwRtpInJp2kEnableEntry.setStatus('current')
dcmIpgwRtpInJp2kEnableBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpInJp2kEnableBoard.setStatus('current')
dcmIpgwRtpInJp2kEnablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpInJp2kEnablePort.setStatus('current')
dcmIpgwRtpInJp2kEnableRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpInJp2kEnableRef.setStatus('current')
dcmIpgwRtpInJp2kEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eActive", 1), ("eNotActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpInJp2kEnableState.setStatus('current')
dcmIpgwRtpInStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4), )
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsTable.setStatus('current')
dcmIpgwRtpInStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsRef"))
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsEntry.setStatus('current')
dcmIpgwRtpInStatisticsBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsBoard.setStatus('current')
dcmIpgwRtpInStatisticsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsPort.setStatus('current')
dcmIpgwRtpInStatisticsRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsRef.setStatus('current')
dcmIpgwRtpInStatisticsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("eReset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsReset.setStatus('current')
dcmIpgwRtpInStatisticsValidPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsValidPackets.setStatus('current')
dcmIpgwRtpInStatisticsMissingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsMissingPackets.setStatus('current')
dcmIpgwRtpInStatisticsFixedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsFixedPackets.setStatus('current')
dcmIpgwRtpInStatisticsDuplicatePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsDuplicatePackets.setStatus('current')
dcmIpgwRtpInStatisticsReorderedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsReorderedPackets.setStatus('current')
dcmIpgwRtpInStatisticsOutOfRangePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsOutOfRangePackets.setStatus('current')
dcmIpgwRtpInStatitsticsCrcTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 5), )
if mibBuilder.loadTexts: dcmIpgwRtpInStatitsticsCrcTable.setStatus('current')
dcmIpgwRtpInStatitsticsCrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 5, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatitsticsCrcBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatitsticsCrcPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatitsticsCrcRef"))
if mibBuilder.loadTexts: dcmIpgwRtpInStatitsticsCrcEntry.setStatus('current')
dcmIpgwRtpInStatitsticsCrcBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpInStatitsticsCrcBoard.setStatus('current')
dcmIpgwRtpInStatitsticsCrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpInStatitsticsCrcPort.setStatus('current')
dcmIpgwRtpInStatitsticsCrcRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpInStatitsticsCrcRef.setStatus('current')
dcmIpgwRtpInStatisticsCrcReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("eReset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsCrcReset.setStatus('current')
dcmIpgwRtpInStatisticsCrcErrors1min = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsCrcErrors1min.setStatus('current')
dcmIpgwRtpInStatisticsCrcErrors1Hour = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsCrcErrors1Hour.setStatus('current')
dcmIpgwRtpInStatisticsCrcErrors1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsCrcErrors1Day.setStatus('current')
dcmIpgwRtpInFecConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 6), )
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigTable.setStatus('current')
dcmIpgwRtpInFecConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 6, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecConfigBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecConfigPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecConfigRef"))
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigEntry.setStatus('current')
dcmIpgwRtpInFecConfigBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigBoard.setStatus('current')
dcmIpgwRtpInFecConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigPort.setStatus('current')
dcmIpgwRtpInFecConfigRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigRef.setStatus('current')
dcmIpgwRtpInFecConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eDisable", 1), ("e1DMode", 2), ("e2DMode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigMode.setStatus('current')
dcmIpgwRtpInFecConfigColumnIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 6, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigColumnIpAddress.setStatus('current')
dcmIpgwRtpInFecConfigColumnUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigColumnUdpPort.setStatus('current')
dcmIpgwRtpInFecConfigRowIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 6, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigRowIpAddress.setStatus('current')
dcmIpgwRtpInFecConfigRowUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigRowUdpPort.setStatus('current')
dcmIpgwRtpInFecStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7), )
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusTable.setStatus('current')
dcmIpgwRtpInFecStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecStatusBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecStatusPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecStatusRef"))
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusEntry.setStatus('current')
dcmIpgwRtpInFecStatusBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusBoard.setStatus('current')
dcmIpgwRtpInFecStatusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusPort.setStatus('current')
dcmIpgwRtpInFecStatusRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusRef.setStatus('current')
dcmIpgwRtpInFecStatusColumnPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusColumnPresent.setStatus('current')
dcmIpgwRtpInFecStatusRowPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusRowPresent.setStatus('current')
dcmIpgwRtpInFecStatusFecColumnDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusFecColumnDepth.setStatus('current')
dcmIpgwRtpInFecStatusFecRowLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusFecRowLength.setStatus('current')
dcmIpgwRtpInFecStatusColumnOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusColumnOverhead.setStatus('current')
dcmIpgwRtpInFecStatusRowOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusRowOverhead.setStatus('current')
dcmIpgwRtpInFecStatusTotalOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusTotalOverhead.setStatus('current')
dcmIpgwRtpInFecStatusLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusLatency.setStatus('current')
dcmIpgwRtpInHitlessTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 8), )
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessTable.setStatus('current')
dcmIpgwRtpInHitlessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 8, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInHitlessBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInHitlessPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInHitlessRef"))
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessEntry.setStatus('current')
dcmIpgwRtpInHitlessBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessBoard.setStatus('current')
dcmIpgwRtpInHitlessPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessPort.setStatus('current')
dcmIpgwRtpInHitlessRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessRef.setStatus('current')
dcmIpgwRtpInHitlessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessMode.setStatus('current')
dcmIpgwRtpInHitlessWindowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 8, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessWindowPackets.setStatus('current')
dcmIpgwRtpInHitlessDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessDelay.setStatus('current')
dcmIpgwRtpOut = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4))
dcmIpgwRtpOutTSTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1), )
if mibBuilder.loadTexts: dcmIpgwRtpOutTSTable.setStatus('current')
dcmIpgwRtpOutTSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSRef"))
if mibBuilder.loadTexts: dcmIpgwRtpOutTSEntry.setStatus('current')
dcmIpgwRtpOutTSBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpOutTSBoard.setStatus('current')
dcmIpgwRtpOutTSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpOutTSPort.setStatus('current')
dcmIpgwRtpOutTSRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpOutTSRef.setStatus('current')
dcmIpgwRtpOutTSSrcBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpOutTSSrcBoard.setStatus('current')
dcmIpgwRtpOutTSSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 7), ValueRangeConstraint(101, 106), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpOutTSSrcPort.setStatus('current')
dcmIpgwRtpOutTSSrcRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpOutTSSrcRef.setStatus('current')
dcmIpgwRtpOutTSActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eActive", 1), ("eNotActive", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpOutTSActive.setStatus('current')
dcmIpgwRtpOutTSGbePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePairType", 1), ("eIndividualType", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpOutTSGbePortType.setStatus('current')
dcmIpgwRtpOutTSDestinationIpAddressA = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpOutTSDestinationIpAddressA.setStatus('current')
dcmIpgwRtpOutTSDestinationUdpPortA = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpOutTSDestinationUdpPortA.setStatus('current')
dcmIpgwRtpOutTSDestinationIpAddressB = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpOutTSDestinationIpAddressB.setStatus('current')
dcmIpgwRtpOutTSDestinationUdpPortB = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpOutTSDestinationUdpPortB.setStatus('current')
dcmIpgwRtpOutTSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpOutTSRowStatus.setStatus('current')
dcmIpgwRtpOutJp2kEnableTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 2), )
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kEnableTable.setStatus('current')
dcmIpgwRtpOutJp2kEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 2, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kEnableBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kEnablePort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kEnableRef"))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kEnableEntry.setStatus('current')
dcmIpgwRtpOutJp2kEnableBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kEnableBoard.setStatus('current')
dcmIpgwRtpOutJp2kEnablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kEnablePort.setStatus('current')
dcmIpgwRtpOutJp2kEnableRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kEnableRef.setStatus('current')
dcmIpgwRtpOutJp2kEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eActive", 1), ("eNotActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kEnableState.setStatus('current')
dcmIpgwRtpOutJp2k = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3))
dcmIpgwRtpOutJp2kConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1), )
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigTable.setStatus('current')
dcmIpgwRtpOutJp2kConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigRef"))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigEntry.setStatus('current')
dcmIpgwRtpOutJp2kConfigBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigBoard.setStatus('current')
dcmIpgwRtpOutJp2kConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigPort.setStatus('current')
dcmIpgwRtpOutJp2kConfigRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigRef.setStatus('current')
dcmIpgwRtpOutJp2kConfigVideoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigVideoRate.setStatus('current')
dcmIpgwRtpOutJp2kConfigMaxStreamBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20000000, 900000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigMaxStreamBitRate.setStatus('current')
dcmIpgwRtpOutJp2kConfigChromaWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigChromaWeight.setStatus('current')
dcmIpgwRtpOutJp2kConfigVitcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigVitcEnable.setStatus('current')
dcmIpgwRtpOutJp2kConfigViiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigViiEnable.setStatus('current')
dcmIpgwRtpOutJp2kConfigAfdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigAfdEnable.setStatus('current')
dcmIpgwRtpOutJp2kConfigTeletextBEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigTeletextBEnable.setStatus('current')
dcmIpgwRtpOutJp2kConfigCCEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigCCEnable.setStatus('current')
dcmIpgwRtpOutJp2kConfigVPSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigVPSEnable.setStatus('current')
dcmIpgwRtpOutJp2kConfigTrans625F1Line = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigTrans625F1Line.setStatus('current')
dcmIpgwRtpOutJp2kConfigTrans625F2Line = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigTrans625F2Line.setStatus('current')
dcmIpgwRtpOutJp2kConfigTrans525F1Line = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigTrans525F1Line.setStatus('current')
dcmIpgwRtpOutJp2kConfigTrans525F2Line = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigTrans525F2Line.setStatus('current')
dcmIpgwRtpOutJp2kConfigEncapsulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eNative", 1), ("eSMPTE_2022_1-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigEncapsulationType.setStatus('current')
dcmIpgwRtpOutJp2kAudioTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2), )
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioTable.setStatus('current')
dcmIpgwRtpOutJp2kAudioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioRef"))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioEntry.setStatus('current')
dcmIpgwRtpOutJp2kAudioBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioBoard.setStatus('current')
dcmIpgwRtpOutJp2kAudioPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPort.setStatus('current')
dcmIpgwRtpOutJp2kAudioRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioRef.setStatus('current')
dcmIpgwRtpOutJp2kAudioPair1Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair1Enable.setStatus('current')
dcmIpgwRtpOutJp2kAudioPair1Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair1Present.setStatus('current')
dcmIpgwRtpOutJp2kAudioPair2Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair2Enable.setStatus('current')
dcmIpgwRtpOutJp2kAudioPair2Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair2Present.setStatus('current')
dcmIpgwRtpOutJp2kAudioPair3Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair3Enable.setStatus('current')
dcmIpgwRtpOutJp2kAudioPair3Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair3Present.setStatus('current')
dcmIpgwRtpOutJp2kAudioPair4Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair4Enable.setStatus('current')
dcmIpgwRtpOutJp2kAudioPair4Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair4Present.setStatus('current')
dcmIpgwRtpOutJp2kAudioPair5Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair5Enable.setStatus('current')
dcmIpgwRtpOutJp2kAudioPair5Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair5Present.setStatus('current')
dcmIpgwRtpOutJp2kAudioPair6Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair6Enable.setStatus('current')
dcmIpgwRtpOutJp2kAudioPair6Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair6Present.setStatus('current')
dcmIpgwRtpOutJp2kAudioPair7Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair7Enable.setStatus('current')
dcmIpgwRtpOutJp2kAudioPair7Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair7Present.setStatus('current')
dcmIpgwRtpOutJp2kAudioPair8Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair8Enable.setStatus('current')
dcmIpgwRtpOutJp2kAudioPair8Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair8Present.setStatus('current')
dcmIpgwRtpOutAdvancedTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4), )
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedTable.setStatus('current')
dcmIpgwRtpOutAdvancedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutAdvancedBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutAdvancedPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutAdvancedRef"))
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedEntry.setStatus('current')
dcmIpgwRtpOutAdvancedBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedBoard.setStatus('current')
dcmIpgwRtpOutAdvancedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedPort.setStatus('current')
dcmIpgwRtpOutAdvancedRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedRef.setStatus('current')
dcmIpgwRtpOutAdvancedVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eVlanOn", 1), ("eVlanOff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedVlanEnable.setStatus('current')
dcmIpgwRtpOutAdvancedVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedVlanId.setStatus('current')
dcmIpgwRtpOutAdvancedVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedVlanPriority.setStatus('current')
dcmIpgwRtpOutAdvancedTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedTtl.setStatus('current')
dcmIpgwRtpOutAdvancedTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedTos.setStatus('current')
dcmIpgwRtpOutAdvancedUseSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eUsePortIp", 1), ("eUseSourceIp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedUseSourceAddress.setStatus('current')
dcmIpgwRtpOutAdvancedSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedSourceIpAddress.setStatus('current')
dcmIpgwRtpOutAdvancedSourceUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedSourceUdpPort.setStatus('current')
dcmIpgwRtpOutFecTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5), )
if mibBuilder.loadTexts: dcmIpgwRtpOutFecTable.setStatus('current')
dcmIpgwRtpOutFecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecRef"))
if mibBuilder.loadTexts: dcmIpgwRtpOutFecEntry.setStatus('current')
dcmIpgwRtpOutFecBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpOutFecBoard.setStatus('current')
dcmIpgwRtpOutFecPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpOutFecPort.setStatus('current')
dcmIpgwRtpOutFecRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpOutFecRef.setStatus('current')
dcmIpgwRtpOutFecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eDisable", 1), ("e1DMode", 2), ("e2DMode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecMode.setStatus('current')
dcmIpgwRtpOutFecSendingArrangement = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eProMpegCop3AnnexB", 1), ("eProMpegCop3AnnexA", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecSendingArrangement.setStatus('current')
dcmIpgwRtpOutFecRowLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecRowLength.setStatus('current')
dcmIpgwRtpOutFecColumnDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecColumnDepth.setStatus('current')
dcmIpgwRtpOutFecDestinationColIpAddressA = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationColIpAddressA.setStatus('current')
dcmIpgwRtpOutFecDestinationColUdpPortA = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationColUdpPortA.setStatus('current')
dcmIpgwRtpOutFecDestinationRowIpAddressA = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationRowIpAddressA.setStatus('current')
dcmIpgwRtpOutFecDestinationRowUdpPortA = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationRowUdpPortA.setStatus('current')
dcmIpgwRtpOutFecDestinationColIpAddressB = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationColIpAddressB.setStatus('current')
dcmIpgwRtpOutFecDestinationColUdpPortB = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationColUdpPortB.setStatus('current')
dcmIpgwRtpOutFecDestinationRowIpAddressB = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationRowIpAddressB.setStatus('current')
dcmIpgwRtpOutFecDestinationRowUdpPortB = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationRowUdpPortB.setStatus('current')
dcmIpgwRtpOutFecOverheadTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 6), )
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadTable.setStatus('current')
dcmIpgwRtpOutFecOverheadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 6, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecOverheadBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecOverheadPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecOverheadRef"))
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadEntry.setStatus('current')
dcmIpgwRtpOutFecOverheadBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadBoard.setStatus('current')
dcmIpgwRtpOutFecOverheadPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadPort.setStatus('current')
dcmIpgwRtpOutFecOverheadRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadRef.setStatus('current')
dcmIpgwRtpOutFecOverheadColumn = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadColumn.setStatus('current')
dcmIpgwRtpOutFecOverheadRow = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadRow.setStatus('current')
dcmIpgwRtpOutFecOverheadTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadTotal.setStatus('current')
dcmIpgwAsiIn = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5))
dcmIpgwAsiInConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 1), )
if mibBuilder.loadTexts: dcmIpgwAsiInConfigTable.setStatus('current')
dcmIpgwAsiInConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiInConfigBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiInConfigPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiInConfigRef"))
if mibBuilder.loadTexts: dcmIpgwAsiInConfigEntry.setStatus('current')
dcmIpgwAsiInConfigBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwAsiInConfigBoard.setStatus('current')
dcmIpgwAsiInConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)))
if mibBuilder.loadTexts: dcmIpgwAsiInConfigPort.setStatus('current')
dcmIpgwAsiInConfigRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwAsiInConfigRef.setStatus('current')
dcmIpgwAsiInConfigMaxAllowedVideoFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eSD", 1), ("eHD", 2), ("e3G", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwAsiInConfigMaxAllowedVideoFormat.setStatus('current')
dcmIpgwAsiInConfigUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwAsiInConfigUserName.setStatus('current')
dcmIpgwAsiInConfigVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwAsiInConfigVideoOffset.setStatus('current')
dcmIpgwAsiInFormatTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 2), )
if mibBuilder.loadTexts: dcmIpgwAsiInFormatTable.setStatus('current')
dcmIpgwAsiInFormatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 2, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiInFormatBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiInFormatPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiInFormatRef"))
if mibBuilder.loadTexts: dcmIpgwAsiInFormatEntry.setStatus('current')
dcmIpgwAsiInFormatBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwAsiInFormatBoard.setStatus('current')
dcmIpgwAsiInFormatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)))
if mibBuilder.loadTexts: dcmIpgwAsiInFormatPort.setStatus('current')
dcmIpgwAsiInFormatRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwAsiInFormatRef.setStatus('current')
dcmIpgwAsiInFormatFramerate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("e24fps", 1), ("e25fps", 2), ("e30fps", 3), ("e50fps", 4), ("e60fps", 5), ("e2997fps", 6), ("e5994fps", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwAsiInFormatFramerate.setStatus('current')
dcmIpgwAsiInFormatVideoformat = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eSD", 1), ("eHD", 2), ("e3G", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwAsiInFormatVideoformat.setStatus('current')
dcmIpgwAsiInFormatAspectRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("e4n3", 1), ("e16n9", 2), ("e14n9", 3), ("eNotAvailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwAsiInFormatAspectRatio.setStatus('current')
dcmIpgwAsiInFormatNbrOfLinesPerFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwAsiInFormatNbrOfLinesPerFrame.setStatus('current')
dcmIpgwAsiInFormatFrameBuildUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eProgressive", 1), ("eInterlaced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwAsiInFormatFrameBuildUp.setStatus('current')
dcmIpgwAsiInStatisticsCrcTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 3), )
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsCrcTable.setStatus('current')
dcmIpgwAsiInStatisticsCrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 3, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiInStatisticsBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiInStatisticsPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiInStatisticsRef"))
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsCrcEntry.setStatus('current')
dcmIpgwAsiInStatisticsBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsBoard.setStatus('current')
dcmIpgwAsiInStatisticsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)))
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsPort.setStatus('current')
dcmIpgwAsiInStatisticsRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsRef.setStatus('current')
dcmIpgwAsiInStatisticsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("eReset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsReset.setStatus('current')
dcmIpgwAsiInStatisticsCrcErrors1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsCrcErrors1Min.setStatus('current')
dcmIpgwAsiInStatisticsCrcErrors1Hour = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsCrcErrors1Hour.setStatus('current')
dcmIpgwAsiInStatisticsCrcErrors1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsCrcErrors1Day.setStatus('current')
dcmIpgwAsiOut = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6))
dcmIpgwAsiOutTSTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 1), )
if mibBuilder.loadTexts: dcmIpgwAsiOutTSTable.setStatus('current')
dcmIpgwAsiOutTSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiOutTSBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiOutTSPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiOutTSRef"))
if mibBuilder.loadTexts: dcmIpgwAsiOutTSEntry.setStatus('current')
dcmIpgwAsiOutTSBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwAsiOutTSBoard.setStatus('current')
dcmIpgwAsiOutTSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 8)))
if mibBuilder.loadTexts: dcmIpgwAsiOutTSPort.setStatus('current')
dcmIpgwAsiOutTSRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwAsiOutTSRef.setStatus('current')
dcmIpgwAsiOutTSActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eActive", 1), ("eNotActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwAsiOutTSActive.setStatus('current')
dcmIpgwASIOutJp2k = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2))
dcmIpgwASIOutJp2kConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1), )
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigTable.setStatus('current')
dcmIpgwASIOutJp2kConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigRef"))
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigEntry.setStatus('current')
dcmIpgwASIOutJp2kConfigBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigBoard.setStatus('current')
dcmIpgwASIOutJp2kConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 8)))
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigPort.setStatus('current')
dcmIpgwASIOutJp2kConfigRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigRef.setStatus('current')
dcmIpgwASIOutJp2kConfigVideoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigVideoRate.setStatus('current')
dcmIpgwASIOutJp2kConfigMaxStreamBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigMaxStreamBitRate.setStatus('current')
dcmIpgwASIOutJp2kConfigChromaWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigChromaWeight.setStatus('current')
dcmIpgwASIOutJp2kConfigVitcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigVitcEnable.setStatus('current')
dcmIpgwASIOutJp2kConfigViiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigViiEnable.setStatus('current')
dcmIpgwASIOutJp2kConfigAfdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigAfdEnable.setStatus('current')
dcmIpgwASIOutJp2kConfigTeletextBEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigTeletextBEnable.setStatus('current')
dcmIpgwASIOutJp2kConfigCCEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigCCEnable.setStatus('current')
dcmIpgwASIOutJp2kConfigVPSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigVPSEnable.setStatus('current')
dcmIpgwASIOutJp2kConfigTrans625F1Line = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigTrans625F1Line.setStatus('current')
dcmIpgwASIOutJp2kConfigTrans625F2Line = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigTrans625F2Line.setStatus('current')
dcmIpgwASIOutJp2kConfigTrans525F1Line = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigTrans525F1Line.setStatus('current')
dcmIpgwASIOutJp2kConfigTrans525F2Line = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigTrans525F2Line.setStatus('current')
dcmIpgwASIOutJp2kAudioTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2), )
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioTable.setStatus('current')
dcmIpgwASIOutJp2kAudioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioRef"))
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioEntry.setStatus('current')
dcmIpgwASIOutJp2kAudioBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioBoard.setStatus('current')
dcmIpgwASIOutJp2kAudioPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 8)))
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPort.setStatus('current')
dcmIpgwASIOutJp2kAudioRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioRef.setStatus('current')
dcmIpgwASIOutJp2kAudioPair1Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair1Enable.setStatus('current')
dcmIpgwASIOutJp2kAudioPair1Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair1Present.setStatus('current')
dcmIpgwASIOutJp2kAudioPair2Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair2Enable.setStatus('current')
dcmIpgwASIOutJp2kAudioPair2Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair2Present.setStatus('current')
dcmIpgwASIOutJp2kAudioPair3Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair3Enable.setStatus('current')
dcmIpgwASIOutJp2kAudioPair3Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair3Present.setStatus('current')
dcmIpgwASIOutJp2kAudioPair4Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair4Enable.setStatus('current')
dcmIpgwASIOutJp2kAudioPair4Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair4Present.setStatus('current')
dcmIpgwASIOutJp2kAudioPair5Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair5Enable.setStatus('current')
dcmIpgwASIOutJp2kAudioPair5Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair5Present.setStatus('current')
dcmIpgwASIOutJp2kAudioPair6Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair6Enable.setStatus('current')
dcmIpgwASIOutJp2kAudioPair6Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair6Present.setStatus('current')
dcmIpgwASIOutJp2kAudioPair7Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair7Enable.setStatus('current')
dcmIpgwASIOutJp2kAudioPair7Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair7Present.setStatus('current')
dcmIpgwASIOutJp2kAudioPair8Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair8Enable.setStatus('current')
dcmIpgwASIOutJp2kAudioPair8Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair8Present.setStatus('current')
dcmIpgwSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 7))
dcmIpgwSystemGenlockEnableTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 7, 1), )
if mibBuilder.loadTexts: dcmIpgwSystemGenlockEnableTable.setStatus('current')
dcmIpgwSystemGenlockEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 7, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwSystemGenlockEnableBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwSystemGenlockEnablePort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwSystemGenlockEnableRef"))
if mibBuilder.loadTexts: dcmIpgwSystemGenlockEnableEntry.setStatus('current')
dcmIpgwSystemGenlockEnableBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwSystemGenlockEnableBoard.setStatus('current')
dcmIpgwSystemGenlockEnablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwSystemGenlockEnablePort.setStatus('current')
dcmIpgwSystemGenlockEnableRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwSystemGenlockEnableRef.setStatus('current')
dcmIpgwSystemGenlockEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eActive", 1), ("eNotActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwSystemGenlockEnableState.setStatus('current')
dcmMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 2))
dcmPhysVendorType = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 2, 1))
dcmDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 2, 1, 1))
dcmIoBoard = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 2, 1, 2))
dcm100BaseTPort = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 2, 1, 3))
dcmGbePort = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 2, 1, 4))
dcmAsiPort = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 2, 1, 5))
mibBuilder.exportSymbols("SAEUROPE-DCM-MIB", dcmTrServiceConfigTable=dcmTrServiceConfigTable, dcmIpgwASIOutJp2kConfigVideoRate=dcmIpgwASIOutJp2kConfigVideoRate, saEuropeDcmModuleCompliance=saEuropeDcmModuleCompliance, dcmCfgTransparentOutputTsIpAddress=dcmCfgTransparentOutputTsIpAddress, dcmIpgwRtpOutJp2k=dcmIpgwRtpOutJp2k, dcmIpgwSdiInStatisticsCrcErrors1Min=dcmIpgwSdiInStatisticsCrcErrors1Min, dcmProcessingSrvServiceID=dcmProcessingSrvServiceID, dcmServiceBackupByBoardBoard=dcmServiceBackupByBoardBoard, dcmIpgwASIOutJp2kAudioPair1Enable=dcmIpgwASIOutJp2kAudioPair1Enable, dcmIpgwGroup=dcmIpgwGroup, dcmInputServiceTable=dcmInputServiceTable, dcmIpgwRtpInStatisticsMissingPackets=dcmIpgwRtpInStatisticsMissingPackets, dcmIpgwRtpOutJp2kConfigTrans625F2Line=dcmIpgwRtpOutJp2kConfigTrans625F2Line, dcmIpgwRtpOutAdvancedEntry=dcmIpgwRtpOutAdvancedEntry, dcmConfigOutputTsEntry=dcmConfigOutputTsEntry, dcmIpgwRtpInStatisticsCrcErrors1Day=dcmIpgwRtpInStatisticsCrcErrors1Day, dcmIpgwRtpInFecStatusRowPresent=dcmIpgwRtpInFecStatusRowPresent, dcmIpgwASIOutJp2kConfigBoard=dcmIpgwASIOutJp2kConfigBoard, dcmIpgwRtpOutJp2kAudioEntry=dcmIpgwRtpOutJp2kAudioEntry, dcmOutputTsFecRowUdp=dcmOutputTsFecRowUdp, dcmIpgwASIOutJp2kAudioPair7Enable=dcmIpgwASIOutJp2kAudioPair7Enable, dcmIpgwRtpOutJp2kConfigEntry=dcmIpgwRtpOutJp2kConfigEntry, dcmIpgwASIOutJp2kAudioPair7Present=dcmIpgwASIOutJp2kAudioPair7Present, dcmIpgwSdiInFormatNbrOfLinesPerFrame=dcmIpgwSdiInFormatNbrOfLinesPerFrame, dcmGbePortModeTable=dcmGbePortModeTable, dcmCfgOutputTsIndex=dcmCfgOutputTsIndex, dcmIpgwRtpOutJp2kAudioPair1Enable=dcmIpgwRtpOutJp2kAudioPair1Enable, dcmTsBuSettingsBehavior=dcmTsBuSettingsBehavior, dcmIpgwRtpInTSUsername=dcmIpgwRtpInTSUsername, dcmCfgOutputTsUdpPort=dcmCfgOutputTsUdpPort, dcmIpgwRtpOutFecOverheadColumn=dcmIpgwRtpOutFecOverheadColumn, dcmIpgwRtpOutJp2kAudioPair7Enable=dcmIpgwRtpOutJp2kAudioPair7Enable, dcmIpgwASIOutJp2kAudioPair2Present=dcmIpgwASIOutJp2kAudioPair2Present, dcmTrTransportStreamEntry=dcmTrTransportStreamEntry, dcmTrGroupId=dcmTrGroupId, dcmIpgwRtpInStatisticsReorderedPackets=dcmIpgwRtpInStatisticsReorderedPackets, dcmIpgwRtpInFormatBoard=dcmIpgwRtpInFormatBoard, dcmOutputTransportStreamEntry=dcmOutputTransportStreamEntry, dcmIpgwRtpInStatisticsCrcErrors1min=dcmIpgwRtpInStatisticsCrcErrors1min, dcmIpgwASIOutJp2kAudioTable=dcmIpgwASIOutJp2kAudioTable, dcmIpgwSdiOutTSRef=dcmIpgwSdiOutTSRef, dcmIpgwAsiInStatisticsReset=dcmIpgwAsiInStatisticsReset, dcmOutputTsFecSendingArrangement=dcmOutputTsFecSendingArrangement, dcmIpgwSdiOutTSActive=dcmIpgwSdiOutTSActive, dcmMibObjects=dcmMibObjects, dcmIpgwRtpInTSRef=dcmIpgwRtpInTSRef, dcmIpgwASIOutJp2kConfigEntry=dcmIpgwASIOutJp2kConfigEntry, dcmTsAutoPassNewEMMs=dcmTsAutoPassNewEMMs, dcmOutputTsFecColIp=dcmOutputTsFecColIp, dcmServiceBackupByTsEntry=dcmServiceBackupByTsEntry, dcmIpgwRtpOutJp2kAudioBoard=dcmIpgwRtpOutJp2kAudioBoard, dcmCfgTransparentOutputTsIndex=dcmCfgTransparentOutputTsIndex, dcmIpgwRtpOutAdvancedTtl=dcmIpgwRtpOutAdvancedTtl, dcmIpgwRtpInFecStatusRef=dcmIpgwRtpInFecStatusRef, dcmIpgwRtpOutJp2kAudioPair8Enable=dcmIpgwRtpOutJp2kAudioPair8Enable, dcmIpgwAsiInStatisticsPort=dcmIpgwAsiInStatisticsPort, dcmIpgwRtpOutTSSrcPort=dcmIpgwRtpOutTSSrcPort, dcmServiceBackupByBoardEntry=dcmServiceBackupByBoardEntry, dcmTsBuSettingsTsIndex=dcmTsBuSettingsTsIndex, dcmDpiChannelStatus=dcmDpiChannelStatus, dcmIpgwRtpOutFecDestinationColIpAddressA=dcmIpgwRtpOutFecDestinationColIpAddressA, dcmIpgwAsiInFormatBoard=dcmIpgwAsiInFormatBoard, dcmSrvBuSettingsToBackupDelay=dcmSrvBuSettingsToBackupDelay, dcmOutputTsFecTable=dcmOutputTsFecTable, dcmIpgwRtpOutJp2kConfigTeletextBEnable=dcmIpgwRtpOutJp2kConfigTeletextBEnable, dcmInputTsBoard=dcmInputTsBoard, dcmCfgSrvForceOutputServiceID=dcmCfgSrvForceOutputServiceID, dcmIpgwRtpInFecStatusLatency=dcmIpgwRtpInFecStatusLatency, dcmIpgwRtpInTSTable=dcmIpgwRtpInTSTable, dcmIpgwRtpInStatitsticsCrcPort=dcmIpgwRtpInStatitsticsCrcPort, dcmServiceBackupServicesTable=dcmServiceBackupServicesTable, dcmIpgwRtpInFecConfigPort=dcmIpgwRtpInFecConfigPort, dcmTsBuSettingsBuTsIndex=dcmTsBuSettingsBuTsIndex, dcmIpgwRtpOutJp2kConfigEncapsulationType=dcmIpgwRtpOutJp2kConfigEncapsulationType, dcmIpgwRtpOutJp2kAudioPair2Enable=dcmIpgwRtpOutJp2kAudioPair2Enable, dcmIpgwRtpInHitlessEntry=dcmIpgwRtpInHitlessEntry, dcmIpgwRtpInStatisticsFixedPackets=dcmIpgwRtpInStatisticsFixedPackets, dcmServiceBackupByTsTable=dcmServiceBackupByTsTable, dcmOutputTsOriginalNetworkId=dcmOutputTsOriginalNetworkId, dcmConfigTransparentOutputTsTable=dcmConfigTransparentOutputTsTable, dcmIpgwRtpInFormatVideoformat=dcmIpgwRtpInFormatVideoformat, dcmDvbS2InputStreamISI=dcmDvbS2InputStreamISI, dcmIpgwRtpInFecStatusColumnOverhead=dcmIpgwRtpInFecStatusColumnOverhead, dcmProcessingSrvName=dcmProcessingSrvName, dcmIpgwAsiInFormatEntry=dcmIpgwAsiInFormatEntry, dcmIpgwSdiInConfigEntry=dcmIpgwSdiInConfigEntry, dcmIpgwAsiInStatisticsCrcTable=dcmIpgwAsiInStatisticsCrcTable, dcmIpgwSdiInFormatVideoformat=dcmIpgwSdiInFormatVideoformat, dcmInputTsUdpPort=dcmInputTsUdpPort, dcmInputTsPort=dcmInputTsPort, dcmOutputTsPort=dcmOutputTsPort, dcmTrGroupType=dcmTrGroupType, dcmIpgwAsiInStatisticsCrcEntry=dcmIpgwAsiInStatisticsCrcEntry, dcmIpgwRtpInFecStatusFecRowLength=dcmIpgwRtpInFecStatusFecRowLength, dcmIpgwRtpOutAdvancedSourceIpAddress=dcmIpgwRtpOutAdvancedSourceIpAddress, dcmProcessingServiceEntry=dcmProcessingServiceEntry, dcmIpgwASIOutJp2kConfigRef=dcmIpgwASIOutJp2kConfigRef, dcmIpgwASIOutJp2kAudioBoard=dcmIpgwASIOutJp2kAudioBoard, dcmIpgwSdiOut=dcmIpgwSdiOut, dcmIpgwRtpOutJp2kEnableState=dcmIpgwRtpOutJp2kEnableState, dcmConfigAsiInputBandwidthLimitStatus=dcmConfigAsiInputBandwidthLimitStatus, dcmIpgwRtpOutAdvancedTable=dcmIpgwRtpOutAdvancedTable, dcmTsAutoPassNewServices=dcmTsAutoPassNewServices, dcmIpgwRtpOut=dcmIpgwRtpOut, dcmIpgwRtpOutTSRowStatus=dcmIpgwRtpOutTSRowStatus, dcmIpgwRtpInStatisticsValidPackets=dcmIpgwRtpInStatisticsValidPackets, dcmIpgwRtpOutFecPort=dcmIpgwRtpOutFecPort, dcmIpgwRtpOutFecMode=dcmIpgwRtpOutFecMode, dcmIpgwAsiInConfigVideoOffset=dcmIpgwAsiInConfigVideoOffset, dcmIpgwAsiInStatisticsBoard=dcmIpgwAsiInStatisticsBoard, dcmIpgwASIOutJp2kAudioPair3Present=dcmIpgwASIOutJp2kAudioPair3Present, dcmIpgwRtpOutFecRowLength=dcmIpgwRtpOutFecRowLength, dcmTrSrvRowStatus=dcmTrSrvRowStatus, dcmTsBackupSettingsTable=dcmTsBackupSettingsTable, dcmConfigAsiInputBandwidthLimitBitrate=dcmConfigAsiInputBandwidthLimitBitrate, dcmIpgwAsiIn=dcmIpgwAsiIn, dcmDpiPrimaryChannelMode=dcmDpiPrimaryChannelMode, dcmIpgwRtpOutFecOverheadTable=dcmIpgwRtpOutFecOverheadTable, dcmIpgwAsiOutTSPort=dcmIpgwAsiOutTSPort, dcmIpgwRtpInFecConfigRef=dcmIpgwRtpInFecConfigRef, dcmConfigAsiInputBandwidthLimitTable=dcmConfigAsiInputBandwidthLimitTable, dcmTsAutoPassUnreferencedPIDs=dcmTsAutoPassUnreferencedPIDs, dcmIpgwAsiOutTSActive=dcmIpgwAsiOutTSActive, dcmIpgwSdiInConfigBoard=dcmIpgwSdiInConfigBoard, dcmIpgwRtpInStatisticsDuplicatePackets=dcmIpgwRtpInStatisticsDuplicatePackets, dcmIpgwRtpOutJp2kEnableBoard=dcmIpgwRtpOutJp2kEnableBoard, dcmIpgwRtpOutAdvancedBoard=dcmIpgwRtpOutAdvancedBoard, dcmOutputTsIpAddress=dcmOutputTsIpAddress, saEuropeDcmModule=saEuropeDcmModule, dcmSettings=dcmSettings, dcmIpgwAsiInStatisticsCrcErrors1Min=dcmIpgwAsiInStatisticsCrcErrors1Min, dcmOutputTsFecMode=dcmOutputTsFecMode, dcmCfgSrvOutputServiceID=dcmCfgSrvOutputServiceID, dcmIpgwSdiInFormatRef=dcmIpgwSdiInFormatRef, dcmIpgwRtpInFormatTable=dcmIpgwRtpInFormatTable, dcmOutputTsFecRowL=dcmOutputTsFecRowL, dcmIpgwRtpInTSRowStatus=dcmIpgwRtpInTSRowStatus, dcmIpgwAsiInFormatNbrOfLinesPerFrame=dcmIpgwAsiInFormatNbrOfLinesPerFrame, dcmTsAutoPassRowStatus=dcmTsAutoPassRowStatus, dcmSrvBuSettingsState=dcmSrvBuSettingsState, dcmInputSrvState=dcmInputSrvState, dcmIpgwRtpInStatisticsEntry=dcmIpgwRtpInStatisticsEntry, dcmOutputTsUdpPort=dcmOutputTsUdpPort, dcmIpgwRtpOutFecTable=dcmIpgwRtpOutFecTable, dcmCfgOutputTsStandard=dcmCfgOutputTsStandard, dcmIpgwRtpOutTSPort=dcmIpgwRtpOutTSPort, dcmIpgwRtpOutJp2kAudioPair5Present=dcmIpgwRtpOutJp2kAudioPair5Present, dcmIpgwAsiInStatisticsCrcErrors1Day=dcmIpgwAsiInStatisticsCrcErrors1Day, dcmIpgwSystemGenlockEnableBoard=dcmIpgwSystemGenlockEnableBoard, dcmIpgwRtpOutTSDestinationUdpPortB=dcmIpgwRtpOutTSDestinationUdpPortB, dcmIpgwAsiInFormatTable=dcmIpgwAsiInFormatTable, dcmIpgwRtpOutJp2kAudioPort=dcmIpgwRtpOutJp2kAudioPort, dcmSrvBuBuSrvState=dcmSrvBuBuSrvState, dcmDvbS2InputStreamTsIndex=dcmDvbS2InputStreamTsIndex, dcmCfgSrvInputServiceID=dcmCfgSrvInputServiceID, dcmIpgwSettings=dcmIpgwSettings, dcmTrGroupBoardNumber=dcmTrGroupBoardNumber, dcmDpiInputTsIndex=dcmDpiInputTsIndex, dcmIpgwRtpInFormatNbrOfLinesPerFrame=dcmIpgwRtpInFormatNbrOfLinesPerFrame, dcmCfgInputTsPort=dcmCfgInputTsPort, dcmTrSrvUpperLimitServiceBitRate=dcmTrSrvUpperLimitServiceBitRate, dcmCfgOutputTsPort=dcmCfgOutputTsPort, dcmIpgwSdiIn=dcmIpgwSdiIn, dcmTrGroupTable=dcmTrGroupTable, dcmIpgwRtpOutTSGbePortType=dcmIpgwRtpOutTSGbePortType, dcmIpgwRtpOutFecDestinationRowIpAddressB=dcmIpgwRtpOutFecDestinationRowIpAddressB, dcmServiceBackupSettingsTable=dcmServiceBackupSettingsTable, dcmIpgwRtpInStatisticsCrcErrors1Hour=dcmIpgwRtpInStatisticsCrcErrors1Hour, dcmIpgwASIOutJp2kAudioPair6Present=dcmIpgwASIOutJp2kAudioPair6Present, dcmTsBackup=dcmTsBackup, dcmIpgwRtpOutJp2kConfigPort=dcmIpgwRtpOutJp2kConfigPort, dcmTrGroupOutputTs=dcmTrGroupOutputTs, dcmAsiSettings=dcmAsiSettings, dcmIpgwRtpInJp2kEnableRef=dcmIpgwRtpInJp2kEnableRef, dcmIpgwAsiOutTSEntry=dcmIpgwAsiOutTSEntry, dcmIpgwRtpInStatisticsPort=dcmIpgwRtpInStatisticsPort, dcmIpgwRtpOutJp2kConfigMaxStreamBitRate=dcmIpgwRtpOutJp2kConfigMaxStreamBitRate, dcmAsiPort=dcmAsiPort, dcmIpgwRtpOutJp2kAudioPair3Present=dcmIpgwRtpOutJp2kAudioPair3Present, dcmIpgwASIOutJp2kAudioPair6Enable=dcmIpgwASIOutJp2kAudioPair6Enable, dcmIpgwAsiInStatisticsCrcErrors1Hour=dcmIpgwAsiInStatisticsCrcErrors1Hour, dcmIpgwASIOutJp2kConfigTeletextBEnable=dcmIpgwASIOutJp2kConfigTeletextBEnable, dcmCfgInputTsIndex=dcmCfgInputTsIndex, dcmOutputTsTransportStreamBitRate=dcmOutputTsTransportStreamBitRate, dcmIpgwASIOutJp2kConfigAfdEnable=dcmIpgwASIOutJp2kConfigAfdEnable, dcmServiceBackupServicesEntry=dcmServiceBackupServicesEntry, dcmIpgwRtpInFecConfigColumnUdpPort=dcmIpgwRtpInFecConfigColumnUdpPort, dcmProcessingSrvState=dcmProcessingSrvState, dcmIpgwRtpOutJp2kConfigAfdEnable=dcmIpgwRtpOutJp2kConfigAfdEnable, dcmIpgwRtpInJp2kEnableState=dcmIpgwRtpInJp2kEnableState, dcmIpgwAsiInFormatPort=dcmIpgwAsiInFormatPort, dcmIpgwRtpOutTSEntry=dcmIpgwRtpOutTSEntry, dcmIpgwSystemGenlockEnableTable=dcmIpgwSystemGenlockEnableTable, dcmIpgwRtpOutJp2kConfigVitcEnable=dcmIpgwRtpOutJp2kConfigVitcEnable, dcmIpgwRtpOutFecDestinationRowUdpPortB=dcmIpgwRtpOutFecDestinationRowUdpPortB, dcmIpgwRtpOutAdvancedRef=dcmIpgwRtpOutAdvancedRef, dcmIpgwRtpOutFecOverheadRef=dcmIpgwRtpOutFecOverheadRef, dcmTrSrvLowerLimitServiceBitRate=dcmTrSrvLowerLimitServiceBitRate, dcmConfigAsiInputBandwidthLimitPort=dcmConfigAsiInputBandwidthLimitPort, dcmIpgwRtpInFecStatusFecColumnDepth=dcmIpgwRtpInFecStatusFecColumnDepth, dcmDpiChannelTable=dcmDpiChannelTable, dcmTrTsRowStatus=dcmTrTsRowStatus, dcmIpgwRtpInHitlessTable=dcmIpgwRtpInHitlessTable, dcmIpgwRtpInTSDejitter=dcmIpgwRtpInTSDejitter, dcmIpgwRtpInFecConfigEntry=dcmIpgwRtpInFecConfigEntry, dcmDpiChannelEntry=dcmDpiChannelEntry, dcmIpgwRtpOutTSDestinationIpAddressB=dcmIpgwRtpOutTSDestinationIpAddressB, dcmIpgwSystem=dcmIpgwSystem, dcmCfgSrvInputTsIndex=dcmCfgSrvInputTsIndex, dcmIpgwRtpOutTSSrcRef=dcmIpgwRtpOutTSSrcRef, dcmIpgwRtpOutFecDestinationColUdpPortB=dcmIpgwRtpOutFecDestinationColUdpPortB, dcmIpgwASIOutJp2kConfigVitcEnable=dcmIpgwASIOutJp2kConfigVitcEnable, dcmIpgwASIOutJp2kConfigTable=dcmIpgwASIOutJp2kConfigTable, dcmCfgSrvState=dcmCfgSrvState, dcmDpiRowStatus=dcmDpiRowStatus, dcmIpgwRtpOutJp2kEnableRef=dcmIpgwRtpOutJp2kEnableRef, dcmIpgwASIOutJp2kAudioPair2Enable=dcmIpgwASIOutJp2kAudioPair2Enable, dcmIpgwSdiInConfigPort=dcmIpgwSdiInConfigPort, dcmCfgInputTsState=dcmCfgInputTsState, dcmIpgwSdiInFormatFrameBuildUp=dcmIpgwSdiInFormatFrameBuildUp, dcmIpgwRtpOutJp2kConfigBoard=dcmIpgwRtpOutJp2kConfigBoard, dcmIpgwRtpOutFecOverheadRow=dcmIpgwRtpOutFecOverheadRow, dcmIpgwASIOutJp2k=dcmIpgwASIOutJp2k, dcmCfgInputTsBoard=dcmCfgInputTsBoard, dcmIpgwSdiInStatisticsCrcTable=dcmIpgwSdiInStatisticsCrcTable, dcmIpgwAsiOutTSTable=dcmIpgwAsiOutTSTable, dcmIpgwRtpOutFecOverheadBoard=dcmIpgwRtpOutFecOverheadBoard, dcmIpgwRtpOutJp2kAudioRef=dcmIpgwRtpOutJp2kAudioRef, dcmIpgwRtpInTSUdpPort=dcmIpgwRtpInTSUdpPort, dcmIpgwRtpInStatisticsRef=dcmIpgwRtpInStatisticsRef, dcmIpgwRtpInHitlessRef=dcmIpgwRtpInHitlessRef, dcmTrTsOutputTsIndex=dcmTrTsOutputTsIndex, dcmIpgwRtpInStatisticsOutOfRangePackets=dcmIpgwRtpInStatisticsOutOfRangePackets, dcmIpgwRtpOutTSDestinationIpAddressA=dcmIpgwRtpOutTSDestinationIpAddressA, dcmIpgwASIOutJp2kAudioPair8Enable=dcmIpgwASIOutJp2kAudioPair8Enable, dcmTrSettings=dcmTrSettings, dcmInputTransportStreamEntry=dcmInputTransportStreamEntry, dcmCfgTransparentOutputTsActive=dcmCfgTransparentOutputTsActive, dcmMibGroups=dcmMibGroups, dcmDpiInputServiceId=dcmDpiInputServiceId, dcmIpgwRtpOutJp2kAudioPair1Present=dcmIpgwRtpOutJp2kAudioPair1Present, dcmTsBuSettingsToBackupDelay=dcmTsBuSettingsToBackupDelay, dcmIpgwSdiInFormatTable=dcmIpgwSdiInFormatTable, dcmServiceBackup=dcmServiceBackup, dcmIpgwAsiInConfigBoard=dcmIpgwAsiInConfigBoard, dcmIpgwRtpInTSEntry=dcmIpgwRtpInTSEntry, dcmIpgwRtpOutTSSrcBoard=dcmIpgwRtpOutTSSrcBoard, dcmIpgwRtpInJp2kEnablePort=dcmIpgwRtpInJp2kEnablePort, dcmTsAutoPassTable=dcmTsAutoPassTable, dcmTrGroupPortNumber=dcmTrGroupPortNumber, dcmOutputTransportStreamTable=dcmOutputTransportStreamTable, dcmIpgwSdiInStatisticsCrcErrors1Day=dcmIpgwSdiInStatisticsCrcErrors1Day, dcmIpgwSdiInStatisticsCrcErrors1Hour=dcmIpgwSdiInStatisticsCrcErrors1Hour, dcmIpgwASIOutJp2kAudioPair3Enable=dcmIpgwASIOutJp2kAudioPair3Enable)
mibBuilder.exportSymbols("SAEUROPE-DCM-MIB", dcmInputSrvName=dcmInputSrvName, dcmIpgwAsiInConfigEntry=dcmIpgwAsiInConfigEntry, dcmIpgwSdiInStatisticsCrcEntry=dcmIpgwSdiInStatisticsCrcEntry, dcmIpgwRtpOutAdvancedVlanId=dcmIpgwRtpOutAdvancedVlanId, dcmIpgwRtpOutAdvancedPort=dcmIpgwRtpOutAdvancedPort, dcmIpgwRtpInJp2kEnableEntry=dcmIpgwRtpInJp2kEnableEntry, dcmIpgwRtpInStatitsticsCrcRef=dcmIpgwRtpInStatitsticsCrcRef, dcmPhysVendorType=dcmPhysVendorType, dcmIpgwRtpOutAdvancedVlanEnable=dcmIpgwRtpOutAdvancedVlanEnable, dcmIpgwRtpOutFecOverheadEntry=dcmIpgwRtpOutFecOverheadEntry, dcmTrSrvGroupId=dcmTrSrvGroupId, dcmTrSrvOutputServiceID=dcmTrSrvOutputServiceID, dcmCfgTransparentOutputTsUdpPort=dcmCfgTransparentOutputTsUdpPort, dcmIpgwAsiInConfigRef=dcmIpgwAsiInConfigRef, dcmGbePortModeMode=dcmGbePortModeMode, dcmServiceBackupByTsTsIndex=dcmServiceBackupByTsTsIndex, dcmIpgwSdiOutTSBoard=dcmIpgwSdiOutTSBoard, dcmIpgwASIOutJp2kAudioRef=dcmIpgwASIOutJp2kAudioRef, dcmGbePort=dcmGbePort, dcmIpgwSystemGenlockEnableRef=dcmIpgwSystemGenlockEnableRef, dcmOutputTsBoard=dcmOutputTsBoard, dcmTsBuSettingsToMainDelay=dcmTsBuSettingsToMainDelay, dcmDeviceBackupSettings=dcmDeviceBackupSettings, dcmIpgwRtpOutJp2kEnableTable=dcmIpgwRtpOutJp2kEnableTable, dcmCfgSrvOutputServiceName=dcmCfgSrvOutputServiceName, dcmCfgTransparentOutputTsRowStatus=dcmCfgTransparentOutputTsRowStatus, dcmServiceBackupByBoardTable=dcmServiceBackupByBoardTable, dcmIpgwRtpOutFecRef=dcmIpgwRtpOutFecRef, dcmSrvBuSettingsServiceID=dcmSrvBuSettingsServiceID, dcmIpgwSdiInStatisticsPort=dcmIpgwSdiInStatisticsPort, dcmIpgwRtpOutAdvancedUseSourceAddress=dcmIpgwRtpOutAdvancedUseSourceAddress, dcmInputSrvServiceID=dcmInputSrvServiceID, dcmIpgwRtpOutJp2kConfigTrans525F2Line=dcmIpgwRtpOutJp2kConfigTrans525F2Line, dcmIoBoard=dcmIoBoard, dcmSrvBuRowStatus=dcmSrvBuRowStatus, dcmSrvBuSettingsBehavior=dcmSrvBuSettingsBehavior, dcmIpgwRtpInStatitsticsCrcBoard=dcmIpgwRtpInStatitsticsCrcBoard, dcm100BaseTPort=dcm100BaseTPort, dcmIpgwRtpInTSIpAddress=dcmIpgwRtpInTSIpAddress, dcmTsBackupSettingsEntry=dcmTsBackupSettingsEntry, dcmIpgwRtpInFecStatusBoard=dcmIpgwRtpInFecStatusBoard, dcmSrvBuSettingsToMainDelay=dcmSrvBuSettingsToMainDelay, dcmIpgwRtpOutJp2kConfigCCEnable=dcmIpgwRtpOutJp2kConfigCCEnable, dcmIpgwAsiInFormatFrameBuildUp=dcmIpgwAsiInFormatFrameBuildUp, dcmIpgwASIOutJp2kAudioPort=dcmIpgwASIOutJp2kAudioPort, dcmCfgOutputTsRowStatus=dcmCfgOutputTsRowStatus, dcmTrServiceConfigEntry=dcmTrServiceConfigEntry, dcmIpgwRtpOutJp2kAudioPair3Enable=dcmIpgwRtpOutJp2kAudioPair3Enable, dcmIpgwRtpOutFecDestinationColIpAddressB=dcmIpgwRtpOutFecDestinationColIpAddressB, dcmIpgwRtpInFecStatusRowOverhead=dcmIpgwRtpInFecStatusRowOverhead, dcmIpgwSdiInFormatAspectRatio=dcmIpgwSdiInFormatAspectRatio, dcmIpgwRtpInStatitsticsCrcTable=dcmIpgwRtpInStatitsticsCrcTable, dcmIpgwASIOutJp2kConfigCCEnable=dcmIpgwASIOutJp2kConfigCCEnable, dcmIpgwRtpInFecConfigRowIpAddress=dcmIpgwRtpInFecConfigRowIpAddress, dcmIpgwRtpInHitlessBoard=dcmIpgwRtpInHitlessBoard, dcmIpgwRtpOutJp2kEnableEntry=dcmIpgwRtpOutJp2kEnableEntry, dcmIpgwRtpOutJp2kAudioPair4Present=dcmIpgwRtpOutJp2kAudioPair4Present, dcmTrSrvTypeForService=dcmTrSrvTypeForService, dcmIpgwSdiInFormatFramerate=dcmIpgwSdiInFormatFramerate, dcmGbePortModeBoardNumber=dcmGbePortModeBoardNumber, dcmIpgwSdiOutTSEntry=dcmIpgwSdiOutTSEntry, dcmIpgwRtpOutJp2kEnablePort=dcmIpgwRtpOutJp2kEnablePort, dcmIpgwRtpOutJp2kAudioPair8Present=dcmIpgwRtpOutJp2kAudioPair8Present, dcmCfgSrvOutputTsIndex=dcmCfgSrvOutputTsIndex, dcmSrvBuOutputSrvServiceID=dcmSrvBuOutputSrvServiceID, dcmInputTsIndex=dcmInputTsIndex, dcmIpgwRtpInTSVideoOffset=dcmIpgwRtpInTSVideoOffset, dcmIpgwASIOutJp2kAudioPair4Present=dcmIpgwASIOutJp2kAudioPair4Present, dcmIpgwAsiInConfigMaxAllowedVideoFormat=dcmIpgwAsiInConfigMaxAllowedVideoFormat, dcmIpgwASIOutJp2kConfigChromaWeight=dcmIpgwASIOutJp2kConfigChromaWeight, dcmConfigInputTsTable=dcmConfigInputTsTable, dcmIpgwAsiInConfigPort=dcmIpgwAsiInConfigPort, dcmIpgwRtpInFecConfigColumnIpAddress=dcmIpgwRtpInFecConfigColumnIpAddress, dcmIpgwASIOutJp2kConfigVPSEnable=dcmIpgwASIOutJp2kConfigVPSEnable, dcmIpgwASIOutJp2kConfigPort=dcmIpgwASIOutJp2kConfigPort, dcmCfgOutputTsActive=dcmCfgOutputTsActive, dcmServiceBackupSettingsEntry=dcmServiceBackupSettingsEntry, dcmIpgwSdiInConfigRef=dcmIpgwSdiInConfigRef, dcmOutputTsStandard=dcmOutputTsStandard, dcmDpiManualTrigger=dcmDpiManualTrigger, dcmIpgwAsiInConfigTable=dcmIpgwAsiInConfigTable, dcmIpgwSdiOutTSTable=dcmIpgwSdiOutTSTable, dcmIpgwRtpIn=dcmIpgwRtpIn, dcmProcessingServiceTable=dcmProcessingServiceTable, dcmCfgOutputTsIpAddress=dcmCfgOutputTsIpAddress, dcmIpgwSdiInStatisticsReset=dcmIpgwSdiInStatisticsReset, dcmIpgwSdiInFormatPort=dcmIpgwSdiInFormatPort, dcmIpgwSdiInFormatBoard=dcmIpgwSdiInFormatBoard, dcmCfgInputTsRowStatus=dcmCfgInputTsRowStatus, dcmCfgSrvForceOutputServiceName=dcmCfgSrvForceOutputServiceName, dcmGbeSettings=dcmGbeSettings, dcmIpgwASIOutJp2kConfigMaxStreamBitRate=dcmIpgwASIOutJp2kConfigMaxStreamBitRate, dcmIpgwAsiInFormatFramerate=dcmIpgwAsiInFormatFramerate, dcmIpgwRtpOutAdvancedTos=dcmIpgwRtpOutAdvancedTos, dcmIpgwASIOutJp2kAudioPair8Present=dcmIpgwASIOutJp2kAudioPair8Present, dcmSrvBuBuSrvTsIndex=dcmSrvBuBuSrvTsIndex, PYSNMP_MODULE_ID=saEuropeDcmModule, dcmIpgwAsiOutTSBoard=dcmIpgwAsiOutTSBoard, dcmIpgwRtpInFormatPort=dcmIpgwRtpInFormatPort, dcmIpgwASIOutJp2kConfigTrans625F1Line=dcmIpgwASIOutJp2kConfigTrans625F1Line, dcmIpgwAsiInConfigUserName=dcmIpgwAsiInConfigUserName, dcmIpgwRtpOutJp2kConfigTrans525F1Line=dcmIpgwRtpOutJp2kConfigTrans525F1Line, dcmIpgwRtpOutJp2kConfigVPSEnable=dcmIpgwRtpOutJp2kConfigVPSEnable, dcmServiceBackupByTsStatus=dcmServiceBackupByTsStatus, dcmIpgwRtpInFecStatusEntry=dcmIpgwRtpInFecStatusEntry, dcmCfgTransparentOutputTsBoard=dcmCfgTransparentOutputTsBoard, dcmIpgwRtpInFecConfigBoard=dcmIpgwRtpInFecConfigBoard, dcmIpgwSdiOutTSSrcBoard=dcmIpgwSdiOutTSSrcBoard, dcmIpgwRtpOutJp2kConfigRef=dcmIpgwRtpOutJp2kConfigRef, dcmIpgwRtpOutTSRef=dcmIpgwRtpOutTSRef, dcmTrSrvOutputTsIndex=dcmTrSrvOutputTsIndex, dcmCfgInputTsSrcIpAddress=dcmCfgInputTsSrcIpAddress, dcmOutputTsTransportStreamId=dcmOutputTsTransportStreamId, dcmConfigServiceTable=dcmConfigServiceTable, dcmIpgwSdiInConfigTable=dcmIpgwSdiInConfigTable, dcmConfigAsiInputBandwidthLimitEntry=dcmConfigAsiInputBandwidthLimitEntry, dcmIpgwASIOutJp2kAudioPair5Enable=dcmIpgwASIOutJp2kAudioPair5Enable, dcmCfgOutputTsOriginalNetworkId=dcmCfgOutputTsOriginalNetworkId, dcmIpgwSystemGenlockEnableState=dcmIpgwSystemGenlockEnableState, dcmTrGroupEntry=dcmTrGroupEntry, dcmIpgwRtpInFecConfigTable=dcmIpgwRtpInFecConfigTable, dcmIpgwSystemGenlockEnablePort=dcmIpgwSystemGenlockEnablePort, dcmIpgwRtpInFormatFrameBuildUp=dcmIpgwRtpInFormatFrameBuildUp, dcmIpgwRtpInHitlessWindowPackets=dcmIpgwRtpInHitlessWindowPackets, dcmIpgwSdiInConfigMaxAllowedVideoFormat=dcmIpgwSdiInConfigMaxAllowedVideoFormat, dcmOutputTsFecColUdp=dcmOutputTsFecColUdp, dcmInputTsIpAddress=dcmInputTsIpAddress, dcmIpgwRtpOutJp2kAudioPair6Present=dcmIpgwRtpOutJp2kAudioPair6Present, dcmIpgwRtpOutTSDestinationUdpPortA=dcmIpgwRtpOutTSDestinationUdpPortA, dcmCfgOutputTsTransportStreamBitRate=dcmCfgOutputTsTransportStreamBitRate, dcmServiceBackupByBoardStatus=dcmServiceBackupByBoardStatus, dcmIpgwRtpOutJp2kAudioTable=dcmIpgwRtpOutJp2kAudioTable, dcmConfigTransparentOutputTsEntry=dcmConfigTransparentOutputTsEntry, dcmIpgwRtpOutTSActive=dcmIpgwRtpOutTSActive, dcmIpgwRtpInJp2kEnableTable=dcmIpgwRtpInJp2kEnableTable, dcmTrTransportStreamTable=dcmTrTransportStreamTable, dcmIpgwSdiInStatisticsBoard=dcmIpgwSdiInStatisticsBoard, dcmConfigAsiInputBandwidthLimitBoard=dcmConfigAsiInputBandwidthLimitBoard, dcmCfgOutputTsTransportStreamId=dcmCfgOutputTsTransportStreamId, dcmIpgwRtpInHitlessPort=dcmIpgwRtpInHitlessPort, dcmOutputTsFecRowIp=dcmOutputTsFecRowIp, dcmIpgwASIOutJp2kAudioPair1Present=dcmIpgwASIOutJp2kAudioPair1Present, dcmIpgwASIOutJp2kAudioEntry=dcmIpgwASIOutJp2kAudioEntry, dcmIpgwASIOutJp2kConfigViiEnable=dcmIpgwASIOutJp2kConfigViiEnable, dcmCfgTransparentSourceTsIndex=dcmCfgTransparentSourceTsIndex, dcmIpgwASIOutJp2kConfigTrans525F1Line=dcmIpgwASIOutJp2kConfigTrans525F1Line, dcmIpgwRtpInFecConfigMode=dcmIpgwRtpInFecConfigMode, dcmIpgwRtpOutFecDestinationColUdpPortA=dcmIpgwRtpOutFecDestinationColUdpPortA, dcmIpgwASIOutJp2kConfigTrans525F2Line=dcmIpgwASIOutJp2kConfigTrans525F2Line, dcmIpgwRtpOutAdvancedVlanPriority=dcmIpgwRtpOutAdvancedVlanPriority, dcmInputTransportStreamTable=dcmInputTransportStreamTable, dcmIpgwSdiOutTSSrcRef=dcmIpgwSdiOutTSSrcRef, dcmIpgwSystemGenlockEnableEntry=dcmIpgwSystemGenlockEnableEntry, dcmIpgwRtpInFormatRef=dcmIpgwRtpInFormatRef, dcmCfgSrvRowStatus=dcmCfgSrvRowStatus, dcmIpgwRtpOutFecEntry=dcmIpgwRtpOutFecEntry, dcmIpgwRtpOutJp2kAudioPair5Enable=dcmIpgwRtpOutJp2kAudioPair5Enable, dcmIpgwRtpOutJp2kAudioPair7Present=dcmIpgwRtpOutJp2kAudioPair7Present, dcmOutputTsActive=dcmOutputTsActive, dcmTsBuSettingsState=dcmTsBuSettingsState, dcmTrTsGroupId=dcmTrTsGroupId, dcmIpgwASIOutJp2kAudioPair5Present=dcmIpgwASIOutJp2kAudioPair5Present, dcmIpgwAsiOutTSRef=dcmIpgwAsiOutTSRef, dcmIpgwSdiOutTSSrcPort=dcmIpgwSdiOutTSSrcPort, dcmIpgwAsiInFormatRef=dcmIpgwAsiInFormatRef, dcmIpgwRtpInFecStatusPort=dcmIpgwRtpInFecStatusPort, dcmIpgwAsiOut=dcmIpgwAsiOut, dcmIpgwRtpInStatisticsTable=dcmIpgwRtpInStatisticsTable, dcmIpgwRtpInFecStatusTotalOverhead=dcmIpgwRtpInFecStatusTotalOverhead, dcmIpgwRtpOutTSTable=dcmIpgwRtpOutTSTable, dcmIpgwRtpOutJp2kConfigTrans625F1Line=dcmIpgwRtpOutJp2kConfigTrans625F1Line, dcmSrvBuBuSrvServiceID=dcmSrvBuBuSrvServiceID, dcmIpgwRtpOutFecDestinationRowIpAddressA=dcmIpgwRtpOutFecDestinationRowIpAddressA, dcmInputSrvTsIndex=dcmInputSrvTsIndex, dcmCfgInputTsIpAddress=dcmCfgInputTsIpAddress, dcmIpgwRtpInFormatFramerate=dcmIpgwRtpInFormatFramerate, dcmInputServiceEntry=dcmInputServiceEntry, dcmIpgwRtpOutJp2kConfigChromaWeight=dcmIpgwRtpOutJp2kConfigChromaWeight, dcmIpgwRtpOutJp2kConfigTable=dcmIpgwRtpOutJp2kConfigTable, dcmOptionalGroup=dcmOptionalGroup, dcmDvbS2InputStreamEntry=dcmDvbS2InputStreamEntry, dcmIpgwRtpOutFecOverheadPort=dcmIpgwRtpOutFecOverheadPort, dcmCfgTransparentOutputTsPort=dcmCfgTransparentOutputTsPort, dcmTrSrvPriority=dcmTrSrvPriority, dcmIpgwRtpOutJp2kConfigVideoRate=dcmIpgwRtpOutJp2kConfigVideoRate, dcmIpgwRtpInFecStatusColumnPresent=dcmIpgwRtpInFecStatusColumnPresent, dcmIpgwASIOutJp2kAudioPair4Enable=dcmIpgwASIOutJp2kAudioPair4Enable, dcmSrvBuSettingsTsIndex=dcmSrvBuSettingsTsIndex, dcmOutputTsFecEntry=dcmOutputTsFecEntry, dcmIpgwRtpInStatisticsBoard=dcmIpgwRtpInStatisticsBoard, dcmTsAutoPassEntry=dcmTsAutoPassEntry, dcmIpgwRtpOutTSBoard=dcmIpgwRtpOutTSBoard, dcmIpgwSdiInStatisticsRef=dcmIpgwSdiInStatisticsRef, dcmIpgwRtpOutJp2kAudioPair6Enable=dcmIpgwRtpOutJp2kAudioPair6Enable, dcmIpgwSdiInConfigUserName=dcmIpgwSdiInConfigUserName, dcmProcessingSrvTsIndex=dcmProcessingSrvTsIndex, dcmIpgwRtpInStatisticsReset=dcmIpgwRtpInStatisticsReset, dcmMIB=dcmMIB, dcmInputTsSrcIpAddress=dcmInputTsSrcIpAddress, dcmIpgwRtpOutFecBoard=dcmIpgwRtpOutFecBoard, dcmIpgwAsiInFormatVideoformat=dcmIpgwAsiInFormatVideoformat, dcmIpgwRtpInTSMaxAllowedVideoFormat=dcmIpgwRtpInTSMaxAllowedVideoFormat, dcmTsBuSettingsRowStatus=dcmTsBuSettingsRowStatus, dcmIpgwRtpInHitlessMode=dcmIpgwRtpInHitlessMode, dcmIpgwAsiInFormatAspectRatio=dcmIpgwAsiInFormatAspectRatio, dcmIpgwRtpOutAdvancedSourceUdpPort=dcmIpgwRtpOutAdvancedSourceUdpPort, dcmIpgwRtpInFormatEntry=dcmIpgwRtpInFormatEntry, dcmSrvBuOutputSrvTsIndex=dcmSrvBuOutputSrvTsIndex, dcmIpgwRtpOutFecDestinationRowUdpPortA=dcmIpgwRtpOutFecDestinationRowUdpPortA, dcmIpgwRtpOutJp2kAudioPair4Enable=dcmIpgwRtpOutJp2kAudioPair4Enable, dcmConfigInputTsEntry=dcmConfigInputTsEntry, dcmTrGroupRowStatus=dcmTrGroupRowStatus, dcmIpgwRtpInFecStatusTable=dcmIpgwRtpInFecStatusTable, dcmIpgwSdiOutTSPort=dcmIpgwSdiOutTSPort, dcmConfigOutputTsTable=dcmConfigOutputTsTable, dcmConfigServiceEntry=dcmConfigServiceEntry, dcmIpgwSdiInFormatEntry=dcmIpgwSdiInFormatEntry, dcmMuxSettings=dcmMuxSettings, dcmOutputTsIndex=dcmOutputTsIndex, dcmIpgwRtpOutJp2kAudioPair2Present=dcmIpgwRtpOutJp2kAudioPair2Present, dcmIpgwRtpInStatitsticsCrcEntry=dcmIpgwRtpInStatitsticsCrcEntry, dcmIpgwAsiInStatisticsRef=dcmIpgwAsiInStatisticsRef, dcmOutputTsFecColD=dcmOutputTsFecColD, dcmDeviceSettings=dcmDeviceSettings, dcmDevice=dcmDevice, dcmIpgwRtpInFormatAspectRatio=dcmIpgwRtpInFormatAspectRatio, dcmIpgwRtpOutFecSendingArrangement=dcmIpgwRtpOutFecSendingArrangement, dcmIpgwRtpOutFecColumnDepth=dcmIpgwRtpOutFecColumnDepth, dcmDpiPrimaryChannelName=dcmDpiPrimaryChannelName, dcmCfgOutputTsBoard=dcmCfgOutputTsBoard, dcmIpgwRtpInTsBoard=dcmIpgwRtpInTsBoard, dcmIpgwRtpInTSPort=dcmIpgwRtpInTSPort, dcmIpgwRtpInHitlessDelay=dcmIpgwRtpInHitlessDelay, dcmDeviceBackupActivateDevice=dcmDeviceBackupActivateDevice, dcmCfgInputTsUdpPort=dcmCfgInputTsUdpPort, dcmIpgwASIOutJp2kConfigTrans625F2Line=dcmIpgwASIOutJp2kConfigTrans625F2Line, dcmIpgwRtpInStatisticsCrcReset=dcmIpgwRtpInStatisticsCrcReset, dcmMandatoryGroup=dcmMandatoryGroup, dcmIpgwRtpOutFecOverheadTotal=dcmIpgwRtpOutFecOverheadTotal, dcmIpgwRtpOutJp2kConfigViiEnable=dcmIpgwRtpOutJp2kConfigViiEnable, dcmIpgwRtpInJp2kEnableBoard=dcmIpgwRtpInJp2kEnableBoard, dcmDvbS2InputStreamTable=dcmDvbS2InputStreamTable, dcmDpiSettings=dcmDpiSettings, dcmTrGroupBitRate=dcmTrGroupBitRate, dcmGbePortModeEntry=dcmGbePortModeEntry, dcmIpgwRtpInFecConfigRowUdpPort=dcmIpgwRtpInFecConfigRowUdpPort)
