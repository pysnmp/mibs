#
# PySNMP MIB module EQLINTERNAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/equallogic/EQLINTERNAL-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 12:02:15 2024
# On host fv-az888-540 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
UTFString, = mibBuilder.importSymbols("EQLGROUP-MIB", "UTFString")
equalLogic, = mibBuilder.importSymbols("EQUALLOGIC-SMI", "equalLogic")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter64, iso, NotificationType, MibIdentifier, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, ObjectIdentity, ModuleIdentity, enterprises, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "iso", "NotificationType", "MibIdentifier", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "enterprises", "Counter32", "Bits")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
eqlInternalModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 12740, 27))
eqlInternalModule.setRevisions(('2013-01-28 00:00',))
if mibBuilder.loadTexts: eqlInternalModule.setLastUpdated('201503171528Z')
if mibBuilder.loadTexts: eqlInternalModule.setOrganization('Dell Inc.')
eqlInternalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 27, 1))
eqlMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 27, 1, 1), )
if mibBuilder.loadTexts: eqlMonitorTable.setStatus('current')
eqlMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 27, 1, 1, 1), ).setIndexNames((0, "EQLINTERNAL-MIB", "eqlMonitorIndex"))
if mibBuilder.loadTexts: eqlMonitorEntry.setStatus('current')
eqlMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 27, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlMonitorIndex.setStatus('current')
eqlMonitorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 27, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMonitorRowStatus.setStatus('current')
eqlMonitorUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 27, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMonitorUUID.setStatus('current')
eqlMonitorServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 27, 1, 1, 1, 4), UTFString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMonitorServerName.setStatus('current')
eqlMonitorDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 27, 1, 1, 1, 5), UTFString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMonitorDomainName.setStatus('current')
eqlMonitorInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 27, 1, 1, 1, 6), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMonitorInetAddressType.setStatus('current')
eqlMonitorInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 27, 1, 1, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMonitorInetAddress.setStatus('current')
eqlMonitorSupportAssist = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 27, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("supportAssistNone", 0), ("supportAssistInstalledNotEnabled", 1), ("supportAssistEnabled", 2), ("supportAssistCommunicatingWithDell", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMonitorSupportAssist.setStatus('current')
eqlMonitorTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 27, 1, 1, 1, 9), Counter32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMonitorTimestamp.setStatus('current')
eqlMonitorSupportAssistTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 27, 1, 1, 1, 10), Counter32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMonitorSupportAssistTimestamp.setStatus('current')
eqlMonitorLicensingTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 27, 1, 1, 1, 11), Counter32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMonitorLicensingTimestamp.setStatus('current')
eqlMonitorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 27, 1, 1, 1, 12), UTFString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMonitorDescription.setStatus('current')
eqlMonitorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 27, 1, 2), )
if mibBuilder.loadTexts: eqlMonitorStatusTable.setStatus('current')
eqlMonitorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 27, 1, 2, 1), ).setIndexNames((0, "EQLINTERNAL-MIB", "eqlMonitorIndex"))
if mibBuilder.loadTexts: eqlMonitorStatusEntry.setStatus('current')
eqlMonitorStatusReminder = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 27, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("monitoringExpired", 0), ("monitoringCurrent", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMonitorStatusReminder.setStatus('current')
mibBuilder.exportSymbols("EQLINTERNAL-MIB", PYSNMP_MODULE_ID=eqlInternalModule, eqlInternalModule=eqlInternalModule, eqlMonitorTimestamp=eqlMonitorTimestamp, eqlMonitorTable=eqlMonitorTable, eqlMonitorSupportAssistTimestamp=eqlMonitorSupportAssistTimestamp, eqlInternalObjects=eqlInternalObjects, eqlMonitorSupportAssist=eqlMonitorSupportAssist, eqlMonitorLicensingTimestamp=eqlMonitorLicensingTimestamp, eqlMonitorStatusTable=eqlMonitorStatusTable, eqlMonitorStatusEntry=eqlMonitorStatusEntry, eqlMonitorIndex=eqlMonitorIndex, eqlMonitorInetAddressType=eqlMonitorInetAddressType, eqlMonitorServerName=eqlMonitorServerName, eqlMonitorInetAddress=eqlMonitorInetAddress, eqlMonitorUUID=eqlMonitorUUID, eqlMonitorStatusReminder=eqlMonitorStatusReminder, eqlMonitorEntry=eqlMonitorEntry, eqlMonitorDomainName=eqlMonitorDomainName, eqlMonitorRowStatus=eqlMonitorRowStatus, eqlMonitorDescription=eqlMonitorDescription)
