#
# PySNMP MIB module BWS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/barracuda/BWS-MIB
# Produced by pysmi-1.1.12 at Fri Jul 19 09:33:10 2024
# On host fv-az1110-714 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
barracuda, = mibBuilder.importSymbols("BARRACUDA-REF", "barracuda")
InetPortNumber, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddressType", "InetAddress")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Gauge32, ModuleIdentity, MibIdentifier, Bits, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, iso, NotificationType, Counter64, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "MibIdentifier", "Bits", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "iso", "NotificationType", "Counter64", "ObjectIdentity", "Integer32")
TimeStamp, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "TextualConvention")
bws = ModuleIdentity((1, 3, 6, 1, 4, 1, 20632, 8))
bws.setRevisions(('2019-02-12 12:00',))
if mibBuilder.loadTexts: bws.setLastUpdated('201902121200Z')
if mibBuilder.loadTexts: bws.setOrganization('Barracuda Networks, Inc.')
bwstraps = MibIdentifier((1, 3, 6, 1, 4, 1, 20632, 8, 1))
bwsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 20632, 8, 50))
bwsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 20632, 8, 51))
bwsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 20632, 8, 51, 1))
bwsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 20632, 8, 51, 2))
totalApplications = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalApplications.setStatus('current')
totalServers = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalServers.setStatus('current')
totalAttacks = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalAttacks.setStatus('current')
activeApplications = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeApplications.setStatus('current')
activeServers = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeServers.setStatus('current')
bwsMessage = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 7), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bwsMessage.setStatus('current')
systemLoad = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemLoad.setStatus('current')
cpuFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFanSpeed.setStatus('current')
systemFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFanSpeed.setStatus('current')
cpuTemperature = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTemperature.setStatus('current')
firmwareStorage = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareStorage.setStatus('current')
logStorage = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logStorage.setStatus('current')
highAvailabilityStatus = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: highAvailabilityStatus.setStatus('current')
operationalMode = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalMode.setStatus('current')
dataPathStatus = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPathStatus.setStatus('current')
linkStatus = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatus.setStatus('current')
vipStatus = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vipStatus.setStatus('current')
memUtilization = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memUtilization.setStatus('current')
cpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilization.setStatus('current')
totalBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBandwidth.setStatus('current')
uptime = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uptime.setStatus('current')
totalMem = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalMem.setStatus('current')
freeMem = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeMem.setStatus('current')
currentFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentFirmwareVersion.setStatus('current')
virusDefUpdates = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virusDefUpdates.setStatus('current')
securityDefUpdates = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityDefUpdates.setStatus('current')
systemSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSerialNumber.setStatus('current')
bwsHttpProxyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1), )
if mibBuilder.loadTexts: bwsHttpProxyStatsTable.setStatus('current')
bwsHttpProxyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1), ).setIndexNames((0, "BWS-MIB", "httpProxyAddressType"), (0, "BWS-MIB", "httpProxyAddress"), (0, "BWS-MIB", "httpProxyPort"))
if mibBuilder.loadTexts: bwsHttpProxyStatsEntry.setStatus('current')
httpProxyAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: httpProxyAddressType.setStatus('current')
httpProxyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: httpProxyAddress.setStatus('current')
httpProxyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: httpProxyPort.setStatus('current')
httpProxyActiveConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyActiveConn.setStatus('current')
httpProxyTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyTotalConn.setStatus('current')
httpProxyTotalReq = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyTotalReq.setStatus('current')
httpProxyServerReq = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyServerReq.setStatus('current')
httpProxyServerErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyServerErr.setStatus('current')
httpProxyClientAbrt = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyClientAbrt.setStatus('current')
httpProxyServerAbrt = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyServerAbrt.setStatus('current')
httpProxySessionTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxySessionTimeOut.setStatus('current')
httpProxyParseErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyParseErr.setStatus('current')
httpProxyUnknownRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyUnknownRsp.setStatus('current')
httpProxyInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyInBytes.setStatus('current')
httpProxyOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyOutBytes.setStatus('current')
httpProxyWAFBlockedIntrusions = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyWAFBlockedIntrusions.setStatus('current')
httpProxyWAFMonitoredIntrusions = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyWAFMonitoredIntrusions.setStatus('current')
httpProxyWAFWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyWAFWarnings.setStatus('current')
bwsSslProxyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2), )
if mibBuilder.loadTexts: bwsSslProxyStatsTable.setStatus('current')
bwsSslProxyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1), ).setIndexNames((0, "BWS-MIB", "sslProxyAddressType"), (0, "BWS-MIB", "sslProxyAddress"), (0, "BWS-MIB", "sslProxyPort"))
if mibBuilder.loadTexts: bwsSslProxyStatsEntry.setStatus('current')
sslProxyAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: sslProxyAddressType.setStatus('current')
sslProxyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: sslProxyAddress.setStatus('current')
sslProxyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: sslProxyPort.setStatus('current')
sslProxyActiveConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyActiveConn.setStatus('current')
sslProxyFullHandshakes = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyFullHandshakes.setStatus('current')
sslProxyResumptionHandshakes = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyResumptionHandshakes.setStatus('current')
sslProxyHandshakeAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyHandshakeAttempts.setStatus('current')
sslProxyCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyCacheHits.setStatus('current')
sslProxyCacheMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyCacheMiss.setStatus('current')
sslProxyCacheTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyCacheTimeouts.setStatus('current')
sslProxyErrPms = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyErrPms.setStatus('current')
sslProxyAuthBadCertErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyAuthBadCertErr.setStatus('current')
sslProxyAuthBadCNErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyAuthBadCNErr.setStatus('current')
sslProxyBadDNCErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyBadDNCErr.setStatus('current')
sslProxyBadCRLErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyBadCRLErr.setStatus('current')
sslProxyInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyInBytes.setStatus('current')
sslProxyOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyOutBytes.setStatus('current')
sslProxyTotalReq = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyTotalReq.setStatus('current')
sslProxyTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyTotalConn.setStatus('current')
sslProxyCurrentConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyCurrentConn.setStatus('current')
bwsCompressionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 3), )
if mibBuilder.loadTexts: bwsCompressionStatsTable.setStatus('current')
bwsCompressionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 3, 1), ).setIndexNames((0, "BWS-MIB", "webCmprProtocol"), (0, "BWS-MIB", "webCmprAddressType"), (0, "BWS-MIB", "webCmprAddress"), (0, "BWS-MIB", "webCmprPort"))
if mibBuilder.loadTexts: bwsCompressionStatsEntry.setStatus('current')
webCmprProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: webCmprProtocol.setStatus('current')
webCmprAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 3, 1, 2), InetAddressType())
if mibBuilder.loadTexts: webCmprAddressType.setStatus('current')
webCmprAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 3, 1, 3), InetAddress())
if mibBuilder.loadTexts: webCmprAddress.setStatus('current')
webCmprPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 3, 1, 4), InetPortNumber())
if mibBuilder.loadTexts: webCmprPort.setStatus('current')
webCmprNoOfReqCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCmprNoOfReqCompressed.setStatus('current')
webCmprCompressibleDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCmprCompressibleDataSize.setStatus('current')
webCmprCompressedDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCmprCompressedDataSize.setStatus('current')
bwsCacheStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4), )
if mibBuilder.loadTexts: bwsCacheStatsTable.setStatus('current')
bwsCacheStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1), ).setIndexNames((0, "BWS-MIB", "webCacheProtocol"), (0, "BWS-MIB", "webCacheAddressType"), (0, "BWS-MIB", "webCacheAddress"), (0, "BWS-MIB", "webCachePort"))
if mibBuilder.loadTexts: bwsCacheStatsEntry.setStatus('current')
webCacheProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: webCacheProtocol.setStatus('current')
webCacheAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 2), InetAddressType())
if mibBuilder.loadTexts: webCacheAddressType.setStatus('current')
webCacheAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 3), InetAddress())
if mibBuilder.loadTexts: webCacheAddress.setStatus('current')
webCachePort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 4), InetPortNumber())
if mibBuilder.loadTexts: webCachePort.setStatus('current')
webCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheHits.setStatus('current')
webCacheMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheMiss.setStatus('current')
webCacheStale = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheStale.setStatus('current')
webCacheCacheableRes = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheCacheableRes.setStatus('current')
webCacheReq = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheReq.setStatus('current')
webCacheCachedObjects = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheCachedObjects.setStatus('current')
webCacheLongHdrs = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheLongHdrs.setStatus('current')
webCacheBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheBytesOut.setStatus('current')
bwsHttpSrvrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5), )
if mibBuilder.loadTexts: bwsHttpSrvrStatsTable.setStatus('current')
bwsHttpSrvrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1), ).setIndexNames((0, "BWS-MIB", "httpSrvrSrvcAddressType"), (0, "BWS-MIB", "httpSrvrSrvcAddress"), (0, "BWS-MIB", "httpSrvrSrvcPort"), (0, "BWS-MIB", "httpSrvrAddressType"), (0, "BWS-MIB", "httpSrvrAddress"), (0, "BWS-MIB", "httpSrvrPort"))
if mibBuilder.loadTexts: bwsHttpSrvrStatsEntry.setStatus('current')
httpSrvrSrvcAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: httpSrvrSrvcAddressType.setStatus('current')
httpSrvrSrvcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 2), InetAddress())
if mibBuilder.loadTexts: httpSrvrSrvcAddress.setStatus('current')
httpSrvrSrvcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: httpSrvrSrvcPort.setStatus('current')
httpSrvrAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 4), InetAddressType())
if mibBuilder.loadTexts: httpSrvrAddressType.setStatus('current')
httpSrvrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 5), InetAddress())
if mibBuilder.loadTexts: httpSrvrAddress.setStatus('current')
httpSrvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 6), InetPortNumber())
if mibBuilder.loadTexts: httpSrvrPort.setStatus('current')
httpSrvrTotReqAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrTotReqAccepted.setStatus('current')
httpSrvrTotReqActive = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrTotReqActive.setStatus('current')
httpSrvrTotReqRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrTotReqRejected.setStatus('current')
httpSrvrTotSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrTotSuccess.setStatus('current')
httpSrvrTotRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrTotRefused.setStatus('current')
httpSrvrTotTimedout = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrTotTimedout.setStatus('current')
httpSrvrAvgReqPerConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrAvgReqPerConn.setStatus('current')
httpSrvrTotResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrTotResponse.setStatus('current')
httpSrvrAvgResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrAvgResTime.setStatus('current')
httpSrvrMaxResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrMaxResTime.setStatus('current')
httpSrvrMinResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrMinResTime.setStatus('current')
httpSrvrNumReqEnqueue = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrNumReqEnqueue.setStatus('current')
httpSrvrNumFreeConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrNumFreeConn.setStatus('current')
httpSrvrNumOpeningConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrNumOpeningConn.setStatus('current')
httpSrvrNumConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrNumConn.setStatus('current')
httpSrvrNumIBDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrNumIBDisabled.setStatus('current')
httpSrvrNumOOBDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrNumOOBDisabled.setStatus('current')
httpSrvrNumOOBEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrNumOOBEnabled.setStatus('current')
httpSrvrLastDisabledTime = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 25), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrLastDisabledTime.setStatus('current')
httpSrvrState = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrState.setStatus('current')
httpSrvrInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrInBytes.setStatus('current')
httpSrvrOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrOutBytes.setStatus('current')
bwsSslSrvrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6), )
if mibBuilder.loadTexts: bwsSslSrvrStatsTable.setStatus('current')
bwsSslSrvrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1), ).setIndexNames((0, "BWS-MIB", "sslSrvrSrvcAddressType"), (0, "BWS-MIB", "sslSrvrSrvcAddress"), (0, "BWS-MIB", "sslSrvrSrvcPort"), (0, "BWS-MIB", "sslSrvrAddressType"), (0, "BWS-MIB", "sslSrvrAddress"), (0, "BWS-MIB", "sslSrvrPort"))
if mibBuilder.loadTexts: bwsSslSrvrStatsEntry.setStatus('current')
sslSrvrSrvcAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 1), InetAddressType())
if mibBuilder.loadTexts: sslSrvrSrvcAddressType.setStatus('current')
sslSrvrSrvcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 2), InetAddress())
if mibBuilder.loadTexts: sslSrvrSrvcAddress.setStatus('current')
sslSrvrSrvcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: sslSrvrSrvcPort.setStatus('current')
sslSrvrAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 4), InetAddressType())
if mibBuilder.loadTexts: sslSrvrAddressType.setStatus('current')
sslSrvrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 5), InetAddress())
if mibBuilder.loadTexts: sslSrvrAddress.setStatus('current')
sslSrvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 6), InetPortNumber())
if mibBuilder.loadTexts: sslSrvrPort.setStatus('current')
sslSrvrTotReqAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrTotReqAccepted.setStatus('current')
sslSrvrTotReqActive = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrTotReqActive.setStatus('current')
sslSrvrTotReqRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrTotReqRejected.setStatus('current')
sslSrvrTotSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrTotSuccess.setStatus('current')
sslSrvrTotRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrTotRefused.setStatus('current')
sslSrvrTotTimedout = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrTotTimedout.setStatus('current')
sslSrvrAvgReqPerConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrAvgReqPerConn.setStatus('current')
sslSrvrTotResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrTotResponse.setStatus('current')
sslSrvrAvgResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrAvgResTime.setStatus('current')
sslSrvrMaxResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrMaxResTime.setStatus('current')
sslSrvrMinResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrMinResTime.setStatus('current')
sslSrvrNumReqEnqueue = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrNumReqEnqueue.setStatus('current')
sslSrvrNumFreeConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrNumFreeConn.setStatus('current')
sslSrvrNumOpeningConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrNumOpeningConn.setStatus('current')
sslSrvrNumConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrNumConn.setStatus('current')
sslSrvrNumIBDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrNumIBDisabled.setStatus('current')
sslSrvrNumOOBDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrNumOOBDisabled.setStatus('current')
sslSrvrNumOOBEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrNumOOBEnabled.setStatus('current')
sslSrvrLastDisabledTime = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 25), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrLastDisabledTime.setStatus('current')
sslSrvrState = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrState.setStatus('current')
sslSrvrInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrInBytes.setStatus('current')
sslSrvrOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrOutBytes.setStatus('current')
bwsIpsReqSrvcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 7), )
if mibBuilder.loadTexts: bwsIpsReqSrvcStatsTable.setStatus('current')
bwsIpsReqSrvcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 7, 1), ).setIndexNames((0, "BWS-MIB", "ipsReqSrvcAddressType"), (0, "BWS-MIB", "ipsReqSrvcAddress"), (0, "BWS-MIB", "ipsReqSrvcPort"))
if mibBuilder.loadTexts: bwsIpsReqSrvcStatsEntry.setStatus('current')
ipsReqSrvcAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 7, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipsReqSrvcAddressType.setStatus('current')
ipsReqSrvcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 7, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipsReqSrvcAddress.setStatus('current')
ipsReqSrvcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 7, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: ipsReqSrvcPort.setStatus('current')
ipsReqSrvcNoOfUrlProfMatched = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsReqSrvcNoOfUrlProfMatched.setStatus('current')
ipsReqSrvcNoOfAppProfViol = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsReqSrvcNoOfAppProfViol.setStatus('current')
ipsReqSrvcTotProfViol = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 7, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsReqSrvcTotProfViol.setStatus('current')
bwsIpsLrnSrvcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8), )
if mibBuilder.loadTexts: bwsIpsLrnSrvcStatsTable.setStatus('current')
bwsIpsLrnSrvcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1), ).setIndexNames((0, "BWS-MIB", "ipsLrnSrvcAddressType"), (0, "BWS-MIB", "ipsLrnSrvcAddress"), (0, "BWS-MIB", "ipsLrnSrvcPort"))
if mibBuilder.loadTexts: bwsIpsLrnSrvcStatsEntry.setStatus('current')
ipsLrnSrvcAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipsLrnSrvcAddressType.setStatus('current')
ipsLrnSrvcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipsLrnSrvcAddress.setStatus('current')
ipsLrnSrvcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: ipsLrnSrvcPort.setStatus('current')
ipsLrnSrvcUpdatesByReq = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsLrnSrvcUpdatesByReq.setStatus('current')
ipsLrnSrvcUpdatesByRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsLrnSrvcUpdatesByRsp.setStatus('current')
ipsLrnSrvcTotUpdatesByReq = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsLrnSrvcTotUpdatesByReq.setStatus('current')
ipsLrnSrvcTotUpdatesByRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsLrnSrvcTotUpdatesByRsp.setStatus('current')
ipsLrnSrvcTotUrlUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsLrnSrvcTotUrlUpdated.setStatus('current')
ipsLrnSrvcTotParamsLearned = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsLrnSrvcTotParamsLearned.setStatus('current')
ipsLrnSrvcTimeLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsLrnSrvcTimeLastUpdated.setStatus('current')
ipsLrnSrvcTimeLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsLrnSrvcTimeLocked.setStatus('current')
bwsIpsReqLimitStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9), )
if mibBuilder.loadTexts: bwsIpsReqLimitStatsTable.setStatus('current')
bwsIpsReqLimitStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1), ).setIndexNames((0, "BWS-MIB", "ipsReqLimitAddressType"), (0, "BWS-MIB", "ipsReqLimitAddress"), (0, "BWS-MIB", "ipsReqLimitPort"))
if mibBuilder.loadTexts: bwsIpsReqLimitStatsEntry.setStatus('current')
ipsReqLimitAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipsReqLimitAddressType.setStatus('current')
ipsReqLimitAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipsReqLimitAddress.setStatus('current')
ipsReqLimitPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: ipsReqLimitPort.setStatus('current')
ipsReqLimitUrlLenOFErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsReqLimitUrlLenOFErr.setStatus('current')
ipsReqLimitQueryLenOFErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsReqLimitQueryLenOFErr.setStatus('current')
ipsReqLimitReqLenOFErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsReqLimitReqLenOFErr.setStatus('current')
ipsReqLimitCookieLenOFErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsReqLimitCookieLenOFErr.setStatus('current')
ipsReqLimitHdrCntOFErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsReqLimitHdrCntOFErr.setStatus('current')
ipsReqLimitHdrLenOFErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsReqLimitHdrLenOFErr.setStatus('current')
ipsReqLimitContentLenErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsReqLimitContentLenErr.setStatus('current')
ipsReqLimitBlkdMethodErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsReqLimitBlkdMethodErr.setStatus('current')
bwsIpsUrlNormStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 10), )
if mibBuilder.loadTexts: bwsIpsUrlNormStatsTable.setStatus('current')
bwsIpsUrlNormStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 10, 1), ).setIndexNames((0, "BWS-MIB", "ipsUrlNormAddressType"), (0, "BWS-MIB", "ipsUrlNormAddress"), (0, "BWS-MIB", "ipsUrlNormPort"))
if mibBuilder.loadTexts: bwsIpsUrlNormStatsEntry.setStatus('current')
ipsUrlNormAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 10, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipsUrlNormAddressType.setStatus('current')
ipsUrlNormAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 10, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipsUrlNormAddress.setStatus('current')
ipsUrlNormPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 10, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: ipsUrlNormPort.setStatus('current')
ipsUrlNormEncodingErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlNormEncodingErr.setStatus('current')
ipsUrlNormSlashDotInUrlErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlNormSlashDotInUrlErr.setStatus('current')
ipsUrlNormTildaInUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlNormTildaInUrl.setStatus('current')
ipsUrlNormCharSetEncodingErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlNormCharSetEncodingErr.setStatus('current')
bwsIpsCookieSecStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11), )
if mibBuilder.loadTexts: bwsIpsCookieSecStatsTable.setStatus('current')
bwsIpsCookieSecStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11, 1), ).setIndexNames((0, "BWS-MIB", "ipsCookieSecAddressType"), (0, "BWS-MIB", "ipsCookieSecAddress"), (0, "BWS-MIB", "ipsCookieSecPort"))
if mibBuilder.loadTexts: bwsIpsCookieSecStatsEntry.setStatus('current')
ipsCookieSecAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipsCookieSecAddressType.setStatus('current')
ipsCookieSecAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipsCookieSecAddress.setStatus('current')
ipsCookieSecPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: ipsCookieSecPort.setStatus('current')
ipsCookieSecEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsCookieSecEncrypted.setStatus('current')
ipsCookieSecTampered = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsCookieSecTampered.setStatus('current')
ipsCookieSecNumCookieAllow = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsCookieSecNumCookieAllow.setStatus('current')
ipsCookieSecNumCookieSet = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsCookieSecNumCookieSet.setStatus('current')
ipsCookieSecNumCookieErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsCookieSecNumCookieErr.setStatus('current')
ipsCookieSecCookieDecErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsCookieSecCookieDecErr.setStatus('current')
ipsCookieSecCookieDecrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsCookieSecCookieDecrypted.setStatus('current')
bwsIpsUrlAclStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 12), )
if mibBuilder.loadTexts: bwsIpsUrlAclStatsTable.setStatus('current')
bwsIpsUrlAclStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 12, 1), ).setIndexNames((0, "BWS-MIB", "ipsUrlAclAddressType"), (0, "BWS-MIB", "ipsUrlAclAddress"), (0, "BWS-MIB", "ipsUrlAclPort"))
if mibBuilder.loadTexts: bwsIpsUrlAclStatsEntry.setStatus('current')
ipsUrlAclAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 12, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipsUrlAclAddressType.setStatus('current')
ipsUrlAclAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 12, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipsUrlAclAddress.setStatus('current')
ipsUrlAclPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 12, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: ipsUrlAclPort.setStatus('current')
ipsUrlAclProcessAclHits = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlAclProcessAclHits.setStatus('current')
ipsUrlAclPolicyHits = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlAclPolicyHits.setStatus('current')
ipsUrlAclTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 12, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlAclTimeStamp.setStatus('current')
ipsUrlAclReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 12, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlAclReserved.setStatus('current')
ipsUrlAclAllowAclHits = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlAclAllowAclHits.setStatus('current')
bwsIpsHdrAclStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 13), )
if mibBuilder.loadTexts: bwsIpsHdrAclStatsTable.setStatus('current')
bwsIpsHdrAclStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 13, 1), ).setIndexNames((0, "BWS-MIB", "ipsHdrAclAddressType"), (0, "BWS-MIB", "ipsHdrAclAddress"), (0, "BWS-MIB", "ipsHdrAclPort"))
if mibBuilder.loadTexts: bwsIpsHdrAclStatsEntry.setStatus('current')
ipsHdrAclAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 13, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipsHdrAclAddressType.setStatus('current')
ipsHdrAclAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 13, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipsHdrAclAddress.setStatus('current')
ipsHdrAclPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 13, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: ipsHdrAclPort.setStatus('current')
ipsHdrAclHits = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsHdrAclHits.setStatus('current')
ipsHdrAclTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 13, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsHdrAclTimeStamp.setStatus('current')
bwsIpsWebAddrTransStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14), )
if mibBuilder.loadTexts: bwsIpsWebAddrTransStatsTable.setStatus('current')
bwsIpsWebAddrTransStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14, 1), ).setIndexNames((0, "BWS-MIB", "ipsWebAddrTransAddressType"), (0, "BWS-MIB", "ipsWebAddrTransAddress"), (0, "BWS-MIB", "ipsWebAddrTransPort"))
if mibBuilder.loadTexts: bwsIpsWebAddrTransStatsEntry.setStatus('current')
ipsWebAddrTransAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipsWebAddrTransAddressType.setStatus('current')
ipsWebAddrTransAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipsWebAddrTransAddress.setStatus('current')
ipsWebAddrTransPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: ipsWebAddrTransPort.setStatus('current')
ipsWebAddrTransReqUrlTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsWebAddrTransReqUrlTrans.setStatus('current')
ipsWebAddrTransRspUrlTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsWebAddrTransRspUrlTrans.setStatus('current')
ipsWebAddrTransReqUrlReWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsWebAddrTransReqUrlReWritten.setStatus('current')
ipsWebAddrTransReqHdrReWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsWebAddrTransReqHdrReWritten.setStatus('current')
ipsWebAddrTransRspHdrReWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsWebAddrTransRspHdrReWritten.setStatus('current')
ipsWebAddrTransReqReDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsWebAddrTransReqReDirection.setStatus('current')
ipsWebAddrTransTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsWebAddrTransTimeStamp.setStatus('current')
bwsIpsAccessCtrlStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15), )
if mibBuilder.loadTexts: bwsIpsAccessCtrlStatsTable.setStatus('current')
bwsIpsAccessCtrlStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1), ).setIndexNames((0, "BWS-MIB", "ipsAccessCtrlAddressType"), (0, "BWS-MIB", "ipsAccessCtrlAddress"), (0, "BWS-MIB", "ipsAccessCtrlPort"))
if mibBuilder.loadTexts: bwsIpsAccessCtrlStatsEntry.setStatus('current')
ipsAccessCtrlAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipsAccessCtrlAddressType.setStatus('current')
ipsAccessCtrlAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipsAccessCtrlAddress.setStatus('current')
ipsAccessCtrlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: ipsAccessCtrlPort.setStatus('current')
ipsAccessCtrlMissingCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlMissingCookie.setStatus('current')
ipsAccessCtrlNoAuthHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlNoAuthHdr.setStatus('current')
ipsAccessCtrlInvalidCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlInvalidCookie.setStatus('current')
ipsAccessCtrlExpiredCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlExpiredCookie.setStatus('current')
ipsAccessCtrlAccessDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlAccessDenied.setStatus('current')
ipsAccessCtrlGenFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlGenFailure.setStatus('current')
ipsAccessCtrlAccessAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlAccessAttempts.setStatus('current')
ipsAccessCtrlAccessAttemptsTotRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlAccessAttemptsTotRtt.setStatus('current')
ipsAccessCtrlInvalidSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlInvalidSrcIp.setStatus('current')
ipsAccessCtrlAuthCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlAuthCacheHits.setStatus('current')
ipsAccessCtrlAuthCacheMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlAuthCacheMiss.setStatus('current')
ipsAccessCtrlAuthCacheExp = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlAuthCacheExp.setStatus('current')
ipsAccessCtrlTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlTimeStamp.setStatus('current')
bwsIpsRCStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 16), )
if mibBuilder.loadTexts: bwsIpsRCStatsTable.setStatus('current')
bwsIpsRCStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 16, 1), ).setIndexNames((0, "BWS-MIB", "ipsRCAddressType"), (0, "BWS-MIB", "ipsRCAddress"), (0, "BWS-MIB", "ipsRCPort"))
if mibBuilder.loadTexts: bwsIpsRCStatsEntry.setStatus('current')
ipsRCAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 16, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipsRCAddressType.setStatus('current')
ipsRCAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 16, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipsRCAddress.setStatus('current')
ipsRCPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 16, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: ipsRCPort.setStatus('current')
ipsRCTotServed = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsRCTotServed.setStatus('current')
ipsRCTotQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsRCTotQueued.setStatus('current')
ipsRCTotDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsRCTotDropped.setStatus('current')
ipsRCTotOutOfResource = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsRCTotOutOfResource.setStatus('current')
ipsRCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 16, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsRCTimeStamp.setStatus('current')
bwsIpsUrlPolicyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 17), )
if mibBuilder.loadTexts: bwsIpsUrlPolicyStatsTable.setStatus('current')
bwsIpsUrlPolicyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 17, 1), ).setIndexNames((0, "BWS-MIB", "ipsUrlPolicyAddressType"), (0, "BWS-MIB", "ipsUrlPolicyAddress"), (0, "BWS-MIB", "ipsUrlPolicyPort"))
if mibBuilder.loadTexts: bwsIpsUrlPolicyStatsEntry.setStatus('current')
ipsUrlPolicyAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 17, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipsUrlPolicyAddressType.setStatus('current')
ipsUrlPolicyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 17, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipsUrlPolicyAddress.setStatus('current')
ipsUrlPolicyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 17, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: ipsUrlPolicyPort.setStatus('current')
ipsUrlPolicyTotServed = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlPolicyTotServed.setStatus('current')
ipsUrlPolicyTotQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlPolicyTotQueued.setStatus('current')
ipsUrlPolicyTotDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlPolicyTotDropped.setStatus('current')
ipsUrlPolicyTotOutOfResource = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlPolicyTotOutOfResource.setStatus('current')
ipsUrlPolicyEntryCtrlAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlPolicyEntryCtrlAuth.setStatus('current')
ipsUrlPolicyTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 17, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlPolicyTimeStamp.setStatus('current')
bwsSMUserSessionTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 18), )
if mibBuilder.loadTexts: bwsSMUserSessionTable.setStatus('current')
bwsSMUserSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 18, 1), ).setIndexNames((0, "BWS-MIB", "smRealmName"))
if mibBuilder.loadTexts: bwsSMUserSessionEntry.setStatus('current')
smRealmName = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 18, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 30)))
if mibBuilder.loadTexts: smRealmName.setStatus('current')
smAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 18, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smAgentName.setStatus('current')
smNumUserSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 18, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smNumUserSessions.setStatus('current')
bwsServiceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 19), )
if mibBuilder.loadTexts: bwsServiceStatusTable.setStatus('current')
bwsServiceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 19, 1), ).setIndexNames((0, "BWS-MIB", "srvcName"))
if mibBuilder.loadTexts: bwsServiceStatusEntry.setStatus('current')
srvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 19, 1, 1), OctetString())
if mibBuilder.loadTexts: srvcName.setStatus('current')
serviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 19, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceName.setStatus('current')
serviceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 19, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceAddress.setStatus('current')
servicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 19, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: servicePort.setStatus('current')
serviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 19, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceStatus.setStatus('current')
tempCritical = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 3)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: tempCritical.setStatus('current')
tempHigh = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 4)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: tempHigh.setStatus('current')
systemFailOver = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 5)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: systemFailOver.setStatus('current')
switchingToMaintMode = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 6)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: switchingToMaintMode.setStatus('current')
fanDead = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 7)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: fanDead.setStatus('current')
dataPortLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 8)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: dataPortLinkDown.setStatus('current')
serverDown = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 9)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: serverDown.setStatus('current')
peerDown = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 10)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: peerDown.setStatus('current')
dataPortLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 11)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: dataPortLinkUp.setStatus('current')
serverUp = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 12)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: serverUp.setStatus('current')
peerUp = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 13)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: peerUp.setStatus('current')
switchingToBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 14)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: switchingToBypassMode.setStatus('current')
switchingToInlineMode = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 15)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: switchingToInlineMode.setStatus('current')
sharedSecretKeyAboutToExpire = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 16)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: sharedSecretKeyAboutToExpire.setStatus('current')
sharedSecretKeyExpired = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 17)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: sharedSecretKeyExpired.setStatus('current')
firmwareStorageHigh = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 18)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: firmwareStorageHigh.setStatus('current')
logStorageHigh = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 19)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: logStorageHigh.setStatus('current')
raidDegrading = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 20)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: raidDegrading.setStatus('current')
energizeUpdateExpire = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 21)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: energizeUpdateExpire.setStatus('current')
firmwareUpdateAvailable = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 22)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: firmwareUpdateAvailable.setStatus('current')
attackDefinitionUpdateAvailable = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 24)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: attackDefinitionUpdateAvailable.setStatus('current')
processCountHigh = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 25)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: processCountHigh.setStatus('current')
memoryUsageHigh = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 26)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: memoryUsageHigh.setStatus('current')
newAttackDefinitionInstalled = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 27)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: newAttackDefinitionInstalled.setStatus('current')
systemFailure = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 28)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: systemFailure.setStatus('current')
bwsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 20632, 8, 51, 1, 1)).setObjects(("BWS-MIB", "bwsStatsGroup"), ("BWS-MIB", "bwsTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwsMIBCompliance = bwsMIBCompliance.setStatus('current')
bwsStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20632, 8, 51, 2, 1)).setObjects(("BWS-MIB", "totalApplications"), ("BWS-MIB", "totalServers"), ("BWS-MIB", "totalAttacks"), ("BWS-MIB", "activeApplications"), ("BWS-MIB", "activeServers"), ("BWS-MIB", "bwsMessage"), ("BWS-MIB", "systemLoad"), ("BWS-MIB", "cpuFanSpeed"), ("BWS-MIB", "systemFanSpeed"), ("BWS-MIB", "cpuTemperature"), ("BWS-MIB", "firmwareStorage"), ("BWS-MIB", "logStorage"), ("BWS-MIB", "highAvailabilityStatus"), ("BWS-MIB", "operationalMode"), ("BWS-MIB", "dataPathStatus"), ("BWS-MIB", "linkStatus"), ("BWS-MIB", "vipStatus"), ("BWS-MIB", "memUtilization"), ("BWS-MIB", "cpuUtilization"), ("BWS-MIB", "totalBandwidth"), ("BWS-MIB", "uptime"), ("BWS-MIB", "totalMem"), ("BWS-MIB", "freeMem"), ("BWS-MIB", "currentFirmwareVersion"), ("BWS-MIB", "virusDefUpdates"), ("BWS-MIB", "securityDefUpdates"), ("BWS-MIB", "systemSerialNumber"), ("BWS-MIB", "httpProxyActiveConn"), ("BWS-MIB", "httpProxyTotalConn"), ("BWS-MIB", "httpProxyTotalReq"), ("BWS-MIB", "httpProxyServerReq"), ("BWS-MIB", "httpProxyServerErr"), ("BWS-MIB", "httpProxyClientAbrt"), ("BWS-MIB", "httpProxyServerAbrt"), ("BWS-MIB", "httpProxySessionTimeOut"), ("BWS-MIB", "httpProxyParseErr"), ("BWS-MIB", "httpProxyUnknownRsp"), ("BWS-MIB", "httpProxyInBytes"), ("BWS-MIB", "httpProxyOutBytes"), ("BWS-MIB", "httpProxyWAFBlockedIntrusions"), ("BWS-MIB", "httpProxyWAFMonitoredIntrusions"), ("BWS-MIB", "httpProxyWAFWarnings"), ("BWS-MIB", "sslProxyActiveConn"), ("BWS-MIB", "sslProxyFullHandshakes"), ("BWS-MIB", "sslProxyResumptionHandshakes"), ("BWS-MIB", "sslProxyHandshakeAttempts"), ("BWS-MIB", "sslProxyCacheHits"), ("BWS-MIB", "sslProxyCacheMiss"), ("BWS-MIB", "sslProxyCacheTimeouts"), ("BWS-MIB", "sslProxyErrPms"), ("BWS-MIB", "sslProxyAuthBadCertErr"), ("BWS-MIB", "sslProxyAuthBadCNErr"), ("BWS-MIB", "sslProxyBadDNCErr"), ("BWS-MIB", "sslProxyBadCRLErr"), ("BWS-MIB", "sslProxyInBytes"), ("BWS-MIB", "sslProxyOutBytes"), ("BWS-MIB", "sslProxyTotalReq"), ("BWS-MIB", "sslProxyTotalConn"), ("BWS-MIB", "sslProxyCurrentConn"), ("BWS-MIB", "webCmprNoOfReqCompressed"), ("BWS-MIB", "webCmprCompressibleDataSize"), ("BWS-MIB", "webCmprCompressedDataSize"), ("BWS-MIB", "webCacheHits"), ("BWS-MIB", "webCacheMiss"), ("BWS-MIB", "webCacheStale"), ("BWS-MIB", "webCacheCacheableRes"), ("BWS-MIB", "webCacheReq"), ("BWS-MIB", "webCacheCachedObjects"), ("BWS-MIB", "webCacheLongHdrs"), ("BWS-MIB", "webCacheBytesOut"), ("BWS-MIB", "httpSrvrTotReqAccepted"), ("BWS-MIB", "httpSrvrTotReqActive"), ("BWS-MIB", "httpSrvrTotReqRejected"), ("BWS-MIB", "httpSrvrTotSuccess"), ("BWS-MIB", "httpSrvrTotRefused"), ("BWS-MIB", "httpSrvrTotTimedout"), ("BWS-MIB", "httpSrvrAvgReqPerConn"), ("BWS-MIB", "httpSrvrTotResponse"), ("BWS-MIB", "httpSrvrAvgResTime"), ("BWS-MIB", "httpSrvrMaxResTime"), ("BWS-MIB", "httpSrvrMinResTime"), ("BWS-MIB", "httpSrvrNumReqEnqueue"), ("BWS-MIB", "httpSrvrNumFreeConn"), ("BWS-MIB", "httpSrvrNumOpeningConn"), ("BWS-MIB", "httpSrvrNumConn"), ("BWS-MIB", "httpSrvrNumIBDisabled"), ("BWS-MIB", "httpSrvrNumOOBDisabled"), ("BWS-MIB", "httpSrvrNumOOBEnabled"), ("BWS-MIB", "httpSrvrLastDisabledTime"), ("BWS-MIB", "httpSrvrState"), ("BWS-MIB", "httpSrvrInBytes"), ("BWS-MIB", "httpSrvrOutBytes"), ("BWS-MIB", "sslSrvrTotReqAccepted"), ("BWS-MIB", "sslSrvrTotReqActive"), ("BWS-MIB", "sslSrvrTotReqRejected"), ("BWS-MIB", "sslSrvrTotSuccess"), ("BWS-MIB", "sslSrvrTotRefused"), ("BWS-MIB", "sslSrvrTotTimedout"), ("BWS-MIB", "sslSrvrAvgReqPerConn"), ("BWS-MIB", "sslSrvrTotResponse"), ("BWS-MIB", "sslSrvrAvgResTime"), ("BWS-MIB", "sslSrvrMaxResTime"), ("BWS-MIB", "sslSrvrMinResTime"), ("BWS-MIB", "sslSrvrNumReqEnqueue"), ("BWS-MIB", "sslSrvrNumFreeConn"), ("BWS-MIB", "sslSrvrNumOpeningConn"), ("BWS-MIB", "sslSrvrNumConn"), ("BWS-MIB", "sslSrvrNumIBDisabled"), ("BWS-MIB", "sslSrvrNumOOBDisabled"), ("BWS-MIB", "sslSrvrNumOOBEnabled"), ("BWS-MIB", "sslSrvrLastDisabledTime"), ("BWS-MIB", "sslSrvrState"), ("BWS-MIB", "sslSrvrInBytes"), ("BWS-MIB", "sslSrvrOutBytes"), ("BWS-MIB", "ipsReqSrvcNoOfUrlProfMatched"), ("BWS-MIB", "ipsReqSrvcNoOfAppProfViol"), ("BWS-MIB", "ipsReqSrvcTotProfViol"), ("BWS-MIB", "ipsLrnSrvcUpdatesByReq"), ("BWS-MIB", "ipsLrnSrvcUpdatesByRsp"), ("BWS-MIB", "ipsLrnSrvcTotUpdatesByReq"), ("BWS-MIB", "ipsLrnSrvcTotUpdatesByRsp"), ("BWS-MIB", "ipsLrnSrvcTotUrlUpdated"), ("BWS-MIB", "ipsLrnSrvcTotParamsLearned"), ("BWS-MIB", "ipsLrnSrvcTimeLastUpdated"), ("BWS-MIB", "ipsLrnSrvcTimeLocked"), ("BWS-MIB", "ipsReqLimitUrlLenOFErr"), ("BWS-MIB", "ipsReqLimitQueryLenOFErr"), ("BWS-MIB", "ipsReqLimitReqLenOFErr"), ("BWS-MIB", "ipsReqLimitCookieLenOFErr"), ("BWS-MIB", "ipsReqLimitHdrCntOFErr"), ("BWS-MIB", "ipsReqLimitHdrLenOFErr"), ("BWS-MIB", "ipsReqLimitContentLenErr"), ("BWS-MIB", "ipsReqLimitBlkdMethodErr"), ("BWS-MIB", "ipsUrlNormEncodingErr"), ("BWS-MIB", "ipsUrlNormSlashDotInUrlErr"), ("BWS-MIB", "ipsUrlNormTildaInUrl"), ("BWS-MIB", "ipsUrlNormCharSetEncodingErr"), ("BWS-MIB", "ipsCookieSecEncrypted"), ("BWS-MIB", "ipsCookieSecTampered"), ("BWS-MIB", "ipsCookieSecNumCookieAllow"), ("BWS-MIB", "ipsCookieSecNumCookieSet"), ("BWS-MIB", "ipsCookieSecNumCookieErr"), ("BWS-MIB", "ipsCookieSecCookieDecErr"), ("BWS-MIB", "ipsCookieSecCookieDecrypted"), ("BWS-MIB", "ipsUrlAclProcessAclHits"), ("BWS-MIB", "ipsUrlAclPolicyHits"), ("BWS-MIB", "ipsUrlAclTimeStamp"), ("BWS-MIB", "ipsUrlAclReserved"), ("BWS-MIB", "ipsUrlAclAllowAclHits"), ("BWS-MIB", "ipsHdrAclHits"), ("BWS-MIB", "ipsHdrAclTimeStamp"), ("BWS-MIB", "ipsWebAddrTransReqUrlTrans"), ("BWS-MIB", "ipsWebAddrTransRspUrlTrans"), ("BWS-MIB", "ipsWebAddrTransReqUrlReWritten"), ("BWS-MIB", "ipsWebAddrTransReqHdrReWritten"), ("BWS-MIB", "ipsWebAddrTransRspHdrReWritten"), ("BWS-MIB", "ipsWebAddrTransReqReDirection"), ("BWS-MIB", "ipsWebAddrTransTimeStamp"), ("BWS-MIB", "ipsAccessCtrlMissingCookie"), ("BWS-MIB", "ipsAccessCtrlNoAuthHdr"), ("BWS-MIB", "ipsAccessCtrlInvalidCookie"), ("BWS-MIB", "ipsAccessCtrlExpiredCookie"), ("BWS-MIB", "ipsAccessCtrlAccessDenied"), ("BWS-MIB", "ipsAccessCtrlGenFailure"), ("BWS-MIB", "ipsAccessCtrlAccessAttempts"), ("BWS-MIB", "ipsAccessCtrlAccessAttemptsTotRtt"), ("BWS-MIB", "ipsAccessCtrlInvalidSrcIp"), ("BWS-MIB", "ipsAccessCtrlAuthCacheHits"), ("BWS-MIB", "ipsAccessCtrlAuthCacheMiss"), ("BWS-MIB", "ipsAccessCtrlAuthCacheExp"), ("BWS-MIB", "ipsAccessCtrlTimeStamp"), ("BWS-MIB", "ipsRCTotServed"), ("BWS-MIB", "ipsRCTotQueued"), ("BWS-MIB", "ipsRCTotDropped"), ("BWS-MIB", "ipsRCTotOutOfResource"), ("BWS-MIB", "ipsRCTimeStamp"), ("BWS-MIB", "ipsUrlPolicyTotServed"), ("BWS-MIB", "ipsUrlPolicyTotQueued"), ("BWS-MIB", "ipsUrlPolicyTotDropped"), ("BWS-MIB", "ipsUrlPolicyTotOutOfResource"), ("BWS-MIB", "ipsUrlPolicyEntryCtrlAuth"), ("BWS-MIB", "ipsUrlPolicyTimeStamp"), ("BWS-MIB", "serviceName"), ("BWS-MIB", "serviceAddress"), ("BWS-MIB", "servicePort"), ("BWS-MIB", "serviceStatus"), ("BWS-MIB", "smAgentName"), ("BWS-MIB", "smNumUserSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwsStatsGroup = bwsStatsGroup.setStatus('current')
bwsTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 20632, 8, 51, 2, 2)).setObjects(("BWS-MIB", "tempCritical"), ("BWS-MIB", "tempHigh"), ("BWS-MIB", "systemFailOver"), ("BWS-MIB", "switchingToMaintMode"), ("BWS-MIB", "fanDead"), ("BWS-MIB", "dataPortLinkDown"), ("BWS-MIB", "serverDown"), ("BWS-MIB", "peerDown"), ("BWS-MIB", "dataPortLinkUp"), ("BWS-MIB", "serverUp"), ("BWS-MIB", "peerUp"), ("BWS-MIB", "switchingToBypassMode"), ("BWS-MIB", "switchingToInlineMode"), ("BWS-MIB", "sharedSecretKeyAboutToExpire"), ("BWS-MIB", "sharedSecretKeyExpired"), ("BWS-MIB", "firmwareStorageHigh"), ("BWS-MIB", "logStorageHigh"), ("BWS-MIB", "raidDegrading"), ("BWS-MIB", "energizeUpdateExpire"), ("BWS-MIB", "firmwareUpdateAvailable"), ("BWS-MIB", "processCountHigh"), ("BWS-MIB", "memoryUsageHigh"), ("BWS-MIB", "attackDefinitionUpdateAvailable"), ("BWS-MIB", "newAttackDefinitionInstalled"), ("BWS-MIB", "systemFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwsTrapGroup = bwsTrapGroup.setStatus('current')
mibBuilder.exportSymbols("BWS-MIB", httpSrvrNumOpeningConn=httpSrvrNumOpeningConn, ipsUrlAclTimeStamp=ipsUrlAclTimeStamp, cpuUtilization=cpuUtilization, bws=bws, sslProxyAuthBadCertErr=sslProxyAuthBadCertErr, bwsIpsHdrAclStatsEntry=bwsIpsHdrAclStatsEntry, bwsIpsReqLimitStatsTable=bwsIpsReqLimitStatsTable, ipsUrlAclProcessAclHits=ipsUrlAclProcessAclHits, bwsMIBConformance=bwsMIBConformance, bwsIpsWebAddrTransStatsTable=bwsIpsWebAddrTransStatsTable, ipsAccessCtrlAddress=ipsAccessCtrlAddress, sslSrvrTotRefused=sslSrvrTotRefused, webCacheProtocol=webCacheProtocol, totalMem=totalMem, dataPortLinkDown=dataPortLinkDown, servicePort=servicePort, bwsIpsReqLimitStatsEntry=bwsIpsReqLimitStatsEntry, ipsAccessCtrlInvalidCookie=ipsAccessCtrlInvalidCookie, httpProxyServerAbrt=httpProxyServerAbrt, webCacheLongHdrs=webCacheLongHdrs, ipsAccessCtrlAddressType=ipsAccessCtrlAddressType, bwsIpsAccessCtrlStatsEntry=bwsIpsAccessCtrlStatsEntry, webCmprProtocol=webCmprProtocol, httpSrvrAddressType=httpSrvrAddressType, webCacheCacheableRes=webCacheCacheableRes, ipsUrlAclReserved=ipsUrlAclReserved, ipsAccessCtrlAuthCacheMiss=ipsAccessCtrlAuthCacheMiss, ipsAccessCtrlInvalidSrcIp=ipsAccessCtrlInvalidSrcIp, sslSrvrSrvcAddressType=sslSrvrSrvcAddressType, ipsAccessCtrlAuthCacheExp=ipsAccessCtrlAuthCacheExp, bwsIpsRCStatsTable=bwsIpsRCStatsTable, ipsUrlNormAddress=ipsUrlNormAddress, sslSrvrNumOpeningConn=sslSrvrNumOpeningConn, newAttackDefinitionInstalled=newAttackDefinitionInstalled, ipsReqSrvcNoOfUrlProfMatched=ipsReqSrvcNoOfUrlProfMatched, sslProxyErrPms=sslProxyErrPms, systemSerialNumber=systemSerialNumber, webCacheAddress=webCacheAddress, systemFailure=systemFailure, sslProxyCacheTimeouts=sslProxyCacheTimeouts, ipsHdrAclHits=ipsHdrAclHits, ipsLrnSrvcUpdatesByReq=ipsLrnSrvcUpdatesByReq, webCacheBytesOut=webCacheBytesOut, linkStatus=linkStatus, bwsMessage=bwsMessage, sslProxyAddress=sslProxyAddress, ipsReqLimitUrlLenOFErr=ipsReqLimitUrlLenOFErr, sslSrvrTotReqAccepted=sslSrvrTotReqAccepted, sslProxyFullHandshakes=sslProxyFullHandshakes, systemFanSpeed=systemFanSpeed, sslSrvrAvgReqPerConn=sslSrvrAvgReqPerConn, ipsRCTotDropped=ipsRCTotDropped, ipsCookieSecEncrypted=ipsCookieSecEncrypted, httpSrvrNumReqEnqueue=httpSrvrNumReqEnqueue, httpSrvrAddress=httpSrvrAddress, processCountHigh=processCountHigh, httpSrvrTotRefused=httpSrvrTotRefused, httpSrvrTotSuccess=httpSrvrTotSuccess, ipsReqLimitAddressType=ipsReqLimitAddressType, sslSrvrMinResTime=sslSrvrMinResTime, bwsIpsUrlPolicyStatsEntry=bwsIpsUrlPolicyStatsEntry, ipsAccessCtrlPort=ipsAccessCtrlPort, ipsLrnSrvcTotUpdatesByRsp=ipsLrnSrvcTotUpdatesByRsp, totalServers=totalServers, sslSrvrTotSuccess=sslSrvrTotSuccess, bwsSslProxyStatsTable=bwsSslProxyStatsTable, httpProxyAddressType=httpProxyAddressType, logStorage=logStorage, sslSrvrTotTimedout=sslSrvrTotTimedout, ipsUrlPolicyTotOutOfResource=ipsUrlPolicyTotOutOfResource, webCacheAddressType=webCacheAddressType, httpProxyPort=httpProxyPort, ipsWebAddrTransTimeStamp=ipsWebAddrTransTimeStamp, ipsAccessCtrlAuthCacheHits=ipsAccessCtrlAuthCacheHits, ipsUrlNormTildaInUrl=ipsUrlNormTildaInUrl, sslSrvrTotResponse=sslSrvrTotResponse, ipsWebAddrTransRspUrlTrans=ipsWebAddrTransRspUrlTrans, ipsCookieSecNumCookieSet=ipsCookieSecNumCookieSet, ipsWebAddrTransReqUrlReWritten=ipsWebAddrTransReqUrlReWritten, sslProxyActiveConn=sslProxyActiveConn, bwsIpsUrlPolicyStatsTable=bwsIpsUrlPolicyStatsTable, webCmprCompressibleDataSize=webCmprCompressibleDataSize, bwsIpsUrlAclStatsTable=bwsIpsUrlAclStatsTable, ipsCookieSecAddressType=ipsCookieSecAddressType, ipsHdrAclAddress=ipsHdrAclAddress, ipsRCPort=ipsRCPort, bwsIpsCookieSecStatsTable=bwsIpsCookieSecStatsTable, bwsHttpProxyStatsTable=bwsHttpProxyStatsTable, sslProxyCurrentConn=sslProxyCurrentConn, bwsHttpSrvrStatsEntry=bwsHttpSrvrStatsEntry, webCacheStale=webCacheStale, ipsUrlAclPort=ipsUrlAclPort, webCachePort=webCachePort, bwsCompressionStatsEntry=bwsCompressionStatsEntry, bwsIpsCookieSecStatsEntry=bwsIpsCookieSecStatsEntry, ipsRCTimeStamp=ipsRCTimeStamp, ipsCookieSecAddress=ipsCookieSecAddress, sslSrvrTotReqRejected=sslSrvrTotReqRejected, totalApplications=totalApplications, virusDefUpdates=virusDefUpdates, httpSrvrLastDisabledTime=httpSrvrLastDisabledTime, sslSrvrLastDisabledTime=sslSrvrLastDisabledTime, bwsCacheStatsEntry=bwsCacheStatsEntry, ipsReqLimitCookieLenOFErr=ipsReqLimitCookieLenOFErr, ipsReqLimitAddress=ipsReqLimitAddress, webCacheHits=webCacheHits, ipsCookieSecCookieDecErr=ipsCookieSecCookieDecErr, bwsIpsHdrAclStatsTable=bwsIpsHdrAclStatsTable, ipsAccessCtrlExpiredCookie=ipsAccessCtrlExpiredCookie, ipsLrnSrvcTimeLocked=ipsLrnSrvcTimeLocked, ipsHdrAclAddressType=ipsHdrAclAddressType, httpSrvrSrvcAddress=httpSrvrSrvcAddress, bwsStatsGroup=bwsStatsGroup, bwsCompressionStatsTable=bwsCompressionStatsTable, httpSrvrSrvcPort=httpSrvrSrvcPort, ipsCookieSecCookieDecrypted=ipsCookieSecCookieDecrypted, httpProxyInBytes=httpProxyInBytes, ipsRCAddressType=ipsRCAddressType, ipsRCTotOutOfResource=ipsRCTotOutOfResource, activeApplications=activeApplications, ipsUrlAclAddressType=ipsUrlAclAddressType, httpProxyWAFMonitoredIntrusions=httpProxyWAFMonitoredIntrusions, sslProxyBadDNCErr=sslProxyBadDNCErr, ipsUrlNormPort=ipsUrlNormPort, bwstraps=bwstraps, bwsStats=bwsStats, bwsIpsWebAddrTransStatsEntry=bwsIpsWebAddrTransStatsEntry, uptime=uptime, ipsUrlPolicyTimeStamp=ipsUrlPolicyTimeStamp, sslSrvrTotReqActive=sslSrvrTotReqActive, httpSrvrNumOOBEnabled=httpSrvrNumOOBEnabled, sslSrvrNumFreeConn=sslSrvrNumFreeConn, ipsWebAddrTransPort=ipsWebAddrTransPort, sslProxyInBytes=sslProxyInBytes, bwsIpsUrlAclStatsEntry=bwsIpsUrlAclStatsEntry, smAgentName=smAgentName, bwsCacheStatsTable=bwsCacheStatsTable, httpProxyParseErr=httpProxyParseErr, ipsWebAddrTransReqReDirection=ipsWebAddrTransReqReDirection, firmwareStorage=firmwareStorage, serviceStatus=serviceStatus, bwsSMUserSessionEntry=bwsSMUserSessionEntry, raidDegrading=raidDegrading, ipsLrnSrvcTotParamsLearned=ipsLrnSrvcTotParamsLearned, sslSrvrAddress=sslSrvrAddress, ipsAccessCtrlAccessAttemptsTotRtt=ipsAccessCtrlAccessAttemptsTotRtt, ipsAccessCtrlMissingCookie=ipsAccessCtrlMissingCookie, smRealmName=smRealmName, ipsReqLimitHdrCntOFErr=ipsReqLimitHdrCntOFErr, dataPathStatus=dataPathStatus, bwsTrapGroup=bwsTrapGroup, ipsCookieSecNumCookieAllow=ipsCookieSecNumCookieAllow, ipsRCTotQueued=ipsRCTotQueued, ipsReqLimitBlkdMethodErr=ipsReqLimitBlkdMethodErr, smNumUserSessions=smNumUserSessions, bwsMIBCompliances=bwsMIBCompliances, ipsUrlPolicyAddressType=ipsUrlPolicyAddressType, httpProxyWAFWarnings=httpProxyWAFWarnings, sslSrvrNumConn=sslSrvrNumConn, ipsUrlPolicyTotQueued=ipsUrlPolicyTotQueued, attackDefinitionUpdateAvailable=attackDefinitionUpdateAvailable, bwsMIBGroups=bwsMIBGroups, ipsWebAddrTransRspHdrReWritten=ipsWebAddrTransRspHdrReWritten, httpSrvrOutBytes=httpSrvrOutBytes, serviceName=serviceName, switchingToBypassMode=switchingToBypassMode, firmwareStorageHigh=firmwareStorageHigh, ipsAccessCtrlGenFailure=ipsAccessCtrlGenFailure, peerUp=peerUp, firmwareUpdateAvailable=firmwareUpdateAvailable, ipsWebAddrTransAddress=ipsWebAddrTransAddress, httpProxyServerReq=httpProxyServerReq, bwsHttpProxyStatsEntry=bwsHttpProxyStatsEntry, serverUp=serverUp, httpSrvrNumOOBDisabled=httpSrvrNumOOBDisabled, httpSrvrInBytes=httpSrvrInBytes, httpSrvrMinResTime=httpSrvrMinResTime, ipsUrlNormSlashDotInUrlErr=ipsUrlNormSlashDotInUrlErr, ipsRCAddress=ipsRCAddress, vipStatus=vipStatus, httpProxyClientAbrt=httpProxyClientAbrt, switchingToMaintMode=switchingToMaintMode, ipsHdrAclTimeStamp=ipsHdrAclTimeStamp, httpProxyAddress=httpProxyAddress, ipsCookieSecNumCookieErr=ipsCookieSecNumCookieErr, sslProxyBadCRLErr=sslProxyBadCRLErr, sslSrvrInBytes=sslSrvrInBytes, ipsCookieSecPort=ipsCookieSecPort, sslProxyTotalConn=sslProxyTotalConn, sslSrvrAddressType=sslSrvrAddressType, bwsIpsUrlNormStatsEntry=bwsIpsUrlNormStatsEntry, ipsAccessCtrlAccessDenied=ipsAccessCtrlAccessDenied, ipsLrnSrvcAddressType=ipsLrnSrvcAddressType, dataPortLinkUp=dataPortLinkUp, bwsHttpSrvrStatsTable=bwsHttpSrvrStatsTable, httpSrvrTotResponse=httpSrvrTotResponse, bwsSslProxyStatsEntry=bwsSslProxyStatsEntry, sslProxyOutBytes=sslProxyOutBytes, bwsIpsLrnSrvcStatsTable=bwsIpsLrnSrvcStatsTable, sslSrvrPort=sslSrvrPort, switchingToInlineMode=switchingToInlineMode, securityDefUpdates=securityDefUpdates, httpProxySessionTimeOut=httpProxySessionTimeOut, webCacheReq=webCacheReq, currentFirmwareVersion=currentFirmwareVersion, ipsUrlPolicyPort=ipsUrlPolicyPort, sslProxyPort=sslProxyPort, httpProxyUnknownRsp=httpProxyUnknownRsp, ipsHdrAclPort=ipsHdrAclPort, ipsReqSrvcNoOfAppProfViol=ipsReqSrvcNoOfAppProfViol, ipsAccessCtrlNoAuthHdr=ipsAccessCtrlNoAuthHdr, bwsSslSrvrStatsEntry=bwsSslSrvrStatsEntry, sslProxyCacheMiss=sslProxyCacheMiss, ipsReqSrvcTotProfViol=ipsReqSrvcTotProfViol, sharedSecretKeyAboutToExpire=sharedSecretKeyAboutToExpire, totalBandwidth=totalBandwidth, bwsMIBCompliance=bwsMIBCompliance, ipsWebAddrTransReqUrlTrans=ipsWebAddrTransReqUrlTrans, operationalMode=operationalMode, ipsUrlAclPolicyHits=ipsUrlAclPolicyHits, ipsReqSrvcPort=ipsReqSrvcPort, ipsLrnSrvcPort=ipsLrnSrvcPort, tempHigh=tempHigh, httpSrvrTotReqActive=httpSrvrTotReqActive, bwsSslSrvrStatsTable=bwsSslSrvrStatsTable, sslSrvrNumIBDisabled=sslSrvrNumIBDisabled, systemFailOver=systemFailOver, ipsReqLimitReqLenOFErr=ipsReqLimitReqLenOFErr, logStorageHigh=logStorageHigh, ipsReqLimitQueryLenOFErr=ipsReqLimitQueryLenOFErr, ipsLrnSrvcTimeLastUpdated=ipsLrnSrvcTimeLastUpdated, activeServers=activeServers, sslProxyCacheHits=sslProxyCacheHits, httpSrvrTotReqAccepted=httpSrvrTotReqAccepted, httpSrvrAvgReqPerConn=httpSrvrAvgReqPerConn, memUtilization=memUtilization, httpProxyActiveConn=httpProxyActiveConn, httpSrvrTotTimedout=httpSrvrTotTimedout, ipsAccessCtrlTimeStamp=ipsAccessCtrlTimeStamp, httpSrvrTotReqRejected=httpSrvrTotReqRejected, PYSNMP_MODULE_ID=bws, sslProxyHandshakeAttempts=sslProxyHandshakeAttempts, serverDown=serverDown, httpSrvrNumFreeConn=httpSrvrNumFreeConn, ipsUrlAclAllowAclHits=ipsUrlAclAllowAclHits, ipsWebAddrTransAddressType=ipsWebAddrTransAddressType, bwsServiceStatusTable=bwsServiceStatusTable, sslSrvrNumOOBDisabled=sslSrvrNumOOBDisabled, bwsServiceStatusEntry=bwsServiceStatusEntry, sslProxyResumptionHandshakes=sslProxyResumptionHandshakes, httpSrvrState=httpSrvrState, sslProxyAddressType=sslProxyAddressType, httpProxyWAFBlockedIntrusions=httpProxyWAFBlockedIntrusions, httpSrvrNumIBDisabled=httpSrvrNumIBDisabled)
mibBuilder.exportSymbols("BWS-MIB", httpProxyTotalConn=httpProxyTotalConn, ipsUrlNormEncodingErr=ipsUrlNormEncodingErr, httpProxyOutBytes=httpProxyOutBytes, bwsIpsRCStatsEntry=bwsIpsRCStatsEntry, httpSrvrSrvcAddressType=httpSrvrSrvcAddressType, sslSrvrOutBytes=sslSrvrOutBytes, cpuTemperature=cpuTemperature, webCmprPort=webCmprPort, ipsUrlPolicyAddress=ipsUrlPolicyAddress, ipsRCTotServed=ipsRCTotServed, webCmprAddressType=webCmprAddressType, tempCritical=tempCritical, sslSrvrSrvcPort=sslSrvrSrvcPort, sslSrvrState=sslSrvrState, httpSrvrMaxResTime=httpSrvrMaxResTime, ipsReqLimitPort=ipsReqLimitPort, bwsIpsAccessCtrlStatsTable=bwsIpsAccessCtrlStatsTable, webCacheMiss=webCacheMiss, energizeUpdateExpire=energizeUpdateExpire, ipsLrnSrvcUpdatesByRsp=ipsLrnSrvcUpdatesByRsp, httpProxyServerErr=httpProxyServerErr, totalAttacks=totalAttacks, bwsIpsUrlNormStatsTable=bwsIpsUrlNormStatsTable, ipsWebAddrTransReqHdrReWritten=ipsWebAddrTransReqHdrReWritten, sslSrvrAvgResTime=sslSrvrAvgResTime, ipsUrlPolicyEntryCtrlAuth=ipsUrlPolicyEntryCtrlAuth, bwsSMUserSessionTable=bwsSMUserSessionTable, webCacheCachedObjects=webCacheCachedObjects, ipsLrnSrvcTotUrlUpdated=ipsLrnSrvcTotUrlUpdated, sslSrvrNumReqEnqueue=sslSrvrNumReqEnqueue, sslSrvrSrvcAddress=sslSrvrSrvcAddress, freeMem=freeMem, httpSrvrPort=httpSrvrPort, ipsAccessCtrlAccessAttempts=ipsAccessCtrlAccessAttempts, fanDead=fanDead, ipsReqSrvcAddress=ipsReqSrvcAddress, httpSrvrNumConn=httpSrvrNumConn, httpSrvrAvgResTime=httpSrvrAvgResTime, srvcName=srvcName, ipsLrnSrvcTotUpdatesByReq=ipsLrnSrvcTotUpdatesByReq, webCmprAddress=webCmprAddress, ipsUrlNormAddressType=ipsUrlNormAddressType, sslProxyTotalReq=sslProxyTotalReq, bwsIpsLrnSrvcStatsEntry=bwsIpsLrnSrvcStatsEntry, ipsReqLimitHdrLenOFErr=ipsReqLimitHdrLenOFErr, sslProxyAuthBadCNErr=sslProxyAuthBadCNErr, sslSrvrMaxResTime=sslSrvrMaxResTime, ipsUrlPolicyTotServed=ipsUrlPolicyTotServed, httpProxyTotalReq=httpProxyTotalReq, sharedSecretKeyExpired=sharedSecretKeyExpired, webCmprCompressedDataSize=webCmprCompressedDataSize, systemLoad=systemLoad, bwsIpsReqSrvcStatsEntry=bwsIpsReqSrvcStatsEntry, peerDown=peerDown, ipsUrlNormCharSetEncodingErr=ipsUrlNormCharSetEncodingErr, ipsLrnSrvcAddress=ipsLrnSrvcAddress, ipsReqLimitContentLenErr=ipsReqLimitContentLenErr, ipsUrlAclAddress=ipsUrlAclAddress, cpuFanSpeed=cpuFanSpeed, bwsIpsReqSrvcStatsTable=bwsIpsReqSrvcStatsTable, memoryUsageHigh=memoryUsageHigh, serviceAddress=serviceAddress, ipsReqSrvcAddressType=ipsReqSrvcAddressType, ipsUrlPolicyTotDropped=ipsUrlPolicyTotDropped, sslSrvrNumOOBEnabled=sslSrvrNumOOBEnabled, highAvailabilityStatus=highAvailabilityStatus, webCmprNoOfReqCompressed=webCmprNoOfReqCompressed, ipsCookieSecTampered=ipsCookieSecTampered)
