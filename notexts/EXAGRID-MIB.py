#
# PySNMP MIB module EXAGRID-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/exagrid/EXAGRID-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 15:39:03 2024
# On host fv-az973-242 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
InternationalDisplayString, = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "InternationalDisplayString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, Bits, iso, ModuleIdentity, ObjectIdentity, Unsigned32, TimeTicks, IpAddress, NotificationType, Gauge32, Counter64, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Bits", "iso", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "TimeTicks", "IpAddress", "NotificationType", "Gauge32", "Counter64", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
exagrid = MibIdentifier((1, 3, 6, 1, 4, 1, 14941))
exagridTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 1))
egEventParams = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 2))
exagridProductLines = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3))
exagridExX000Series = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1))
exagridExX000 = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 0))
exagridEx1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 1))
exagridEx2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 2))
exagridEx3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 3))
exagridEx4000 = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 4))
exagridEx5000 = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 5))
exagridExGW = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 6))
exagridEx10000E = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 10))
exagridEx1T = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 11))
exagridEx2T = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 12))
exagridEx3T = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 13))
exagridEx4T = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 14))
exagridEx5T = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 15))
exagridEx7T = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 16))
exagridEx9T = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 19))
exagridEx7S = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 26))
exagridEx9S = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 29))
exagridEx1T2012A = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 31))
exagridEx2T2012A = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 32))
exagridEx3T2012A = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 33))
exagridEx4T2012A = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 34))
exagridEx5T2012A = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 35))
exagridEx7T2012A = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 36))
exagridEx7S2012A = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 46))
exagridEx10T = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 110))
exagridEx13T = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 113))
exagridEx10S = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 210))
exagridEx13S = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 213))
exagridEx10T2012A = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 310))
exagridEx13T2012A = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 313))
exagridEx21T2012A = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 321))
exagridEx10S2012A = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 410))
exagridEx13S2012A = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 413))
exagridEx21S2012A = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 3, 1, 421))
exagridServerData = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 4))
exagridLandingSpace = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 4, 1))
exagridRetentionSpace = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 4, 2))
exagridDeduplicationRatio = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 4, 3))
exagridPendingDeduplication = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 4, 4))
exagridPendingReplication = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 4, 5))
exagridServerStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 14941, 4, 6))
egLandingSpaceConfiguredWholeGigabytes = MibScalar((1, 3, 6, 1, 4, 1, 14941, 4, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egLandingSpaceConfiguredWholeGigabytes.setStatus('mandatory')
egLandingSpaceConfiguredFractionalGigabytes = MibScalar((1, 3, 6, 1, 4, 1, 14941, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egLandingSpaceConfiguredFractionalGigabytes.setStatus('mandatory')
egLandingSpaceAvailableWholeGigabytes = MibScalar((1, 3, 6, 1, 4, 1, 14941, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egLandingSpaceAvailableWholeGigabytes.setStatus('mandatory')
egLandingSpaceAvailableFractionalGigabytes = MibScalar((1, 3, 6, 1, 4, 1, 14941, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egLandingSpaceAvailableFractionalGigabytes.setStatus('mandatory')
egRetentionSpaceConfiguredWholeGigabytes = MibScalar((1, 3, 6, 1, 4, 1, 14941, 4, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egRetentionSpaceConfiguredWholeGigabytes.setStatus('mandatory')
egRetentionSpaceConfiguredFractionalGigabytes = MibScalar((1, 3, 6, 1, 4, 1, 14941, 4, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egRetentionSpaceConfiguredFractionalGigabytes.setStatus('mandatory')
egRetentionSpaceAvailableWholeGigabytes = MibScalar((1, 3, 6, 1, 4, 1, 14941, 4, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egRetentionSpaceAvailableWholeGigabytes.setStatus('mandatory')
egRetentionSpaceAvailableFractionalGigabytes = MibScalar((1, 3, 6, 1, 4, 1, 14941, 4, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egRetentionSpaceAvailableFractionalGigabytes.setStatus('mandatory')
egBackupDataAvailableWholeGigabytes = MibScalar((1, 3, 6, 1, 4, 1, 14941, 4, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egBackupDataAvailableWholeGigabytes.setStatus('mandatory')
egBackupDataAvailableFractionalGigabytes = MibScalar((1, 3, 6, 1, 4, 1, 14941, 4, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egBackupDataAvailableFractionalGigabytes.setStatus('mandatory')
egBackupDataSpaceConsumedWholeGigabytes = MibScalar((1, 3, 6, 1, 4, 1, 14941, 4, 3, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egBackupDataSpaceConsumedWholeGigabytes.setStatus('mandatory')
egBackupDataSpaceConsumedFractionalGigabytes = MibScalar((1, 3, 6, 1, 4, 1, 14941, 4, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egBackupDataSpaceConsumedFractionalGigabytes.setStatus('mandatory')
egPendingDeduplicationWholeGigabytes = MibScalar((1, 3, 6, 1, 4, 1, 14941, 4, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egPendingDeduplicationWholeGigabytes.setStatus('mandatory')
egPendingDeduplicationFractionalGigabytes = MibScalar((1, 3, 6, 1, 4, 1, 14941, 4, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egPendingDeduplicationFractionalGigabytes.setStatus('mandatory')
egPendingDeduplicationAge = MibScalar((1, 3, 6, 1, 4, 1, 14941, 4, 4, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egPendingDeduplicationAge.setStatus('mandatory')
egPendingReplicationWholeGigabytes = MibScalar((1, 3, 6, 1, 4, 1, 14941, 4, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egPendingReplicationWholeGigabytes.setStatus('mandatory')
egPendingReplicationFractionalGigabytes = MibScalar((1, 3, 6, 1, 4, 1, 14941, 4, 5, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egPendingReplicationFractionalGigabytes.setStatus('mandatory')
egPendingReplicationAge = MibScalar((1, 3, 6, 1, 4, 1, 14941, 4, 5, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egPendingReplicationAge.setStatus('mandatory')
egServerAlarmState = MibScalar((1, 3, 6, 1, 4, 1, 14941, 4, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egServerAlarmState.setStatus('mandatory')
egEventParamsName = MibScalar((1, 3, 6, 1, 4, 1, 14941, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egEventParamsName.setStatus('mandatory')
egEventParamsId = MibScalar((1, 3, 6, 1, 4, 1, 14941, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egEventParamsId.setStatus('mandatory')
egEventParamsCreateTime = MibScalar((1, 3, 6, 1, 4, 1, 14941, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egEventParamsCreateTime.setStatus('mandatory')
egEventParamsCreateTimeRaw = MibScalar((1, 3, 6, 1, 4, 1, 14941, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egEventParamsCreateTimeRaw.setStatus('mandatory')
egEventParamsGridName = MibScalar((1, 3, 6, 1, 4, 1, 14941, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egEventParamsGridName.setStatus('mandatory')
egEventParamsSiteName = MibScalar((1, 3, 6, 1, 4, 1, 14941, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egEventParamsSiteName.setStatus('mandatory')
egEventParamsSiteId = MibScalar((1, 3, 6, 1, 4, 1, 14941, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egEventParamsSiteId.setStatus('mandatory')
egEventParamsSeverity = MibScalar((1, 3, 6, 1, 4, 1, 14941, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egEventParamsSeverity.setStatus('mandatory')
egEventParamsDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 14941, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egEventParamsDeviceName.setStatus('mandatory')
egEventParamsDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 14941, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egEventParamsDeviceId.setStatus('mandatory')
egEventParamsDeviceSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 14941, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egEventParamsDeviceSerialNumber.setStatus('mandatory')
egEventParamsDeviceIp = MibScalar((1, 3, 6, 1, 4, 1, 14941, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egEventParamsDeviceIp.setStatus('mandatory')
egEventParamsDupCount = MibScalar((1, 3, 6, 1, 4, 1, 14941, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egEventParamsDupCount.setStatus('mandatory')
egEventParamsText = MibScalar((1, 3, 6, 1, 4, 1, 14941, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egEventParamsText.setStatus('mandatory')
egEventParamsDetail = MibScalar((1, 3, 6, 1, 4, 1, 14941, 2, 15), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egEventParamsDetail.setStatus('mandatory')
egTrap = NotificationType((1, 3, 6, 1, 4, 1, 14941, 1) + (0,1)).setObjects(("EXAGRID-MIB", "egEventParamsName"), ("EXAGRID-MIB", "egEventParamsId"), ("EXAGRID-MIB", "egEventParamsCreateTime"), ("EXAGRID-MIB", "egEventParamsCreateTimeRaw"), ("EXAGRID-MIB", "egEventParamsGridName"), ("EXAGRID-MIB", "egEventParamsSiteName"), ("EXAGRID-MIB", "egEventParamsSiteId"), ("EXAGRID-MIB", "egEventParamsSeverity"), ("EXAGRID-MIB", "egEventParamsDeviceName"), ("EXAGRID-MIB", "egEventParamsDeviceId"), ("EXAGRID-MIB", "egEventParamsDeviceIp"), ("EXAGRID-MIB", "egEventParamsDeviceSerialNumber"), ("EXAGRID-MIB", "egEventParamsDupCount"), ("EXAGRID-MIB", "egEventParamsText"), ("EXAGRID-MIB", "egEventParamsDetail"))
mibBuilder.exportSymbols("EXAGRID-MIB", egEventParamsDeviceIp=egEventParamsDeviceIp, egEventParamsId=egEventParamsId, egServerAlarmState=egServerAlarmState, egLandingSpaceAvailableWholeGigabytes=egLandingSpaceAvailableWholeGigabytes, exagridExX000Series=exagridExX000Series, egPendingReplicationWholeGigabytes=egPendingReplicationWholeGigabytes, exagridRetentionSpace=exagridRetentionSpace, exagridEx21S2012A=exagridEx21S2012A, exagridEx7T2012A=exagridEx7T2012A, exagridEx4T=exagridEx4T, egEventParamsDupCount=egEventParamsDupCount, egBackupDataAvailableWholeGigabytes=egBackupDataAvailableWholeGigabytes, egEventParamsSiteName=egEventParamsSiteName, exagridEx9S=exagridEx9S, egRetentionSpaceConfiguredFractionalGigabytes=egRetentionSpaceConfiguredFractionalGigabytes, exagridPendingReplication=exagridPendingReplication, egEventParamsName=egEventParamsName, egEventParamsSiteId=egEventParamsSiteId, exagridEx2T2012A=exagridEx2T2012A, egRetentionSpaceAvailableWholeGigabytes=egRetentionSpaceAvailableWholeGigabytes, exagridEx21T2012A=exagridEx21T2012A, exagridEx3000=exagridEx3000, egLandingSpaceAvailableFractionalGigabytes=egLandingSpaceAvailableFractionalGigabytes, egEventParamsSeverity=egEventParamsSeverity, exagridTraps=exagridTraps, exagridEx7T=exagridEx7T, exagridEx2T=exagridEx2T, exagrid=exagrid, exagridEx4T2012A=exagridEx4T2012A, exagridEx5T2012A=exagridEx5T2012A, egBackupDataSpaceConsumedWholeGigabytes=egBackupDataSpaceConsumedWholeGigabytes, exagridEx13S2012A=exagridEx13S2012A, egPendingReplicationFractionalGigabytes=egPendingReplicationFractionalGigabytes, egPendingDeduplicationWholeGigabytes=egPendingDeduplicationWholeGigabytes, exagridLandingSpace=exagridLandingSpace, exagridEx13T=exagridEx13T, egRetentionSpaceConfiguredWholeGigabytes=egRetentionSpaceConfiguredWholeGigabytes, exagridEx10T=exagridEx10T, exagridExGW=exagridExGW, exagridEx3T2012A=exagridEx3T2012A, egEventParamsDeviceSerialNumber=egEventParamsDeviceSerialNumber, egTrap=egTrap, exagridEx1000=exagridEx1000, exagridEx3T=exagridEx3T, egPendingDeduplicationAge=egPendingDeduplicationAge, exagridServerStatus=exagridServerStatus, egEventParamsCreateTimeRaw=egEventParamsCreateTimeRaw, exagridEx10000E=exagridEx10000E, exagridExX000=exagridExX000, egEventParamsDeviceName=egEventParamsDeviceName, exagridEx10S2012A=exagridEx10S2012A, exagridEx9T=exagridEx9T, exagridEx10S=exagridEx10S, exagridEx1T=exagridEx1T, egEventParams=egEventParams, egPendingDeduplicationFractionalGigabytes=egPendingDeduplicationFractionalGigabytes, exagridEx5000=exagridEx5000, egLandingSpaceConfiguredWholeGigabytes=egLandingSpaceConfiguredWholeGigabytes, exagridEx1T2012A=exagridEx1T2012A, exagridEx7S2012A=exagridEx7S2012A, egEventParamsDetail=egEventParamsDetail, exagridEx10T2012A=exagridEx10T2012A, egBackupDataSpaceConsumedFractionalGigabytes=egBackupDataSpaceConsumedFractionalGigabytes, exagridEx7S=exagridEx7S, exagridEx5T=exagridEx5T, exagridProductLines=exagridProductLines, egEventParamsCreateTime=egEventParamsCreateTime, egEventParamsGridName=egEventParamsGridName, exagridEx4000=exagridEx4000, exagridEx2000=exagridEx2000, exagridEx13S=exagridEx13S, egLandingSpaceConfiguredFractionalGigabytes=egLandingSpaceConfiguredFractionalGigabytes, egRetentionSpaceAvailableFractionalGigabytes=egRetentionSpaceAvailableFractionalGigabytes, exagridDeduplicationRatio=exagridDeduplicationRatio, egBackupDataAvailableFractionalGigabytes=egBackupDataAvailableFractionalGigabytes, egPendingReplicationAge=egPendingReplicationAge, exagridServerData=exagridServerData, egEventParamsDeviceId=egEventParamsDeviceId, egEventParamsText=egEventParamsText, exagridEx13T2012A=exagridEx13T2012A, exagridPendingDeduplication=exagridPendingDeduplication)
