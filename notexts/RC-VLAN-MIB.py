#
# PySNMP MIB module RC-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nortel/RC-VLAN-MIB
# Produced by pysmi-1.1.12 at Fri Jul 19 10:05:32 2024
# On host fv-az1251-884 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
PortSet, EnableValue, LPortSet, rcVlan, IdList, RcVlanIdOrNone, rcSvlan = mibBuilder.importSymbols("RAPID-CITY", "PortSet", "EnableValue", "LPortSet", "rcVlan", "IdList", "RcVlanIdOrNone", "rcSvlan")
VrfIdentifier, = mibBuilder.importSymbols("RC-VRF-MIB", "VrfIdentifier")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Counter64, TimeTicks, ModuleIdentity, Counter32, ObjectIdentity, MibIdentifier, Unsigned32, IpAddress, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "TimeTicks", "ModuleIdentity", "Counter32", "ObjectIdentity", "MibIdentifier", "Unsigned32", "IpAddress", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits")
RowStatus, TruthValue, TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TextualConvention", "DisplayString", "MacAddress")
rcVlanMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2272, 1, 3, 0))
rcVlanMib.setRevisions(('2013-10-11 00:00', '2013-03-18 00:00', '2012-12-19 00:00', '2012-08-02 00:00', '2012-07-23 00:00', '2012-06-21 00:00', '2012-02-21 00:00', '2012-02-13 00:00', '2011-12-01 00:00', '2011-09-12 00:00', '2011-05-26 00:00', '2011-04-22 00:00', '2011-03-02 00:00', '2011-01-13 00:00', '2010-09-22 00:00', '2010-09-13 00:00', '2009-09-16 00:00', '2009-06-03 00:00', '2009-03-31 00:00', '2009-03-30 00:00', '2009-03-10 00:00', '2008-08-15 00:00', '2008-08-04 00:00', '2008-07-23 00:00', '2008-06-03 00:00', '2008-05-09 00:00', '2008-03-14 00:00', '2008-03-05 00:00', '2008-02-25 00:00', '2007-11-21 00:00', '2007-10-18 00:00', '2007-10-10 00:00', '2007-04-06 00:00', '2007-03-08 00:00', '2007-01-31 00:00', '2006-12-06 00:00', '2006-05-31 00:00', '2006-02-09 00:00', '2005-11-22 00:00', '2005-08-15 00:00', '2005-08-10 00:00', '2005-04-27 00:00', '2005-03-14 00:00', '2005-02-04 00:00', '2005-01-04 00:00', '2004-12-03 00:00', '2004-11-29 00:00', '2004-11-24 00:00', '2004-11-20 00:00', '2004-10-04 00:00', '2004-09-28 00:00', '2004-09-23 00:00', '2004-09-21 00:00', '2004-09-08 00:00', '2004-08-25 00:00', '2004-07-13 00:00', '2004-06-22 00:00', '2004-06-16 00:00',))
if mibBuilder.loadTexts: rcVlanMib.setLastUpdated('201310110000Z')
if mibBuilder.loadTexts: rcVlanMib.setOrganization('Bay Networks, Rapid-City Group')
rcVlanNumVlans = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanNumVlans.setStatus('current')
rcVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2), )
if mibBuilder.loadTexts: rcVlanTable.setStatus('current')
rcVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1), ).setIndexNames((0, "RC-VLAN-MIB", "rcVlanId"))
if mibBuilder.loadTexts: rcVlanEntry.setStatus('current')
rcVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanId.setStatus('current')
rcVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanName.setStatus('current')
rcVlanColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanColor.setStatus('current')
rcVlanHighPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanHighPriority.setStatus('deprecated')
rcVlanRoutingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanRoutingEnable.setStatus('deprecated')
rcVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 6), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIfIndex.setStatus('current')
rcVlanAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("flushMacFdb", 2), ("flushArp", 3), ("flushIp", 4), ("flushDynMemb", 5), ("all", 6), ("flushSnoopMemb", 7), ("triggerRipUpdate", 8), ("flushSnoopMRtr", 9), ("flushIpRsmltEdgePeer", 10), ("flushWlanFdb", 11))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanAction.setStatus('current')
rcVlanResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("fail", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanResult.setStatus('current')
rcVlanStgId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanStgId.setStatus('current')
rcVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("byPort", 1), ("byIpSubnet", 2), ("byProtocolId", 3), ("bySrcMac", 4), ("byDstMcast", 5), ("bySvlan", 6), ("byIds", 7), ("byPortIp", 8), ("byPortEvpn", 9), ("byPortDefault", 10), ("spbm-bvlan", 11), ("spbm-switchedUni", 12), ("private", 13)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanType.setStatus('current')
rcVlanPortMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 11), PortSet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanPortMembers.setStatus('current')
rcVlanActiveMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 12), PortSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanActiveMembers.setStatus('current')
rcVlanStaticMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 13), PortSet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanStaticMembers.setStatus('current')
rcVlanNotAllowToJoin = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 14), PortSet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanNotAllowToJoin.setStatus('current')
rcVlanProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("none", 0), ("ip", 1), ("ipx802dot3", 2), ("ipx802dot2", 3), ("ipxSnap", 4), ("ipxEthernet2", 5), ("appleTalk", 6), ("decLat", 7), ("decOther", 8), ("sna802dot2", 9), ("snaEthernet2", 10), ("netBios", 11), ("xns", 12), ("vines", 13), ("ipV6", 14), ("usrDefined", 15), ("rarp", 16), ("pPPoE", 17), ("arp", 18)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanProtocolId.setStatus('current')
rcVlanSubnetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 16), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanSubnetAddr.setStatus('current')
rcVlanSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 17), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanSubnetMask.setStatus('current')
rcVlanAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 1000000), )).clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanAgingTime.setStatus('current')
rcVlanMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 19), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanMacAddress.setStatus('current')
rcVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanRowStatus.setStatus('current')
rcVlanIgmpSnoopEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanIgmpSnoopEnable.setStatus('deprecated')
rcVlanIgmpSnoopReportProxyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 22), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanIgmpSnoopReportProxyEnable.setStatus('deprecated')
rcVlanIgmpSnoopRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanIgmpSnoopRobustness.setStatus('deprecated')
rcVlanIgmpSnoopQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(125)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanIgmpSnoopQueryInterval.setStatus('deprecated')
rcVlanIgmpSnoopMRouterPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 25), PortSet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanIgmpSnoopMRouterPorts.setStatus('deprecated')
rcVlanUserDefinedPid = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 26), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanUserDefinedPid.setStatus('current')
rcVlanIgmpSnoopActiveMRouterPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 27), PortSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIgmpSnoopActiveMRouterPorts.setStatus('deprecated')
rcVlanProtocolIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 28), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanProtocolIds.setStatus('current')
rcVlanIgmpSnoopActiveQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 29), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIgmpSnoopActiveQuerier.setStatus('deprecated')
rcVlanIgmpSnoopMRouterExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIgmpSnoopMRouterExpiration.setStatus('deprecated')
rcVlanIgmpSnoopQuerierPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 31), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIgmpSnoopQuerierPort.setStatus('deprecated')
rcVlanUserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanUserPriority.setStatus('current')
rcVlanQosLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7))).clone('level1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanQosLevel.setStatus('current')
rcVlanTosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanTosValue.setStatus('current')
rcVlanEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ethernet2", 1), ("llc", 2), ("snap", 3), ("all", 4), ("notapplicable", 5))).clone('notapplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanEncap.setStatus('current')
rcVlanFirewallVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("naap", 2), ("enforceable", 3), ("peering", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanFirewallVlanType.setStatus('current')
rcVlanFdbAging = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanFdbAging.setStatus('current')
rcVlanUpdateDynamicMacQosLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 38), EnableValue().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanUpdateDynamicMacQosLevel.setStatus('current')
rcVlanUserDefinedPidList = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 39), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanUserDefinedPidList.setStatus('current')
rcVlanIgmpVer1SnoopMRouterPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 40), PortSet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanIgmpVer1SnoopMRouterPorts.setStatus('current')
rcVlanIgmpVer2SnoopMRouterPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 41), PortSet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanIgmpVer2SnoopMRouterPorts.setStatus('current')
rcVlanTlsIpmc = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 42), EnableValue().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanTlsIpmc.setStatus('current')
rcVlanFirewallClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanFirewallClusterId.setStatus('current')
rcVlanOspfPassivePortMember = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 44), PortSet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanOspfPassivePortMember.setStatus('current')
rcVlanUnkDstMacDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 45), EnableValue().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanUnkDstMacDiscard.setStatus('current')
rcVlanNlbMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("nlbAdminDisable", 0), ("nlbAdminIgmpMcast", 1), ("nlbAdminMulticast", 2), ("nlbAdminUnicast", 4))).clone('nlbAdminDisable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanNlbMode.setStatus('current')
rcVlanOperNlbMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("nlbOperDisable", 0), ("nlbOperIgmpMcast", 1), ("nlbOperMulticast", 2), ("nlbOperUnicast", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanOperNlbMode.setStatus('current')
rcVlanVrfId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 48), VrfIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanVrfId.setStatus('current')
rcVlanVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanVrfName.setStatus('current')
rcVlanMgmtVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 50), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanMgmtVlan.setStatus('current')
rcVlanApplyBtagEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 51), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanApplyBtagEthertype.setStatus('current')
rcVlanMmrp = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 52), EnableValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanMmrp.setStatus('current')
rcVlanSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamicMvmp", 2), ("dynamicGvrp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanSource.setStatus('current')
rcVlanNodalMepList = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 54), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 408))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanNodalMepList.setStatus('current')
rcVlanNumOfNodalMep = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanNumOfNodalMep.setStatus('current')
rcVlanNodalMipLevelList = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanNodalMipLevelList.setStatus('current')
rcVlanNumOfNodalMipLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanNumOfNodalMipLevel.setStatus('current')
rcVlanDhcpOption82Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 58), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanDhcpOption82Enabled.setStatus('current')
rcVlanIpMultinettingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 59), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanIpMultinettingEnable.setStatus('current')
rcVlanAssociatedIpMultinettingVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanAssociatedIpMultinettingVlan.setStatus('current')
rcVlanPlsbIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPlsbIsid.setStatus('current')
rcVlanVoiceEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 62), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanVoiceEnabled.setStatus('current')
rcVlanRmonEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 63), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanRmonEnable.setStatus('current')
rcVlanIpsecEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 64), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanIpsecEnable.setStatus('current')
rcVlanLPortMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 65), LPortSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanLPortMembers.setStatus('current')
rcVlanLPortActiveMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 66), LPortSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanLPortActiveMembers.setStatus('current')
rcVlanLPortStaticMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 67), LPortSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanLPortStaticMembers.setStatus('current')
rcVlanLPortNotAllowToJoin = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 68), LPortSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanLPortNotAllowToJoin.setStatus('current')
rcVlanRspanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 69), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanRspanEnabled.setStatus('current')
rcVlanSpbMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 70), EnableValue().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanSpbMcast.setStatus('current')
rcVlanSecondaryVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 71), RcVlanIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanSecondaryVlanId.setStatus('current')
rcVlanSecondaryIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanSecondaryIsid.setStatus('current')
rcVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3), )
if mibBuilder.loadTexts: rcVlanPortTable.setStatus('current')
rcVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1), ).setIndexNames((0, "RC-VLAN-MIB", "rcVlanPortIndex"))
if mibBuilder.loadTexts: rcVlanPortEntry.setStatus('current')
rcVlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanPortIndex.setStatus('current')
rcVlanPortNumVlanIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanPortNumVlanIds.setStatus('current')
rcVlanPortVlanIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 3), IdList().subtype(subtypeSpec=ValueSizeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortVlanIds.setStatus('current')
rcVlanPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("access", 1), ("trunk", 2))).clone('access')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortType.setStatus('current')
rcVlanPortDiscardTaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortDiscardTaggedFrames.setStatus('current')
rcVlanPortDiscardUntaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortDiscardUntaggedFrames.setStatus('current')
rcVlanPortDefaultVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortDefaultVlanId.setStatus('current')
rcVlanPortPerformTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("tagPvidOnly", 3), ("untagPvidOnly", 4))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortPerformTagging.setStatus('current')
rcVlanPortSVlanPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("uni", 2), ("nni", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortSVlanPortType.setStatus('current')
rcVlanPortLoopDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortLoopDetect.setStatus('current')
rcVlanPortFirstPortInOpid = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 11), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanPortFirstPortInOpid.setStatus('current')
rcVlanPortLastPortInOpid = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 12), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanPortLastPortInOpid.setStatus('current')
rcVlanPortUntagDefaultVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortUntagDefaultVlan.setStatus('current')
rcVlanPortLoopDetectAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("portDown", 1), ("vlanBlock", 2), ("macDiscard", 3))).clone('portDown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortLoopDetectAction.setStatus('current')
rcVlanPortArpDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortArpDetect.setStatus('current')
rcVlanPortSpoofDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortSpoofDetect.setStatus('current')
rcVlanPortRemarking = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 17), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortRemarking.setStatus('current')
rcVlanPortClassificationSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 18), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortClassificationSubnet.setStatus('current')
rcVlanPortClassificationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 19), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortClassificationProtocol.setStatus('current')
rcVlanPortClassificationPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sourceMac", 1), ("subnet", 2))).clone('sourceMac')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortClassificationPrec.setStatus('current')
rcVlanPortVlanIdList = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortVlanIdList.setStatus('current')
rcVlanPortClassificationSourceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 22), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortClassificationSourceMac.setStatus('current')
rcVlanPortPrivateVlanPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("trunk", 1), ("isolated", 2), ("promiscuous", 3), ("none", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortPrivateVlanPortType.setStatus('current')
rcVlanMacTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 3, 4), )
if mibBuilder.loadTexts: rcVlanMacTable.setStatus('current')
rcVlanMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 3, 4, 1), ).setIndexNames((0, "RC-VLAN-MIB", "rcVlanMacVlanId"), (0, "RC-VLAN-MIB", "rcVlanMacAddr"))
if mibBuilder.loadTexts: rcVlanMacEntry.setStatus('current')
rcVlanMacVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanMacVlanId.setStatus('current')
rcVlanMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanMacAddr.setStatus('current')
rcVlanMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanMacRowStatus.setStatus('current')
rcVlanIgmpSnoopNumGroups = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIgmpSnoopNumGroups.setStatus('current')
rcVlanIgmpSnoopTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 3, 6), )
if mibBuilder.loadTexts: rcVlanIgmpSnoopTable.setStatus('deprecated')
rcVlanIgmpSnoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 3, 6, 1), ).setIndexNames((0, "RC-VLAN-MIB", "rcVlanIgmpSnoopVlanId"), (0, "RC-VLAN-MIB", "rcVlanIgmpSnoopIpAddress"), (0, "RC-VLAN-MIB", "rcVlanIgmpSnoopIfIndex"), (0, "RC-VLAN-MIB", "rcVlanIgmpSnoopMember"))
if mibBuilder.loadTexts: rcVlanIgmpSnoopEntry.setStatus('deprecated')
rcVlanIgmpSnoopVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIgmpSnoopVlanId.setStatus('deprecated')
rcVlanIgmpSnoopIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIgmpSnoopIpAddress.setStatus('deprecated')
rcVlanIgmpSnoopIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 6, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIgmpSnoopIfIndex.setStatus('deprecated')
rcVlanIgmpSnoopMember = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIgmpSnoopMember.setStatus('deprecated')
rcVlanIgmpSnoopExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIgmpSnoopExpiration.setStatus('deprecated')
rcVlanIgmpSnoopType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2), ("blocked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIgmpSnoopType.setStatus('deprecated')
rcVlanIgmpSnoopStaticTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 3, 7), )
if mibBuilder.loadTexts: rcVlanIgmpSnoopStaticTable.setStatus('deprecated')
rcVlanIgmpSnoopStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 3, 7, 1), ).setIndexNames((0, "RC-VLAN-MIB", "rcVlanIgmpSnoopStaticVlanId"), (0, "RC-VLAN-MIB", "rcVlanIgmpSnoopStaticIpAddress"))
if mibBuilder.loadTexts: rcVlanIgmpSnoopStaticEntry.setStatus('deprecated')
rcVlanIgmpSnoopStaticVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIgmpSnoopStaticVlanId.setStatus('deprecated')
rcVlanIgmpSnoopStaticIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIgmpSnoopStaticIpAddress.setStatus('deprecated')
rcVlanIgmpSnoopStaticMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 7, 1, 3), PortSet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanIgmpSnoopStaticMemberPorts.setStatus('deprecated')
rcVlanIgmpSnoopStaticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanIgmpSnoopStaticRowStatus.setStatus('deprecated')
rcVlanIgmpSnoopStaticNotAllowedToJoin = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 7, 1, 5), PortSet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanIgmpSnoopStaticNotAllowedToJoin.setStatus('deprecated')
rcVlanIgmpSnoopAccessTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 3, 8), )
if mibBuilder.loadTexts: rcVlanIgmpSnoopAccessTable.setStatus('deprecated')
rcVlanIgmpSnoopAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 3, 8, 1), ).setIndexNames((0, "RC-VLAN-MIB", "rcVlanIgmpSnoopAccessVlanId"), (0, "RC-VLAN-MIB", "rcVlanIgmpSnoopAccessGrpAddr"), (0, "RC-VLAN-MIB", "rcVlanIgmpSnoopAccessHostAddr"), (0, "RC-VLAN-MIB", "rcVlanIgmpSnoopAccessHostMask"))
if mibBuilder.loadTexts: rcVlanIgmpSnoopAccessEntry.setStatus('deprecated')
rcVlanIgmpSnoopAccessVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIgmpSnoopAccessVlanId.setStatus('deprecated')
rcVlanIgmpSnoopAccessGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIgmpSnoopAccessGrpAddr.setStatus('deprecated')
rcVlanIgmpSnoopAccessHostAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 8, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIgmpSnoopAccessHostAddr.setStatus('deprecated')
rcVlanIgmpSnoopAccessHostMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 8, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIgmpSnoopAccessHostMask.setStatus('deprecated')
rcVlanIgmpSnoopAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("denyTx", 1), ("denyRx", 2), ("denyBoth", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanIgmpSnoopAccessMode.setStatus('deprecated')
rcVlanIgmpSnoopAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 8, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanIgmpSnoopAccessRowStatus.setStatus('deprecated')
rcVlanIgmpSnoopSenderTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 3, 9), )
if mibBuilder.loadTexts: rcVlanIgmpSnoopSenderTable.setStatus('deprecated')
rcVlanIgmpSnoopSenderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 3, 9, 1), ).setIndexNames((0, "RC-VLAN-MIB", "rcVlanIgmpSnoopSenderVlanId"), (0, "RC-VLAN-MIB", "rcVlanIgmpSnoopSenderIpAddress"), (0, "RC-VLAN-MIB", "rcVlanIgmpSnoopSenderIfIndex"), (0, "RC-VLAN-MIB", "rcVlanIgmpSnoopSenderMember"))
if mibBuilder.loadTexts: rcVlanIgmpSnoopSenderEntry.setStatus('deprecated')
rcVlanIgmpSnoopSenderVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIgmpSnoopSenderVlanId.setStatus('deprecated')
rcVlanIgmpSnoopSenderIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIgmpSnoopSenderIpAddress.setStatus('deprecated')
rcVlanIgmpSnoopSenderIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 9, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIgmpSnoopSenderIfIndex.setStatus('deprecated')
rcVlanIgmpSnoopSenderMember = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 9, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIgmpSnoopSenderMember.setStatus('deprecated')
rcVlanIgmpSnoopSenderAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("flushEntry", 1), ("flushGrp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanIgmpSnoopSenderAction.setStatus('deprecated')
rcVlanLoopDetectedTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 3, 10), )
if mibBuilder.loadTexts: rcVlanLoopDetectedTable.setStatus('current')
rcVlanLoopDetectedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 3, 10, 1), ).setIndexNames((0, "RC-VLAN-MIB", "rcVlanLoopDetectedPortIndex"), (0, "RC-VLAN-MIB", "rcVlanLoopDetectedVlanId"))
if mibBuilder.loadTexts: rcVlanLoopDetectedEntry.setStatus('current')
rcVlanLoopDetectedPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanLoopDetectedPortIndex.setStatus('current')
rcVlanLoopDetectedVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanLoopDetectedVlanId.setStatus('current')
rcVlanLoopDetectedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanLoopDetectedValue.setStatus('current')
rcVlanDsapSsapTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 3, 11), )
if mibBuilder.loadTexts: rcVlanDsapSsapTable.setStatus('current')
rcVlanDsapSsapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 3, 11, 1), ).setIndexNames((0, "RC-VLAN-MIB", "rcVlanDsapSsapVlanId"), (0, "RC-VLAN-MIB", "rcVlanDsapSsapPid"))
if mibBuilder.loadTexts: rcVlanDsapSsapEntry.setStatus('current')
rcVlanDsapSsapVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: rcVlanDsapSsapVlanId.setStatus('current')
rcVlanDsapSsapPid = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: rcVlanDsapSsapPid.setStatus('current')
rcVlanDsapSsapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanDsapSsapRowStatus.setStatus('current')
rcVlanNewLoopDetectedTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 3, 12), )
if mibBuilder.loadTexts: rcVlanNewLoopDetectedTable.setStatus('current')
rcVlanNewLoopDetectedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 3, 12, 1), ).setIndexNames((0, "RC-VLAN-MIB", "rcVlanNewLoopDetectedPortIndex"), (0, "RC-VLAN-MIB", "rcVlanNewLoopDetectedVlanId"), (0, "RC-VLAN-MIB", "rcVlanNewLoopDetectedMac"))
if mibBuilder.loadTexts: rcVlanNewLoopDetectedEntry.setStatus('current')
rcVlanNewLoopDetectedPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 12, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rcVlanNewLoopDetectedPortIndex.setStatus('current')
rcVlanNewLoopDetectedVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: rcVlanNewLoopDetectedVlanId.setStatus('current')
rcVlanNewLoopDetectedMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 12, 1, 3), MacAddress())
if mibBuilder.loadTexts: rcVlanNewLoopDetectedMac.setStatus('current')
rcVlanNewLoopDetectedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("portDown", 1), ("vlanBlock", 2), ("macDiscard", 3))).clone('portDown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanNewLoopDetectedAction.setStatus('current')
rcVlanNewLoopDetectedSmltRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 12, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanNewLoopDetectedSmltRemote.setStatus('current')
rcVlanClearMacRecordTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 3, 17), )
if mibBuilder.loadTexts: rcVlanClearMacRecordTable.setStatus('current')
rcVlanClearMacRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 3, 17, 1), ).setIndexNames((0, "RC-VLAN-MIB", "rcVlanClearMacRecordAddr"))
if mibBuilder.loadTexts: rcVlanClearMacRecordEntry.setStatus('current')
rcVlanClearMacRecordAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 17, 1, 1), MacAddress())
if mibBuilder.loadTexts: rcVlanClearMacRecordAddr.setStatus('current')
rcVlanClearMacRecordVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanClearMacRecordVlanId.setStatus('current')
rcVlanClearMacRecordAllVlanIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 17, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanClearMacRecordAllVlanIds.setStatus('current')
rcVlanClearMacRecordForceDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 17, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanClearMacRecordForceDelete.setStatus('current')
rcVlanClearMacRecordLCForceDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 17, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanClearMacRecordLCForceDelete.setStatus('current')
rcVlanPortCfmMepTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 3, 13), )
if mibBuilder.loadTexts: rcVlanPortCfmMepTable.setStatus('current')
rcVlanPortCfmMepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 3, 13, 1), ).setIndexNames((0, "RC-VLAN-MIB", "rcVlanPortCfmMepVlanId"), (0, "RC-VLAN-MIB", "rcVlanPortCfmMepPort"))
if mibBuilder.loadTexts: rcVlanPortCfmMepEntry.setStatus('current')
rcVlanPortCfmMepVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: rcVlanPortCfmMepVlanId.setStatus('current')
rcVlanPortCfmMepPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 13, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: rcVlanPortCfmMepPort.setStatus('current')
rcVlanPortCfmMepMepList = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 13, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 440))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanPortCfmMepMepList.setStatus('current')
rcVlanPortCfmMepNumOfMep = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanPortCfmMepNumOfMep.setStatus('current')
rcVlanPortCfmMepRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 13, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanPortCfmMepRowStatus.setStatus('current')
rcVlanPortCfmMipTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 3, 14), )
if mibBuilder.loadTexts: rcVlanPortCfmMipTable.setStatus('current')
rcVlanPortCfmMipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 3, 14, 1), ).setIndexNames((0, "RC-VLAN-MIB", "rcVlanPortCfmMipVlanId"), (0, "RC-VLAN-MIB", "rcVlanPortCfmMipPort"))
if mibBuilder.loadTexts: rcVlanPortCfmMipEntry.setStatus('current')
rcVlanPortCfmMipVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: rcVlanPortCfmMipVlanId.setStatus('current')
rcVlanPortCfmMipPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 14, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: rcVlanPortCfmMipPort.setStatus('current')
rcVlanPortCfmMipMipList = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 14, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 440))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanPortCfmMipMipList.setStatus('current')
rcVlanPortCfmMipNumOfMip = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanPortCfmMipNumOfMip.setStatus('current')
rcVlanPortCfmMipRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 14, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanPortCfmMipRowStatus.setStatus('current')
rcVlanExtFilterSvcTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 3, 15), )
if mibBuilder.loadTexts: rcVlanExtFilterSvcTable.setStatus('current')
rcVlanExtFilterSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 3, 15, 1), ).setIndexNames((0, "RC-VLAN-MIB", "rcVlanExtFilterSvcVlanId"))
if mibBuilder.loadTexts: rcVlanExtFilterSvcEntry.setStatus('current')
rcVlanExtFilterSvcVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: rcVlanExtFilterSvcVlanId.setStatus('current')
rcVlanExtFilterSvcFwdAllPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 15, 1, 2), PortSet()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanExtFilterSvcFwdAllPorts.setStatus('current')
rcVlanExtFilterSvcFwdUnregPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 15, 1, 3), PortSet()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanExtFilterSvcFwdUnregPorts.setStatus('current')
rcVlanExtFilterSvcFilterUnregPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 15, 1, 4), PortSet()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanExtFilterSvcFilterUnregPorts.setStatus('current')
rcSvlanGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 35, 1))
rcSvlanActiveLevel = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcSvlanActiveLevel.setStatus('current')
rcSvlanTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 35, 2), )
if mibBuilder.loadTexts: rcSvlanTable.setStatus('current')
rcSvlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 35, 2, 1), ).setIndexNames((0, "RC-VLAN-MIB", "rcSvlanId"))
if mibBuilder.loadTexts: rcSvlanEntry.setStatus('current')
rcSvlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 35, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcSvlanId.setStatus('current')
rcSvlanLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 35, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcSvlanLevel.setStatus('current')
rcSvlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 35, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcSvlanEtherType.setStatus('current')
rcVlanPortSpoofDetectTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 3, 16), )
if mibBuilder.loadTexts: rcVlanPortSpoofDetectTable.setStatus('current')
rcVlanPortSpoofDetectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 3, 16, 1), ).setIndexNames((0, "RC-VLAN-MIB", "rcVlanPortSpoofDetectIndex"))
if mibBuilder.loadTexts: rcVlanPortSpoofDetectEntry.setStatus('current')
rcVlanPortSpoofDetectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: rcVlanPortSpoofDetectIndex.setStatus('current')
rcVlanPortSpoofDetectSpoofedIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 16, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanPortSpoofDetectSpoofedIpAddressType.setStatus('current')
rcVlanPortSpoofDetectSpoofedIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 16, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanPortSpoofDetectSpoofedIpAddress.setStatus('current')
rcVlanPortSpoofDetectSpoofedMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 16, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanPortSpoofDetectSpoofedMacAddress.setStatus('current')
rcVlanPortSpoofDetectPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 16, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanPortSpoofDetectPort.setStatus('current')
rcVlanPortSpoofDetectVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 16, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanPortSpoofDetectVlanId.setStatus('current')
mibBuilder.exportSymbols("RC-VLAN-MIB", rcVlanNlbMode=rcVlanNlbMode, rcSvlanTable=rcSvlanTable, rcVlanIgmpSnoopActiveQuerier=rcVlanIgmpSnoopActiveQuerier, rcVlanLoopDetectedEntry=rcVlanLoopDetectedEntry, rcVlanMacAddress=rcVlanMacAddress, rcVlanPortDiscardTaggedFrames=rcVlanPortDiscardTaggedFrames, rcVlanIgmpSnoopNumGroups=rcVlanIgmpSnoopNumGroups, rcVlanNotAllowToJoin=rcVlanNotAllowToJoin, rcVlanIgmpSnoopStaticNotAllowedToJoin=rcVlanIgmpSnoopStaticNotAllowedToJoin, rcVlanPortClassificationProtocol=rcVlanPortClassificationProtocol, rcVlanPortCfmMipRowStatus=rcVlanPortCfmMipRowStatus, rcVlanPortSpoofDetectTable=rcVlanPortSpoofDetectTable, rcVlanNodalMipLevelList=rcVlanNodalMipLevelList, rcVlanNewLoopDetectedVlanId=rcVlanNewLoopDetectedVlanId, rcVlanLoopDetectedValue=rcVlanLoopDetectedValue, rcVlanNumVlans=rcVlanNumVlans, rcVlanIgmpSnoopActiveMRouterPorts=rcVlanIgmpSnoopActiveMRouterPorts, rcVlanIgmpSnoopExpiration=rcVlanIgmpSnoopExpiration, rcVlanLoopDetectedTable=rcVlanLoopDetectedTable, rcVlanClearMacRecordEntry=rcVlanClearMacRecordEntry, rcVlanAction=rcVlanAction, rcVlanPortCfmMepEntry=rcVlanPortCfmMepEntry, rcVlanVrfName=rcVlanVrfName, rcVlanIgmpSnoopIfIndex=rcVlanIgmpSnoopIfIndex, rcVlanLoopDetectedVlanId=rcVlanLoopDetectedVlanId, rcVlanPortUntagDefaultVlan=rcVlanPortUntagDefaultVlan, rcVlanPortCfmMipTable=rcVlanPortCfmMipTable, rcVlanPortLastPortInOpid=rcVlanPortLastPortInOpid, rcVlanRspanEnabled=rcVlanRspanEnabled, rcVlanPortCfmMepPort=rcVlanPortCfmMepPort, rcVlanPortCfmMipNumOfMip=rcVlanPortCfmMipNumOfMip, rcVlanTlsIpmc=rcVlanTlsIpmc, rcVlanIgmpSnoopStaticRowStatus=rcVlanIgmpSnoopStaticRowStatus, rcVlanIgmpSnoopAccessTable=rcVlanIgmpSnoopAccessTable, rcVlanMacTable=rcVlanMacTable, rcVlanPortCfmMepMepList=rcVlanPortCfmMepMepList, rcSvlanGlobal=rcSvlanGlobal, rcVlanAgingTime=rcVlanAgingTime, rcVlanIgmpSnoopMember=rcVlanIgmpSnoopMember, rcVlanExtFilterSvcTable=rcVlanExtFilterSvcTable, rcVlanIgmpSnoopMRouterPorts=rcVlanIgmpSnoopMRouterPorts, rcVlanId=rcVlanId, rcVlanPortVlanIdList=rcVlanPortVlanIdList, rcVlanPortSpoofDetectPort=rcVlanPortSpoofDetectPort, rcVlanPortSpoofDetectEntry=rcVlanPortSpoofDetectEntry, rcVlanLPortActiveMembers=rcVlanLPortActiveMembers, rcVlanIgmpSnoopSenderAction=rcVlanIgmpSnoopSenderAction, rcVlanNewLoopDetectedTable=rcVlanNewLoopDetectedTable, rcVlanQosLevel=rcVlanQosLevel, rcVlanIgmpSnoopMRouterExpiration=rcVlanIgmpSnoopMRouterExpiration, rcVlanIgmpSnoopStaticIpAddress=rcVlanIgmpSnoopStaticIpAddress, rcVlanOperNlbMode=rcVlanOperNlbMode, rcVlanIpMultinettingEnable=rcVlanIpMultinettingEnable, rcVlanIgmpSnoopSenderEntry=rcVlanIgmpSnoopSenderEntry, rcVlanIgmpSnoopStaticEntry=rcVlanIgmpSnoopStaticEntry, rcVlanEncap=rcVlanEncap, rcVlanPortCfmMepVlanId=rcVlanPortCfmMepVlanId, rcVlanSecondaryIsid=rcVlanSecondaryIsid, rcVlanIgmpSnoopAccessHostMask=rcVlanIgmpSnoopAccessHostMask, rcVlanColor=rcVlanColor, rcVlanOspfPassivePortMember=rcVlanOspfPassivePortMember, rcVlanNumOfNodalMep=rcVlanNumOfNodalMep, rcVlanPortArpDetect=rcVlanPortArpDetect, rcVlanExtFilterSvcFwdAllPorts=rcVlanExtFilterSvcFwdAllPorts, rcVlanMacRowStatus=rcVlanMacRowStatus, rcVlanPortSpoofDetectVlanId=rcVlanPortSpoofDetectVlanId, rcVlanIgmpVer1SnoopMRouterPorts=rcVlanIgmpVer1SnoopMRouterPorts, rcVlanNewLoopDetectedPortIndex=rcVlanNewLoopDetectedPortIndex, rcVlanPortDefaultVlanId=rcVlanPortDefaultVlanId, rcVlanIgmpSnoopAccessEntry=rcVlanIgmpSnoopAccessEntry, rcVlanTable=rcVlanTable, rcVlanRoutingEnable=rcVlanRoutingEnable, rcVlanIgmpSnoopSenderVlanId=rcVlanIgmpSnoopSenderVlanId, rcVlanPortCfmMipEntry=rcVlanPortCfmMipEntry, rcVlanExtFilterSvcEntry=rcVlanExtFilterSvcEntry, rcVlanRowStatus=rcVlanRowStatus, rcVlanHighPriority=rcVlanHighPriority, rcVlanApplyBtagEthertype=rcVlanApplyBtagEthertype, rcVlanIgmpSnoopType=rcVlanIgmpSnoopType, rcVlanAssociatedIpMultinettingVlan=rcVlanAssociatedIpMultinettingVlan, rcVlanIgmpSnoopAccessGrpAddr=rcVlanIgmpSnoopAccessGrpAddr, rcVlanType=rcVlanType, rcVlanExtFilterSvcFwdUnregPorts=rcVlanExtFilterSvcFwdUnregPorts, rcVlanClearMacRecordTable=rcVlanClearMacRecordTable, rcVlanPortSpoofDetectSpoofedIpAddress=rcVlanPortSpoofDetectSpoofedIpAddress, rcVlanActiveMembers=rcVlanActiveMembers, rcVlanIgmpSnoopSenderMember=rcVlanIgmpSnoopSenderMember, rcVlanPortCfmMepTable=rcVlanPortCfmMepTable, rcVlanStaticMembers=rcVlanStaticMembers, rcVlanPortTable=rcVlanPortTable, rcVlanSubnetMask=rcVlanSubnetMask, rcVlanIgmpVer2SnoopMRouterPorts=rcVlanIgmpVer2SnoopMRouterPorts, rcVlanResult=rcVlanResult, rcVlanIgmpSnoopEntry=rcVlanIgmpSnoopEntry, rcVlanDsapSsapTable=rcVlanDsapSsapTable, rcVlanClearMacRecordAddr=rcVlanClearMacRecordAddr, rcVlanIpsecEnable=rcVlanIpsecEnable, rcVlanPortVlanIds=rcVlanPortVlanIds, rcVlanDsapSsapEntry=rcVlanDsapSsapEntry, rcVlanIgmpSnoopVlanId=rcVlanIgmpSnoopVlanId, rcVlanPortSpoofDetect=rcVlanPortSpoofDetect, rcVlanMacAddr=rcVlanMacAddr, rcVlanProtocolIds=rcVlanProtocolIds, rcVlanPortCfmMipPort=rcVlanPortCfmMipPort, rcVlanStgId=rcVlanStgId, rcVlanLPortStaticMembers=rcVlanLPortStaticMembers, rcVlanPortSpoofDetectSpoofedMacAddress=rcVlanPortSpoofDetectSpoofedMacAddress, rcVlanTosValue=rcVlanTosValue, rcVlanIgmpSnoopSenderIpAddress=rcVlanIgmpSnoopSenderIpAddress, rcVlanMib=rcVlanMib, rcVlanIgmpSnoopEnable=rcVlanIgmpSnoopEnable, rcVlanPortClassificationSourceMac=rcVlanPortClassificationSourceMac, rcVlanSubnetAddr=rcVlanSubnetAddr, rcVlanDsapSsapPid=rcVlanDsapSsapPid, rcVlanExtFilterSvcVlanId=rcVlanExtFilterSvcVlanId, rcVlanUserDefinedPid=rcVlanUserDefinedPid, rcVlanIgmpSnoopSenderIfIndex=rcVlanIgmpSnoopSenderIfIndex, rcVlanExtFilterSvcFilterUnregPorts=rcVlanExtFilterSvcFilterUnregPorts, rcVlanPortCfmMepNumOfMep=rcVlanPortCfmMepNumOfMep, rcVlanIfIndex=rcVlanIfIndex, rcVlanIgmpSnoopRobustness=rcVlanIgmpSnoopRobustness, rcVlanPortLoopDetectAction=rcVlanPortLoopDetectAction, rcVlanIgmpSnoopAccessMode=rcVlanIgmpSnoopAccessMode, rcVlanLPortNotAllowToJoin=rcVlanLPortNotAllowToJoin, rcVlanVoiceEnabled=rcVlanVoiceEnabled, rcVlanPortIndex=rcVlanPortIndex, rcVlanPortNumVlanIds=rcVlanPortNumVlanIds, rcVlanPortLoopDetect=rcVlanPortLoopDetect, rcVlanSource=rcVlanSource, rcVlanIgmpSnoopReportProxyEnable=rcVlanIgmpSnoopReportProxyEnable, rcVlanPortClassificationSubnet=rcVlanPortClassificationSubnet, rcVlanIgmpSnoopIpAddress=rcVlanIgmpSnoopIpAddress, rcVlanLPortMembers=rcVlanLPortMembers, rcVlanIgmpSnoopStaticMemberPorts=rcVlanIgmpSnoopStaticMemberPorts, rcVlanIgmpSnoopAccessHostAddr=rcVlanIgmpSnoopAccessHostAddr, rcVlanNewLoopDetectedSmltRemote=rcVlanNewLoopDetectedSmltRemote, rcVlanIgmpSnoopSenderTable=rcVlanIgmpSnoopSenderTable, rcVlanPortType=rcVlanPortType, rcVlanPortFirstPortInOpid=rcVlanPortFirstPortInOpid, rcVlanPortDiscardUntaggedFrames=rcVlanPortDiscardUntaggedFrames, rcVlanPortMembers=rcVlanPortMembers, rcVlanClearMacRecordLCForceDelete=rcVlanClearMacRecordLCForceDelete, rcVlanPortCfmMipVlanId=rcVlanPortCfmMipVlanId, rcVlanLoopDetectedPortIndex=rcVlanLoopDetectedPortIndex, rcVlanUpdateDynamicMacQosLevel=rcVlanUpdateDynamicMacQosLevel, rcVlanIgmpSnoopStaticVlanId=rcVlanIgmpSnoopStaticVlanId, rcVlanPortCfmMipMipList=rcVlanPortCfmMipMipList, rcVlanDsapSsapRowStatus=rcVlanDsapSsapRowStatus, rcVlanFdbAging=rcVlanFdbAging, rcVlanPortRemarking=rcVlanPortRemarking, rcSvlanEntry=rcSvlanEntry, rcVlanFirewallVlanType=rcVlanFirewallVlanType, rcVlanClearMacRecordForceDelete=rcVlanClearMacRecordForceDelete, PYSNMP_MODULE_ID=rcVlanMib, rcVlanNewLoopDetectedAction=rcVlanNewLoopDetectedAction, rcVlanNodalMepList=rcVlanNodalMepList, rcVlanSpbMcast=rcVlanSpbMcast, rcVlanPortSpoofDetectIndex=rcVlanPortSpoofDetectIndex, rcVlanFirewallClusterId=rcVlanFirewallClusterId, rcVlanPortPrivateVlanPortType=rcVlanPortPrivateVlanPortType, rcVlanNumOfNodalMipLevel=rcVlanNumOfNodalMipLevel, rcVlanUnkDstMacDiscard=rcVlanUnkDstMacDiscard, rcVlanEntry=rcVlanEntry, rcVlanSecondaryVlanId=rcVlanSecondaryVlanId, rcVlanMacEntry=rcVlanMacEntry, rcVlanIgmpSnoopAccessVlanId=rcVlanIgmpSnoopAccessVlanId, rcSvlanActiveLevel=rcSvlanActiveLevel, rcVlanIgmpSnoopQuerierPort=rcVlanIgmpSnoopQuerierPort, rcVlanIgmpSnoopStaticTable=rcVlanIgmpSnoopStaticTable, rcVlanUserDefinedPidList=rcVlanUserDefinedPidList, rcVlanNewLoopDetectedMac=rcVlanNewLoopDetectedMac, rcSvlanEtherType=rcSvlanEtherType, rcVlanDsapSsapVlanId=rcVlanDsapSsapVlanId, rcSvlanId=rcSvlanId, rcVlanVrfId=rcVlanVrfId, rcVlanPortCfmMepRowStatus=rcVlanPortCfmMepRowStatus, rcVlanPlsbIsid=rcVlanPlsbIsid, rcVlanPortClassificationPrec=rcVlanPortClassificationPrec, rcVlanDhcpOption82Enabled=rcVlanDhcpOption82Enabled, rcVlanIgmpSnoopTable=rcVlanIgmpSnoopTable, rcSvlanLevel=rcSvlanLevel, rcVlanMacVlanId=rcVlanMacVlanId, rcVlanPortEntry=rcVlanPortEntry, rcVlanName=rcVlanName, rcVlanMgmtVlan=rcVlanMgmtVlan, rcVlanRmonEnable=rcVlanRmonEnable, rcVlanPortSpoofDetectSpoofedIpAddressType=rcVlanPortSpoofDetectSpoofedIpAddressType, rcVlanProtocolId=rcVlanProtocolId, rcVlanIgmpSnoopQueryInterval=rcVlanIgmpSnoopQueryInterval, rcVlanPortSVlanPortType=rcVlanPortSVlanPortType, rcVlanIgmpSnoopAccessRowStatus=rcVlanIgmpSnoopAccessRowStatus, rcVlanClearMacRecordAllVlanIds=rcVlanClearMacRecordAllVlanIds, rcVlanMmrp=rcVlanMmrp, rcVlanUserPriority=rcVlanUserPriority, rcVlanPortPerformTagging=rcVlanPortPerformTagging, rcVlanNewLoopDetectedEntry=rcVlanNewLoopDetectedEntry, rcVlanClearMacRecordVlanId=rcVlanClearMacRecordVlanId)
