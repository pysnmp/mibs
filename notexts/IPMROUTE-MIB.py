#
# PySNMP MIB module IPMROUTE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/output/asn1/IPMROUTE-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 15:42:39 2024
# On host fv-az973-242 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Integer32, TimeTicks, iso, ModuleIdentity, experimental, Counter32, IpAddress, Unsigned32, MibIdentifier, Counter64, Bits, ObjectIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "iso", "ModuleIdentity", "experimental", "Counter32", "IpAddress", "Unsigned32", "MibIdentifier", "Counter64", "Bits", "ObjectIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
ipMRouteMIB = ModuleIdentity((1, 3, 6, 1, 3, 60))
ipMRouteMIB.setRevisions(('1994-11-04 11:59', '1997-01-06 00:00', '1997-05-20 00:00', '1997-12-18 00:00', '1999-02-08 00:00',))
if mibBuilder.loadTexts: ipMRouteMIB.setLastUpdated('9902080000Z')
if mibBuilder.loadTexts: ipMRouteMIB.setOrganization('IETF IDMR Working Group.')
ipMRouteMIBObjects = MibIdentifier((1, 3, 6, 1, 3, 60, 1))
ipMRoute = MibIdentifier((1, 3, 6, 1, 3, 60, 1, 1))
ipMRouteEnable = MibScalar((1, 3, 6, 1, 3, 60, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipMRouteEnable.setStatus('current')
ipMRouteTable = MibTable((1, 3, 6, 1, 3, 60, 1, 1, 2), )
if mibBuilder.loadTexts: ipMRouteTable.setStatus('current')
ipMRouteEntry = MibTableRow((1, 3, 6, 1, 3, 60, 1, 1, 2, 1), ).setIndexNames((0, "IPMROUTE-MIB", "ipMRouteGroup"), (0, "IPMROUTE-MIB", "ipMRouteSource"), (0, "IPMROUTE-MIB", "ipMRouteSourceMask"))
if mibBuilder.loadTexts: ipMRouteEntry.setStatus('current')
ipMRouteGroup = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipMRouteGroup.setStatus('current')
ipMRouteSource = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: ipMRouteSource.setStatus('current')
ipMRouteSourceMask = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 2, 1, 3), IpAddress())
if mibBuilder.loadTexts: ipMRouteSourceMask.setStatus('current')
ipMRouteUpstreamNeighbor = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteUpstreamNeighbor.setStatus('current')
ipMRouteInIfIndex = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteInIfIndex.setStatus('current')
ipMRouteUpTime = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteUpTime.setStatus('current')
ipMRouteExpiryTime = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteExpiryTime.setStatus('current')
ipMRoutePkts = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRoutePkts.setStatus('current')
ipMRouteDifferentInIfPackets = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteDifferentInIfPackets.setStatus('current')
ipMRouteOctets = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteOctets.setStatus('current')
ipMRouteProtocol = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("dvmrp", 4), ("mospf", 5), ("pimSparseDense", 6), ("cbt", 7), ("pimSparseMode", 8), ("pimDenseMode", 9), ("igmpOnly", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteProtocol.setStatus('current')
ipMRouteRtProto = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("isIs", 9), ("esIs", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14), ("idpr", 15), ("ciscoEigrp", 16), ("dvmrp", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteRtProto.setStatus('current')
ipMRouteRtAddress = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 2, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteRtAddress.setStatus('current')
ipMRouteRtMask = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 2, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteRtMask.setStatus('current')
ipMRouteRtType = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unicast", 1), ("multicast", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteRtType.setStatus('current')
ipMRouteNextHopTable = MibTable((1, 3, 6, 1, 3, 60, 1, 1, 3), )
if mibBuilder.loadTexts: ipMRouteNextHopTable.setStatus('current')
ipMRouteNextHopEntry = MibTableRow((1, 3, 6, 1, 3, 60, 1, 1, 3, 1), ).setIndexNames((0, "IPMROUTE-MIB", "ipMRouteNextHopGroup"), (0, "IPMROUTE-MIB", "ipMRouteNextHopSource"), (0, "IPMROUTE-MIB", "ipMRouteNextHopSourceMask"), (0, "IPMROUTE-MIB", "ipMRouteNextHopIfIndex"), (0, "IPMROUTE-MIB", "ipMRouteNextHopAddress"))
if mibBuilder.loadTexts: ipMRouteNextHopEntry.setStatus('current')
ipMRouteNextHopGroup = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipMRouteNextHopGroup.setStatus('current')
ipMRouteNextHopSource = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: ipMRouteNextHopSource.setStatus('current')
ipMRouteNextHopSourceMask = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 3, 1, 3), IpAddress())
if mibBuilder.loadTexts: ipMRouteNextHopSourceMask.setStatus('current')
ipMRouteNextHopIfIndex = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: ipMRouteNextHopIfIndex.setStatus('current')
ipMRouteNextHopAddress = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 3, 1, 5), IpAddress())
if mibBuilder.loadTexts: ipMRouteNextHopAddress.setStatus('current')
ipMRouteNextHopState = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pruned", 1), ("forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteNextHopState.setStatus('current')
ipMRouteNextHopUpTime = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 3, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteNextHopUpTime.setStatus('current')
ipMRouteNextHopExpiryTime = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 3, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteNextHopExpiryTime.setStatus('current')
ipMRouteNextHopClosestMemberHops = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteNextHopClosestMemberHops.setStatus('current')
ipMRouteNextHopProtocol = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("dvmrp", 4), ("mospf", 5), ("pimSparseDense", 6), ("cbt", 7), ("pimSparseMode", 8), ("pimDenseMode", 9), ("igmpOnly", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteNextHopProtocol.setStatus('current')
ipMRouteNextHopPkts = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteNextHopPkts.setStatus('current')
ipMRouteInterfaceTable = MibTable((1, 3, 6, 1, 3, 60, 1, 1, 4), )
if mibBuilder.loadTexts: ipMRouteInterfaceTable.setStatus('current')
ipMRouteInterfaceEntry = MibTableRow((1, 3, 6, 1, 3, 60, 1, 1, 4, 1), ).setIndexNames((0, "IPMROUTE-MIB", "ipMRouteInterfaceIfIndex"))
if mibBuilder.loadTexts: ipMRouteInterfaceEntry.setStatus('current')
ipMRouteInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: ipMRouteInterfaceIfIndex.setStatus('current')
ipMRouteInterfaceTtl = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipMRouteInterfaceTtl.setStatus('current')
ipMRouteInterfaceProtocol = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("dvmrp", 4), ("mospf", 5), ("pimSparseDense", 6), ("cbt", 7), ("pimSparseMode", 8), ("pimDenseMode", 9), ("igmpOnly", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteInterfaceProtocol.setStatus('current')
ipMRouteInterfaceRateLimit = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipMRouteInterfaceRateLimit.setStatus('current')
ipMRouteInterfaceInMcastOctets = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteInterfaceInMcastOctets.setStatus('current')
ipMRouteInterfaceOutMcastOctets = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteInterfaceOutMcastOctets.setStatus('current')
ipMRouteBoundaryTable = MibTable((1, 3, 6, 1, 3, 60, 1, 1, 5), )
if mibBuilder.loadTexts: ipMRouteBoundaryTable.setStatus('current')
ipMRouteBoundaryEntry = MibTableRow((1, 3, 6, 1, 3, 60, 1, 1, 5, 1), ).setIndexNames((0, "IPMROUTE-MIB", "ipMRouteBoundaryIfIndex"), (0, "IPMROUTE-MIB", "ipMRouteBoundaryAddress"), (0, "IPMROUTE-MIB", "ipMRouteBoundaryAddressMask"))
if mibBuilder.loadTexts: ipMRouteBoundaryEntry.setStatus('current')
ipMRouteBoundaryIfIndex = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: ipMRouteBoundaryIfIndex.setStatus('current')
ipMRouteBoundaryAddress = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: ipMRouteBoundaryAddress.setStatus('current')
ipMRouteBoundaryAddressMask = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 5, 1, 3), IpAddress())
if mibBuilder.loadTexts: ipMRouteBoundaryAddressMask.setStatus('current')
ipMRouteBoundaryStatus = MibTableColumn((1, 3, 6, 1, 3, 60, 1, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipMRouteBoundaryStatus.setStatus('current')
ipMRouteMIBConformance = MibIdentifier((1, 3, 6, 1, 3, 60, 2))
ipMRouteMIBCompliances = MibIdentifier((1, 3, 6, 1, 3, 60, 2, 1))
ipMRouteMIBGroups = MibIdentifier((1, 3, 6, 1, 3, 60, 2, 2))
ipMRouteMIBCompliance = ModuleCompliance((1, 3, 6, 1, 3, 60, 2, 1, 1)).setObjects(("IPMROUTE-MIB", "ipMRouteMIBBasicGroup"), ("IPMROUTE-MIB", "ipMRouteMIBRouteGroup"), ("IPMROUTE-MIB", "ipMRouteMIBBoundaryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipMRouteMIBCompliance = ipMRouteMIBCompliance.setStatus('current')
ipMRouteMIBBasicGroup = ObjectGroup((1, 3, 6, 1, 3, 60, 2, 2, 1)).setObjects(("IPMROUTE-MIB", "ipMRouteEnable"), ("IPMROUTE-MIB", "ipMRouteUpstreamNeighbor"), ("IPMROUTE-MIB", "ipMRouteInIfIndex"), ("IPMROUTE-MIB", "ipMRouteUpTime"), ("IPMROUTE-MIB", "ipMRouteExpiryTime"), ("IPMROUTE-MIB", "ipMRoutePkts"), ("IPMROUTE-MIB", "ipMRouteDifferentInIfPackets"), ("IPMROUTE-MIB", "ipMRouteOctets"), ("IPMROUTE-MIB", "ipMRouteNextHopState"), ("IPMROUTE-MIB", "ipMRouteNextHopUpTime"), ("IPMROUTE-MIB", "ipMRouteNextHopExpiryTime"), ("IPMROUTE-MIB", "ipMRouteNextHopProtocol"), ("IPMROUTE-MIB", "ipMRouteNextHopPkts"), ("IPMROUTE-MIB", "ipMRouteInterfaceTtl"), ("IPMROUTE-MIB", "ipMRouteInterfaceProtocol"), ("IPMROUTE-MIB", "ipMRouteInterfaceRateLimit"), ("IPMROUTE-MIB", "ipMRouteInterfaceInMcastOctets"), ("IPMROUTE-MIB", "ipMRouteInterfaceOutMcastOctets"), ("IPMROUTE-MIB", "ipMRouteProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipMRouteMIBBasicGroup = ipMRouteMIBBasicGroup.setStatus('current')
ipMRouteMIBHopCountGroup = ObjectGroup((1, 3, 6, 1, 3, 60, 2, 2, 2)).setObjects(("IPMROUTE-MIB", "ipMRouteNextHopClosestMemberHops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipMRouteMIBHopCountGroup = ipMRouteMIBHopCountGroup.setStatus('current')
ipMRouteMIBBoundaryGroup = ObjectGroup((1, 3, 6, 1, 3, 60, 2, 2, 3)).setObjects(("IPMROUTE-MIB", "ipMRouteBoundaryStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipMRouteMIBBoundaryGroup = ipMRouteMIBBoundaryGroup.setStatus('current')
ipMRouteMIBPktsOutGroup = ObjectGroup((1, 3, 6, 1, 3, 60, 2, 2, 4)).setObjects(("IPMROUTE-MIB", "ipMRouteNextHopPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipMRouteMIBPktsOutGroup = ipMRouteMIBPktsOutGroup.setStatus('current')
ipMRouteMIBRouteGroup = ObjectGroup((1, 3, 6, 1, 3, 60, 2, 2, 6)).setObjects(("IPMROUTE-MIB", "ipMRouteRtProto"), ("IPMROUTE-MIB", "ipMRouteRtAddress"), ("IPMROUTE-MIB", "ipMRouteRtMask"), ("IPMROUTE-MIB", "ipMRouteRtType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipMRouteMIBRouteGroup = ipMRouteMIBRouteGroup.setStatus('current')
mibBuilder.exportSymbols("IPMROUTE-MIB", ipMRouteGroup=ipMRouteGroup, ipMRouteBoundaryAddressMask=ipMRouteBoundaryAddressMask, ipMRouteMIBConformance=ipMRouteMIBConformance, ipMRouteBoundaryAddress=ipMRouteBoundaryAddress, ipMRouteProtocol=ipMRouteProtocol, ipMRouteUpstreamNeighbor=ipMRouteUpstreamNeighbor, ipMRouteInterfaceRateLimit=ipMRouteInterfaceRateLimit, ipMRouteBoundaryIfIndex=ipMRouteBoundaryIfIndex, ipMRouteMIBBasicGroup=ipMRouteMIBBasicGroup, ipMRoute=ipMRoute, ipMRoutePkts=ipMRoutePkts, ipMRouteNextHopTable=ipMRouteNextHopTable, ipMRouteInterfaceTable=ipMRouteInterfaceTable, ipMRouteNextHopClosestMemberHops=ipMRouteNextHopClosestMemberHops, ipMRouteOctets=ipMRouteOctets, ipMRouteMIBCompliances=ipMRouteMIBCompliances, ipMRouteInterfaceEntry=ipMRouteInterfaceEntry, ipMRouteMIBObjects=ipMRouteMIBObjects, ipMRouteMIBPktsOutGroup=ipMRouteMIBPktsOutGroup, ipMRouteMIBRouteGroup=ipMRouteMIBRouteGroup, ipMRouteUpTime=ipMRouteUpTime, ipMRouteNextHopExpiryTime=ipMRouteNextHopExpiryTime, ipMRouteNextHopEntry=ipMRouteNextHopEntry, ipMRouteExpiryTime=ipMRouteExpiryTime, ipMRouteSourceMask=ipMRouteSourceMask, ipMRouteSource=ipMRouteSource, ipMRouteNextHopGroup=ipMRouteNextHopGroup, ipMRouteNextHopSourceMask=ipMRouteNextHopSourceMask, ipMRouteInIfIndex=ipMRouteInIfIndex, ipMRouteInterfaceOutMcastOctets=ipMRouteInterfaceOutMcastOctets, PYSNMP_MODULE_ID=ipMRouteMIB, ipMRouteRtProto=ipMRouteRtProto, ipMRouteNextHopIfIndex=ipMRouteNextHopIfIndex, ipMRouteMIBGroups=ipMRouteMIBGroups, ipMRouteNextHopUpTime=ipMRouteNextHopUpTime, ipMRouteInterfaceInMcastOctets=ipMRouteInterfaceInMcastOctets, ipMRouteEnable=ipMRouteEnable, ipMRouteInterfaceProtocol=ipMRouteInterfaceProtocol, ipMRouteBoundaryStatus=ipMRouteBoundaryStatus, ipMRouteRtType=ipMRouteRtType, ipMRouteInterfaceIfIndex=ipMRouteInterfaceIfIndex, ipMRouteNextHopAddress=ipMRouteNextHopAddress, ipMRouteNextHopSource=ipMRouteNextHopSource, ipMRouteNextHopProtocol=ipMRouteNextHopProtocol, ipMRouteRtAddress=ipMRouteRtAddress, ipMRouteNextHopPkts=ipMRouteNextHopPkts, ipMRouteBoundaryTable=ipMRouteBoundaryTable, ipMRouteDifferentInIfPackets=ipMRouteDifferentInIfPackets, ipMRouteNextHopState=ipMRouteNextHopState, ipMRouteMIB=ipMRouteMIB, ipMRouteRtMask=ipMRouteRtMask, ipMRouteMIBCompliance=ipMRouteMIBCompliance, ipMRouteMIBHopCountGroup=ipMRouteMIBHopCountGroup, ipMRouteEntry=ipMRouteEntry, ipMRouteMIBBoundaryGroup=ipMRouteMIBBoundaryGroup, ipMRouteTable=ipMRouteTable, ipMRouteInterfaceTtl=ipMRouteInterfaceTtl, ipMRouteBoundaryEntry=ipMRouteBoundaryEntry)
