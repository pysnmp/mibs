#
# PySNMP MIB module EPPC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/powerwalker/EPPC-MIB
# Produced by pysmi-1.1.12 at Wed May 29 10:59:35 2024
# On host fv-az1206-254 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, MibIdentifier, Bits, NotificationType, Gauge32, ModuleIdentity, IpAddress, Unsigned32, NotificationType, Integer32, TimeTicks, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "MibIdentifier", "Bits", "NotificationType", "Gauge32", "ModuleIdentity", "IpAddress", "Unsigned32", "NotificationType", "Integer32", "TimeTicks", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
PositiveInteger, NonNegativeInteger = mibBuilder.importSymbols("UPS-MIB", "PositiveInteger", "NonNegativeInteger")
ppc = MibIdentifier((1, 3, 6, 1, 4, 1, 935))
device = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10))
upsAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1))
upsE = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1))
upsETraps = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 2))
upsEIdentity = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 1))
upsESystemSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2))
upsEBatterySystem = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3))
upsEPowerConverterSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4))
upsELoadSegment = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 5))
upsEEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6))
upsEBatteryTest = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7))
upsEControl = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8))
upsETrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 9))
upsEIdentityManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEIdentityManufacturer.setStatus('mandatory')
upsEIdentityModel = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEIdentityModel.setStatus('mandatory')
upsEIdentityUPSFirmwareVerison = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEIdentityUPSFirmwareVerison.setStatus('mandatory')
upsEIndentityUPSSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEIndentityUPSSerialNumber.setStatus('mandatory')
upsEIdentityDescription = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEIdentityDescription.setStatus('mandatory')
upsEIdentityAgentSoftwareVerison = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEIdentityAgentSoftwareVerison.setStatus('mandatory')
upsEIdentityAttachedDevices = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEIdentityAttachedDevices.setStatus('mandatory')
upsESystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("power-on", 1), ("stand-by", 2), ("by-pass", 3), ("line", 4), ("battery", 5), ("battery-test", 6), ("fault", 7), ("converter", 8), ("eco", 9), ("shutdown", 10), ("on-booster", 11), ("on-reducer", 12), ("other", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemStatus.setStatus('mandatory')
upsESystemTemperature = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemTemperature.setStatus('mandatory')
upsESystemWarningCode = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemWarningCode.setStatus('mandatory')
upsESystemFaultCode = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemFaultCode.setStatus('mandatory')
upsESystemConfigInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemConfigInputVoltage.setStatus('mandatory')
upsESystemConfigInputFrequence = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemConfigInputFrequence.setStatus('mandatory')
upsESystemConfigOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 7), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemConfigOutputVoltage.setStatus('mandatory')
upsESystemConfigOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 8), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemConfigOutputFrequency.setStatus('mandatory')
upsESystemConfigOutputVA = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 9), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemConfigOutputVA.setStatus('mandatory')
upsESystemConfigOutputPower = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 10), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemConfigOutputPower.setStatus('mandatory')
upsESystemConfigOutputLoadHighSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 11), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsESystemConfigOutputLoadHighSetPoint.setStatus('mandatory')
upsESystemConfigOverTemperatureSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 12), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsESystemConfigOverTemperatureSetPoint.setStatus('mandatory')
upsESystemInputSourceNum = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemInputSourceNum.setStatus('mandatory')
upsESystemInputLineBads = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemInputLineBads.setStatus('mandatory')
upsESystemInputNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 15), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemInputNumPhases.setStatus('mandatory')
upsESystemInputTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 16), )
if mibBuilder.loadTexts: upsESystemInputTable.setStatus('mandatory')
upsESystemInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 16, 1), ).setIndexNames((0, "EPPC-MIB", "upsESystemInputPhase"))
if mibBuilder.loadTexts: upsESystemInputEntry.setStatus('mandatory')
upsESystemInputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 16, 1, 1), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: upsESystemInputPhase.setStatus('mandatory')
upsESystemInputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 16, 1, 2), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemInputFrequency.setStatus('mandatory')
upsESystemInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 16, 1, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemInputVoltage.setStatus('mandatory')
upsESystemInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 16, 1, 4), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemInputCurrent.setStatus('mandatory')
upsESystemInputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 16, 1, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemInputWatts.setStatus('mandatory')
upsESystemOutputNumPhase = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 17), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemOutputNumPhase.setStatus('mandatory')
upsESystemOutputTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 18), )
if mibBuilder.loadTexts: upsESystemOutputTable.setStatus('mandatory')
upsESystemOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 18, 1), ).setIndexNames((0, "EPPC-MIB", "upsESystemOutputPhase"))
if mibBuilder.loadTexts: upsESystemOutputEntry.setStatus('mandatory')
upsESystemOutputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 18, 1, 1), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: upsESystemOutputPhase.setStatus('mandatory')
upsESystemOutputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 18, 1, 2), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemOutputFrequency.setStatus('mandatory')
upsESystemOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 18, 1, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemOutputVoltage.setStatus('mandatory')
upsESystemOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 18, 1, 4), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemOutputCurrent.setStatus('mandatory')
upsESystemOutputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 18, 1, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemOutputWatts.setStatus('mandatory')
upsESystemOutputVA = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 18, 1, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemOutputVA.setStatus('mandatory')
upsESystemOutputLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 18, 1, 7), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemOutputLoad.setStatus('mandatory')
upsESystemBypassNumPhase = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 19), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemBypassNumPhase.setStatus('mandatory')
upsESystemBypassTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 20), )
if mibBuilder.loadTexts: upsESystemBypassTable.setStatus('mandatory')
upsESystemBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 20, 1), ).setIndexNames((0, "EPPC-MIB", "upsESystemBypassPhase"))
if mibBuilder.loadTexts: upsESystemBypassEntry.setStatus('mandatory')
upsESystemBypassPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 20, 1, 1), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: upsESystemBypassPhase.setStatus('mandatory')
upsESystemBypassFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 20, 1, 2), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemBypassFrequency.setStatus('mandatory')
upsESystemBypassVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 20, 1, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemBypassVoltage.setStatus('mandatory')
upsESystemBypassCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 20, 1, 4), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemBypassCurrent.setStatus('mandatory')
upsESystemBypassWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 20, 1, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemBypassWatts.setStatus('mandatory')
upsESystemConfigBelowCapacityLimit = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 21), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsESystemConfigBelowCapacityLimit.setStatus('mandatory')
upsESystemConfigBelowRemainTimeLimit = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 22), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsESystemConfigBelowRemainTimeLimit.setStatus('mandatory')
upsEBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("batteryNormal", 2), ("batteryLow", 3), ("batteryDepleted", 4), ("batteryDischarging", 5), ("batteryFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEBatteryStatus.setStatus('mandatory')
upsESecondsOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 2), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESecondsOnBattery.setStatus('mandatory')
upsEBatteryEstimatedMinutesRemaining = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 3), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEBatteryEstimatedMinutesRemaining.setStatus('mandatory')
upsEBatteryEstimatedChargeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEBatteryEstimatedChargeRemaining.setStatus('mandatory')
upsEPositiveBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEPositiveBatteryVoltage.setStatus('mandatory')
upsENegativeBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsENegativeBatteryVoltage.setStatus('mandatory')
upsEBatteryCellNumber = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 7), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEBatteryCellNumber.setStatus('mandatory')
upsEBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEBatteryTemperature.setStatus('mandatory')
upsEBatteryLastReplacedDate = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEBatteryLastReplacedDate.setStatus('mandatory')
upsEBatteryABMStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("charge", 1), ("float", 2), ("rest", 3), ("discharge", 4), ("disable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEBatteryABMStatus.setStatus('mandatory')
upsEChargerModulesNum = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 11), NonNegativeInteger().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEChargerModulesNum.setStatus('mandatory')
upsEChargerModulesTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 12), )
if mibBuilder.loadTexts: upsEChargerModulesTable.setStatus('mandatory')
upsEChargerModulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 12, 1), ).setIndexNames((0, "EPPC-MIB", "chargerModulesNum"))
if mibBuilder.loadTexts: upsEChargerModulesEntry.setStatus('mandatory')
chargerModulesNum = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 12, 1, 1), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: chargerModulesNum.setStatus('mandatory')
chargerModulesAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 12, 1, 2), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chargerModulesAddress.setStatus('mandatory')
positiveChargeVotlage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 12, 1, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: positiveChargeVotlage.setStatus('mandatory')
negativeChargeVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 12, 1, 4), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: negativeChargeVoltage.setStatus('mandatory')
positiveChargeCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 12, 1, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: positiveChargeCurrent.setStatus('mandatory')
negativeChargeCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 12, 1, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: negativeChargeCurrent.setStatus('mandatory')
chargerModulesTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chargerModulesTemperature.setStatus('mandatory')
chargerModulesMode = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("powerOn", 1), ("standyby", 2), ("fault", 3), ("shutdown", 4), ("running", 5), ("suicide", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chargerModulesMode.setStatus('mandatory')
upsEUPSModulesNum = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 1), NonNegativeInteger().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEUPSModulesNum.setStatus('mandatory')
upsEModulesTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2), )
if mibBuilder.loadTexts: upsEModulesTable.setStatus('mandatory')
upsEModulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1), ).setIndexNames((0, "EPPC-MIB", "upsEModulesNum"))
if mibBuilder.loadTexts: upsEModulesEntry.setStatus('mandatory')
upsEModulesNum = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 1), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: upsEModulesNum.setStatus('mandatory')
upsEModuleAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleAddress.setStatus('mandatory')
upsEModulePositiveBusVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModulePositiveBusVolt.setStatus('mandatory')
upsEModuleNegativeBusVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 4), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleNegativeBusVolt.setStatus('mandatory')
upsEModuleTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleTemperature.setStatus('mandatory')
upsEModuleWorkingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("power-on", 1), ("stand-by", 2), ("by-pass", 3), ("line", 4), ("battery", 5), ("battery-test", 6), ("fault", 7), ("converter", 8), ("eco", 9), ("shutdown", 10), ("on-booster", 11), ("on-reducer", 12), ("other", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleWorkingMode.setStatus('mandatory')
upsEModuleOutputCurrentR = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 7), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputCurrentR.setStatus('mandatory')
upsEModuleOutputWattR = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 8), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputWattR.setStatus('mandatory')
upsEModuleOutputLoadR = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputLoadR.setStatus('mandatory')
upsEModuleWarningCode = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleWarningCode.setStatus('mandatory')
upsEModuleFaultCode = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleFaultCode.setStatus('mandatory')
upsEModuleTrapState = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleTrapState.setStatus('mandatory')
upsEModuleConfigOutputVA = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 13), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleConfigOutputVA.setStatus('mandatory')
upsEModuleOutputCurrentS = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 14), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputCurrentS.setStatus('mandatory')
upsEModuleOutputCurrentT = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 15), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputCurrentT.setStatus('mandatory')
upsEModuleOutputWattS = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 16), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputWattS.setStatus('mandatory')
upsEModuleOutputWattT = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 17), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputWattT.setStatus('mandatory')
upsEModuleOutputLoadS = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputLoadS.setStatus('mandatory')
upsEModuleOutputLoadT = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputLoadT.setStatus('mandatory')
upsEModuleOutputVAR = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 20), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputVAR.setStatus('mandatory')
upsEModuleOutputVAS = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 21), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputVAS.setStatus('mandatory')
upsEModuleOutputVAT = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 22), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputVAT.setStatus('mandatory')
upsELoadSegment1OffDelay = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsELoadSegment1OffDelay.setStatus('mandatory')
upsELoadSegment1OnDelay = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsELoadSegment1OnDelay.setStatus('mandatory')
upsELoadSegment1AutoOffTimer = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsELoadSegment1AutoOffTimer.setStatus('mandatory')
upsELoadSegment1AutoOnTimer = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsELoadSegment1AutoOnTimer.setStatus('mandatory')
upsELoadSegment1State = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("off-pending", 3), ("on-pending", 4), ("not-support", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsELoadSegment1State.setStatus('mandatory')
upsELoadSegment2OffDelay = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsELoadSegment2OffDelay.setStatus('mandatory')
upsELoadSegment2OnDelay = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsELoadSegment2OnDelay.setStatus('mandatory')
upsELoadSegment2AutoOffTimer = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsELoadSegment2AutoOffTimer.setStatus('mandatory')
upsELoadSegment2AutoOnTimer = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsELoadSegment2AutoOnTimer.setStatus('mandatory')
upsELoadSegment2State = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("off-pending", 3), ("on-pending", 4), ("not-support", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsELoadSegment2State.setStatus('mandatory')
upsEEnvironmentTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 1))
upsEEnvironmentCurrentTemperature = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEEnvironmentCurrentTemperature.setStatus('mandatory')
upsEEnvironmentTemperatureHighSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentTemperatureHighSetPoint.setStatus('mandatory')
upsEEnvironmentTemperatureHighStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentTemperatureHighStatus.setStatus('mandatory')
upsEEnvironmentTemperatureLowSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentTemperatureLowSetPoint.setStatus('mandatory')
upsEEnvironmentTemperatureLowStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentTemperatureLowStatus.setStatus('mandatory')
upsEEnvironmentTemperatureOffset = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentTemperatureOffset.setStatus('mandatory')
upsEEnvironmentHumidity = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 2))
upsEEnvironmentCurrentHumidity = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEEnvironmentCurrentHumidity.setStatus('mandatory')
upsEEnvironmentHumidityHighSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentHumidityHighSetPoint.setStatus('mandatory')
upsEEnvironmentHumidityHighStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentHumidityHighStatus.setStatus('mandatory')
upsEEnvironmentHumidityLowSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentHumidityLowSetPoint.setStatus('mandatory')
upsEEnvironmentHumidityLowStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentHumidityLowStatus.setStatus('mandatory')
upsEEnvironmentHumidityOffset = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentHumidityOffset.setStatus('mandatory')
upsEEnvironmentContactsNum = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEEnvironmentContactsNum.setStatus('mandatory')
upsEEnvironmentContactTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 4), )
if mibBuilder.loadTexts: upsEEnvironmentContactTable.setStatus('mandatory')
upsEEnvironmentContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 4, 1), ).setIndexNames((0, "EPPC-MIB", "upsEEnvironmentContactIndex"))
if mibBuilder.loadTexts: upsEEnvironmentContactEntry.setStatus('mandatory')
upsEEnvironmentContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 4, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: upsEEnvironmentContactIndex.setStatus('mandatory')
upsEEnvironmentContactType = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normallyOpen", 1), ("normallyClosed", 2), ("notUsed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentContactType.setStatus('mandatory')
upsEEnvironmentContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("openWithNotice", 3), ("closedWithNotice", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEEnvironmentContactState.setStatus('mandatory')
upsEEnvironmentContactDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentContactDescription.setStatus('mandatory')
upsEBatteryTestStart = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("batteryTest10Sec", 2), ("batteryTestUntilLow", 3), ("batteryTestWithTime", 4), ("cancelBatteryTest", 5), ("clearBatteryInfo", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEBatteryTestStart.setStatus('mandatory')
upsEBatteryTestSettingTime = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 2), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEBatteryTestSettingTime.setStatus('mandatory')
upsEBatteryTestResult = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("processing", 2), ("noFailure", 3), ("failureOrWarning", 4), ("notPossible", 5), ("testCancel", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEBatteryTestResult.setStatus('mandatory')
upsEBatteryTestStartTime = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(19, 19)).setFixedLength(19)).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEBatteryTestStartTime.setStatus('mandatory')
upsEBatteryTestElapsedTime = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEBatteryTestElapsedTime.setStatus('mandatory')
upsEBatteryTestScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 6), )
if mibBuilder.loadTexts: upsEBatteryTestScheduleTable.setStatus('mandatory')
upsEBatteryTestScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 6, 1), ).setIndexNames((0, "EPPC-MIB", "upsEBatteryTestScheduleIndex"))
if mibBuilder.loadTexts: upsEBatteryTestScheduleEntry.setStatus('mandatory')
upsEBatteryTestScheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 6, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: upsEBatteryTestScheduleIndex.setStatus('mandatory')
upsEBatteryTestScheduleDay = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("monday", 1), ("tuesday", 2), ("wednsday", 3), ("thusday", 4), ("friday", 5), ("saturday", 6), ("sunday", 7), ("specialday", 8), ("none", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEBatteryTestScheduleDay.setStatus('mandatory')
upsEBatteryTestScheduleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEBatteryTestScheduleTime.setStatus('mandatory')
upsEBatteryTestScheduleType = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("batteryTest10sec", 2), ("batteryTestUntilLow", 3), ("batteryTestWithTime", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEBatteryTestScheduleType.setStatus('mandatory')
upsEBatteryTestScheduleTestWithTime = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 6, 1, 6), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEBatteryTestScheduleTestWithTime.setStatus('mandatory')
upsEBatteryTestScheduleSpecialDay = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEBatteryTestScheduleSpecialDay.setStatus('mandatory')
upsEControlOutputOffDelay = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 1), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEControlOutputOffDelay.setStatus('mandatory')
upsEControlOutputOnDelay = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 2), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEControlOutputOnDelay.setStatus('mandatory')
upsEControlOutputOnOffControl = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("upsEOutputOff", 1), ("upsEOutputOffCancel", 2), ("upsESleep", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEControlOutputOnOffControl.setStatus('mandatory')
upsEShutdownEventsTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 4), )
if mibBuilder.loadTexts: upsEShutdownEventsTable.setStatus('mandatory')
upsEShutdownEventsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 4, 1), ).setIndexNames((0, "EPPC-MIB", "upsEShutdownEvent"))
if mibBuilder.loadTexts: upsEShutdownEventsEntry.setStatus('mandatory')
upsEShutdownEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("acFail", 1), ("batteryLow", 2), ("upsEOverLoad", 3), ("upsEOverTemperature", 4), ("upsEWeeklySchedule", 5), ("upsESpecialSchedule", 6), ("environmentTemperatureOverThreshold", 7), ("environmentHumidityOverThreshold", 8), ("environmentContact1Alarm", 9), ("environmentContact2Alarm", 10), ("belowCapacityLimit", 11), ("belowRemainTimeLimit", 12))))
if mibBuilder.loadTexts: upsEShutdownEvent.setStatus('mandatory')
upsEShutdownEventAction = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("warning", 2), ("shutdownClient", 3), ("shutdownUPS", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEShutdownEventAction.setStatus('mandatory')
upsEShutdownwarningPeriodTime = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 4, 1, 3), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEShutdownwarningPeriodTime.setStatus('mandatory')
upsEShutdownWarningPeriodInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 4, 1, 4), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEShutdownWarningPeriodInterval.setStatus('mandatory')
upsEControlWeeklyScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 5), )
if mibBuilder.loadTexts: upsEControlWeeklyScheduleTable.setStatus('mandatory')
upsEControlWeeklyScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 5, 1), ).setIndexNames((0, "EPPC-MIB", "upsEControlWeeklyScheduleIndex"))
if mibBuilder.loadTexts: upsEControlWeeklyScheduleEntry.setStatus('mandatory')
upsEControlWeeklyScheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 5, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: upsEControlWeeklyScheduleIndex.setStatus('mandatory')
upsEWeeklyScheduleShutdownDay = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6), ("sunday", 7), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEWeeklyScheduleShutdownDay.setStatus('mandatory')
upsEWeeklyScheduleShutdownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEWeeklyScheduleShutdownTime.setStatus('mandatory')
upsEWeeklyScheduleRestartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6), ("sunday", 7), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEWeeklyScheduleRestartDay.setStatus('mandatory')
upsEWeeklyScheduleRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEWeeklyScheduleRestartTime.setStatus('mandatory')
upsEControlSpecialDayScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 6), )
if mibBuilder.loadTexts: upsEControlSpecialDayScheduleTable.setStatus('mandatory')
upsEControlSpecialDayScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 6, 1), ).setIndexNames((0, "EPPC-MIB", "upsEControlSpecialDayScheduleIndex"))
if mibBuilder.loadTexts: upsEControlSpecialDayScheduleEntry.setStatus('mandatory')
upsEControlSpecialDayScheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 6, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: upsEControlSpecialDayScheduleIndex.setStatus('mandatory')
upsESpecialDayScheduleShutdownDay = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsESpecialDayScheduleShutdownDay.setStatus('mandatory')
upsESpecialDayScheduleShutdownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsESpecialDayScheduleShutdownTime.setStatus('mandatory')
upsESpecialDayScheduleRestartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsESpecialDayScheduleRestartDay.setStatus('mandatory')
upsESpecialDayScheduleRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsESpecialDayScheduleRestartTime.setStatus('mandatory')
upsESystemMasterOffDelay = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemMasterOffDelay.setStatus('mandatory')
upsESystemMasterOnDelay = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemMasterOnDelay.setStatus('mandatory')
upsETrapsReceiversTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 9, 1), )
if mibBuilder.loadTexts: upsETrapsReceiversTable.setStatus('mandatory')
upsETrapsReceiversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 9, 1, 1), ).setIndexNames((0, "EPPC-MIB", "upsETrapsReceiversIndex"))
if mibBuilder.loadTexts: upsETrapsReceiversEntry.setStatus('mandatory')
upsETrapsReceiversIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 9, 1, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: upsETrapsReceiversIndex.setStatus('mandatory')
upsETrapsReceiverAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 9, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsETrapsReceiverAddress.setStatus('mandatory')
upsETrapReceiverCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsETrapReceiverCommunityString.setStatus('mandatory')
upsETrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("rfc1628Trap", 2), ("eppcTrap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsETrapType.setStatus('mandatory')
upsETrapsSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("severe", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsETrapsSeverityLevel.setStatus('mandatory')
upsETrapReceiverDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 9, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsETrapReceiverDescription.setStatus('mandatory')
upsETrapState = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsETrapState.setStatus('mandatory')
upsEPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,1))
upsEPowerRestored = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,2))
upsELowBattery = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,3))
upsEReturnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,4))
upsEFailed = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,5))
upsEOk = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,6))
upsEOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,7)).setObjects(("EPPC-MIB", "upsEBatteryEstimatedMinutesRemaining"), ("EPPC-MIB", "upsESecondsOnBattery"))
upsENotOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,8))
upsETestInProgress = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,9))
upsETestOver = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,10)).setObjects(("EPPC-MIB", "upsEBatteryTestStart"), ("EPPC-MIB", "upsEBatteryTestSettingTime"), ("EPPC-MIB", "upsEBatteryTestResult"), ("EPPC-MIB", "upsEBatteryTestStartTime"))
upsEBypassOn = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,11))
upsEOnline = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,12))
upsECommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,13))
upsECommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,14))
upsEGoingShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,15))
upsEShutdownCancelled = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,16))
upsEOutlet1GoingShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,17))
upsEOutlet1ShutdownCancelled = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,18))
upsEOutlet2GoingShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,19))
upsEOutlet2ShutdownCancelled = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,20))
upsESleeping = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,21)).setObjects(("EPPC-MIB", "upsEControlOutputOnDelay"))
upsEWokeUp = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,22))
upsEOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,23)).setObjects(("EPPC-MIB", "upsESystemTemperature"), ("EPPC-MIB", "upsESystemConfigOverTemperatureSetPoint"))
upsENotOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,24)).setObjects(("EPPC-MIB", "upsESystemTemperature"), ("EPPC-MIB", "upsESystemConfigOverTemperatureSetPoint"))
upsEOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,25)).setObjects(("EPPC-MIB", "upsESystemOutputLoad"), ("EPPC-MIB", "upsESystemConfigOutputLoadHighSetPoint"))
upsENotOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,26)).setObjects(("EPPC-MIB", "upsESystemOutputLoad"), ("EPPC-MIB", "upsESystemConfigOutputLoadHighSetPoint"))
upsEModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,27))
upsEModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,28))
sensorTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,29)).setObjects(("EPPC-MIB", "upsEEnvironmentTemperatureHighSetPoint"), ("EPPC-MIB", "upsEEnvironmentCurrentTemperature"))
sensorTemperatureNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,30)).setObjects(("EPPC-MIB", "upsEEnvironmentTemperatureHighSetPoint"), ("EPPC-MIB", "upsEEnvironmentCurrentTemperature"))
sensorTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,31)).setObjects(("EPPC-MIB", "upsEEnvironmentTemperatureLowSetPoint"), ("EPPC-MIB", "upsEEnvironmentCurrentTemperature"))
sensorTemperatureNotLow = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,32)).setObjects(("EPPC-MIB", "upsEEnvironmentTemperatureLowSetPoint"), ("EPPC-MIB", "upsEEnvironmentCurrentTemperature"))
sensorHumidityTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,33)).setObjects(("EPPC-MIB", "upsEEnvironmentHumidityHighSetPoint"), ("EPPC-MIB", "upsEEnvironmentCurrentHumidity"))
sensorHumidityNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,34)).setObjects(("EPPC-MIB", "upsEEnvironmentHumidityHighSetPoint"), ("EPPC-MIB", "upsEEnvironmentCurrentHumidity"))
sensorHumidityTooLow = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,35)).setObjects(("EPPC-MIB", "upsEEnvironmentHumidityLowSetPoint"), ("EPPC-MIB", "upsEEnvironmentCurrentHumidity"))
sensorHumidityNotLow = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,36)).setObjects(("EPPC-MIB", "upsEEnvironmentHumidityLowSetPoint"), ("EPPC-MIB", "upsEEnvironmentCurrentHumidity"))
contactAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,37)).setObjects(("EPPC-MIB", "upsEEnvironmentContactType"), ("EPPC-MIB", "upsEEnvironmentContactDescription"))
concactAlarm1Normal = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,38)).setObjects(("EPPC-MIB", "upsEEnvironmentContactType"), ("EPPC-MIB", "upsEEnvironmentContactDescription"))
contactAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,39)).setObjects(("EPPC-MIB", "upsEEnvironmentContactType"), ("EPPC-MIB", "upsEEnvironmentContactDescription"))
contactAlarm2Normal = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,40)).setObjects(("EPPC-MIB", "upsEEnvironmentContactType"), ("EPPC-MIB", "upsEEnvironmentContactDescription"))
upsEInternalwarning = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,41))
upsEReturnFromInternalwarning = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,42))
upsEEPOActive = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,43))
upsEReturnFromEPOActive = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,44))
upsEModuleUnlock = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,45))
upsEReturnFromModuleUnlock = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,46))
upsEMain1Neutralloss = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,47))
upsEReturnFromMain1Neutralloss = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,48))
upsEMain1phaseerror = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,49))
upsEReturnFromMain1phaseerror = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,50))
upsESitefault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,51))
upsEReturnFromSitefault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,52))
upsEBypassAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,53))
upsEReturnFromBypassAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,54))
upsEBypassPhaseError = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,55))
upsEReturnFromBypassPhaseError = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,56))
upsEBatteryOpen = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,57))
upsEReturnFromBatteryOpen = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,58))
upsEBatteryOverCharge = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,59))
upsEReturnFromBatteryOverCharge = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,60))
upsEBatteryReverse = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,61))
upsEReturnFromBatteryReverse = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,62))
upsEOverloadforewarning = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,63))
upsEReturnFromOverloadforewarning = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,64))
upsEOverloadWarning = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,65))
upsEReturnFromOverloadWarning = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,66))
upsEFanLock = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,67))
upsEReturnFromFanLock = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,68))
upsEMaintaincoverisopen = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,69))
upsEReturnFromMaintaincoverisopen = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,70))
upsEChargerfault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,71))
upsEReturnFromChargerfault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,72))
upsEModulelocationerror = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,73))
upsEReturnFromModulelocationerror = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,74))
upsETurnonabnormal = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,75))
upsEReturnFromTurnonabnormal = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,76))
upsERedundancyloss = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,77))
upsEReturnFromRedundancyloss = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,78))
upsEHotSwapActived = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,79))
upsEReturnFromHotSwapActived = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,80))
upsEBatteryInform = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,81))
upsEReturnFromBatteryInform = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,82))
upsEInspectionInform = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,83))
upsEReturnFromInspectionInform = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,84))
upsEGuaranteeInform = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,85))
upsEReturnFromGuaranteeInform = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,86))
upsETemperatureLow = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,87))
upsEReturnFromTemperatureLow = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,88))
upsETemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,89))
upsEReturnFromTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,90))
upsEBatteryOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,91))
upsEReturnFromBatteryOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,92))
upsEFanMaintainInform = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,93))
upsEReturnFromFanMaintainInform = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,94))
upsEBusCapacitanceMaintainInform = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,95))
upsEReturnFromBusCapacitanceMaintainInform = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,96))
upsESystemOverCapacity = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,97))
upsEReturnFromSystemOverCapacity = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,98))
upsEBelowCapacityLimit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,123)).setObjects(("EPPC-MIB", "upsEBatteryEstimatedChargeRemaining"), ("EPPC-MIB", "upsESystemConfigBelowCapacityLimit"))
upsENotBelowCapacityLimit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,124))
upsEBelowRemainTimeLimit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,125)).setObjects(("EPPC-MIB", "upsEBatteryEstimatedMinutesRemaining"), ("EPPC-MIB", "upsESystemConfigBelowRemainTimeLimit"))
upsENotBelowRemainTimeLimit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,126))
upsELoadSegment1Off = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,127))
upsELoadSegment1On = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,128))
upsELoadSegment2Off = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,129))
upsELoadSegment2On = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,130))
mibBuilder.exportSymbols("EPPC-MIB", upsEModulesNum=upsEModulesNum, upsEIdentityAgentSoftwareVerison=upsEIdentityAgentSoftwareVerison, upsETraps=upsETraps, upsEBatteryTestScheduleEntry=upsEBatteryTestScheduleEntry, upsETrapState=upsETrapState, sensorTemperatureTooHigh=sensorTemperatureTooHigh, upsEBatteryOverCharge=upsEBatteryOverCharge, upsESleeping=upsESleeping, upsEBatteryTestScheduleType=upsEBatteryTestScheduleType, upsESystemConfigInputVoltage=upsESystemConfigInputVoltage, upsEReturnFromBatteryOverCharge=upsEReturnFromBatteryOverCharge, sensorTemperatureTooLow=sensorTemperatureTooLow, upsERedundancyloss=upsERedundancyloss, upsEShutdownWarningPeriodInterval=upsEShutdownWarningPeriodInterval, upsEPositiveBatteryVoltage=upsEPositiveBatteryVoltage, upsEControlOutputOnOffControl=upsEControlOutputOnOffControl, upsEControlWeeklyScheduleEntry=upsEControlWeeklyScheduleEntry, upsESystemInputCurrent=upsESystemInputCurrent, upsEEnvironmentTemperatureOffset=upsEEnvironmentTemperatureOffset, upsEModuleInserted=upsEModuleInserted, upsEEnvironmentCurrentHumidity=upsEEnvironmentCurrentHumidity, sensorTemperatureNotLow=sensorTemperatureNotLow, sensorHumidityNotHigh=sensorHumidityNotHigh, upsEFailed=upsEFailed, upsEEnvironmentTemperatureLowStatus=upsEEnvironmentTemperatureLowStatus, upsEShutdownCancelled=upsEShutdownCancelled, upsESystemBypassNumPhase=upsESystemBypassNumPhase, upsEGuaranteeInform=upsEGuaranteeInform, upsESystemOutputVoltage=upsESystemOutputVoltage, upsEWeeklyScheduleShutdownDay=upsEWeeklyScheduleShutdownDay, upsEReturnFromSystemOverCapacity=upsEReturnFromSystemOverCapacity, upsEModuleOutputLoadR=upsEModuleOutputLoadR, upsESecondsOnBattery=upsESecondsOnBattery, upsEBatteryTestScheduleTable=upsEBatteryTestScheduleTable, upsEModuleWarningCode=upsEModuleWarningCode, upsETrapsReceiversIndex=upsETrapsReceiversIndex, upsECommunicationEstablished=upsECommunicationEstablished, upsEReturnFromBatteryOpen=upsEReturnFromBatteryOpen, upsEEnvironmentTemperatureLowSetPoint=upsEEnvironmentTemperatureLowSetPoint, upsEEnvironmentContactDescription=upsEEnvironmentContactDescription, upsESystemInputFrequency=upsESystemInputFrequency, upsEBatteryTest=upsEBatteryTest, upsEBatterySystem=upsEBatterySystem, upsESystemOutputVA=upsESystemOutputVA, upsEModuleOutputWattT=upsEModuleOutputWattT, upsEModuleOutputLoadT=upsEModuleOutputLoadT, upsEEnvironmentHumidityHighSetPoint=upsEEnvironmentHumidityHighSetPoint, sensorHumidityNotLow=sensorHumidityNotLow, upsELoadSegment1AutoOnTimer=upsELoadSegment1AutoOnTimer, upsEMain1Neutralloss=upsEMain1Neutralloss, device=device, upsESystemOutputFrequency=upsESystemOutputFrequency, upsETrapReceiverDescription=upsETrapReceiverDescription, upsEReturnFromBusCapacitanceMaintainInform=upsEReturnFromBusCapacitanceMaintainInform, upsEShutdownEventsTable=upsEShutdownEventsTable, sensorHumidityTooLow=sensorHumidityTooLow, upsEReturnFromFanLock=upsEReturnFromFanLock, upsETurnonabnormal=upsETurnonabnormal, upsEEnvironmentHumidityLowSetPoint=upsEEnvironmentHumidityLowSetPoint, upsESystemBypassWatts=upsESystemBypassWatts, upsELoadSegment2Off=upsELoadSegment2Off, upsEIdentityManufacturer=upsEIdentityManufacturer, upsEBelowCapacityLimit=upsEBelowCapacityLimit, upsEReturnFromInspectionInform=upsEReturnFromInspectionInform, upsESystemBypassTable=upsESystemBypassTable, upsEEnvironmentHumidityLowStatus=upsEEnvironmentHumidityLowStatus, upsEIdentityAttachedDevices=upsEIdentityAttachedDevices, upsESystemConfigInputFrequence=upsESystemConfigInputFrequence, upsEEnvironmentTemperatureHighStatus=upsEEnvironmentTemperatureHighStatus, upsETrapsSeverityLevel=upsETrapsSeverityLevel, upsEReturnFromLowBattery=upsEReturnFromLowBattery, upsESitefault=upsESitefault, upsEFanMaintainInform=upsEFanMaintainInform, upsESystemConfigOutputVoltage=upsESystemConfigOutputVoltage, upsEReturnFromBatteryOverTemperature=upsEReturnFromBatteryOverTemperature, upsECommunicationLost=upsECommunicationLost, upsEOutlet2GoingShutdown=upsEOutlet2GoingShutdown, upsEBelowRemainTimeLimit=upsEBelowRemainTimeLimit, upsEModuleAddress=upsEModuleAddress, upsESpecialDayScheduleRestartDay=upsESpecialDayScheduleRestartDay, upsENotBelowRemainTimeLimit=upsENotBelowRemainTimeLimit, positiveChargeVotlage=positiveChargeVotlage, upsEReturnFromFanMaintainInform=upsEReturnFromFanMaintainInform, upsESystemOutputTable=upsESystemOutputTable, upsEBatteryEstimatedMinutesRemaining=upsEBatteryEstimatedMinutesRemaining, upsELoadSegment1AutoOffTimer=upsELoadSegment1AutoOffTimer, upsEShutdownEvent=upsEShutdownEvent, upsEReturnFromRedundancyloss=upsEReturnFromRedundancyloss, upsEReturnFromGuaranteeInform=upsEReturnFromGuaranteeInform, upsEControl=upsEControl, upsEBypassAbnormal=upsEBypassAbnormal, upsEIndentityUPSSerialNumber=upsEIndentityUPSSerialNumber, upsEInspectionInform=upsEInspectionInform, upsEPowerConverterSystem=upsEPowerConverterSystem, upsEBatteryStatus=upsEBatteryStatus, upsEReturnFromBatteryReverse=upsEReturnFromBatteryReverse, upsEBatteryTestStartTime=upsEBatteryTestStartTime, upsEEnvironmentContactsNum=upsEEnvironmentContactsNum, upsEControlOutputOffDelay=upsEControlOutputOffDelay, upsEReturnFromTemperatureLow=upsEReturnFromTemperatureLow, upsETrapReceiverCommunityString=upsETrapReceiverCommunityString, upsEModuleOutputVAR=upsEModuleOutputVAR, upsESystemOutputPhase=upsESystemOutputPhase, upsEReturnFromMain1phaseerror=upsEReturnFromMain1phaseerror, upsEWeeklyScheduleRestartTime=upsEWeeklyScheduleRestartTime, negativeChargeVoltage=negativeChargeVoltage, upsELowBattery=upsELowBattery, upsEModuleUnlock=upsEModuleUnlock, upsESystemInputSourceNum=upsESystemInputSourceNum, upsEModuleOutputCurrentR=upsEModuleOutputCurrentR, upsETestInProgress=upsETestInProgress, upsEOverloadWarning=upsEOverloadWarning, upsETrapsReceiversTable=upsETrapsReceiversTable, upsEReturnFromOverloadWarning=upsEReturnFromOverloadWarning, upsEReturnFromBypassPhaseError=upsEReturnFromBypassPhaseError, upsEIdentityModel=upsEIdentityModel, upsEBatteryOverTemperature=upsEBatteryOverTemperature, upsEBypassOn=upsEBypassOn, upsELoadSegment2On=upsELoadSegment2On, upsEBatteryReverse=upsEBatteryReverse, upsAgent=upsAgent, upsESystemInputTable=upsESystemInputTable, upsEReturnFromTemperatureHigh=upsEReturnFromTemperatureHigh, upsEReturnFromInternalwarning=upsEReturnFromInternalwarning, upsESystemConfigBelowCapacityLimit=upsESystemConfigBelowCapacityLimit, upsEShutdownEventsEntry=upsEShutdownEventsEntry, upsETestOver=upsETestOver, upsEEnvironmentHumidity=upsEEnvironmentHumidity, upsESystemBypassFrequency=upsESystemBypassFrequency, upsEIdentity=upsEIdentity, upsEBatteryTemperature=upsEBatteryTemperature, upsEOutlet2ShutdownCancelled=upsEOutlet2ShutdownCancelled, upsEIdentityDescription=upsEIdentityDescription, upsESpecialDayScheduleShutdownDay=upsESpecialDayScheduleShutdownDay, upsESpecialDayScheduleShutdownTime=upsESpecialDayScheduleShutdownTime, upsEReturnFromHotSwapActived=upsEReturnFromHotSwapActived, upsEModuleTrapState=upsEModuleTrapState, upsEModuleOutputVAT=upsEModuleOutputVAT, upsEBatteryTestResult=upsEBatteryTestResult, upsESystemConfigOutputPower=upsESystemConfigOutputPower, contactAlarm2Normal=contactAlarm2Normal, sensorHumidityTooHigh=sensorHumidityTooHigh, upsEControlSpecialDayScheduleEntry=upsEControlSpecialDayScheduleEntry, upsEEnvironmentContactType=upsEEnvironmentContactType, upsESystemWarningCode=upsESystemWarningCode, upsESystemInputLineBads=upsESystemInputLineBads, upsELoadSegment1On=upsELoadSegment1On, upsESystemConfigOutputLoadHighSetPoint=upsESystemConfigOutputLoadHighSetPoint, negativeChargeCurrent=negativeChargeCurrent, upsEBatteryTestStart=upsEBatteryTestStart, upsEModuleFaultCode=upsEModuleFaultCode, upsEBatteryTestScheduleSpecialDay=upsEBatteryTestScheduleSpecialDay, upsELoadSegment2AutoOffTimer=upsELoadSegment2AutoOffTimer, upsELoadSegment2OnDelay=upsELoadSegment2OnDelay, upsEWeeklyScheduleShutdownTime=upsEWeeklyScheduleShutdownTime, upsEModuleOutputWattS=upsEModuleOutputWattS, upsEReturnFromTurnonabnormal=upsEReturnFromTurnonabnormal, upsEReturnFromBatteryInform=upsEReturnFromBatteryInform, upsEModuleOutputCurrentS=upsEModuleOutputCurrentS, upsEModuleOutputWattR=upsEModuleOutputWattR, upsEModulePositiveBusVolt=upsEModulePositiveBusVolt, upsEGoingShutdown=upsEGoingShutdown, upsELoadSegment1OnDelay=upsELoadSegment1OnDelay, sensorTemperatureNotHigh=sensorTemperatureNotHigh, upsELoadSegment2OffDelay=upsELoadSegment2OffDelay, upsEUPSModulesNum=upsEUPSModulesNum, upsEShutdownwarningPeriodTime=upsEShutdownwarningPeriodTime, upsEChargerfault=upsEChargerfault, upsEReturnFromChargerfault=upsEReturnFromChargerfault, upsESystemOverCapacity=upsESystemOverCapacity, upsEOnline=upsEOnline, upsESystemInputPhase=upsESystemInputPhase, upsEPowerFail=upsEPowerFail, upsEInternalwarning=upsEInternalwarning, upsESystemMasterOffDelay=upsESystemMasterOffDelay, upsEBatteryTestScheduleTime=upsEBatteryTestScheduleTime, upsEWokeUp=upsEWokeUp, upsESystemInputEntry=upsESystemInputEntry, chargerModulesNum=chargerModulesNum, chargerModulesTemperature=chargerModulesTemperature, upsEEnvironmentCurrentTemperature=upsEEnvironmentCurrentTemperature, upsEModuleTemperature=upsEModuleTemperature, upsEWeeklyScheduleRestartDay=upsEWeeklyScheduleRestartDay, upsEChargerModulesTable=upsEChargerModulesTable, upsEBatteryOpen=upsEBatteryOpen, upsEHotSwapActived=upsEHotSwapActived, upsEEnvironmentHumidityOffset=upsEEnvironmentHumidityOffset, upsEEnvironmentContactIndex=upsEEnvironmentContactIndex, upsEControlOutputOnDelay=upsEControlOutputOnDelay, upsEModuleOutputLoadS=upsEModuleOutputLoadS, positiveChargeCurrent=positiveChargeCurrent, upsELoadSegment2AutoOnTimer=upsELoadSegment2AutoOnTimer, upsEBatteryTestElapsedTime=upsEBatteryTestElapsedTime, upsETrapsReceiversEntry=upsETrapsReceiversEntry, upsEReturnFromEPOActive=upsEReturnFromEPOActive, upsEEnvironmentTemperatureHighSetPoint=upsEEnvironmentTemperatureHighSetPoint, upsESystemFaultCode=upsESystemFaultCode, upsENotOnBattery=upsENotOnBattery, upsEReturnFromModuleUnlock=upsEReturnFromModuleUnlock, upsEReturnFromSitefault=upsEReturnFromSitefault, upsESystemInputWatts=upsESystemInputWatts, upsELoadSegment2State=upsELoadSegment2State, ppc=ppc, upsEModuleNegativeBusVolt=upsEModuleNegativeBusVolt, upsESystemInputVoltage=upsESystemInputVoltage, contactAlarm1Active=contactAlarm1Active, upsEFanLock=upsEFanLock, upsEEnvironmentContactState=upsEEnvironmentContactState, upsEEnvironmentHumidityHighStatus=upsEEnvironmentHumidityHighStatus, upsE=upsE, upsESystemBypassEntry=upsESystemBypassEntry, upsEOutlet1ShutdownCancelled=upsEOutlet1ShutdownCancelled, upsETemperatureHigh=upsETemperatureHigh, upsEChargerModulesEntry=upsEChargerModulesEntry, upsESystemBypassVoltage=upsESystemBypassVoltage, upsEReturnFromModulelocationerror=upsEReturnFromModulelocationerror, upsESystemConfigBelowRemainTimeLimit=upsESystemConfigBelowRemainTimeLimit, upsESystemSummary=upsESystemSummary, upsESystemOutputLoad=upsESystemOutputLoad, upsEEPOActive=upsEEPOActive, upsESystemConfigOutputFrequency=upsESystemConfigOutputFrequency, upsEEnvironment=upsEEnvironment, upsEModuleOutputCurrentT=upsEModuleOutputCurrentT, upsEOk=upsEOk, upsEOnBattery=upsEOnBattery, upsEModuleWorkingMode=upsEModuleWorkingMode, upsEMain1phaseerror=upsEMain1phaseerror, upsESpecialDayScheduleRestartTime=upsESpecialDayScheduleRestartTime, upsEReturnFromMaintaincoverisopen=upsEReturnFromMaintaincoverisopen, upsESystemOutputCurrent=upsESystemOutputCurrent, upsEModuleRemoved=upsEModuleRemoved, upsETrapControl=upsETrapControl, upsENotOverLoad=upsENotOverLoad, upsEControlSpecialDayScheduleIndex=upsEControlSpecialDayScheduleIndex, upsEControlSpecialDayScheduleTable=upsEControlSpecialDayScheduleTable, upsEPowerRestored=upsEPowerRestored, contactAlarm2Active=contactAlarm2Active, upsELoadSegment1Off=upsELoadSegment1Off, upsEChargerModulesNum=upsEChargerModulesNum, upsEModuleConfigOutputVA=upsEModuleConfigOutputVA, upsEBatteryTestScheduleIndex=upsEBatteryTestScheduleIndex, upsEOverloadforewarning=upsEOverloadforewarning, upsESystemConfigOutputVA=upsESystemConfigOutputVA, upsESystemBypassPhase=upsESystemBypassPhase, upsEBusCapacitanceMaintainInform=upsEBusCapacitanceMaintainInform, concactAlarm1Normal=concactAlarm1Normal, upsEOverLoad=upsEOverLoad, upsESystemMasterOnDelay=upsESystemMasterOnDelay, upsEBatteryTestScheduleTestWithTime=upsEBatteryTestScheduleTestWithTime, upsEBypassPhaseError=upsEBypassPhaseError, upsESystemOutputEntry=upsESystemOutputEntry, upsEOutlet1GoingShutdown=upsEOutlet1GoingShutdown, upsESystemConfigOverTemperatureSetPoint=upsESystemConfigOverTemperatureSetPoint, upsELoadSegment1State=upsELoadSegment1State)
mibBuilder.exportSymbols("EPPC-MIB", upsEReturnFromMain1Neutralloss=upsEReturnFromMain1Neutralloss, upsEReturnFromBypassAbnormal=upsEReturnFromBypassAbnormal, upsEBatteryInform=upsEBatteryInform, upsETemperatureLow=upsETemperatureLow, upsESystemBypassCurrent=upsESystemBypassCurrent, upsEBatteryTestScheduleDay=upsEBatteryTestScheduleDay, upsEModulesEntry=upsEModulesEntry, upsEModulelocationerror=upsEModulelocationerror, upsEEnvironmentContactEntry=upsEEnvironmentContactEntry, upsEBatteryABMStatus=upsEBatteryABMStatus, chargerModulesAddress=chargerModulesAddress, upsETrapType=upsETrapType, upsEBatteryEstimatedChargeRemaining=upsEBatteryEstimatedChargeRemaining, upsEIdentityUPSFirmwareVerison=upsEIdentityUPSFirmwareVerison, upsESystemOutputNumPhase=upsESystemOutputNumPhase, upsEReturnFromOverloadforewarning=upsEReturnFromOverloadforewarning, upsESystemInputNumPhases=upsESystemInputNumPhases, upsENegativeBatteryVoltage=upsENegativeBatteryVoltage, upsEBatteryCellNumber=upsEBatteryCellNumber, chargerModulesMode=chargerModulesMode, upsENotOverTemperature=upsENotOverTemperature, upsENotBelowCapacityLimit=upsENotBelowCapacityLimit, upsESystemTemperature=upsESystemTemperature, upsEBatteryLastReplacedDate=upsEBatteryLastReplacedDate, upsEEnvironmentContactTable=upsEEnvironmentContactTable, upsEEnvironmentTemperature=upsEEnvironmentTemperature, upsESystemStatus=upsESystemStatus, upsEBatteryTestSettingTime=upsEBatteryTestSettingTime, upsEControlWeeklyScheduleTable=upsEControlWeeklyScheduleTable, upsETrapsReceiverAddress=upsETrapsReceiverAddress, upsEControlWeeklyScheduleIndex=upsEControlWeeklyScheduleIndex, upsELoadSegment=upsELoadSegment, upsEOverTemperature=upsEOverTemperature, upsEModuleOutputVAS=upsEModuleOutputVAS, upsESystemOutputWatts=upsESystemOutputWatts, upsEMaintaincoverisopen=upsEMaintaincoverisopen, upsEShutdownEventAction=upsEShutdownEventAction, upsELoadSegment1OffDelay=upsELoadSegment1OffDelay, upsEModulesTable=upsEModulesTable)
