#
# PySNMP MIB module DOCS-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/arris/DOCS-QOS-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 12:54:11 2024
# On host fv-az1215-438 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
docsIfMib, = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfMib")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, Integer32, iso, Gauge32, ObjectIdentity, ModuleIdentity, TimeTicks, MibIdentifier, IpAddress, NotificationType, Counter64, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "iso", "Gauge32", "ObjectIdentity", "ModuleIdentity", "TimeTicks", "MibIdentifier", "IpAddress", "NotificationType", "Counter64", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
DisplayString, TimeStamp, TruthValue, MacAddress, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TruthValue", "MacAddress", "RowStatus", "TextualConvention")
docsQosMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 127, 7))
docsQosMIB.setRevisions(('1900-10-18 00:00',))
if mibBuilder.loadTexts: docsQosMIB.setLastUpdated('0010180000Z')
if mibBuilder.loadTexts: docsQosMIB.setOrganization('IETF IPCDN Working Group')
docsQosMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 7, 1))
class IfDirection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("downstream", 1), ("upstream", 2))

class BitRate(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'

class SchedulingType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("undefined", 1), ("bestEffort", 2), ("nonRealTimePollingService", 3), ("realTimePollingService", 4), ("unsolictedGrantServiceWithAD", 5), ("unsolictedGrantService", 6))

docsQosPktClassTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1), )
if mibBuilder.loadTexts: docsQosPktClassTable.setStatus('current')
docsQosPktClassEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS-MIB", "docsQosServiceFlowId"), (0, "DOCS-QOS-MIB", "docsQosPktClassId"))
if mibBuilder.loadTexts: docsQosPktClassEntry.setStatus('current')
docsQosPktClassId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: docsQosPktClassId.setStatus('current')
docsQosPktClassDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 2), IfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassDirection.setStatus('current')
docsQosPktClassPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassPriority.setStatus('current')
docsQosPktClassIpTosLow = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpTosLow.setStatus('current')
docsQosPktClassIpTosHigh = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpTosHigh.setStatus('current')
docsQosPktClassIpTosMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpTosMask.setStatus('current')
docsQosPktClassIpProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 258))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpProtocol.setStatus('current')
docsQosPktClassIpSourceAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpSourceAddr.setStatus('current')
docsQosPktClassIpSourceMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpSourceMask.setStatus('current')
docsQosPktClassIpDestAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpDestAddr.setStatus('current')
docsQosPktClassIpDestMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpDestMask.setStatus('current')
docsQosPktClassSourcePortStart = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassSourcePortStart.setStatus('current')
docsQosPktClassSourcePortEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassSourcePortEnd.setStatus('current')
docsQosPktClassDestPortStart = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassDestPortStart.setStatus('current')
docsQosPktClassDestPortEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassDestPortEnd.setStatus('current')
docsQosPktClassDestMacAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 16), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassDestMacAddr.setStatus('current')
docsQosPktClassDestMacMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 17), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassDestMacMask.setStatus('current')
docsQosPktClassSourceMacAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 18), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassSourceMacAddr.setStatus('current')
docsQosPktClassEnetProtocolType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("ethertype", 1), ("dsap", 2), ("mac", 3), ("all", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassEnetProtocolType.setStatus('current')
docsQosPktClassEnetProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassEnetProtocol.setStatus('current')
docsQosPktClassUserPriLow = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassUserPriLow.setStatus('current')
docsQosPktClassUserPriHigh = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassUserPriHigh.setStatus('current')
docsQosPktClassVlanId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassVlanId.setStatus('current')
docsQosPktClassState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassState.setStatus('current')
docsQosPktClassPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassPkts.setStatus('current')
docsQosPktClassBitMap = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 27), Bits().clone(namedValues=NamedValues(("rulePriority", 0), ("activationState", 1), ("ipTos", 2), ("ipProtocol", 3), ("ipSourceAddr", 4), ("ipSourceMask", 5), ("ipDestAddr", 6), ("ipDestMask", 7), ("sourcePortStart", 8), ("sourcePortEnd", 9), ("destPortStart", 10), ("destPortEnd", 11), ("destMac", 12), ("sourceMac", 13), ("ethertype", 14), ("userPri", 15), ("vlanId", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassBitMap.setStatus('current')
docsQosParamSetTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2), )
if mibBuilder.loadTexts: docsQosParamSetTable.setStatus('current')
docsQosParamSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS-MIB", "docsQosServiceFlowId"), (0, "DOCS-QOS-MIB", "docsQosParamSetType"))
if mibBuilder.loadTexts: docsQosParamSetEntry.setStatus('current')
docsQosParamSetServiceClassName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetServiceClassName.setStatus('current')
docsQosParamSetPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetPriority.setStatus('current')
docsQosParamSetMaxTrafficRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2, 6), BitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMaxTrafficRate.setStatus('current')
docsQosParamSetMaxTrafficBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMaxTrafficBurst.setStatus('current')
docsQosParamSetMinReservedRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2, 8), BitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMinReservedRate.setStatus('current')
docsQosParamSetMinReservedPkt = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMinReservedPkt.setStatus('current')
docsQosParamSetActiveTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetActiveTimeout.setStatus('current')
docsQosParamSetAdmittedTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(200)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetAdmittedTimeout.setStatus('current')
docsQosParamSetMaxConcatBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMaxConcatBurst.setStatus('current')
docsQosParamSetSchedulingType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2, 13), SchedulingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetSchedulingType.setStatus('current')
docsQosParamSetNomPollInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2, 15), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetNomPollInterval.setStatus('current')
docsQosParamSetTolPollJitter = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2, 16), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetTolPollJitter.setStatus('current')
docsQosParamSetUnsolicitGrantSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetUnsolicitGrantSize.setStatus('current')
docsQosParamSetNomGrantInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2, 18), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetNomGrantInterval.setStatus('current')
docsQosParamSetTolGrantJitter = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2, 19), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetTolGrantJitter.setStatus('current')
docsQosParamSetGrantsPerInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetGrantsPerInterval.setStatus('current')
docsQosParamSetTosAndMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetTosAndMask.setStatus('current')
docsQosParamSetTosOrMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetTosOrMask.setStatus('current')
docsQosParamSetMaxLatency = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2, 23), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMaxLatency.setStatus('current')
docsQosParamSetType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("admitted", 2), ("provisioned", 3))))
if mibBuilder.loadTexts: docsQosParamSetType.setStatus('current')
docsQosParamSetRequestPolicyOct = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetRequestPolicyOct.setStatus('current')
docsQosParamSetBitMap = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 2, 26), Bits().clone(namedValues=NamedValues(("trafficPriority", 0), ("maxTrafficRate", 1), ("maxTrafficBurst", 2), ("minReservedRate", 3), ("minReservedPkt", 4), ("activeTimeout", 5), ("admittedTimeout", 6), ("maxConcatBurst", 7), ("schedulingType", 8), ("requestPolicy", 9), ("nomPollInterval", 10), ("tolPollJitter", 11), ("unsolicitGrantSize", 12), ("nomGrantInterval", 13), ("tolGrantJitter", 14), ("grantsPerInterval", 15), ("tosOverwrite", 16), ("maxLatency", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetBitMap.setStatus('current')
docsQosServiceFlowTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 3), )
if mibBuilder.loadTexts: docsQosServiceFlowTable.setStatus('current')
docsQosServiceFlowEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS-MIB", "docsQosServiceFlowId"))
if mibBuilder.loadTexts: docsQosServiceFlowEntry.setStatus('current')
docsQosServiceFlowId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsQosServiceFlowId.setStatus('current')
docsQosServiceFlowSID = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowSID.setStatus('current')
docsQosServiceFlowDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 3, 1, 7), IfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowDirection.setStatus('current')
docsQosServiceFlowPrimary = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowPrimary.setStatus('current')
docsQosServiceFlowStatsTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 4), )
if mibBuilder.loadTexts: docsQosServiceFlowStatsTable.setStatus('current')
docsQosServiceFlowStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS-MIB", "docsQosServiceFlowId"))
if mibBuilder.loadTexts: docsQosServiceFlowStatsEntry.setStatus('current')
docsQosServiceFlowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowPkts.setStatus('current')
docsQosServiceFlowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowOctets.setStatus('current')
docsQosServiceFlowTimeCreated = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 4, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowTimeCreated.setStatus('current')
docsQosServiceFlowTimeActive = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 4, 1, 4), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowTimeActive.setStatus('current')
docsQosServiceFlowPHSUnknowns = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowPHSUnknowns.setStatus('current')
docsQosServiceFlowPolicedDropPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowPolicedDropPkts.setStatus('current')
docsQosServiceFlowPolicedDelayPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowPolicedDelayPkts.setStatus('current')
docsQosUpstreamStatsTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 5), )
if mibBuilder.loadTexts: docsQosUpstreamStatsTable.setStatus('current')
docsQosUpstreamStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS-MIB", "docsQosSID"))
if mibBuilder.loadTexts: docsQosUpstreamStatsEntry.setStatus('current')
docsQosSID = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)))
if mibBuilder.loadTexts: docsQosSID.setStatus('current')
docsQosUpstreamFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosUpstreamFragments.setStatus('current')
docsQosUpstreamFragDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosUpstreamFragDiscards.setStatus('current')
docsQosUpstreamConcatBursts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosUpstreamConcatBursts.setStatus('current')
docsQosDynamicServiceStatsTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6), )
if mibBuilder.loadTexts: docsQosDynamicServiceStatsTable.setStatus('current')
docsQosDynamicServiceStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS-MIB", "docsQosIfDirection"))
if mibBuilder.loadTexts: docsQosDynamicServiceStatsEntry.setStatus('current')
docsQosIfDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 1), IfDirection())
if mibBuilder.loadTexts: docsQosIfDirection.setStatus('current')
docsQosDSAReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSAReqs.setStatus('current')
docsQosDSARsps = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSARsps.setStatus('current')
docsQosDSAAcks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSAAcks.setStatus('current')
docsQosDSCReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSCReqs.setStatus('current')
docsQosDSCRsps = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSCRsps.setStatus('current')
docsQosDSCAcks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSCAcks.setStatus('current')
docsQosDSDReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSDReqs.setStatus('current')
docsQosDSDRsps = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSDRsps.setStatus('current')
docsQosDynamicAdds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDynamicAdds.setStatus('current')
docsQosDynamicAddFails = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDynamicAddFails.setStatus('current')
docsQosDynamicChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDynamicChanges.setStatus('current')
docsQosDynamicChangeFails = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDynamicChangeFails.setStatus('current')
docsQosDynamicDeletes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDynamicDeletes.setStatus('current')
docsQosDynamicDeleteFails = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDynamicDeleteFails.setStatus('current')
docsQosDCCReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDCCReqs.setStatus('current')
docsQosDCCRsps = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDCCRsps.setStatus('current')
docsQosDCCAcks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDCCAcks.setStatus('current')
docsQosDCCs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDCCs.setStatus('current')
docsQosDCCFails = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDCCFails.setStatus('current')
docsQosServiceFlowLogTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7), )
if mibBuilder.loadTexts: docsQosServiceFlowLogTable.setStatus('current')
docsQosServiceFlowLogEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1), ).setIndexNames((0, "DOCS-QOS-MIB", "docsQosServiceFlowLogIndex"))
if mibBuilder.loadTexts: docsQosServiceFlowLogEntry.setStatus('current')
docsQosServiceFlowLogIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsQosServiceFlowLogIndex.setStatus('current')
docsQosServiceFlowLogIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogIfIndex.setStatus('current')
docsQosServiceFlowLogSFID = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogSFID.setStatus('current')
docsQosServiceFlowLogCmMac = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogCmMac.setStatus('current')
docsQosServiceFlowLogPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogPkts.setStatus('current')
docsQosServiceFlowLogOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogOctets.setStatus('current')
docsQosServiceFlowLogTimeDeleted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogTimeDeleted.setStatus('current')
docsQosServiceFlowLogTimeCreated = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogTimeCreated.setStatus('current')
docsQosServiceFlowLogTimeActive = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 9), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogTimeActive.setStatus('current')
docsQosServiceFlowLogDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 11), IfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogDirection.setStatus('current')
docsQosServiceFlowLogPrimary = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogPrimary.setStatus('current')
docsQosServiceFlowLogServiceClassName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogServiceClassName.setStatus('current')
docsQosServiceFlowLogPolicedDropPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogPolicedDropPkts.setStatus('current')
docsQosServiceFlowLogPolicedDelayPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogPolicedDelayPkts.setStatus('current')
docsQosServiceFlowLogControl = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsQosServiceFlowLogControl.setStatus('current')
docsQosServiceClassTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8), )
if mibBuilder.loadTexts: docsQosServiceClassTable.setStatus('current')
docsQosServiceClassEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1), ).setIndexNames((0, "DOCS-QOS-MIB", "docsQosServiceClassName"))
if mibBuilder.loadTexts: docsQosServiceClassEntry.setStatus('current')
docsQosServiceClassName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: docsQosServiceClassName.setStatus('current')
docsQosServiceClassStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassStatus.setStatus('current')
docsQosServiceClassPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassPriority.setStatus('current')
docsQosServiceClassMaxTrafficRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 5), BitRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMaxTrafficRate.setStatus('current')
docsQosServiceClassMaxTrafficBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 6), Unsigned32().clone(1522)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMaxTrafficBurst.setStatus('current')
docsQosServiceClassMinReservedRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 7), BitRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMinReservedRate.setStatus('current')
docsQosServiceClassMinReservedPkt = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMinReservedPkt.setStatus('current')
docsQosServiceClassMaxConcatBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMaxConcatBurst.setStatus('current')
docsQosServiceClassNomPollInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 10), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassNomPollInterval.setStatus('current')
docsQosServiceClassTolPollJitter = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 11), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassTolPollJitter.setStatus('current')
docsQosServiceClassUnsolicitGrantSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassUnsolicitGrantSize.setStatus('current')
docsQosServiceClassNomGrantInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 13), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassNomGrantInterval.setStatus('current')
docsQosServiceClassTolGrantJitter = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 14), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassTolGrantJitter.setStatus('current')
docsQosServiceClassGrantsPerInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassGrantsPerInterval.setStatus('current')
docsQosServiceClassMaxLatency = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 16), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMaxLatency.setStatus('current')
docsQosServiceClassActiveTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassActiveTimeout.setStatus('current')
docsQosServiceClassAdmittedTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(200)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassAdmittedTimeout.setStatus('current')
docsQosServiceClassSchedulingType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 19), SchedulingType().clone('bestEffort')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassSchedulingType.setStatus('current')
docsQosServiceClassRequestPolicy = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassRequestPolicy.setStatus('current')
docsQosServiceClassTosAndMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="FF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassTosAndMask.setStatus('current')
docsQosServiceClassTosOrMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassTosOrMask.setStatus('current')
docsQosServiceClassDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 23), IfDirection().clone('upstream')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassDirection.setStatus('current')
docsQosServiceClassPolicyTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 9), )
if mibBuilder.loadTexts: docsQosServiceClassPolicyTable.setStatus('current')
docsQosServiceClassPolicyEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 9, 1), ).setIndexNames((0, "DOCS-QOS-MIB", "docsQosServiceClassPolicyIndex"))
if mibBuilder.loadTexts: docsQosServiceClassPolicyEntry.setStatus('current')
docsQosServiceClassPolicyIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: docsQosServiceClassPolicyIndex.setStatus('current')
docsQosServiceClassPolicyName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 9, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassPolicyName.setStatus('current')
docsQosServiceClassPolicyRulePriority = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassPolicyRulePriority.setStatus('current')
docsQosServiceClassPolicyStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassPolicyStatus.setStatus('current')
docsQosPHSTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 10), )
if mibBuilder.loadTexts: docsQosPHSTable.setStatus('current')
docsQosPHSEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS-MIB", "docsQosServiceFlowId"), (0, "DOCS-QOS-MIB", "docsQosPktClassId"))
if mibBuilder.loadTexts: docsQosPHSEntry.setStatus('current')
docsQosPHSField = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPHSField.setStatus('current')
docsQosPHSMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPHSMask.setStatus('current')
docsQosPHSSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPHSSize.setStatus('current')
docsQosPHSVerify = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 10, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPHSVerify.setStatus('current')
docsQosPHSIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPHSIndex.setStatus('current')
docsQosCmtsMacToSrvFlowTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 11), )
if mibBuilder.loadTexts: docsQosCmtsMacToSrvFlowTable.setStatus('current')
docsQosCmtsMacToSrvFlowEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 11, 1), ).setIndexNames((0, "DOCS-QOS-MIB", "docsQosCmtsCmMac"), (0, "DOCS-QOS-MIB", "docsQosCmtsServiceFlowId"))
if mibBuilder.loadTexts: docsQosCmtsMacToSrvFlowEntry.setStatus('current')
docsQosCmtsCmMac = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 11, 1, 1), MacAddress())
if mibBuilder.loadTexts: docsQosCmtsCmMac.setStatus('current')
docsQosCmtsServiceFlowId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsQosCmtsServiceFlowId.setStatus('current')
docsQosCmtsIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 11, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmtsIfIndex.setStatus('current')
docsQosNotification = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 7, 2))
docsQosConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 7, 3))
docsQosGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 7, 3, 1))
docsQosCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 7, 3, 2))
docsQosCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 127, 7, 3, 2, 1)).setObjects(("DOCS-QOS-MIB", "docsQosBaseGroup"), ("DOCS-QOS-MIB", "docsQosCmtsGroup"), ("DOCS-QOS-MIB", "docsQosParamSetGroup"), ("DOCS-QOS-MIB", "docsQosSrvClassPolicyGroup"), ("DOCS-QOS-MIB", "docsQosServiceClassGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQosCompliance = docsQosCompliance.setStatus('current')
docsQosBaseGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 7, 3, 1, 1)).setObjects(("DOCS-QOS-MIB", "docsQosPktClassDirection"), ("DOCS-QOS-MIB", "docsQosPktClassPriority"), ("DOCS-QOS-MIB", "docsQosPktClassIpTosLow"), ("DOCS-QOS-MIB", "docsQosPktClassIpTosHigh"), ("DOCS-QOS-MIB", "docsQosPktClassIpTosMask"), ("DOCS-QOS-MIB", "docsQosPktClassIpProtocol"), ("DOCS-QOS-MIB", "docsQosPktClassIpSourceAddr"), ("DOCS-QOS-MIB", "docsQosPktClassIpSourceMask"), ("DOCS-QOS-MIB", "docsQosPktClassIpDestAddr"), ("DOCS-QOS-MIB", "docsQosPktClassIpDestMask"), ("DOCS-QOS-MIB", "docsQosPktClassSourcePortStart"), ("DOCS-QOS-MIB", "docsQosPktClassSourcePortEnd"), ("DOCS-QOS-MIB", "docsQosPktClassDestPortStart"), ("DOCS-QOS-MIB", "docsQosPktClassDestPortEnd"), ("DOCS-QOS-MIB", "docsQosPktClassDestMacAddr"), ("DOCS-QOS-MIB", "docsQosPktClassDestMacMask"), ("DOCS-QOS-MIB", "docsQosPktClassSourceMacAddr"), ("DOCS-QOS-MIB", "docsQosPktClassEnetProtocolType"), ("DOCS-QOS-MIB", "docsQosPktClassEnetProtocol"), ("DOCS-QOS-MIB", "docsQosPktClassUserPriLow"), ("DOCS-QOS-MIB", "docsQosPktClassUserPriHigh"), ("DOCS-QOS-MIB", "docsQosPktClassVlanId"), ("DOCS-QOS-MIB", "docsQosPktClassState"), ("DOCS-QOS-MIB", "docsQosPktClassPkts"), ("DOCS-QOS-MIB", "docsQosPktClassBitMap"), ("DOCS-QOS-MIB", "docsQosServiceFlowSID"), ("DOCS-QOS-MIB", "docsQosServiceFlowDirection"), ("DOCS-QOS-MIB", "docsQosServiceFlowPrimary"), ("DOCS-QOS-MIB", "docsQosServiceFlowPkts"), ("DOCS-QOS-MIB", "docsQosServiceFlowOctets"), ("DOCS-QOS-MIB", "docsQosServiceFlowTimeCreated"), ("DOCS-QOS-MIB", "docsQosServiceFlowTimeActive"), ("DOCS-QOS-MIB", "docsQosServiceFlowPHSUnknowns"), ("DOCS-QOS-MIB", "docsQosServiceFlowPolicedDropPkts"), ("DOCS-QOS-MIB", "docsQosServiceFlowPolicedDelayPkts"), ("DOCS-QOS-MIB", "docsQosDSAReqs"), ("DOCS-QOS-MIB", "docsQosDSARsps"), ("DOCS-QOS-MIB", "docsQosDSAAcks"), ("DOCS-QOS-MIB", "docsQosDSCReqs"), ("DOCS-QOS-MIB", "docsQosDSCRsps"), ("DOCS-QOS-MIB", "docsQosDSCAcks"), ("DOCS-QOS-MIB", "docsQosDSDReqs"), ("DOCS-QOS-MIB", "docsQosDSDRsps"), ("DOCS-QOS-MIB", "docsQosDynamicAdds"), ("DOCS-QOS-MIB", "docsQosDynamicAddFails"), ("DOCS-QOS-MIB", "docsQosDynamicChanges"), ("DOCS-QOS-MIB", "docsQosDynamicChangeFails"), ("DOCS-QOS-MIB", "docsQosDynamicDeletes"), ("DOCS-QOS-MIB", "docsQosDynamicDeleteFails"), ("DOCS-QOS-MIB", "docsQosDCCReqs"), ("DOCS-QOS-MIB", "docsQosDCCRsps"), ("DOCS-QOS-MIB", "docsQosDCCAcks"), ("DOCS-QOS-MIB", "docsQosDCCs"), ("DOCS-QOS-MIB", "docsQosDCCFails"), ("DOCS-QOS-MIB", "docsQosPHSField"), ("DOCS-QOS-MIB", "docsQosPHSMask"), ("DOCS-QOS-MIB", "docsQosPHSSize"), ("DOCS-QOS-MIB", "docsQosPHSVerify"), ("DOCS-QOS-MIB", "docsQosPHSIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQosBaseGroup = docsQosBaseGroup.setStatus('current')
docsQosParamSetGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 7, 3, 1, 2)).setObjects(("DOCS-QOS-MIB", "docsQosParamSetServiceClassName"), ("DOCS-QOS-MIB", "docsQosParamSetPriority"), ("DOCS-QOS-MIB", "docsQosParamSetMaxTrafficRate"), ("DOCS-QOS-MIB", "docsQosParamSetMaxTrafficBurst"), ("DOCS-QOS-MIB", "docsQosParamSetMinReservedRate"), ("DOCS-QOS-MIB", "docsQosParamSetMinReservedPkt"), ("DOCS-QOS-MIB", "docsQosParamSetActiveTimeout"), ("DOCS-QOS-MIB", "docsQosParamSetAdmittedTimeout"), ("DOCS-QOS-MIB", "docsQosParamSetMaxConcatBurst"), ("DOCS-QOS-MIB", "docsQosParamSetSchedulingType"), ("DOCS-QOS-MIB", "docsQosParamSetNomPollInterval"), ("DOCS-QOS-MIB", "docsQosParamSetTolPollJitter"), ("DOCS-QOS-MIB", "docsQosParamSetUnsolicitGrantSize"), ("DOCS-QOS-MIB", "docsQosParamSetNomGrantInterval"), ("DOCS-QOS-MIB", "docsQosParamSetTolGrantJitter"), ("DOCS-QOS-MIB", "docsQosParamSetGrantsPerInterval"), ("DOCS-QOS-MIB", "docsQosParamSetTosAndMask"), ("DOCS-QOS-MIB", "docsQosParamSetTosOrMask"), ("DOCS-QOS-MIB", "docsQosParamSetMaxLatency"), ("DOCS-QOS-MIB", "docsQosParamSetRequestPolicyOct"), ("DOCS-QOS-MIB", "docsQosParamSetBitMap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQosParamSetGroup = docsQosParamSetGroup.setStatus('current')
docsQosCmtsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 7, 3, 1, 3)).setObjects(("DOCS-QOS-MIB", "docsQosUpstreamFragments"), ("DOCS-QOS-MIB", "docsQosUpstreamFragDiscards"), ("DOCS-QOS-MIB", "docsQosUpstreamConcatBursts"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogIfIndex"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogSFID"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogCmMac"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogPkts"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogOctets"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogTimeDeleted"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogTimeCreated"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogTimeActive"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogDirection"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogPrimary"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogServiceClassName"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogPolicedDropPkts"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogPolicedDelayPkts"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogControl"), ("DOCS-QOS-MIB", "docsQosCmtsIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQosCmtsGroup = docsQosCmtsGroup.setStatus('current')
docsQosSrvClassPolicyGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 7, 3, 1, 4)).setObjects(("DOCS-QOS-MIB", "docsQosServiceClassPolicyName"), ("DOCS-QOS-MIB", "docsQosServiceClassPolicyRulePriority"), ("DOCS-QOS-MIB", "docsQosServiceClassPolicyStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQosSrvClassPolicyGroup = docsQosSrvClassPolicyGroup.setStatus('current')
docsQosServiceClassGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 7, 3, 1, 5)).setObjects(("DOCS-QOS-MIB", "docsQosServiceClassStatus"), ("DOCS-QOS-MIB", "docsQosServiceClassPriority"), ("DOCS-QOS-MIB", "docsQosServiceClassMaxTrafficRate"), ("DOCS-QOS-MIB", "docsQosServiceClassMaxTrafficBurst"), ("DOCS-QOS-MIB", "docsQosServiceClassMinReservedRate"), ("DOCS-QOS-MIB", "docsQosServiceClassMinReservedPkt"), ("DOCS-QOS-MIB", "docsQosServiceClassMaxConcatBurst"), ("DOCS-QOS-MIB", "docsQosServiceClassNomPollInterval"), ("DOCS-QOS-MIB", "docsQosServiceClassTolPollJitter"), ("DOCS-QOS-MIB", "docsQosServiceClassUnsolicitGrantSize"), ("DOCS-QOS-MIB", "docsQosServiceClassNomGrantInterval"), ("DOCS-QOS-MIB", "docsQosServiceClassTolGrantJitter"), ("DOCS-QOS-MIB", "docsQosServiceClassGrantsPerInterval"), ("DOCS-QOS-MIB", "docsQosServiceClassMaxLatency"), ("DOCS-QOS-MIB", "docsQosServiceClassActiveTimeout"), ("DOCS-QOS-MIB", "docsQosServiceClassAdmittedTimeout"), ("DOCS-QOS-MIB", "docsQosServiceClassSchedulingType"), ("DOCS-QOS-MIB", "docsQosServiceClassRequestPolicy"), ("DOCS-QOS-MIB", "docsQosServiceClassTosAndMask"), ("DOCS-QOS-MIB", "docsQosServiceClassTosOrMask"), ("DOCS-QOS-MIB", "docsQosServiceClassDirection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQosServiceClassGroup = docsQosServiceClassGroup.setStatus('current')
mibBuilder.exportSymbols("DOCS-QOS-MIB", docsQosServiceClassAdmittedTimeout=docsQosServiceClassAdmittedTimeout, docsQosCmtsMacToSrvFlowEntry=docsQosCmtsMacToSrvFlowEntry, docsQosPktClassUserPriLow=docsQosPktClassUserPriLow, docsQosServiceFlowTable=docsQosServiceFlowTable, docsQosPktClassIpDestAddr=docsQosPktClassIpDestAddr, docsQosServiceFlowId=docsQosServiceFlowId, docsQosParamSetEntry=docsQosParamSetEntry, docsQosDynamicAddFails=docsQosDynamicAddFails, docsQosPktClassDestMacAddr=docsQosPktClassDestMacAddr, BitRate=BitRate, docsQosPktClassUserPriHigh=docsQosPktClassUserPriHigh, docsQosServiceFlowLogTimeDeleted=docsQosServiceFlowLogTimeDeleted, docsQosServiceClassName=docsQosServiceClassName, docsQosDCCFails=docsQosDCCFails, docsQosParamSetUnsolicitGrantSize=docsQosParamSetUnsolicitGrantSize, docsQosDynamicAdds=docsQosDynamicAdds, docsQosServiceClassPolicyEntry=docsQosServiceClassPolicyEntry, docsQosUpstreamFragDiscards=docsQosUpstreamFragDiscards, docsQosPktClassEnetProtocol=docsQosPktClassEnetProtocol, docsQosPktClassEntry=docsQosPktClassEntry, docsQosServiceFlowPHSUnknowns=docsQosServiceFlowPHSUnknowns, docsQosCmtsIfIndex=docsQosCmtsIfIndex, docsQosServiceFlowSID=docsQosServiceFlowSID, docsQosParamSetMaxLatency=docsQosParamSetMaxLatency, docsQosServiceFlowLogIfIndex=docsQosServiceFlowLogIfIndex, docsQosParamSetPriority=docsQosParamSetPriority, docsQosServiceFlowLogTimeCreated=docsQosServiceFlowLogTimeCreated, IfDirection=IfDirection, docsQosPHSMask=docsQosPHSMask, docsQosPktClassDestPortEnd=docsQosPktClassDestPortEnd, docsQosParamSetMaxTrafficBurst=docsQosParamSetMaxTrafficBurst, docsQosParamSetGroup=docsQosParamSetGroup, docsQosParamSetType=docsQosParamSetType, docsQosPktClassDirection=docsQosPktClassDirection, docsQosDSARsps=docsQosDSARsps, docsQosDynamicServiceStatsTable=docsQosDynamicServiceStatsTable, docsQosDCCReqs=docsQosDCCReqs, docsQosServiceClassEntry=docsQosServiceClassEntry, docsQosServiceClassPolicyName=docsQosServiceClassPolicyName, docsQosPktClassTable=docsQosPktClassTable, docsQosPktClassDestMacMask=docsQosPktClassDestMacMask, docsQosParamSetBitMap=docsQosParamSetBitMap, docsQosServiceFlowLogPolicedDropPkts=docsQosServiceFlowLogPolicedDropPkts, docsQosParamSetTosAndMask=docsQosParamSetTosAndMask, docsQosServiceClassTolPollJitter=docsQosServiceClassTolPollJitter, docsQosPktClassSourcePortStart=docsQosPktClassSourcePortStart, docsQosServiceClassGroup=docsQosServiceClassGroup, docsQosMIBObjects=docsQosMIBObjects, docsQosServiceClassMinReservedRate=docsQosServiceClassMinReservedRate, docsQosUpstreamConcatBursts=docsQosUpstreamConcatBursts, docsQosServiceFlowLogTimeActive=docsQosServiceFlowLogTimeActive, docsQosCompliance=docsQosCompliance, docsQosCmtsGroup=docsQosCmtsGroup, docsQosServiceFlowDirection=docsQosServiceFlowDirection, docsQosCmtsCmMac=docsQosCmtsCmMac, docsQosPktClassIpTosHigh=docsQosPktClassIpTosHigh, docsQosServiceFlowLogEntry=docsQosServiceFlowLogEntry, docsQosServiceClassMinReservedPkt=docsQosServiceClassMinReservedPkt, docsQosServiceFlowEntry=docsQosServiceFlowEntry, docsQosParamSetTolPollJitter=docsQosParamSetTolPollJitter, docsQosPktClassIpSourceMask=docsQosPktClassIpSourceMask, docsQosServiceClassPolicyStatus=docsQosServiceClassPolicyStatus, docsQosUpstreamStatsTable=docsQosUpstreamStatsTable, docsQosServiceFlowPolicedDelayPkts=docsQosServiceFlowPolicedDelayPkts, docsQosPktClassPriority=docsQosPktClassPriority, docsQosServiceClassActiveTimeout=docsQosServiceClassActiveTimeout, docsQosServiceClassPolicyRulePriority=docsQosServiceClassPolicyRulePriority, docsQosPktClassIpTosMask=docsQosPktClassIpTosMask, docsQosParamSetNomPollInterval=docsQosParamSetNomPollInterval, docsQosPktClassVlanId=docsQosPktClassVlanId, docsQosServiceFlowPrimary=docsQosServiceFlowPrimary, docsQosServiceFlowLogSFID=docsQosServiceFlowLogSFID, docsQosDynamicChangeFails=docsQosDynamicChangeFails, docsQosMIB=docsQosMIB, docsQosPktClassSourceMacAddr=docsQosPktClassSourceMacAddr, docsQosServiceClassMaxConcatBurst=docsQosServiceClassMaxConcatBurst, docsQosDynamicServiceStatsEntry=docsQosDynamicServiceStatsEntry, docsQosParamSetTosOrMask=docsQosParamSetTosOrMask, PYSNMP_MODULE_ID=docsQosMIB, docsQosParamSetActiveTimeout=docsQosParamSetActiveTimeout, docsQosDCCAcks=docsQosDCCAcks, docsQosServiceFlowTimeCreated=docsQosServiceFlowTimeCreated, docsQosParamSetMinReservedRate=docsQosParamSetMinReservedRate, docsQosPHSField=docsQosPHSField, docsQosServiceClassTosOrMask=docsQosServiceClassTosOrMask, docsQosPktClassIpSourceAddr=docsQosPktClassIpSourceAddr, docsQosSrvClassPolicyGroup=docsQosSrvClassPolicyGroup, docsQosGroups=docsQosGroups, docsQosServiceClassPolicyIndex=docsQosServiceClassPolicyIndex, docsQosParamSetAdmittedTimeout=docsQosParamSetAdmittedTimeout, docsQosServiceClassTolGrantJitter=docsQosServiceClassTolGrantJitter, docsQosPktClassId=docsQosPktClassId, docsQosServiceClassMaxTrafficBurst=docsQosServiceClassMaxTrafficBurst, docsQosCmtsServiceFlowId=docsQosCmtsServiceFlowId, docsQosConformance=docsQosConformance, docsQosServiceFlowLogPrimary=docsQosServiceFlowLogPrimary, docsQosServiceFlowStatsTable=docsQosServiceFlowStatsTable, SchedulingType=SchedulingType, docsQosPktClassPkts=docsQosPktClassPkts, docsQosServiceFlowPkts=docsQosServiceFlowPkts, docsQosPktClassDestPortStart=docsQosPktClassDestPortStart, docsQosServiceFlowLogOctets=docsQosServiceFlowLogOctets, docsQosDSCReqs=docsQosDSCReqs, docsQosServiceClassMaxTrafficRate=docsQosServiceClassMaxTrafficRate, docsQosServiceClassStatus=docsQosServiceClassStatus, docsQosServiceClassDirection=docsQosServiceClassDirection, docsQosParamSetServiceClassName=docsQosParamSetServiceClassName, docsQosParamSetGrantsPerInterval=docsQosParamSetGrantsPerInterval, docsQosServiceFlowTimeActive=docsQosServiceFlowTimeActive, docsQosServiceFlowLogServiceClassName=docsQosServiceFlowLogServiceClassName, docsQosPktClassIpTosLow=docsQosPktClassIpTosLow, docsQosParamSetTable=docsQosParamSetTable, docsQosServiceClassSchedulingType=docsQosServiceClassSchedulingType, docsQosDSAAcks=docsQosDSAAcks, docsQosServiceClassGrantsPerInterval=docsQosServiceClassGrantsPerInterval, docsQosDSCRsps=docsQosDSCRsps, docsQosPktClassIpProtocol=docsQosPktClassIpProtocol, docsQosServiceFlowStatsEntry=docsQosServiceFlowStatsEntry, docsQosServiceClassRequestPolicy=docsQosServiceClassRequestPolicy, docsQosParamSetMaxConcatBurst=docsQosParamSetMaxConcatBurst, docsQosServiceFlowLogPolicedDelayPkts=docsQosServiceFlowLogPolicedDelayPkts, docsQosPktClassEnetProtocolType=docsQosPktClassEnetProtocolType, docsQosBaseGroup=docsQosBaseGroup, docsQosDSAReqs=docsQosDSAReqs, docsQosUpstreamStatsEntry=docsQosUpstreamStatsEntry, docsQosCmtsMacToSrvFlowTable=docsQosCmtsMacToSrvFlowTable, docsQosServiceClassNomGrantInterval=docsQosServiceClassNomGrantInterval, docsQosDSDRsps=docsQosDSDRsps, docsQosDynamicDeletes=docsQosDynamicDeletes, docsQosDCCs=docsQosDCCs, docsQosServiceClassPriority=docsQosServiceClassPriority, docsQosServiceClassTable=docsQosServiceClassTable, docsQosParamSetMinReservedPkt=docsQosParamSetMinReservedPkt, docsQosPktClassIpDestMask=docsQosPktClassIpDestMask, docsQosServiceFlowPolicedDropPkts=docsQosServiceFlowPolicedDropPkts, docsQosNotification=docsQosNotification, docsQosUpstreamFragments=docsQosUpstreamFragments, docsQosSID=docsQosSID, docsQosParamSetSchedulingType=docsQosParamSetSchedulingType, docsQosPktClassBitMap=docsQosPktClassBitMap, docsQosDynamicChanges=docsQosDynamicChanges, docsQosServiceFlowLogTable=docsQosServiceFlowLogTable, docsQosDynamicDeleteFails=docsQosDynamicDeleteFails, docsQosPktClassState=docsQosPktClassState, docsQosCompliances=docsQosCompliances, docsQosServiceClassMaxLatency=docsQosServiceClassMaxLatency, docsQosServiceFlowLogControl=docsQosServiceFlowLogControl, docsQosPHSSize=docsQosPHSSize, docsQosDSDReqs=docsQosDSDReqs, docsQosDCCRsps=docsQosDCCRsps, docsQosServiceFlowLogPkts=docsQosServiceFlowLogPkts, docsQosPHSVerify=docsQosPHSVerify, docsQosParamSetMaxTrafficRate=docsQosParamSetMaxTrafficRate, docsQosServiceClassUnsolicitGrantSize=docsQosServiceClassUnsolicitGrantSize, docsQosServiceFlowLogCmMac=docsQosServiceFlowLogCmMac, docsQosServiceFlowLogIndex=docsQosServiceFlowLogIndex, docsQosServiceClassNomPollInterval=docsQosServiceClassNomPollInterval, docsQosPHSIndex=docsQosPHSIndex, docsQosIfDirection=docsQosIfDirection, docsQosParamSetTolGrantJitter=docsQosParamSetTolGrantJitter, docsQosParamSetRequestPolicyOct=docsQosParamSetRequestPolicyOct, docsQosServiceFlowLogDirection=docsQosServiceFlowLogDirection, docsQosPktClassSourcePortEnd=docsQosPktClassSourcePortEnd, docsQosDSCAcks=docsQosDSCAcks, docsQosServiceClassTosAndMask=docsQosServiceClassTosAndMask, docsQosServiceClassPolicyTable=docsQosServiceClassPolicyTable, docsQosPHSTable=docsQosPHSTable, docsQosServiceFlowOctets=docsQosServiceFlowOctets, docsQosParamSetNomGrantInterval=docsQosParamSetNomGrantInterval, docsQosPHSEntry=docsQosPHSEntry)
