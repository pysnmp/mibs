#
# PySNMP MIB module TOKEN-RING-RMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/output/asn1/TOKEN-RING-RMON-MIB
# Produced by pysmi-1.1.12 at Tue May 28 12:02:48 2024
# On host fv-az1490-484 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
OwnerString, EntryStatus, rmon, statistics, history = mibBuilder.importSymbols("RFC1271-MIB", "OwnerString", "EntryStatus", "rmon", "statistics", "history")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Counter64, ModuleIdentity, Integer32, Unsigned32, Counter32, ObjectIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, MibIdentifier, Bits, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "ModuleIdentity", "Integer32", "Unsigned32", "Counter32", "ObjectIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "MibIdentifier", "Bits", "IpAddress", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class TimeInterval(Integer32):
    pass

tokenRing = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 10))
tokenRingMLStatsTable = MibTable((1, 3, 6, 1, 2, 1, 16, 1, 2), )
if mibBuilder.loadTexts: tokenRingMLStatsTable.setStatus('mandatory')
tokenRingMLStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 1, 2, 1), ).setIndexNames((0, "TOKEN-RING-RMON-MIB", "tokenRingMLStatsIndex"))
if mibBuilder.loadTexts: tokenRingMLStatsEntry.setStatus('mandatory')
tokenRingMLStatsIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsIndex.setStatus('mandatory')
tokenRingMLStatsDataSource = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingMLStatsDataSource.setStatus('mandatory')
tokenRingMLStatsDropEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsDropEvents.setStatus('mandatory')
tokenRingMLStatsMacOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsMacOctets.setStatus('mandatory')
tokenRingMLStatsMacPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsMacPkts.setStatus('mandatory')
tokenRingMLStatsRingPurgeEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsRingPurgeEvents.setStatus('mandatory')
tokenRingMLStatsRingPurgePkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsRingPurgePkts.setStatus('mandatory')
tokenRingMLStatsBeaconEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsBeaconEvents.setStatus('mandatory')
tokenRingMLStatsBeaconTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 9), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsBeaconTime.setStatus('mandatory')
tokenRingMLStatsBeaconPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsBeaconPkts.setStatus('mandatory')
tokenRingMLStatsClaimTokenEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsClaimTokenEvents.setStatus('mandatory')
tokenRingMLStatsClaimTokenPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsClaimTokenPkts.setStatus('mandatory')
tokenRingMLStatsNAUNChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsNAUNChanges.setStatus('mandatory')
tokenRingMLStatsLineErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsLineErrors.setStatus('mandatory')
tokenRingMLStatsInternalErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsInternalErrors.setStatus('mandatory')
tokenRingMLStatsBurstErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsBurstErrors.setStatus('mandatory')
tokenRingMLStatsACErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsACErrors.setStatus('mandatory')
tokenRingMLStatsAbortErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsAbortErrors.setStatus('mandatory')
tokenRingMLStatsLostFrameErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsLostFrameErrors.setStatus('mandatory')
tokenRingMLStatsCongestionErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsCongestionErrors.setStatus('mandatory')
tokenRingMLStatsFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsFrameCopiedErrors.setStatus('mandatory')
tokenRingMLStatsFrequencyErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsFrequencyErrors.setStatus('mandatory')
tokenRingMLStatsTokenErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsTokenErrors.setStatus('mandatory')
tokenRingMLStatsSoftErrorReports = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsSoftErrorReports.setStatus('mandatory')
tokenRingMLStatsRingPollEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsRingPollEvents.setStatus('mandatory')
tokenRingMLStatsOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 26), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingMLStatsOwner.setStatus('mandatory')
tokenRingMLStatsStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 27), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingMLStatsStatus.setStatus('mandatory')
tokenRingPStatsTable = MibTable((1, 3, 6, 1, 2, 1, 16, 1, 3), )
if mibBuilder.loadTexts: tokenRingPStatsTable.setStatus('mandatory')
tokenRingPStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 1, 3, 1), ).setIndexNames((0, "TOKEN-RING-RMON-MIB", "tokenRingPStatsIndex"))
if mibBuilder.loadTexts: tokenRingPStatsEntry.setStatus('mandatory')
tokenRingPStatsIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsIndex.setStatus('mandatory')
tokenRingPStatsDataSource = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingPStatsDataSource.setStatus('mandatory')
tokenRingPStatsDropEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDropEvents.setStatus('mandatory')
tokenRingPStatsDataOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataOctets.setStatus('mandatory')
tokenRingPStatsDataPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataPkts.setStatus('mandatory')
tokenRingPStatsDataBroadcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataBroadcastPkts.setStatus('mandatory')
tokenRingPStatsDataMulticastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataMulticastPkts.setStatus('mandatory')
tokenRingPStatsDataPkts18to63Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataPkts18to63Octets.setStatus('mandatory')
tokenRingPStatsDataPkts64to127Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataPkts64to127Octets.setStatus('mandatory')
tokenRingPStatsDataPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataPkts128to255Octets.setStatus('mandatory')
tokenRingPStatsDataPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataPkts256to511Octets.setStatus('mandatory')
tokenRingPStatsDataPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataPkts512to1023Octets.setStatus('mandatory')
tokenRingPStatsDataPkts1024to2047Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataPkts1024to2047Octets.setStatus('mandatory')
tokenRingPStatsDataPkts2048to4095Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataPkts2048to4095Octets.setStatus('mandatory')
tokenRingPStatsDataPkts4096to8191Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataPkts4096to8191Octets.setStatus('mandatory')
tokenRingPStatsDataPkts8192to18000Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataPkts8192to18000Octets.setStatus('mandatory')
tokenRingPStatsDataPktsGreaterThan18000Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataPktsGreaterThan18000Octets.setStatus('mandatory')
tokenRingPStatsOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 18), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingPStatsOwner.setStatus('mandatory')
tokenRingPStatsStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 19), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingPStatsStatus.setStatus('mandatory')
tokenRingMLHistoryTable = MibTable((1, 3, 6, 1, 2, 1, 16, 2, 3), )
if mibBuilder.loadTexts: tokenRingMLHistoryTable.setStatus('mandatory')
tokenRingMLHistoryEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 2, 3, 1), ).setIndexNames((0, "TOKEN-RING-RMON-MIB", "tokenRingMLHistoryIndex"), (0, "TOKEN-RING-RMON-MIB", "tokenRingMLHistorySampleIndex"))
if mibBuilder.loadTexts: tokenRingMLHistoryEntry.setStatus('mandatory')
tokenRingMLHistoryIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryIndex.setStatus('mandatory')
tokenRingMLHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistorySampleIndex.setStatus('mandatory')
tokenRingMLHistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryIntervalStart.setStatus('mandatory')
tokenRingMLHistoryDropEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryDropEvents.setStatus('mandatory')
tokenRingMLHistoryMacOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryMacOctets.setStatus('mandatory')
tokenRingMLHistoryMacPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryMacPkts.setStatus('mandatory')
tokenRingMLHistoryRingPurgeEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryRingPurgeEvents.setStatus('mandatory')
tokenRingMLHistoryRingPurgePkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryRingPurgePkts.setStatus('mandatory')
tokenRingMLHistoryBeaconEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryBeaconEvents.setStatus('mandatory')
tokenRingMLHistoryBeaconTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 10), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryBeaconTime.setStatus('mandatory')
tokenRingMLHistoryBeaconPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryBeaconPkts.setStatus('mandatory')
tokenRingMLHistoryClaimTokenEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryClaimTokenEvents.setStatus('mandatory')
tokenRingMLHistoryClaimTokenPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryClaimTokenPkts.setStatus('mandatory')
tokenRingMLHistoryNAUNChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryNAUNChanges.setStatus('mandatory')
tokenRingMLHistoryLineErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryLineErrors.setStatus('mandatory')
tokenRingMLHistoryInternalErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryInternalErrors.setStatus('mandatory')
tokenRingMLHistoryBurstErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryBurstErrors.setStatus('mandatory')
tokenRingMLHistoryACErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryACErrors.setStatus('mandatory')
tokenRingMLHistoryAbortErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryAbortErrors.setStatus('mandatory')
tokenRingMLHistoryLostFrameErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryLostFrameErrors.setStatus('mandatory')
tokenRingMLHistoryCongestionErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryCongestionErrors.setStatus('mandatory')
tokenRingMLHistoryFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryFrameCopiedErrors.setStatus('mandatory')
tokenRingMLHistoryFrequencyErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryFrequencyErrors.setStatus('mandatory')
tokenRingMLHistoryTokenErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryTokenErrors.setStatus('mandatory')
tokenRingMLHistorySoftErrorReports = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistorySoftErrorReports.setStatus('mandatory')
tokenRingMLHistoryRingPollEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryRingPollEvents.setStatus('mandatory')
tokenRingMLHistoryActiveStations = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryActiveStations.setStatus('mandatory')
tokenRingPHistoryTable = MibTable((1, 3, 6, 1, 2, 1, 16, 2, 4), )
if mibBuilder.loadTexts: tokenRingPHistoryTable.setStatus('mandatory')
tokenRingPHistoryEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 2, 4, 1), ).setIndexNames((0, "TOKEN-RING-RMON-MIB", "tokenRingPHistoryIndex"), (0, "TOKEN-RING-RMON-MIB", "tokenRingPHistorySampleIndex"))
if mibBuilder.loadTexts: tokenRingPHistoryEntry.setStatus('mandatory')
tokenRingPHistoryIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryIndex.setStatus('mandatory')
tokenRingPHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistorySampleIndex.setStatus('mandatory')
tokenRingPHistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryIntervalStart.setStatus('mandatory')
tokenRingPHistoryDropEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDropEvents.setStatus('mandatory')
tokenRingPHistoryDataOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataOctets.setStatus('mandatory')
tokenRingPHistoryDataPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataPkts.setStatus('mandatory')
tokenRingPHistoryDataBroadcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataBroadcastPkts.setStatus('mandatory')
tokenRingPHistoryDataMulticastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataMulticastPkts.setStatus('mandatory')
tokenRingPHistoryDataPkts18to63Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataPkts18to63Octets.setStatus('mandatory')
tokenRingPHistoryDataPkts64to127Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataPkts64to127Octets.setStatus('mandatory')
tokenRingPHistoryDataPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataPkts128to255Octets.setStatus('mandatory')
tokenRingPHistoryDataPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataPkts256to511Octets.setStatus('mandatory')
tokenRingPHistoryDataPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataPkts512to1023Octets.setStatus('mandatory')
tokenRingPHistoryDataPkts1024to2047Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataPkts1024to2047Octets.setStatus('mandatory')
tokenRingPHistoryDataPkts2048to4095Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataPkts2048to4095Octets.setStatus('mandatory')
tokenRingPHistoryDataPkts4096to8191Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataPkts4096to8191Octets.setStatus('mandatory')
tokenRingPHistoryDataPkts8192to18000Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataPkts8192to18000Octets.setStatus('mandatory')
tokenRingPHistoryDataPktsGreaterThan18000Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataPktsGreaterThan18000Octets.setStatus('mandatory')
ringStationControlTable = MibTable((1, 3, 6, 1, 2, 1, 16, 10, 1), )
if mibBuilder.loadTexts: ringStationControlTable.setStatus('mandatory')
ringStationControlEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 10, 1, 1), ).setIndexNames((0, "TOKEN-RING-RMON-MIB", "ringStationControlIfIndex"))
if mibBuilder.loadTexts: ringStationControlEntry.setStatus('mandatory')
ringStationControlIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationControlIfIndex.setStatus('mandatory')
ringStationControlTableSize = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationControlTableSize.setStatus('mandatory')
ringStationControlActiveStations = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationControlActiveStations.setStatus('mandatory')
ringStationControlRingState = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normalOperation", 1), ("ringPurgeState", 2), ("claimTokenState", 3), ("beaconFrameStreamingState", 4), ("beaconBitStreamingState", 5), ("beaconRingSignalLossState", 6), ("beaconSetRecoveryModeState", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationControlRingState.setStatus('mandatory')
ringStationControlBeaconSender = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationControlBeaconSender.setStatus('mandatory')
ringStationControlBeaconNAUN = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationControlBeaconNAUN.setStatus('mandatory')
ringStationControlActiveMonitor = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 1, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationControlActiveMonitor.setStatus('mandatory')
ringStationControlOrderChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationControlOrderChanges.setStatus('mandatory')
ringStationControlOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 1, 1, 9), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringStationControlOwner.setStatus('mandatory')
ringStationControlStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 1, 1, 10), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringStationControlStatus.setStatus('mandatory')
ringStationTable = MibTable((1, 3, 6, 1, 2, 1, 16, 10, 2), )
if mibBuilder.loadTexts: ringStationTable.setStatus('mandatory')
ringStationEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 10, 2, 1), ).setIndexNames((0, "TOKEN-RING-RMON-MIB", "ringStationIfIndex"), (0, "TOKEN-RING-RMON-MIB", "ringStationMacAddress"))
if mibBuilder.loadTexts: ringStationEntry.setStatus('mandatory')
ringStationIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationIfIndex.setStatus('mandatory')
ringStationMacAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationMacAddress.setStatus('mandatory')
ringStationLastNAUN = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationLastNAUN.setStatus('mandatory')
ringStationStationStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("forcedRemoval", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationStationStatus.setStatus('mandatory')
ringStationLastEnterTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationLastEnterTime.setStatus('mandatory')
ringStationLastExitTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationLastExitTime.setStatus('mandatory')
ringStationDuplicateAddresses = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationDuplicateAddresses.setStatus('mandatory')
ringStationInLineErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationInLineErrors.setStatus('mandatory')
ringStationOutLineErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationOutLineErrors.setStatus('mandatory')
ringStationInternalErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationInternalErrors.setStatus('mandatory')
ringStationInBurstErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationInBurstErrors.setStatus('mandatory')
ringStationOutBurstErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationOutBurstErrors.setStatus('mandatory')
ringStationACErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationACErrors.setStatus('mandatory')
ringStationAbortErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationAbortErrors.setStatus('mandatory')
ringStationLostFrameErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationLostFrameErrors.setStatus('mandatory')
ringStationCongestionErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationCongestionErrors.setStatus('mandatory')
ringStationFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationFrameCopiedErrors.setStatus('mandatory')
ringStationFrequencyErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationFrequencyErrors.setStatus('mandatory')
ringStationTokenErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationTokenErrors.setStatus('mandatory')
ringStationInBeaconErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationInBeaconErrors.setStatus('mandatory')
ringStationOutBeaconErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationOutBeaconErrors.setStatus('mandatory')
ringStationInsertions = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationInsertions.setStatus('mandatory')
ringStationOrderTable = MibTable((1, 3, 6, 1, 2, 1, 16, 10, 3), )
if mibBuilder.loadTexts: ringStationOrderTable.setStatus('mandatory')
ringStationOrderEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 10, 3, 1), ).setIndexNames((0, "TOKEN-RING-RMON-MIB", "ringStationOrderIfIndex"), (0, "TOKEN-RING-RMON-MIB", "ringStationOrderOrderIndex"))
if mibBuilder.loadTexts: ringStationOrderEntry.setStatus('mandatory')
ringStationOrderIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationOrderIfIndex.setStatus('mandatory')
ringStationOrderOrderIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationOrderOrderIndex.setStatus('mandatory')
ringStationOrderMacAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationOrderMacAddress.setStatus('mandatory')
ringStationConfigControlTable = MibTable((1, 3, 6, 1, 2, 1, 16, 10, 4), )
if mibBuilder.loadTexts: ringStationConfigControlTable.setStatus('mandatory')
ringStationConfigControlEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 10, 4, 1), ).setIndexNames((0, "TOKEN-RING-RMON-MIB", "ringStationConfigControlIfIndex"), (0, "TOKEN-RING-RMON-MIB", "ringStationConfigControlMacAddress"))
if mibBuilder.loadTexts: ringStationConfigControlEntry.setStatus('mandatory')
ringStationConfigControlIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationConfigControlIfIndex.setStatus('mandatory')
ringStationConfigControlMacAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationConfigControlMacAddress.setStatus('mandatory')
ringStationConfigControlRemove = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stable", 1), ("removing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringStationConfigControlRemove.setStatus('mandatory')
ringStationConfigControlUpdateStats = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stable", 1), ("updating", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringStationConfigControlUpdateStats.setStatus('mandatory')
ringStationConfigTable = MibTable((1, 3, 6, 1, 2, 1, 16, 10, 5), )
if mibBuilder.loadTexts: ringStationConfigTable.setStatus('mandatory')
ringStationConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 10, 5, 1), ).setIndexNames((0, "TOKEN-RING-RMON-MIB", "ringStationConfigIfIndex"), (0, "TOKEN-RING-RMON-MIB", "ringStationConfigMacAddress"))
if mibBuilder.loadTexts: ringStationConfigEntry.setStatus('mandatory')
ringStationConfigIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationConfigIfIndex.setStatus('mandatory')
ringStationConfigMacAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationConfigMacAddress.setStatus('mandatory')
ringStationConfigUpdateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 5, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationConfigUpdateTime.setStatus('mandatory')
ringStationConfigLocation = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationConfigLocation.setStatus('mandatory')
ringStationConfigMicrocode = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationConfigMicrocode.setStatus('mandatory')
ringStationConfigGroupAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationConfigGroupAddress.setStatus('mandatory')
ringStationConfigFunctionalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 5, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationConfigFunctionalAddress.setStatus('mandatory')
sourceRoutingStatsTable = MibTable((1, 3, 6, 1, 2, 1, 16, 10, 6), )
if mibBuilder.loadTexts: sourceRoutingStatsTable.setStatus('mandatory')
sourceRoutingStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 10, 6, 1), ).setIndexNames((0, "TOKEN-RING-RMON-MIB", "sourceRoutingStatsIfIndex"))
if mibBuilder.loadTexts: sourceRoutingStatsEntry.setStatus('mandatory')
sourceRoutingStatsIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsIfIndex.setStatus('mandatory')
sourceRoutingStatsRingNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsRingNumber.setStatus('mandatory')
sourceRoutingStatsInFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsInFrames.setStatus('mandatory')
sourceRoutingStatsOutFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsOutFrames.setStatus('mandatory')
sourceRoutingStatsThroughFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsThroughFrames.setStatus('mandatory')
sourceRoutingStatsAllRoutesBroadcastFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsAllRoutesBroadcastFrames.setStatus('mandatory')
sourceRoutingStatsSingleRouteBroadcastFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsSingleRouteBroadcastFrames.setStatus('mandatory')
sourceRoutingStatsInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsInOctets.setStatus('mandatory')
sourceRoutingStatsOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsOutOctets.setStatus('mandatory')
sourceRoutingStatsThroughOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsThroughOctets.setStatus('mandatory')
sourceRoutingStatsAllRoutesBroadcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsAllRoutesBroadcastOctets.setStatus('mandatory')
sourceRoutingStatsSingleRoutesBroadcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsSingleRoutesBroadcastOctets.setStatus('mandatory')
sourceRoutingStatsLocalLLCFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsLocalLLCFrames.setStatus('mandatory')
sourceRoutingStats1HopFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStats1HopFrames.setStatus('mandatory')
sourceRoutingStats2HopsFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStats2HopsFrames.setStatus('mandatory')
sourceRoutingStats3HopsFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStats3HopsFrames.setStatus('mandatory')
sourceRoutingStats4HopsFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStats4HopsFrames.setStatus('mandatory')
sourceRoutingStats5HopsFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStats5HopsFrames.setStatus('mandatory')
sourceRoutingStats6HopsFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStats6HopsFrames.setStatus('mandatory')
sourceRoutingStats7HopsFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStats7HopsFrames.setStatus('mandatory')
sourceRoutingStats8HopsFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStats8HopsFrames.setStatus('mandatory')
sourceRoutingStatsMoreThan8HopsFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsMoreThan8HopsFrames.setStatus('mandatory')
sourceRoutingStatsOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 23), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceRoutingStatsOwner.setStatus('mandatory')
sourceRoutingStatsStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 24), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceRoutingStatsStatus.setStatus('mandatory')
mibBuilder.exportSymbols("TOKEN-RING-RMON-MIB", ringStationACErrors=ringStationACErrors, tokenRingPStatsDataBroadcastPkts=tokenRingPStatsDataBroadcastPkts, ringStationControlOwner=ringStationControlOwner, ringStationAbortErrors=ringStationAbortErrors, tokenRingMLHistoryTokenErrors=tokenRingMLHistoryTokenErrors, ringStationConfigControlUpdateStats=ringStationConfigControlUpdateStats, tokenRingMLStatsClaimTokenEvents=tokenRingMLStatsClaimTokenEvents, tokenRingMLHistoryBeaconEvents=tokenRingMLHistoryBeaconEvents, tokenRingPHistoryDropEvents=tokenRingPHistoryDropEvents, tokenRingMLStatsLineErrors=tokenRingMLStatsLineErrors, tokenRingMLHistoryACErrors=tokenRingMLHistoryACErrors, ringStationInsertions=ringStationInsertions, ringStationOrderMacAddress=ringStationOrderMacAddress, tokenRingMLHistoryAbortErrors=tokenRingMLHistoryAbortErrors, sourceRoutingStats6HopsFrames=sourceRoutingStats6HopsFrames, tokenRingPHistoryTable=tokenRingPHistoryTable, sourceRoutingStats2HopsFrames=sourceRoutingStats2HopsFrames, tokenRingPStatsDataPktsGreaterThan18000Octets=tokenRingPStatsDataPktsGreaterThan18000Octets, ringStationControlTableSize=ringStationControlTableSize, tokenRingMLHistoryRingPurgePkts=tokenRingMLHistoryRingPurgePkts, tokenRingMLHistoryCongestionErrors=tokenRingMLHistoryCongestionErrors, ringStationLastNAUN=ringStationLastNAUN, ringStationStationStatus=ringStationStationStatus, tokenRingMLHistoryMacPkts=tokenRingMLHistoryMacPkts, ringStationConfigControlRemove=ringStationConfigControlRemove, tokenRingPHistoryDataBroadcastPkts=tokenRingPHistoryDataBroadcastPkts, tokenRingMLHistoryBurstErrors=tokenRingMLHistoryBurstErrors, ringStationConfigUpdateTime=ringStationConfigUpdateTime, ringStationControlStatus=ringStationControlStatus, tokenRingPHistoryIndex=tokenRingPHistoryIndex, tokenRingMLStatsMacOctets=tokenRingMLStatsMacOctets, ringStationControlRingState=ringStationControlRingState, ringStationOutLineErrors=ringStationOutLineErrors, ringStationConfigControlIfIndex=ringStationConfigControlIfIndex, ringStationDuplicateAddresses=ringStationDuplicateAddresses, tokenRingPStatsDataPkts8192to18000Octets=tokenRingPStatsDataPkts8192to18000Octets, tokenRingPStatsDataPkts=tokenRingPStatsDataPkts, tokenRingMLHistoryLostFrameErrors=tokenRingMLHistoryLostFrameErrors, tokenRingMLHistoryIntervalStart=tokenRingMLHistoryIntervalStart, tokenRingPHistoryDataPktsGreaterThan18000Octets=tokenRingPHistoryDataPktsGreaterThan18000Octets, tokenRingMLStatsACErrors=tokenRingMLStatsACErrors, sourceRoutingStatsAllRoutesBroadcastFrames=sourceRoutingStatsAllRoutesBroadcastFrames, ringStationMacAddress=ringStationMacAddress, tokenRing=tokenRing, ringStationConfigGroupAddress=ringStationConfigGroupAddress, ringStationLastExitTime=ringStationLastExitTime, ringStationInLineErrors=ringStationInLineErrors, tokenRingPHistoryDataMulticastPkts=tokenRingPHistoryDataMulticastPkts, tokenRingMLStatsMacPkts=tokenRingMLStatsMacPkts, tokenRingPStatsDataPkts256to511Octets=tokenRingPStatsDataPkts256to511Octets, ringStationControlBeaconSender=ringStationControlBeaconSender, tokenRingPStatsOwner=tokenRingPStatsOwner, ringStationConfigLocation=ringStationConfigLocation, sourceRoutingStatsLocalLLCFrames=sourceRoutingStatsLocalLLCFrames, ringStationOutBurstErrors=ringStationOutBurstErrors, MacAddress=MacAddress, ringStationConfigMicrocode=ringStationConfigMicrocode, ringStationConfigFunctionalAddress=ringStationConfigFunctionalAddress, tokenRingPHistoryDataPkts=tokenRingPHistoryDataPkts, tokenRingMLHistoryNAUNChanges=tokenRingMLHistoryNAUNChanges, tokenRingPHistoryDataPkts64to127Octets=tokenRingPHistoryDataPkts64to127Octets, ringStationOrderEntry=ringStationOrderEntry, tokenRingPHistoryDataOctets=tokenRingPHistoryDataOctets, tokenRingMLStatsRingPurgePkts=tokenRingMLStatsRingPurgePkts, ringStationLastEnterTime=ringStationLastEnterTime, sourceRoutingStatsThroughFrames=sourceRoutingStatsThroughFrames, tokenRingMLStatsFrameCopiedErrors=tokenRingMLStatsFrameCopiedErrors, ringStationConfigControlMacAddress=ringStationConfigControlMacAddress, TimeInterval=TimeInterval, tokenRingMLStatsCongestionErrors=tokenRingMLStatsCongestionErrors, tokenRingMLHistorySoftErrorReports=tokenRingMLHistorySoftErrorReports, ringStationControlOrderChanges=ringStationControlOrderChanges, sourceRoutingStatsEntry=sourceRoutingStatsEntry, tokenRingPStatsTable=tokenRingPStatsTable, tokenRingMLStatsEntry=tokenRingMLStatsEntry, tokenRingPStatsDataPkts1024to2047Octets=tokenRingPStatsDataPkts1024to2047Octets, ringStationConfigTable=ringStationConfigTable, ringStationCongestionErrors=ringStationCongestionErrors, ringStationOutBeaconErrors=ringStationOutBeaconErrors, tokenRingMLHistoryRingPurgeEvents=tokenRingMLHistoryRingPurgeEvents, tokenRingMLHistoryFrequencyErrors=tokenRingMLHistoryFrequencyErrors, ringStationControlEntry=ringStationControlEntry, sourceRoutingStats3HopsFrames=sourceRoutingStats3HopsFrames, ringStationLostFrameErrors=ringStationLostFrameErrors, ringStationFrameCopiedErrors=ringStationFrameCopiedErrors, sourceRoutingStats8HopsFrames=sourceRoutingStats8HopsFrames, ringStationInBurstErrors=ringStationInBurstErrors, ringStationConfigIfIndex=ringStationConfigIfIndex, tokenRingPStatsDataPkts64to127Octets=tokenRingPStatsDataPkts64to127Octets, tokenRingPHistoryDataPkts18to63Octets=tokenRingPHistoryDataPkts18to63Octets, ringStationConfigMacAddress=ringStationConfigMacAddress, sourceRoutingStatsAllRoutesBroadcastOctets=sourceRoutingStatsAllRoutesBroadcastOctets, tokenRingPStatsDataPkts4096to8191Octets=tokenRingPStatsDataPkts4096to8191Octets, tokenRingMLStatsFrequencyErrors=tokenRingMLStatsFrequencyErrors, tokenRingMLStatsRingPollEvents=tokenRingMLStatsRingPollEvents, tokenRingMLHistoryActiveStations=tokenRingMLHistoryActiveStations, sourceRoutingStatsThroughOctets=sourceRoutingStatsThroughOctets, ringStationInBeaconErrors=ringStationInBeaconErrors, ringStationFrequencyErrors=ringStationFrequencyErrors, sourceRoutingStatsRingNumber=sourceRoutingStatsRingNumber, tokenRingPHistoryDataPkts128to255Octets=tokenRingPHistoryDataPkts128to255Octets, tokenRingPStatsDataSource=tokenRingPStatsDataSource, tokenRingPStatsStatus=tokenRingPStatsStatus, sourceRoutingStatsOwner=sourceRoutingStatsOwner, tokenRingPHistoryEntry=tokenRingPHistoryEntry, tokenRingMLHistoryInternalErrors=tokenRingMLHistoryInternalErrors, tokenRingPStatsDataPkts18to63Octets=tokenRingPStatsDataPkts18to63Octets, tokenRingMLStatsBurstErrors=tokenRingMLStatsBurstErrors, tokenRingMLHistoryIndex=tokenRingMLHistoryIndex, tokenRingMLStatsOwner=tokenRingMLStatsOwner, tokenRingMLHistoryDropEvents=tokenRingMLHistoryDropEvents, tokenRingMLHistoryLineErrors=tokenRingMLHistoryLineErrors, sourceRoutingStatsOutOctets=sourceRoutingStatsOutOctets, sourceRoutingStatsStatus=sourceRoutingStatsStatus, tokenRingMLStatsDataSource=tokenRingMLStatsDataSource, tokenRingMLHistoryTable=tokenRingMLHistoryTable, ringStationControlActiveMonitor=ringStationControlActiveMonitor, ringStationTokenErrors=ringStationTokenErrors, ringStationControlActiveStations=ringStationControlActiveStations, tokenRingPStatsEntry=tokenRingPStatsEntry, tokenRingPStatsDropEvents=tokenRingPStatsDropEvents, tokenRingMLHistoryMacOctets=tokenRingMLHistoryMacOctets, tokenRingMLStatsDropEvents=tokenRingMLStatsDropEvents, tokenRingMLHistorySampleIndex=tokenRingMLHistorySampleIndex, tokenRingMLStatsAbortErrors=tokenRingMLStatsAbortErrors, sourceRoutingStats1HopFrames=sourceRoutingStats1HopFrames, tokenRingPHistoryDataPkts4096to8191Octets=tokenRingPHistoryDataPkts4096to8191Octets, tokenRingPHistoryDataPkts512to1023Octets=tokenRingPHistoryDataPkts512to1023Octets, tokenRingMLStatsRingPurgeEvents=tokenRingMLStatsRingPurgeEvents, ringStationControlBeaconNAUN=ringStationControlBeaconNAUN, ringStationConfigControlEntry=ringStationConfigControlEntry, ringStationControlTable=ringStationControlTable, ringStationOrderIfIndex=ringStationOrderIfIndex, tokenRingMLStatsStatus=tokenRingMLStatsStatus, tokenRingPHistorySampleIndex=tokenRingPHistorySampleIndex, ringStationIfIndex=ringStationIfIndex, sourceRoutingStatsOutFrames=sourceRoutingStatsOutFrames, tokenRingPHistoryDataPkts2048to4095Octets=tokenRingPHistoryDataPkts2048to4095Octets, tokenRingPHistoryDataPkts8192to18000Octets=tokenRingPHistoryDataPkts8192to18000Octets, tokenRingPStatsDataPkts2048to4095Octets=tokenRingPStatsDataPkts2048to4095Octets, tokenRingMLStatsSoftErrorReports=tokenRingMLStatsSoftErrorReports, sourceRoutingStats7HopsFrames=sourceRoutingStats7HopsFrames, ringStationOrderTable=ringStationOrderTable, tokenRingMLStatsBeaconTime=tokenRingMLStatsBeaconTime, tokenRingPStatsDataPkts128to255Octets=tokenRingPStatsDataPkts128to255Octets, tokenRingMLHistoryFrameCopiedErrors=tokenRingMLHistoryFrameCopiedErrors, tokenRingPStatsDataPkts512to1023Octets=tokenRingPStatsDataPkts512to1023Octets, tokenRingMLHistoryBeaconPkts=tokenRingMLHistoryBeaconPkts, tokenRingMLStatsNAUNChanges=tokenRingMLStatsNAUNChanges, tokenRingMLStatsLostFrameErrors=tokenRingMLStatsLostFrameErrors, tokenRingMLHistoryEntry=tokenRingMLHistoryEntry, tokenRingMLHistoryBeaconTime=tokenRingMLHistoryBeaconTime, sourceRoutingStatsIfIndex=sourceRoutingStatsIfIndex, sourceRoutingStatsMoreThan8HopsFrames=sourceRoutingStatsMoreThan8HopsFrames, ringStationInternalErrors=ringStationInternalErrors, ringStationConfigControlTable=ringStationConfigControlTable, tokenRingPHistoryDataPkts1024to2047Octets=tokenRingPHistoryDataPkts1024to2047Octets, tokenRingPHistoryDataPkts256to511Octets=tokenRingPHistoryDataPkts256to511Octets, ringStationConfigEntry=ringStationConfigEntry, tokenRingPHistoryIntervalStart=tokenRingPHistoryIntervalStart, sourceRoutingStatsTable=sourceRoutingStatsTable, ringStationEntry=ringStationEntry, sourceRoutingStatsSingleRoutesBroadcastOctets=sourceRoutingStatsSingleRoutesBroadcastOctets, tokenRingMLHistoryClaimTokenPkts=tokenRingMLHistoryClaimTokenPkts, tokenRingMLStatsBeaconPkts=tokenRingMLStatsBeaconPkts, tokenRingMLStatsClaimTokenPkts=tokenRingMLStatsClaimTokenPkts, tokenRingPStatsDataOctets=tokenRingPStatsDataOctets, tokenRingMLStatsBeaconEvents=tokenRingMLStatsBeaconEvents, tokenRingMLStatsIndex=tokenRingMLStatsIndex, sourceRoutingStatsInOctets=sourceRoutingStatsInOctets, tokenRingMLHistoryRingPollEvents=tokenRingMLHistoryRingPollEvents, sourceRoutingStats4HopsFrames=sourceRoutingStats4HopsFrames, ringStationTable=ringStationTable, sourceRoutingStats5HopsFrames=sourceRoutingStats5HopsFrames, sourceRoutingStatsInFrames=sourceRoutingStatsInFrames, tokenRingMLHistoryClaimTokenEvents=tokenRingMLHistoryClaimTokenEvents, ringStationOrderOrderIndex=ringStationOrderOrderIndex, tokenRingPStatsDataMulticastPkts=tokenRingPStatsDataMulticastPkts, sourceRoutingStatsSingleRouteBroadcastFrames=sourceRoutingStatsSingleRouteBroadcastFrames, tokenRingMLStatsTokenErrors=tokenRingMLStatsTokenErrors, tokenRingPStatsIndex=tokenRingPStatsIndex, ringStationControlIfIndex=ringStationControlIfIndex, tokenRingMLStatsTable=tokenRingMLStatsTable, tokenRingMLStatsInternalErrors=tokenRingMLStatsInternalErrors)
