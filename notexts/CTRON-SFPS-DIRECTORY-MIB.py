#
# PySNMP MIB module CTRON-SFPS-DIRECTORY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-SFPS-DIRECTORY-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 09:42:04 2024
# On host fv-az566-8 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
sfpsTopologyNodes, sfpsDirFilterAPI, sfpsTopologyDAPI, sfpsTopologyAliases, sfpsTopologyRemoteNodes, sfpsServiceCenter, sfpsTopologyDirStats, sfpsTopologyDAPITest = mibBuilder.importSymbols("CTRON-SFPS-INCLUDE-MIB", "sfpsTopologyNodes", "sfpsDirFilterAPI", "sfpsTopologyDAPI", "sfpsTopologyAliases", "sfpsTopologyRemoteNodes", "sfpsServiceCenter", "sfpsTopologyDirStats", "sfpsTopologyDAPITest")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Gauge32, NotificationType, Unsigned32, Integer32, Counter32, IpAddress, MibIdentifier, ObjectIdentity, TimeTicks, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "NotificationType", "Unsigned32", "Integer32", "Counter32", "IpAddress", "MibIdentifier", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class SfpsSwitchPort(Integer32):
    pass

class SfpsAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class HexInteger(Integer32):
    pass

sfpsNodeTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1), )
if mibBuilder.loadTexts: sfpsNodeTable.setStatus('mandatory')
sfpsNodeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1), ).setIndexNames((0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsNodeTableBaseHash"), (0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsNodeTableHashIndex"))
if mibBuilder.loadTexts: sfpsNodeTableEntry.setStatus('mandatory')
sfpsNodeTableBaseHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableBaseHash.setStatus('mandatory')
sfpsNodeTableHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableHashIndex.setStatus('mandatory')
sfpsNodeTableSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableSwitchType.setStatus('mandatory')
sfpsNodeTableSwitchAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableSwitchAddress.setStatus('mandatory')
sfpsNodeTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTablePort.setStatus('mandatory')
sfpsNodeTableBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableBaseType.setStatus('mandatory')
sfpsNodeTableBaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableBaseAddress.setStatus('mandatory')
sfpsNodeTableEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableEntryType.setStatus('mandatory')
sfpsNodeTableCallTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 9), HexInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableCallTag.setStatus('mandatory')
sfpsNodeTableLastHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableLastHeard.setStatus('mandatory')
sfpsNodeTableAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableAge.setStatus('mandatory')
sfpsNodeTableAliasCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableAliasCount.setStatus('mandatory')
sfpsNodeTableVlanCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableVlanCount.setStatus('mandatory')
sfpsNodeTableNodeLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableNodeLocked.setStatus('mandatory')
sfpsNodeTableNodeLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableNodeLocal.setStatus('mandatory')
sfpsNodeTableSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableSelf.setStatus('mandatory')
sfpsNodeTableNext = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableNext.setStatus('mandatory')
sfpsNodeTablePrev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTablePrev.setStatus('mandatory')
sfpsAliasTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1), )
if mibBuilder.loadTexts: sfpsAliasTable.setStatus('mandatory')
sfpsAliasTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1), ).setIndexNames((0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsAliasTableAliasHash"), (0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsAliasTableBaseHash"), (0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsAliasTableHashIndex"))
if mibBuilder.loadTexts: sfpsAliasTableEntry.setStatus('mandatory')
sfpsAliasTableAliasHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableAliasHash.setStatus('mandatory')
sfpsAliasTableBaseHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableBaseHash.setStatus('mandatory')
sfpsAliasTableHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableHashIndex.setStatus('mandatory')
sfpsAliasTableSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableSwitchType.setStatus('mandatory')
sfpsAliasTableSwitchAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableSwitchAddress.setStatus('mandatory')
sfpsAliasTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTablePort.setStatus('mandatory')
sfpsAliasTableBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableBaseType.setStatus('mandatory')
sfpsAliasTableBaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableBaseAddress.setStatus('mandatory')
sfpsAliasTableAliasType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableAliasType.setStatus('mandatory')
sfpsAliasTableAliasAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableAliasAddress.setStatus('mandatory')
sfpsAliasTableAliasAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableAliasAge.setStatus('mandatory')
sfpsAliasTableSwitchOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableSwitchOctets.setStatus('mandatory')
sfpsAliasTableBaseOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableBaseOctets.setStatus('mandatory')
sfpsAliasTableAliasOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableAliasOctets.setStatus('mandatory')
sfpsAliasTableOpaqueTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableOpaqueTag.setStatus('mandatory')
sfpsAliasTableVlanPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("inherited", 2), ("autoRegistered", 3), ("static", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableVlanPolicy.setStatus('mandatory')
sfpsAliasTableBaseLock = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableBaseLock.setStatus('mandatory')
sfpsAliasTableAliasLock = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableAliasLock.setStatus('mandatory')
sfpsAliasTableAliasState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("remote", 2), ("local", 3), ("hidden", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableAliasState.setStatus('mandatory')
sfpsAliasTableSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableSelf.setStatus('mandatory')
sfpsAliasTableNext = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableNext.setStatus('mandatory')
sfpsAliasTablePrev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTablePrev.setStatus('mandatory')
sfpsAliasDeltaTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2), )
if mibBuilder.loadTexts: sfpsAliasDeltaTable.setStatus('mandatory')
sfpsAliasDeltaTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2, 1), ).setIndexNames((0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsAliasDeltaTableIndex"))
if mibBuilder.loadTexts: sfpsAliasDeltaTableEntry.setStatus('mandatory')
sfpsAliasDeltaTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaTableIndex.setStatus('mandatory')
sfpsAliasDeltaTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaTablePort.setStatus('mandatory')
sfpsAliasDeltaTableBase = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2, 1, 3), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaTableBase.setStatus('mandatory')
sfpsAliasDeltaTableAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaTableAlias.setStatus('mandatory')
sfpsAliasDeltaTableAliasLength = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaTableAliasLength.setStatus('mandatory')
sfpsAliasDeltaTableOpaqueTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaTableOpaqueTag.setStatus('mandatory')
sfpsAliasDeltaTableAliasState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("added", 2), ("deleted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaTableAliasState.setStatus('mandatory')
sfpsAliasDeltaTableNodeLock = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaTableNodeLock.setStatus('mandatory')
sfpsAliasDeltaTableAliasLock = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaTableAliasLock.setStatus('mandatory')
sfpsAliasDeltaTableTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaTableTimestamp.setStatus('mandatory')
sfpsAliasDeltaCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaCount.setStatus('mandatory')
sfpsAliasDeltaSetBack = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lock", 1), ("unlock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsAliasDeltaSetBack.setStatus('mandatory')
sfpsAliasDeltaFullFlag = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("unfull", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaFullFlag.setStatus('mandatory')
sfpsDAPITestVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("delete", 3), ("resolve", 4), ("multiResolve", 5), ("fillDirectory", 6), ("ageDirectory", 7), ("mapVlanOnPort", 8), ("mapVlanOffPort", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPITestVerb.setStatus('mandatory')
sfpsDAPITestSwitchMac = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 2), SfpsAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPITestSwitchMac.setStatus('mandatory')
sfpsDAPITestPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 3), SfpsSwitchPort()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPITestPort.setStatus('mandatory')
sfpsDAPITestAddrOneTag = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("macDX", 1), ("ipxSap", 2), ("ipxRIP", 3), ("inetYP", 4), ("inetUDP", 5), ("ipxIpx", 6), ("inetIP", 7), ("inetRPC", 8), ("inetRIP", 9), ("macDXMcast", 10), ("atDDP", 11), ("empty", 12), ("vlan", 13), ("hostName", 14), ("netBiosName", 15), ("inetIPMask", 16), ("ipxSap8022", 17), ("ipxSapSnap", 18), ("ipxSapEnet", 19), ("ipxRip8022", 20), ("ipxRipSnap", 21), ("ipxRipEnet", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPITestAddrOneTag.setStatus('mandatory')
sfpsDAPITestAddrOneValue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPITestAddrOneValue.setStatus('mandatory')
sfpsDAPITestAddrTwoTag = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("macDX", 1), ("ipxSap", 2), ("ipxRIP", 3), ("inetYP", 4), ("inetUDP", 5), ("ipxIpx", 6), ("inetIP", 7), ("inetRPC", 8), ("inetRIP", 9), ("macDXMcast", 10), ("atDDP", 11), ("empty", 12), ("vlan", 13), ("hostName", 14), ("netBiosName", 15), ("inetIPMask", 16), ("ipxSap8022", 17), ("ipxSapSnap", 18), ("ipxSapEnet", 19), ("ipxRip8022", 20), ("ipxRipSnap", 21), ("ipxRipEnet", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPITestAddrTwoTag.setStatus('mandatory')
sfpsDAPITestAddrTwoValue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPITestAddrTwoValue.setStatus('mandatory')
sfpsDAPITestCallTag = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPITestCallTag.setStatus('mandatory')
sfpsDAPITestOutputTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 9), )
if mibBuilder.loadTexts: sfpsDAPITestOutputTable.setStatus('mandatory')
sfpsDAPITestOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 9, 1), ).setIndexNames((0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsDAPITestOutputIndex"))
if mibBuilder.loadTexts: sfpsDAPITestOutputEntry.setStatus('mandatory')
sfpsDAPITestOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDAPITestOutputIndex.setStatus('mandatory')
sfpsDAPITestOutputSwitchMac = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 9, 1, 2), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDAPITestOutputSwitchMac.setStatus('mandatory')
sfpsDAPITestOutputPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDAPITestOutputPort.setStatus('mandatory')
sfpsDAPITestOutputAddrOneTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("macDX", 1), ("ipxSap", 2), ("ipxRIP", 3), ("inetYP", 4), ("inetUDP", 5), ("ipxIpx", 6), ("inetIP", 7), ("inetRPC", 8), ("inetRIP", 9), ("macDXMcast", 10), ("atDDP", 11), ("empty", 12), ("vlan", 13), ("hostName", 14), ("netBiosName", 15), ("inetIPMask", 16), ("ipxSap8022", 17), ("ipxSapSnap", 18), ("ipxSapEnet", 19), ("ipxRip8022", 20), ("ipxRipSnap", 21), ("ipxRipEnet", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDAPITestOutputAddrOneTag.setStatus('mandatory')
sfpsDAPITestOutputAddrOneValue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDAPITestOutputAddrOneValue.setStatus('mandatory')
sfpsDAPITestOutputAddrTwoTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("macDX", 1), ("ipxSap", 2), ("ipxRIP", 3), ("inetYP", 4), ("inetUDP", 5), ("ipxIpx", 6), ("inetIP", 7), ("inetRPC", 8), ("inetRIP", 9), ("macDXMcast", 10), ("atDDP", 11), ("empty", 12), ("vlan", 13), ("hostName", 14), ("netBiosName", 15), ("inetIPMask", 16), ("ipxSap8022", 17), ("ipxSapSnap", 18), ("ipxSapEnet", 19), ("ipxRip8022", 20), ("ipxRipSnap", 21), ("ipxRipEnet", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDAPITestOutputAddrTwoTag.setStatus('mandatory')
sfpsDAPITestOutputAddrTwoValue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 9, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDAPITestOutputAddrTwoValue.setStatus('mandatory')
sfpsDAPITestOutputCallTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDAPITestOutputCallTag.setStatus('mandatory')
sfpsDAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("delete", 3), ("clearPort", 4), ("clearPortLocals", 5), ("clearSwitchRefs", 6), ("lockNode", 7), ("unlockNode", 8), ("restrictPort", 9), ("unrestrictPort", 10), ("ageNodes", 11), ("ageAliases", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPIVerb.setStatus('mandatory')
sfpsDAPIPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPIPort.setStatus('mandatory')
sfpsDAPINodeType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 10, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPINodeType.setStatus('mandatory')
sfpsDAPINodeValue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 10, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPINodeValue.setStatus('mandatory')
sfpsDAPIAliasType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 10, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPIAliasType.setStatus('mandatory')
sfpsDAPIAliasValue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 10, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPIAliasValue.setStatus('mandatory')
sfpsDAPIAge = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 10, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPIAge.setStatus('mandatory')
sfpsServiceCenterDirectoryTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 3), )
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryTable.setStatus('mandatory')
sfpsServiceCenterDirectoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 3, 1), ).setIndexNames((0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsServiceCenterDirectoryHashLeaf"))
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryEntry.setStatus('mandatory')
sfpsServiceCenterDirectoryHashLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 3, 1, 1), HexInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryHashLeaf.setStatus('mandatory')
sfpsServiceCenterDirectoryMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryMetric.setStatus('mandatory')
sfpsServiceCenterDirectoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryName.setStatus('mandatory')
sfpsServiceCenterDirectoryOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("kStatusRunning", 1), ("kStatusHalted", 2), ("kStatusPending", 3), ("kStatusFaulted", 4), ("kStatusNotStarted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryOperStatus.setStatus('mandatory')
sfpsServiceCenterDirectoryAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryAdminStatus.setStatus('mandatory')
sfpsServiceCenterDirectoryStatusTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 3, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryStatusTime.setStatus('mandatory')
sfpsServiceCenterDirectoryRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryRequests.setStatus('mandatory')
sfpsServiceCenterDirectoryResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryResponses.setStatus('mandatory')
sfpsTopologyDirStatsTotalUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsTotalUsage.setStatus('mandatory')
sfpsTopologyDirStatsDynamicUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsDynamicUsage.setStatus('mandatory')
sfpsTopologyDirStatsNumOfNodes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNumOfNodes.setStatus('mandatory')
sfpsTopologyDirStatsNodeUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNodeUsage.setStatus('mandatory')
sfpsTopologyDirStatsNumLocalNodes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNumLocalNodes.setStatus('mandatory')
sfpsTopologyDirStatsLocalNodeUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsLocalNodeUsage.setStatus('mandatory')
sfpsTopologyDirStatsMaxLocalNodes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsMaxLocalNodes.setStatus('mandatory')
sfpsTopologyDirStatsNumRemoteNodes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNumRemoteNodes.setStatus('mandatory')
sfpsTopologyDirStatsRemoteNodeUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsRemoteNodeUsage.setStatus('mandatory')
sfpsTopologyDirStatsMaxRemoteNodes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsMaxRemoteNodes.setStatus('mandatory')
sfpsTopologyDirStatsNumOfAliases = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNumOfAliases.setStatus('mandatory')
sfpsTopologyDirStatsAliasUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsAliasUsage.setStatus('mandatory')
sfpsTopologyDirStatsStaticUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsStaticUsage.setStatus('mandatory')
sfpsTopologyDirStatsObjectsUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsObjectsUsage.setStatus('mandatory')
sfpsTopologyDirStatsNodeTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNodeTableSize.setStatus('mandatory')
sfpsTopologyDirStatsNodeTableUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNodeTableUsage.setStatus('mandatory')
sfpsTopologyDirStatsAliasTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsAliasTableSize.setStatus('mandatory')
sfpsTopologyDirStatsAliasTableUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsAliasTableUsage.setStatus('mandatory')
sfpsTopologyDirStatsNodeCollisions = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNodeCollisions.setStatus('mandatory')
sfpsTopologyDirStatsNodeLongestChain = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNodeLongestChain.setStatus('mandatory')
sfpsTopologyDirStatsAliasCollisions = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsAliasCollisions.setStatus('mandatory')
sfpsTopologyDirStatsAliasLongestChain = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsAliasLongestChain.setStatus('mandatory')
sfpsTopologyDirStatsLocalAddsRefused = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsLocalAddsRefused.setStatus('mandatory')
sfpsTopologyDirStatsAliasRemotesReplaced = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsAliasRemotesReplaced.setStatus('mandatory')
sfpsTopologyDirStatsAliasMultiPortClears = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsAliasMultiPortClears.setStatus('mandatory')
sfpsTopologyDirStatsReservedForRemoteNodes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsReservedForRemoteNodes.setStatus('mandatory')
sfpsTopologyDirStatsNumSwitches = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNumSwitches.setStatus('mandatory')
sfpsTopologyDirStatsSwitchUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsSwitchUsage.setStatus('mandatory')
sfpsTopologyDirStatsMaxSwitches = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsMaxSwitches.setStatus('mandatory')
sfpsTopologyDirStatsSwitchTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsSwitchTableSize.setStatus('mandatory')
sfpsTopologyDirStatsSwitchTableUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsSwitchTableUsage.setStatus('mandatory')
sfpsTopologyDirStatsSwitchLookups = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsSwitchLookups.setStatus('mandatory')
sfpsTopologyDirStatsSwitchCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsSwitchCacheHits.setStatus('mandatory')
sfpsTopologyDirStatsNumVlans = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNumVlans.setStatus('mandatory')
sfpsTopologyDirStatsVlanUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsVlanUsage.setStatus('mandatory')
sfpsTopologyDirStatsMaxVlans = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsMaxVlans.setStatus('mandatory')
sfpsTopologyDirStatsVlanTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsVlanTableSize.setStatus('mandatory')
sfpsTopologyDirStatsVlanTableUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsVlanTableUsage.setStatus('mandatory')
sfpsTopologyDirStatsVlanLookups = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsVlanLookups.setStatus('mandatory')
sfpsTopologyDirStatsVlanCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsVlanCacheHits.setStatus('mandatory')
sfpsTopologyDirStatsNodeAliasMax = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNodeAliasMax.setStatus('mandatory')
sfpsTopologyDirStatsLocalAliasRefused = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsLocalAliasRefused.setStatus('mandatory')
sfpsTopologyDirStatsRemoteAliasRemoved = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsRemoteAliasRemoved.setStatus('mandatory')
sfpsDirAliasStatsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 13), )
if mibBuilder.loadTexts: sfpsDirAliasStatsTable.setStatus('mandatory')
sfpsDirAliasStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 13, 1), ).setIndexNames((0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsDirAliasStatsAliasType"))
if mibBuilder.loadTexts: sfpsDirAliasStatsEntry.setStatus('mandatory')
sfpsDirAliasStatsAliasType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirAliasStatsAliasType.setStatus('mandatory')
sfpsDirAliasStatsAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirAliasStatsAliasName.setStatus('mandatory')
sfpsDirAliasStatsNumOfAliases = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirAliasStatsNumOfAliases.setStatus('mandatory')
sfpsDirAliasStatsAliasUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirAliasStatsAliasUsage.setStatus('mandatory')
sfpsDirAliasStatsMaxAliases = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirAliasStatsMaxAliases.setStatus('mandatory')
sfpsDirFilterAliasTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3), )
if mibBuilder.loadTexts: sfpsDirFilterAliasTable.setStatus('mandatory')
sfpsDirFilterAliasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1), ).setIndexNames((0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsDirFilterAliasLockCount"), (0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsDirFilterAliasAliasHash"), (0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsDirFilterAliasBaseHash"), (0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsDirFilterAliasHashIndex"))
if mibBuilder.loadTexts: sfpsDirFilterAliasEntry.setStatus('mandatory')
sfpsDirFilterAliasLockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasLockCount.setStatus('mandatory')
sfpsDirFilterAliasAliasHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasAliasHash.setStatus('mandatory')
sfpsDirFilterAliasBaseHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasBaseHash.setStatus('mandatory')
sfpsDirFilterAliasHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasHashIndex.setStatus('mandatory')
sfpsDirFilterAliasDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasDomain.setStatus('mandatory')
sfpsDirFilterAliasChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasChassisType.setStatus('mandatory')
sfpsDirFilterAliasChassisLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasChassisLoad.setStatus('mandatory')
sfpsDirFilterAliasSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasSwitchType.setStatus('mandatory')
sfpsDirFilterAliasSwitchLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasSwitchLoad.setStatus('mandatory')
sfpsDirFilterAliasInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasInPort.setStatus('mandatory')
sfpsDirFilterAliasBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasBaseType.setStatus('mandatory')
sfpsDirFilterAliasBaseLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasBaseLoad.setStatus('mandatory')
sfpsDirFilterAliasNodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasNodeState.setStatus('mandatory')
sfpsDirFilterAliasNodeAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasNodeAge.setStatus('mandatory')
sfpsDirFilterAliasNodeLock = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked-to-port", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasNodeLock.setStatus('mandatory')
sfpsDirFilterAliasLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasLinkType.setStatus('mandatory')
sfpsDirFilterAliasLinkLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasLinkLoad.setStatus('mandatory')
sfpsDirFilterAliasLinkAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 18), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasLinkAge.setStatus('mandatory')
sfpsDirFilterAliasLinkLock = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked-to-node", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasLinkLock.setStatus('mandatory')
sfpsDirFilterAliasVlanLearned = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("inherited", 2), ("amr", 3), ("static", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasVlanLearned.setStatus('mandatory')
sfpsDirFilterAliasOpaqueTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasOpaqueTag.setStatus('mandatory')
sfpsDirFilterAliasChassisOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasChassisOctets.setStatus('mandatory')
sfpsDirFilterAliasSwitchOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasSwitchOctets.setStatus('mandatory')
sfpsDirFilterAliasNodeOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasNodeOctets.setStatus('mandatory')
sfpsDirFilterAliasLinkOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasLinkOctets.setStatus('mandatory')
sfpsDirFilterAliasNodeLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasNodeLocal.setStatus('mandatory')
sfpsDirFilterAliasLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("remote", 2), ("local", 3), ("hidden", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasLinkState.setStatus('mandatory')
sfpsDirFilterNodeTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2), )
if mibBuilder.loadTexts: sfpsDirFilterNodeTable.setStatus('mandatory')
sfpsDirFilterNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1), ).setIndexNames((0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsDirFilterNodeLockCount"), (0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsDirFilterNodeNodeIndex"), (0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsDirFilterNodeLinkIndex"))
if mibBuilder.loadTexts: sfpsDirFilterNodeEntry.setStatus('mandatory')
sfpsDirFilterNodeLockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeLockCount.setStatus('mandatory')
sfpsDirFilterNodeNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeNodeIndex.setStatus('mandatory')
sfpsDirFilterNodeLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkIndex.setStatus('mandatory')
sfpsDirFilterNodeNodeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeNodeCount.setStatus('mandatory')
sfpsDirFilterNodeLinkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkCount.setStatus('mandatory')
sfpsDirFilterNodeDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeDomainName.setStatus('mandatory')
sfpsDirFilterNodeChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeChassisType.setStatus('mandatory')
sfpsDirFilterNodeChassisLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeChassisLoad.setStatus('mandatory')
sfpsDirFilterNodeSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeSwitchType.setStatus('mandatory')
sfpsDirFilterNodeSwitchLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeSwitchLoad.setStatus('mandatory')
sfpsDirFilterNodeInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeInPort.setStatus('mandatory')
sfpsDirFilterNodeBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeBaseType.setStatus('mandatory')
sfpsDirFilterNodeBaseLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeBaseLoad.setStatus('mandatory')
sfpsDirFilterNodeNodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeNodeState.setStatus('mandatory')
sfpsDirFilterNodeNodeAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeNodeAge.setStatus('mandatory')
sfpsDirFilterNodeNodeLock = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked-to-port", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeNodeLock.setStatus('mandatory')
sfpsDirFilterNodeLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkType.setStatus('mandatory')
sfpsDirFilterNodeLinkLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkLoad.setStatus('mandatory')
sfpsDirFilterNodeLinkAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkAge.setStatus('mandatory')
sfpsDirFilterNodeLinkLock = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked-to-node", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkLock.setStatus('mandatory')
sfpsDirFilterNodeVlanLearned = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("inherit", 2), ("autoReg", 3), ("static", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeVlanLearned.setStatus('mandatory')
sfpsDirFilterNodeOpaqueTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeOpaqueTag.setStatus('mandatory')
sfpsDirFilterNodeChassisOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeChassisOctets.setStatus('mandatory')
sfpsDirFilterNodeSwitchOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeSwitchOctets.setStatus('mandatory')
sfpsDirFilterNodeNodeOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeNodeOctets.setStatus('mandatory')
sfpsDirFilterNodeLinkOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkOctets.setStatus('mandatory')
sfpsDirFilterNodeNodeLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeNodeLocal.setStatus('mandatory')
sfpsDirFilterNodeLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("remote", 2), ("local", 3), ("hidden", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkState.setStatus('mandatory')
sfpsDirFilterAPILockAdmin = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("lock", 2), ("unlock", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirFilterAPILockAdmin.setStatus('mandatory')
sfpsDirFilterAPILockStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("locked", 2), ("unlocked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAPILockStatus.setStatus('mandatory')
sfpsDirFilterAPILockCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirFilterAPILockCount.setStatus('mandatory')
sfpsDirFilterAPIValueType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirFilterAPIValueType.setStatus('mandatory')
sfpsDirFilterAPIValue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirFilterAPIValue.setStatus('mandatory')
sfpsDirFilterAPILockTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirFilterAPILockTimeOut.setStatus('mandatory')
sfpsDirFilterAPILockTimeElapsed = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAPILockTimeElapsed.setStatus('mandatory')
mibBuilder.exportSymbols("CTRON-SFPS-DIRECTORY-MIB", sfpsTopologyDirStatsAliasTableUsage=sfpsTopologyDirStatsAliasTableUsage, sfpsNodeTableNodeLocal=sfpsNodeTableNodeLocal, sfpsNodeTableAliasCount=sfpsNodeTableAliasCount, sfpsAliasTableBaseLock=sfpsAliasTableBaseLock, sfpsDirFilterNodeBaseType=sfpsDirFilterNodeBaseType, sfpsAliasTableOpaqueTag=sfpsAliasTableOpaqueTag, sfpsDAPITestSwitchMac=sfpsDAPITestSwitchMac, sfpsAliasTableSwitchType=sfpsAliasTableSwitchType, sfpsDirFilterNodeDomainName=sfpsDirFilterNodeDomainName, sfpsDirFilterNodeLinkState=sfpsDirFilterNodeLinkState, sfpsAliasDeltaTablePort=sfpsAliasDeltaTablePort, sfpsServiceCenterDirectoryTable=sfpsServiceCenterDirectoryTable, sfpsDirFilterAliasLinkLoad=sfpsDirFilterAliasLinkLoad, sfpsAliasTableBaseOctets=sfpsAliasTableBaseOctets, sfpsAliasDeltaTableIndex=sfpsAliasDeltaTableIndex, sfpsAliasDeltaSetBack=sfpsAliasDeltaSetBack, sfpsAliasDeltaTable=sfpsAliasDeltaTable, sfpsDirFilterNodeSwitchType=sfpsDirFilterNodeSwitchType, sfpsAliasTableAliasHash=sfpsAliasTableAliasHash, sfpsDirFilterNodeChassisType=sfpsDirFilterNodeChassisType, sfpsDirFilterAliasEntry=sfpsDirFilterAliasEntry, sfpsNodeTablePrev=sfpsNodeTablePrev, sfpsAliasTableNext=sfpsAliasTableNext, sfpsDirAliasStatsTable=sfpsDirAliasStatsTable, sfpsDirFilterAPIValueType=sfpsDirFilterAPIValueType, sfpsAliasTableAliasAge=sfpsAliasTableAliasAge, sfpsServiceCenterDirectoryStatusTime=sfpsServiceCenterDirectoryStatusTime, sfpsDAPIPort=sfpsDAPIPort, sfpsDAPITestAddrOneTag=sfpsDAPITestAddrOneTag, sfpsTopologyDirStatsLocalAliasRefused=sfpsTopologyDirStatsLocalAliasRefused, sfpsDAPINodeType=sfpsDAPINodeType, sfpsDirFilterNodeInPort=sfpsDirFilterNodeInPort, sfpsDirFilterAliasSwitchOctets=sfpsDirFilterAliasSwitchOctets, sfpsTopologyDirStatsNumRemoteNodes=sfpsTopologyDirStatsNumRemoteNodes, sfpsTopologyDirStatsStaticUsage=sfpsTopologyDirStatsStaticUsage, sfpsDirFilterNodeTable=sfpsDirFilterNodeTable, sfpsDirFilterAliasInPort=sfpsDirFilterAliasInPort, sfpsDirFilterAliasTable=sfpsDirFilterAliasTable, sfpsAliasDeltaTableAlias=sfpsAliasDeltaTableAlias, sfpsTopologyDirStatsAliasCollisions=sfpsTopologyDirStatsAliasCollisions, sfpsAliasTablePort=sfpsAliasTablePort, sfpsDirFilterAliasAliasHash=sfpsDirFilterAliasAliasHash, sfpsServiceCenterDirectoryName=sfpsServiceCenterDirectoryName, sfpsNodeTable=sfpsNodeTable, sfpsAliasTableEntry=sfpsAliasTableEntry, sfpsTopologyDirStatsAliasUsage=sfpsTopologyDirStatsAliasUsage, sfpsDirFilterAliasNodeState=sfpsDirFilterAliasNodeState, sfpsServiceCenterDirectoryOperStatus=sfpsServiceCenterDirectoryOperStatus, sfpsDirFilterAliasVlanLearned=sfpsDirFilterAliasVlanLearned, sfpsTopologyDirStatsNumOfAliases=sfpsTopologyDirStatsNumOfAliases, sfpsNodeTableBaseHash=sfpsNodeTableBaseHash, sfpsTopologyDirStatsSwitchTableSize=sfpsTopologyDirStatsSwitchTableSize, sfpsNodeTableBaseAddress=sfpsNodeTableBaseAddress, sfpsDirFilterNodeSwitchLoad=sfpsDirFilterNodeSwitchLoad, sfpsNodeTableAge=sfpsNodeTableAge, sfpsTopologyDirStatsNumLocalNodes=sfpsTopologyDirStatsNumLocalNodes, sfpsDirFilterAliasNodeLocal=sfpsDirFilterAliasNodeLocal, sfpsDirFilterNodeOpaqueTag=sfpsDirFilterNodeOpaqueTag, SfpsSwitchPort=SfpsSwitchPort, sfpsTopologyDirStatsAliasRemotesReplaced=sfpsTopologyDirStatsAliasRemotesReplaced, sfpsDAPIVerb=sfpsDAPIVerb, sfpsTopologyDirStatsVlanTableUsage=sfpsTopologyDirStatsVlanTableUsage, sfpsNodeTableSwitchAddress=sfpsNodeTableSwitchAddress, sfpsTopologyDirStatsReservedForRemoteNodes=sfpsTopologyDirStatsReservedForRemoteNodes, sfpsTopologyDirStatsMaxVlans=sfpsTopologyDirStatsMaxVlans, sfpsDirFilterAliasNodeOctets=sfpsDirFilterAliasNodeOctets, sfpsDAPIAliasType=sfpsDAPIAliasType, sfpsDirFilterAliasOpaqueTag=sfpsDirFilterAliasOpaqueTag, sfpsDirFilterAliasLinkAge=sfpsDirFilterAliasLinkAge, sfpsAliasTableBaseHash=sfpsAliasTableBaseHash, sfpsAliasTableAliasLock=sfpsAliasTableAliasLock, sfpsAliasDeltaTableAliasLock=sfpsAliasDeltaTableAliasLock, sfpsNodeTableBaseType=sfpsNodeTableBaseType, sfpsDAPITestAddrOneValue=sfpsDAPITestAddrOneValue, sfpsAliasDeltaCount=sfpsAliasDeltaCount, sfpsDirFilterAliasLockCount=sfpsDirFilterAliasLockCount, sfpsAliasTablePrev=sfpsAliasTablePrev, sfpsServiceCenterDirectoryRequests=sfpsServiceCenterDirectoryRequests, sfpsDirFilterNodeLinkLock=sfpsDirFilterNodeLinkLock, sfpsDirFilterNodeNodeIndex=sfpsDirFilterNodeNodeIndex, sfpsDirFilterNodeLinkCount=sfpsDirFilterNodeLinkCount, sfpsAliasTableAliasState=sfpsAliasTableAliasState, sfpsAliasDeltaTableOpaqueTag=sfpsAliasDeltaTableOpaqueTag, sfpsDAPITestOutputTable=sfpsDAPITestOutputTable, sfpsDirFilterNodeLockCount=sfpsDirFilterNodeLockCount, sfpsAliasDeltaTableBase=sfpsAliasDeltaTableBase, sfpsAliasTableAliasOctets=sfpsAliasTableAliasOctets, sfpsAliasDeltaTableEntry=sfpsAliasDeltaTableEntry, sfpsDirFilterAPILockStatus=sfpsDirFilterAPILockStatus, sfpsDAPITestPort=sfpsDAPITestPort, sfpsDirFilterNodeLinkLoad=sfpsDirFilterNodeLinkLoad, sfpsAliasDeltaTableNodeLock=sfpsAliasDeltaTableNodeLock, sfpsDAPITestCallTag=sfpsDAPITestCallTag, sfpsNodeTableVlanCount=sfpsNodeTableVlanCount, sfpsAliasTableBaseAddress=sfpsAliasTableBaseAddress, sfpsServiceCenterDirectoryMetric=sfpsServiceCenterDirectoryMetric, sfpsNodeTableSwitchType=sfpsNodeTableSwitchType, sfpsDAPITestAddrTwoTag=sfpsDAPITestAddrTwoTag, sfpsNodeTableEntry=sfpsNodeTableEntry, sfpsTopologyDirStatsMaxRemoteNodes=sfpsTopologyDirStatsMaxRemoteNodes, sfpsDirAliasStatsNumOfAliases=sfpsDirAliasStatsNumOfAliases, sfpsTopologyDirStatsNodeTableUsage=sfpsTopologyDirStatsNodeTableUsage, sfpsDirFilterNodeNodeLock=sfpsDirFilterNodeNodeLock, sfpsDirFilterNodeLinkAge=sfpsDirFilterNodeLinkAge, sfpsDAPITestVerb=sfpsDAPITestVerb, sfpsTopologyDirStatsSwitchUsage=sfpsTopologyDirStatsSwitchUsage, sfpsDirFilterNodeLinkType=sfpsDirFilterNodeLinkType, sfpsTopologyDirStatsSwitchCacheHits=sfpsTopologyDirStatsSwitchCacheHits, sfpsDAPINodeValue=sfpsDAPINodeValue, sfpsTopologyDirStatsNumVlans=sfpsTopologyDirStatsNumVlans, sfpsAliasTableAliasType=sfpsAliasTableAliasType, sfpsDirFilterAliasSwitchType=sfpsDirFilterAliasSwitchType, sfpsDirFilterNodeBaseLoad=sfpsDirFilterNodeBaseLoad, sfpsAliasDeltaTableTimestamp=sfpsAliasDeltaTableTimestamp, sfpsDirFilterAliasChassisOctets=sfpsDirFilterAliasChassisOctets, sfpsDirFilterNodeChassisOctets=sfpsDirFilterNodeChassisOctets, sfpsDAPITestOutputSwitchMac=sfpsDAPITestOutputSwitchMac, sfpsDAPITestOutputAddrOneTag=sfpsDAPITestOutputAddrOneTag, sfpsDirFilterNodeNodeOctets=sfpsDirFilterNodeNodeOctets, sfpsDirFilterAliasLinkState=sfpsDirFilterAliasLinkState, sfpsTopologyDirStatsNodeLongestChain=sfpsTopologyDirStatsNodeLongestChain, sfpsTopologyDirStatsRemoteAliasRemoved=sfpsTopologyDirStatsRemoteAliasRemoved, sfpsDirFilterAliasNodeLock=sfpsDirFilterAliasNodeLock, sfpsNodeTableEntryType=sfpsNodeTableEntryType, sfpsDirAliasStatsAliasUsage=sfpsDirAliasStatsAliasUsage, sfpsServiceCenterDirectoryEntry=sfpsServiceCenterDirectoryEntry, sfpsAliasDeltaTableAliasLength=sfpsAliasDeltaTableAliasLength, sfpsTopologyDirStatsAliasTableSize=sfpsTopologyDirStatsAliasTableSize, sfpsTopologyDirStatsVlanCacheHits=sfpsTopologyDirStatsVlanCacheHits, sfpsAliasTableSelf=sfpsAliasTableSelf, sfpsTopologyDirStatsVlanUsage=sfpsTopologyDirStatsVlanUsage, sfpsAliasDeltaFullFlag=sfpsAliasDeltaFullFlag, sfpsTopologyDirStatsNodeAliasMax=sfpsTopologyDirStatsNodeAliasMax, sfpsDirFilterNodeVlanLearned=sfpsDirFilterNodeVlanLearned, sfpsNodeTableNext=sfpsNodeTableNext, sfpsDAPITestOutputCallTag=sfpsDAPITestOutputCallTag, sfpsTopologyDirStatsNodeCollisions=sfpsTopologyDirStatsNodeCollisions, sfpsDirFilterNodeSwitchOctets=sfpsDirFilterNodeSwitchOctets, sfpsDirFilterAliasSwitchLoad=sfpsDirFilterAliasSwitchLoad, sfpsDAPITestOutputAddrOneValue=sfpsDAPITestOutputAddrOneValue, sfpsTopologyDirStatsNumOfNodes=sfpsTopologyDirStatsNumOfNodes, sfpsDirFilterNodeEntry=sfpsDirFilterNodeEntry, sfpsDirFilterNodeLinkIndex=sfpsDirFilterNodeLinkIndex, sfpsNodeTableCallTag=sfpsNodeTableCallTag, sfpsTopologyDirStatsDynamicUsage=sfpsTopologyDirStatsDynamicUsage, sfpsTopologyDirStatsRemoteNodeUsage=sfpsTopologyDirStatsRemoteNodeUsage, sfpsDirFilterNodeNodeAge=sfpsDirFilterNodeNodeAge, sfpsDAPITestAddrTwoValue=sfpsDAPITestAddrTwoValue, sfpsTopologyDirStatsMaxLocalNodes=sfpsTopologyDirStatsMaxLocalNodes, sfpsDirFilterAliasLinkOctets=sfpsDirFilterAliasLinkOctets, sfpsDAPITestOutputAddrTwoValue=sfpsDAPITestOutputAddrTwoValue, sfpsDirAliasStatsAliasType=sfpsDirAliasStatsAliasType, sfpsDirAliasStatsAliasName=sfpsDirAliasStatsAliasName, sfpsDirFilterAPILockTimeElapsed=sfpsDirFilterAPILockTimeElapsed, sfpsDirFilterNodeChassisLoad=sfpsDirFilterNodeChassisLoad, SfpsAddress=SfpsAddress, sfpsDirFilterNodeNodeLocal=sfpsDirFilterNodeNodeLocal, sfpsDirAliasStatsMaxAliases=sfpsDirAliasStatsMaxAliases, sfpsDirFilterAliasLinkType=sfpsDirFilterAliasLinkType, sfpsDirFilterAPIValue=sfpsDirFilterAPIValue, sfpsAliasTableBaseType=sfpsAliasTableBaseType, sfpsTopologyDirStatsAliasMultiPortClears=sfpsTopologyDirStatsAliasMultiPortClears, sfpsDAPITestOutputAddrTwoTag=sfpsDAPITestOutputAddrTwoTag, sfpsAliasTableSwitchOctets=sfpsAliasTableSwitchOctets, sfpsTopologyDirStatsLocalNodeUsage=sfpsTopologyDirStatsLocalNodeUsage, sfpsDirFilterAliasHashIndex=sfpsDirFilterAliasHashIndex, sfpsNodeTablePort=sfpsNodeTablePort, sfpsDirFilterAPILockCount=sfpsDirFilterAPILockCount, sfpsDirFilterAliasBaseLoad=sfpsDirFilterAliasBaseLoad, sfpsDirFilterAliasNodeAge=sfpsDirFilterAliasNodeAge, sfpsAliasTableHashIndex=sfpsAliasTableHashIndex, sfpsAliasTable=sfpsAliasTable, sfpsAliasDeltaTableAliasState=sfpsAliasDeltaTableAliasState, sfpsDirFilterAPILockTimeOut=sfpsDirFilterAPILockTimeOut, sfpsDirFilterAliasDomain=sfpsDirFilterAliasDomain, sfpsTopologyDirStatsVlanTableSize=sfpsTopologyDirStatsVlanTableSize, sfpsDAPITestOutputPort=sfpsDAPITestOutputPort, sfpsDAPIAliasValue=sfpsDAPIAliasValue, sfpsTopologyDirStatsNumSwitches=sfpsTopologyDirStatsNumSwitches, sfpsDirFilterAliasLinkLock=sfpsDirFilterAliasLinkLock, sfpsNodeTableSelf=sfpsNodeTableSelf, sfpsDirFilterNodeNodeState=sfpsDirFilterNodeNodeState, sfpsDirAliasStatsEntry=sfpsDirAliasStatsEntry, sfpsNodeTableNodeLocked=sfpsNodeTableNodeLocked, sfpsTopologyDirStatsSwitchTableUsage=sfpsTopologyDirStatsSwitchTableUsage, sfpsTopologyDirStatsObjectsUsage=sfpsTopologyDirStatsObjectsUsage, sfpsDAPITestOutputEntry=sfpsDAPITestOutputEntry, sfpsServiceCenterDirectoryAdminStatus=sfpsServiceCenterDirectoryAdminStatus, sfpsNodeTableLastHeard=sfpsNodeTableLastHeard, sfpsTopologyDirStatsVlanLookups=sfpsTopologyDirStatsVlanLookups, sfpsNodeTableHashIndex=sfpsNodeTableHashIndex, sfpsServiceCenterDirectoryResponses=sfpsServiceCenterDirectoryResponses, sfpsTopologyDirStatsNodeTableSize=sfpsTopologyDirStatsNodeTableSize, sfpsTopologyDirStatsAliasLongestChain=sfpsTopologyDirStatsAliasLongestChain, sfpsAliasTableVlanPolicy=sfpsAliasTableVlanPolicy, sfpsDirFilterNodeLinkOctets=sfpsDirFilterNodeLinkOctets, sfpsTopologyDirStatsMaxSwitches=sfpsTopologyDirStatsMaxSwitches, HexInteger=HexInteger, sfpsDirFilterAliasChassisLoad=sfpsDirFilterAliasChassisLoad, sfpsDirFilterAPILockAdmin=sfpsDirFilterAPILockAdmin, sfpsTopologyDirStatsSwitchLookups=sfpsTopologyDirStatsSwitchLookups, sfpsDAPIAge=sfpsDAPIAge, sfpsDAPITestOutputIndex=sfpsDAPITestOutputIndex, sfpsAliasTableAliasAddress=sfpsAliasTableAliasAddress, sfpsDirFilterAliasChassisType=sfpsDirFilterAliasChassisType, sfpsTopologyDirStatsNodeUsage=sfpsTopologyDirStatsNodeUsage, sfpsTopologyDirStatsLocalAddsRefused=sfpsTopologyDirStatsLocalAddsRefused, sfpsDirFilterAliasBaseHash=sfpsDirFilterAliasBaseHash, sfpsTopologyDirStatsTotalUsage=sfpsTopologyDirStatsTotalUsage, sfpsDirFilterAliasBaseType=sfpsDirFilterAliasBaseType, sfpsDirFilterNodeNodeCount=sfpsDirFilterNodeNodeCount, sfpsAliasTableSwitchAddress=sfpsAliasTableSwitchAddress, sfpsServiceCenterDirectoryHashLeaf=sfpsServiceCenterDirectoryHashLeaf)
