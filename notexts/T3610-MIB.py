#
# PySNMP MIB module T3610-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/comet/T3610-MIB
# Produced by pysmi-1.1.12 at Wed May 29 07:20:09 2024
# On host fv-az2021-913 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, enterprises, Counter64, iso, Counter32, Bits, IpAddress, ObjectIdentity, NotificationType, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, TimeTicks, Integer32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "enterprises", "Counter64", "iso", "Counter32", "Bits", "IpAddress", "ObjectIdentity", "NotificationType", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "TimeTicks", "Integer32", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

comet = MibIdentifier((1, 3, 6, 1, 4, 1, 22626))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 22626, 1))
t3610 = MibIdentifier((1, 3, 6, 1, 4, 1, 22626, 1, 2))
values = MibIdentifier((1, 3, 6, 1, 4, 1, 22626, 1, 2, 1))
pysmi_global = MibIdentifier((1, 3, 6, 1, 4, 1, 22626, 1, 2, 2)).setLabel("global")
valuesInt = MibIdentifier((1, 3, 6, 1, 4, 1, 22626, 1, 2, 3))
settings = MibIdentifier((1, 3, 6, 1, 4, 1, 22626, 1, 2, 4))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 22626, 1, 2, 5))
tables = MibIdentifier((1, 3, 6, 1, 4, 1, 22626, 1, 2, 6))
temp = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temp.setStatus('mandatory')
hum = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hum.setStatus('mandatory')
compVal = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compVal.setStatus('mandatory')
tempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempAlarm.setStatus('mandatory')
humAlarm = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humAlarm.setStatus('mandatory')
compValAlarm = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compValAlarm.setStatus('mandatory')
tempUnit = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempUnit.setStatus('mandatory')
humUnit = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humUnit.setStatus('mandatory')
compValUnit = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compValUnit.setStatus('mandatory')
tempMin = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempMin.setStatus('mandatory')
humMin = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humMin.setStatus('mandatory')
compValMin = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compValMin.setStatus('mandatory')
tempMax = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempMax.setStatus('mandatory')
humMax = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humMax.setStatus('mandatory')
compValMax = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compValMax.setStatus('mandatory')
sensorName = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 68))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorName.setStatus('mandatory')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('mandatory')
deviceType = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceType.setStatus('mandatory')
tempInt = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5000, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempInt.setStatus('mandatory')
humInt = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5000, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humInt.setStatus('mandatory')
compValInt = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5000, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compValInt.setStatus('mandatory')
tempAlarmInt = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempAlarmInt.setStatus('mandatory')
humAlarmInt = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humAlarmInt.setStatus('mandatory')
compValAlarmInt = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compValAlarmInt.setStatus('mandatory')
tempLowInt = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5000, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempLowInt.setStatus('mandatory')
tempHighInt = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5000, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempHighInt.setStatus('mandatory')
humLowInt = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5000, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humLowInt.setStatus('mandatory')
humHighInt = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5000, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humHighInt.setStatus('mandatory')
compValLowInt = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5000, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compValLowInt.setStatus('mandatory')
compValHighInt = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5000, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compValHighInt.setStatus('mandatory')
tempDelayInt = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempDelayInt.setStatus('mandatory')
humDelayInt = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humDelayInt.setStatus('mandatory')
compValDelayInt = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compValDelayInt.setStatus('mandatory')
tempHystInt = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempHystInt.setStatus('mandatory')
humHystInt = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humHystInt.setStatus('mandatory')
compValHystInt = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compValHystInt.setStatus('mandatory')
messageString = MibScalar((1, 3, 6, 1, 4, 1, 22626, 1, 2, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: messageString.setStatus('mandatory')
historyTable = MibTable((1, 3, 6, 1, 4, 1, 22626, 1, 2, 6, 1), )
if mibBuilder.loadTexts: historyTable.setStatus('mandatory')
historyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22626, 1, 2, 6, 1, 1), ).setIndexNames((0, "T3610-MIB", "histTemp"))
if mibBuilder.loadTexts: historyEntry.setStatus('optional')
histTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 22626, 1, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5000, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: histTemp.setStatus('mandatory')
histHum = MibTableColumn((1, 3, 6, 1, 4, 1, 22626, 1, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5000, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: histHum.setStatus('mandatory')
histCompVal = MibTableColumn((1, 3, 6, 1, 4, 1, 22626, 1, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5000, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: histCompVal.setStatus('mandatory')
trapTest = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,0)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"))
trapNTPError = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,1)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"))
trapEmailErrLogin = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,2)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"))
trapEmailErrAuth = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,3)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"))
trapEmailErrSome = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,4)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"))
trapEmailErrSocket = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,5)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"))
trapEmailErrDNS = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,6)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"))
trapSOAPErrFile = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,7)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"))
trapSOAPErrDNS = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,8)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"))
trapSOAPErrSocket = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,9)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"))
trapSOAPErrDelivery = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,10)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"))
trapTempHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,11)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"), ("T3610-MIB", "temp"), ("T3610-MIB", "tempAlarmInt"))
trapHumHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,12)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"), ("T3610-MIB", "hum"), ("T3610-MIB", "humAlarmInt"))
trapCompValHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,13)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"), ("T3610-MIB", "compVal"), ("T3610-MIB", "compValAlarmInt"))
trapTempLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,21)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"), ("T3610-MIB", "temp"), ("T3610-MIB", "tempAlarmInt"))
trapHumLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,22)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"), ("T3610-MIB", "hum"), ("T3610-MIB", "humAlarmInt"))
trapCompValLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,23)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"), ("T3610-MIB", "compVal"), ("T3610-MIB", "compValAlarmInt"))
trapTempClrAlarm = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,31)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"), ("T3610-MIB", "temp"), ("T3610-MIB", "tempAlarmInt"))
trapHumClrAlarm = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,32)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"), ("T3610-MIB", "hum"), ("T3610-MIB", "humAlarmInt"))
trapCompValClrAlarm = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,33)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"), ("T3610-MIB", "compVal"), ("T3610-MIB", "compValAlarmInt"))
trapTempError = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,41)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"), ("T3610-MIB", "temp"), ("T3610-MIB", "tempAlarmInt"))
trapHumError = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,42)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"), ("T3610-MIB", "hum"), ("T3610-MIB", "humAlarmInt"))
trapCompValError = NotificationType((1, 3, 6, 1, 4, 1, 22626) + (0,43)).setObjects(("T3610-MIB", "sensorName"), ("T3610-MIB", "messageString"), ("T3610-MIB", "compVal"), ("T3610-MIB", "compValAlarmInt"))
mibBuilder.exportSymbols("T3610-MIB", tempDelayInt=tempDelayInt, tempHighInt=tempHighInt, trapTest=trapTest, trapCompValLowAlarm=trapCompValLowAlarm, humAlarmInt=humAlarmInt, tempHystInt=tempHystInt, products=products, humMin=humMin, histTemp=histTemp, sensorName=sensorName, trapEmailErrAuth=trapEmailErrAuth, traps=traps, historyTable=historyTable, trapSOAPErrDelivery=trapSOAPErrDelivery, tempMin=tempMin, t3610=t3610, compValMin=compValMin, values=values, humHystInt=humHystInt, humAlarm=humAlarm, compVal=compVal, humInt=humInt, tempMax=tempMax, trapEmailErrDNS=trapEmailErrDNS, trapHumClrAlarm=trapHumClrAlarm, temp=temp, tempUnit=tempUnit, trapTempLowAlarm=trapTempLowAlarm, compValDelayInt=compValDelayInt, trapHumLowAlarm=trapHumLowAlarm, histHum=histHum, deviceType=deviceType, comet=comet, compValAlarmInt=compValAlarmInt, tempLowInt=tempLowInt, compValHystInt=compValHystInt, histCompVal=histCompVal, messageString=messageString, trapTempError=trapTempError, compValHighInt=compValHighInt, hum=hum, trapCompValHighAlarm=trapCompValHighAlarm, trapSOAPErrDNS=trapSOAPErrDNS, humDelayInt=humDelayInt, trapCompValError=trapCompValError, humLowInt=humLowInt, trapHumError=trapHumError, tempAlarm=tempAlarm, humMax=humMax, humUnit=humUnit, trapTempClrAlarm=trapTempClrAlarm, compValInt=compValInt, trapTempHighAlarm=trapTempHighAlarm, trapEmailErrSocket=trapEmailErrSocket, humHighInt=humHighInt, trapCompValClrAlarm=trapCompValClrAlarm, trapSOAPErrSocket=trapSOAPErrSocket, tempAlarmInt=tempAlarmInt, trapEmailErrSome=trapEmailErrSome, serialNumber=serialNumber, valuesInt=valuesInt, trapNTPError=trapNTPError, DisplayString=DisplayString, tempInt=tempInt, compValAlarm=compValAlarm, compValMax=compValMax, pysmi_global=pysmi_global, historyEntry=historyEntry, trapSOAPErrFile=trapSOAPErrFile, compValUnit=compValUnit, settings=settings, compValLowInt=compValLowInt, tables=tables, trapHumHighAlarm=trapHumHighAlarm, trapEmailErrLogin=trapEmailErrLogin)
