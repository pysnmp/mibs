#
# PySNMP MIB module F3-L3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/F3-L3-MIB
# Produced by pysmi-1.1.12 at Tue May 28 13:05:09 2024
# On host fv-az1789-536 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
CmPmIntervalType, FlowSecState, VlanId, F3DisplayString, OperationalState, IpVersion, AdminState, SecondaryState, TrafficDirection, CmPmBinAction, PerfCounter64, VlanPriority = mibBuilder.importSymbols("CM-COMMON-MIB", "CmPmIntervalType", "FlowSecState", "VlanId", "F3DisplayString", "OperationalState", "IpVersion", "AdminState", "SecondaryState", "TrafficDirection", "CmPmBinAction", "PerfCounter64", "VlanPriority")
slotIndex, shelfIndex, neIndex = mibBuilder.importSymbols("CM-ENTITY-MIB", "slotIndex", "shelfIndex", "neIndex")
PolicerAlgorithmType, ShapingType, AclNoMatchDispositionType, PolicerColorMode = mibBuilder.importSymbols("CM-FACILITY-MIB", "PolicerAlgorithmType", "ShapingType", "AclNoMatchDispositionType", "PolicerColorMode")
DHCPCIDType, IpEntryType, DHCPHostNameType, CmDhcpRole, IpMode = mibBuilder.importSymbols("CM-IP-MIB", "DHCPCIDType", "IpEntryType", "DHCPHostNameType", "CmDhcpRole", "IpMode")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter32, iso, NotificationType, Counter64, IpAddress, MibIdentifier, Bits, TimeTicks, ModuleIdentity, Gauge32, Integer32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "iso", "NotificationType", "Counter64", "IpAddress", "MibIdentifier", "Bits", "TimeTicks", "ModuleIdentity", "Gauge32", "Integer32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, VariablePointer, TextualConvention, DisplayString, RowStatus, DateAndTime, MacAddress, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "VariablePointer", "TextualConvention", "DisplayString", "RowStatus", "DateAndTime", "MacAddress", "StorageType")
f3L3MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37))
f3L3MIB.setRevisions(('2018-10-25 00:00',))
if mibBuilder.loadTexts: f3L3MIB.setLastUpdated('201810250000Z')
if mibBuilder.loadTexts: f3L3MIB.setOrganization('ADVA Optical Networking SE')
f3L3Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1))
f3L3Performance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2))
f3L3Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 3))
f3L3Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 4))
cmL3Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 5))
class BgpGracefulRestartControlType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("enable", 1), ("disable", 2), ("helperOnly", 3))

class EcmpDistributionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("l3", 1), ("l4", 2))

class BgpUpdateSourceType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 0), ("none", 1), ("ipv4Address", 2), ("ipv6Address", 3), ("interfaceName", 4))

class BgpRouteFilterDirection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("in", 1), ("out", 2))

class IpPrefixDispositionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("permit", 1), ("deny", 2))

class BgpRouterActionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("optimizeBgpRouteRetrieve", 1), ("optimizeBgpInRouteRetrieve", 2))

class OspfRouterActionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 0), ("optimizeOspfAsLsDbRetrieve", 1), ("optimizeOspfLsDbRetrieve", 2), ("optimizeOspfNeighborRetrieve", 3), ("optimizeOspfLinkLsDbRetrieve", 4))

class Ipv6AddressAssignMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("manual", 1), ("automatic", 2), ("external", 3))

class TrafficIpRouteOriginType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("notApplicable", 0), ("bgp", 1), ("ospf", 2), ("connected", 3), ("static", 4), ("dhcp", 5), ("slaac", 6), ("dhcp-relay", 7), ("isis", 8), ("ti-lfa", 9))

class NdpNeighborReachabilityState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("notApplicable", 0), ("incomplete", 1), ("reachable", 2), ("stale", 3), ("delay", 4), ("probe", 5))

class NdpRaDefaultRouterPreference(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 0), ("none", 1), ("high", 2), ("medium", 3), ("low", 4))

class Ipv6LinkLocalAddressMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("automatic", 1), ("manual", 2))

class IpInterfaceType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("host", 1), ("router", 2))

class OspfAuthType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("none", 1), ("simple", 2), ("cryptoGraphic", 3))

class OspfInterfaceState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("notApplicable", 0), ("down", 1), ("loopback", 2), ("waiting", 3), ("pointToPoint", 4), ("drOther", 5), ("dr", 6), ("backup", 7))

class OspfIfType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("broadcast", 1), ("pointToPoint", 2), ("loopback", 3))

class TrafficOspfRole(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 0), ("dr", 1), ("bdr", 2), ("drother", 3), ("pointToPoint", 4))

class OspfAdjacencyState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("notApplicable", 0), ("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exStart", 5), ("exchange", 6), ("loading", 7), ("full", 8))

class OspfAsLsaType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("asExternal", 1), ("asOpaque", 2))

class OspfLsaType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("notApplicable", 0), ("router", 1), ("network", 2), ("summary", 3), ("asExternal", 4), ("areaOpaque", 5), ("summaryNet", 6), ("summaryAsbr", 7), ("multicast", 8), ("nssaExternal", 9), ("interAreaPrefix", 10), ("interAreaRouter", 11), ("link", 12), ("intraAreaPrefix", 13))

class RoutesMetricType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("e1", 1), ("e2", 2))

class TrafficOspfAreaType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("stub", 1), ("normal", 2))

class BgpSessionStateType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("notApplicable", 0), ("idle", 1), ("connect", 2), ("active", 3), ("openSent", 4), ("openConfirm", 5), ("established", 6))

class BgpNextHopUpdateType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 0), ("default", 1), ("self", 2), ("ipv4", 3), ("ipv6", 4))

class BgpPeerAddressFamilyNameType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("ipv4-unicast", 1), ("ipv6-unicast", 2))

class OspfVersion(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("ospfv2", 1), ("ospfv3", 2))

class VrfAction(TextualConvention, Integer32):
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 0), ("ping", 1), ("fluchARPCache", 2), ("traceRoute", 3), ("retrieveEffectiveRoutes", 4))

class VrfActionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("notApplicable", 0), ("ping", 1), ("traceRoute", 2), ("optimizeRouteRetrieve", 3), ("flushArpCache", 4), ("pingV6", 5), ("traceRouteV6", 6), ("optimizeIpv6RouteRetrieve", 7), ("flushNDP", 8), ("optimizeBfdSessionRetrieve", 9))

class IfIpAddressSourceType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("dhcp", 1), ("static", 2))

class DhcpRelayInterfaceSide(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("client", 1), ("server", 2))

class L3AclRuleOperation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("accept", 1), ("deny", 2))

class AclRuleL2Side(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("access", 1), ("network", 2))

class TrafficIpRouteStatus(TextualConvention, Integer32):
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("nexthopUnresovled", 2), ("interfaceOutage", 3), ("noResources", 4), ("standby", 5), ("bfdSessDown", 6))

class RouteFlags(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("dDynamic", 0), ("gUseGW", 1), ("hFullMask", 2), ("mModifiedByIcmp", 3), ("oOutage", 4), ("uNormal", 5))

class TrafficIpRouteStatusType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("nexthopUnresolved", 2), ("interfaceOutage", 3), ("noResources", 4), ("standby", 5), ("bfdSessDown", 6))

class AffectiveArpActionType(TextualConvention, Integer32):
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("notApplicable", 0), ("retrieveAffectiveArp", 1))

class TrafficIpInterfaceActionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("optimizeArpRetrieve", 1), ("optimizeNdpRetrieve", 2), ("optimizeIPv6AddressEntryRetrieve", 3))

class TrafficIpv6InterfaceActionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("optimizeNdpRetrieve", 1), ("optimizeIPv6AddressEntryRetrieve", 2))

class SrSidType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("index", 1), ("label", 2), ("sid", 3))

class VrfTransportType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ip", 1), ("sr", 2))

class TilfaProtectionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("link-protection", 1), ("node-protection", 2))

f3DhcpRelayAgentTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1), )
if mibBuilder.loadTexts: f3DhcpRelayAgentTable.setStatus('current')
f3DhcpRelayAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3DhcpRelayAgentIndex"))
if mibBuilder.loadTexts: f3DhcpRelayAgentEntry.setStatus('current')
f3DhcpRelayAgentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: f3DhcpRelayAgentIndex.setStatus('current')
f3DhcpRelayAgentAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1, 2), F3DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3DhcpRelayAgentAlias.setStatus('current')
f3DhcpRelayAgentAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3DhcpRelayAgentAdminState.setStatus('current')
f3DhcpRelayAgentSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3DhcpRelayAgentSecondaryState.setStatus('current')
f3DhcpRelayAgentOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3DhcpRelayAgentOperationalState.setStatus('current')
f3DhcpRelayAgentIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1, 6), IpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3DhcpRelayAgentIpVersion.setStatus('current')
f3DhcpRelayAgentServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3DhcpRelayAgentServerIpAddress.setStatus('current')
f3DhcpRelayAgentOp82SubOp9ControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3DhcpRelayAgentOp82SubOp9ControlEnabled.setStatus('current')
f3DhcpRelayAgentOp82SubOp9Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3DhcpRelayAgentOp82SubOp9Value.setStatus('current')
f3DhcpRelayAgentStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1, 10), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3DhcpRelayAgentStorageType.setStatus('current')
f3DhcpRelayAgentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3DhcpRelayAgentRowStatus.setStatus('current')
f3VrfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2), )
if mibBuilder.loadTexts: f3VrfTable.setStatus('current')
f3VrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"))
if mibBuilder.loadTexts: f3VrfEntry.setStatus('current')
f3VrfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: f3VrfIndex.setStatus('current')
f3VrfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 2), F3DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfAlias.setStatus('current')
f3VrfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfAdminState.setStatus('current')
f3VrfSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3VrfSecondaryState.setStatus('current')
f3VrfOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3VrfOperationalState.setStatus('current')
f3VrfAccIsolationControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 6), OperationalState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfAccIsolationControlEnabled.setStatus('obsolete')
f3VrfPingIpv4Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfPingIpv4Destination.setStatus('current')
f3VrfTraceRouteIpv4Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfTraceRouteIpv4Destination.setStatus('current')
f3VrfAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 9), VrfAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfAction.setStatus('deprecated')
f3VrfPingResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 10), F3DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3VrfPingResult.setStatus('current')
f3VrfTraceRouteResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 11), F3DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3VrfTraceRouteResult.setStatus('current')
f3VrfStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 12), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3VrfStorageType.setStatus('current')
f3VrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3VrfRowStatus.setStatus('current')
f3VrfDhcpRoutesControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfDhcpRoutesControl.setStatus('current')
f3VrfActionX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 15), VrfActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfActionX.setStatus('current')
f3VrfActionIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfActionIfName.setStatus('current')
f3VrfIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 17), IpVersion()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3VrfIpVersion.setStatus('current')
f3VrfPingIpv6Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 18), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfPingIpv6Destination.setStatus('current')
f3VrfTraceRouteIpv6Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 19), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfTraceRouteIpv6Destination.setStatus('current')
f3VrfMaxFwdTableEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfMaxFwdTableEntries.setStatus('current')
f3VrfFwdTableFull = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3VrfFwdTableFull.setStatus('current')
f3VrfEcmpDistribution = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 22), EcmpDistributionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfEcmpDistribution.setStatus('current')
f3VrfEcmpStaticRoutesMaximumPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfEcmpStaticRoutesMaximumPaths.setStatus('current')
f3VrfTransportType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 24), VrfTransportType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3VrfTransportType.setStatus('current')
f3L3FlowPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3), )
if mibBuilder.loadTexts: f3L3FlowPointTable.setStatus('current')
f3L3FlowPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"))
if mibBuilder.loadTexts: f3L3FlowPointEntry.setStatus('current')
f3L3FlowPointPortTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L3FlowPointPortTypeIndex.setStatus('current')
f3L3FlowPointPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: f3L3FlowPointPortIndex.setStatus('current')
f3L3FlowPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: f3L3FlowPointIndex.setStatus('current')
f3L3FlowPointAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 4), F3DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointAlias.setStatus('current')
f3L3FlowPointAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 5), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointAdminState.setStatus('current')
f3L3FlowPointSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointSecondaryState.setStatus('current')
f3L3FlowPointOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 7), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointOperationalState.setStatus('current')
f3L3FlowPointMultiCOSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointMultiCOSEnabled.setStatus('current')
f3L3FlowPointCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointCOS.setStatus('current')
f3L3FlowPointUntaggedMemberShipEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointUntaggedMemberShipEnabled.setStatus('current')
f3L3FlowPointOuterTagMemberShipEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointOuterTagMemberShipEnabled.setStatus('current')
f3L3FlowPointOuterTagMemberShipVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 12), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointOuterTagMemberShipVlanId.setStatus('current')
f3L3FlowPointInnerTagMemberShipEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointInnerTagMemberShipEnabled.setStatus('current')
f3L3FlowPointInnerTagMemberShipVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 14), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointInnerTagMemberShipVlanId.setStatus('current')
f3L3FlowPointFragmentedPktsFwdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointFragmentedPktsFwdEnabled.setStatus('current')
f3L3FlowPointHCosMgmtEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointHCosMgmtEnabled.setStatus('current')
f3L3FlowPointHCosGuaranteedBwHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointHCosGuaranteedBwHi.setStatus('current')
f3L3FlowPointHCosGuaranteedBwLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointHCosGuaranteedBwLo.setStatus('current')
f3L3FlowPointHCosMaximumBwHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointHCosMaximumBwHi.setStatus('current')
f3L3FlowPointHCosMaximumBwLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointHCosMaximumBwLo.setStatus('current')
f3L3FlowPointPolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointPolicingEnabled.setStatus('current')
f3L3FlowPointStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 22), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3FlowPointStorageType.setStatus('current')
f3L3FlowPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3FlowPointRowStatus.setStatus('current')
f3L3FlowPointDscpOverwriteControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointDscpOverwriteControl.setStatus('current')
f3L3FlowPointPriMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 25), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointPriMapProfile.setStatus('current')
f3L3FlowPointRefConnectGuardFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 26), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3FlowPointRefConnectGuardFlow.setStatus('current')
f3L3FlowPointSecureState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 27), FlowSecState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointSecureState.setStatus('current')
f3L3FlowPointSecureBlockingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 28), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3FlowPointSecureBlockingEnabled.setStatus('current')
f3L3FlowPointWfqSegmentationCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointWfqSegmentationCOS.setStatus('current')
f3L3FlowPointWfqGroupCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointWfqGroupCOS.setStatus('current')
f3L3FlowPointWfqGroupEirLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointWfqGroupEirLo.setStatus('current')
f3L3FlowPointWfqGroupEirHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointWfqGroupEirHi.setStatus('current')
f3L3FlowPointOuterVlanEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointOuterVlanEthertype.setStatus('current')
f3L3FlowPointInnerVlanEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointInnerVlanEthertype.setStatus('current')
f3L3FlowPointIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 35), IpVersion()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3FlowPointIpVersion.setStatus('current')
f3L3AclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4), )
if mibBuilder.loadTexts: f3L3AclRuleTable.setStatus('current')
f3L3AclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3AclRuleParentIndex"), (0, "F3-L3-MIB", "f3L3AclRuleIndex"))
if mibBuilder.loadTexts: f3L3AclRuleEntry.setStatus('current')
f3L3AclRuleParentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L3AclRuleParentIndex.setStatus('current')
f3L3AclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: f3L3AclRuleIndex.setStatus('current')
f3L3AclRuleAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 3), F3DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleAlias.setStatus('current')
f3L3AclRuleSrcIpv4AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcIpv4AddressControl.setStatus('current')
f3L3AclRuleDynamicSrcIpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDynamicSrcIpControl.setStatus('current')
f3L3AclRuleSrcIpv4AddressLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcIpv4AddressLowLimit.setStatus('current')
f3L3AclRuleDstIpv4AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstIpv4AddressControl.setStatus('current')
f3L3AclRuleDstIpv4AddressLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstIpv4AddressLowLimit.setStatus('current')
f3L3AclRuleIpv4PriorityControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleIpv4PriorityControl.setStatus('deprecated')
f3L3AclRuleIpv4PriorityLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleIpv4PriorityLowLimit.setStatus('deprecated')
f3L3AclRuleProtocolControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleProtocolControl.setStatus('current')
f3L3AclRuleProtocolNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleProtocolNumber.setStatus('current')
f3L3AclRuleSrcPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcPortControl.setStatus('current')
f3L3AclRuleSrcPortLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcPortLowLimit.setStatus('current')
f3L3AclRuleSrcPortHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcPortHighLimit.setStatus('current')
f3L3AclRuleDstPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstPortControl.setStatus('current')
f3L3AclRuleDstPortLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstPortLowLimit.setStatus('current')
f3L3AclRuleDstPortHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstPortHighLimit.setStatus('current')
f3L3AclRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRulePriority.setStatus('current')
f3L3AclRuleCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleCOS.setStatus('current')
f3L3AclRuleOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 21), L3AclRuleOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleOperation.setStatus('current')
f3L3AclRuleSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 22), F3DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleSummary.setStatus('current')
f3L3AclRuleCosOverrideControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleCosOverrideControl.setStatus('current')
f3L3AclRuleSrcMacAddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcMacAddressControl.setStatus('current')
f3L3AclRuleDynamicSrcMacAddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDynamicSrcMacAddressControl.setStatus('current')
f3L3AclRuleSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 26), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcMacAddress.setStatus('current')
f3L3AclRuleSrcMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 27), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcMacAddressMask.setStatus('current')
f3L3AclRuleDstMacAddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstMacAddressControl.setStatus('current')
f3L3AclRuleDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 29), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstMacAddress.setStatus('current')
f3L3AclRuleDstMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 30), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstMacAddressMask.setStatus('current')
f3L3AclRuleOuterVlanVIDControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 31), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanVIDControl.setStatus('current')
f3L3AclRuleOuterVlanVIDLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 32), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanVIDLowLimit.setStatus('current')
f3L3AclRuleOuterVlanVIDHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 33), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanVIDHighLimit.setStatus('current')
f3L3AclRuleInnerVlanVIDControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleInnerVlanVIDControl.setStatus('current')
f3L3AclRuleInnerVlanVIDLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 35), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleInnerVlanVIDLowLimit.setStatus('current')
f3L3AclRuleInnerVlanVIDHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 36), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleInnerVlanVIDHighLimit.setStatus('current')
f3L3AclRuleOuterVlanPcpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 37), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanPcpControl.setStatus('current')
f3L3AclRuleOuterVlanPcpLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 38), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanPcpLowLimit.setStatus('current')
f3L3AclRuleOuterVlanPcpHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 39), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanPcpHighLimit.setStatus('current')
f3L3AclRuleInnerVlanPcpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 40), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleInnerVlanPcpControl.setStatus('current')
f3L3AclRuleInnerVlanPcpLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 41), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleInnerVlanPcpLowLimit.setStatus('current')
f3L3AclRuleInnerVlanPcpHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 42), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleInnerVlanPcpHighLimit.setStatus('current')
f3L3AclRuleOuterVlanDeiControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 43), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanDeiControl.setStatus('current')
f3L3AclRuleOuterVlanDei = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanDei.setStatus('current')
f3L3AclRuleEtherTypeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 45), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleEtherTypeControl.setStatus('current')
f3L3AclRuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleEtherType.setStatus('current')
f3L3AclRuleTcpFlagsControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 47), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleTcpFlagsControl.setStatus('current')
f3L3AclRuleTcpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleTcpFlags.setStatus('current')
f3L3AclRuleSrcIpv4AddressHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 49), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcIpv4AddressHighLimit.setStatus('current')
f3L3AclRuleDstIpv4AddressHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 50), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstIpv4AddressHighLimit.setStatus('current')
f3L3AclRuleIpv4PriorityHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleIpv4PriorityHighLimit.setStatus('deprecated')
f3L3AclRuleStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 52), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3AclRuleStorageType.setStatus('current')
f3L3AclRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 53), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3AclRuleRowStatus.setStatus('current')
f3L3AclRuleAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 54), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleAdminState.setStatus('current')
f3L3AclRuleActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 55), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleActive.setStatus('current')
f3L3AclRuleSrcIpV6AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 56), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcIpV6AddressControl.setStatus('current')
f3L3AclRuleSrcIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 57), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcIpV6Address.setStatus('current')
f3L3AclRuleSrcIpV6AddressPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcIpV6AddressPrefixLen.setStatus('current')
f3L3AclRuleDstIpV6AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 59), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstIpV6AddressControl.setStatus('current')
f3L3AclRuleDstIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 60), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstIpV6Address.setStatus('current')
f3L3AclRuleDstIpV6AddressPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstIpV6AddressPrefixLen.setStatus('current')
f3L3AclRuleIpV6FlowLabelControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 62), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleIpV6FlowLabelControl.setStatus('current')
f3L3AclRuleIpV6FlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleIpV6FlowLabel.setStatus('current')
f3L3AclRulePriorityControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 64), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRulePriorityControl.setStatus('current')
f3L3AclRulePriorityLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 65), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRulePriorityLowLimit.setStatus('current')
f3L3AclRulePriorityHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 66), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRulePriorityHighLimit.setStatus('current')
f3L2A2NAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5), )
if mibBuilder.loadTexts: f3L2A2NAclRuleTable.setStatus('current')
f3L2A2NAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleParentIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleIndex"))
if mibBuilder.loadTexts: f3L2A2NAclRuleEntry.setStatus('current')
f3L2A2NAclRuleParentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L2A2NAclRuleParentIndex.setStatus('current')
f3L2A2NAclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: f3L2A2NAclRuleIndex.setStatus('current')
f3L2A2NAclRuleAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 3), F3DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleAlias.setStatus('current')
f3L2A2NAclRuleSrcIpv4AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcIpv4AddressControl.setStatus('current')
f3L2A2NAclRuleDynamicSrcIpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDynamicSrcIpControl.setStatus('current')
f3L2A2NAclRuleSrcIpv4AddressLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcIpv4AddressLowLimit.setStatus('current')
f3L2A2NAclRuleDstIpv4AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstIpv4AddressControl.setStatus('current')
f3L2A2NAclRuleDstIpv4AddressLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstIpv4AddressLowLimit.setStatus('current')
f3L2A2NAclRuleIpv4PriorityControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleIpv4PriorityControl.setStatus('current')
f3L2A2NAclRuleIpv4PriorityLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleIpv4PriorityLowLimit.setStatus('current')
f3L2A2NAclRuleProtocolControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleProtocolControl.setStatus('current')
f3L2A2NAclRuleProtocolNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleProtocolNumber.setStatus('current')
f3L2A2NAclRuleSrcPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcPortControl.setStatus('current')
f3L2A2NAclRuleSrcPortLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcPortLowLimit.setStatus('current')
f3L2A2NAclRuleSrcPortHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcPortHighLimit.setStatus('current')
f3L2A2NAclRuleDstPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstPortControl.setStatus('current')
f3L2A2NAclRuleDstPortLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstPortLowLimit.setStatus('current')
f3L2A2NAclRuleDstPortHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstPortHighLimit.setStatus('current')
f3L2A2NAclRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRulePriority.setStatus('current')
f3L2A2NAclRuleCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleCOS.setStatus('current')
f3L2A2NAclRuleOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 21), L3AclRuleOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleOperation.setStatus('current')
f3L2A2NAclRuleSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 22), F3DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleSummary.setStatus('current')
f3L2A2NAclRuleCosOverrideControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleCosOverrideControl.setStatus('current')
f3L2A2NAclRuleSrcMacAddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcMacAddressControl.setStatus('current')
f3L2A2NAclRuleDynamicSrcMacAddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDynamicSrcMacAddressControl.setStatus('current')
f3L2A2NAclRuleSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 26), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcMacAddress.setStatus('current')
f3L2A2NAclRuleSrcMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 27), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcMacAddressMask.setStatus('current')
f3L2A2NAclRuleDstMacAddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstMacAddressControl.setStatus('current')
f3L2A2NAclRuleDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 29), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstMacAddress.setStatus('current')
f3L2A2NAclRuleDstMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 30), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstMacAddressMask.setStatus('current')
f3L2A2NAclRuleOuterVlanVIDControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 31), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanVIDControl.setStatus('current')
f3L2A2NAclRuleOuterVlanVIDLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 32), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanVIDLowLimit.setStatus('current')
f3L2A2NAclRuleOuterVlanVIDHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 33), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanVIDHighLimit.setStatus('current')
f3L2A2NAclRuleInnerVlanVIDControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleInnerVlanVIDControl.setStatus('current')
f3L2A2NAclRuleInnerVlanVIDLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 35), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleInnerVlanVIDLowLimit.setStatus('current')
f3L2A2NAclRuleInnerVlanVIDHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 36), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleInnerVlanVIDHighLimit.setStatus('current')
f3L2A2NAclRuleOuterVlanPcpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 37), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanPcpControl.setStatus('current')
f3L2A2NAclRuleOuterVlanPcpLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 38), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanPcpLowLimit.setStatus('current')
f3L2A2NAclRuleOuterVlanPcpHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 39), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanPcpHighLimit.setStatus('current')
f3L2A2NAclRuleInnerVlanPcpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 40), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleInnerVlanPcpControl.setStatus('current')
f3L2A2NAclRuleInnerVlanPcpLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 41), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleInnerVlanPcpLowLimit.setStatus('current')
f3L2A2NAclRuleInnerVlanPcpHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 42), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleInnerVlanPcpHighLimit.setStatus('current')
f3L2A2NAclRuleOuterVlanDeiControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 43), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanDeiControl.setStatus('current')
f3L2A2NAclRuleOuterVlanDei = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanDei.setStatus('current')
f3L2A2NAclRuleEtherTypeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 45), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleEtherTypeControl.setStatus('current')
f3L2A2NAclRuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleEtherType.setStatus('current')
f3L2A2NAclRuleTcpFlagsControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 47), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleTcpFlagsControl.setStatus('current')
f3L2A2NAclRuleTcpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleTcpFlags.setStatus('current')
f3L2A2NAclRuleSrcIpv4AddressHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 49), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcIpv4AddressHighLimit.setStatus('current')
f3L2A2NAclRuleDstIpv4AddressHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 50), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstIpv4AddressHighLimit.setStatus('current')
f3L2A2NAclRuleIpv4PriorityHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleIpv4PriorityHighLimit.setStatus('current')
f3L2A2NAclRuleStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 52), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L2A2NAclRuleStorageType.setStatus('current')
f3L2A2NAclRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 53), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L2A2NAclRuleRowStatus.setStatus('current')
f3L2A2NAclRuleAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 54), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleAdminState.setStatus('current')
f3L2A2NAclRuleActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 55), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleActive.setStatus('current')
f3L2A2NAclRuleSrcIpV6AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 56), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcIpV6AddressControl.setStatus('current')
f3L2A2NAclRuleSrcIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 57), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcIpV6Address.setStatus('current')
f3L2A2NAclRuleSrcIpV6AddressPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcIpV6AddressPrefixLen.setStatus('current')
f3L2A2NAclRuleDstIpV6AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 59), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstIpV6AddressControl.setStatus('current')
f3L2A2NAclRuleDstIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 60), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstIpV6Address.setStatus('current')
f3L2A2NAclRuleDstIpV6AddressPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstIpV6AddressPrefixLen.setStatus('current')
f3L2A2NAclRuleIpV6FlowLabelControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 62), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleIpV6FlowLabelControl.setStatus('current')
f3L2A2NAclRuleIpV6FlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 63), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleIpV6FlowLabel.setStatus('current')
f3L2N2AAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6), )
if mibBuilder.loadTexts: f3L2N2AAclRuleTable.setStatus('current')
f3L2N2AAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleParentIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleIndex"))
if mibBuilder.loadTexts: f3L2N2AAclRuleEntry.setStatus('current')
f3L2N2AAclRuleParentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L2N2AAclRuleParentIndex.setStatus('current')
f3L2N2AAclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 2), Integer32())
if mibBuilder.loadTexts: f3L2N2AAclRuleIndex.setStatus('current')
f3L2N2AAclRuleAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 3), F3DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleAlias.setStatus('current')
f3L2N2AAclRuleSrcIpv4AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcIpv4AddressControl.setStatus('current')
f3L2N2AAclRuleDynamicSrcIpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDynamicSrcIpControl.setStatus('current')
f3L2N2AAclRuleSrcIpv4AddressLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcIpv4AddressLowLimit.setStatus('current')
f3L2N2AAclRuleDstIpv4AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstIpv4AddressControl.setStatus('current')
f3L2N2AAclRuleDstIpv4AddressLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstIpv4AddressLowLimit.setStatus('current')
f3L2N2AAclRuleIpv4PriorityControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleIpv4PriorityControl.setStatus('current')
f3L2N2AAclRuleIpv4PriorityLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleIpv4PriorityLowLimit.setStatus('current')
f3L2N2AAclRuleProtocolControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleProtocolControl.setStatus('current')
f3L2N2AAclRuleProtocolNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleProtocolNumber.setStatus('current')
f3L2N2AAclRuleSrcPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcPortControl.setStatus('current')
f3L2N2AAclRuleSrcPortLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcPortLowLimit.setStatus('current')
f3L2N2AAclRuleSrcPortHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcPortHighLimit.setStatus('current')
f3L2N2AAclRuleDstPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstPortControl.setStatus('current')
f3L2N2AAclRuleDstPortLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstPortLowLimit.setStatus('current')
f3L2N2AAclRuleDstPortHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstPortHighLimit.setStatus('current')
f3L2N2AAclRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRulePriority.setStatus('current')
f3L2N2AAclRuleCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleCOS.setStatus('current')
f3L2N2AAclRuleOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 21), L3AclRuleOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleOperation.setStatus('current')
f3L2N2AAclRuleSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 22), F3DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleSummary.setStatus('current')
f3L2N2AAclRuleCosOverrideControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleCosOverrideControl.setStatus('current')
f3L2N2AAclRuleSrcMacAddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcMacAddressControl.setStatus('current')
f3L2N2AAclRuleDynamicSrcMacAddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDynamicSrcMacAddressControl.setStatus('current')
f3L2N2AAclRuleSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 26), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcMacAddress.setStatus('current')
f3L2N2AAclRuleSrcMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 27), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcMacAddressMask.setStatus('current')
f3L2N2AAclRuleDstMacAddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstMacAddressControl.setStatus('current')
f3L2N2AAclRuleDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 29), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstMacAddress.setStatus('current')
f3L2N2AAclRuleDstMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 30), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstMacAddressMask.setStatus('current')
f3L2N2AAclRuleOuterVlanVIDControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 31), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanVIDControl.setStatus('current')
f3L2N2AAclRuleOuterVlanVIDLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 32), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanVIDLowLimit.setStatus('current')
f3L2N2AAclRuleOuterVlanVIDHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 33), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanVIDHighLimit.setStatus('current')
f3L2N2AAclRuleInnerVlanVIDControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleInnerVlanVIDControl.setStatus('current')
f3L2N2AAclRuleInnerVlanVIDLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 35), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleInnerVlanVIDLowLimit.setStatus('current')
f3L2N2AAclRuleInnerVlanVIDHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 36), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleInnerVlanVIDHighLimit.setStatus('current')
f3L2N2AAclRuleOuterVlanPcpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 37), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanPcpControl.setStatus('current')
f3L2N2AAclRuleOuterVlanPcpLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 38), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanPcpLowLimit.setStatus('current')
f3L2N2AAclRuleOuterVlanPcpHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 39), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanPcpHighLimit.setStatus('current')
f3L2N2AAclRuleInnerVlanPcpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 40), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleInnerVlanPcpControl.setStatus('current')
f3L2N2AAclRuleInnerVlanPcpLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 41), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleInnerVlanPcpLowLimit.setStatus('current')
f3L2N2AAclRuleInnerVlanPcpHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 42), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleInnerVlanPcpHighLimit.setStatus('current')
f3L2N2AAclRuleOuterVlanDeiControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 43), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanDeiControl.setStatus('current')
f3L2N2AAclRuleOuterVlanDei = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanDei.setStatus('current')
f3L2N2AAclRuleEtherTypeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 45), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleEtherTypeControl.setStatus('current')
f3L2N2AAclRuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleEtherType.setStatus('current')
f3L2N2AAclRuleTcpFlagsControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 47), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleTcpFlagsControl.setStatus('current')
f3L2N2AAclRuleTcpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleTcpFlags.setStatus('current')
f3L2N2AAclRuleSrcIpv4AddressHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 49), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcIpv4AddressHighLimit.setStatus('current')
f3L2N2AAclRuleDstIpv4AddressHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 50), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstIpv4AddressHighLimit.setStatus('current')
f3L2N2AAclRuleIpv4PriorityHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleIpv4PriorityHighLimit.setStatus('current')
f3L2N2AAclRuleStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 52), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L2N2AAclRuleStorageType.setStatus('current')
f3L2N2AAclRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 53), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L2N2AAclRuleRowStatus.setStatus('current')
f3L2N2AAclRuleAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 54), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleAdminState.setStatus('current')
f3L2N2AAclRuleActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 55), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleActive.setStatus('current')
f3L2N2AAclRuleSrcIpV6AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 56), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcIpV6AddressControl.setStatus('current')
f3L2N2AAclRuleSrcIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 57), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcIpV6Address.setStatus('current')
f3L2N2AAclRuleSrcIpV6AddressPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcIpV6AddressPrefixLen.setStatus('current')
f3L2N2AAclRuleDstIpV6AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 59), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstIpV6AddressControl.setStatus('current')
f3L2N2AAclRuleDstIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 60), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstIpV6Address.setStatus('current')
f3L2N2AAclRuleDstIpV6AddressPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstIpV6AddressPrefixLen.setStatus('current')
f3L2N2AAclRuleIpV6FlowLabelControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 62), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleIpV6FlowLabelControl.setStatus('current')
f3L2N2AAclRuleIpV6FlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 63), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleIpV6FlowLabel.setStatus('current')
f3L3QosPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7), )
if mibBuilder.loadTexts: f3L3QosPolicerTable.setStatus('current')
f3L3QosPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3QosPolicerIndex"))
if mibBuilder.loadTexts: f3L3QosPolicerEntry.setStatus('current')
f3L3QosPolicerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosPolicerIndex.setStatus('current')
f3L3QosPolicerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerAdminState.setStatus('current')
f3L3QosPolicerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerOperationalState.setStatus('current')
f3L3QosPolicerSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerSecondaryState.setStatus('current')
f3L3QosPolicerCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosPolicerCIRLo.setStatus('current')
f3L3QosPolicerCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosPolicerCIRHi.setStatus('current')
f3L3QosPolicerEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosPolicerEIRLo.setStatus('current')
f3L3QosPolicerEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosPolicerEIRHi.setStatus('current')
f3L3QosPolicerCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosPolicerCBS.setStatus('current')
f3L3QosPolicerEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosPolicerEBS.setStatus('current')
f3L3QosPolicerAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 11), PolicerAlgorithmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerAlgorithm.setStatus('current')
f3L3QosPolicerColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 12), PolicerColorMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosPolicerColorMode.setStatus('current')
f3L3QosPolicerCouplingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosPolicerCouplingFlag.setStatus('current')
f3L3QosPolicerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 14), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosPolicerStorageType.setStatus('current')
f3L3QosPolicerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosPolicerRowStatus.setStatus('current')
f3L3QosPolicerCIRMaxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerCIRMaxHi.setStatus('current')
f3L3QosPolicerCIRMaxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerCIRMaxLo.setStatus('current')
f3L3QosPolicerEIRMaxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerEIRMaxHi.setStatus('current')
f3L3QosPolicerEIRMaxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerEIRMaxLo.setStatus('current')
f3L3QosPolicerEnvelopeObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 20), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerEnvelopeObject.setStatus('current')
f3L3QosPolicerRank = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerRank.setStatus('current')
f3L3QosPolicerPolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerPolicingEnabled.setStatus('current')
f3L3QosShaperTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8), )
if mibBuilder.loadTexts: f3L3QosShaperTable.setStatus('current')
f3L3QosShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3QosShaperIndex"))
if mibBuilder.loadTexts: f3L3QosShaperEntry.setStatus('current')
f3L3QosShaperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperIndex.setStatus('current')
f3L3QosShaperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosShaperAdminState.setStatus('current')
f3L3QosShaperOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperOperationalState.setStatus('current')
f3L3QosShaperSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperSecondaryState.setStatus('current')
f3L3QosShaperCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperCIRLo.setStatus('current')
f3L3QosShaperCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperCIRHi.setStatus('current')
f3L3QosShaperEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperEIRLo.setStatus('current')
f3L3QosShaperEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperEIRHi.setStatus('current')
f3L3QosShaperBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperBufferSize.setStatus('current')
f3L3QosShaperCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperCOS.setStatus('current')
f3L3QosShaperWredGreenMinQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperWredGreenMinQueueThreshold.setStatus('current')
f3L3QosShaperWredGreenMaxQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperWredGreenMaxQueueThreshold.setStatus('current')
f3L3QosShaperWredGreenDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperWredGreenDropProbability.setStatus('current')
f3L3QosShaperWredYellowMinQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 14), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperWredYellowMinQueueThreshold.setStatus('current')
f3L3QosShaperWredYellowMaxQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperWredYellowMaxQueueThreshold.setStatus('current')
f3L3QosShaperWredYellowDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 16), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperWredYellowDropProbability.setStatus('current')
f3L3QosShaperStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 17), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperStorageType.setStatus('current')
f3L3QosShaperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperRowStatus.setStatus('current')
f3L3QosShaperWfqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosShaperWfqWeight.setStatus('current')
f3L3TrafficIPInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9), )
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceTable.setStatus('current')
f3L3TrafficIPInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPIfIndex"))
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceEntry.setStatus('current')
f3L3TrafficIPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L3TrafficIPIfIndex.setStatus('current')
f3L3TrafficIPIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfName.setStatus('current')
f3L3TrafficIPIfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfAdminState.setStatus('current')
f3L3TrafficIPIfSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPIfSecondaryState.setStatus('current')
f3L3TrafficIPIfOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPIfOperationalState.setStatus('current')
f3L3TrafficIPIfProxyArpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfProxyArpEnabled.setStatus('current')
f3L3TrafficIPIfIpAddressSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 7), IfIpAddressSourceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfIpAddressSourceType.setStatus('current')
f3L3TrafficIPIfMgmtUseEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfMgmtUseEnable.setStatus('current')
f3L3TrafficIPIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfIpAddress.setStatus('current')
f3L3TrafficIPIfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfMask.setStatus('current')
f3L3TrafficIPIfDhcpRelayInterfaceSide = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 11), DhcpRelayInterfaceSide()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayInterfaceSide.setStatus('current')
f3L3TrafficIPIfDhcpRelayVendorClassiDOpt60 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayVendorClassiDOpt60.setStatus('current')
f3L3TrafficIPIfDhcpRelayVendorClassiDOpt60Control = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayVendorClassiDOpt60Control.setStatus('current')
f3L3TrafficIPIfDhcpRelayUserClassOpt77 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayUserClassOpt77.setStatus('current')
f3L3TrafficIPIfDhcpRelayUserClassOpt77Control = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayUserClassOpt77Control.setStatus('current')
f3L3TrafficIPIfDhcpRelayInfoOpt82Sub1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayInfoOpt82Sub1.setStatus('current')
f3L3TrafficIPIfDhcpRelayInfoOpt82Sub1Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayInfoOpt82Sub1Enabled.setStatus('current')
f3L3TrafficIPIfDhcpRelayInfoOpt82Sub2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayInfoOpt82Sub2.setStatus('current')
f3L3TrafficIPIfDhcpRelayInfoOpt82Sub2Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayInfoOpt82Sub2Enabled.setStatus('current')
f3L3TrafficIPIfDhcpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpEnabled.setStatus('current')
f3L3TrafficIPIfDhcpRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 21), CmDhcpRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRole.setStatus('current')
f3L3TrafficIPIfDhcpClientIdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpClientIdEnabled.setStatus('current')
f3L3TrafficIPIfDhcpClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpClientId.setStatus('current')
f3L3TrafficIPIfDhcpClassIdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpClassIdEnabled.setStatus('current')
f3L3TrafficIPIfDhcpHostNameEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpHostNameEnabled.setStatus('current')
f3L3TrafficIPIfDhcpHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpHostName.setStatus('current')
f3L3TrafficIPIfDhcpClientIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 27), DHCPCIDType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpClientIdType.setStatus('current')
f3L3TrafficIPIfDhcpHostNameType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 28), DHCPHostNameType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpHostNameType.setStatus('current')
f3L3TrafficIPIfStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 29), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPIfStorageType.setStatus('current')
f3L3TrafficIPIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPIfRowStatus.setStatus('current')
f3L3TrafficIPIfAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 31), AffectiveArpActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfAction.setStatus('deprecated')
f3L3TrafficIPIfActionX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 32), TrafficIpInterfaceActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfActionX.setStatus('current')
f3L3TrafficIPIfUnnumberedControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 33), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPIfUnnumberedControl.setStatus('current')
f3L3TrafficIPIfBorrowedIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 34), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPIfBorrowedIntf.setStatus('current')
f3L3TrafficIPIfIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 35), IpMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfIpMode.setStatus('current')
f3L3TrafficIPIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 36), IpInterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfType.setStatus('current')
f3L3TrafficIPIfIpv6LinkLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 37), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfIpv6LinkLocalAddr.setStatus('current')
f3L3TrafficIPIfIpv6LinkLocalAddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 38), Ipv6LinkLocalAddressMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfIpv6LinkLocalAddrMode.setStatus('current')
f3L3TrafficIPIfIpv6StatelessAddrAutoconfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 39), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfIpv6StatelessAddrAutoconfigEnabled.setStatus('current')
f3L3TrafficIPIfDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 40), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDefaultGateway.setStatus('current')
f3L3TrafficIPIfIcmpErrorMsgRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfIcmpErrorMsgRateLimit.setStatus('current')
f3L3TrafficIPIfDhcpv6Role = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 42), CmDhcpRole()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpv6Role.setStatus('current')
f3L3TrafficIPIfDhcpv6Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 43), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpv6Enabled.setStatus('current')
f3L3TrafficIPIfDhcpRapidCommitControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 44), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRapidCommitControlEnabled.setStatus('current')
f3L3TrafficIPIfMaxRAInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 45), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfMaxRAInterval.setStatus('current')
f3L3TrafficIPIfMinRAInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 46), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfMinRAInterval.setStatus('current')
f3L3TrafficIPIfRouterLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 47), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfRouterLifeTime.setStatus('current')
f3L3TrafficIPIfReachableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 48), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfReachableTime.setStatus('current')
f3L3TrafficIPIfRaDhcpMoreConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 49), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfRaDhcpMoreConfigEnabled.setStatus('current')
f3L3TrafficIPIfRaManagedAddressConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 50), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfRaManagedAddressConfigEnabled.setStatus('current')
f3L3TrafficIPIfRaRDNSSOptionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 51), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfRaRDNSSOptionEnabled.setStatus('current')
f3L3TrafficIPIfRaRDNSSLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 52), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfRaRDNSSLifeTime.setStatus('current')
f3L3TrafficIPIfRaDNSSList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfRaDNSSList.setStatus('current')
f3L3TrafficIPIfRaDefaultRouterPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 54), NdpRaDefaultRouterPreference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfRaDefaultRouterPreference.setStatus('current')
f3L3TrafficIPIfDupAddrDetectControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 55), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDupAddrDetectControl.setStatus('current')
f3L3TrafficIPIfDupAddrDetectTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 56), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDupAddrDetectTransmits.setStatus('current')
f3L3TrafficIPIfDupAddrDetectRetransTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 57), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDupAddrDetectRetransTimer.setStatus('current')
f3L3TrafficIPIfMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfMTU.setStatus('current')
f3DhcpRelayAgentTrafficIpIfMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 10), )
if mibBuilder.loadTexts: f3DhcpRelayAgentTrafficIpIfMemberTable.setStatus('current')
f3DhcpRelayAgentTrafficIpIfMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 10, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3DhcpRelayAgentIndex"), (0, "F3-L3-MIB", "f3DhcpRelayAgentTrafficIpIfMemberObject"))
if mibBuilder.loadTexts: f3DhcpRelayAgentTrafficIpIfMemberEntry.setStatus('current')
f3DhcpRelayAgentTrafficIpIfMemberObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 10, 1, 1), VariablePointer())
if mibBuilder.loadTexts: f3DhcpRelayAgentTrafficIpIfMemberObject.setStatus('current')
f3DhcpRelayAgentTrafficIpIfMemberStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 10, 1, 2), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3DhcpRelayAgentTrafficIpIfMemberStorageType.setStatus('current')
f3DhcpRelayAgentTrafficIpIfMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 10, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3DhcpRelayAgentTrafficIpIfMemberRowStatus.setStatus('current')
f3VrfTrafficIpIfMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 11), )
if mibBuilder.loadTexts: f3VrfTrafficIpIfMemberTable.setStatus('current')
f3VrfTrafficIpIfMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 11, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3VrfTrafficIpIfMemberObject"))
if mibBuilder.loadTexts: f3VrfTrafficIpIfMemberEntry.setStatus('current')
f3VrfTrafficIpIfMemberObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 11, 1, 1), VariablePointer())
if mibBuilder.loadTexts: f3VrfTrafficIpIfMemberObject.setStatus('current')
f3VrfTrafficIpIfMemberStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 11, 1, 2), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3VrfTrafficIpIfMemberStorageType.setStatus('current')
f3VrfTrafficIpIfMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3VrfTrafficIpIfMemberRowStatus.setStatus('current')
f3L3TrafficIpv4RouteTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12), )
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteTable.setStatus('deprecated')
f3L3TrafficIpv4RouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIpv4RouteDest"), (0, "F3-L3-MIB", "f3L3TrafficIpv4RouteMask"), (0, "F3-L3-MIB", "f3L3TrafficIpv4RouteNextHop"), (0, "F3-L3-MIB", "f3L3TrafficIpv4RouteInterface"))
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteEntry.setStatus('deprecated')
f3L3TrafficIpv4RouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteDest.setStatus('deprecated')
f3L3TrafficIpv4RouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteMask.setStatus('deprecated')
f3L3TrafficIpv4RouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteNextHop.setStatus('deprecated')
f3L3TrafficIpv4RouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteMetric.setStatus('deprecated')
f3L3TrafficIpv4RouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteInterface.setStatus('deprecated')
f3L3TrafficIpv4RouteAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteAdvertise.setStatus('deprecated')
f3L3TrafficIpv4RouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 7), TrafficIpRouteStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteStatus.setStatus('deprecated')
f3L3TrafficIpv4RouteSourceForwardingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteSourceForwardingEnable.setStatus('deprecated')
f3L3TrafficIpv4RouteFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 9), RouteFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteFlags.setStatus('obsolete')
f3L3TrafficIpv4RouteStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 10), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteStorageType.setStatus('deprecated')
f3L3TrafficIpv4RouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteRowStatus.setStatus('deprecated')
f3L3TrafficIpv4RouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 12), IpEntryType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteType.setStatus('deprecated')
f3L3TrafficIpv4RouteStatusX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 13), TrafficIpRouteStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteStatusX.setStatus('deprecated')
f3L3TrafficIpv4RouteOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 14), TrafficIpRouteOriginType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteOrigin.setStatus('deprecated')
f3L3TrafficArpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 13), )
if mibBuilder.loadTexts: f3L3TrafficArpTable.setStatus('current')
f3L3TrafficArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 13, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPIfIndex"), (0, "F3-L3-MIB", "f3L3TrafficArpIPAddress"))
if mibBuilder.loadTexts: f3L3TrafficArpEntry.setStatus('current')
f3L3TrafficArpIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 13, 1, 1), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficArpIPAddress.setStatus('current')
f3L3TrafficArpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 13, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficArpMacAddress.setStatus('current')
f3L3TrafficArpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficArpInterface.setStatus('current')
f3L3TrafficArpEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 13, 1, 4), IpEntryType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficArpEntryType.setStatus('current')
f3L3TrafficArpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 13, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficArpStorageType.setStatus('current')
f3L3TrafficArpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 13, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficArpRowStatus.setStatus('current')
f3L3TrafficBgpRouterTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14), )
if mibBuilder.loadTexts: f3L3TrafficBgpRouterTable.setStatus('current')
f3L3TrafficBgpRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouterIndex"))
if mibBuilder.loadTexts: f3L3TrafficBgpRouterEntry.setStatus('current')
f3L3TrafficBgpRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 1), Unsigned32())
if mibBuilder.loadTexts: f3L3TrafficBgpRouterIndex.setStatus('current')
f3L3TrafficBgpRouterAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterAdminState.setStatus('current')
f3L3TrafficBgpRouterSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 3), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterSecondaryState.setStatus('current')
f3L3TrafficBgpRouterOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterOperationalState.setStatus('current')
f3L3TrafficBgpRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterId.setStatus('current')
f3L3TrafficBgpRouterAsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterAsNumber.setStatus('current')
f3L3TrafficBgpRouterConnectedRoutesRedistControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterConnectedRoutesRedistControl.setStatus('deprecated')
f3L3TrafficBgpRouterOspfRoutesRedistControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterOspfRoutesRedistControl.setStatus('deprecated')
f3L3TrafficBgpRouterStaticRoutesRedistControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterStaticRoutesRedistControl.setStatus('deprecated')
f3L3TrafficBgpRouterDhcpRoutesRedistControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterDhcpRoutesRedistControl.setStatus('deprecated')
f3L3TrafficBgpRouterStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 11), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterStorageType.setStatus('current')
f3L3TrafficBgpRouterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterRowStatus.setStatus('current')
f3L3TrafficBgpRouterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 13), BgpRouterActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterAction.setStatus('current')
f3L3TrafficBgpRouterIBgpAdminDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterIBgpAdminDistance.setStatus('current')
f3L3TrafficBgpRouterEBgpAdminDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterEBgpAdminDistance.setStatus('current')
f3L3TrafficBgpRouterEcmpMaximumPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterEcmpMaximumPaths.setStatus('current')
f3L3TrafficBgpRouterRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterRestartTime.setStatus('current')
f3L3TrafficBgpRouterStaleRoutesTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterStaleRoutesTime.setStatus('current')
f3L3TrafficBgpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 15), )
if mibBuilder.loadTexts: f3L3TrafficBgpRouteTable.setStatus('current')
f3L3TrafficBgpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 15, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouteNetwork"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouteMetric"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouteNextHop"))
if mibBuilder.loadTexts: f3L3TrafficBgpRouteEntry.setStatus('current')
f3L3TrafficBgpRouteNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 15, 1, 1), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficBgpRouteNetwork.setStatus('current')
f3L3TrafficBgpRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 15, 1, 2), Unsigned32())
if mibBuilder.loadTexts: f3L3TrafficBgpRouteMetric.setStatus('current')
f3L3TrafficBgpRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 15, 1, 3), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficBgpRouteNextHop.setStatus('current')
f3L3TrafficBgpRoutePath = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 15, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRoutePath.setStatus('current')
f3L3TrafficBgpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16), )
if mibBuilder.loadTexts: f3L3TrafficBgpPeerTable.setStatus('current')
f3L3TrafficBgpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpPeerIndex"))
if mibBuilder.loadTexts: f3L3TrafficBgpPeerEntry.setStatus('current')
f3L3TrafficBgpPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: f3L3TrafficBgpPeerIndex.setStatus('current')
f3L3TrafficBgpPeerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAdminState.setStatus('current')
f3L3TrafficBgpPeerSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 3), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerSecondaryState.setStatus('current')
f3L3TrafficBgpPeerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerOperationalState.setStatus('current')
f3L3TrafficBgpPeerIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerIpv4Addr.setStatus('current')
f3L3TrafficBgpPeerAsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAsNumber.setStatus('current')
f3L3TrafficBgpPeerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerDescription.setStatus('current')
f3L3TrafficBgpPeerBgpSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 8), BgpSessionStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerBgpSessionState.setStatus('current')
f3L3TrafficBgpPeerHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerHoldTime.setStatus('current')
f3L3TrafficBgpPeerStartupHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerStartupHoldTime.setStatus('current')
f3L3TrafficBgpPeerKeepAliveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerKeepAliveTime.setStatus('current')
f3L3TrafficBgpPeerConnectRetryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerConnectRetryTime.setStatus('current')
f3L3TrafficBgpPeerUpdateSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerUpdateSourceIp.setStatus('current')
f3L3TrafficBgpPeerAuthenticationKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 14), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAuthenticationKey.setStatus('current')
f3L3TrafficBgpPeerTimeSinceUpTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerTimeSinceUpTransition.setStatus('current')
f3L3TrafficBgpPeerTimeSinceDownTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerTimeSinceDownTransition.setStatus('current')
f3L3TrafficBgpPeerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 17), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerStorageType.setStatus('current')
f3L3TrafficBgpPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerRowStatus.setStatus('current')
f3L3TrafficBgpPeerIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 19), IpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerIpVersion.setStatus('current')
f3L3TrafficBgpPeerIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 20), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerIpv6Address.setStatus('current')
f3L3TrafficBgpPeerUpdateSourceIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 21), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerUpdateSourceIpv6.setStatus('current')
f3L3TrafficBgpPeerMultihopControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerMultihopControl.setStatus('current')
f3L3TrafficBgpPeerMultihopTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerMultihopTtl.setStatus('current')
f3L3TrafficBgpPeerUpdateSourceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerUpdateSourceInterface.setStatus('current')
f3L3TrafficBgpPeerUpdateSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 25), BgpUpdateSourceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerUpdateSourceType.setStatus('current')
f3L3TrafficBgpPeerLocalPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerLocalPreference.setStatus('current')
f3L3TrafficBgpPeerRouteReflectorClient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerRouteReflectorClient.setStatus('current')
f3L3TrafficBgpPeerRouteReflectorClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerRouteReflectorClusterId.setStatus('current')
f3L3TrafficBgpPeerBgpRouteInboundFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerBgpRouteInboundFilter.setStatus('current')
f3L3TrafficBgpPeerBgpRouteOutboundFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerBgpRouteOutboundFilter.setStatus('current')
f3L3TrafficBgpPeerBgpGracefulRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 31), BgpGracefulRestartControlType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerBgpGracefulRestart.setStatus('current')
f3L3TrafficBgpPeerPeerRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerPeerRestartTime.setStatus('current')
f3L3TrafficBgpPeerPeerRestarting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerPeerRestarting.setStatus('current')
f3VrfOspfRouterTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17), )
if mibBuilder.loadTexts: f3VrfOspfRouterTable.setStatus('current')
f3VrfOspfRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3VrfOspfRouterIndex"))
if mibBuilder.loadTexts: f3VrfOspfRouterEntry.setStatus('current')
f3VrfOspfRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 1), Unsigned32())
if mibBuilder.loadTexts: f3VrfOspfRouterIndex.setStatus('current')
f3VrfOspfRouterAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterAdminState.setStatus('current')
f3VrfOspfRouterSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 3), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3VrfOspfRouterSecondaryState.setStatus('current')
f3VrfOspfRouterOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3VrfOspfRouterOperationalState.setStatus('current')
f3VrfOspfRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterId.setStatus('current')
f3VrfOspfRouterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterDescription.setStatus('current')
f3VrfOspfRouterBgpRoutesRedistributeToOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterBgpRoutesRedistributeToOspf.setStatus('current')
f3VrfOspfRouterBgpRoutesMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 8), RoutesMetricType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterBgpRoutesMetricType.setStatus('current')
f3VrfOspfRouterBgpRoutesMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterBgpRoutesMetric.setStatus('current')
f3VrfOspfRouterStaticRoutesRedistributeToOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterStaticRoutesRedistributeToOspf.setStatus('current')
f3VrfOspfRouterStaticRoutesMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 11), RoutesMetricType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterStaticRoutesMetricType.setStatus('current')
f3VrfOspfRouterStaticRoutesMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterStaticRoutesMetric.setStatus('current')
f3VrfOspfRouterConnectedRoutesRedistributeToOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterConnectedRoutesRedistributeToOspf.setStatus('current')
f3VrfOspfRouterConnectedRoutesMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 14), RoutesMetricType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterConnectedRoutesMetricType.setStatus('current')
f3VrfOspfRouterConnectedRoutesMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterConnectedRoutesMetric.setStatus('current')
f3VrfOspfRouterDhcpRoutesRedistributeToOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterDhcpRoutesRedistributeToOspf.setStatus('current')
f3VrfOspfRouterDhcpRoutesMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 17), RoutesMetricType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterDhcpRoutesMetricType.setStatus('current')
f3VrfOspfRouterDhcpRoutesMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterDhcpRoutesMetric.setStatus('current')
f3VrfOspfRouterIsAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3VrfOspfRouterIsAbr.setStatus('current')
f3VrfOspfRouterIsAsbr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3VrfOspfRouterIsAsbr.setStatus('current')
f3VrfOspfRouterStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 21), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3VrfOspfRouterStorageType.setStatus('current')
f3VrfOspfRouterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3VrfOspfRouterRowStatus.setStatus('current')
f3VrfOspfRouterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 23), OspfRouterActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterAction.setStatus('current')
f3VrfOspfRouterVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 24), OspfVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterVersion.setStatus('current')
f3VrfOspfRouterAdministrativeDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterAdministrativeDistance.setStatus('current')
f3VrfOspfRouterSlaacRoutesRedistributeToOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterSlaacRoutesRedistributeToOspf.setStatus('current')
f3VrfOspfRouterSlaacRoutesMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 27), RoutesMetricType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterSlaacRoutesMetricType.setStatus('current')
f3VrfOspfRouterSlaacRoutesMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterSlaacRoutesMetric.setStatus('current')
f3VrfOspfRouterEcmpMaximumPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterEcmpMaximumPaths.setStatus('current')
f3VrfOspfRouterSrControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterSrControl.setStatus('current')
f3VrfOspfRouterConvergenceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterConvergenceTime.setStatus('current')
f3L3TrafficOspfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 18), )
if mibBuilder.loadTexts: f3L3TrafficOspfAreaTable.setStatus('current')
f3L3TrafficOspfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 18, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3VrfOspfRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficOspfAreaIndex"))
if mibBuilder.loadTexts: f3L3TrafficOspfAreaEntry.setStatus('current')
f3L3TrafficOspfAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: f3L3TrafficOspfAreaIndex.setStatus('current')
f3L3TrafficOspfAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 18, 1, 2), TrafficOspfAreaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfAreaType.setStatus('current')
f3L3TrafficOspfAreaDefaultCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 18, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfAreaDefaultCost.setStatus('current')
f3L3TrafficOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 18, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfAreaId.setStatus('current')
f3L3TrafficOspfAreaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 18, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficOspfAreaStorageType.setStatus('current')
f3L3TrafficOspfAreaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 18, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficOspfAreaRowStatus.setStatus('current')
f3L3TrafficOspfAreaAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 18, 1, 7), OspfAuthType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfAreaAuthType.setStatus('current')
f3L3TrafficOspfAreaSimpleAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 18, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfAreaSimpleAuthKey.setStatus('current')
f3L3TrafficOspfAreaCryptoKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 18, 1, 9), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfAreaCryptoKeyId.setStatus('current')
f3L3TrafficOspfAreaIfMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 19), )
if mibBuilder.loadTexts: f3L3TrafficOspfAreaIfMemberTable.setStatus('current')
f3L3TrafficOspfAreaIfMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 19, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3VrfOspfRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficOspfAreaIndex"), (0, "F3-L3-MIB", "f3L3TrafficOspfAreaIfMemberObject"))
if mibBuilder.loadTexts: f3L3TrafficOspfAreaIfMemberEntry.setStatus('current')
f3L3TrafficOspfAreaIfMemberObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 19, 1, 1), VariablePointer())
if mibBuilder.loadTexts: f3L3TrafficOspfAreaIfMemberObject.setStatus('current')
f3L3TrafficOspfAreaIfMemberStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 19, 1, 2), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficOspfAreaIfMemberStorageType.setStatus('current')
f3L3TrafficOspfAreaIfMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 19, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficOspfAreaIfMemberRowStatus.setStatus('current')
f3VrfLoopbackInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20), )
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceTable.setStatus('current')
f3VrfLoopbackInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3VrfLoopbackInterfaceIndex"))
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceEntry.setStatus('current')
f3VrfLoopbackInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceIndex.setStatus('current')
f3VrfLoopbackInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceName.setStatus('current')
f3VrfLoopbackInterfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceIpAddress.setStatus('current')
f3VrfLoopbackInterfaceNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceNetMask.setStatus('current')
f3VrfLoopbackInterfaceCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceCIRLo.setStatus('current')
f3VrfLoopbackInterfaceCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceCIRHi.setStatus('current')
f3VrfLoopbackInterfaceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceStorageType.setStatus('current')
f3VrfLoopbackInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceRowStatus.setStatus('current')
f3VrfLoopbackInterfaceIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1, 9), IpMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceIpMode.setStatus('current')
f3VrfLoopbackInterfaceIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1, 10), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceIpv6Address.setStatus('current')
f3VrfLoopbackInterfaceIpv6AddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceIpv6AddrPrefixLen.setStatus('current')
f3L3TrafficOspfAsLsDbTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 21), )
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbTable.setStatus('current')
f3L3TrafficOspfAsLsDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 21, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3VrfOspfRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficOspfAsLsDbType"), (0, "F3-L3-MIB", "f3L3TrafficOspfAsLsDbId"), (0, "F3-L3-MIB", "f3L3TrafficOspfAsLsDbRouterId"))
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbEntry.setStatus('current')
f3L3TrafficOspfAsLsDbType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 21, 1, 1), OspfAsLsaType())
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbType.setStatus('current')
f3L3TrafficOspfAsLsDbId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 21, 1, 2), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbId.setStatus('current')
f3L3TrafficOspfAsLsDbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 21, 1, 3), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbRouterId.setStatus('current')
f3L3TrafficOspfAsLsDbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 21, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbChecksum.setStatus('current')
f3L3TrafficOspfAsLsDbSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 21, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbSeqNum.setStatus('current')
f3L3TrafficOspfAsLsDbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 21, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbAge.setStatus('current')
f3L3TrafficOspfLsDbTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 22), )
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbTable.setStatus('current')
f3L3TrafficOspfLsDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 22, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3VrfOspfRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficOspfLsDbType"), (0, "F3-L3-MIB", "f3L3TrafficOspfLsDbId"), (0, "F3-L3-MIB", "f3L3TrafficOspfLsDbRouterId"), (0, "F3-L3-MIB", "f3L3TrafficOspfLsDbAreaId"))
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbEntry.setStatus('current')
f3L3TrafficOspfLsDbType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 22, 1, 1), OspfLsaType())
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbType.setStatus('current')
f3L3TrafficOspfLsDbId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 22, 1, 2), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbId.setStatus('current')
f3L3TrafficOspfLsDbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 22, 1, 3), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbRouterId.setStatus('current')
f3L3TrafficOspfLsDbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 22, 1, 4), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbAreaId.setStatus('current')
f3L3TrafficOspfLsDbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 22, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbChecksum.setStatus('current')
f3L3TrafficOspfLsDbSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 22, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbSeqNum.setStatus('current')
f3L3TrafficOspfLsDbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 22, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbAge.setStatus('current')
f3L3TrafficOspfNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 23), )
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborTable.setStatus('current')
f3L3TrafficOspfNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 23, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3VrfOspfRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficOspfNeighborIpAddress"))
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborEntry.setStatus('current')
f3L3TrafficOspfNeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 23, 1, 1), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborIpAddress.setStatus('current')
f3L3TrafficOspfNeighborInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 23, 1, 2), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborInterface.setStatus('deprecated')
f3L3TrafficOspfNeighborRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 23, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborRouterId.setStatus('current')
f3L3TrafficOspfNeighborState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 23, 1, 4), OspfAdjacencyState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborState.setStatus('current')
f3L3TrafficOspfNeighborRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 23, 1, 5), TrafficOspfRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborRole.setStatus('current')
f3L3TrafficOspfNeighborPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 23, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborPriority.setStatus('current')
f3L3TrafficOspfNeighborDeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 23, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborDeadTime.setStatus('current')
f3L3TrafficOspfNeighborLocalInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 23, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborLocalInterfaceName.setStatus('current')
f3L3TrafficIPInterfaceOspfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25), )
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceOspfTable.setStatus('current')
f3L3TrafficIPInterfaceOspfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1), )
f3L3TrafficIPInterfaceEntry.registerAugmentions(("F3-L3-MIB", "f3L3TrafficIPInterfaceOspfEntry"))
f3L3TrafficIPInterfaceOspfEntry.setIndexNames(*f3L3TrafficIPInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceOspfEntry.setStatus('current')
f3L3TrafficIPIfOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfAreaId.setStatus('current')
f3L3TrafficIPIfOspfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfCost.setStatus('current')
f3L3TrafficIPIfOspfIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 3), OspfIfType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfIfType.setStatus('current')
f3L3TrafficIPIfOspfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfRtrPriority.setStatus('current')
f3L3TrafficIPIfOspfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfHelloInterval.setStatus('current')
f3L3TrafficIPIfOspfDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfDeadInterval.setStatus('current')
f3L3TrafficIPIfOspfTransmitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfTransmitDelay.setStatus('current')
f3L3TrafficIPIfOspfRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfRetransmitInterval.setStatus('current')
f3L3TrafficIPIfOspfState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 9), OspfInterfaceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfState.setStatus('current')
f3L3TrafficIPIfOspfDesignatedRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfDesignatedRouterId.setStatus('current')
f3L3TrafficIPIfOspfBackupDesignatedRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfBackupDesignatedRouterId.setStatus('current')
f3L3TrafficIPIfOspfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 12), OspfAuthType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfAuthType.setStatus('current')
f3L3TrafficIPIfOspfSimpleAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfSimpleAuthKey.setStatus('current')
f3L3TrafficIPIfospfCryptoKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 14), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfospfCryptoKeyId.setStatus('current')
f3L3TrafficIPv6InterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26), )
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceTable.setStatus('current')
f3L3TrafficIPv6InterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6IfIndex"))
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceEntry.setStatus('current')
f3L3TrafficIPv6IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L3TrafficIPv6IfIndex.setStatus('current')
f3L3TrafficIPv6IfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfName.setStatus('current')
f3L3TrafficIPv6IfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfAdminState.setStatus('current')
f3L3TrafficIPv6IfSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfSecondaryState.setStatus('current')
f3L3TrafficIPv6IfOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfOperationalState.setStatus('current')
f3L3TrafficIPv6IfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 6), IpInterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfType.setStatus('current')
f3L3TrafficIPv6IfLinkLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 7), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfLinkLocalAddr.setStatus('current')
f3L3TrafficIPv6IfLinkLocalAddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 8), Ipv6LinkLocalAddressMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfLinkLocalAddrMode.setStatus('current')
f3L3TrafficIPv6IfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfMtu.setStatus('current')
f3L3TrafficIPv6IfStatelessAddrAutoconfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfStatelessAddrAutoconfigEnabled.setStatus('current')
f3L3TrafficIPv6IfDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 11), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfDefaultGateway.setStatus('current')
f3L3TrafficIPv6IfIcmpErrorMsgRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfIcmpErrorMsgRateLimit.setStatus('current')
f3L3TrafficIPv6IfDhcpRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 13), CmDhcpRole()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfDhcpRole.setStatus('current')
f3L3TrafficIPv6IfDhcpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfDhcpEnabled.setStatus('current')
f3L3TrafficIPv6IfDhcpRapidCommitControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfDhcpRapidCommitControlEnabled.setStatus('current')
f3L3TrafficIPv6IfMaxRAInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfMaxRAInterval.setStatus('current')
f3L3TrafficIPv6IfMinRAInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfMinRAInterval.setStatus('current')
f3L3TrafficIPv6IfRouterLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRouterLifeTime.setStatus('current')
f3L3TrafficIPv6IfReachableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfReachableTime.setStatus('current')
f3L3TrafficIPv6IfRaDhcpMoreConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRaDhcpMoreConfigEnabled.setStatus('current')
f3L3TrafficIPv6IfRaManagedAddressConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRaManagedAddressConfigEnabled.setStatus('current')
f3L3TrafficIPv6IfRaRDNSSOptionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRaRDNSSOptionEnabled.setStatus('current')
f3L3TrafficIPv6IfRaRDNSSLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRaRDNSSLifeTime.setStatus('current')
f3L3TrafficIPv6IfRaDNSSList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRaDNSSList.setStatus('current')
f3L3TrafficIPv6IfRaDefaultRouterPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 25), NdpRaDefaultRouterPreference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRaDefaultRouterPreference.setStatus('current')
f3L3TrafficIPv6IfDupAddrDetectControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfDupAddrDetectControl.setStatus('current')
f3L3TrafficIPv6IfDupAddrDetectTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfDupAddrDetectTransmits.setStatus('current')
f3L3TrafficIPv6IfDupAddrDetectRetransTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfDupAddrDetectRetransTimer.setStatus('current')
f3L3TrafficIPv6IfStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 29), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfStorageType.setStatus('current')
f3L3TrafficIPv6IfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRowStatus.setStatus('current')
f3L3TrafficIPv6IfAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 31), TrafficIpv6InterfaceActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfAction.setStatus('current')
f3L3TrafficIPv6AddressTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 27), )
if mibBuilder.loadTexts: f3L3TrafficIPv6AddressTable.setStatus('current')
f3L3TrafficIPv6AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 27, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6IfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6AddrIndex"))
if mibBuilder.loadTexts: f3L3TrafficIPv6AddressEntry.setStatus('current')
f3L3TrafficIPv6AddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 27, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L3TrafficIPv6AddrIndex.setStatus('current')
f3L3TrafficIPv6AddrAssignMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 27, 1, 2), Ipv6AddressAssignMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6AddrAssignMode.setStatus('current')
f3L3TrafficIPv6AddrUnicastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 27, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6AddrUnicastAddr.setStatus('current')
f3L3TrafficIPv6AddrUnicastAddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 27, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6AddrUnicastAddrPrefixLength.setStatus('current')
f3L3TrafficIPv6AddrUnicastAddrAutoGenPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 27, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6AddrUnicastAddrAutoGenPrefix.setStatus('current')
f3L3TrafficIPv6AddrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 27, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPv6AddrStorageType.setStatus('current')
f3L3TrafficIPv6AddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 27, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPv6AddrRowStatus.setStatus('current')
f3L3TrafficIPv6PrefixTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 28), )
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixTable.setStatus('current')
f3L3TrafficIPv6PrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 28, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6IfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6PrefixIndex"))
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixEntry.setStatus('current')
f3L3TrafficIPv6PrefixIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 28, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixIndex.setStatus('current')
f3L3TrafficIPv6PrefixRaPrefixAdvEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 28, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixRaPrefixAdvEnabled.setStatus('current')
f3L3TrafficIPv6PrefixRaPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 28, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixRaPrefix.setStatus('current')
f3L3TrafficIPv6PrefixRaPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 28, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixRaPrefixLength.setStatus('current')
f3L3TrafficIPv6PrefixValidLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 28, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixValidLifeTime.setStatus('current')
f3L3TrafficIPv6PrefixPreferredLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 28, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixPreferredLifeTime.setStatus('current')
f3L3TrafficIPv6PrefixStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 28, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixStorageType.setStatus('current')
f3L3TrafficIPv6PrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 28, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixRowStatus.setStatus('current')
f3L3TrafficIPv6NdpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 29), )
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpTable.setStatus('current')
f3L3TrafficIPv6NdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 29, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6IfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6NdpIPv6Addr"))
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpEntry.setStatus('current')
f3L3TrafficIPv6NdpIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 29, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpIPv6Addr.setStatus('current')
f3L3TrafficIPv6NdpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 29, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpInterface.setStatus('current')
f3L3TrafficIPv6NdpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 29, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpMacAddress.setStatus('current')
f3L3TrafficIPv6NdpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 29, 1, 4), IpEntryType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpType.setStatus('current')
f3L3TrafficIPv6NdpReachabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 29, 1, 5), NdpNeighborReachabilityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpReachabilityState.setStatus('current')
f3L3TrafficIPv6NdpAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 29, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpAge.setStatus('current')
f3L3TrafficIPv6NdpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 29, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpStorageType.setStatus('current')
f3L3TrafficIPv6NdpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 29, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpRowStatus.setStatus('current')
f3L3TrafficIpv6RouteTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30), )
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteTable.setStatus('current')
f3L3TrafficIpv6RouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIpv6RouteDest"), (0, "F3-L3-MIB", "f3L3TrafficIpv6RoutePrefixLength"), (0, "F3-L3-MIB", "f3L3TrafficIpv6RouteGateway"), (0, "F3-L3-MIB", "f3L3TrafficIpv6RouteInterface"))
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteEntry.setStatus('current')
f3L3TrafficIpv6RouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteDest.setStatus('current')
f3L3TrafficIpv6RoutePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 2), Integer32())
if mibBuilder.loadTexts: f3L3TrafficIpv6RoutePrefixLength.setStatus('current')
f3L3TrafficIpv6RouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 3), Ipv6Address())
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteGateway.setStatus('current')
f3L3TrafficIpv6RouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)))
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteInterface.setStatus('current')
f3L3TrafficIpv6RouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteMetric.setStatus('current')
f3L3TrafficIpv6RouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 6), IpEntryType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteType.setStatus('current')
f3L3TrafficIpv6RouteAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteAdvertise.setStatus('current')
f3L3TrafficIpv6RouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 8), TrafficIpRouteStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteStatus.setStatus('current')
f3L3TrafficIpv6RouteFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 9), RouteFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteFlags.setStatus('current')
f3L3TrafficIpv6RouteOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 10), TrafficIpRouteOriginType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteOrigin.setStatus('current')
f3L3TrafficIpv6RouteStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 11), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteStorageType.setStatus('current')
f3L3TrafficIpv6RouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteRowStatus.setStatus('current')
f3DhcpV6RelayAgentTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 31), )
if mibBuilder.loadTexts: f3DhcpV6RelayAgentTable.setStatus('current')
f3DhcpV6RelayAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 31, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3DhcpV6RelayAgentIndex"))
if mibBuilder.loadTexts: f3DhcpV6RelayAgentEntry.setStatus('current')
f3DhcpV6RelayAgentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 31, 1, 1), Integer32())
if mibBuilder.loadTexts: f3DhcpV6RelayAgentIndex.setStatus('current')
f3DhcpV6RelayAgentAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 31, 1, 2), F3DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3DhcpV6RelayAgentAlias.setStatus('current')
f3DhcpV6RelayAgentAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 31, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3DhcpV6RelayAgentAdminState.setStatus('current')
f3DhcpV6RelayAgentSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 31, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3DhcpV6RelayAgentSecondaryState.setStatus('current')
f3DhcpV6RelayAgentOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 31, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3DhcpV6RelayAgentOperationalState.setStatus('current')
f3DhcpV6RelayAgentServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 31, 1, 6), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3DhcpV6RelayAgentServerIpAddress.setStatus('current')
f3DhcpV6RelayAgentServerIpInteface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 31, 1, 7), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3DhcpV6RelayAgentServerIpInteface.setStatus('current')
f3DhcpV6RelayAgentStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 31, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3DhcpV6RelayAgentStorageType.setStatus('current')
f3DhcpV6RelayAgentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 31, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3DhcpV6RelayAgentRowStatus.setStatus('current')
f3DhcpV6RelayAgentClientTrafficIpIfMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 32), )
if mibBuilder.loadTexts: f3DhcpV6RelayAgentClientTrafficIpIfMemberTable.setStatus('current')
f3DhcpV6RelayAgentClientTrafficIpIfMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 32, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3DhcpV6RelayAgentIndex"), (0, "F3-L3-MIB", "f3DhcpV6RelayAgentClientTrafficIpIfMemberObject"))
if mibBuilder.loadTexts: f3DhcpV6RelayAgentClientTrafficIpIfMemberEntry.setStatus('current')
f3DhcpV6RelayAgentClientTrafficIpIfMemberObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 32, 1, 1), VariablePointer())
if mibBuilder.loadTexts: f3DhcpV6RelayAgentClientTrafficIpIfMemberObject.setStatus('current')
f3DhcpV6RelayAgentClientTrafficIpIfMemberStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 32, 1, 2), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3DhcpV6RelayAgentClientTrafficIpIfMemberStorageType.setStatus('current')
f3DhcpV6RelayAgentClientTrafficIpIfMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 32, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3DhcpV6RelayAgentClientTrafficIpIfMemberRowStatus.setStatus('current')
cmL3FlowPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33), )
if mibBuilder.loadTexts: cmL3FlowPointTable.setStatus('current')
cmL3FlowPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"))
if mibBuilder.loadTexts: cmL3FlowPointEntry.setStatus('current')
cmL3FlowPointPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 1), Integer32())
if mibBuilder.loadTexts: cmL3FlowPointPortIndex.setStatus('current')
cmL3FlowPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 2), Integer32())
if mibBuilder.loadTexts: cmL3FlowPointIndex.setStatus('current')
cmL3FlowPointAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 3), F3DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointAlias.setStatus('current')
cmL3FlowPointAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointAdminState.setStatus('current')
cmL3FlowPointSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointSecondaryState.setStatus('current')
cmL3FlowPointOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 6), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointOperationalState.setStatus('current')
cmL3FlowPointMultiCOSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointMultiCOSEnabled.setStatus('current')
cmL3FlowPointCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointCOS.setStatus('current')
cmL3FlowPointUntaggedMemberShipEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointUntaggedMemberShipEnabled.setStatus('current')
cmL3FlowPointOuterTagMemberShipEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointOuterTagMemberShipEnabled.setStatus('current')
cmL3FlowPointOuterTagMemberShipVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 11), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointOuterTagMemberShipVlanId.setStatus('current')
cmL3FlowPointInnerTagMemberShipEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointInnerTagMemberShipEnabled.setStatus('current')
cmL3FlowPointInnerTagMemberShipVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 13), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointInnerTagMemberShipVlanId.setStatus('current')
cmL3FlowPointFragmentedPktsFwdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointFragmentedPktsFwdEnabled.setStatus('current')
cmL3FlowPointHCosMgmtEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointHCosMgmtEnabled.setStatus('current')
cmL3FlowPointHCosGuaranteedBwHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointHCosGuaranteedBwHi.setStatus('current')
cmL3FlowPointHCosGuaranteedBwLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointHCosGuaranteedBwLo.setStatus('current')
cmL3FlowPointHCosMaximumBwHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointHCosMaximumBwHi.setStatus('current')
cmL3FlowPointHCosMaximumBwLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointHCosMaximumBwLo.setStatus('current')
cmL3FlowPointDscpOverwriteControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointDscpOverwriteControl.setStatus('current')
cmL3FlowPointPriMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 21), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointPriMapProfile.setStatus('current')
cmL3FlowPointStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 22), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3FlowPointStorageType.setStatus('current')
cmL3FlowPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3FlowPointRowStatus.setStatus('current')
cmL3FlowPointAclNoMatchDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 24), AclNoMatchDispositionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointAclNoMatchDisposition.setStatus('current')
cmL3FlowPointWfqSegmentationCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointWfqSegmentationCOS.setStatus('current')
cmL3FlowPointWfqGroupCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointWfqGroupCOS.setStatus('current')
cmL3FlowPointWfqGroupEirLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointWfqGroupEirLo.setStatus('current')
cmL3FlowPointWfqGroupEirHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointWfqGroupEirHi.setStatus('current')
cmL3FlowPointEgressShapingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 29), ShapingType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointEgressShapingType.setStatus('current')
cmL3QosPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34), )
if mibBuilder.loadTexts: cmL3QosPolicerTable.setStatus('current')
cmL3QosPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"), (0, "F3-L3-MIB", "cmL3QosPolicerIndex"))
if mibBuilder.loadTexts: cmL3QosPolicerEntry.setStatus('current')
cmL3QosPolicerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosPolicerIndex.setStatus('current')
cmL3QosPolicerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerAdminState.setStatus('current')
cmL3QosPolicerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerOperationalState.setStatus('current')
cmL3QosPolicerSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerSecondaryState.setStatus('current')
cmL3QosPolicerCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosPolicerCIRLo.setStatus('current')
cmL3QosPolicerCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosPolicerCIRHi.setStatus('current')
cmL3QosPolicerEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosPolicerEIRLo.setStatus('current')
cmL3QosPolicerEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosPolicerEIRHi.setStatus('current')
cmL3QosPolicerCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosPolicerCBS.setStatus('current')
cmL3QosPolicerEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosPolicerEBS.setStatus('current')
cmL3QosPolicerAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 11), PolicerAlgorithmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerAlgorithm.setStatus('current')
cmL3QosPolicerColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 12), PolicerColorMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosPolicerColorMode.setStatus('current')
cmL3QosPolicerCouplingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosPolicerCouplingFlag.setStatus('current')
cmL3QosPolicerCIRMaxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerCIRMaxHi.setStatus('current')
cmL3QosPolicerCIRMaxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerCIRMaxLo.setStatus('current')
cmL3QosPolicerEIRMaxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerEIRMaxHi.setStatus('current')
cmL3QosPolicerEIRMaxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerEIRMaxLo.setStatus('current')
cmL3QosPolicerEnvelopeObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 18), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerEnvelopeObject.setStatus('current')
cmL3QosPolicerRank = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerRank.setStatus('current')
cmL3QosPolicerPolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerPolicingEnabled.setStatus('current')
cmL3QosPolicerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 21), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosPolicerStorageType.setStatus('current')
cmL3QosPolicerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosPolicerRowStatus.setStatus('current')
cmL3QosShaperTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35), )
if mibBuilder.loadTexts: cmL3QosShaperTable.setStatus('current')
cmL3QosShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"), (0, "F3-L3-MIB", "cmL3QosShaperIndex"))
if mibBuilder.loadTexts: cmL3QosShaperEntry.setStatus('current')
cmL3QosShaperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosShaperIndex.setStatus('current')
cmL3QosShaperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosShaperAdminState.setStatus('current')
cmL3QosShaperOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperOperationalState.setStatus('current')
cmL3QosShaperSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperSecondaryState.setStatus('current')
cmL3QosShaperCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosShaperCIRLo.setStatus('current')
cmL3QosShaperCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosShaperCIRHi.setStatus('current')
cmL3QosShaperEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosShaperEIRLo.setStatus('current')
cmL3QosShaperEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosShaperEIRHi.setStatus('current')
cmL3QosShaperBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosShaperBufferSize.setStatus('current')
cmL3QosShaperCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperCOS.setStatus('current')
cmL3QosShaperStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 11), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosShaperStorageType.setStatus('current')
cmL3QosShaperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosShaperRowStatus.setStatus('current')
cmL3QosShaperWfqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosShaperWfqWeight.setStatus('current')
f3L3TrafficOspfInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36), )
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceTable.setStatus('current')
f3L3TrafficOspfInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3VrfOspfRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficOspfAreaIndex"), (0, "F3-L3-MIB", "f3L3TrafficOspfInterfaceIndex"))
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceEntry.setStatus('current')
f3L3TrafficOspfInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceIndex.setStatus('current')
f3L3TrafficOspfInterfaceOspfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfCost.setStatus('current')
f3L3TrafficOspfInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 3), OspfIfType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceType.setStatus('current')
f3L3TrafficOspfInterfaceOspfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfRtrPriority.setStatus('current')
f3L3TrafficOspfInterfaceOspfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfHelloInterval.setStatus('current')
f3L3TrafficOspfInterfaceOspfDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfDeadInterval.setStatus('current')
f3L3TrafficOspfInterfaceOspfTransmitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfTransmitDelay.setStatus('current')
f3L3TrafficOspfInterfaceOspfRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfRetransmitInterval.setStatus('current')
f3L3TrafficOspfInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 9), OspfInterfaceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceState.setStatus('current')
f3L3TrafficOspfInterfaceOspfDesignatedRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfDesignatedRouterId.setStatus('current')
f3L3TrafficOspfInterfaceOspfBackupDesignatedRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfBackupDesignatedRouterId.setStatus('current')
f3L3TrafficOspfInterfaceOspfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 12), OspfAuthType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfAuthType.setStatus('current')
f3L3TrafficOspfInterfaceOspfSimpleAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfSimpleAuthKey.setStatus('current')
f3L3TrafficOspfInterfaceOspfCryptoKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 14), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfCryptoKeyId.setStatus('current')
f3L3TrafficOspfInterfaceOspfInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfInstanceId.setStatus('current')
f3L3TrafficOspfInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceId.setStatus('current')
f3L3TrafficOspfInterfaceLinkLsaSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceLinkLsaSuppression.setStatus('current')
f3L3TrafficOspfInterfacePassiveControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfacePassiveControl.setStatus('current')
f3L3TrafficOspfInterfaceAssociatedIpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 19), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceAssociatedIpInterface.setStatus('current')
f3L3TrafficOspfInterfaceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 20), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceStorageType.setStatus('current')
f3L3TrafficOspfInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceRowStatus.setStatus('current')
f3L3TrafficOspfInterfaceTilfaControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 22), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceTilfaControl.setStatus('current')
f3L3TrafficOspfInterfaceTilfaProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 23), TilfaProtectionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceTilfaProtectionType.setStatus('current')
f3L3TrafficBgpPeerAddressFamilyTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37), )
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyTable.setStatus('current')
f3L3TrafficBgpPeerAddressFamilyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpPeerIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyIndex"))
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyEntry.setStatus('current')
f3L3TrafficBgpPeerAddressFamilyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyIndex.setStatus('current')
f3L3TrafficBgpPeerAddressFamilyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 2), BgpPeerAddressFamilyNameType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyName.setStatus('current')
f3L3TrafficBgpPeerAddressFamilyRedistOspfRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyRedistOspfRoute.setStatus('current')
f3L3TrafficBgpPeerAddressFamilyRedistConnectedRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyRedistConnectedRoute.setStatus('current')
f3L3TrafficBgpPeerAddressFamilyRedistStaticRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyRedistStaticRoute.setStatus('current')
f3L3TrafficBgpPeerAddressFamilyRedistDhcpRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyRedistDhcpRoute.setStatus('current')
f3L3TrafficBgpPeerAddressFamilyRedistSlaacRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyRedistSlaacRoute.setStatus('current')
f3L3TrafficBgpPeerAddressFamilySendDefaultRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilySendDefaultRoute.setStatus('current')
f3L3TrafficBgpPeerAddressFamilyNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 9), BgpNextHopUpdateType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyNextHopType.setStatus('current')
f3L3TrafficBgpPeerAddressFamilyNextHopIpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyNextHopIpv4.setStatus('current')
f3L3TrafficBgpPeerAddressFamilyNextHopIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 11), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyNextHopIpv6.setStatus('current')
f3L3TrafficBgpPeerAddressFamilyExtNextHopControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyExtNextHopControl.setStatus('current')
f3L3TrafficBgpPeerAddressFamilyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 13), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyStorageType.setStatus('current')
f3L3TrafficBgpPeerAddressFamilyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyRowStatus.setStatus('current')
f3L3TrafficBgpRIBRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 38), )
if mibBuilder.loadTexts: f3L3TrafficBgpRIBRouteTable.setStatus('current')
f3L3TrafficBgpRIBRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 38, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpRIBRouteIndex"))
if mibBuilder.loadTexts: f3L3TrafficBgpRIBRouteEntry.setStatus('current')
f3L3TrafficBgpRIBRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 38, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L3TrafficBgpRIBRouteIndex.setStatus('current')
f3L3TrafficBgpRIBRouteNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 38, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRIBRouteNetwork.setStatus('current')
f3L3TrafficBgpRIBRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 38, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRIBRouteNextHop.setStatus('current')
f3L3TrafficBgpRIBRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 38, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRIBRouteMetric.setStatus('current')
f3L3TrafficBgpRIBRoutePath = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 38, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRIBRoutePath.setStatus('current')
f3L3TrafficBgpInRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 39), )
if mibBuilder.loadTexts: f3L3TrafficBgpInRouteTable.setStatus('current')
f3L3TrafficBgpInRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 39, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpInRouteIndex"))
if mibBuilder.loadTexts: f3L3TrafficBgpInRouteEntry.setStatus('current')
f3L3TrafficBgpInRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 39, 1, 1), Unsigned32())
if mibBuilder.loadTexts: f3L3TrafficBgpInRouteIndex.setStatus('current')
f3L3TrafficBgpInRouteNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 39, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpInRouteNetwork.setStatus('current')
f3L3TrafficBgpInRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 39, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpInRouteNextHop.setStatus('current')
f3L3TrafficBgpInRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 39, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpInRouteMetric.setStatus('current')
f3L3TrafficBgpInRoutePath = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 39, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpInRoutePath.setStatus('current')
f3L3TrafficBgpInRouteLocalPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 39, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpInRouteLocalPreference.setStatus('current')
f3L3TrafficBgpRouteV2Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 40), )
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2Table.setStatus('current')
f3L3TrafficBgpRouteV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 40, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouteV2Index"))
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2Entry.setStatus('current')
f3L3TrafficBgpRouteV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 40, 1, 1), Unsigned32())
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2Index.setStatus('current')
f3L3TrafficBgpRouteV2Network = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 40, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2Network.setStatus('current')
f3L3TrafficBgpRouteV2NextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 40, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2NextHop.setStatus('current')
f3L3TrafficBgpRouteV2Metric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 40, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2Metric.setStatus('current')
f3L3TrafficBgpRouteV2Path = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 40, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2Path.setStatus('current')
f3L3TrafficBgpRouteV2LocalPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 40, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2LocalPreference.setStatus('current')
f3L3TrafficBgpPeerAddressFamilyAdvPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 41), )
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyAdvPrefixTable.setStatus('current')
f3L3TrafficBgpPeerAddressFamilyAdvPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 41, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpPeerIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyAdvPrefix"))
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyAdvPrefixEntry.setStatus('current')
f3L3TrafficBgpPeerAddressFamilyAdvPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 41, 1, 1), DisplayString())
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyAdvPrefix.setStatus('current')
f3L3TrafficBgpPeerAddressFamilyAdvPrefixStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 41, 1, 2), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyAdvPrefixStorageType.setStatus('current')
f3L3TrafficBgpPeerAddressFamilyAdvPrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 41, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyAdvPrefixRowStatus.setStatus('current')
f3L3TrafficOspfV3NeighborTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 42), )
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborTable.setStatus('current')
f3L3TrafficOspfV3NeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 42, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3VrfOspfRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficOspfV3NeighborRouterId"), (0, "F3-L3-MIB", "f3L3TrafficOspfV3NeighborInterfaceId"))
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborEntry.setStatus('current')
f3L3TrafficOspfV3NeighborRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 42, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborRouterId.setStatus('current')
f3L3TrafficOspfV3NeighborInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 42, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborInterfaceId.setStatus('current')
f3L3TrafficOspfV3NeighborPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 42, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborPriority.setStatus('current')
f3L3TrafficOspfV3NeighborDeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 42, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborDeadTime.setStatus('current')
f3L3TrafficOspfV3NeighborLocalInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 42, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborLocalInterfaceName.setStatus('current')
f3L3TrafficOspfV3NeighborState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 42, 1, 6), OspfAdjacencyState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborState.setStatus('current')
f3L3TrafficOspfV3NeighborRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 42, 1, 7), TrafficOspfRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborRole.setStatus('current')
f3L3TrafficOspfV3NeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 42, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborIpAddress.setStatus('current')
f3L3TrafficOspfLinkLsDbTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43), )
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbTable.setStatus('current')
f3L3TrafficOspfLinkLsDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3VrfOspfRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficOspfLinkLsDbType"), (0, "F3-L3-MIB", "f3L3TrafficOspfLinkLsDbId"), (0, "F3-L3-MIB", "f3L3TrafficOspfLinkLsDbAdvRouterId"), (0, "F3-L3-MIB", "f3L3TrafficOspfLinkLsDbInterfaceId"), (0, "F3-L3-MIB", "f3L3TrafficOspfLinkLsDbInterface"))
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbEntry.setStatus('current')
f3L3TrafficOspfLinkLsDbType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 1), OspfLsaType())
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbType.setStatus('current')
f3L3TrafficOspfLinkLsDbId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 2), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbId.setStatus('current')
f3L3TrafficOspfLinkLsDbAdvRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 3), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbAdvRouterId.setStatus('current')
f3L3TrafficOspfLinkLsDbInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 4), Unsigned32())
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbInterfaceId.setStatus('current')
f3L3TrafficOspfLinkLsDbInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 5), DisplayString())
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbInterface.setStatus('current')
f3L3TrafficOspfLinkLsDbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbAreaId.setStatus('current')
f3L3TrafficOspfLinkLsDbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbChecksum.setStatus('current')
f3L3TrafficOspfLinkLsDbSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbSeqNum.setStatus('current')
f3L3TrafficOspfLinkLsDbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbAge.setStatus('current')
f3L3TrafficOspfLinkLsDbRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbRtrPriority.setStatus('current')
f3L3TrafficOspfLinkLsDbLinkLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbLinkLocalAddress.setStatus('current')
f3L3TrafficOspfLinkLsDbPrefixList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbPrefixList.setStatus('current')
f3L3TrafficIpv4StaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 44), )
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteTable.setStatus('current')
f3L3TrafficIpv4StaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 44, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIpv4StaticRouteDest"), (0, "F3-L3-MIB", "f3L3TrafficIpv4StaticRouteMask"), (0, "F3-L3-MIB", "f3L3TrafficIpv4StaticRouteNextHop"), (0, "F3-L3-MIB", "f3L3TrafficIpv4StaticRouteInterface"))
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteEntry.setStatus('current')
f3L3TrafficIpv4StaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 44, 1, 1), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteDest.setStatus('current')
f3L3TrafficIpv4StaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 44, 1, 2), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteMask.setStatus('current')
f3L3TrafficIpv4StaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 44, 1, 3), DisplayString())
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteNextHop.setStatus('current')
f3L3TrafficIpv4StaticRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 44, 1, 4), DisplayString())
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteInterface.setStatus('current')
f3L3TrafficIpv4StaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 44, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteMetric.setStatus('current')
f3L3TrafficIpv4StaticRouteSourceForwardingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 44, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteSourceForwardingEnable.setStatus('current')
f3L3TrafficIpv4StaticRouteStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 44, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteStorageType.setStatus('current')
f3L3TrafficIpv4StaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 44, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteRowStatus.setStatus('current')
f3L3TrafficIpv4AllRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45), )
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteTable.setStatus('current')
f3L3TrafficIpv4AllRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIpv4AllRouteDest"), (0, "F3-L3-MIB", "f3L3TrafficIpv4AllRouteMask"), (0, "F3-L3-MIB", "f3L3TrafficIpv4AllRouteNextHop"), (0, "F3-L3-MIB", "f3L3TrafficIpv4AllRouteInterface"), (0, "F3-L3-MIB", "f3L3TrafficIpv4AllRouteOrigin"))
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteEntry.setStatus('current')
f3L3TrafficIpv4AllRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1, 1), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteDest.setStatus('current')
f3L3TrafficIpv4AllRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1, 2), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteMask.setStatus('current')
f3L3TrafficIpv4AllRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1, 3), DisplayString())
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteNextHop.setStatus('current')
f3L3TrafficIpv4AllRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1, 4), DisplayString())
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteInterface.setStatus('current')
f3L3TrafficIpv4AllRouteOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1, 5), TrafficIpRouteOriginType())
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteOrigin.setStatus('current')
f3L3TrafficIpv4AllRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteMetric.setStatus('current')
f3L3TrafficIpv4AllRouteSourceForwardingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteSourceForwardingEnable.setStatus('current')
f3L3TrafficIpv4AllRouteAdminDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteAdminDistance.setStatus('current')
f3L3TrafficIpv4AllRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1, 9), TrafficIpRouteStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteStatus.setStatus('current')
f3L3TrafficIpv4AllRouteStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1, 10), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteStorageType.setStatus('current')
f3L3TrafficIpv4AllRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteRowStatus.setStatus('current')
f3L3TrafficIpv6StaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 46), )
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteTable.setStatus('current')
f3L3TrafficIpv6StaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 46, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIpv6StaticRouteDest"), (0, "F3-L3-MIB", "f3L3TrafficIpv6StaticRoutePrefixLength"), (0, "F3-L3-MIB", "f3L3TrafficIpv6StaticRouteNextHop"), (0, "F3-L3-MIB", "f3L3TrafficIpv6StaticRouteInterface"))
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteEntry.setStatus('current')
f3L3TrafficIpv6StaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 46, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteDest.setStatus('current')
f3L3TrafficIpv6StaticRoutePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 46, 1, 2), Integer32())
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRoutePrefixLength.setStatus('current')
f3L3TrafficIpv6StaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 46, 1, 3), DisplayString())
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteNextHop.setStatus('current')
f3L3TrafficIpv6StaticRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 46, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)))
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteInterface.setStatus('current')
f3L3TrafficIpv6StaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 46, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteMetric.setStatus('current')
f3L3TrafficIpv6StaticRouteStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 46, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteStorageType.setStatus('current')
f3L3TrafficIpv6StaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 46, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteRowStatus.setStatus('current')
f3L3TrafficIpv6AllRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47), )
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteTable.setStatus('current')
f3L3TrafficIpv6AllRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIpv6AllRouteDest"), (0, "F3-L3-MIB", "f3L3TrafficIpv6AllRoutePrefixLength"), (0, "F3-L3-MIB", "f3L3TrafficIpv6AllRouteNextHop"), (0, "F3-L3-MIB", "f3L3TrafficIpv6AllRouteInterface"), (0, "F3-L3-MIB", "f3L3TrafficIpv6AllRouteOrigin"))
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteEntry.setStatus('current')
f3L3TrafficIpv6AllRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteDest.setStatus('current')
f3L3TrafficIpv6AllRoutePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47, 1, 2), Integer32())
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRoutePrefixLength.setStatus('current')
f3L3TrafficIpv6AllRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47, 1, 3), DisplayString())
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteNextHop.setStatus('current')
f3L3TrafficIpv6AllRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)))
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteInterface.setStatus('current')
f3L3TrafficIpv6AllRouteOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47, 1, 5), TrafficIpRouteOriginType())
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteOrigin.setStatus('current')
f3L3TrafficIpv6AllRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteMetric.setStatus('current')
f3L3TrafficIpv6AllRouteAdminDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteAdminDistance.setStatus('current')
f3L3TrafficIpv6AllRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47, 1, 8), TrafficIpRouteStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteStatus.setStatus('current')
f3L3TrafficIpv6AllRouteStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47, 1, 9), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteStorageType.setStatus('current')
f3L3TrafficIpv6AllRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteRowStatus.setStatus('current')
f3IpPrefixListTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 48), )
if mibBuilder.loadTexts: f3IpPrefixListTable.setStatus('current')
f3IpPrefixListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 48, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3IpPrefixListIndex"))
if mibBuilder.loadTexts: f3IpPrefixListEntry.setStatus('current')
f3IpPrefixListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 48, 1, 1), Integer32())
if mibBuilder.loadTexts: f3IpPrefixListIndex.setStatus('current')
f3IpPrefixListName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 48, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3IpPrefixListName.setStatus('current')
f3IpPrefixListDefaultDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 48, 1, 3), IpPrefixDispositionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IpPrefixListDefaultDisposition.setStatus('current')
f3IpPrefixListStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 48, 1, 4), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3IpPrefixListStorageType.setStatus('current')
f3IpPrefixListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 48, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3IpPrefixListRowStatus.setStatus('current')
f3IpPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 49), )
if mibBuilder.loadTexts: f3IpPrefixTable.setStatus('current')
f3IpPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 49, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3IpPrefixListIndex"), (0, "F3-L3-MIB", "f3IpPrefixIndex"))
if mibBuilder.loadTexts: f3IpPrefixEntry.setStatus('current')
f3IpPrefixIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 49, 1, 1), Integer32())
if mibBuilder.loadTexts: f3IpPrefixIndex.setStatus('current')
f3IpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 49, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3IpPrefix.setStatus('current')
f3IpPrefixPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 49, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IpPrefixPriority.setStatus('current')
f3IpPrefixDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 49, 1, 4), IpPrefixDispositionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IpPrefixDisposition.setStatus('current')
f3IpPrefixLessOrEqualPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 49, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IpPrefixLessOrEqualPrefixLen.setStatus('current')
f3IpPrefixGreaterOrEqualPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 49, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IpPrefixGreaterOrEqualPrefixLen.setStatus('current')
f3IpPrefixStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 49, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3IpPrefixStorageType.setStatus('current')
f3IpPrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 49, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3IpPrefixRowStatus.setStatus('current')
f3L3TrafficIPInterfaceRAPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 50), )
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixTable.setStatus('current')
f3L3TrafficIPInterfaceRAPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 50, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPIfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPInterfaceRAPrefixIndex"))
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixEntry.setStatus('current')
f3L3TrafficIPInterfaceRAPrefixIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 50, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixIndex.setStatus('current')
f3L3TrafficIPInterfaceRAPrefixAdvertiseEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 50, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixAdvertiseEnabled.setStatus('current')
f3L3TrafficIPInterfaceRAPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 50, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefix.setStatus('current')
f3L3TrafficIPInterfaceRAPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 50, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixLength.setStatus('current')
f3L3TrafficIPInterfaceRAPrefixValidLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 50, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixValidLifeTime.setStatus('current')
f3L3TrafficIPInterfaceRAPrefixPreferredLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 50, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixPreferredLifeTime.setStatus('current')
f3L3TrafficIPInterfaceRAPrefixStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 50, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixStorageType.setStatus('current')
f3L3TrafficIPInterfaceRAPrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 50, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixRowStatus.setStatus('current')
f3L3TrafficIPInterfaceNdpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 51), )
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpTable.setStatus('current')
f3L3TrafficIPInterfaceNdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 51, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6IfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6NdpIPv6Addr"))
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpEntry.setStatus('current')
f3L3TrafficIPInterfaceNdpIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 51, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpIPv6Addr.setStatus('current')
f3L3TrafficIPInterfaceNdpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 51, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpInterface.setStatus('current')
f3L3TrafficIPInterfaceNdpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 51, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpMacAddress.setStatus('current')
f3L3TrafficIPInterfaceNdpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 51, 1, 4), IpEntryType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpType.setStatus('current')
f3L3TrafficIPInterfaceNdpReachabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 51, 1, 5), NdpNeighborReachabilityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpReachabilityState.setStatus('current')
f3L3TrafficIPInterfaceNdpAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 51, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpAge.setStatus('current')
f3L3TrafficIPInterfaceNdpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 51, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpStorageType.setStatus('current')
f3L3TrafficIPInterfaceNdpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 51, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpRowStatus.setStatus('current')
f3L3TrafficIPInterfaceIPv6AddressTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 52), )
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressTable.setStatus('current')
f3L3TrafficIPInterfaceIPv6AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 52, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPIfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPInterfaceIPv6AddressIndex"))
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressEntry.setStatus('current')
f3L3TrafficIPInterfaceIPv6AddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 52, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressIndex.setStatus('current')
f3L3TrafficIPInterfaceIPv6AddressAssignMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 52, 1, 2), Ipv6AddressAssignMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressAssignMode.setStatus('current')
f3L3TrafficIPInterfaceIPv6AddressUnicastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 52, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressUnicastAddr.setStatus('current')
f3L3TrafficIPInterfaceIPv6AddressUnicastAddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 52, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressUnicastAddrPrefixLength.setStatus('current')
f3L3TrafficIPInterfaceIPv6AddressUnicastAddrAutoGenPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 52, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressUnicastAddrAutoGenPrefix.setStatus('current')
f3L3TrafficIPInterfaceIPv6AddressStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 52, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressStorageType.setStatus('current')
f3L3TrafficIPInterfaceIPv6AddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 52, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressRowStatus.setStatus('current')
f3L3FlowPointStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1), )
if mibBuilder.loadTexts: f3L3FlowPointStatsTable.setStatus('current')
f3L3FlowPointStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3FlowPointStatsIndex"))
if mibBuilder.loadTexts: f3L3FlowPointStatsEntry.setStatus('current')
f3L3FlowPointStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsIndex.setStatus('current')
f3L3FlowPointStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsIntervalType.setStatus('current')
f3L3FlowPointStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsValid.setStatus('current')
f3L3FlowPointStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointStatsAction.setStatus('current')
f3L3FlowPointStatsFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsFMG.setStatus('current')
f3L3FlowPointStatsFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsFMY.setStatus('current')
f3L3FlowPointStatsFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsFMRD.setStatus('current')
f3L3FlowPointStatsFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsFTD.setStatus('current')
f3L3FlowPointStatsFragmentedDropAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsFragmentedDropAcl.setStatus('current')
f3L3FlowPointStatsAclRuleDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsAclRuleDrop.setStatus('current')
f3L3FlowPointStatsTtlEqual1Drop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsTtlEqual1Drop.setStatus('current')
f3L3FlowPointStatsFrameTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsFrameTx.setStatus('current')
f3L3FlowPointStatsFrameRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsFrameRx.setStatus('current')
f3L3FlowPointStatsNoRouteDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsNoRouteDrop.setStatus('current')
f3L3FlowPointStatsHopLimitDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsHopLimitDrop.setStatus('current')
f3L3FlowPointHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2), )
if mibBuilder.loadTexts: f3L3FlowPointHistoryTable.setStatus('current')
f3L3FlowPointHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3FlowPointStatsIndex"), (0, "F3-L3-MIB", "f3L3FlowPointHistoryIndex"))
if mibBuilder.loadTexts: f3L3FlowPointHistoryEntry.setStatus('current')
f3L3FlowPointHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryIndex.setStatus('current')
f3L3FlowPointHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryTime.setStatus('current')
f3L3FlowPointHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryValid.setStatus('current')
f3L3FlowPointHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointHistoryAction.setStatus('current')
f3L3FlowPointHistoryFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryFMG.setStatus('current')
f3L3FlowPointHistoryFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryFMY.setStatus('current')
f3L3FlowPointHistoryFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryFMRD.setStatus('current')
f3L3FlowPointHistoryFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryFTD.setStatus('current')
f3L3FlowPointHistoryFragmentedDropAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryFragmentedDropAcl.setStatus('current')
f3L3FlowPointHistoryAclRuleDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryAclRuleDrop.setStatus('current')
f3L3FlowPointHistoryTtlEqual1Drop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryTtlEqual1Drop.setStatus('current')
f3L3FlowPointHistoryFrameTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryFrameTx.setStatus('current')
f3L3FlowPointHistoryFrameRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryFrameRx.setStatus('current')
f3L3FlowPointHistoryNoRouteDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryNoRouteDrop.setStatus('current')
f3L3FlowPointHistoryHopLimitDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryHopLimitDrop.setStatus('current')
f3L3FlowPointThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 3), )
if mibBuilder.loadTexts: f3L3FlowPointThresholdTable.setStatus('current')
f3L3FlowPointThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3FlowPointStatsIndex"), (0, "F3-L3-MIB", "f3L3FlowPointThresholdIndex"))
if mibBuilder.loadTexts: f3L3FlowPointThresholdEntry.setStatus('current')
f3L3FlowPointThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointThresholdIndex.setStatus('current')
f3L3FlowPointThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 3, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointThresholdInterval.setStatus('current')
f3L3FlowPointThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 3, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointThresholdVariable.setStatus('current')
f3L3FlowPointThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointThresholdValueLo.setStatus('current')
f3L3FlowPointThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointThresholdValueHi.setStatus('current')
f3L3FlowPointThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointThresholdMonValue.setStatus('current')
f3L3TrafficIpInterfaceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4), )
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsTable.setStatus('current')
f3L3TrafficIpInterfaceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPIfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIpInterfaceStatsIndex"))
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsEntry.setStatus('current')
f3L3TrafficIpInterfaceStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsIndex.setStatus('current')
f3L3TrafficIpInterfaceStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsIntervalType.setStatus('current')
f3L3TrafficIpInterfaceStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsValid.setStatus('current')
f3L3TrafficIpInterfaceStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsAction.setStatus('current')
f3L3TrafficIpInterfaceStatsDhcpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsDhcpTx.setStatus('current')
f3L3TrafficIpInterfaceStatsDhcpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsDhcpRx.setStatus('current')
f3L3TrafficIpInterfaceStatsIcmpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsIcmpTx.setStatus('current')
f3L3TrafficIpInterfaceStatsIcmpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsIcmpRx.setStatus('current')
f3L3TrafficIpInterfaceStatsArpReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsArpReqTx.setStatus('current')
f3L3TrafficIpInterfaceStatsArpReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsArpReqRx.setStatus('current')
f3L3TrafficIpInterfaceStatsArpReplyTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsArpReplyTx.setStatus('current')
f3L3TrafficIpInterfaceStatsArpReplyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsArpReplyRx.setStatus('current')
f3L3TrafficIpInterfaceStatsDhcpV6Tx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsDhcpV6Tx.setStatus('current')
f3L3TrafficIpInterfaceStatsDhcpV6Rx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsDhcpV6Rx.setStatus('current')
f3L3TrafficIpInterfaceStatsIcmpV6WONdpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsIcmpV6WONdpTx.setStatus('current')
f3L3TrafficIpInterfaceStatsIcmpV6WONdpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsIcmpV6WONdpRx.setStatus('current')
f3L3TrafficIpInterfaceStatsNdpNSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpNSTx.setStatus('current')
f3L3TrafficIpInterfaceStatsNdpNSRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpNSRx.setStatus('current')
f3L3TrafficIpInterfaceStatsNdpNATx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpNATx.setStatus('current')
f3L3TrafficIpInterfaceStatsNdpNARx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpNARx.setStatus('current')
f3L3TrafficIpInterfaceStatsNdpRATx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpRATx.setStatus('current')
f3L3TrafficIpInterfaceStatsNdpRARx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpRARx.setStatus('current')
f3L3TrafficIpInterfaceStatsNdpRSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpRSTx.setStatus('current')
f3L3TrafficIpInterfaceStatsNdpRSRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpRSRx.setStatus('current')
f3L3TrafficIpInterfaceHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5), )
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryTable.setStatus('current')
f3L3TrafficIpInterfaceHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPIfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIpInterfaceStatsIndex"), (0, "F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryIndex"))
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryEntry.setStatus('current')
f3L3TrafficIpInterfaceHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryIndex.setStatus('current')
f3L3TrafficIpInterfaceHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryTime.setStatus('current')
f3L3TrafficIpInterfaceHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryValid.setStatus('current')
f3L3TrafficIpInterfaceHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryAction.setStatus('current')
f3L3TrafficIpInterfaceHistoryDhcpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryDhcpTx.setStatus('current')
f3L3TrafficIpInterfaceHistoryDhcpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryDhcpRx.setStatus('current')
f3L3TrafficIpInterfaceHistoryIcmpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryIcmpTx.setStatus('current')
f3L3TrafficIpInterfaceHistoryIcmpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryIcmpRx.setStatus('current')
f3L3TrafficIpInterfaceHistoryArpReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryArpReqTx.setStatus('current')
f3L3TrafficIpInterfaceHistoryArpReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryArpReqRx.setStatus('current')
f3L3TrafficIpInterfaceHistoryArpReplyTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryArpReplyTx.setStatus('current')
f3L3TrafficIpInterfaceHistoryArpReplyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryArpReplyRx.setStatus('current')
f3L3TrafficIpInterfaceHistoryDhcpV6Tx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryDhcpV6Tx.setStatus('current')
f3L3TrafficIpInterfaceHistoryDhcpV6Rx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryDhcpV6Rx.setStatus('current')
f3L3TrafficIpInterfaceHistoryIcmpV6WONdpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryIcmpV6WONdpTx.setStatus('current')
f3L3TrafficIpInterfaceHistoryIcmpV6WONdpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryIcmpV6WONdpRx.setStatus('current')
f3L3TrafficIpInterfaceHistoryNdpNSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpNSTx.setStatus('current')
f3L3TrafficIpInterfaceHistoryNdpNSRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpNSRx.setStatus('current')
f3L3TrafficIpInterfaceHistoryNdpNATx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpNATx.setStatus('current')
f3L3TrafficIpInterfaceHistoryNdpNARx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpNARx.setStatus('current')
f3L3TrafficIpInterfaceHistoryNdpRATx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpRATx.setStatus('current')
f3L3TrafficIpInterfaceHistoryNdpRARx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpRARx.setStatus('current')
f3L3TrafficIpInterfaceHistoryNdpRSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpRSTx.setStatus('current')
f3L3TrafficIpInterfaceHistoryNdpRSRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpRSRx.setStatus('current')
f3L3TrafficIpInterfaceThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 6), )
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdTable.setStatus('current')
f3L3TrafficIpInterfaceThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 6, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPIfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIpInterfaceStatsIndex"), (0, "F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdIndex"))
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdEntry.setStatus('current')
f3L3TrafficIpInterfaceThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdIndex.setStatus('current')
f3L3TrafficIpInterfaceThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 6, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdInterval.setStatus('current')
f3L3TrafficIpInterfaceThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 6, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdVariable.setStatus('current')
f3L3TrafficIpInterfaceThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 6, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdValueLo.setStatus('current')
f3L3TrafficIpInterfaceThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 6, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdValueHi.setStatus('current')
f3L3TrafficIpInterfaceThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdMonValue.setStatus('current')
f3L3AclRuleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 7), )
if mibBuilder.loadTexts: f3L3AclRuleStatsTable.setStatus('current')
f3L3AclRuleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3AclRuleParentIndex"), (0, "F3-L3-MIB", "f3L3AclRuleIndex"), (0, "F3-L3-MIB", "f3L3AclRuleStatsIndex"))
if mibBuilder.loadTexts: f3L3AclRuleStatsEntry.setStatus('current')
f3L3AclRuleStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleStatsIndex.setStatus('current')
f3L3AclRuleStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 7, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleStatsIntervalType.setStatus('current')
f3L3AclRuleStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 7, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleStatsValid.setStatus('current')
f3L3AclRuleStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 7, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleStatsAction.setStatus('current')
f3L3AclRuleStatsRuleMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 7, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleStatsRuleMatch.setStatus('current')
f3L3AclRuleHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 8), )
if mibBuilder.loadTexts: f3L3AclRuleHistoryTable.setStatus('current')
f3L3AclRuleHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 8, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3AclRuleParentIndex"), (0, "F3-L3-MIB", "f3L3AclRuleIndex"), (0, "F3-L3-MIB", "f3L3AclRuleStatsIndex"), (0, "F3-L3-MIB", "f3L3AclRuleHistoryIndex"))
if mibBuilder.loadTexts: f3L3AclRuleHistoryEntry.setStatus('current')
f3L3AclRuleHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleHistoryIndex.setStatus('current')
f3L3AclRuleHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 8, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleHistoryTime.setStatus('current')
f3L3AclRuleHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 8, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleHistoryValid.setStatus('current')
f3L3AclRuleHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 8, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleHistoryAction.setStatus('current')
f3L3AclRuleHistoryRuleMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 8, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleHistoryRuleMatch.setStatus('current')
f3L3AclRuleThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 9), )
if mibBuilder.loadTexts: f3L3AclRuleThresholdTable.setStatus('current')
f3L3AclRuleThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 9, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3AclRuleParentIndex"), (0, "F3-L3-MIB", "f3L3AclRuleIndex"), (0, "F3-L3-MIB", "f3L3AclRuleStatsIndex"), (0, "F3-L3-MIB", "f3L3AclRuleThresholdIndex"))
if mibBuilder.loadTexts: f3L3AclRuleThresholdEntry.setStatus('current')
f3L3AclRuleThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleThresholdIndex.setStatus('current')
f3L3AclRuleThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 9, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleThresholdInterval.setStatus('current')
f3L3AclRuleThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 9, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleThresholdVariable.setStatus('current')
f3L3AclRuleThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 9, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleThresholdValueLo.setStatus('current')
f3L3AclRuleThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 9, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleThresholdValueHi.setStatus('current')
f3L3AclRuleThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleThresholdMonValue.setStatus('current')
f3L3QosPolicerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10), )
if mibBuilder.loadTexts: f3L3QosPolicerStatsTable.setStatus('current')
f3L3QosPolicerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3QosPolicerIndex"), (0, "F3-L3-MIB", "f3L3QosPolicerStatsIndex"))
if mibBuilder.loadTexts: f3L3QosPolicerStatsEntry.setStatus('current')
f3L3QosPolicerStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerStatsIndex.setStatus('current')
f3L3QosPolicerStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerStatsIntervalType.setStatus('current')
f3L3QosPolicerStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerStatsValid.setStatus('current')
f3L3QosPolicerStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerStatsAction.setStatus('current')
f3L3QosPolicerStatsFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerStatsFMG.setStatus('current')
f3L3QosPolicerStatsFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerStatsFMY.setStatus('current')
f3L3QosPolicerStatsFMYD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerStatsFMYD.setStatus('deprecated')
f3L3QosPolicerStatsFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerStatsFMRD.setStatus('current')
f3L3QosPolicerStatsBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerStatsBytesIn.setStatus('current')
f3L3QosPolicerStatsBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerStatsBytesOut.setStatus('current')
f3L3QosPolicerStatsABR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerStatsABR.setStatus('current')
f3L3QosPolicerHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11), )
if mibBuilder.loadTexts: f3L3QosPolicerHistoryTable.setStatus('current')
f3L3QosPolicerHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3QosPolicerIndex"), (0, "F3-L3-MIB", "f3L3QosPolicerStatsIndex"), (0, "F3-L3-MIB", "f3L3QosPolicerHistoryIndex"))
if mibBuilder.loadTexts: f3L3QosPolicerHistoryEntry.setStatus('current')
f3L3QosPolicerHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerHistoryIndex.setStatus('current')
f3L3QosPolicerHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerHistoryTime.setStatus('current')
f3L3QosPolicerHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerHistoryValid.setStatus('current')
f3L3QosPolicerHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerHistoryAction.setStatus('current')
f3L3QosPolicerHistoryFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerHistoryFMG.setStatus('current')
f3L3QosPolicerHistoryFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerHistoryFMY.setStatus('current')
f3L3QosPolicerHistoryFMYD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerHistoryFMYD.setStatus('deprecated')
f3L3QosPolicerHistoryFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerHistoryFMRD.setStatus('current')
f3L3QosPolicerHistoryBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerHistoryBytesIn.setStatus('current')
f3L3QosPolicerHistoryBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerHistoryBytesOut.setStatus('current')
f3L3QosPolicerHistoryABR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerHistoryABR.setStatus('current')
f3L3QosPolicerThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 12), )
if mibBuilder.loadTexts: f3L3QosPolicerThresholdTable.setStatus('current')
f3L3QosPolicerThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 12, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3QosPolicerIndex"), (0, "F3-L3-MIB", "f3L3QosPolicerStatsIndex"), (0, "F3-L3-MIB", "f3L3QosPolicerThresholdIndex"))
if mibBuilder.loadTexts: f3L3QosPolicerThresholdEntry.setStatus('current')
f3L3QosPolicerThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerThresholdIndex.setStatus('current')
f3L3QosPolicerThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 12, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerThresholdInterval.setStatus('current')
f3L3QosPolicerThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 12, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerThresholdVariable.setStatus('current')
f3L3QosPolicerThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 12, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerThresholdValueLo.setStatus('current')
f3L3QosPolicerThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 12, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerThresholdValueHi.setStatus('current')
f3L3QosPolicerThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 12, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerThresholdMonValue.setStatus('current')
f3L3QosShaperStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13), )
if mibBuilder.loadTexts: f3L3QosShaperStatsTable.setStatus('current')
f3L3QosShaperStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3QosShaperIndex"), (0, "F3-L3-MIB", "f3L3QosShaperStatsIndex"))
if mibBuilder.loadTexts: f3L3QosShaperStatsEntry.setStatus('current')
f3L3QosShaperStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsIndex.setStatus('current')
f3L3QosShaperStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsIntervalType.setStatus('current')
f3L3QosShaperStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsValid.setStatus('current')
f3L3QosShaperStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosShaperStatsAction.setStatus('current')
f3L3QosShaperStatsBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsBT.setStatus('current')
f3L3QosShaperStatsBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsBTD.setStatus('current')
f3L3QosShaperStatsFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsFD.setStatus('current')
f3L3QosShaperStatsFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsFTD.setStatus('current')
f3L3QosShaperStatsBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsBR.setStatus('current')
f3L3QosShaperStatsFR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsFR.setStatus('current')
f3L3QosShaperStatsABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsABRRL.setStatus('current')
f3L3QosShaperStatsABRRLR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsABRRLR.setStatus('current')
f3L3QosShaperStatsBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsBREDD.setStatus('current')
f3L3QosShaperStatsFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsFREDD.setStatus('current')
f3L3QosShaperHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14), )
if mibBuilder.loadTexts: f3L3QosShaperHistoryTable.setStatus('current')
f3L3QosShaperHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3QosShaperIndex"), (0, "F3-L3-MIB", "f3L3QosShaperStatsIndex"), (0, "F3-L3-MIB", "f3L3QosShaperHistoryIndex"))
if mibBuilder.loadTexts: f3L3QosShaperHistoryEntry.setStatus('current')
f3L3QosShaperHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryIndex.setStatus('current')
f3L3QosShaperHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryTime.setStatus('current')
f3L3QosShaperHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryValid.setStatus('current')
f3L3QosShaperHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosShaperHistoryAction.setStatus('current')
f3L3QosShaperHistoryBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryBT.setStatus('current')
f3L3QosShaperHistoryBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryBTD.setStatus('current')
f3L3QosShaperHistoryFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryFD.setStatus('current')
f3L3QosShaperHistoryFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryFTD.setStatus('current')
f3L3QosShaperHistoryBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryBR.setStatus('current')
f3L3QosShaperHistoryFR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryFR.setStatus('current')
f3L3QosShaperHistoryABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryABRRL.setStatus('current')
f3L3QosShaperHistoryABRRLR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryABRRLR.setStatus('current')
f3L3QosShaperHistoryBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryBREDD.setStatus('current')
f3L3QosShaperHistoryFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryFREDD.setStatus('current')
f3L3QosShaperThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 15), )
if mibBuilder.loadTexts: f3L3QosShaperThresholdTable.setStatus('current')
f3L3QosShaperThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 15, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3QosShaperIndex"), (0, "F3-L3-MIB", "f3L3QosShaperStatsIndex"), (0, "F3-L3-MIB", "f3L3QosShaperThresholdIndex"))
if mibBuilder.loadTexts: f3L3QosShaperThresholdEntry.setStatus('current')
f3L3QosShaperThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperThresholdIndex.setStatus('current')
f3L3QosShaperThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 15, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperThresholdInterval.setStatus('current')
f3L3QosShaperThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 15, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperThresholdVariable.setStatus('current')
f3L3QosShaperThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 15, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosShaperThresholdValueLo.setStatus('current')
f3L3QosShaperThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 15, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosShaperThresholdValueHi.setStatus('current')
f3L3QosShaperThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 15, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperThresholdMonValue.setStatus('current')
f3L2A2NAclRuleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 16), )
if mibBuilder.loadTexts: f3L2A2NAclRuleStatsTable.setStatus('current')
f3L2A2NAclRuleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 16, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleParentIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleStatsIndex"))
if mibBuilder.loadTexts: f3L2A2NAclRuleStatsEntry.setStatus('current')
f3L2A2NAclRuleStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleStatsIndex.setStatus('current')
f3L2A2NAclRuleStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 16, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleStatsIntervalType.setStatus('current')
f3L2A2NAclRuleStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 16, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleStatsValid.setStatus('current')
f3L2A2NAclRuleStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 16, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleStatsAction.setStatus('current')
f3L2A2NAclRuleStatsRuleMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 16, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleStatsRuleMatch.setStatus('current')
f3L2A2NAclRuleHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 17), )
if mibBuilder.loadTexts: f3L2A2NAclRuleHistoryTable.setStatus('current')
f3L2A2NAclRuleHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 17, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleParentIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleStatsIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleHistoryIndex"))
if mibBuilder.loadTexts: f3L2A2NAclRuleHistoryEntry.setStatus('current')
f3L2A2NAclRuleHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleHistoryIndex.setStatus('current')
f3L2A2NAclRuleHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 17, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleHistoryTime.setStatus('current')
f3L2A2NAclRuleHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 17, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleHistoryValid.setStatus('current')
f3L2A2NAclRuleHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 17, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleHistoryAction.setStatus('current')
f3L2A2NAclRuleHistoryRuleMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 17, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleHistoryRuleMatch.setStatus('current')
f3L2A2NAclRuleThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 18), )
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdTable.setStatus('current')
f3L2A2NAclRuleThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 18, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleParentIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleStatsIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleThresholdIndex"))
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdEntry.setStatus('current')
f3L2A2NAclRuleThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdIndex.setStatus('current')
f3L2A2NAclRuleThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 18, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdInterval.setStatus('current')
f3L2A2NAclRuleThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 18, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdVariable.setStatus('current')
f3L2A2NAclRuleThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 18, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdValueLo.setStatus('current')
f3L2A2NAclRuleThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 18, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdValueHi.setStatus('current')
f3L2A2NAclRuleThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 18, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdMonValue.setStatus('current')
f3L2N2AAclRuleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 19), )
if mibBuilder.loadTexts: f3L2N2AAclRuleStatsTable.setStatus('current')
f3L2N2AAclRuleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 19, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleParentIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleStatsIndex"))
if mibBuilder.loadTexts: f3L2N2AAclRuleStatsEntry.setStatus('current')
f3L2N2AAclRuleStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleStatsIndex.setStatus('current')
f3L2N2AAclRuleStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 19, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleStatsIntervalType.setStatus('current')
f3L2N2AAclRuleStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 19, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleStatsValid.setStatus('current')
f3L2N2AAclRuleStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 19, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleStatsAction.setStatus('current')
f3L2N2AAclRuleStatsRuleMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 19, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleStatsRuleMatch.setStatus('current')
f3L2N2AAclRuleHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 20), )
if mibBuilder.loadTexts: f3L2N2AAclRuleHistoryTable.setStatus('current')
f3L2N2AAclRuleHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 20, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleParentIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleStatsIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleHistoryIndex"))
if mibBuilder.loadTexts: f3L2N2AAclRuleHistoryEntry.setStatus('current')
f3L2N2AAclRuleHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleHistoryIndex.setStatus('current')
f3L2N2AAclRuleHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 20, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleHistoryTime.setStatus('current')
f3L2N2AAclRuleHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 20, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleHistoryValid.setStatus('current')
f3L2N2AAclRuleHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 20, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleHistoryAction.setStatus('current')
f3L2N2AAclRuleHistoryRuleMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 20, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleHistoryRuleMatch.setStatus('current')
f3L2N2AAclRuleThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 21), )
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdTable.setStatus('current')
f3L2N2AAclRuleThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 21, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleParentIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleStatsIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleThresholdIndex"))
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdEntry.setStatus('current')
f3L2N2AAclRuleThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdIndex.setStatus('current')
f3L2N2AAclRuleThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 21, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdInterval.setStatus('current')
f3L2N2AAclRuleThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 21, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdVariable.setStatus('current')
f3L2N2AAclRuleThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 21, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdValueLo.setStatus('current')
f3L2N2AAclRuleThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 21, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdValueHi.setStatus('current')
f3L2N2AAclRuleThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 21, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdMonValue.setStatus('current')
f3L3TrafficIPv6InterfaceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22), )
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsTable.setStatus('current')
f3L3TrafficIPv6InterfaceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6IfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6InterfaceStatsIndex"))
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsEntry.setStatus('current')
f3L3TrafficIPv6InterfaceStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsIndex.setStatus('current')
f3L3TrafficIPv6InterfaceStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsIntervalType.setStatus('current')
f3L3TrafficIPv6InterfaceStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsValid.setStatus('current')
f3L3TrafficIPv6InterfaceStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsAction.setStatus('current')
f3L3TrafficIPv6InterfaceStatsDhcpV6Tx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsDhcpV6Tx.setStatus('current')
f3L3TrafficIPv6InterfaceStatsDhcpV6Rx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsDhcpV6Rx.setStatus('current')
f3L3TrafficIPv6InterfaceStatsIcmpV6WONdpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsIcmpV6WONdpTx.setStatus('current')
f3L3TrafficIPv6InterfaceStatsIcmpV6WONdpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsIcmpV6WONdpRx.setStatus('current')
f3L3TrafficIPv6InterfaceStatsNdpNSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpNSTx.setStatus('current')
f3L3TrafficIPv6InterfaceStatsNdpNSRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpNSRx.setStatus('current')
f3L3TrafficIPv6InterfaceStatsNdpNATx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpNATx.setStatus('current')
f3L3TrafficIPv6InterfaceStatsNdpNARx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpNARx.setStatus('current')
f3L3TrafficIPv6InterfaceStatsNdpRATx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpRATx.setStatus('current')
f3L3TrafficIPv6InterfaceStatsNdpRARx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpRARx.setStatus('current')
f3L3TrafficIPv6InterfaceStatsNdpRSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpRSTx.setStatus('current')
f3L3TrafficIPv6InterfaceStatsNdpRSRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpRSRx.setStatus('current')
f3L3TrafficIPv6InterfaceHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23), )
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryTable.setStatus('current')
f3L3TrafficIPv6InterfaceHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6IfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6InterfaceStatsIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6InterfaceHistoryIndex"))
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryEntry.setStatus('current')
f3L3TrafficIPv6InterfaceHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryIndex.setStatus('current')
f3L3TrafficIPv6InterfaceHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryTime.setStatus('current')
f3L3TrafficIPv6InterfaceHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryValid.setStatus('current')
f3L3TrafficIPv6InterfaceHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryAction.setStatus('current')
f3L3TrafficIPv6InterfaceHistoryDhcpV6Tx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryDhcpV6Tx.setStatus('current')
f3L3TrafficIPv6InterfaceHistoryDhcpV6Rx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryDhcpV6Rx.setStatus('current')
f3L3TrafficIPv6InterfaceHistoryIcmpV6WONdpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryIcmpV6WONdpTx.setStatus('current')
f3L3TrafficIPv6InterfaceHistoryIcmpV6WONdpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryIcmpV6WONdpRx.setStatus('current')
f3L3TrafficIPv6InterfaceHistoryNdpNSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpNSTx.setStatus('current')
f3L3TrafficIPv6InterfaceHistoryNdpNSRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpNSRx.setStatus('current')
f3L3TrafficIPv6InterfaceHistoryNdpNATx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpNATx.setStatus('current')
f3L3TrafficIPv6InterfaceHistoryNdpNARx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpNARx.setStatus('current')
f3L3TrafficIPv6InterfaceHistoryNdpRATx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpRATx.setStatus('current')
f3L3TrafficIPv6InterfaceHistoryNdpRARx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpRARx.setStatus('current')
f3L3TrafficIPv6InterfaceHistoryNdpRSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpRSTx.setStatus('current')
f3L3TrafficIPv6InterfaceHistoryNdpRSRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpRSRx.setStatus('current')
f3L3TrafficIPv6InterfaceThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 24), )
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdTable.setStatus('current')
f3L3TrafficIPv6InterfaceThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 24, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6IfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6InterfaceStatsIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6InterfaceThresholdIndex"))
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdEntry.setStatus('current')
f3L3TrafficIPv6InterfaceThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdIndex.setStatus('current')
f3L3TrafficIPv6InterfaceThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 24, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdInterval.setStatus('current')
f3L3TrafficIPv6InterfaceThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 24, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdVariable.setStatus('current')
f3L3TrafficIPv6InterfaceThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 24, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdValueLo.setStatus('current')
f3L3TrafficIPv6InterfaceThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 24, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdValueHi.setStatus('current')
f3L3TrafficIPv6InterfaceThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 24, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdMonValue.setStatus('current')
cmL3FlowPointStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25), )
if mibBuilder.loadTexts: cmL3FlowPointStatsTable.setStatus('current')
cmL3FlowPointStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"), (0, "F3-L3-MIB", "cmL3FlowPointStatsIndex"))
if mibBuilder.loadTexts: cmL3FlowPointStatsEntry.setStatus('current')
cmL3FlowPointStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsIndex.setStatus('current')
cmL3FlowPointStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsIntervalType.setStatus('current')
cmL3FlowPointStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsValid.setStatus('current')
cmL3FlowPointStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointStatsAction.setStatus('current')
cmL3FlowPointStatsFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsFMG.setStatus('current')
cmL3FlowPointStatsFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsFMY.setStatus('current')
cmL3FlowPointStatsFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsFMRD.setStatus('current')
cmL3FlowPointStatsFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsFTD.setStatus('current')
cmL3FlowPointStatsFragmentedDropAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsFragmentedDropAcl.setStatus('current')
cmL3FlowPointStatsAclRuleDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsAclRuleDrop.setStatus('current')
cmL3FlowPointStatsTtlEqual1Drop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsTtlEqual1Drop.setStatus('current')
cmL3FlowPointStatsFrameTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsFrameTx.setStatus('current')
cmL3FlowPointStatsFrameRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsFrameRx.setStatus('current')
cmL3FlowPointStatsNoRouteDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsNoRouteDrop.setStatus('current')
cmL3FlowPointStatsAclDropNoMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsAclDropNoMatch.setStatus('current')
cmL3FlowPointHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26), )
if mibBuilder.loadTexts: cmL3FlowPointHistoryTable.setStatus('current')
cmL3FlowPointHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"), (0, "F3-L3-MIB", "cmL3FlowPointStatsIndex"), (0, "F3-L3-MIB", "cmL3FlowPointHistoryIndex"))
if mibBuilder.loadTexts: cmL3FlowPointHistoryEntry.setStatus('current')
cmL3FlowPointHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryIndex.setStatus('current')
cmL3FlowPointHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryTime.setStatus('current')
cmL3FlowPointHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryValid.setStatus('current')
cmL3FlowPointHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointHistoryAction.setStatus('current')
cmL3FlowPointHistoryFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryFMG.setStatus('current')
cmL3FlowPointHistoryFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryFMY.setStatus('current')
cmL3FlowPointHistoryFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryFMRD.setStatus('current')
cmL3FlowPointHistoryFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryFTD.setStatus('current')
cmL3FlowPointHistoryFragmentedDropAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryFragmentedDropAcl.setStatus('current')
cmL3FlowPointHistoryAclRuleDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryAclRuleDrop.setStatus('current')
cmL3FlowPointHistoryTtlEqual1Drop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryTtlEqual1Drop.setStatus('current')
cmL3FlowPointHistoryFrameTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryFrameTx.setStatus('current')
cmL3FlowPointHistoryFrameRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryFrameRx.setStatus('current')
cmL3FlowPointHistoryNoRouteDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryNoRouteDrop.setStatus('current')
cmL3FlowPointHistoryAclDropNoMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryAclDropNoMatch.setStatus('current')
cmL3FlowPointThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 27), )
if mibBuilder.loadTexts: cmL3FlowPointThresholdTable.setStatus('current')
cmL3FlowPointThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 27, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"), (0, "F3-L3-MIB", "cmL3FlowPointStatsIndex"), (0, "F3-L3-MIB", "cmL3FlowPointThresholdIndex"))
if mibBuilder.loadTexts: cmL3FlowPointThresholdEntry.setStatus('current')
cmL3FlowPointThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointThresholdIndex.setStatus('current')
cmL3FlowPointThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 27, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointThresholdInterval.setStatus('current')
cmL3FlowPointThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 27, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointThresholdVariable.setStatus('current')
cmL3FlowPointThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 27, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointThresholdValueLo.setStatus('current')
cmL3FlowPointThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 27, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointThresholdValueHi.setStatus('current')
cmL3FlowPointThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 27, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointThresholdMonValue.setStatus('current')
cmL3QosPolicerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28), )
if mibBuilder.loadTexts: cmL3QosPolicerStatsTable.setStatus('current')
cmL3QosPolicerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"), (0, "F3-L3-MIB", "cmL3QosPolicerIndex"), (0, "F3-L3-MIB", "cmL3QosPolicerStatsIndex"))
if mibBuilder.loadTexts: cmL3QosPolicerStatsEntry.setStatus('current')
cmL3QosPolicerStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerStatsIndex.setStatus('current')
cmL3QosPolicerStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerStatsIntervalType.setStatus('current')
cmL3QosPolicerStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerStatsValid.setStatus('current')
cmL3QosPolicerStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerStatsAction.setStatus('current')
cmL3QosPolicerStatsFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerStatsFMG.setStatus('current')
cmL3QosPolicerStatsFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerStatsFMY.setStatus('current')
cmL3QosPolicerStatsFMYD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerStatsFMYD.setStatus('deprecated')
cmL3QosPolicerStatsFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerStatsFMRD.setStatus('current')
cmL3QosPolicerStatsBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerStatsBytesIn.setStatus('current')
cmL3QosPolicerStatsBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerStatsBytesOut.setStatus('current')
cmL3QosPolicerStatsABR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerStatsABR.setStatus('current')
cmL3QosPolicerHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29), )
if mibBuilder.loadTexts: cmL3QosPolicerHistoryTable.setStatus('current')
cmL3QosPolicerHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"), (0, "F3-L3-MIB", "cmL3QosPolicerIndex"), (0, "F3-L3-MIB", "cmL3QosPolicerStatsIndex"), (0, "F3-L3-MIB", "cmL3QosPolicerHistoryIndex"))
if mibBuilder.loadTexts: cmL3QosPolicerHistoryEntry.setStatus('current')
cmL3QosPolicerHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerHistoryIndex.setStatus('current')
cmL3QosPolicerHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerHistoryTime.setStatus('current')
cmL3QosPolicerHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerHistoryValid.setStatus('current')
cmL3QosPolicerHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerHistoryAction.setStatus('current')
cmL3QosPolicerHistoryFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerHistoryFMG.setStatus('current')
cmL3QosPolicerHistoryFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerHistoryFMY.setStatus('current')
cmL3QosPolicerHistoryFMYD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerHistoryFMYD.setStatus('deprecated')
cmL3QosPolicerHistoryFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerHistoryFMRD.setStatus('current')
cmL3QosPolicerHistoryBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerHistoryBytesIn.setStatus('current')
cmL3QosPolicerHistoryBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerHistoryBytesOut.setStatus('current')
cmL3QosPolicerHistoryABR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerHistoryABR.setStatus('current')
cmL3QosPolicerThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 30), )
if mibBuilder.loadTexts: cmL3QosPolicerThresholdTable.setStatus('current')
cmL3QosPolicerThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 30, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"), (0, "F3-L3-MIB", "cmL3QosPolicerIndex"), (0, "F3-L3-MIB", "cmL3QosPolicerStatsIndex"), (0, "F3-L3-MIB", "cmL3QosPolicerThresholdIndex"))
if mibBuilder.loadTexts: cmL3QosPolicerThresholdEntry.setStatus('current')
cmL3QosPolicerThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerThresholdIndex.setStatus('current')
cmL3QosPolicerThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 30, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerThresholdInterval.setStatus('current')
cmL3QosPolicerThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 30, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerThresholdVariable.setStatus('current')
cmL3QosPolicerThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 30, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerThresholdValueLo.setStatus('current')
cmL3QosPolicerThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 30, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerThresholdValueHi.setStatus('current')
cmL3QosPolicerThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 30, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerThresholdMonValue.setStatus('current')
cmL3QosShaperStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31), )
if mibBuilder.loadTexts: cmL3QosShaperStatsTable.setStatus('current')
cmL3QosShaperStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"), (0, "F3-L3-MIB", "cmL3QosShaperIndex"), (0, "F3-L3-MIB", "cmL3QosShaperStatsIndex"))
if mibBuilder.loadTexts: cmL3QosShaperStatsEntry.setStatus('current')
cmL3QosShaperStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsIndex.setStatus('current')
cmL3QosShaperStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsIntervalType.setStatus('current')
cmL3QosShaperStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsValid.setStatus('current')
cmL3QosShaperStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosShaperStatsAction.setStatus('current')
cmL3QosShaperStatsBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsBT.setStatus('current')
cmL3QosShaperStatsBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsBTD.setStatus('current')
cmL3QosShaperStatsFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsFD.setStatus('current')
cmL3QosShaperStatsFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsFTD.setStatus('current')
cmL3QosShaperStatsBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsBR.setStatus('current')
cmL3QosShaperStatsFR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsFR.setStatus('current')
cmL3QosShaperStatsABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsABRRL.setStatus('current')
cmL3QosShaperStatsABRRLR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsABRRLR.setStatus('current')
cmL3QosShaperStatsBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsBREDD.setStatus('current')
cmL3QosShaperStatsFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsFREDD.setStatus('current')
cmL3QosShaperHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32), )
if mibBuilder.loadTexts: cmL3QosShaperHistoryTable.setStatus('current')
cmL3QosShaperHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"), (0, "F3-L3-MIB", "cmL3QosShaperIndex"), (0, "F3-L3-MIB", "cmL3QosShaperStatsIndex"), (0, "F3-L3-MIB", "cmL3QosShaperHistoryIndex"))
if mibBuilder.loadTexts: cmL3QosShaperHistoryEntry.setStatus('current')
cmL3QosShaperHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryIndex.setStatus('current')
cmL3QosShaperHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryTime.setStatus('current')
cmL3QosShaperHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryValid.setStatus('current')
cmL3QosShaperHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosShaperHistoryAction.setStatus('current')
cmL3QosShaperHistoryBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryBT.setStatus('current')
cmL3QosShaperHistoryBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryBTD.setStatus('current')
cmL3QosShaperHistoryFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryFD.setStatus('current')
cmL3QosShaperHistoryFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryFTD.setStatus('current')
cmL3QosShaperHistoryBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryBR.setStatus('current')
cmL3QosShaperHistoryFR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryFR.setStatus('current')
cmL3QosShaperHistoryABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryABRRL.setStatus('current')
cmL3QosShaperHistoryABRRLR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryABRRLR.setStatus('current')
cmL3QosShaperHistoryBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryBREDD.setStatus('current')
cmL3QosShaperHistoryFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryFREDD.setStatus('current')
cmL3QosShaperThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 33), )
if mibBuilder.loadTexts: cmL3QosShaperThresholdTable.setStatus('current')
cmL3QosShaperThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 33, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"), (0, "F3-L3-MIB", "cmL3QosShaperIndex"), (0, "F3-L3-MIB", "cmL3QosShaperStatsIndex"), (0, "F3-L3-MIB", "cmL3QosShaperThresholdIndex"))
if mibBuilder.loadTexts: cmL3QosShaperThresholdEntry.setStatus('current')
cmL3QosShaperThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperThresholdIndex.setStatus('current')
cmL3QosShaperThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 33, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperThresholdInterval.setStatus('current')
cmL3QosShaperThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 33, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperThresholdVariable.setStatus('current')
cmL3QosShaperThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 33, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosShaperThresholdValueLo.setStatus('current')
cmL3QosShaperThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 33, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosShaperThresholdValueHi.setStatus('current')
cmL3QosShaperThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 33, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperThresholdMonValue.setStatus('current')
f3L3FlowPointThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 3, 1)).setObjects(("F3-L3-MIB", "f3L3FlowPointThresholdIndex"), ("F3-L3-MIB", "f3L3FlowPointThresholdInterval"), ("F3-L3-MIB", "f3L3FlowPointThresholdVariable"), ("F3-L3-MIB", "f3L3FlowPointThresholdValueLo"), ("F3-L3-MIB", "f3L3FlowPointThresholdValueHi"), ("F3-L3-MIB", "f3L3FlowPointThresholdMonValue"))
if mibBuilder.loadTexts: f3L3FlowPointThresholdCrossingAlert.setStatus('current')
f3L3QosPolicerThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 3, 2)).setObjects(("F3-L3-MIB", "f3L3QosPolicerThresholdIndex"), ("F3-L3-MIB", "f3L3QosPolicerThresholdInterval"), ("F3-L3-MIB", "f3L3QosPolicerThresholdVariable"), ("F3-L3-MIB", "f3L3QosPolicerThresholdValueLo"), ("F3-L3-MIB", "f3L3QosPolicerThresholdValueHi"), ("F3-L3-MIB", "f3L3QosPolicerThresholdMonValue"))
if mibBuilder.loadTexts: f3L3QosPolicerThresholdCrossingAlert.setStatus('current')
f3L3QosShaperThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 3, 3)).setObjects(("F3-L3-MIB", "f3L3QosShaperThresholdIndex"), ("F3-L3-MIB", "f3L3QosShaperThresholdInterval"), ("F3-L3-MIB", "f3L3QosShaperThresholdVariable"), ("F3-L3-MIB", "f3L3QosShaperThresholdValueLo"), ("F3-L3-MIB", "f3L3QosShaperThresholdValueHi"), ("F3-L3-MIB", "f3L3QosShaperThresholdMonValue"))
if mibBuilder.loadTexts: f3L3QosShaperThresholdCrossingAlert.setStatus('current')
f3L3TrafficIpInterfaceThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 3, 4)).setObjects(("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdIndex"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdInterval"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdVariable"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdValueLo"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdValueHi"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdMonValue"))
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdCrossingAlert.setStatus('current')
f3L3AclRuleThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 3, 5)).setObjects(("F3-L3-MIB", "f3L3AclRuleThresholdIndex"), ("F3-L3-MIB", "f3L3AclRuleThresholdInterval"), ("F3-L3-MIB", "f3L3AclRuleThresholdVariable"), ("F3-L3-MIB", "f3L3AclRuleThresholdValueLo"), ("F3-L3-MIB", "f3L3AclRuleThresholdValueHi"), ("F3-L3-MIB", "f3L3AclRuleThresholdMonValue"))
if mibBuilder.loadTexts: f3L3AclRuleThresholdCrossingAlert.setStatus('current')
f3L2A2NAclRuleThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 3, 6)).setObjects(("F3-L3-MIB", "f3L2A2NAclRuleThresholdIndex"), ("F3-L3-MIB", "f3L2A2NAclRuleThresholdInterval"), ("F3-L3-MIB", "f3L2A2NAclRuleThresholdVariable"), ("F3-L3-MIB", "f3L2A2NAclRuleThresholdValueLo"), ("F3-L3-MIB", "f3L2A2NAclRuleThresholdValueHi"), ("F3-L3-MIB", "f3L2A2NAclRuleThresholdMonValue"))
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdCrossingAlert.setStatus('current')
f3L2N2AAclRuleThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 3, 7)).setObjects(("F3-L3-MIB", "f3L2N2AAclRuleThresholdIndex"), ("F3-L3-MIB", "f3L2N2AAclRuleThresholdInterval"), ("F3-L3-MIB", "f3L2N2AAclRuleThresholdVariable"), ("F3-L3-MIB", "f3L2N2AAclRuleThresholdValueLo"), ("F3-L3-MIB", "f3L2N2AAclRuleThresholdValueHi"), ("F3-L3-MIB", "f3L2N2AAclRuleThresholdMonValue"))
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdCrossingAlert.setStatus('current')
f3L3TrafficIPv6InterfaceThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 3, 8)).setObjects(("F3-L3-MIB", "f3L3TrafficIPv6InterfaceThresholdIndex"), ("F3-L3-MIB", "f3L3TrafficIPv6InterfaceThresholdInterval"), ("F3-L3-MIB", "f3L3TrafficIPv6InterfaceThresholdVariable"), ("F3-L3-MIB", "f3L3TrafficIPv6InterfaceThresholdValueLo"), ("F3-L3-MIB", "f3L3TrafficIPv6InterfaceThresholdValueHi"), ("F3-L3-MIB", "f3L3TrafficIPv6InterfaceThresholdMonValue"))
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdCrossingAlert.setStatus('current')
cmL3FlowPointThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 5, 9)).setObjects(("F3-L3-MIB", "cmL3FlowPointThresholdIndex"), ("F3-L3-MIB", "cmL3FlowPointThresholdInterval"), ("F3-L3-MIB", "cmL3FlowPointThresholdVariable"), ("F3-L3-MIB", "cmL3FlowPointThresholdValueLo"), ("F3-L3-MIB", "cmL3FlowPointThresholdValueHi"), ("F3-L3-MIB", "cmL3FlowPointThresholdMonValue"))
if mibBuilder.loadTexts: cmL3FlowPointThresholdCrossingAlert.setStatus('current')
cmL3QosPolicerThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 5, 10)).setObjects(("F3-L3-MIB", "cmL3QosPolicerThresholdIndex"), ("F3-L3-MIB", "cmL3QosPolicerThresholdInterval"), ("F3-L3-MIB", "cmL3QosPolicerThresholdVariable"), ("F3-L3-MIB", "cmL3QosPolicerThresholdValueLo"), ("F3-L3-MIB", "cmL3QosPolicerThresholdValueHi"), ("F3-L3-MIB", "cmL3QosPolicerThresholdMonValue"))
if mibBuilder.loadTexts: cmL3QosPolicerThresholdCrossingAlert.setStatus('current')
cmL3QosShaperThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 5, 11)).setObjects(("F3-L3-MIB", "cmL3QosShaperThresholdIndex"), ("F3-L3-MIB", "cmL3QosShaperThresholdInterval"), ("F3-L3-MIB", "cmL3QosShaperThresholdVariable"), ("F3-L3-MIB", "cmL3QosShaperThresholdValueLo"), ("F3-L3-MIB", "cmL3QosShaperThresholdValueHi"), ("F3-L3-MIB", "cmL3QosShaperThresholdMonValue"))
if mibBuilder.loadTexts: cmL3QosShaperThresholdCrossingAlert.setStatus('current')
f3L3Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 4, 1))
f3L3Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 4, 2))
f3L3Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 4, 1, 1)).setObjects(("F3-L3-MIB", "f3L3ObjectsGroup"), ("F3-L3-MIB", "f3L3PerfGroup"), ("F3-L3-MIB", "f3L3TrafficOspfGroup"), ("F3-L3-MIB", "f3L3TrafficIPv6Group"), ("F3-L3-MIB", "f3L3TrafficBgpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3L3Compliance = f3L3Compliance.setStatus('current')
f3L3ObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 4, 2, 1))
for _f3L3ObjectsGroup_obj in [[("F3-L3-MIB", "f3DhcpRelayAgentIndex"), ("F3-L3-MIB", "f3DhcpRelayAgentAlias"), ("F3-L3-MIB", "f3DhcpRelayAgentAdminState"), ("F3-L3-MIB", "f3DhcpRelayAgentSecondaryState"), ("F3-L3-MIB", "f3DhcpRelayAgentOperationalState"), ("F3-L3-MIB", "f3DhcpRelayAgentIpVersion"), ("F3-L3-MIB", "f3DhcpRelayAgentServerIpAddress"), ("F3-L3-MIB", "f3DhcpRelayAgentOp82SubOp9ControlEnabled"), ("F3-L3-MIB", "f3DhcpRelayAgentOp82SubOp9Value"), ("F3-L3-MIB", "f3DhcpRelayAgentStorageType"), ("F3-L3-MIB", "f3DhcpRelayAgentRowStatus"), ("F3-L3-MIB", "f3VrfIndex"), ("F3-L3-MIB", "f3VrfAlias"), ("F3-L3-MIB", "f3VrfAdminState"), ("F3-L3-MIB", "f3VrfSecondaryState"), ("F3-L3-MIB", "f3VrfTraceRouteIpv4Destination"), ("F3-L3-MIB", "f3VrfOperationalState"), ("F3-L3-MIB", "f3VrfAccIsolationControlEnabled"), ("F3-L3-MIB", "f3VrfPingResult"), ("F3-L3-MIB", "f3VrfPingIpv4Destination"), ("F3-L3-MIB", "f3VrfTraceRouteResult"), ("F3-L3-MIB", "f3VrfAction"), ("F3-L3-MIB", "f3VrfStorageType"), ("F3-L3-MIB", "f3VrfTransportType"), ("F3-L3-MIB", "f3VrfRowStatus"), ("F3-L3-MIB", "f3VrfDhcpRoutesControl"), ("F3-L3-MIB", "f3VrfActionX"), ("F3-L3-MIB", "f3VrfActionIfName"), ("F3-L3-MIB", "f3VrfIpVersion"), ("F3-L3-MIB", "f3VrfPingIpv6Destination"), ("F3-L3-MIB", "f3VrfTraceRouteIpv6Destination"), ("F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), ("F3-L3-MIB", "f3L3FlowPointPortIndex"), ("F3-L3-MIB", "f3L3FlowPointIndex"), ("F3-L3-MIB", "f3L3FlowPointAlias"), ("F3-L3-MIB", "f3L3FlowPointAdminState"), ("F3-L3-MIB", "f3L3FlowPointSecondaryState"), ("F3-L3-MIB", "f3L3FlowPointOperationalState"), ("F3-L3-MIB", "f3L3FlowPointMultiCOSEnabled"), ("F3-L3-MIB", "f3L3FlowPointCOS"), ("F3-L3-MIB", "f3L3FlowPointUntaggedMemberShipEnabled"), ("F3-L3-MIB", "f3L3FlowPointOuterTagMemberShipEnabled"), ("F3-L3-MIB", "f3L3FlowPointOuterTagMemberShipVlanId"), ("F3-L3-MIB", "f3L3FlowPointInnerTagMemberShipEnabled"), ("F3-L3-MIB", "f3L3FlowPointInnerTagMemberShipVlanId"), ("F3-L3-MIB", "f3L3FlowPointFragmentedPktsFwdEnabled"), ("F3-L3-MIB", "f3L3FlowPointHCosMgmtEnabled"), ("F3-L3-MIB", "f3L3FlowPointHCosGuaranteedBwHi"), ("F3-L3-MIB", "f3L3FlowPointHCosGuaranteedBwLo"), ("F3-L3-MIB", "f3L3FlowPointHCosMaximumBwHi"), ("F3-L3-MIB", "f3L3FlowPointHCosMaximumBwLo"), ("F3-L3-MIB", "f3L3FlowPointPolicingEnabled"), ("F3-L3-MIB", "f3L3FlowPointStorageType"), ("F3-L3-MIB", "f3L3FlowPointRowStatus"), ("F3-L3-MIB", "f3L3FlowPointDscpOverwriteControl"), ("F3-L3-MIB", "f3L3FlowPointPriMapProfile"), ("F3-L3-MIB", "f3L3FlowPointRefConnectGuardFlow"), ("F3-L3-MIB", "f3L3FlowPointSecureState"), ("F3-L3-MIB", "f3L3FlowPointSecureBlockingEnabled"), ("F3-L3-MIB", "f3L3FlowPointWfqSegmentationCOS"), ("F3-L3-MIB", "f3L3FlowPointWfqGroupCOS"), ("F3-L3-MIB", "f3L3FlowPointWfqGroupEirLo"), ("F3-L3-MIB", "f3L3FlowPointWfqGroupEirHi"), ("F3-L3-MIB", "f3L3FlowPointOuterVlanEthertype"), ("F3-L3-MIB", "f3L3FlowPointInnerVlanEthertype"), ("F3-L3-MIB", "f3L3FlowPointIpVersion"), ("F3-L3-MIB", "f3L3AclRuleParentIndex"), ("F3-L3-MIB", "f3L3AclRuleIndex"), ("F3-L3-MIB", "f3L3AclRuleAlias"), ("F3-L3-MIB", "f3L3AclRuleSrcIpv4AddressControl"), ("F3-L3-MIB", "f3L3AclRuleDynamicSrcIpControl"), ("F3-L3-MIB", "f3L3AclRuleSrcIpv4AddressLowLimit"), ("F3-L3-MIB", "f3L3AclRuleDstIpv4AddressControl"), ("F3-L3-MIB", "f3L3AclRuleDstIpv4AddressLowLimit"), ("F3-L3-MIB", "f3L3AclRuleIpv4PriorityControl"), ("F3-L3-MIB", "f3L3AclRuleIpv4PriorityLowLimit"), ("F3-L3-MIB", "f3L3AclRuleProtocolControl"), ("F3-L3-MIB", "f3L3AclRuleProtocolNumber"), ("F3-L3-MIB", "f3L3AclRuleSrcPortControl"), ("F3-L3-MIB", "f3L3AclRuleSrcPortLowLimit"), ("F3-L3-MIB", "f3L3AclRuleSrcPortHighLimit"), ("F3-L3-MIB", "f3L3AclRuleDstPortControl"), ("F3-L3-MIB", "f3L3AclRuleDstPortLowLimit"), ("F3-L3-MIB", "f3L3AclRuleDstPortHighLimit"), ("F3-L3-MIB", "f3L3AclRulePriority"), ("F3-L3-MIB", "f3L3AclRuleCOS"), ("F3-L3-MIB", "f3L3AclRuleOperation"), ("F3-L3-MIB", "f3L3AclRuleSummary"), ("F3-L3-MIB", "f3L3AclRuleCosOverrideControl"), ("F3-L3-MIB", "f3L3AclRuleSrcMacAddressControl"), ("F3-L3-MIB", "f3L3AclRuleDynamicSrcMacAddressControl"), ("F3-L3-MIB", "f3L3AclRuleSrcMacAddress"), ("F3-L3-MIB", "f3L3AclRuleSrcMacAddressMask"), ("F3-L3-MIB", "f3L3AclRuleDstMacAddressControl"), ("F3-L3-MIB", "f3L3AclRuleDstMacAddress"), ("F3-L3-MIB", "f3L3AclRuleDstMacAddressMask"), ("F3-L3-MIB", "f3L3AclRuleOuterVlanVIDControl"), ("F3-L3-MIB", "f3L3AclRuleOuterVlanVIDLowLimit"), ("F3-L3-MIB", "f3L3AclRuleOuterVlanVIDHighLimit"), ("F3-L3-MIB", "f3L3AclRuleInnerVlanVIDControl"), ("F3-L3-MIB", "f3L3AclRuleInnerVlanVIDLowLimit"), ("F3-L3-MIB", "f3L3AclRuleInnerVlanVIDHighLimit"), ("F3-L3-MIB", "f3L3AclRuleOuterVlanPcpControl"), ("F3-L3-MIB", "f3L3AclRuleOuterVlanPcpLowLimit"), ("F3-L3-MIB", "f3L3AclRuleOuterVlanPcpHighLimit"), ("F3-L3-MIB", "f3L3AclRuleInnerVlanPcpControl"), ("F3-L3-MIB", "f3L3AclRuleInnerVlanPcpLowLimit"), ("F3-L3-MIB", "f3L3AclRuleInnerVlanPcpHighLimit"), ("F3-L3-MIB", "f3L3AclRuleOuterVlanDeiControl"), ("F3-L3-MIB", "f3L3AclRuleOuterVlanDei"), ("F3-L3-MIB", "f3L3AclRuleEtherTypeControl"), ("F3-L3-MIB", "f3L3AclRuleEtherType"), ("F3-L3-MIB", "f3L3AclRuleTcpFlagsControl"), ("F3-L3-MIB", "f3L3AclRuleTcpFlags"), ("F3-L3-MIB", "f3L3AclRuleSrcIpv4AddressHighLimit"), ("F3-L3-MIB", "f3L3AclRuleDstIpv4AddressHighLimit"), ("F3-L3-MIB", "f3L3AclRuleIpv4PriorityHighLimit"), ("F3-L3-MIB", "f3L3AclRuleStorageType"), ("F3-L3-MIB", "f3L3AclRuleRowStatus"), ("F3-L3-MIB", "f3L3AclRuleAdminState"), ("F3-L3-MIB", "f3L3AclRuleActive"), ("F3-L3-MIB", "f3L3AclRuleSrcIpV6AddressControl"), ("F3-L3-MIB", "f3L3AclRuleSrcIpV6Address"), ("F3-L3-MIB", "f3L3AclRuleSrcIpV6AddressPrefixLen"), ("F3-L3-MIB", "f3L3AclRuleDstIpV6AddressControl"), ("F3-L3-MIB", "f3L3AclRuleDstIpV6Address"), ("F3-L3-MIB", "f3L3AclRuleDstIpV6AddressPrefixLen"), ("F3-L3-MIB", "f3L3AclRuleIpV6FlowLabelControl"), ("F3-L3-MIB", "f3L3AclRuleIpV6FlowLabel"), ("F3-L3-MIB", "f3L3AclRuleIpV6FlowLabel"), ("F3-L3-MIB", "f3L3AclRulePriorityControl"), ("F3-L3-MIB", "f3L3AclRulePriorityLowLimit"), ("F3-L3-MIB", "f3L3AclRulePriorityHighLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleParentIndex"), ("F3-L3-MIB", "f3L2A2NAclRuleIndex"), ("F3-L3-MIB", "f3L2A2NAclRuleAlias"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcIpv4AddressControl"), ("F3-L3-MIB", "f3L2A2NAclRuleDynamicSrcIpControl"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcIpv4AddressLowLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleDstIpv4AddressControl"), ("F3-L3-MIB", "f3L2A2NAclRuleDstIpv4AddressLowLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleIpv4PriorityControl"), ("F3-L3-MIB", "f3L2A2NAclRuleIpv4PriorityLowLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleProtocolControl"), ("F3-L3-MIB", "f3L2A2NAclRuleProtocolNumber"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcPortControl"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcPortLowLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcPortHighLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleDstPortControl"), ("F3-L3-MIB", "f3L2A2NAclRuleDstPortLowLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleDstPortHighLimit"), ("F3-L3-MIB", "f3L2A2NAclRulePriority"), ("F3-L3-MIB", "f3L2A2NAclRuleCOS"), ("F3-L3-MIB", "f3L2A2NAclRuleOperation"), ("F3-L3-MIB", "f3L2A2NAclRuleSummary"), ("F3-L3-MIB", "f3L2A2NAclRuleCosOverrideControl"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcMacAddressControl"), ("F3-L3-MIB", "f3L2A2NAclRuleDynamicSrcMacAddressControl"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcMacAddress"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcMacAddressMask"), ("F3-L3-MIB", "f3L2A2NAclRuleDstMacAddressControl"), ("F3-L3-MIB", "f3L2A2NAclRuleDstMacAddress"), ("F3-L3-MIB", "f3L2A2NAclRuleDstMacAddressMask"), ("F3-L3-MIB", "f3L2A2NAclRuleOuterVlanVIDControl"), ("F3-L3-MIB", "f3L2A2NAclRuleOuterVlanVIDLowLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleOuterVlanVIDHighLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleInnerVlanVIDControl"), ("F3-L3-MIB", "f3L2A2NAclRuleInnerVlanVIDLowLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleInnerVlanVIDHighLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleOuterVlanPcpControl"), ("F3-L3-MIB", "f3L2A2NAclRuleOuterVlanPcpLowLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleOuterVlanPcpHighLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleInnerVlanPcpControl"), ("F3-L3-MIB", "f3L2A2NAclRuleInnerVlanPcpLowLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleInnerVlanPcpHighLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleOuterVlanDeiControl"), ("F3-L3-MIB", "f3L2A2NAclRuleOuterVlanDei"), ("F3-L3-MIB", "f3L2A2NAclRuleEtherTypeControl"), ("F3-L3-MIB", "f3L2A2NAclRuleEtherType"), ("F3-L3-MIB", "f3L2A2NAclRuleTcpFlagsControl"), ("F3-L3-MIB", "f3L2A2NAclRuleTcpFlags"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcIpv4AddressHighLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleDstIpv4AddressHighLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleIpv4PriorityHighLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleStorageType"), ("F3-L3-MIB", "f3L2A2NAclRuleRowStatus"), ("F3-L3-MIB", "f3L2A2NAclRuleAdminState"), ("F3-L3-MIB", "f3L2A2NAclRuleActive"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcIpV6AddressControl"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcIpV6Address"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcIpV6AddressPrefixLen"), ("F3-L3-MIB", "f3L2A2NAclRuleDstIpV6AddressControl"), ("F3-L3-MIB", "f3L2A2NAclRuleDstIpV6Address"), ("F3-L3-MIB", "f3L2A2NAclRuleDstIpV6AddressPrefixLen"), ("F3-L3-MIB", "f3L2A2NAclRuleIpV6FlowLabelControl"), ("F3-L3-MIB", "f3L2A2NAclRuleIpV6FlowLabel"), ("F3-L3-MIB", "f3L2N2AAclRuleParentIndex"), ("F3-L3-MIB", "f3L2N2AAclRuleIndex"), ("F3-L3-MIB", "f3L2N2AAclRuleAlias"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcIpv4AddressControl"), ("F3-L3-MIB", "f3L2N2AAclRuleDynamicSrcIpControl"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcIpv4AddressLowLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleDstIpv4AddressControl"), ("F3-L3-MIB", "f3L2N2AAclRuleDstIpv4AddressLowLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleIpv4PriorityControl"), ("F3-L3-MIB", "f3L2N2AAclRuleIpv4PriorityLowLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleProtocolControl"), ("F3-L3-MIB", "f3L2N2AAclRuleProtocolNumber"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcPortControl"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcPortLowLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcPortHighLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleDstPortControl"), ("F3-L3-MIB", "f3L2N2AAclRuleDstPortLowLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleDstPortHighLimit"), ("F3-L3-MIB", "f3L2N2AAclRulePriority"), ("F3-L3-MIB", "f3L2N2AAclRuleCOS"), ("F3-L3-MIB", "f3L2N2AAclRuleOperation"), ("F3-L3-MIB", "f3L2N2AAclRuleSummary"), ("F3-L3-MIB", "f3L2N2AAclRuleCosOverrideControl"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcMacAddressControl"), ("F3-L3-MIB", "f3L2N2AAclRuleDynamicSrcMacAddressControl"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcMacAddress"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcMacAddressMask"), ("F3-L3-MIB", "f3L2N2AAclRuleDstMacAddressControl"), ("F3-L3-MIB", "f3L2N2AAclRuleDstMacAddress"), ("F3-L3-MIB", "f3L2N2AAclRuleDstMacAddressMask"), ("F3-L3-MIB", "f3L2N2AAclRuleOuterVlanVIDControl"), ("F3-L3-MIB", "f3L2N2AAclRuleOuterVlanVIDLowLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleOuterVlanVIDHighLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleInnerVlanVIDControl"), ("F3-L3-MIB", "f3L2N2AAclRuleInnerVlanVIDLowLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleInnerVlanVIDHighLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleOuterVlanPcpControl"), ("F3-L3-MIB", "f3L2N2AAclRuleOuterVlanPcpLowLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleOuterVlanPcpHighLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleInnerVlanPcpControl"), ("F3-L3-MIB", "f3L2N2AAclRuleInnerVlanPcpLowLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleInnerVlanPcpHighLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleOuterVlanDeiControl"), ("F3-L3-MIB", "f3L2N2AAclRuleOuterVlanDei"), ("F3-L3-MIB", "f3L2N2AAclRuleEtherTypeControl"), ("F3-L3-MIB", "f3L2N2AAclRuleEtherType"), ("F3-L3-MIB", "f3L2N2AAclRuleTcpFlagsControl"), ("F3-L3-MIB", "f3L2N2AAclRuleTcpFlags"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcIpv4AddressHighLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleDstIpv4AddressHighLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleIpv4PriorityHighLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleStorageType"), ("F3-L3-MIB", "f3L2N2AAclRuleRowStatus"), ("F3-L3-MIB", "f3L2N2AAclRuleAdminState"), ("F3-L3-MIB", "f3L2N2AAclRuleActive"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcIpV6AddressControl"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcIpV6Address"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcIpV6AddressPrefixLen"), ("F3-L3-MIB", "f3L2N2AAclRuleDstIpV6AddressControl")], [("F3-L3-MIB", "f3L2N2AAclRuleDstIpV6Address"), ("F3-L3-MIB", "f3L2N2AAclRuleDstIpV6AddressPrefixLen"), ("F3-L3-MIB", "f3L3AclRuleIpV6FlowLabelControl"), ("F3-L3-MIB", "f3L3AclRuleIpV6FlowLabel"), ("F3-L3-MIB", "f3L3QosPolicerIndex"), ("F3-L3-MIB", "f3L3QosPolicerAdminState"), ("F3-L3-MIB", "f3L3QosPolicerOperationalState"), ("F3-L3-MIB", "f3L3QosPolicerSecondaryState"), ("F3-L3-MIB", "f3L3QosPolicerCIRLo"), ("F3-L3-MIB", "f3L3QosPolicerCIRHi"), ("F3-L3-MIB", "f3L3QosPolicerEIRLo"), ("F3-L3-MIB", "f3L3QosPolicerEIRHi"), ("F3-L3-MIB", "f3L3QosPolicerCBS"), ("F3-L3-MIB", "f3L3QosPolicerEBS"), ("F3-L3-MIB", "f3L3QosPolicerAlgorithm"), ("F3-L3-MIB", "f3L3QosPolicerColorMode"), ("F3-L3-MIB", "f3L3QosPolicerCouplingFlag"), ("F3-L3-MIB", "f3L3QosPolicerStorageType"), ("F3-L3-MIB", "f3L3QosPolicerRowStatus"), ("F3-L3-MIB", "f3L3QosPolicerCIRMaxHi"), ("F3-L3-MIB", "f3L3QosPolicerCIRMaxLo"), ("F3-L3-MIB", "f3L3QosPolicerEIRMaxHi"), ("F3-L3-MIB", "f3L3QosPolicerEIRMaxLo"), ("F3-L3-MIB", "f3L3QosPolicerEnvelopeObject"), ("F3-L3-MIB", "f3L3QosPolicerRank"), ("F3-L3-MIB", "f3L3QosPolicerPolicingEnabled"), ("F3-L3-MIB", "f3L3QosShaperIndex"), ("F3-L3-MIB", "f3L3QosShaperAdminState"), ("F3-L3-MIB", "f3L3QosShaperOperationalState"), ("F3-L3-MIB", "f3L3QosShaperSecondaryState"), ("F3-L3-MIB", "f3L3QosShaperCIRLo"), ("F3-L3-MIB", "f3L3QosShaperCIRHi"), ("F3-L3-MIB", "f3L3QosShaperEIRLo"), ("F3-L3-MIB", "f3L3QosShaperEIRHi"), ("F3-L3-MIB", "f3L3QosShaperBufferSize"), ("F3-L3-MIB", "f3L3QosShaperCOS"), ("F3-L3-MIB", "f3L3QosShaperWredGreenMinQueueThreshold"), ("F3-L3-MIB", "f3L3QosShaperWredGreenMaxQueueThreshold"), ("F3-L3-MIB", "f3L3QosShaperWredGreenDropProbability"), ("F3-L3-MIB", "f3L3QosShaperWredYellowMinQueueThreshold"), ("F3-L3-MIB", "f3L3QosShaperWredYellowMaxQueueThreshold"), ("F3-L3-MIB", "f3L3QosShaperWredYellowDropProbability"), ("F3-L3-MIB", "f3L3QosShaperStorageType"), ("F3-L3-MIB", "f3L3QosShaperRowStatus"), ("F3-L3-MIB", "f3L3QosShaperWfqWeight"), ("F3-L3-MIB", "f3L3TrafficIPIfIndex"), ("F3-L3-MIB", "f3L3TrafficIPIfName"), ("F3-L3-MIB", "f3L3TrafficIPIfAdminState"), ("F3-L3-MIB", "f3L3TrafficIPIfSecondaryState"), ("F3-L3-MIB", "f3L3TrafficIPIfOperationalState"), ("F3-L3-MIB", "f3L3TrafficIPIfProxyArpEnabled"), ("F3-L3-MIB", "f3L3TrafficIPIfIpAddressSourceType"), ("F3-L3-MIB", "f3L3TrafficIPIfMgmtUseEnable"), ("F3-L3-MIB", "f3L3TrafficIPIfIpAddress"), ("F3-L3-MIB", "f3L3TrafficIPIfMask"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpRelayInterfaceSide"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpRelayVendorClassiDOpt60"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpRelayVendorClassiDOpt60Control"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpRelayUserClassOpt77"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpRelayInfoOpt82Sub1"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpRelayUserClassOpt77Control"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpRelayInfoOpt82Sub1Enabled"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpRelayInfoOpt82Sub2"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpRelayInfoOpt82Sub2Enabled"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpEnabled"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpRole"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpClientIdEnabled"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpClientId"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpClassIdEnabled"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpHostNameEnabled"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpHostName"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpClientIdType"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpHostNameType"), ("F3-L3-MIB", "f3L3TrafficIPIfStorageType"), ("F3-L3-MIB", "f3L3TrafficIPIfRowStatus"), ("F3-L3-MIB", "f3L3TrafficIPIfAction"), ("F3-L3-MIB", "f3L3TrafficIPIfActionX"), ("F3-L3-MIB", "f3L3TrafficIPIfUnnumberedControl"), ("F3-L3-MIB", "f3L3TrafficIPIfBorrowedIntf"), ("F3-L3-MIB", "f3L3TrafficIPIfIpMode"), ("F3-L3-MIB", "f3L3TrafficIPIfType"), ("F3-L3-MIB", "f3L3TrafficIPIfIpv6LinkLocalAddr"), ("F3-L3-MIB", "f3L3TrafficIPIfIpv6LinkLocalAddrMode"), ("F3-L3-MIB", "f3L3TrafficIPIfIpv6StatelessAddrAutoconfigEnabled"), ("F3-L3-MIB", "f3L3TrafficIPIfDefaultGateway"), ("F3-L3-MIB", "f3L3TrafficIPIfIcmpErrorMsgRateLimit"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpv6Role"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpv6Enabled"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpRapidCommitControlEnabled"), ("F3-L3-MIB", "f3L3TrafficIPIfMaxRAInterval"), ("F3-L3-MIB", "f3L3TrafficIPIfMinRAInterval"), ("F3-L3-MIB", "f3L3TrafficIPIfRouterLifeTime"), ("F3-L3-MIB", "f3L3TrafficIPIfReachableTime"), ("F3-L3-MIB", "f3L3TrafficIPIfRaDhcpMoreConfigEnabled"), ("F3-L3-MIB", "f3L3TrafficIPIfRaManagedAddressConfigEnabled"), ("F3-L3-MIB", "f3L3TrafficIPIfRaRDNSSOptionEnabled"), ("F3-L3-MIB", "f3L3TrafficIPIfRaRDNSSLifeTime"), ("F3-L3-MIB", "f3L3TrafficIPIfRaDNSSList"), ("F3-L3-MIB", "f3L3TrafficIPIfRaDefaultRouterPreference"), ("F3-L3-MIB", "f3L3TrafficIPIfDupAddrDetectControl"), ("F3-L3-MIB", "f3L3TrafficIPIfDupAddrDetectTransmits"), ("F3-L3-MIB", "f3L3TrafficIPIfDupAddrDetectRetransTimer"), ("F3-L3-MIB", "f3L3TrafficIPIfMTU"), ("F3-L3-MIB", "f3VrfActionIfName"), ("F3-L3-MIB", "f3VrfIpVersion"), ("F3-L3-MIB", "f3VrfPingIpv6Destination"), ("F3-L3-MIB", "f3VrfTraceRouteIpv6Destination"), ("F3-L3-MIB", "f3VrfMaxFwdTableEntries"), ("F3-L3-MIB", "f3VrfFwdTableFull"), ("F3-L3-MIB", "f3VrfEcmpDistribution"), ("F3-L3-MIB", "f3VrfEcmpStaticRoutesMaximumPaths"), ("F3-L3-MIB", "f3DhcpRelayAgentTrafficIpIfMemberObject"), ("F3-L3-MIB", "f3DhcpRelayAgentTrafficIpIfMemberStorageType"), ("F3-L3-MIB", "f3DhcpRelayAgentTrafficIpIfMemberRowStatus"), ("F3-L3-MIB", "f3VrfTrafficIpIfMemberObject"), ("F3-L3-MIB", "f3VrfTrafficIpIfMemberStorageType"), ("F3-L3-MIB", "f3VrfTrafficIpIfMemberRowStatus"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteDest"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteMask"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteNextHop"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteMetric"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteInterface"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteAdvertise"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteStatus"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteStatusX"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteSourceForwardingEnable"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteFlags"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteStorageType"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteRowStatus"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteType"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteStatusX"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteOrigin"), ("F3-L3-MIB", "f3L3TrafficArpIPAddress"), ("F3-L3-MIB", "f3L3TrafficArpMacAddress"), ("F3-L3-MIB", "f3L3TrafficArpInterface"), ("F3-L3-MIB", "f3L3TrafficArpEntryType"), ("F3-L3-MIB", "f3L3TrafficArpStorageType"), ("F3-L3-MIB", "f3L3TrafficArpRowStatus"), ("F3-L3-MIB", "cmL3FlowPointPortIndex"), ("F3-L3-MIB", "cmL3FlowPointIndex"), ("F3-L3-MIB", "cmL3FlowPointAlias"), ("F3-L3-MIB", "cmL3FlowPointAdminState"), ("F3-L3-MIB", "cmL3FlowPointSecondaryState"), ("F3-L3-MIB", "cmL3FlowPointOperationalState"), ("F3-L3-MIB", "cmL3FlowPointMultiCOSEnabled"), ("F3-L3-MIB", "cmL3FlowPointCOS"), ("F3-L3-MIB", "cmL3FlowPointUntaggedMemberShipEnabled"), ("F3-L3-MIB", "cmL3FlowPointOuterTagMemberShipEnabled"), ("F3-L3-MIB", "cmL3FlowPointOuterTagMemberShipVlanId"), ("F3-L3-MIB", "cmL3FlowPointInnerTagMemberShipEnabled"), ("F3-L3-MIB", "cmL3FlowPointInnerTagMemberShipVlanId"), ("F3-L3-MIB", "cmL3FlowPointFragmentedPktsFwdEnabled"), ("F3-L3-MIB", "cmL3FlowPointHCosMgmtEnabled"), ("F3-L3-MIB", "cmL3FlowPointHCosGuaranteedBwHi"), ("F3-L3-MIB", "cmL3FlowPointHCosGuaranteedBwLo"), ("F3-L3-MIB", "cmL3FlowPointHCosMaximumBwHi"), ("F3-L3-MIB", "cmL3FlowPointHCosMaximumBwLo"), ("F3-L3-MIB", "cmL3FlowPointDscpOverwriteControl"), ("F3-L3-MIB", "cmL3FlowPointPriMapProfile"), ("F3-L3-MIB", "cmL3FlowPointStorageType"), ("F3-L3-MIB", "cmL3FlowPointRowStatus"), ("F3-L3-MIB", "cmL3FlowPointAclNoMatchDisposition"), ("F3-L3-MIB", "cmL3FlowPointWfqSegmentationCOS"), ("F3-L3-MIB", "cmL3FlowPointWfqGroupCOS"), ("F3-L3-MIB", "cmL3FlowPointWfqGroupEirLo"), ("F3-L3-MIB", "cmL3FlowPointWfqGroupEirHi"), ("F3-L3-MIB", "cmL3FlowPointEgressShapingType"), ("F3-L3-MIB", "cmL3QosPolicerIndex"), ("F3-L3-MIB", "cmL3QosPolicerAdminState"), ("F3-L3-MIB", "cmL3QosPolicerOperationalState"), ("F3-L3-MIB", "cmL3QosPolicerSecondaryState"), ("F3-L3-MIB", "cmL3QosPolicerCIRLo"), ("F3-L3-MIB", "cmL3QosPolicerCIRHi"), ("F3-L3-MIB", "cmL3QosPolicerEIRLo"), ("F3-L3-MIB", "cmL3QosPolicerEIRHi"), ("F3-L3-MIB", "cmL3QosPolicerCBS"), ("F3-L3-MIB", "cmL3QosPolicerEBS"), ("F3-L3-MIB", "cmL3QosPolicerAlgorithm"), ("F3-L3-MIB", "cmL3QosPolicerColorMode"), ("F3-L3-MIB", "cmL3QosPolicerCouplingFlag"), ("F3-L3-MIB", "cmL3QosPolicerCIRMaxHi"), ("F3-L3-MIB", "cmL3QosPolicerCIRMaxLo"), ("F3-L3-MIB", "cmL3QosPolicerEIRMaxHi"), ("F3-L3-MIB", "cmL3QosPolicerEIRMaxLo"), ("F3-L3-MIB", "cmL3QosPolicerEnvelopeObject"), ("F3-L3-MIB", "cmL3QosPolicerRank"), ("F3-L3-MIB", "cmL3QosPolicerPolicingEnabled"), ("F3-L3-MIB", "cmL3QosPolicerStorageType"), ("F3-L3-MIB", "cmL3QosPolicerRowStatus"), ("F3-L3-MIB", "cmL3QosShaperIndex"), ("F3-L3-MIB", "cmL3QosShaperAdminState"), ("F3-L3-MIB", "cmL3QosShaperOperationalState"), ("F3-L3-MIB", "cmL3QosShaperSecondaryState"), ("F3-L3-MIB", "cmL3QosShaperCIRLo"), ("F3-L3-MIB", "cmL3QosShaperCIRHi"), ("F3-L3-MIB", "cmL3QosShaperEIRLo"), ("F3-L3-MIB", "cmL3QosShaperEIRHi"), ("F3-L3-MIB", "cmL3QosShaperBufferSize"), ("F3-L3-MIB", "cmL3QosShaperCOS"), ("F3-L3-MIB", "cmL3QosShaperStorageType"), ("F3-L3-MIB", "cmL3QosShaperRowStatus"), ("F3-L3-MIB", "cmL3QosShaperWfqWeight"), ("F3-L3-MIB", "f3L3TrafficIpv4StaticRouteDest"), ("F3-L3-MIB", "f3L3TrafficIpv4StaticRouteMask"), ("F3-L3-MIB", "f3L3TrafficIpv4StaticRouteNextHop"), ("F3-L3-MIB", "f3L3TrafficIpv4StaticRouteInterface"), ("F3-L3-MIB", "f3L3TrafficIpv4StaticRouteMetric"), ("F3-L3-MIB", "f3L3TrafficIpv4StaticRouteSourceForwardingEnable"), ("F3-L3-MIB", "f3L3TrafficIpv4StaticRouteStorageType"), ("F3-L3-MIB", "f3L3TrafficIpv4StaticRouteRowStatus"), ("F3-L3-MIB", "f3L3TrafficIpv4AllRouteDest"), ("F3-L3-MIB", "f3L3TrafficIpv4AllRouteMask"), ("F3-L3-MIB", "f3L3TrafficIpv4AllRouteNextHop"), ("F3-L3-MIB", "f3L3TrafficIpv4AllRouteInterface"), ("F3-L3-MIB", "f3L3TrafficIpv4AllRouteOrigin"), ("F3-L3-MIB", "f3L3TrafficIpv4AllRouteMetric"), ("F3-L3-MIB", "f3L3TrafficIpv4AllRouteSourceForwardingEnable"), ("F3-L3-MIB", "f3L3TrafficIpv4AllRouteAdminDistance"), ("F3-L3-MIB", "f3L3TrafficIpv4AllRouteStatus"), ("F3-L3-MIB", "f3L3TrafficIpv4AllRouteStorageType"), ("F3-L3-MIB", "f3L3TrafficIpv4AllRouteRowStatus"), ("F3-L3-MIB", "f3L3TrafficIpv6StaticRouteDest"), ("F3-L3-MIB", "f3L3TrafficIpv6StaticRoutePrefixLength"), ("F3-L3-MIB", "f3L3TrafficIpv6StaticRouteNextHop"), ("F3-L3-MIB", "f3L3TrafficIpv6StaticRouteInterface"), ("F3-L3-MIB", "f3L3TrafficIpv6StaticRouteMetric"), ("F3-L3-MIB", "f3L3TrafficIpv6StaticRouteStorageType"), ("F3-L3-MIB", "f3L3TrafficIpv6StaticRouteRowStatus"), ("F3-L3-MIB", "f3L3TrafficIpv6AllRouteDest"), ("F3-L3-MIB", "f3L3TrafficIpv6AllRoutePrefixLength"), ("F3-L3-MIB", "f3L3TrafficIpv6AllRouteNextHop"), ("F3-L3-MIB", "f3L3TrafficIpv6AllRouteInterface"), ("F3-L3-MIB", "f3L3TrafficIpv6AllRouteOrigin"), ("F3-L3-MIB", "f3L3TrafficIpv6AllRouteMetric"), ("F3-L3-MIB", "f3L3TrafficIpv6AllRouteAdminDistance"), ("F3-L3-MIB", "f3L3TrafficIpv6AllRouteStatus"), ("F3-L3-MIB", "f3L3TrafficIpv6AllRouteStorageType"), ("F3-L3-MIB", "f3L3TrafficIpv6AllRouteRowStatus"), ("F3-L3-MIB", "f3IpPrefixListIndex"), ("F3-L3-MIB", "f3IpPrefixListName"), ("F3-L3-MIB", "f3IpPrefixListDefaultDisposition"), ("F3-L3-MIB", "f3IpPrefixListStorageType"), ("F3-L3-MIB", "f3IpPrefixListRowStatus"), ("F3-L3-MIB", "f3IpPrefixIndex"), ("F3-L3-MIB", "f3IpPrefix"), ("F3-L3-MIB", "f3IpPrefixPriority"), ("F3-L3-MIB", "f3IpPrefixDisposition"), ("F3-L3-MIB", "f3IpPrefixLessOrEqualPrefixLen"), ("F3-L3-MIB", "f3IpPrefixGreaterOrEqualPrefixLen"), ("F3-L3-MIB", "f3IpPrefixStorageType"), ("F3-L3-MIB", "f3IpPrefixRowStatus")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        f3L3ObjectsGroup = f3L3ObjectsGroup.setObjects(*_f3L3ObjectsGroup_obj)
    else:
        f3L3ObjectsGroup = f3L3ObjectsGroup.setObjects(*_f3L3ObjectsGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3L3ObjectsGroup = f3L3ObjectsGroup.setStatus('current')
f3L3PerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 4, 2, 2))
for _f3L3PerfGroup_obj in [[("F3-L3-MIB", "f3L3FlowPointStatsIndex"), ("F3-L3-MIB", "f3L3FlowPointStatsIntervalType"), ("F3-L3-MIB", "f3L3FlowPointStatsValid"), ("F3-L3-MIB", "f3L3FlowPointStatsAction"), ("F3-L3-MIB", "f3L3FlowPointStatsFMG"), ("F3-L3-MIB", "f3L3FlowPointStatsFMY"), ("F3-L3-MIB", "f3L3FlowPointStatsFMRD"), ("F3-L3-MIB", "f3L3FlowPointStatsFTD"), ("F3-L3-MIB", "f3L3FlowPointStatsFragmentedDropAcl"), ("F3-L3-MIB", "f3L3FlowPointStatsAclRuleDrop"), ("F3-L3-MIB", "f3L3FlowPointStatsTtlEqual1Drop"), ("F3-L3-MIB", "f3L3FlowPointStatsFrameTx"), ("F3-L3-MIB", "f3L3FlowPointStatsFrameRx"), ("F3-L3-MIB", "f3L3FlowPointStatsNoRouteDrop"), ("F3-L3-MIB", "f3L3FlowPointStatsHopLimitDrop"), ("F3-L3-MIB", "f3L3FlowPointHistoryIndex"), ("F3-L3-MIB", "f3L3FlowPointHistoryTime"), ("F3-L3-MIB", "f3L3FlowPointHistoryValid"), ("F3-L3-MIB", "f3L3FlowPointHistoryAction"), ("F3-L3-MIB", "f3L3FlowPointHistoryFMG"), ("F3-L3-MIB", "f3L3FlowPointHistoryFMY"), ("F3-L3-MIB", "f3L3FlowPointHistoryFMRD"), ("F3-L3-MIB", "f3L3FlowPointHistoryFTD"), ("F3-L3-MIB", "f3L3FlowPointHistoryFragmentedDropAcl"), ("F3-L3-MIB", "f3L3FlowPointHistoryAclRuleDrop"), ("F3-L3-MIB", "f3L3FlowPointHistoryTtlEqual1Drop"), ("F3-L3-MIB", "f3L3FlowPointHistoryFrameTx"), ("F3-L3-MIB", "f3L3FlowPointHistoryFrameRx"), ("F3-L3-MIB", "f3L3FlowPointHistoryNoRouteDrop"), ("F3-L3-MIB", "f3L3FlowPointHistoryHopLimitDrop"), ("F3-L3-MIB", "f3L3FlowPointThresholdIndex"), ("F3-L3-MIB", "f3L3FlowPointThresholdInterval"), ("F3-L3-MIB", "f3L3FlowPointThresholdVariable"), ("F3-L3-MIB", "f3L3FlowPointThresholdValueLo"), ("F3-L3-MIB", "f3L3FlowPointThresholdValueHi"), ("F3-L3-MIB", "f3L3FlowPointThresholdMonValue"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsIndex"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsIntervalType"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsValid"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsAction"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsDhcpTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsDhcpRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsIcmpTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsIcmpRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsArpReqTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsArpReqRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsArpReplyTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsArpReplyRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsDhcpV6Tx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsDhcpV6Rx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsIcmpV6WONdpTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsIcmpV6WONdpRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsNdpNSTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsNdpNSRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsNdpNATx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsNdpNARx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsNdpRATx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsNdpRARx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsNdpRSTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsNdpRSRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryIndex"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryTime"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryValid"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryAction"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryDhcpTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryDhcpRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryIcmpTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryIcmpRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryArpReqTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryArpReqRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryArpReplyTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryArpReplyRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryDhcpV6Tx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryDhcpV6Rx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryIcmpV6WONdpTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryIcmpV6WONdpRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryNdpNSTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryNdpNSRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryNdpNATx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryNdpNARx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryNdpRATx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryNdpRARx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryNdpRSTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryNdpRSRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdIndex"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdInterval"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdVariable"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdValueLo"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdValueHi"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdMonValue"), ("F3-L3-MIB", "f3L3AclRuleStatsIndex"), ("F3-L3-MIB", "f3L3AclRuleStatsIntervalType"), ("F3-L3-MIB", "f3L3AclRuleStatsValid"), ("F3-L3-MIB", "f3L3AclRuleStatsAction"), ("F3-L3-MIB", "f3L3AclRuleStatsRuleMatch"), ("F3-L3-MIB", "f3L3AclRuleHistoryIndex"), ("F3-L3-MIB", "f3L3AclRuleHistoryTime"), ("F3-L3-MIB", "f3L3AclRuleHistoryValid"), ("F3-L3-MIB", "f3L3AclRuleHistoryAction"), ("F3-L3-MIB", "f3L3AclRuleHistoryRuleMatch"), ("F3-L3-MIB", "f3L3AclRuleThresholdIndex"), ("F3-L3-MIB", "f3L3AclRuleThresholdInterval"), ("F3-L3-MIB", "f3L3AclRuleThresholdVariable"), ("F3-L3-MIB", "f3L3AclRuleThresholdValueLo"), ("F3-L3-MIB", "f3L3AclRuleThresholdValueHi"), ("F3-L3-MIB", "f3L3AclRuleThresholdMonValue"), ("F3-L3-MIB", "f3L2A2NAclRuleStatsIndex"), ("F3-L3-MIB", "f3L2A2NAclRuleStatsIntervalType"), ("F3-L3-MIB", "f3L2A2NAclRuleStatsValid"), ("F3-L3-MIB", "f3L2A2NAclRuleStatsAction"), ("F3-L3-MIB", "f3L2A2NAclRuleStatsRuleMatch"), ("F3-L3-MIB", "f3L2A2NAclRuleHistoryIndex"), ("F3-L3-MIB", "f3L2A2NAclRuleHistoryTime"), ("F3-L3-MIB", "f3L2A2NAclRuleHistoryValid"), ("F3-L3-MIB", "f3L2A2NAclRuleHistoryAction"), ("F3-L3-MIB", "f3L2A2NAclRuleHistoryRuleMatch"), ("F3-L3-MIB", "f3L2A2NAclRuleThresholdIndex"), ("F3-L3-MIB", "f3L2A2NAclRuleThresholdInterval"), ("F3-L3-MIB", "f3L2A2NAclRuleThresholdVariable"), ("F3-L3-MIB", "f3L2A2NAclRuleThresholdValueLo"), ("F3-L3-MIB", "f3L2A2NAclRuleThresholdValueHi"), ("F3-L3-MIB", "f3L2A2NAclRuleThresholdMonValue"), ("F3-L3-MIB", "f3L2N2AAclRuleStatsIndex"), ("F3-L3-MIB", "f3L2N2AAclRuleStatsIntervalType"), ("F3-L3-MIB", "f3L2N2AAclRuleStatsValid"), ("F3-L3-MIB", "f3L2N2AAclRuleStatsAction"), ("F3-L3-MIB", "f3L2N2AAclRuleStatsRuleMatch"), ("F3-L3-MIB", "f3L2N2AAclRuleHistoryIndex"), ("F3-L3-MIB", "f3L2N2AAclRuleHistoryTime"), ("F3-L3-MIB", "f3L2N2AAclRuleHistoryValid"), ("F3-L3-MIB", "f3L2N2AAclRuleHistoryAction"), ("F3-L3-MIB", "f3L2N2AAclRuleHistoryRuleMatch"), ("F3-L3-MIB", "f3L2N2AAclRuleThresholdIndex"), ("F3-L3-MIB", "f3L2N2AAclRuleThresholdInterval"), ("F3-L3-MIB", "f3L2N2AAclRuleThresholdVariable"), ("F3-L3-MIB", "f3L2N2AAclRuleThresholdValueLo"), ("F3-L3-MIB", "f3L2N2AAclRuleThresholdValueHi"), ("F3-L3-MIB", "f3L2N2AAclRuleThresholdMonValue"), ("F3-L3-MIB", "f3L3QosPolicerStatsIndex"), ("F3-L3-MIB", "f3L3QosPolicerStatsIntervalType"), ("F3-L3-MIB", "f3L3QosPolicerStatsValid"), ("F3-L3-MIB", "f3L3QosPolicerStatsAction"), ("F3-L3-MIB", "f3L3QosPolicerStatsFMG"), ("F3-L3-MIB", "f3L3QosPolicerStatsFMY"), ("F3-L3-MIB", "f3L3QosPolicerStatsFMYD"), ("F3-L3-MIB", "f3L3QosPolicerStatsFMRD"), ("F3-L3-MIB", "f3L3QosPolicerStatsBytesIn"), ("F3-L3-MIB", "f3L3QosPolicerStatsBytesOut"), ("F3-L3-MIB", "f3L3QosPolicerStatsABR"), ("F3-L3-MIB", "f3L3QosPolicerHistoryIndex"), ("F3-L3-MIB", "f3L3QosPolicerHistoryTime"), ("F3-L3-MIB", "f3L3QosPolicerHistoryValid"), ("F3-L3-MIB", "f3L3QosPolicerHistoryAction"), ("F3-L3-MIB", "f3L3QosPolicerHistoryFMG"), ("F3-L3-MIB", "f3L3QosPolicerHistoryFMY"), ("F3-L3-MIB", "f3L3QosPolicerHistoryFMYD"), ("F3-L3-MIB", "f3L3QosPolicerHistoryFMRD"), ("F3-L3-MIB", "f3L3QosPolicerHistoryBytesIn"), ("F3-L3-MIB", "f3L3QosPolicerHistoryBytesOut"), ("F3-L3-MIB", "f3L3QosPolicerHistoryABR"), ("F3-L3-MIB", "f3L3QosPolicerThresholdIndex"), ("F3-L3-MIB", "f3L3QosPolicerThresholdInterval"), ("F3-L3-MIB", "f3L3QosPolicerThresholdVariable"), ("F3-L3-MIB", "f3L3QosPolicerThresholdValueLo"), ("F3-L3-MIB", "f3L3QosPolicerThresholdValueHi"), ("F3-L3-MIB", "f3L3QosPolicerThresholdMonValue"), ("F3-L3-MIB", "f3L3QosShaperStatsIndex"), ("F3-L3-MIB", "f3L3QosShaperStatsIntervalType"), ("F3-L3-MIB", "f3L3QosShaperStatsValid"), ("F3-L3-MIB", "f3L3QosShaperStatsAction"), ("F3-L3-MIB", "f3L3QosShaperStatsBT"), ("F3-L3-MIB", "f3L3QosShaperStatsBTD"), ("F3-L3-MIB", "f3L3QosShaperStatsFD"), ("F3-L3-MIB", "f3L3QosShaperStatsFTD"), ("F3-L3-MIB", "f3L3QosShaperStatsBR"), ("F3-L3-MIB", "f3L3QosShaperStatsFR"), ("F3-L3-MIB", "f3L3QosShaperStatsABRRL"), ("F3-L3-MIB", "f3L3QosShaperStatsBREDD"), ("F3-L3-MIB", "f3L3QosShaperStatsFREDD"), ("F3-L3-MIB", "f3L3QosShaperHistoryIndex"), ("F3-L3-MIB", "f3L3QosShaperHistoryTime"), ("F3-L3-MIB", "f3L3QosShaperHistoryValid"), ("F3-L3-MIB", "f3L3QosShaperHistoryAction"), ("F3-L3-MIB", "f3L3QosShaperHistoryBT"), ("F3-L3-MIB", "f3L3QosShaperHistoryBTD"), ("F3-L3-MIB", "f3L3QosShaperHistoryFD"), ("F3-L3-MIB", "f3L3QosShaperHistoryFTD"), ("F3-L3-MIB", "f3L3QosShaperHistoryBR"), ("F3-L3-MIB", "f3L3QosShaperHistoryFR"), ("F3-L3-MIB", "f3L3QosShaperHistoryABRRL"), ("F3-L3-MIB", "f3L3QosShaperHistoryBREDD"), ("F3-L3-MIB", "f3L3QosShaperHistoryFREDD"), ("F3-L3-MIB", "f3L3QosShaperThresholdIndex"), ("F3-L3-MIB", "f3L3QosShaperThresholdInterval"), ("F3-L3-MIB", "f3L3QosShaperThresholdVariable"), ("F3-L3-MIB", "f3L3QosShaperThresholdValueLo"), ("F3-L3-MIB", "f3L3QosShaperThresholdValueHi"), ("F3-L3-MIB", "f3L3QosShaperThresholdMonValue"), ("F3-L3-MIB", "cmL3FlowPointStatsIndex"), ("F3-L3-MIB", "cmL3FlowPointStatsIntervalType"), ("F3-L3-MIB", "cmL3FlowPointStatsValid"), ("F3-L3-MIB", "cmL3FlowPointStatsAction"), ("F3-L3-MIB", "cmL3FlowPointStatsFMG"), ("F3-L3-MIB", "cmL3FlowPointStatsFMY"), ("F3-L3-MIB", "cmL3FlowPointStatsFMRD"), ("F3-L3-MIB", "cmL3FlowPointStatsFTD"), ("F3-L3-MIB", "cmL3FlowPointStatsFragmentedDropAcl"), ("F3-L3-MIB", "cmL3FlowPointStatsAclRuleDrop"), ("F3-L3-MIB", "cmL3FlowPointStatsTtlEqual1Drop"), ("F3-L3-MIB", "cmL3FlowPointStatsFrameTx"), ("F3-L3-MIB", "cmL3FlowPointStatsFrameRx"), ("F3-L3-MIB", "cmL3FlowPointStatsNoRouteDrop"), ("F3-L3-MIB", "cmL3FlowPointStatsAclDropNoMatch"), ("F3-L3-MIB", "cmL3FlowPointHistoryIndex"), ("F3-L3-MIB", "cmL3FlowPointHistoryTime"), ("F3-L3-MIB", "cmL3FlowPointHistoryValid"), ("F3-L3-MIB", "cmL3FlowPointHistoryAction"), ("F3-L3-MIB", "cmL3FlowPointHistoryFMG"), ("F3-L3-MIB", "cmL3FlowPointHistoryFMY"), ("F3-L3-MIB", "cmL3FlowPointHistoryFMRD"), ("F3-L3-MIB", "cmL3FlowPointHistoryFTD"), ("F3-L3-MIB", "cmL3FlowPointHistoryFragmentedDropAcl"), ("F3-L3-MIB", "cmL3FlowPointHistoryAclRuleDrop"), ("F3-L3-MIB", "cmL3FlowPointHistoryTtlEqual1Drop"), ("F3-L3-MIB", "cmL3FlowPointHistoryFrameTx"), ("F3-L3-MIB", "cmL3FlowPointHistoryFrameRx"), ("F3-L3-MIB", "cmL3FlowPointHistoryNoRouteDrop"), ("F3-L3-MIB", "cmL3FlowPointHistoryAclDropNoMatch"), ("F3-L3-MIB", "cmL3FlowPointThresholdIndex"), ("F3-L3-MIB", "cmL3FlowPointThresholdInterval"), ("F3-L3-MIB", "cmL3FlowPointThresholdVariable"), ("F3-L3-MIB", "cmL3FlowPointThresholdValueLo"), ("F3-L3-MIB", "cmL3FlowPointThresholdValueHi"), ("F3-L3-MIB", "cmL3FlowPointThresholdMonValue"), ("F3-L3-MIB", "cmL3QosPolicerStatsIndex"), ("F3-L3-MIB", "cmL3QosPolicerStatsIntervalType"), ("F3-L3-MIB", "cmL3QosPolicerStatsValid"), ("F3-L3-MIB", "cmL3QosPolicerStatsAction"), ("F3-L3-MIB", "cmL3QosPolicerStatsFMG"), ("F3-L3-MIB", "cmL3QosPolicerStatsFMY"), ("F3-L3-MIB", "cmL3QosPolicerStatsFMYD"), ("F3-L3-MIB", "cmL3QosPolicerStatsFMRD"), ("F3-L3-MIB", "cmL3QosPolicerStatsBytesIn"), ("F3-L3-MIB", "cmL3QosPolicerStatsBytesOut"), ("F3-L3-MIB", "cmL3QosPolicerStatsABR"), ("F3-L3-MIB", "cmL3QosPolicerHistoryIndex"), ("F3-L3-MIB", "cmL3QosPolicerHistoryTime"), ("F3-L3-MIB", "cmL3QosPolicerHistoryValid"), ("F3-L3-MIB", "cmL3QosPolicerHistoryAction"), ("F3-L3-MIB", "cmL3QosPolicerHistoryFMG"), ("F3-L3-MIB", "cmL3QosPolicerHistoryFMY"), ("F3-L3-MIB", "cmL3QosPolicerHistoryFMYD"), ("F3-L3-MIB", "cmL3QosPolicerHistoryFMRD"), ("F3-L3-MIB", "cmL3QosPolicerHistoryBytesIn"), ("F3-L3-MIB", "cmL3QosPolicerHistoryBytesOut")], [("F3-L3-MIB", "cmL3QosPolicerHistoryABR"), ("F3-L3-MIB", "cmL3QosPolicerThresholdIndex"), ("F3-L3-MIB", "cmL3QosPolicerThresholdInterval"), ("F3-L3-MIB", "cmL3QosPolicerThresholdVariable"), ("F3-L3-MIB", "cmL3QosPolicerThresholdValueLo"), ("F3-L3-MIB", "cmL3QosPolicerThresholdValueHi"), ("F3-L3-MIB", "cmL3QosPolicerThresholdMonValue"), ("F3-L3-MIB", "cmL3QosShaperStatsIndex"), ("F3-L3-MIB", "cmL3QosShaperStatsIntervalType"), ("F3-L3-MIB", "cmL3QosShaperStatsValid"), ("F3-L3-MIB", "cmL3QosShaperStatsAction"), ("F3-L3-MIB", "cmL3QosShaperStatsBT"), ("F3-L3-MIB", "cmL3QosShaperStatsBTD"), ("F3-L3-MIB", "cmL3QosShaperStatsFD"), ("F3-L3-MIB", "cmL3QosShaperStatsFTD"), ("F3-L3-MIB", "cmL3QosShaperStatsBR"), ("F3-L3-MIB", "cmL3QosShaperStatsFR"), ("F3-L3-MIB", "cmL3QosShaperStatsABRRL"), ("F3-L3-MIB", "cmL3QosShaperStatsABRRLR"), ("F3-L3-MIB", "cmL3QosShaperStatsBREDD"), ("F3-L3-MIB", "cmL3QosShaperStatsFREDD"), ("F3-L3-MIB", "cmL3QosShaperHistoryFTD"), ("F3-L3-MIB", "cmL3QosShaperHistoryBR"), ("F3-L3-MIB", "cmL3QosShaperHistoryFR"), ("F3-L3-MIB", "cmL3QosShaperHistoryABRRL"), ("F3-L3-MIB", "cmL3QosShaperHistoryABRRLR"), ("F3-L3-MIB", "cmL3QosShaperHistoryBREDD"), ("F3-L3-MIB", "cmL3QosShaperHistoryFREDD"), ("F3-L3-MIB", "cmL3QosShaperThresholdIndex"), ("F3-L3-MIB", "cmL3QosShaperThresholdInterval"), ("F3-L3-MIB", "cmL3QosShaperThresholdVariable"), ("F3-L3-MIB", "cmL3QosShaperThresholdValueLo"), ("F3-L3-MIB", "cmL3QosShaperThresholdValueHi"), ("F3-L3-MIB", "cmL3QosShaperThresholdMonValue")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        f3L3PerfGroup = f3L3PerfGroup.setObjects(*_f3L3PerfGroup_obj)
    else:
        f3L3PerfGroup = f3L3PerfGroup.setObjects(*_f3L3PerfGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3L3PerfGroup = f3L3PerfGroup.setStatus('current')
f3L3TrafficOspfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 4, 2, 3)).setObjects(("F3-L3-MIB", "f3VrfOspfRouterIndex"), ("F3-L3-MIB", "f3VrfOspfRouterAdminState"), ("F3-L3-MIB", "f3VrfOspfRouterSecondaryState"), ("F3-L3-MIB", "f3VrfOspfRouterOperationalState"), ("F3-L3-MIB", "f3VrfOspfRouterId"), ("F3-L3-MIB", "f3VrfOspfRouterDescription"), ("F3-L3-MIB", "f3VrfOspfRouterBgpRoutesRedistributeToOspf"), ("F3-L3-MIB", "f3VrfOspfRouterBgpRoutesMetricType"), ("F3-L3-MIB", "f3VrfOspfRouterBgpRoutesMetric"), ("F3-L3-MIB", "f3VrfOspfRouterStaticRoutesRedistributeToOspf"), ("F3-L3-MIB", "f3VrfOspfRouterStaticRoutesMetricType"), ("F3-L3-MIB", "f3VrfOspfRouterStaticRoutesMetric"), ("F3-L3-MIB", "f3VrfOspfRouterConnectedRoutesRedistributeToOspf"), ("F3-L3-MIB", "f3VrfOspfRouterConnectedRoutesMetricType"), ("F3-L3-MIB", "f3VrfOspfRouterConnectedRoutesMetric"), ("F3-L3-MIB", "f3VrfOspfRouterDhcpRoutesRedistributeToOspf"), ("F3-L3-MIB", "f3VrfOspfRouterDhcpRoutesMetricType"), ("F3-L3-MIB", "f3VrfOspfRouterDhcpRoutesMetric"), ("F3-L3-MIB", "f3VrfOspfRouterStorageType"), ("F3-L3-MIB", "f3VrfOspfRouterRowStatus"), ("F3-L3-MIB", "f3VrfOspfRouterAction"), ("F3-L3-MIB", "f3VrfOspfRouterVersion"), ("F3-L3-MIB", "f3VrfOspfRouterAdministrativeDistance"), ("F3-L3-MIB", "f3VrfOspfRouterSlaacRoutesRedistributeToOspf"), ("F3-L3-MIB", "f3VrfOspfRouterSlaacRoutesMetricType"), ("F3-L3-MIB", "f3VrfOspfRouterSlaacRoutesMetric"), ("F3-L3-MIB", "f3VrfOspfRouterEcmpMaximumPaths"), ("F3-L3-MIB", "f3VrfOspfRouterSrControl"), ("F3-L3-MIB", "f3VrfOspfRouterConvergenceTime"), ("F3-L3-MIB", "f3L3TrafficOspfAreaIndex"), ("F3-L3-MIB", "f3L3TrafficOspfAreaType"), ("F3-L3-MIB", "f3L3TrafficOspfAreaDefaultCost"), ("F3-L3-MIB", "f3L3TrafficOspfAreaId"), ("F3-L3-MIB", "f3L3TrafficOspfAreaStorageType"), ("F3-L3-MIB", "f3L3TrafficOspfAreaRowStatus"), ("F3-L3-MIB", "f3L3TrafficOspfAreaAuthType"), ("F3-L3-MIB", "f3L3TrafficOspfAreaSimpleAuthKey"), ("F3-L3-MIB", "f3L3TrafficOspfAreaCryptoKeyId"), ("F3-L3-MIB", "f3L3TrafficOspfAreaIfMemberObject"), ("F3-L3-MIB", "f3L3TrafficOspfAreaIfMemberStorageType"), ("F3-L3-MIB", "f3L3TrafficOspfAreaIfMemberRowStatus"), ("F3-L3-MIB", "f3VrfLoopbackInterfaceIndex"), ("F3-L3-MIB", "f3VrfLoopbackInterfaceName"), ("F3-L3-MIB", "f3VrfLoopbackInterfaceIpAddress"), ("F3-L3-MIB", "f3VrfLoopbackInterfaceNetMask"), ("F3-L3-MIB", "f3VrfLoopbackInterfaceCIRLo"), ("F3-L3-MIB", "f3VrfLoopbackInterfaceCIRHi"), ("F3-L3-MIB", "f3VrfLoopbackInterfaceStorageType"), ("F3-L3-MIB", "f3VrfLoopbackInterfaceRowStatus"), ("F3-L3-MIB", "f3VrfLoopbackInterfaceIpMode"), ("F3-L3-MIB", "f3VrfLoopbackInterfaceIpv6Address"), ("F3-L3-MIB", "f3VrfLoopbackInterfaceIpv6AddrPrefixLen"), ("F3-L3-MIB", "f3L3TrafficOspfAsLsDbType"), ("F3-L3-MIB", "f3L3TrafficOspfAsLsDbId"), ("F3-L3-MIB", "f3L3TrafficOspfAsLsDbRouterId"), ("F3-L3-MIB", "f3L3TrafficOspfAsLsDbChecksum"), ("F3-L3-MIB", "f3L3TrafficOspfAsLsDbSeqNum"), ("F3-L3-MIB", "f3L3TrafficOspfAsLsDbAge"), ("F3-L3-MIB", "f3L3TrafficOspfLsDbType"), ("F3-L3-MIB", "f3L3TrafficOspfLsDbId"), ("F3-L3-MIB", "f3L3TrafficOspfLsDbRouterId"), ("F3-L3-MIB", "f3L3TrafficOspfLsDbAreaId"), ("F3-L3-MIB", "f3L3TrafficOspfLsDbChecksum"), ("F3-L3-MIB", "f3L3TrafficOspfLsDbSeqNum"), ("F3-L3-MIB", "f3L3TrafficOspfLsDbAge"), ("F3-L3-MIB", "f3L3TrafficOspfNeighborIpAddress"), ("F3-L3-MIB", "f3L3TrafficOspfNeighborInterface"), ("F3-L3-MIB", "f3L3TrafficOspfNeighborRouterId"), ("F3-L3-MIB", "f3L3TrafficOspfNeighborState"), ("F3-L3-MIB", "f3L3TrafficOspfNeighborRole"), ("F3-L3-MIB", "f3L3TrafficOspfNeighborPriority"), ("F3-L3-MIB", "f3L3TrafficOspfNeighborDeadTime"), ("F3-L3-MIB", "f3L3TrafficOspfNeighborLocalInterfaceName"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfAreaId"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfCost"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfIfType"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfRtrPriority"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfHelloInterval"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfDeadInterval"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfTransmitDelay"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfRetransmitInterval"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfState"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfDesignatedRouterId"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfBackupDesignatedRouterId"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfAuthType"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfSimpleAuthKey"), ("F3-L3-MIB", "f3L3TrafficIPIfospfCryptoKeyId"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceIndex"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfCost"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceType"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfRtrPriority"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfHelloInterval"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfDeadInterval"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfTransmitDelay"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfRetransmitInterval"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceState"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfDesignatedRouterId"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfBackupDesignatedRouterId"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfAuthType"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfSimpleAuthKey"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfCryptoKeyId"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfInstanceId"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceId"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceLinkLsaSuppression"), ("F3-L3-MIB", "f3L3TrafficOspfInterfacePassiveControl"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceAssociatedIpInterface"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceStorageType"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceRowStatus"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceTilfaControl"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceTilfaProtectionType"), ("F3-L3-MIB", "f3L3TrafficOspfV3NeighborRouterId"), ("F3-L3-MIB", "f3L3TrafficOspfV3NeighborInterfaceId"), ("F3-L3-MIB", "f3L3TrafficOspfV3NeighborPriority"), ("F3-L3-MIB", "f3L3TrafficOspfV3NeighborDeadTime"), ("F3-L3-MIB", "f3L3TrafficOspfV3NeighborLocalInterfaceName"), ("F3-L3-MIB", "f3L3TrafficOspfV3NeighborState"), ("F3-L3-MIB", "f3L3TrafficOspfV3NeighborRole"), ("F3-L3-MIB", "f3L3TrafficOspfV3NeighborIpAddress"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbInterfaceId"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbInterface"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbType"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbId"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbAdvRouterId"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbAreaId"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbChecksum"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbSeqNum"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbAge"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbRtrPriority"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbLinkLocalAddress"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbPrefixList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3L3TrafficOspfGroup = f3L3TrafficOspfGroup.setStatus('current')
f3L3TrafficIPv6Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 4, 2, 4)).setObjects(("F3-L3-MIB", "f3L3TrafficIPv6IfIndex"), ("F3-L3-MIB", "f3L3TrafficIPv6IfName"), ("F3-L3-MIB", "f3L3TrafficIPv6IfAdminState"), ("F3-L3-MIB", "f3L3TrafficIPv6IfSecondaryState"), ("F3-L3-MIB", "f3L3TrafficIPv6IfOperationalState"), ("F3-L3-MIB", "f3L3TrafficIPv6IfType"), ("F3-L3-MIB", "f3L3TrafficIPv6IfLinkLocalAddr"), ("F3-L3-MIB", "f3L3TrafficIPv6IfLinkLocalAddrMode"), ("F3-L3-MIB", "f3L3TrafficIPv6IfMtu"), ("F3-L3-MIB", "f3L3TrafficIPv6IfStatelessAddrAutoconfigEnabled"), ("F3-L3-MIB", "f3L3TrafficIPv6IfDefaultGateway"), ("F3-L3-MIB", "f3L3TrafficIPv6IfIcmpErrorMsgRateLimit"), ("F3-L3-MIB", "f3L3TrafficIPv6IfDhcpRole"), ("F3-L3-MIB", "f3L3TrafficIPv6IfDhcpEnabled"), ("F3-L3-MIB", "f3L3TrafficIPv6IfDhcpRapidCommitControlEnabled"), ("F3-L3-MIB", "f3L3TrafficIPv6IfMaxRAInterval"), ("F3-L3-MIB", "f3L3TrafficIPv6IfMinRAInterval"), ("F3-L3-MIB", "f3L3TrafficIPv6IfRouterLifeTime"), ("F3-L3-MIB", "f3L3TrafficIPv6IfReachableTime"), ("F3-L3-MIB", "f3L3TrafficIPv6IfRaDhcpMoreConfigEnabled"), ("F3-L3-MIB", "f3L3TrafficIPv6IfRaManagedAddressConfigEnabled"), ("F3-L3-MIB", "f3L3TrafficIPv6IfRaRDNSSOptionEnabled"), ("F3-L3-MIB", "f3L3TrafficIPv6IfRaRDNSSLifeTime"), ("F3-L3-MIB", "f3L3TrafficIPv6IfRaDNSSList"), ("F3-L3-MIB", "f3L3TrafficIPv6IfRaDefaultRouterPreference"), ("F3-L3-MIB", "f3L3TrafficIPv6IfDupAddrDetectControl"), ("F3-L3-MIB", "f3L3TrafficIPv6IfDupAddrDetectTransmits"), ("F3-L3-MIB", "f3L3TrafficIPv6IfDupAddrDetectRetransTimer"), ("F3-L3-MIB", "f3L3TrafficIPv6IfStorageType"), ("F3-L3-MIB", "f3L3TrafficIPv6IfRowStatus"), ("F3-L3-MIB", "f3L3TrafficIPv6IfAction"), ("F3-L3-MIB", "f3L3TrafficIPv6AddrIndex"), ("F3-L3-MIB", "f3L3TrafficIPv6AddrAssignMode"), ("F3-L3-MIB", "f3L3TrafficIPv6AddrUnicastAddr"), ("F3-L3-MIB", "f3L3TrafficIPv6AddrUnicastAddrPrefixLength"), ("F3-L3-MIB", "f3L3TrafficIPv6AddrUnicastAddrAutoGenPrefix"), ("F3-L3-MIB", "f3L3TrafficIPv6AddrStorageType"), ("F3-L3-MIB", "f3L3TrafficIPv6AddrRowStatus"), ("F3-L3-MIB", "f3L3TrafficIPv6PrefixIndex"), ("F3-L3-MIB", "f3L3TrafficIPv6PrefixRaPrefixAdvEnabled"), ("F3-L3-MIB", "f3L3TrafficIPv6PrefixRaPrefix"), ("F3-L3-MIB", "f3L3TrafficIPv6PrefixRaPrefixLength"), ("F3-L3-MIB", "f3L3TrafficIPv6PrefixValidLifeTime"), ("F3-L3-MIB", "f3L3TrafficIPv6PrefixPreferredLifeTime"), ("F3-L3-MIB", "f3L3TrafficIPv6PrefixStorageType"), ("F3-L3-MIB", "f3L3TrafficIPv6PrefixRowStatus"), ("F3-L3-MIB", "f3L3TrafficIPv6NdpIPv6Addr"), ("F3-L3-MIB", "f3L3TrafficIPv6NdpInterface"), ("F3-L3-MIB", "f3L3TrafficIPv6NdpMacAddress"), ("F3-L3-MIB", "f3L3TrafficIPv6NdpType"), ("F3-L3-MIB", "f3L3TrafficIPv6NdpReachabilityState"), ("F3-L3-MIB", "f3L3TrafficIPv6NdpAge"), ("F3-L3-MIB", "f3L3TrafficIPv6NdpStorageType"), ("F3-L3-MIB", "f3L3TrafficIPv6NdpRowStatus"), ("F3-L3-MIB", "f3L3TrafficIpv6RouteDest"), ("F3-L3-MIB", "f3L3TrafficIpv6RoutePrefixLength"), ("F3-L3-MIB", "f3L3TrafficIpv6RouteGateway"), ("F3-L3-MIB", "f3L3TrafficIpv6RouteInterface"), ("F3-L3-MIB", "f3L3TrafficIpv6RouteMetric"), ("F3-L3-MIB", "f3L3TrafficIpv6RouteType"), ("F3-L3-MIB", "f3L3TrafficIpv6RouteAdvertise"), ("F3-L3-MIB", "f3L3TrafficIpv6RouteStatus"), ("F3-L3-MIB", "f3L3TrafficIpv6RouteFlags"), ("F3-L3-MIB", "f3L3TrafficIpv6RouteOrigin"), ("F3-L3-MIB", "f3L3TrafficIpv6RouteStorageType"), ("F3-L3-MIB", "f3L3TrafficIpv6RouteRowStatus"), ("F3-L3-MIB", "f3DhcpV6RelayAgentIndex"), ("F3-L3-MIB", "f3DhcpV6RelayAgentAlias"), ("F3-L3-MIB", "f3DhcpV6RelayAgentAdminState"), ("F3-L3-MIB", "f3DhcpV6RelayAgentSecondaryState"), ("F3-L3-MIB", "f3DhcpV6RelayAgentOperationalState"), ("F3-L3-MIB", "f3DhcpV6RelayAgentServerIpAddress"), ("F3-L3-MIB", "f3DhcpV6RelayAgentServerIpInteface"), ("F3-L3-MIB", "f3DhcpV6RelayAgentStorageType"), ("F3-L3-MIB", "f3DhcpV6RelayAgentRowStatus"), ("F3-L3-MIB", "f3DhcpV6RelayAgentClientTrafficIpIfMemberObject"), ("F3-L3-MIB", "f3DhcpV6RelayAgentClientTrafficIpIfMemberStorageType"), ("F3-L3-MIB", "f3DhcpV6RelayAgentClientTrafficIpIfMemberRowStatus"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceIPv6AddressIndex"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceIPv6AddressAssignMode"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceIPv6AddressUnicastAddr"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceIPv6AddressUnicastAddrPrefixLength"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceIPv6AddressUnicastAddrAutoGenPrefix"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceIPv6AddressStorageType"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceIPv6AddressRowStatus"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceRAPrefixIndex"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceRAPrefixAdvertiseEnabled"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceRAPrefix"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceRAPrefixLength"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceRAPrefixValidLifeTime"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceRAPrefixPreferredLifeTime"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceRAPrefixStorageType"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceRAPrefixRowStatus"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceNdpIPv6Addr"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceNdpInterface"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceNdpMacAddress"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceNdpType"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceNdpReachabilityState"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceNdpAge"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceNdpStorageType"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceNdpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3L3TrafficIPv6Group = f3L3TrafficIPv6Group.setStatus('current')
f3L3TrafficBgpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 4, 2, 5)).setObjects(("F3-L3-MIB", "f3L3TrafficBgpRouterIndex"), ("F3-L3-MIB", "f3L3TrafficBgpRouterAdminState"), ("F3-L3-MIB", "f3L3TrafficBgpRouterSecondaryState"), ("F3-L3-MIB", "f3L3TrafficBgpRouterOperationalState"), ("F3-L3-MIB", "f3L3TrafficBgpRouterId"), ("F3-L3-MIB", "f3L3TrafficBgpRouterAsNumber"), ("F3-L3-MIB", "f3L3TrafficBgpRouterConnectedRoutesRedistControl"), ("F3-L3-MIB", "f3L3TrafficBgpRouterOspfRoutesRedistControl"), ("F3-L3-MIB", "f3L3TrafficBgpRouterStaticRoutesRedistControl"), ("F3-L3-MIB", "f3L3TrafficBgpRouterDhcpRoutesRedistControl"), ("F3-L3-MIB", "f3L3TrafficBgpRouterStorageType"), ("F3-L3-MIB", "f3L3TrafficBgpRouterRowStatus"), ("F3-L3-MIB", "f3L3TrafficBgpRouterAction"), ("F3-L3-MIB", "f3L3TrafficBgpRouterIBgpAdminDistance"), ("F3-L3-MIB", "f3L3TrafficBgpRouterEBgpAdminDistance"), ("F3-L3-MIB", "f3L3TrafficBgpRouterEcmpMaximumPaths"), ("F3-L3-MIB", "f3L3TrafficBgpRouterRestartTime"), ("F3-L3-MIB", "f3L3TrafficBgpRouterStaleRoutesTime"), ("F3-L3-MIB", "f3L3TrafficBgpRouteNetwork"), ("F3-L3-MIB", "f3L3TrafficBgpRouteMetric"), ("F3-L3-MIB", "f3L3TrafficBgpRouteNextHop"), ("F3-L3-MIB", "f3L3TrafficBgpRoutePath"), ("F3-L3-MIB", "f3L3TrafficBgpPeerIndex"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAdminState"), ("F3-L3-MIB", "f3L3TrafficBgpPeerSecondaryState"), ("F3-L3-MIB", "f3L3TrafficBgpPeerOperationalState"), ("F3-L3-MIB", "f3L3TrafficBgpPeerIpv4Addr"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAsNumber"), ("F3-L3-MIB", "f3L3TrafficBgpPeerDescription"), ("F3-L3-MIB", "f3L3TrafficBgpPeerBgpSessionState"), ("F3-L3-MIB", "f3L3TrafficBgpPeerHoldTime"), ("F3-L3-MIB", "f3L3TrafficBgpPeerStartupHoldTime"), ("F3-L3-MIB", "f3L3TrafficBgpPeerKeepAliveTime"), ("F3-L3-MIB", "f3L3TrafficBgpPeerConnectRetryTime"), ("F3-L3-MIB", "f3L3TrafficBgpPeerUpdateSourceIp"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAuthenticationKey"), ("F3-L3-MIB", "f3L3TrafficBgpPeerTimeSinceUpTransition"), ("F3-L3-MIB", "f3L3TrafficBgpPeerTimeSinceDownTransition"), ("F3-L3-MIB", "f3L3TrafficBgpPeerStorageType"), ("F3-L3-MIB", "f3L3TrafficBgpPeerRowStatus"), ("F3-L3-MIB", "f3L3TrafficBgpPeerIpVersion"), ("F3-L3-MIB", "f3L3TrafficBgpPeerIpv6Address"), ("F3-L3-MIB", "f3L3TrafficBgpPeerUpdateSourceIpv6"), ("F3-L3-MIB", "f3L3TrafficBgpPeerMultihopControl"), ("F3-L3-MIB", "f3L3TrafficBgpPeerMultihopTtl"), ("F3-L3-MIB", "f3L3TrafficBgpPeerUpdateSourceInterface"), ("F3-L3-MIB", "f3L3TrafficBgpPeerUpdateSourceType"), ("F3-L3-MIB", "f3L3TrafficBgpPeerLocalPreference"), ("F3-L3-MIB", "f3L3TrafficBgpPeerRouteReflectorClient"), ("F3-L3-MIB", "f3L3TrafficBgpPeerRouteReflectorClusterId"), ("F3-L3-MIB", "f3L3TrafficBgpPeerBgpRouteInboundFilter"), ("F3-L3-MIB", "f3L3TrafficBgpPeerBgpRouteOutboundFilter"), ("F3-L3-MIB", "f3L3TrafficBgpPeerBgpGracefulRestart"), ("F3-L3-MIB", "f3L3TrafficBgpPeerPeerRestartTime"), ("F3-L3-MIB", "f3L3TrafficBgpPeerPeerRestarting"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyIndex"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyName"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyRedistOspfRoute"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyRedistConnectedRoute"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyRedistStaticRoute"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyRedistDhcpRoute"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyRedistSlaacRoute"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilySendDefaultRoute"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyNextHopType"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyNextHopIpv4"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyNextHopIpv6"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyExtNextHopControl"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyStorageType"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyRowStatus"), ("F3-L3-MIB", "f3L3TrafficBgpRIBRouteIndex"), ("F3-L3-MIB", "f3L3TrafficBgpRIBRouteNetwork"), ("F3-L3-MIB", "f3L3TrafficBgpRIBRouteNextHop"), ("F3-L3-MIB", "f3L3TrafficBgpRIBRouteMetric"), ("F3-L3-MIB", "f3L3TrafficBgpRIBRoutePath"), ("F3-L3-MIB", "f3L3TrafficBgpRouteV2Network"), ("F3-L3-MIB", "f3L3TrafficBgpRouteV2NextHop"), ("F3-L3-MIB", "f3L3TrafficBgpRouteV2Metric"), ("F3-L3-MIB", "f3L3TrafficBgpRouteV2Path"), ("F3-L3-MIB", "f3L3TrafficBgpRouteV2LocalPreference"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyAdvPrefix"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyAdvPrefixStorageType"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyAdvPrefixRowStatus"), ("F3-L3-MIB", "f3L3TrafficBgpInRouteIndex"), ("F3-L3-MIB", "f3L3TrafficBgpInRouteNetwork"), ("F3-L3-MIB", "f3L3TrafficBgpInRouteNextHop"), ("F3-L3-MIB", "f3L3TrafficBgpInRouteMetric"), ("F3-L3-MIB", "f3L3TrafficBgpInRoutePath"), ("F3-L3-MIB", "f3L3TrafficBgpInRouteLocalPreference"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3L3TrafficBgpGroup = f3L3TrafficBgpGroup.setStatus('current')
mibBuilder.exportSymbols("F3-L3-MIB", f3L2A2NAclRuleOuterVlanPcpControl=f3L2A2NAclRuleOuterVlanPcpControl, AclRuleL2Side=AclRuleL2Side, f3L3AclRuleCOS=f3L3AclRuleCOS, f3L3TrafficIPv6InterfaceHistoryValid=f3L3TrafficIPv6InterfaceHistoryValid, f3L3TrafficIPv6InterfaceHistoryNdpRSRx=f3L3TrafficIPv6InterfaceHistoryNdpRSRx, f3L3TrafficIpInterfaceStatsNdpRARx=f3L3TrafficIpInterfaceStatsNdpRARx, f3L2N2AAclRuleSrcMacAddressControl=f3L2N2AAclRuleSrcMacAddressControl, f3L3QosPolicerHistoryIndex=f3L3QosPolicerHistoryIndex, f3L3FlowPointHCosGuaranteedBwHi=f3L3FlowPointHCosGuaranteedBwHi, f3L3TrafficIPInterfaceIPv6AddressEntry=f3L3TrafficIPInterfaceIPv6AddressEntry, f3L3TrafficIPv6NdpReachabilityState=f3L3TrafficIPv6NdpReachabilityState, f3L2N2AAclRuleThresholdCrossingAlert=f3L2N2AAclRuleThresholdCrossingAlert, f3L2N2AAclRuleSrcPortControl=f3L2N2AAclRuleSrcPortControl, f3L3TrafficIpInterfaceStatsIcmpRx=f3L3TrafficIpInterfaceStatsIcmpRx, f3L3AclRuleSrcIpV6AddressPrefixLen=f3L3AclRuleSrcIpV6AddressPrefixLen, f3L3TrafficOspfInterfaceEntry=f3L3TrafficOspfInterfaceEntry, cmL3QosPolicerThresholdCrossingAlert=cmL3QosPolicerThresholdCrossingAlert, f3L3QosShaperWfqWeight=f3L3QosShaperWfqWeight, f3L3TrafficIpv6RouteDest=f3L3TrafficIpv6RouteDest, f3L3TrafficIpv4RouteRowStatus=f3L3TrafficIpv4RouteRowStatus, f3L3TrafficIpv6StaticRouteInterface=f3L3TrafficIpv6StaticRouteInterface, f3L3TrafficIPIfMask=f3L3TrafficIPIfMask, f3L2A2NAclRuleSrcIpV6AddressControl=f3L2A2NAclRuleSrcIpV6AddressControl, f3L3TrafficIPIfDhcpRelayVendorClassiDOpt60=f3L3TrafficIPIfDhcpRelayVendorClassiDOpt60, f3L3QosShaperStatsAction=f3L3QosShaperStatsAction, f3L3TrafficBgpPeerTable=f3L3TrafficBgpPeerTable, f3L3TrafficIpv6AllRouteEntry=f3L3TrafficIpv6AllRouteEntry, f3L3TrafficIpInterfaceStatsNdpNARx=f3L3TrafficIpInterfaceStatsNdpNARx, f3L3TrafficIpInterfaceHistoryIcmpV6WONdpRx=f3L3TrafficIpInterfaceHistoryIcmpV6WONdpRx, f3L3TrafficIpInterfaceStatsNdpNATx=f3L3TrafficIpInterfaceStatsNdpNATx, f3L2A2NAclRuleSrcIpV6Address=f3L2A2NAclRuleSrcIpV6Address, f3L3TrafficIpInterfaceHistoryNdpRSTx=f3L3TrafficIpInterfaceHistoryNdpRSTx, f3L3AclRuleDstIpV6Address=f3L3AclRuleDstIpV6Address, f3L3TrafficIPInterfaceRAPrefixLength=f3L3TrafficIPInterfaceRAPrefixLength, cmL3FlowPointStatsFragmentedDropAcl=cmL3FlowPointStatsFragmentedDropAcl, f3L3FlowPointStatsValid=f3L3FlowPointStatsValid, f3L3TrafficIPv6InterfaceStatsNdpRSRx=f3L3TrafficIPv6InterfaceStatsNdpRSRx, f3L3TrafficBgpPeerAddressFamilyRedistSlaacRoute=f3L3TrafficBgpPeerAddressFamilyRedistSlaacRoute, f3VrfOspfRouterVersion=f3VrfOspfRouterVersion, cmL3QosShaperHistoryFD=cmL3QosShaperHistoryFD, cmL3FlowPointHistoryFMY=cmL3FlowPointHistoryFMY, f3VrfTrafficIpIfMemberEntry=f3VrfTrafficIpIfMemberEntry, f3L3TrafficOspfNeighborInterface=f3L3TrafficOspfNeighborInterface, f3L3QosPolicerIndex=f3L3QosPolicerIndex, cmL3FlowPointStatsAction=cmL3FlowPointStatsAction, f3L3QosShaperCOS=f3L3QosShaperCOS, f3L3TrafficIpv6AllRouteAdminDistance=f3L3TrafficIpv6AllRouteAdminDistance, f3L3TrafficIPIfUnnumberedControl=f3L3TrafficIPIfUnnumberedControl, f3L3TrafficBgpRouterConnectedRoutesRedistControl=f3L3TrafficBgpRouterConnectedRoutesRedistControl, f3L3FlowPointStatsNoRouteDrop=f3L3FlowPointStatsNoRouteDrop, f3L3FlowPointHistoryNoRouteDrop=f3L3FlowPointHistoryNoRouteDrop, f3L2N2AAclRuleTcpFlagsControl=f3L2N2AAclRuleTcpFlagsControl, f3L3TrafficIpInterfaceStatsNdpRATx=f3L3TrafficIpInterfaceStatsNdpRATx, f3L3AclRuleDstMacAddressControl=f3L3AclRuleDstMacAddressControl, f3L3AclRuleOperation=f3L3AclRuleOperation, cmL3FlowPointOperationalState=cmL3FlowPointOperationalState, TilfaProtectionType=TilfaProtectionType, f3L3QosShaperHistoryFR=f3L3QosShaperHistoryFR, cmL3QosPolicerCIRHi=cmL3QosPolicerCIRHi, f3L3TrafficBgpInRouteTable=f3L3TrafficBgpInRouteTable, f3L2A2NAclRuleDstPortControl=f3L2A2NAclRuleDstPortControl, f3L3TrafficBgpRouteV2Table=f3L3TrafficBgpRouteV2Table, f3L3TrafficIpv4AllRouteDest=f3L3TrafficIpv4AllRouteDest, f3L3TrafficIpv6AllRouteRowStatus=f3L3TrafficIpv6AllRouteRowStatus, f3L3Notifications=f3L3Notifications, f3VrfOspfRouterDhcpRoutesMetric=f3VrfOspfRouterDhcpRoutesMetric, f3L3TrafficOspfAreaDefaultCost=f3L3TrafficOspfAreaDefaultCost, f3DhcpV6RelayAgentClientTrafficIpIfMemberRowStatus=f3DhcpV6RelayAgentClientTrafficIpIfMemberRowStatus, f3IpPrefixListIndex=f3IpPrefixListIndex, f3L3FlowPointAlias=f3L3FlowPointAlias, f3IpPrefixListTable=f3IpPrefixListTable, f3L3TrafficIPv6InterfaceThresholdValueHi=f3L3TrafficIPv6InterfaceThresholdValueHi, f3L3AclRuleHistoryRuleMatch=f3L3AclRuleHistoryRuleMatch, f3L3AclRuleThresholdVariable=f3L3AclRuleThresholdVariable, f3L3TrafficBgpPeerMultihopTtl=f3L3TrafficBgpPeerMultihopTtl, f3L3TrafficOspfNeighborLocalInterfaceName=f3L3TrafficOspfNeighborLocalInterfaceName, f3L3TrafficOspfAreaType=f3L3TrafficOspfAreaType, f3VrfOspfRouterIsAbr=f3VrfOspfRouterIsAbr, f3L2N2AAclRuleDstIpv4AddressLowLimit=f3L2N2AAclRuleDstIpv4AddressLowLimit, f3L3FlowPointStatsTtlEqual1Drop=f3L3FlowPointStatsTtlEqual1Drop, f3L3QosPolicerStatsFMY=f3L3QosPolicerStatsFMY, f3L2N2AAclRuleStatsRuleMatch=f3L2N2AAclRuleStatsRuleMatch, f3L2A2NAclRuleSrcIpv4AddressControl=f3L2A2NAclRuleSrcIpv4AddressControl, f3L3QosShaperHistoryABRRLR=f3L3QosShaperHistoryABRRLR, cmL3Notifications=cmL3Notifications, f3L3TrafficIPv6AddrUnicastAddrAutoGenPrefix=f3L3TrafficIPv6AddrUnicastAddrAutoGenPrefix, f3L3TrafficIPInterfaceIPv6AddressUnicastAddr=f3L3TrafficIPInterfaceIPv6AddressUnicastAddr, f3L3TrafficIpInterfaceHistoryIcmpRx=f3L3TrafficIpInterfaceHistoryIcmpRx, f3L3TrafficIpv6AllRouteDest=f3L3TrafficIpv6AllRouteDest, AffectiveArpActionType=AffectiveArpActionType, cmL3QosPolicerHistoryTime=cmL3QosPolicerHistoryTime, f3L3FlowPointWfqSegmentationCOS=f3L3FlowPointWfqSegmentationCOS, cmL3QosShaperThresholdIndex=cmL3QosShaperThresholdIndex, cmL3QosShaperHistoryTime=cmL3QosShaperHistoryTime, cmL3FlowPointMultiCOSEnabled=cmL3FlowPointMultiCOSEnabled, cmL3QosPolicerHistoryFMY=cmL3QosPolicerHistoryFMY, f3L3QosPolicerThresholdCrossingAlert=f3L3QosPolicerThresholdCrossingAlert, f3L3AclRulePriorityHighLimit=f3L3AclRulePriorityHighLimit, f3IpPrefixEntry=f3IpPrefixEntry, f3L2A2NAclRuleEtherType=f3L2A2NAclRuleEtherType, f3L3TrafficOspfLsDbEntry=f3L3TrafficOspfLsDbEntry, BgpGracefulRestartControlType=BgpGracefulRestartControlType, f3L3TrafficIpv6RouteOrigin=f3L3TrafficIpv6RouteOrigin, cmL3QosPolicerStatsFMG=cmL3QosPolicerStatsFMG, f3L3TrafficOspfInterfaceStorageType=f3L3TrafficOspfInterfaceStorageType, f3L3TrafficIPIfDhcpRole=f3L3TrafficIPIfDhcpRole, f3L3TrafficIpv6RouteFlags=f3L3TrafficIpv6RouteFlags, f3L2A2NAclRuleHistoryTable=f3L2A2NAclRuleHistoryTable, f3L3QosShaperWredYellowMinQueueThreshold=f3L3QosShaperWredYellowMinQueueThreshold, f3L3AclRuleThresholdCrossingAlert=f3L3AclRuleThresholdCrossingAlert, f3L3FlowPointHistoryEntry=f3L3FlowPointHistoryEntry, f3L3QosPolicerHistoryFMY=f3L3QosPolicerHistoryFMY, cmL3QosShaperIndex=cmL3QosShaperIndex, f3L3PerfGroup=f3L3PerfGroup, cmL3FlowPointEgressShapingType=cmL3FlowPointEgressShapingType, f3L3TrafficIPv6InterfaceHistoryEntry=f3L3TrafficIPv6InterfaceHistoryEntry, cmL3QosPolicerStorageType=cmL3QosPolicerStorageType, f3L3QosShaperTable=f3L3QosShaperTable, f3L3TrafficIPIfDhcpRelayVendorClassiDOpt60Control=f3L3TrafficIPIfDhcpRelayVendorClassiDOpt60Control, f3L3TrafficIPIfospfCryptoKeyId=f3L3TrafficIPIfospfCryptoKeyId, f3L3TrafficIpv6RouteStatus=f3L3TrafficIpv6RouteStatus, f3L3TrafficArpStorageType=f3L3TrafficArpStorageType, f3L3TrafficIpv4RouteMask=f3L3TrafficIpv4RouteMask, cmL3FlowPointThresholdValueLo=cmL3FlowPointThresholdValueLo, f3L3QosShaperHistoryABRRL=f3L3QosShaperHistoryABRRL, f3IpPrefixListStorageType=f3IpPrefixListStorageType, f3L2A2NAclRuleHistoryIndex=f3L2A2NAclRuleHistoryIndex, f3L3TrafficIPv6InterfaceThresholdTable=f3L3TrafficIPv6InterfaceThresholdTable, f3L3TrafficIPIfDupAddrDetectControl=f3L3TrafficIPIfDupAddrDetectControl, f3DhcpV6RelayAgentSecondaryState=f3DhcpV6RelayAgentSecondaryState, f3L3TrafficIpInterfaceThresholdVariable=f3L3TrafficIpInterfaceThresholdVariable, f3L3TrafficIPv6IfSecondaryState=f3L3TrafficIPv6IfSecondaryState, f3L3TrafficIPIfDupAddrDetectTransmits=f3L3TrafficIPIfDupAddrDetectTransmits, f3L3TrafficBgpRouteTable=f3L3TrafficBgpRouteTable, f3L3TrafficIPv6IfName=f3L3TrafficIPv6IfName, f3L3AclRuleThresholdTable=f3L3AclRuleThresholdTable, f3L3TrafficIPv6InterfaceTable=f3L3TrafficIPv6InterfaceTable, f3L2A2NAclRuleSrcPortHighLimit=f3L2A2NAclRuleSrcPortHighLimit, f3L3TrafficIPv6AddrUnicastAddr=f3L3TrafficIPv6AddrUnicastAddr, f3L3TrafficIPv6AddrIndex=f3L3TrafficIPv6AddrIndex, f3L3QosPolicerEBS=f3L3QosPolicerEBS, f3L3TrafficIpInterfaceStatsArpReplyRx=f3L3TrafficIpInterfaceStatsArpReplyRx, f3L3TrafficIpv4RouteNextHop=f3L3TrafficIpv4RouteNextHop, f3L3QosPolicerEnvelopeObject=f3L3QosPolicerEnvelopeObject, f3L3TrafficIPv6IfRaDhcpMoreConfigEnabled=f3L3TrafficIPv6IfRaDhcpMoreConfigEnabled, f3VrfTraceRouteIpv6Destination=f3VrfTraceRouteIpv6Destination, f3L3TrafficIpInterfaceHistoryAction=f3L3TrafficIpInterfaceHistoryAction, f3L3TrafficIPv6InterfaceThresholdIndex=f3L3TrafficIPv6InterfaceThresholdIndex, f3L3TrafficIpv4RouteStatus=f3L3TrafficIpv4RouteStatus, f3L3TrafficIpInterfaceStatsIntervalType=f3L3TrafficIpInterfaceStatsIntervalType, cmL3FlowPointHistoryFTD=cmL3FlowPointHistoryFTD, f3L3TrafficIPv6InterfaceStatsEntry=f3L3TrafficIPv6InterfaceStatsEntry, cmL3FlowPointHCosMaximumBwHi=cmL3FlowPointHCosMaximumBwHi, f3VrfTransportType=f3VrfTransportType, f3L3TrafficIPv6InterfaceHistoryNdpNARx=f3L3TrafficIPv6InterfaceHistoryNdpNARx, f3L3QosPolicerThresholdValueHi=f3L3QosPolicerThresholdValueHi, f3L3QosShaperHistoryAction=f3L3QosShaperHistoryAction, f3L2A2NAclRuleEtherTypeControl=f3L2A2NAclRuleEtherTypeControl, f3L3QosShaperThresholdValueHi=f3L3QosShaperThresholdValueHi, OspfVersion=OspfVersion, f3L2N2AAclRuleProtocolNumber=f3L2N2AAclRuleProtocolNumber, f3L3TrafficBgpPeerStartupHoldTime=f3L3TrafficBgpPeerStartupHoldTime, f3L2N2AAclRuleInnerVlanVIDControl=f3L2N2AAclRuleInnerVlanVIDControl, f3L3QosPolicerCIRLo=f3L3QosPolicerCIRLo, f3L3TrafficIPv6InterfaceStatsIcmpV6WONdpRx=f3L3TrafficIPv6InterfaceStatsIcmpV6WONdpRx, f3VrfOspfRouterRowStatus=f3VrfOspfRouterRowStatus, f3L3TrafficIpv6RouteMetric=f3L3TrafficIpv6RouteMetric, f3L3TrafficIpv6StaticRouteTable=f3L3TrafficIpv6StaticRouteTable, f3VrfPingIpv6Destination=f3VrfPingIpv6Destination, f3L3TrafficBgpPeerRouteReflectorClusterId=f3L3TrafficBgpPeerRouteReflectorClusterId, cmL3FlowPointStatsFMRD=cmL3FlowPointStatsFMRD, cmL3QosPolicerThresholdIndex=cmL3QosPolicerThresholdIndex, f3L3AclRuleIpV6FlowLabel=f3L3AclRuleIpV6FlowLabel, cmL3QosPolicerHistoryFMG=cmL3QosPolicerHistoryFMG, f3L3TrafficIpInterfaceHistoryDhcpRx=f3L3TrafficIpInterfaceHistoryDhcpRx, f3L2A2NAclRuleDynamicSrcIpControl=f3L2A2NAclRuleDynamicSrcIpControl, f3L3TrafficBgpPeerSecondaryState=f3L3TrafficBgpPeerSecondaryState, cmL3QosPolicerEIRHi=cmL3QosPolicerEIRHi, f3L3TrafficIPv6InterfaceStatsAction=f3L3TrafficIPv6InterfaceStatsAction, OspfInterfaceState=OspfInterfaceState, f3L3TrafficBgpPeerAddressFamilyRedistOspfRoute=f3L3TrafficBgpPeerAddressFamilyRedistOspfRoute, f3L3TrafficOspfAsLsDbChecksum=f3L3TrafficOspfAsLsDbChecksum, f3L3QosPolicerSecondaryState=f3L3QosPolicerSecondaryState, f3L3QosShaperOperationalState=f3L3QosShaperOperationalState, f3L2N2AAclRuleHistoryAction=f3L2N2AAclRuleHistoryAction, f3L3TrafficOspfAsLsDbSeqNum=f3L3TrafficOspfAsLsDbSeqNum, cmL3QosShaperThresholdValueLo=cmL3QosShaperThresholdValueLo, f3L3AclRuleIpv4PriorityControl=f3L3AclRuleIpv4PriorityControl, cmL3QosShaperStatsFREDD=cmL3QosShaperStatsFREDD, f3L3TrafficIpInterfaceHistoryTable=f3L3TrafficIpInterfaceHistoryTable, f3L3AclRuleInnerVlanVIDControl=f3L3AclRuleInnerVlanVIDControl, f3L3QosShaperStatsFR=f3L3QosShaperStatsFR, f3L3TrafficIpv6RouteStorageType=f3L3TrafficIpv6RouteStorageType, f3L3TrafficIPv6IfRouterLifeTime=f3L3TrafficIPv6IfRouterLifeTime, TrafficIpRouteStatus=TrafficIpRouteStatus, TrafficIpRouteOriginType=TrafficIpRouteOriginType, f3VrfOspfRouterOperationalState=f3VrfOspfRouterOperationalState, f3L3TrafficIpInterfaceHistoryIcmpV6WONdpTx=f3L3TrafficIpInterfaceHistoryIcmpV6WONdpTx, f3L3TrafficIpv4RouteDest=f3L3TrafficIpv4RouteDest, f3L3FlowPointHistoryFrameRx=f3L3FlowPointHistoryFrameRx, f3L3TrafficIpInterfaceHistoryArpReplyTx=f3L3TrafficIpInterfaceHistoryArpReplyTx, f3DhcpRelayAgentTrafficIpIfMemberObject=f3DhcpRelayAgentTrafficIpIfMemberObject, f3L3TrafficIpInterfaceStatsIndex=f3L3TrafficIpInterfaceStatsIndex, f3L3TrafficIPInterfaceRAPrefixStorageType=f3L3TrafficIPInterfaceRAPrefixStorageType, f3L3TrafficOspfLinkLsDbAdvRouterId=f3L3TrafficOspfLinkLsDbAdvRouterId, cmL3QosShaperStatsABRRLR=cmL3QosShaperStatsABRRLR, f3L3QosPolicerStatsABR=f3L3QosPolicerStatsABR, f3L3TrafficOspfV3NeighborLocalInterfaceName=f3L3TrafficOspfV3NeighborLocalInterfaceName, f3L3FlowPointHistoryFMY=f3L3FlowPointHistoryFMY, f3L2A2NAclRuleSrcIpV6AddressPrefixLen=f3L2A2NAclRuleSrcIpV6AddressPrefixLen, f3L2A2NAclRuleOperation=f3L2A2NAclRuleOperation, f3L3QosShaperWredGreenMinQueueThreshold=f3L3QosShaperWredGreenMinQueueThreshold, f3L3AclRuleStatsEntry=f3L3AclRuleStatsEntry, f3L3QosPolicerTable=f3L3QosPolicerTable, cmL3FlowPointHCosGuaranteedBwHi=cmL3FlowPointHCosGuaranteedBwHi, f3L3AclRuleProtocolControl=f3L3AclRuleProtocolControl, f3L3TrafficIPIfIpv6LinkLocalAddr=f3L3TrafficIPIfIpv6LinkLocalAddr, f3L2A2NAclRuleDynamicSrcMacAddressControl=f3L2A2NAclRuleDynamicSrcMacAddressControl, f3L2A2NAclRuleStatsRuleMatch=f3L2A2NAclRuleStatsRuleMatch, f3L3QosShaperEIRLo=f3L3QosShaperEIRLo, f3VrfActionX=f3VrfActionX, f3L3FlowPointThresholdVariable=f3L3FlowPointThresholdVariable, f3L3TrafficIpInterfaceHistoryNdpNSTx=f3L3TrafficIpInterfaceHistoryNdpNSTx, f3L3TrafficOspfAsLsDbTable=f3L3TrafficOspfAsLsDbTable, f3L3TrafficBgpRouterSecondaryState=f3L3TrafficBgpRouterSecondaryState, f3L3TrafficIPv6NdpInterface=f3L3TrafficIPv6NdpInterface, f3L3TrafficIPIfMinRAInterval=f3L3TrafficIPIfMinRAInterval, f3L3TrafficBgpRIBRoutePath=f3L3TrafficBgpRIBRoutePath, cmL3FlowPointThresholdTable=cmL3FlowPointThresholdTable, f3L3AclRuleDstIpv4AddressControl=f3L3AclRuleDstIpv4AddressControl, f3L3TrafficIPIfOspfHelloInterval=f3L3TrafficIPIfOspfHelloInterval, f3L2N2AAclRuleThresholdVariable=f3L2N2AAclRuleThresholdVariable, f3L3TrafficBgpPeerConnectRetryTime=f3L3TrafficBgpPeerConnectRetryTime, f3L3TrafficIPv6NdpRowStatus=f3L3TrafficIPv6NdpRowStatus, f3L3TrafficIpv4RouteInterface=f3L3TrafficIpv4RouteInterface, f3VrfEcmpDistribution=f3VrfEcmpDistribution, f3VrfStorageType=f3VrfStorageType, f3L3FlowPointHistoryTime=f3L3FlowPointHistoryTime, cmL3QosShaperSecondaryState=cmL3QosShaperSecondaryState, f3L2N2AAclRuleDstIpv4AddressHighLimit=f3L2N2AAclRuleDstIpv4AddressHighLimit, f3L3TrafficIPv6AddrAssignMode=f3L3TrafficIPv6AddrAssignMode, f3L3TrafficIpv4AllRouteAdminDistance=f3L3TrafficIpv4AllRouteAdminDistance, f3L3TrafficIpInterfaceStatsArpReqRx=f3L3TrafficIpInterfaceStatsArpReqRx, f3L3TrafficIPv6AddressEntry=f3L3TrafficIPv6AddressEntry, f3L3FlowPointStatsFragmentedDropAcl=f3L3FlowPointStatsFragmentedDropAcl, cmL3QosShaperStatsBREDD=cmL3QosShaperStatsBREDD, f3L3TrafficIpInterfaceHistoryNdpNATx=f3L3TrafficIpInterfaceHistoryNdpNATx, f3L3TrafficBgpPeerRowStatus=f3L3TrafficBgpPeerRowStatus, f3L3TrafficIpv4AllRouteOrigin=f3L3TrafficIpv4AllRouteOrigin, cmL3QosPolicerThresholdVariable=cmL3QosPolicerThresholdVariable, cmL3QosShaperStatsFTD=cmL3QosShaperStatsFTD, f3L3AclRuleEtherTypeControl=f3L3AclRuleEtherTypeControl, f3L3QosShaperWredYellowMaxQueueThreshold=f3L3QosShaperWredYellowMaxQueueThreshold, f3L2A2NAclRuleHistoryEntry=f3L2A2NAclRuleHistoryEntry)
mibBuilder.exportSymbols("F3-L3-MIB", f3L3FlowPointIpVersion=f3L3FlowPointIpVersion, f3L3TrafficOspfInterfaceIndex=f3L3TrafficOspfInterfaceIndex, f3L3TrafficIPInterfaceIPv6AddressIndex=f3L3TrafficIPInterfaceIPv6AddressIndex, f3VrfLoopbackInterfaceEntry=f3VrfLoopbackInterfaceEntry, f3L3TrafficOspfNeighborRole=f3L3TrafficOspfNeighborRole, f3L3TrafficIPv6InterfaceStatsNdpRATx=f3L3TrafficIPv6InterfaceStatsNdpRATx, f3L3TrafficIPv6AddrUnicastAddrPrefixLength=f3L3TrafficIPv6AddrUnicastAddrPrefixLength, f3L3FlowPointHCosMaximumBwHi=f3L3FlowPointHCosMaximumBwHi, f3L3TrafficIPInterfaceNdpEntry=f3L3TrafficIPInterfaceNdpEntry, f3L3TrafficIPIfDhcpv6Enabled=f3L3TrafficIPIfDhcpv6Enabled, f3VrfOspfRouterSecondaryState=f3VrfOspfRouterSecondaryState, f3L3TrafficBgpPeerUpdateSourceIp=f3L3TrafficBgpPeerUpdateSourceIp, TrafficIpv6InterfaceActionType=TrafficIpv6InterfaceActionType, f3L3AclRuleSummary=f3L3AclRuleSummary, f3VrfOspfRouterIndex=f3VrfOspfRouterIndex, f3L3TrafficIpv4AllRouteInterface=f3L3TrafficIpv4AllRouteInterface, f3L2A2NAclRuleHistoryRuleMatch=f3L2A2NAclRuleHistoryRuleMatch, f3L3TrafficIPIfDhcpHostName=f3L3TrafficIPIfDhcpHostName, cmL3QosPolicerCouplingFlag=cmL3QosPolicerCouplingFlag, f3L3TrafficIPv6IfDhcpEnabled=f3L3TrafficIPv6IfDhcpEnabled, f3L3QosShaperWredYellowDropProbability=f3L3QosShaperWredYellowDropProbability, f3L3TrafficBgpPeerIpv6Address=f3L3TrafficBgpPeerIpv6Address, f3L3QosShaperThresholdValueLo=f3L3QosShaperThresholdValueLo, f3DhcpRelayAgentOp82SubOp9ControlEnabled=f3DhcpRelayAgentOp82SubOp9ControlEnabled, f3L3TrafficIpv4RouteTable=f3L3TrafficIpv4RouteTable, f3L2N2AAclRuleAlias=f3L2N2AAclRuleAlias, f3L3TrafficOspfLinkLsDbInterface=f3L3TrafficOspfLinkLsDbInterface, cmL3QosShaperHistoryEntry=cmL3QosShaperHistoryEntry, f3L2N2AAclRuleStatsValid=f3L2N2AAclRuleStatsValid, f3L2N2AAclRuleCOS=f3L2N2AAclRuleCOS, f3L2N2AAclRuleDstIpV6AddressPrefixLen=f3L2N2AAclRuleDstIpV6AddressPrefixLen, f3L3TrafficIPInterfaceIPv6AddressTable=f3L3TrafficIPInterfaceIPv6AddressTable, cmL3FlowPointThresholdMonValue=cmL3FlowPointThresholdMonValue, f3L2A2NAclRuleStatsTable=f3L2A2NAclRuleStatsTable, f3L3TrafficIPIfDhcpHostNameEnabled=f3L3TrafficIPIfDhcpHostNameEnabled, f3L3TrafficIPInterfaceIPv6AddressUnicastAddrAutoGenPrefix=f3L3TrafficIPInterfaceIPv6AddressUnicastAddrAutoGenPrefix, f3L3TrafficArpInterface=f3L3TrafficArpInterface, f3L3TrafficIPIfDhcpRelayInfoOpt82Sub1Enabled=f3L3TrafficIPIfDhcpRelayInfoOpt82Sub1Enabled, f3VrfOspfRouterStaticRoutesMetric=f3VrfOspfRouterStaticRoutesMetric, EcmpDistributionType=EcmpDistributionType, f3L3TrafficIpv4RouteOrigin=f3L3TrafficIpv4RouteOrigin, OspfLsaType=OspfLsaType, f3L2N2AAclRuleOuterVlanPcpControl=f3L2N2AAclRuleOuterVlanPcpControl, f3L3TrafficBgpPeerTimeSinceUpTransition=f3L3TrafficBgpPeerTimeSinceUpTransition, f3L3MIB=f3L3MIB, f3L3AclRuleInnerVlanPcpHighLimit=f3L3AclRuleInnerVlanPcpHighLimit, f3L3TrafficOspfLsDbChecksum=f3L3TrafficOspfLsDbChecksum, f3L3TrafficBgpPeerDescription=f3L3TrafficBgpPeerDescription, f3L2N2AAclRuleDstPortHighLimit=f3L2N2AAclRuleDstPortHighLimit, f3L3TrafficIPIfOspfCost=f3L3TrafficIPIfOspfCost, f3L3TrafficOspfInterfaceState=f3L3TrafficOspfInterfaceState, f3L3AclRuleSrcIpv4AddressHighLimit=f3L3AclRuleSrcIpv4AddressHighLimit, f3L3AclRuleIndex=f3L3AclRuleIndex, f3L3TrafficIpv6RouteEntry=f3L3TrafficIpv6RouteEntry, f3L3TrafficBgpRouterStaleRoutesTime=f3L3TrafficBgpRouterStaleRoutesTime, f3L3TrafficIpv4RouteSourceForwardingEnable=f3L3TrafficIpv4RouteSourceForwardingEnable, f3VrfOspfRouterSrControl=f3VrfOspfRouterSrControl, f3L3QosPolicerStatsValid=f3L3QosPolicerStatsValid, f3L3AclRuleSrcPortControl=f3L3AclRuleSrcPortControl, f3L3TrafficIPv6AddrStorageType=f3L3TrafficIPv6AddrStorageType, cmL3QosShaperBufferSize=cmL3QosShaperBufferSize, f3L3TrafficIPInterfaceRAPrefix=f3L3TrafficIPInterfaceRAPrefix, f3L2A2NAclRuleRowStatus=f3L2A2NAclRuleRowStatus, f3DhcpV6RelayAgentOperationalState=f3DhcpV6RelayAgentOperationalState, cmL3FlowPointHistoryFrameRx=cmL3FlowPointHistoryFrameRx, f3DhcpRelayAgentTrafficIpIfMemberTable=f3DhcpRelayAgentTrafficIpIfMemberTable, f3L3TrafficIpInterfaceStatsIcmpTx=f3L3TrafficIpInterfaceStatsIcmpTx, cmL3QosPolicerThresholdInterval=cmL3QosPolicerThresholdInterval, f3L3TrafficIpInterfaceHistoryIndex=f3L3TrafficIpInterfaceHistoryIndex, f3L2A2NAclRuleStatsIndex=f3L2A2NAclRuleStatsIndex, f3L2A2NAclRuleOuterVlanVIDControl=f3L2A2NAclRuleOuterVlanVIDControl, f3L3TrafficBgpRouteV2Entry=f3L3TrafficBgpRouteV2Entry, f3L3AclRuleIpv4PriorityHighLimit=f3L3AclRuleIpv4PriorityHighLimit, f3L3TrafficIPIfIpAddress=f3L3TrafficIPIfIpAddress, f3L3TrafficBgpPeerAddressFamilyNextHopIpv6=f3L3TrafficBgpPeerAddressFamilyNextHopIpv6, f3L3TrafficIpInterfaceThresholdTable=f3L3TrafficIpInterfaceThresholdTable, f3VrfOspfRouterDhcpRoutesRedistributeToOspf=f3VrfOspfRouterDhcpRoutesRedistributeToOspf, cmL3FlowPointStatsEntry=cmL3FlowPointStatsEntry, f3L3AclRuleOuterVlanDei=f3L3AclRuleOuterVlanDei, cmL3QosPolicerHistoryBytesOut=cmL3QosPolicerHistoryBytesOut, f3L3AclRuleSrcPortHighLimit=f3L3AclRuleSrcPortHighLimit, f3L3FlowPointOuterTagMemberShipEnabled=f3L3FlowPointOuterTagMemberShipEnabled, f3L3TrafficIPv6IfReachableTime=f3L3TrafficIPv6IfReachableTime, f3L2N2AAclRuleInnerVlanPcpLowLimit=f3L2N2AAclRuleInnerVlanPcpLowLimit, f3L3TrafficIPv6NdpTable=f3L3TrafficIPv6NdpTable, f3L2A2NAclRuleOuterVlanVIDHighLimit=f3L2A2NAclRuleOuterVlanVIDHighLimit, f3L3QosPolicerCBS=f3L3QosPolicerCBS, cmL3FlowPointOuterTagMemberShipEnabled=cmL3FlowPointOuterTagMemberShipEnabled, f3L3TrafficBgpPeerIndex=f3L3TrafficBgpPeerIndex, f3L3TrafficIPv6IfDupAddrDetectRetransTimer=f3L3TrafficIPv6IfDupAddrDetectRetransTimer, f3L2A2NAclRuleDstIpV6AddressPrefixLen=f3L2A2NAclRuleDstIpV6AddressPrefixLen, f3VrfOspfRouterConnectedRoutesRedistributeToOspf=f3VrfOspfRouterConnectedRoutesRedistributeToOspf, f3L3AclRuleStatsTable=f3L3AclRuleStatsTable, f3L3TrafficIpv4AllRouteEntry=f3L3TrafficIpv4AllRouteEntry, cmL3QosShaperOperationalState=cmL3QosShaperOperationalState, cmL3QosShaperHistoryBR=cmL3QosShaperHistoryBR, f3L3TrafficIpInterfaceThresholdCrossingAlert=f3L3TrafficIpInterfaceThresholdCrossingAlert, f3L2N2AAclRuleDstIpV6Address=f3L2N2AAclRuleDstIpV6Address, f3L3TrafficIPIfOspfTransmitDelay=f3L3TrafficIPIfOspfTransmitDelay, f3L3TrafficIPv6InterfaceStatsDhcpV6Rx=f3L3TrafficIPv6InterfaceStatsDhcpV6Rx, f3L3TrafficIPv6PrefixRaPrefixAdvEnabled=f3L3TrafficIPv6PrefixRaPrefixAdvEnabled, f3L3TrafficBgpInRouteMetric=f3L3TrafficBgpInRouteMetric, f3L3QosShaperThresholdMonValue=f3L3QosShaperThresholdMonValue, cmL3FlowPointPriMapProfile=cmL3FlowPointPriMapProfile, f3L2A2NAclRuleStatsValid=f3L2A2NAclRuleStatsValid, cmL3QosPolicerCBS=cmL3QosPolicerCBS, f3DhcpV6RelayAgentIndex=f3DhcpV6RelayAgentIndex, f3L3TrafficOspfNeighborIpAddress=f3L3TrafficOspfNeighborIpAddress, f3L3TrafficIPv6InterfaceHistoryIcmpV6WONdpTx=f3L3TrafficIPv6InterfaceHistoryIcmpV6WONdpTx, f3L3QosPolicerRank=f3L3QosPolicerRank, f3L3AclRuleAdminState=f3L3AclRuleAdminState, f3L3TrafficIPv6InterfaceStatsNdpNARx=f3L3TrafficIPv6InterfaceStatsNdpNARx, f3L3QosPolicerHistoryBytesIn=f3L3QosPolicerHistoryBytesIn, f3L3TrafficIPInterfaceIPv6AddressRowStatus=f3L3TrafficIPInterfaceIPv6AddressRowStatus, f3L3TrafficBgpPeerAddressFamilySendDefaultRoute=f3L3TrafficBgpPeerAddressFamilySendDefaultRoute, f3L3TrafficIPv6InterfaceThresholdCrossingAlert=f3L3TrafficIPv6InterfaceThresholdCrossingAlert, f3L3QosShaperStatsFTD=f3L3QosShaperStatsFTD, f3L3TrafficOspfLsDbSeqNum=f3L3TrafficOspfLsDbSeqNum, f3L3TrafficIpInterfaceHistoryValid=f3L3TrafficIpInterfaceHistoryValid, f3L3TrafficBgpPeerAddressFamilyRowStatus=f3L3TrafficBgpPeerAddressFamilyRowStatus, cmL3FlowPointStatsFMY=cmL3FlowPointStatsFMY, f3L3TrafficIPv6IfAction=f3L3TrafficIPv6IfAction, f3L3TrafficIPInterfaceRAPrefixRowStatus=f3L3TrafficIPInterfaceRAPrefixRowStatus, f3L3QosShaperEntry=f3L3QosShaperEntry, f3L3TrafficBgpRouteNetwork=f3L3TrafficBgpRouteNetwork, f3VrfLoopbackInterfaceIpv6Address=f3VrfLoopbackInterfaceIpv6Address, cmL3QosShaperHistoryBREDD=cmL3QosShaperHistoryBREDD, f3L3FlowPointStatsHopLimitDrop=f3L3FlowPointStatsHopLimitDrop, f3L3TrafficBgpPeerAuthenticationKey=f3L3TrafficBgpPeerAuthenticationKey, f3L3QosPolicerThresholdIndex=f3L3QosPolicerThresholdIndex, f3L3FlowPointStatsIndex=f3L3FlowPointStatsIndex, f3L3TrafficBgpRouterOspfRoutesRedistControl=f3L3TrafficBgpRouterOspfRoutesRedistControl, f3L2A2NAclRuleThresholdValueLo=f3L2A2NAclRuleThresholdValueLo, f3IpPrefixListRowStatus=f3IpPrefixListRowStatus, f3L3FlowPointStatsAction=f3L3FlowPointStatsAction, f3L3AclRuleStatsIndex=f3L3AclRuleStatsIndex, f3L3TrafficIPIfDhcpRelayInterfaceSide=f3L3TrafficIPIfDhcpRelayInterfaceSide, f3VrfAction=f3VrfAction, f3L3TrafficBgpRIBRouteEntry=f3L3TrafficBgpRIBRouteEntry, f3L2A2NAclRuleDstPortLowLimit=f3L2A2NAclRuleDstPortLowLimit, f3L3TrafficIPv6InterfaceStatsNdpNATx=f3L3TrafficIPv6InterfaceStatsNdpNATx, cmL3FlowPointStorageType=cmL3FlowPointStorageType, f3L3TrafficOspfInterfaceAssociatedIpInterface=f3L3TrafficOspfInterfaceAssociatedIpInterface, cmL3FlowPointStatsFrameTx=cmL3FlowPointStatsFrameTx, cmL3FlowPointStatsValid=cmL3FlowPointStatsValid, f3L3TrafficBgpPeerHoldTime=f3L3TrafficBgpPeerHoldTime, f3L3TrafficIPv6PrefixValidLifeTime=f3L3TrafficIPv6PrefixValidLifeTime, f3L2N2AAclRuleThresholdInterval=f3L2N2AAclRuleThresholdInterval, f3L3FlowPointAdminState=f3L3FlowPointAdminState, NdpNeighborReachabilityState=NdpNeighborReachabilityState, f3L3QosShaperAdminState=f3L3QosShaperAdminState, f3L3TrafficOspfNeighborDeadTime=f3L3TrafficOspfNeighborDeadTime, f3L3FlowPointPriMapProfile=f3L3FlowPointPriMapProfile, cmL3QosShaperStorageType=cmL3QosShaperStorageType, cmL3FlowPointUntaggedMemberShipEnabled=cmL3FlowPointUntaggedMemberShipEnabled, f3VrfOspfRouterDescription=f3VrfOspfRouterDescription, f3L2N2AAclRuleSrcMacAddress=f3L2N2AAclRuleSrcMacAddress, f3L3QosPolicerHistoryValid=f3L3QosPolicerHistoryValid, f3L3AclRuleInnerVlanVIDHighLimit=f3L3AclRuleInnerVlanVIDHighLimit, f3L3TrafficIpv4AllRouteMetric=f3L3TrafficIpv4AllRouteMetric, f3L3TrafficIPInterfaceTable=f3L3TrafficIPInterfaceTable, f3L3TrafficIPIfReachableTime=f3L3TrafficIPIfReachableTime, f3VrfOspfRouterEcmpMaximumPaths=f3VrfOspfRouterEcmpMaximumPaths, f3L3TrafficIPv6IfRaRDNSSLifeTime=f3L3TrafficIPv6IfRaRDNSSLifeTime, f3VrfOspfRouterDhcpRoutesMetricType=f3VrfOspfRouterDhcpRoutesMetricType, f3L3TrafficIpv4StaticRouteInterface=f3L3TrafficIpv4StaticRouteInterface, f3L3TrafficIPIfMgmtUseEnable=f3L3TrafficIPIfMgmtUseEnable, f3L3TrafficIpv4StaticRouteMask=f3L3TrafficIpv4StaticRouteMask, f3L2A2NAclRuleHistoryTime=f3L2A2NAclRuleHistoryTime, f3L3TrafficIPv6AddressTable=f3L3TrafficIPv6AddressTable, f3VrfOspfRouterTable=f3VrfOspfRouterTable, f3L3TrafficIPv6InterfaceStatsTable=f3L3TrafficIPv6InterfaceStatsTable, f3VrfOspfRouterBgpRoutesMetric=f3VrfOspfRouterBgpRoutesMetric, f3VrfOspfRouterConnectedRoutesMetricType=f3VrfOspfRouterConnectedRoutesMetricType, f3L3AclRuleIpv4PriorityLowLimit=f3L3AclRuleIpv4PriorityLowLimit, f3L3TrafficOspfLinkLsDbEntry=f3L3TrafficOspfLinkLsDbEntry, f3L3AclRuleEtherType=f3L3AclRuleEtherType, cmL3QosShaperStatsIndex=cmL3QosShaperStatsIndex, f3L3QosShaperStorageType=f3L3QosShaperStorageType, f3L3TrafficBgpPeerStorageType=f3L3TrafficBgpPeerStorageType, cmL3FlowPointHistoryTtlEqual1Drop=cmL3FlowPointHistoryTtlEqual1Drop, f3L3TrafficIpInterfaceStatsDhcpV6Tx=f3L3TrafficIpInterfaceStatsDhcpV6Tx, f3L3AclRuleTcpFlagsControl=f3L3AclRuleTcpFlagsControl, f3L3FlowPointHistoryFTD=f3L3FlowPointHistoryFTD, f3L3FlowPointSecondaryState=f3L3FlowPointSecondaryState, f3VrfOspfRouterIsAsbr=f3VrfOspfRouterIsAsbr, f3L3TrafficOspfLinkLsDbPrefixList=f3L3TrafficOspfLinkLsDbPrefixList, f3L3TrafficOspfAreaSimpleAuthKey=f3L3TrafficOspfAreaSimpleAuthKey, f3L3TrafficIPInterfaceRAPrefixTable=f3L3TrafficIPInterfaceRAPrefixTable, f3L3TrafficIPInterfaceIPv6AddressStorageType=f3L3TrafficIPInterfaceIPv6AddressStorageType, f3L3TrafficOspfAreaIfMemberTable=f3L3TrafficOspfAreaIfMemberTable, f3L3TrafficIpInterfaceThresholdValueLo=f3L3TrafficIpInterfaceThresholdValueLo, f3L3TrafficOspfInterfaceOspfRetransmitInterval=f3L3TrafficOspfInterfaceOspfRetransmitInterval, f3L3AclRuleSrcIpV6AddressControl=f3L3AclRuleSrcIpV6AddressControl, f3L3FlowPointStatsEntry=f3L3FlowPointStatsEntry, f3L3TrafficIPv6NdpAge=f3L3TrafficIPv6NdpAge, f3L3QosShaperStatsBTD=f3L3QosShaperStatsBTD, f3L3TrafficIpv4AllRouteMask=f3L3TrafficIpv4AllRouteMask, cmL3QosPolicerEnvelopeObject=cmL3QosPolicerEnvelopeObject, f3L3TrafficBgpPeerBgpGracefulRestart=f3L3TrafficBgpPeerBgpGracefulRestart, f3L3TrafficOspfInterfaceOspfDesignatedRouterId=f3L3TrafficOspfInterfaceOspfDesignatedRouterId, f3L3TrafficIpv4AllRouteNextHop=f3L3TrafficIpv4AllRouteNextHop, f3L3QosPolicerHistoryTime=f3L3QosPolicerHistoryTime, cmL3FlowPointWfqGroupCOS=cmL3FlowPointWfqGroupCOS, f3L3TrafficIPIfDhcpClientId=f3L3TrafficIPIfDhcpClientId, cmL3FlowPointWfqGroupEirLo=cmL3FlowPointWfqGroupEirLo, f3L3FlowPointRefConnectGuardFlow=f3L3FlowPointRefConnectGuardFlow, cmL3QosPolicerThresholdValueLo=cmL3QosPolicerThresholdValueLo, f3L3AclRuleSrcIpv4AddressControl=f3L3AclRuleSrcIpv4AddressControl, f3L3TrafficBgpPeerRouteReflectorClient=f3L3TrafficBgpPeerRouteReflectorClient, f3L3FlowPointHistoryFrameTx=f3L3FlowPointHistoryFrameTx, cmL3FlowPointWfqSegmentationCOS=cmL3FlowPointWfqSegmentationCOS, f3L3AclRuleHistoryValid=f3L3AclRuleHistoryValid, f3L3TrafficOspfLinkLsDbInterfaceId=f3L3TrafficOspfLinkLsDbInterfaceId, f3L3QosPolicerThresholdValueLo=f3L3QosPolicerThresholdValueLo, f3L2N2AAclRuleThresholdIndex=f3L2N2AAclRuleThresholdIndex, cmL3FlowPointHistoryAction=cmL3FlowPointHistoryAction, f3L3FlowPointCOS=f3L3FlowPointCOS, f3L3TrafficIPv6PrefixIndex=f3L3TrafficIPv6PrefixIndex, f3L3TrafficIpv4AllRouteTable=f3L3TrafficIpv4AllRouteTable, cmL3QosPolicerHistoryIndex=cmL3QosPolicerHistoryIndex, cmL3QosPolicerHistoryBytesIn=cmL3QosPolicerHistoryBytesIn, f3L2N2AAclRuleStatsAction=f3L2N2AAclRuleStatsAction, f3L3TrafficIPv6InterfaceStatsNdpRSTx=f3L3TrafficIPv6InterfaceStatsNdpRSTx, f3DhcpRelayAgentAlias=f3DhcpRelayAgentAlias, f3IpPrefixPriority=f3IpPrefixPriority, f3L3AclRuleDstPortHighLimit=f3L3AclRuleDstPortHighLimit, f3L3TrafficIPIfIcmpErrorMsgRateLimit=f3L3TrafficIPIfIcmpErrorMsgRateLimit, f3L3QosShaperWredGreenDropProbability=f3L3QosShaperWredGreenDropProbability, f3DhcpRelayAgentTrafficIpIfMemberEntry=f3DhcpRelayAgentTrafficIpIfMemberEntry, f3L3TrafficBgpPeerTimeSinceDownTransition=f3L3TrafficBgpPeerTimeSinceDownTransition, f3L3TrafficIPv6IfDhcpRole=f3L3TrafficIPv6IfDhcpRole, cmL3FlowPointHCosMgmtEnabled=cmL3FlowPointHCosMgmtEnabled, f3L2N2AAclRuleStatsIndex=f3L2N2AAclRuleStatsIndex, f3L3QosShaperHistoryFREDD=f3L3QosShaperHistoryFREDD, f3L3TrafficOspfInterfaceLinkLsaSuppression=f3L3TrafficOspfInterfaceLinkLsaSuppression, f3L3AclRuleOuterVlanDeiControl=f3L3AclRuleOuterVlanDeiControl, cmL3QosShaperHistoryValid=cmL3QosShaperHistoryValid, f3L3TrafficIPv6InterfaceHistoryNdpNSTx=f3L3TrafficIPv6InterfaceHistoryNdpNSTx, OspfAuthType=OspfAuthType, cmL3FlowPointInnerTagMemberShipVlanId=cmL3FlowPointInnerTagMemberShipVlanId, Ipv6AddressAssignMode=Ipv6AddressAssignMode, f3L2N2AAclRuleThresholdMonValue=f3L2N2AAclRuleThresholdMonValue, f3L3TrafficIPIfDhcpClientIdEnabled=f3L3TrafficIPIfDhcpClientIdEnabled, f3L2A2NAclRuleIpV6FlowLabel=f3L2A2NAclRuleIpV6FlowLabel, f3L3TrafficOspfNeighborRouterId=f3L3TrafficOspfNeighborRouterId, f3L2N2AAclRuleIpV6FlowLabel=f3L2N2AAclRuleIpV6FlowLabel, f3L3TrafficIpv4StaticRouteMetric=f3L3TrafficIpv4StaticRouteMetric, f3L3TrafficIPIfSecondaryState=f3L3TrafficIPIfSecondaryState, f3L3TrafficBgpPeerAddressFamilyRedistStaticRoute=f3L3TrafficBgpPeerAddressFamilyRedistStaticRoute, cmL3QosPolicerSecondaryState=cmL3QosPolicerSecondaryState, f3L3QosPolicerStatsAction=f3L3QosPolicerStatsAction, cmL3QosShaperStatsBR=cmL3QosShaperStatsBR, f3L3TrafficBgpRouteV2NextHop=f3L3TrafficBgpRouteV2NextHop)
mibBuilder.exportSymbols("F3-L3-MIB", f3L3TrafficOspfInterfaceTable=f3L3TrafficOspfInterfaceTable, f3L3FlowPointRowStatus=f3L3FlowPointRowStatus, f3L2N2AAclRuleInnerVlanVIDHighLimit=f3L2N2AAclRuleInnerVlanVIDHighLimit, f3L2N2AAclRuleDstIpV6AddressControl=f3L2N2AAclRuleDstIpV6AddressControl, f3VrfEcmpStaticRoutesMaximumPaths=f3VrfEcmpStaticRoutesMaximumPaths, f3L3TrafficIpInterfaceStatsArpReplyTx=f3L3TrafficIpInterfaceStatsArpReplyTx, L3AclRuleOperation=L3AclRuleOperation, f3L3TrafficIPv6InterfaceStatsNdpRARx=f3L3TrafficIPv6InterfaceStatsNdpRARx, cmL3QosPolicerHistoryFMRD=cmL3QosPolicerHistoryFMRD, f3L3TrafficBgpRouterEcmpMaximumPaths=f3L3TrafficBgpRouterEcmpMaximumPaths, f3VrfLoopbackInterfaceTable=f3VrfLoopbackInterfaceTable, f3VrfLoopbackInterfaceRowStatus=f3VrfLoopbackInterfaceRowStatus, f3L2N2AAclRuleInnerVlanPcpHighLimit=f3L2N2AAclRuleInnerVlanPcpHighLimit, f3L3TrafficIPv6IfLinkLocalAddrMode=f3L3TrafficIPv6IfLinkLocalAddrMode, f3L3TrafficOspfLinkLsDbAreaId=f3L3TrafficOspfLinkLsDbAreaId, f3L3TrafficOspfLinkLsDbChecksum=f3L3TrafficOspfLinkLsDbChecksum, f3VrfOspfRouterAction=f3VrfOspfRouterAction, f3L3FlowPointHCosMgmtEnabled=f3L3FlowPointHCosMgmtEnabled, f3L2A2NAclRuleIpV6FlowLabelControl=f3L2A2NAclRuleIpV6FlowLabelControl, f3L3QosPolicerRowStatus=f3L3QosPolicerRowStatus, f3L2A2NAclRuleDstMacAddress=f3L2A2NAclRuleDstMacAddress, f3L3QosShaperStatsBT=f3L3QosShaperStatsBT, f3L3TrafficBgpPeerAddressFamilyRedistConnectedRoute=f3L3TrafficBgpPeerAddressFamilyRedistConnectedRoute, f3L3QosShaperHistoryValid=f3L3QosShaperHistoryValid, f3L3QosShaperHistoryTime=f3L3QosShaperHistoryTime, f3L2A2NAclRuleIpv4PriorityHighLimit=f3L2A2NAclRuleIpv4PriorityHighLimit, cmL3QosPolicerCIRMaxLo=cmL3QosPolicerCIRMaxLo, f3L3AclRuleCosOverrideControl=f3L3AclRuleCosOverrideControl, f3L2A2NAclRuleThresholdMonValue=f3L2A2NAclRuleThresholdMonValue, f3VrfPingResult=f3VrfPingResult, cmL3QosPolicerStatsFMY=cmL3QosPolicerStatsFMY, f3L3FlowPointMultiCOSEnabled=f3L3FlowPointMultiCOSEnabled, f3VrfTrafficIpIfMemberObject=f3VrfTrafficIpIfMemberObject, f3L3TrafficIpInterfaceHistoryIcmpTx=f3L3TrafficIpInterfaceHistoryIcmpTx, f3L3TrafficIPIfOperationalState=f3L3TrafficIPIfOperationalState, f3L3TrafficOspfAsLsDbType=f3L3TrafficOspfAsLsDbType, f3VrfRowStatus=f3VrfRowStatus, f3L3TrafficIpInterfaceThresholdValueHi=f3L3TrafficIpInterfaceThresholdValueHi, f3L3TrafficOspfLsDbAreaId=f3L3TrafficOspfLsDbAreaId, f3L2N2AAclRuleDstPortLowLimit=f3L2N2AAclRuleDstPortLowLimit, f3L3QosShaperHistoryIndex=f3L3QosShaperHistoryIndex, f3L3AclRuleDstMacAddressMask=f3L3AclRuleDstMacAddressMask, f3L3TrafficOspfInterfaceOspfHelloInterval=f3L3TrafficOspfInterfaceOspfHelloInterval, cmL3FlowPointHistoryEntry=cmL3FlowPointHistoryEntry, f3VrfTable=f3VrfTable, f3L3TrafficIPIfStorageType=f3L3TrafficIPIfStorageType, cmL3FlowPointTable=cmL3FlowPointTable, cmL3QosShaperStatsABRRL=cmL3QosShaperStatsABRRL, f3L3TrafficIpv6RouteGateway=f3L3TrafficIpv6RouteGateway, cmL3FlowPointHistoryAclRuleDrop=cmL3FlowPointHistoryAclRuleDrop, f3DhcpV6RelayAgentClientTrafficIpIfMemberEntry=f3DhcpV6RelayAgentClientTrafficIpIfMemberEntry, f3L2A2NAclRuleDstPortHighLimit=f3L2A2NAclRuleDstPortHighLimit, f3L3TrafficBgpPeerAddressFamilyAdvPrefix=f3L3TrafficBgpPeerAddressFamilyAdvPrefix, cmL3FlowPointStatsFMG=cmL3FlowPointStatsFMG, cmL3QosShaperStatsFD=cmL3QosShaperStatsFD, f3L3TrafficIpv4StaticRouteNextHop=f3L3TrafficIpv4StaticRouteNextHop, f3L2N2AAclRuleThresholdValueLo=f3L2N2AAclRuleThresholdValueLo, f3L2A2NAclRuleDstIpv4AddressHighLimit=f3L2A2NAclRuleDstIpv4AddressHighLimit, f3IpPrefixIndex=f3IpPrefixIndex, f3VrfFwdTableFull=f3VrfFwdTableFull, f3L3TrafficBgpInRouteLocalPreference=f3L3TrafficBgpInRouteLocalPreference, f3L3FlowPointHistoryValid=f3L3FlowPointHistoryValid, f3L3AclRuleAlias=f3L3AclRuleAlias, f3L2A2NAclRuleCosOverrideControl=f3L2A2NAclRuleCosOverrideControl, f3L2N2AAclRuleThresholdValueHi=f3L2N2AAclRuleThresholdValueHi, f3VrfOspfRouterBgpRoutesMetricType=f3VrfOspfRouterBgpRoutesMetricType, f3L3TrafficBgpPeerBgpRouteOutboundFilter=f3L3TrafficBgpPeerBgpRouteOutboundFilter, f3L3TrafficOspfNeighborState=f3L3TrafficOspfNeighborState, f3L3AclRuleParentIndex=f3L3AclRuleParentIndex, f3L3TrafficIpv4RouteType=f3L3TrafficIpv4RouteType, f3L3TrafficIpv6RouteInterface=f3L3TrafficIpv6RouteInterface, cmL3QosShaperEntry=cmL3QosShaperEntry, f3L3AclRuleSrcIpV6Address=f3L3AclRuleSrcIpV6Address, cmL3QosShaperCIRHi=cmL3QosShaperCIRHi, f3L3TrafficOspfInterfaceOspfAuthType=f3L3TrafficOspfInterfaceOspfAuthType, f3L3TrafficIpv6AllRouteOrigin=f3L3TrafficIpv6AllRouteOrigin, f3L3QosShaperThresholdTable=f3L3QosShaperThresholdTable, cmL3QosPolicerStatsFMRD=cmL3QosPolicerStatsFMRD, f3L3AclRuleOuterVlanVIDHighLimit=f3L3AclRuleOuterVlanVIDHighLimit, f3IpPrefixListEntry=f3IpPrefixListEntry, VrfActionType=VrfActionType, f3L3TrafficOspfLinkLsDbAge=f3L3TrafficOspfLinkLsDbAge, f3L3TrafficIpInterfaceHistoryArpReqTx=f3L3TrafficIpInterfaceHistoryArpReqTx, f3DhcpV6RelayAgentClientTrafficIpIfMemberStorageType=f3DhcpV6RelayAgentClientTrafficIpIfMemberStorageType, f3L3AclRuleHistoryEntry=f3L3AclRuleHistoryEntry, cmL3QosPolicerStatsAction=cmL3QosPolicerStatsAction, f3L3QosPolicerStatsIndex=f3L3QosPolicerStatsIndex, f3L3TrafficIPIfMaxRAInterval=f3L3TrafficIPIfMaxRAInterval, cmL3FlowPointRowStatus=cmL3FlowPointRowStatus, TrafficIpInterfaceActionType=TrafficIpInterfaceActionType, f3L3QosPolicerThresholdTable=f3L3QosPolicerThresholdTable, f3L3TrafficBgpRouterId=f3L3TrafficBgpRouterId, f3L3TrafficOspfAsLsDbAge=f3L3TrafficOspfAsLsDbAge, f3L2A2NAclRuleCOS=f3L2A2NAclRuleCOS, cmL3QosShaperThresholdInterval=cmL3QosShaperThresholdInterval, f3VrfPingIpv4Destination=f3VrfPingIpv4Destination, f3L3TrafficIPIfDhcpClientIdType=f3L3TrafficIPIfDhcpClientIdType, f3L3TrafficOspfInterfaceOspfSimpleAuthKey=f3L3TrafficOspfInterfaceOspfSimpleAuthKey, f3L3FlowPointStatsTable=f3L3FlowPointStatsTable, f3L2N2AAclRuleHistoryIndex=f3L2N2AAclRuleHistoryIndex, f3L3TrafficBgpRouterStaticRoutesRedistControl=f3L3TrafficBgpRouterStaticRoutesRedistControl, f3L3TrafficIPv6IfStorageType=f3L3TrafficIPv6IfStorageType, cmL3FlowPointStatsIntervalType=cmL3FlowPointStatsIntervalType, f3L2A2NAclRuleOuterVlanPcpLowLimit=f3L2A2NAclRuleOuterVlanPcpLowLimit, f3L3TrafficIPv6IfDupAddrDetectTransmits=f3L3TrafficIPv6IfDupAddrDetectTransmits, f3L3FlowPointThresholdCrossingAlert=f3L3FlowPointThresholdCrossingAlert, f3DhcpRelayAgentStorageType=f3DhcpRelayAgentStorageType, f3L3TrafficIPv6IfIndex=f3L3TrafficIPv6IfIndex, f3L3TrafficIPInterfaceOspfEntry=f3L3TrafficIPInterfaceOspfEntry, f3L3TrafficIPInterfaceIPv6AddressUnicastAddrPrefixLength=f3L3TrafficIPInterfaceIPv6AddressUnicastAddrPrefixLength, f3L3TrafficOspfAreaIfMemberRowStatus=f3L3TrafficOspfAreaIfMemberRowStatus, f3L3TrafficIPIfOspfRetransmitInterval=f3L3TrafficIPIfOspfRetransmitInterval, f3L3FlowPointThresholdValueLo=f3L3FlowPointThresholdValueLo, cmL3QosShaperEIRLo=cmL3QosShaperEIRLo, f3L3TrafficIPIfRaDefaultRouterPreference=f3L3TrafficIPIfRaDefaultRouterPreference, f3L3TrafficBgpPeerAddressFamilyTable=f3L3TrafficBgpPeerAddressFamilyTable, f3L3TrafficIPInterfaceNdpIPv6Addr=f3L3TrafficIPInterfaceNdpIPv6Addr, f3VrfDhcpRoutesControl=f3VrfDhcpRoutesControl, f3L3FlowPointWfqGroupCOS=f3L3FlowPointWfqGroupCOS, f3L3QosPolicerThresholdInterval=f3L3QosPolicerThresholdInterval, f3L3QosShaperStatsBR=f3L3QosShaperStatsBR, cmL3QosShaperStatsBTD=cmL3QosShaperStatsBTD, f3IpPrefixStorageType=f3IpPrefixStorageType, f3L2N2AAclRuleSrcIpV6AddressControl=f3L2N2AAclRuleSrcIpV6AddressControl, f3L2A2NAclRuleThresholdTable=f3L2A2NAclRuleThresholdTable, f3L3Groups=f3L3Groups, f3L3TrafficOspfAreaAuthType=f3L3TrafficOspfAreaAuthType, cmL3QosPolicerRowStatus=cmL3QosPolicerRowStatus, f3L3TrafficIpInterfaceStatsDhcpRx=f3L3TrafficIpInterfaceStatsDhcpRx, f3VrfLoopbackInterfaceStorageType=f3VrfLoopbackInterfaceStorageType, f3L3QosPolicerStorageType=f3L3QosPolicerStorageType, f3L3TrafficIPv6PrefixRaPrefixLength=f3L3TrafficIPv6PrefixRaPrefixLength, cmL3QosShaperAdminState=cmL3QosShaperAdminState, f3L3FlowPointThresholdValueHi=f3L3FlowPointThresholdValueHi, f3L3TrafficBgpPeerAddressFamilyEntry=f3L3TrafficBgpPeerAddressFamilyEntry, f3L3TrafficIPv6PrefixEntry=f3L3TrafficIPv6PrefixEntry, f3L3TrafficBgpInRouteIndex=f3L3TrafficBgpInRouteIndex, f3L3FlowPointHistoryAction=f3L3FlowPointHistoryAction, f3L3QosPolicerEntry=f3L3QosPolicerEntry, cmL3FlowPointStatsNoRouteDrop=cmL3FlowPointStatsNoRouteDrop, BgpUpdateSourceType=BgpUpdateSourceType, f3L3QosShaperEIRHi=f3L3QosShaperEIRHi, f3L3QosPolicerStatsBytesIn=f3L3QosPolicerStatsBytesIn, f3L3TrafficIPIfDhcpRelayInfoOpt82Sub2=f3L3TrafficIPIfDhcpRelayInfoOpt82Sub2, f3L3TrafficBgpPeerPeerRestarting=f3L3TrafficBgpPeerPeerRestarting, f3L3AclRuleSrcIpv4AddressLowLimit=f3L3AclRuleSrcIpv4AddressLowLimit, f3L3TrafficIpv6AllRouteMetric=f3L3TrafficIpv6AllRouteMetric, f3L3TrafficIPInterfaceEntry=f3L3TrafficIPInterfaceEntry, f3L3TrafficBgpPeerEntry=f3L3TrafficBgpPeerEntry, cmL3QosShaperStatsFR=cmL3QosShaperStatsFR, f3VrfLoopbackInterfaceIpAddress=f3VrfLoopbackInterfaceIpAddress, f3L3TrafficIPIfRaManagedAddressConfigEnabled=f3L3TrafficIPIfRaManagedAddressConfigEnabled, f3L3FlowPointWfqGroupEirLo=f3L3FlowPointWfqGroupEirLo, cmL3FlowPointWfqGroupEirHi=cmL3FlowPointWfqGroupEirHi, f3L3TrafficOspfInterfaceOspfInstanceId=f3L3TrafficOspfInterfaceOspfInstanceId, f3L3TrafficOspfLinkLsDbLinkLocalAddress=f3L3TrafficOspfLinkLsDbLinkLocalAddress, f3L3AclRuleInnerVlanVIDLowLimit=f3L3AclRuleInnerVlanVIDLowLimit, f3L2N2AAclRuleInnerVlanVIDLowLimit=f3L2N2AAclRuleInnerVlanVIDLowLimit, f3L3QosPolicerStatsFMRD=f3L3QosPolicerStatsFMRD, f3L3TrafficOspfLsDbId=f3L3TrafficOspfLsDbId, f3L3FlowPointThresholdInterval=f3L3FlowPointThresholdInterval, f3L3FlowPointFragmentedPktsFwdEnabled=f3L3FlowPointFragmentedPktsFwdEnabled, f3DhcpV6RelayAgentEntry=f3DhcpV6RelayAgentEntry, cmL3FlowPointThresholdInterval=cmL3FlowPointThresholdInterval, f3L3QosPolicerHistoryBytesOut=f3L3QosPolicerHistoryBytesOut, f3L3TrafficOspfV3NeighborInterfaceId=f3L3TrafficOspfV3NeighborInterfaceId, f3L2N2AAclRuleInnerVlanPcpControl=f3L2N2AAclRuleInnerVlanPcpControl, f3L3TrafficBgpRouterRestartTime=f3L3TrafficBgpRouterRestartTime, f3L3TrafficIpv4RouteEntry=f3L3TrafficIpv4RouteEntry, f3L3AclRuleOuterVlanVIDLowLimit=f3L3AclRuleOuterVlanVIDLowLimit, f3L3TrafficBgpPeerBgpRouteInboundFilter=f3L3TrafficBgpPeerBgpRouteInboundFilter, cmL3FlowPointStatsIndex=cmL3FlowPointStatsIndex, Ipv6LinkLocalAddressMode=Ipv6LinkLocalAddressMode, f3L3TrafficIpv4AllRouteRowStatus=f3L3TrafficIpv4AllRouteRowStatus, f3VrfOperationalState=f3VrfOperationalState, f3L3TrafficIpv4StaticRouteRowStatus=f3L3TrafficIpv4StaticRouteRowStatus, f3L2N2AAclRuleCosOverrideControl=f3L2N2AAclRuleCosOverrideControl, f3VrfOspfRouterStaticRoutesMetricType=f3VrfOspfRouterStaticRoutesMetricType, f3L3TrafficBgpRIBRouteTable=f3L3TrafficBgpRIBRouteTable, f3L3FlowPointStatsFMY=f3L3FlowPointStatsFMY, f3VrfTrafficIpIfMemberStorageType=f3VrfTrafficIpIfMemberStorageType, f3L2N2AAclRuleDstMacAddressMask=f3L2N2AAclRuleDstMacAddressMask, f3L2N2AAclRulePriority=f3L2N2AAclRulePriority, f3L3AclRuleSrcMacAddressMask=f3L3AclRuleSrcMacAddressMask, f3L3AclRuleRowStatus=f3L3AclRuleRowStatus, f3L2A2NAclRuleHistoryAction=f3L2A2NAclRuleHistoryAction, cmL3FlowPointHistoryFMRD=cmL3FlowPointHistoryFMRD, f3L3AclRuleThresholdValueLo=f3L3AclRuleThresholdValueLo, f3L2N2AAclRuleHistoryTable=f3L2N2AAclRuleHistoryTable, f3VrfTrafficIpIfMemberRowStatus=f3VrfTrafficIpIfMemberRowStatus, f3L3QosPolicerEIRHi=f3L3QosPolicerEIRHi, cmL3FlowPointHCosMaximumBwLo=cmL3FlowPointHCosMaximumBwLo, f3L2A2NAclRuleStatsAction=f3L2A2NAclRuleStatsAction, f3VrfOspfRouterAdministrativeDistance=f3VrfOspfRouterAdministrativeDistance, f3L3FlowPointHistoryTable=f3L3FlowPointHistoryTable, f3L2A2NAclRuleAdminState=f3L2A2NAclRuleAdminState, f3L2A2NAclRuleHistoryValid=f3L2A2NAclRuleHistoryValid, f3L3AclRulePriorityControl=f3L3AclRulePriorityControl, f3L3TrafficIpv6RoutePrefixLength=f3L3TrafficIpv6RoutePrefixLength, f3L3TrafficIpv4AllRouteStatus=f3L3TrafficIpv4AllRouteStatus, f3L3TrafficIpv6StaticRoutePrefixLength=f3L3TrafficIpv6StaticRoutePrefixLength, f3DhcpV6RelayAgentStorageType=f3DhcpV6RelayAgentStorageType, f3VrfAdminState=f3VrfAdminState, f3L2A2NAclRuleActive=f3L2A2NAclRuleActive, cmL3FlowPointDscpOverwriteControl=cmL3FlowPointDscpOverwriteControl, f3DhcpRelayAgentIndex=f3DhcpRelayAgentIndex, f3L3TrafficIPIfDhcpEnabled=f3L3TrafficIPIfDhcpEnabled, f3VrfAccIsolationControlEnabled=f3VrfAccIsolationControlEnabled, OspfRouterActionType=OspfRouterActionType, f3L2A2NAclRuleSrcIpv4AddressLowLimit=f3L2A2NAclRuleSrcIpv4AddressLowLimit, f3L3QosShaperStatsEntry=f3L3QosShaperStatsEntry, cmL3QosShaperThresholdValueHi=cmL3QosShaperThresholdValueHi, OspfAdjacencyState=OspfAdjacencyState, f3L3TrafficIpv4StaticRouteTable=f3L3TrafficIpv4StaticRouteTable, f3L3FlowPointInnerTagMemberShipVlanId=f3L3FlowPointInnerTagMemberShipVlanId, f3L3QosPolicerEIRMaxLo=f3L3QosPolicerEIRMaxLo, f3L3TrafficIPInterfaceNdpInterface=f3L3TrafficIPInterfaceNdpInterface, cmL3QosShaperHistoryTable=cmL3QosShaperHistoryTable, f3L3QosShaperHistoryBREDD=f3L3QosShaperHistoryBREDD, f3L3TrafficBgpRouterEntry=f3L3TrafficBgpRouterEntry, f3L3QosShaperThresholdCrossingAlert=f3L3QosShaperThresholdCrossingAlert, f3L3TrafficBgpPeerLocalPreference=f3L3TrafficBgpPeerLocalPreference, cmL3QosShaperThresholdEntry=cmL3QosShaperThresholdEntry, f3L3TrafficIPv6NdpType=f3L3TrafficIPv6NdpType, f3DhcpRelayAgentTrafficIpIfMemberStorageType=f3DhcpRelayAgentTrafficIpIfMemberStorageType, f3L3AclRuleDstIpv4AddressHighLimit=f3L3AclRuleDstIpv4AddressHighLimit, f3L2A2NAclRuleSrcMacAddress=f3L2A2NAclRuleSrcMacAddress, f3L2N2AAclRuleIpv4PriorityControl=f3L2N2AAclRuleIpv4PriorityControl, f3L3FlowPointTable=f3L3FlowPointTable, f3L2A2NAclRuleOuterVlanDei=f3L2A2NAclRuleOuterVlanDei, f3L3TrafficOspfAreaIfMemberEntry=f3L3TrafficOspfAreaIfMemberEntry, f3L3TrafficIpv6StaticRouteNextHop=f3L3TrafficIpv6StaticRouteNextHop, f3DhcpV6RelayAgentAdminState=f3DhcpV6RelayAgentAdminState, f3L3AclRuleThresholdValueHi=f3L3AclRuleThresholdValueHi, cmL3QosPolicerThresholdEntry=cmL3QosPolicerThresholdEntry, f3L3TrafficIPv6IfAdminState=f3L3TrafficIPv6IfAdminState, cmL3FlowPointAlias=cmL3FlowPointAlias, f3L3QosPolicerStatsFMYD=f3L3QosPolicerStatsFMYD, f3L3QosShaperBufferSize=f3L3QosShaperBufferSize, f3L3TrafficBgpPeerBgpSessionState=f3L3TrafficBgpPeerBgpSessionState, f3L3TrafficIpv6RouteAdvertise=f3L3TrafficIpv6RouteAdvertise, f3L3QosShaperHistoryBTD=f3L3QosShaperHistoryBTD, f3DhcpRelayAgentTrafficIpIfMemberRowStatus=f3DhcpRelayAgentTrafficIpIfMemberRowStatus, f3L3TrafficIPIfIpAddressSourceType=f3L3TrafficIPIfIpAddressSourceType, f3L3TrafficIpv6RouteRowStatus=f3L3TrafficIpv6RouteRowStatus, f3L3TrafficOspfInterfaceTilfaProtectionType=f3L3TrafficOspfInterfaceTilfaProtectionType, f3L3TrafficIPIfDhcpClassIdEnabled=f3L3TrafficIPIfDhcpClassIdEnabled, f3L2A2NAclRuleOuterVlanDeiControl=f3L2A2NAclRuleOuterVlanDeiControl, f3VrfOspfRouterBgpRoutesRedistributeToOspf=f3VrfOspfRouterBgpRoutesRedistributeToOspf, f3L3TrafficIPIfBorrowedIntf=f3L3TrafficIPIfBorrowedIntf, f3DhcpV6RelayAgentTable=f3DhcpV6RelayAgentTable, TrafficOspfRole=TrafficOspfRole, f3L3TrafficBgpRouteNextHop=f3L3TrafficBgpRouteNextHop, f3L3TrafficIpv6StaticRouteStorageType=f3L3TrafficIpv6StaticRouteStorageType)
mibBuilder.exportSymbols("F3-L3-MIB", f3L2A2NAclRuleIndex=f3L2A2NAclRuleIndex, f3L2N2AAclRuleSrcIpv4AddressHighLimit=f3L2N2AAclRuleSrcIpv4AddressHighLimit, f3L3AclRuleTcpFlags=f3L3AclRuleTcpFlags, RoutesMetricType=RoutesMetricType, f3L3TrafficIPIfOspfBackupDesignatedRouterId=f3L3TrafficIPIfOspfBackupDesignatedRouterId, f3L3TrafficIPv6InterfaceHistoryNdpNATx=f3L3TrafficIPv6InterfaceHistoryNdpNATx, f3L3TrafficBgpRouterAdminState=f3L3TrafficBgpRouterAdminState, f3L3QosShaperHistoryBR=f3L3QosShaperHistoryBR, cmL3QosShaperStatsIntervalType=cmL3QosShaperStatsIntervalType, f3VrfActionIfName=f3VrfActionIfName, f3L3TrafficBgpPeerUpdateSourceIpv6=f3L3TrafficBgpPeerUpdateSourceIpv6, f3VrfOspfRouterSlaacRoutesRedistributeToOspf=f3VrfOspfRouterSlaacRoutesRedistributeToOspf, f3L3TrafficIPIfOspfState=f3L3TrafficIPIfOspfState, f3L3FlowPointStorageType=f3L3FlowPointStorageType, f3L2N2AAclRuleHistoryRuleMatch=f3L2N2AAclRuleHistoryRuleMatch, f3L3TrafficIPv6Group=f3L3TrafficIPv6Group, f3L3TrafficIPInterfaceNdpAge=f3L3TrafficIPInterfaceNdpAge, f3L3TrafficIpInterfaceStatsDhcpTx=f3L3TrafficIpInterfaceStatsDhcpTx, f3L3QosShaperStatsFD=f3L3QosShaperStatsFD, f3L3QosPolicerHistoryFMRD=f3L3QosPolicerHistoryFMRD, cmL3FlowPointPortIndex=cmL3FlowPointPortIndex, f3L3TrafficArpIPAddress=f3L3TrafficArpIPAddress, f3L3TrafficOspfAsLsDbId=f3L3TrafficOspfAsLsDbId, f3L3TrafficIpv4StaticRouteEntry=f3L3TrafficIpv4StaticRouteEntry, cmL3FlowPointStatsAclRuleDrop=cmL3FlowPointStatsAclRuleDrop, f3L3TrafficOspfLinkLsDbSeqNum=f3L3TrafficOspfLinkLsDbSeqNum, f3L3AclRuleThresholdMonValue=f3L3AclRuleThresholdMonValue, f3L2A2NAclRuleThresholdIndex=f3L2A2NAclRuleThresholdIndex, NdpRaDefaultRouterPreference=NdpRaDefaultRouterPreference, f3L3TrafficIPv6PrefixStorageType=f3L3TrafficIPv6PrefixStorageType, f3L3FlowPointInnerTagMemberShipEnabled=f3L3FlowPointInnerTagMemberShipEnabled, cmL3QosShaperHistoryFR=cmL3QosShaperHistoryFR, f3L2A2NAclRuleTable=f3L2A2NAclRuleTable, cmL3QosPolicerStatsBytesOut=cmL3QosPolicerStatsBytesOut, cmL3FlowPointFragmentedPktsFwdEnabled=cmL3FlowPointFragmentedPktsFwdEnabled, f3IpPrefixTable=f3IpPrefixTable, f3L3TrafficIpInterfaceThresholdEntry=f3L3TrafficIpInterfaceThresholdEntry, f3L3FlowPointHCosGuaranteedBwLo=f3L3FlowPointHCosGuaranteedBwLo, cmL3QosPolicerStatsTable=cmL3QosPolicerStatsTable, f3L3TrafficIPv6IfMaxRAInterval=f3L3TrafficIPv6IfMaxRAInterval, f3L3Performance=f3L3Performance, f3L2A2NAclRuleProtocolControl=f3L2A2NAclRuleProtocolControl, f3L3QosPolicerCouplingFlag=f3L3QosPolicerCouplingFlag, f3L3TrafficOspfLsDbType=f3L3TrafficOspfLsDbType, f3L2N2AAclRuleEntry=f3L2N2AAclRuleEntry, cmL3FlowPointStatsTtlEqual1Drop=cmL3FlowPointStatsTtlEqual1Drop, f3VrfOspfRouterSlaacRoutesMetric=f3VrfOspfRouterSlaacRoutesMetric, f3VrfMaxFwdTableEntries=f3VrfMaxFwdTableEntries, f3L3QosPolicerCIRMaxLo=f3L3QosPolicerCIRMaxLo, f3L3TrafficIpInterfaceStatsTable=f3L3TrafficIpInterfaceStatsTable, cmL3QosShaperHistoryBTD=cmL3QosShaperHistoryBTD, f3L3TrafficIPIfDhcpRelayInfoOpt82Sub2Enabled=f3L3TrafficIPIfDhcpRelayInfoOpt82Sub2Enabled, f3L3TrafficIpv6RouteTable=f3L3TrafficIpv6RouteTable, f3L2A2NAclRuleInnerVlanVIDHighLimit=f3L2A2NAclRuleInnerVlanVIDHighLimit, f3L2A2NAclRuleThresholdVariable=f3L2A2NAclRuleThresholdVariable, cmL3QosShaperCIRLo=cmL3QosShaperCIRLo, f3L3AclRuleInnerVlanPcpLowLimit=f3L3AclRuleInnerVlanPcpLowLimit, f3L3TrafficIpv6StaticRouteMetric=f3L3TrafficIpv6StaticRouteMetric, f3L2A2NAclRuleSrcPortControl=f3L2A2NAclRuleSrcPortControl, f3L3TrafficBgpPeerIpVersion=f3L3TrafficBgpPeerIpVersion, f3L3FlowPointHistoryHopLimitDrop=f3L3FlowPointHistoryHopLimitDrop, f3L3TrafficOspfNeighborPriority=f3L3TrafficOspfNeighborPriority, cmL3QosShaperHistoryABRRL=cmL3QosShaperHistoryABRRL, f3L3AclRuleStatsAction=f3L3AclRuleStatsAction, f3L3FlowPointSecureState=f3L3FlowPointSecureState, f3L3TrafficOspfAreaId=f3L3TrafficOspfAreaId, f3L3TrafficIpInterfaceStatsAction=f3L3TrafficIpInterfaceStatsAction, f3L3AclRuleStatsRuleMatch=f3L3AclRuleStatsRuleMatch, f3L3AclRuleDstMacAddress=f3L3AclRuleDstMacAddress, f3L3TrafficIPInterfaceRAPrefixValidLifeTime=f3L3TrafficIPInterfaceRAPrefixValidLifeTime, f3L3FlowPointStatsIntervalType=f3L3FlowPointStatsIntervalType, f3L3AclRuleThresholdInterval=f3L3AclRuleThresholdInterval, f3L3TrafficIPInterfaceNdpTable=f3L3TrafficIPInterfaceNdpTable, f3L3QosShaperSecondaryState=f3L3QosShaperSecondaryState, f3VrfLoopbackInterfaceCIRHi=f3VrfLoopbackInterfaceCIRHi, f3L3FlowPointUntaggedMemberShipEnabled=f3L3FlowPointUntaggedMemberShipEnabled, f3L2N2AAclRuleOuterVlanVIDLowLimit=f3L2N2AAclRuleOuterVlanVIDLowLimit, f3L2A2NAclRuleThresholdValueHi=f3L2A2NAclRuleThresholdValueHi, f3L3TrafficBgpRouterTable=f3L3TrafficBgpRouterTable, f3L3TrafficIPv6IfLinkLocalAddr=f3L3TrafficIPv6IfLinkLocalAddr, f3VrfOspfRouterSlaacRoutesMetricType=f3VrfOspfRouterSlaacRoutesMetricType, f3L3FlowPointThresholdMonValue=f3L3FlowPointThresholdMonValue, BgpSessionStateType=BgpSessionStateType, f3L3TrafficIPIfIpv6LinkLocalAddrMode=f3L3TrafficIPIfIpv6LinkLocalAddrMode, f3L3TrafficIpInterfaceHistoryDhcpV6Rx=f3L3TrafficIpInterfaceHistoryDhcpV6Rx, f3L3AclRuleHistoryTable=f3L3AclRuleHistoryTable, f3L3TrafficIPInterfaceNdpRowStatus=f3L3TrafficIPInterfaceNdpRowStatus, cmL3QosPolicerStatsFMYD=cmL3QosPolicerStatsFMYD, f3L2A2NAclRuleSrcIpv4AddressHighLimit=f3L2A2NAclRuleSrcIpv4AddressHighLimit, f3VrfOspfRouterStorageType=f3VrfOspfRouterStorageType, f3L3QosShaperWredGreenMaxQueueThreshold=f3L3QosShaperWredGreenMaxQueueThreshold, f3L3TrafficBgpGroup=f3L3TrafficBgpGroup, VrfAction=VrfAction, f3L3TrafficIPInterfaceRAPrefixAdvertiseEnabled=f3L3TrafficIPInterfaceRAPrefixAdvertiseEnabled, f3L3AclRuleStatsValid=f3L3AclRuleStatsValid, f3L3QosPolicerStatsFMG=f3L3QosPolicerStatsFMG, cmL3QosPolicerEBS=cmL3QosPolicerEBS, cmL3FlowPointAclNoMatchDisposition=cmL3FlowPointAclNoMatchDisposition, f3L3TrafficBgpPeerAdminState=f3L3TrafficBgpPeerAdminState, f3L3TrafficIpv4RouteStatusX=f3L3TrafficIpv4RouteStatusX, f3L3TrafficIPv6IfOperationalState=f3L3TrafficIPv6IfOperationalState, f3L3TrafficBgpRouterIBgpAdminDistance=f3L3TrafficBgpRouterIBgpAdminDistance, f3L3TrafficBgpRouteV2Index=f3L3TrafficBgpRouteV2Index, cmL3QosPolicerEntry=cmL3QosPolicerEntry, f3L3QosPolicerThresholdVariable=f3L3QosPolicerThresholdVariable, cmL3QosShaperTable=cmL3QosShaperTable, f3L3QosPolicerHistoryAction=f3L3QosPolicerHistoryAction, f3L3TrafficIpv6StaticRouteEntry=f3L3TrafficIpv6StaticRouteEntry, f3DhcpRelayAgentAdminState=f3DhcpRelayAgentAdminState, f3L3TrafficIpInterfaceStatsIcmpV6WONdpRx=f3L3TrafficIpInterfaceStatsIcmpV6WONdpRx, f3L3QosPolicerStatsTable=f3L3QosPolicerStatsTable, f3L3TrafficBgpInRoutePath=f3L3TrafficBgpInRoutePath, f3L3QosShaperRowStatus=f3L3QosShaperRowStatus, f3L3FlowPointOuterVlanEthertype=f3L3FlowPointOuterVlanEthertype, f3L2A2NAclRuleDstMacAddressControl=f3L2A2NAclRuleDstMacAddressControl, f3L3AclRulePriority=f3L3AclRulePriority, f3VrfTraceRouteResult=f3VrfTraceRouteResult, f3L3FlowPointWfqGroupEirHi=f3L3FlowPointWfqGroupEirHi, cmL3QosPolicerHistoryFMYD=cmL3QosPolicerHistoryFMYD, f3L3TrafficIPIfActionX=f3L3TrafficIPIfActionX, f3L3FlowPointPortIndex=f3L3FlowPointPortIndex, f3L3TrafficIpInterfaceThresholdIndex=f3L3TrafficIpInterfaceThresholdIndex, cmL3QosPolicerIndex=cmL3QosPolicerIndex, f3L2N2AAclRuleOperation=f3L2N2AAclRuleOperation, cmL3QosShaperStatsEntry=cmL3QosShaperStatsEntry, f3IpPrefixGreaterOrEqualPrefixLen=f3IpPrefixGreaterOrEqualPrefixLen, f3L3TrafficIpInterfaceHistoryDhcpV6Tx=f3L3TrafficIpInterfaceHistoryDhcpV6Tx, f3L3TrafficIPv6InterfaceHistoryTime=f3L3TrafficIPv6InterfaceHistoryTime, BgpNextHopUpdateType=BgpNextHopUpdateType, f3L3TrafficIpv4RouteFlags=f3L3TrafficIpv4RouteFlags, f3L3TrafficBgpPeerAddressFamilyAdvPrefixRowStatus=f3L3TrafficBgpPeerAddressFamilyAdvPrefixRowStatus, f3L3QosPolicerCIRMaxHi=f3L3QosPolicerCIRMaxHi, f3L3TrafficOspfLsDbAge=f3L3TrafficOspfLsDbAge, f3L2N2AAclRuleParentIndex=f3L2N2AAclRuleParentIndex, f3L3TrafficOspfLinkLsDbId=f3L3TrafficOspfLinkLsDbId, f3L3TrafficIPIfDupAddrDetectRetransTimer=f3L3TrafficIPIfDupAddrDetectRetransTimer, f3L3AclRuleOuterVlanPcpLowLimit=f3L3AclRuleOuterVlanPcpLowLimit, f3L3TrafficIPIfOspfIfType=f3L3TrafficIPIfOspfIfType, f3L3Compliances=f3L3Compliances, f3L3TrafficIpv6AllRoutePrefixLength=f3L3TrafficIpv6AllRoutePrefixLength, f3L3TrafficIpv4StaticRouteDest=f3L3TrafficIpv4StaticRouteDest, f3DhcpRelayAgentRowStatus=f3DhcpRelayAgentRowStatus, f3L3TrafficBgpPeerAddressFamilyStorageType=f3L3TrafficBgpPeerAddressFamilyStorageType, f3L3TrafficArpEntryType=f3L3TrafficArpEntryType, f3IpPrefixRowStatus=f3IpPrefixRowStatus, cmL3FlowPointStatsAclDropNoMatch=cmL3FlowPointStatsAclDropNoMatch, f3L3TrafficBgpRouteV2Path=f3L3TrafficBgpRouteV2Path, f3L3TrafficIPIfIndex=f3L3TrafficIPIfIndex, f3L3TrafficIPv6AddrRowStatus=f3L3TrafficIPv6AddrRowStatus, f3L3TrafficIpv6AllRouteTable=f3L3TrafficIpv6AllRouteTable, f3L3TrafficIpInterfaceHistoryNdpRARx=f3L3TrafficIpInterfaceHistoryNdpRARx, f3VrfOspfRouterConnectedRoutesMetric=f3VrfOspfRouterConnectedRoutesMetric, f3L3TrafficBgpPeerAddressFamilyAdvPrefixStorageType=f3L3TrafficBgpPeerAddressFamilyAdvPrefixStorageType, cmL3FlowPointThresholdIndex=cmL3FlowPointThresholdIndex, f3L3QosShaperStatsABRRL=f3L3QosShaperStatsABRRL, cmL3FlowPointEntry=cmL3FlowPointEntry, f3L3QosShaperHistoryBT=f3L3QosShaperHistoryBT, f3L2N2AAclRuleIpV6FlowLabelControl=f3L2N2AAclRuleIpV6FlowLabelControl, f3L3TrafficOspfInterfaceOspfDeadInterval=f3L3TrafficOspfInterfaceOspfDeadInterval, f3L2A2NAclRuleEntry=f3L2A2NAclRuleEntry, f3DhcpV6RelayAgentRowStatus=f3DhcpV6RelayAgentRowStatus, f3L3TrafficArpTable=f3L3TrafficArpTable, f3L3AclRuleHistoryTime=f3L3AclRuleHistoryTime, f3L3TrafficIPv6IfDhcpRapidCommitControlEnabled=f3L3TrafficIPv6IfDhcpRapidCommitControlEnabled, f3L3TrafficIPIfRaDNSSList=f3L3TrafficIPIfRaDNSSList, f3L3TrafficIPv6InterfaceHistoryNdpRATx=f3L3TrafficIPv6InterfaceHistoryNdpRATx, cmL3QosShaperStatsTable=cmL3QosShaperStatsTable, f3L3TrafficBgpPeerOperationalState=f3L3TrafficBgpPeerOperationalState, f3L3TrafficBgpPeerUpdateSourceInterface=f3L3TrafficBgpPeerUpdateSourceInterface, cmL3QosShaperStatsValid=cmL3QosShaperStatsValid, PYSNMP_MODULE_ID=f3L3MIB, f3L2A2NAclRuleStatsEntry=f3L2A2NAclRuleStatsEntry, f3L3TrafficOspfAsLsDbRouterId=f3L3TrafficOspfAsLsDbRouterId, f3L3TrafficOspfAreaEntry=f3L3TrafficOspfAreaEntry, f3DhcpRelayAgentTable=f3DhcpRelayAgentTable, f3L3TrafficOspfInterfaceId=f3L3TrafficOspfInterfaceId, f3L3FlowPointStatsFTD=f3L3FlowPointStatsFTD, f3L3TrafficIPIfName=f3L3TrafficIPIfName, f3L3TrafficIPv6InterfaceStatsNdpNSTx=f3L3TrafficIPv6InterfaceStatsNdpNSTx, f3L3TrafficIPv6InterfaceHistoryNdpNSRx=f3L3TrafficIPv6InterfaceHistoryNdpNSRx, f3L3QosPolicerEIRLo=f3L3QosPolicerEIRLo, f3L3TrafficIPv6PrefixPreferredLifeTime=f3L3TrafficIPv6PrefixPreferredLifeTime, f3L3QosPolicerStatsEntry=f3L3QosPolicerStatsEntry, f3L3TrafficIpv4RouteMetric=f3L3TrafficIpv4RouteMetric, f3L3QosPolicerHistoryABR=f3L3QosPolicerHistoryABR, f3L3AclRuleEntry=f3L3AclRuleEntry, f3DhcpRelayAgentSecondaryState=f3DhcpRelayAgentSecondaryState, f3VrfOspfRouterEntry=f3VrfOspfRouterEntry, f3L3TrafficBgpRouterStorageType=f3L3TrafficBgpRouterStorageType, cmL3QosPolicerHistoryABR=cmL3QosPolicerHistoryABR, f3L2N2AAclRuleOuterVlanPcpHighLimit=f3L2N2AAclRuleOuterVlanPcpHighLimit, f3L3TrafficIpInterfaceThresholdInterval=f3L3TrafficIpInterfaceThresholdInterval, cmL3QosPolicerStatsBytesIn=cmL3QosPolicerStatsBytesIn, BgpPeerAddressFamilyNameType=BgpPeerAddressFamilyNameType, cmL3FlowPointStatsFTD=cmL3FlowPointStatsFTD, f3L2N2AAclRuleActive=f3L2N2AAclRuleActive, f3L3TrafficIpv4AllRouteStorageType=f3L3TrafficIpv4AllRouteStorageType, f3L3QosShaperStatsBREDD=f3L3QosShaperStatsBREDD, f3L3TrafficBgpInRouteNextHop=f3L3TrafficBgpInRouteNextHop, f3DhcpV6RelayAgentServerIpAddress=f3DhcpV6RelayAgentServerIpAddress, f3L3TrafficIPv6IfType=f3L3TrafficIPv6IfType, f3L3QosPolicerOperationalState=f3L3QosPolicerOperationalState, f3L3AclRuleProtocolNumber=f3L3AclRuleProtocolNumber, f3L2A2NAclRuleDstIpV6AddressControl=f3L2A2NAclRuleDstIpV6AddressControl, f3L3TrafficOspfInterfaceOspfRtrPriority=f3L3TrafficOspfInterfaceOspfRtrPriority, f3L3QosPolicerAlgorithm=f3L3QosPolicerAlgorithm, f3L3TrafficIpInterfaceHistoryTime=f3L3TrafficIpInterfaceHistoryTime, cmL3QosPolicerRank=cmL3QosPolicerRank, cmL3QosShaperHistoryABRRLR=cmL3QosShaperHistoryABRRLR, f3L3TrafficIPv6NdpMacAddress=f3L3TrafficIPv6NdpMacAddress, f3L3AclRuleDstPortLowLimit=f3L3AclRuleDstPortLowLimit, f3L3TrafficIPv6IfRowStatus=f3L3TrafficIPv6IfRowStatus, f3VrfAlias=f3VrfAlias, f3L3AclRuleSrcPortLowLimit=f3L3AclRuleSrcPortLowLimit, f3L3FlowPointPortTypeIndex=f3L3FlowPointPortTypeIndex, cmL3FlowPointThresholdEntry=cmL3FlowPointThresholdEntry, f3L2A2NAclRuleInnerVlanPcpHighLimit=f3L2A2NAclRuleInnerVlanPcpHighLimit, f3L3QosShaperCIRHi=f3L3QosShaperCIRHi, f3VrfLoopbackInterfaceIpMode=f3VrfLoopbackInterfaceIpMode, f3L3TrafficIPv6IfDefaultGateway=f3L3TrafficIPv6IfDefaultGateway, cmL3QosPolicerColorMode=cmL3QosPolicerColorMode, f3L3TrafficIPv6NdpEntry=f3L3TrafficIPv6NdpEntry, f3DhcpRelayAgentEntry=f3DhcpRelayAgentEntry, f3L3AclRuleHistoryAction=f3L3AclRuleHistoryAction, f3L3TrafficBgpPeerPeerRestartTime=f3L3TrafficBgpPeerPeerRestartTime, f3L3AclRuleSrcMacAddress=f3L3AclRuleSrcMacAddress, f3L3FlowPointIndex=f3L3FlowPointIndex, f3L2N2AAclRuleOuterVlanVIDControl=f3L2N2AAclRuleOuterVlanVIDControl, cmL3QosPolicerAlgorithm=cmL3QosPolicerAlgorithm, cmL3FlowPointHistoryTable=cmL3FlowPointHistoryTable, f3L3TrafficIPv6IfRaManagedAddressConfigEnabled=f3L3TrafficIPv6IfRaManagedAddressConfigEnabled, f3L3QosShaperThresholdVariable=f3L3QosShaperThresholdVariable, f3VrfLoopbackInterfaceCIRLo=f3VrfLoopbackInterfaceCIRLo, f3VrfLoopbackInterfaceName=f3VrfLoopbackInterfaceName, cmL3QosShaperThresholdCrossingAlert=cmL3QosShaperThresholdCrossingAlert, f3L3QosPolicerColorMode=f3L3QosPolicerColorMode, f3L3TrafficIPv6InterfaceHistoryNdpRSTx=f3L3TrafficIPv6InterfaceHistoryNdpRSTx, f3L3QosShaperHistoryFD=f3L3QosShaperHistoryFD, f3L3TrafficIPv6InterfaceHistoryIndex=f3L3TrafficIPv6InterfaceHistoryIndex, f3L2A2NAclRuleIpv4PriorityLowLimit=f3L2A2NAclRuleIpv4PriorityLowLimit, f3L2N2AAclRuleDynamicSrcMacAddressControl=f3L2N2AAclRuleDynamicSrcMacAddressControl, f3L3FlowPointHistoryFragmentedDropAcl=f3L3FlowPointHistoryFragmentedDropAcl, cmL3QosPolicerPolicingEnabled=cmL3QosPolicerPolicingEnabled, f3L3TrafficIPIfAdminState=f3L3TrafficIPIfAdminState, cmL3FlowPointHistoryFMG=cmL3FlowPointHistoryFMG, f3L3FlowPointStatsAclRuleDrop=f3L3FlowPointStatsAclRuleDrop, f3IpPrefixListDefaultDisposition=f3IpPrefixListDefaultDisposition, f3L3QosShaperCIRLo=f3L3QosShaperCIRLo, f3L3AclRuleDstIpv4AddressLowLimit=f3L3AclRuleDstIpv4AddressLowLimit, f3L3TrafficOspfAreaTable=f3L3TrafficOspfAreaTable, f3L3QosPolicerAdminState=f3L3QosPolicerAdminState, f3L3TrafficOspfAreaIfMemberObject=f3L3TrafficOspfAreaIfMemberObject, f3L2A2NAclRuleSummary=f3L2A2NAclRuleSummary, f3L2N2AAclRuleIpv4PriorityHighLimit=f3L2N2AAclRuleIpv4PriorityHighLimit)
mibBuilder.exportSymbols("F3-L3-MIB", f3L3QosPolicerHistoryFMYD=f3L3QosPolicerHistoryFMYD, f3L3FlowPointInnerVlanEthertype=f3L3FlowPointInnerVlanEthertype, f3L3FlowPointHistoryTtlEqual1Drop=f3L3FlowPointHistoryTtlEqual1Drop, f3L3TrafficIPIfRaRDNSSLifeTime=f3L3TrafficIPIfRaRDNSSLifeTime, f3L3QosShaperIndex=f3L3QosShaperIndex, f3L3TrafficIPIfOspfDeadInterval=f3L3TrafficIPIfOspfDeadInterval, f3VrfOspfRouterId=f3VrfOspfRouterId, f3L3TrafficIPIfOspfAreaId=f3L3TrafficIPIfOspfAreaId, f3L3TrafficIPIfAction=f3L3TrafficIPIfAction, f3L3TrafficIpv6StaticRouteDest=f3L3TrafficIpv6StaticRouteDest, f3L2N2AAclRuleStatsTable=f3L2N2AAclRuleStatsTable, f3L3TrafficIPv6InterfaceHistoryAction=f3L3TrafficIPv6InterfaceHistoryAction, f3L3TrafficIpv6AllRouteInterface=f3L3TrafficIpv6AllRouteInterface, f3L3QosShaperStatsIndex=f3L3QosShaperStatsIndex, f3L3TrafficIPIfDhcpRapidCommitControlEnabled=f3L3TrafficIPIfDhcpRapidCommitControlEnabled, f3L3TrafficOspfInterfaceOspfBackupDesignatedRouterId=f3L3TrafficOspfInterfaceOspfBackupDesignatedRouterId, cmL3QosShaperWfqWeight=cmL3QosShaperWfqWeight, cmL3FlowPointThresholdValueHi=cmL3FlowPointThresholdValueHi, f3L3TrafficArpRowStatus=f3L3TrafficArpRowStatus, f3L3TrafficIPv6NdpStorageType=f3L3TrafficIPv6NdpStorageType, f3L3QosPolicerStatsBytesOut=f3L3QosPolicerStatsBytesOut, f3IpPrefixDisposition=f3IpPrefixDisposition, f3L3TrafficIPIfOspfRtrPriority=f3L3TrafficIPIfOspfRtrPriority, f3L3TrafficIPInterfaceOspfTable=f3L3TrafficIPInterfaceOspfTable, f3L3TrafficOspfAreaIndex=f3L3TrafficOspfAreaIndex, f3L3QosShaperStatsFREDD=f3L3QosShaperStatsFREDD, f3L2N2AAclRuleSrcIpV6Address=f3L2N2AAclRuleSrcIpV6Address, f3L3TrafficIpInterfaceStatsDhcpV6Rx=f3L3TrafficIpInterfaceStatsDhcpV6Rx, f3DhcpRelayAgentIpVersion=f3DhcpRelayAgentIpVersion, f3L3TrafficOspfAreaRowStatus=f3L3TrafficOspfAreaRowStatus, f3DhcpRelayAgentServerIpAddress=f3DhcpRelayAgentServerIpAddress, f3L3TrafficIPv6PrefixRowStatus=f3L3TrafficIPv6PrefixRowStatus, f3L3TrafficBgpPeerUpdateSourceType=f3L3TrafficBgpPeerUpdateSourceType, f3L2A2NAclRuleSrcMacAddressControl=f3L2A2NAclRuleSrcMacAddressControl, f3L3TrafficOspfAreaIfMemberStorageType=f3L3TrafficOspfAreaIfMemberStorageType, cmL3FlowPointThresholdVariable=cmL3FlowPointThresholdVariable, f3L3AclRuleDynamicSrcMacAddressControl=f3L3AclRuleDynamicSrcMacAddressControl, f3L3AclRuleDstIpV6AddressPrefixLen=f3L3AclRuleDstIpV6AddressPrefixLen, f3L3FlowPointThresholdEntry=f3L3FlowPointThresholdEntry, f3L3TrafficIPInterfaceNdpMacAddress=f3L3TrafficIPInterfaceNdpMacAddress, cmL3FlowPointIndex=cmL3FlowPointIndex, f3L3TrafficBgpRouteV2Metric=f3L3TrafficBgpRouteV2Metric, f3L3TrafficIpInterfaceHistoryNdpNSRx=f3L3TrafficIpInterfaceHistoryNdpNSRx, f3L2N2AAclRuleHistoryValid=f3L2N2AAclRuleHistoryValid, f3DhcpV6RelayAgentClientTrafficIpIfMemberTable=f3DhcpV6RelayAgentClientTrafficIpIfMemberTable, cmL3QosPolicerEIRMaxHi=cmL3QosPolicerEIRMaxHi, f3L2N2AAclRuleIpv4PriorityLowLimit=f3L2N2AAclRuleIpv4PriorityLowLimit, cmL3QosPolicerStatsIndex=cmL3QosPolicerStatsIndex, cmL3QosPolicerTable=cmL3QosPolicerTable, f3L3FlowPointPolicingEnabled=f3L3FlowPointPolicingEnabled, f3L3FlowPointHistoryFMG=f3L3FlowPointHistoryFMG, f3L3QosShaperStatsABRRLR=f3L3QosShaperStatsABRRLR, f3L3TrafficIPIfOspfSimpleAuthKey=f3L3TrafficIPIfOspfSimpleAuthKey, BgpRouterActionType=BgpRouterActionType, cmL3FlowPointStatsFrameRx=cmL3FlowPointStatsFrameRx, f3L3TrafficIpInterfaceThresholdMonValue=f3L3TrafficIpInterfaceThresholdMonValue, cmL3QosPolicerThresholdValueHi=cmL3QosPolicerThresholdValueHi, cmL3QosShaperRowStatus=cmL3QosShaperRowStatus, f3L3FlowPointEntry=f3L3FlowPointEntry, f3L3QosShaperHistoryTable=f3L3QosShaperHistoryTable, f3L3FlowPointStatsFMRD=f3L3FlowPointStatsFMRD, f3L3TrafficIPv6InterfaceStatsIndex=f3L3TrafficIPv6InterfaceStatsIndex, f3L3TrafficOspfAreaCryptoKeyId=f3L3TrafficOspfAreaCryptoKeyId, f3L3TrafficIPv6InterfaceStatsIntervalType=f3L3TrafficIPv6InterfaceStatsIntervalType, f3L3QosShaperThresholdEntry=f3L3QosShaperThresholdEntry, f3L3AclRulePriorityLowLimit=f3L3AclRulePriorityLowLimit, cmL3QosPolicerHistoryAction=cmL3QosPolicerHistoryAction, cmL3FlowPointSecondaryState=cmL3FlowPointSecondaryState, f3L3TrafficArpMacAddress=f3L3TrafficArpMacAddress, f3L2N2AAclRuleAdminState=f3L2N2AAclRuleAdminState, f3L3TrafficBgpRIBRouteIndex=f3L3TrafficBgpRIBRouteIndex, f3L3TrafficOspfV3NeighborDeadTime=f3L3TrafficOspfV3NeighborDeadTime, f3L2N2AAclRuleThresholdTable=f3L2N2AAclRuleThresholdTable, f3L3TrafficBgpRIBRouteMetric=f3L3TrafficBgpRIBRouteMetric, f3L2N2AAclRuleEtherType=f3L2N2AAclRuleEtherType, f3L3TrafficIpInterfaceHistoryNdpRSRx=f3L3TrafficIpInterfaceHistoryNdpRSRx, f3L3TrafficIPv6InterfaceThresholdValueLo=f3L3TrafficIPv6InterfaceThresholdValueLo, f3L3QosPolicerHistoryEntry=f3L3QosPolicerHistoryEntry, f3L2A2NAclRuleInnerVlanPcpControl=f3L2A2NAclRuleInnerVlanPcpControl, f3L3TrafficIPv6IfRaDNSSList=f3L3TrafficIPv6IfRaDNSSList, f3VrfOspfRouterConvergenceTime=f3VrfOspfRouterConvergenceTime, f3L3TrafficOspfV3NeighborState=f3L3TrafficOspfV3NeighborState, f3L3TrafficBgpRouterOperationalState=f3L3TrafficBgpRouterOperationalState, f3L3FlowPointSecureBlockingEnabled=f3L3FlowPointSecureBlockingEnabled, f3L3FlowPointOperationalState=f3L3FlowPointOperationalState, f3VrfSecondaryState=f3VrfSecondaryState, f3L3TrafficIpv6AllRouteNextHop=f3L3TrafficIpv6AllRouteNextHop, f3L3TrafficIpInterfaceStatsArpReqTx=f3L3TrafficIpInterfaceStatsArpReqTx, f3L3TrafficIPInterfaceRAPrefixEntry=f3L3TrafficIPInterfaceRAPrefixEntry, f3L2N2AAclRuleSrcIpv4AddressControl=f3L2N2AAclRuleSrcIpv4AddressControl, f3L2A2NAclRuleOuterVlanPcpHighLimit=f3L2A2NAclRuleOuterVlanPcpHighLimit, f3L2N2AAclRuleOuterVlanVIDHighLimit=f3L2N2AAclRuleOuterVlanVIDHighLimit, f3L3TrafficIpInterfaceHistoryNdpRATx=f3L3TrafficIpInterfaceHistoryNdpRATx, f3VrfOspfRouterAdminState=f3VrfOspfRouterAdminState, f3L2A2NAclRuleSrcMacAddressMask=f3L2A2NAclRuleSrcMacAddressMask, f3L3TrafficIpInterfaceStatsNdpRSTx=f3L3TrafficIpInterfaceStatsNdpRSTx, f3L3TrafficBgpRouteMetric=f3L3TrafficBgpRouteMetric, cmL3QosPolicerThresholdTable=cmL3QosPolicerThresholdTable, f3L2A2NAclRuleDstIpv4AddressControl=f3L2A2NAclRuleDstIpv4AddressControl, cmL3QosPolicerOperationalState=cmL3QosPolicerOperationalState, f3L3TrafficBgpPeerAddressFamilyName=f3L3TrafficBgpPeerAddressFamilyName, f3L2N2AAclRuleTable=f3L2N2AAclRuleTable, f3L3TrafficArpEntry=f3L3TrafficArpEntry, f3DhcpRelayAgentOperationalState=f3DhcpRelayAgentOperationalState, f3L3QosShaperThresholdInterval=f3L3QosShaperThresholdInterval, f3L2A2NAclRuleOuterVlanVIDLowLimit=f3L2A2NAclRuleOuterVlanVIDLowLimit, f3L3TrafficIpv4StaticRouteSourceForwardingEnable=f3L3TrafficIpv4StaticRouteSourceForwardingEnable, f3L3FlowPointStatsFMG=f3L3FlowPointStatsFMG, f3L2A2NAclRuleInnerVlanPcpLowLimit=f3L2A2NAclRuleInnerVlanPcpLowLimit, f3L3FlowPointOuterTagMemberShipVlanId=f3L3FlowPointOuterTagMemberShipVlanId, cmL3QosShaperHistoryAction=cmL3QosShaperHistoryAction, cmL3QosShaperCOS=cmL3QosShaperCOS, f3L3AclRuleStorageType=f3L3AclRuleStorageType, cmL3FlowPointHistoryNoRouteDrop=cmL3FlowPointHistoryNoRouteDrop, cmL3QosShaperHistoryFREDD=cmL3QosShaperHistoryFREDD, f3L3TrafficIPInterfaceNdpReachabilityState=f3L3TrafficIPInterfaceNdpReachabilityState, f3L3TrafficIPIfDhcpHostNameType=f3L3TrafficIPIfDhcpHostNameType, cmL3FlowPointHistoryAclDropNoMatch=cmL3FlowPointHistoryAclDropNoMatch, f3L3TrafficOspfGroup=f3L3TrafficOspfGroup, f3L3QosShaperHistoryFTD=f3L3QosShaperHistoryFTD, f3L3FlowPointHistoryFMRD=f3L3FlowPointHistoryFMRD, DhcpRelayInterfaceSide=DhcpRelayInterfaceSide, cmL3QosPolicerEIRLo=cmL3QosPolicerEIRLo, f3L3Objects=f3L3Objects, f3L2A2NAclRuleDstIpV6Address=f3L2A2NAclRuleDstIpV6Address, f3L3AclRuleDynamicSrcIpControl=f3L3AclRuleDynamicSrcIpControl, f3L3TrafficBgpPeerAddressFamilyIndex=f3L3TrafficBgpPeerAddressFamilyIndex, cmL3QosPolicerStatsIntervalType=cmL3QosPolicerStatsIntervalType, f3L3TrafficIPv6IfMtu=f3L3TrafficIPv6IfMtu, cmL3QosPolicerHistoryEntry=cmL3QosPolicerHistoryEntry, f3VrfIndex=f3VrfIndex, f3L3TrafficOspfAsLsDbEntry=f3L3TrafficOspfAsLsDbEntry, f3L3QosShaperStatsValid=f3L3QosShaperStatsValid, f3L3TrafficIpInterfaceHistoryNdpNARx=f3L3TrafficIpInterfaceHistoryNdpNARx, f3VrfLoopbackInterfaceNetMask=f3VrfLoopbackInterfaceNetMask, f3L3TrafficBgpInRouteNetwork=f3L3TrafficBgpInRouteNetwork, cmL3FlowPointHCosGuaranteedBwLo=cmL3FlowPointHCosGuaranteedBwLo, f3L3TrafficIPv6NdpIPv6Addr=f3L3TrafficIPv6NdpIPv6Addr, f3L2A2NAclRuleTcpFlagsControl=f3L2A2NAclRuleTcpFlagsControl, f3L3TrafficIPv6InterfaceThresholdMonValue=f3L3TrafficIPv6InterfaceThresholdMonValue, f3L2N2AAclRuleStatsEntry=f3L2N2AAclRuleStatsEntry, f3L3TrafficIPv6IfIcmpErrorMsgRateLimit=f3L3TrafficIPv6IfIcmpErrorMsgRateLimit, cmL3FlowPointHistoryValid=cmL3FlowPointHistoryValid, f3L2N2AAclRuleSrcPortHighLimit=f3L2N2AAclRuleSrcPortHighLimit, cmL3FlowPointHistoryIndex=cmL3FlowPointHistoryIndex, BgpRouteFilterDirection=BgpRouteFilterDirection, f3L2N2AAclRuleStorageType=f3L2N2AAclRuleStorageType, cmL3FlowPointCOS=cmL3FlowPointCOS, f3L3TrafficIPIfMTU=f3L3TrafficIPIfMTU, cmL3QosPolicerAdminState=cmL3QosPolicerAdminState, f3L3AclRuleActive=f3L3AclRuleActive, f3L3TrafficIPv6IfStatelessAddrAutoconfigEnabled=f3L3TrafficIPv6IfStatelessAddrAutoconfigEnabled, f3L3TrafficIpInterfaceStatsIcmpV6WONdpTx=f3L3TrafficIpInterfaceStatsIcmpV6WONdpTx, f3L3QosPolicerHistoryFMG=f3L3QosPolicerHistoryFMG, f3L3FlowPointHCosMaximumBwLo=f3L3FlowPointHCosMaximumBwLo, f3L3TrafficBgpPeerKeepAliveTime=f3L3TrafficBgpPeerKeepAliveTime, f3L3TrafficOspfV3NeighborRouterId=f3L3TrafficOspfV3NeighborRouterId, f3L3QosPolicerHistoryTable=f3L3QosPolicerHistoryTable, f3L2A2NAclRuleThresholdCrossingAlert=f3L2A2NAclRuleThresholdCrossingAlert, f3L2N2AAclRuleDstPortControl=f3L2N2AAclRuleDstPortControl, f3L2N2AAclRuleThresholdEntry=f3L2N2AAclRuleThresholdEntry, f3IpPrefix=f3IpPrefix, f3L3TrafficIPIfRaDhcpMoreConfigEnabled=f3L3TrafficIPIfRaDhcpMoreConfigEnabled, f3L2N2AAclRuleDstIpv4AddressControl=f3L2N2AAclRuleDstIpv4AddressControl, f3L3TrafficIPIfRaRDNSSOptionEnabled=f3L3TrafficIPIfRaRDNSSOptionEnabled, f3L3TrafficOspfInterfaceRowStatus=f3L3TrafficOspfInterfaceRowStatus, f3L3AclRuleThresholdEntry=f3L3AclRuleThresholdEntry, f3L3TrafficBgpRouteEntry=f3L3TrafficBgpRouteEntry, f3L2A2NAclRuleTcpFlags=f3L2A2NAclRuleTcpFlags, cmL3QosPolicerEIRMaxLo=cmL3QosPolicerEIRMaxLo, f3L3TrafficBgpRouterRowStatus=f3L3TrafficBgpRouterRowStatus, f3L3QosPolicerEIRMaxHi=f3L3QosPolicerEIRMaxHi, f3L3AclRuleIpV6FlowLabelControl=f3L3AclRuleIpV6FlowLabelControl, f3L3TrafficBgpPeerAddressFamilyNextHopType=f3L3TrafficBgpPeerAddressFamilyNextHopType, f3L3FlowPointStatsFrameRx=f3L3FlowPointStatsFrameRx, cmL3FlowPointHistoryFrameTx=cmL3FlowPointHistoryFrameTx, f3L2A2NAclRuleThresholdEntry=f3L2A2NAclRuleThresholdEntry, f3L2A2NAclRuleSrcPortLowLimit=f3L2A2NAclRuleSrcPortLowLimit, f3VrfOspfRouterStaticRoutesRedistributeToOspf=f3VrfOspfRouterStaticRoutesRedistributeToOspf, f3L3TrafficIPIfType=f3L3TrafficIPIfType, f3L3TrafficBgpRoutePath=f3L3TrafficBgpRoutePath, f3L3ObjectsGroup=f3L3ObjectsGroup, f3L3TrafficOspfLinkLsDbType=f3L3TrafficOspfLinkLsDbType, f3L3TrafficBgpRouterEBgpAdminDistance=f3L3TrafficBgpRouterEBgpAdminDistance, cmL3QosPolicerHistoryValid=cmL3QosPolicerHistoryValid, f3L3TrafficBgpPeerMultihopControl=f3L3TrafficBgpPeerMultihopControl, f3L3TrafficIpv4StaticRouteStorageType=f3L3TrafficIpv4StaticRouteStorageType, f3L3TrafficIPIfDhcpRelayUserClassOpt77=f3L3TrafficIPIfDhcpRelayUserClassOpt77, f3L3FlowPointStatsFrameTx=f3L3FlowPointStatsFrameTx, cmL3QosShaperHistoryBT=cmL3QosShaperHistoryBT, f3L3TrafficIpInterfaceStatsNdpNSTx=f3L3TrafficIpInterfaceStatsNdpNSTx, f3L2A2NAclRuleParentIndex=f3L2A2NAclRuleParentIndex, f3L3AclRuleStatsIntervalType=f3L3AclRuleStatsIntervalType, f3VrfLoopbackInterfaceIpv6AddrPrefixLen=f3VrfLoopbackInterfaceIpv6AddrPrefixLen, f3L3TrafficIpv6AllRouteStatus=f3L3TrafficIpv6AllRouteStatus, f3L3TrafficIpInterfaceStatsEntry=f3L3TrafficIpInterfaceStatsEntry, f3VrfEntry=f3VrfEntry, f3L3TrafficIpInterfaceStatsValid=f3L3TrafficIpInterfaceStatsValid, IfIpAddressSourceType=IfIpAddressSourceType, f3L3TrafficIPIfDefaultGateway=f3L3TrafficIPIfDefaultGateway, f3L3TrafficBgpPeerIpv4Addr=f3L3TrafficBgpPeerIpv4Addr, f3L2A2NAclRuleProtocolNumber=f3L2A2NAclRuleProtocolNumber, cmL3QosPolicerThresholdMonValue=cmL3QosPolicerThresholdMonValue, f3L3QosShaperHistoryEntry=f3L3QosShaperHistoryEntry, f3L3TrafficOspfNeighborTable=f3L3TrafficOspfNeighborTable, cmL3QosShaperStatsAction=cmL3QosShaperStatsAction, cmL3FlowPointThresholdCrossingAlert=cmL3FlowPointThresholdCrossingAlert, TrafficIpRouteStatusType=TrafficIpRouteStatusType, f3L2A2NAclRuleThresholdInterval=f3L2A2NAclRuleThresholdInterval, f3L2N2AAclRuleSrcIpv4AddressLowLimit=f3L2N2AAclRuleSrcIpv4AddressLowLimit, f3L3TrafficOspfInterfaceOspfCryptoKeyId=f3L3TrafficOspfInterfaceOspfCryptoKeyId, f3L3TrafficIPIfIpv6StatelessAddrAutoconfigEnabled=f3L3TrafficIPIfIpv6StatelessAddrAutoconfigEnabled, f3L3TrafficIPIfRowStatus=f3L3TrafficIPIfRowStatus, f3L3TrafficIpv6AllRouteStorageType=f3L3TrafficIpv6AllRouteStorageType, f3L3TrafficIPv6InterfaceStatsDhcpV6Tx=f3L3TrafficIPv6InterfaceStatsDhcpV6Tx, cmL3QosPolicerCIRMaxHi=cmL3QosPolicerCIRMaxHi, f3L3AclRuleDstPortControl=f3L3AclRuleDstPortControl, f3DhcpV6RelayAgentAlias=f3DhcpV6RelayAgentAlias, f3L3TrafficOspfNeighborEntry=f3L3TrafficOspfNeighborEntry, cmL3FlowPointAdminState=cmL3FlowPointAdminState, f3VrfIpVersion=f3VrfIpVersion, f3L2N2AAclRuleOuterVlanDeiControl=f3L2N2AAclRuleOuterVlanDeiControl, f3L3TrafficIPv6InterfaceHistoryTable=f3L3TrafficIPv6InterfaceHistoryTable, cmL3QosShaperHistoryIndex=cmL3QosShaperHistoryIndex, f3L3AclRuleThresholdIndex=f3L3AclRuleThresholdIndex, cmL3QosShaperStatsBT=cmL3QosShaperStatsBT, f3IpPrefixListName=f3IpPrefixListName, f3L3TrafficIPv6InterfaceHistoryNdpRARx=f3L3TrafficIPv6InterfaceHistoryNdpRARx, f3L3TrafficIPInterfaceNdpType=f3L3TrafficIPInterfaceNdpType, f3L2A2NAclRuleAlias=f3L2A2NAclRuleAlias, f3L2N2AAclRuleEtherTypeControl=f3L2N2AAclRuleEtherTypeControl, f3L2N2AAclRuleRowStatus=f3L2N2AAclRuleRowStatus, f3L3TrafficIPIfDhcpRelayUserClassOpt77Control=f3L3TrafficIPIfDhcpRelayUserClassOpt77Control, f3L3TrafficOspfV3NeighborEntry=f3L3TrafficOspfV3NeighborEntry, f3L3TrafficOspfV3NeighborRole=f3L3TrafficOspfV3NeighborRole, f3L2N2AAclRuleSrcPortLowLimit=f3L2N2AAclRuleSrcPortLowLimit, f3VrfTrafficIpIfMemberTable=f3VrfTrafficIpIfMemberTable, f3VrfLoopbackInterfaceIndex=f3VrfLoopbackInterfaceIndex, f3DhcpV6RelayAgentClientTrafficIpIfMemberObject=f3DhcpV6RelayAgentClientTrafficIpIfMemberObject, f3L3AclRuleOuterVlanPcpHighLimit=f3L3AclRuleOuterVlanPcpHighLimit, f3L3TrafficIpInterfaceHistoryArpReplyRx=f3L3TrafficIpInterfaceHistoryArpReplyRx, f3L2N2AAclRuleOuterVlanPcpLowLimit=f3L2N2AAclRuleOuterVlanPcpLowLimit, f3L2N2AAclRuleStatsIntervalType=f3L2N2AAclRuleStatsIntervalType, f3L3TrafficIpv6StaticRouteRowStatus=f3L3TrafficIpv6StaticRouteRowStatus, f3L3Conformance=f3L3Conformance, f3L3TrafficIPIfRouterLifeTime=f3L3TrafficIPIfRouterLifeTime, f3L3TrafficOspfLinkLsDbRtrPriority=f3L3TrafficOspfLinkLsDbRtrPriority, f3L3TrafficIpv4AllRouteSourceForwardingEnable=f3L3TrafficIpv4AllRouteSourceForwardingEnable, f3L3TrafficOspfInterfaceOspfCost=f3L3TrafficOspfInterfaceOspfCost, f3L3QosShaperStatsTable=f3L3QosShaperStatsTable, cmL3QosShaperThresholdMonValue=cmL3QosShaperThresholdMonValue, f3L3FlowPointHistoryIndex=f3L3FlowPointHistoryIndex, f3L3TrafficOspfInterfacePassiveControl=f3L3TrafficOspfInterfacePassiveControl, RouteFlags=RouteFlags)
mibBuilder.exportSymbols("F3-L3-MIB", f3L3AclRuleTable=f3L3AclRuleTable, f3L3TrafficOspfAreaStorageType=f3L3TrafficOspfAreaStorageType, f3DhcpRelayAgentOp82SubOp9Value=f3DhcpRelayAgentOp82SubOp9Value, f3L2A2NAclRuleDstMacAddressMask=f3L2A2NAclRuleDstMacAddressMask, IpPrefixDispositionType=IpPrefixDispositionType, f3L3TrafficIPv6InterfaceThresholdVariable=f3L3TrafficIPv6InterfaceThresholdVariable, f3L2N2AAclRuleDynamicSrcIpControl=f3L2N2AAclRuleDynamicSrcIpControl, f3L3TrafficBgpRouteV2LocalPreference=f3L3TrafficBgpRouteV2LocalPreference, f3L2A2NAclRuleDstIpv4AddressLowLimit=f3L2A2NAclRuleDstIpv4AddressLowLimit, f3L2N2AAclRuleOuterVlanDei=f3L2N2AAclRuleOuterVlanDei, f3L3FlowPointDscpOverwriteControl=f3L3FlowPointDscpOverwriteControl, f3L3TrafficBgpPeerAddressFamilyRedistDhcpRoute=f3L3TrafficBgpPeerAddressFamilyRedistDhcpRoute, cmL3FlowPointStatsTable=cmL3FlowPointStatsTable, f3DhcpV6RelayAgentServerIpInteface=f3DhcpV6RelayAgentServerIpInteface, f3L3AclRuleHistoryIndex=f3L3AclRuleHistoryIndex, f3L3TrafficIPv6IfMinRAInterval=f3L3TrafficIPv6IfMinRAInterval, f3L3TrafficIPv6InterfaceStatsValid=f3L3TrafficIPv6InterfaceStatsValid, f3L3TrafficIPInterfaceNdpStorageType=f3L3TrafficIPInterfaceNdpStorageType, cmL3QosShaperEIRHi=cmL3QosShaperEIRHi, f3L3QosPolicerThresholdMonValue=f3L3QosPolicerThresholdMonValue, f3L2N2AAclRuleDstMacAddress=f3L2N2AAclRuleDstMacAddress, f3L3TrafficBgpRouterDhcpRoutesRedistControl=f3L3TrafficBgpRouterDhcpRoutesRedistControl, f3L2N2AAclRuleDstMacAddressControl=f3L2N2AAclRuleDstMacAddressControl, f3L3TrafficIPInterfaceIPv6AddressAssignMode=f3L3TrafficIPInterfaceIPv6AddressAssignMode, f3L3AclRuleOuterVlanVIDControl=f3L3AclRuleOuterVlanVIDControl, f3L3AclRuleDstIpV6AddressControl=f3L3AclRuleDstIpV6AddressControl, f3L3TrafficIPv6InterfaceHistoryDhcpV6Tx=f3L3TrafficIPv6InterfaceHistoryDhcpV6Tx, cmL3QosPolicerStatsEntry=cmL3QosPolicerStatsEntry, f3L2N2AAclRuleHistoryTime=f3L2N2AAclRuleHistoryTime, f3L3TrafficIPv6InterfaceEntry=f3L3TrafficIPv6InterfaceEntry, f3L3QosPolicerPolicingEnabled=f3L3QosPolicerPolicingEnabled, f3L3TrafficIPv6InterfaceHistoryDhcpV6Rx=f3L3TrafficIPv6InterfaceHistoryDhcpV6Rx, f3L3TrafficIpInterfaceHistoryArpReqRx=f3L3TrafficIpInterfaceHistoryArpReqRx, f3L3TrafficOspfV3NeighborPriority=f3L3TrafficOspfV3NeighborPriority, f3L3FlowPointThresholdIndex=f3L3FlowPointThresholdIndex, cmL3QosShaperThresholdVariable=cmL3QosShaperThresholdVariable, f3L2N2AAclRuleProtocolControl=f3L2N2AAclRuleProtocolControl, f3L3TrafficIPIfProxyArpEnabled=f3L3TrafficIPIfProxyArpEnabled, f3L3QosPolicerStatsIntervalType=f3L3QosPolicerStatsIntervalType, f3L2N2AAclRuleIndex=f3L2N2AAclRuleIndex, f3L3TrafficIpInterfaceStatsNdpRSRx=f3L3TrafficIpInterfaceStatsNdpRSRx, f3L3QosPolicerThresholdEntry=f3L3QosPolicerThresholdEntry, f3L3TrafficIPv6InterfaceThresholdInterval=f3L3TrafficIPv6InterfaceThresholdInterval, f3L3AclRuleSrcMacAddressControl=f3L3AclRuleSrcMacAddressControl, f3L2N2AAclRuleTcpFlags=f3L2N2AAclRuleTcpFlags, f3L3TrafficOspfV3NeighborIpAddress=f3L3TrafficOspfV3NeighborIpAddress, f3L3TrafficIPIfIpMode=f3L3TrafficIPIfIpMode, f3L3TrafficBgpRouterAction=f3L3TrafficBgpRouterAction, f3L3TrafficIpv6RouteType=f3L3TrafficIpv6RouteType, f3L3TrafficIPv6InterfaceHistoryIcmpV6WONdpRx=f3L3TrafficIPv6InterfaceHistoryIcmpV6WONdpRx, f3L3TrafficOspfLsDbRouterId=f3L3TrafficOspfLsDbRouterId, f3L2A2NAclRuleStorageType=f3L2A2NAclRuleStorageType, f3L3TrafficIPIfDhcpv6Role=f3L3TrafficIPIfDhcpv6Role, f3L3FlowPointThresholdTable=f3L3FlowPointThresholdTable, f3L3QosShaperStatsIntervalType=f3L3QosShaperStatsIntervalType, cmL3FlowPointInnerTagMemberShipEnabled=cmL3FlowPointInnerTagMemberShipEnabled, OspfIfType=OspfIfType, f3L3TrafficOspfInterfaceType=f3L3TrafficOspfInterfaceType, f3L3TrafficIpInterfaceStatsNdpNSRx=f3L3TrafficIpInterfaceStatsNdpNSRx, f3L3TrafficOspfInterfaceTilfaControl=f3L3TrafficOspfInterfaceTilfaControl, f3L3TrafficIPv6InterfaceThresholdEntry=f3L3TrafficIPv6InterfaceThresholdEntry, f3L3TrafficIPIfOspfAuthType=f3L3TrafficIPIfOspfAuthType, f3L3TrafficBgpInRouteEntry=f3L3TrafficBgpInRouteEntry, f3L3TrafficBgpRIBRouteNetwork=f3L3TrafficBgpRIBRouteNetwork, cmL3FlowPointOuterTagMemberShipVlanId=cmL3FlowPointOuterTagMemberShipVlanId, f3L3TrafficBgpPeerAddressFamilyExtNextHopControl=f3L3TrafficBgpPeerAddressFamilyExtNextHopControl, cmL3QosPolicerStatsValid=cmL3QosPolicerStatsValid, f3L3TrafficIPv6PrefixTable=f3L3TrafficIPv6PrefixTable, f3L3AclRuleOuterVlanPcpControl=f3L3AclRuleOuterVlanPcpControl, f3L3TrafficOspfLsDbTable=f3L3TrafficOspfLsDbTable, f3L3AclRuleInnerVlanPcpControl=f3L3AclRuleInnerVlanPcpControl, f3L3TrafficIPv6InterfaceStatsNdpNSRx=f3L3TrafficIPv6InterfaceStatsNdpNSRx, f3L3TrafficIPInterfaceRAPrefixPreferredLifeTime=f3L3TrafficIPInterfaceRAPrefixPreferredLifeTime, f3L2N2AAclRuleSrcIpV6AddressPrefixLen=f3L2N2AAclRuleSrcIpV6AddressPrefixLen, f3L3TrafficIPv6IfDupAddrDetectControl=f3L3TrafficIPv6IfDupAddrDetectControl, f3L3TrafficBgpPeerAddressFamilyAdvPrefixTable=f3L3TrafficBgpPeerAddressFamilyAdvPrefixTable, f3L2A2NAclRuleInnerVlanVIDControl=f3L2A2NAclRuleInnerVlanVIDControl, cmL3QosPolicerCIRLo=cmL3QosPolicerCIRLo, f3L3TrafficIPIfDhcpRelayInfoOpt82Sub1=f3L3TrafficIPIfDhcpRelayInfoOpt82Sub1, f3L3TrafficBgpRIBRouteNextHop=f3L3TrafficBgpRIBRouteNextHop, f3L3QosShaperThresholdIndex=f3L3QosShaperThresholdIndex, TrafficOspfAreaType=TrafficOspfAreaType, cmL3QosShaperThresholdTable=cmL3QosShaperThresholdTable, f3L2N2AAclRuleHistoryEntry=f3L2N2AAclRuleHistoryEntry, f3L2N2AAclRuleSrcMacAddressMask=f3L2N2AAclRuleSrcMacAddressMask, f3L3TrafficBgpPeerAsNumber=f3L3TrafficBgpPeerAsNumber, f3L3TrafficIPv6IfRaDefaultRouterPreference=f3L3TrafficIPv6IfRaDefaultRouterPreference, f3L3TrafficBgpPeerAddressFamilyAdvPrefixEntry=f3L3TrafficBgpPeerAddressFamilyAdvPrefixEntry, f3L3TrafficOspfLinkLsDbTable=f3L3TrafficOspfLinkLsDbTable, f3L2A2NAclRulePriority=f3L2A2NAclRulePriority, f3L3TrafficIpv4RouteStorageType=f3L3TrafficIpv4RouteStorageType, f3L3FlowPointHistoryAclRuleDrop=f3L3FlowPointHistoryAclRuleDrop, f3L2A2NAclRuleStatsIntervalType=f3L2A2NAclRuleStatsIntervalType, f3L2N2AAclRuleSummary=f3L2N2AAclRuleSummary, f3L3TrafficBgpRouterAsNumber=f3L3TrafficBgpRouterAsNumber, cmL3FlowPointHistoryTime=cmL3FlowPointHistoryTime, VrfTransportType=VrfTransportType, cmL3FlowPointHistoryFragmentedDropAcl=cmL3FlowPointHistoryFragmentedDropAcl, f3L3TrafficIPIfOspfDesignatedRouterId=f3L3TrafficIPIfOspfDesignatedRouterId, f3L3TrafficBgpPeerAddressFamilyNextHopIpv4=f3L3TrafficBgpPeerAddressFamilyNextHopIpv4, f3L3Compliance=f3L3Compliance, f3L3TrafficIpInterfaceHistoryEntry=f3L3TrafficIpInterfaceHistoryEntry, IpInterfaceType=IpInterfaceType, f3L3TrafficIpv4RouteAdvertise=f3L3TrafficIpv4RouteAdvertise, f3L3TrafficIPv6PrefixRaPrefix=f3L3TrafficIPv6PrefixRaPrefix, f3L3TrafficIpInterfaceHistoryDhcpTx=f3L3TrafficIpInterfaceHistoryDhcpTx, f3IpPrefixLessOrEqualPrefixLen=f3IpPrefixLessOrEqualPrefixLen, cmL3QosPolicerHistoryTable=cmL3QosPolicerHistoryTable, f3L3TrafficIPv6IfRaRDNSSOptionEnabled=f3L3TrafficIPv6IfRaRDNSSOptionEnabled, cmL3QosShaperHistoryFTD=cmL3QosShaperHistoryFTD, f3L3TrafficBgpRouterIndex=f3L3TrafficBgpRouterIndex, cmL3QosPolicerStatsABR=cmL3QosPolicerStatsABR, SrSidType=SrSidType, f3L3TrafficBgpRouteV2Network=f3L3TrafficBgpRouteV2Network, f3L3TrafficIPInterfaceRAPrefixIndex=f3L3TrafficIPInterfaceRAPrefixIndex, f3L2A2NAclRuleInnerVlanVIDLowLimit=f3L2A2NAclRuleInnerVlanVIDLowLimit, f3L3TrafficOspfInterfaceOspfTransmitDelay=f3L3TrafficOspfInterfaceOspfTransmitDelay, f3L2A2NAclRuleIpv4PriorityControl=f3L2A2NAclRuleIpv4PriorityControl, OspfAsLsaType=OspfAsLsaType, f3VrfTraceRouteIpv4Destination=f3VrfTraceRouteIpv4Destination, f3L3TrafficOspfV3NeighborTable=f3L3TrafficOspfV3NeighborTable, f3L3QosPolicerCIRHi=f3L3QosPolicerCIRHi, f3L3TrafficIPv6InterfaceStatsIcmpV6WONdpTx=f3L3TrafficIPv6InterfaceStatsIcmpV6WONdpTx)
