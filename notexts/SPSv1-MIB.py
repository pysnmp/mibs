#
# PySNMP MIB module SPSv1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/bladeshelter/SPSv1-MIB
# Produced by pysmi-1.1.12 at Wed Dec  4 21:12:02 2024
# On host fv-az585-169 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Gauge32, Unsigned32, IpAddress, Integer32, enterprises, ObjectIdentity, MibIdentifier, Counter32, Counter64, Bits, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Gauge32", "Unsigned32", "IpAddress", "Integer32", "enterprises", "ObjectIdentity", "MibIdentifier", "Counter32", "Counter64", "Bits", "ModuleIdentity", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
powertek = MibIdentifier((1, 3, 6, 1, 4, 1, 42610))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1))
pdu = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4))
sps = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4))
pduObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1))
pduTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2))
pduIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 1))
pduNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2))
pduSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3))
pduSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 4))
pduEmail = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5))
pduPwrMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6))
pduEnvMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7))
pduIdentAgentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduIdentAgentSoftwareVersion.setStatus('mandatory')
pduIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduIdentSerialNumber.setStatus('mandatory')
pduNetworkTcpip = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1))
pduNetworkTcpipDhcpControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkTcpipDhcpControl.setStatus('mandatory')
pduNetworkTcpipIpv4 = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 2))
pduNetworkTcpipIpv4Address = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkTcpipIpv4Address.setStatus('mandatory')
pduNetworkTcpipIpv4Gateway = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkTcpipIpv4Gateway.setStatus('mandatory')
pduNetworkTcpipIpv4Subnet = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkTcpipIpv4Subnet.setStatus('mandatory')
pduNetworkTcpipIpv4PrimaryDNS = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkTcpipIpv4PrimaryDNS.setStatus('mandatory')
pduNetworkTcpipIpv4SecondaryDNS = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkTcpipIpv4SecondaryDNS.setStatus('mandatory')
pduNetworkTcpipIpv6 = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 3))
pduNetworkTcpipIpv6Control = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkTcpipIpv6Control.setStatus('mandatory')
pduNetworkTcpipIpv6AutoConfig = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkTcpipIpv6AutoConfig.setStatus('mandatory')
pduNetworkTcpipIpv6Address = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNetworkTcpipIpv6Address.setStatus('mandatory')
pduNetworkTcpipIpv6Prefix = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNetworkTcpipIpv6Prefix.setStatus('mandatory')
pduNetworkTcpipIpv6Router = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNetworkTcpipIpv6Router.setStatus('mandatory')
pduNetworkTcpipIpv6PrimaryDNS = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkTcpipIpv6PrimaryDNS.setStatus('mandatory')
pduNetworkTcpipIpv6SecondaryDNS = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 1, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkTcpipIpv6SecondaryDNS.setStatus('mandatory')
pduNetworkSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2))
pduNetworkSecurityControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecurityControl.setStatus('mandatory')
pduNetworkSecuritySsh = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 2))
pduNetworkSecuritySshControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecuritySshControl.setStatus('mandatory')
pduNetworkSecuritySshInterval = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oneMinute", 1), ("fiveMinutes", 2), ("tenMinutes", 3), ("thirtyMinutes", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecuritySshInterval.setStatus('mandatory')
pduNetworkSecuritySshFailTimes = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("five", 1), ("ten", 2), ("twenty", 3), ("thirty", 4), ("hundred", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecuritySshFailTimes.setStatus('mandatory')
pduNetworkSecuritySshBlock = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fiveMinutes", 1), ("thirtyMinutes", 2), ("oneHour", 3), ("oneDay", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecuritySshBlock.setStatus('mandatory')
pduNetworkSecuritySnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 3))
pduNetworkSecuritySnmpControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecuritySnmpControl.setStatus('mandatory')
pduNetworkSecuritySnmpInterval = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oneMinute", 1), ("fiveMinutes", 2), ("tenMinutes", 3), ("thirtyMinutes", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecuritySnmpInterval.setStatus('mandatory')
pduNetworkSecuritySnmpFailTimes = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("five", 1), ("ten", 2), ("twenty", 3), ("thirty", 4), ("hundred", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecuritySnmpFailTimes.setStatus('mandatory')
pduNetworkSecuritySnmpBlock = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fiveMinutes", 1), ("thirtyMinutes", 2), ("oneHour", 3), ("oneDay", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecuritySnmpBlock.setStatus('mandatory')
pduNetworkSecurityHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 4))
pduNetworkSecurityHttpControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecurityHttpControl.setStatus('mandatory')
pduNetworkSecurityHttpInterval = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oneMinute", 1), ("fiveMinutes", 2), ("tenMinutes", 3), ("thirtyMinutes", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecurityHttpInterval.setStatus('mandatory')
pduNetworkSecurityHttpFailTimes = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("five", 1), ("ten", 2), ("twenty", 3), ("thirty", 4), ("hundred", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecurityHttpFailTimes.setStatus('mandatory')
pduNetworkSecurityHttpBlock = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fiveMinutes", 1), ("thirtyMinutes", 2), ("oneHour", 3), ("oneDay", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkSecurityHttpBlock.setStatus('mandatory')
pduNetworkService = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3))
pduNetworkServiceSsh = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 1))
pduNetworkServiceSshControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServiceSshControl.setStatus('mandatory')
pduNetworkServiceSshPort = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServiceSshPort.setStatus('mandatory')
pduNetworkServiceSsl = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 2))
pduNetworkServiceSslControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServiceSslControl.setStatus('mandatory')
pduNetworkServiceSslPort = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServiceSslPort.setStatus('mandatory')
pduNetworkServiceSslForce = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServiceSslForce.setStatus('mandatory')
pduNetworkServicePingControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServicePingControl.setStatus('mandatory')
pduNetworkServiceRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 4))
pduNetworkServiceRadiusControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServiceRadiusControl.setStatus('mandatory')
pduNetworkServiceRadiusIp = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServiceRadiusIp.setStatus('mandatory')
pduNetworkServiceRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServiceRadiusPort.setStatus('mandatory')
pduNetworkServiceRadiusSecretKey = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServiceRadiusSecretKey.setStatus('mandatory')
pduNetworkServiceRadiusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServiceRadiusTimeout.setStatus('mandatory')
pduNetworkServiceRadiusRetry = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 2, 3, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduNetworkServiceRadiusRetry.setStatus('mandatory')
pduSystemName = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemName.setStatus('mandatory')
pduSystemContact = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemContact.setStatus('mandatory')
pduSystemLocation = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemLocation.setStatus('mandatory')
pduSystemLogInterval = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemLogInterval.setStatus('mandatory')
pduSystemWebRefresh = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemWebRefresh.setStatus('mandatory')
pduSystemTime = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6))
pduSystemTimeDisplay = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduSystemTimeDisplay.setStatus('mandatory')
pduSystemTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77))).clone(namedValues=NamedValues(("gMT-1200InternationalDateLineWest", 1), ("gMT-1200Eniwetok-Kwajalein", 2), ("gMT-1100MidwayIsland-Samoa", 3), ("gMT-1000Hawaii", 4), ("gMT-0900Alaska", 5), ("gMT-0800PacificTime-Tijuana", 6), ("gMT-0700Arizona-MountainTime", 7), ("gMT-0700Chihuahua-LaPaz-Mazatlan", 8), ("gMT-0700MountainTime", 9), ("gMT-0600CentralAmerica", 10), ("gMT-0600CentralTime", 11), ("gMT-0600Guadalajara-MexicoCity-Monterrey", 12), ("gMT-0600Saskatchewan", 13), ("gMT-0500Bogota-Lima-Quito", 14), ("gMT-0500EasternTime", 15), ("gMT-0500Indiana", 16), ("gMT-0400AtlanticTime", 17), ("gMT-0400Caracas-LaPaz", 18), ("gMT-0400Santiago", 19), ("gMT-0330Newfoundland", 20), ("gMT-0300Brasilia", 21), ("gMT-0300BuenosAires-Georgetown", 22), ("gMT-0300Greenland", 23), ("gMT-0200Mid-Atlantic", 24), ("gMT-0100Azores", 25), ("gMT-0100CapeVerdeIs", 26), ("gMT-0000Casablanca-Monrovia", 27), ("gMT-0000GreenwichMeanTime-Dublin-Edinburgh-Lisbon-London", 28), ("gMT0100Amsterdam-Berlin-Bern-Rome-Stockholm-Vienna", 29), ("gMT0100Belgrade-Bratislava-Budapest-Ljubljana-Prague", 30), ("gMT0100Brussels-Copenhagen-Madrid-Paris", 31), ("gMT0100Sarajevo-Skopje-Warsaw-Zagreb", 32), ("gMT0100WestCentralAfrica", 33), ("gMT0200Athens-Istanbul-Minsk", 34), ("gMT0200Bucharest", 35), ("gMT0200Cairo", 36), ("gMT0200Harare-Pretoria", 37), ("gMT0200Helsinki-Kyiv-Riga-Sofia-Tallinn-Vilnius", 38), ("gMT0200Jerusalem", 39), ("gMT0300Baghdad", 40), ("gMT0300Kuwait-Riyadh", 41), ("gMT0300Moscow-StPetersburg-Volgograd", 42), ("gMT0300Nairobi", 43), ("gMT0330Tehran", 44), ("gMT0400AbuDhabi-Muscat", 45), ("gMT0400Baku-Tbilisi-Yerevan", 46), ("gMT0430Kabul", 47), ("gMT0500Ekaterinburg", 48), ("gMT0500Islamabad-Karachi-Tashkent", 49), ("gMT0530Bombay-Calcutta", 50), ("gMT0530Chennai-Kolkata-Mumbai-NewDelhi", 51), ("gMT0545Kathmandu", 52), ("gMT0600Almaty-Novosibirsk", 53), ("gMT0600Astana-Dhaka", 54), ("gMT0600SriJayawardenepura", 55), ("gMT0630Rangoon", 56), ("gMT0700Bangkok-Hanoi-Jakarta", 57), ("gMT0700Krasnoyarsk", 58), ("gMT0800Beijing-Chongqing-HongKong-Urumqi", 59), ("gMT0800Irkutsk-UlaanBataar", 60), ("gMT0800KualaLumpur-Singapore", 61), ("gMT0800Perth", 62), ("gMT0800Taipei", 63), ("gMT0900Osaka-Sapporo-Tokyo", 64), ("gMT0900Seoul", 65), ("gMT0900Yakutsk", 66), ("gMT0930Adelaide", 67), ("gMT0930Darwin", 68), ("gMT1000Brisbane", 69), ("gMT1000Canberra-Melbourne-Sydney", 70), ("gMT1000Guam-PortMoresby", 71), ("gMT1000Hobart", 72), ("gMT1000Vladivostok", 73), ("gMT1100Magadan-SolomonIs-NewCaledonia", 74), ("gMT1200Auckland-Wellington", 75), ("gMT1200Fiji-Kamchatka-MarshallIs", 76), ("gMT1300NukuAlofa", 77)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemTimeZone.setStatus('mandatory')
pduSystemTimeFormat = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mmddyyyy", 1), ("ddmmyyyy", 2), ("yyyymmdd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemTimeFormat.setStatus('mandatory')
pduSystemTimeSetting = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twentyFourHrFormat", 1), ("twelveHrFormat", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemTimeSetting.setStatus('mandatory')
pduSystemTimeDayLightSaving = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemTimeDayLightSaving.setStatus('mandatory')
pduSystemTimeManual = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 6))
pduSystemTimeManualDate = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemTimeManualDate.setStatus('mandatory')
pduSystemTimeManualTime = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemTimeManualTime.setStatus('mandatory')
pduSystemTimeNtp = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 7))
pduSystemTimeNtpControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemTimeNtpControl.setStatus('mandatory')
pduSystemTimeNtpServer = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemTimeNtpServer.setStatus('mandatory')
pduSystemTimeNtpSyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 7, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemTimeNtpSyncInterval.setStatus('mandatory')
pduSystemTimeNtpSyncUnit = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 6, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("day", 1), ("month", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemTimeNtpSyncUnit.setStatus('mandatory')
pduSystemResetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nothing", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemResetToDefault.setStatus('mandatory')
pduSystemReboot = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nothing", 1), ("reboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSystemReboot.setStatus('mandatory')
pduSnmpControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSnmpControl.setStatus('mandatory')
pduSnmpPort = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSnmpPort.setStatus('mandatory')
pduSnmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2), ("v3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduSnmpVersion.setStatus('mandatory')
pduSnmpTrapsReceiversTable = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 4, 4), )
if mibBuilder.loadTexts: pduSnmpTrapsReceiversTable.setStatus('mandatory')
pduSnmpTrapsReceiversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 4, 4, 1), ).setIndexNames((0, "SPSv1-MIB", "trapsIndex"))
if mibBuilder.loadTexts: pduSnmpTrapsReceiversEntry.setStatus('mandatory')
trapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapsIndex.setStatus('mandatory')
trapsReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 4, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapsReceiverAddr.setStatus('mandatory')
receiverEventLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverEventLevel.setStatus('mandatory')
receiverSnmpVer = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2), ("v3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverSnmpVer.setStatus('mandatory')
receiverDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 4, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverDescription.setStatus('mandatory')
pduEmailServer = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEmailServer.setStatus('mandatory')
pduEmailPort = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEmailPort.setStatus('mandatory')
pduEmailSenderEmail = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEmailSenderEmail.setStatus('mandatory')
pduEmailPrefix = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEmailPrefix.setStatus('mandatory')
pduEmailAuthControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEmailAuthControl.setStatus('mandatory')
pduEmailAuthUsername = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEmailAuthUsername.setStatus('mandatory')
pduEmailAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEmailAuthPassword.setStatus('mandatory')
pduEmailReceiversTable = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 8), )
if mibBuilder.loadTexts: pduEmailReceiversTable.setStatus('mandatory')
pduEmailReceiversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 8, 1), ).setIndexNames((0, "SPSv1-MIB", "mailRecvIndex"))
if mibBuilder.loadTexts: pduEmailReceiversEntry.setStatus('mandatory')
mailRecvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mailRecvIndex.setStatus('mandatory')
mailRecvReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailRecvReceiverAddr.setStatus('mandatory')
mailRecvEmailType = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("events", 2), ("status", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailRecvEmailType.setStatus('mandatory')
mailRecvEventLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailRecvEventLevel.setStatus('mandatory')
mailRecvDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 5, 8, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailRecvDescription.setStatus('mandatory')
pduPwrMonitoringInlet = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1))
pduPwrMonitoringInletNum = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPwrMonitoringInletNum.setStatus('mandatory')
pduPwrMonitoringInletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2), )
if mibBuilder.loadTexts: pduPwrMonitoringInletStatusTable.setStatus('mandatory')
pduPwrMonitoringInletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1), ).setIndexNames((0, "SPSv1-MIB", "inletIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringInletStatusEntry.setStatus('mandatory')
inletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletIndex.setStatus('mandatory')
inletPowerAll = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 2), Integer32()).setUnits('0.1W').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPowerAll.setStatus('mandatory')
inletResetFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletResetFrom.setStatus('mandatory')
inletEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 4), Integer32()).setUnits('KWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletEnergy.setStatus('mandatory')
inletStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletStatus.setStatus('mandatory')
inletCurrPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 6), Integer32()).setUnits('0.01A').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletCurrPhase1.setStatus('mandatory')
inletCurrPhase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 7), Integer32()).setUnits('0.01A').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletCurrPhase2.setStatus('mandatory')
inletCurrPhase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 8), Integer32()).setUnits('0.01A').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletCurrPhase3.setStatus('mandatory')
inletVoltPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 9), Integer32()).setUnits('0.1V').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletVoltPhase1.setStatus('mandatory')
inletVoltPhase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 10), Integer32()).setUnits('0.1V').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletVoltPhase2.setStatus('mandatory')
inletVoltPhase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 11), Integer32()).setUnits('0.1V').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletVoltPhase3.setStatus('mandatory')
inletPwrFactorPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 12), Integer32()).setUnits('0.1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPwrFactorPhase1.setStatus('mandatory')
inletPwrFactorPhase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 13), Integer32()).setUnits('0.1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPwrFactorPhase2.setStatus('mandatory')
inletPwrFactorPhase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 14), Integer32()).setUnits('0.1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPwrFactorPhase3.setStatus('mandatory')
inletPowerPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 15), Integer32()).setUnits('0.1W').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPowerPhase1.setStatus('mandatory')
inletPowerPhase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 16), Integer32()).setUnits('0.1W').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPowerPhase2.setStatus('mandatory')
inletPowerPhase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 17), Integer32()).setUnits('0.1W').setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPowerPhase3.setStatus('mandatory')
inletStatusPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletStatusPhase1.setStatus('mandatory')
inletStatusPhase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletStatusPhase2.setStatus('mandatory')
inletStatusPhase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletStatusPhase3.setStatus('mandatory')
pduPwrMonitoringInletCfgTable = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3), )
if mibBuilder.loadTexts: pduPwrMonitoringInletCfgTable.setStatus('mandatory')
pduPwrMonitoringInletCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1), ).setIndexNames((0, "SPSv1-MIB", "inletCfgIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringInletCfgEntry.setStatus('mandatory')
inletCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletCfgIndex.setStatus('mandatory')
inletCfgLoadCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 2), Integer32()).setUnits('0.1kW').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgLoadCritical.setStatus('mandatory')
inletCfgLoadWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 3), Integer32()).setUnits('0.1kW').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgLoadWarning.setStatus('mandatory')
inletCfgCurrCritPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 4), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgCurrCritPhase1.setStatus('mandatory')
inletCfgCurrCritPhase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 5), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgCurrCritPhase2.setStatus('mandatory')
inletCfgCurrCritPhase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 6), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgCurrCritPhase3.setStatus('mandatory')
inletCfgCurrWarnPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 7), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgCurrWarnPhase1.setStatus('mandatory')
inletCfgCurrWarnPhase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 8), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgCurrWarnPhase2.setStatus('mandatory')
inletCfgCurrWarnPhase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 9), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgCurrWarnPhase3.setStatus('mandatory')
inletCfgVoltCritPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 10), Integer32()).setUnits('0.1V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgVoltCritPhase1.setStatus('mandatory')
inletCfgVoltCritPhase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 11), Integer32()).setUnits('0.1V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgVoltCritPhase2.setStatus('mandatory')
inletCfgVoltCritPhase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 12), Integer32()).setUnits('0.1V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgVoltCritPhase3.setStatus('mandatory')
inletCfgVoltWarnPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 13), Integer32()).setUnits('0.1V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgVoltWarnPhase1.setStatus('mandatory')
inletCfgVoltWarnPhase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 14), Integer32()).setUnits('0.1V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgVoltWarnPhase2.setStatus('mandatory')
inletCfgVoltWarnPhase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 1, 3, 1, 15), Integer32()).setUnits('0.1V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCfgVoltWarnPhase3.setStatus('mandatory')
pduPwrMonitoringOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2))
pduPwrMonitoringOutletPduA = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1))
pduPwrMonitoringOutletNumPduA = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPwrMonitoringOutletNumPduA.setStatus('mandatory')
pduPwrMonitoringOutletStatusTablePduA = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 2), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusTablePduA.setStatus('mandatory')
pduPwrMonitoringOutletStatusPduAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 2, 1), ).setIndexNames((0, "SPSv1-MIB", "outletPduAIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusPduAEntry.setStatus('mandatory')
outletPduAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduAIndex.setStatus('mandatory')
outletPduAState = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduAState.setStatus('mandatory')
outletPduACurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 2, 1, 3), Integer32()).setUnits('0.01A').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduACurrent.setStatus('mandatory')
outletPduAPwrFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 2, 1, 4), Integer32()).setUnits('0.1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduAPwrFactor.setStatus('mandatory')
outletPduAPower = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 2, 1, 5), Integer32()).setUnits('0.1W').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduAPower.setStatus('mandatory')
outletPduAEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 2, 1, 6), Integer32()).setUnits('KWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduAEnergy.setStatus('mandatory')
outletPduAResetFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduAResetFrom.setStatus('mandatory')
outletPduAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduAStatus.setStatus('mandatory')
pduPwrMonitoringOutletCfgTablePduA = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgTablePduA.setStatus('mandatory')
pduPwrMonitoringOutletCfgPduAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1), ).setIndexNames((0, "SPSv1-MIB", "outletCfgPduAIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgPduAEntry.setStatus('mandatory')
outletCfgPduAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCfgPduAIndex.setStatus('mandatory')
outletCfgPduAName = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduAName.setStatus('mandatory')
outletCfgPduADelayOnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nodelay", 1), ("delay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduADelayOnStatus.setStatus('mandatory')
outletCfgPduADelayOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1, 4), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduADelayOnTime.setStatus('mandatory')
outletCfgPduADelayOffStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nodelay", 1), ("delay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduADelayOffStatus.setStatus('mandatory')
outletCfgPduADelayOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduADelayOffTime.setStatus('mandatory')
outletCfgPduAReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1, 7), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduAReboot.setStatus('mandatory')
outletCfgPduAOverCurrCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1, 8), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduAOverCurrCritical.setStatus('mandatory')
outletCfgPduAOverCurrWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1, 9), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduAOverCurrWarning.setStatus('mandatory')
outletCfgPduAOverPwrCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1, 10), Integer32()).setUnits('1W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduAOverPwrCritical.setStatus('mandatory')
outletCfgPduAOverPwrWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 3, 1, 11), Integer32()).setUnits('1W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduAOverPwrWarning.setStatus('mandatory')
pduPwrMonitoringOutletCtlTablePduA = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 4), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlTablePduA.setStatus('mandatory')
pduPwrMonitoringOutletCtlPduAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 4, 1), ).setIndexNames((0, "SPSv1-MIB", "outletCtlPduAIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlPduAEntry.setStatus('mandatory')
outletCtlPduAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCtlPduAIndex.setStatus('mandatory')
outletCtlPduAControl = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("immediateOn", 1), ("delayedOn", 2), ("immediateOff", 3), ("delayedOff", 4), ("immediateCycle", 5), ("delayedCycle", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCtlPduAControl.setStatus('mandatory')
pduPwrMonitoringOutletPduB = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2))
pduPwrMonitoringOutletNumPduB = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPwrMonitoringOutletNumPduB.setStatus('mandatory')
pduPwrMonitoringOutletStatusTablePduB = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 2), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusTablePduB.setStatus('mandatory')
pduPwrMonitoringOutletStatusPduBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 2, 1), ).setIndexNames((0, "SPSv1-MIB", "outletPduBIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusPduBEntry.setStatus('mandatory')
outletPduBIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduBIndex.setStatus('mandatory')
outletPduBState = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduBState.setStatus('mandatory')
outletPduBCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 2, 1, 3), Integer32()).setUnits('0.01A').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduBCurrent.setStatus('mandatory')
outletPduBPwrFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 2, 1, 4), Integer32()).setUnits('0.1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduBPwrFactor.setStatus('mandatory')
outletPduBPower = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 2, 1, 5), Integer32()).setUnits('0.1W').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduBPower.setStatus('mandatory')
outletPduBEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 2, 1, 6), Integer32()).setUnits('KWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduBEnergy.setStatus('mandatory')
outletPduBResetFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduBResetFrom.setStatus('mandatory')
outletPduBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduBStatus.setStatus('mandatory')
pduPwrMonitoringOutletCfgTablePduB = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgTablePduB.setStatus('mandatory')
pduPwrMonitoringOutletCfgPduBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1), ).setIndexNames((0, "SPSv1-MIB", "outletCfgPduBIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgPduBEntry.setStatus('mandatory')
outletCfgPduBIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCfgPduBIndex.setStatus('mandatory')
outletCfgPduBName = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduBName.setStatus('mandatory')
outletCfgPduBDelayOnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nodelay", 1), ("delay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduBDelayOnStatus.setStatus('mandatory')
outletCfgPduBDelayOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1, 4), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduBDelayOnTime.setStatus('mandatory')
outletCfgPduBDelayOffStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nodelay", 1), ("delay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduBDelayOffStatus.setStatus('mandatory')
outletCfgPduBDelayOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduBDelayOffTime.setStatus('mandatory')
outletCfgPduBReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1, 7), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduBReboot.setStatus('mandatory')
outletCfgPduBOverCurrCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1, 8), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduBOverCurrCritical.setStatus('mandatory')
outletCfgPduBOverCurrWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1, 9), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduBOverCurrWarning.setStatus('mandatory')
outletCfgPduBOverPwrCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1, 10), Integer32()).setUnits('1W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduBOverPwrCritical.setStatus('mandatory')
outletCfgPduBOverPwrWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 3, 1, 11), Integer32()).setUnits('1W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduBOverPwrWarning.setStatus('mandatory')
pduPwrMonitoringOutletCtlTablePduB = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 4), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlTablePduB.setStatus('mandatory')
pduPwrMonitoringOutletCtlPduBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 4, 1), ).setIndexNames((0, "SPSv1-MIB", "outletCtlPduBIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlPduBEntry.setStatus('mandatory')
outletCtlPduBIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCtlPduBIndex.setStatus('mandatory')
outletCtlPduBControl = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("immediateOn", 1), ("delayedOn", 2), ("immediateOff", 3), ("delayedOff", 4), ("immediateCycle", 5), ("delayedCycle", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCtlPduBControl.setStatus('mandatory')
pduPwrMonitoringOutletPduC = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3))
pduPwrMonitoringOutletNumPduC = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPwrMonitoringOutletNumPduC.setStatus('mandatory')
pduPwrMonitoringOutletStatusTablePduC = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 2), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusTablePduC.setStatus('mandatory')
pduPwrMonitoringOutletStatusPduCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 2, 1), ).setIndexNames((0, "SPSv1-MIB", "outletPduCIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusPduCEntry.setStatus('mandatory')
outletPduCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduCIndex.setStatus('mandatory')
outletPduCState = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduCState.setStatus('mandatory')
outletPduCCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 2, 1, 3), Integer32()).setUnits('0.01A').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduCCurrent.setStatus('mandatory')
outletPduCPwrFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 2, 1, 4), Integer32()).setUnits('0.1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduCPwrFactor.setStatus('mandatory')
outletPduCPower = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 2, 1, 5), Integer32()).setUnits('0.1W').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduCPower.setStatus('mandatory')
outletPduCEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 2, 1, 6), Integer32()).setUnits('KWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduCEnergy.setStatus('mandatory')
outletPduCResetFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduCResetFrom.setStatus('mandatory')
outletPduCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduCStatus.setStatus('mandatory')
pduPwrMonitoringOutletCfgTablePduC = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgTablePduC.setStatus('mandatory')
pduPwrMonitoringOutletCfgPduCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1), ).setIndexNames((0, "SPSv1-MIB", "outletCfgPduCIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgPduCEntry.setStatus('mandatory')
outletCfgPduCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCfgPduCIndex.setStatus('mandatory')
outletCfgPduCName = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduCName.setStatus('mandatory')
outletCfgPduCDelayOnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nodelay", 1), ("delay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduCDelayOnStatus.setStatus('mandatory')
outletCfgPduCDelayOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1, 4), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduCDelayOnTime.setStatus('mandatory')
outletCfgPduCDelayOffStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nodelay", 1), ("delay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduCDelayOffStatus.setStatus('mandatory')
outletCfgPduCDelayOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduCDelayOffTime.setStatus('mandatory')
outletCfgPduCReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1, 7), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduCReboot.setStatus('mandatory')
outletCfgPduCOverCurrCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1, 8), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduCOverCurrCritical.setStatus('mandatory')
outletCfgPduCOverCurrWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1, 9), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduCOverCurrWarning.setStatus('mandatory')
outletCfgPduCOverPwrCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1, 10), Integer32()).setUnits('1W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduCOverPwrCritical.setStatus('mandatory')
outletCfgPduCOverPwrWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 3, 1, 11), Integer32()).setUnits('1W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduCOverPwrWarning.setStatus('mandatory')
pduPwrMonitoringOutletCtlTablePduC = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 4), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlTablePduC.setStatus('mandatory')
pduPwrMonitoringOutletCtlPduCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 4, 1), ).setIndexNames((0, "SPSv1-MIB", "outletCtlPduCIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlPduCEntry.setStatus('mandatory')
outletCtlPduCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCtlPduCIndex.setStatus('mandatory')
outletCtlPduCControl = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("immediateOn", 1), ("delayedOn", 2), ("immediateOff", 3), ("delayedOff", 4), ("immediateCycle", 5), ("delayedCycle", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCtlPduCControl.setStatus('mandatory')
pduPwrMonitoringOutletPduD = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4))
pduPwrMonitoringOutletNumPduD = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPwrMonitoringOutletNumPduD.setStatus('mandatory')
pduPwrMonitoringOutletStatusTablePduD = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 2), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusTablePduD.setStatus('mandatory')
pduPwrMonitoringOutletStatusPduDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 2, 1), ).setIndexNames((0, "SPSv1-MIB", "outletPduDIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletStatusPduDEntry.setStatus('mandatory')
outletPduDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduDIndex.setStatus('mandatory')
outletPduDState = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduDState.setStatus('mandatory')
outletPduDCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 2, 1, 3), Integer32()).setUnits('0.01A').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduDCurrent.setStatus('mandatory')
outletPduDPwrFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 2, 1, 4), Integer32()).setUnits('0.1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduDPwrFactor.setStatus('mandatory')
outletPduDPower = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 2, 1, 5), Integer32()).setUnits('0.1W').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduDPower.setStatus('mandatory')
outletPduDEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 2, 1, 6), Integer32()).setUnits('KWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduDEnergy.setStatus('mandatory')
outletPduDResetFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduDResetFrom.setStatus('mandatory')
outletPduDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPduDStatus.setStatus('mandatory')
pduPwrMonitoringOutletCfgTablePduD = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgTablePduD.setStatus('mandatory')
pduPwrMonitoringOutletCfgPduDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1), ).setIndexNames((0, "SPSv1-MIB", "outletCfgPduDIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletCfgPduDEntry.setStatus('mandatory')
outletCfgPduDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCfgPduDIndex.setStatus('mandatory')
outletCfgPduDName = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduDName.setStatus('mandatory')
outletCfgPduDDelayOnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nodelay", 1), ("delay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduDDelayOnStatus.setStatus('mandatory')
outletCfgPduDDelayOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1, 4), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduDDelayOnTime.setStatus('mandatory')
outletCfgPduDDelayOffStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nodelay", 1), ("delay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduDDelayOffStatus.setStatus('mandatory')
outletCfgPduDDelayOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduDDelayOffTime.setStatus('mandatory')
outletCfgPduDReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1, 7), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduDReboot.setStatus('mandatory')
outletCfgPduDOverCurrCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1, 8), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduDOverCurrCritical.setStatus('mandatory')
outletCfgPduDOverCurrWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1, 9), Integer32()).setUnits('0.1A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduDOverCurrWarning.setStatus('mandatory')
outletCfgPduDOverPwrCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1, 10), Integer32()).setUnits('1W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduDOverPwrCritical.setStatus('mandatory')
outletCfgPduDOverPwrWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 3, 1, 11), Integer32()).setUnits('1W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCfgPduDOverPwrWarning.setStatus('mandatory')
pduPwrMonitoringOutletCtlTablePduD = MibTable((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 4), )
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlTablePduD.setStatus('mandatory')
pduPwrMonitoringOutletCtlPduDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 4, 1), ).setIndexNames((0, "SPSv1-MIB", "outletCtlPduDIndex"))
if mibBuilder.loadTexts: pduPwrMonitoringOutletCtlPduDEntry.setStatus('mandatory')
outletCtlPduDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCtlPduDIndex.setStatus('mandatory')
outletCtlPduDControl = MibTableColumn((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 6, 2, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("immediateOn", 1), ("delayedOn", 2), ("immediateOff", 3), ("delayedOff", 4), ("immediateCycle", 5), ("delayedCycle", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCtlPduDControl.setStatus('mandatory')
pduEnvMonitoringStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 1))
pduEnvMonitoringTemp = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 1, 1), Integer32()).setUnits('degC').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduEnvMonitoringTemp.setStatus('mandatory')
pduEnvMonitoringHumi = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 1, 2), Integer32()).setUnits('0.1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduEnvMonitoringHumi.setStatus('mandatory')
pduEnvMonitoringTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduEnvMonitoringTempAlarm.setStatus('mandatory')
pduEnvMonitoringHumiAlarm = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduEnvMonitoringHumiAlarm.setStatus('mandatory')
pduEnvMonitoringCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2))
pduEnvMonitoringControl = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringControl.setStatus('mandatory')
pduEnvMonitoringTempHighCritical = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 2), Integer32()).setUnits('degC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringTempHighCritical.setStatus('mandatory')
pduEnvMonitoringTempHighWarning = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 3), Integer32()).setUnits('degC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringTempHighWarning.setStatus('mandatory')
pduEnvMonitoringTempLowCritical = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 4), Integer32()).setUnits('degC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringTempLowCritical.setStatus('mandatory')
pduEnvMonitoringTempLowWarning = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 5), Integer32()).setUnits('degC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringTempLowWarning.setStatus('mandatory')
pduEnvMonitoringTempHystersis = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 6), Integer32()).setUnits('degC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringTempHystersis.setStatus('mandatory')
pduEnvMonitoringTempOffset = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 7), Integer32()).setUnits('degC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringTempOffset.setStatus('mandatory')
pduEnvMonitoringHumiHighCritical = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 8), Integer32()).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringHumiHighCritical.setStatus('mandatory')
pduEnvMonitoringHumiHighWarning = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 9), Integer32()).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringHumiHighWarning.setStatus('mandatory')
pduEnvMonitoringHumiLowCritical = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 10), Integer32()).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringHumiLowCritical.setStatus('mandatory')
pduEnvMonitoringHumiLowWarning = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 11), Integer32()).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringHumiLowWarning.setStatus('mandatory')
pduEnvMonitoringHumiHystersis = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 12), Integer32()).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringHumiHystersis.setStatus('mandatory')
pduEnvMonitoringHumiOffset = MibScalar((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 1, 7, 2, 13), Integer32()).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnvMonitoringHumiOffset.setStatus('mandatory')
pduSystemColdBoot = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,1))
pduSystemWarmBoot = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,2))
pduSystemRestart = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,3))
pduResetToDefault = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,4))
pduFirmUpgrade = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,5))
pduSystemLogClear = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,6))
pduEventlogClear = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,7))
pduInletHistoryClear = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,8))
pduOutletHistoryClear = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,9))
pduSystemTimeChangeUser = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,10))
pduSystemTimeChangeNtp = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,11))
pduSystemTimeChangeRtc = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,12))
pduMailTestPass = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,13))
pduMailTestFail = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,14))
pduMailSentPass = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,15))
pduMailSentFail = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,16))
pduSystemCfgChange = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,17))
pduSystemParamImport = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,18))
pduInletCommLost = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,19))
pduInletCommRestore = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,20))
pduOutletCommLost = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,21))
pduOutletCommRestore = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,22))
pduOutletOnUser = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,23))
pduOutletOnSchedule = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,24))
pduOutletOffUser = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,25))
pduOutletOffSchedule = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,26))
pduOutletRebootUser = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,27))
pduOutletRebootSchedule = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,28))
pduInletEnergyReset = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,29))
pduOutletEnergyReset = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,30))
pduSetUser = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,31))
pduDeletUser = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,32))
pduUpgradeInletSuccess = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,33))
pduUpgradeInletFail = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,34))
pduUpgradeOutletSuccess = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,35))
pduUpgradeOutletFail = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,36))
pduEmdTempHighWarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,101))
pduEmdTempHighWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,102))
pduEmdTempLowWarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,103))
pduEmdTempLowWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,104))
pduEmdTempHighCritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,105))
pduEmdTempHighCritical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,106))
pduEmdTempLowCritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,107))
pduEmdTempLowCritical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,108))
pduEmdHumiHighWarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,109))
pduEmdHumiHighWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,110))
pduEmdHumiLowWarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,111))
pduEmdHumiLowWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,112))
pduEmdHumiHighCritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,113))
pduEmdHumiHighCritical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,114))
pduEmdHumiLowCritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,115))
pduEmdHumiLowCritical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,116))
pduEmdAlarm1NotActive = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,117))
pduEmdAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,118))
pduEmdAlarm2NotActive = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,119))
pduEmdAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,120))
pduRs485Online = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,121))
pduRs485Offline = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,122))
pduInletLoadCritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,123))
pduInletLoadCritical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,124))
pduInletLoadWarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,125))
pduInletLoadWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,126))
pduInletCurrPhase1CritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,127))
pduInletCurrPhase1Critical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,128))
pduInletCurrPhase1WarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,129))
pduInletCurrPhase1Warn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,130))
pduInletCurrPhase2CritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,131))
pduInletCurrPhase2Critical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,132))
pduInletCurrPhase2WarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,133))
pduInletCurrPhase2Warn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,134))
pduInletCurrPhase3CritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,135))
pduInletCurrPhase3Critical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,136))
pduInletCurrPhase3WarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,137))
pduInletCurrPhase3Warn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,138))
pduInletVoltPhase1CritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,139))
pduInletVoltPhase1Critical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,140))
pduInletVoltPhase1WarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,141))
pduInletVoltPhase1Warn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,142))
pduInletVoltPhase2CritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,143))
pduInletVoltPhase2Critical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,144))
pduInletVoltPhase2WarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,145))
pduInletVoltPhase2Warn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,146))
pduInletVoltPhase3CritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,147))
pduInletVoltPhase3Critical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,148))
pduInletVoltPhase3WarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,149))
pduInletVoltPhase3Warn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,150))
pduOutletCurrCritToWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,151))
pduOutletCurrCritical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,152))
pduOutletCurrWarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,153))
pduOutletCurrWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,154))
pduOutletPwrCritTOWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,155))
pduOutletPwrCritical = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,156))
pduOutletPwrWarnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,157))
pduOutletPwrWarn = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,158))
pduAlarm1Disabled = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,159))
pduAlarm2Disabled = NotificationType((1, 3, 6, 1, 4, 1, 42610, 1, 4, 4, 2) + (0,160))
mibBuilder.exportSymbols("SPSv1-MIB", pduNetworkSecurityHttpBlock=pduNetworkSecurityHttpBlock, pduMailTestFail=pduMailTestFail, outletCtlPduCControl=outletCtlPduCControl, receiverSnmpVer=receiverSnmpVer, pduNetwork=pduNetwork, outletCfgPduCOverPwrCritical=outletCfgPduCOverPwrCritical, receiverEventLevel=receiverEventLevel, pduOutletRebootSchedule=pduOutletRebootSchedule, outletPduDStatus=outletPduDStatus, outletPduDPower=outletPduDPower, outletCfgPduCIndex=outletCfgPduCIndex, outletCfgPduCOverPwrWarning=outletCfgPduCOverPwrWarning, outletPduAPwrFactor=outletPduAPwrFactor, pduSetUser=pduSetUser, outletPduAResetFrom=outletPduAResetFrom, pduEnvMonitoringHumiLowWarning=pduEnvMonitoringHumiLowWarning, pduNetworkTcpipIpv4PrimaryDNS=pduNetworkTcpipIpv4PrimaryDNS, powertek=powertek, outletPduBPower=outletPduBPower, pduEnvMonitoringTempLowCritical=pduEnvMonitoringTempLowCritical, mailRecvDescription=mailRecvDescription, outletCfgPduADelayOffStatus=outletCfgPduADelayOffStatus, pduNetworkSecurityHttpFailTimes=pduNetworkSecurityHttpFailTimes, pduNetworkSecurityControl=pduNetworkSecurityControl, pduNetworkTcpipIpv4SecondaryDNS=pduNetworkTcpipIpv4SecondaryDNS, pduEnvMonitoringHumiHighWarning=pduEnvMonitoringHumiHighWarning, outletPduAEnergy=outletPduAEnergy, outletCtlPduDControl=outletCtlPduDControl, pduEnvMonitoringStatus=pduEnvMonitoringStatus, pduOutletPwrWarn=pduOutletPwrWarn, outletCfgPduCName=outletCfgPduCName, pduAlarm2Disabled=pduAlarm2Disabled, pduSystemTimeNtpSyncInterval=pduSystemTimeNtpSyncInterval, pduNetworkSecuritySshFailTimes=pduNetworkSecuritySshFailTimes, pduEmdAlarm1Active=pduEmdAlarm1Active, inletPowerPhase2=inletPowerPhase2, pduUpgradeOutletFail=pduUpgradeOutletFail, pduSystemContact=pduSystemContact, pduInletCurrPhase3WarnToNormal=pduInletCurrPhase3WarnToNormal, pduEnvMonitoringHumiOffset=pduEnvMonitoringHumiOffset, outletPduDPwrFactor=outletPduDPwrFactor, outletCfgPduDOverCurrWarning=outletCfgPduDOverCurrWarning, outletCfgPduBIndex=outletCfgPduBIndex, pduIdent=pduIdent, pduEmail=pduEmail, pduEnvMonitoringTempOffset=pduEnvMonitoringTempOffset, outletCfgPduADelayOnStatus=outletCfgPduADelayOnStatus, pduPwrMonitoringOutletStatusTablePduD=pduPwrMonitoringOutletStatusTablePduD, pduEnvMonitoringTempHighCritical=pduEnvMonitoringTempHighCritical, inletCurrPhase2=inletCurrPhase2, pduPwrMonitoringOutletStatusPduBEntry=pduPwrMonitoringOutletStatusPduBEntry, outletPduDCurrent=outletPduDCurrent, inletPowerPhase1=inletPowerPhase1, outletCfgPduDDelayOnTime=outletCfgPduDDelayOnTime, pduOutletCurrCritical=pduOutletCurrCritical, trapsIndex=trapsIndex, inletPwrFactorPhase3=inletPwrFactorPhase3, outletCfgPduAOverPwrWarning=outletCfgPduAOverPwrWarning, pduEmailPrefix=pduEmailPrefix, outletPduCCurrent=outletPduCCurrent, pduSystemLogClear=pduSystemLogClear, outletCtlPduBControl=outletCtlPduBControl, pduEmdTempHighCritToWarn=pduEmdTempHighCritToWarn, pduSnmpPort=pduSnmpPort, pduOutletCurrWarnToNormal=pduOutletCurrWarnToNormal, pduInletVoltPhase1Critical=pduInletVoltPhase1Critical, pduRs485Offline=pduRs485Offline, outletPduAStatus=outletPduAStatus, pduNetworkSecuritySnmp=pduNetworkSecuritySnmp, pduInletVoltPhase2Warn=pduInletVoltPhase2Warn, inletCfgCurrWarnPhase1=inletCfgCurrWarnPhase1, outletCfgPduDReboot=outletCfgPduDReboot, pduNetworkServiceRadius=pduNetworkServiceRadius, pduSystemLogInterval=pduSystemLogInterval, inletCfgCurrWarnPhase2=inletCfgCurrWarnPhase2, pduOutletCommRestore=pduOutletCommRestore, pduNetworkServiceSsh=pduNetworkServiceSsh, outletCtlPduDIndex=outletCtlPduDIndex, pduEnvMonitoringControl=pduEnvMonitoringControl, pduSNMP=pduSNMP, pduPwrMonitoringOutletStatusTablePduA=pduPwrMonitoringOutletStatusTablePduA, pduNetworkSecuritySshControl=pduNetworkSecuritySshControl, pduInletCurrPhase1Critical=pduInletCurrPhase1Critical, pduEmailSenderEmail=pduEmailSenderEmail, inletPwrFactorPhase2=inletPwrFactorPhase2, outletPduBState=outletPduBState, pduPwrMonitoringOutletStatusTablePduB=pduPwrMonitoringOutletStatusTablePduB, pduMailTestPass=pduMailTestPass, inletPowerAll=inletPowerAll, outletCfgPduDOverPwrCritical=outletCfgPduDOverPwrCritical, inletCfgCurrCritPhase1=inletCfgCurrCritPhase1, pduInletVoltPhase3CritToWarn=pduInletVoltPhase3CritToWarn, pduInletCurrPhase3Critical=pduInletCurrPhase3Critical, pduInletCurrPhase2Warn=pduInletCurrPhase2Warn, pduSystemTimeManual=pduSystemTimeManual, pduNetworkSecuritySshBlock=pduNetworkSecuritySshBlock, pduNetworkService=pduNetworkService, outletCfgPduBName=outletCfgPduBName, pduAlarm1Disabled=pduAlarm1Disabled, product=product, pduOutletOffUser=pduOutletOffUser, outletCfgPduAReboot=outletCfgPduAReboot, outletCfgPduCDelayOffTime=outletCfgPduCDelayOffTime, pduSystemTimeNtpSyncUnit=pduSystemTimeNtpSyncUnit, pduNetworkSecuritySnmpControl=pduNetworkSecuritySnmpControl, outletPduBIndex=outletPduBIndex, pduNetworkTcpipDhcpControl=pduNetworkTcpipDhcpControl, pduPwrMonitoringOutletNumPduC=pduPwrMonitoringOutletNumPduC, pduNetworkSecurityHttpControl=pduNetworkSecurityHttpControl, outletPduDIndex=outletPduDIndex, pduPwrMonitoringOutletCtlTablePduD=pduPwrMonitoringOutletCtlTablePduD, outletCfgPduAOverCurrCritical=outletCfgPduAOverCurrCritical, inletCfgVoltWarnPhase2=inletCfgVoltWarnPhase2, pduSystemTimeNtp=pduSystemTimeNtp, pduInletCurrPhase1WarnToNormal=pduInletCurrPhase1WarnToNormal, outletCtlPduAIndex=outletCtlPduAIndex, outletPduBEnergy=outletPduBEnergy, pduInletLoadWarnToNormal=pduInletLoadWarnToNormal, pduSystemRestart=pduSystemRestart, inletCurrPhase1=inletCurrPhase1, pduNetworkServiceRadiusIp=pduNetworkServiceRadiusIp, pduPwrMonitoringOutletCfgPduCEntry=pduPwrMonitoringOutletCfgPduCEntry, pduOutletOnUser=pduOutletOnUser, pduNetworkSecuritySnmpBlock=pduNetworkSecuritySnmpBlock, pduPwrMonitoringOutletStatusPduDEntry=pduPwrMonitoringOutletStatusPduDEntry, pduEmdHumiLowWarnToNormal=pduEmdHumiLowWarnToNormal, outletCfgPduBOverCurrCritical=outletCfgPduBOverCurrCritical, inletVoltPhase1=inletVoltPhase1, outletCfgPduADelayOffTime=outletCfgPduADelayOffTime, pduSystemWarmBoot=pduSystemWarmBoot, pduSystemLocation=pduSystemLocation, outletPduCPower=outletPduCPower, pduNetworkTcpipIpv6SecondaryDNS=pduNetworkTcpipIpv6SecondaryDNS, outletPduCIndex=outletPduCIndex, pduEmdAlarm1NotActive=pduEmdAlarm1NotActive, outletPduBCurrent=outletPduBCurrent, pduInletCurrPhase1CritToWarn=pduInletCurrPhase1CritToWarn, pduNetworkTcpipIpv6Address=pduNetworkTcpipIpv6Address, pduInletVoltPhase1CritToWarn=pduInletVoltPhase1CritToWarn, pduEmailAuthControl=pduEmailAuthControl, pduPwrMonitoringInletCfgTable=pduPwrMonitoringInletCfgTable, pduNetworkServiceSsl=pduNetworkServiceSsl, pduSystemTimeFormat=pduSystemTimeFormat, pduEmdHumiHighCritical=pduEmdHumiHighCritical, pduPwrMonitoringOutletCfgPduDEntry=pduPwrMonitoringOutletCfgPduDEntry, outletCfgPduBOverCurrWarning=outletCfgPduBOverCurrWarning, pduPwrMonitoringOutletStatusTablePduC=pduPwrMonitoringOutletStatusTablePduC, pduInletCommRestore=pduInletCommRestore, pduUpgradeOutletSuccess=pduUpgradeOutletSuccess, pduIdentSerialNumber=pduIdentSerialNumber, pduOutletRebootUser=pduOutletRebootUser, outletPduCEnergy=outletPduCEnergy, pduOutletEnergyReset=pduOutletEnergyReset, outletCfgPduDName=outletCfgPduDName, pduPwrMonitoringOutletCfgPduBEntry=pduPwrMonitoringOutletCfgPduBEntry, pduNetworkServiceSslForce=pduNetworkServiceSslForce, pduSystemTimeChangeNtp=pduSystemTimeChangeNtp, pduEnvMonitoringTempAlarm=pduEnvMonitoringTempAlarm, inletIndex=inletIndex, pduEmdTempLowCritical=pduEmdTempLowCritical, outletCtlPduBIndex=outletCtlPduBIndex, receiverDescription=receiverDescription, outletCfgPduBDelayOnStatus=outletCfgPduBDelayOnStatus, outletCfgPduDDelayOffStatus=outletCfgPduDDelayOffStatus, pduEmdTempLowCritToWarn=pduEmdTempLowCritToWarn, pduNetworkSecuritySnmpFailTimes=pduNetworkSecuritySnmpFailTimes, inletStatusPhase2=inletStatusPhase2, inletVoltPhase2=inletVoltPhase2, pduNetworkServiceSshControl=pduNetworkServiceSshControl, outletCfgPduBDelayOnTime=outletCfgPduBDelayOnTime, pduNetworkServicePingControl=pduNetworkServicePingControl, mailRecvReceiverAddr=mailRecvReceiverAddr, outletPduBStatus=outletPduBStatus, inletCfgVoltWarnPhase1=inletCfgVoltWarnPhase1, pduPwrMonitoringOutletCfgTablePduB=pduPwrMonitoringOutletCfgTablePduB, pduEmailPort=pduEmailPort, pduEmdHumiLowCritToWarn=pduEmdHumiLowCritToWarn, pduNetworkTcpipIpv4Gateway=pduNetworkTcpipIpv4Gateway, mailRecvEventLevel=mailRecvEventLevel, pduPwrMonitoring=pduPwrMonitoring, outletCfgPduCDelayOnStatus=outletCfgPduCDelayOnStatus, pduSystemTimeDisplay=pduSystemTimeDisplay, pduInletVoltPhase1WarnToNormal=pduInletVoltPhase1WarnToNormal, pduSystemTimeDayLightSaving=pduSystemTimeDayLightSaving, pduNetworkSecuritySshInterval=pduNetworkSecuritySshInterval, pduInletVoltPhase2CritToWarn=pduInletVoltPhase2CritToWarn, pduInletVoltPhase2Critical=pduInletVoltPhase2Critical, pduObjects=pduObjects, pduNetworkServiceSslControl=pduNetworkServiceSslControl, outletPduAState=outletPduAState, pduEmdAlarm2NotActive=pduEmdAlarm2NotActive, inletStatusPhase3=inletStatusPhase3, pduNetworkTcpipIpv6=pduNetworkTcpipIpv6, pduSystemColdBoot=pduSystemColdBoot, pduPwrMonitoringOutletPduB=pduPwrMonitoringOutletPduB, pduNetworkServiceSslPort=pduNetworkServiceSslPort, pduSystemCfgChange=pduSystemCfgChange, mailRecvIndex=mailRecvIndex, pduSystemTimeManualTime=pduSystemTimeManualTime, outletCfgPduBDelayOffTime=outletCfgPduBDelayOffTime, pduSnmpControl=pduSnmpControl, inletCurrPhase3=inletCurrPhase3, pduEmdHumiLowWarn=pduEmdHumiLowWarn, pduEmdTempHighCritical=pduEmdTempHighCritical, pduPwrMonitoringOutletCtlTablePduB=pduPwrMonitoringOutletCtlTablePduB, pduIdentAgentSoftwareVersion=pduIdentAgentSoftwareVersion, pduEventlogClear=pduEventlogClear, pduNetworkTcpipIpv6Prefix=pduNetworkTcpipIpv6Prefix, outletCfgPduBOverPwrWarning=outletCfgPduBOverPwrWarning, pduInletLoadCritical=pduInletLoadCritical, pduPwrMonitoringOutletCfgTablePduD=pduPwrMonitoringOutletCfgTablePduD, pduNetworkServiceRadiusControl=pduNetworkServiceRadiusControl, pduPwrMonitoringOutletCtlPduBEntry=pduPwrMonitoringOutletCtlPduBEntry, pduInletHistoryClear=pduInletHistoryClear, pduPwrMonitoringOutletCtlPduDEntry=pduPwrMonitoringOutletCtlPduDEntry, inletCfgCurrCritPhase2=inletCfgCurrCritPhase2, outletCfgPduADelayOnTime=outletCfgPduADelayOnTime, pduPwrMonitoringOutletCfgTablePduC=pduPwrMonitoringOutletCfgTablePduC, pduSystemTimeManualDate=pduSystemTimeManualDate, outletCfgPduCOverCurrWarning=outletCfgPduCOverCurrWarning, pduEmdTempLowWarn=pduEmdTempLowWarn, pduNetworkSecurityHttp=pduNetworkSecurityHttp, pduOutletHistoryClear=pduOutletHistoryClear, outletPduDState=outletPduDState, inletStatus=inletStatus, pduInletCurrPhase1Warn=pduInletCurrPhase1Warn, pduPwrMonitoringOutletPduA=pduPwrMonitoringOutletPduA, pduPwrMonitoringOutlet=pduPwrMonitoringOutlet, pduEnvMonitoringHumi=pduEnvMonitoringHumi, outletCfgPduDDelayOffTime=outletCfgPduDDelayOffTime, pduEmailReceiversTable=pduEmailReceiversTable, pduInletCurrPhase3CritToWarn=pduInletCurrPhase3CritToWarn, pduNetworkSecuritySnmpInterval=pduNetworkSecuritySnmpInterval, pduUpgradeInletSuccess=pduUpgradeInletSuccess, pduOutletCommLost=pduOutletCommLost, inletStatusPhase1=inletStatusPhase1, inletPowerPhase3=inletPowerPhase3, outletCfgPduCDelayOffStatus=outletCfgPduCDelayOffStatus, pduEnvMonitoringHumiLowCritical=pduEnvMonitoringHumiLowCritical, pduPwrMonitoringOutletNumPduA=pduPwrMonitoringOutletNumPduA, pduNetworkSecurity=pduNetworkSecurity, pduNetworkTcpipIpv6PrimaryDNS=pduNetworkTcpipIpv6PrimaryDNS, pduEnvMonitoringTempHystersis=pduEnvMonitoringTempHystersis, inletVoltPhase3=inletVoltPhase3, pduSystemTimeNtpServer=pduSystemTimeNtpServer, pduPwrMonitoringOutletNumPduD=pduPwrMonitoringOutletNumPduD, pduInletCurrPhase2WarnToNormal=pduInletCurrPhase2WarnToNormal, outletPduDEnergy=outletPduDEnergy, pduPwrMonitoringInletStatusTable=pduPwrMonitoringInletStatusTable, outletCfgPduCReboot=outletCfgPduCReboot, outletPduCResetFrom=outletPduCResetFrom, pduSystemTimeNtpControl=pduSystemTimeNtpControl, pduPwrMonitoringOutletStatusPduCEntry=pduPwrMonitoringOutletStatusPduCEntry, pdu=pdu)
mibBuilder.exportSymbols("SPSv1-MIB", inletResetFrom=inletResetFrom, pduEmailReceiversEntry=pduEmailReceiversEntry, pduPwrMonitoringOutletCfgTablePduA=pduPwrMonitoringOutletCfgTablePduA, pduEnvMonitoringHumiHighCritical=pduEnvMonitoringHumiHighCritical, pduEmailServer=pduEmailServer, pduSystemReboot=pduSystemReboot, outletCtlPduCIndex=outletCtlPduCIndex, pduInletVoltPhase3Warn=pduInletVoltPhase3Warn, pduPwrMonitoringOutletCtlPduAEntry=pduPwrMonitoringOutletCtlPduAEntry, pduNetworkSecuritySsh=pduNetworkSecuritySsh, pduNetworkTcpipIpv6Control=pduNetworkTcpipIpv6Control, outletPduAPower=outletPduAPower, pduSnmpTrapsReceiversTable=pduSnmpTrapsReceiversTable, pduSystemTimeSetting=pduSystemTimeSetting, pduSystemTimeChangeUser=pduSystemTimeChangeUser, pduPwrMonitoringInletNum=pduPwrMonitoringInletNum, pduEnvMonitoringHumiAlarm=pduEnvMonitoringHumiAlarm, outletPduDResetFrom=outletPduDResetFrom, pduOutletOffSchedule=pduOutletOffSchedule, pduFirmUpgrade=pduFirmUpgrade, pduNetworkTcpipIpv6AutoConfig=pduNetworkTcpipIpv6AutoConfig, pduInletCurrPhase2Critical=pduInletCurrPhase2Critical, pduEmailAuthUsername=pduEmailAuthUsername, pduInletLoadCritToWarn=pduInletLoadCritToWarn, pduNetworkTcpipIpv4=pduNetworkTcpipIpv4, inletCfgLoadCritical=inletCfgLoadCritical, outletPduBPwrFactor=outletPduBPwrFactor, pduPwrMonitoringInletCfgEntry=pduPwrMonitoringInletCfgEntry, pduNetworkServiceRadiusRetry=pduNetworkServiceRadiusRetry, pduSystem=pduSystem, outletCfgPduAName=outletCfgPduAName, pduSystemTimeZone=pduSystemTimeZone, pduTraps=pduTraps, inletCfgVoltCritPhase2=inletCfgVoltCritPhase2, outletCfgPduDOverPwrWarning=outletCfgPduDOverPwrWarning, pduEmdHumiHighWarn=pduEmdHumiHighWarn, pduPwrMonitoringInletStatusEntry=pduPwrMonitoringInletStatusEntry, outletCfgPduAOverCurrWarning=outletCfgPduAOverCurrWarning, pduUpgradeInletFail=pduUpgradeInletFail, outletCfgPduCOverCurrCritical=outletCfgPduCOverCurrCritical, inletEnergy=inletEnergy, pduNetworkSecurityHttpInterval=pduNetworkSecurityHttpInterval, pduEmailAuthPassword=pduEmailAuthPassword, pduRs485Online=pduRs485Online, outletCfgPduDDelayOnStatus=outletCfgPduDDelayOnStatus, pduNetworkTcpipIpv4Subnet=pduNetworkTcpipIpv4Subnet, pduEnvMonitoringCfg=pduEnvMonitoringCfg, outletPduCState=outletPduCState, pduEmdTempHighWarn=pduEmdTempHighWarn, pduInletVoltPhase3Critical=pduInletVoltPhase3Critical, inletCfgIndex=inletCfgIndex, outletPduAIndex=outletPduAIndex, pduPwrMonitoringOutletCtlPduCEntry=pduPwrMonitoringOutletCtlPduCEntry, pduDeletUser=pduDeletUser, pduEmdAlarm2Active=pduEmdAlarm2Active, pduPwrMonitoringOutletPduD=pduPwrMonitoringOutletPduD, pduSystemWebRefresh=pduSystemWebRefresh, pduPwrMonitoringOutletNumPduB=pduPwrMonitoringOutletNumPduB, pduInletCommLost=pduInletCommLost, pduOutletPwrCritical=pduOutletPwrCritical, outletPduACurrent=outletPduACurrent, pduPwrMonitoringOutletPduC=pduPwrMonitoringOutletPduC, pduSystemParamImport=pduSystemParamImport, pduPwrMonitoringOutletCfgPduAEntry=pduPwrMonitoringOutletCfgPduAEntry, pduNetworkServiceSshPort=pduNetworkServiceSshPort, outletCfgPduBReboot=outletCfgPduBReboot, pduPwrMonitoringOutletCtlTablePduA=pduPwrMonitoringOutletCtlTablePduA, outletPduCPwrFactor=outletPduCPwrFactor, pduSystemName=pduSystemName, pduEnvMonitoringTempLowWarning=pduEnvMonitoringTempLowWarning, pduSystemResetToDefault=pduSystemResetToDefault, pduInletEnergyReset=pduInletEnergyReset, pduEmdHumiHighCritToWarn=pduEmdHumiHighCritToWarn, pduEmdHumiHighWarnToNormal=pduEmdHumiHighWarnToNormal, outletCfgPduAOverPwrCritical=outletCfgPduAOverPwrCritical, inletCfgVoltWarnPhase3=inletCfgVoltWarnPhase3, inletCfgVoltCritPhase3=inletCfgVoltCritPhase3, outletPduBResetFrom=outletPduBResetFrom, pduSnmpTrapsReceiversEntry=pduSnmpTrapsReceiversEntry, pduPwrMonitoringInlet=pduPwrMonitoringInlet, outletCfgPduAIndex=outletCfgPduAIndex, outletCfgPduBDelayOffStatus=outletCfgPduBDelayOffStatus, pduMailSentPass=pduMailSentPass, outletCfgPduBOverPwrCritical=outletCfgPduBOverPwrCritical, inletCfgLoadWarning=inletCfgLoadWarning, pduEmdTempHighWarnToNormal=pduEmdTempHighWarnToNormal, pduNetworkServiceRadiusSecretKey=pduNetworkServiceRadiusSecretKey, pduInletLoadWarn=pduInletLoadWarn, inletCfgCurrWarnPhase3=inletCfgCurrWarnPhase3, outletCfgPduDIndex=outletCfgPduDIndex, outletPduCStatus=outletPduCStatus, pduOutletCurrCritToWarn=pduOutletCurrCritToWarn, pduInletVoltPhase1Warn=pduInletVoltPhase1Warn, sps=sps, pduResetToDefault=pduResetToDefault, pduNetworkTcpip=pduNetworkTcpip, trapsReceiverAddr=trapsReceiverAddr, pduPwrMonitoringOutletCtlTablePduC=pduPwrMonitoringOutletCtlTablePduC, pduInletVoltPhase3WarnToNormal=pduInletVoltPhase3WarnToNormal, pduInletCurrPhase3Warn=pduInletCurrPhase3Warn, mailRecvEmailType=mailRecvEmailType, pduSnmpVersion=pduSnmpVersion, pduEmdHumiLowCritical=pduEmdHumiLowCritical, pduEnvMonitoringHumiHystersis=pduEnvMonitoringHumiHystersis, pduOutletCurrWarn=pduOutletCurrWarn, pduOutletOnSchedule=pduOutletOnSchedule, pduEnvMonitoringTempHighWarning=pduEnvMonitoringTempHighWarning, pduPwrMonitoringOutletStatusPduAEntry=pduPwrMonitoringOutletStatusPduAEntry, pduNetworkTcpipIpv6Router=pduNetworkTcpipIpv6Router, pduEnvMonitoringTemp=pduEnvMonitoringTemp, pduMailSentFail=pduMailSentFail, pduSystemTime=pduSystemTime, pduNetworkServiceRadiusPort=pduNetworkServiceRadiusPort, pduOutletPwrWarnToNormal=pduOutletPwrWarnToNormal, inletPwrFactorPhase1=inletPwrFactorPhase1, pduNetworkServiceRadiusTimeout=pduNetworkServiceRadiusTimeout, inletCfgVoltCritPhase1=inletCfgVoltCritPhase1, pduInletVoltPhase2WarnToNormal=pduInletVoltPhase2WarnToNormal, pduSystemTimeChangeRtc=pduSystemTimeChangeRtc, inletCfgCurrCritPhase3=inletCfgCurrCritPhase3, outletCfgPduDOverCurrCritical=outletCfgPduDOverCurrCritical, pduNetworkTcpipIpv4Address=pduNetworkTcpipIpv4Address, outletCtlPduAControl=outletCtlPduAControl, pduEmdTempLowWarnToNormal=pduEmdTempLowWarnToNormal, pduOutletPwrCritTOWarn=pduOutletPwrCritTOWarn, outletCfgPduCDelayOnTime=outletCfgPduCDelayOnTime, pduInletCurrPhase2CritToWarn=pduInletCurrPhase2CritToWarn, pduEnvMonitoring=pduEnvMonitoring)
