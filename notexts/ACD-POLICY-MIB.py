#
# PySNMP MIB module ACD-POLICY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/accedian/ACD-POLICY-MIB
# Produced by pysmi-1.1.12 at Mon Jul  1 09:09:17 2024
# On host fv-az532-988 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
acdMibs, = mibBuilder.importSymbols("ACCEDIAN-SMI", "acdMibs")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, NotificationType, IpAddress, Counter32, Gauge32, Counter64, iso, ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Integer32, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "IpAddress", "Counter32", "Gauge32", "Counter64", "iso", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Integer32", "Unsigned32", "ObjectIdentity")
TextualConvention, DateAndTime, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "DisplayString", "TruthValue")
acdPolicy = ModuleIdentity((1, 3, 6, 1, 4, 1, 22420, 2, 3))
acdPolicy.setRevisions(('2011-10-10 01:00', '2011-02-28 01:00', '2010-11-10 01:00', '2008-06-15 01:00', '2008-05-01 01:00', '2008-02-06 01:00', '2007-05-15 01:00', '2007-03-28 01:00', '2006-08-06 01:00',))
if mibBuilder.loadTexts: acdPolicy.setLastUpdated('201110100100Z')
if mibBuilder.loadTexts: acdPolicy.setOrganization('Accedian Networks, Inc.')
acdPolicyNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 3, 4))
acdPolicyMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5))
acdPolicyConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 3, 6))
acdPolicyList = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 1))
acdPolicyPort = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 2))
acdPolicyTableTid = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 3))
acdPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1), )
if mibBuilder.loadTexts: acdPolicyTable.setStatus('current')
acdPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1), ).setIndexNames((0, "ACD-POLICY-MIB", "acdPolicyID"))
if mibBuilder.loadTexts: acdPolicyEntry.setStatus('current')
acdPolicyID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdPolicyID.setStatus('current')
acdPolicyListID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyListID.setStatus('current')
acdPolicyEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyEntryID.setStatus('current')
acdPolicyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyEnable.setStatus('current')
acdPolicyFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("layer2filter", 0), ("ipv4filter", 1), ("ipv6filter", 2), ("vlist", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyFilterType.setStatus('current')
acdPolicyFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyFilterIndex.setStatus('current')
acdPolicyDropEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyDropEnable.setStatus('deprecated')
acdPolicyMonitorEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyMonitorEnable.setStatus('current')
acdPolicyMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("monitor1", 1), ("monitor2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyMonitorIndex.setStatus('current')
acdPolicyRegulatorEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyRegulatorEnable.setStatus('current')
acdPolicyRegulatorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyRegulatorIndex.setStatus('current')
acdPolicyRegulatorMarking = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("green", 1), ("yellow", 2), ("red", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyRegulatorMarking.setStatus('current')
acdPolicyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("drop", 1), ("permit", 2), ("mgmtOAM", 3), ("mgmtOAMandDrop", 4), ("mgmtOAMandForward", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyAction.setStatus('current')
acdPolicyEvcMappingEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("push", 2), ("pop", 3), ("replace", 4), ("popAndReplace", 5), ("pushAndPreserve", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyEvcMappingEncaps.setStatus('current')
acdPolicyEvcMappingEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cvlan", 1), ("svlan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyEvcMappingEtype.setStatus('current')
acdPolicyEvcMappingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyEvcMappingVlanId.setStatus('current')
acdPolicyCosMappingPcpAction = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("preserve", 1), ("direct", 2), ("map", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyCosMappingPcpAction.setStatus('current')
acdPolicyCosMappingChoice1En = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyCosMappingChoice1En.setStatus('current')
acdPolicyCosMappingChoice1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pcpVlan", 1), ("pcpVlanInVlan", 2), ("pre", 3), ("dscp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyCosMappingChoice1Type.setStatus('current')
acdPolicyCosMappingChoice1Profile = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyCosMappingChoice1Profile.setStatus('current')
acdPolicyCosMappingChoice1RegSet = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyCosMappingChoice1RegSet.setStatus('current')
acdPolicyCosMappingChoice2En = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyCosMappingChoice2En.setStatus('current')
acdPolicyCosMappingChoice2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pcpVlan", 1), ("pcpVlanInVlan", 2), ("pre", 3), ("dscp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyCosMappingChoice2Type.setStatus('current')
acdPolicyCosMappingChoice2Profile = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyCosMappingChoice2Profile.setStatus('current')
acdPolicyCosMappingChoice2RegSet = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyCosMappingChoice2RegSet.setStatus('current')
acdPolicyDefaultMappingGreenCfi = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyDefaultMappingGreenCfi.setStatus('current')
acdPolicyDefaultMappingGreenPrior = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyDefaultMappingGreenPrior.setStatus('current')
acdPolicyDefaultMappingYellowCfi = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyDefaultMappingYellowCfi.setStatus('current')
acdPolicyDefaultMappingYellowPrior = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyDefaultMappingYellowPrior.setStatus('current')
acdPolicyOutgoingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 30), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyOutgoingPort.setStatus('current')
acdPolicyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2), )
if mibBuilder.loadTexts: acdPolicyStatsTable.setStatus('current')
acdPolicyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1), ).setIndexNames((0, "ACD-POLICY-MIB", "acdPolicyStatsID"))
if mibBuilder.loadTexts: acdPolicyStatsEntry.setStatus('current')
acdPolicyStatsID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdPolicyStatsID.setStatus('current')
acdPolicyStatsListID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyStatsListID.setStatus('current')
acdPolicyStatsEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyStatsEntryID.setStatus('current')
acdPolicyStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 4), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyStatsInPkts.setStatus('current')
acdPolicyStatsInOverflowPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyStatsInOverflowPkts.setStatus('current')
acdPolicyStatsInHCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyStatsInHCPkts.setStatus('current')
acdPolicyStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 7), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyStatsInOctets.setStatus('current')
acdPolicyStatsInOverflowOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 8), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyStatsInOverflowOctets.setStatus('current')
acdPolicyStatsInHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 9), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyStatsInHCOctets.setStatus('current')
acdPolicyStatsInPktsErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 10), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyStatsInPktsErr.setStatus('current')
acdPolicyStatsInOverflowPktsErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 11), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyStatsInOverflowPktsErr.setStatus('current')
acdPolicyStatsInHCPktsErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 12), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyStatsInHCPktsErr.setStatus('current')
acdPolicyHistStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3), )
if mibBuilder.loadTexts: acdPolicyHistStatsTable.setStatus('current')
acdPolicyHistStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1), ).setIndexNames((0, "ACD-POLICY-MIB", "acdPolicyHistStatsID"), (0, "ACD-POLICY-MIB", "acdPolicyHistStatsSampleIndex"))
if mibBuilder.loadTexts: acdPolicyHistStatsEntry.setStatus('current')
acdPolicyHistStatsID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdPolicyHistStatsID.setStatus('current')
acdPolicyHistStatsListID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsListID.setStatus('current')
acdPolicyHistStatsEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsEntryID.setStatus('current')
acdPolicyHistStatsSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 4), Unsigned32())
if mibBuilder.loadTexts: acdPolicyHistStatsSampleIndex.setStatus('current')
acdPolicyHistStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsStatus.setStatus('current')
acdPolicyHistStatsDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsDuration.setStatus('current')
acdPolicyHistStatsIntervalEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsIntervalEnd.setStatus('current')
acdPolicyHistStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 8), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsInPkts.setStatus('current')
acdPolicyHistStatsInOverflowPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 9), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsInOverflowPkts.setStatus('current')
acdPolicyHistStatsInHCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 10), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsInHCPkts.setStatus('current')
acdPolicyHistStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 11), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsInOctets.setStatus('current')
acdPolicyHistStatsInOverflowOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 12), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsInOverflowOctets.setStatus('current')
acdPolicyHistStatsInHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 13), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsInHCOctets.setStatus('current')
acdPolicyHistStatsInPktsErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 14), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsInPktsErr.setStatus('current')
acdPolicyHistStatsInOverflowPktsErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 15), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsInOverflowPktsErr.setStatus('current')
acdPolicyHistStatsInHCPktsErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 16), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsInHCPktsErr.setStatus('current')
acdPolicyListTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 1, 1), )
if mibBuilder.loadTexts: acdPolicyListTable.setStatus('current')
acdPolicyListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 1, 1, 1), ).setIndexNames((0, "ACD-POLICY-MIB", "acdPolicyListEntryID"))
if mibBuilder.loadTexts: acdPolicyListEntry.setStatus('current')
acdPolicyListEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdPolicyListEntryID.setStatus('current')
acdPolicyListName = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyListName.setStatus('current')
acdPolicyListNbrEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyListNbrEntries.setStatus('current')
acdPolicyPortTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 2, 1), )
if mibBuilder.loadTexts: acdPolicyPortTable.setStatus('current')
acdPolicyPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 2, 1, 1), ).setIndexNames((0, "ACD-POLICY-MIB", "acdPolicyPortEntryID"))
if mibBuilder.loadTexts: acdPolicyPortEntry.setStatus('current')
acdPolicyPortEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdPolicyPortEntryID.setStatus('current')
acdPolicyPortListID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyPortListID.setStatus('current')
acdPolicyTableLastChangeTid = MibScalar((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyTableLastChangeTid.setStatus('current')
acdPolicyCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 3, 6, 1))
acdPolicyGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 3, 6, 2))
acdPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 3, 6, 2, 1)).setObjects(("ACD-POLICY-MIB", "acdPolicyListID"), ("ACD-POLICY-MIB", "acdPolicyEntryID"), ("ACD-POLICY-MIB", "acdPolicyEnable"), ("ACD-POLICY-MIB", "acdPolicyFilterType"), ("ACD-POLICY-MIB", "acdPolicyFilterIndex"), ("ACD-POLICY-MIB", "acdPolicyMonitorEnable"), ("ACD-POLICY-MIB", "acdPolicyMonitorIndex"), ("ACD-POLICY-MIB", "acdPolicyRegulatorEnable"), ("ACD-POLICY-MIB", "acdPolicyRegulatorIndex"), ("ACD-POLICY-MIB", "acdPolicyRegulatorMarking"), ("ACD-POLICY-MIB", "acdPolicyAction"), ("ACD-POLICY-MIB", "acdPolicyEvcMappingEncaps"), ("ACD-POLICY-MIB", "acdPolicyEvcMappingEtype"), ("ACD-POLICY-MIB", "acdPolicyEvcMappingVlanId"), ("ACD-POLICY-MIB", "acdPolicyCosMappingPcpAction"), ("ACD-POLICY-MIB", "acdPolicyCosMappingChoice1En"), ("ACD-POLICY-MIB", "acdPolicyCosMappingChoice1Type"), ("ACD-POLICY-MIB", "acdPolicyCosMappingChoice1Profile"), ("ACD-POLICY-MIB", "acdPolicyCosMappingChoice1RegSet"), ("ACD-POLICY-MIB", "acdPolicyCosMappingChoice2En"), ("ACD-POLICY-MIB", "acdPolicyCosMappingChoice2Type"), ("ACD-POLICY-MIB", "acdPolicyCosMappingChoice2Profile"), ("ACD-POLICY-MIB", "acdPolicyCosMappingChoice2RegSet"), ("ACD-POLICY-MIB", "acdPolicyDefaultMappingGreenCfi"), ("ACD-POLICY-MIB", "acdPolicyDefaultMappingGreenPrior"), ("ACD-POLICY-MIB", "acdPolicyDefaultMappingYellowCfi"), ("ACD-POLICY-MIB", "acdPolicyDefaultMappingYellowPrior"), ("ACD-POLICY-MIB", "acdPolicyOutgoingPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPolicyGroup = acdPolicyGroup.setStatus('current')
acdPolicyStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 3, 6, 2, 2)).setObjects(("ACD-POLICY-MIB", "acdPolicyStatsListID"), ("ACD-POLICY-MIB", "acdPolicyStatsEntryID"), ("ACD-POLICY-MIB", "acdPolicyStatsInPkts"), ("ACD-POLICY-MIB", "acdPolicyStatsInOverflowPkts"), ("ACD-POLICY-MIB", "acdPolicyStatsInHCPkts"), ("ACD-POLICY-MIB", "acdPolicyStatsInOctets"), ("ACD-POLICY-MIB", "acdPolicyStatsInOverflowOctets"), ("ACD-POLICY-MIB", "acdPolicyStatsInHCOctets"), ("ACD-POLICY-MIB", "acdPolicyStatsInPktsErr"), ("ACD-POLICY-MIB", "acdPolicyStatsInOverflowPktsErr"), ("ACD-POLICY-MIB", "acdPolicyStatsInHCPktsErr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPolicyStatsGroup = acdPolicyStatsGroup.setStatus('current')
acdPolicyHistStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 3, 6, 2, 3)).setObjects(("ACD-POLICY-MIB", "acdPolicyHistStatsListID"), ("ACD-POLICY-MIB", "acdPolicyHistStatsEntryID"), ("ACD-POLICY-MIB", "acdPolicyHistStatsStatus"), ("ACD-POLICY-MIB", "acdPolicyHistStatsDuration"), ("ACD-POLICY-MIB", "acdPolicyHistStatsIntervalEnd"), ("ACD-POLICY-MIB", "acdPolicyHistStatsInPkts"), ("ACD-POLICY-MIB", "acdPolicyHistStatsInOverflowPkts"), ("ACD-POLICY-MIB", "acdPolicyHistStatsInHCPkts"), ("ACD-POLICY-MIB", "acdPolicyHistStatsInOctets"), ("ACD-POLICY-MIB", "acdPolicyHistStatsInOverflowOctets"), ("ACD-POLICY-MIB", "acdPolicyHistStatsInHCOctets"), ("ACD-POLICY-MIB", "acdPolicyHistStatsInPktsErr"), ("ACD-POLICY-MIB", "acdPolicyHistStatsInOverflowPktsErr"), ("ACD-POLICY-MIB", "acdPolicyHistStatsInHCPktsErr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPolicyHistStatsGroup = acdPolicyHistStatsGroup.setStatus('current')
acdPolicyDeprecatedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 3, 6, 2, 4)).setObjects(("ACD-POLICY-MIB", "acdPolicyDropEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPolicyDeprecatedGroup = acdPolicyDeprecatedGroup.setStatus('deprecated')
acdPolicyListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 3, 6, 2, 5)).setObjects(("ACD-POLICY-MIB", "acdPolicyListName"), ("ACD-POLICY-MIB", "acdPolicyListNbrEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPolicyListGroup = acdPolicyListGroup.setStatus('current')
acdPolicyPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 3, 6, 2, 6)).setObjects(("ACD-POLICY-MIB", "acdPolicyPortListID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPolicyPortGroup = acdPolicyPortGroup.setStatus('current')
acdPolicyTidGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 3, 6, 2, 7)).setObjects(("ACD-POLICY-MIB", "acdPolicyTableLastChangeTid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPolicyTidGroup = acdPolicyTidGroup.setStatus('current')
acdPolicyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 22420, 2, 3, 6, 1, 1)).setObjects(("ACD-POLICY-MIB", "acdPolicyGroup"), ("ACD-POLICY-MIB", "acdPolicyStatsGroup"), ("ACD-POLICY-MIB", "acdPolicyHistStatsGroup"), ("ACD-POLICY-MIB", "acdPolicyListGroup"), ("ACD-POLICY-MIB", "acdPolicyPortGroup"), ("ACD-POLICY-MIB", "acdPolicyTidGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPolicyCompliance = acdPolicyCompliance.setStatus('current')
mibBuilder.exportSymbols("ACD-POLICY-MIB", acdPolicyListNbrEntries=acdPolicyListNbrEntries, acdPolicyPortGroup=acdPolicyPortGroup, acdPolicyStatsInPktsErr=acdPolicyStatsInPktsErr, acdPolicyHistStatsGroup=acdPolicyHistStatsGroup, acdPolicyCosMappingChoice2Type=acdPolicyCosMappingChoice2Type, acdPolicyCompliances=acdPolicyCompliances, acdPolicyStatsInOverflowOctets=acdPolicyStatsInOverflowOctets, acdPolicyCosMappingChoice1Type=acdPolicyCosMappingChoice1Type, acdPolicyEvcMappingEncaps=acdPolicyEvcMappingEncaps, acdPolicyStatsInHCPkts=acdPolicyStatsInHCPkts, acdPolicyDefaultMappingYellowCfi=acdPolicyDefaultMappingYellowCfi, acdPolicy=acdPolicy, acdPolicyHistStatsListID=acdPolicyHistStatsListID, acdPolicyListTable=acdPolicyListTable, acdPolicyPortTable=acdPolicyPortTable, acdPolicyHistStatsID=acdPolicyHistStatsID, acdPolicyHistStatsIntervalEnd=acdPolicyHistStatsIntervalEnd, acdPolicyStatsInHCOctets=acdPolicyStatsInHCOctets, acdPolicyCosMappingChoice1En=acdPolicyCosMappingChoice1En, acdPolicyHistStatsStatus=acdPolicyHistStatsStatus, acdPolicyHistStatsInOverflowPkts=acdPolicyHistStatsInOverflowPkts, acdPolicyListID=acdPolicyListID, acdPolicyTable=acdPolicyTable, acdPolicyHistStatsInHCPkts=acdPolicyHistStatsInHCPkts, acdPolicyCosMappingPcpAction=acdPolicyCosMappingPcpAction, acdPolicyHistStatsInOverflowOctets=acdPolicyHistStatsInOverflowOctets, acdPolicyListEntryID=acdPolicyListEntryID, acdPolicyStatsInOverflowPktsErr=acdPolicyStatsInOverflowPktsErr, acdPolicyDefaultMappingGreenPrior=acdPolicyDefaultMappingGreenPrior, acdPolicyStatsInHCPktsErr=acdPolicyStatsInHCPktsErr, acdPolicyConformance=acdPolicyConformance, acdPolicyCosMappingChoice1RegSet=acdPolicyCosMappingChoice1RegSet, acdPolicyPortEntry=acdPolicyPortEntry, acdPolicyPortListID=acdPolicyPortListID, acdPolicyStatsInPkts=acdPolicyStatsInPkts, acdPolicyHistStatsInPkts=acdPolicyHistStatsInPkts, acdPolicyPort=acdPolicyPort, acdPolicyDeprecatedGroup=acdPolicyDeprecatedGroup, acdPolicyOutgoingPort=acdPolicyOutgoingPort, acdPolicyStatsEntry=acdPolicyStatsEntry, acdPolicyRegulatorEnable=acdPolicyRegulatorEnable, acdPolicyGroup=acdPolicyGroup, PYSNMP_MODULE_ID=acdPolicy, acdPolicyEntryID=acdPolicyEntryID, acdPolicyStatsEntryID=acdPolicyStatsEntryID, acdPolicyHistStatsSampleIndex=acdPolicyHistStatsSampleIndex, acdPolicyListGroup=acdPolicyListGroup, acdPolicyFilterType=acdPolicyFilterType, acdPolicyStatsInOctets=acdPolicyStatsInOctets, acdPolicyHistStatsTable=acdPolicyHistStatsTable, acdPolicyCosMappingChoice1Profile=acdPolicyCosMappingChoice1Profile, acdPolicyTableLastChangeTid=acdPolicyTableLastChangeTid, acdPolicyEntry=acdPolicyEntry, acdPolicyList=acdPolicyList, acdPolicyStatsListID=acdPolicyStatsListID, acdPolicyAction=acdPolicyAction, acdPolicyHistStatsEntry=acdPolicyHistStatsEntry, acdPolicyStatsGroup=acdPolicyStatsGroup, acdPolicyHistStatsInPktsErr=acdPolicyHistStatsInPktsErr, acdPolicyNotifications=acdPolicyNotifications, acdPolicyRegulatorIndex=acdPolicyRegulatorIndex, acdPolicyEvcMappingVlanId=acdPolicyEvcMappingVlanId, acdPolicyFilterIndex=acdPolicyFilterIndex, acdPolicyCompliance=acdPolicyCompliance, acdPolicyHistStatsInOverflowPktsErr=acdPolicyHistStatsInOverflowPktsErr, acdPolicyGroups=acdPolicyGroups, acdPolicyHistStatsDuration=acdPolicyHistStatsDuration, acdPolicyEnable=acdPolicyEnable, acdPolicyRegulatorMarking=acdPolicyRegulatorMarking, acdPolicyMonitorIndex=acdPolicyMonitorIndex, acdPolicyCosMappingChoice2En=acdPolicyCosMappingChoice2En, acdPolicyHistStatsInHCPktsErr=acdPolicyHistStatsInHCPktsErr, acdPolicyID=acdPolicyID, acdPolicyDefaultMappingGreenCfi=acdPolicyDefaultMappingGreenCfi, acdPolicyMonitorEnable=acdPolicyMonitorEnable, acdPolicyStatsID=acdPolicyStatsID, acdPolicyEvcMappingEtype=acdPolicyEvcMappingEtype, acdPolicyDropEnable=acdPolicyDropEnable, acdPolicyListName=acdPolicyListName, acdPolicyHistStatsInOctets=acdPolicyHistStatsInOctets, acdPolicyStatsTable=acdPolicyStatsTable, acdPolicyCosMappingChoice2Profile=acdPolicyCosMappingChoice2Profile, acdPolicyHistStatsInHCOctets=acdPolicyHistStatsInHCOctets, acdPolicyTableTid=acdPolicyTableTid, acdPolicyListEntry=acdPolicyListEntry, acdPolicyMIBObjects=acdPolicyMIBObjects, acdPolicyStatsInOverflowPkts=acdPolicyStatsInOverflowPkts, acdPolicyTidGroup=acdPolicyTidGroup, acdPolicyCosMappingChoice2RegSet=acdPolicyCosMappingChoice2RegSet, acdPolicyHistStatsEntryID=acdPolicyHistStatsEntryID, acdPolicyPortEntryID=acdPolicyPortEntryID, acdPolicyDefaultMappingYellowPrior=acdPolicyDefaultMappingYellowPrior)
