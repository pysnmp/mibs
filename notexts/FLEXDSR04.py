#
# PySNMP MIB module FLEXDSR04 (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/2wcom/FLEXDSR04
# Produced by pysmi-1.1.12 at Tue Dec  3 09:38:40 2024
# On host fv-az566-8 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysName, sysLocation, sysContact, sysDescr = mibBuilder.importSymbols("SNMPv2-MIB", "sysName", "sysLocation", "sysContact", "sysDescr")
iso, Integer32, ModuleIdentity, NotificationType, Unsigned32, Gauge32, ObjectIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, MibIdentifier, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "ModuleIdentity", "NotificationType", "Unsigned32", "Gauge32", "ObjectIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "MibIdentifier", "Bits", "IpAddress")
DisplayString, TextualConvention, DateAndTime, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime", "TruthValue")
eventTimeStamp, eventPriority, Integer32d1, eventCounter, mibRelease, Integer32d2, commonVarbindsCompliance, FaultOK, FloatString, commonGroup = mibBuilder.importSymbols("TWOWCOM-COMMONVARBINDS", "eventTimeStamp", "eventPriority", "Integer32d1", "eventCounter", "mibRelease", "Integer32d2", "commonVarbindsCompliance", "FaultOK", "FloatString", "commonGroup")
decoder, dvbDecoder, other, dvbEncoder, encoder = mibBuilder.importSymbols("TWOWCOM-SMI", "decoder", "dvbDecoder", "other", "dvbEncoder", "encoder")
flexDSR04 = ModuleIdentity((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4))
flexDSR04.setRevisions(('2019-11-11 13:00', '2017-01-30 10:00', '2016-11-01 16:00', '2016-09-26 15:00', '2014-06-25 17:00', '2014-05-16 12:00', '2014-03-06 16:00', '2014-02-13 09:00', '2012-10-26 12:00',))
if mibBuilder.loadTexts: flexDSR04.setLastUpdated('201911111300Z')
if mibBuilder.loadTexts: flexDSR04.setOrganization('2wcom Systems GmbH')
class InputSource(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("notAssigned", 0), ("tsTuner", 1), ("tsAsi", 2), ("tsIp", 3), ("aoipUdp", 4), ("aoipIcecast", 5), ("internalStorage", 6))

class ServiceMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("noTransportstream", 0), ("automatic", 1), ("manual", 2))

flexDSR04Events = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 0))
tunerRfPowerEvent = NotificationType((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 0, 1)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("TWOWCOM-COMMONVARBINDS", "eventTimeStamp"), ("TWOWCOM-COMMONVARBINDS", "eventPriority"), ("TWOWCOM-COMMONVARBINDS", "eventCounter"), ("FLEXDSR04", "rfPowerValue"), ("FLEXDSR04", "tunerRfPowerEventValue"), ("FLEXDSR04", "tunerRfPowerEventTolerance"), ("FLEXDSR04", "tunerAlarmType"), ("FLEXDSR04", "tunerAlarmActive"))
if mibBuilder.loadTexts: tunerRfPowerEvent.setStatus('current')
tunerCnEvent = NotificationType((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 0, 2)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("TWOWCOM-COMMONVARBINDS", "eventTimeStamp"), ("TWOWCOM-COMMONVARBINDS", "eventPriority"), ("TWOWCOM-COMMONVARBINDS", "eventCounter"), ("FLEXDSR04", "cnValue"), ("FLEXDSR04", "tunerCnEventMinValue"), ("FLEXDSR04", "tunerAlarmType"), ("FLEXDSR04", "tunerAlarmActive"))
if mibBuilder.loadTexts: tunerCnEvent.setStatus('current')
tunerBerEvent = NotificationType((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 0, 3)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("TWOWCOM-COMMONVARBINDS", "eventTimeStamp"), ("TWOWCOM-COMMONVARBINDS", "eventPriority"), ("TWOWCOM-COMMONVARBINDS", "eventCounter"), ("FLEXDSR04", "viterbiLdpcBerValue"), ("FLEXDSR04", "tunerBerEventMaxValue"), ("FLEXDSR04", "tunerAlarmType"), ("FLEXDSR04", "tunerAlarmActive"))
if mibBuilder.loadTexts: tunerBerEvent.setStatus('current')
tunerTsSyncEvent = NotificationType((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 0, 4)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("TWOWCOM-COMMONVARBINDS", "eventTimeStamp"), ("TWOWCOM-COMMONVARBINDS", "eventPriority"), ("TWOWCOM-COMMONVARBINDS", "eventCounter"), ("FLEXDSR04", "tsSyncType"), ("FLEXDSR04", "tsSyncState"), ("FLEXDSR04", "tsSyncAlarmActive"))
if mibBuilder.loadTexts: tunerTsSyncEvent.setStatus('current')
asiTsSyncEvent = NotificationType((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 0, 5)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("TWOWCOM-COMMONVARBINDS", "eventTimeStamp"), ("TWOWCOM-COMMONVARBINDS", "eventPriority"), ("TWOWCOM-COMMONVARBINDS", "eventCounter"), ("FLEXDSR04", "tsSyncType"), ("FLEXDSR04", "tsSyncState"), ("FLEXDSR04", "tsSyncAlarmActive"))
if mibBuilder.loadTexts: asiTsSyncEvent.setStatus('current')
ipTsSyncEvent = NotificationType((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 0, 6)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("TWOWCOM-COMMONVARBINDS", "eventTimeStamp"), ("TWOWCOM-COMMONVARBINDS", "eventPriority"), ("TWOWCOM-COMMONVARBINDS", "eventCounter"), ("FLEXDSR04", "tsSyncType"), ("FLEXDSR04", "tsSyncState"), ("FLEXDSR04", "tsSyncAlarmActive"))
if mibBuilder.loadTexts: ipTsSyncEvent.setStatus('current')
etr290ConformityEvent = NotificationType((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 0, 7)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("TWOWCOM-COMMONVARBINDS", "eventTimeStamp"), ("TWOWCOM-COMMONVARBINDS", "eventPriority"), ("TWOWCOM-COMMONVARBINDS", "eventCounter"), ("FLEXDSR04", "etr290Conformity"), ("FLEXDSR04", "etr290ConformityAlarmActive"))
if mibBuilder.loadTexts: etr290ConformityEvent.setStatus('obsolete')
aoipUdpInputDataEvent = NotificationType((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 0, 8)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("TWOWCOM-COMMONVARBINDS", "eventTimeStamp"), ("TWOWCOM-COMMONVARBINDS", "eventPriority"), ("TWOWCOM-COMMONVARBINDS", "eventCounter"), ("FLEXDSR04", "udpInputDataChannel"), ("FLEXDSR04", "udpInputDataState"), ("FLEXDSR04", "udpInputDataAlarmActive"))
if mibBuilder.loadTexts: aoipUdpInputDataEvent.setStatus('current')
aoipIcecastInputDataEvent = NotificationType((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 0, 9)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("TWOWCOM-COMMONVARBINDS", "eventTimeStamp"), ("TWOWCOM-COMMONVARBINDS", "eventPriority"), ("TWOWCOM-COMMONVARBINDS", "eventCounter"), ("FLEXDSR04", "icecastInputDataServer"), ("FLEXDSR04", "icecastInputDataState"), ("FLEXDSR04", "icecastInputDataAlarmActive"))
if mibBuilder.loadTexts: aoipIcecastInputDataEvent.setStatus('current')
audioEvent = NotificationType((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 0, 10)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("TWOWCOM-COMMONVARBINDS", "eventTimeStamp"), ("TWOWCOM-COMMONVARBINDS", "eventPriority"), ("TWOWCOM-COMMONVARBINDS", "eventCounter"), ("FLEXDSR04", "audioChannel"), ("FLEXDSR04", "audioStatus"), ("FLEXDSR04", "audioAlarmActive"))
if mibBuilder.loadTexts: audioEvent.setStatus('current')
audioLevelEvent = NotificationType((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 0, 11)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("TWOWCOM-COMMONVARBINDS", "eventTimeStamp"), ("TWOWCOM-COMMONVARBINDS", "eventPriority"), ("TWOWCOM-COMMONVARBINDS", "eventCounter"), ("FLEXDSR04", "audioChannel"), ("FLEXDSR04", "audioLevel"), ("FLEXDSR04", "audioLevelEventMinValue"), ("FLEXDSR04", "audioLevelAlarmActive"))
if mibBuilder.loadTexts: audioLevelEvent.setStatus('current')
dteEvent = NotificationType((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 0, 12)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("TWOWCOM-COMMONVARBINDS", "eventTimeStamp"), ("TWOWCOM-COMMONVARBINDS", "eventPriority"), ("TWOWCOM-COMMONVARBINDS", "eventCounter"), ("FLEXDSR04", "dtePort"), ("FLEXDSR04", "dteDataAvailable"), ("FLEXDSR04", "dteAlarmActive"))
if mibBuilder.loadTexts: dteEvent.setStatus('current')
internalStorageEvent = NotificationType((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 0, 13)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("TWOWCOM-COMMONVARBINDS", "eventTimeStamp"), ("TWOWCOM-COMMONVARBINDS", "eventPriority"), ("TWOWCOM-COMMONVARBINDS", "eventCounter"), ("FLEXDSR04", "internalStorageState"))
if mibBuilder.loadTexts: internalStorageEvent.setStatus('current')
caseTemperatureEvent = NotificationType((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 0, 14)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("TWOWCOM-COMMONVARBINDS", "eventTimeStamp"), ("TWOWCOM-COMMONVARBINDS", "eventPriority"), ("TWOWCOM-COMMONVARBINDS", "eventCounter"), ("FLEXDSR04", "caseTemperature"), ("FLEXDSR04", "caseTemperatureEventMaxValue"), ("FLEXDSR04", "caseTemperatureAlarmActive"))
if mibBuilder.loadTexts: caseTemperatureEvent.setStatus('current')
inputSourceEvent = NotificationType((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 0, 15)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("TWOWCOM-COMMONVARBINDS", "eventTimeStamp"), ("TWOWCOM-COMMONVARBINDS", "eventPriority"), ("TWOWCOM-COMMONVARBINDS", "eventCounter"), ("FLEXDSR04", "outputType"), ("FLEXDSR04", "currentInputSourceOrder"), ("FLEXDSR04", "currentInputSourceType"))
if mibBuilder.loadTexts: inputSourceEvent.setStatus('current')
remoteControlUploadEvent = NotificationType((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 0, 16)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("TWOWCOM-COMMONVARBINDS", "eventTimeStamp"), ("TWOWCOM-COMMONVARBINDS", "eventPriority"), ("TWOWCOM-COMMONVARBINDS", "eventCounter"), ("FLEXDSR04", "remoteControlUploadType"), ("FLEXDSR04", "remoteControlUploadError"), ("FLEXDSR04", "remoteControlUploadGroup"), ("FLEXDSR04", "remoteControlUploadFile"))
if mibBuilder.loadTexts: remoteControlUploadEvent.setStatus('current')
optoInputEvent = NotificationType((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 0, 17)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("TWOWCOM-COMMONVARBINDS", "eventTimeStamp"), ("TWOWCOM-COMMONVARBINDS", "eventPriority"), ("TWOWCOM-COMMONVARBINDS", "eventCounter"), ("FLEXDSR04", "optoInputNumber"), ("FLEXDSR04", "optoInputState"))
if mibBuilder.loadTexts: optoInputEvent.setStatus('current')
sfnClockEvent = NotificationType((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 0, 18)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("TWOWCOM-COMMONVARBINDS", "eventTimeStamp"), ("TWOWCOM-COMMONVARBINDS", "eventPriority"), ("TWOWCOM-COMMONVARBINDS", "eventCounter"), ("FLEXDSR04", "sfn1ppsErrorState"), ("FLEXDSR04", "sfn10MHzErrorState"))
if mibBuilder.loadTexts: sfnClockEvent.setStatus('current')
ipPerEvent = NotificationType((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 0, 19)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("TWOWCOM-COMMONVARBINDS", "eventTimeStamp"), ("TWOWCOM-COMMONVARBINDS", "eventPriority"), ("TWOWCOM-COMMONVARBINDS", "eventCounter"), ("FLEXDSR04", "ipPerEventMode"), ("FLEXDSR04", "ipPerEventValue"), ("FLEXDSR04", "tsIpModePER"))
if mibBuilder.loadTexts: ipPerEvent.setStatus('current')
inputSourceSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1))
audioOutput1Table = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 1), )
if mibBuilder.loadTexts: audioOutput1Table.setStatus('current')
audioOutput1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 1, 1), ).setIndexNames((0, "FLEXDSR04", "audioOutput1Index"))
if mibBuilder.loadTexts: audioOutput1Entry.setStatus('current')
audioOutput1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: audioOutput1Index.setStatus('current')
audioOutput1Order = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mainSource", 1), ("backup1", 2), ("backup2", 3), ("backup3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioOutput1Order.setStatus('current')
audioOutput1InputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 1, 1, 3), InputSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audioOutput1InputSource.setStatus('current')
audioOutput1InputSourceEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audioOutput1InputSourceEnabled.setStatus('current')
audioOutput2Table = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 2), )
if mibBuilder.loadTexts: audioOutput2Table.setStatus('current')
audioOutput2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 2, 1), ).setIndexNames((0, "FLEXDSR04", "audioOutput2Index"))
if mibBuilder.loadTexts: audioOutput2Entry.setStatus('current')
audioOutput2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: audioOutput2Index.setStatus('current')
audioOutput2Order = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mainSource", 1), ("backup1", 2), ("backup2", 3), ("backup3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioOutput2Order.setStatus('current')
audioOutput2InputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 2, 1, 3), InputSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audioOutput2InputSource.setStatus('current')
audioOutput2InputSourceEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audioOutput2InputSourceEnabled.setStatus('current')
audioOutput3Table = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 3), )
if mibBuilder.loadTexts: audioOutput3Table.setStatus('current')
audioOutput3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 3, 1), ).setIndexNames((0, "FLEXDSR04", "audioOutput3Index"))
if mibBuilder.loadTexts: audioOutput3Entry.setStatus('current')
audioOutput3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: audioOutput3Index.setStatus('current')
audioOutput3Order = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mainSource", 1), ("backup1", 2), ("backup2", 3), ("backup3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioOutput3Order.setStatus('current')
audioOutput3InputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 3, 1, 3), InputSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audioOutput3InputSource.setStatus('current')
audioOutput3InputSourceEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 3, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audioOutput3InputSourceEnabled.setStatus('current')
audioOutput4Table = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 4), )
if mibBuilder.loadTexts: audioOutput4Table.setStatus('current')
audioOutput4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 4, 1), ).setIndexNames((0, "FLEXDSR04", "audioOutput4Index"))
if mibBuilder.loadTexts: audioOutput4Entry.setStatus('current')
audioOutput4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: audioOutput4Index.setStatus('current')
audioOutput4Order = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mainSource", 1), ("backup1", 2), ("backup2", 3), ("backup3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioOutput4Order.setStatus('current')
audioOutput4InputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 4, 1, 3), InputSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audioOutput4InputSource.setStatus('current')
audioOutput4InputSourceEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audioOutput4InputSourceEnabled.setStatus('current')
asiOutputTable = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 5), )
if mibBuilder.loadTexts: asiOutputTable.setStatus('current')
asiOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 5, 1), ).setIndexNames((0, "FLEXDSR04", "asiOutputIndex"))
if mibBuilder.loadTexts: asiOutputEntry.setStatus('current')
asiOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: asiOutputIndex.setStatus('current')
asiOutputOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mainSource", 1), ("backup1", 2), ("backup2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asiOutputOrder.setStatus('current')
asiOutputInputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 5, 1, 3), InputSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asiOutputInputSource.setStatus('current')
asiOutputInputSourceEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 5, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asiOutputInputSourceEnabled.setStatus('current')
ipOutputTable = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 6), )
if mibBuilder.loadTexts: ipOutputTable.setStatus('current')
ipOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 6, 1), ).setIndexNames((0, "FLEXDSR04", "ipOutputIndex"))
if mibBuilder.loadTexts: ipOutputEntry.setStatus('current')
ipOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: ipOutputIndex.setStatus('current')
ipOutputOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mainSource", 1), ("backup1", 2), ("backup2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutputOrder.setStatus('current')
ipOutputInputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 6, 1, 3), InputSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipOutputInputSource.setStatus('current')
ipOutputInputSourceEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipOutputInputSourceEnabled.setStatus('current')
switchCriteria = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10))
switchCriteriaTunerRfPower = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 1))
scTunerRfPowerEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scTunerRfPowerEnabled.setStatus('current')
scTunerRfPowerValue = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 1, 2), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: scTunerRfPowerValue.setStatus('current')
scTunerRfPowerTolerance = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 1, 3), Unsigned32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: scTunerRfPowerTolerance.setStatus('current')
scTunerRfPowerT1 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 1, 4), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: scTunerRfPowerT1.setStatus('current')
scTunerRfPowerT2 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 1, 5), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: scTunerRfPowerT2.setStatus('current')
switchCriteriaTunerCn = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 2))
scTunerCnEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scTunerCnEnabled.setStatus('current')
scTunerCnMinValue = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 2, 2), Integer32()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: scTunerCnMinValue.setStatus('current')
scTunerCnT1 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 2, 3), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: scTunerCnT1.setStatus('current')
scTunerCnT2 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 2, 4), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: scTunerCnT2.setStatus('current')
switchCriteriaTunerBer = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 3))
scTunerBerEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scTunerBerEnabled.setStatus('current')
scTunerBerMaxValue = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 3, 2), FloatString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scTunerBerMaxValue.setStatus('current')
scTunerBerT1 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 3, 3), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: scTunerBerT1.setStatus('current')
scTunerBerT2 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 3, 4), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: scTunerBerT2.setStatus('current')
switchCriteriaTunerTsSync = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 4))
scTunerTsSyncEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scTunerTsSyncEnabled.setStatus('current')
scTunerTsSyncT1 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 4, 2), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: scTunerTsSyncT1.setStatus('current')
scTunerTsSyncT2 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 4, 3), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: scTunerTsSyncT2.setStatus('current')
switchCriteriaAsiTsSync = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 5))
scAsiTsSyncEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 5, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scAsiTsSyncEnabled.setStatus('current')
scAsiTsSyncT1 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 5, 2), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: scAsiTsSyncT1.setStatus('current')
scAsiTsSyncT2 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 5, 3), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: scAsiTsSyncT2.setStatus('current')
switchCriteriaIpTsSync = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 6))
scIpTsSyncEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 6, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scIpTsSyncEnabled.setStatus('current')
scIpTsSyncT1 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 6, 2), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: scIpTsSyncT1.setStatus('current')
scIpTsSyncT2 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 6, 3), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: scIpTsSyncT2.setStatus('current')
switchCriteriaAudioOverIpUdp = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 7))
scAudioOverIpUdpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 7, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scAudioOverIpUdpEnabled.setStatus('current')
scAudioOverIpUdpT1 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 7, 2), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: scAudioOverIpUdpT1.setStatus('current')
scAudioOverIpUdpT2 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 7, 3), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: scAudioOverIpUdpT2.setStatus('current')
switchCriteriaAudioOverIpIcecast = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 8))
scAudioOverIpIcecastEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 8, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scAudioOverIpIcecastEnabled.setStatus('current')
scAudioOverIpIcecastT1 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 8, 2), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: scAudioOverIpIcecastT1.setStatus('current')
scAudioOverIpIcecastT2 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 8, 3), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: scAudioOverIpIcecastT2.setStatus('current')
switchCriteriaInternalStorage = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 9))
scInternalStorageEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 9, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scInternalStorageEnabled.setStatus('current')
switchCriteriaIpPer = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 10))
scIpPerEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 10, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scIpPerEnabled.setStatus('current')
scIpPerMode = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("combinedStream", 1), ("mainStream", 2), ("bothStreams", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scIpPerMode.setStatus('current')
scIpPerValue = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 10, 3), FloatString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scIpPerValue.setStatus('current')
scIpPerT1 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 10, 4), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: scIpPerT1.setStatus('current')
scIpPerT2 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 1, 10, 10, 5), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: scIpPerT2.setStatus('current')
interfaceSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 3))
xlrInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 3, 1))
xlrVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 3, 1, 1), )
if mibBuilder.loadTexts: xlrVolumeTable.setStatus('current')
xlrVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 3, 1, 1, 1), ).setIndexNames((0, "FLEXDSR04", "xlrVolumeIndex"))
if mibBuilder.loadTexts: xlrVolumeEntry.setStatus('current')
xlrVolumeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: xlrVolumeIndex.setStatus('current')
xlrVolumePort = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("audio1", 1), ("audio2", 2), ("audio3", 3), ("audio4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xlrVolumePort.setStatus('current')
xlrVolumeAnalog = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 3, 1, 1, 1, 3), Integer32d1().subtype(subtypeSpec=ValueRangeConstraint(-360, 60))).setUnits('db').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xlrVolumeAnalog.setStatus('current')
xlrVolumeDigital = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 3, 1, 1, 1, 4), Integer32d1().subtype(subtypeSpec=ValueRangeConstraint(-360, 60))).setUnits('db').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xlrVolumeDigital.setStatus('current')
xlrOutputType = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("analog", 2), ("digital", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xlrOutputType.setStatus('current')
audioLowPass15kHz = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 3, 1, 99), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audioLowPass15kHz.setStatus('current')
headphoneInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 3, 2))
headphoneVolume = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 3, 2, 1), Integer32d1().subtype(subtypeSpec=ValueRangeConstraint(-360, 60))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: headphoneVolume.setStatus('current')
headphoneAudioChannel = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 0), ("audio1", 1), ("audio2", 2), ("audio3", 3), ("audio4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: headphoneAudioChannel.setStatus('current')
dteInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 3, 3))
dteInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 3, 3, 1), )
if mibBuilder.loadTexts: dteInterfaceTable.setStatus('current')
dteInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 3, 3, 1, 1), ).setIndexNames((0, "FLEXDSR04", "dteInterfaceIndex"))
if mibBuilder.loadTexts: dteInterfaceEntry.setStatus('current')
dteInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)))
if mibBuilder.loadTexts: dteInterfaceIndex.setStatus('current')
dteInterfacePort = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("dteFront", 1), ("dte1", 2), ("dte2", 3), ("dte3", 4), ("dte4", 5), ("dte5", 6), ("dte6", 7), ("dte7", 8), ("dte8", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteInterfacePort.setStatus('current')
dteInterfaceBaudrate = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1200, 1200), ValueRangeConstraint(2400, 2400), ValueRangeConstraint(4800, 4800), ValueRangeConstraint(9600, 9600), ValueRangeConstraint(19200, 19200), ValueRangeConstraint(38400, 38400), ValueRangeConstraint(57600, 57600), ValueRangeConstraint(115200, 115200), ))).setUnits('baud').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteInterfaceBaudrate.setStatus('current')
state = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4))
tunerState = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 1))
rfPowerValue = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 1, 1), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: rfPowerValue.setStatus('current')
cnValue = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 1, 2), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnValue.setStatus('current')
cfoErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 1, 3), Integer32d2()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfoErrorValue.setStatus('current')
agcState = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 1, 4), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agcState.setStatus('current')
ceState = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 1, 5), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceState.setStatus('current')
symTimeState = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 1, 6), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symTimeState.setStatus('current')
carrierState = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 1, 7), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierState.setStatus('current')
fecLockedState = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 1, 8), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecLockedState.setStatus('current')
lockedState = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 1, 9), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockedState.setStatus('current')
punctureRate = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: punctureRate.setStatus('current')
viterbiLdpcBerValue = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 1, 11), FloatString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viterbiLdpcBerValue.setStatus('current')
rsBchBerValue = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 1, 12), FloatString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsBchBerValue.setStatus('current')
tunerAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 1, 20), )
if mibBuilder.loadTexts: tunerAlarmTable.setStatus('current')
tunerAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 1, 20, 1), ).setIndexNames((0, "FLEXDSR04", "tunerAlarmIndex"))
if mibBuilder.loadTexts: tunerAlarmEntry.setStatus('current')
tunerAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: tunerAlarmIndex.setStatus('current')
tunerAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rfPowerAlarm", 1), ("cnAlarm", 2), ("berAlarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunerAlarmType.setStatus('current')
tunerAlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 1, 20, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunerAlarmActive.setStatus('current')
tsState = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2))
nid = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nid.setStatus('current')
tunerDatarate = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 2), Integer32()).setUnits('bit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: tunerDatarate.setStatus('current')
asiDatarate = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 3), Integer32()).setUnits('bit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: asiDatarate.setStatus('current')
ipDatarate = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 4), Integer32()).setUnits('bit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDatarate.setStatus('current')
etr290Conformity = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 5), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etr290Conformity.setStatus('current')
etr290ConformityAlarmActive = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etr290ConformityAlarmActive.setStatus('current')
tsSyncTable = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 10), )
if mibBuilder.loadTexts: tsSyncTable.setStatus('current')
tsSyncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 10, 1), ).setIndexNames((0, "FLEXDSR04", "tsSyncIndex"))
if mibBuilder.loadTexts: tsSyncEntry.setStatus('current')
tsSyncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: tsSyncIndex.setStatus('current')
tsSyncType = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tunerTs", 1), ("asiTs", 2), ("ipTs", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsSyncType.setStatus('current')
tsSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 10, 1, 3), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsSyncState.setStatus('current')
tsSyncAlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 10, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsSyncAlarmActive.setStatus('current')
tsOverIp = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11))
tsIpSync = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpSync.setStatus('current')
tsIpPacketPerIpPacket = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpPacketPerIpPacket.setStatus('current')
tsIpBufferlevel1 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11, 3), Integer32()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpBufferlevel1.setStatus('current')
tsIpBufferlevel2 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11, 4), Integer32()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpBufferlevel2.setStatus('current')
tsIpBufferlevel3 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpBufferlevel3.setStatus('current')
tsIpBufferReset = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpBufferReset.setStatus('current')
tsIpPacketDropped = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpPacketDropped.setStatus('current')
tsIpPacketReordered = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpPacketReordered.setStatus('current')
tsIpPacketRestored = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpPacketRestored.setStatus('current')
tsIpPacketUnrecoverable = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpPacketUnrecoverable.setStatus('current')
tsIpFecL = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpFecL.setStatus('current')
tsIpFecD = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpFecD.setStatus('current')
tsIpPacketDuplicate = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpPacketDuplicate.setStatus('current')
tsIpPER = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11, 14), FloatString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpPER.setStatus('current')
tsIpPLR = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11, 15), FloatString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpPLR.setStatus('current')
tsIpErroneousPacketrate = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11, 16), FloatString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpErroneousPacketrate.setStatus('current')
tsIpDualInput = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11, 17))
tsIpBackupPER = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11, 17, 1), FloatString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpBackupPER.setStatus('current')
tsIpBackupPLR = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11, 17, 2), FloatString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpBackupPLR.setStatus('current')
tsIpBackupErroneousPacketrate = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11, 17, 3), FloatString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpBackupErroneousPacketrate.setStatus('current')
tsIpCombinedPER = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11, 17, 4), FloatString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpCombinedPER.setStatus('current')
tsIpModePER = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 2, 11, 18), FloatString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tsIpModePER.setStatus('current')
audioOverIpState = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 3))
udpInputDataTable = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 3, 1), )
if mibBuilder.loadTexts: udpInputDataTable.setStatus('current')
udpInputDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 3, 1, 1), ).setIndexNames((0, "FLEXDSR04", "udpInputDataIndex"))
if mibBuilder.loadTexts: udpInputDataEntry.setStatus('current')
udpInputDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: udpInputDataIndex.setStatus('current')
udpInputDataChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("channel1", 1), ("channel2", 2), ("channel3", 3), ("channel4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpInputDataChannel.setStatus('current')
udpInputDataState = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 3, 1, 1, 3), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpInputDataState.setStatus('current')
udpInputDataAlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 3, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpInputDataAlarmActive.setStatus('current')
icecastInputDataTable = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 3, 2), )
if mibBuilder.loadTexts: icecastInputDataTable.setStatus('current')
icecastInputDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 3, 2, 1), ).setIndexNames((0, "FLEXDSR04", "icecastInputDataIndex"))
if mibBuilder.loadTexts: icecastInputDataEntry.setStatus('current')
icecastInputDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: icecastInputDataIndex.setStatus('current')
icecastInputDataServer = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("server1", 1), ("server2", 2), ("server3", 3), ("server4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: icecastInputDataServer.setStatus('current')
icecastInputDataState = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 3, 2, 1, 3), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icecastInputDataState.setStatus('current')
icecastInputDataAlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 3, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icecastInputDataAlarmActive.setStatus('current')
rtpUdpInputDataTable = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 3, 3), )
if mibBuilder.loadTexts: rtpUdpInputDataTable.setStatus('current')
rtpUdpInputDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 3, 3, 1), ).setIndexNames((0, "FLEXDSR04", "rtpUdpInputDataIndex"))
if mibBuilder.loadTexts: rtpUdpInputDataEntry.setStatus('current')
rtpUdpInputDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: rtpUdpInputDataIndex.setStatus('current')
rtpUdpInputDataPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 3, 3, 1, 2), Integer32()).setUnits('1/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtpUdpInputDataPackets.setStatus('current')
rtpUdpInputDataRtpDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 3, 3, 1, 3), Integer32()).setUnits('bit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtpUdpInputDataRtpDataRate.setStatus('current')
rtpUdpInputDataIpRawDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 3, 3, 1, 4), Integer32()).setUnits('bit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtpUdpInputDataIpRawDataRate.setStatus('current')
rtpUdpInputDataRtpPacketloss = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtpUdpInputDataRtpPacketloss.setStatus('current')
audioState = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4))
audioTable = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 1), )
if mibBuilder.loadTexts: audioTable.setStatus('current')
audioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 1, 1), ).setIndexNames((0, "FLEXDSR04", "audioIndex"))
if mibBuilder.loadTexts: audioEntry.setStatus('current')
audioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: audioIndex.setStatus('current')
audioChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("audio1", 1), ("audio2", 2), ("audio3", 3), ("audio4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioChannel.setStatus('current')
audioStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 1, 1, 3), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioStatus.setStatus('current')
audioVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("mpeg1", 1), ("mpeg2", 2), ("ac3", 3), ("mpeg4", 4), ("aptX", 5), ("linearPCM", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioVersion.setStatus('current')
audioLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("layer1", 1), ("layer2", 2), ("layer3", 3), ("aac", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioLayer.setStatus('current')
audioBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioBitRate.setStatus('current')
audioSampleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioSampleRate.setStatus('current')
audioAlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioAlarmActive.setStatus('current')
audioLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 1, 1, 9), Integer32d1()).setUnits('dBFS').setMaxAccess("readonly")
if mibBuilder.loadTexts: audioLevel.setStatus('current')
audioLevelAlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioLevelAlarmActive.setStatus('current')
audioNoDataAvailabe = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioNoDataAvailabe.setStatus('current')
audioDecoderResets = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioDecoderResets.setStatus('current')
audioBufferlevel = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioBufferlevel.setStatus('current')
audioPLLlevel = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioPLLlevel.setStatus('current')
audioTsError = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioTsError.setStatus('current')
audioTsTable = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 2), )
if mibBuilder.loadTexts: audioTsTable.setStatus('current')
audioTsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 2, 1), ).setIndexNames((0, "FLEXDSR04", "audioTsIndex"))
if mibBuilder.loadTexts: audioTsEntry.setStatus('current')
audioTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: audioTsIndex.setStatus('current')
audioTsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 2, 1, 2), ServiceMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioTsMode.setStatus('current')
audioTsService = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioTsService.setStatus('current')
audioTsPID = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioTsPID.setStatus('current')
dteState = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 5))
dteTable = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 5, 1), )
if mibBuilder.loadTexts: dteTable.setStatus('current')
dteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 5, 1, 1), ).setIndexNames((0, "FLEXDSR04", "dteIndex"))
if mibBuilder.loadTexts: dteEntry.setStatus('current')
dteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: dteIndex.setStatus('current')
dtePort = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("dte1", 1), ("dte2", 2), ("dte3", 3), ("dte4", 4), ("dte5", 5), ("dte6", 6), ("dte7", 7), ("dte8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtePort.setStatus('current')
dteDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 5, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteDataAvailable.setStatus('current')
dteAlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 5, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteAlarmActive.setStatus('current')
dteUecpPI = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 5, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteUecpPI.setStatus('current')
dteUecpPS = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 5, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteUecpPS.setStatus('current')
dteUecpRT = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 5, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteUecpRT.setStatus('current')
dteUecpTA = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteUecpTA.setStatus('current')
dteUecpTP = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteUecpTP.setStatus('current')
dteUecpPTY = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteUecpPTY.setStatus('current')
dteUecpCT = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 5, 1, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteUecpCT.setStatus('current')
inputSourceState = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 6))
currentInputSourceTable = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 6, 1), )
if mibBuilder.loadTexts: currentInputSourceTable.setStatus('current')
currentInputSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 6, 1, 1), ).setIndexNames((0, "FLEXDSR04", "currentInputSourceIndex"))
if mibBuilder.loadTexts: currentInputSourceEntry.setStatus('current')
currentInputSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: currentInputSourceIndex.setStatus('current')
outputType = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("audioOutput1", 1), ("audioOutput2", 2), ("audioOutput3", 3), ("audioOutput4", 4), ("asiOutput", 5), ("ipOutput", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputType.setStatus('current')
currentInputSourceState = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 6, 1, 1, 3), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentInputSourceState.setStatus('current')
currentInputSourceOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("temporaryMasterSource", 1), ("mainSource", 2), ("backup1", 3), ("backup2", 4), ("backup3", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentInputSourceOrder.setStatus('current')
currentInputSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 6, 1, 1, 5), InputSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentInputSourceType.setStatus('current')
deviceState = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 7))
internalStorageState = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 7, 1), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalStorageState.setStatus('current')
internalStorageFreeMemory = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 7, 2), Integer32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: internalStorageFreeMemory.setStatus('current')
caseTemperature = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 7, 3), Integer32()).setUnits('degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: caseTemperature.setStatus('current')
caseTemperatureAlarmActive = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 7, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caseTemperatureAlarmActive.setStatus('current')
optoInputTable = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 7, 10), )
if mibBuilder.loadTexts: optoInputTable.setStatus('current')
optoInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 7, 10, 1), ).setIndexNames((0, "FLEXDSR04", "optoInputIndex"))
if mibBuilder.loadTexts: optoInputEntry.setStatus('current')
optoInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)))
if mibBuilder.loadTexts: optoInputIndex.setStatus('current')
optoInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 7, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optoInputNumber.setStatus('current')
optoInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 7, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optoInputState.setStatus('current')
internalStorageTable = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 7, 11), )
if mibBuilder.loadTexts: internalStorageTable.setStatus('current')
internalStorageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 7, 11, 1), ).setIndexNames((0, "FLEXDSR04", "internalStorageIndex"))
if mibBuilder.loadTexts: internalStorageEntry.setStatus('current')
internalStorageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 7, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: internalStorageIndex.setStatus('current')
internalStorageSection = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 7, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("device", 1), ("audio1", 2), ("audio2", 3), ("audio3", 4), ("audio4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalStorageSection.setStatus('current')
internalStorageFree = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 7, 11, 1, 3), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: internalStorageFree.setStatus('current')
internalStorageQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 7, 11, 1, 4), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: internalStorageQuota.setStatus('current')
internalStorageQuotaUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 7, 11, 1, 5), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: internalStorageQuotaUsed.setStatus('current')
eventParams = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 8))
remoteControlUploadEventParams = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 8, 1))
remoteControlUploadType = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("firmware", 1), ("configuration", 2), ("audio", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: remoteControlUploadType.setStatus('current')
remoteControlUploadError = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crcError", 1), ("storageQuotaExceeded", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: remoteControlUploadError.setStatus('current')
remoteControlUploadGroup = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 8, 1, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: remoteControlUploadGroup.setStatus('current')
remoteControlUploadFile = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 8, 1, 4), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: remoteControlUploadFile.setStatus('current')
sfnState = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 9))
sfnActive = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 9, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfnActive.setStatus('current')
sfn1ppsErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfn1ppsErrorCount.setStatus('current')
sfn10MHzErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfn10MHzErrorCount.setStatus('current')
sfnBufferlevel = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfnBufferlevel.setStatus('current')
sfnResetCount = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfnResetCount.setStatus('current')
sfnTransmissionDelay = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 9, 6), Integer32()).setUnits('us').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfnTransmissionDelay.setStatus('current')
sfnGlobalDelay = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 9, 7), Integer32()).setUnits('us').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfnGlobalDelay.setStatus('current')
sfnAccuracy = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 9, 8), Integer32d1()).setUnits('us').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfnAccuracy.setStatus('current')
sfn1ppsErrorState = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 9, 9), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sfn1ppsErrorState.setStatus('current')
sfn10MHzErrorState = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 4, 9, 10), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sfn10MHzErrorState.setStatus('current')
flexDSR04EventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5))
tunerRfPowerEventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 1))
tunerRfPowerEventValue = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 1, 1), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunerRfPowerEventValue.setStatus('current')
tunerRfPowerEventTolerance = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 1, 2), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunerRfPowerEventTolerance.setStatus('current')
tunerRfPowerEventT1 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 1, 3), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunerRfPowerEventT1.setStatus('current')
tunerRfPowerEventT2 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 1, 4), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunerRfPowerEventT2.setStatus('current')
tunerRfPowerEventEnable = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunerRfPowerEventEnable.setStatus('current')
tunerCnEventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 2))
tunerCnEventMinValue = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 2, 1), Integer32()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunerCnEventMinValue.setStatus('current')
tunerCnEventT1 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 2, 2), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunerCnEventT1.setStatus('current')
tunerCnEventT2 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 2, 3), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunerCnEventT2.setStatus('current')
tunerCnEventEnable = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 2, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunerCnEventEnable.setStatus('current')
tunerBerEventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 3))
tunerBerEventMaxValue = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 3, 1), FloatString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunerBerEventMaxValue.setStatus('current')
tunerBerEventT1 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 3, 2), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunerBerEventT1.setStatus('current')
tunerBerEventT2 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 3, 3), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunerBerEventT2.setStatus('current')
tunerBerEventEnable = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 3, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunerBerEventEnable.setStatus('current')
tunerTsSyncEventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 4))
tunerTsSyncEventT1 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 4, 1), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunerTsSyncEventT1.setStatus('current')
tunerTsSyncEventT2 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 4, 2), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunerTsSyncEventT2.setStatus('current')
tunerTsSyncEventEnable = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 4, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunerTsSyncEventEnable.setStatus('current')
asiTsSyncEventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 5))
asiTsSyncEventT1 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 5, 1), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: asiTsSyncEventT1.setStatus('current')
asiTsSyncEventT2 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 5, 2), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: asiTsSyncEventT2.setStatus('current')
asiTsSyncEventEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 5, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asiTsSyncEventEnabled.setStatus('current')
ipTsSyncEventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 6))
ipTsSyncEventT1 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 6, 1), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTsSyncEventT1.setStatus('current')
ipTsSyncEventT2 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 6, 2), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTsSyncEventT2.setStatus('current')
ipTsSyncEventEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 6, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTsSyncEventEnabled.setStatus('current')
etr290ConformityEventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 7))
etr290ConformityEventEnable = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 7, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etr290ConformityEventEnable.setStatus('obsolete')
aoipUdpInputDataEventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 8))
aoipUdpInputDataEventTable = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 8, 1), )
if mibBuilder.loadTexts: aoipUdpInputDataEventTable.setStatus('current')
aoipUdpInputDataEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 8, 1, 1), ).setIndexNames((0, "FLEXDSR04", "aoipUdpInputDataEventIndex"))
if mibBuilder.loadTexts: aoipUdpInputDataEventEntry.setStatus('current')
aoipUdpInputDataEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: aoipUdpInputDataEventIndex.setStatus('current')
aoipUdpInputDataEventChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("channel1", 1), ("channel2", 2), ("channel3", 3), ("channel4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aoipUdpInputDataEventChannel.setStatus('current')
aoipUdpInputDataEventT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 8, 1, 1, 3), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aoipUdpInputDataEventT1.setStatus('current')
aoipUdpInputDataEventT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 8, 1, 1, 4), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aoipUdpInputDataEventT2.setStatus('current')
aoipUdpInputDataEventEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 8, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aoipUdpInputDataEventEnabled.setStatus('current')
aoipIcecastInputDataEventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 9))
aoipIcecastInputDataEventTable = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 9, 1), )
if mibBuilder.loadTexts: aoipIcecastInputDataEventTable.setStatus('current')
aoipIcecastInputDataEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 9, 1, 1), ).setIndexNames((0, "FLEXDSR04", "aoipIcecastInputDataEventIndex"))
if mibBuilder.loadTexts: aoipIcecastInputDataEventEntry.setStatus('current')
aoipIcecastInputDataEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: aoipIcecastInputDataEventIndex.setStatus('current')
aoipIcecastInputDataEventServer = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("server1", 1), ("server2", 2), ("server3", 3), ("server4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aoipIcecastInputDataEventServer.setStatus('current')
aoipIcecastInputDataEventT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 9, 1, 1, 3), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aoipIcecastInputDataEventT1.setStatus('current')
aoipIcecastInputDataEventT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 9, 1, 1, 4), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aoipIcecastInputDataEventT2.setStatus('current')
aoipIcecastInputDataEventEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 9, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aoipIcecastInputDataEventEnabled.setStatus('current')
audioEventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 10))
audioEventTable = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 10, 1), )
if mibBuilder.loadTexts: audioEventTable.setStatus('current')
audioEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 10, 1, 1), ).setIndexNames((0, "FLEXDSR04", "audioEventIndex"))
if mibBuilder.loadTexts: audioEventEntry.setStatus('current')
audioEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: audioEventIndex.setStatus('current')
audioEventChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("audio1", 1), ("audio2", 2), ("audio3", 3), ("audio4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioEventChannel.setStatus('current')
audioEventT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 10, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audioEventT1.setStatus('current')
audioEventT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 10, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audioEventT2.setStatus('current')
audioEventEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 10, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audioEventEnabled.setStatus('current')
audioLevelEventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 11))
audioLevelEventTable = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 11, 1), )
if mibBuilder.loadTexts: audioLevelEventTable.setStatus('current')
audioLevelEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 11, 1, 1), ).setIndexNames((0, "FLEXDSR04", "audioLevelEventIndex"))
if mibBuilder.loadTexts: audioLevelEventEntry.setStatus('current')
audioLevelEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: audioLevelEventIndex.setStatus('current')
audioLevelEventChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("audio1", 1), ("audio2", 2), ("audio3", 3), ("audio4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioLevelEventChannel.setStatus('current')
audioLevelEventMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 11, 1, 1, 3), Integer32()).setUnits('dBFS').setMaxAccess("readwrite")
if mibBuilder.loadTexts: audioLevelEventMinValue.setStatus('current')
audioLevelEventT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 11, 1, 1, 4), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: audioLevelEventT1.setStatus('current')
audioLevelEventT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 11, 1, 1, 5), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: audioLevelEventT2.setStatus('current')
audioLevelEventEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 11, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audioLevelEventEnabled.setStatus('current')
dteEventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 12))
dteEventTable = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 12, 1), )
if mibBuilder.loadTexts: dteEventTable.setStatus('current')
dteEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 12, 1, 1), ).setIndexNames((0, "FLEXDSR04", "dteEventIndex"))
if mibBuilder.loadTexts: dteEventEntry.setStatus('current')
dteEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: dteEventIndex.setStatus('current')
dteEventPort = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("dte1", 1), ("dte2", 2), ("dte3", 3), ("dte4", 4), ("dte5", 5), ("dte6", 6), ("dte7", 7), ("dte8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteEventPort.setStatus('current')
dteEventT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 12, 1, 1, 3), Integer32()).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteEventT1.setStatus('current')
dteEventT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 12, 1, 1, 4), Integer32()).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteEventT2.setStatus('current')
dteEventEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 12, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteEventEnabled.setStatus('current')
internalStorageEventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 13))
internalStorageEventEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 13, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalStorageEventEnabled.setStatus('current')
caseTemperatureEventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 14))
caseTemperatureEventMaxValue = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 14, 1), Integer32()).setUnits('degree Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: caseTemperatureEventMaxValue.setStatus('current')
caseTemperatureEventT1 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 14, 2), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: caseTemperatureEventT1.setStatus('current')
caseTemperatureEventT2 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 14, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caseTemperatureEventT2.setStatus('current')
caseTemperatureEventEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 14, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caseTemperatureEventEnabled.setStatus('current')
sfnClockEventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 18))
sfnClockEventT1 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 18, 1), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfnClockEventT1.setStatus('current')
sfnClockEventT2 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 18, 2), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfnClockEventT2.setStatus('current')
sfnClockEventEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 18, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfnClockEventEnabled.setStatus('current')
ipPerEventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 19))
ipPerEventMode = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("combinedStream", 1), ("mainStream", 2), ("bothStreams", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPerEventMode.setStatus('current')
ipPerEventValue = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 19, 2), FloatString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPerEventValue.setStatus('current')
ipPerEventT1 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 19, 3), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPerEventT1.setStatus('current')
ipPerEventT2 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 19, 4), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPerEventT2.setStatus('current')
ipPerEventEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 19, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPerEventEnabled.setStatus('current')
generalEventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 90))
flexDSR04EventTable = MibTable((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 90, 1), )
if mibBuilder.loadTexts: flexDSR04EventTable.setStatus('current')
flexDSR04EventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 90, 1, 1), ).setIndexNames((0, "FLEXDSR04", "flexDSR04EventIndex"))
if mibBuilder.loadTexts: flexDSR04EventEntry.setStatus('current')
flexDSR04EventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 90, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 19)))
if mibBuilder.loadTexts: flexDSR04EventIndex.setStatus('current')
flexDSR04EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 90, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("tunerRfPowerEvent", 1), ("tunerCnEvent", 2), ("tunerBerEvent", 3), ("tunerTsSyncEvent", 4), ("asiTsSyncEvent", 5), ("ipTsSyncEvent", 6), ("aoipUdpInputDataEvent", 8), ("aoipIcecastInputDataEvent", 9), ("audioEvent", 10), ("audioLevelEvent", 11), ("dteEvent", 12), ("internalStorageEvent", 13), ("caseTemperatureEvent", 14), ("inputSourceEvent", 15), ("remoteControlUploadEvent", 16), ("optoInputEvent", 17), ("sfnClockEvent", 18), ("ipPerEvent", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flexDSR04EventType.setStatus('current')
flexDSR04EventPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 90, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flexDSR04EventPriority.setStatus('current')
flexDSR04EventEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 90, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flexDSR04EventEnabled.setStatus('current')
allEventsEnable = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 5, 99), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allEventsEnable.setStatus('current')
control = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6))
networkSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 1))
tcpIp = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 1, 1))
hostname = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostname.setStatus('current')
ip = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip.setStatus('current')
subnetmask = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetmask.setStatus('current')
gateway = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gateway.setStatus('current')
primaryDns = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryDns.setStatus('current')
secondaryDns = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secondaryDns.setStatus('current')
snmpSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 1, 2))
snmpTrapIP1 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 1, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapIP1.setStatus('current')
snmpTrapIP2 = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapIP2.setStatus('current')
snmpTrapIP1Enable = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 1, 2, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapIP1Enable.setStatus('current')
snmpTrapIP2Enable = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 1, 2, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapIP2Enable.setStatus('current')
sntpSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 1, 3))
sntpFirstServerIP = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 1, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpFirstServerIP.setStatus('current')
sntpSecondServerIP = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpSecondServerIP.setStatus('current')
sntpUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 1, 3, 3), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpUpdateInterval.setStatus('current')
sntpTimeOffset = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpTimeOffset.setStatus('current')
sntpUpdateEnable = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 1, 3, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpUpdateEnable.setStatus('current')
httpSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 1, 4))
httpPort = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 1, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpPort.setStatus('current')
commands = MibIdentifier((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 10))
reStartDevice = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reStartDevice.setStatus('current')
asciiCommand = MibScalar((1, 3, 6, 1, 4, 1, 21529, 3, 2, 4, 6, 10, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asciiCommand.setStatus('current')
mibBuilder.exportSymbols("FLEXDSR04", audioLevelAlarmActive=audioLevelAlarmActive, aoipUdpInputDataEventSettings=aoipUdpInputDataEventSettings, audioOutput1Entry=audioOutput1Entry, tunerCnEvent=tunerCnEvent, dteEventIndex=dteEventIndex, ipOutputOrder=ipOutputOrder, sfnActive=sfnActive, flexDSR04EventSettings=flexDSR04EventSettings, remoteControlUploadEvent=remoteControlUploadEvent, sfnAccuracy=sfnAccuracy, aoipUdpInputDataEvent=aoipUdpInputDataEvent, tsIpBufferlevel3=tsIpBufferlevel3, caseTemperature=caseTemperature, remoteControlUploadType=remoteControlUploadType, audioEventSettings=audioEventSettings, scTunerTsSyncEnabled=scTunerTsSyncEnabled, ipOutputInputSource=ipOutputInputSource, internalStorageState=internalStorageState, dteIndex=dteIndex, snmpTrapIP1=snmpTrapIP1, tcpIp=tcpIp, dteTable=dteTable, audioLevelEventTable=audioLevelEventTable, currentInputSourceState=currentInputSourceState, audioOutput1Index=audioOutput1Index, nid=nid, tunerAlarmType=tunerAlarmType, audioLayer=audioLayer, dteEventT1=dteEventT1, sfnResetCount=sfnResetCount, cnValue=cnValue, audioPLLlevel=audioPLLlevel, tunerBerEventMaxValue=tunerBerEventMaxValue, tunerTsSyncEventT1=tunerTsSyncEventT1, currentInputSourceType=currentInputSourceType, tsIpPLR=tsIpPLR, tunerCnEventT2=tunerCnEventT2, caseTemperatureEventT2=caseTemperatureEventT2, dteUecpPI=dteUecpPI, ipOutputInputSourceEnabled=ipOutputInputSourceEnabled, switchCriteria=switchCriteria, audioOutput4Entry=audioOutput4Entry, flexDSR04EventEntry=flexDSR04EventEntry, caseTemperatureEventEnabled=caseTemperatureEventEnabled, audioOutput2Order=audioOutput2Order, PYSNMP_MODULE_ID=flexDSR04, udpInputDataIndex=udpInputDataIndex, aoipUdpInputDataEventT1=aoipUdpInputDataEventT1, audioOutput4Index=audioOutput4Index, scTunerTsSyncT1=scTunerTsSyncT1, tsIpBufferlevel2=tsIpBufferlevel2, ipDatarate=ipDatarate, flexDSR04EventIndex=flexDSR04EventIndex, audioLevelEventEntry=audioLevelEventEntry, tunerState=tunerState, fecLockedState=fecLockedState, tunerBerEventSettings=tunerBerEventSettings, scIpPerT2=scIpPerT2, tunerRfPowerEventTolerance=tunerRfPowerEventTolerance, icecastInputDataEntry=icecastInputDataEntry, scAudioOverIpIcecastT1=scAudioOverIpIcecastT1, optoInputEntry=optoInputEntry, scTunerCnT1=scTunerCnT1, rtpUdpInputDataRtpDataRate=rtpUdpInputDataRtpDataRate, audioOverIpState=audioOverIpState, ipPerEventSettings=ipPerEventSettings, audioTsService=audioTsService, flexDSR04EventEnabled=flexDSR04EventEnabled, aoipIcecastInputDataEventT1=aoipIcecastInputDataEventT1, switchCriteriaAudioOverIpUdp=switchCriteriaAudioOverIpUdp, aoipUdpInputDataEventEnabled=aoipUdpInputDataEventEnabled, httpPort=httpPort, tunerDatarate=tunerDatarate, audioTsError=audioTsError, flexDSR04EventType=flexDSR04EventType, icecastInputDataState=icecastInputDataState, snmpSettings=snmpSettings, tsState=tsState, tsIpPER=tsIpPER, audioIndex=audioIndex, audioEntry=audioEntry, audioBitRate=audioBitRate, asiTsSyncEventT2=asiTsSyncEventT2, audioEventT1=audioEventT1, xlrVolumeEntry=xlrVolumeEntry, snmpTrapIP1Enable=snmpTrapIP1Enable, httpSettings=httpSettings, tunerRfPowerEventT2=tunerRfPowerEventT2, etr290ConformityEventSettings=etr290ConformityEventSettings, udpInputDataState=udpInputDataState, tsSyncAlarmActive=tsSyncAlarmActive, ipPerEventT1=ipPerEventT1, audioTsMode=audioTsMode, tunerRfPowerEventEnable=tunerRfPowerEventEnable, asiOutputOrder=asiOutputOrder, ipOutputTable=ipOutputTable, rsBchBerValue=rsBchBerValue, dtePort=dtePort, sfn1ppsErrorCount=sfn1ppsErrorCount, dteEvent=dteEvent, dteInterfaceBaudrate=dteInterfaceBaudrate, aoipIcecastInputDataEventTable=aoipIcecastInputDataEventTable, asiTsSyncEvent=asiTsSyncEvent, audioVersion=audioVersion, audioDecoderResets=audioDecoderResets, xlrVolumeDigital=xlrVolumeDigital, asiTsSyncEventSettings=asiTsSyncEventSettings, dteEventPort=dteEventPort, audioTable=audioTable, flexDSR04EventPriority=flexDSR04EventPriority, scInternalStorageEnabled=scInternalStorageEnabled, dteEventSettings=dteEventSettings, scAsiTsSyncT2=scAsiTsSyncT2, commands=commands, xlrVolumeAnalog=xlrVolumeAnalog, audioTsPID=audioTsPID, scTunerTsSyncT2=scTunerTsSyncT2, lockedState=lockedState, tunerRfPowerEventSettings=tunerRfPowerEventSettings, scIpTsSyncEnabled=scIpTsSyncEnabled, udpInputDataEntry=udpInputDataEntry, dteUecpTP=dteUecpTP, tunerBerEventT2=tunerBerEventT2, ipTsSyncEventSettings=ipTsSyncEventSettings, scAudioOverIpIcecastT2=scAudioOverIpIcecastT2, tsSyncIndex=tsSyncIndex, tsIpFecD=tsIpFecD, dteState=dteState, aoipIcecastInputDataEventEntry=aoipIcecastInputDataEventEntry, eventParams=eventParams, audioOutput3Order=audioOutput3Order, audioLevelEventT2=audioLevelEventT2, audioChannel=audioChannel, audioLevel=audioLevel, dteUecpTA=dteUecpTA, networkSettings=networkSettings, audioEvent=audioEvent, rtpUdpInputDataEntry=rtpUdpInputDataEntry, aoipUdpInputDataEventChannel=aoipUdpInputDataEventChannel, asiOutputInputSourceEnabled=asiOutputInputSourceEnabled, audioLevelEventSettings=audioLevelEventSettings, inputSourceEvent=inputSourceEvent, ServiceMode=ServiceMode, scAudioOverIpUdpT2=scAudioOverIpUdpT2, etr290Conformity=etr290Conformity, punctureRate=punctureRate, internalStorageFreeMemory=internalStorageFreeMemory, scTunerBerMaxValue=scTunerBerMaxValue, dteEventEntry=dteEventEntry, gateway=gateway, audioNoDataAvailabe=audioNoDataAvailabe, internalStorageFree=internalStorageFree, tunerRfPowerEvent=tunerRfPowerEvent, audioOutput4Order=audioOutput4Order, audioLowPass15kHz=audioLowPass15kHz, dteAlarmActive=dteAlarmActive, icecastInputDataAlarmActive=icecastInputDataAlarmActive, currentInputSourceTable=currentInputSourceTable, audioBufferlevel=audioBufferlevel, aoipIcecastInputDataEventSettings=aoipIcecastInputDataEventSettings, tsIpPacketReordered=tsIpPacketReordered, aoipIcecastInputDataEventIndex=aoipIcecastInputDataEventIndex, audioOutput3InputSource=audioOutput3InputSource, sntpTimeOffset=sntpTimeOffset, xlrVolumeIndex=xlrVolumeIndex, sntpSecondServerIP=sntpSecondServerIP, switchCriteriaAsiTsSync=switchCriteriaAsiTsSync, tunerCnEventSettings=tunerCnEventSettings, scIpPerMode=scIpPerMode, flexDSR04Events=flexDSR04Events, scTunerBerT1=scTunerBerT1, icecastInputDataIndex=icecastInputDataIndex, asciiCommand=asciiCommand, rtpUdpInputDataPackets=rtpUdpInputDataPackets, switchCriteriaIpTsSync=switchCriteriaIpTsSync, ipOutputEntry=ipOutputEntry, tsIpBackupErroneousPacketrate=tsIpBackupErroneousPacketrate, carrierState=carrierState, InputSource=InputSource, tunerAlarmEntry=tunerAlarmEntry, ipPerEventEnabled=ipPerEventEnabled, switchCriteriaIpPer=switchCriteriaIpPer, scTunerBerEnabled=scTunerBerEnabled, remoteControlUploadError=remoteControlUploadError, scTunerCnEnabled=scTunerCnEnabled, dteUecpPTY=dteUecpPTY, ipTsSyncEventEnabled=ipTsSyncEventEnabled, tsIpPacketDropped=tsIpPacketDropped, rfPowerValue=rfPowerValue, scIpTsSyncT2=scIpTsSyncT2, tsSyncEntry=tsSyncEntry, aoipIcecastInputDataEventEnabled=aoipIcecastInputDataEventEnabled, icecastInputDataServer=icecastInputDataServer, audioOutput2InputSource=audioOutput2InputSource, aoipIcecastInputDataEventT2=aoipIcecastInputDataEventT2, xlrVolumePort=xlrVolumePort, tsIpErroneousPacketrate=tsIpErroneousPacketrate, sntpFirstServerIP=sntpFirstServerIP, audioState=audioState, deviceState=deviceState, tunerRfPowerEventValue=tunerRfPowerEventValue, audioOutput4Table=audioOutput4Table, asiOutputTable=asiOutputTable, audioOutput2Table=audioOutput2Table, audioOutput4InputSource=audioOutput4InputSource, internalStorageQuotaUsed=internalStorageQuotaUsed, audioEventIndex=audioEventIndex, cfoErrorValue=cfoErrorValue, tsIpPacketPerIpPacket=tsIpPacketPerIpPacket, tsIpBackupPER=tsIpBackupPER, optoInputIndex=optoInputIndex, sfnState=sfnState, internalStorageEventEnabled=internalStorageEventEnabled, switchCriteriaAudioOverIpIcecast=switchCriteriaAudioOverIpIcecast, tsIpCombinedPER=tsIpCombinedPER, asiTsSyncEventEnabled=asiTsSyncEventEnabled, primaryDns=primaryDns, caseTemperatureEvent=caseTemperatureEvent, audioEventEnabled=audioEventEnabled, audioOutput1Table=audioOutput1Table, optoInputNumber=optoInputNumber, rtpUdpInputDataRtpPacketloss=rtpUdpInputDataRtpPacketloss, tunerTsSyncEvent=tunerTsSyncEvent, scAudioOverIpIcecastEnabled=scAudioOverIpIcecastEnabled, aoipIcecastInputDataEventServer=aoipIcecastInputDataEventServer, headphoneInterface=headphoneInterface, tsSyncState=tsSyncState, scAsiTsSyncT1=scAsiTsSyncT1, caseTemperatureEventSettings=caseTemperatureEventSettings, scIpPerT1=scIpPerT1, scAudioOverIpUdpT1=scAudioOverIpUdpT1, xlrVolumeTable=xlrVolumeTable, dteInterfaceEntry=dteInterfaceEntry, ipPerEvent=ipPerEvent, sfn10MHzErrorState=sfn10MHzErrorState, tunerCnEventEnable=tunerCnEventEnable, dteEventT2=dteEventT2, inputSourceSettings=inputSourceSettings, ipTsSyncEvent=ipTsSyncEvent, scTunerBerT2=scTunerBerT2, xlrInterface=xlrInterface, aoipUdpInputDataEventIndex=aoipUdpInputDataEventIndex, internalStorageEntry=internalStorageEntry, tsIpPacketUnrecoverable=tsIpPacketUnrecoverable, tunerBerEventEnable=tunerBerEventEnable, switchCriteriaTunerCn=switchCriteriaTunerCn, audioTsTable=audioTsTable, sfnTransmissionDelay=sfnTransmissionDelay, scTunerRfPowerEnabled=scTunerRfPowerEnabled, scTunerRfPowerT2=scTunerRfPowerT2, hostname=hostname, audioLevelEvent=audioLevelEvent, rtpUdpInputDataIpRawDataRate=rtpUdpInputDataIpRawDataRate, dteUecpPS=dteUecpPS)
mibBuilder.exportSymbols("FLEXDSR04", tsIpFecL=tsIpFecL, snmpTrapIP2=snmpTrapIP2, tsIpSync=tsIpSync, tsSyncType=tsSyncType, ip=ip, audioOutput3Index=audioOutput3Index, scIpTsSyncT1=scIpTsSyncT1, dteUecpRT=dteUecpRT, audioStatus=audioStatus, xlrOutputType=xlrOutputType, scTunerRfPowerT1=scTunerRfPowerT1, sntpUpdateInterval=sntpUpdateInterval, viterbiLdpcBerValue=viterbiLdpcBerValue, asiOutputIndex=asiOutputIndex, tunerAlarmActive=tunerAlarmActive, audioLevelEventIndex=audioLevelEventIndex, dteEventEnabled=dteEventEnabled, tunerBerEvent=tunerBerEvent, control=control, audioOutput3Entry=audioOutput3Entry, state=state, icecastInputDataTable=icecastInputDataTable, optoInputTable=optoInputTable, switchCriteriaInternalStorage=switchCriteriaInternalStorage, sfnClockEvent=sfnClockEvent, generalEventSettings=generalEventSettings, audioOutput3Table=audioOutput3Table, sntpUpdateEnable=sntpUpdateEnable, switchCriteriaTunerBer=switchCriteriaTunerBer, dteInterfaceTable=dteInterfaceTable, dteInterfaceIndex=dteInterfaceIndex, udpInputDataTable=udpInputDataTable, sfn10MHzErrorCount=sfn10MHzErrorCount, audioOutput4InputSourceEnabled=audioOutput4InputSourceEnabled, flexDSR04=flexDSR04, scAudioOverIpUdpEnabled=scAudioOverIpUdpEnabled, dteEntry=dteEntry, asiDatarate=asiDatarate, audioTsIndex=audioTsIndex, audioLevelEventT1=audioLevelEventT1, aoipUdpInputDataEventTable=aoipUdpInputDataEventTable, audioEventEntry=audioEventEntry, sfnClockEventT2=sfnClockEventT2, interfaceSettings=interfaceSettings, flexDSR04EventTable=flexDSR04EventTable, internalStorageEvent=internalStorageEvent, optoInputEvent=optoInputEvent, tsIpModePER=tsIpModePER, ipTsSyncEventT2=ipTsSyncEventT2, audioOutput3InputSourceEnabled=audioOutput3InputSourceEnabled, dteUecpCT=dteUecpCT, tunerTsSyncEventEnable=tunerTsSyncEventEnable, sfnGlobalDelay=sfnGlobalDelay, dteDataAvailable=dteDataAvailable, tunerAlarmTable=tunerAlarmTable, etr290ConformityEvent=etr290ConformityEvent, symTimeState=symTimeState, aoipIcecastInputDataEvent=aoipIcecastInputDataEvent, ipPerEventT2=ipPerEventT2, headphoneVolume=headphoneVolume, scTunerCnT2=scTunerCnT2, audioOutput2InputSourceEnabled=audioOutput2InputSourceEnabled, audioLevelEventMinValue=audioLevelEventMinValue, tunerRfPowerEventT1=tunerRfPowerEventT1, currentInputSourceOrder=currentInputSourceOrder, audioEventT2=audioEventT2, asiOutputEntry=asiOutputEntry, optoInputState=optoInputState, dteInterfacePort=dteInterfacePort, allEventsEnable=allEventsEnable, tsIpPacketRestored=tsIpPacketRestored, remoteControlUploadFile=remoteControlUploadFile, sfnBufferlevel=sfnBufferlevel, currentInputSourceIndex=currentInputSourceIndex, audioOutput1Order=audioOutput1Order, ipOutputIndex=ipOutputIndex, tunerAlarmIndex=tunerAlarmIndex, sfn1ppsErrorState=sfn1ppsErrorState, tunerCnEventMinValue=tunerCnEventMinValue, internalStorageQuota=internalStorageQuota, caseTemperatureEventMaxValue=caseTemperatureEventMaxValue, tunerTsSyncEventSettings=tunerTsSyncEventSettings, subnetmask=subnetmask, tsIpBufferlevel1=tsIpBufferlevel1, rtpUdpInputDataIndex=rtpUdpInputDataIndex, audioOutput2Index=audioOutput2Index, audioTsEntry=audioTsEntry, tsIpPacketDuplicate=tsIpPacketDuplicate, tsIpDualInput=tsIpDualInput, sfnClockEventEnabled=sfnClockEventEnabled, currentInputSourceEntry=currentInputSourceEntry, audioEventChannel=audioEventChannel, outputType=outputType, tunerTsSyncEventT2=tunerTsSyncEventT2, audioOutput1InputSourceEnabled=audioOutput1InputSourceEnabled, inputSourceState=inputSourceState, ipPerEventValue=ipPerEventValue, scTunerRfPowerTolerance=scTunerRfPowerTolerance, reStartDevice=reStartDevice, etr290ConformityEventEnable=etr290ConformityEventEnable, audioLevelEventEnabled=audioLevelEventEnabled, udpInputDataChannel=udpInputDataChannel, audioSampleRate=audioSampleRate, caseTemperatureAlarmActive=caseTemperatureAlarmActive, internalStorageIndex=internalStorageIndex, scIpPerValue=scIpPerValue, switchCriteriaTunerRfPower=switchCriteriaTunerRfPower, tunerCnEventT1=tunerCnEventT1, headphoneAudioChannel=headphoneAudioChannel, internalStorageSection=internalStorageSection, udpInputDataAlarmActive=udpInputDataAlarmActive, agcState=agcState, asiOutputInputSource=asiOutputInputSource, ceState=ceState, dteInterface=dteInterface, audioEventTable=audioEventTable, ipTsSyncEventT1=ipTsSyncEventT1, snmpTrapIP2Enable=snmpTrapIP2Enable, sntpSettings=sntpSettings, audioOutput1InputSource=audioOutput1InputSource, tsIpBackupPLR=tsIpBackupPLR, etr290ConformityAlarmActive=etr290ConformityAlarmActive, tsOverIp=tsOverIp, scIpPerEnabled=scIpPerEnabled, tsIpBufferReset=tsIpBufferReset, scTunerRfPowerValue=scTunerRfPowerValue, dteEventTable=dteEventTable, remoteControlUploadGroup=remoteControlUploadGroup, switchCriteriaTunerTsSync=switchCriteriaTunerTsSync, tsSyncTable=tsSyncTable, sfnClockEventSettings=sfnClockEventSettings, scTunerCnMinValue=scTunerCnMinValue, internalStorageTable=internalStorageTable, secondaryDns=secondaryDns, rtpUdpInputDataTable=rtpUdpInputDataTable, asiTsSyncEventT1=asiTsSyncEventT1, ipPerEventMode=ipPerEventMode, audioLevelEventChannel=audioLevelEventChannel, audioOutput2Entry=audioOutput2Entry, tunerBerEventT1=tunerBerEventT1, remoteControlUploadEventParams=remoteControlUploadEventParams, scAsiTsSyncEnabled=scAsiTsSyncEnabled, caseTemperatureEventT1=caseTemperatureEventT1, internalStorageEventSettings=internalStorageEventSettings, aoipUdpInputDataEventT2=aoipUdpInputDataEventT2, sfnClockEventT1=sfnClockEventT1, aoipUdpInputDataEventEntry=aoipUdpInputDataEventEntry, audioAlarmActive=audioAlarmActive)
