#
# PySNMP MIB module AT-LICENSE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/allied/AT-LICENSE-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 16:39:16 2024
# On host fv-az1437-189 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
sysinfo, = mibBuilder.importSymbols("AT-SMI-MIB", "sysinfo")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Unsigned32, Counter32, ModuleIdentity, Bits, Counter64, IpAddress, MibIdentifier, Integer32, NotificationType, ObjectIdentity, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Unsigned32", "Counter32", "ModuleIdentity", "Bits", "Counter64", "IpAddress", "MibIdentifier", "Integer32", "NotificationType", "ObjectIdentity", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "DisplayString", "TextualConvention")
license = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22))
license.setRevisions(('2014-04-29 00:00', '2010-09-07 00:00', '2010-08-30 00:00', '2010-06-14 05:09', '2008-11-10 00:00',))
if mibBuilder.loadTexts: license.setLastUpdated('201404290000Z')
if mibBuilder.loadTexts: license.setOrganization('Allied Telesis Labs New Zealand')
baseLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 1), )
if mibBuilder.loadTexts: baseLicenseTable.setStatus('current')
baseLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 1, 1), ).setIndexNames((0, "AT-LICENSE-MIB", "baseLicenseStackId"))
if mibBuilder.loadTexts: baseLicenseEntry.setStatus('current')
baseLicenseStackId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: baseLicenseStackId.setStatus('current')
baseLicenseName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseLicenseName.setStatus('current')
baseLicenseQuantity = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseLicenseQuantity.setStatus('current')
baseLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseLicenseType.setStatus('current')
baseLicenseIssueDate = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseLicenseIssueDate.setStatus('current')
baseLicenseExpiryDate = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseLicenseExpiryDate.setStatus('current')
baseLicenseFeatures = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseLicenseFeatures.setStatus('current')
licenseTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 2), )
if mibBuilder.loadTexts: licenseTable.setStatus('current')
licenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 2, 1), ).setIndexNames((0, "AT-LICENSE-MIB", "licenseStackId"), (0, "AT-LICENSE-MIB", "licenseIndex"))
if mibBuilder.loadTexts: licenseEntry.setStatus('current')
licenseStackId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: licenseStackId.setStatus('current')
licenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: licenseIndex.setStatus('current')
licenseName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseName.setStatus('current')
licenseCustomer = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseCustomer.setStatus('current')
licenseQuantity = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseQuantity.setStatus('current')
licenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseType.setStatus('current')
licenseIssueDate = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseIssueDate.setStatus('current')
licenseExpiryDate = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseExpiryDate.setStatus('current')
licenseFeatures = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFeatures.setStatus('current')
licenseRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 2, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenseRowStatus.setStatus('current')
licenseFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 3), )
if mibBuilder.loadTexts: licenseFeatureTable.setStatus('current')
licenseFeatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 3, 1), ).setIndexNames((0, "AT-LICENSE-MIB", "licenseFeatureIndex"))
if mibBuilder.loadTexts: licenseFeatureEntry.setStatus('current')
licenseFeatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: licenseFeatureIndex.setStatus('current')
licenseFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFeatureName.setStatus('current')
licenseFeatureStkMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFeatureStkMembers.setStatus('current')
licenseNew = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 4))
licenseNewStackId = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenseNewStackId.setStatus('current')
licenseNewName = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenseNewName.setStatus('current')
licenseNewKey = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenseNewKey.setStatus('current')
licenseNewInstall = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 4, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenseNewInstall.setStatus('current')
licenseNewInstallStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("processing", 2), ("success", 3), ("failure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseNewInstallStatus.setStatus('current')
licenseStackRemove = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 5))
licenseStackRemoveName = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenseStackRemoveName.setStatus('current')
licenseStackRemoveExecute = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 5, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenseStackRemoveExecute.setStatus('current')
licenseStackRemoveStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 22, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("processing", 2), ("success", 3), ("failure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseStackRemoveStatus.setStatus('current')
mibBuilder.exportSymbols("AT-LICENSE-MIB", baseLicenseStackId=baseLicenseStackId, baseLicenseFeatures=baseLicenseFeatures, baseLicenseType=baseLicenseType, licenseIndex=licenseIndex, baseLicenseIssueDate=baseLicenseIssueDate, licenseFeatureTable=licenseFeatureTable, licenseStackRemoveExecute=licenseStackRemoveExecute, license=license, licenseIssueDate=licenseIssueDate, licenseFeatureEntry=licenseFeatureEntry, licenseTable=licenseTable, licenseNewInstallStatus=licenseNewInstallStatus, licenseExpiryDate=licenseExpiryDate, licenseRowStatus=licenseRowStatus, baseLicenseExpiryDate=baseLicenseExpiryDate, licenseNew=licenseNew, baseLicenseEntry=baseLicenseEntry, licenseNewStackId=licenseNewStackId, licenseFeatureStkMembers=licenseFeatureStkMembers, baseLicenseTable=baseLicenseTable, licenseNewKey=licenseNewKey, licenseStackRemove=licenseStackRemove, licenseStackRemoveStatus=licenseStackRemoveStatus, baseLicenseName=baseLicenseName, licenseType=licenseType, licenseFeatures=licenseFeatures, PYSNMP_MODULE_ID=license, licenseCustomer=licenseCustomer, baseLicenseQuantity=baseLicenseQuantity, licenseNewName=licenseNewName, licenseQuantity=licenseQuantity, licenseNewInstall=licenseNewInstall, licenseFeatureName=licenseFeatureName, licenseStackRemoveName=licenseStackRemoveName, licenseFeatureIndex=licenseFeatureIndex, licenseStackId=licenseStackId, licenseEntry=licenseEntry, licenseName=licenseName)
