#
# PySNMP MIB module RS-XX9-SMI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rs/RS-XX9-SMI-MIB
# Produced by pysmi-1.1.12 at Thu Nov 28 03:02:46 2024
# On host fv-az885-149 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
rsProdBroadcastTransmitter, rsRegModules = mibBuilder.importSymbols("RS-COMMON-MIB", "rsProdBroadcastTransmitter", "rsRegModules")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32, ObjectIdentity, NotificationType, Unsigned32, TimeTicks, ModuleIdentity, Counter32, MibIdentifier, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32", "ObjectIdentity", "NotificationType", "Unsigned32", "TimeTicks", "ModuleIdentity", "Counter32", "MibIdentifier", "Counter64", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
rsXx9MibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 1, 216))
rsXx9MibModule.setRevisions(('2013-05-29 15:21', '2011-08-16 08:00',))
if mibBuilder.loadTexts: rsXx9MibModule.setLastUpdated('201305291521Z')
if mibBuilder.loadTexts: rsXx9MibModule.setOrganization('Rohde&Schwarz GmbH & Co. KG')
rsXx9Mib = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216))
if mibBuilder.loadTexts: rsXx9Mib.setStatus('current')
rsXx9Common = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2))
if mibBuilder.loadTexts: rsXx9Common.setStatus('current')
rsXx9Tx = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3))
if mibBuilder.loadTexts: rsXx9Tx.setStatus('current')
rsXx9MTx = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4))
if mibBuilder.loadTexts: rsXx9MTx.setStatus('current')
rsXx9DvbT2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 5))
if mibBuilder.loadTexts: rsXx9DvbT2.setStatus('current')
rsXx9DvbT = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 6))
if mibBuilder.loadTexts: rsXx9DvbT.setStatus('current')
rsXx9Atsc = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 7))
if mibBuilder.loadTexts: rsXx9Atsc.setStatus('current')
rsXx9IsdbT = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8))
if mibBuilder.loadTexts: rsXx9IsdbT.setStatus('current')
rsXx9Atv = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9))
if mibBuilder.loadTexts: rsXx9Atv.setStatus('current')
rsXx9Dab = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10))
if mibBuilder.loadTexts: rsXx9Dab.setStatus('current')
rsXx9Fm = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 11))
if mibBuilder.loadTexts: rsXx9Fm.setStatus('current')
rsXx9Dtmb = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12))
if mibBuilder.loadTexts: rsXx9Dtmb.setStatus('current')
rsXx9LiquidCooling = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100))
if mibBuilder.loadTexts: rsXx9LiquidCooling.setStatus('current')
rsXx9AirCooling = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101))
if mibBuilder.loadTexts: rsXx9AirCooling.setStatus('current')
mibBuilder.exportSymbols("RS-XX9-SMI-MIB", rsXx9LiquidCooling=rsXx9LiquidCooling, rsXx9Dtmb=rsXx9Dtmb, rsXx9AirCooling=rsXx9AirCooling, rsXx9Tx=rsXx9Tx, rsXx9MibModule=rsXx9MibModule, rsXx9DvbT=rsXx9DvbT, rsXx9DvbT2=rsXx9DvbT2, PYSNMP_MODULE_ID=rsXx9MibModule, rsXx9Atsc=rsXx9Atsc, rsXx9Mib=rsXx9Mib, rsXx9Dab=rsXx9Dab, rsXx9Fm=rsXx9Fm, rsXx9MTx=rsXx9MTx, rsXx9Atv=rsXx9Atv, rsXx9Common=rsXx9Common, rsXx9IsdbT=rsXx9IsdbT)
