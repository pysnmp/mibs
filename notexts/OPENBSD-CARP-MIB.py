#
# PySNMP MIB module OPENBSD-CARP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/openbsd/OPENBSD-CARP-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 09:40:31 2024
# On host fv-az1766-730 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
openBSD, = mibBuilder.importSymbols("OPENBSD-BASE-MIB", "openBSD")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, enterprises, Counter32, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, Gauge32, TimeTicks, Counter64, iso, IpAddress, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "enterprises", "Counter32", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "Gauge32", "TimeTicks", "Counter64", "iso", "IpAddress", "ModuleIdentity", "NotificationType")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
carpMIBObjects = ModuleIdentity((1, 3, 6, 1, 4, 1, 30155, 6))
carpMIBObjects.setRevisions(('2012-01-31 00:00',))
if mibBuilder.loadTexts: carpMIBObjects.setLastUpdated('201201310000Z')
if mibBuilder.loadTexts: carpMIBObjects.setOrganization('OpenBSD')
carpSysctl = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 6, 1))
carpIf = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 6, 2))
carpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 6, 3))
carpAllow = MibScalar((1, 3, 6, 1, 4, 1, 30155, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpAllow.setStatus('current')
carpPreempt = MibScalar((1, 3, 6, 1, 4, 1, 30155, 6, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpPreempt.setStatus('current')
carpLog = MibScalar((1, 3, 6, 1, 4, 1, 30155, 6, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpLog.setStatus('current')
carpIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 30155, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpIfNumber.setStatus('current')
carpIfTable = MibTable((1, 3, 6, 1, 4, 1, 30155, 6, 2, 2), )
if mibBuilder.loadTexts: carpIfTable.setStatus('current')
carpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30155, 6, 2, 2, 1), ).setIndexNames((0, "OPENBSD-CARP-MIB", "carpIfIndex"))
if mibBuilder.loadTexts: carpIfEntry.setStatus('current')
carpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpIfIndex.setStatus('current')
carpIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 6, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpIfDescr.setStatus('current')
carpIfVhid = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 6, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpIfVhid.setStatus('current')
carpIfDev = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 6, 2, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpIfDev.setStatus('current')
carpIfAdvbase = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 6, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpIfAdvbase.setStatus('current')
carpIfAdvskew = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 6, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpIfAdvskew.setStatus('current')
carpIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 6, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("init", 0), ("backup", 1), ("master", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpIfState.setStatus('current')
carpIpPktsRecv = MibScalar((1, 3, 6, 1, 4, 1, 30155, 6, 3, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpIpPktsRecv.setStatus('current')
carpIp6PktsRecv = MibScalar((1, 3, 6, 1, 4, 1, 30155, 6, 3, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpIp6PktsRecv.setStatus('current')
carpPktDiscardsForBadInterface = MibScalar((1, 3, 6, 1, 4, 1, 30155, 6, 3, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpPktDiscardsForBadInterface.setStatus('current')
carpPktDiscardsForWrongTtl = MibScalar((1, 3, 6, 1, 4, 1, 30155, 6, 3, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpPktDiscardsForWrongTtl.setStatus('current')
carpPktShorterThanHeader = MibScalar((1, 3, 6, 1, 4, 1, 30155, 6, 3, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpPktShorterThanHeader.setStatus('current')
carpPktDiscardsForBadChecksum = MibScalar((1, 3, 6, 1, 4, 1, 30155, 6, 3, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpPktDiscardsForBadChecksum.setStatus('current')
carpPktDiscardsForBadVersion = MibScalar((1, 3, 6, 1, 4, 1, 30155, 6, 3, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpPktDiscardsForBadVersion.setStatus('current')
carpPktDiscardsForTooShort = MibScalar((1, 3, 6, 1, 4, 1, 30155, 6, 3, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpPktDiscardsForTooShort.setStatus('current')
carpPktDiscardsForBadAuth = MibScalar((1, 3, 6, 1, 4, 1, 30155, 6, 3, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpPktDiscardsForBadAuth.setStatus('current')
carpPktDiscardsForBadVhid = MibScalar((1, 3, 6, 1, 4, 1, 30155, 6, 3, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpPktDiscardsForBadVhid.setStatus('current')
carpPktDiscardsForBadAddressList = MibScalar((1, 3, 6, 1, 4, 1, 30155, 6, 3, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpPktDiscardsForBadAddressList.setStatus('current')
carpIpPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 30155, 6, 3, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpIpPktsSent.setStatus('current')
carpIp6PktsSent = MibScalar((1, 3, 6, 1, 4, 1, 30155, 6, 3, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpIp6PktsSent.setStatus('current')
carpNoMemory = MibScalar((1, 3, 6, 1, 4, 1, 30155, 6, 3, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpNoMemory.setStatus('current')
carpTransitionsToMaster = MibScalar((1, 3, 6, 1, 4, 1, 30155, 6, 3, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carpTransitionsToMaster.setStatus('current')
mibBuilder.exportSymbols("OPENBSD-CARP-MIB", carpIfState=carpIfState, carpLog=carpLog, carpIfVhid=carpIfVhid, carpIfAdvskew=carpIfAdvskew, carpNoMemory=carpNoMemory, carpIfTable=carpIfTable, carpPktDiscardsForBadAuth=carpPktDiscardsForBadAuth, carpIpPktsRecv=carpIpPktsRecv, carpMIBObjects=carpMIBObjects, carpIp6PktsRecv=carpIp6PktsRecv, carpPktDiscardsForBadVhid=carpPktDiscardsForBadVhid, carpSysctl=carpSysctl, carpPktDiscardsForBadInterface=carpPktDiscardsForBadInterface, carpIp6PktsSent=carpIp6PktsSent, carpIfDev=carpIfDev, carpIpPktsSent=carpIpPktsSent, carpPreempt=carpPreempt, carpIfDescr=carpIfDescr, carpPktShorterThanHeader=carpPktShorterThanHeader, carpAllow=carpAllow, carpStats=carpStats, carpTransitionsToMaster=carpTransitionsToMaster, carpIfEntry=carpIfEntry, carpPktDiscardsForBadVersion=carpPktDiscardsForBadVersion, carpIfAdvbase=carpIfAdvbase, carpPktDiscardsForBadAddressList=carpPktDiscardsForBadAddressList, carpPktDiscardsForWrongTtl=carpPktDiscardsForWrongTtl, carpPktDiscardsForTooShort=carpPktDiscardsForTooShort, PYSNMP_MODULE_ID=carpMIBObjects, carpIfNumber=carpIfNumber, carpIf=carpIf, carpIfIndex=carpIfIndex, carpPktDiscardsForBadChecksum=carpPktDiscardsForBadChecksum)
