#
# PySNMP MIB module CADANT-CMTS-EQUIPMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/arris/CADANT-CMTS-EQUIPMENT-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 11:52:58 2024
# On host fv-az1530-743 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
cadEquipment, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadEquipment")
DuplexStatus, CardType, SecondaryState, ShelfId, EqActionType, FirmwareSource, PortId, UnknownState, PicType, DiskVolumeUsageLevel, PortDetectedMode, CardSubType, PortType, PrimaryState, PortMode, FlowControlMode, CardId, AdminState = mibBuilder.importSymbols("CADANT-TC", "DuplexStatus", "CardType", "SecondaryState", "ShelfId", "EqActionType", "FirmwareSource", "PortId", "UnknownState", "PicType", "DiskVolumeUsageLevel", "PortDetectedMode", "CardSubType", "PortType", "PrimaryState", "PortMode", "FlowControlMode", "CardId", "AdminState")
TenthdBmV, = mibBuilder.importSymbols("DOCS-IF-MIB", "TenthdBmV")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ObjectIdentity, Gauge32, ModuleIdentity, iso, TimeTicks, MibIdentifier, IpAddress, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "ModuleIdentity", "iso", "TimeTicks", "MibIdentifier", "IpAddress", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "Unsigned32", "Counter32")
TimeStamp, TruthValue, DisplayString, TextualConvention, MacAddress, RowStatus, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TruthValue", "DisplayString", "TextualConvention", "MacAddress", "RowStatus", "DateAndTime")
cadEquipmentMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1))
cadEquipmentMib.setRevisions(('2009-03-03 00:00', '2009-01-05 00:00', '2008-10-14 00:00', '2008-10-01 00:00', '2008-07-03 00:00', '2008-06-18 00:00', '2008-04-28 00:00', '2008-04-02 00:00', '2008-02-25 00:00', '2007-11-05 00:00', '2007-01-10 00:00', '2006-11-13 00:00', '2006-09-12 00:00', '2006-08-23 00:00', '2006-02-14 00:00', '2005-08-30 00:00', '2005-04-06 00:00', '2005-02-04 00:00', '2005-01-24 00:00', '2004-12-01 00:00', '2004-11-18 00:00', '2004-11-11 00:00', '2004-09-07 00:00', '2004-07-23 00:00', '2004-03-22 00:00', '2004-03-18 00:00', '2004-02-04 00:00', '2003-12-18 00:00', '2003-03-31 00:00', '2003-03-17 00:00', '2003-03-05 00:00', '2003-03-02 00:00', '2003-01-29 00:00', '2002-12-14 00:00', '2002-11-07 00:00', '2002-09-25 00:00', '2002-09-01 00:00', '2002-05-01 00:00', '2001-12-28 16:30', '2001-12-21 16:30', '2001-10-03 00:00', '2001-07-17 00:00',))
if mibBuilder.loadTexts: cadEquipmentMib.setLastUpdated('200903030000Z')
if mibBuilder.loadTexts: cadEquipmentMib.setOrganization('Arris International, Inc.')
class TestId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 100)

class TestType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("test", 1), ("diagnostic", 2), ("unknown", 3))

class TestCommand(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("noop", 1), ("stop", 2), ("disable", 3), ("enable", 4), ("runNow", 5))

class TestScheduleCommand(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noop", 1), ("disable", 2), ("enable", 3))

class TestSchedule(TextualConvention, Integer32):
    status = 'current'

class TestResult(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("notRun", 1), ("inProgress", 2), ("pass", 3), ("fail", 4), ("inconclusive", 5), ("timeOut", 6), ("abort", 7))

class TestTransactionId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

equipmentTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0))
systemGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1))
systemClock = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 1), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: systemClock.setStatus('current')
trapCounter = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapCounter.setStatus('current')
trapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6), ("informational", 7))).clone('cleared')).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSeverity.setStatus('current')
systemKey = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemKey.setStatus('current')
cardNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 98), CardId().clone(99)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cardNumber.setStatus('current')
portNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 99), PortId().clone(99)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: portNumber.setStatus('current')
diskDriveNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(99)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: diskDriveNumber.setStatus('current')
diskVolumeNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(99)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: diskVolumeNumber.setStatus('current')
shelfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 2))
shelfNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 2, 1), ShelfId().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfNumber.setStatus('deprecated')
shelfName = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 2, 2), DisplayString().clone('Cadant C4 CMTS')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelfName.setStatus('current')
shelfSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfSwVersion.setStatus('current')
equipmentState = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 3))
cardLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 3, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardLastChangeTime.setStatus('current')
portLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 3, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLastChangeTime.setStatus('current')
equipmentTbl = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4))
cardTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2), )
if mibBuilder.loadTexts: cardTable.setStatus('current')
cardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "cardShelfId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "cardId"))
if mibBuilder.loadTexts: cardEntry.setStatus('current')
cardShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 1), ShelfId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardShelfId.setStatus('obsolete')
cardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 2), CardId())
if mibBuilder.loadTexts: cardId.setStatus('current')
cardName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardName.setStatus('current')
cardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 4), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardType.setStatus('current')
cardSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 5), CardSubType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardSubType.setStatus('current')
cardSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSerialNum.setStatus('current')
cardFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardFwVersion.setStatus('current')
cardHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardHwVersion.setStatus('current')
cardSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSwVersion.setStatus('current')
cardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 12), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardAdminState.setStatus('current')
cardPrState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 13), PrimaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPrState.setStatus('current')
cardSecState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 14), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSecState.setStatus('current')
cardDplxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 15), DuplexStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDplxStatus.setStatus('current')
cardAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 17), EqActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardAction.setStatus('current')
cardTrapInh = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 18), Bits().clone(namedValues=NamedValues(("primary", 0), ("secondary", 1), ("duplex", 2), ("detected", 3), ("tempoutofrange", 4), ("tempnoreport", 5), ("tempoverheat", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTrapInh.setStatus('current')
cardNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardNumPorts.setStatus('current')
cardDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 20), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDetected.setStatus('current')
cardSubDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 21), CardSubType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSubDetected.setStatus('current')
cardFwUpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 23), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardFwUpdateStatus.setStatus('current')
cardSpareGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 24), CardId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardSpareGroupId.setStatus('current')
cardSpareGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 99))).clone(namedValues=NamedValues(("manual", 1), ("auto", 2), ("invalid", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardSpareGroupMode.setStatus('current')
cardUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 26), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardUpTime.setStatus('current')
cardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-30, 120), ValueRangeConstraint(999, 999), )).clone(999)).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTemperature.setStatus('current')
cardCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardCpuType.setStatus('current')
cardCpuSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 31), Unsigned32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cardCpuSpeed.setStatus('current')
cardBusSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 32), Unsigned32()).setUnits('hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cardBusSpeed.setStatus('current')
cardRamSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 33), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cardRamSize.setStatus('current')
cardFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 34), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cardFlashSize.setStatus('current')
cardCPLDVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardCPLDVersion.setStatus('current')
cardFpgaSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 36), FirmwareSource().clone('committed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardFpgaSource.setStatus('current')
cardBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 90))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardBootVersion.setStatus('current')
cardLastBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardLastBootVersion.setStatus('current')
cardLastBootSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 39), FirmwareSource().clone('boot1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardLastBootSource.setStatus('current')
cardPicDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 40), PicType().clone('invalid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPicDetected.setStatus('current')
cardPicSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPicSerialNum.setStatus('current')
cardPicHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPicHwVersion.setStatus('current')
cardLastResetReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardLastResetReason.setStatus('current')
cardTemperatureHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 44), Integer32().clone(70)).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTemperatureHighWarn.setStatus('current')
cardTemperatureHighError = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 45), Integer32().clone(90)).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTemperatureHighError.setStatus('current')
cardCarrierSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardCarrierSerialNum.setStatus('current')
cardCarrierFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardCarrierFwVersion.setStatus('current')
cardCarrierHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 2, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardCarrierHwVersion.setStatus('current')
portTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3), )
if mibBuilder.loadTexts: portTable.setStatus('current')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "portShelfId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "portCardId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "portId"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
portShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 1), ShelfId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portShelfId.setStatus('deprecated')
portCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 2), CardId())
if mibBuilder.loadTexts: portCardId.setStatus('current')
portId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 3), PortId())
if mibBuilder.loadTexts: portId.setStatus('current')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 4), PortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
portAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 6), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAdminState.setStatus('current')
portPrState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 7), PrimaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPrState.setStatus('current')
portSecState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 8), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecState.setStatus('current')
portDplxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 9), DuplexStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDplxStatus.setStatus('current')
portAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 11), EqActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAction.setStatus('current')
portTrapInh = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 12), Bits().clone(namedValues=NamedValues(("primary", 0), ("secondary", 1), ("duplex", 2), ("linkUpLinkDown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrapInh.setStatus('current')
portNumChans = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNumChans.setStatus('current')
portDocsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 14), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDocsIfIndex.setStatus('current')
portMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 15), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMacAddress.setStatus('current')
portMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 16), PortMode().clone('autoNegotiate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMode.setStatus('current')
portDetectedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 17), PortDetectedMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDetectedMode.setStatus('current')
portBgpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBgpId.setStatus('current')
portConnectorId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 20), PortId().clone(99)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConnectorId.setStatus('current')
portCardSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 21), CardSubType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCardSubType.setStatus('current')
portDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDescription.setStatus('current')
portCurrDsPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 28), TenthdBmV()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCurrDsPower.setStatus('current')
portMinDsPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 29), TenthdBmV()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMinDsPower.setStatus('current')
portMaxDsPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 30), TenthdBmV()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMaxDsPower.setStatus('current')
portTxFlowControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 31), FlowControlMode().clone('desired')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTxFlowControlMode.setStatus('current')
portRxFlowControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 32), FlowControlMode().clone('desired')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRxFlowControlMode.setStatus('current')
portTxFlowControlDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 33), FlowControlMode().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTxFlowControlDetected.setStatus('current')
portRxFlowControlDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 34), FlowControlMode().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRxFlowControlDetected.setStatus('current')
portMacIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 3, 1, 35), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMacIfIndex.setStatus('current')
diskVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4), )
if mibBuilder.loadTexts: diskVolumeTable.setStatus('current')
diskVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeShelfId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeCardId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeDriveId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeId"))
if mibBuilder.loadTexts: diskVolumeEntry.setStatus('current')
diskVolumeShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 1), ShelfId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVolumeShelfId.setStatus('deprecated')
diskVolumeCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 2), CardId())
if mibBuilder.loadTexts: diskVolumeCardId.setStatus('current')
diskVolumeDriveId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)))
if mibBuilder.loadTexts: diskVolumeDriveId.setStatus('current')
diskVolumeId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)))
if mibBuilder.loadTexts: diskVolumeId.setStatus('current')
diskVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVolumeName.setStatus('current')
diskVolumeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 6), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVolumeSize.setStatus('current')
diskVolumeUsageLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 7), DiskVolumeUsageLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVolumeUsageLevel.setStatus('current')
diskVolumeUsagePercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVolumeUsagePercentage.setStatus('current')
diskVolumeUsageCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: diskVolumeUsageCriticalThreshold.setStatus('current')
diskVolumeUsageMajorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(80)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: diskVolumeUsageMajorThreshold.setStatus('current')
diskVolumeUsageMinorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(70)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: diskVolumeUsageMinorThreshold.setStatus('current')
diskVolumeAutoDeleteUnusedFile = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diskVolumeAutoDeleteUnusedFile.setStatus('current')
diskVolumeTrapInh = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 13), Bits().clone(namedValues=NamedValues(("criticalUsageLevel", 0), ("majorUsageLevel", 1), ("minorUsageLevel", 2), ("autoDeleteFiles", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diskVolumeTrapInh.setStatus('current')
diskVolumeDiskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 4, 1, 14), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVolumeDiskSize.setStatus('current')
diskVolumeFileName = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: diskVolumeFileName.setStatus('current')
equipmentDiag = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5))
eqDiagConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 1))
remainInDiagMode = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remainInDiagMode.setStatus('current')
consoleOutput = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 1, 2), TruthValue().clone('false'))
if mibBuilder.loadTexts: consoleOutput.setStatus('obsolete')
verboseLevel = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: verboseLevel.setStatus('current')
diagTestId = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 2), TestId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: diagTestId.setStatus('current')
cardTestTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3), )
if mibBuilder.loadTexts: cardTestTable.setStatus('current')
cardTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "cardShelfTestIndex"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "cardTestIndex"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "cardTestId"))
if mibBuilder.loadTexts: cardTestEntry.setStatus('current')
cardShelfTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 1), ShelfId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardShelfTestIndex.setStatus('deprecated')
cardTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 2), CardId())
if mibBuilder.loadTexts: cardTestIndex.setStatus('current')
cardTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 3), TestId())
if mibBuilder.loadTexts: cardTestId.setStatus('current')
cardTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTestName.setStatus('current')
cardTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 5), TestType().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTestType.setStatus('current')
cardTestDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTestDescription.setStatus('current')
cardTestCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 7), TestCommand().clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTestCommand.setStatus('current')
cardTestScheduleCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 8), TestScheduleCommand().clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTestScheduleCommand.setStatus('current')
cardTestSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 9), TestSchedule()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTestSchedule.setStatus('current')
cardTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 10), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTestTime.setStatus('current')
cardTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 11), TestResult().clone('notRun')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTestResult.setStatus('current')
cardTestResultDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTestResultDesc.setStatus('current')
cardTestTransId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 13), TestTransactionId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTestTransId.setStatus('current')
equipmentAudit = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6))
auditAutoScheduling = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditAutoScheduling.setStatus('current')
auditLogOutput = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogOutput.setStatus('current')
auditLogThrottle = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogThrottle.setStatus('current')
auditTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4), )
if mibBuilder.loadTexts: auditTable.setStatus('current')
auditEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "auditShelfId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "auditCardId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "auditId"))
if mibBuilder.loadTexts: auditEntry.setStatus('current')
auditShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 1), ShelfId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditShelfId.setStatus('deprecated')
auditCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 2), CardId())
if mibBuilder.loadTexts: auditCardId.setStatus('current')
auditId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 3), Unsigned32())
if mibBuilder.loadTexts: auditId.setStatus('current')
auditName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditName.setStatus('current')
auditDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditDescription.setStatus('current')
auditTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditTime.setStatus('current')
auditCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("runnow", 4))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditCommand.setStatus('current')
auditStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditStatus.setStatus('current')
auditResult = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("abort", 4), ("notRun", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditResult.setStatus('current')
auditPassedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditPassedCount.setStatus('current')
auditFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditFailedCount.setStatus('current')
auditCycleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditCycleCount.setStatus('current')
auditTotalPassedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditTotalPassedCount.setStatus('current')
auditTotalFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditTotalFailedCount.setStatus('current')
cmDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8))
cmMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmMacAddress.setStatus('current')
cmVendor = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmVendor.setStatus('current')
cmResetReason = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmResetReason.setStatus('current')
cmUChannelID = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmUChannelID.setStatus('current')
cmPrimarySID = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmPrimarySID.setStatus('current')
cmResetStatus = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmResetStatus.setStatus('current')
cmResetUpTime = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 7), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmResetUpTime.setStatus('current')
cmResetInfo = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmResetInfo.setStatus('current')
cmIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 9), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmIpAddress.setStatus('current')
equipmentError = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9))
fpgaErrorEventTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1), )
if mibBuilder.loadTexts: fpgaErrorEventTable.setStatus('current')
fpgaErrorEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "cardId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "errEventId"))
if mibBuilder.loadTexts: fpgaErrorEventEntry.setStatus('current')
errEventId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: errEventId.setStatus('current')
errEvRecoveryEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: errEvRecoveryEnabled.setStatus('current')
errEvLoggingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: errEvLoggingEnabled.setStatus('current')
errEvLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: errEvLogLevel.setStatus('current')
errEvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: errEvRowStatus.setStatus('current')
cadEquipmentMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10))
cadEquipmentMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 1))
cadEquipmentMibGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2))
cardPrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 5)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardPrState"))
if mibBuilder.loadTexts: cardPrStateChange.setStatus('current')
cardSecStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 6)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSecState"))
if mibBuilder.loadTexts: cardSecStateChange.setStatus('current')
cardDetectedChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 7)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardDetected"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSubDetected"))
if mibBuilder.loadTexts: cardDetectedChange.setStatus('current')
cardDplxStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 8)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardDplxStatus"))
if mibBuilder.loadTexts: cardDplxStatusChange.setStatus('current')
portPrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 9)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "portNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "portType"), ("CADANT-CMTS-EQUIPMENT-MIB", "portPrState"), ("CADANT-CMTS-EQUIPMENT-MIB", "portCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "portDocsIfIndex"))
if mibBuilder.loadTexts: portPrStateChange.setStatus('current')
portSecStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 10)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "portNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "portType"), ("CADANT-CMTS-EQUIPMENT-MIB", "portSecState"), ("CADANT-CMTS-EQUIPMENT-MIB", "portCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "portDocsIfIndex"))
if mibBuilder.loadTexts: portSecStateChange.setStatus('current')
portDplxStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 11)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "portNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "portType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardDplxStatus"))
if mibBuilder.loadTexts: portDplxStatusChange.setStatus('current')
cardTestResultNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 13)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "diagTestId"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestName"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestResult"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestResultDesc"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestTransId"))
if mibBuilder.loadTexts: cardTestResultNotification.setStatus('current')
cmResetClearNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 15)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "systemClock"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmMacAddress"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmUChannelID"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"))
if mibBuilder.loadTexts: cmResetClearNotification.setStatus('current')
cmResetNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 16)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "systemClock"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmMacAddress"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmVendor"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmResetReason"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmUChannelID"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmPrimarySID"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmResetStatus"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmResetUpTime"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmResetInfo"))
if mibBuilder.loadTexts: cmResetNotification.setStatus('current')
diskVolumeUsageNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 17)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskDriveNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeUsageLevel"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeName"))
if mibBuilder.loadTexts: diskVolumeUsageNotification.setStatus('current')
diskVolumeAutoDeleteFileNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 18)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskDriveNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeName"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeFileName"))
if mibBuilder.loadTexts: diskVolumeAutoDeleteFileNotification.setStatus('current')
cardTempOutOfRangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 19)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"))
if mibBuilder.loadTexts: cardTempOutOfRangeNotification.setStatus('current')
cardTempNoReportNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 20)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"))
if mibBuilder.loadTexts: cardTempNoReportNotification.setStatus('current')
cardTempOverHeatNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 21)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"))
if mibBuilder.loadTexts: cardTempOverHeatNotification.setStatus('current')
downstreamPowerLoss = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 22)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "portNumber"))
if mibBuilder.loadTexts: downstreamPowerLoss.setStatus('current')
cmRegistrationNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 23)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "systemClock"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmMacAddress"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmVendor"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmUChannelID"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmIpAddress"))
if mibBuilder.loadTexts: cmRegistrationNotification.setStatus('current')
systemGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 1)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "systemClock"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "systemKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemGeneralGroup = systemGeneralGroup.setStatus('current')
equipmentStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 2)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "cardLastChangeTime"), ("CADANT-CMTS-EQUIPMENT-MIB", "portLastChangeTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentStateGroup = equipmentStateGroup.setStatus('current')
equipmentShelfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 3)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "shelfName"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfSwVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentShelfGroup = equipmentShelfGroup.setStatus('current')
equipmentCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 4)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "cardName"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSerialNum"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardFwVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardHwVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSwVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardAdminState"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardPrState"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSecState"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardDplxStatus"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardAction"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTrapInh"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumPorts"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardDetected"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSubDetected"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardFwUpdateStatus"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSpareGroupId"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardSpareGroupMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardUpTime"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTemperature"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardCpuType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardCpuSpeed"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardBusSpeed"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardRamSize"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardFlashSize"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardCPLDVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardFpgaSource"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardBootVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardLastBootVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardLastBootSource"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardPicDetected"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardPicSerialNum"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardPicHwVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTemperatureHighWarn"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTemperatureHighError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentCardGroup = equipmentCardGroup.setStatus('current')
equipmentPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 5)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "portType"), ("CADANT-CMTS-EQUIPMENT-MIB", "portAdminState"), ("CADANT-CMTS-EQUIPMENT-MIB", "portPrState"), ("CADANT-CMTS-EQUIPMENT-MIB", "portSecState"), ("CADANT-CMTS-EQUIPMENT-MIB", "portDplxStatus"), ("CADANT-CMTS-EQUIPMENT-MIB", "portAction"), ("CADANT-CMTS-EQUIPMENT-MIB", "portTrapInh"), ("CADANT-CMTS-EQUIPMENT-MIB", "portNumChans"), ("CADANT-CMTS-EQUIPMENT-MIB", "portMacAddress"), ("CADANT-CMTS-EQUIPMENT-MIB", "portMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "portDetectedMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "portDocsIfIndex"), ("CADANT-CMTS-EQUIPMENT-MIB", "portBgpId"), ("CADANT-CMTS-EQUIPMENT-MIB", "portConnectorId"), ("CADANT-CMTS-EQUIPMENT-MIB", "portCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "portDescription"), ("CADANT-CMTS-EQUIPMENT-MIB", "portCurrDsPower"), ("CADANT-CMTS-EQUIPMENT-MIB", "portMinDsPower"), ("CADANT-CMTS-EQUIPMENT-MIB", "portMaxDsPower"), ("CADANT-CMTS-EQUIPMENT-MIB", "portTxFlowControlMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "portRxFlowControlMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "portTxFlowControlDetected"), ("CADANT-CMTS-EQUIPMENT-MIB", "portRxFlowControlDetected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentPortGroup = equipmentPortGroup.setStatus('current')
equipmentDiagGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 6)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "remainInDiagMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "verboseLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentDiagGroup = equipmentDiagGroup.setStatus('current')
equipmentCardTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 8)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "cardTestName"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestDescription"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestCommand"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestScheduleCommand"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestSchedule"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestTime"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestResult"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestResultDesc"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestTransId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentCardTestGroup = equipmentCardTestGroup.setStatus('current')
equipmentAuditGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 10)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "auditAutoScheduling"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditLogOutput"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditLogThrottle"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditName"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditDescription"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditTime"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditCommand"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditStatus"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditResult"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditPassedCount"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditFailedCount"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditCycleCount"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditTotalPassedCount"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditTotalFailedCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentAuditGroup = equipmentAuditGroup.setStatus('current')
diskVolumeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 11)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeName"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeSize"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeUsageLevel"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeUsagePercentage"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeUsageCriticalThreshold"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeUsageMajorThreshold"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeUsageMinorThreshold"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeAutoDeleteUnusedFile"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeTrapInh"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeFileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    diskVolumeGroup = diskVolumeGroup.setStatus('current')
fpgaErrorEventGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 12)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "errEvRecoveryEnabled"), ("CADANT-CMTS-EQUIPMENT-MIB", "errEvLoggingEnabled"), ("CADANT-CMTS-EQUIPMENT-MIB", "errEvLogLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fpgaErrorEventGroup = fpgaErrorEventGroup.setStatus('current')
cadEquipmentMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 1, 1)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "systemGeneralGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentStateGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentShelfGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentCardGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentPortGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentDiagGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentCardTestGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentAuditGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "diskVolumeGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "fpgaErrorEventGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadEquipmentMibCompliance = cadEquipmentMibCompliance.setStatus('current')
mibBuilder.exportSymbols("CADANT-CMTS-EQUIPMENT-MIB", cardTestDescription=cardTestDescription, cmResetInfo=cmResetInfo, cmResetStatus=cmResetStatus, diskVolumeUsageLevel=diskVolumeUsageLevel, cardSpareGroupId=cardSpareGroupId, cardTestCommand=cardTestCommand, cardNumPorts=cardNumPorts, diskVolumeName=diskVolumeName, auditCardId=auditCardId, cardAdminState=cardAdminState, portAdminState=portAdminState, cardTestResultDesc=cardTestResultDesc, fpgaErrorEventEntry=fpgaErrorEventEntry, equipmentDiagGroup=equipmentDiagGroup, portNumber=portNumber, portDescription=portDescription, auditCycleCount=auditCycleCount, cardDetectedChange=cardDetectedChange, TestScheduleCommand=TestScheduleCommand, cardSubType=cardSubType, cardSwVersion=cardSwVersion, cardUpTime=cardUpTime, cardCpuType=cardCpuType, cardBusSpeed=cardBusSpeed, cardPicSerialNum=cardPicSerialNum, cardCarrierSerialNum=cardCarrierSerialNum, portDocsIfIndex=portDocsIfIndex, equipmentError=equipmentError, errEventId=errEventId, cadEquipmentMibGroup=cadEquipmentMibGroup, auditShelfId=auditShelfId, cardTemperatureHighError=cardTemperatureHighError, diskVolumeUsageNotification=diskVolumeUsageNotification, cadEquipmentMibCompliance=cadEquipmentMibCompliance, auditLogThrottle=auditLogThrottle, portTable=portTable, diskVolumeEntry=diskVolumeEntry, errEvLogLevel=errEvLogLevel, portAction=portAction, cardId=cardId, portMacIfIndex=portMacIfIndex, cardFwVersion=cardFwVersion, cardTestId=cardTestId, portTxFlowControlDetected=portTxFlowControlDetected, cardTable=cardTable, auditEntry=auditEntry, cadEquipmentMibCompliances=cadEquipmentMibCompliances, cardRamSize=cardRamSize, portDplxStatusChange=portDplxStatusChange, auditStatus=auditStatus, equipmentDiag=equipmentDiag, diskVolumeId=diskVolumeId, shelfSwVersion=shelfSwVersion, systemKey=systemKey, portNumChans=portNumChans, TestResult=TestResult, portMaxDsPower=portMaxDsPower, equipmentCardGroup=equipmentCardGroup, diskVolumeGroup=diskVolumeGroup, diskVolumeDiskSize=diskVolumeDiskSize, diskDriveNumber=diskDriveNumber, portBgpId=portBgpId, remainInDiagMode=remainInDiagMode, portMinDsPower=portMinDsPower, cardTemperature=cardTemperature, diskVolumeNumber=diskVolumeNumber, cmResetNotification=cmResetNotification, equipmentShelfGroup=equipmentShelfGroup, auditPassedCount=auditPassedCount, systemGeneralGroup=systemGeneralGroup, cardTempNoReportNotification=cardTempNoReportNotification, shelfNumber=shelfNumber, cardFpgaSource=cardFpgaSource, errEvRecoveryEnabled=errEvRecoveryEnabled, auditAutoScheduling=auditAutoScheduling, TestTransactionId=TestTransactionId, cardSerialNum=cardSerialNum, portMacAddress=portMacAddress, diskVolumeCardId=diskVolumeCardId, cmDevice=cmDevice, cardSubDetected=cardSubDetected, systemClock=systemClock, diskVolumeTrapInh=diskVolumeTrapInh, diskVolumeDriveId=diskVolumeDriveId, portDplxStatus=portDplxStatus, fpgaErrorEventGroup=fpgaErrorEventGroup, portRxFlowControlMode=portRxFlowControlMode, diskVolumeSize=diskVolumeSize, cardFlashSize=cardFlashSize, TestCommand=TestCommand, cardTestResultNotification=cardTestResultNotification, errEvLoggingEnabled=errEvLoggingEnabled, systemGeneral=systemGeneral, cardEntry=cardEntry, cadEquipmentMibConformance=cadEquipmentMibConformance, cardPrStateChange=cardPrStateChange, cmResetUpTime=cmResetUpTime, cardTestType=cardTestType, cardPicDetected=cardPicDetected, auditTime=auditTime, cardTestEntry=cardTestEntry, auditTable=auditTable, cardCPLDVersion=cardCPLDVersion, auditId=auditId, equipmentStateGroup=equipmentStateGroup, cardTempOverHeatNotification=cardTempOverHeatNotification, cardSecState=cardSecState, auditFailedCount=auditFailedCount, diskVolumeUsageMajorThreshold=diskVolumeUsageMajorThreshold, portDetectedMode=portDetectedMode, cardTestResult=cardTestResult, cardCarrierHwVersion=cardCarrierHwVersion, equipmentState=equipmentState, equipmentTraps=equipmentTraps, cardAction=cardAction, equipmentPortGroup=equipmentPortGroup, cardLastChangeTime=cardLastChangeTime, cardBootVersion=cardBootVersion, auditDescription=auditDescription, cadEquipmentMib=cadEquipmentMib, PYSNMP_MODULE_ID=cadEquipmentMib, portLastChangeTime=portLastChangeTime, cardShelfId=cardShelfId, portId=portId, portRxFlowControlDetected=portRxFlowControlDetected, diskVolumeFileName=diskVolumeFileName, cardTestIndex=cardTestIndex, consoleOutput=consoleOutput, cmRegistrationNotification=cmRegistrationNotification, downstreamPowerLoss=downstreamPowerLoss, cardTestTable=cardTestTable, cardPrState=cardPrState, cardDplxStatus=cardDplxStatus, cardSpareGroupMode=cardSpareGroupMode, cardPicHwVersion=cardPicHwVersion, portCardId=portCardId, cardDetected=cardDetected, auditName=auditName, equipmentAudit=equipmentAudit, cmResetReason=cmResetReason, cmResetClearNotification=cmResetClearNotification, portCurrDsPower=portCurrDsPower, portPrStateChange=portPrStateChange, cardTestTime=cardTestTime, portMode=portMode, eqDiagConfig=eqDiagConfig, cardTempOutOfRangeNotification=cardTempOutOfRangeNotification, portType=portType, diskVolumeUsageMinorThreshold=diskVolumeUsageMinorThreshold, auditCommand=auditCommand, cmPrimarySID=cmPrimarySID, cardType=cardType, cardTestScheduleCommand=cardTestScheduleCommand, portSecStateChange=portSecStateChange, cardShelfTestIndex=cardShelfTestIndex, diskVolumeAutoDeleteFileNotification=diskVolumeAutoDeleteFileNotification, shelfName=shelfName, trapCounter=trapCounter, cardTestName=cardTestName, verboseLevel=verboseLevel, cardName=cardName, diskVolumeUsageCriticalThreshold=diskVolumeUsageCriticalThreshold, portShelfId=portShelfId, diskVolumeShelfId=diskVolumeShelfId, cardTrapInh=cardTrapInh, portCardSubType=portCardSubType, cardLastResetReason=cardLastResetReason, auditResult=auditResult, trapSeverity=trapSeverity, errEvRowStatus=errEvRowStatus, cmIpAddress=cmIpAddress, cardFwUpdateStatus=cardFwUpdateStatus, auditLogOutput=auditLogOutput, cardTestSchedule=cardTestSchedule, equipmentAuditGroup=equipmentAuditGroup, auditTotalFailedCount=auditTotalFailedCount, TestId=TestId, fpgaErrorEventTable=fpgaErrorEventTable, cardNumber=cardNumber, cmUChannelID=cmUChannelID, portConnectorId=portConnectorId, equipmentTbl=equipmentTbl, cardLastBootSource=cardLastBootSource, portEntry=portEntry, cardCpuSpeed=cardCpuSpeed, TestSchedule=TestSchedule, portPrState=portPrState, diskVolumeAutoDeleteUnusedFile=diskVolumeAutoDeleteUnusedFile, cardHwVersion=cardHwVersion, equipmentCardTestGroup=equipmentCardTestGroup, shelfObjects=shelfObjects, cmVendor=cmVendor, auditTotalPassedCount=auditTotalPassedCount, portSecState=portSecState, portTrapInh=portTrapInh, cardLastBootVersion=cardLastBootVersion, cardSecStateChange=cardSecStateChange, diskVolumeUsagePercentage=diskVolumeUsagePercentage, TestType=TestType, cmMacAddress=cmMacAddress, diskVolumeTable=diskVolumeTable, diagTestId=diagTestId, cardDplxStatusChange=cardDplxStatusChange, cardTestTransId=cardTestTransId, portTxFlowControlMode=portTxFlowControlMode, cardCarrierFwVersion=cardCarrierFwVersion, cardTemperatureHighWarn=cardTemperatureHighWarn)
