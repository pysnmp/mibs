#
# PySNMP MIB module GARDEROS-ROUTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/garderos/GARDEROS-ROUTER-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 08:06:28 2024
# On host fv-az1110-484 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
garderos, = mibBuilder.importSymbols("GARDEROS-SMI-MIB", "garderos")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ObjectIdentity, Gauge32, Integer32, iso, TimeTicks, Unsigned32, Counter32, ModuleIdentity, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ObjectIdentity", "Gauge32", "Integer32", "iso", "TimeTicks", "Unsigned32", "Counter32", "ModuleIdentity", "Counter64", "NotificationType")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
router = ModuleIdentity((1, 3, 6, 1, 4, 1, 16108, 3))
router.setRevisions(('2017-03-10 10:18',))
if mibBuilder.loadTexts: router.setLastUpdated('201703101018Z')
if mibBuilder.loadTexts: router.setOrganization('Garderos GmbH')
class RouterType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3))
    namedValues = NamedValues(("grs", 3))

class RouterComponent(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("netd", 1), ("radius", 2), ("www", 3), ("ppp", 4), ("configd", 5), ("snmpd", 6), ("system", 7), ("ntpd", 8), ("sshd", 9), ("telnetd", 10), ("console", 11), ("cli", 12), ("dhcpd", 13))

class RouterSeverity(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("debug", 0), ("info", 1), ("error", 2), ("panic", 3))

class RouterSyslogSeverity(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7))

routerMIB = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1))
if mibBuilder.loadTexts: routerMIB.setStatus('current')
routerNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 0))
if mibBuilder.loadTexts: routerNotifications.setStatus('current')
routerObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1))
if mibBuilder.loadTexts: routerObjects.setStatus('current')
routerInformation = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1))
if mibBuilder.loadTexts: routerInformation.setStatus('current')
routerTrap = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 3))
if mibBuilder.loadTexts: routerTrap.setStatus('current')
routerTables = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000))
if mibBuilder.loadTexts: routerTables.setStatus('current')
routerDhcpIpv4Tables = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 10))
if mibBuilder.loadTexts: routerDhcpIpv4Tables.setStatus('current')
routerLqeTables = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 20))
if mibBuilder.loadTexts: routerLqeTables.setStatus('current')
routerWwanTables = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100))
if mibBuilder.loadTexts: routerWwanTables.setStatus('current')
routerDslTables = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200))
if mibBuilder.loadTexts: routerDslTables.setStatus('current')
routerConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 2))
if mibBuilder.loadTexts: routerConformance.setStatus('current')
routerGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 2, 1))
if mibBuilder.loadTexts: routerGroups.setStatus('current')
routerCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 2, 2))
if mibBuilder.loadTexts: routerCompliances.setStatus('current')
routerModuleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 16108, 3, 1, 2, 2, 1)).setObjects(("GARDEROS-ROUTER-MIB", "routerNotificationGroup"), ("GARDEROS-ROUTER-MIB", "routerInformationGroup"), ("GARDEROS-ROUTER-MIB", "routerDhcpIpv4SubnetGroup"), ("GARDEROS-ROUTER-MIB", "routerLqeResultGroup"), ("GARDEROS-ROUTER-MIB", "routerWwanModemGeneralGroup"), ("GARDEROS-ROUTER-MIB", "routerDslModemGeneralGroup"), ("GARDEROS-ROUTER-MIB", "routerTrapObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    routerModuleCompliance = routerModuleCompliance.setStatus('current')
routerInformationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 16108, 3, 1, 2, 1, 1)).setObjects(("GARDEROS-ROUTER-MIB", "routerName"), ("GARDEROS-ROUTER-MIB", "routerVersion"), ("GARDEROS-ROUTER-MIB", "routerConfigAge"), ("GARDEROS-ROUTER-MIB", "routerConfigType"), ("GARDEROS-ROUTER-MIB", "routerConfigServer"), ("GARDEROS-ROUTER-MIB", "routerKernel"), ("GARDEROS-ROUTER-MIB", "routerSystemMac"), ("GARDEROS-ROUTER-MIB", "routerTemperature"), ("GARDEROS-ROUTER-MIB", "routerSerial"), ("GARDEROS-ROUTER-MIB", "routerSecureBoot"), ("GARDEROS-ROUTER-MIB", "routerStartupConfigHash"), ("GARDEROS-ROUTER-MIB", "routerDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    routerInformationGroup = routerInformationGroup.setStatus('current')
routerName = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerName.setStatus('current')
routerVersion = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerVersion.setStatus('current')
routerConfigAge = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerConfigAge.setStatus('current')
routerConfigType = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerConfigType.setStatus('current')
routerConfigServer = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerConfigServer.setStatus('current')
routerKernel = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerKernel.setStatus('current')
routerSystemMac = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 7), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerSystemMac.setStatus('current')
routerTemperature = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerTemperature.setStatus('current')
routerSerial = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerSerial.setStatus('current')
routerSecureBoot = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerSecureBoot.setStatus('current')
routerStartupConfigHash = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerStartupConfigHash.setStatus('current')
routerDescription = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDescription.setStatus('current')
routerNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 16108, 3, 1, 2, 1, 2)).setObjects(("GARDEROS-ROUTER-MIB", "routerNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    routerNotificationGroup = routerNotificationGroup.setStatus('current')
routerNotification = NotificationType((1, 3, 6, 1, 4, 1, 16108, 3, 1, 0, 1)).setObjects(("GARDEROS-ROUTER-MIB", "routerName"), ("GARDEROS-ROUTER-MIB", "routerTrapSeverity"), ("GARDEROS-ROUTER-MIB", "routerTrapComponent"), ("GARDEROS-ROUTER-MIB", "routerTrapType"), ("GARDEROS-ROUTER-MIB", "routerTrapDescription"), ("GARDEROS-ROUTER-MIB", "routerTrapErrorCode"), ("GARDEROS-ROUTER-MIB", "routerTrapErrorDescription"), ("GARDEROS-ROUTER-MIB", "routerTrapSyslogSeverity"))
if mibBuilder.loadTexts: routerNotification.setStatus('current')
routerTrapObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 16108, 3, 1, 2, 1, 3)).setObjects(("GARDEROS-ROUTER-MIB", "routerTrapSeverity"), ("GARDEROS-ROUTER-MIB", "routerTrapType"), ("GARDEROS-ROUTER-MIB", "routerTrapComponent"), ("GARDEROS-ROUTER-MIB", "routerTrapDescription"), ("GARDEROS-ROUTER-MIB", "routerTrapErrorCode"), ("GARDEROS-ROUTER-MIB", "routerTrapErrorDescription"), ("GARDEROS-ROUTER-MIB", "routerTrapSyslogSeverity"), ("GARDEROS-ROUTER-MIB", "routerName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    routerTrapObjectGroup = routerTrapObjectGroup.setStatus('current')
routerTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 3, 1), RouterSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerTrapSeverity.setStatus('current')
routerTrapComponent = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 3, 2), RouterComponent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerTrapComponent.setStatus('current')
routerTrapType = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 3, 3), RouterType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerTrapType.setStatus('current')
routerTrapDescription = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerTrapDescription.setStatus('current')
routerTrapErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerTrapErrorCode.setStatus('current')
routerTrapErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerTrapErrorDescription.setStatus('current')
routerTrapSyslogSeverity = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 3, 7), RouterSyslogSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerTrapSyslogSeverity.setStatus('current')
routerDhcpIpv4SubnetTable = MibTable((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 10, 1), )
if mibBuilder.loadTexts: routerDhcpIpv4SubnetTable.setStatus('current')
routerDhcpIpv4SubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 10, 1, 1), ).setIndexNames((0, "GARDEROS-ROUTER-MIB", "routerDhcpIpv4SubnetIndex"))
if mibBuilder.loadTexts: routerDhcpIpv4SubnetEntry.setStatus('current')
routerDhcpIpv4SubnetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 16108, 3, 1, 2, 1, 1011)).setObjects(("GARDEROS-ROUTER-MIB", "routerDhcpIpv4SubnetId"), ("GARDEROS-ROUTER-MIB", "routerDhcpIpv4SubnetTotalLeases"), ("GARDEROS-ROUTER-MIB", "routerDhcpIpv4SubnetFreeLeases"), ("GARDEROS-ROUTER-MIB", "routerDhcpIpv4SubnetUsedLeases"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    routerDhcpIpv4SubnetGroup = routerDhcpIpv4SubnetGroup.setStatus('current')
routerDhcpIpv4SubnetId = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 10, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDhcpIpv4SubnetId.setStatus('current')
routerDhcpIpv4SubnetTotalLeases = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 10, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDhcpIpv4SubnetTotalLeases.setStatus('current')
routerDhcpIpv4SubnetFreeLeases = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 10, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDhcpIpv4SubnetFreeLeases.setStatus('current')
routerDhcpIpv4SubnetUsedLeases = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 10, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDhcpIpv4SubnetUsedLeases.setStatus('current')
routerDhcpIpv4SubnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 10, 1, 1, 100), Unsigned32())
if mibBuilder.loadTexts: routerDhcpIpv4SubnetIndex.setStatus('current')
routerLqeResultTable = MibTable((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 20, 1), )
if mibBuilder.loadTexts: routerLqeResultTable.setStatus('current')
routerLqeResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 20, 1, 1), ).setIndexNames((0, "GARDEROS-ROUTER-MIB", "routerLqeIndex"))
if mibBuilder.loadTexts: routerLqeResultEntry.setStatus('current')
routerLqeResultGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 16108, 3, 1, 2, 1, 1021)).setObjects(("GARDEROS-ROUTER-MIB", "routerLqeResultName"), ("GARDEROS-ROUTER-MIB", "routerLqeResultAlgorithm"), ("GARDEROS-ROUTER-MIB", "routerLqeResultInterface"), ("GARDEROS-ROUTER-MIB", "routerLqeResultLqi"), ("GARDEROS-ROUTER-MIB", "routerLqeResultLastLqi"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    routerLqeResultGroup = routerLqeResultGroup.setStatus('current')
routerLqeResultName = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 20, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLqeResultName.setStatus('current')
routerLqeResultAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 20, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLqeResultAlgorithm.setStatus('current')
routerLqeResultInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 20, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLqeResultInterface.setStatus('current')
routerLqeResultLqi = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 20, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLqeResultLqi.setStatus('current')
routerLqeResultLastLqi = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 20, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLqeResultLastLqi.setStatus('current')
routerLqeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 20, 1, 1, 100), Unsigned32())
if mibBuilder.loadTexts: routerLqeIndex.setStatus('current')
routerWwanModemGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1), )
if mibBuilder.loadTexts: routerWwanModemGeneralTable.setStatus('current')
routerWwanModemGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1), ).setIndexNames((0, "GARDEROS-ROUTER-MIB", "routerWwanIndex"))
if mibBuilder.loadTexts: routerWwanModemGeneralEntry.setStatus('current')
routerWwanModemGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 16108, 3, 1, 2, 1, 1101)).setObjects(("GARDEROS-ROUTER-MIB", "routerWwanModemName"), ("GARDEROS-ROUTER-MIB", "routerWwanModemModel"), ("GARDEROS-ROUTER-MIB", "routerWwanSupportedTech"), ("GARDEROS-ROUTER-MIB", "routerWwanDialInNumber"), ("GARDEROS-ROUTER-MIB", "routerWwanApn"), ("GARDEROS-ROUTER-MIB", "routerWwanImsi"), ("GARDEROS-ROUTER-MIB", "routerWwanSimId"), ("GARDEROS-ROUTER-MIB", "routerWwanPinState"), ("GARDEROS-ROUTER-MIB", "routerWwanNetworkTech"), ("GARDEROS-ROUTER-MIB", "routerWwanCurrentTech"), ("GARDEROS-ROUTER-MIB", "routerWwanUseTech"), ("GARDEROS-ROUTER-MIB", "routerWwanBand"), ("GARDEROS-ROUTER-MIB", "routerWwanLinkQuality"), ("GARDEROS-ROUTER-MIB", "routerWwanLinkRefSigRecQuality"), ("GARDEROS-ROUTER-MIB", "routerWwanLinkRefSigRecPower"), ("GARDEROS-ROUTER-MIB", "routerWwanLinkSigIntNoiseRatio"), ("GARDEROS-ROUTER-MIB", "routerWwanLinkEcIo"), ("GARDEROS-ROUTER-MIB", "routerWwanOperatorName"), ("GARDEROS-ROUTER-MIB", "routerWwanOperatorId"), ("GARDEROS-ROUTER-MIB", "routerWwanCellIdDec"), ("GARDEROS-ROUTER-MIB", "routerWwanCellIdHex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    routerWwanModemGeneralGroup = routerWwanModemGeneralGroup.setStatus('current')
routerWwanModemName = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanModemName.setStatus('current')
routerWwanModemModel = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanModemModel.setStatus('current')
routerWwanSupportedTech = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanSupportedTech.setStatus('current')
routerWwanDialInNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanDialInNumber.setStatus('current')
routerWwanApn = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanApn.setStatus('current')
routerWwanImsi = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanImsi.setStatus('current')
routerWwanSimId = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanSimId.setStatus('current')
routerWwanPinState = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanPinState.setStatus('current')
routerWwanNetworkTech = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanNetworkTech.setStatus('current')
routerWwanCurrentTech = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanCurrentTech.setStatus('current')
routerWwanUseTech = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanUseTech.setStatus('current')
routerWwanBand = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanBand.setStatus('current')
routerWwanLinkQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanLinkQuality.setStatus('current')
routerWwanLinkRefSigRecQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanLinkRefSigRecQuality.setStatus('current')
routerWwanLinkRefSigRecPower = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanLinkRefSigRecPower.setStatus('current')
routerWwanLinkSigIntNoiseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanLinkSigIntNoiseRatio.setStatus('current')
routerWwanLinkEcIo = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanLinkEcIo.setStatus('current')
routerWwanOperatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanOperatorName.setStatus('current')
routerWwanOperatorId = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanOperatorId.setStatus('current')
routerWwanCellIdDec = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanCellIdDec.setStatus('current')
routerWwanCellIdHex = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanCellIdHex.setStatus('current')
routerWwanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 100), Unsigned32())
if mibBuilder.loadTexts: routerWwanIndex.setStatus('current')
routerDslModemGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1), )
if mibBuilder.loadTexts: routerDslModemGeneralTable.setStatus('current')
routerDslModemGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1), ).setIndexNames((0, "GARDEROS-ROUTER-MIB", "routerDslIndex"))
if mibBuilder.loadTexts: routerDslModemGeneralEntry.setStatus('current')
routerDslModemGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 16108, 3, 1, 2, 1, 1201)).setObjects(("GARDEROS-ROUTER-MIB", "routerDslModemName"), ("GARDEROS-ROUTER-MIB", "routerDslModemModel"), ("GARDEROS-ROUTER-MIB", "routerDslModemSupportedTech"), ("GARDEROS-ROUTER-MIB", "routerDslModemFirmware"), ("GARDEROS-ROUTER-MIB", "routerDslModemStatus"), ("GARDEROS-ROUTER-MIB", "routerDslModemMode"), ("GARDEROS-ROUTER-MIB", "routerDslModemWanService"), ("GARDEROS-ROUTER-MIB", "routerDslDslamVendor"), ("GARDEROS-ROUTER-MIB", "routerDslUptime"), ("GARDEROS-ROUTER-MIB", "routerDslDownRate"), ("GARDEROS-ROUTER-MIB", "routerDslUpRate"), ("GARDEROS-ROUTER-MIB", "routerDslDownSigNoiseRatio"), ("GARDEROS-ROUTER-MIB", "routerDslUpSigNoiseRatio"), ("GARDEROS-ROUTER-MIB", "routerDslDownAttenuation"), ("GARDEROS-ROUTER-MIB", "routerDslUpAttenuation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    routerDslModemGeneralGroup = routerDslModemGeneralGroup.setStatus('current')
routerDslModemName = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslModemName.setStatus('current')
routerDslModemModel = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslModemModel.setStatus('current')
routerDslModemSupportedTech = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslModemSupportedTech.setStatus('current')
routerDslModemFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslModemFirmware.setStatus('current')
routerDslModemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslModemStatus.setStatus('current')
routerDslModemMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslModemMode.setStatus('current')
routerDslModemWanService = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslModemWanService.setStatus('current')
routerDslDslamVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslDslamVendor.setStatus('current')
routerDslUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslUptime.setStatus('current')
routerDslDownRate = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslDownRate.setStatus('current')
routerDslUpRate = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslUpRate.setStatus('current')
routerDslDownSigNoiseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslDownSigNoiseRatio.setStatus('current')
routerDslUpSigNoiseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslUpSigNoiseRatio.setStatus('current')
routerDslDownAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslDownAttenuation.setStatus('current')
routerDslUpAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslUpAttenuation.setStatus('current')
routerDslIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 100), Unsigned32())
if mibBuilder.loadTexts: routerDslIndex.setStatus('current')
mibBuilder.exportSymbols("GARDEROS-ROUTER-MIB", routerLqeResultGroup=routerLqeResultGroup, routerLqeResultLqi=routerLqeResultLqi, routerWwanLinkSigIntNoiseRatio=routerWwanLinkSigIntNoiseRatio, routerDslModemStatus=routerDslModemStatus, routerLqeResultLastLqi=routerLqeResultLastLqi, routerWwanModemGeneralGroup=routerWwanModemGeneralGroup, routerLqeResultAlgorithm=routerLqeResultAlgorithm, routerInformation=routerInformation, routerLqeResultName=routerLqeResultName, routerDslTables=routerDslTables, routerConformance=routerConformance, routerWwanModemModel=routerWwanModemModel, routerStartupConfigHash=routerStartupConfigHash, routerDescription=routerDescription, routerConfigType=routerConfigType, routerLqeIndex=routerLqeIndex, routerDslDownSigNoiseRatio=routerDslDownSigNoiseRatio, routerDslUptime=routerDslUptime, routerTrapType=routerTrapType, routerDslModemName=routerDslModemName, RouterSeverity=RouterSeverity, routerWwanModemName=routerWwanModemName, routerWwanNetworkTech=routerWwanNetworkTech, routerNotificationGroup=routerNotificationGroup, routerTrapDescription=routerTrapDescription, routerWwanLinkRefSigRecPower=routerWwanLinkRefSigRecPower, routerVersion=routerVersion, routerDslModemWanService=routerDslModemWanService, routerDhcpIpv4SubnetEntry=routerDhcpIpv4SubnetEntry, routerWwanBand=routerWwanBand, routerWwanTables=routerWwanTables, routerWwanLinkRefSigRecQuality=routerWwanLinkRefSigRecQuality, routerDhcpIpv4SubnetTable=routerDhcpIpv4SubnetTable, routerDslModemGeneralTable=routerDslModemGeneralTable, routerWwanCellIdDec=routerWwanCellIdDec, routerModuleCompliance=routerModuleCompliance, routerDslModemMode=routerDslModemMode, routerNotifications=routerNotifications, PYSNMP_MODULE_ID=router, routerConfigServer=routerConfigServer, routerLqeTables=routerLqeTables, routerLqeResultEntry=routerLqeResultEntry, routerWwanUseTech=routerWwanUseTech, routerWwanCellIdHex=routerWwanCellIdHex, routerObjects=routerObjects, routerTrapErrorCode=routerTrapErrorCode, routerSerial=routerSerial, routerLqeResultInterface=routerLqeResultInterface, routerWwanCurrentTech=routerWwanCurrentTech, routerTrapSyslogSeverity=routerTrapSyslogSeverity, routerConfigAge=routerConfigAge, routerDslModemGeneralEntry=routerDslModemGeneralEntry, routerDslModemFirmware=routerDslModemFirmware, routerWwanSimId=routerWwanSimId, routerDhcpIpv4SubnetTotalLeases=routerDhcpIpv4SubnetTotalLeases, routerDslUpSigNoiseRatio=routerDslUpSigNoiseRatio, routerDhcpIpv4SubnetId=routerDhcpIpv4SubnetId, routerWwanLinkQuality=routerWwanLinkQuality, routerKernel=routerKernel, routerTables=routerTables, routerTrapSeverity=routerTrapSeverity, RouterComponent=RouterComponent, routerName=routerName, routerDslUpAttenuation=routerDslUpAttenuation, routerInformationGroup=routerInformationGroup, routerTrapComponent=routerTrapComponent, routerWwanOperatorId=routerWwanOperatorId, routerDhcpIpv4SubnetUsedLeases=routerDhcpIpv4SubnetUsedLeases, routerWwanApn=routerWwanApn, routerSystemMac=routerSystemMac, routerGroups=routerGroups, router=router, routerTrapObjectGroup=routerTrapObjectGroup, routerDslDownAttenuation=routerDslDownAttenuation, routerDslIndex=routerDslIndex, routerWwanOperatorName=routerWwanOperatorName, routerWwanIndex=routerWwanIndex, routerTrap=routerTrap, routerTemperature=routerTemperature, routerDhcpIpv4SubnetIndex=routerDhcpIpv4SubnetIndex, RouterType=RouterType, routerCompliances=routerCompliances, routerDhcpIpv4SubnetFreeLeases=routerDhcpIpv4SubnetFreeLeases, routerWwanDialInNumber=routerWwanDialInNumber, routerDslModemGeneralGroup=routerDslModemGeneralGroup, routerWwanModemGeneralEntry=routerWwanModemGeneralEntry, routerDslModemModel=routerDslModemModel, routerLqeResultTable=routerLqeResultTable, routerWwanLinkEcIo=routerWwanLinkEcIo, routerDhcpIpv4Tables=routerDhcpIpv4Tables, routerWwanModemGeneralTable=routerWwanModemGeneralTable, routerDslUpRate=routerDslUpRate, RouterSyslogSeverity=RouterSyslogSeverity, routerWwanPinState=routerWwanPinState, routerTrapErrorDescription=routerTrapErrorDescription, routerNotification=routerNotification, routerDslDslamVendor=routerDslDslamVendor, routerDslDownRate=routerDslDownRate, routerWwanSupportedTech=routerWwanSupportedTech, routerSecureBoot=routerSecureBoot, routerMIB=routerMIB, routerWwanImsi=routerWwanImsi, routerDslModemSupportedTech=routerDslModemSupportedTech, routerDhcpIpv4SubnetGroup=routerDhcpIpv4SubnetGroup)
