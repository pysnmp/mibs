#
# PySNMP MIB module DANTHERM-COOLING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/dantherm/DANTHERM-COOLING-MIB
# Produced by pysmi-1.1.12 at Mon Jul  1 11:11:22 2024
# On host fv-az1493-704 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, TimeTicks, NotificationType, iso, Integer32, Gauge32, Unsigned32, enterprises, ObjectIdentity, Counter64, Counter32, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "NotificationType", "iso", "Integer32", "Gauge32", "Unsigned32", "enterprises", "ObjectIdentity", "Counter64", "Counter32", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
danthermCooling = MibIdentifier((1, 3, 6, 1, 4, 1, 46651))
controllerCC3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1))
systemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 1))
highlevelControl = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 2))
fan1Config = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 3))
fan2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 4))
damper1Config = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 5))
damper2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 6))
aircon1Config = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 7))
aircon2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 8))
heaterConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 9))
humidityConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 10))
systemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 11))
alarmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 12))
nightModeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 13))
networkConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 14))
trapError = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 15))
onBoardTempr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: onBoardTempr.setStatus('mandatory')
roomTempr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: roomTempr.setStatus('mandatory')
hotSpotTempr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotSpotTempr.setStatus('mandatory')
outdoor1Tempr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outdoor1Tempr.setStatus('mandatory')
outdoor2Tempr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outdoor2Tempr.setStatus('mandatory')
shelterTempr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelterTempr.setStatus('mandatory')
outdoorCombinedTempr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outdoorCombinedTempr.setStatus('mandatory')
fan1RPM = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fan1RPM.setStatus('mandatory')
fan2RPM = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fan2RPM.setStatus('mandatory')
fan1SpeedPercentage = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fan1SpeedPercentage.setStatus('mandatory')
fan2SpeedPercentage = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fan2SpeedPercentage.setStatus('mandatory')
damper1Position = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: damper1Position.setStatus('mandatory')
damper2Position = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: damper2Position.setStatus('mandatory')
humidity = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidity.setStatus('mandatory')
dewpoint = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dewpoint.setStatus('mandatory')
atmosphericPressure = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmosphericPressure.setStatus('mandatory')
flowPressure = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowPressure.setStatus('mandatory')
fan1Status = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fan1Status.setStatus('mandatory')
fan2Status = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fan2Status.setStatus('mandatory')
damper1Status = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: damper1Status.setStatus('mandatory')
damper2Status = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: damper2Status.setStatus('mandatory')
aircond1Status = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aircond1Status.setStatus('mandatory')
aircond2Status = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aircond2Status.setStatus('mandatory')
heaterStatus = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: heaterStatus.setStatus('mandatory')
shelter1Status = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelter1Status.setStatus('mandatory')
shelter2Status = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelter2Status.setStatus('mandatory')
shelter1Mode = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelter1Mode.setStatus('mandatory')
shelter2Mode = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelter2Mode.setStatus('mandatory')
shelter1Setpoint = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelter1Setpoint.setStatus('mandatory')
shelter2Setpoint = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelter2Setpoint.setStatus('mandatory')
errorStatus = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 33554432))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorStatus.setStatus('mandatory')
maskedErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 33554432))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maskedErrorStatus.setStatus('mandatory')
voltage = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltage.setStatus('mandatory')
digitalInputStatus = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInputStatus.setStatus('mandatory')
alarmDriveStatus = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDriveStatus.setStatus('mandatory')
fan1OpertdurHour = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fan1OpertdurHour.setStatus('mandatory')
fan1OpertdurMin = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fan1OpertdurMin.setStatus('mandatory')
fan2OpertdurHour = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fan2OpertdurHour.setStatus('mandatory')
fan2OpertdurMin = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fan2OpertdurMin.setStatus('mandatory')
aircon1OpertdurHour = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aircon1OpertdurHour.setStatus('mandatory')
aircon1OpertdurMin = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aircon1OpertdurMin.setStatus('mandatory')
aircon2OpertdurHour = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aircon2OpertdurHour.setStatus('mandatory')
aircon2OpertdurMin = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aircon2OpertdurMin.setStatus('mandatory')
heaterOpertdurHour = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: heaterOpertdurHour.setStatus('mandatory')
heaterOpertdurMin = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: heaterOpertdurMin.setStatus('mandatory')
ccSN = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 46), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSN.setStatus('mandatory')
fanbox1SN = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 47), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanbox1SN.setStatus('mandatory')
fanbox2SN = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 48), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanbox2SN.setStatus('mandatory')
aircond1SN = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 49), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aircond1SN.setStatus('mandatory')
aircond2SN = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 50), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aircond2SN.setStatus('mandatory')
fwVersion = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 51), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwVersion.setStatus('mandatory')
coolSetpointZone1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolSetpointZone1.setStatus('mandatory')
coolSetpointZone2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolSetpointZone2.setStatus('mandatory')
heaterSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: heaterSetpoint.setStatus('mandatory')
backupConfig = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupConfig.setStatus('mandatory')
restoreConfig = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restoreConfig.setStatus('mandatory')
systemReset = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemReset.setStatus('mandatory')
year = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2015, 2099))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: year.setStatus('mandatory')
month = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: month.setStatus('mandatory')
date = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: date.setStatus('mandatory')
hour = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hour.setStatus('mandatory')
minute = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minute.setStatus('mandatory')
saveReloadConff1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConff1.setStatus('mandatory')
offTemprf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: offTemprf1.setStatus('mandatory')
idleOnTemprf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleOnTemprf1.setStatus('mandatory')
idleEntryTemprf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleEntryTemprf1.setStatus('mandatory')
midPoint1Temprf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: midPoint1Temprf1.setStatus('mandatory')
setPointTemprf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPointTemprf1.setStatus('mandatory')
midPoint2Temprf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: midPoint2Temprf1.setStatus('mandatory')
highSpeedTemprf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highSpeedTemprf1.setStatus('mandatory')
extendHighSpeedEntryTemprf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendHighSpeedEntryTemprf1.setStatus('mandatory')
extendHighSpeedExitTemprf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendHighSpeedExitTemprf1.setStatus('mandatory')
boostEntryTemprf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boostEntryTemprf1.setStatus('mandatory')
boostExitTemprf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boostExitTemprf1.setStatus('mandatory')
idleRPMf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleRPMf1.setStatus('mandatory')
midPointRPMf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: midPointRPMf1.setStatus('mandatory')
highSpeedRPMf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highSpeedRPMf1.setStatus('mandatory')
extendHighSpeedRPMf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendHighSpeedRPMf1.setStatus('mandatory')
idleDutyCyclef1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleDutyCyclef1.setStatus('mandatory')
midDutyCyclef1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: midDutyCyclef1.setStatus('mandatory')
highSpeedDutyCyclef1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highSpeedDutyCyclef1.setStatus('mandatory')
extendHighSpeedDutyCyclef1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendHighSpeedDutyCyclef1.setStatus('mandatory')
boostDutyCyclef1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boostDutyCyclef1.setStatus('mandatory')
deadBandRPMf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deadBandRPMf1.setStatus('mandatory')
overrideDigi1f1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi1f1.setStatus('mandatory')
overrideDigi2f1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi2f1.setStatus('mandatory')
overrideDigi3f1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi3f1.setStatus('mandatory')
overrideSensorfailf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideSensorfailf1.setStatus('mandatory')
sensorSelectf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSelectf1.setStatus('mandatory')
tachoPulseperrotationf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tachoPulseperrotationf1.setStatus('mandatory')
closedLoopenablef1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: closedLoopenablef1.setStatus('mandatory')
controlTypef1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlTypef1.setStatus('mandatory')
enablef1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablef1.setStatus('mandatory')
saveReloadConff2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConff2.setStatus('mandatory')
offTemprf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: offTemprf2.setStatus('mandatory')
idleOnTemprf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleOnTemprf2.setStatus('mandatory')
idleEntryTemprf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleEntryTemprf2.setStatus('mandatory')
midPoint1Temprf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: midPoint1Temprf2.setStatus('mandatory')
setPointTemprf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPointTemprf2.setStatus('mandatory')
midPoint2Temprf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: midPoint2Temprf2.setStatus('mandatory')
highSpeedTemprf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highSpeedTemprf2.setStatus('mandatory')
extendHighSpeedEntryTemprf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendHighSpeedEntryTemprf2.setStatus('mandatory')
extendHighSpeedExitTemprf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendHighSpeedExitTemprf2.setStatus('mandatory')
boostEntryTemprf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boostEntryTemprf2.setStatus('mandatory')
boostExitTemprf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boostExitTemprf2.setStatus('mandatory')
idleRPMf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleRPMf2.setStatus('mandatory')
midPointRPMf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: midPointRPMf2.setStatus('mandatory')
highSpeedRPMf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highSpeedRPMf2.setStatus('mandatory')
extendHighSpeedRPMf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendHighSpeedRPMf2.setStatus('mandatory')
idleDutyCyclef2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleDutyCyclef2.setStatus('mandatory')
midDutyCyclef2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: midDutyCyclef2.setStatus('mandatory')
highSpeedDutyCyclef2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highSpeedDutyCyclef2.setStatus('mandatory')
extendHighSpeedDutyCyclef2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendHighSpeedDutyCyclef2.setStatus('mandatory')
boostDutyCyclef2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boostDutyCyclef2.setStatus('mandatory')
deadBandRPMf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deadBandRPMf2.setStatus('mandatory')
overrideDigi1f2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi1f2.setStatus('mandatory')
overrideDigi2f2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi2f2.setStatus('mandatory')
overrideDigi3f2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi3f2.setStatus('mandatory')
overrideSensorfailf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideSensorfailf2.setStatus('mandatory')
sensorSelectf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSelectf2.setStatus('mandatory')
tachoPulseperrotationf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tachoPulseperrotationf2.setStatus('mandatory')
closedLoopenablef2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: closedLoopenablef2.setStatus('mandatory')
controlTypef2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlTypef2.setStatus('mandatory')
enablef2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablef2.setStatus('mandatory')
saveReloadConfd1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConfd1.setStatus('mandatory')
lowercloseTemprd1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowercloseTemprd1.setStatus('mandatory')
setPointd1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPointd1.setStatus('mandatory')
upperOpentempd1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upperOpentempd1.setStatus('mandatory')
upperClosetempd1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upperClosetempd1.setStatus('mandatory')
emgncyClosetempd1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emgncyClosetempd1.setStatus('mandatory')
emgncyopentempd1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emgncyopentempd1.setStatus('mandatory')
overrideDigi1d1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi1d1.setStatus('mandatory')
overrideDigi2d1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi2d1.setStatus('mandatory')
overrideDigi3d1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi3d1.setStatus('mandatory')
overrideSensorFaild1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideSensorFaild1.setStatus('mandatory')
sensSelectd1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensSelectd1.setStatus('mandatory')
runDurationd1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: runDurationd1.setStatus('mandatory')
enabled1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enabled1.setStatus('mandatory')
saveReloadConfd2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConfd2.setStatus('mandatory')
lowercloseTemprd2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowercloseTemprd2.setStatus('mandatory')
setPointd2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPointd2.setStatus('mandatory')
upperOpentempd2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upperOpentempd2.setStatus('mandatory')
upperClosetempd2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upperClosetempd2.setStatus('mandatory')
emgncyClosetempd2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emgncyClosetempd2.setStatus('mandatory')
emgncyopentempd2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emgncyopentempd2.setStatus('mandatory')
overrideDigi1d2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi1d2.setStatus('mandatory')
overrideDigi2d2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi2d2.setStatus('mandatory')
overrideDigi3d2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi3d2.setStatus('mandatory')
overrideSensorFaild2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideSensorFaild2.setStatus('mandatory')
sensSelectd2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensSelectd2.setStatus('mandatory')
runDurationd2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: runDurationd2.setStatus('mandatory')
enabled2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enabled2.setStatus('mandatory')
saveReloadConfac1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConfac1.setStatus('mandatory')
oNTemprac1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oNTemprac1.setStatus('mandatory')
oFFTemprac1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oFFTemprac1.setStatus('mandatory')
overrideDigi1ac1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi1ac1.setStatus('mandatory')
overrideDigi2ac1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi2ac1.setStatus('mandatory')
overrideDigi3ac1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi3ac1.setStatus('mandatory')
overrideSensorFailac1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideSensorFailac1.setStatus('mandatory')
sensSelectac1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensSelectac1.setStatus('mandatory')
minimumRunDurationac1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 7, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minimumRunDurationac1.setStatus('mandatory')
restartTimeoutac1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 7, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartTimeoutac1.setStatus('mandatory')
enableac1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 7, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableac1.setStatus('mandatory')
saveReloadConfac2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConfac2.setStatus('mandatory')
onTemprac2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onTemprac2.setStatus('mandatory')
offTemprac2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: offTemprac2.setStatus('mandatory')
overrideDigi1ac2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi1ac2.setStatus('mandatory')
overrideDigi2ac2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi2ac2.setStatus('mandatory')
overrideDigi3ac2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi3ac2.setStatus('mandatory')
overrideSensorFailac2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 8, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideSensorFailac2.setStatus('mandatory')
sensSelectac2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 8, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensSelectac2.setStatus('mandatory')
minimumRunDurationac2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 8, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minimumRunDurationac2.setStatus('mandatory')
restartTimeoutac2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 8, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartTimeoutac2.setStatus('mandatory')
enableac2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 8, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableac2.setStatus('mandatory')
saveReloadConfhtr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConfhtr.setStatus('mandatory')
onTemprhtr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onTemprhtr.setStatus('mandatory')
offTemprhtr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: offTemprhtr.setStatus('mandatory')
overrideDigi1htr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi1htr.setStatus('mandatory')
overrideDigi2htr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi2htr.setStatus('mandatory')
overrideDigi3htr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi3htr.setStatus('mandatory')
overrideSensorFailhtr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideSensorFailhtr.setStatus('mandatory')
sensSelecthtr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 9, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensSelecthtr.setStatus('mandatory')
enablehtr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 9, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablehtr.setStatus('mandatory')
saveReloadConfhum = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConfhum.setStatus('mandatory')
rhEntryhum = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rhEntryhum.setStatus('mandatory')
rhExithum = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rhExithum.setStatus('mandatory')
coolingmodehum = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingmodehum.setStatus('mandatory')
temprsetpoffsethum = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 10, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temprsetpoffsethum.setStatus('mandatory')
rhSensPositionhum = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 10, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rhSensPositionhum.setStatus('mandatory')
enablehum = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablehum.setStatus('mandatory')
saveReloadConfsysc = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConfsysc.setStatus('mandatory')
vdcLowEntrysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(18, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vdcLowEntrysys.setStatus('mandatory')
vdcLowExitsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(18, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vdcLowExitsys.setStatus('mandatory')
vdcHighEntrysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(18, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vdcHighEntrysys.setStatus('mandatory')
vdcHighExitsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(18, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vdcHighExitsys.setStatus('mandatory')
temprLowlimitsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temprLowlimitsys.setStatus('mandatory')
temprHighlimit1sys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temprHighlimit1sys.setStatus('mandatory')
temprHighlimit2sys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temprHighlimit2sys.setStatus('mandatory')
temprHighlimit3sys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temprHighlimit3sys.setStatus('mandatory')
temprlimithyssys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temprlimithyssys.setStatus('mandatory')
rhLowlimitsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rhLowlimitsys.setStatus('mandatory')
rhHighlimitsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rhHighlimitsys.setStatus('mandatory')
flowpresslimit1sys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowpresslimit1sys.setStatus('mandatory')
flowpresslimit2sys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowpresslimit2sys.setStatus('mandatory')
flowpresshyssys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowpresshyssys.setStatus('mandatory')
coolingzonessys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingzonessys.setStatus('mandatory')
coolingModesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingModesys.setStatus('mandatory')
negCoolingDeltaOverridesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: negCoolingDeltaOverridesys.setStatus('mandatory')
negCoolingDeltaHyssys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: negCoolingDeltaHyssys.setStatus('mandatory')
coolingDeltatempsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingDeltatempsys.setStatus('mandatory')
shelterTemprsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelterTemprsys.setStatus('mandatory')
acleadlagsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acleadlagsys.setStatus('mandatory')
coolingModeXzonesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingModeXzonesys.setStatus('mandatory')
negCoolingDeltaOverrideXzonesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: negCoolingDeltaOverrideXzonesys.setStatus('mandatory')
negCoolingDeltaHysXzonesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: negCoolingDeltaHysXzonesys.setStatus('mandatory')
coolingDeltatempXzonesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingDeltatempXzonesys.setStatus('mandatory')
fan1Zonesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fan1Zonesys.setStatus('mandatory')
fan2Zonesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fan2Zonesys.setStatus('mandatory')
ac1Zonesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ac1Zonesys.setStatus('mandatory')
ac2Zonesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ac2Zonesys.setStatus('mandatory')
damper1Zonesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: damper1Zonesys.setStatus('mandatory')
damper2Zonesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: damper2Zonesys.setStatus('mandatory')
heaterZonesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: heaterZonesys.setStatus('mandatory')
statusLogsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statusLogsys.setStatus('mandatory')
logintervalsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logintervalsys.setStatus('mandatory')
alarm1NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm1NONCsys.setStatus('mandatory')
alarm2NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm2NONCsys.setStatus('mandatory')
alarm3NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm3NONCsys.setStatus('mandatory')
alarm4NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm4NONCsys.setStatus('mandatory')
alarm5NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm5NONCsys.setStatus('mandatory')
alarm6NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm6NONCsys.setStatus('mandatory')
alarm7NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm7NONCsys.setStatus('mandatory')
alarm8NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm8NONCsys.setStatus('mandatory')
alarm9NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm9NONCsys.setStatus('mandatory')
alarm10NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm10NONCsys.setStatus('mandatory')
alarm1Delaysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm1Delaysys.setStatus('mandatory')
alarm2Delaysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm2Delaysys.setStatus('mandatory')
alarm3Delaysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm3Delaysys.setStatus('mandatory')
alarm4Delaysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm4Delaysys.setStatus('mandatory')
alarm5Delaysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm5Delaysys.setStatus('mandatory')
alarm6Delaysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm6Delaysys.setStatus('mandatory')
alarm7Delaysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm7Delaysys.setStatus('mandatory')
alarm8Delaysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm8Delaysys.setStatus('mandatory')
alarm9Delaysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm9Delaysys.setStatus('mandatory')
alarm10Delaysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm10Delaysys.setStatus('mandatory')
ac1NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ac1NONCsys.setStatus('mandatory')
ac2NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ac2NONCsys.setStatus('mandatory')
dig1NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dig1NONCsys.setStatus('mandatory')
dig2NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dig2NONCsys.setStatus('mandatory')
dig3NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dig3NONCsys.setStatus('mandatory')
dig2funcoverridesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dig2funcoverridesys.setStatus('mandatory')
dig3funcoverridesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dig3funcoverridesys.setStatus('mandatory')
dig2offsetsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dig2offsetsys.setStatus('mandatory')
dig3offsetsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dig3offsetsys.setStatus('mandatory')
dig2trigModesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dig2trigModesys.setStatus('mandatory')
dig3TrigModesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dig3TrigModesys.setStatus('mandatory')
filterGuard1NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterGuard1NONCsys.setStatus('mandatory')
filterGuard2NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterGuard2NONCsys.setStatus('mandatory')
temprUnitsCFsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temprUnitsCFsys.setStatus('mandatory')
languageEnglishsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: languageEnglishsys.setStatus('mandatory')
saveReloadConfAlm = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConfAlm.setStatus('mandatory')
alarm1mask = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 12, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 33554432))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm1mask.setStatus('mandatory')
alarm2mask = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 12, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 33554432))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm2mask.setStatus('mandatory')
alarm3mask = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 12, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm3mask.setStatus('mandatory')
alarm4mask = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 12, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm4mask.setStatus('mandatory')
alarm5mask = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 12, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm5mask.setStatus('mandatory')
alarm6mask = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 12, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm6mask.setStatus('mandatory')
alarm7mask = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 12, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm7mask.setStatus('mandatory')
alarm8mask = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 12, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm8mask.setStatus('mandatory')
alarm9mask = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 12, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm9mask.setStatus('mandatory')
alarm10mask = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 12, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm10mask.setStatus('mandatory')
saveReloadConfNm = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 13, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConfNm.setStatus('mandatory')
starttimeHournm = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starttimeHournm.setStatus('mandatory')
startTimeMinutesnm = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startTimeMinutesnm.setStatus('mandatory')
endTimeHournm = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 13, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endTimeHournm.setStatus('mandatory')
endTimeMinutesnm = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 13, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endTimeMinutesnm.setStatus('mandatory')
fanMaxRPMnm = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 13, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanMaxRPMnm.setStatus('mandatory')
setPointOffsetnm = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 13, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPointOffsetnm.setStatus('mandatory')
coolingModenm = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 13, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingModenm.setStatus('mandatory')
enablenm = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 13, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablenm.setStatus('mandatory')
saveReloadConfNW = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConfNW.setStatus('mandatory')
dhcpenable = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpenable.setStatus('mandatory')
ipaddr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipaddr.setStatus('mandatory')
subnetmask = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetmask.setStatus('mandatory')
gatewayIPaddr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayIPaddr.setStatus('mandatory')
ntpIPaddr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpIPaddr.setStatus('mandatory')
snmpPort = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPort.setStatus('mandatory')
trapServer1IPaddr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServer1IPaddr.setStatus('mandatory')
trapServer1port = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServer1port.setStatus('mandatory')
trapServer2IPaddr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServer2IPaddr.setStatus('mandatory')
trapServer2port = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServer2port.setStatus('mandatory')
trapServer3IPaddr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServer3IPaddr.setStatus('mandatory')
trapServer3port = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServer3port.setStatus('mandatory')
snmpCommunity = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunity.setStatus('mandatory')
hostName = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostName.setStatus('mandatory')
errorNumber = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("VoltageLow", 1), ("VoltageHigh", 2), ("TemprLow", 3), ("TemprLimit1", 4), ("TemprLimit2", 5), ("TemprLimit3", 6), ("HumidLow", 7), ("HumidHigh", 8), ("FltrPressure1", 9), ("FltPressure2", 10), ("Fan1", 11), ("Fan2", 12), ("OnboardSens", 13), ("RoomSens", 14), ("HotspotSens", 15), ("Ambient1Sens", 16), ("Ambient2Sens", 17), ("Dig1IP", 18), ("Dig2IP", 19), ("Dig3IP", 20), ("FilterIP1", 21), ("FilterIP2", 22), ("Network", 23), ("Intstorage", 24), ("SDCard", 25))))
if mibBuilder.loadTexts: errorNumber.setStatus('mandatory')
status = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("ALARMset", 1), ("ALARMclear", 0))))
if mibBuilder.loadTexts: status.setStatus('mandatory')
value = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 15, 3), OctetString())
if mibBuilder.loadTexts: value.setStatus('mandatory')
info = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 15, 4), OctetString())
if mibBuilder.loadTexts: info.setStatus('mandatory')
cc3000Trap = NotificationType((1, 3, 6, 1, 4, 1, 46651) + (0,1)).setObjects(("DANTHERM-COOLING-MIB", "hostName"), ("DANTHERM-COOLING-MIB", "errorNumber"), ("DANTHERM-COOLING-MIB", "status"), ("DANTHERM-COOLING-MIB", "value"), ("DANTHERM-COOLING-MIB", "info"))
mibBuilder.exportSymbols("DANTHERM-COOLING-MIB", deadBandRPMf2=deadBandRPMf2, humidity=humidity, overrideDigi2f2=overrideDigi2f2, saveReloadConfd2=saveReloadConfd2, subnetmask=subnetmask, overrideSensorFaild1=overrideSensorFaild1, voltage=voltage, aircond1SN=aircond1SN, highSpeedRPMf2=highSpeedRPMf2, damper1Config=damper1Config, overrideDigi3ac1=overrideDigi3ac1, filterGuard1NONCsys=filterGuard1NONCsys, coolSetpointZone1=coolSetpointZone1, boostDutyCyclef2=boostDutyCyclef2, saveReloadConfac2=saveReloadConfac2, tachoPulseperrotationf2=tachoPulseperrotationf2, alarm8NONCsys=alarm8NONCsys, onTemprac2=onTemprac2, overrideDigi3f1=overrideDigi3f1, overrideSensorFailhtr=overrideSensorFailhtr, roomTempr=roomTempr, aircond1Status=aircond1Status, deadBandRPMf1=deadBandRPMf1, digitalInputStatus=digitalInputStatus, enablehum=enablehum, onBoardTempr=onBoardTempr, alarm1Delaysys=alarm1Delaysys, snmpCommunity=snmpCommunity, saveReloadConfsysc=saveReloadConfsysc, alarm4NONCsys=alarm4NONCsys, sensSelecthtr=sensSelecthtr, temprHighlimit3sys=temprHighlimit3sys, overrideDigi3ac2=overrideDigi3ac2, negCoolingDeltaHyssys=negCoolingDeltaHyssys, enabled2=enabled2, dhcpenable=dhcpenable, extendHighSpeedRPMf1=extendHighSpeedRPMf1, highSpeedTemprf2=highSpeedTemprf2, info=info, highSpeedDutyCyclef1=highSpeedDutyCyclef1, alarm10mask=alarm10mask, coolingModeXzonesys=coolingModeXzonesys, heaterSetpoint=heaterSetpoint, logintervalsys=logintervalsys, offTemprac2=offTemprac2, month=month, offTemprhtr=offTemprhtr, alarm3Delaysys=alarm3Delaysys, gatewayIPaddr=gatewayIPaddr, aircon2Config=aircon2Config, startTimeMinutesnm=startTimeMinutesnm, extendHighSpeedDutyCyclef2=extendHighSpeedDutyCyclef2, coolingDeltatempsys=coolingDeltatempsys, alarm9Delaysys=alarm9Delaysys, saveReloadConff1=saveReloadConff1, sensorSelectf2=sensorSelectf2, enabled1=enabled1, highSpeedTemprf1=highSpeedTemprf1, overrideDigi1ac2=overrideDigi1ac2, saveReloadConfhum=saveReloadConfhum, ccSN=ccSN, temprLowlimitsys=temprLowlimitsys, heaterStatus=heaterStatus, fanbox1SN=fanbox1SN, backupConfig=backupConfig, ipaddr=ipaddr, setPointd2=setPointd2, alarm4Delaysys=alarm4Delaysys, sensorSelectf1=sensorSelectf1, date=date, sensSelectac2=sensSelectac2, flowpresslimit1sys=flowpresslimit1sys, idleOnTemprf1=idleOnTemprf1, fan2SpeedPercentage=fan2SpeedPercentage, negCoolingDeltaHysXzonesys=negCoolingDeltaHysXzonesys, restartTimeoutac2=restartTimeoutac2, extendHighSpeedExitTemprf2=extendHighSpeedExitTemprf2, overrideSensorFailac1=overrideSensorFailac1, aircon1Config=aircon1Config, outdoor1Tempr=outdoor1Tempr, idleEntryTemprf1=idleEntryTemprf1, shelter1Status=shelter1Status, damper1Status=damper1Status, saveReloadConfhtr=saveReloadConfhtr, setPointTemprf2=setPointTemprf2, heaterOpertdurMin=heaterOpertdurMin, fanMaxRPMnm=fanMaxRPMnm, hostName=hostName, temprlimithyssys=temprlimithyssys, emgncyClosetempd2=emgncyClosetempd2, negCoolingDeltaOverridesys=negCoolingDeltaOverridesys, overrideDigi3d1=overrideDigi3d1, aircond2SN=aircond2SN, heaterZonesys=heaterZonesys, midPointRPMf2=midPointRPMf2, rhExithum=rhExithum, emgncyopentempd1=emgncyopentempd1, minimumRunDurationac2=minimumRunDurationac2, heaterOpertdurHour=heaterOpertdurHour, snmpPort=snmpPort, coolingModenm=coolingModenm, alarm5mask=alarm5mask, alarm6mask=alarm6mask, dig1NONCsys=dig1NONCsys, trapServer3IPaddr=trapServer3IPaddr, alarm5NONCsys=alarm5NONCsys, shelter1Setpoint=shelter1Setpoint, midDutyCyclef2=midDutyCyclef2, fan2Zonesys=fan2Zonesys, overrideDigi2ac1=overrideDigi2ac1, trapServer2IPaddr=trapServer2IPaddr, enableac2=enableac2, overrideDigi3d2=overrideDigi3d2, temprUnitsCFsys=temprUnitsCFsys, emgncyClosetempd1=emgncyClosetempd1, upperOpentempd1=upperOpentempd1, trapServer1IPaddr=trapServer1IPaddr, alarm1NONCsys=alarm1NONCsys, idleEntryTemprf2=idleEntryTemprf2, systemConfig=systemConfig, saveReloadConfac1=saveReloadConfac1, shelterTemprsys=shelterTemprsys, alarm2NONCsys=alarm2NONCsys, boostDutyCyclef1=boostDutyCyclef1, upperClosetempd2=upperClosetempd2, setPointOffsetnm=setPointOffsetnm, overrideDigi1htr=overrideDigi1htr, alarm7mask=alarm7mask, extendHighSpeedDutyCyclef1=extendHighSpeedDutyCyclef1, trapError=trapError, boostEntryTemprf2=boostEntryTemprf2, rhHighlimitsys=rhHighlimitsys, dig3funcoverridesys=dig3funcoverridesys, flowPressure=flowPressure, offTemprf1=offTemprf1, fan1SpeedPercentage=fan1SpeedPercentage, maskedErrorStatus=maskedErrorStatus, enablef1=enablef1, shelter2Mode=shelter2Mode, negCoolingDeltaOverrideXzonesys=negCoolingDeltaOverrideXzonesys, rhSensPositionhum=rhSensPositionhum, boostExitTemprf2=boostExitTemprf2, sensSelectd2=sensSelectd2, danthermCooling=danthermCooling, alarm4mask=alarm4mask, ntpIPaddr=ntpIPaddr, dig2offsetsys=dig2offsetsys, overrideDigi2d2=overrideDigi2d2, midPoint2Temprf2=midPoint2Temprf2, statusLogsys=statusLogsys, alarm2Delaysys=alarm2Delaysys, midPointRPMf1=midPointRPMf1, dewpoint=dewpoint, coolingDeltatempXzonesys=coolingDeltatempXzonesys, alarm7Delaysys=alarm7Delaysys, languageEnglishsys=languageEnglishsys, runDurationd2=runDurationd2, endTimeMinutesnm=endTimeMinutesnm, aircon2OpertdurMin=aircon2OpertdurMin, midPoint1Temprf2=midPoint1Temprf2, shelterTempr=shelterTempr, upperOpentempd2=upperOpentempd2, shelter2Setpoint=shelter2Setpoint, ac2Zonesys=ac2Zonesys, damper2Position=damper2Position, enablehtr=enablehtr, damper2Zonesys=damper2Zonesys, vdcHighExitsys=vdcHighExitsys, controllerCC3000=controllerCC3000, dig2NONCsys=dig2NONCsys, overrideSensorfailf1=overrideSensorfailf1, coolingmodehum=coolingmodehum, starttimeHournm=starttimeHournm, idleOnTemprf2=idleOnTemprf2, networkConfig=networkConfig, dig2funcoverridesys=dig2funcoverridesys, trapServer1port=trapServer1port, damper1Zonesys=damper1Zonesys, highlevelControl=highlevelControl, alarm3NONCsys=alarm3NONCsys, sensSelectac1=sensSelectac1, value=value, overrideDigi2htr=overrideDigi2htr, fan1OpertdurMin=fan1OpertdurMin, alarmDriveStatus=alarmDriveStatus, fan1RPM=fan1RPM, sensSelectd1=sensSelectd1, rhEntryhum=rhEntryhum, enablef2=enablef2, ac2NONCsys=ac2NONCsys, errorNumber=errorNumber, idleRPMf2=idleRPMf2, systemStatus=systemStatus, saveReloadConfNW=saveReloadConfNW, saveReloadConfAlm=saveReloadConfAlm, trapServer3port=trapServer3port, ac1Zonesys=ac1Zonesys, overrideDigi1f1=overrideDigi1f1, enableac1=enableac1, overrideSensorFailac2=overrideSensorFailac2, alarm1mask=alarm1mask, shelter2Status=shelter2Status, nightModeConfig=nightModeConfig, rhLowlimitsys=rhLowlimitsys, filterGuard2NONCsys=filterGuard2NONCsys, aircon2OpertdurHour=aircon2OpertdurHour, errorStatus=errorStatus, endTimeHournm=endTimeHournm, highSpeedRPMf1=highSpeedRPMf1, boostEntryTemprf1=boostEntryTemprf1, flowpresslimit2sys=flowpresslimit2sys, closedLoopenablef1=closedLoopenablef1, outdoor2Tempr=outdoor2Tempr, overrideDigi2ac2=overrideDigi2ac2, tachoPulseperrotationf1=tachoPulseperrotationf1, temprsetpoffsethum=temprsetpoffsethum, alarm5Delaysys=alarm5Delaysys, setPointd1=setPointd1, systemReset=systemReset, dig3TrigModesys=dig3TrigModesys, alarm10Delaysys=alarm10Delaysys, saveReloadConff2=saveReloadConff2, alarm2mask=alarm2mask, fan2OpertdurMin=fan2OpertdurMin, trapServer2port=trapServer2port, alarm8mask=alarm8mask, boostExitTemprf1=boostExitTemprf1, flowpresshyssys=flowpresshyssys, fwVersion=fwVersion, fan2OpertdurHour=fan2OpertdurHour, dig2trigModesys=dig2trigModesys, upperClosetempd1=upperClosetempd1, highSpeedDutyCyclef2=highSpeedDutyCyclef2, cc3000Trap=cc3000Trap, extendHighSpeedExitTemprf1=extendHighSpeedExitTemprf1, saveReloadConfNm=saveReloadConfNm, fan2RPM=fan2RPM, ac1NONCsys=ac1NONCsys, setPointTemprf1=setPointTemprf1, overrideSensorfailf2=overrideSensorfailf2, overrideDigi2f1=overrideDigi2f1, damper2Status=damper2Status, alarm9mask=alarm9mask, lowercloseTemprd2=lowercloseTemprd2, alarm6NONCsys=alarm6NONCsys, extendHighSpeedEntryTemprf2=extendHighSpeedEntryTemprf2, heaterConfig=heaterConfig, restartTimeoutac1=restartTimeoutac1, vdcLowEntrysys=vdcLowEntrysys, alarm3mask=alarm3mask, lowercloseTemprd1=lowercloseTemprd1, minute=minute, oNTemprac1=oNTemprac1, shelter1Mode=shelter1Mode)
mibBuilder.exportSymbols("DANTHERM-COOLING-MIB", idleDutyCyclef2=idleDutyCyclef2, overrideDigi1ac1=overrideDigi1ac1, humidityConfig=humidityConfig, year=year, fan1OpertdurHour=fan1OpertdurHour, midPoint2Temprf1=midPoint2Temprf1, minimumRunDurationac1=minimumRunDurationac1, closedLoopenablef2=closedLoopenablef2, hour=hour, saveReloadConfd1=saveReloadConfd1, fan2Status=fan2Status, fan2Config=fan2Config, controlTypef2=controlTypef2, coolingzonessys=coolingzonessys, alarm6Delaysys=alarm6Delaysys, aircon1OpertdurMin=aircon1OpertdurMin, oFFTemprac1=oFFTemprac1, outdoorCombinedTempr=outdoorCombinedTempr, midPoint1Temprf1=midPoint1Temprf1, fanbox2SN=fanbox2SN, alarmConfig=alarmConfig, onTemprhtr=onTemprhtr, controlTypef1=controlTypef1, hotSpotTempr=hotSpotTempr, vdcHighEntrysys=vdcHighEntrysys, overrideDigi1d2=overrideDigi1d2, acleadlagsys=acleadlagsys, aircond2Status=aircond2Status, alarm10NONCsys=alarm10NONCsys, damper2Config=damper2Config, alarm9NONCsys=alarm9NONCsys, alarm7NONCsys=alarm7NONCsys, overrideDigi3htr=overrideDigi3htr, overrideDigi3f2=overrideDigi3f2, overrideSensorFaild2=overrideSensorFaild2, dig3NONCsys=dig3NONCsys, status=status, temprHighlimit2sys=temprHighlimit2sys, damper1Position=damper1Position, fan1Zonesys=fan1Zonesys, fan1Status=fan1Status, idleDutyCyclef1=idleDutyCyclef1, vdcLowExitsys=vdcLowExitsys, overrideDigi1d1=overrideDigi1d1, coolSetpointZone2=coolSetpointZone2, temprHighlimit1sys=temprHighlimit1sys, atmosphericPressure=atmosphericPressure, offTemprf2=offTemprf2, coolingModesys=coolingModesys, emgncyopentempd2=emgncyopentempd2, restoreConfig=restoreConfig, extendHighSpeedEntryTemprf1=extendHighSpeedEntryTemprf1, alarm8Delaysys=alarm8Delaysys, extendHighSpeedRPMf2=extendHighSpeedRPMf2, aircon1OpertdurHour=aircon1OpertdurHour, enablenm=enablenm, dig3offsetsys=dig3offsetsys, overrideDigi1f2=overrideDigi1f2, idleRPMf1=idleRPMf1, overrideDigi2d1=overrideDigi2d1, midDutyCyclef1=midDutyCyclef1, runDurationd1=runDurationd1, fan1Config=fan1Config)
