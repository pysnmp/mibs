#
# PySNMP MIB module ATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/ats/ATS-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 08:26:53 2024
# On host fv-az1117-967 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, NotificationType, Bits, Unsigned32, NotificationType, Gauge32, ObjectIdentity, ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, iso, TimeTicks, IpAddress, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "Bits", "Unsigned32", "NotificationType", "Gauge32", "ObjectIdentity", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "iso", "TimeTicks", "IpAddress", "MibIdentifier", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
PositiveInteger, NonNegativeInteger = mibBuilder.importSymbols("UPS-MIB", "PositiveInteger", "NonNegativeInteger")
ats = MibIdentifier((1, 3, 6, 1, 4, 1, 37662))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1))
webAppliance = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2))
atsAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2))
single = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1))
atsObjectGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1))
atsTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2))
atsIdentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 1))
atsInputGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2))
atsOutputGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 3))
atsHmiSwitchGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 4))
atsMiscellaneousGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 5))
atsControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 6))
agentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7))
emdStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 8))
emdConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9))
atsIdentGroupModel = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentGroupModel.setStatus('mandatory')
atsIdentGroupSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentGroupSerialNumber.setStatus('mandatory')
atsIdentGroupManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentGroupManufacturer.setStatus('mandatory')
atsIdentGroupFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentGroupFirmwareRevision.setStatus('mandatory')
atsIdentGroupAgentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentGroupAgentFirmwareRevision.setStatus('mandatory')
atsInputGroupPreference = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupPreference.setStatus('mandatory')
atsInputGroupSourceAstatus = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fail", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceAstatus.setStatus('mandatory')
atsInputGroupSourceAinputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceAinputVoltage.setStatus('mandatory')
atsInputGroupSourceAinputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceAinputFrequency.setStatus('mandatory')
atsInputGroupSourceBstatus = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fail", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceBstatus.setStatus('mandatory')
atsInputGroupSourceBinputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceBinputVoltage.setStatus('mandatory')
atsInputGroupSourceBinputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceBinputFrequency.setStatus('mandatory')
atsInputGroupSourceAvoltageUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceAvoltageUpperLimit.setStatus('mandatory')
atsInputGroupSourceAvoltageLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceAvoltageLowerLimit.setStatus('mandatory')
atsInputGroupSourceAfrequencyUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceAfrequencyUpperLimit.setStatus('mandatory')
atsInputGroupSourceAfrequencyLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceAfrequencyLowerLimit.setStatus('mandatory')
atsInputGroupSourceBvoltageUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceBvoltageUpperLimit.setStatus('mandatory')
atsInputGroupSourceBvoltageLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceBvoltageLowerLimit.setStatus('mandatory')
atsInputGroupSourceBfrequencyUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceBfrequencyUpperLimit.setStatus('mandatory')
atsInputGroupSourceBfrequencyLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceBfrequencyLowerLimit.setStatus('mandatory')
atsOutputGroupOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputGroupOutputSource.setStatus('mandatory')
atsOutputGroupOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 3, 2), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputGroupOutputVoltage.setStatus('mandatory')
atsOutputGroupOutputFequency = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 3, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputGroupOutputFequency.setStatus('mandatory')
atsOutputGroupOutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 3, 4), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputGroupOutputCurrent.setStatus('mandatory')
atsOutputGroupLoad = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 3, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputGroupLoad.setStatus('mandatory')
atsHmiSwitchGroupBuzzer = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("buzzerDisabled", 1), ("buzzerEnabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsHmiSwitchGroupBuzzer.setStatus('mandatory')
atsHmiSwitchGroupAtsAlarm = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nothing", 1), ("atsOccurAlarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsHmiSwitchGroupAtsAlarm.setStatus('mandatory')
atsHmiSwitchGroupAutoReturn = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsHmiSwitchGroupAutoReturn.setStatus('mandatory')
atsHmiSwitchGroupSourceTransferByLoad = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsHmiSwitchGroupSourceTransferByLoad.setStatus('mandatory')
atsHmiSwitchGroupSourceTransferByPhase = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsHmiSwitchGroupSourceTransferByPhase.setStatus('mandatory')
atsMiscellaneousGroupAtsSystemTemperture = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsMiscellaneousGroupAtsSystemTemperture.setStatus('mandatory')
atsMiscellaneousGroupSystemMaxCurrent = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsMiscellaneousGroupSystemMaxCurrent.setStatus('mandatory')
atsControlGroupBuzzerAlarmControl = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("buzzerOff", 1), ("buzzerOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsControlGroupBuzzerAlarmControl.setStatus('mandatory')
atsControlGroupManualTransfer = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsControlGroupManualTransfer.setStatus('mandatory')
agentConfigIpaddress = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigIpaddress.setStatus('mandatory')
agentConfigGateway = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigGateway.setStatus('mandatory')
agentConfigSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigSubnetMask.setStatus('mandatory')
agentConfigDate = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigDate.setStatus('mandatory')
agentConfigTime = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTime.setStatus('mandatory')
agentConfigHistoryLogFrequency = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigHistoryLogFrequency.setStatus('mandatory')
agentConfigExtHistoryLogFrequency = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigExtHistoryLogFrequency.setStatus('mandatory')
agentConfigPollRate = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigPollRate.setStatus('mandatory')
agentConfigBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentConfigBaudRate.setStatus('mandatory')
agentConfigDhcpStatue = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigDhcpStatue.setStatus('mandatory')
agentConfigTelnetStatue = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTelnetStatue.setStatus('mandatory')
agentConfigTftpStatue = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTftpStatue.setStatus('mandatory')
agentConfigResetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigResetToDefault.setStatus('mandatory')
agentConfigRestart = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigRestart.setStatus('mandatory')
agentConfigClearAgentLog = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigClearAgentLog.setStatus('mandatory')
agentConfigClearEventLog = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigClearEventLog.setStatus('mandatory')
agentConfigClearExtHistoryLog = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigClearExtHistoryLog.setStatus('mandatory')
agentConfigClearHistoryLog = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigClearHistoryLog.setStatus('mandatory')
agentConfigTrapRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTrapRetryCount.setStatus('mandatory')
agentConfigTrapRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTrapRetryTime.setStatus('mandatory')
agentConfigTrapAckSignature = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTrapAckSignature.setStatus('mandatory')
agentConfigMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentConfigMibVersion.setStatus('mandatory')
agentConfigTrapsReceiversTable = MibTable((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 23), )
if mibBuilder.loadTexts: agentConfigTrapsReceiversTable.setStatus('mandatory')
agentConfigTrapsReceiversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 23, 1), ).setIndexNames((0, "ATS-MIB", "trapsIndex"))
if mibBuilder.loadTexts: agentConfigTrapsReceiversEntry.setStatus('mandatory')
trapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapsIndex.setStatus('mandatory')
trapsReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 23, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapsReceiverAddr.setStatus('mandatory')
receiverCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 23, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverCommunityString.setStatus('mandatory')
receiverNmsType = MibTableColumn((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("ats-trap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverNmsType.setStatus('mandatory')
receiverSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("severe", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverSeverityLevel.setStatus('mandatory')
receiverDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 23, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverDescription.setStatus('mandatory')
agentConfigAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 24), )
if mibBuilder.loadTexts: agentConfigAccessControlTable.setStatus('mandatory')
agentConfigAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 24, 1), ).setIndexNames((0, "ATS-MIB", "trapsIndex"))
if mibBuilder.loadTexts: agentConfigAccessControlEntry.setStatus('mandatory')
accessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessIndex.setStatus('mandatory')
accessControlAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 24, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlAddr.setStatus('mandatory')
accessCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 24, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessCommunityString.setStatus('mandatory')
accessControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2), ("notAccess", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlMode.setStatus('mandatory')
agentConfigDefaultLanguage = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("english", 2), ("traditionalChinese", 3), ("simplifiedChinese", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigDefaultLanguage.setStatus('mandatory')
agentConfigIPv6AddrStatus = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("manualConfiguration", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentConfigIPv6AddrStatus.setStatus('mandatory')
agentConfigIPv6AddrAutoConfig = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigIPv6AddrAutoConfig.setStatus('mandatory')
agentConfigIPv6LinkLocalAddr = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentConfigIPv6LinkLocalAddr.setStatus('mandatory')
agentConfigIPv6GlobalAddr = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigIPv6GlobalAddr.setStatus('mandatory')
agentConfigIPv6PrefixlLength = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigIPv6PrefixlLength.setStatus('mandatory')
agentConfigIPv6DefaultRouter = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigIPv6DefaultRouter.setStatus('mandatory')
emdSatatusEmdType = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("emdHT", 3), ("emdT", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emdSatatusEmdType.setStatus('mandatory')
emdSatatusTemperature = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emdSatatusTemperature.setStatus('mandatory')
emdSatatusHumidity = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emdSatatusHumidity.setStatus('mandatory')
emdSatatusAlarm1 = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknow", 1), ("disabled", 2), ("active", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emdSatatusAlarm1.setStatus('mandatory')
emdSatatusAlarm2 = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknow", 1), ("disabled", 2), ("active", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emdSatatusAlarm2.setStatus('mandatory')
usahEmdConfigEmdConfig = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usahEmdConfigEmdConfig.setStatus('mandatory')
emdConfigEmdName = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigEmdName.setStatus('mandatory')
emdConfigTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 3))
emdConfigTempName = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempName.setStatus('mandatory')
emdConfigTempHighSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempHighSetPoint.setStatus('mandatory')
emdConfigTempHighStatus = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempHighStatus.setStatus('mandatory')
emdConfigTempLowSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempLowSetPoint.setStatus('mandatory')
emdConfigTempLowStatus = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempLowStatus.setStatus('mandatory')
emdConfigTempOffset = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempOffset.setStatus('mandatory')
emdConfigHumidity = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 4))
emdConfigHumidityName = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityName.setStatus('mandatory')
emdConfigHumidityHighSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityHighSetPoint.setStatus('mandatory')
emdConfigHumidityHighStatus = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityHighStatus.setStatus('mandatory')
emdConfigHumidityLowSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityLowSetPoint.setStatus('mandatory')
emdConfigHumidityLowStatus = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityLowStatus.setStatus('mandatory')
emdConfigHumidityOffset = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityOffset.setStatus('mandatory')
emdConfigAlarm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 5))
emdConfigAlarm1Name = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigAlarm1Name.setStatus('mandatory')
emdConfigAlarm1Type = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("nomralOpen", 2), ("normalClose", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigAlarm1Type.setStatus('mandatory')
emdConfigAlarm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 6))
emdConfigAlarm2Name = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigAlarm2Name.setStatus('mandatory')
emdConfigAlarm2Type = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("nomralOpen", 2), ("normalClose", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigAlarm2Type.setStatus('mandatory')
atsAtsAlarm = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,1))
atsSourceAvoltageAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,2))
atsSourceBvoltageAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,3))
atsSourceAfrequencyAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,4))
atsSourceBfrequencyAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,5))
atsOutputOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,6))
atsWorkPowerAabnormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,7))
atsWorkPowerBabnormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,8))
atsOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,9))
atsDcOffsetAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,10))
atsEepromAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,11))
atsLcdNotConnect = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,12))
atsOutputExceedsOverloadTime = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,13))
atsInputPhaseDifference = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,14))
atsUserSetOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,15))
atsAtsAlarmToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,16))
atsSourceAvoltageAbnormalToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,17))
atsSourceBvoltageAbnormalToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,18))
atsSourceAfrequencyAbnormalToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,19))
atsSourceBfrequencyAbnormalToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,20))
atsOutputOverLoadToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,21))
atsWorkPowerAabnormalToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,22))
atsWorkPowerBabnormalToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,23))
atsOverTemperatureToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,24))
atsDcOffsetAbnormalToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,25))
atsEepromAbnormalToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,26))
atsLcdNotConnectToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,27))
atsOutputExceedsOverloadTimeToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,28))
atsInputPhaseDifferenceToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,29))
atsUserSetOverLoadToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,30))
atsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,31))
atsCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,32))
emdTemperatureNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,33)).setObjects(("ATS-MIB", "emdSatatusTemperature"), ("ATS-MIB", "emdConfigTempHighSetPoint"), ("ATS-MIB", "emdConfigTempName"))
emdTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,34)).setObjects(("ATS-MIB", "emdSatatusTemperature"), ("ATS-MIB", "emdConfigTempHighSetPoint"), ("ATS-MIB", "emdConfigTempName"))
emdTemperatureNotLow = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,35)).setObjects(("ATS-MIB", "emdSatatusTemperature"), ("ATS-MIB", "emdConfigTempLowSetPoint"), ("ATS-MIB", "emdConfigTempName"))
emdTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,36)).setObjects(("ATS-MIB", "emdSatatusTemperature"), ("ATS-MIB", "emdConfigTempLowSetPoint"), ("ATS-MIB", "emdConfigTempName"))
emdHumidityNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,37)).setObjects(("ATS-MIB", "emdSatatusHumidity"), ("ATS-MIB", "emdConfigHumidityHighSetPoint"), ("ATS-MIB", "emdConfigHumidityName"))
emdHumidityTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,38)).setObjects(("ATS-MIB", "emdSatatusHumidity"), ("ATS-MIB", "emdConfigHumidityHighSetPoint"), ("ATS-MIB", "emdConfigHumidityName"))
emdHumidityNotLow = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,39)).setObjects(("ATS-MIB", "emdSatatusHumidity"), ("ATS-MIB", "emdConfigHumidityLowSetPoint"), ("ATS-MIB", "emdConfigHumidityName"))
emdHumidityTooLow = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,40)).setObjects(("ATS-MIB", "emdSatatusHumidity"), ("ATS-MIB", "emdConfigHumidityLowSetPoint"), ("ATS-MIB", "emdConfigHumidityName"))
emdAlarm1Normal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,41)).setObjects(("ATS-MIB", "emdConfigAlarm1Type"), ("ATS-MIB", "emdConfigAlarm1Name"))
emdAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,42)).setObjects(("ATS-MIB", "emdConfigAlarm1Type"), ("ATS-MIB", "emdConfigAlarm1Name"))
emdAlarm2Normal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,43)).setObjects(("ATS-MIB", "emdConfigAlarm2Type"), ("ATS-MIB", "emdConfigAlarm2Name"))
emdAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,44)).setObjects(("ATS-MIB", "emdConfigAlarm2Type"), ("ATS-MIB", "emdConfigAlarm2Name"))
mibBuilder.exportSymbols("ATS-MIB", atsControlGroup=atsControlGroup, accessIndex=accessIndex, emdSatatusAlarm1=emdSatatusAlarm1, atsOutputExceedsOverloadTime=atsOutputExceedsOverloadTime, atsHmiSwitchGroupSourceTransferByLoad=atsHmiSwitchGroupSourceTransferByLoad, emdConfigAlarm2Name=emdConfigAlarm2Name, receiverCommunityString=receiverCommunityString, emdTemperatureNotHigh=emdTemperatureNotHigh, atsHmiSwitchGroupAutoReturn=atsHmiSwitchGroupAutoReturn, atsOutputGroupOutputSource=atsOutputGroupOutputSource, emdConfigTempLowStatus=emdConfigTempLowStatus, agentConfigTrapsReceiversEntry=agentConfigTrapsReceiversEntry, emdConfigHumidityLowSetPoint=emdConfigHumidityLowSetPoint, atsUserSetOverLoadToNormal=atsUserSetOverLoadToNormal, agentConfigClearExtHistoryLog=agentConfigClearExtHistoryLog, atsAtsAlarm=atsAtsAlarm, emdSatatusEmdType=emdSatatusEmdType, atsTrapGroup=atsTrapGroup, atsInputGroupSourceBinputVoltage=atsInputGroupSourceBinputVoltage, atsHmiSwitchGroupSourceTransferByPhase=atsHmiSwitchGroupSourceTransferByPhase, accessControlMode=accessControlMode, atsSourceBfrequencyAbnormalToNormal=atsSourceBfrequencyAbnormalToNormal, agentConfigSubnetMask=agentConfigSubnetMask, emdConfigHumidityOffset=emdConfigHumidityOffset, atsWorkPowerBabnormalToNormal=atsWorkPowerBabnormalToNormal, atsAgent=atsAgent, trapsReceiverAddr=trapsReceiverAddr, emdSatatusAlarm2=emdSatatusAlarm2, emdHumidityNotLow=emdHumidityNotLow, emdConfigAlarm2=emdConfigAlarm2, atsInputGroupSourceAvoltageLowerLimit=atsInputGroupSourceAvoltageLowerLimit, atsEepromAbnormal=atsEepromAbnormal, single=single, atsDcOffsetAbnormalToNormal=atsDcOffsetAbnormalToNormal, emdAlarm2Active=emdAlarm2Active, agentConfigClearAgentLog=agentConfigClearAgentLog, atsInputGroupSourceAfrequencyLowerLimit=atsInputGroupSourceAfrequencyLowerLimit, emdConfigHumidityHighStatus=emdConfigHumidityHighStatus, emdTemperatureTooLow=emdTemperatureTooLow, emdStatus=emdStatus, atsWorkPowerBabnormal=atsWorkPowerBabnormal, atsEepromAbnormalToNormal=atsEepromAbnormalToNormal, webAppliance=webAppliance, atsIdentGroupFirmwareRevision=atsIdentGroupFirmwareRevision, emdConfigAlarm1Name=emdConfigAlarm1Name, atsInputGroupSourceAinputFrequency=atsInputGroupSourceAinputFrequency, atsOutputGroup=atsOutputGroup, atsInputGroupSourceBvoltageLowerLimit=atsInputGroupSourceBvoltageLowerLimit, agentConfigGateway=agentConfigGateway, atsHmiSwitchGroupAtsAlarm=atsHmiSwitchGroupAtsAlarm, atsCommunicationEstablished=atsCommunicationEstablished, agentConfigTrapRetryCount=agentConfigTrapRetryCount, agentConfigIPv6AddrAutoConfig=agentConfigIPv6AddrAutoConfig, agentConfigHistoryLogFrequency=agentConfigHistoryLogFrequency, atsInputGroupSourceBfrequencyLowerLimit=atsInputGroupSourceBfrequencyLowerLimit, agentConfigRestart=agentConfigRestart, atsInputGroupSourceAfrequencyUpperLimit=atsInputGroupSourceAfrequencyUpperLimit, emdConfigTemperature=emdConfigTemperature, agentConfigDefaultLanguage=agentConfigDefaultLanguage, emdConfigHumidityName=emdConfigHumidityName, atsMiscellaneousGroup=atsMiscellaneousGroup, atsOutputExceedsOverloadTimeToNormal=atsOutputExceedsOverloadTimeToNormal, accessControlAddr=accessControlAddr, atsSourceBvoltageAbnormal=atsSourceBvoltageAbnormal, atsHmiSwitchGroupBuzzer=atsHmiSwitchGroupBuzzer, atsOutputOverLoadToNormal=atsOutputOverLoadToNormal, atsInputGroupSourceAstatus=atsInputGroupSourceAstatus, atsInputGroupSourceBfrequencyUpperLimit=atsInputGroupSourceBfrequencyUpperLimit, atsIdentGroupManufacturer=atsIdentGroupManufacturer, atsSourceBvoltageAbnormalToNormal=atsSourceBvoltageAbnormalToNormal, emdConfigAlarm1Type=emdConfigAlarm1Type, emdAlarm2Normal=emdAlarm2Normal, atsOutputGroupLoad=atsOutputGroupLoad, atsHmiSwitchGroup=atsHmiSwitchGroup, emdConfigTempLowSetPoint=emdConfigTempLowSetPoint, accessCommunityString=accessCommunityString, atsWorkPowerAabnormal=atsWorkPowerAabnormal, emdConfigHumidityLowStatus=emdConfigHumidityLowStatus, atsLcdNotConnectToNormal=atsLcdNotConnectToNormal, atsWorkPowerAabnormalToNormal=atsWorkPowerAabnormalToNormal, agentConfigPollRate=agentConfigPollRate, atsSourceAfrequencyAbnormal=atsSourceAfrequencyAbnormal, emdHumidityTooLow=emdHumidityTooLow, agentConfigResetToDefault=agentConfigResetToDefault, emdTemperatureTooHigh=emdTemperatureTooHigh, emdHumidityNotHigh=emdHumidityNotHigh, product=product, atsSourceAvoltageAbnormalToNormal=atsSourceAvoltageAbnormalToNormal, agentConfig=agentConfig, atsOutputGroupOutputFequency=atsOutputGroupOutputFequency, atsIdentGroup=atsIdentGroup, emdConfigAlarm1=emdConfigAlarm1, atsInputGroupSourceAinputVoltage=atsInputGroupSourceAinputVoltage, agentConfigTrapRetryTime=agentConfigTrapRetryTime, agentConfigExtHistoryLogFrequency=agentConfigExtHistoryLogFrequency, emdConfigHumidity=emdConfigHumidity, atsOverTemperatureToNormal=atsOverTemperatureToNormal, agentConfigDate=agentConfigDate, agentConfigClearHistoryLog=agentConfigClearHistoryLog, agentConfigIPv6GlobalAddr=agentConfigIPv6GlobalAddr, agentConfigIPv6AddrStatus=agentConfigIPv6AddrStatus, agentConfigTelnetStatue=agentConfigTelnetStatue, atsInputGroupSourceBvoltageUpperLimit=atsInputGroupSourceBvoltageUpperLimit, emdConfigTempHighSetPoint=emdConfigTempHighSetPoint, atsObjectGroup=atsObjectGroup, atsUserSetOverLoad=atsUserSetOverLoad, atsDcOffsetAbnormal=atsDcOffsetAbnormal, agentConfigMibVersion=agentConfigMibVersion, agentConfigIPv6LinkLocalAddr=agentConfigIPv6LinkLocalAddr, atsIdentGroupAgentFirmwareRevision=atsIdentGroupAgentFirmwareRevision, atsInputGroupSourceBstatus=atsInputGroupSourceBstatus, atsSourceAfrequencyAbnormalToNormal=atsSourceAfrequencyAbnormalToNormal, agentConfigAccessControlTable=agentConfigAccessControlTable, receiverSeverityLevel=receiverSeverityLevel, agentConfigBaudRate=agentConfigBaudRate, agentConfigTftpStatue=agentConfigTftpStatue, atsInputGroup=atsInputGroup, agentConfigAccessControlEntry=agentConfigAccessControlEntry, atsInputGroupPreference=atsInputGroupPreference, receiverNmsType=receiverNmsType, atsLcdNotConnect=atsLcdNotConnect, emdConfigHumidityHighSetPoint=emdConfigHumidityHighSetPoint, agentConfigIPv6PrefixlLength=agentConfigIPv6PrefixlLength, atsControlGroupBuzzerAlarmControl=atsControlGroupBuzzerAlarmControl, usahEmdConfigEmdConfig=usahEmdConfigEmdConfig, agentConfigTrapsReceiversTable=agentConfigTrapsReceiversTable, emdConfigTempOffset=emdConfigTempOffset, emdConfig=emdConfig, emdConfigAlarm2Type=emdConfigAlarm2Type, atsInputGroupSourceBinputFrequency=atsInputGroupSourceBinputFrequency, trapsIndex=trapsIndex, agentConfigTime=agentConfigTime, emdAlarm1Active=emdAlarm1Active, atsOutputGroupOutputVoltage=atsOutputGroupOutputVoltage, atsInputGroupSourceAvoltageUpperLimit=atsInputGroupSourceAvoltageUpperLimit, agentConfigIPv6DefaultRouter=agentConfigIPv6DefaultRouter, atsOutputGroupOutputCurrent=atsOutputGroupOutputCurrent, emdHumidityTooHigh=emdHumidityTooHigh, agentConfigClearEventLog=agentConfigClearEventLog, emdConfigTempName=emdConfigTempName, atsControlGroupManualTransfer=atsControlGroupManualTransfer, emdTemperatureNotLow=emdTemperatureNotLow, emdSatatusTemperature=emdSatatusTemperature, agentConfigDhcpStatue=agentConfigDhcpStatue, atsMiscellaneousGroupSystemMaxCurrent=atsMiscellaneousGroupSystemMaxCurrent, atsOverTemperature=atsOverTemperature, receiverDescription=receiverDescription, atsIdentGroupSerialNumber=atsIdentGroupSerialNumber, atsCommunicationLost=atsCommunicationLost, atsIdentGroupModel=atsIdentGroupModel, emdConfigEmdName=emdConfigEmdName, atsSourceBfrequencyAbnormal=atsSourceBfrequencyAbnormal, atsInputPhaseDifference=atsInputPhaseDifference, agentConfigTrapAckSignature=agentConfigTrapAckSignature, emdSatatusHumidity=emdSatatusHumidity, atsMiscellaneousGroupAtsSystemTemperture=atsMiscellaneousGroupAtsSystemTemperture, agentConfigIpaddress=agentConfigIpaddress, atsAtsAlarmToNormal=atsAtsAlarmToNormal, atsSourceAvoltageAbnormal=atsSourceAvoltageAbnormal, atsOutputOverLoad=atsOutputOverLoad, emdAlarm1Normal=emdAlarm1Normal, emdConfigTempHighStatus=emdConfigTempHighStatus, ats=ats, atsInputPhaseDifferenceToNormal=atsInputPhaseDifferenceToNormal)
