#
# PySNMP MIB module RS-XX9-ISDBT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rs/RS-XX9-ISDBT-MIB
# Produced by pysmi-1.1.12 at Wed Dec  4 21:20:18 2024
# On host fv-az585-169 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
commonNotificationAlarmClass, = mibBuilder.importSymbols("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass")
rsXx9IsdbT, rsXx9MibModule = mibBuilder.importSymbols("RS-XX9-SMI-MIB", "rsXx9IsdbT", "rsXx9MibModule")
IndexAB, NotificationMask, NotificationClass, NotificationState, NotificationPriority, SwitchOnOff, IndexTransmitter = mibBuilder.importSymbols("RS-XX9-TC-MIB", "IndexAB", "NotificationMask", "NotificationClass", "NotificationState", "NotificationPriority", "SwitchOnOff", "IndexTransmitter")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, TimeTicks, Integer32, Gauge32, Counter64, ModuleIdentity, ObjectIdentity, IpAddress, MibIdentifier, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "TimeTicks", "Integer32", "Gauge32", "Counter64", "ModuleIdentity", "ObjectIdentity", "IpAddress", "MibIdentifier", "iso", "Unsigned32")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
rsXx9IsdbtMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 1, 216, 8))
rsXx9IsdbtMibModule.setRevisions(('2015-06-03 15:00', '2014-12-22 16:00', '2014-03-25 16:00', '2012-05-14 10:00',))
if mibBuilder.loadTexts: rsXx9IsdbtMibModule.setLastUpdated('201506031500Z')
if mibBuilder.loadTexts: rsXx9IsdbtMibModule.setOrganization('Rohde&Schwarz GmbH & Co. KG')
class IsdbtMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3, 4))
    namedValues = NamedValues(("mode1", 2), ("mode2", 3), ("mode3", 4))

class IsdbtGuardInterval(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("oneDiv32", 1), ("oneDiv16", 2), ("oneDiv8", 3), ("oneDiv4", 4))

class IsdbtLayer(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("a", 1), ("b", 2), ("c", 3))

class IsdbtConstellation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))
    namedValues = NamedValues(("dqpsk", 2), ("qpsk", 3), ("qam16", 4), ("qam64", 5))

class IsdbtCodeRate(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 3, 4, 6, 7))
    namedValues = NamedValues(("oneHalf", 1), ("twoThird", 3), ("threeFourth", 4), ("fiveSixth", 6), ("sevenEighth", 7))

class IsdbtNitRestampingSource(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("bts", 1), ("manual", 2))

rsXx9IsdbtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 0))
isdbtIIP = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 0, 1)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationPriority"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationState"))
if mibBuilder.loadTexts: isdbtIIP.setStatus('current')
isdbtFrameCounter = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 0, 2)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationPriority"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationState"))
if mibBuilder.loadTexts: isdbtFrameCounter.setStatus('current')
isdbtEquipmentId = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 0, 3)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationPriority"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationState"))
if mibBuilder.loadTexts: isdbtEquipmentId.setStatus('current')
isdbtManualConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 0, 4)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationPriority"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationState"))
if mibBuilder.loadTexts: isdbtManualConfiguration.setStatus('current')
isdbtActiveConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 0, 5)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationPriority"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationState"))
if mibBuilder.loadTexts: isdbtActiveConfiguration.setStatus('current')
isdbtTest = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 0, 6)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationPriority"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationState"))
if mibBuilder.loadTexts: isdbtTest.setStatus('current')
rsXx9IsdbtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1))
isdbtStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1))
isdbtStatusNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 1), )
if mibBuilder.loadTexts: isdbtStatusNotificationTable.setStatus('current')
isdbtStatusNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 1, 1), ).setIndexNames((0, "RS-XX9-ISDBT-MIB", "isdbtStatusNotificationTxIdx"), (0, "RS-XX9-ISDBT-MIB", "isdbtStatusNotificationExcIdx"), (0, "RS-XX9-ISDBT-MIB", "isdbtStatusNotificationIdx"))
if mibBuilder.loadTexts: isdbtStatusNotificationEntry.setStatus('current')
isdbtStatusNotificationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: isdbtStatusNotificationTxIdx.setStatus('current')
isdbtStatusNotificationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: isdbtStatusNotificationExcIdx.setStatus('current')
isdbtStatusNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: isdbtStatusNotificationIdx.setStatus('current')
isdbtStatusNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("isdbtIIP", 1), ("isdbtFrameCounter", 2), ("isdbtEquipmentId", 3), ("isdbtManualConfiguration", 4), ("isdbtActiveConfiguration", 5), ("isdbtTest", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtStatusNotificationName.setStatus('current')
isdbtStatusNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 1, 1, 5), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtStatusNotificationMask.setStatus('current')
isdbtStatusNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 1, 1, 6), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtStatusNotificationPriority.setStatus('current')
isdbtStatusNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 1, 1, 7), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdbtStatusNotificationState.setStatus('current')
isdbtStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 2), )
if mibBuilder.loadTexts: isdbtStateTable.setStatus('current')
isdbtStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 2, 1), ).setIndexNames((0, "RS-XX9-ISDBT-MIB", "isdbtStatusNotificationTxIdx"), (0, "RS-XX9-ISDBT-MIB", "isdbtStatusNotificationExcIdx"))
if mibBuilder.loadTexts: isdbtStateEntry.setStatus('current')
isdbtStTxDelayOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 2, 1, 1), Integer32()).setUnits('1/10 micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: isdbtStTxDelayOffset.setStatus('current')
isdbtSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2))
isdbtConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 1), )
if mibBuilder.loadTexts: isdbtConfigurationTable.setStatus('current')
isdbtConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 1, 1), ).setIndexNames((0, "RS-XX9-ISDBT-MIB", "isdbtCfgTxIdx"), (0, "RS-XX9-ISDBT-MIB", "isdbtCfgExcIdx"))
if mibBuilder.loadTexts: isdbtConfigurationEntry.setStatus('current')
isdbtCfgTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: isdbtCfgTxIdx.setStatus('current')
isdbtCfgExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: isdbtCfgExcIdx.setStatus('current')
isdbtCfgNetworkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mfn", 1), ("dynamicSfn", 2), ("staticSfn", 3), ("automatic", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtCfgNetworkMode.setStatus('current')
isdbtCfgCoderSettingsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iip", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtCfgCoderSettingsSource.setStatus('current')
isdbtCfgIipID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtCfgIipID.setStatus('current')
isdbtCfgBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7))).clone(namedValues=NamedValues(("mhz6", 5), ("mhz7", 6), ("mhz8", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtCfgBandwidth.setStatus('current')
isdbtLocalizationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 2), )
if mibBuilder.loadTexts: isdbtLocalizationTable.setStatus('current')
isdbtLocalizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 2, 1), )
isdbtConfigurationEntry.registerAugmentions(("RS-XX9-ISDBT-MIB", "isdbtLocalizationEntry"))
isdbtLocalizationEntry.setIndexNames(*isdbtConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: isdbtLocalizationEntry.setStatus('current')
isdbtLocalizationEquipmentControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 2, 1, 1), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtLocalizationEquipmentControl.setStatus('current')
isdbtLocalizationEquipmentID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtLocalizationEquipmentID.setStatus('current')
isdbtTmccTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 3), )
if mibBuilder.loadTexts: isdbtTmccTable.setStatus('current')
isdbtTmccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 3, 1), )
isdbtConfigurationEntry.registerAugmentions(("RS-XX9-ISDBT-MIB", "isdbtTmccEntry"))
isdbtTmccEntry.setIndexNames(*isdbtConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: isdbtTmccEntry.setStatus('current')
isdbtTmccNext = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("active", 2), ("automatic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtTmccNext.setStatus('current')
isdbtTmccMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 3, 1, 2), IsdbtMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtTmccMode.setStatus('current')
isdbtTmccGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 3, 1, 3), IsdbtGuardInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtTmccGuardInterval.setStatus('current')
isdbtTmccPartialReception = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 3, 1, 4), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtTmccPartialReception.setStatus('current')
isdbtTmccLayerTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 4), )
if mibBuilder.loadTexts: isdbtTmccLayerTable.setStatus('current')
isdbtTmccLayerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 4, 1), ).setIndexNames((0, "RS-XX9-ISDBT-MIB", "isdbtCfgTxIdx"), (0, "RS-XX9-ISDBT-MIB", "isdbtCfgExcIdx"), (0, "RS-XX9-ISDBT-MIB", "isdbtTmccLayerIdx"))
if mibBuilder.loadTexts: isdbtTmccLayerEntry.setStatus('current')
isdbtTmccLayerIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 4, 1, 3), IsdbtLayer())
if mibBuilder.loadTexts: isdbtTmccLayerIdx.setStatus('current')
isdbtTmccLayerSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtTmccLayerSegments.setStatus('current')
isdbtTmccLayerConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 4, 1, 5), IsdbtConstellation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtTmccLayerConstellation.setStatus('current')
isdbtTmccLayerCodeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 4, 1, 6), IsdbtCodeRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtTmccLayerCodeRate.setStatus('current')
isdbtTmccLayerTimeInterleaver = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtTmccLayerTimeInterleaver.setStatus('current')
isdbtTestTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 5), )
if mibBuilder.loadTexts: isdbtTestTable.setStatus('current')
isdbtTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 5, 1), )
isdbtConfigurationEntry.registerAugmentions(("RS-XX9-ISDBT-MIB", "isdbtTestEntry"))
isdbtTestEntry.setIndexNames(*isdbtConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: isdbtTestEntry.setStatus('current')
isdbtTestGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 5, 1, 1), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtTestGeneration.setStatus('obsolete')
isdbtTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("testMode0", 4), ("testMode1", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtTestMode.setStatus('current')
isdbtNitRestampingTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6), )
if mibBuilder.loadTexts: isdbtNitRestampingTable.setStatus('current')
isdbtNitRestampingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6, 1), )
isdbtConfigurationEntry.registerAugmentions(("RS-XX9-ISDBT-MIB", "isdbtNitRestampingEntry"))
isdbtNitRestampingEntry.setIndexNames(*isdbtConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: isdbtNitRestampingEntry.setStatus('current')
isdbtNitNetworkIdSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6, 1, 1), IsdbtNitRestampingSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtNitNetworkIdSource.setStatus('current')
isdbtNitManualNetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtNitManualNetworkId.setStatus('current')
isdbtNitTransportStreamIdSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6, 1, 3), IsdbtNitRestampingSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtNitTransportStreamIdSource.setStatus('current')
isdbtNitTransportManualStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtNitTransportManualStreamId.setStatus('current')
isdbtNitAreaCodeSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6, 1, 5), IsdbtNitRestampingSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtNitAreaCodeSource.setStatus('current')
isdbtNitManualAreaCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtNitManualAreaCode.setStatus('current')
isdbtNitFrequencySource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6, 1, 7), IsdbtNitRestampingSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtNitFrequencySource.setStatus('current')
isdbtNitManualFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('1/7 MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtNitManualFrequency.setStatus('current')
isdbtNitVirtualChannelSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6, 1, 9), IsdbtNitRestampingSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtNitVirtualChannelSource.setStatus('current')
isdbtNitManualVirtualChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtNitManualVirtualChannel.setStatus('current')
isdbtOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3))
isdbtOutTmccTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 3), )
if mibBuilder.loadTexts: isdbtOutTmccTable.setStatus('current')
isdbtOutTmccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 3, 1), )
isdbtConfigurationEntry.registerAugmentions(("RS-XX9-ISDBT-MIB", "isdbtOutTmccEntry"))
isdbtOutTmccEntry.setIndexNames(*isdbtConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: isdbtOutTmccEntry.setStatus('current')
isdbtOutTmccMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 3, 1, 2), IsdbtMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdbtOutTmccMode.setStatus('current')
isdbtOutTmccGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 3, 1, 3), IsdbtGuardInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdbtOutTmccGuardInterval.setStatus('current')
isdbtOutTmccPartialReception = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdbtOutTmccPartialReception.setStatus('current')
isdbtOutTmccLayerTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 4), )
if mibBuilder.loadTexts: isdbtOutTmccLayerTable.setStatus('current')
isdbtOutTmccLayerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 4, 1), )
isdbtTmccLayerEntry.registerAugmentions(("RS-XX9-ISDBT-MIB", "isdbtOutTmccLayerEntry"))
isdbtOutTmccLayerEntry.setIndexNames(*isdbtTmccLayerEntry.getIndexNames())
if mibBuilder.loadTexts: isdbtOutTmccLayerEntry.setStatus('current')
isdbtOutTmccLayerSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdbtOutTmccLayerSegments.setStatus('current')
isdbtOutTmccLayerConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 4, 1, 5), IsdbtConstellation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdbtOutTmccLayerConstellation.setStatus('current')
isdbtOutTmccLayerCodeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 4, 1, 6), IsdbtCodeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdbtOutTmccLayerCodeRate.setStatus('current')
isdbtOutTmccLayerTimeInterleaver = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdbtOutTmccLayerTimeInterleaver.setStatus('current')
isdbtOutStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 5), )
if mibBuilder.loadTexts: isdbtOutStatusTable.setStatus('current')
isdbtOutStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 5, 1), )
isdbtConfigurationEntry.registerAugmentions(("RS-XX9-ISDBT-MIB", "isdbtOutStatusEntry"))
isdbtOutStatusEntry.setIndexNames(*isdbtConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: isdbtOutStatusEntry.setStatus('current')
isdbtOutStatusEwbsActFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("flagOff", 2), ("flagOn", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdbtOutStatusEwbsActFlag.setStatus('current')
rsXx9IsdbtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 2))
rsXx9IsdbtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 2, 1))
isdbtBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 2, 1, 1)).setObjects(("RS-XX9-ISDBT-MIB", "isdbtObjBasic"), ("RS-XX9-ISDBT-MIB", "isdbtNotifyBasic"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isdbtBasicCompliance = isdbtBasicCompliance.setStatus('current')
rsXx9IsdbtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 2, 2))
isdbtObjBasic = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 2, 2, 1)).setObjects(("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationName"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationMask"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationPriority"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationState"), ("RS-XX9-ISDBT-MIB", "isdbtCfgNetworkMode"), ("RS-XX9-ISDBT-MIB", "isdbtCfgCoderSettingsSource"), ("RS-XX9-ISDBT-MIB", "isdbtCfgIipID"), ("RS-XX9-ISDBT-MIB", "isdbtLocalizationEquipmentControl"), ("RS-XX9-ISDBT-MIB", "isdbtLocalizationEquipmentID"), ("RS-XX9-ISDBT-MIB", "isdbtCfgBandwidth"), ("RS-XX9-ISDBT-MIB", "isdbtStTxDelayOffset"), ("RS-XX9-ISDBT-MIB", "isdbtNitManualVirtualChannel"), ("RS-XX9-ISDBT-MIB", "isdbtNitVirtualChannelSource"), ("RS-XX9-ISDBT-MIB", "isdbtNitManualFrequency"), ("RS-XX9-ISDBT-MIB", "isdbtNitFrequencySource"), ("RS-XX9-ISDBT-MIB", "isdbtNitManualAreaCode"), ("RS-XX9-ISDBT-MIB", "isdbtNitAreaCodeSource"), ("RS-XX9-ISDBT-MIB", "isdbtNitTransportManualStreamId"), ("RS-XX9-ISDBT-MIB", "isdbtNitTransportStreamIdSource"), ("RS-XX9-ISDBT-MIB", "isdbtNitManualNetworkId"), ("RS-XX9-ISDBT-MIB", "isdbtNitNetworkIdSource"), ("RS-XX9-ISDBT-MIB", "isdbtOutStatusEwbsActFlag"), ("RS-XX9-ISDBT-MIB", "isdbtTestMode"), ("RS-XX9-ISDBT-MIB", "isdbtTmccNext"), ("RS-XX9-ISDBT-MIB", "isdbtTmccMode"), ("RS-XX9-ISDBT-MIB", "isdbtTmccGuardInterval"), ("RS-XX9-ISDBT-MIB", "isdbtTmccPartialReception"), ("RS-XX9-ISDBT-MIB", "isdbtTmccLayerSegments"), ("RS-XX9-ISDBT-MIB", "isdbtTmccLayerConstellation"), ("RS-XX9-ISDBT-MIB", "isdbtTmccLayerCodeRate"), ("RS-XX9-ISDBT-MIB", "isdbtTmccLayerTimeInterleaver"), ("RS-XX9-ISDBT-MIB", "isdbtOutTmccMode"), ("RS-XX9-ISDBT-MIB", "isdbtOutTmccGuardInterval"), ("RS-XX9-ISDBT-MIB", "isdbtOutTmccPartialReception"), ("RS-XX9-ISDBT-MIB", "isdbtOutTmccLayerSegments"), ("RS-XX9-ISDBT-MIB", "isdbtOutTmccLayerConstellation"), ("RS-XX9-ISDBT-MIB", "isdbtOutTmccLayerCodeRate"), ("RS-XX9-ISDBT-MIB", "isdbtOutTmccLayerTimeInterleaver"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isdbtObjBasic = isdbtObjBasic.setStatus('current')
isdbtNotifyBasic = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 2, 2, 2)).setObjects(("RS-XX9-ISDBT-MIB", "isdbtIIP"), ("RS-XX9-ISDBT-MIB", "isdbtFrameCounter"), ("RS-XX9-ISDBT-MIB", "isdbtEquipmentId"), ("RS-XX9-ISDBT-MIB", "isdbtManualConfiguration"), ("RS-XX9-ISDBT-MIB", "isdbtActiveConfiguration"), ("RS-XX9-ISDBT-MIB", "isdbtTest"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isdbtNotifyBasic = isdbtNotifyBasic.setStatus('current')
isdbtObjObsoleted = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 2, 2, 3)).setObjects(("RS-XX9-ISDBT-MIB", "isdbtTestGeneration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isdbtObjObsoleted = isdbtObjObsoleted.setStatus('obsolete')
mibBuilder.exportSymbols("RS-XX9-ISDBT-MIB", isdbtStTxDelayOffset=isdbtStTxDelayOffset, isdbtObjObsoleted=isdbtObjObsoleted, isdbtTestGeneration=isdbtTestGeneration, isdbtTmccGuardInterval=isdbtTmccGuardInterval, isdbtNitTransportManualStreamId=isdbtNitTransportManualStreamId, isdbtStatusNotificationName=isdbtStatusNotificationName, isdbtStatusNotificationExcIdx=isdbtStatusNotificationExcIdx, isdbtOutTmccLayerTable=isdbtOutTmccLayerTable, isdbtNitNetworkIdSource=isdbtNitNetworkIdSource, isdbtTmccLayerEntry=isdbtTmccLayerEntry, rsXx9IsdbtMibModule=rsXx9IsdbtMibModule, isdbtStatus=isdbtStatus, isdbtOutTmccGuardInterval=isdbtOutTmccGuardInterval, isdbtFrameCounter=isdbtFrameCounter, isdbtOutTmccEntry=isdbtOutTmccEntry, PYSNMP_MODULE_ID=rsXx9IsdbtMibModule, IsdbtMode=IsdbtMode, isdbtTmccTable=isdbtTmccTable, rsXx9IsdbtNotifications=rsXx9IsdbtNotifications, isdbtStatusNotificationTxIdx=isdbtStatusNotificationTxIdx, isdbtCfgBandwidth=isdbtCfgBandwidth, isdbtOutTmccTable=isdbtOutTmccTable, rsXx9IsdbtGroups=rsXx9IsdbtGroups, isdbtNitFrequencySource=isdbtNitFrequencySource, isdbtOutStatusEntry=isdbtOutStatusEntry, isdbtNitManualFrequency=isdbtNitManualFrequency, IsdbtCodeRate=IsdbtCodeRate, rsXx9IsdbtObjects=rsXx9IsdbtObjects, isdbtObjBasic=isdbtObjBasic, isdbtLocalizationEquipmentID=isdbtLocalizationEquipmentID, isdbtOutStatusEwbsActFlag=isdbtOutStatusEwbsActFlag, isdbtTmccMode=isdbtTmccMode, isdbtCfgNetworkMode=isdbtCfgNetworkMode, isdbtNitRestampingEntry=isdbtNitRestampingEntry, isdbtIIP=isdbtIIP, isdbtTmccPartialReception=isdbtTmccPartialReception, isdbtTestTable=isdbtTestTable, isdbtStatusNotificationEntry=isdbtStatusNotificationEntry, isdbtNitManualVirtualChannel=isdbtNitManualVirtualChannel, isdbtNotifyBasic=isdbtNotifyBasic, isdbtTmccLayerConstellation=isdbtTmccLayerConstellation, isdbtOutTmccLayerSegments=isdbtOutTmccLayerSegments, isdbtOutTmccLayerEntry=isdbtOutTmccLayerEntry, isdbtTest=isdbtTest, isdbtOutTmccPartialReception=isdbtOutTmccPartialReception, isdbtOutTmccMode=isdbtOutTmccMode, isdbtTmccEntry=isdbtTmccEntry, isdbtCfgExcIdx=isdbtCfgExcIdx, isdbtStatusNotificationTable=isdbtStatusNotificationTable, IsdbtGuardInterval=IsdbtGuardInterval, isdbtOutTmccLayerCodeRate=isdbtOutTmccLayerCodeRate, isdbtNitTransportStreamIdSource=isdbtNitTransportStreamIdSource, isdbtTmccLayerIdx=isdbtTmccLayerIdx, IsdbtConstellation=IsdbtConstellation, isdbtOutTmccLayerTimeInterleaver=isdbtOutTmccLayerTimeInterleaver, isdbtConfigurationTable=isdbtConfigurationTable, isdbtNitAreaCodeSource=isdbtNitAreaCodeSource, isdbtOutStatusTable=isdbtOutStatusTable, isdbtStatusNotificationMask=isdbtStatusNotificationMask, rsXx9IsdbtConformance=rsXx9IsdbtConformance, isdbtActiveConfiguration=isdbtActiveConfiguration, isdbtTestEntry=isdbtTestEntry, isdbtOutput=isdbtOutput, isdbtOutTmccLayerConstellation=isdbtOutTmccLayerConstellation, IsdbtLayer=IsdbtLayer, isdbtEquipmentId=isdbtEquipmentId, rsXx9IsdbtCompliances=rsXx9IsdbtCompliances, isdbtBasicCompliance=isdbtBasicCompliance, isdbtCfgCoderSettingsSource=isdbtCfgCoderSettingsSource, isdbtLocalizationEquipmentControl=isdbtLocalizationEquipmentControl, isdbtCfgIipID=isdbtCfgIipID, isdbtCfgTxIdx=isdbtCfgTxIdx, isdbtConfigurationEntry=isdbtConfigurationEntry, isdbtTmccLayerSegments=isdbtTmccLayerSegments, isdbtTestMode=isdbtTestMode, isdbtNitManualAreaCode=isdbtNitManualAreaCode, isdbtNitRestampingTable=isdbtNitRestampingTable, isdbtStatusNotificationIdx=isdbtStatusNotificationIdx, isdbtTmccLayerCodeRate=isdbtTmccLayerCodeRate, isdbtTmccLayerTimeInterleaver=isdbtTmccLayerTimeInterleaver, isdbtStatusNotificationState=isdbtStatusNotificationState, isdbtLocalizationTable=isdbtLocalizationTable, isdbtNitVirtualChannelSource=isdbtNitVirtualChannelSource, isdbtTmccLayerTable=isdbtTmccLayerTable, IsdbtNitRestampingSource=IsdbtNitRestampingSource, isdbtStateTable=isdbtStateTable, isdbtSetup=isdbtSetup, isdbtManualConfiguration=isdbtManualConfiguration, isdbtStatusNotificationPriority=isdbtStatusNotificationPriority, isdbtTmccNext=isdbtTmccNext, isdbtStateEntry=isdbtStateEntry, isdbtLocalizationEntry=isdbtLocalizationEntry, isdbtNitManualNetworkId=isdbtNitManualNetworkId)
