#
# PySNMP MIB module HYTERA-REPEATER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/hytera/HYTERA-REPEATER-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 08:30:55 2024
# On host fv-az1117-967 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, MibIdentifier, Counter32, TimeTicks, Unsigned32, ObjectIdentity, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, iso, private, NotificationType, Bits, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibIdentifier", "Counter32", "TimeTicks", "Unsigned32", "ObjectIdentity", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "iso", "private", "NotificationType", "Bits", "Integer32", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hyteraRepeaterMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 40297))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 40297, 1))
repeater = MibIdentifier((1, 3, 6, 1, 4, 1, 40297, 1, 2))
rptRealTimeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1))
rptControl = MibIdentifier((1, 3, 6, 1, 4, 1, 40297, 1, 2, 2))
rptLog = MibIdentifier((1, 3, 6, 1, 4, 1, 40297, 1, 2, 3))
rptSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 40297, 1, 2, 4))
rptConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5))
rptAlarmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 1))
rptVoltageAlarm = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptVoltageAlarm.setStatus('mandatory')
rptTemperatureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptTemperatureAlarm.setStatus('mandatory')
rptFanAlarm = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptFanAlarm.setStatus('optional')
rptForwardAlarm = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1)).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptForwardAlarm.setStatus('optional')
rptReflectedAlarm = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1)).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptReflectedAlarm.setStatus('optional')
rptVswrAlarm = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptVswrAlarm.setStatus('mandatory')
rptTxPllAlarm = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptTxPllAlarm.setStatus('mandatory')
rptRxPllAlarm = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptRxPllAlarm.setStatus('mandatory')
rptBatteryVoltageAlarm = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptBatteryVoltageAlarm.setStatus('mandatory')
rptDataInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 2))
rptVoltage = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptVoltage.setStatus('mandatory')
rptPaTemprature = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptPaTemprature.setStatus('mandatory')
rptFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptFanSpeed.setStatus('optional')
rptVswr = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptVswr.setStatus('mandatory')
rptTxFwdPower = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 2, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptTxFwdPower.setStatus('mandatory')
rptTxRefPower = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptTxRefPower.setStatus('mandatory')
rptDataInfoBak1 = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 2, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptDataInfoBak1.setStatus('optional')
rptDataInfoBak2 = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 2, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptDataInfoBak2.setStatus('optional')
rptSlot1Rssi = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 2, 9), Integer32().clone(-200)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptSlot1Rssi.setStatus('mandatory')
rptSlot2Rssi = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 2, 10), Integer32().clone(-200)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptSlot2Rssi.setStatus('mandatory')
rptSupplyPowerType = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptSupplyPowerType.setStatus('mandatory')
rptBatteryConnect = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptBatteryConnect.setStatus('mandatory')
rptBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 1, 2, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptBatteryVoltage.setStatus('optional')
rptRestart = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptRestart.setStatus('mandatory')
rptChannelNumber = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptChannelNumber.setStatus('mandatory')
rptChannelType = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptChannelType.setStatus('mandatory')
rptControlObjBak1 = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptControlObjBak1.setStatus('optional')
rptTxPowerLevel = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptTxPowerLevel.setStatus('mandatory')
rptKnockdown = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptKnockdown.setStatus('mandatory')
rptRadioState = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptRadioState.setStatus('mandatory')
rptSnmpTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 2, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptSnmpTrapIp.setStatus('mandatory')
rptSnmpTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(162, 162)).clone(162)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptSnmpTrapPort.setStatus('mandatory')
rptchannelParaTable = MibTable((1, 3, 6, 1, 4, 1, 40297, 1, 2, 2, 10), )
if mibBuilder.loadTexts: rptchannelParaTable.setStatus('mandatory')
channelParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40297, 1, 2, 2, 10, 1), ).setIndexNames((0, "HYTERA-REPEATER-MIB", "channelParaIndex"))
if mibBuilder.loadTexts: channelParaEntry.setStatus('mandatory')
channelParaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelParaIndex.setStatus('mandatory')
actChannelAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 2, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: actChannelAlias.setStatus('mandatory')
actChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 2, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actChannelType.setStatus('mandatory')
actTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 2, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actTxPower.setStatus('mandatory')
actChannelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 2, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actChannelNo.setStatus('mandatory')
actChannelSubNo = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 2, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actChannelSubNo.setStatus('mandatory')
rptForbid = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptForbid.setStatus('mandatory')
logTable = MibTable((1, 3, 6, 1, 4, 1, 40297, 1, 2, 3, 1), )
if mibBuilder.loadTexts: logTable.setStatus('mandatory')
logEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40297, 1, 2, 3, 1, 1), ).setIndexNames((0, "HYTERA-REPEATER-MIB", "logIndex"))
if mibBuilder.loadTexts: logEntry.setStatus('mandatory')
logIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logIndex.setStatus('mandatory')
alarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmName.setStatus('mandatory')
alarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStatus.setStatus('mandatory')
logTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 134217728)).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTime.setStatus('mandatory')
clearLog = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearLog.setStatus('mandatory')
recordCount = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recordCount.setStatus('mandatory')
latestRecordPosition = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latestRecordPosition.setStatus('mandatory')
rptModelName = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptModelName.setStatus('mandatory')
rptModelNo = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptModelNo.setStatus('mandatory')
rptFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 4, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptFirmwareVersion.setStatus('mandatory')
rptRcdbVersion = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 4, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptRcdbVersion.setStatus('mandatory')
rptSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 4, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptSerialNo.setStatus('mandatory')
rptRadioAlias = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 4, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptRadioAlias.setStatus('mandatory')
rptRadioID = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptRadioID.setStatus('mandatory')
rptCurChannelType = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptCurChannelType.setStatus('mandatory')
rptChannelName = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 4, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptChannelName.setStatus('mandatory')
rptCurTxFreq = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 550000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptCurTxFreq.setStatus('mandatory')
rptCurRxFreq = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 550000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptCurRxFreq.setStatus('mandatory')
rptWorkState = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptWorkState.setStatus('mandatory')
rptCurZoneAlias = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 4, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptCurZoneAlias.setStatus('mandatory')
rptBasicSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 1))
powerOn = MibIdentifier((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 1, 1))
designatedPowerOnChn = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: designatedPowerOnChn.setStatus('mandatory')
powerOnChannelNo = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerOnChannelNo.setStatus('mandatory')
microphone = MibIdentifier((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 1, 2))
internalMicGain = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 36)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalMicGain.setStatus('mandatory')
externalMicGain = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 36)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalMicGain.setStatus('mandatory')
multiCTCCDCTable = MibTable((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 1, 3), )
if mibBuilder.loadTexts: multiCTCCDCTable.setStatus('mandatory')
multiCTCCDCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 1, 3, 1), ).setIndexNames((0, "HYTERA-REPEATER-MIB", "ctcssIndex"))
if mibBuilder.loadTexts: multiCTCCDCEntry.setStatus('mandatory')
ctcssIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcssIndex.setStatus('mandatory')
txCtcssFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(19, 492), ValueRangeConstraint(670, 2541), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txCtcssFrequency.setStatus('mandatory')
txCtcssType = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txCtcssType.setStatus('mandatory')
rxCtcssFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(19, 492), ValueRangeConstraint(670, 2541), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxCtcssFrequency.setStatus('mandatory')
rxCtcssType = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxCtcssType.setStatus('mandatory')
audioPriority = MibIdentifier((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 1, 4))
pathPriority = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathPriority.setStatus('mandatory')
pttPriority = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pttPriority.setStatus('mandatory')
jitterBufferLenth = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jitterBufferLenth.setStatus('mandatory')
analogCallHangTime = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 70))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogCallHangTime.setStatus('mandatory')
repeatRequestPriority = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeatRequestPriority.setStatus('mandatory')
rptDigitalChannelSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 2))
digitalChnTable = MibTable((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 2, 1), )
if mibBuilder.loadTexts: digitalChnTable.setStatus('mandatory')
digitalChnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 2, 1, 1), ).setIndexNames((0, "HYTERA-REPEATER-MIB", "digitalChnIndex"))
if mibBuilder.loadTexts: digitalChnEntry.setStatus('mandatory')
digitalChnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalChnIndex.setStatus('mandatory')
digitalColorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalColorCode.setStatus('mandatory')
digitalIpMultisiteConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalIpMultisiteConnect.setStatus('mandatory')
digitalReceiveFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 550000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalReceiveFrequency.setStatus('mandatory')
digitalTransmitFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 550000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalTransmitFrequency.setStatus('mandatory')
digitalTxContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalTxContactName.setStatus('mandatory')
rptAnalogChannelSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 3))
analogChnTable = MibTable((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 3, 1), )
if mibBuilder.loadTexts: analogChnTable.setStatus('mandatory')
analogChnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 3, 1, 1), ).setIndexNames((0, "HYTERA-REPEATER-MIB", "analogChnIndex"))
if mibBuilder.loadTexts: analogChnEntry.setStatus('mandatory')
analogChnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogChnIndex.setStatus('mandatory')
analogCarrierSquelchLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogCarrierSquelchLevel.setStatus('mandatory')
analogMultiCtcCdc = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogMultiCtcCdc.setStatus('mandatory')
analogPreEmp = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogPreEmp.setStatus('mandatory')
analogScrambler = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogScrambler.setStatus('mandatory')
analogFlatAudio = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogFlatAudio.setStatus('mandatory')
analogReceiveFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 550000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogReceiveFrequency.setStatus('mandatory')
analogRxCtcCdcType = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogRxCtcCdcType.setStatus('mandatory')
analogRxCtcss = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(670, 2541), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogRxCtcss.setStatus('mandatory')
analogRxCdcss = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(19, 492), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogRxCdcss.setStatus('mandatory')
analogTransmitFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 550000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogTransmitFrequency.setStatus('mandatory')
analogTxCtcCdcType = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogTxCtcCdcType.setStatus('mandatory')
analogTxCtcss = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(670, 2541), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogTxCtcss.setStatus('mandatory')
analogTxCdcss = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(19, 492), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogTxCdcss.setStatus('mandatory')
rptMixedChannelSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 4))
mixedChnTable = MibTable((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 4, 1), )
if mibBuilder.loadTexts: mixedChnTable.setStatus('mandatory')
mixedChnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 4, 1, 1), ).setIndexNames((0, "HYTERA-REPEATER-MIB", "analogChnIndex"))
if mibBuilder.loadTexts: mixedChnEntry.setStatus('mandatory')
mixedChnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mixedChnIndex.setStatus('mandatory')
mixedCarrierSquelchLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mixedCarrierSquelchLevel.setStatus('mandatory')
mixedTxContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mixedTxContactName.setStatus('mandatory')
mixedIpMultisiteConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mixedIpMultisiteConnect.setStatus('mandatory')
mixedColorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mixedColorCode.setStatus('mandatory')
mixedTxChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mixedTxChannelType.setStatus('mandatory')
mixedPreEmp = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mixedPreEmp.setStatus('mandatory')
mixedScrambler = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mixedScrambler.setStatus('mandatory')
mixedFlatAudio = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mixedFlatAudio.setStatus('mandatory')
mixedMultiCtcCdc = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mixedMultiCtcCdc.setStatus('mandatory')
mixedReceiveFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 550000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mixedReceiveFrequency.setStatus('mandatory')
mixedRxCtcCdcType = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mixedRxCtcCdcType.setStatus('mandatory')
mixedRxCtcss = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(670, 2541), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mixedRxCtcss.setStatus('mandatory')
mixedRxCdcss = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(19, 492), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mixedRxCdcss.setStatus('mandatory')
mixedTransmitFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 550000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mixedTransmitFrequency.setStatus('mandatory')
mixedTxCtcCdcType = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mixedTxCtcCdcType.setStatus('mandatory')
mixedTxCtcss = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(670, 2541), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mixedTxCtcss.setStatus('mandatory')
mixedTxCdcss = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(19, 492), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mixedTxCdcss.setStatus('mandatory')
rptServiceSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5))
groupCallHangTime = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupCallHangTime.setStatus('mandatory')
privateCallHangTime = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: privateCallHangTime.setStatus('mandatory')
emergencyCallHangTime = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emergencyCallHangTime.setStatus('mandatory')
sit = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 120), )).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sit.setStatus('mandatory')
txPreambleDuration = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 144)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPreambleDuration.setStatus('mandatory')
beaconTxMode = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: beaconTxMode.setStatus('mandatory')
beaconDuration = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4, 150), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: beaconDuration.setStatus('mandatory')
beaconInterval = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: beaconInterval.setStatus('mandatory')
multisiteAccessManagement = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multisiteAccessManagement.setStatus('mandatory')
accessManagement = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessManagement.setStatus('mandatory')
multisiteAccessManageTable = MibTable((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 11), )
if mibBuilder.loadTexts: multisiteAccessManageTable.setStatus('mandatory')
multisiteAccessManageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 11, 1), ).setIndexNames((0, "HYTERA-REPEATER-MIB", "mutisiteAccessManageIndex"))
if mibBuilder.loadTexts: multisiteAccessManageEntry.setStatus('mandatory')
multisiteAccessManageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multisiteAccessManageIndex.setStatus('mandatory')
multisiteStartId = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16776415))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multisiteStartId.setStatus('mandatory')
multisiteIdLength = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multisiteIdLength.setStatus('mandatory')
multisiteAccessCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1), ValueRangeConstraint(65535, 65535), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multisiteAccessCallType.setStatus('mandatory')
contactTable = MibTable((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 12), )
if mibBuilder.loadTexts: contactTable.setStatus('mandatory')
contactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 12, 1), ).setIndexNames((0, "HYTERA-REPEATER-MIB", "contactIndex"))
if mibBuilder.loadTexts: contactEntry.setStatus('mandatory')
contactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: contactIndex.setStatus('mandatory')
callAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 12, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callAlias.setStatus('mandatory')
contactCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 2), ValueRangeConstraint(65535, 65535), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactCallType.setStatus('mandatory')
callId = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16776415), ValueRangeConstraint(16777215, 16777215), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callId.setStatus('mandatory')
accessManageTable = MibTable((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 13), )
if mibBuilder.loadTexts: accessManageTable.setStatus('mandatory')
accessManageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 13, 1), ).setIndexNames((0, "HYTERA-REPEATER-MIB", "accessManageIndex"))
if mibBuilder.loadTexts: accessManageEntry.setStatus('mandatory')
accessManageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessManageIndex.setStatus('mandatory')
startId = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16776415))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startId.setStatus('mandatory')
idLength = MibTableColumn((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idLength.setStatus('mandatory')
repeatTOTTime = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 120), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeatTOTTime.setStatus('mandatory')
rerepeatTOTTime = MibScalar((1, 3, 6, 1, 4, 1, 40297, 1, 2, 5, 5, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rerepeatTOTTime.setStatus('mandatory')
mibBuilder.exportSymbols("HYTERA-REPEATER-MIB", sit=sit, mixedTxChannelType=mixedTxChannelType, rptVswrAlarm=rptVswrAlarm, rptAlarmInfo=rptAlarmInfo, digitalIpMultisiteConnect=digitalIpMultisiteConnect, groupCallHangTime=groupCallHangTime, microphone=microphone, repeater=repeater, analogRxCtcCdcType=analogRxCtcCdcType, powerOn=powerOn, rptChannelName=rptChannelName, rptRestart=rptRestart, digitalReceiveFrequency=digitalReceiveFrequency, mixedTxContactName=mixedTxContactName, multisiteAccessCallType=multisiteAccessCallType, rptRcdbVersion=rptRcdbVersion, analogMultiCtcCdc=analogMultiCtcCdc, actTxPower=actTxPower, mixedRxCdcss=mixedRxCdcss, mixedColorCode=mixedColorCode, digitalTxContactName=digitalTxContactName, pathPriority=pathPriority, rptBasicSetting=rptBasicSetting, digitalColorCode=digitalColorCode, multisiteIdLength=multisiteIdLength, rptRadioID=rptRadioID, beaconDuration=beaconDuration, rptDataInfoBak2=rptDataInfoBak2, clearLog=clearLog, rptSerialNo=rptSerialNo, rptDigitalChannelSetting=rptDigitalChannelSetting, analogReceiveFrequency=analogReceiveFrequency, mixedChnEntry=mixedChnEntry, accessManageIndex=accessManageIndex, rptForbid=rptForbid, rptCurTxFreq=rptCurTxFreq, rxCtcssType=rxCtcssType, rptTxPllAlarm=rptTxPllAlarm, rptSlot1Rssi=rptSlot1Rssi, rptCurChannelType=rptCurChannelType, rptFanAlarm=rptFanAlarm, latestRecordPosition=latestRecordPosition, repeatTOTTime=repeatTOTTime, rptBatteryVoltageAlarm=rptBatteryVoltageAlarm, mixedTxCdcss=mixedTxCdcss, rptVoltageAlarm=rptVoltageAlarm, mixedTxCtcss=mixedTxCtcss, rptWorkState=rptWorkState, contactCallType=contactCallType, recordCount=recordCount, digitalChnIndex=digitalChnIndex, rptForwardAlarm=rptForwardAlarm, rptchannelParaTable=rptchannelParaTable, actChannelType=actChannelType, channelParaIndex=channelParaIndex, powerOnChannelNo=powerOnChannelNo, rptSystemInfo=rptSystemInfo, rptVswr=rptVswr, multisiteAccessManageTable=multisiteAccessManageTable, actChannelSubNo=actChannelSubNo, rptBatteryConnect=rptBatteryConnect, rptTemperatureAlarm=rptTemperatureAlarm, rptChannelType=rptChannelType, rptRadioState=rptRadioState, logTime=logTime, product=product, digitalChnTable=digitalChnTable, txCtcssType=txCtcssType, mixedTransmitFrequency=mixedTransmitFrequency, rerepeatTOTTime=rerepeatTOTTime, rptControlObjBak1=rptControlObjBak1, channelParaEntry=channelParaEntry, multiCTCCDCTable=multiCTCCDCTable, privateCallHangTime=privateCallHangTime, logTable=logTable, digitalTransmitFrequency=digitalTransmitFrequency, mixedChnIndex=mixedChnIndex, rptServiceSetting=rptServiceSetting, rptDataInfo=rptDataInfo, beaconInterval=beaconInterval, accessManageEntry=accessManageEntry, rptChannelNumber=rptChannelNumber, mixedFlatAudio=mixedFlatAudio, rptBatteryVoltage=rptBatteryVoltage, rptRadioAlias=rptRadioAlias, analogFlatAudio=analogFlatAudio, rptRxPllAlarm=rptRxPllAlarm, mixedPreEmp=mixedPreEmp, rptLog=rptLog, multisiteAccessManageEntry=multisiteAccessManageEntry, rptDataInfoBak1=rptDataInfoBak1, logIndex=logIndex, logEntry=logEntry, rptKnockdown=rptKnockdown, alarmName=alarmName, multiCTCCDCEntry=multiCTCCDCEntry, analogRxCdcss=analogRxCdcss, accessManageTable=accessManageTable, rptFirmwareVersion=rptFirmwareVersion, audioPriority=audioPriority, designatedPowerOnChn=designatedPowerOnChn, ctcssIndex=ctcssIndex, analogTransmitFrequency=analogTransmitFrequency, mixedReceiveFrequency=mixedReceiveFrequency, digitalChnEntry=digitalChnEntry, rptTxPowerLevel=rptTxPowerLevel, analogChnEntry=analogChnEntry, mixedRxCtcCdcType=mixedRxCtcCdcType, mixedRxCtcss=mixedRxCtcss, analogTxCdcss=analogTxCdcss, mixedMultiCtcCdc=mixedMultiCtcCdc, rptVoltage=rptVoltage, rptControl=rptControl, analogTxCtcCdcType=analogTxCtcCdcType, multisiteAccessManageIndex=multisiteAccessManageIndex, rptCurRxFreq=rptCurRxFreq, alarmStatus=alarmStatus, mixedIpMultisiteConnect=mixedIpMultisiteConnect, pttPriority=pttPriority, actChannelAlias=actChannelAlias, externalMicGain=externalMicGain, analogChnIndex=analogChnIndex, analogPreEmp=analogPreEmp, mixedChnTable=mixedChnTable, rxCtcssFrequency=rxCtcssFrequency, analogCallHangTime=analogCallHangTime, callId=callId, analogTxCtcss=analogTxCtcss, contactTable=contactTable, startId=startId, rptRealTimeInfo=rptRealTimeInfo, actChannelNo=actChannelNo, mixedScrambler=mixedScrambler, analogScrambler=analogScrambler, callAlias=callAlias, rptSupplyPowerType=rptSupplyPowerType, analogRxCtcss=analogRxCtcss, internalMicGain=internalMicGain, analogChnTable=analogChnTable, rptFanSpeed=rptFanSpeed, idLength=idLength, multisiteAccessManagement=multisiteAccessManagement, txPreambleDuration=txPreambleDuration, jitterBufferLenth=jitterBufferLenth, emergencyCallHangTime=emergencyCallHangTime, rptPaTemprature=rptPaTemprature, hyteraRepeaterMIB=hyteraRepeaterMIB, repeatRequestPriority=repeatRequestPriority, multisiteStartId=multisiteStartId, rptAnalogChannelSetting=rptAnalogChannelSetting, rptConfiguration=rptConfiguration, rptReflectedAlarm=rptReflectedAlarm, mixedCarrierSquelchLevel=mixedCarrierSquelchLevel, rptSnmpTrapIp=rptSnmpTrapIp, rptMixedChannelSetting=rptMixedChannelSetting, rptModelName=rptModelName, mixedTxCtcCdcType=mixedTxCtcCdcType, rptTxRefPower=rptTxRefPower, analogCarrierSquelchLevel=analogCarrierSquelchLevel, beaconTxMode=beaconTxMode, contactEntry=contactEntry, rptSnmpTrapPort=rptSnmpTrapPort, accessManagement=accessManagement, txCtcssFrequency=txCtcssFrequency, rptSlot2Rssi=rptSlot2Rssi, contactIndex=contactIndex, rptTxFwdPower=rptTxFwdPower, rptModelNo=rptModelNo, rptCurZoneAlias=rptCurZoneAlias)
