#
# PySNMP MIB module ALPHA-RECTIFIER-SYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/alpha/ALPHA-RECTIFIER-SYS-MIB
# Produced by pysmi-1.1.12 at Thu Sep 26 02:10:03 2024
# On host fv-az1144-917 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
simple, ScaledNumber = mibBuilder.importSymbols("ALPHA-RESOURCE-MIB", "simple", "ScaledNumber")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, Bits, MibIdentifier, IpAddress, ModuleIdentity, ObjectIdentity, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, Counter32, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "MibIdentifier", "IpAddress", "ModuleIdentity", "ObjectIdentity", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "Counter32", "Unsigned32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rectifierSystem = ModuleIdentity((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1))
rectifierSystem.setRevisions(('2019-12-12 00:00', '2017-04-06 00:00', '2015-07-28 00:00', '2015-07-23 00:00', '2015-06-23 00:00',))
if mibBuilder.loadTexts: rectifierSystem.setLastUpdated('201912120000Z')
if mibBuilder.loadTexts: rectifierSystem.setOrganization('Alpha Technologies Ltd.')
rectSysTotalOutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 1), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysTotalOutputCurrent.setStatus('current')
rectSysTotalOutputPower = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 2), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysTotalOutputPower.setStatus('current')
rectSysTotalCapacityInstalledAmps = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 3), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysTotalCapacityInstalledAmps.setStatus('current')
rectSysTotalCapacityInstalledPower = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 4), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysTotalCapacityInstalledPower.setStatus('current')
rectSysAverageRectifierOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 5), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysAverageRectifierOutputVoltage.setStatus('current')
rectSysAverageRectifierACInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 6), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysAverageRectifierACInputVoltage.setStatus('current')
rectSysAveragePhase1Voltage = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 7), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysAveragePhase1Voltage.setStatus('current')
rectSysAveragePhase2Voltage = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 8), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysAveragePhase2Voltage.setStatus('current')
rectSysAveragePhase3Voltage = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 9), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysAveragePhase3Voltage.setStatus('current')
rectSysSystemVoltage = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 10), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysSystemVoltage.setStatus('current')
rectSysTotalLoadCurrent = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 11), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysTotalLoadCurrent.setStatus('current')
rectSysBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 12), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysBatteryVoltage.setStatus('current')
rectSysBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 13), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysBatteryCurrent.setStatus('current')
rectSysBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 14), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysBatteryTemperature.setStatus('current')
rectSysSystemNumber = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 15), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysSystemNumber.setStatus('current')
rectSysEstimatedRequiredCapacityInWatts = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 16), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedRequiredCapacityInWatts.setStatus('current')
rectSysEstimatedRequiredCapacityInAmps = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 17), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedRequiredCapacityInAmps.setStatus('current')
rectSysEstimatedAvailableCapacityInWatts = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 18), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedAvailableCapacityInWatts.setStatus('current')
rectSysEstimatedAvailableCapacityInAmps = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 19), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedAvailableCapacityInAmps.setStatus('current')
rectSysEstimatedRedundantCapacityInWatts = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 20), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedRedundantCapacityInWatts.setStatus('current')
rectSysEstimatedRedundantCapacityInAmps = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 21), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedRedundantCapacityInAmps.setStatus('current')
rectSysEstimatedStandbyCapacityInWatts = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 22), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedStandbyCapacityInWatts.setStatus('current')
rectSysEstimatedStandbyCapacityInAmps = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 23), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedStandbyCapacityInAmps.setStatus('current')
rectSysPowerAveragePower = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 24), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysPowerAveragePower.setStatus('current')
rectSysModulesSupplyingPower = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 25), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysModulesSupplyingPower.setStatus('current')
rectSysModulesInStandby = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 26), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysModulesInStandby.setStatus('current')
rectSysEstimatedCapacityRemainingCurrent = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 28), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedCapacityRemainingCurrent.setStatus('current')
rectSysEstimatedCapacityRemainingPower = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 29), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedCapacityRemainingPower.setStatus('current')
rectSysEstimatedSOCPercent = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 30), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedSOCPercent.setStatus('current')
rectSysEstimatedBatteryRuntime = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 31), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedBatteryRuntime.setStatus('current')
rectSysEstimatedBatteryHealthPercent = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 32), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedBatteryHealthPercent.setStatus('current')
rectNumberOfAcquiredRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 33), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfAcquiredRectifiers.setStatus('current')
rectNumberOfSourcingRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 34), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfSourcingRectifiers.setStatus('current')
rectNumberOfFailedRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 35), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfFailedRectifiers.setStatus('current')
rectNumberOfMinorAlertRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 36), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfMinorAlertRectifiers.setStatus('current')
rectNumberOfCommsLostRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 37), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfCommsLostRectifiers.setStatus('current')
rectNumberOfCommsNormalRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 38), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfCommsNormalRectifiers.setStatus('current')
rectNumberOfACFailedRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 39), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfACFailedRectifiers.setStatus('current')
rectNumberOfRectifiersWithConfigError = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 40), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfRectifiersWithConfigError.setStatus('current')
rectNumberOfRectifiersInPowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 41), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfRectifiersInPowerLimit.setStatus('current')
rectNumberOfRectifiersInCurrentLimit = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 42), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfRectifiersInCurrentLimit.setStatus('current')
rectNumberOfFanFailRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 43), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfFanFailRectifiers.setStatus('current')
rectNumberOfRectifiersInBootloader = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 44), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfRectifiersInBootloader.setStatus('current')
rectMaxRectifierAmbientTemperature = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 45), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectMaxRectifierAmbientTemperature.setStatus('current')
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 100))
compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 100, 1))
compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 100, 1, 1)).setObjects(("ALPHA-RECTIFIER-SYS-MIB", "rectifierGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    compliance = compliance.setStatus('current')
rectifierGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 100, 2))
rectifierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 100, 2, 1)).setObjects(("ALPHA-RECTIFIER-SYS-MIB", "rectSysTotalOutputCurrent"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysTotalOutputPower"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysTotalCapacityInstalledAmps"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysTotalCapacityInstalledPower"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysAverageRectifierOutputVoltage"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysAverageRectifierACInputVoltage"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysAveragePhase1Voltage"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysAveragePhase2Voltage"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysAveragePhase3Voltage"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysSystemVoltage"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysTotalLoadCurrent"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysBatteryVoltage"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysBatteryCurrent"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysBatteryTemperature"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysSystemNumber"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedRequiredCapacityInWatts"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedRequiredCapacityInAmps"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedAvailableCapacityInWatts"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedAvailableCapacityInAmps"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedRedundantCapacityInWatts"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedRedundantCapacityInAmps"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedStandbyCapacityInWatts"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedStandbyCapacityInAmps"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysPowerAveragePower"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysModulesSupplyingPower"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysModulesInStandby"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedCapacityRemainingCurrent"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedCapacityRemainingPower"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedSOCPercent"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedBatteryRuntime"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedBatteryHealthPercent"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfAcquiredRectifiers"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfSourcingRectifiers"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfFailedRectifiers"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfMinorAlertRectifiers"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfCommsLostRectifiers"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfCommsNormalRectifiers"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfACFailedRectifiers"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfRectifiersWithConfigError"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfRectifiersInPowerLimit"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfRectifiersInCurrentLimit"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfFanFailRectifiers"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfRectifiersInBootloader"), ("ALPHA-RECTIFIER-SYS-MIB", "rectMaxRectifierAmbientTemperature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rectifierGroup = rectifierGroup.setStatus('current')
mibBuilder.exportSymbols("ALPHA-RECTIFIER-SYS-MIB", rectSysTotalOutputPower=rectSysTotalOutputPower, rectSysEstimatedBatteryHealthPercent=rectSysEstimatedBatteryHealthPercent, rectNumberOfSourcingRectifiers=rectNumberOfSourcingRectifiers, rectSysEstimatedStandbyCapacityInWatts=rectSysEstimatedStandbyCapacityInWatts, rectNumberOfACFailedRectifiers=rectNumberOfACFailedRectifiers, rectSysEstimatedCapacityRemainingPower=rectSysEstimatedCapacityRemainingPower, rectNumberOfRectifiersInPowerLimit=rectNumberOfRectifiersInPowerLimit, rectSysTotalCapacityInstalledAmps=rectSysTotalCapacityInstalledAmps, PYSNMP_MODULE_ID=rectifierSystem, rectSysAverageRectifierOutputVoltage=rectSysAverageRectifierOutputVoltage, rectNumberOfCommsLostRectifiers=rectNumberOfCommsLostRectifiers, rectNumberOfRectifiersInBootloader=rectNumberOfRectifiersInBootloader, rectSysSystemVoltage=rectSysSystemVoltage, rectNumberOfRectifiersInCurrentLimit=rectNumberOfRectifiersInCurrentLimit, rectSysBatteryVoltage=rectSysBatteryVoltage, rectNumberOfMinorAlertRectifiers=rectNumberOfMinorAlertRectifiers, rectMaxRectifierAmbientTemperature=rectMaxRectifierAmbientTemperature, rectSysEstimatedRedundantCapacityInWatts=rectSysEstimatedRedundantCapacityInWatts, rectSysEstimatedCapacityRemainingCurrent=rectSysEstimatedCapacityRemainingCurrent, rectSysModulesInStandby=rectSysModulesInStandby, rectSysTotalLoadCurrent=rectSysTotalLoadCurrent, rectSysEstimatedAvailableCapacityInAmps=rectSysEstimatedAvailableCapacityInAmps, rectSysAverageRectifierACInputVoltage=rectSysAverageRectifierACInputVoltage, rectSysEstimatedRequiredCapacityInAmps=rectSysEstimatedRequiredCapacityInAmps, rectSysEstimatedRedundantCapacityInAmps=rectSysEstimatedRedundantCapacityInAmps, rectifierGroups=rectifierGroups, rectSysTotalCapacityInstalledPower=rectSysTotalCapacityInstalledPower, rectNumberOfFailedRectifiers=rectNumberOfFailedRectifiers, rectSysBatteryTemperature=rectSysBatteryTemperature, rectSysAveragePhase3Voltage=rectSysAveragePhase3Voltage, rectSysModulesSupplyingPower=rectSysModulesSupplyingPower, rectSysTotalOutputCurrent=rectSysTotalOutputCurrent, rectSysBatteryCurrent=rectSysBatteryCurrent, rectSysEstimatedStandbyCapacityInAmps=rectSysEstimatedStandbyCapacityInAmps, rectifierGroup=rectifierGroup, rectifierSystem=rectifierSystem, rectSysEstimatedBatteryRuntime=rectSysEstimatedBatteryRuntime, rectSysAveragePhase1Voltage=rectSysAveragePhase1Voltage, rectSysSystemNumber=rectSysSystemNumber, rectSysAveragePhase2Voltage=rectSysAveragePhase2Voltage, rectSysEstimatedAvailableCapacityInWatts=rectSysEstimatedAvailableCapacityInWatts, rectSysEstimatedRequiredCapacityInWatts=rectSysEstimatedRequiredCapacityInWatts, rectNumberOfAcquiredRectifiers=rectNumberOfAcquiredRectifiers, conformance=conformance, rectNumberOfFanFailRectifiers=rectNumberOfFanFailRectifiers, rectNumberOfRectifiersWithConfigError=rectNumberOfRectifiersWithConfigError, rectSysEstimatedSOCPercent=rectSysEstimatedSOCPercent, rectNumberOfCommsNormalRectifiers=rectNumberOfCommsNormalRectifiers, compliances=compliances, compliance=compliance, rectSysPowerAveragePower=rectSysPowerAveragePower)
