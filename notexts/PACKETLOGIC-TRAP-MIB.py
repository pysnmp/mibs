#
# PySNMP MIB module PACKETLOGIC-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/procera/PACKETLOGIC-TRAP-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 12:19:59 2024
# On host fv-az573-178 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
packetlogic2, = mibBuilder.importSymbols("PACKETLOGIC-MIB", "packetlogic2")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Bits, Gauge32, iso, NotificationType, IpAddress, TimeTicks, Counter32, ObjectIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "Gauge32", "iso", "NotificationType", "IpAddress", "TimeTicks", "Counter32", "ObjectIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "Integer32")
TextualConvention, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "DisplayString")
pl2Trap = ModuleIdentity((1, 3, 6, 1, 4, 1, 15397, 2, 8))
pl2Trap.setRevisions(('2019-09-12 15:00',))
if mibBuilder.loadTexts: pl2Trap.setLastUpdated('201909121500Z')
if mibBuilder.loadTexts: pl2Trap.setOrganization('Procera Networks, Inc.')
pl2Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 8, 0))
pl2TrapVals = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 8, 1))
pl2ChannelTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 8, 2))
pl2ChannelTrapVals = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 8, 3))
pl2StorageTrapVals = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 8, 4))
pl2ContentLogicTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 8, 5))
pl2ContentLogicHourlyUpdateTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 8, 5, 1))
pl2ContentLogicCategoriesLoadingTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 8, 5, 2))
pl2ContentLogicDatabaseUpdateTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 8, 5, 3))
pl2ContentLogicDatabaseLoadingTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 8, 5, 4))
pl2ContentLogicTrapVals = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 8, 6))
pl2TrapMessage = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pl2TrapMessage.setStatus('current')
pl2TrapOid = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 8, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pl2TrapOid.setStatus('current')
pl2TrapValue = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pl2TrapValue.setStatus('current')
pl2TrapThreshold = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pl2TrapThreshold.setStatus('current')
pl2TrapValue64 = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pl2TrapValue64.setStatus('current')
pl2TrapThreshold64 = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pl2TrapThreshold64.setStatus('current')
channelIndex = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 8, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelIndex.setStatus('current')
channelDescr = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 8, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelDescr.setStatus('current')
channelPort = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 8, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("external", 0), ("internal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelPort.setStatus('current')
prevState = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 8, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("auto", 0), ("hd-10", 1), ("fd-10", 2), ("hd-100", 3), ("fd-100", 4), ("fd-1000", 5), ("fd-10000", 6), ("fd-40000", 7), ("fd-100000", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prevState.setStatus('current')
newState = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 8, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("auto", 0), ("hd-10", 1), ("fd-10", 2), ("hd-100", 3), ("fd-100", 4), ("fd-1000", 5), ("fd-10000", 6), ("fd-40000", 7), ("fd-100000", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: newState.setStatus('current')
pl2ContentLogicDatabase = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 8, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pl2ContentLogicDatabase.setStatus('current')
pl2ContentLogicReason = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 8, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pl2ContentLogicReason.setStatus('current')
pl2TrapGenericMsg = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 0, 1)).setObjects(("PACKETLOGIC-TRAP-MIB", "pl2TrapMessage"))
if mibBuilder.loadTexts: pl2TrapGenericMsg.setStatus('current')
pl2TrapGeneric = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 0, 2))
if mibBuilder.loadTexts: pl2TrapGeneric.setStatus('current')
pl2TrapSystemStatsAlert = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 0, 3)).setObjects(("PACKETLOGIC-TRAP-MIB", "pl2TrapThreshold"), ("PACKETLOGIC-TRAP-MIB", "pl2TrapMessage"), ("PACKETLOGIC-TRAP-MIB", "pl2TrapValue"), ("PACKETLOGIC-TRAP-MIB", "pl2TrapOid"))
if mibBuilder.loadTexts: pl2TrapSystemStatsAlert.setStatus('current')
pl2TrapSystemStatsAlert64 = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 0, 4)).setObjects(("PACKETLOGIC-TRAP-MIB", "pl2TrapThreshold64"), ("PACKETLOGIC-TRAP-MIB", "pl2TrapMessage"), ("PACKETLOGIC-TRAP-MIB", "pl2TrapValue64"), ("PACKETLOGIC-TRAP-MIB", "pl2TrapOid"))
if mibBuilder.loadTexts: pl2TrapSystemStatsAlert64.setStatus('current')
pl2TrapSystemStatsAlertClear = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 0, 5)).setObjects(("PACKETLOGIC-TRAP-MIB", "pl2TrapOid"))
if mibBuilder.loadTexts: pl2TrapSystemStatsAlertClear.setStatus('current')
pl2ChannelStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 2, 1)).setObjects(("PACKETLOGIC-TRAP-MIB", "channelIndex"), ("PACKETLOGIC-TRAP-MIB", "channelDescr"), ("PACKETLOGIC-TRAP-MIB", "channelPort"), ("PACKETLOGIC-TRAP-MIB", "newState"), ("PACKETLOGIC-TRAP-MIB", "prevState"))
if mibBuilder.loadTexts: pl2ChannelStateChanged.setStatus('current')
pl2StorageGenericTrap = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 4, 1)).setObjects(("PACKETLOGIC-TRAP-MIB", "pl2TrapMessage"))
if mibBuilder.loadTexts: pl2StorageGenericTrap.setStatus('current')
pl2StorageBattery = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 4, 2)).setObjects(("PACKETLOGIC-TRAP-MIB", "pl2TrapMessage"))
if mibBuilder.loadTexts: pl2StorageBattery.setStatus('current')
pl2StoragePowerSupply = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 4, 3)).setObjects(("PACKETLOGIC-TRAP-MIB", "pl2TrapMessage"))
if mibBuilder.loadTexts: pl2StoragePowerSupply.setStatus('current')
pl2StoragePhysicalDisk = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 4, 4)).setObjects(("PACKETLOGIC-TRAP-MIB", "pl2TrapMessage"))
if mibBuilder.loadTexts: pl2StoragePhysicalDisk.setStatus('current')
pl2StorageVirtualDisk = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 4, 5)).setObjects(("PACKETLOGIC-TRAP-MIB", "pl2TrapMessage"))
if mibBuilder.loadTexts: pl2StorageVirtualDisk.setStatus('current')
pl2ContentLogicHourlyUpdateStarted = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 5, 1, 1))
if mibBuilder.loadTexts: pl2ContentLogicHourlyUpdateStarted.setStatus('current')
pl2ContentLogicHourlyUpdateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 5, 1, 2))
if mibBuilder.loadTexts: pl2ContentLogicHourlyUpdateCompleted.setStatus('current')
pl2ContentLogicHourlyUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 5, 1, 3)).setObjects(("PACKETLOGIC-TRAP-MIB", "pl2ContentLogicReason"))
if mibBuilder.loadTexts: pl2ContentLogicHourlyUpdateFailed.setStatus('current')
pl2ContentLogicCategoriesLoadingStarted = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 5, 2, 1)).setObjects(("PACKETLOGIC-TRAP-MIB", "pl2ContentLogicDatabase"))
if mibBuilder.loadTexts: pl2ContentLogicCategoriesLoadingStarted.setStatus('current')
pl2ContentLogicCategoriesLoadingCompleted = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 5, 2, 2)).setObjects(("PACKETLOGIC-TRAP-MIB", "pl2ContentLogicDatabase"))
if mibBuilder.loadTexts: pl2ContentLogicCategoriesLoadingCompleted.setStatus('current')
pl2ContentLogicCategoriesLoadingFailed = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 5, 2, 3)).setObjects(("PACKETLOGIC-TRAP-MIB", "pl2ContentLogicDatabase"), ("PACKETLOGIC-TRAP-MIB", "pl2ContentLogicReason"))
if mibBuilder.loadTexts: pl2ContentLogicCategoriesLoadingFailed.setStatus('current')
pl2ContentLogicDatabaseUpdateStarted = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 5, 3, 1)).setObjects(("PACKETLOGIC-TRAP-MIB", "pl2ContentLogicDatabase"))
if mibBuilder.loadTexts: pl2ContentLogicDatabaseUpdateStarted.setStatus('current')
pl2ContentLogicDatabaseUpdateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 5, 3, 2)).setObjects(("PACKETLOGIC-TRAP-MIB", "pl2ContentLogicDatabase"))
if mibBuilder.loadTexts: pl2ContentLogicDatabaseUpdateCompleted.setStatus('current')
pl2ContentLogicDatabaseUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 5, 3, 3)).setObjects(("PACKETLOGIC-TRAP-MIB", "pl2ContentLogicDatabase"), ("PACKETLOGIC-TRAP-MIB", "pl2ContentLogicReason"))
if mibBuilder.loadTexts: pl2ContentLogicDatabaseUpdateFailed.setStatus('current')
pl2ContentLogicDatabaseLoadingStarted = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 5, 4, 1)).setObjects(("PACKETLOGIC-TRAP-MIB", "pl2ContentLogicDatabase"))
if mibBuilder.loadTexts: pl2ContentLogicDatabaseLoadingStarted.setStatus('current')
pl2ContentLogicDatabaseLoadingCompleted = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 5, 4, 2)).setObjects(("PACKETLOGIC-TRAP-MIB", "pl2ContentLogicDatabase"))
if mibBuilder.loadTexts: pl2ContentLogicDatabaseLoadingCompleted.setStatus('current')
pl2ContentLogicDatabaseLoadingFailed = NotificationType((1, 3, 6, 1, 4, 1, 15397, 2, 8, 5, 4, 3)).setObjects(("PACKETLOGIC-TRAP-MIB", "pl2ContentLogicDatabase"), ("PACKETLOGIC-TRAP-MIB", "pl2ContentLogicReason"))
if mibBuilder.loadTexts: pl2ContentLogicDatabaseLoadingFailed.setStatus('current')
mibBuilder.exportSymbols("PACKETLOGIC-TRAP-MIB", pl2ContentLogicCategoriesLoadingTraps=pl2ContentLogicCategoriesLoadingTraps, newState=newState, PYSNMP_MODULE_ID=pl2Trap, pl2TrapSystemStatsAlertClear=pl2TrapSystemStatsAlertClear, pl2ContentLogicDatabaseLoadingCompleted=pl2ContentLogicDatabaseLoadingCompleted, pl2TrapValue64=pl2TrapValue64, pl2TrapThreshold=pl2TrapThreshold, pl2StorageVirtualDisk=pl2StorageVirtualDisk, pl2StorageGenericTrap=pl2StorageGenericTrap, pl2ContentLogicTraps=pl2ContentLogicTraps, pl2ContentLogicCategoriesLoadingFailed=pl2ContentLogicCategoriesLoadingFailed, channelDescr=channelDescr, pl2ContentLogicDatabaseLoadingStarted=pl2ContentLogicDatabaseLoadingStarted, pl2ContentLogicCategoriesLoadingStarted=pl2ContentLogicCategoriesLoadingStarted, pl2TrapGeneric=pl2TrapGeneric, pl2ContentLogicDatabaseLoadingFailed=pl2ContentLogicDatabaseLoadingFailed, pl2ChannelStateChanged=pl2ChannelStateChanged, pl2ContentLogicReason=pl2ContentLogicReason, pl2ContentLogicDatabaseUpdateStarted=pl2ContentLogicDatabaseUpdateStarted, pl2TrapThreshold64=pl2TrapThreshold64, pl2StoragePhysicalDisk=pl2StoragePhysicalDisk, pl2TrapSystemStatsAlert64=pl2TrapSystemStatsAlert64, pl2ChannelTraps=pl2ChannelTraps, pl2StoragePowerSupply=pl2StoragePowerSupply, pl2ContentLogicTrapVals=pl2ContentLogicTrapVals, channelPort=channelPort, pl2StorageBattery=pl2StorageBattery, pl2StorageTrapVals=pl2StorageTrapVals, pl2ContentLogicDatabaseUpdateCompleted=pl2ContentLogicDatabaseUpdateCompleted, pl2ContentLogicHourlyUpdateFailed=pl2ContentLogicHourlyUpdateFailed, pl2ContentLogicDatabase=pl2ContentLogicDatabase, pl2ContentLogicCategoriesLoadingCompleted=pl2ContentLogicCategoriesLoadingCompleted, pl2ContentLogicDatabaseUpdateTraps=pl2ContentLogicDatabaseUpdateTraps, pl2TrapSystemStatsAlert=pl2TrapSystemStatsAlert, pl2TrapVals=pl2TrapVals, pl2TrapGenericMsg=pl2TrapGenericMsg, channelIndex=channelIndex, pl2TrapMessage=pl2TrapMessage, pl2TrapValue=pl2TrapValue, pl2ChannelTrapVals=pl2ChannelTrapVals, prevState=prevState, pl2Traps=pl2Traps, pl2Trap=pl2Trap, pl2ContentLogicHourlyUpdateTraps=pl2ContentLogicHourlyUpdateTraps, pl2ContentLogicDatabaseLoadingTraps=pl2ContentLogicDatabaseLoadingTraps, pl2TrapOid=pl2TrapOid, pl2ContentLogicDatabaseUpdateFailed=pl2ContentLogicDatabaseUpdateFailed, pl2ContentLogicHourlyUpdateCompleted=pl2ContentLogicHourlyUpdateCompleted, pl2ContentLogicHourlyUpdateStarted=pl2ContentLogicHourlyUpdateStarted)
