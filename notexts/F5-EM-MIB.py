#
# PySNMP MIB module F5-EM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/f5/F5-EM-MIB
# Produced by pysmi-1.1.12 at Wed May 29 10:55:36 2024
# On host fv-az1200-312 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
LongDisplayString, bigipGroups, f5, bigipCompliances = mibBuilder.importSymbols("F5-BIGIP-COMMON-MIB", "LongDisplayString", "bigipGroups", "f5", "bigipCompliances")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, MibIdentifier, enterprises, Counter32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, NotificationType, Opaque, Counter64, ModuleIdentity, ObjectIdentity, Unsigned32, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "enterprises", "Counter32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "NotificationType", "Opaque", "Counter64", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "IpAddress", "TimeTicks")
DateAndTime, MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "MacAddress", "TextualConvention", "DisplayString")
enterpriseManagement = ModuleIdentity((1, 3, 6, 1, 4, 1, 3375, 3))
if mibBuilder.loadTexts: enterpriseManagement.setLastUpdated('201202072039Z')
if mibBuilder.loadTexts: enterpriseManagement.setOrganization('F5 Networks, Inc.')
emDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 3, 1))
emDeviceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 3, 2))
emImages = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 3, 3))
emArchives = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 3, 4))
emGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 3, 5))
emAlert = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 3, 6))
emAlerts = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0))
emAlertObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 3, 6, 1))
emAlertConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 0))
emDeviceList = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 3, 1, 1))
deviceNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceNumber.setStatus('current')
deviceEntryTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 3, 1, 1, 2), )
if mibBuilder.loadTexts: deviceEntryTable.setStatus('current')
deviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 3, 1, 1, 2, 1), ).setIndexNames((0, "F5-EM-MIB", "deviceName"))
if mibBuilder.loadTexts: deviceEntry.setStatus('current')
deviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 1, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceName.setStatus('current')
deviceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 1, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceAddressType.setStatus('current')
deviceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 1, 1, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceAddress.setStatus('current')
groupNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupNumber.setStatus('current')
groupEntryTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 3, 2, 2), )
if mibBuilder.loadTexts: groupEntryTable.setStatus('current')
groupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 3, 2, 2, 1), ).setIndexNames((0, "F5-EM-MIB", "groupName"))
if mibBuilder.loadTexts: groupEntry.setStatus('current')
groupName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupName.setStatus('current')
groupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupDescription.setStatus('current')
imageNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageNumber.setStatus('current')
imageEntryTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 3, 3, 2), )
if mibBuilder.loadTexts: imageEntryTable.setStatus('current')
imageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 3, 3, 2, 1), ).setIndexNames((0, "F5-EM-MIB", "imageVersion"))
if mibBuilder.loadTexts: imageEntry.setStatus('current')
imageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageVersion.setStatus('current')
imageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageDescription.setStatus('current')
archiveNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: archiveNumber.setStatus('obsolete')
archiveEntryTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 3, 4, 2), )
if mibBuilder.loadTexts: archiveEntryTable.setStatus('obsolete')
archiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 3, 4, 2, 1), ).setIndexNames((0, "F5-EM-MIB", "archiveSourceDevice"))
if mibBuilder.loadTexts: archiveEntry.setStatus('obsolete')
archiveSourceDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 4, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: archiveSourceDevice.setStatus('obsolete')
archiveProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: archiveProduct.setStatus('obsolete')
archiveVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: archiveVersion.setStatus('obsolete')
archiveTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 4, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: archiveTimeStamp.setStatus('obsolete')
archiveFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: archiveFilename.setStatus('obsolete')
archiveDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 4, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: archiveDescription.setStatus('obsolete')
emMaxConcurrentUpdates = MibScalar((1, 3, 6, 1, 4, 1, 3375, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emMaxConcurrentUpdates.setStatus('obsolete')
emRefreshInterval = MibScalar((1, 3, 6, 1, 4, 1, 3375, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emRefreshInterval.setStatus('obsolete')
emVersion = MibScalar((1, 3, 6, 1, 4, 1, 3375, 3, 5, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emVersion.setStatus('obsolete')
emAlertObjMsg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 3, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emAlertObjMsg.setStatus('current')
emDeviceUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 1)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emDeviceUnreachable.setStatus('current')
emSoftwareInstallComplete = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 2)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emSoftwareInstallComplete.setStatus('current')
emSoftwareInstallFailed = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 3)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emSoftwareInstallFailed.setStatus('current')
emDeviceClockSkew = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 4)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emDeviceClockSkew.setStatus('current')
emDiskUsage = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 5)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emDiskUsage.setStatus('current')
emMemoryUsage = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 6)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emMemoryUsage.setStatus('current')
emHotfixInstallComplete = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 7)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emHotfixInstallComplete.setStatus('current')
emHotfixInstallFailed = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 8)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emHotfixInstallFailed.setStatus('current')
emCpuUsage = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 9)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emCpuUsage.setStatus('current')
emCertificateExpiration = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 10)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emCertificateExpiration.setStatus('current')
emScheduledArchiveFailed = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 11)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emScheduledArchiveFailed.setStatus('current')
emDeviceActiveMode = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 12)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emDeviceActiveMode.setStatus('current')
emDeviceStandbyMode = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 13)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emDeviceStandbyMode.setStatus('current')
emDeviceConfigSync = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 14)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emDeviceConfigSync.setStatus('current')
emRaidDriveFailureDetected = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 15)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emRaidDriveFailureDetected.setStatus('current')
emRaidDriveRebuildComplete = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 16)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emRaidDriveRebuildComplete.setStatus('current')
emHaSyncFailed = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 19)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emHaSyncFailed.setStatus('current')
emASMSigInstallComplete = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 20)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emASMSigInstallComplete.setStatus('current')
emASMSigInstallFailed = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 21)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emASMSigInstallFailed.setStatus('current')
emASMSigUpdateAvailable = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 22)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emASMSigUpdateAvailable.setStatus('current')
emASMSigUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 23)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emASMSigUpdateFailed.setStatus('current')
emPerformanceStorageDays = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 25)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emPerformanceStorageDays.setStatus('current')
emPerformanceStorageCap = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 26)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emPerformanceStorageCap.setStatus('current')
emPerformanceThreshold = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 27)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emPerformanceThreshold.setStatus('current')
emSchedBackupFailed = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 28)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emSchedBackupFailed.setStatus('current')
emStatsCollectionRateCap = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 29)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emStatsCollectionRateCap.setStatus('current')
emDeviceOfflineMode = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 30)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emDeviceOfflineMode.setStatus('current')
emDeviceForcedOfflineMode = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 31)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emDeviceForcedOfflineMode.setStatus('current')
emServiceContractExpiry = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 32)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emServiceContractExpiry.setStatus('current')
emStatsDBConnectivityLost = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 33)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emStatsDBConnectivityLost.setStatus('current')
emGatherServiceContractFailure = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 34)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emGatherServiceContractFailure.setStatus('current')
emDeviceImpaired = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 35)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emDeviceImpaired.setStatus('current')
emStatsDBConnectivityRestored = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 36)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emStatsDBConnectivityRestored.setStatus('current')
emDeviceConfigSettingChanged = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 0, 1)).setObjects(("F5-EM-MIB", "emAlertObjMsg"))
if mibBuilder.loadTexts: emDeviceConfigSettingChanged.setStatus('obsolete')
mibBuilder.exportSymbols("F5-EM-MIB", emSoftwareInstallComplete=emSoftwareInstallComplete, emDeviceList=emDeviceList, archiveVersion=archiveVersion, emSoftwareInstallFailed=emSoftwareInstallFailed, PYSNMP_MODULE_ID=enterpriseManagement, emMaxConcurrentUpdates=emMaxConcurrentUpdates, emVersion=emVersion, imageEntry=imageEntry, groupDescription=groupDescription, emDeviceConfigSync=emDeviceConfigSync, emPerformanceStorageDays=emPerformanceStorageDays, emDeviceStandbyMode=emDeviceStandbyMode, deviceAddressType=deviceAddressType, emDeviceOfflineMode=emDeviceOfflineMode, emDeviceConfigSettingChanged=emDeviceConfigSettingChanged, emASMSigInstallFailed=emASMSigInstallFailed, emHotfixInstallComplete=emHotfixInstallComplete, emImages=emImages, emDiskUsage=emDiskUsage, emASMSigUpdateFailed=emASMSigUpdateFailed, emCpuUsage=emCpuUsage, emGlobals=emGlobals, emRaidDriveRebuildComplete=emRaidDriveRebuildComplete, emStatsCollectionRateCap=emStatsCollectionRateCap, deviceName=deviceName, emRefreshInterval=emRefreshInterval, emAlerts=emAlerts, emServiceContractExpiry=emServiceContractExpiry, emStatsDBConnectivityRestored=emStatsDBConnectivityRestored, imageDescription=imageDescription, emGatherServiceContractFailure=emGatherServiceContractFailure, archiveEntry=archiveEntry, groupEntry=groupEntry, emPerformanceThreshold=emPerformanceThreshold, emSchedBackupFailed=emSchedBackupFailed, emAlertConfigObjects=emAlertConfigObjects, deviceEntryTable=deviceEntryTable, archiveTimeStamp=archiveTimeStamp, emAlert=emAlert, emDeviceUnreachable=emDeviceUnreachable, emASMSigUpdateAvailable=emASMSigUpdateAvailable, emDeviceActiveMode=emDeviceActiveMode, emPerformanceStorageCap=emPerformanceStorageCap, emScheduledArchiveFailed=emScheduledArchiveFailed, archiveDescription=archiveDescription, emDeviceClockSkew=emDeviceClockSkew, emDeviceGroups=emDeviceGroups, deviceEntry=deviceEntry, emStatsDBConnectivityLost=emStatsDBConnectivityLost, deviceAddress=deviceAddress, archiveFilename=archiveFilename, imageVersion=imageVersion, archiveProduct=archiveProduct, emMemoryUsage=emMemoryUsage, emCertificateExpiration=emCertificateExpiration, imageNumber=imageNumber, enterpriseManagement=enterpriseManagement, archiveEntryTable=archiveEntryTable, archiveNumber=archiveNumber, emHaSyncFailed=emHaSyncFailed, emASMSigInstallComplete=emASMSigInstallComplete, emDeviceImpaired=emDeviceImpaired, emDevices=emDevices, emArchives=emArchives, emRaidDriveFailureDetected=emRaidDriveFailureDetected, emAlertObjects=emAlertObjects, emHotfixInstallFailed=emHotfixInstallFailed, groupEntryTable=groupEntryTable, emAlertObjMsg=emAlertObjMsg, archiveSourceDevice=archiveSourceDevice, groupNumber=groupNumber, groupName=groupName, deviceNumber=deviceNumber, imageEntryTable=imageEntryTable, emDeviceForcedOfflineMode=emDeviceForcedOfflineMode)
