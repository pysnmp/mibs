#
# PySNMP MIB module ARRIS-C3-FPD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/arris/ARRIS-C3-FPD-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 11:55:00 2024
# On host fv-az1385-213 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
cmtsC3, = mibBuilder.importSymbols("ARRIS-MIB", "cmtsC3")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Unsigned32, TimeTicks, enterprises, MibIdentifier, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, Bits, ModuleIdentity, Counter64, NotificationType, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "enterprises", "MibIdentifier", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "Bits", "ModuleIdentity", "Counter64", "NotificationType", "ObjectIdentity", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cmtsC3FPDMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3))
if mibBuilder.loadTexts: cmtsC3FPDMIB.setLastUpdated('200308200000Z')
if mibBuilder.loadTexts: cmtsC3FPDMIB.setOrganization('Arris International')
dcxFPDObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1))
dcxFPDMsgTable = MibTable((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 1), )
if mibBuilder.loadTexts: dcxFPDMsgTable.setStatus('current')
dcxFPDMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 1, 1), ).setIndexNames((0, "ARRIS-C3-FPD-MIB", "dcxFPDMsgIndex"))
if mibBuilder.loadTexts: dcxFPDMsgEntry.setStatus('current')
dcxFPDMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dcxFPDMsgIndex.setStatus('current')
dcxFPDMsgString = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxFPDMsgString.setStatus('current')
dcxFPDControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 2))
dcxFPDAttachedStatus = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("attached", 1), ("detached", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxFPDAttachedStatus.setStatus('current')
dcxFPDPowerStatus1 = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxFPDPowerStatus1.setStatus('current')
dcxFPDPowerStatus2 = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxFPDPowerStatus2.setStatus('current')
dcxFPDTemp1Status = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxFPDTemp1Status.setStatus('current')
dcxFPDTemp2Status = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxFPDTemp2Status.setStatus('current')
dcxFPDTemp3Status = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxFPDTemp3Status.setStatus('current')
dcxFPDTemp4Status = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxFPDTemp4Status.setStatus('current')
dcxFPDFan1Status = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rotating", 1), ("badRotating", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxFPDFan1Status.setStatus('current')
dcxFPDFan2Status = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rotating", 1), ("badRotating", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxFPDFan2Status.setStatus('current')
dcxFPDFan3Status = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rotating", 1), ("badRotating", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxFPDFan3Status.setStatus('current')
dcxFPDFan4Status = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rotating", 1), ("badRotating", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxFPDFan4Status.setStatus('current')
dcxFPDFan5Status = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rotating", 1), ("badRotating", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxFPDFan5Status.setStatus('current')
dcxFPDFan6Status = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rotating", 1), ("badRotating", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxFPDFan6Status.setStatus('current')
dcxFPDFanUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxFPDFanUpperLimit.setStatus('current')
dcxFPDFanLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxFPDFanLowerLimit.setStatus('current')
dcxFPDLCDContrast = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxFPDLCDContrast.setStatus('current')
dcxFPDLedSetStatus = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxFPDLedSetStatus.setStatus('current')
dcxFPDHwRevision = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxFPDHwRevision.setStatus('current')
dcxFPDSwRevision = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxFPDSwRevision.setStatus('current')
dcxFPDTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 3))
dcxFPDAttached = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 3, 1))
if mibBuilder.loadTexts: dcxFPDAttached.setStatus('current')
dcxFPDDetached = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 3, 2))
if mibBuilder.loadTexts: dcxFPDDetached.setStatus('current')
dcxFPDFan1Fail = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 3, 3))
if mibBuilder.loadTexts: dcxFPDFan1Fail.setStatus('current')
dcxFPDFan1FailClr = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 3, 4))
if mibBuilder.loadTexts: dcxFPDFan1FailClr.setStatus('current')
dcxFPDFan2Fail = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 3, 5))
if mibBuilder.loadTexts: dcxFPDFan2Fail.setStatus('current')
dcxFPDFan2FailClr = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 3, 6))
if mibBuilder.loadTexts: dcxFPDFan2FailClr.setStatus('current')
dcxFPDFan3Fail = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 3, 7))
if mibBuilder.loadTexts: dcxFPDFan3Fail.setStatus('current')
dcxFPDFan3FailClr = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 3, 8))
if mibBuilder.loadTexts: dcxFPDFan3FailClr.setStatus('current')
dcxFPDFan4Fail = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 3, 9))
if mibBuilder.loadTexts: dcxFPDFan4Fail.setStatus('current')
dcxFPDFan4FailClr = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 3, 10))
if mibBuilder.loadTexts: dcxFPDFan4FailClr.setStatus('current')
dcxFPDFan5Fail = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 3, 11))
if mibBuilder.loadTexts: dcxFPDFan5Fail.setStatus('current')
dcxFPDFan5FailClr = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 3, 12))
if mibBuilder.loadTexts: dcxFPDFan5FailClr.setStatus('current')
dcxFPDFan6Fail = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 3, 13))
if mibBuilder.loadTexts: dcxFPDFan6Fail.setStatus('current')
dcxFPDFan6FailClr = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 3, 14))
if mibBuilder.loadTexts: dcxFPDFan6FailClr.setStatus('current')
dcxFPDPwr1Fail = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 3, 15))
if mibBuilder.loadTexts: dcxFPDPwr1Fail.setStatus('current')
dcxFPDPwr1FailClr = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 3, 16))
if mibBuilder.loadTexts: dcxFPDPwr1FailClr.setStatus('current')
dcxFPDPwr2Fail = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 3, 17))
if mibBuilder.loadTexts: dcxFPDPwr2Fail.setStatus('current')
dcxFPDPwr2FailClr = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 3, 18))
if mibBuilder.loadTexts: dcxFPDPwr2FailClr.setStatus('current')
dcxFPDTempOkay = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 3, 19))
if mibBuilder.loadTexts: dcxFPDTempOkay.setStatus('current')
dcxFPDTempBad = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 3, 20))
if mibBuilder.loadTexts: dcxFPDTempBad.setStatus('current')
dcxFPDTempCritical = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 3, 21))
if mibBuilder.loadTexts: dcxFPDTempCritical.setStatus('current')
dcxFPDConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 4))
dcxFPDCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 4, 1))
dcxFPDGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 4, 2))
dcxFPDCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 4, 1, 1)).setObjects(("ARRIS-C3-FPD-MIB", "dcxFPDMsgGroup"), ("ARRIS-C3-FPD-MIB", "dcxFPDControlConfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dcxFPDCompliance = dcxFPDCompliance.setStatus('current')
dcxFPDMsgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 4, 2, 1)).setObjects(("ARRIS-C3-FPD-MIB", "dcxFPDMsgString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dcxFPDMsgGroup = dcxFPDMsgGroup.setStatus('current')
dcxFPDControlConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 3, 1, 4, 2, 2)).setObjects(("ARRIS-C3-FPD-MIB", "dcxFPDAttachedStatus"), ("ARRIS-C3-FPD-MIB", "dcxFPDPowerStatus1"), ("ARRIS-C3-FPD-MIB", "dcxFPDPowerStatus2"), ("ARRIS-C3-FPD-MIB", "dcxFPDTemp1Status"), ("ARRIS-C3-FPD-MIB", "dcxFPDTemp2Status"), ("ARRIS-C3-FPD-MIB", "dcxFPDTemp3Status"), ("ARRIS-C3-FPD-MIB", "dcxFPDTemp4Status"), ("ARRIS-C3-FPD-MIB", "dcxFPDFan1Status"), ("ARRIS-C3-FPD-MIB", "dcxFPDFan2Status"), ("ARRIS-C3-FPD-MIB", "dcxFPDFan3Status"), ("ARRIS-C3-FPD-MIB", "dcxFPDFan4Status"), ("ARRIS-C3-FPD-MIB", "dcxFPDFan5Status"), ("ARRIS-C3-FPD-MIB", "dcxFPDFan6Status"), ("ARRIS-C3-FPD-MIB", "dcxFPDFanUpperLimit"), ("ARRIS-C3-FPD-MIB", "dcxFPDFanLowerLimit"), ("ARRIS-C3-FPD-MIB", "dcxFPDLCDContrast"), ("ARRIS-C3-FPD-MIB", "dcxFPDLedSetStatus"), ("ARRIS-C3-FPD-MIB", "dcxFPDHwRevision"), ("ARRIS-C3-FPD-MIB", "dcxFPDSwRevision"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dcxFPDControlConfGroup = dcxFPDControlConfGroup.setStatus('current')
mibBuilder.exportSymbols("ARRIS-C3-FPD-MIB", dcxFPDFan6FailClr=dcxFPDFan6FailClr, dcxFPDFan3Status=dcxFPDFan3Status, dcxFPDTemp1Status=dcxFPDTemp1Status, dcxFPDDetached=dcxFPDDetached, dcxFPDLCDContrast=dcxFPDLCDContrast, dcxFPDFan2Status=dcxFPDFan2Status, dcxFPDFan1Status=dcxFPDFan1Status, dcxFPDFan5Fail=dcxFPDFan5Fail, dcxFPDTempCritical=dcxFPDTempCritical, dcxFPDFan4Status=dcxFPDFan4Status, dcxFPDPwr2FailClr=dcxFPDPwr2FailClr, dcxFPDPowerStatus2=dcxFPDPowerStatus2, dcxFPDGroups=dcxFPDGroups, dcxFPDFan5FailClr=dcxFPDFan5FailClr, dcxFPDFan1Fail=dcxFPDFan1Fail, dcxFPDFan1FailClr=dcxFPDFan1FailClr, dcxFPDFan2FailClr=dcxFPDFan2FailClr, dcxFPDFan4FailClr=dcxFPDFan4FailClr, dcxFPDPwr2Fail=dcxFPDPwr2Fail, dcxFPDTempBad=dcxFPDTempBad, dcxFPDMsgEntry=dcxFPDMsgEntry, dcxFPDControlGroup=dcxFPDControlGroup, dcxFPDLedSetStatus=dcxFPDLedSetStatus, cmtsC3FPDMIB=cmtsC3FPDMIB, dcxFPDFanLowerLimit=dcxFPDFanLowerLimit, dcxFPDPowerStatus1=dcxFPDPowerStatus1, dcxFPDHwRevision=dcxFPDHwRevision, dcxFPDFan4Fail=dcxFPDFan4Fail, dcxFPDControlConfGroup=dcxFPDControlConfGroup, dcxFPDMsgString=dcxFPDMsgString, dcxFPDTemp4Status=dcxFPDTemp4Status, dcxFPDFan3FailClr=dcxFPDFan3FailClr, dcxFPDObjects=dcxFPDObjects, dcxFPDFan6Status=dcxFPDFan6Status, PYSNMP_MODULE_ID=cmtsC3FPDMIB, dcxFPDFan5Status=dcxFPDFan5Status, dcxFPDPwr1FailClr=dcxFPDPwr1FailClr, dcxFPDConformance=dcxFPDConformance, dcxFPDCompliance=dcxFPDCompliance, dcxFPDFan3Fail=dcxFPDFan3Fail, dcxFPDTemp3Status=dcxFPDTemp3Status, dcxFPDFan6Fail=dcxFPDFan6Fail, dcxFPDMsgGroup=dcxFPDMsgGroup, dcxFPDAttached=dcxFPDAttached, dcxFPDTrapGroup=dcxFPDTrapGroup, dcxFPDTempOkay=dcxFPDTempOkay, dcxFPDFanUpperLimit=dcxFPDFanUpperLimit, dcxFPDFan2Fail=dcxFPDFan2Fail, dcxFPDPwr1Fail=dcxFPDPwr1Fail, dcxFPDCompliances=dcxFPDCompliances, dcxFPDMsgIndex=dcxFPDMsgIndex, dcxFPDTemp2Status=dcxFPDTemp2Status, dcxFPDMsgTable=dcxFPDMsgTable, dcxFPDAttachedStatus=dcxFPDAttachedStatus, dcxFPDSwRevision=dcxFPDSwRevision)
