#
# PySNMP MIB module PLUG-POWER-ESERIES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/plugpower/PLUG-POWER-ESERIES-MIB
# Produced by pysmi-1.1.12 at Tue Jun 25 14:16:02 2024
# On host fv-az837-278 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
iso, Gauge32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, Integer32, Bits, ModuleIdentity, NotificationType, enterprises, IpAddress, ObjectIdentity, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "Integer32", "Bits", "ModuleIdentity", "NotificationType", "enterprises", "IpAddress", "ObjectIdentity", "Counter32", "MibIdentifier")
DisplayString, AutonomousType, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "AutonomousType", "TextualConvention")
plugPowerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 17022))
plugPowerMIB.setRevisions(('2016-03-03 00:00',))
if mibBuilder.loadTexts: plugPowerMIB.setLastUpdated('201603030000Z')
if mibBuilder.loadTexts: plugPowerMIB.setOrganization('Plug Power, Inc')
class PositiveInteger(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class NonNegativeInteger(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class FloatingPointNumber(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

fuelCellSys = MibIdentifier((1, 3, 6, 1, 4, 1, 17022, 1))
fcsTSeries = MibIdentifier((1, 3, 6, 1, 4, 1, 17022, 1, 1))
fcsESeries = MibIdentifier((1, 3, 6, 1, 4, 1, 17022, 1, 2))
fcsE2Gen2 = MibIdentifier((1, 3, 6, 1, 4, 1, 17022, 1, 3))
fcsEObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1))
fcsEMain = MibIdentifier((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1))
fcsEMainManufacturerModel = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainManufacturerModel.setStatus('current')
fcsEMainMIBVersion010102 = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainMIBVersion010102.setStatus('current')
fcsEMainName = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEMainName.setStatus('current')
fcsEMainLocation = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEMainLocation.setStatus('current')
fcsEMainDate = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEMainDate.setStatus('current')
fcsEMainTime = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEMainTime.setStatus('current')
fcsEMainAlarms = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainAlarms.setStatus('current')
fcsEMainSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainSystemStatus.setStatus('current')
fcsEMainChassisSerNum = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainChassisSerNum.setStatus('current')
fcsEMainCommCardVersion = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainCommCardVersion.setStatus('current')
fcsEMainConverterVersion = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainConverterVersion.setStatus('current')
fcsEMainPower = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainPower.setStatus('current')
fcsEMainPressurePSI = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainPressurePSI.setStatus('current')
fcsEMainHeater = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainHeater.setStatus('current')
fcsEMainLastRun = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainLastRun.setStatus('current')
fcsEMainTotalTime = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainTotalTime.setStatus('current')
fcsEMainKilowattHours = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainKilowattHours.setStatus('current')
fcsEMainSystemRuns = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainSystemRuns.setStatus('current')
fcsEMainChassisTemp = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainChassisTemp.setStatus('current')
fcsEMainBleedTempSensor = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEMainBleedTempSensor.setStatus('current')
fcsEMainResetSystem = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEMainResetSystem.setStatus('current')
fcsEMainVolts = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainVolts.setStatus('current')
fcsEMainAmps = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainAmps.setStatus('current')
fcsEMainWatts = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainWatts.setStatus('current')
fcsERun = MibIdentifier((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2))
fcsERunStartStop = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("start", 1), ("stop", 2), ("busy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunStartStop.setStatus('current')
fcsERunSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsERunSystemStatus.setStatus('current')
fcsERunStartStatus = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsERunStartStatus.setStatus('current')
fcsERunFloatVolt = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunFloatVolt.setStatus('current')
fcsERunLowVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunLowVoltThreshold.setStatus('current')
fcsERunLowVoltStartMode = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("float", 2), ("maintain", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunLowVoltStartMode.setStatus('current')
fcsERunLowVoltTimer = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 240))).clone(namedValues=NamedValues(("minutes005", 5), ("minutes010", 10), ("minutes015", 15), ("minutes020", 20), ("minutes025", 25), ("minutes030", 30), ("minutes035", 35), ("minutes040", 40), ("minutes045", 45), ("minutes050", 50), ("minutes055", 55), ("minutes060", 60), ("minutes065", 65), ("minutes070", 70), ("minutes075", 75), ("minutes080", 80), ("minutes085", 85), ("minutes090", 90), ("minutes095", 95), ("minutes100", 100), ("minutes105", 105), ("minutes110", 110), ("minutes115", 115), ("minutes120", 120), ("minutes240", 240)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunLowVoltTimer.setStatus('current')
fcsERunLowVoltageFloatTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsERunLowVoltageFloatTimeOut.setStatus('current')
fcsERunContactStartDelay = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunContactStartDelay.setStatus('current')
fcsERunContactStartTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsERunContactStartTimeOut.setStatus('current')
fcsERunPower = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsERunPower.setStatus('current')
fcsERunPressurePSI = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsERunPressurePSI.setStatus('current')
fcsERunLowH2PressureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunLowH2PressureAlarm.setStatus('current')
fcsERunLowH2PressureAlert = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunLowH2PressureAlert.setStatus('current')
fcsERunLowH2PressureAlertStatus = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsERunLowH2PressureAlertStatus.setStatus('current')
fcsERunAuxOutAssigned = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lowH2Alert", 1), ("auxInput", 2), ("exercise", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunAuxOutAssigned.setStatus('current')
fcsERunPowerLimiting = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("percent020", 2), ("percent030", 3), ("percent040", 4), ("percent050", 5), ("percent060", 6), ("percent070", 7), ("percent080", 8), ("percent090", 9), ("percent100", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunPowerLimiting.setStatus('current')
fcsERunClearNoPressureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunClearNoPressureAlarm.setStatus('current')
fcsERunSystemLockTime = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunSystemLockTime.setStatus('current')
fcsERunSystemLockTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsERunSystemLockTimeOut.setStatus('current')
fcsERunLockSystem = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lock", 1), ("unlock", 2), ("locked", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunLockSystem.setStatus('current')
fcsERunAuxInAssigned = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("nothing", 1), ("lock", 2), ("door", 3), ("extLd1-2k", 4), ("extLd1-3k", 5), ("extLd2", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunAuxInAssigned.setStatus('current')
fcsERunVolts = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsERunVolts.setStatus('current')
fcsERunAmps = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsERunAmps.setStatus('current')
fcsERunWatts = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsERunWatts.setStatus('current')
fcsEExercise = MibIdentifier((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 3))
fcsEExerciseManualExercise = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("start", 1), ("stop", 2), ("busy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEExerciseManualExercise.setStatus('current')
fcsEExerciseExerciseMode = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("autoSchedule", 1), ("numOfDays", 2), ("dayOfMonth", 3), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEExerciseExerciseMode.setStatus('current')
fcsEExerciseNumOfDaysOrDayOfMonth = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEExerciseNumOfDaysOrDayOfMonth.setStatus('current')
fcsEExerciseTimeOfDay = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("at-0-AM", 1), ("at-1-AM", 2), ("at-2-AM", 3), ("at-3-AM", 4), ("at-4-AM", 5), ("at-5-AM", 6), ("at-6-AM", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEExerciseTimeOfDay.setStatus('current')
fcsEExerciseSetNextExerciseDate = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEExerciseSetNextExerciseDate.setStatus('current')
fcsEExerciseNextExerciseDate = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEExerciseNextExerciseDate.setStatus('current')
fcsEExerciseCond1StartStop = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("start", 1), ("stop", 2), ("busy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEExerciseCond1StartStop.setStatus('current')
fcsEAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 4))
fcsEAlarms = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEAlarms.setStatus('current')
fcsEAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 4, 2), )
if mibBuilder.loadTexts: fcsEAlarmTable.setStatus('current')
fcsEAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 4, 2, 1), ).setIndexNames((0, "PLUG-POWER-ESERIES-MIB", "fcsEAlarmId"))
if mibBuilder.loadTexts: fcsEAlarmEntry.setStatus('current')
fcsEAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 4, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: fcsEAlarmId.setStatus('current')
fcsEAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 4, 2, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEAlarmDescr.setStatus('current')
fcsEAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("major", 1), ("minor", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEAlarmType.setStatus('current')
fcsEAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEAlarmTime.setStatus('current')
fcsESystemAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5))
fcsEAlarmNoCurrentAlarms = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 0))
if mibBuilder.loadTexts: fcsEAlarmNoCurrentAlarms.setStatus('current')
fcsMJAlarmVerMismatch = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 1))
if mibBuilder.loadTexts: fcsMJAlarmVerMismatch.setStatus('current')
fcsMJAlarmTermVoltsLow = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 2))
if mibBuilder.loadTexts: fcsMJAlarmTermVoltsLow.setStatus('current')
fcsMJAlarmTermVoltsHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 3))
if mibBuilder.loadTexts: fcsMJAlarmTermVoltsHigh.setStatus('current')
fcsMJAlarmNoH2Pressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 4))
if mibBuilder.loadTexts: fcsMJAlarmNoH2Pressure.setStatus('current')
fcsMJAlarmCommLinkDown = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 5))
if mibBuilder.loadTexts: fcsMJAlarmCommLinkDown.setStatus('current')
fcsMJAlarmSafetyCheckFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 6))
if mibBuilder.loadTexts: fcsMJAlarmSafetyCheckFail.setStatus('current')
fcsMJAlarmH2SensorTopLtHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 7))
if mibBuilder.loadTexts: fcsMJAlarmH2SensorTopLtHigh.setStatus('current')
fcsMJAlarmH2SensorBotRtHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 8))
if mibBuilder.loadTexts: fcsMJAlarmH2SensorBotRtHigh.setStatus('current')
fcsMJAlarmH2SensorTopLtFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 9))
if mibBuilder.loadTexts: fcsMJAlarmH2SensorTopLtFail.setStatus('current')
fcsMJAlarmH2SensorBotRtFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 10))
if mibBuilder.loadTexts: fcsMJAlarmH2SensorBotRtFail.setStatus('current')
fcsMJAlarmSafetyFanFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 11))
if mibBuilder.loadTexts: fcsMJAlarmSafetyFanFail.setStatus('current')
fcsMJAlarmSafetyTempFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 12))
if mibBuilder.loadTexts: fcsMJAlarmSafetyTempFail.setStatus('current')
fcsMJAlarmModOpenCircuitVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 13))
if mibBuilder.loadTexts: fcsMJAlarmModOpenCircuitVoltage.setStatus('current')
fcsMJAlarmModShortedCircuitVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 14))
if mibBuilder.loadTexts: fcsMJAlarmModShortedCircuitVoltage.setStatus('current')
fcsMJAlarmModTooHighVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 15))
if mibBuilder.loadTexts: fcsMJAlarmModTooHighVoltage.setStatus('current')
fcsMJAlarmConverterID = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 16))
if mibBuilder.loadTexts: fcsMJAlarmConverterID.setStatus('current')
fcsMJAllModTempSensorsFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 17))
if mibBuilder.loadTexts: fcsMJAllModTempSensorsFailed.setStatus('current')
fcsMJAlarmSystemIsDown = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 18))
if mibBuilder.loadTexts: fcsMJAlarmSystemIsDown.setStatus('current')
fcsMJAlarmModsTooCold = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 19))
if mibBuilder.loadTexts: fcsMJAlarmModsTooCold.setStatus('current')
fcsMNAlarmModTopFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 20))
if mibBuilder.loadTexts: fcsMNAlarmModTopFailed.setStatus('current')
fcsMNAlarmMod2Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 21))
if mibBuilder.loadTexts: fcsMNAlarmMod2Failed.setStatus('current')
fcsMNAlarmMod3Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 22))
if mibBuilder.loadTexts: fcsMNAlarmMod3Failed.setStatus('current')
fcsMNAlarmModBotFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 23))
if mibBuilder.loadTexts: fcsMNAlarmModBotFailed.setStatus('current')
fcsMNAlarmH2SensorTopLtLow = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 24))
if mibBuilder.loadTexts: fcsMNAlarmH2SensorTopLtLow.setStatus('current')
fcsMNAlarmH2SensorBotRtLow = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 25))
if mibBuilder.loadTexts: fcsMNAlarmH2SensorBotRtLow.setStatus('current')
fcsMNAlarmBleedTempSensor = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 26))
if mibBuilder.loadTexts: fcsMNAlarmBleedTempSensor.setStatus('current')
fcsMNAlarmModTopLtTempSensor = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 27))
if mibBuilder.loadTexts: fcsMNAlarmModTopLtTempSensor.setStatus('current')
fcsMNAlarmModTopRtTempSensor = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 28))
if mibBuilder.loadTexts: fcsMNAlarmModTopRtTempSensor.setStatus('current')
fcsMNAlarmModTwoLtTempSensor = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 29))
if mibBuilder.loadTexts: fcsMNAlarmModTwoLtTempSensor.setStatus('current')
fcsMNAlarmModTwoRtTempSensor = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 30))
if mibBuilder.loadTexts: fcsMNAlarmModTwoRtTempSensor.setStatus('current')
fcsMNAlarmModThreeLtTempSensor = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 31))
if mibBuilder.loadTexts: fcsMNAlarmModThreeLtTempSensor.setStatus('current')
fcsMNAlarmModThreeRtTempSensor = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 32))
if mibBuilder.loadTexts: fcsMNAlarmModThreeRtTempSensor.setStatus('current')
fcsMNAlarmModBotLtTempSensor = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 33))
if mibBuilder.loadTexts: fcsMNAlarmModBotLtTempSensor.setStatus('current')
fcsMNAlarmModBotRtTempSensor = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 34))
if mibBuilder.loadTexts: fcsMNAlarmModBotRtTempSensor.setStatus('current')
fcsMNAlarmExtFan1Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 35))
if mibBuilder.loadTexts: fcsMNAlarmExtFan1Failed.setStatus('current')
fcsMNAlarmExtFan2Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 36))
if mibBuilder.loadTexts: fcsMNAlarmExtFan2Failed.setStatus('current')
fcsMNAlarmExtFan3Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 37))
if mibBuilder.loadTexts: fcsMNAlarmExtFan3Failed.setStatus('current')
fcsMNAlarmExtFan4Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 38))
if mibBuilder.loadTexts: fcsMNAlarmExtFan4Failed.setStatus('current')
fcsMNAlarmExtFan5Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 39))
if mibBuilder.loadTexts: fcsMNAlarmExtFan5Failed.setStatus('current')
fcsMNAlarmExtFan6Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 40))
if mibBuilder.loadTexts: fcsMNAlarmExtFan6Failed.setStatus('current')
fcsMNAlarmRecFan1Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 41))
if mibBuilder.loadTexts: fcsMNAlarmRecFan1Failed.setStatus('current')
fcsMNAlarmRecFan2Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 42))
if mibBuilder.loadTexts: fcsMNAlarmRecFan2Failed.setStatus('current')
fcsMNAlarmRecFan3Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 43))
if mibBuilder.loadTexts: fcsMNAlarmRecFan3Failed.setStatus('current')
fcsMNAlarmRecFan4Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 44))
if mibBuilder.loadTexts: fcsMNAlarmRecFan4Failed.setStatus('current')
fcsMNAlarmRecFan5Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 45))
if mibBuilder.loadTexts: fcsMNAlarmRecFan5Failed.setStatus('current')
fcsMNAlarmRecFan6Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 46))
if mibBuilder.loadTexts: fcsMNAlarmRecFan6Failed.setStatus('current')
fcsMNAlarmRecFan7Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 47))
if mibBuilder.loadTexts: fcsMNAlarmRecFan7Failed.setStatus('current')
fcsMNAlarmRecFan8Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 48))
if mibBuilder.loadTexts: fcsMNAlarmRecFan8Failed.setStatus('current')
fcsMNAlarmRecFan9Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 49))
if mibBuilder.loadTexts: fcsMNAlarmRecFan9Failed.setStatus('current')
fcsMNAlarmRecFan10Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 50))
if mibBuilder.loadTexts: fcsMNAlarmRecFan10Failed.setStatus('current')
fcsMNAlarmConverterCheckSumError = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 51))
if mibBuilder.loadTexts: fcsMNAlarmConverterCheckSumError.setStatus('current')
fcsMJAlarmModsTooHotToRun = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 52))
if mibBuilder.loadTexts: fcsMJAlarmModsTooHotToRun.setStatus('current')
fcsMJAlarmSystemLocked = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 53))
if mibBuilder.loadTexts: fcsMJAlarmSystemLocked.setStatus('current')
fcsMNAlarmCommCardCheckSumError = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 54))
if mibBuilder.loadTexts: fcsMNAlarmCommCardCheckSumError.setStatus('current')
fcsMNAlarmWebPagesCheckSumError = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 55))
if mibBuilder.loadTexts: fcsMNAlarmWebPagesCheckSumError.setStatus('current')
fcsMJAlarmTesting = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 56))
if mibBuilder.loadTexts: fcsMJAlarmTesting.setStatus('current')
fcsMNAlarmTesting = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 57))
if mibBuilder.loadTexts: fcsMNAlarmTesting.setStatus('current')
fcsMNAlarmLowH2Pressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 58))
if mibBuilder.loadTexts: fcsMNAlarmLowH2Pressure.setStatus('current')
fcsMNAlarmDoorOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 59))
if mibBuilder.loadTexts: fcsMNAlarmDoorOpen.setStatus('current')
fcsMNAlarmSystemDateInvalid = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 60))
if mibBuilder.loadTexts: fcsMNAlarmSystemDateInvalid.setStatus('current')
fcsETraps = MibIdentifier((1, 3, 6, 1, 4, 1, 17022, 1, 2, 2))
fcsETrapMJAlarmEntryAdded = NotificationType((1, 3, 6, 1, 4, 1, 17022, 1, 2, 2, 1)).setObjects(("PLUG-POWER-ESERIES-MIB", "fcsEAlarmDescr"))
if mibBuilder.loadTexts: fcsETrapMJAlarmEntryAdded.setStatus('current')
fcsETrapMJAlarmEntryRemoved = NotificationType((1, 3, 6, 1, 4, 1, 17022, 1, 2, 2, 2)).setObjects(("PLUG-POWER-ESERIES-MIB", "fcsEAlarmDescr"))
if mibBuilder.loadTexts: fcsETrapMJAlarmEntryRemoved.setStatus('current')
fcsETrapMNAlarmEntryAdded = NotificationType((1, 3, 6, 1, 4, 1, 17022, 1, 2, 2, 3)).setObjects(("PLUG-POWER-ESERIES-MIB", "fcsEAlarmDescr"))
if mibBuilder.loadTexts: fcsETrapMNAlarmEntryAdded.setStatus('current')
fcsETrapMNAlarmEntryRemoved = NotificationType((1, 3, 6, 1, 4, 1, 17022, 1, 2, 2, 4)).setObjects(("PLUG-POWER-ESERIES-MIB", "fcsEAlarmDescr"))
if mibBuilder.loadTexts: fcsETrapMNAlarmEntryRemoved.setStatus('current')
fcsETrapRunning = NotificationType((1, 3, 6, 1, 4, 1, 17022, 1, 2, 2, 5)).setObjects(("PLUG-POWER-ESERIES-MIB", "fcsEMainDate"), ("PLUG-POWER-ESERIES-MIB", "fcsEMainTime"))
if mibBuilder.loadTexts: fcsETrapRunning.setStatus('current')
fcsETrapExercising = NotificationType((1, 3, 6, 1, 4, 1, 17022, 1, 2, 2, 6)).setObjects(("PLUG-POWER-ESERIES-MIB", "fcsEMainDate"), ("PLUG-POWER-ESERIES-MIB", "fcsEMainTime"))
if mibBuilder.loadTexts: fcsETrapExercising.setStatus('current')
fcsETrapRunEnded = NotificationType((1, 3, 6, 1, 4, 1, 17022, 1, 2, 2, 7)).setObjects(("PLUG-POWER-ESERIES-MIB", "fcsEMainDate"), ("PLUG-POWER-ESERIES-MIB", "fcsEMainTime"))
if mibBuilder.loadTexts: fcsETrapRunEnded.setStatus('current')
fcsETrapLowH2FuelAlertOn = NotificationType((1, 3, 6, 1, 4, 1, 17022, 1, 2, 2, 8)).setObjects(("PLUG-POWER-ESERIES-MIB", "fcsEMainDate"), ("PLUG-POWER-ESERIES-MIB", "fcsEMainTime"))
if mibBuilder.loadTexts: fcsETrapLowH2FuelAlertOn.setStatus('current')
fcsETrapLowH2FuelAlertOff = NotificationType((1, 3, 6, 1, 4, 1, 17022, 1, 2, 2, 9)).setObjects(("PLUG-POWER-ESERIES-MIB", "fcsEMainDate"), ("PLUG-POWER-ESERIES-MIB", "fcsEMainTime"))
if mibBuilder.loadTexts: fcsETrapLowH2FuelAlertOff.setStatus('current')
mibBuilder.exportSymbols("PLUG-POWER-ESERIES-MIB", fcsMNAlarmRecFan1Failed=fcsMNAlarmRecFan1Failed, fcsEExercise=fcsEExercise, fcsETrapMNAlarmEntryAdded=fcsETrapMNAlarmEntryAdded, fcsMNAlarmModTwoRtTempSensor=fcsMNAlarmModTwoRtTempSensor, fcsESystemAlarms=fcsESystemAlarms, fcsERunLockSystem=fcsERunLockSystem, fcsEMainMIBVersion010102=fcsEMainMIBVersion010102, fcsERunStartStop=fcsERunStartStop, fcsMNAlarmExtFan1Failed=fcsMNAlarmExtFan1Failed, fcsMNAlarmRecFan7Failed=fcsMNAlarmRecFan7Failed, fcsEMainChassisSerNum=fcsEMainChassisSerNum, fcsMJAlarmTesting=fcsMJAlarmTesting, fcsMNAlarmConverterCheckSumError=fcsMNAlarmConverterCheckSumError, fcsEMain=fcsEMain, fcsMJAlarmVerMismatch=fcsMJAlarmVerMismatch, fcsMNAlarmH2SensorTopLtLow=fcsMNAlarmH2SensorTopLtLow, fcsETrapLowH2FuelAlertOn=fcsETrapLowH2FuelAlertOn, fcsEMainManufacturerModel=fcsEMainManufacturerModel, fcsEObjects=fcsEObjects, fcsEMainHeater=fcsEMainHeater, fcsEMainChassisTemp=fcsEMainChassisTemp, fcsERunLowVoltStartMode=fcsERunLowVoltStartMode, fcsERunLowH2PressureAlertStatus=fcsERunLowH2PressureAlertStatus, fcsEMainCommCardVersion=fcsEMainCommCardVersion, fcsEMainAlarms=fcsEMainAlarms, fcsEAlarmId=fcsEAlarmId, fuelCellSys=fuelCellSys, fcsMNAlarmWebPagesCheckSumError=fcsMNAlarmWebPagesCheckSumError, fcsMJAlarmSafetyCheckFail=fcsMJAlarmSafetyCheckFail, fcsMNAlarmDoorOpen=fcsMNAlarmDoorOpen, fcsETrapMNAlarmEntryRemoved=fcsETrapMNAlarmEntryRemoved, fcsETrapRunEnded=fcsETrapRunEnded, fcsMNAlarmCommCardCheckSumError=fcsMNAlarmCommCardCheckSumError, fcsEMainVolts=fcsEMainVolts, fcsERunContactStartTimeOut=fcsERunContactStartTimeOut, fcsERunFloatVolt=fcsERunFloatVolt, fcsERunVolts=fcsERunVolts, fcsEExerciseExerciseMode=fcsEExerciseExerciseMode, fcsMNAlarmSystemDateInvalid=fcsMNAlarmSystemDateInvalid, fcsEMainBleedTempSensor=fcsEMainBleedTempSensor, fcsERunPressurePSI=fcsERunPressurePSI, plugPowerMIB=plugPowerMIB, fcsERunLowH2PressureAlert=fcsERunLowH2PressureAlert, fcsETraps=fcsETraps, fcsMNAlarmRecFan8Failed=fcsMNAlarmRecFan8Failed, fcsMNAlarmModBotFailed=fcsMNAlarmModBotFailed, fcsMJAlarmSystemIsDown=fcsMJAlarmSystemIsDown, fcsEAlarmNoCurrentAlarms=fcsEAlarmNoCurrentAlarms, fcsMNAlarmModThreeLtTempSensor=fcsMNAlarmModThreeLtTempSensor, fcsMNAlarmExtFan5Failed=fcsMNAlarmExtFan5Failed, fcsEMainName=fcsEMainName, fcsEAlarmEntry=fcsEAlarmEntry, fcsMJAlarmH2SensorTopLtHigh=fcsMJAlarmH2SensorTopLtHigh, fcsERunSystemLockTimeOut=fcsERunSystemLockTimeOut, fcsEMainKilowattHours=fcsEMainKilowattHours, fcsMNAlarmRecFan3Failed=fcsMNAlarmRecFan3Failed, fcsE2Gen2=fcsE2Gen2, fcsEExerciseManualExercise=fcsEExerciseManualExercise, fcsMJAlarmH2SensorBotRtFail=fcsMJAlarmH2SensorBotRtFail, fcsEMainPressurePSI=fcsEMainPressurePSI, fcsEMainTotalTime=fcsEMainTotalTime, fcsMJAlarmSafetyFanFail=fcsMJAlarmSafetyFanFail, fcsMJAlarmModOpenCircuitVoltage=fcsMJAlarmModOpenCircuitVoltage, fcsERunPowerLimiting=fcsERunPowerLimiting, fcsEMainAmps=fcsEMainAmps, fcsMNAlarmModTwoLtTempSensor=fcsMNAlarmModTwoLtTempSensor, fcsERunPower=fcsERunPower, fcsERunLowVoltTimer=fcsERunLowVoltTimer, fcsERunAmps=fcsERunAmps, fcsMJAlarmTermVoltsLow=fcsMJAlarmTermVoltsLow, fcsERunStartStatus=fcsERunStartStatus, fcsMJAllModTempSensorsFailed=fcsMJAllModTempSensorsFailed, fcsEMainPower=fcsEMainPower, fcsMNAlarmModThreeRtTempSensor=fcsMNAlarmModThreeRtTempSensor, fcsMJAlarmNoH2Pressure=fcsMJAlarmNoH2Pressure, fcsMNAlarmMod3Failed=fcsMNAlarmMod3Failed, fcsERunContactStartDelay=fcsERunContactStartDelay, fcsMNAlarmExtFan3Failed=fcsMNAlarmExtFan3Failed, fcsERunLowVoltageFloatTimeOut=fcsERunLowVoltageFloatTimeOut, fcsEExerciseNumOfDaysOrDayOfMonth=fcsEExerciseNumOfDaysOrDayOfMonth, FloatingPointNumber=FloatingPointNumber, fcsEAlarmTime=fcsEAlarmTime, fcsEMainDate=fcsEMainDate, fcsMNAlarmModTopFailed=fcsMNAlarmModTopFailed, fcsEAlarm=fcsEAlarm, fcsEMainSystemStatus=fcsEMainSystemStatus, fcsMNAlarmLowH2Pressure=fcsMNAlarmLowH2Pressure, fcsETrapExercising=fcsETrapExercising, fcsMJAlarmModShortedCircuitVoltage=fcsMJAlarmModShortedCircuitVoltage, fcsEExerciseTimeOfDay=fcsEExerciseTimeOfDay, fcsEMainLocation=fcsEMainLocation, fcsEMainResetSystem=fcsEMainResetSystem, fcsESeries=fcsESeries, fcsMNAlarmRecFan6Failed=fcsMNAlarmRecFan6Failed, fcsETrapMJAlarmEntryRemoved=fcsETrapMJAlarmEntryRemoved, fcsERunLowVoltThreshold=fcsERunLowVoltThreshold, fcsERunSystemLockTime=fcsERunSystemLockTime, fcsEExerciseCond1StartStop=fcsEExerciseCond1StartStop, fcsMJAlarmConverterID=fcsMJAlarmConverterID, fcsERun=fcsERun, fcsMNAlarmRecFan5Failed=fcsMNAlarmRecFan5Failed, fcsMNAlarmModTopRtTempSensor=fcsMNAlarmModTopRtTempSensor, PYSNMP_MODULE_ID=plugPowerMIB, fcsERunAuxOutAssigned=fcsERunAuxOutAssigned, fcsERunClearNoPressureAlarm=fcsERunClearNoPressureAlarm, fcsERunAuxInAssigned=fcsERunAuxInAssigned, fcsMNAlarmMod2Failed=fcsMNAlarmMod2Failed, fcsEAlarmType=fcsEAlarmType, fcsMJAlarmH2SensorTopLtFail=fcsMJAlarmH2SensorTopLtFail, fcsMNAlarmModBotLtTempSensor=fcsMNAlarmModBotLtTempSensor, fcsMNAlarmBleedTempSensor=fcsMNAlarmBleedTempSensor, fcsMNAlarmModBotRtTempSensor=fcsMNAlarmModBotRtTempSensor, fcsMNAlarmRecFan10Failed=fcsMNAlarmRecFan10Failed, fcsMJAlarmSystemLocked=fcsMJAlarmSystemLocked, fcsEAlarmTable=fcsEAlarmTable, fcsMNAlarmExtFan2Failed=fcsMNAlarmExtFan2Failed, fcsMNAlarmRecFan4Failed=fcsMNAlarmRecFan4Failed, fcsMNAlarmModTopLtTempSensor=fcsMNAlarmModTopLtTempSensor, fcsEMainConverterVersion=fcsEMainConverterVersion, fcsMJAlarmSafetyTempFail=fcsMJAlarmSafetyTempFail, PositiveInteger=PositiveInteger, fcsETrapRunning=fcsETrapRunning, fcsMJAlarmTermVoltsHigh=fcsMJAlarmTermVoltsHigh, fcsMJAlarmModsTooCold=fcsMJAlarmModsTooCold, fcsMNAlarmH2SensorBotRtLow=fcsMNAlarmH2SensorBotRtLow, fcsEExerciseSetNextExerciseDate=fcsEExerciseSetNextExerciseDate, fcsMJAlarmModsTooHotToRun=fcsMJAlarmModsTooHotToRun, fcsEMainSystemRuns=fcsEMainSystemRuns, fcsEAlarmDescr=fcsEAlarmDescr, fcsMNAlarmRecFan9Failed=fcsMNAlarmRecFan9Failed, fcsETrapMJAlarmEntryAdded=fcsETrapMJAlarmEntryAdded, fcsMNAlarmExtFan4Failed=fcsMNAlarmExtFan4Failed, NonNegativeInteger=NonNegativeInteger, fcsMNAlarmExtFan6Failed=fcsMNAlarmExtFan6Failed, fcsEMainWatts=fcsEMainWatts, fcsMJAlarmModTooHighVoltage=fcsMJAlarmModTooHighVoltage, fcsTSeries=fcsTSeries, fcsEMainTime=fcsEMainTime, fcsERunLowH2PressureAlarm=fcsERunLowH2PressureAlarm, fcsEExerciseNextExerciseDate=fcsEExerciseNextExerciseDate, fcsMJAlarmCommLinkDown=fcsMJAlarmCommLinkDown, fcsMJAlarmH2SensorBotRtHigh=fcsMJAlarmH2SensorBotRtHigh, fcsMNAlarmTesting=fcsMNAlarmTesting, fcsERunSystemStatus=fcsERunSystemStatus, fcsEAlarms=fcsEAlarms, fcsETrapLowH2FuelAlertOff=fcsETrapLowH2FuelAlertOff, fcsEMainLastRun=fcsEMainLastRun, fcsMNAlarmRecFan2Failed=fcsMNAlarmRecFan2Failed, fcsERunWatts=fcsERunWatts)
