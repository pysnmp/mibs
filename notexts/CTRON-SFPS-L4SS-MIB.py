#
# PySNMP MIB module CTRON-SFPS-L4SS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-SFPS-L4SS-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 11:55:46 2024
# On host fv-az1530-743 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
switchSFPS, = mibBuilder.importSymbols("CTRON-SFPS-INCLUDE-MIB", "switchSFPS")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Counter64, Gauge32, ModuleIdentity, Unsigned32, Counter32, MibIdentifier, Integer32, TimeTicks, ObjectIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Gauge32", "ModuleIdentity", "Unsigned32", "Counter32", "MibIdentifier", "Integer32", "TimeTicks", "ObjectIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
sfpsL4SS = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6))
sfpsL4CP = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1))
sfpsL4CDR = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2))
l4cpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 1))
l4cpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 2))
l4cpActions = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 3))
l4cdrStats = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 1))
l4cdrConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 2))
l4cdrActions = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 3))
class HexInteger(Integer32):
    pass

class SfpsAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

sfpsL4CPDisableTCPAckCheck = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsL4CPDisableTCPAckCheck.setStatus('mandatory')
sfpsL4CPFlowTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 4), )
if mibBuilder.loadTexts: sfpsL4CPFlowTable.setStatus('mandatory')
sfpsL4CPFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 4, 1), ).setIndexNames((0, "CTRON-SFPS-L4SS-MIB", "sfpsL4CPFlowCnxIndex"), (0, "CTRON-SFPS-L4SS-MIB", "sfpsL4CPFlowSecL3Address"), (0, "CTRON-SFPS-L4SS-MIB", "sfpsL4CPFlowPrimL3Address"), (0, "CTRON-SFPS-L4SS-MIB", "sfpsL4CPFlowSubprotocol"), (0, "CTRON-SFPS-L4SS-MIB", "sfpsL4CPFlowSecMatchAnyDyn"), (0, "CTRON-SFPS-L4SS-MIB", "sfpsL4CPFlowPrimMatchAnyDyn"), (0, "CTRON-SFPS-L4SS-MIB", "sfpsL4CPFlowSecProtPort"), (0, "CTRON-SFPS-L4SS-MIB", "sfpsL4CPFlowPrimProtPort"))
if mibBuilder.loadTexts: sfpsL4CPFlowEntry.setStatus('mandatory')
sfpsL4CPFlowCnxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPFlowCnxIndex.setStatus('mandatory')
sfpsL4CPFlowSecL3Address = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPFlowSecL3Address.setStatus('mandatory')
sfpsL4CPFlowPrimL3Address = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPFlowPrimL3Address.setStatus('mandatory')
sfpsL4CPFlowSubprotocol = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 4, 1, 4), HexInteger().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPFlowSubprotocol.setStatus('mandatory')
sfpsL4CPFlowSecMatchAnyDyn = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPFlowSecMatchAnyDyn.setStatus('mandatory')
sfpsL4CPFlowPrimMatchAnyDyn = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPFlowPrimMatchAnyDyn.setStatus('mandatory')
sfpsL4CPFlowSecProtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPFlowSecProtPort.setStatus('mandatory')
sfpsL4CPFlowPrimProtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPFlowPrimProtPort.setStatus('mandatory')
sfpsL4CPFlowSecSubstApplies = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPFlowSecSubstApplies.setStatus('mandatory')
sfpsL4CPFlowPrimSubstApplies = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPFlowPrimSubstApplies.setStatus('mandatory')
sfpsL4CPFlowSecInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPFlowSecInPkts.setStatus('mandatory')
sfpsL4CPFlowSecInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPFlowSecInOctets.setStatus('mandatory')
sfpsL4CPFlowPrimInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPFlowPrimInPkts.setStatus('mandatory')
sfpsL4CPFlowPrimInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPFlowPrimInOctets.setStatus('mandatory')
sfpsL4CPFlowFlowAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 4, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPFlowFlowAge.setStatus('mandatory')
sfpsL4CPFlowFlowLastUse = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 4, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPFlowFlowLastUse.setStatus('mandatory')
sfpsL4CPFlowID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPFlowID.setStatus('mandatory')
sfpsL4CPMACAddrSubTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 5), )
if mibBuilder.loadTexts: sfpsL4CPMACAddrSubTable.setStatus('mandatory')
sfpsL4CPMACAddrSubEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 5, 1), ).setIndexNames((0, "CTRON-SFPS-L4SS-MIB", "sfpsL4CPMACAddrSubDestIP"))
if mibBuilder.loadTexts: sfpsL4CPMACAddrSubEntry.setStatus('mandatory')
sfpsL4CPMACAddrSubDestIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPMACAddrSubDestIP.setStatus('mandatory')
sfpsL4CPMACAddrSubNextHopMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 5, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPMACAddrSubNextHopMAC.setStatus('mandatory')
sfpsL4CPMACAddrSubRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPMACAddrSubRefCount.setStatus('mandatory')
sfpsL4CPNetAddrUserTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 7), )
if mibBuilder.loadTexts: sfpsL4CPNetAddrUserTable.setStatus('mandatory')
sfpsL4CPNetAddrUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 7, 1), ).setIndexNames((0, "CTRON-SFPS-L4SS-MIB", "sfpsL4CPNetAddrUserProtocol"), (0, "CTRON-SFPS-L4SS-MIB", "sfpsL4CPNetAddrUserNetAddr"))
if mibBuilder.loadTexts: sfpsL4CPNetAddrUserEntry.setStatus('mandatory')
sfpsL4CPNetAddrUserProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPNetAddrUserProtocol.setStatus('mandatory')
sfpsL4CPNetAddrUserNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPNetAddrUserNetAddr.setStatus('mandatory')
sfpsL4CPNetAddrUserLoginID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPNetAddrUserLoginID.setStatus('mandatory')
sfpsL4CPNetAddrUserUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPNetAddrUserUserID.setStatus('mandatory')
sfpsL4CPNetAddrUserUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPNetAddrUserUserName.setStatus('mandatory')
sfpsL4CPIPRouteTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 8), )
if mibBuilder.loadTexts: sfpsL4CPIPRouteTable.setStatus('mandatory')
sfpsL4CPIPRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 8, 1), ).setIndexNames((0, "CTRON-SFPS-L4SS-MIB", "sfpsL4CPIPRouteSubnetMask"), (0, "CTRON-SFPS-L4SS-MIB", "sfpsL4CPIPRouteSubnet"))
if mibBuilder.loadTexts: sfpsL4CPIPRouteEntry.setStatus('mandatory')
sfpsL4CPIPRouteSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPIPRouteSubnetMask.setStatus('mandatory')
sfpsL4CPIPRouteSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPIPRouteSubnet.setStatus('mandatory')
sfpsL4CPIPRouteRouteID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPIPRouteRouteID.setStatus('mandatory')
sfpsL4CPIPRouteRouteSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPIPRouteRouteSubsystem.setStatus('mandatory')
sfpsL4CPIPRouteDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPIPRouteDeviceID.setStatus('mandatory')
sfpsL4CPIPRouteDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPIPRouteDeviceName.setStatus('mandatory')
sfpsL4CPIPRouteMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 8, 1, 7), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPIPRouteMACAddress.setStatus('mandatory')
sfpsL4CPIPRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPIPRouteMetric.setStatus('mandatory')
sfpsL4CPIPRouteCallable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPIPRouteCallable.setStatus('mandatory')
sfpsL4CPPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 9), )
if mibBuilder.loadTexts: sfpsL4CPPortTable.setStatus('mandatory')
sfpsL4CPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 9, 1), ).setIndexNames((0, "CTRON-SFPS-L4SS-MIB", "sfpsL4CPPortNum"))
if mibBuilder.loadTexts: sfpsL4CPPortEntry.setStatus('mandatory')
sfpsL4CPPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPPortNum.setStatus('mandatory')
sfpsL4CPPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPPortID.setStatus('mandatory')
sfpsL4CPPortApplyPolicyIn = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPPortApplyPolicyIn.setStatus('mandatory')
sfpsL4CPPortApplyPolicyOut = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPPortApplyPolicyOut.setStatus('mandatory')
sfpsL4CPPortDefaultUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPPortDefaultUserID.setStatus('mandatory')
sfpsL4CPPortDefaultUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPPortDefaultUserName.setStatus('mandatory')
sfpsL4CPCallableDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 11), )
if mibBuilder.loadTexts: sfpsL4CPCallableDeviceTable.setStatus('mandatory')
sfpsL4CPCallableDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 11, 1), ).setIndexNames((0, "CTRON-SFPS-L4SS-MIB", "sfpsL4CPCallableDeviceDeviceID"))
if mibBuilder.loadTexts: sfpsL4CPCallableDeviceEntry.setStatus('mandatory')
sfpsL4CPCallableDeviceDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPCallableDeviceDeviceID.setStatus('mandatory')
sfpsL4CPCallableDeviceDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPCallableDeviceDeviceName.setStatus('mandatory')
sfpsL4CPCallableDeviceDefaultUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 1, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CPCallableDeviceDefaultUserName.setStatus('mandatory')
sfpsL4CDRActiveFlowTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4), )
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowTable.setStatus('mandatory')
sfpsL4CDRActiveFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1), ).setIndexNames((0, "CTRON-SFPS-L4SS-MIB", "sfpsL4CDRActiveFlowFlowID"))
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowEntry.setStatus('mandatory')
sfpsL4CDRActiveFlowFlowID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowFlowID.setStatus('mandatory')
sfpsL4CDRActiveFlowSubProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowSubProtocol.setStatus('mandatory')
sfpsL4CDRActiveFlowEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowEtherType.setStatus('mandatory')
sfpsL4CDRActiveFlowSourceUser = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowSourceUser.setStatus('mandatory')
sfpsL4CDRActiveFlowSourceMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowSourceMACAddr.setStatus('mandatory')
sfpsL4CDRActiveFlowSourceNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowSourceNetAddr.setStatus('mandatory')
sfpsL4CDRActiveFlowSourceProtocolPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowSourceProtocolPort.setStatus('mandatory')
sfpsL4CDRActiveFlowSourcePPRangeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowSourcePPRangeEnabled.setStatus('mandatory')
sfpsL4CDRActiveFlowSourceConnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowSourceConnNumber.setStatus('mandatory')
sfpsL4CDRActiveFlowDestUser = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowDestUser.setStatus('mandatory')
sfpsL4CDRActiveFlowDestMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowDestMACAddr.setStatus('mandatory')
sfpsL4CDRActiveFlowDestNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowDestNetAddr.setStatus('mandatory')
sfpsL4CDRActiveFlowDestProtocolPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowDestProtocolPort.setStatus('mandatory')
sfpsL4CDRActiveFlowDestPPRangeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowDestPPRangeEnabled.setStatus('mandatory')
sfpsL4CDRActiveFlowDestConnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowDestConnNumber.setStatus('mandatory')
sfpsL4CDRActiveFlowStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowStartTime.setStatus('mandatory')
sfpsL4CDRActiveFlowLastPktTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowLastPktTime.setStatus('mandatory')
sfpsL4CDRActiveFlowEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 18), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowEndTime.setStatus('mandatory')
sfpsL4CDRActiveFlowInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowInOctets.setStatus('mandatory')
sfpsL4CDRActiveFlowOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowOutOctets.setStatus('mandatory')
sfpsL4CDRActiveFlowInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowInPkts.setStatus('mandatory')
sfpsL4CDRActiveFlowOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowOutPkts.setStatus('mandatory')
sfpsL4CDRActiveFlowDemandAccessConnMade = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowDemandAccessConnMade.setStatus('mandatory')
sfpsL4CDRActiveFlowFlowRecordState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initialized", 1), ("active", 2), ("terminated", 3), ("invalid", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRActiveFlowFlowRecordState.setStatus('mandatory')
sfpsL4CDRTermedFlowTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5), )
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowTable.setStatus('mandatory')
sfpsL4CDRTermedFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1), ).setIndexNames((0, "CTRON-SFPS-L4SS-MIB", "sfpsL4CDRTermedFlowFlowID"))
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowEntry.setStatus('mandatory')
sfpsL4CDRTermedFlowFlowID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowFlowID.setStatus('mandatory')
sfpsL4CDRTermedFlowSubProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowSubProtocol.setStatus('mandatory')
sfpsL4CDRTermedFlowEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowEtherType.setStatus('mandatory')
sfpsL4CDRTermedFlowSourceUser = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowSourceUser.setStatus('mandatory')
sfpsL4CDRTermedFlowSourceMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowSourceMACAddr.setStatus('mandatory')
sfpsL4CDRTermedFlowSourceNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowSourceNetAddr.setStatus('mandatory')
sfpsL4CDRTermedFlowSourceProtocolPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowSourceProtocolPort.setStatus('mandatory')
sfpsL4CDRTermedFlowSourcePPRangeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowSourcePPRangeEnabled.setStatus('mandatory')
sfpsL4CDRTermedFlowSourceConnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowSourceConnNumber.setStatus('mandatory')
sfpsL4CDRTermedFlowDestUser = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowDestUser.setStatus('mandatory')
sfpsL4CDRTermedFlowDestMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowDestMACAddr.setStatus('mandatory')
sfpsL4CDRTermedFlowDestNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowDestNetAddr.setStatus('mandatory')
sfpsL4CDRTermedFlowDestProtocolPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowDestProtocolPort.setStatus('mandatory')
sfpsL4CDRTermedFlowDestPPRangeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowDestPPRangeEnabled.setStatus('mandatory')
sfpsL4CDRTermedFlowDestConnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowDestConnNumber.setStatus('mandatory')
sfpsL4CDRTermedFlowStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowStartTime.setStatus('mandatory')
sfpsL4CDRTermedFlowLastPktTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowLastPktTime.setStatus('mandatory')
sfpsL4CDRTermedFlowEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 18), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowEndTime.setStatus('mandatory')
sfpsL4CDRTermedFlowInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowInOctets.setStatus('mandatory')
sfpsL4CDRTermedFlowOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowOutOctets.setStatus('mandatory')
sfpsL4CDRTermedFlowInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowInPkts.setStatus('mandatory')
sfpsL4CDRTermedFlowOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowOutPkts.setStatus('mandatory')
sfpsL4CDRTermedFlowDemandAccessConnMade = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowDemandAccessConnMade.setStatus('mandatory')
sfpsL4CDRTermedFlowFlowRecordState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initialized", 1), ("active", 2), ("terminated", 3), ("invalid", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRTermedFlowFlowRecordState.setStatus('mandatory')
sfpsL4CDRFlowIndexTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 6), )
if mibBuilder.loadTexts: sfpsL4CDRFlowIndexTable.setStatus('mandatory')
sfpsL4CDRFlowIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 6, 1), ).setIndexNames((0, "CTRON-SFPS-L4SS-MIB", "sfpsL4CDRFlowIndexFlowID"))
if mibBuilder.loadTexts: sfpsL4CDRFlowIndexEntry.setStatus('mandatory')
sfpsL4CDRFlowIndexFlowID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRFlowIndexFlowID.setStatus('mandatory')
sfpsL4CDRFlowIndexSFPSFlowTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRFlowIndexSFPSFlowTblIndex.setStatus('mandatory')
sfpsL4CDRFlowIndexSFlowStatsPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRFlowIndexSFlowStatsPtr.setStatus('mandatory')
sfpsL4CDRFlowIndexStaticFlowInfoPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRFlowIndexStaticFlowInfoPtr.setStatus('mandatory')
sfpsL4CDRFlowIndexFlowTblEntryPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRFlowIndexFlowTblEntryPtr.setStatus('mandatory')
sfpsL4CDRFlowIndexFlowState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 6, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initialized", 1), ("active", 2), ("terminated", 3), ("invalid", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsL4CDRFlowIndexFlowState.setStatus('mandatory')
mibBuilder.exportSymbols("CTRON-SFPS-L4SS-MIB", sfpsL4CPNetAddrUserUserID=sfpsL4CPNetAddrUserUserID, sfpsL4CPFlowFlowLastUse=sfpsL4CPFlowFlowLastUse, sfpsL4CDRTermedFlowEntry=sfpsL4CDRTermedFlowEntry, sfpsL4CPPortApplyPolicyOut=sfpsL4CPPortApplyPolicyOut, sfpsL4CPFlowPrimInOctets=sfpsL4CPFlowPrimInOctets, sfpsL4CDRFlowIndexStaticFlowInfoPtr=sfpsL4CDRFlowIndexStaticFlowInfoPtr, sfpsL4CDRFlowIndexFlowID=sfpsL4CDRFlowIndexFlowID, sfpsL4CPFlowSecMatchAnyDyn=sfpsL4CPFlowSecMatchAnyDyn, sfpsL4CPFlowID=sfpsL4CPFlowID, sfpsL4CDRActiveFlowInOctets=sfpsL4CDRActiveFlowInOctets, sfpsL4CDRActiveFlowDemandAccessConnMade=sfpsL4CDRActiveFlowDemandAccessConnMade, sfpsL4CDRTermedFlowSourceNetAddr=sfpsL4CDRTermedFlowSourceNetAddr, sfpsL4CPCallableDeviceDefaultUserName=sfpsL4CPCallableDeviceDefaultUserName, sfpsL4CPPortDefaultUserID=sfpsL4CPPortDefaultUserID, sfpsL4CDRFlowIndexFlowState=sfpsL4CDRFlowIndexFlowState, sfpsL4CPPortApplyPolicyIn=sfpsL4CPPortApplyPolicyIn, l4cpStats=l4cpStats, sfpsL4CPCallableDeviceTable=sfpsL4CPCallableDeviceTable, sfpsL4CPIPRouteMACAddress=sfpsL4CPIPRouteMACAddress, sfpsL4CDRTermedFlowSubProtocol=sfpsL4CDRTermedFlowSubProtocol, sfpsL4CPFlowSecL3Address=sfpsL4CPFlowSecL3Address, sfpsL4CDRActiveFlowDestPPRangeEnabled=sfpsL4CDRActiveFlowDestPPRangeEnabled, sfpsL4CDRFlowIndexTable=sfpsL4CDRFlowIndexTable, sfpsL4CDRActiveFlowSourceUser=sfpsL4CDRActiveFlowSourceUser, sfpsL4CPMACAddrSubTable=sfpsL4CPMACAddrSubTable, sfpsL4CPIPRouteSubnet=sfpsL4CPIPRouteSubnet, sfpsL4CPNetAddrUserProtocol=sfpsL4CPNetAddrUserProtocol, sfpsL4CPIPRouteMetric=sfpsL4CPIPRouteMetric, sfpsL4CPMACAddrSubEntry=sfpsL4CPMACAddrSubEntry, sfpsL4CPNetAddrUserEntry=sfpsL4CPNetAddrUserEntry, sfpsL4CPFlowFlowAge=sfpsL4CPFlowFlowAge, sfpsL4CDRActiveFlowOutPkts=sfpsL4CDRActiveFlowOutPkts, sfpsL4CPFlowTable=sfpsL4CPFlowTable, l4cdrStats=l4cdrStats, sfpsL4CPIPRouteSubnetMask=sfpsL4CPIPRouteSubnetMask, sfpsL4CPPortEntry=sfpsL4CPPortEntry, sfpsL4CDRTermedFlowDestPPRangeEnabled=sfpsL4CDRTermedFlowDestPPRangeEnabled, sfpsL4CDRActiveFlowEntry=sfpsL4CDRActiveFlowEntry, sfpsL4CDRTermedFlowFlowRecordState=sfpsL4CDRTermedFlowFlowRecordState, sfpsL4CDRActiveFlowFlowID=sfpsL4CDRActiveFlowFlowID, sfpsL4CPNetAddrUserUserName=sfpsL4CPNetAddrUserUserName, sfpsL4CDRActiveFlowTable=sfpsL4CDRActiveFlowTable, sfpsL4CDRActiveFlowSubProtocol=sfpsL4CDRActiveFlowSubProtocol, sfpsL4CPNetAddrUserTable=sfpsL4CPNetAddrUserTable, sfpsL4CDRTermedFlowOutOctets=sfpsL4CDRTermedFlowOutOctets, sfpsL4CDRTermedFlowLastPktTime=sfpsL4CDRTermedFlowLastPktTime, sfpsL4CPMACAddrSubDestIP=sfpsL4CPMACAddrSubDestIP, sfpsL4CPFlowPrimProtPort=sfpsL4CPFlowPrimProtPort, sfpsL4CPPortNum=sfpsL4CPPortNum, sfpsL4CDRTermedFlowInOctets=sfpsL4CDRTermedFlowInOctets, sfpsL4CDRTermedFlowSourceConnNumber=sfpsL4CDRTermedFlowSourceConnNumber, sfpsL4CDRActiveFlowEndTime=sfpsL4CDRActiveFlowEndTime, sfpsL4CPIPRouteCallable=sfpsL4CPIPRouteCallable, HexInteger=HexInteger, sfpsL4CPIPRouteRouteSubsystem=sfpsL4CPIPRouteRouteSubsystem, l4cdrActions=l4cdrActions, sfpsL4CDRTermedFlowSourceUser=sfpsL4CDRTermedFlowSourceUser, l4cpConfig=l4cpConfig, sfpsL4CDRActiveFlowDestNetAddr=sfpsL4CDRActiveFlowDestNetAddr, sfpsL4CDRActiveFlowDestConnNumber=sfpsL4CDRActiveFlowDestConnNumber, SfpsAddress=SfpsAddress, sfpsL4CPFlowSecInOctets=sfpsL4CPFlowSecInOctets, sfpsL4CPFlowSecSubstApplies=sfpsL4CPFlowSecSubstApplies, sfpsL4CPFlowSubprotocol=sfpsL4CPFlowSubprotocol, sfpsL4CP=sfpsL4CP, l4cdrConfig=l4cdrConfig, sfpsL4CPDisableTCPAckCheck=sfpsL4CPDisableTCPAckCheck, sfpsL4CPIPRouteTable=sfpsL4CPIPRouteTable, sfpsL4CPMACAddrSubNextHopMAC=sfpsL4CPMACAddrSubNextHopMAC, sfpsL4CPPortTable=sfpsL4CPPortTable, sfpsL4CPFlowPrimMatchAnyDyn=sfpsL4CPFlowPrimMatchAnyDyn, sfpsL4CDRActiveFlowDestProtocolPort=sfpsL4CDRActiveFlowDestProtocolPort, sfpsL4CDRFlowIndexEntry=sfpsL4CDRFlowIndexEntry, sfpsL4CPPortDefaultUserName=sfpsL4CPPortDefaultUserName, sfpsL4CDRTermedFlowDestNetAddr=sfpsL4CDRTermedFlowDestNetAddr, sfpsL4CDRActiveFlowSourceMACAddr=sfpsL4CDRActiveFlowSourceMACAddr, sfpsL4CPNetAddrUserLoginID=sfpsL4CPNetAddrUserLoginID, sfpsL4CDRActiveFlowStartTime=sfpsL4CDRActiveFlowStartTime, sfpsL4CPMACAddrSubRefCount=sfpsL4CPMACAddrSubRefCount, sfpsL4CDRActiveFlowDestMACAddr=sfpsL4CDRActiveFlowDestMACAddr, sfpsL4CDRActiveFlowSourceProtocolPort=sfpsL4CDRActiveFlowSourceProtocolPort, sfpsL4CDRFlowIndexFlowTblEntryPtr=sfpsL4CDRFlowIndexFlowTblEntryPtr, sfpsL4CPCallableDeviceEntry=sfpsL4CPCallableDeviceEntry, sfpsL4CPFlowPrimL3Address=sfpsL4CPFlowPrimL3Address, sfpsL4CDRTermedFlowSourceProtocolPort=sfpsL4CDRTermedFlowSourceProtocolPort, sfpsL4CPFlowPrimInPkts=sfpsL4CPFlowPrimInPkts, sfpsL4CDR=sfpsL4CDR, sfpsL4CDRFlowIndexSFPSFlowTblIndex=sfpsL4CDRFlowIndexSFPSFlowTblIndex, sfpsL4CPFlowEntry=sfpsL4CPFlowEntry, sfpsL4CDRTermedFlowTable=sfpsL4CDRTermedFlowTable, sfpsL4CPFlowPrimSubstApplies=sfpsL4CPFlowPrimSubstApplies, l4cpActions=l4cpActions, sfpsL4CDRFlowIndexSFlowStatsPtr=sfpsL4CDRFlowIndexSFlowStatsPtr, sfpsL4CDRTermedFlowDestMACAddr=sfpsL4CDRTermedFlowDestMACAddr, sfpsL4CDRTermedFlowInPkts=sfpsL4CDRTermedFlowInPkts, sfpsL4CDRTermedFlowSourceMACAddr=sfpsL4CDRTermedFlowSourceMACAddr, sfpsL4CDRTermedFlowDemandAccessConnMade=sfpsL4CDRTermedFlowDemandAccessConnMade, sfpsL4CPIPRouteDeviceID=sfpsL4CPIPRouteDeviceID, sfpsL4CDRActiveFlowSourceNetAddr=sfpsL4CDRActiveFlowSourceNetAddr, sfpsL4CDRTermedFlowDestProtocolPort=sfpsL4CDRTermedFlowDestProtocolPort, sfpsL4CDRTermedFlowFlowID=sfpsL4CDRTermedFlowFlowID, sfpsL4CDRTermedFlowDestUser=sfpsL4CDRTermedFlowDestUser, sfpsL4CPPortID=sfpsL4CPPortID, sfpsL4CDRActiveFlowEtherType=sfpsL4CDRActiveFlowEtherType, sfpsL4CPCallableDeviceDeviceName=sfpsL4CPCallableDeviceDeviceName, sfpsL4CDRTermedFlowOutPkts=sfpsL4CDRTermedFlowOutPkts, sfpsL4CDRTermedFlowStartTime=sfpsL4CDRTermedFlowStartTime, sfpsL4CPIPRouteEntry=sfpsL4CPIPRouteEntry, sfpsL4CDRActiveFlowSourcePPRangeEnabled=sfpsL4CDRActiveFlowSourcePPRangeEnabled, sfpsL4CDRActiveFlowSourceConnNumber=sfpsL4CDRActiveFlowSourceConnNumber, sfpsL4CDRTermedFlowDestConnNumber=sfpsL4CDRTermedFlowDestConnNumber, sfpsL4CPFlowSecProtPort=sfpsL4CPFlowSecProtPort, sfpsL4CPIPRouteDeviceName=sfpsL4CPIPRouteDeviceName, sfpsL4SS=sfpsL4SS, sfpsL4CPIPRouteRouteID=sfpsL4CPIPRouteRouteID, sfpsL4CDRActiveFlowOutOctets=sfpsL4CDRActiveFlowOutOctets, sfpsL4CDRActiveFlowFlowRecordState=sfpsL4CDRActiveFlowFlowRecordState, sfpsL4CDRTermedFlowEtherType=sfpsL4CDRTermedFlowEtherType, sfpsL4CPFlowCnxIndex=sfpsL4CPFlowCnxIndex, sfpsL4CPCallableDeviceDeviceID=sfpsL4CPCallableDeviceDeviceID, sfpsL4CPNetAddrUserNetAddr=sfpsL4CPNetAddrUserNetAddr, sfpsL4CDRActiveFlowInPkts=sfpsL4CDRActiveFlowInPkts, sfpsL4CDRActiveFlowLastPktTime=sfpsL4CDRActiveFlowLastPktTime, sfpsL4CDRActiveFlowDestUser=sfpsL4CDRActiveFlowDestUser, sfpsL4CDRTermedFlowSourcePPRangeEnabled=sfpsL4CDRTermedFlowSourcePPRangeEnabled, sfpsL4CPFlowSecInPkts=sfpsL4CPFlowSecInPkts, sfpsL4CDRTermedFlowEndTime=sfpsL4CDRTermedFlowEndTime)
