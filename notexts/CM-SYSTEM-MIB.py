#
# PySNMP MIB module CM-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/CM-SYSTEM-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 09:39:00 2024
# On host fv-az566-8 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
fsp150cm, TrapCounter, FileTransferProtocol = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm", "TrapCounter", "FileTransferProtocol")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
RestartType, IpVersion = mibBuilder.importSymbols("CM-COMMON-MIB", "RestartType", "IpVersion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
lldpV2RemEntry, = mibBuilder.importSymbols("LLDP-V2-MIB", "lldpV2RemEntry")
LldpV2DestAddressTableIndex, = mibBuilder.importSymbols("LLDP-V2-TC-MIB", "LldpV2DestAddressTableIndex")
SnmpEngineID, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpEngineID")
snmpTargetAddrName, = mibBuilder.importSymbols("SNMP-TARGET-MIB", "snmpTargetAddrName")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32, Bits, Gauge32, Counter32, Counter64, NotificationType, ObjectIdentity, IpAddress, iso, Integer32, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32", "Bits", "Gauge32", "Counter32", "Counter64", "NotificationType", "ObjectIdentity", "IpAddress", "iso", "Integer32", "TimeTicks", "MibIdentifier")
RowStatus, DateAndTime, DisplayString, TruthValue, VariablePointer, StorageType, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DateAndTime", "DisplayString", "TruthValue", "VariablePointer", "StorageType", "MacAddress", "TextualConvention")
cmSystemMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2))
cmSystemMIB.setRevisions(('2021-01-27 00:00',))
if mibBuilder.loadTexts: cmSystemMIB.setLastUpdated('202101270000Z')
if mibBuilder.loadTexts: cmSystemMIB.setOrganization('ADVA Optical Networking SE')
cmSystemObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1))
cmSystemNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 2))
cmSystemConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 3))
f3BulkNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 4))
f3SystemBulkNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 5))
cmErrorInfoObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 1))
cmCliObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 2))
cmAccessProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3))
cmSysSecObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4))
cmSysModeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 5))
cmDatabaseObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 6))
cmSoftwareObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7))
cmFileServicesObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8))
cmLogObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9))
cmTimeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10))
cmSnmpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 11))
cmResetCauseObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 12))
f3NotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 13))
f3ConfigFileObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14))
cmFeatureManagementObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 15))
cmLldpV2DestAdressADVAExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16))
f3LldpV2ConfigurationADVAExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 17))
snmpIPv6UDPDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 18))
f3RawDataObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 19))
f3LldpV2RemoteSystemsData = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 20))
f3SimpleLtpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 21))
f3SysAuthenKeyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 22))
f3CallhomeServerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 23))
f3SystemInfoObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 24))
f3ZtpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 25))
class CmAclFilterAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("permit", 1), ("deny", 2))

class CmAutoProvMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("off", 1), ("confirm", 2), ("auto", 3))

class CmNtpType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("unicast", 1))

class CmNtpMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("client", 1), ("server", 2), ("both", 3), ("ntp-server-and-peering", 4), ("ntp-peering", 5))

class CmNtpServerType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("primary", 1), ("secondary", 2))

class CmFileTransferMethod(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("ftp", 1), ("scp", 2), ("sftp", 3), ("web", 4), ("tftp", 5))

class CmVersionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("active", 1), ("standby", 2), ("staging", 3))

class CmFileServicesStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("in-progress", 1), ("success", 2), ("login-failed", 3), ("file-not-found", 4), ("permission-denied", 5), ("server-unreachable", 6), ("no-space-left", 7), ("invalid-file-type", 8), ("nobackup-database", 9), ("no-sw-toinstall", 10), ("sw-not-installed", 11), ("validation-timer-notactive", 12), ("cannot-revert", 13), ("install-failed", 14), ("upgrade-failed", 15), ("revert-failed", 16), ("failure", 17), ("badarchive", 18), ("incompatarchive", 19), ("swVersionNotApproved", 20))

class CmFileServicesMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))
    namedValues = NamedValues(("idle", 1), ("dbupload", 2), ("dbdownload", 3), ("dbbackup", 4), ("dbrestore", 5), ("swdownload", 6), ("swinstall", 7), ("swupgrade", 8), ("swvalidate", 9), ("swcancelupgrade", 10), ("swrevert", 11), ("rebooting", 12), ("debugfileupload", 13), ("securitylogfileupload", 14), ("alarmlogfileupload", 15), ("auditlogfileupload", 16), ("dbpropagate", 17), ("swpropagate", 18), ("sysdiagfileupload", 19), ("sysdiagfilesave", 20), ("configfileupload", 21), ("configfiledownload", 22), ("defaultvalsfiledownload", 23), ("satresultupload", 24), ("sslcertificatedownload", 25), ("sslprivatekeydownload", 26), ("sslencprivatekeydownload", 27), ("sslkeypairdownload", 28), ("csrUpload", 29), ("rfc2544testreportupload", 30))

class CmRestartCauseType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("poweronreset", 1), ("userinitiated", 2), ("unreoverableappevent", 3), ("unrecoverablesysevent", 4), ("hwwatchdogexpired", 5), ("bustxntimeout", 6), ("hardware", 7), ("buttonReset", 8), ("buttonFactoryDefaultReset", 9))

class F3ConfigFileAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 0), ("restart-with-file", 1), ("save-delta", 2), ("remove", 3), ("save-full", 4), ("load-config", 5))

class F3ConfigFileStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("not-applicable", 0), ("initial", 1), ("in-progress", 2), ("completed", 3), ("failed", 4))

class TimeOfDayType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("local", 1), ("ntp", 2), ("ptp", 3), ("timeclock", 4), ("ntpclock", 5))

class LldpV2ConfigurationADVAExtMaxNeighborsAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("delete-entry", 1), ("discard-lldppdu", 2))

class FileTransferServerType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("ipaddr", 1), ("ipv6addr", 2), ("hostname", 3), ("url", 4))

class ServerConfigType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("dhcp", 1), ("userdefined", 2))

class NtpAuthKeyType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("md5", 1), ("sha1", 2))

class SysLogFormatType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("adva", 1), ("rfc3164", 2))

class SysAuthKeyType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("notApplicable", 0), ("md5", 1))

class AffectedEntity(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 0), ("none", 1), ("shelf", 2), ("card1", 3), ("card2", 4))

class PeerUpgradeReadyCondition(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("notApplicable", 1), ("ignorealarms", 2), ("nocriticalalarms", 3), ("nomjandcrialarms", 4), ("noalarms", 5))

class PeerUpgradeStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inprogress", 1), ("ready", 2))

class CallhomeState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("completed", 1), ("failed", 2), ("inProgress", 3), ("notStarted", 4))

class F3TargetAddressLifetime(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("notApplicable", 0), ("duration1hour", 1), ("duration1day", 2), ("duration3days", 3), ("duration1week", 4), ("duration1month", 5), ("unlimited", 6))

lastSetErrorInformation = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastSetErrorInformation.setStatus('current')
cliCmdPromptPrefix = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cliCmdPromptPrefix.setStatus('current')
securityBanner = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityBanner.setStatus('current')
aclTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 2), )
if mibBuilder.loadTexts: aclTable.setStatus('current')
aclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 2, 1), ).setIndexNames((0, "CM-SYSTEM-MIB", "aclEntryIndex"))
if mibBuilder.loadTexts: aclEntry.setStatus('current')
aclEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclEntryIndex.setStatus('current')
aclEntryFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 2, 1, 2), CmAclFilterAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclEntryFilterAction.setStatus('current')
aclEntryNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclEntryNetworkAddress.setStatus('current')
aclEntryNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclEntryNetworkMask.setStatus('current')
aclEntryEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclEntryEnabled.setStatus('current')
aclEntryIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 2, 1, 6), IpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclEntryIpVersion.setStatus('current')
aclEntryNetworkIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 2, 1, 7), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclEntryNetworkIpv6Addr.setStatus('current')
aclEntryPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclEntryPrefixLength.setStatus('current')
serialPortDisconnectAutoLogOff = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialPortDisconnectAutoLogOff.setStatus('current')
securityPromptEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityPromptEnabled.setStatus('current')
telnetEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetEnabled.setStatus('current')
sshEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshEnabled.setStatus('current')
ftpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpEnabled.setStatus('current')
scpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scpEnabled.setStatus('current')
serialPortEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialPortEnabled.setStatus('current')
httpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpEnabled.setStatus('current')
httpsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsEnabled.setStatus('current')
sftpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sftpEnabled.setStatus('current')
tftpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpEnabled.setStatus('current')
netconfOverSSHEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netconfOverSSHEnabled.setStatus('current')
usbPortEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usbPortEnabled.setStatus('current')
ntpMode = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 5, 1), CmNtpMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpMode.setStatus('current')
autoProvMode = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("confirm", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoProvMode.setStatus('current')
sysTimeOfDayType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 5, 3), TimeOfDayType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeOfDayType.setStatus('current')
ntpServerConfigType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 5, 4), ServerConfigType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServerConfigType.setStatus('current')
sysLogServerConfigType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 5, 5), ServerConfigType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogServerConfigType.setStatus('current')
sysUseUtcLeapOffsetEnable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 5, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysUseUtcLeapOffsetEnable.setStatus('current')
sysLogTimestampFormat = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 5, 7), SysLogFormatType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogTimestampFormat.setStatus('current')
sysLogFacilityCode = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogFacilityCode.setStatus('current')
fileServicesAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("not-applicable", 0), ("get-database", 1), ("put-database", 2), ("software-copy", 3), ("get-sys-database", 4), ("put-sys-database", 5), ("get-defaultsvalue-file", 6), ("put-sysresetdebuginfo-file", 7), ("put-securitylog-file", 8), ("put-alarmlog-file", 9), ("put-auditlog-file", 10), ("get-config-file", 11), ("put-config-file", 12), ("put-sat-result", 13), ("get-ssl-certificate", 14), ("get-ssl-private-key", 15), ("get-ssl-encrypt-private-Key", 16), ("get-ssl-key-pair", 17), ("put-csr", 18), ("put-rfc2544-test-report", 19)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesAction.setStatus('current')
fileServicesMethod = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 2), CmFileTransferMethod()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesMethod.setStatus('current')
fileServicesServerIp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesServerIp.setStatus('current')
fileServicesUserId = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesUserId.setStatus('current')
fileServicesPassword = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesPassword.setStatus('current')
fileServicesRemoteFile = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesRemoteFile.setStatus('current')
fileServicesStatus = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 7), CmFileServicesStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileServicesStatus.setStatus('current')
fileServicesPercentComplete = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileServicesPercentComplete.setStatus('current')
fileServicesMode = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 9), CmFileServicesMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileServicesMode.setStatus('current')
fileServicesServerType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 10), FileTransferServerType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesServerType.setStatus('current')
fileServicesServerIpv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 11), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesServerIpv6Addr.setStatus('current')
fileServicesDbFileName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileServicesDbFileName.setStatus('current')
fileServicesAffectedEntity = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 13), AffectedEntity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesAffectedEntity.setStatus('current')
fileServicesSslKeyPairName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesSslKeyPairName.setStatus('current')
fileServicesDecryptionPassword = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesDecryptionPassword.setStatus('current')
fileServicesCsrName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesCsrName.setStatus('current')
databaseAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("not-applicable", 0), ("backup", 1), ("restore", 2), ("activate", 3), ("save-sysdefaults", 4), ("new-sysdefaults", 5), ("restore-sysdefaults", 6), ("restore-factorydefaults", 7), ("propagate-to-standby-nemi", 8), ("force-normal", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseAction.setStatus('current')
databaseLastSaveTime = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 6, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: databaseLastSaveTime.setStatus('current')
databaseTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 6, 3), )
if mibBuilder.loadTexts: databaseTable.setStatus('current')
databaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 6, 3, 1), ).setIndexNames((0, "CM-SYSTEM-MIB", "databaseIndex"))
if mibBuilder.loadTexts: databaseEntry.setStatus('current')
databaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: databaseIndex.setStatus('current')
databaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 6, 3, 1, 2), CmVersionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: databaseType.setStatus('current')
databaseVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 6, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: databaseVersion.setStatus('current')
databaseActionPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseActionPassphrase.setStatus('current')
softwareAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("not-applicable", 0), ("install", 1), ("schedule-upgrade", 2), ("cancel-upgrade", 3), ("validate-upgrade", 4), ("revert-upgrade", 5), ("propagate-to-standby-nemi", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareAction.setStatus('current')
softwareUpgradeTime = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7, 2), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareUpgradeTime.setStatus('current')
softwareValidationTimer = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 720), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareValidationTimer.setStatus('current')
softwareTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7, 4), )
if mibBuilder.loadTexts: softwareTable.setStatus('current')
softwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7, 4, 1), ).setIndexNames((0, "CM-SYSTEM-MIB", "softwareIndex"))
if mibBuilder.loadTexts: softwareEntry.setStatus('current')
softwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareIndex.setStatus('current')
softwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7, 4, 1, 2), CmVersionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareType.setStatus('current')
softwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('current')
softwareAffectedEntity = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7, 5), AffectedEntity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareAffectedEntity.setStatus('current')
softwarePeerCondition = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7, 6), PeerUpgradeReadyCondition()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwarePeerCondition.setStatus('current')
peerUpgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7, 7), PeerUpgradeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peerUpgradeStatus.setStatus('current')
cmSysLogObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 1))
cmSecLogObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 2))
cmAuditLogObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 3))
cmAlarmLogObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 4))
sysLogServerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 1, 1), )
if mibBuilder.loadTexts: sysLogServerTable.setStatus('current')
sysLogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 1, 1, 1), ).setIndexNames((0, "CM-SYSTEM-MIB", "sysLogServerIndex"))
if mibBuilder.loadTexts: sysLogServerEntry.setStatus('current')
sysLogServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLogServerIndex.setStatus('current')
sysLogIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogIpAddress.setStatus('current')
sysLogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogPort.setStatus('current')
sysLogIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 1, 1, 1, 4), IpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogIpVersion.setStatus('current')
sysLogIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 1, 1, 1, 5), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogIpv6Addr.setStatus('current')
secLog2sysLogEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secLog2sysLogEnabled.setStatus('current')
auditLog2sysLogEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLog2sysLogEnabled.setStatus('current')
auditLog2fileEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 3, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLog2fileEnabled.setStatus('current')
alarmLog2sysLogEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmLog2sysLogEnabled.setStatus('current')
alarmLog2fileEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 4, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmLog2fileEnabled.setStatus('current')
ntpClientEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpClientEnabled.setStatus('current')
ntpPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpPrimaryServer.setStatus('current')
ntpBackupServer = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpBackupServer.setStatus('current')
ntpType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 4), CmNtpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpType.setStatus('current')
ntpActiveServer = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 5), CmNtpServerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpActiveServer.setStatus('current')
ntpSwitchServer = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 6), CmNtpServerType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpSwitchServer.setStatus('current')
ntpServerRoundTripDelay = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerRoundTripDelay.setStatus('current')
ntpServerPrecision = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerPrecision.setStatus('current')
ntpPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpPollingInterval.setStatus('current')
ntpPrimaryServerIpVersion = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 10), IpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpPrimaryServerIpVersion.setStatus('current')
ntpPrimaryServerIpv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 11), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpPrimaryServerIpv6Addr.setStatus('current')
ntpBackupServerIpVersion = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 12), IpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpBackupServerIpVersion.setStatus('current')
ntpBackupServerIpv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 13), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpBackupServerIpv6Addr.setStatus('current')
ntpPrimaryServerAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 14), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpPrimaryServerAuthKey.setStatus('current')
ntpBackupServerAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 15), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpBackupServerAuthKey.setStatus('current')
f3NtpAuthKeyTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 16), )
if mibBuilder.loadTexts: f3NtpAuthKeyTable.setStatus('current')
f3NtpAuthKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 16, 1), ).setIndexNames((0, "CM-SYSTEM-MIB", "f3NtpAuthKeyId"))
if mibBuilder.loadTexts: f3NtpAuthKeyEntry.setStatus('current')
f3NtpAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: f3NtpAuthKeyId.setStatus('current')
f3NtpAuthKeyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 16, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NtpAuthKeyNumber.setStatus('current')
f3NtpAuthKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 16, 1, 3), NtpAuthKeyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NtpAuthKeyType.setStatus('current')
f3NtpAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 16, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NtpAuthKey.setStatus('current')
f3NtpAuthKeyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 16, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NtpAuthKeyStorageType.setStatus('current')
f3NtpAuthKeyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 16, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NtpAuthKeyRowStatus.setStatus('current')
f3SnmpTargetAddrExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 11, 1), )
if mibBuilder.loadTexts: f3SnmpTargetAddrExtTable.setStatus('current')
f3SnmpTargetAddrExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 11, 1, 1), ).setIndexNames((1, "SNMP-TARGET-MIB", "snmpTargetAddrName"))
if mibBuilder.loadTexts: f3SnmpTargetAddrExtEntry.setStatus('current')
f3SnmpTargetAddrExtDyingGaspPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 11, 1, 1, 1), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SnmpTargetAddrExtDyingGaspPort.setStatus('current')
f3SnmpTargetAddrExtDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 11, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SnmpTargetAddrExtDyingGaspEnabled.setStatus('current')
f3SnmpTargetAddrExtDyingGaspActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 11, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SnmpTargetAddrExtDyingGaspActive.setStatus('current')
f3SnmpTargetAddrExtBulkTrapsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 11, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SnmpTargetAddrExtBulkTrapsEnabled.setStatus('current')
f3SnmpTargetAddrExtLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 11, 1, 1, 5), F3TargetAddressLifetime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SnmpTargetAddrExtLifetime.setStatus('current')
f3SnmpEngineID = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 11, 2), SnmpEngineID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SnmpEngineID.setStatus('current')
f3SnmpLongIfAlias = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 11, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SnmpLongIfAlias.setStatus('current')
f3SysLastResetType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 12, 1), RestartType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SysLastResetType.setStatus('current')
f3SysLastResetCauseType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 12, 2), CmRestartCauseType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SysLastResetCauseType.setStatus('current')
f3SysLastAbnormalResetTimestamp1 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 12, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SysLastAbnormalResetTimestamp1.setStatus('current')
f3SysLastAbnormalResetTimestamp2 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 12, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SysLastAbnormalResetTimestamp2.setStatus('current')
f3SysLastAbnormalResetTimestamp3 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 12, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SysLastAbnormalResetTimestamp3.setStatus('current')
f3SysResetButtonControl = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 12, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SysResetButtonControl.setStatus('current')
f3DatabaseSyncTrapObject = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 13, 1), VariablePointer())
if mibBuilder.loadTexts: f3DatabaseSyncTrapObject.setStatus('current')
f3StartNeEventLogIndex = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 4, 1), TrapCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3StartNeEventLogIndex.setStatus('current')
f3EndNeEventLogIndex = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 4, 2), TrapCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EndNeEventLogIndex.setStatus('current')
f3ConfigFileActionFileName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConfigFileActionFileName.setStatus('current')
f3ConfigFileAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14, 2), F3ConfigFileAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConfigFileAction.setStatus('current')
f3ConfigFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14, 3), F3ConfigFileStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConfigFileStatus.setStatus('current')
f3ConfigFileErrorInformation = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConfigFileErrorInformation.setStatus('current')
f3ConfigFileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14, 5), )
if mibBuilder.loadTexts: f3ConfigFileTable.setStatus('current')
f3ConfigFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14, 5, 1), ).setIndexNames((0, "CM-SYSTEM-MIB", "f3ConfigFileIndex"))
if mibBuilder.loadTexts: f3ConfigFileEntry.setStatus('current')
f3ConfigFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: f3ConfigFileIndex.setStatus('current')
f3ConfigFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConfigFileName.setStatus('current')
f3ConfigFileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConfigFileDescription.setStatus('current')
f3ConfigFilePercentComplete = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConfigFilePercentComplete.setStatus('current')
f3ConfigFilePassphrase = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConfigFilePassphrase.setStatus('current')
f3SystemFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 15, 1), )
if mibBuilder.loadTexts: f3SystemFeatureTable.setStatus('current')
f3SystemFeatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 15, 1, 1), ).setIndexNames((0, "CM-SYSTEM-MIB", "f3SystemFeatureIndex"))
if mibBuilder.loadTexts: f3SystemFeatureEntry.setStatus('current')
f3SystemFeatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SystemFeatureIndex.setStatus('current')
f3SystemFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 15, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SystemFeatureName.setStatus('current')
f3SystemFeatureEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 15, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SystemFeatureEnabled.setStatus('current')
f3SystemLldpV2DestAddressADVAExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 1), )
if mibBuilder.loadTexts: f3SystemLldpV2DestAddressADVAExtTable.setStatus('current')
f3SystemLldpV2DestAddressADVAExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 1, 1), ).setIndexNames((0, "CM-SYSTEM-MIB", "f3SystemLldpV2DestAddressADVAExtIndex"))
if mibBuilder.loadTexts: f3SystemLldpV2DestAddressADVAExtEntry.setStatus('current')
f3SystemLldpV2DestAddressADVAExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: f3SystemLldpV2DestAddressADVAExtIndex.setStatus('current')
f3SystemLldpV2ADVAExtDestMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SystemLldpV2ADVAExtDestMacAddress.setStatus('current')
f3SystemLldpV2DestAddressADVAExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SystemLldpV2DestAddressADVAExtRowStatus.setStatus('current')
f3SystemLldpV2PortConfigADVAExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 2), )
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtTable.setStatus('current')
f3SystemLldpV2PortConfigADVAExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 2, 1), ).setIndexNames((0, "CM-SYSTEM-MIB", "f3SystemLldpV2PortConfigADVAExtIfIndex"), (0, "CM-SYSTEM-MIB", "f3SystemLldpV2PortConfigADVAExtDestAddressIndex"))
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtEntry.setStatus('current')
f3SystemLldpV2PortConfigADVAExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtIfIndex.setStatus('current')
f3SystemLldpV2PortConfigADVAExtDestAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 2, 1, 2), LldpV2DestAddressTableIndex())
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtDestAddressIndex.setStatus('current')
f3SystemLldpV2PortConfigADVAExtAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("txOnly", 1), ("rxOnly", 2), ("txAndRx", 3), ("disabled", 4))).clone('txAndRx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtAdminStatus.setStatus('current')
f3SystemLldpV2PortConfigADVAExtNotificationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 2, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtNotificationEnable.setStatus('current')
f3SystemLldpV2PortConfigADVAExtTLVsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 2, 1, 5), Bits().clone(namedValues=NamedValues(("portDesc", 0), ("sysName", 1), ("sysDesc", 2), ("sysCap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtTLVsTxEnable.setStatus('current')
f3SystemLldpV2PortConfigADVAExtStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 2, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtStorageType.setStatus('current')
f3SystemLldpV2PortConfigADVAExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtRowStatus.setStatus('current')
f3SystemLldpV2ManAddrConfigTxPortsADVAExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 3), )
if mibBuilder.loadTexts: f3SystemLldpV2ManAddrConfigTxPortsADVAExtTable.setStatus('current')
f3SystemLldpV2ManAddrConfigTxPortsADVAExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 3, 1), ).setIndexNames((0, "CM-SYSTEM-MIB", "f3SystemLldpV2PortConfigADVAExtIfIndex"), (0, "CM-SYSTEM-MIB", "f3SystemLldpV2PortConfigADVAExtDestAddressIndex"), (0, "CM-SYSTEM-MIB", "f3SystemLldpV2ManAddrConfigTxPortsADVAExtRefInterface"))
if mibBuilder.loadTexts: f3SystemLldpV2ManAddrConfigTxPortsADVAExtEntry.setStatus('current')
f3SystemLldpV2ManAddrConfigTxPortsADVAExtRefInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 3, 1, 1), VariablePointer())
if mibBuilder.loadTexts: f3SystemLldpV2ManAddrConfigTxPortsADVAExtRefInterface.setStatus('current')
f3SystemLldpV2ManAddrConfigTxPortsADVAExtEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 3, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SystemLldpV2ManAddrConfigTxPortsADVAExtEnable.setStatus('current')
f3SystemLldpV2ManAddrConfigTxPortsADVAExtStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 3, 1, 3), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SystemLldpV2ManAddrConfigTxPortsADVAExtStorageType.setStatus('current')
f3SystemLldpV2ManAddrConfigTxPortsADVAExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SystemLldpV2ManAddrConfigTxPortsADVAExtRowStatus.setStatus('current')
f3LldpMaxNeighborsAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 17, 1), LldpV2ConfigurationADVAExtMaxNeighborsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3LldpMaxNeighborsAction.setStatus('current')
f3RawDataServerFtProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 19, 1), CmFileTransferMethod()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3RawDataServerFtProtocol.setStatus('current')
f3RawDataServerFtServerName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 19, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3RawDataServerFtServerName.setStatus('current')
f3RawDataServerFtUserId = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 19, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3RawDataServerFtUserId.setStatus('current')
f3RawDataServerFtPasswd = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 19, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3RawDataServerFtPasswd.setStatus('current')
f3LldpV2RemExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 20, 1), )
if mibBuilder.loadTexts: f3LldpV2RemExtTable.setStatus('current')
f3LldpV2RemExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 20, 1, 1), )
lldpV2RemEntry.registerAugmentions(("CM-SYSTEM-MIB", "f3LldpV2RemExtEntry"))
f3LldpV2RemExtEntry.setIndexNames(*lldpV2RemEntry.getIndexNames())
if mibBuilder.loadTexts: f3LldpV2RemExtEntry.setStatus('current')
f3LldpV2RemTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 20, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3LldpV2RemTTL.setStatus('current')
f3SimpleLtpControl = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 21, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SimpleLtpControl.setStatus('current')
f3SimpleLtpTransferProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 21, 2), CmFileTransferMethod()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SimpleLtpTransferProtocol.setStatus('current')
f3SimpleLtpServerIpv4Addr = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 21, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SimpleLtpServerIpv4Addr.setStatus('current')
f3SimpleLtpUserName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 21, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SimpleLtpUserName.setStatus('current')
f3SimpleLtpPasswd = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 21, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SimpleLtpPasswd.setStatus('current')
f3SimpleLtpConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 21, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SimpleLtpConfigFileName.setStatus('current')
f3SimpleLtpSoftwareFileName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 21, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SimpleLtpSoftwareFileName.setStatus('current')
f3SysAuthKeyTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 22, 1), )
if mibBuilder.loadTexts: f3SysAuthKeyTable.setStatus('current')
f3SysAuthKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 22, 1, 1), ).setIndexNames((0, "CM-SYSTEM-MIB", "f3SysAuthKeyIndex"))
if mibBuilder.loadTexts: f3SysAuthKeyEntry.setStatus('current')
f3SysAuthKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 22, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: f3SysAuthKeyIndex.setStatus('current')
f3SysAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 22, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SysAuthKeyId.setStatus('current')
f3SysAuthKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 22, 1, 1, 3), SysAuthKeyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SysAuthKeyType.setStatus('current')
f3SysAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 22, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SysAuthKey.setStatus('current')
f3SysAuthKeyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 22, 1, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SysAuthKeyStorageType.setStatus('current')
f3SysAuthKeyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 22, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SysAuthKeyRowStatus.setStatus('current')
f3CallhomeClientIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 23, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3CallhomeClientIpAddress.setStatus('current')
f3CallhomeState = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 23, 2), CallhomeState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CallhomeState.setStatus('current')
f3ApplicationsBootCompleted = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 24, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ApplicationsBootCompleted.setStatus('current')
f3ApplicationsUpTime = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 24, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ApplicationsUpTime.setStatus('current')
f3EnsembleZtpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 25, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EnsembleZtpEnabled.setStatus('current')
cmStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 2, 1))
if mibBuilder.loadTexts: cmStateChangeTrap.setStatus('current')
cmAttributeValueChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 2, 2))
if mibBuilder.loadTexts: cmAttributeValueChangeTrap.setStatus('current')
cmObjectCreationTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 2, 3))
if mibBuilder.loadTexts: cmObjectCreationTrap.setStatus('current')
cmObjectDeletionTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 2, 4))
if mibBuilder.loadTexts: cmObjectDeletionTrap.setStatus('current')
cmSnmpDyingGaspTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 2, 5))
if mibBuilder.loadTexts: cmSnmpDyingGaspTrap.setStatus('current')
f3DatabaseSyncTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 2, 6))
if mibBuilder.loadTexts: f3DatabaseSyncTrap.setStatus('current')
f3BulkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 5, 1))
if mibBuilder.loadTexts: f3BulkTrap.setStatus('current')
cmSystemCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 3, 1))
cmSystemGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 3, 2))
f3SystemBulkGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 3, 3))
cmSystemCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 3, 1, 1)).setObjects(("CM-SYSTEM-MIB", "cmSystemObjectGroup"), ("CM-SYSTEM-MIB", "cmSystemNotifGroup"), ("CM-SYSTEM-MIB", "f3SystemObjectBulkGroup"), ("CM-SYSTEM-MIB", "f3SystemNotifBulkGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmSystemCompliance = cmSystemCompliance.setStatus('current')
cmSystemObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 3, 2, 1)).setObjects(("CM-SYSTEM-MIB", "lastSetErrorInformation"), ("CM-SYSTEM-MIB", "cliCmdPromptPrefix"), ("CM-SYSTEM-MIB", "securityPromptEnabled"), ("CM-SYSTEM-MIB", "securityBanner"), ("CM-SYSTEM-MIB", "aclEntryFilterAction"), ("CM-SYSTEM-MIB", "aclEntryNetworkAddress"), ("CM-SYSTEM-MIB", "aclEntryNetworkMask"), ("CM-SYSTEM-MIB", "aclEntryEnabled"), ("CM-SYSTEM-MIB", "aclEntryIpVersion"), ("CM-SYSTEM-MIB", "aclEntryNetworkIpv6Addr"), ("CM-SYSTEM-MIB", "aclEntryPrefixLength"), ("CM-SYSTEM-MIB", "serialPortDisconnectAutoLogOff"), ("CM-SYSTEM-MIB", "telnetEnabled"), ("CM-SYSTEM-MIB", "sshEnabled"), ("CM-SYSTEM-MIB", "ftpEnabled"), ("CM-SYSTEM-MIB", "scpEnabled"), ("CM-SYSTEM-MIB", "serialPortEnabled"), ("CM-SYSTEM-MIB", "httpEnabled"), ("CM-SYSTEM-MIB", "httpsEnabled"), ("CM-SYSTEM-MIB", "sftpEnabled"), ("CM-SYSTEM-MIB", "tftpEnabled"), ("CM-SYSTEM-MIB", "netconfOverSSHEnabled"), ("CM-SYSTEM-MIB", "usbPortEnabled"), ("CM-SYSTEM-MIB", "ntpMode"), ("CM-SYSTEM-MIB", "autoProvMode"), ("CM-SYSTEM-MIB", "sysTimeOfDayType"), ("CM-SYSTEM-MIB", "ntpServerConfigType"), ("CM-SYSTEM-MIB", "sysLogServerConfigType"), ("CM-SYSTEM-MIB", "sysLogTimestampFormat"), ("CM-SYSTEM-MIB", "sysLogFacilityCode"), ("CM-SYSTEM-MIB", "fileServicesAction"), ("CM-SYSTEM-MIB", "fileServicesMethod"), ("CM-SYSTEM-MIB", "fileServicesServerIp"), ("CM-SYSTEM-MIB", "fileServicesUserId"), ("CM-SYSTEM-MIB", "fileServicesPassword"), ("CM-SYSTEM-MIB", "fileServicesRemoteFile"), ("CM-SYSTEM-MIB", "fileServicesDbFileName"), ("CM-SYSTEM-MIB", "fileServicesStatus"), ("CM-SYSTEM-MIB", "fileServicesPercentComplete"), ("CM-SYSTEM-MIB", "fileServicesMode"), ("CM-SYSTEM-MIB", "fileServicesServerType"), ("CM-SYSTEM-MIB", "fileServicesServerIpv6Addr"), ("CM-SYSTEM-MIB", "fileServicesAffectedEntity"), ("CM-SYSTEM-MIB", "fileServicesSslKeyPairName"), ("CM-SYSTEM-MIB", "fileServicesDecryptionPassword"), ("CM-SYSTEM-MIB", "sysLogIpVersion"), ("CM-SYSTEM-MIB", "sysLogIpv6Addr"), ("CM-SYSTEM-MIB", "fileServicesCsrName"), ("CM-SYSTEM-MIB", "ntpPrimaryServerIpVersion"), ("CM-SYSTEM-MIB", "ntpPrimaryServerIpv6Addr"), ("CM-SYSTEM-MIB", "ntpBackupServerIpVersion"), ("CM-SYSTEM-MIB", "ntpBackupServerIpv6Addr"), ("CM-SYSTEM-MIB", "ntpPrimaryServerAuthKey"), ("CM-SYSTEM-MIB", "ntpBackupServerAuthKey"), ("CM-SYSTEM-MIB", "databaseAction"), ("CM-SYSTEM-MIB", "databaseLastSaveTime"), ("CM-SYSTEM-MIB", "databaseIndex"), ("CM-SYSTEM-MIB", "databaseType"), ("CM-SYSTEM-MIB", "databaseVersion"), ("CM-SYSTEM-MIB", "databaseActionPassphrase"), ("CM-SYSTEM-MIB", "softwareAction"), ("CM-SYSTEM-MIB", "softwareUpgradeTime"), ("CM-SYSTEM-MIB", "softwareValidationTimer"), ("CM-SYSTEM-MIB", "softwareIndex"), ("CM-SYSTEM-MIB", "softwareType"), ("CM-SYSTEM-MIB", "softwareVersion"), ("CM-SYSTEM-MIB", "softwareAffectedEntity"), ("CM-SYSTEM-MIB", "softwarePeerCondition"), ("CM-SYSTEM-MIB", "peerUpgradeStatus"), ("CM-SYSTEM-MIB", "sysLogServerIndex"), ("CM-SYSTEM-MIB", "sysLogIpAddress"), ("CM-SYSTEM-MIB", "sysLogPort"), ("CM-SYSTEM-MIB", "secLog2sysLogEnabled"), ("CM-SYSTEM-MIB", "auditLog2sysLogEnabled"), ("CM-SYSTEM-MIB", "auditLog2fileEnabled"), ("CM-SYSTEM-MIB", "alarmLog2sysLogEnabled"), ("CM-SYSTEM-MIB", "alarmLog2fileEnabled"), ("CM-SYSTEM-MIB", "ntpClientEnabled"), ("CM-SYSTEM-MIB", "ntpPrimaryServer"), ("CM-SYSTEM-MIB", "ntpBackupServer"), ("CM-SYSTEM-MIB", "ntpType"), ("CM-SYSTEM-MIB", "ntpActiveServer"), ("CM-SYSTEM-MIB", "ntpSwitchServer"), ("CM-SYSTEM-MIB", "ntpServerRoundTripDelay"), ("CM-SYSTEM-MIB", "ntpServerPrecision"), ("CM-SYSTEM-MIB", "ntpPollingInterval"), ("CM-SYSTEM-MIB", "f3SnmpTargetAddrExtDyingGaspPort"), ("CM-SYSTEM-MIB", "f3SnmpTargetAddrExtDyingGaspEnabled"), ("CM-SYSTEM-MIB", "f3SnmpTargetAddrExtDyingGaspActive"), ("CM-SYSTEM-MIB", "f3SnmpTargetAddrExtBulkTrapsEnabled"), ("CM-SYSTEM-MIB", "f3SnmpTargetAddrExtLifetime"), ("CM-SYSTEM-MIB", "f3SysLastResetType"), ("CM-SYSTEM-MIB", "f3SysLastResetCauseType"), ("CM-SYSTEM-MIB", "f3SysLastAbnormalResetTimestamp1"), ("CM-SYSTEM-MIB", "f3SysLastAbnormalResetTimestamp2"), ("CM-SYSTEM-MIB", "f3SysLastAbnormalResetTimestamp3"), ("CM-SYSTEM-MIB", "f3SysResetButtonControl"), ("CM-SYSTEM-MIB", "f3SimpleLtpControl"), ("CM-SYSTEM-MIB", "f3SimpleLtpTransferProtocol"), ("CM-SYSTEM-MIB", "f3SimpleLtpServerIpv4Addr"), ("CM-SYSTEM-MIB", "f3SimpleLtpUserName"), ("CM-SYSTEM-MIB", "f3SimpleLtpPasswd"), ("CM-SYSTEM-MIB", "f3SimpleLtpConfigFileName"), ("CM-SYSTEM-MIB", "f3SimpleLtpSoftwareFileName"), ("CM-SYSTEM-MIB", "f3DatabaseSyncTrapObject"), ("CM-SYSTEM-MIB", "f3ConfigFileActionFileName"), ("CM-SYSTEM-MIB", "f3ConfigFileAction"), ("CM-SYSTEM-MIB", "f3ConfigFileStatus"), ("CM-SYSTEM-MIB", "f3ConfigFileErrorInformation"), ("CM-SYSTEM-MIB", "f3ConfigFileIndex"), ("CM-SYSTEM-MIB", "f3ConfigFileName"), ("CM-SYSTEM-MIB", "f3ConfigFileDescription"), ("CM-SYSTEM-MIB", "f3ConfigFilePercentComplete"), ("CM-SYSTEM-MIB", "f3ConfigFilePassphrase"), ("CM-SYSTEM-MIB", "f3SystemFeatureIndex"), ("CM-SYSTEM-MIB", "f3SystemFeatureName"), ("CM-SYSTEM-MIB", "f3SystemFeatureEnabled"), ("CM-SYSTEM-MIB", "f3SystemLldpV2DestAddressADVAExtIndex"), ("CM-SYSTEM-MIB", "f3SystemLldpV2ADVAExtDestMacAddress"), ("CM-SYSTEM-MIB", "f3SystemLldpV2DestAddressADVAExtRowStatus"), ("CM-SYSTEM-MIB", "f3LldpMaxNeighborsAction"), ("CM-SYSTEM-MIB", "f3SystemLldpV2PortConfigADVAExtIfIndex"), ("CM-SYSTEM-MIB", "f3SystemLldpV2PortConfigADVAExtDestAddressIndex"), ("CM-SYSTEM-MIB", "f3SystemLldpV2PortConfigADVAExtAdminStatus"), ("CM-SYSTEM-MIB", "f3SystemLldpV2PortConfigADVAExtNotificationEnable"), ("CM-SYSTEM-MIB", "f3SystemLldpV2PortConfigADVAExtTLVsTxEnable"), ("CM-SYSTEM-MIB", "f3SystemLldpV2PortConfigADVAExtStorageType"), ("CM-SYSTEM-MIB", "f3SystemLldpV2PortConfigADVAExtRowStatus"), ("CM-SYSTEM-MIB", "f3SystemLldpV2ManAddrConfigTxPortsADVAExtRefInterface"), ("CM-SYSTEM-MIB", "f3SystemLldpV2ManAddrConfigTxPortsADVAExtEnable"), ("CM-SYSTEM-MIB", "f3SystemLldpV2ManAddrConfigTxPortsADVAExtStorageType"), ("CM-SYSTEM-MIB", "f3SystemLldpV2ManAddrConfigTxPortsADVAExtRowStatus"), ("CM-SYSTEM-MIB", "f3RawDataServerFtProtocol"), ("CM-SYSTEM-MIB", "f3RawDataServerFtServerName"), ("CM-SYSTEM-MIB", "f3RawDataServerFtUserId"), ("CM-SYSTEM-MIB", "f3RawDataServerFtPasswd"), ("CM-SYSTEM-MIB", "f3LldpV2RemTTL"), ("CM-SYSTEM-MIB", "f3NtpAuthKeyId"), ("CM-SYSTEM-MIB", "f3NtpAuthKeyNumber"), ("CM-SYSTEM-MIB", "f3NtpAuthKeyType"), ("CM-SYSTEM-MIB", "f3NtpAuthKey"), ("CM-SYSTEM-MIB", "f3NtpAuthKeyStorageType"), ("CM-SYSTEM-MIB", "f3NtpAuthKeyRowStatus"), ("CM-SYSTEM-MIB", "f3SysAuthKeyIndex"), ("CM-SYSTEM-MIB", "f3SysAuthKeyId"), ("CM-SYSTEM-MIB", "f3SysAuthKeyType"), ("CM-SYSTEM-MIB", "f3SysAuthKey"), ("CM-SYSTEM-MIB", "f3SysAuthKeyStorageType"), ("CM-SYSTEM-MIB", "f3SysAuthKeyRowStatus"), ("CM-SYSTEM-MIB", "f3CallhomeClientIpAddress"), ("CM-SYSTEM-MIB", "f3CallhomeState"), ("CM-SYSTEM-MIB", "f3ApplicationsBootCompleted"), ("CM-SYSTEM-MIB", "f3ApplicationsUpTime"), ("CM-SYSTEM-MIB", "f3EnsembleZtpEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmSystemObjectGroup = cmSystemObjectGroup.setStatus('current')
cmSystemNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 3, 2, 2)).setObjects(("CM-SYSTEM-MIB", "cmStateChangeTrap"), ("CM-SYSTEM-MIB", "cmAttributeValueChangeTrap"), ("CM-SYSTEM-MIB", "cmObjectCreationTrap"), ("CM-SYSTEM-MIB", "cmObjectDeletionTrap"), ("CM-SYSTEM-MIB", "cmSnmpDyingGaspTrap"), ("CM-SYSTEM-MIB", "f3DatabaseSyncTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmSystemNotifGroup = cmSystemNotifGroup.setStatus('current')
cmSystemObjectGroupCmHub = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 3, 2, 3)).setObjects(("CM-SYSTEM-MIB", "lastSetErrorInformation"), ("CM-SYSTEM-MIB", "cliCmdPromptPrefix"), ("CM-SYSTEM-MIB", "securityPromptEnabled"), ("CM-SYSTEM-MIB", "securityBanner"), ("CM-SYSTEM-MIB", "aclEntryFilterAction"), ("CM-SYSTEM-MIB", "aclEntryNetworkAddress"), ("CM-SYSTEM-MIB", "aclEntryNetworkMask"), ("CM-SYSTEM-MIB", "aclEntryEnabled"), ("CM-SYSTEM-MIB", "serialPortDisconnectAutoLogOff"), ("CM-SYSTEM-MIB", "telnetEnabled"), ("CM-SYSTEM-MIB", "sshEnabled"), ("CM-SYSTEM-MIB", "ftpEnabled"), ("CM-SYSTEM-MIB", "scpEnabled"), ("CM-SYSTEM-MIB", "serialPortEnabled"), ("CM-SYSTEM-MIB", "httpEnabled"), ("CM-SYSTEM-MIB", "httpsEnabled"), ("CM-SYSTEM-MIB", "sftpEnabled"), ("CM-SYSTEM-MIB", "ntpMode"), ("CM-SYSTEM-MIB", "autoProvMode"), ("CM-SYSTEM-MIB", "fileServicesAction"), ("CM-SYSTEM-MIB", "fileServicesMethod"), ("CM-SYSTEM-MIB", "fileServicesServerIp"), ("CM-SYSTEM-MIB", "fileServicesUserId"), ("CM-SYSTEM-MIB", "fileServicesPassword"), ("CM-SYSTEM-MIB", "fileServicesRemoteFile"), ("CM-SYSTEM-MIB", "fileServicesDbFileName"), ("CM-SYSTEM-MIB", "fileServicesStatus"), ("CM-SYSTEM-MIB", "fileServicesPercentComplete"), ("CM-SYSTEM-MIB", "fileServicesMode"), ("CM-SYSTEM-MIB", "fileServicesServerType"), ("CM-SYSTEM-MIB", "fileServicesServerIpv6Addr"), ("CM-SYSTEM-MIB", "sysLogIpVersion"), ("CM-SYSTEM-MIB", "sysLogIpv6Addr"), ("CM-SYSTEM-MIB", "ntpPrimaryServerIpVersion"), ("CM-SYSTEM-MIB", "ntpPrimaryServerIpv6Addr"), ("CM-SYSTEM-MIB", "ntpBackupServerIpVersion"), ("CM-SYSTEM-MIB", "ntpBackupServerIpv6Addr"), ("CM-SYSTEM-MIB", "ntpPrimaryServerAuthKey"), ("CM-SYSTEM-MIB", "ntpBackupServerAuthKey"), ("CM-SYSTEM-MIB", "f3NtpAuthKeyId"), ("CM-SYSTEM-MIB", "f3NtpAuthKeyNumber"), ("CM-SYSTEM-MIB", "f3NtpAuthKeyType"), ("CM-SYSTEM-MIB", "f3NtpAuthKey"), ("CM-SYSTEM-MIB", "f3NtpAuthKeyStorageType"), ("CM-SYSTEM-MIB", "f3NtpAuthKeyRowStatus"), ("CM-SYSTEM-MIB", "databaseAction"), ("CM-SYSTEM-MIB", "databaseLastSaveTime"), ("CM-SYSTEM-MIB", "databaseIndex"), ("CM-SYSTEM-MIB", "databaseType"), ("CM-SYSTEM-MIB", "databaseVersion"), ("CM-SYSTEM-MIB", "softwareAction"), ("CM-SYSTEM-MIB", "softwareUpgradeTime"), ("CM-SYSTEM-MIB", "softwareValidationTimer"), ("CM-SYSTEM-MIB", "softwareIndex"), ("CM-SYSTEM-MIB", "softwareType"), ("CM-SYSTEM-MIB", "softwareVersion"), ("CM-SYSTEM-MIB", "sysLogServerIndex"), ("CM-SYSTEM-MIB", "sysLogIpAddress"), ("CM-SYSTEM-MIB", "sysLogPort"), ("CM-SYSTEM-MIB", "secLog2sysLogEnabled"), ("CM-SYSTEM-MIB", "auditLog2sysLogEnabled"), ("CM-SYSTEM-MIB", "auditLog2fileEnabled"), ("CM-SYSTEM-MIB", "alarmLog2sysLogEnabled"), ("CM-SYSTEM-MIB", "alarmLog2fileEnabled"), ("CM-SYSTEM-MIB", "ntpClientEnabled"), ("CM-SYSTEM-MIB", "ntpPrimaryServer"), ("CM-SYSTEM-MIB", "ntpBackupServer"), ("CM-SYSTEM-MIB", "ntpType"), ("CM-SYSTEM-MIB", "ntpActiveServer"), ("CM-SYSTEM-MIB", "ntpSwitchServer"), ("CM-SYSTEM-MIB", "ntpServerRoundTripDelay"), ("CM-SYSTEM-MIB", "ntpServerPrecision"), ("CM-SYSTEM-MIB", "ntpPollingInterval"), ("CM-SYSTEM-MIB", "f3SnmpTargetAddrExtDyingGaspPort"), ("CM-SYSTEM-MIB", "f3SnmpTargetAddrExtDyingGaspEnabled"), ("CM-SYSTEM-MIB", "f3SnmpTargetAddrExtDyingGaspActive"), ("CM-SYSTEM-MIB", "f3SysLastResetType"), ("CM-SYSTEM-MIB", "f3SysLastResetCauseType"), ("CM-SYSTEM-MIB", "f3SysLastAbnormalResetTimestamp1"), ("CM-SYSTEM-MIB", "f3SysLastAbnormalResetTimestamp2"), ("CM-SYSTEM-MIB", "f3SysLastAbnormalResetTimestamp3"), ("CM-SYSTEM-MIB", "f3SysResetButtonControl"), ("CM-SYSTEM-MIB", "f3SimpleLtpControl"), ("CM-SYSTEM-MIB", "f3SimpleLtpTransferProtocol"), ("CM-SYSTEM-MIB", "f3SimpleLtpServerIpv4Addr"), ("CM-SYSTEM-MIB", "f3SimpleLtpUserName"), ("CM-SYSTEM-MIB", "f3SimpleLtpPasswd"), ("CM-SYSTEM-MIB", "f3SimpleLtpConfigFileName"), ("CM-SYSTEM-MIB", "f3SimpleLtpSoftwareFileName"), ("CM-SYSTEM-MIB", "f3DatabaseSyncTrapObject"), ("CM-SYSTEM-MIB", "f3SysAuthKeyIndex"), ("CM-SYSTEM-MIB", "f3SysAuthKeyId"), ("CM-SYSTEM-MIB", "f3SysAuthKeyType"), ("CM-SYSTEM-MIB", "f3SysAuthKey"), ("CM-SYSTEM-MIB", "f3SysAuthKeyStorageType"), ("CM-SYSTEM-MIB", "f3SysAuthKeyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmSystemObjectGroupCmHub = cmSystemObjectGroupCmHub.setStatus('current')
f3SystemObjectBulkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 3, 3, 1)).setObjects(("CM-SYSTEM-MIB", "f3StartNeEventLogIndex"), ("CM-SYSTEM-MIB", "f3EndNeEventLogIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3SystemObjectBulkGroup = f3SystemObjectBulkGroup.setStatus('current')
f3SystemNotifBulkGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 3, 3, 2)).setObjects(("CM-SYSTEM-MIB", "f3BulkTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3SystemNotifBulkGroup = f3SystemNotifBulkGroup.setStatus('current')
mibBuilder.exportSymbols("CM-SYSTEM-MIB", fileServicesServerIpv6Addr=fileServicesServerIpv6Addr, f3NtpAuthKeyId=f3NtpAuthKeyId, f3SystemLldpV2ManAddrConfigTxPortsADVAExtEntry=f3SystemLldpV2ManAddrConfigTxPortsADVAExtEntry, f3SysAuthKey=f3SysAuthKey, ntpPrimaryServerIpv6Addr=ntpPrimaryServerIpv6Addr, f3RawDataObjects=f3RawDataObjects, softwareAction=softwareAction, cmSystemObjects=cmSystemObjects, cmDatabaseObjects=cmDatabaseObjects, f3SystemInfoObjects=f3SystemInfoObjects, fileServicesPercentComplete=fileServicesPercentComplete, cmTimeObjects=cmTimeObjects, fileServicesUserId=fileServicesUserId, f3LldpV2RemExtEntry=f3LldpV2RemExtEntry, f3SysAuthKeyRowStatus=f3SysAuthKeyRowStatus, softwareIndex=softwareIndex, f3SystemLldpV2DestAddressADVAExtEntry=f3SystemLldpV2DestAddressADVAExtEntry, TimeOfDayType=TimeOfDayType, F3ConfigFileAction=F3ConfigFileAction, databaseAction=databaseAction, F3ConfigFileStatus=F3ConfigFileStatus, f3ConfigFileIndex=f3ConfigFileIndex, f3SystemLldpV2PortConfigADVAExtEntry=f3SystemLldpV2PortConfigADVAExtEntry, f3SystemBulkNotifications=f3SystemBulkNotifications, sysLogPort=sysLogPort, f3SnmpTargetAddrExtTable=f3SnmpTargetAddrExtTable, fileServicesCsrName=fileServicesCsrName, f3NtpAuthKeyStorageType=f3NtpAuthKeyStorageType, CmNtpMode=CmNtpMode, f3DatabaseSyncTrap=f3DatabaseSyncTrap, f3SysLastResetType=f3SysLastResetType, SysAuthKeyType=SysAuthKeyType, f3SystemFeatureIndex=f3SystemFeatureIndex, CmVersionType=CmVersionType, cmObjectCreationTrap=cmObjectCreationTrap, f3SystemLldpV2PortConfigADVAExtNotificationEnable=f3SystemLldpV2PortConfigADVAExtNotificationEnable, f3SysLastAbnormalResetTimestamp3=f3SysLastAbnormalResetTimestamp3, f3SnmpTargetAddrExtDyingGaspActive=f3SnmpTargetAddrExtDyingGaspActive, cmFileServicesObjects=cmFileServicesObjects, lastSetErrorInformation=lastSetErrorInformation, f3ConfigFileActionFileName=f3ConfigFileActionFileName, f3SystemLldpV2ManAddrConfigTxPortsADVAExtEnable=f3SystemLldpV2ManAddrConfigTxPortsADVAExtEnable, ntpServerRoundTripDelay=ntpServerRoundTripDelay, cmSystemCompliance=cmSystemCompliance, NtpAuthKeyType=NtpAuthKeyType, ntpActiveServer=ntpActiveServer, PeerUpgradeStatus=PeerUpgradeStatus, ntpPrimaryServerIpVersion=ntpPrimaryServerIpVersion, f3SystemLldpV2ManAddrConfigTxPortsADVAExtTable=f3SystemLldpV2ManAddrConfigTxPortsADVAExtTable, cmLldpV2DestAdressADVAExtObjects=cmLldpV2DestAdressADVAExtObjects, f3SystemLldpV2PortConfigADVAExtRowStatus=f3SystemLldpV2PortConfigADVAExtRowStatus, databaseEntry=databaseEntry, usbPortEnabled=usbPortEnabled, f3LldpV2RemExtTable=f3LldpV2RemExtTable, cmSnmpObjects=cmSnmpObjects, CmAutoProvMode=CmAutoProvMode, CmFileServicesStatus=CmFileServicesStatus, f3SysLastAbnormalResetTimestamp1=f3SysLastAbnormalResetTimestamp1, aclEntry=aclEntry, sysLogTimestampFormat=sysLogTimestampFormat, f3SimpleLtpUserName=f3SimpleLtpUserName, fileServicesStatus=fileServicesStatus, fileServicesSslKeyPairName=fileServicesSslKeyPairName, f3SysAuthenKeyObjects=f3SysAuthenKeyObjects, cmSystemGroups=cmSystemGroups, CmFileTransferMethod=CmFileTransferMethod, serialPortDisconnectAutoLogOff=serialPortDisconnectAutoLogOff, ntpType=ntpType, f3ApplicationsUpTime=f3ApplicationsUpTime, sysLogIpv6Addr=sysLogIpv6Addr, CmNtpServerType=CmNtpServerType, sftpEnabled=sftpEnabled, f3StartNeEventLogIndex=f3StartNeEventLogIndex, f3SystemLldpV2ManAddrConfigTxPortsADVAExtRowStatus=f3SystemLldpV2ManAddrConfigTxPortsADVAExtRowStatus, f3SystemFeatureTable=f3SystemFeatureTable, SysLogFormatType=SysLogFormatType, LldpV2ConfigurationADVAExtMaxNeighborsAction=LldpV2ConfigurationADVAExtMaxNeighborsAction, aclEntryFilterAction=aclEntryFilterAction, f3ConfigFileName=f3ConfigFileName, aclEntryPrefixLength=aclEntryPrefixLength, CmFileServicesMode=CmFileServicesMode, f3SysResetButtonControl=f3SysResetButtonControl, f3ConfigFileTable=f3ConfigFileTable, f3SystemLldpV2PortConfigADVAExtAdminStatus=f3SystemLldpV2PortConfigADVAExtAdminStatus, f3SystemBulkGroups=f3SystemBulkGroups, fileServicesRemoteFile=fileServicesRemoteFile, databaseType=databaseType, f3SnmpTargetAddrExtDyingGaspEnabled=f3SnmpTargetAddrExtDyingGaspEnabled, cmSystemObjectGroupCmHub=cmSystemObjectGroupCmHub, f3SystemLldpV2ManAddrConfigTxPortsADVAExtRefInterface=f3SystemLldpV2ManAddrConfigTxPortsADVAExtRefInterface, f3DatabaseSyncTrapObject=f3DatabaseSyncTrapObject, f3NtpAuthKeyType=f3NtpAuthKeyType, cmResetCauseObjects=cmResetCauseObjects, ntpServerConfigType=ntpServerConfigType, f3SystemLldpV2DestAddressADVAExtRowStatus=f3SystemLldpV2DestAddressADVAExtRowStatus, sysLogServerIndex=sysLogServerIndex, databaseVersion=databaseVersion, aclEntryIpVersion=aclEntryIpVersion, f3SystemFeatureName=f3SystemFeatureName, cmAttributeValueChangeTrap=cmAttributeValueChangeTrap, ntpBackupServerAuthKey=ntpBackupServerAuthKey, F3TargetAddressLifetime=F3TargetAddressLifetime, autoProvMode=autoProvMode, ServerConfigType=ServerConfigType, f3ConfigFileAction=f3ConfigFileAction, f3SimpleLtpTransferProtocol=f3SimpleLtpTransferProtocol, aclEntryIndex=aclEntryIndex, cmCliObjects=cmCliObjects, f3NotifObjects=f3NotifObjects, peerUpgradeStatus=peerUpgradeStatus, ntpPrimaryServer=ntpPrimaryServer, f3SnmpTargetAddrExtDyingGaspPort=f3SnmpTargetAddrExtDyingGaspPort, databaseLastSaveTime=databaseLastSaveTime, ntpPollingInterval=ntpPollingInterval, f3SystemLldpV2PortConfigADVAExtDestAddressIndex=f3SystemLldpV2PortConfigADVAExtDestAddressIndex, ftpEnabled=ftpEnabled, sshEnabled=sshEnabled, f3ConfigFilePassphrase=f3ConfigFilePassphrase, f3SnmpTargetAddrExtBulkTrapsEnabled=f3SnmpTargetAddrExtBulkTrapsEnabled, securityPromptEnabled=securityPromptEnabled, databaseIndex=databaseIndex, cliCmdPromptPrefix=cliCmdPromptPrefix, f3SimpleLtpPasswd=f3SimpleLtpPasswd, f3NtpAuthKeyTable=f3NtpAuthKeyTable, ntpClientEnabled=ntpClientEnabled, securityBanner=securityBanner, aclEntryNetworkMask=aclEntryNetworkMask, f3SystemFeatureEntry=f3SystemFeatureEntry, fileServicesMethod=fileServicesMethod, f3LldpV2RemTTL=f3LldpV2RemTTL, f3SysAuthKeyStorageType=f3SysAuthKeyStorageType, cmObjectDeletionTrap=cmObjectDeletionTrap, f3BulkTrap=f3BulkTrap, f3EndNeEventLogIndex=f3EndNeEventLogIndex, ntpMode=ntpMode, AffectedEntity=AffectedEntity, f3SimpleLtpObjects=f3SimpleLtpObjects, f3SysLastResetCauseType=f3SysLastResetCauseType, f3SimpleLtpControl=f3SimpleLtpControl, f3SysAuthKeyType=f3SysAuthKeyType, PeerUpgradeReadyCondition=PeerUpgradeReadyCondition, f3SysAuthKeyId=f3SysAuthKeyId, f3ConfigFileErrorInformation=f3ConfigFileErrorInformation, httpEnabled=httpEnabled, f3SystemLldpV2ManAddrConfigTxPortsADVAExtStorageType=f3SystemLldpV2ManAddrConfigTxPortsADVAExtStorageType, f3CallhomeClientIpAddress=f3CallhomeClientIpAddress, cmSystemObjectGroup=cmSystemObjectGroup, f3SystemLldpV2ADVAExtDestMacAddress=f3SystemLldpV2ADVAExtDestMacAddress, f3EnsembleZtpEnabled=f3EnsembleZtpEnabled, fileServicesPassword=fileServicesPassword, fileServicesAffectedEntity=fileServicesAffectedEntity, f3SnmpTargetAddrExtLifetime=f3SnmpTargetAddrExtLifetime, f3LldpV2ConfigurationADVAExtObjects=f3LldpV2ConfigurationADVAExtObjects, cmStateChangeTrap=cmStateChangeTrap, FileTransferServerType=FileTransferServerType, aclEntryNetworkAddress=aclEntryNetworkAddress, f3ConfigFileEntry=f3ConfigFileEntry, CmNtpType=CmNtpType, f3SystemLldpV2PortConfigADVAExtTable=f3SystemLldpV2PortConfigADVAExtTable, ntpPrimaryServerAuthKey=ntpPrimaryServerAuthKey, PYSNMP_MODULE_ID=cmSystemMIB, cmSysModeObjects=cmSysModeObjects, softwareUpgradeTime=softwareUpgradeTime, f3BulkNotifObjects=f3BulkNotifObjects, softwarePeerCondition=softwarePeerCondition, f3SnmpEngineID=f3SnmpEngineID, f3SystemLldpV2PortConfigADVAExtTLVsTxEnable=f3SystemLldpV2PortConfigADVAExtTLVsTxEnable, sysLogFacilityCode=sysLogFacilityCode, f3SystemNotifBulkGroup=f3SystemNotifBulkGroup, fileServicesDbFileName=fileServicesDbFileName, auditLog2sysLogEnabled=auditLog2sysLogEnabled, fileServicesServerType=fileServicesServerType, databaseActionPassphrase=databaseActionPassphrase, cmLogObjects=cmLogObjects, softwareType=softwareType, f3SystemFeatureEnabled=f3SystemFeatureEnabled, f3SystemLldpV2DestAddressADVAExtIndex=f3SystemLldpV2DestAddressADVAExtIndex, f3ApplicationsBootCompleted=f3ApplicationsBootCompleted, cmSystemNotifGroup=cmSystemNotifGroup, f3SystemLldpV2DestAddressADVAExtTable=f3SystemLldpV2DestAddressADVAExtTable, aclEntryEnabled=aclEntryEnabled, cmSystemCompliances=cmSystemCompliances, CmRestartCauseType=CmRestartCauseType, tftpEnabled=tftpEnabled, secLog2sysLogEnabled=secLog2sysLogEnabled, cmAuditLogObjects=cmAuditLogObjects, fileServicesMode=fileServicesMode, f3SnmpTargetAddrExtEntry=f3SnmpTargetAddrExtEntry, cmSystemConformance=cmSystemConformance, f3RawDataServerFtPasswd=f3RawDataServerFtPasswd, f3NtpAuthKey=f3NtpAuthKey, CallhomeState=CallhomeState, cmSecLogObjects=cmSecLogObjects, alarmLog2fileEnabled=alarmLog2fileEnabled, databaseTable=databaseTable, cmErrorInfoObjects=cmErrorInfoObjects, fileServicesAction=fileServicesAction, f3SnmpLongIfAlias=f3SnmpLongIfAlias, f3ConfigFileDescription=f3ConfigFileDescription, f3SysAuthKeyTable=f3SysAuthKeyTable, f3SimpleLtpServerIpv4Addr=f3SimpleLtpServerIpv4Addr, f3SystemObjectBulkGroup=f3SystemObjectBulkGroup, httpsEnabled=httpsEnabled, softwareAffectedEntity=softwareAffectedEntity, telnetEnabled=telnetEnabled, sysUseUtcLeapOffsetEnable=sysUseUtcLeapOffsetEnable, aclTable=aclTable, CmAclFilterAction=CmAclFilterAction, f3RawDataServerFtServerName=f3RawDataServerFtServerName, cmSystemNotifications=cmSystemNotifications, f3SysLastAbnormalResetTimestamp2=f3SysLastAbnormalResetTimestamp2, f3ConfigFileObjects=f3ConfigFileObjects, snmpIPv6UDPDomain=snmpIPv6UDPDomain, cmSystemMIB=cmSystemMIB, serialPortEnabled=serialPortEnabled, f3SimpleLtpConfigFileName=f3SimpleLtpConfigFileName, f3CallhomeServerObjects=f3CallhomeServerObjects, fileServicesDecryptionPassword=fileServicesDecryptionPassword, f3NtpAuthKeyRowStatus=f3NtpAuthKeyRowStatus, f3RawDataServerFtProtocol=f3RawDataServerFtProtocol, f3ConfigFileStatus=f3ConfigFileStatus, ntpServerPrecision=ntpServerPrecision, f3NtpAuthKeyEntry=f3NtpAuthKeyEntry, cmSoftwareObjects=cmSoftwareObjects, f3SimpleLtpSoftwareFileName=f3SimpleLtpSoftwareFileName, f3CallhomeState=f3CallhomeState, softwareValidationTimer=softwareValidationTimer, sysLogServerEntry=sysLogServerEntry, scpEnabled=scpEnabled, f3NtpAuthKeyNumber=f3NtpAuthKeyNumber, aclEntryNetworkIpv6Addr=aclEntryNetworkIpv6Addr, cmFeatureManagementObjects=cmFeatureManagementObjects, f3SysAuthKeyIndex=f3SysAuthKeyIndex, fileServicesServerIp=fileServicesServerIp, netconfOverSSHEnabled=netconfOverSSHEnabled, f3SysAuthKeyEntry=f3SysAuthKeyEntry, f3ZtpObjects=f3ZtpObjects, cmAlarmLogObjects=cmAlarmLogObjects, auditLog2fileEnabled=auditLog2fileEnabled, f3SystemLldpV2PortConfigADVAExtIfIndex=f3SystemLldpV2PortConfigADVAExtIfIndex, sysTimeOfDayType=sysTimeOfDayType, softwareEntry=softwareEntry, f3SystemLldpV2PortConfigADVAExtStorageType=f3SystemLldpV2PortConfigADVAExtStorageType, ntpSwitchServer=ntpSwitchServer, softwareVersion=softwareVersion, ntpBackupServerIpVersion=ntpBackupServerIpVersion, alarmLog2sysLogEnabled=alarmLog2sysLogEnabled, cmSnmpDyingGaspTrap=cmSnmpDyingGaspTrap, cmSysSecObjects=cmSysSecObjects, ntpBackupServerIpv6Addr=ntpBackupServerIpv6Addr, ntpBackupServer=ntpBackupServer, sysLogServerTable=sysLogServerTable, cmAccessProtocols=cmAccessProtocols, sysLogServerConfigType=sysLogServerConfigType)
mibBuilder.exportSymbols("CM-SYSTEM-MIB", softwareTable=softwareTable, sysLogIpAddress=sysLogIpAddress, sysLogIpVersion=sysLogIpVersion, f3LldpMaxNeighborsAction=f3LldpMaxNeighborsAction, f3LldpV2RemoteSystemsData=f3LldpV2RemoteSystemsData, f3RawDataServerFtUserId=f3RawDataServerFtUserId, cmSysLogObjects=cmSysLogObjects, f3ConfigFilePercentComplete=f3ConfigFilePercentComplete)
