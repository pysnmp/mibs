#
# PySNMP MIB module DIGIPDU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/planet/DIGIPDU-MIB
# Produced by pysmi-1.1.12 at Wed Oct  9 02:23:43 2024
# On host fv-az1144-128 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Counter64, NotificationType, NotificationType, ModuleIdentity, MibIdentifier, Gauge32, Unsigned32, Bits, enterprises, Counter32, ObjectIdentity, TimeTicks, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "NotificationType", "NotificationType", "ModuleIdentity", "MibIdentifier", "Gauge32", "Unsigned32", "Bits", "enterprises", "Counter32", "ObjectIdentity", "TimeTicks", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
smart = ModuleIdentity((1, 3, 6, 1, 4, 1, 10456, 3))
smart.setRevisions(('2009-04-16 16:27',))
if mibBuilder.loadTexts: smart.setLastUpdated('200904161627Z')
if mibBuilder.loadTexts: smart.setOrganization('')
digipdu = MibIdentifier((1, 3, 6, 1, 4, 1, 10456))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 10456, 3, 1))
productModel = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productModel.setStatus('current')
productPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productPartNumber.setStatus('current')
productSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSerialNumber.setStatus('current')
productFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productFirmwareVersion.setStatus('current')
productTemperatureKind = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productTemperatureKind.setStatus('current')
productResetDetector = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productResetDetector.setStatus('current')
deviceTable = MibIdentifier((1, 3, 6, 1, 4, 1, 10456, 3, 2))
deviceATSKind = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceATSKind.setStatus('current')
deviceInFeedTotal = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInFeedTotal.setStatus('current')
deviceInFeedKind = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInFeedKind.setStatus('current')
deviceInFeedBranch = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInFeedBranch.setStatus('current')
deviceOutTotal = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceOutTotal.setStatus('current')
deviceOutKind = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceOutKind.setStatus('current')
deviceInbuiltTempTotal = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInbuiltTempTotal.setStatus('current')
deviceExtendTemperatureTotal = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceExtendTemperatureTotal.setStatus('current')
deviceExtendRHTotal = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceExtendRHTotal.setStatus('current')
devicePDUTotal = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePDUTotal.setStatus('current')
deviceInputTotal = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInputTotal.setStatus('current')
deviceUPS = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceUPS.setStatus('current')
deviceDaisyChain = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDaisyChain.setStatus('current')
deviceUnitTotal = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceUnitTotal.setStatus('current')
deviceUnitTable = MibTable((1, 3, 6, 1, 4, 1, 10456, 3, 2, 21), )
if mibBuilder.loadTexts: deviceUnitTable.setStatus('current')
deviceUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10456, 3, 2, 21, 1), ).setIndexNames((0, "DIGIPDU-MIB", "deviceUnitIndex"))
if mibBuilder.loadTexts: deviceUnitEntry.setStatus('current')
deviceUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 2, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceUnitIndex.setStatus('current')
deviceUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 2, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceUnitStatus.setStatus('current')
deviceUnitInfeedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 2, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceUnitInfeedTotal.setStatus('current')
deviceUnitOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 2, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceUnitOutTotal.setStatus('current')
peripheralTables = MibIdentifier((1, 3, 6, 1, 4, 1, 10456, 3, 3))
aTSTable = MibTable((1, 3, 6, 1, 4, 1, 10456, 3, 3, 1), )
if mibBuilder.loadTexts: aTSTable.setStatus('current')
aTSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10456, 3, 3, 1, 1), ).setIndexNames((0, "DIGIPDU-MIB", "aTSIndex"))
if mibBuilder.loadTexts: aTSEntry.setStatus('current')
aTSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aTSIndex.setStatus('current')
aTSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aTSStatus.setStatus('current')
aTSVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aTSVoltage.setStatus('current')
aTSFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aTSFrequency.setStatus('current')
inFeedTable = MibTable((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2), )
if mibBuilder.loadTexts: inFeedTable.setStatus('current')
inFeedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1), ).setIndexNames((0, "DIGIPDU-MIB", "inFeedIndex"))
if mibBuilder.loadTexts: inFeedEntry.setStatus('current')
inFeedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedIndex.setStatus('current')
inFeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedStatus.setStatus('current')
inFeedVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedVoltage.setStatus('current')
inFeedFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedFrequency.setStatus('current')
inFeedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedCurrent.setStatus('current')
inFeedPowerLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedPowerLoad.setStatus('current')
inFeedPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedPowerFactor.setStatus('current')
inFeedPowerEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedPowerEnergy.setStatus('current')
inFeedOverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inFeedOverLoad.setStatus('current')
inFeedHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inFeedHighWarning.setStatus('current')
inFeedLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inFeedLowWarning.setStatus('current')
inFeedBranch = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedBranch.setStatus('current')
inFeedBranch1Current = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedBranch1Current.setStatus('current')
inFeedBranch1PowerLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedBranch1PowerLoad.setStatus('current')
inFeedBranch1PowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedBranch1PowerFactor.setStatus('current')
inFeedBranch1OverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inFeedBranch1OverLoad.setStatus('current')
inFeedBranch1HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inFeedBranch1HighWarning.setStatus('current')
inFeedBranch1LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inFeedBranch1LowWarning.setStatus('current')
inFeedBranch2Current = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedBranch2Current.setStatus('current')
inFeedBranch2PowerLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedBranch2PowerLoad.setStatus('current')
inFeedBranch2PowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedBranch2PowerFactor.setStatus('current')
inFeedBranch2OverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inFeedBranch2OverLoad.setStatus('current')
inFeedBranch2HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inFeedBranch2HighWarning.setStatus('current')
inFeedBranch2LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 2, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inFeedBranch2LowWarning.setStatus('current')
outTable = MibTable((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3), )
if mibBuilder.loadTexts: outTable.setStatus('current')
outEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1), ).setIndexNames((0, "DIGIPDU-MIB", "outIndex"))
if mibBuilder.loadTexts: outEntry.setStatus('current')
outIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outIndex.setStatus('current')
outComputerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outComputerStatus.setStatus('current')
outCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outCurrentStatus.setStatus('current')
outSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("off-act", 2), ("on-act", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outSwitchStatus.setStatus('current')
outSwitchCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("ctrl-on", 1), ("ctrl-off", 2), ("ctrl-reboot", 3), ("ctrl-on-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outSwitchCtrl.setStatus('current')
outVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outVoltage.setStatus('current')
outCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outCurrent.setStatus('current')
outPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outPowerFactor.setStatus('current')
outPowerLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outPowerLoad.setStatus('current')
outOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outOverload.setStatus('current')
outHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outHighWarning.setStatus('current')
outLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outLowWarning.setStatus('current')
pduTables = MibTable((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4), )
if mibBuilder.loadTexts: pduTables.setStatus('current')
pduEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1), ).setIndexNames((0, "DIGIPDU-MIB", "pduIndex"))
if mibBuilder.loadTexts: pduEntry.setStatus('current')
pduIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduIndex.setStatus('current')
pduModel = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduModel.setStatus('current')
pduMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMonitor.setStatus('current')
pduStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("warning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduStatus.setStatus('current')
pduVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduVoltage.setStatus('current')
pduFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduFrequency.setStatus('current')
pduCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduCurrent.setStatus('current')
pduPowerLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPowerLoad.setStatus('current')
pduPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPowerFactor.setStatus('current')
pduPowerEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPowerEnergy.setStatus('current')
pduOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOverload.setStatus('current')
pduHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduHighWarning.setStatus('current')
pduLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduLowWarning.setStatus('current')
pduBranch = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduBranch.setStatus('current')
pduBranch1Current = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduBranch1Current.setStatus('current')
pduBranch1Overload = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduBranch1Overload.setStatus('current')
pduBranch1HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduBranch1HighWarning.setStatus('current')
pduBranch1LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduBranch1LowWarning.setStatus('current')
pduBranch2Current = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduBranch2Current.setStatus('current')
pduBranch2Overload = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduBranch2Overload.setStatus('current')
pduBranch2HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduBranch2HighWarning.setStatus('current')
pduBranch2LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 4, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduBranch2LowWarning.setStatus('current')
inbuiltTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 10456, 3, 3, 5), )
if mibBuilder.loadTexts: inbuiltTemperatureTable.setStatus('current')
inbuiltTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10456, 3, 3, 5, 1), ).setIndexNames((0, "DIGIPDU-MIB", "inbuiltTemperatureIndex"))
if mibBuilder.loadTexts: inbuiltTemperatureEntry.setStatus('current')
inbuiltTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inbuiltTemperatureIndex.setStatus('current')
inbuiltTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inbuiltTemperatureStatus.setStatus('current')
inbuiltTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inbuiltTemperature.setStatus('current')
inbuiltTemperatureHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inbuiltTemperatureHighWarning.setStatus('current')
inbuiltTemperatureLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inbuiltTemperatureLowWarning.setStatus('current')
extendTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 10456, 3, 3, 6), )
if mibBuilder.loadTexts: extendTemperatureTable.setStatus('current')
extendTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10456, 3, 3, 6, 1), ).setIndexNames((0, "DIGIPDU-MIB", "extendTemperatureIndex"))
if mibBuilder.loadTexts: extendTemperatureEntry.setStatus('current')
extendTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendTemperatureIndex.setStatus('current')
extendTemperatureDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendTemperatureDeviceId.setStatus('current')
extendTemperaturePort = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendTemperaturePort.setStatus('current')
extendTemperatureMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendTemperatureMonitor.setStatus('current')
extendTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendTemperatureStatus.setStatus('current')
extendTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendTemperature.setStatus('current')
extendTemperatureHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendTemperatureHighWarning.setStatus('current')
extendTemperatureLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendTemperatureLowWarning.setStatus('current')
extendRHTable = MibTable((1, 3, 6, 1, 4, 1, 10456, 3, 3, 7), )
if mibBuilder.loadTexts: extendRHTable.setStatus('current')
extendRHEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10456, 3, 3, 7, 1), ).setIndexNames((0, "DIGIPDU-MIB", "extendRHIndex"))
if mibBuilder.loadTexts: extendRHEntry.setStatus('current')
extendRHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendRHIndex.setStatus('current')
extendRHDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendRHDeviceId.setStatus('current')
extendRHPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendRHPort.setStatus('current')
extendRHMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendRHMonitor.setStatus('current')
extendRHStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendRHStatus.setStatus('current')
extendRH = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendRH.setStatus('current')
extendRHHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendRHHighWarning.setStatus('current')
extendRHLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendRHLowWarning.setStatus('current')
inputTable = MibTable((1, 3, 6, 1, 4, 1, 10456, 3, 3, 8), )
if mibBuilder.loadTexts: inputTable.setStatus('current')
inputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10456, 3, 3, 8, 1), ).setIndexNames((0, "DIGIPDU-MIB", "inputIndex"))
if mibBuilder.loadTexts: inputEntry.setStatus('current')
inputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputIndex.setStatus('current')
inputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatus.setStatus('current')
inputState = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputState.setStatus('current')
inputTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputTimeout.setStatus('current')
inputDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 8, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputDefault.setStatus('current')
inputDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10456, 3, 3, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputDetectTime.setStatus('current')
rfidReader = MibIdentifier((1, 3, 6, 1, 4, 1, 10456, 3, 3, 9))
rfidCardNum = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 9, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfidCardNum.setStatus('current')
rfidDetectTime = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 9, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfidDetectTime.setStatus('current')
uPS = MibIdentifier((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10))
uPSModel = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSModel.setStatus('current')
uPSConnectStatus = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSConnectStatus.setStatus('current')
uPSFirmware = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSFirmware.setStatus('current')
uPSSerial = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSSerial.setStatus('current')
uPSTemperature = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSTemperature.setStatus('current')
uPSInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSInputVoltage.setStatus('current')
uPSOutputOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSOutputOnBattery.setStatus('current')
uPSOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSOutputVoltage.setStatus('current')
uPSOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSOutputFrequency.setStatus('current')
uPSOutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSOutputCurrent.setStatus('current')
uPSOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSOutputLoad.setStatus('current')
uPSOutputOverload = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSOutputOverload.setStatus('current')
uPSBatteryDate = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSBatteryDate.setStatus('current')
uPSBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSBatteryVoltage.setStatus('current')
uPSBatteryLevel = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSBatteryLevel.setStatus('current')
uPSBatteryRunTime = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSBatteryRunTime.setStatus('current')
uPSBatteryLow = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSBatteryLow.setStatus('current')
uPSBatteryReplace = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSBatteryReplace.setStatus('current')
uPSUARTId = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 10, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSUARTId.setStatus('current')
micDetec = MibIdentifier((1, 3, 6, 1, 4, 1, 10456, 3, 3, 11))
micDetectTimes = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: micDetectTimes.setStatus('current')
micDetectPeriod = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: micDetectPeriod.setStatus('current')
micLastDetectTime = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 11, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: micLastDetectTime.setStatus('current')
vibrationDetec = MibIdentifier((1, 3, 6, 1, 4, 1, 10456, 3, 3, 12))
vibrationDetectTimes = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vibrationDetectTimes.setStatus('current')
vibrationDetectPeriod = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vibrationDetectPeriod.setStatus('current')
vibrationLastDetectTime = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 3, 12, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vibrationLastDetectTime.setStatus('current')
dataLogTable = MibIdentifier((1, 3, 6, 1, 4, 1, 10456, 3, 4))
inFeedDataList = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeedDataList.setStatus('current')
outDataList = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outDataList.setStatus('current')
pduDataList = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduDataList.setStatus('current')
smartTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 10456, 3, 100))
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1))
arg = MibIdentifier((1, 3, 6, 1, 4, 1, 10456, 3, 100, 2))
trapArg1 = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 100, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapArg1.setStatus('current')
trapArg2 = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 100, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapArg2.setStatus('current')
trapArg3 = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 100, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapArg3.setStatus('current')
trapArg4 = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 100, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapArg4.setStatus('current')
trapArg5 = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 100, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapArg5.setStatus('current')
trapArg6 = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 100, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapArg6.setStatus('current')
trapArg7 = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 100, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapArg7.setStatus('current')
trapArg8 = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 100, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapArg8.setStatus('current')
trapArg9 = MibScalar((1, 3, 6, 1, 4, 1, 10456, 3, 100, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapArg9.setStatus('current')
testTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 1)).setObjects(("DIGIPDU-MIB", "trapArg1"))
if mibBuilder.loadTexts: testTrap.setStatus('current')
inFeedOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 101)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: inFeedOverloadTrap.setStatus('current')
inFeedHighCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 102)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: inFeedHighCurrentTrap.setStatus('current')
inFeedLowCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 103)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: inFeedLowCurrentTrap.setStatus('current')
inFeedBranchOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 104)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: inFeedBranchOverloadTrap.setStatus('current')
inFeedBranchHighCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 105)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: inFeedBranchHighCurrentTrap.setStatus('current')
inFeedBranchLowCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 106)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: inFeedBranchLowCurrentTrap.setStatus('current')
outWebOperationTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 201)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"))
if mibBuilder.loadTexts: outWebOperationTrap.setStatus('current')
outPanelOperationTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 202)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"))
if mibBuilder.loadTexts: outPanelOperationTrap.setStatus('current')
outAPIOperationTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 203)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"))
if mibBuilder.loadTexts: outAPIOperationTrap.setStatus('current')
outScheduleTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 211)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"), ("DIGIPDU-MIB", "trapArg6"), ("DIGIPDU-MIB", "trapArg7"), ("DIGIPDU-MIB", "trapArg8"), ("DIGIPDU-MIB", "trapArg9"))
if mibBuilder.loadTexts: outScheduleTrap.setStatus('current')
outScheduleErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 212)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"), ("DIGIPDU-MIB", "trapArg6"), ("DIGIPDU-MIB", "trapArg7"))
if mibBuilder.loadTexts: outScheduleErrorTrap.setStatus('current')
outPingTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 221)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"))
if mibBuilder.loadTexts: outPingTrap.setStatus('current')
outPingRebootTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 222)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"))
if mibBuilder.loadTexts: outPingRebootTrap.setStatus('current')
outOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 231)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: outOverloadTrap.setStatus('current')
outHighCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 232)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: outHighCurrentTrap.setStatus('current')
outLowCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 233)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: outLowCurrentTrap.setStatus('current')
outConditionCtrlTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 241)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: outConditionCtrlTrap.setStatus('current')
outUPSACFaultOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 311)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: outUPSACFaultOffTrap.setStatus('current')
outUPSBatteryLevelOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 312)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: outUPSBatteryLevelOffTrap.setStatus('current')
outUPSBatteryLowOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 313)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: outUPSBatteryLowOffTrap.setStatus('current')
outUPSACRecoveryOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 314)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: outUPSACRecoveryOnTrap.setStatus('current')
outUPSBatteryLevelOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 315)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: outUPSBatteryLevelOnTrap.setStatus('current')
outUPSBatteryLowRecoveryOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 316)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: outUPSBatteryLowRecoveryOnTrap.setStatus('current')
pduConnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 401)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: pduConnectTrap.setStatus('current')
pduOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 402)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: pduOverloadTrap.setStatus('current')
pduHighCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 403)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: pduHighCurrentTrap.setStatus('current')
pduLowCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 404)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: pduLowCurrentTrap.setStatus('current')
pduBranchOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 405)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: pduBranchOverloadTrap.setStatus('current')
pduBranchHighCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 406)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: pduBranchHighCurrentTrap.setStatus('current')
pduBranchLowCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 407)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: pduBranchLowCurrentTrap.setStatus('current')
inbuiltTemperatureHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 501)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"))
if mibBuilder.loadTexts: inbuiltTemperatureHighTrap.setStatus('current')
inbuiltTemperatureLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 502)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"))
if mibBuilder.loadTexts: inbuiltTemperatureLowTrap.setStatus('current')
envConnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 511)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"))
if mibBuilder.loadTexts: envConnectTrap.setStatus('current')
envTemperatureConnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 512)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"))
if mibBuilder.loadTexts: envTemperatureConnectTrap.setStatus('current')
envTemperatureHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 513)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"), ("DIGIPDU-MIB", "trapArg6"))
if mibBuilder.loadTexts: envTemperatureHighTrap.setStatus('current')
envTemperatureLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 514)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"), ("DIGIPDU-MIB", "trapArg6"))
if mibBuilder.loadTexts: envTemperatureLowTrap.setStatus('current')
envRHConnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 515)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: envRHConnectTrap.setStatus('current')
envRHHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 516)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: envRHHighTrap.setStatus('current')
envRHLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 517)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"), ("DIGIPDU-MIB", "trapArg5"))
if mibBuilder.loadTexts: envRHLowTrap.setStatus('current')
inputTimeOutTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 601)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"))
if mibBuilder.loadTexts: inputTimeOutTrap.setStatus('current')
inputTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 602)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"), ("DIGIPDU-MIB", "trapArg3"), ("DIGIPDU-MIB", "trapArg4"))
if mibBuilder.loadTexts: inputTrap.setStatus('current')
upsConnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 701)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: upsConnectTrap.setStatus('current')
upsOnBatteryTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 702)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: upsOnBatteryTrap.setStatus('current')
upsOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 703)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: upsOverloadTrap.setStatus('current')
upsBatteryLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 704)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: upsBatteryLowTrap.setStatus('current')
upsBatteryReplace = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 705)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: upsBatteryReplace.setStatus('current')
daisyChainConnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 801)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: daisyChainConnectTrap.setStatus('current')
micDetectOccurTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 901)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: micDetectOccurTrap.setStatus('current')
vibrationDetectOccurTrap = NotificationType((1, 3, 6, 1, 4, 1, 10456, 3, 100, 1, 902)).setObjects(("DIGIPDU-MIB", "trapArg1"), ("DIGIPDU-MIB", "trapArg2"))
if mibBuilder.loadTexts: vibrationDetectOccurTrap.setStatus('current')
mibBuilder.exportSymbols("DIGIPDU-MIB", deviceUnitInfeedTotal=deviceUnitInfeedTotal, micLastDetectTime=micLastDetectTime, uPSOutputOnBattery=uPSOutputOnBattery, pduBranch1HighWarning=pduBranch1HighWarning, uPSInputVoltage=uPSInputVoltage, outOverloadTrap=outOverloadTrap, outUPSBatteryLevelOnTrap=outUPSBatteryLevelOnTrap, deviceInFeedBranch=deviceInFeedBranch, inFeedCurrent=inFeedCurrent, digipdu=digipdu, deviceInFeedKind=deviceInFeedKind, extendTemperatureDeviceId=extendTemperatureDeviceId, uPSOutputVoltage=uPSOutputVoltage, trapArg4=trapArg4, trapArg2=trapArg2, pduStatus=pduStatus, outPingTrap=outPingTrap, extendRHPort=extendRHPort, outPowerFactor=outPowerFactor, deviceATSKind=deviceATSKind, outLowWarning=outLowWarning, inbuiltTemperature=inbuiltTemperature, upsOnBatteryTrap=upsOnBatteryTrap, inFeedBranch2OverLoad=inFeedBranch2OverLoad, pduIndex=pduIndex, upsOverloadTrap=upsOverloadTrap, envTemperatureLowTrap=envTemperatureLowTrap, inbuiltTemperatureHighTrap=inbuiltTemperatureHighTrap, extendTemperatureLowWarning=extendTemperatureLowWarning, productResetDetector=productResetDetector, inFeedLowWarning=inFeedLowWarning, upsConnectTrap=upsConnectTrap, deviceInbuiltTempTotal=deviceInbuiltTempTotal, inFeedBranch2Current=inFeedBranch2Current, uPSConnectStatus=uPSConnectStatus, vibrationDetectPeriod=vibrationDetectPeriod, daisyChainConnectTrap=daisyChainConnectTrap, inbuiltTemperatureHighWarning=inbuiltTemperatureHighWarning, trapArg1=trapArg1, pduHighCurrentTrap=pduHighCurrentTrap, extendTemperatureIndex=extendTemperatureIndex, deviceOutTotal=deviceOutTotal, trapArg6=trapArg6, outUPSBatteryLevelOffTrap=outUPSBatteryLevelOffTrap, deviceInFeedTotal=deviceInFeedTotal, uPSOutputCurrent=uPSOutputCurrent, testTrap=testTrap, inFeedOverLoad=inFeedOverLoad, trapArg7=trapArg7, pduBranch1Overload=pduBranch1Overload, uPSBatteryVoltage=uPSBatteryVoltage, vibrationLastDetectTime=vibrationLastDetectTime, outPanelOperationTrap=outPanelOperationTrap, devicePDUTotal=devicePDUTotal, outComputerStatus=outComputerStatus, inbuiltTemperatureLowWarning=inbuiltTemperatureLowWarning, outConditionCtrlTrap=outConditionCtrlTrap, outUPSACFaultOffTrap=outUPSACFaultOffTrap, micDetectOccurTrap=micDetectOccurTrap, uPSBatteryLevel=uPSBatteryLevel, smart=smart, uPS=uPS, uPSOutputLoad=uPSOutputLoad, envRHConnectTrap=envRHConnectTrap, inFeedHighCurrentTrap=inFeedHighCurrentTrap, inputStatus=inputStatus, envRHHighTrap=envRHHighTrap, deviceUPS=deviceUPS, pduBranch1Current=pduBranch1Current, outCurrent=outCurrent, outAPIOperationTrap=outAPIOperationTrap, deviceUnitOutTotal=deviceUnitOutTotal, inFeedBranchHighCurrentTrap=inFeedBranchHighCurrentTrap, inFeedBranch=inFeedBranch, pduPowerLoad=pduPowerLoad, inFeedPowerFactor=inFeedPowerFactor, inputTable=inputTable, uPSBatteryReplace=uPSBatteryReplace, uPSOutputOverload=uPSOutputOverload, aTSStatus=aTSStatus, dataLogTable=dataLogTable, vibrationDetectOccurTrap=vibrationDetectOccurTrap, inFeedLowCurrentTrap=inFeedLowCurrentTrap, inFeedBranch2PowerLoad=inFeedBranch2PowerLoad, inFeedBranchLowCurrentTrap=inFeedBranchLowCurrentTrap, deviceUnitTotal=deviceUnitTotal, extendRHMonitor=extendRHMonitor, micDetectTimes=micDetectTimes, trapArg9=trapArg9, pduEntry=pduEntry, inFeedEntry=inFeedEntry, inputIndex=inputIndex, aTSEntry=aTSEntry, inbuiltTemperatureEntry=inbuiltTemperatureEntry, extendTemperatureMonitor=extendTemperatureMonitor, uPSBatteryDate=uPSBatteryDate, arg=arg, productTemperatureKind=productTemperatureKind, deviceDaisyChain=deviceDaisyChain, pduBranch=pduBranch, inputDefault=inputDefault, smartTraps=smartTraps, inputTimeOutTrap=inputTimeOutTrap, rfidReader=rfidReader, deviceInputTotal=deviceInputTotal, deviceUnitTable=deviceUnitTable, micDetec=micDetec, productSerialNumber=productSerialNumber, deviceTable=deviceTable, outSwitchStatus=outSwitchStatus, extendRHTable=extendRHTable, inFeedDataList=inFeedDataList, pduConnectTrap=pduConnectTrap, pduOverload=pduOverload, extendRHLowWarning=extendRHLowWarning, envTemperatureHighTrap=envTemperatureHighTrap, inFeedBranch2LowWarning=inFeedBranch2LowWarning, vibrationDetec=vibrationDetec, inbuiltTemperatureIndex=inbuiltTemperatureIndex, pduBranchLowCurrentTrap=pduBranchLowCurrentTrap, extendTemperatureStatus=extendTemperatureStatus, outSwitchCtrl=outSwitchCtrl, inFeedBranch1PowerLoad=inFeedBranch1PowerLoad, upsBatteryLowTrap=upsBatteryLowTrap, inFeedFrequency=inFeedFrequency, inbuiltTemperatureTable=inbuiltTemperatureTable, outScheduleErrorTrap=outScheduleErrorTrap, envRHLowTrap=envRHLowTrap, PYSNMP_MODULE_ID=smart, pduBranch2LowWarning=pduBranch2LowWarning, trapArg3=trapArg3, pduHighWarning=pduHighWarning, extendTemperaturePort=extendTemperaturePort, extendRHEntry=extendRHEntry, pduBranchHighCurrentTrap=pduBranchHighCurrentTrap, inFeedBranch1OverLoad=inFeedBranch1OverLoad, inputTimeout=inputTimeout, pduPowerEnergy=pduPowerEnergy, uPSTemperature=uPSTemperature, outUPSACRecoveryOnTrap=outUPSACRecoveryOnTrap, deviceExtendTemperatureTotal=deviceExtendTemperatureTotal, outCurrentStatus=outCurrentStatus, uPSSerial=uPSSerial, peripheralTables=peripheralTables, extendTemperature=extendTemperature, extendRH=extendRH, extendRHIndex=extendRHIndex, outHighWarning=outHighWarning, rfidDetectTime=rfidDetectTime, aTSFrequency=aTSFrequency, extendTemperatureHighWarning=extendTemperatureHighWarning, inbuiltTemperatureLowTrap=inbuiltTemperatureLowTrap, inFeedPowerLoad=inFeedPowerLoad, inputDetectTime=inputDetectTime, outUPSBatteryLowOffTrap=outUPSBatteryLowOffTrap, uPSFirmware=uPSFirmware, deviceOutKind=deviceOutKind, outTable=outTable, envTemperatureConnectTrap=envTemperatureConnectTrap, rfidCardNum=rfidCardNum, trapArg8=trapArg8, inFeedBranch1Current=inFeedBranch1Current, outOverload=outOverload, pduPowerFactor=pduPowerFactor, upsBatteryReplace=upsBatteryReplace, extendTemperatureTable=extendTemperatureTable, deviceUnitEntry=deviceUnitEntry, aTSIndex=aTSIndex, trapArg5=trapArg5, deviceUnitIndex=deviceUnitIndex, uPSBatteryLow=uPSBatteryLow, outEntry=outEntry, outScheduleTrap=outScheduleTrap, productPartNumber=productPartNumber, pduBranch2Overload=pduBranch2Overload, inbuiltTemperatureStatus=inbuiltTemperatureStatus, vibrationDetectTimes=vibrationDetectTimes, inFeedBranch1PowerFactor=inFeedBranch1PowerFactor, pduMonitor=pduMonitor, pduOverloadTrap=pduOverloadTrap, deviceExtendRHTotal=deviceExtendRHTotal, inFeedBranch1LowWarning=inFeedBranch1LowWarning, outVoltage=outVoltage, uPSUARTId=uPSUARTId, aTSVoltage=aTSVoltage, pduTables=pduTables, pduBranch1LowWarning=pduBranch1LowWarning, pduBranch2HighWarning=pduBranch2HighWarning, outIndex=outIndex, inFeedOverloadTrap=inFeedOverloadTrap, pduFrequency=pduFrequency, pduCurrent=pduCurrent, uPSOutputFrequency=uPSOutputFrequency, inputTrap=inputTrap, outDataList=outDataList, pduDataList=pduDataList, inFeedTable=inFeedTable, extendRHHighWarning=extendRHHighWarning, extendTemperatureEntry=extendTemperatureEntry, inFeedBranch1HighWarning=inFeedBranch1HighWarning, inputEntry=inputEntry, uPSBatteryRunTime=uPSBatteryRunTime, outLowCurrentTrap=outLowCurrentTrap, outPowerLoad=outPowerLoad, outUPSBatteryLowRecoveryOnTrap=outUPSBatteryLowRecoveryOnTrap, inFeedBranch2PowerFactor=inFeedBranch2PowerFactor, pduModel=pduModel, inFeedStatus=inFeedStatus, pduBranch2Current=pduBranch2Current, inFeedHighWarning=inFeedHighWarning, micDetectPeriod=micDetectPeriod, pduLowWarning=pduLowWarning, inFeedIndex=inFeedIndex, productModel=productModel, inFeedVoltage=inFeedVoltage, inFeedBranchOverloadTrap=inFeedBranchOverloadTrap, outHighCurrentTrap=outHighCurrentTrap, extendRHStatus=extendRHStatus, trap=trap, pduBranchOverloadTrap=pduBranchOverloadTrap, product=product, inFeedBranch2HighWarning=inFeedBranch2HighWarning, extendRHDeviceId=extendRHDeviceId, envConnectTrap=envConnectTrap, outWebOperationTrap=outWebOperationTrap, aTSTable=aTSTable, inputState=inputState, pduVoltage=pduVoltage, outPingRebootTrap=outPingRebootTrap, uPSModel=uPSModel, inFeedPowerEnergy=inFeedPowerEnergy, pduLowCurrentTrap=pduLowCurrentTrap, deviceUnitStatus=deviceUnitStatus, productFirmwareVersion=productFirmwareVersion)
