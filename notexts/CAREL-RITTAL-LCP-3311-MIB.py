#
# PySNMP MIB module CAREL-RITTAL-LCP-3311-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/carel/CAREL-RITTAL-LCP-3311-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 09:08:53 2024
# On host fv-az2021-432 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, Integer32, Bits, TimeTicks, Unsigned32, Gauge32, enterprises, Counter32, Counter64, NotificationType, ModuleIdentity, iso, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Integer32", "Bits", "TimeTicks", "Unsigned32", "Gauge32", "enterprises", "Counter32", "Counter64", "NotificationType", "ModuleIdentity", "iso", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
carel = ModuleIdentity((1, 3, 6, 1, 4, 1, 9839))
carel.setRevisions(('2021-06-29 00:00',))
if mibBuilder.loadTexts: carel.setLastUpdated('202106290000Z')
if mibBuilder.loadTexts: carel.setOrganization('Epiecs')
rittal = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2606))
rittalLCP3311 = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2606, 2))
sensors = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1))
digital = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1))
analog = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2))
integer = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3))
class DivBy10(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-1'

compressorOverloadAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorOverloadAlarm.setStatus('current')
highPressureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: highPressureAlarm.setStatus('current')
remoteOnOff = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteOnOff.setStatus('current')
inverterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterAlarm.setStatus('current')
driveAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveAlarm.setStatus('current')
inverterOnOff = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterOnOff.setStatus('current')
generalAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generalAlarm.setStatus('current')
resetAllAlarms = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetAllAlarms.setStatus('current')
compressorEnvelopeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorEnvelopeAlarm.setStatus('current')
compressorStartupFailureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorStartupFailureAlarm.setStatus('current')
maxDischargeTemperatureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxDischargeTemperatureAlarm.setStatus('current')
compressorDeltaPressureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorDeltaPressureAlarm.setStatus('current')
oilReturnAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oilReturnAlarm.setStatus('current')
outputTemperatureTopProbeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputTemperatureTopProbeAlarm.setStatus('current')
outputTemperatureMidProbeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputTemperatureMidProbeAlarm.setStatus('current')
outputTemperatureBottomProbeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputTemperatureBottomProbeAlarm.setStatus('current')
inputTemperatureTopProbeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputTemperatureTopProbeAlarm.setStatus('current')
inputTemperatureMidProbeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputTemperatureMidProbeAlarm.setStatus('current')
inputTemperatureBottomProbeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputTemperatureBottomProbeAlarm.setStatus('current')
compressorDischargeTemperatureProbeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorDischargeTemperatureProbeAlarm.setStatus('current')
compressorSuctionTemperatureProbeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorSuctionTemperatureProbeAlarm.setStatus('current')
compressorDischargePressureProbeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorDischargePressureProbeAlarm.setStatus('current')
compressorSuctionPressureProbeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorSuctionPressureProbeAlarm.setStatus('current')
reboot = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reboot.setStatus('current')
compressorRotorSpeedHz = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorRotorSpeedHz.setStatus('current')
driverPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stop", 1), ("run", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverPowerStatus.setStatus('current')
currentErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("OK", 0), ("ALA02", 2), ("ALA03", 3), ("ALA04", 4), ("ALA05", 5), ("ALA06", 6), ("ALA07", 7), ("ALA08", 8), ("ALA09", 9), ("ALA10", 10), ("ALA11", 11), ("ALA12", 12), ("ALB01", 13), ("ALB02", 14), ("ALB03", 15), ("ALC01", 16), ("ALC03", 17), ("ALC04", 18), ("ALC05", 19), ("ALC06", 20), ("ALF01", 21), ("ALD02", 22), ("ALD03", 23), ("ALD04", 24), ("ALD05", 25), ("ALD06", 26), ("ALD07", 27), ("ALD08", 28), ("ALD09", 29), ("ALL01", 30), ("ALL02", 31), ("ALL99", 32), ("ALW04", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentErrorCode.setStatus('current')
driverTemperature = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 4), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: driverTemperature.setStatus('current')
dcBusVoltage = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 5), DivBy10()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcBusVoltage.setStatus('current')
motorVoltage = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 6), DivBy10()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: motorVoltage.setStatus('current')
powerRequest = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 7), DivBy10()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: powerRequest.setStatus('current')
unitOnOff = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("energy-save", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitOnOff.setStatus('current')
envelopeZone = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 0), ("maximum-compression-ratio", 1), ("maximum-discharge-power", 2), ("current-limit", 3), ("maximum-suction-power", 4), ("minimum-compression-ratio", 5), ("minimum-delta-power", 6), ("minimum-discharge-power", 7), ("minimum-suction-power", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envelopeZone.setStatus('current')
coolingCapacity = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingCapacity.setStatus('current')
evdValveSteps = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 540))).setUnits('steps').setMaxAccess("readonly")
if mibBuilder.loadTexts: evdValveSteps.setStatus('current')
fanSpeedPercent = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeedPercent.setStatus('current')
fanSpeedRpm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3700))).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeedRpm.setStatus('current')
evdValveOpening = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: evdValveOpening.setStatus('current')
outputTemperatureTopSensor = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 2), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: outputTemperatureTopSensor.setStatus('current')
outputTemperatureMidSensor = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 3), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: outputTemperatureMidSensor.setStatus('current')
outputTemperatureBottomSensor = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 4), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: outputTemperatureBottomSensor.setStatus('current')
inputTemperatureTopSensor = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 6), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: inputTemperatureTopSensor.setStatus('current')
inputTemperatureMidSensor = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 7), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: inputTemperatureMidSensor.setStatus('current')
inputTemperatureBottomSensor = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 8), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: inputTemperatureBottomSensor.setStatus('current')
compressorDischargeTemperature = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 9), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorDischargeTemperature.setStatus('current')
compressorSuctionTemperature = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 10), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorSuctionTemperature.setStatus('current')
compressorDischargePressure = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 11), DivBy10()).setUnits('bar').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorDischargePressure.setStatus('current')
compressorSuctionPressure = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 12), DivBy10()).setUnits('bar').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorSuctionPressure.setStatus('current')
evaporatorTemperature = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 13), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: evaporatorTemperature.setStatus('current')
condensingTemperature = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 14), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: condensingTemperature.setStatus('current')
inputTemperatureAverage = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 21), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: inputTemperatureAverage.setStatus('current')
outputTemperatureAverage = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 22), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: outputTemperatureAverage.setStatus('current')
compressorRotorSpeed = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 45), DivBy10()).setUnits('rps').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorRotorSpeed.setStatus('current')
compressorMotorCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 46), DivBy10()).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorMotorCurrent.setStatus('current')
lcpSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 48), DivBy10()).setUnits('C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcpSetpoint.setStatus('current')
mibBuilder.exportSymbols("CAREL-RITTAL-LCP-3311-MIB", evdValveSteps=evdValveSteps, compressorMotorCurrent=compressorMotorCurrent, compressorOverloadAlarm=compressorOverloadAlarm, remoteOnOff=remoteOnOff, compressorSuctionPressureProbeAlarm=compressorSuctionPressureProbeAlarm, inverterAlarm=inverterAlarm, inputTemperatureTopSensor=inputTemperatureTopSensor, compressorDischargePressure=compressorDischargePressure, digital=digital, analog=analog, outputTemperatureTopProbeAlarm=outputTemperatureTopProbeAlarm, inputTemperatureBottomSensor=inputTemperatureBottomSensor, generalAlarm=generalAlarm, outputTemperatureMidProbeAlarm=outputTemperatureMidProbeAlarm, compressorEnvelopeAlarm=compressorEnvelopeAlarm, lcpSetpoint=lcpSetpoint, carel=carel, inputTemperatureAverage=inputTemperatureAverage, highPressureAlarm=highPressureAlarm, rittalLCP3311=rittalLCP3311, compressorDischargePressureProbeAlarm=compressorDischargePressureProbeAlarm, evaporatorTemperature=evaporatorTemperature, reboot=reboot, currentErrorCode=currentErrorCode, maxDischargeTemperatureAlarm=maxDischargeTemperatureAlarm, compressorRotorSpeed=compressorRotorSpeed, inputTemperatureMidProbeAlarm=inputTemperatureMidProbeAlarm, driveAlarm=driveAlarm, coolingCapacity=coolingCapacity, unitOnOff=unitOnOff, inputTemperatureTopProbeAlarm=inputTemperatureTopProbeAlarm, compressorStartupFailureAlarm=compressorStartupFailureAlarm, integer=integer, compressorDeltaPressureAlarm=compressorDeltaPressureAlarm, driverTemperature=driverTemperature, outputTemperatureMidSensor=outputTemperatureMidSensor, inverterOnOff=inverterOnOff, sensors=sensors, envelopeZone=envelopeZone, outputTemperatureTopSensor=outputTemperatureTopSensor, compressorSuctionTemperatureProbeAlarm=compressorSuctionTemperatureProbeAlarm, compressorDischargeTemperature=compressorDischargeTemperature, rittal=rittal, compressorSuctionPressure=compressorSuctionPressure, fanSpeedRpm=fanSpeedRpm, dcBusVoltage=dcBusVoltage, inputTemperatureBottomProbeAlarm=inputTemperatureBottomProbeAlarm, fanSpeedPercent=fanSpeedPercent, outputTemperatureAverage=outputTemperatureAverage, powerRequest=powerRequest, oilReturnAlarm=oilReturnAlarm, outputTemperatureBottomProbeAlarm=outputTemperatureBottomProbeAlarm, evdValveOpening=evdValveOpening, condensingTemperature=condensingTemperature, PYSNMP_MODULE_ID=carel, compressorRotorSpeedHz=compressorRotorSpeedHz, compressorSuctionTemperature=compressorSuctionTemperature, motorVoltage=motorVoltage, DivBy10=DivBy10, compressorDischargeTemperatureProbeAlarm=compressorDischargeTemperatureProbeAlarm, inputTemperatureMidSensor=inputTemperatureMidSensor, outputTemperatureBottomSensor=outputTemperatureBottomSensor, driverPowerStatus=driverPowerStatus, resetAllAlarms=resetAllAlarms)
