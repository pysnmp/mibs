#
# PySNMP MIB module IEEE8023-DOT3-LLDP-EXT-V2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/iee/IEEE8023-DOT3-LLDP-EXT-V2-MIB
# Produced by pysmi-1.1.12 at Mon Sep  9 08:59:36 2024
# On host fv-az1567-109 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ifGeneralInformationGroup, = mibBuilder.importSymbols("IF-MIB", "ifGeneralInformationGroup")
lldpV2RemTimeMark, lldpV2LocPortIfIndex, lldpV2PortConfigEntry, lldpV2RemIndex, lldpV2RemLocalIfIndex, lldpV2RemLocalDestMACAddress = mibBuilder.importSymbols("LLDP-V2-MIB", "lldpV2RemTimeMark", "lldpV2LocPortIfIndex", "lldpV2PortConfigEntry", "lldpV2RemIndex", "lldpV2RemLocalIfIndex", "lldpV2RemLocalDestMACAddress")
LldpV2PowerPortClass, = mibBuilder.importSymbols("LLDP-V2-TC-MIB", "LldpV2PowerPortClass")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Integer32, Bits, Counter64, ModuleIdentity, iso, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, NotificationType, Unsigned32, Gauge32, org, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "Counter64", "ModuleIdentity", "iso", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "NotificationType", "Unsigned32", "Gauge32", "org", "TimeTicks")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
ieee8023lldpV2Xdot3MIB = ModuleIdentity((1, 3, 111, 2, 802, 3, 1, 5))
ieee8023lldpV2Xdot3MIB.setRevisions(('2013-04-11 00:00', '2011-02-02 00:00',))
if mibBuilder.loadTexts: ieee8023lldpV2Xdot3MIB.setLastUpdated('201304110000Z')
if mibBuilder.loadTexts: ieee8023lldpV2Xdot3MIB.setOrganization('IEEE 802.3 Working Group')
lldpV2Xdot3Objects = MibIdentifier((1, 3, 111, 2, 802, 3, 1, 5, 1))
lldpV2Xdot3Config = MibIdentifier((1, 3, 111, 2, 802, 3, 1, 5, 1, 1))
lldpV2Xdot3LocalData = MibIdentifier((1, 3, 111, 2, 802, 3, 1, 5, 1, 2))
lldpV2Xdot3RemoteData = MibIdentifier((1, 3, 111, 2, 802, 3, 1, 5, 1, 3))
lldpV2Xdot3PortConfigTable = MibTable((1, 3, 111, 2, 802, 3, 1, 5, 1, 1, 1), )
if mibBuilder.loadTexts: lldpV2Xdot3PortConfigTable.setStatus('current')
lldpV2Xdot3PortConfigEntry = MibTableRow((1, 3, 111, 2, 802, 3, 1, 5, 1, 1, 1, 1), )
lldpV2PortConfigEntry.registerAugmentions(("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3PortConfigEntry"))
lldpV2Xdot3PortConfigEntry.setIndexNames(*lldpV2PortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpV2Xdot3PortConfigEntry.setStatus('current')
lldpV2Xdot3PortConfigTLVsTxEnable = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("macPhyConfigStatus", 0), ("powerViaMDI", 1), ("unused", 2), ("maxFrameSize", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpV2Xdot3PortConfigTLVsTxEnable.setStatus('current')
lldpV2Xdot3LocPortTable = MibTable((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 1), )
if mibBuilder.loadTexts: lldpV2Xdot3LocPortTable.setStatus('current')
lldpV2Xdot3LocPortEntry = MibTableRow((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 1, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"))
if mibBuilder.loadTexts: lldpV2Xdot3LocPortEntry.setStatus('current')
lldpV2Xdot3LocPortAutoNegSupported = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPortAutoNegSupported.setStatus('current')
lldpV2Xdot3LocPortAutoNegEnabled = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPortAutoNegEnabled.setStatus('current')
lldpV2Xdot3LocPortAutoNegAdvertisedCap = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPortAutoNegAdvertisedCap.setStatus('current')
lldpV2Xdot3LocPortOperMauType = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPortOperMauType.setStatus('current')
lldpV2Xdot3LocPowerTable = MibTable((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2), )
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerTable.setStatus('current')
lldpV2Xdot3LocPowerEntry = MibTableRow((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"))
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerEntry.setStatus('current')
lldpV2Xdot3LocPowerPortClass = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 1), LldpV2PowerPortClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerPortClass.setStatus('current')
lldpV2Xdot3LocPowerMDISupported = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerMDISupported.setStatus('current')
lldpV2Xdot3LocPowerMDIEnabled = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerMDIEnabled.setStatus('current')
lldpV2Xdot3LocPowerPairControlable = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerPairControlable.setStatus('current')
lldpV2Xdot3LocPowerPairs = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerPairs.setStatus('current')
lldpV2Xdot3LocPowerClass = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerClass.setStatus('current')
lldpV2Xdot3LocPowerType = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("psetype1", 0), ("psetype2", 1), ("pdtype", 2), ("pdtype2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerType.setStatus('current')
lldpV2Xdot3LocPowerSource = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pseprimary", 0), ("psebackup", 1), ("pseunknown", 2), ("pdpseandlocal", 3), ("pdpseonly", 4), ("pdunknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerSource.setStatus('current')
lldpV2Xdot3LocPowerPriority = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("high", 1), ("critical", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerPriority.setStatus('current')
lldpV2Xdot3LocPDRequestedPowerValue = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPDRequestedPowerValue.setStatus('current')
lldpV2Xdot3LocPSEAllocatedPowerValue = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPSEAllocatedPowerValue.setStatus('current')
lldpV2Xdot3LocResponseTime = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocResponseTime.setStatus('current')
lldpV2Xdot3LocReady = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocReady.setStatus('current')
lldpV2Xdot3LocReducedOperationPowerValue = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocReducedOperationPowerValue.setStatus('current')
lldpV2Xdot3LocMaxFrameSizeTable = MibTable((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 3), )
if mibBuilder.loadTexts: lldpV2Xdot3LocMaxFrameSizeTable.setStatus('current')
lldpV2Xdot3LocMaxFrameSizeEntry = MibTableRow((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 3, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"))
if mibBuilder.loadTexts: lldpV2Xdot3LocMaxFrameSizeEntry.setStatus('current')
lldpV2Xdot3LocMaxFrameSize = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocMaxFrameSize.setStatus('current')
lldpV2Xdot3LocEEETable = MibTable((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 4), )
if mibBuilder.loadTexts: lldpV2Xdot3LocEEETable.setStatus('current')
lldpV2Xdot3LocEEEEntry = MibTableRow((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 4, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"))
if mibBuilder.loadTexts: lldpV2Xdot3LocEEEEntry.setStatus('current')
lldpV2Xdot3LocTxTwSys = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocTxTwSys.setStatus('current')
lldpV2Xdot3LocTxTwSysEcho = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocTxTwSysEcho.setStatus('current')
lldpV2Xdot3LocRxTwSys = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocRxTwSys.setStatus('current')
lldpV2Xdot3LocRxTwSysEcho = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocRxTwSysEcho.setStatus('current')
lldpV2Xdot3LocFbTwSys = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocFbTwSys.setStatus('current')
lldpV2Xdot3TxDllReady = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 4, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3TxDllReady.setStatus('current')
lldpV2Xdot3RxDllReady = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 4, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RxDllReady.setStatus('current')
lldpV2Xdot3LocDllEnabled = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 4, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocDllEnabled.setStatus('current')
lldpV2Xdot3RemPortTable = MibTable((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 1), )
if mibBuilder.loadTexts: lldpV2Xdot3RemPortTable.setStatus('current')
lldpV2Xdot3RemPortEntry = MibTableRow((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 1, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"))
if mibBuilder.loadTexts: lldpV2Xdot3RemPortEntry.setStatus('current')
lldpV2Xdot3RemPortAutoNegSupported = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPortAutoNegSupported.setStatus('current')
lldpV2Xdot3RemPortAutoNegEnabled = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPortAutoNegEnabled.setStatus('current')
lldpV2Xdot3RemPortAutoNegAdvertisedCap = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPortAutoNegAdvertisedCap.setStatus('current')
lldpV2Xdot3RemPortOperMauType = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPortOperMauType.setStatus('current')
lldpV2Xdot3RemPowerTable = MibTable((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2), )
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerTable.setStatus('current')
lldpV2Xdot3RemPowerEntry = MibTableRow((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"))
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerEntry.setStatus('current')
lldpV2Xdot3RemPowerPortClass = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1, 1), LldpV2PowerPortClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerPortClass.setStatus('current')
lldpV2Xdot3RemPowerMDISupported = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerMDISupported.setStatus('current')
lldpV2Xdot3RemPowerMDIEnabled = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerMDIEnabled.setStatus('current')
lldpV2Xdot3RemPowerPairControlable = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerPairControlable.setStatus('current')
lldpV2Xdot3RemPowerPairs = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerPairs.setStatus('current')
lldpV2Xdot3RemPowerClass = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerClass.setStatus('current')
lldpV2Xdot3RemPowerType = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("psetype1", 0), ("psetype2", 1), ("pdtype", 2), ("pdtype2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerType.setStatus('current')
lldpV2Xdot3RemPowerSource = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pseprimary", 0), ("psebackup", 1), ("pseunknown", 2), ("pdpseandlocal", 3), ("pdlocalonly", 4), ("pdpseonly", 5), ("pdunknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerSource.setStatus('current')
lldpV2Xdot3RemPowerPriority = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("high", 1), ("critical", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerPriority.setStatus('current')
lldpV2Xdot3RemPDRequestedPowerValue = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPDRequestedPowerValue.setStatus('current')
lldpV2Xdot3RemPSEAllocatedPowerValue = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPSEAllocatedPowerValue.setStatus('current')
lldpV2Xdot3RemMaxFrameSizeTable = MibTable((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 3), )
if mibBuilder.loadTexts: lldpV2Xdot3RemMaxFrameSizeTable.setStatus('current')
lldpV2Xdot3RemMaxFrameSizeEntry = MibTableRow((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 3, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"))
if mibBuilder.loadTexts: lldpV2Xdot3RemMaxFrameSizeEntry.setStatus('current')
lldpV2Xdot3RemMaxFrameSize = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemMaxFrameSize.setStatus('current')
lldpV2Xdot3RemEEETable = MibTable((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 4), )
if mibBuilder.loadTexts: lldpV2Xdot3RemEEETable.setStatus('current')
lldpV2Xdot3RemEEEEntry = MibTableRow((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 4, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"))
if mibBuilder.loadTexts: lldpV2Xdot3RemEEEEntry.setStatus('current')
lldpV2Xdot3RemTxTwSys = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemTxTwSys.setStatus('current')
lldpV2Xdot3RemTxTwSysEcho = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemTxTwSysEcho.setStatus('current')
lldpV2Xdot3RemRxTwSys = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemRxTwSys.setStatus('current')
lldpV2Xdot3RemRxTwSysEcho = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemRxTwSysEcho.setStatus('current')
lldpV2Xdot3RemFbTwSys = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemFbTwSys.setStatus('current')
lldpV2Xdot3Conformance = MibIdentifier((1, 3, 111, 2, 802, 3, 1, 5, 2))
lldpV2Xdot3Compliances = MibIdentifier((1, 3, 111, 2, 802, 3, 1, 5, 2, 1))
lldpV2Xdot3Groups = MibIdentifier((1, 3, 111, 2, 802, 3, 1, 5, 2, 2))
lldpV2Xdot3TxRxCompliance = ModuleCompliance((1, 3, 111, 2, 802, 3, 1, 5, 2, 1, 1)).setObjects(("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3ConfigGroup"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "ifGeneralInformationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2Xdot3TxRxCompliance = lldpV2Xdot3TxRxCompliance.setStatus('current')
lldpV2Xdot3TxCompliance = ModuleCompliance((1, 3, 111, 2, 802, 3, 1, 5, 2, 1, 2)).setObjects(("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocSysGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2Xdot3TxCompliance = lldpV2Xdot3TxCompliance.setStatus('current')
lldpV2Xdot3RxCompliance = ModuleCompliance((1, 3, 111, 2, 802, 3, 1, 5, 2, 1, 3)).setObjects(("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemSysGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2Xdot3RxCompliance = lldpV2Xdot3RxCompliance.setStatus('current')
lldpV2Xdot3ConfigGroup = ObjectGroup((1, 3, 111, 2, 802, 3, 1, 5, 2, 2, 1)).setObjects(("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3PortConfigTLVsTxEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2Xdot3ConfigGroup = lldpV2Xdot3ConfigGroup.setStatus('current')
lldpV2Xdot3LocSysGroup = ObjectGroup((1, 3, 111, 2, 802, 3, 1, 5, 2, 2, 2)).setObjects(("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPortAutoNegSupported"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPortAutoNegEnabled"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPortAutoNegAdvertisedCap"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPortOperMauType"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPowerPortClass"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPowerMDISupported"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPowerMDIEnabled"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPowerPairControlable"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPowerPairs"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPowerClass"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocMaxFrameSize"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPowerType"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPowerSource"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPowerPriority"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPDRequestedPowerValue"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPSEAllocatedPowerValue"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocResponseTime"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocReady"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocReducedOperationPowerValue"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocTxTwSys"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocTxTwSysEcho"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocRxTwSys"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocRxTwSysEcho"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocFbTwSys"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3TxDllReady"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RxDllReady"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocDllEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2Xdot3LocSysGroup = lldpV2Xdot3LocSysGroup.setStatus('current')
lldpV2Xdot3RemSysGroup = ObjectGroup((1, 3, 111, 2, 802, 3, 1, 5, 2, 2, 3)).setObjects(("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPortAutoNegSupported"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPortAutoNegEnabled"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPortAutoNegAdvertisedCap"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPortOperMauType"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPowerPortClass"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPowerMDISupported"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPowerMDIEnabled"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPowerPairControlable"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPowerPairs"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPowerClass"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemMaxFrameSize"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPowerType"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPowerSource"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPowerPriority"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPDRequestedPowerValue"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPSEAllocatedPowerValue"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemTxTwSys"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemTxTwSysEcho"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemRxTwSys"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemRxTwSysEcho"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemFbTwSys"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2Xdot3RemSysGroup = lldpV2Xdot3RemSysGroup.setStatus('current')
mibBuilder.exportSymbols("IEEE8023-DOT3-LLDP-EXT-V2-MIB", lldpV2Xdot3Conformance=lldpV2Xdot3Conformance, lldpV2Xdot3RemRxTwSys=lldpV2Xdot3RemRxTwSys, lldpV2Xdot3Objects=lldpV2Xdot3Objects, lldpV2Xdot3LocPortAutoNegEnabled=lldpV2Xdot3LocPortAutoNegEnabled, lldpV2Xdot3RemPowerPortClass=lldpV2Xdot3RemPowerPortClass, lldpV2Xdot3RemPowerEntry=lldpV2Xdot3RemPowerEntry, lldpV2Xdot3LocMaxFrameSize=lldpV2Xdot3LocMaxFrameSize, lldpV2Xdot3RemRxTwSysEcho=lldpV2Xdot3RemRxTwSysEcho, ieee8023lldpV2Xdot3MIB=ieee8023lldpV2Xdot3MIB, lldpV2Xdot3LocSysGroup=lldpV2Xdot3LocSysGroup, lldpV2Xdot3ConfigGroup=lldpV2Xdot3ConfigGroup, lldpV2Xdot3LocEEEEntry=lldpV2Xdot3LocEEEEntry, lldpV2Xdot3LocDllEnabled=lldpV2Xdot3LocDllEnabled, lldpV2Xdot3LocPortAutoNegAdvertisedCap=lldpV2Xdot3LocPortAutoNegAdvertisedCap, lldpV2Xdot3RxCompliance=lldpV2Xdot3RxCompliance, lldpV2Xdot3RemTxTwSys=lldpV2Xdot3RemTxTwSys, lldpV2Xdot3RemPowerTable=lldpV2Xdot3RemPowerTable, lldpV2Xdot3LocMaxFrameSizeTable=lldpV2Xdot3LocMaxFrameSizeTable, lldpV2Xdot3RemEEEEntry=lldpV2Xdot3RemEEEEntry, lldpV2Xdot3RemMaxFrameSizeTable=lldpV2Xdot3RemMaxFrameSizeTable, lldpV2Xdot3RemTxTwSysEcho=lldpV2Xdot3RemTxTwSysEcho, lldpV2Xdot3RemMaxFrameSizeEntry=lldpV2Xdot3RemMaxFrameSizeEntry, lldpV2Xdot3RemPowerMDISupported=lldpV2Xdot3RemPowerMDISupported, PYSNMP_MODULE_ID=ieee8023lldpV2Xdot3MIB, lldpV2Xdot3LocFbTwSys=lldpV2Xdot3LocFbTwSys, lldpV2Xdot3Compliances=lldpV2Xdot3Compliances, lldpV2Xdot3RemPowerPairs=lldpV2Xdot3RemPowerPairs, lldpV2Xdot3RemPortAutoNegAdvertisedCap=lldpV2Xdot3RemPortAutoNegAdvertisedCap, lldpV2Xdot3RemMaxFrameSize=lldpV2Xdot3RemMaxFrameSize, lldpV2Xdot3Groups=lldpV2Xdot3Groups, lldpV2Xdot3LocPortAutoNegSupported=lldpV2Xdot3LocPortAutoNegSupported, lldpV2Xdot3PortConfigEntry=lldpV2Xdot3PortConfigEntry, lldpV2Xdot3LocPowerPriority=lldpV2Xdot3LocPowerPriority, lldpV2Xdot3RemPortAutoNegEnabled=lldpV2Xdot3RemPortAutoNegEnabled, lldpV2Xdot3RemPSEAllocatedPowerValue=lldpV2Xdot3RemPSEAllocatedPowerValue, lldpV2Xdot3LocPowerClass=lldpV2Xdot3LocPowerClass, lldpV2Xdot3LocPowerMDIEnabled=lldpV2Xdot3LocPowerMDIEnabled, lldpV2Xdot3RemPowerMDIEnabled=lldpV2Xdot3RemPowerMDIEnabled, lldpV2Xdot3LocPowerPairs=lldpV2Xdot3LocPowerPairs, lldpV2Xdot3RemPortTable=lldpV2Xdot3RemPortTable, lldpV2Xdot3RemPortOperMauType=lldpV2Xdot3RemPortOperMauType, lldpV2Xdot3LocTxTwSys=lldpV2Xdot3LocTxTwSys, lldpV2Xdot3RemoteData=lldpV2Xdot3RemoteData, lldpV2Xdot3LocalData=lldpV2Xdot3LocalData, lldpV2Xdot3LocPowerTable=lldpV2Xdot3LocPowerTable, lldpV2Xdot3RxDllReady=lldpV2Xdot3RxDllReady, lldpV2Xdot3LocPortOperMauType=lldpV2Xdot3LocPortOperMauType, lldpV2Xdot3LocRxTwSys=lldpV2Xdot3LocRxTwSys, lldpV2Xdot3RemPowerSource=lldpV2Xdot3RemPowerSource, lldpV2Xdot3LocPowerMDISupported=lldpV2Xdot3LocPowerMDISupported, lldpV2Xdot3PortConfigTLVsTxEnable=lldpV2Xdot3PortConfigTLVsTxEnable, lldpV2Xdot3LocPowerPortClass=lldpV2Xdot3LocPowerPortClass, lldpV2Xdot3TxCompliance=lldpV2Xdot3TxCompliance, lldpV2Xdot3RemPowerClass=lldpV2Xdot3RemPowerClass, lldpV2Xdot3RemPDRequestedPowerValue=lldpV2Xdot3RemPDRequestedPowerValue, lldpV2Xdot3LocReducedOperationPowerValue=lldpV2Xdot3LocReducedOperationPowerValue, lldpV2Xdot3RemPowerPriority=lldpV2Xdot3RemPowerPriority, lldpV2Xdot3LocPowerEntry=lldpV2Xdot3LocPowerEntry, lldpV2Xdot3LocEEETable=lldpV2Xdot3LocEEETable, lldpV2Xdot3PortConfigTable=lldpV2Xdot3PortConfigTable, lldpV2Xdot3RemFbTwSys=lldpV2Xdot3RemFbTwSys, lldpV2Xdot3LocPortEntry=lldpV2Xdot3LocPortEntry, lldpV2Xdot3LocPowerType=lldpV2Xdot3LocPowerType, lldpV2Xdot3Config=lldpV2Xdot3Config, lldpV2Xdot3LocPortTable=lldpV2Xdot3LocPortTable, lldpV2Xdot3RemPortEntry=lldpV2Xdot3RemPortEntry, lldpV2Xdot3LocPSEAllocatedPowerValue=lldpV2Xdot3LocPSEAllocatedPowerValue, lldpV2Xdot3RemPowerType=lldpV2Xdot3RemPowerType, lldpV2Xdot3LocPowerSource=lldpV2Xdot3LocPowerSource, lldpV2Xdot3LocMaxFrameSizeEntry=lldpV2Xdot3LocMaxFrameSizeEntry, lldpV2Xdot3RemPortAutoNegSupported=lldpV2Xdot3RemPortAutoNegSupported, lldpV2Xdot3LocPDRequestedPowerValue=lldpV2Xdot3LocPDRequestedPowerValue, lldpV2Xdot3LocReady=lldpV2Xdot3LocReady, lldpV2Xdot3TxDllReady=lldpV2Xdot3TxDllReady, lldpV2Xdot3LocPowerPairControlable=lldpV2Xdot3LocPowerPairControlable, lldpV2Xdot3LocResponseTime=lldpV2Xdot3LocResponseTime, lldpV2Xdot3LocTxTwSysEcho=lldpV2Xdot3LocTxTwSysEcho, lldpV2Xdot3RemPowerPairControlable=lldpV2Xdot3RemPowerPairControlable, lldpV2Xdot3RemSysGroup=lldpV2Xdot3RemSysGroup, lldpV2Xdot3TxRxCompliance=lldpV2Xdot3TxRxCompliance, lldpV2Xdot3RemEEETable=lldpV2Xdot3RemEEETable, lldpV2Xdot3LocRxTwSysEcho=lldpV2Xdot3LocRxTwSysEcho)
