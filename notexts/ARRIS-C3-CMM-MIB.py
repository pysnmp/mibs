#
# PySNMP MIB module ARRIS-C3-CMM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/arris/ARRIS-C3-CMM-MIB
# Produced by pysmi-1.1.12 at Wed Dec  4 17:51:26 2024
# On host fv-az2036-124 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
cmtsC3, = mibBuilder.importSymbols("ARRIS-MIB", "cmtsC3")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
docsIfCmtsCmStatusEntry, docsIfCmtsCmStatusIpAddress, docsIfCmtsCmStatusMacAddress, docsIfCmtsCmStatusDocsisRegMode, TenthdBmV = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfCmtsCmStatusEntry", "docsIfCmtsCmStatusIpAddress", "docsIfCmtsCmStatusMacAddress", "docsIfCmtsCmStatusDocsisRegMode", "TenthdBmV")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, iso, Counter32, IpAddress, TimeTicks, MibIdentifier, Integer32, Bits, ObjectIdentity, enterprises, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "Counter32", "IpAddress", "TimeTicks", "MibIdentifier", "Integer32", "Bits", "ObjectIdentity", "enterprises", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity")
MacAddress, DisplayString, TruthValue, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TruthValue", "DateAndTime", "TextualConvention")
cmtsC3CMMMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5))
cmtsC3CMMMIB.setRevisions(('2005-02-02 00:00',))
if mibBuilder.loadTexts: cmtsC3CMMMIB.setLastUpdated('200502020000Z')
if mibBuilder.loadTexts: cmtsC3CMMMIB.setOrganization('Arris International')
dcxCMMObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1))
dcxCMMCmtsCmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1), )
if mibBuilder.loadTexts: dcxCMMCmtsCmStatusTable.setStatus('current')
dcxCMMCmtsCmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1), )
docsIfCmtsCmStatusEntry.registerAugmentions(("ARRIS-C3-CMM-MIB", "dcxCMMCmtsCmStatusEntry"))
dcxCMMCmtsCmStatusEntry.setIndexNames(*docsIfCmtsCmStatusEntry.getIndexNames())
if mibBuilder.loadTexts: dcxCMMCmtsCmStatusEntry.setStatus('current')
dcxCMMCmDebugLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxCMMCmDebugLevel.setStatus('current')
dcxCMMUpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxCMMUpDisable.setStatus('current')
dcxCMMResetCm = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("delete", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxCMMResetCm.setStatus('current')
dcxCMMResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxCMMResetCounters.setStatus('current')
dcxCMMCmBpiState = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("cmBPI2NotManagedByBPI2", 0), ("cmBPI2InBPI2Progress", 1), ("cmBPI2NotAuthorized", 2), ("cmBPI2KeyIssued", 3), ("cmBPI2IsRunning", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMCmBpiState.setStatus('current')
dcxCMMCmPrimaryUsSf = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMCmPrimaryUsSf.setStatus('current')
dcxCMMCmPrimaryDsSf = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMCmPrimaryDsSf.setStatus('current')
dcxCMMIpToCmTable = MibTable((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 2), )
if mibBuilder.loadTexts: dcxCMMIpToCmTable.setStatus('current')
dcxCMMIpToCmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 2, 1), ).setIndexNames((0, "ARRIS-C3-CMM-MIB", "dcxCMMCmIp"))
if mibBuilder.loadTexts: dcxCMMIpToCmEntry.setStatus('current')
dcxCMMCmIp = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: dcxCMMCmIp.setStatus('current')
dcxCMMCmPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMCmPtr.setStatus('current')
dcxCMMFlapTable = MibTable((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3), )
if mibBuilder.loadTexts: dcxCMMFlapTable.setStatus('current')
dcxCMMCmFlapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1), ).setIndexNames((0, "ARRIS-C3-CMM-MIB", "dcxCMMFlapMacAddr"))
if mibBuilder.loadTexts: dcxCMMCmFlapEntry.setStatus('current')
dcxCMMFlapMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapMacAddr.setStatus('current')
dcxCMMFlapUpstreamID = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapUpstreamID.setStatus('current')
dcxCMMFlapInsertions = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapInsertions.setStatus('current')
dcxCMMFlapHits = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapHits.setStatus('current')
dcxCMMFlapMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapMisses.setStatus('current')
dcxCMMFlapCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapCRC.setStatus('current')
dcxCMMFlapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapCount.setStatus('current')
dcxCMMFlapTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapTimeStamp.setStatus('current')
dcxCMMTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 4))
dcxCMMTrapReason = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dcxCMMTrapReason.setStatus('current')
dcxCMMTrap = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 4, 2)).setObjects(("ARRIS-C3-CMM-MIB", "dcxCMMTrapReason"))
if mibBuilder.loadTexts: dcxCMMTrap.setStatus('current')
mibBuilder.exportSymbols("ARRIS-C3-CMM-MIB", dcxCMMCmPrimaryDsSf=dcxCMMCmPrimaryDsSf, dcxCMMCmDebugLevel=dcxCMMCmDebugLevel, dcxCMMResetCounters=dcxCMMResetCounters, dcxCMMFlapUpstreamID=dcxCMMFlapUpstreamID, dcxCMMFlapTimeStamp=dcxCMMFlapTimeStamp, dcxCMMIpToCmEntry=dcxCMMIpToCmEntry, PYSNMP_MODULE_ID=cmtsC3CMMMIB, dcxCMMCmIp=dcxCMMCmIp, dcxCMMFlapCRC=dcxCMMFlapCRC, dcxCMMCmPtr=dcxCMMCmPtr, dcxCMMCmFlapEntry=dcxCMMCmFlapEntry, dcxCMMFlapTable=dcxCMMFlapTable, dcxCMMTrapReason=dcxCMMTrapReason, dcxCMMCmtsCmStatusEntry=dcxCMMCmtsCmStatusEntry, dcxCMMFlapHits=dcxCMMFlapHits, dcxCMMIpToCmTable=dcxCMMIpToCmTable, dcxCMMFlapMacAddr=dcxCMMFlapMacAddr, dcxCMMFlapCount=dcxCMMFlapCount, dcxCMMFlapMisses=dcxCMMFlapMisses, dcxCMMTrapGroup=dcxCMMTrapGroup, dcxCMMCmBpiState=dcxCMMCmBpiState, dcxCMMObjects=dcxCMMObjects, dcxCMMFlapInsertions=dcxCMMFlapInsertions, cmtsC3CMMMIB=cmtsC3CMMMIB, dcxCMMResetCm=dcxCMMResetCm, dcxCMMTrap=dcxCMMTrap, dcxCMMCmtsCmStatusTable=dcxCMMCmtsCmStatusTable, dcxCMMUpDisable=dcxCMMUpDisable, dcxCMMCmPrimaryUsSf=dcxCMMCmPrimaryUsSf)
