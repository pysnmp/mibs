#
# PySNMP MIB module SAF-MPMUX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/saf/SAF-MPMUX-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 13:34:03 2024
# On host fv-az883-167 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, IpAddress, Counter64, Unsigned32, enterprises, Bits, ObjectIdentity, MibIdentifier, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, TimeTicks, iso, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "Counter64", "Unsigned32", "enterprises", "Bits", "ObjectIdentity", "MibIdentifier", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "TimeTicks", "iso", "Integer32", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
saf = MibIdentifier((1, 3, 6, 1, 4, 1, 7571))
tehnika = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100))
microwaveRadio = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1))
pointToPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1))
cfm22 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2))
mpmux = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22))
terminal = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1))
baseband = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 2))
radio1 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3))
radio2 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4))
switchCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 5))
modules = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6))
m1 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1))
m2 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2))
m3 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3))
m4 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4))
termProduct = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: termProduct.setStatus('mandatory')
termDescription = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: termDescription.setStatus('mandatory')
termLocation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: termLocation.setStatus('mandatory')
termVersion = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: termVersion.setStatus('mandatory')
termOperation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("booting", 1), ("ok", 2), ("testing", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: termOperation.setStatus('mandatory')
termIduTemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: termIduTemperature.setStatus('mandatory')
termFrameErrors = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: termFrameErrors.setStatus('mandatory')
writeConfig = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 11), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: writeConfig.setStatus('mandatory')
restartCPU = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 12), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restartCPU.setStatus('mandatory')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('mandatory')
termRf1CablePowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 0), ("ok", 1), ("short", 2), ("error", 3), ("power-off", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: termRf1CablePowerStatus.setStatus('mandatory')
termRf2CablePowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 0), ("ok", 1), ("short", 2), ("error", 3), ("power-off", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: termRf2CablePowerStatus.setStatus('mandatory')
power3V3PS1 = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: power3V3PS1.setStatus('mandatory')
power5VPS1 = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: power5VPS1.setStatus('mandatory')
powerM5VPS1 = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerM5VPS1.setStatus('mandatory')
powerODU1V = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerODU1V.setStatus('mandatory')
powerODU1I = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerODU1I.setStatus('mandatory')
powerODU1W = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerODU1W.setStatus('mandatory')
power3V3PS2 = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: power3V3PS2.setStatus('mandatory')
power5VPS2 = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: power5VPS2.setStatus('mandatory')
powerM5VPS2 = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerM5VPS2.setStatus('mandatory')
powerODU2V = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerODU2V.setStatus('mandatory')
powerODU2I = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerODU2I.setStatus('mandatory')
powerODU2W = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerODU2W.setStatus('mandatory')
cpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUsage.setStatus('mandatory')
termBFrameErr = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: termBFrameErr.setStatus('mandatory')
termStatCountTime = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: termStatCountTime.setStatus('mandatory')
termErroredSecond = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: termErroredSecond.setStatus('mandatory')
termSeverelyErroredSecond = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: termSeverelyErroredSecond.setStatus('mandatory')
termSyncLostTime = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: termSyncLostTime.setStatus('mandatory')
termAvailableTime = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: termAvailableTime.setStatus('mandatory')
termUnAvailableTime = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: termUnAvailableTime.setStatus('mandatory')
termBer = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: termBer.setStatus('mandatory')
berAlarm = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berAlarm.setStatus('mandatory')
remoteAlarm = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAlarm.setStatus('mandatory')
systemAlarm = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAlarm.setStatus('mandatory')
inputABCD = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputABCD.setStatus('mandatory')
outputABCD = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputABCD.setStatus('mandatory')
termBerInPwOf10 = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: termBerInPwOf10.setStatus('optional')
outputMaskABCD = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputMaskABCD.setStatus('mandatory')
bbVersion = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbVersion.setStatus('mandatory')
bbOperation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("booting", 1), ("ok", 2), ("testing", 3), ("loopback", 4), ("illegalSpeed", 5), ("error", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbOperation.setStatus('mandatory')
bbLinkCapacity = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbLinkCapacity.setStatus('mandatory')
bbLinkCapacityDescription = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbLinkCapacityDescription.setStatus('mandatory')
bbLoopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("digital", 1), ("analog", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbLoopback.setStatus('mandatory')
bbSyncLostAlarm = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbSyncLostAlarm.setStatus('mandatory')
rf1Operation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("booting", 1), ("ok", 2), ("testing", 3), ("error", 4), ("noDataFromODU", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf1Operation.setStatus('mandatory')
rf1Alarm = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf1Alarm.setStatus('mandatory')
rf1Version = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf1Version.setStatus('mandatory')
rf1Side = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf1Side.setStatus('mandatory')
rf1Channel = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rf1Channel.setStatus('mandatory')
rf1TxFrequency = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf1TxFrequency.setStatus('mandatory')
rf1RxFrequency = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf1RxFrequency.setStatus('mandatory')
rf1TxPower = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rf1TxPower.setStatus('mandatory')
rf1RxState = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("ok", 1), ("error", 2), ("loopback", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf1RxState.setStatus('mandatory')
rf1RxLevel = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf1RxLevel.setStatus('mandatory')
rf1CableAttenuation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf1CableAttenuation.setStatus('mandatory')
rf1TxOut = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("error", 0), ("ok", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf1TxOut.setStatus('mandatory')
rf1TxPLL = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("error", 0), ("ok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf1TxPLL.setStatus('mandatory')
rf1RxPLL = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("error", 0), ("ok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf1RxPLL.setStatus('mandatory')
rf1OduTemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf1OduTemperature.setStatus('mandatory')
rf1OduHumidity = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf1OduHumidity.setStatus('mandatory')
rf1Loopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rf1Loopback.setStatus('mandatory')
rf1RxAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rf1RxAlarmLevel.setStatus('mandatory')
rf1txfstart = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf1txfstart.setStatus('optional')
rf1duplexshift = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf1duplexshift.setStatus('optional')
rf1chstep = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf1chstep.setStatus('optional')
rf1chstart = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf1chstart.setStatus('optional')
rf1chend = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf1chend.setStatus('optional')
rf1txpwmin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf1txpwmin.setStatus('optional')
rf1txpwmax = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf1txpwmax.setStatus('optional')
rf1txpwstep = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 3, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf1txpwstep.setStatus('optional')
rf2Operation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("booting", 1), ("ok", 2), ("testing", 3), ("error", 4), ("noDataFromODU", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf2Operation.setStatus('mandatory')
rf2Alarm = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf2Alarm.setStatus('optional')
rf2Version = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf2Version.setStatus('mandatory')
rf2Side = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf2Side.setStatus('mandatory')
rf2Channel = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rf2Channel.setStatus('mandatory')
rf2TxFrequency = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf2TxFrequency.setStatus('mandatory')
rf2RxFrequency = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf2RxFrequency.setStatus('mandatory')
rf2TxPower = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rf2TxPower.setStatus('mandatory')
rf2RxState = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("ok", 1), ("error", 2), ("loopback", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf2RxState.setStatus('mandatory')
rf2RxLevel = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf2RxLevel.setStatus('mandatory')
rf2CableAttenuation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf2CableAttenuation.setStatus('mandatory')
rf2TxOut = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("error", 0), ("ok", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf2TxOut.setStatus('mandatory')
rf2TxPLL = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("error", 0), ("ok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf2TxPLL.setStatus('mandatory')
rf2RxPLL = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("error", 0), ("ok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf2RxPLL.setStatus('mandatory')
rf2OduTemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf2OduTemperature.setStatus('mandatory')
rf2OduHumidity = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf2OduHumidity.setStatus('mandatory')
rf2Loopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rf2Loopback.setStatus('mandatory')
rf2RxAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rf2RxAlarmLevel.setStatus('mandatory')
rf2txfstart = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf2txfstart.setStatus('optional')
rf2duplexshift = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf2duplexshift.setStatus('optional')
rf2chstep = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf2chstep.setStatus('optional')
rf2chstart = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf2chstart.setStatus('optional')
rf2chend = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf2chend.setStatus('optional')
rf2txpwmin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf2txpwmin.setStatus('optional')
rf2txpwmax = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf2txpwmax.setStatus('optional')
rf2txpwstep = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 4, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rf2txpwstep.setStatus('optional')
activeLink = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("unknown", 0), ("link1", 1), ("link2", 2), ("error", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeLink.setStatus('mandatory')
activeTx = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("link1", 1), ("link2", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeTx.setStatus('mandatory')
preferedLink = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("unknown", 0), ("link1", 1), ("link2", 2), ("error", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: preferedLink.setStatus('optional')
forcedLink = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("off", 0), ("link1", 1), ("link2", 2), ("error", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forcedLink.setStatus('mandatory')
switchMode = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("freqDiv", 1), ("hotStandby", 2), ("independent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchMode.setStatus('mandatory')
odu1RxMax = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: odu1RxMax.setStatus('mandatory')
odu2RxMax = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: odu2RxMax.setStatus('mandatory')
odu1RxMin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: odu1RxMin.setStatus('mandatory')
odu2RxMin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: odu2RxMin.setStatus('mandatory')
rxDelta = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxDelta.setStatus('mandatory')
rxBER = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 5, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxBER.setStatus('mandatory')
switchDelay = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 5, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchDelay.setStatus('mandatory')
switchEnabledForRxBer = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchEnabledForRxBer.setStatus('mandatory')
switchReason = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchReason.setStatus('mandatory')
m1Type = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 30, 33, 37, 43, 100, 227, 74, 78, 241, 242, 255))).clone(namedValues=NamedValues(("error", 0), ("e1x1", 30), ("e1", 33), ("v35", 37), ("bridge", 43), ("eow64", 100), ("e3", 227), ("t1x4", 74), ("e1x4", 78), ("f1bridge", 241), ("f2bridge", 242), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m1Type.setStatus('mandatory')
m1Description = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m1Description.setStatus('mandatory')
m1Version = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m1Version.setStatus('mandatory')
m1Speed = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1Speed.setStatus('mandatory')
m1Operation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("booting", 1), ("ok", 2), ("testing", 3), ("loopback", 4), ("illegalSpeed", 5), ("error", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m1Operation.setStatus('mandatory')
m1Rx = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("ok", 1), ("noSignal", 2), ("noLink", 3), ("rxAIS", 4), ("error", 5), ("noData", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m1Rx.setStatus('mandatory')
m1Tx = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("ok", 1), ("noSignal", 2), ("noLink", 3), ("txAIS", 4), ("error", 5), ("noData", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m1Tx.setStatus('mandatory')
m1Loopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("analog", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1Loopback.setStatus('mandatory')
m1RxInput = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 0), ("coax", 1), ("rj45", 2), ("v35", 3), ("e3", 4), ("db25unbalanced", 5), ("db25balanced", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1RxInput.setStatus('mandatory')
m1TxMode = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("halfDuplex", 1), ("fullDuplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1TxMode.setStatus('mandatory')
m1TxClockSource = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("master", 1), ("slave", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1TxClockSource.setStatus('mandatory')
m1TxClockPhase = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("normal", 1), ("inverse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1TxClockPhase.setStatus('mandatory')
m1DataPolarity = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("normal", 1), ("inverse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1DataPolarity.setStatus('mandatory')
m1ChanCount = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m1ChanCount.setStatus('mandatory')
m2Type = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 30, 33, 37, 43, 100, 227, 74, 78, 241, 242, 255))).clone(namedValues=NamedValues(("error", 0), ("e1x1", 30), ("e1", 33), ("v35", 37), ("bridge", 43), ("eow64", 100), ("e3", 227), ("t1x4", 74), ("e1x4", 78), ("f1bridge", 241), ("f2bridge", 242), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m2Type.setStatus('mandatory')
m2Description = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m2Description.setStatus('mandatory')
m2Version = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m2Version.setStatus('mandatory')
m2Speed = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2Speed.setStatus('mandatory')
m2Operation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("booting", 1), ("ok", 2), ("testing", 3), ("loopback", 4), ("illegalSpeed", 5), ("error", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m2Operation.setStatus('mandatory')
m2Rx = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("ok", 1), ("noSignal", 2), ("noLink", 3), ("rxAIS", 4), ("error", 5), ("noData", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m2Rx.setStatus('mandatory')
m2Tx = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("ok", 1), ("noSignal", 2), ("noLink", 3), ("txAIS", 4), ("error", 5), ("noData", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m2Tx.setStatus('mandatory')
m2Loopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("analog", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2Loopback.setStatus('mandatory')
m2RxInput = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 0), ("coax", 1), ("rj45", 2), ("v35", 3), ("e3", 4), ("db25unbalanced", 5), ("db25balanced", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2RxInput.setStatus('mandatory')
m2TxMode = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("halfDuplex", 1), ("fullDuplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2TxMode.setStatus('mandatory')
m2TxClockSource = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("master", 1), ("slave", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2TxClockSource.setStatus('mandatory')
m2TxClockPhase = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("normal", 1), ("inverse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2TxClockPhase.setStatus('mandatory')
m2DataPolarity = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("normal", 1), ("inverse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2DataPolarity.setStatus('mandatory')
m2ChanCount = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m2ChanCount.setStatus('mandatory')
m3Type = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 30, 33, 37, 43, 100, 227, 74, 78, 241, 242, 255))).clone(namedValues=NamedValues(("error", 0), ("e1x1", 30), ("e1", 33), ("v35", 37), ("bridge", 43), ("eow64", 100), ("e3", 227), ("t1x4", 74), ("e1x4", 78), ("f1bridge", 241), ("f2bridge", 242), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m3Type.setStatus('mandatory')
m3Description = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m3Description.setStatus('mandatory')
m3Version = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m3Version.setStatus('mandatory')
m3Speed = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3Speed.setStatus('mandatory')
m3Operation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("booting", 1), ("ok", 2), ("testing", 3), ("loopback", 4), ("illegalSpeed", 5), ("error", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m3Operation.setStatus('mandatory')
m3Rx = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("ok", 1), ("noSignal", 2), ("noLink", 3), ("rxAIS", 4), ("error", 5), ("noData", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m3Rx.setStatus('mandatory')
m3Tx = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("ok", 1), ("noSignal", 2), ("noLink", 3), ("txAIS", 4), ("error", 5), ("noData", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m3Tx.setStatus('mandatory')
m3Loopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("analog", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3Loopback.setStatus('mandatory')
m3RxInput = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 0), ("coax", 1), ("rj45", 2), ("v35", 3), ("e3", 4), ("db25unbalanced", 5), ("db25balanced", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3RxInput.setStatus('mandatory')
m3TxMode = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("halfDuplex", 1), ("fullDuplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3TxMode.setStatus('mandatory')
m3TxClockSource = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("master", 1), ("slave", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3TxClockSource.setStatus('mandatory')
m3TxClockPhase = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("normal", 1), ("inverse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3TxClockPhase.setStatus('mandatory')
m3DataPolarity = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("normal", 1), ("inverse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3DataPolarity.setStatus('mandatory')
m3ChanCount = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m3ChanCount.setStatus('mandatory')
m4Type = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 30, 33, 37, 43, 100, 227, 74, 78, 241, 242, 255))).clone(namedValues=NamedValues(("error", 0), ("e1x1", 30), ("e1", 33), ("v35", 37), ("bridge", 43), ("eow64", 100), ("e3", 227), ("t1x4", 74), ("e1x4", 78), ("f1bridge", 241), ("f2bridge", 242), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m4Type.setStatus('mandatory')
m4Description = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m4Description.setStatus('mandatory')
m4Version = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m4Version.setStatus('mandatory')
m4Speed = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4Speed.setStatus('mandatory')
m4Operation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("booting", 1), ("ok", 2), ("testing", 3), ("loopback", 4), ("illegalSpeed", 5), ("error", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m4Operation.setStatus('mandatory')
m4Rx = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("ok", 1), ("noSignal", 2), ("noLink", 3), ("rxAIS", 4), ("error", 5), ("noData", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m4Rx.setStatus('mandatory')
m4Tx = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("ok", 1), ("noSignal", 2), ("noLink", 3), ("txAIS", 4), ("error", 5), ("noData", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m4Tx.setStatus('mandatory')
m4Loopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("analog", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4Loopback.setStatus('mandatory')
m4RxInput = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 0), ("coax", 1), ("rj45", 2), ("v35", 3), ("e3", 4), ("db25unbalanced", 5), ("db25balanced", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4RxInput.setStatus('mandatory')
m4TxMode = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("halfDuplex", 1), ("fullDuplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4TxMode.setStatus('mandatory')
m4TxClockSource = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("master", 1), ("slave", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4TxClockSource.setStatus('mandatory')
m4TxClockPhase = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("normal", 1), ("inverse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4TxClockPhase.setStatus('mandatory')
m4DataPolarity = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("normal", 1), ("inverse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4DataPolarity.setStatus('mandatory')
m4ChanCount = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m4ChanCount.setStatus('mandatory')
m1port1 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 21))
m1port2 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 22))
m1port3 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 23))
m1port4 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 24))
m2port1 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 21))
m2port2 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 22))
m2port3 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 23))
m2port4 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 24))
m3port1 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 21))
m3port2 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 22))
m3port3 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 23))
m3port4 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 24))
m4port1 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 21))
m4port2 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 22))
m4port3 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 23))
m4port4 = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 24))
m1p1statbin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m1p1statbin.setStatus('mandatory')
m1p1connection = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 21, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("eth10fdx", 2), ("eth10hdx", 3), ("eth100fdx", 4), ("eth100hdx", 5), ("ds1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1p1connection.setStatus('mandatory')
m1p1flowcntrl = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 21, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1p1flowcntrl.setStatus('mandatory')
m1p1priority = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 21, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1p1priority.setStatus('mandatory')
m1p1loopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 21, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6))).clone(namedValues=NamedValues(("off", 0), ("analog", 1), ("remote", 2), ("digital", 4), ("remoteANDdigital", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1p1loopback.setStatus('mandatory')
m1p2statbin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 22, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m1p2statbin.setStatus('mandatory')
m1p2connection = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 22, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("eth10fdx", 2), ("eth10hdx", 3), ("eth100fdx", 4), ("eth100hdx", 5), ("ds1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1p2connection.setStatus('mandatory')
m1p2flowcntrl = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 22, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1p2flowcntrl.setStatus('mandatory')
m1p2priority = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 22, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1p2priority.setStatus('mandatory')
m1p2loopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 22, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6))).clone(namedValues=NamedValues(("off", 0), ("analog", 1), ("remote", 2), ("digital", 4), ("remoteANDdigital", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1p2loopback.setStatus('mandatory')
m1p3statbin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m1p3statbin.setStatus('mandatory')
m1p3connection = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 23, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("eth10fdx", 2), ("eth10hdx", 3), ("eth100fdx", 4), ("eth100hdx", 5), ("ds1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1p3connection.setStatus('mandatory')
m1p3flowcntrl = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 23, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1p3flowcntrl.setStatus('mandatory')
m1p3priority = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 23, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1p3priority.setStatus('mandatory')
m1p3loopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 23, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6))).clone(namedValues=NamedValues(("off", 0), ("analog", 1), ("remote", 2), ("digital", 4), ("remoteANDdigital", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1p3loopback.setStatus('mandatory')
m1p4statbin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 24, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m1p4statbin.setStatus('mandatory')
m1p4connection = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 24, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("eth10fdx", 2), ("eth10hdx", 3), ("eth100fdx", 4), ("eth100hdx", 5), ("ds1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1p4connection.setStatus('mandatory')
m1p4flowcntrl = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1p4flowcntrl.setStatus('mandatory')
m1p4priority = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 24, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1p4priority.setStatus('mandatory')
m1p4loopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 1, 24, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6))).clone(namedValues=NamedValues(("off", 0), ("analog", 1), ("remote", 2), ("digital", 4), ("remoteANDdigital", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m1p4loopback.setStatus('mandatory')
m2p1statbin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m2p1statbin.setStatus('mandatory')
m2p1connection = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 21, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("eth10fdx", 2), ("eth10hdx", 3), ("eth100fdx", 4), ("eth100hdx", 5), ("ds1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2p1connection.setStatus('mandatory')
m2p1flowcntrl = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 21, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2p1flowcntrl.setStatus('mandatory')
m2p1priority = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 21, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2p1priority.setStatus('mandatory')
m2p1loopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 21, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6))).clone(namedValues=NamedValues(("off", 0), ("analog", 1), ("remote", 2), ("digital", 4), ("remoteANDdigital", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2p1loopback.setStatus('mandatory')
m2p2statbin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 22, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m2p2statbin.setStatus('mandatory')
m2p2connection = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 22, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("eth10fdx", 2), ("eth10hdx", 3), ("eth100fdx", 4), ("eth100hdx", 5), ("ds1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2p2connection.setStatus('mandatory')
m2p2flowcntrl = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 22, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2p2flowcntrl.setStatus('mandatory')
m2p2priority = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 22, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2p2priority.setStatus('mandatory')
m2p2loopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 22, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6))).clone(namedValues=NamedValues(("off", 0), ("analog", 1), ("remote", 2), ("digital", 4), ("remoteANDdigital", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2p2loopback.setStatus('mandatory')
m2p3statbin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m2p3statbin.setStatus('mandatory')
m2p3connection = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 23, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("eth10fdx", 2), ("eth10hdx", 3), ("eth100fdx", 4), ("eth100hdx", 5), ("ds1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2p3connection.setStatus('mandatory')
m2p3flowcntrl = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 23, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2p3flowcntrl.setStatus('mandatory')
m2p3priority = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 23, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2p3priority.setStatus('mandatory')
m2p3loopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 23, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6))).clone(namedValues=NamedValues(("off", 0), ("analog", 1), ("remote", 2), ("digital", 4), ("remoteANDdigital", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2p3loopback.setStatus('mandatory')
m2p4statbin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 24, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m2p4statbin.setStatus('mandatory')
m2p4connection = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 24, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("eth10fdx", 2), ("eth10hdx", 3), ("eth100fdx", 4), ("eth100hdx", 5), ("ds1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2p4connection.setStatus('mandatory')
m2p4flowcntrl = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2p4flowcntrl.setStatus('mandatory')
m2p4priority = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 24, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2p4priority.setStatus('mandatory')
m2p4loopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 2, 24, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6))).clone(namedValues=NamedValues(("off", 0), ("analog", 1), ("remote", 2), ("digital", 4), ("remoteANDdigital", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m2p4loopback.setStatus('mandatory')
m3p1statbin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m3p1statbin.setStatus('mandatory')
m3p1connection = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 21, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("eth10fdx", 2), ("eth10hdx", 3), ("eth100fdx", 4), ("eth100hdx", 5), ("ds1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3p1connection.setStatus('mandatory')
m3p1flowcntrl = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 21, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3p1flowcntrl.setStatus('mandatory')
m3p1priority = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 21, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3p1priority.setStatus('mandatory')
m3p1loopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 21, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6))).clone(namedValues=NamedValues(("off", 0), ("analog", 1), ("remote", 2), ("digital", 4), ("remoteANDdigital", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3p1loopback.setStatus('mandatory')
m3p2statbin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 22, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m3p2statbin.setStatus('mandatory')
m3p2connection = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 22, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("eth10fdx", 2), ("eth10hdx", 3), ("eth100fdx", 4), ("eth100hdx", 5), ("ds1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3p2connection.setStatus('mandatory')
m3p2flowcntrl = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 22, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3p2flowcntrl.setStatus('mandatory')
m3p2priority = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 22, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3p2priority.setStatus('mandatory')
m3p2loopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 22, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6))).clone(namedValues=NamedValues(("off", 0), ("analog", 1), ("remote", 2), ("digital", 4), ("remoteANDdigital", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3p2loopback.setStatus('mandatory')
m3p3statbin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m3p3statbin.setStatus('mandatory')
m3p3connection = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 23, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("eth10fdx", 2), ("eth10hdx", 3), ("eth100fdx", 4), ("eth100hdx", 5), ("ds1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3p3connection.setStatus('mandatory')
m3p3flowcntrl = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 23, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3p3flowcntrl.setStatus('mandatory')
m3p3priority = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 23, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3p3priority.setStatus('mandatory')
m3p3loopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 23, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6))).clone(namedValues=NamedValues(("off", 0), ("analog", 1), ("remote", 2), ("digital", 4), ("remoteANDdigital", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3p3loopback.setStatus('mandatory')
m3p4statbin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 24, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m3p4statbin.setStatus('mandatory')
m3p4connection = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 24, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("eth10fdx", 2), ("eth10hdx", 3), ("eth100fdx", 4), ("eth100hdx", 5), ("ds1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3p4connection.setStatus('mandatory')
m3p4flowcntrl = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3p4flowcntrl.setStatus('mandatory')
m3p4priority = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 24, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3p4priority.setStatus('mandatory')
m3p4loopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 3, 24, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6))).clone(namedValues=NamedValues(("off", 0), ("analog", 1), ("remote", 2), ("digital", 4), ("remoteANDdigital", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m3p4loopback.setStatus('mandatory')
m4p1statbin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m4p1statbin.setStatus('mandatory')
m4p1connection = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 21, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("eth10fdx", 2), ("eth10hdx", 3), ("eth100fdx", 4), ("eth100hdx", 5), ("ds1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4p1connection.setStatus('mandatory')
m4p1flowcntrl = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 21, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4p1flowcntrl.setStatus('mandatory')
m4p1priority = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 21, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4p1priority.setStatus('mandatory')
m4p1loopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 21, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6))).clone(namedValues=NamedValues(("off", 0), ("analog", 1), ("remote", 2), ("digital", 4), ("remoteANDdigital", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4p1loopback.setStatus('mandatory')
m4p2statbin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 22, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m4p2statbin.setStatus('mandatory')
m4p2connection = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 22, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("eth10fdx", 2), ("eth10hdx", 3), ("eth100fdx", 4), ("eth100hdx", 5), ("ds1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4p2connection.setStatus('mandatory')
m4p2flowcntrl = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 22, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4p2flowcntrl.setStatus('mandatory')
m4p2priority = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 22, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4p2priority.setStatus('mandatory')
m4p2loopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 22, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6))).clone(namedValues=NamedValues(("off", 0), ("analog", 1), ("remote", 2), ("digital", 4), ("remoteANDdigital", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4p2loopback.setStatus('mandatory')
m4p3statbin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m4p3statbin.setStatus('mandatory')
m4p3connection = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 23, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("eth10fdx", 2), ("eth10hdx", 3), ("eth100fdx", 4), ("eth100hdx", 5), ("ds1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4p3connection.setStatus('mandatory')
m4p3flowcntrl = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 23, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4p3flowcntrl.setStatus('mandatory')
m4p3priority = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 23, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4p3priority.setStatus('mandatory')
m4p3loopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 23, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6))).clone(namedValues=NamedValues(("off", 0), ("analog", 1), ("remote", 2), ("digital", 4), ("remoteANDdigital", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4p3loopback.setStatus('mandatory')
m4p4statbin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 24, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m4p4statbin.setStatus('mandatory')
m4p4connection = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 24, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("eth10fdx", 2), ("eth10hdx", 3), ("eth100fdx", 4), ("eth100hdx", 5), ("ds1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4p4connection.setStatus('mandatory')
m4p4flowcntrl = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4p4flowcntrl.setStatus('mandatory')
m4p4priority = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 24, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4p4priority.setStatus('mandatory')
m4p4loopback = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22, 6, 4, 24, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6))).clone(namedValues=NamedValues(("off", 0), ("analog", 1), ("remote", 2), ("digital", 4), ("remoteANDdigital", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m4p4loopback.setStatus('mandatory')
alarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22) + (0,0)).setObjects(("SAF-MPMUX-MIB", "rfAlarm"), ("SAF-MPMUX-MIB", "bbSyncLostAlarm"), ("SAF-MPMUX-MIB", "berAlarm"), ("SAF-MPMUX-MIB", "remoteAlarm"), ("SAF-MPMUX-MIB", "systemAlarm"))
alinkTrap = NotificationType((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 2, 22) + (0,1)).setObjects(("SAF-MPMUX-MIB", "activeLink"))
mibBuilder.exportSymbols("SAF-MPMUX-MIB", m2TxMode=m2TxMode, m4p4loopback=m4p4loopback, m1p4connection=m1p4connection, rf2TxPower=rf2TxPower, termOperation=termOperation, m4ChanCount=m4ChanCount, rxDelta=rxDelta, cfm22=cfm22, m2p2connection=m2p2connection, terminal=terminal, m2Tx=m2Tx, rf1RxState=rf1RxState, saf=saf, rf1txpwmin=rf1txpwmin, rf2TxFrequency=rf2TxFrequency, m2p1flowcntrl=m2p1flowcntrl, m4p1priority=m4p1priority, m2port2=m2port2, m4=m4, bbOperation=bbOperation, m4Rx=m4Rx, rf1CableAttenuation=rf1CableAttenuation, m2p3connection=m2p3connection, m3p3connection=m3p3connection, m3p3flowcntrl=m3p3flowcntrl, m3Rx=m3Rx, termBer=termBer, powerODU1V=powerODU1V, rf2OduHumidity=rf2OduHumidity, rf2chend=rf2chend, m1p1statbin=m1p1statbin, m1p1connection=m1p1connection, rf1OduTemperature=rf1OduTemperature, rf1chstep=rf1chstep, m3p1connection=m3p1connection, powerM5VPS1=powerM5VPS1, bbVersion=bbVersion, tehnika=tehnika, m1p3connection=m1p3connection, m4RxInput=m4RxInput, rf2Channel=rf2Channel, switchMode=switchMode, m3Type=m3Type, odu1RxMin=odu1RxMin, pointToPoint=pointToPoint, m1Rx=m1Rx, m2Loopback=m2Loopback, radio1=radio1, m1Speed=m1Speed, rf1Version=rf1Version, m3TxMode=m3TxMode, termBFrameErr=termBFrameErr, m3Speed=m3Speed, rf2txpwstep=rf2txpwstep, termRf2CablePowerStatus=termRf2CablePowerStatus, m4DataPolarity=m4DataPolarity, serialNumber=serialNumber, m1p2priority=m1p2priority, m2Description=m2Description, switchReason=switchReason, m1p1priority=m1p1priority, outputABCD=outputABCD, m4TxMode=m4TxMode, rf1txpwmax=rf1txpwmax, remoteAlarm=remoteAlarm, m4Version=m4Version, m1p4loopback=m1p4loopback, bbLinkCapacity=bbLinkCapacity, m2DataPolarity=m2DataPolarity, m4p3flowcntrl=m4p3flowcntrl, m3p4flowcntrl=m3p4flowcntrl, bbLinkCapacityDescription=bbLinkCapacityDescription, rf1txpwstep=rf1txpwstep, rf2Version=rf2Version, m4Type=m4Type, radio2=radio2, modules=modules, m3Description=m3Description, powerM5VPS2=powerM5VPS2, m3Tx=m3Tx, m1RxInput=m1RxInput, m1p2flowcntrl=m1p2flowcntrl, m3p4priority=m3p4priority, m3p3statbin=m3p3statbin, m3Version=m3Version, m4Tx=m4Tx, m4p1flowcntrl=m4p1flowcntrl, odu2RxMax=odu2RxMax, m2p1priority=m2p1priority, rf1Operation=rf1Operation, m3p2connection=m3p2connection, m3p3priority=m3p3priority, writeConfig=writeConfig, m2port1=m2port1, m2p2priority=m2p2priority, m4p3loopback=m4p3loopback, m2p4connection=m2p4connection, m3p2loopback=m3p2loopback, m2p4flowcntrl=m2p4flowcntrl, m4p2loopback=m4p2loopback, alarmTrap=alarmTrap, m1p3flowcntrl=m1p3flowcntrl, m1Tx=m1Tx, rf1RxLevel=rf1RxLevel, m4Operation=m4Operation, m2p1connection=m2p1connection, termBerInPwOf10=termBerInPwOf10, m2TxClockSource=m2TxClockSource, rf2txpwmax=rf2txpwmax, m2Operation=m2Operation, m4p2priority=m4p2priority, m3p4statbin=m3p4statbin, m3p4connection=m3p4connection, termRf1CablePowerStatus=termRf1CablePowerStatus, rf1Channel=rf1Channel, m2=m2, power3V3PS2=power3V3PS2, rf1TxPower=rf1TxPower, m3DataPolarity=m3DataPolarity, rf1chend=rf1chend, microwaveRadio=microwaveRadio, rf2Loopback=rf2Loopback, termVersion=termVersion, m4port1=m4port1, m1p4statbin=m1p4statbin, m1=m1, switchCtrl=switchCtrl, m4p2statbin=m4p2statbin, m1port4=m1port4, termFrameErrors=termFrameErrors, m2Speed=m2Speed, m2p3statbin=m2p3statbin, m4p4connection=m4p4connection, termAvailableTime=termAvailableTime, rf1TxFrequency=rf1TxFrequency, m2p4loopback=m2p4loopback, rf2OduTemperature=rf2OduTemperature, cpuUsage=cpuUsage, m2p3flowcntrl=m2p3flowcntrl, switchDelay=switchDelay, rf1TxOut=rf1TxOut, powerODU1I=powerODU1I, powerODU2V=powerODU2V, bbLoopback=bbLoopback, m1p2loopback=m1p2loopback, m1p3priority=m1p3priority, m3Operation=m3Operation, rf1duplexshift=rf1duplexshift, m3TxClockSource=m3TxClockSource, termSyncLostTime=termSyncLostTime, m3p1loopback=m3p1loopback, m1TxMode=m1TxMode, termLocation=termLocation, termIduTemperature=termIduTemperature, rf2chstart=rf2chstart, m1Loopback=m1Loopback, m3p1statbin=m3p1statbin, m1p2connection=m1p2connection, m4p2flowcntrl=m4p2flowcntrl, m4TxClockSource=m4TxClockSource, rf1Alarm=rf1Alarm, rxBER=rxBER, m2p4statbin=m2p4statbin, m4p1statbin=m4p1statbin, m1Description=m1Description, bbSyncLostAlarm=bbSyncLostAlarm, m1ChanCount=m1ChanCount, m3TxClockPhase=m3TxClockPhase, m4p4statbin=m4p4statbin, m4port3=m4port3, m2Version=m2Version, rf1OduHumidity=rf1OduHumidity, inputABCD=inputABCD, m3p3loopback=m3p3loopback, powerODU1W=powerODU1W, rf2RxAlarmLevel=rf2RxAlarmLevel, m4p2connection=m4p2connection, m4port4=m4port4, m4p4flowcntrl=m4p4flowcntrl, rf1TxPLL=rf1TxPLL, power3V3PS1=power3V3PS1, preferedLink=preferedLink, m3p2priority=m3p2priority, rf2RxLevel=rf2RxLevel, m2ChanCount=m2ChanCount, termProduct=termProduct, m3ChanCount=m3ChanCount, rf2txfstart=rf2txfstart, m1p4priority=m1p4priority, rf2RxFrequency=rf2RxFrequency, m3=m3, m1Type=m1Type, m1p3statbin=m1p3statbin, m2port4=m2port4, m4TxClockPhase=m4TxClockPhase, restartCPU=restartCPU, m2p2loopback=m2p2loopback, rf1RxAlarmLevel=rf1RxAlarmLevel, systemAlarm=systemAlarm, m1port2=m1port2, rf1Loopback=rf1Loopback, rf2Side=rf2Side, rf2CableAttenuation=rf2CableAttenuation, m2p2flowcntrl=m2p2flowcntrl, m2p3priority=m2p3priority, power5VPS1=power5VPS1, power5VPS2=power5VPS2, m2p1statbin=m2p1statbin, forcedLink=forcedLink, m3Loopback=m3Loopback, m3port1=m3port1, m3port2=m3port2, m2p4priority=m2p4priority, termErroredSecond=termErroredSecond, m3p2flowcntrl=m3p2flowcntrl, rf2TxPLL=rf2TxPLL, m2p3loopback=m2p3loopback, m4Description=m4Description, m3port4=m3port4, termUnAvailableTime=termUnAvailableTime, m1TxClockPhase=m1TxClockPhase, m2port3=m2port3, m2Rx=m2Rx, m4port2=m4port2, m4p1connection=m4p1connection, switchEnabledForRxBer=switchEnabledForRxBer, rf2Operation=rf2Operation, activeTx=activeTx, m1port3=m1port3, m2p1loopback=m2p1loopback, rf1RxFrequency=rf1RxFrequency, m1DataPolarity=m1DataPolarity, m1TxClockSource=m1TxClockSource, m4p3connection=m4p3connection, m3p1flowcntrl=m3p1flowcntrl, termStatCountTime=termStatCountTime, m3RxInput=m3RxInput, m2Type=m2Type, termDescription=termDescription, m4p1loopback=m4p1loopback, m4Loopback=m4Loopback, m2RxInput=m2RxInput, rf2Alarm=rf2Alarm, m1p4flowcntrl=m1p4flowcntrl, rf1RxPLL=rf1RxPLL, rf1txfstart=rf1txfstart, powerODU2W=powerODU2W, m3p2statbin=m3p2statbin, m4p3statbin=m4p3statbin, powerODU2I=powerODU2I, m1Operation=m1Operation, m4p3priority=m4p3priority, alinkTrap=alinkTrap, rf2RxPLL=rf2RxPLL)
mibBuilder.exportSymbols("SAF-MPMUX-MIB", odu1RxMax=odu1RxMax, rf1Side=rf1Side, rf2txpwmin=rf2txpwmin, rf2duplexshift=rf2duplexshift, m4p4priority=m4p4priority, rf1chstart=rf1chstart, rf2chstep=rf2chstep, m3port3=m3port3, m1p2statbin=m1p2statbin, m3p4loopback=m3p4loopback, m2TxClockPhase=m2TxClockPhase, berAlarm=berAlarm, m1port1=m1port1, mpmux=mpmux, outputMaskABCD=outputMaskABCD, odu2RxMin=odu2RxMin, m1p3loopback=m1p3loopback, m1p1loopback=m1p1loopback, termSeverelyErroredSecond=termSeverelyErroredSecond, m3p1priority=m3p1priority, m4Speed=m4Speed, m1Version=m1Version, m1p1flowcntrl=m1p1flowcntrl, rf2TxOut=rf2TxOut, m2p2statbin=m2p2statbin, baseband=baseband, activeLink=activeLink, rf2RxState=rf2RxState)
