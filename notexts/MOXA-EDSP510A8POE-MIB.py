#
# PySNMP MIB module MOXA-EDSP510A8POE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/moxa/MOXA-EDSP510A8POE-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 08:21:36 2024
# On host fv-az530-683 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, MibIdentifier, enterprises, Bits, TimeTicks, iso, Integer32, NotificationType, ObjectIdentity, IpAddress, Counter64, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "MibIdentifier", "enterprises", "Bits", "TimeTicks", "iso", "Integer32", "NotificationType", "ObjectIdentity", "IpAddress", "Counter64", "Gauge32")
DateAndTime, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "MacAddress", "TextualConvention")
moxa = MibIdentifier((1, 3, 6, 1, 4, 1, 8691))
industrialEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7))
edsp510a8poe = ModuleIdentity((1, 3, 6, 1, 4, 1, 8691, 7, 86))
edsp510a8poe.setRevisions(('2017-01-16 00:00', '2015-06-30 00:00', '2013-01-08 00:00', '2012-12-19 00:00',))
if mibBuilder.loadTexts: edsp510a8poe.setLastUpdated('201701160000Z')
if mibBuilder.loadTexts: edsp510a8poe.setOrganization('Moxa Inc.')
mibNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 0))
swMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1))
swTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 2))
class PortList(TextualConvention, OctetString):
    status = 'current'

numberOfPorts = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfPorts.setStatus('current')
switchModel = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchModel.setStatus('current')
firmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
enableWebConfig = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("httpOrHttps", 1), ("httpsOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableWebConfig.setStatus('current')
consoleLoginMode = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("menu", 0), ("cli", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleLoginMode.setStatus('current')
enableTelnetConsole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableTelnetConsole.setStatus('current')
lineSwapRecovery = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineSwapRecovery.setStatus('current')
webTimeout = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webTimeout.setStatus('current')
ageTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ageTime.setStatus('current')
networkSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8))
switchIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIpAddr.setStatus('current')
switchIpMask = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIpMask.setStatus('current')
defaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultGateway.setStatus('current')
enableAutoIpConfig = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enableDHCP", 1), ("enableBOOTP", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableAutoIpConfig.setStatus('current')
dnsServer1IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServer1IpAddr.setStatus('current')
snmpTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapCommunity.setStatus('current')
trapServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerAddr.setStatus('current')
dnsServer2IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServer2IpAddr.setStatus('current')
snmpReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadCommunity.setStatus('current')
snmpTrap2Community = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrap2Community.setStatus('current')
trap2ServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap2ServerAddr.setStatus('current')
snmpInformEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpInformEnable.setStatus('current')
snmpInformRetries = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpInformRetries.setStatus('current')
snmpInformTimeout = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpInformTimeout.setStatus('current')
dhcpRetryPeriods = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRetryPeriods.setStatus('current')
dhcpRetryTimes = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 8, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRetryTimes.setStatus('current')
portSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 9))
portTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 9, 1), )
if mibBuilder.loadTexts: portTable.setStatus('current')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 9, 1, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('current')
portDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDesc.setStatus('current')
portEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEnable.setStatus('current')
portSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 0), ("speed100M-Full", 1), ("speed100M-Half", 2), ("speed10M-Full", 3), ("speed10M-Half", 4), ("speed1000M-Full", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSpeed.setStatus('current')
portMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("na", 0), ("auto", 1), ("mdi", 2), ("mdiX", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMDI.setStatus('current')
portFDXFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFDXFlowCtrl.setStatus('current')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 9, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portName.setStatus('current')
monitor = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10))
power1InputStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-present", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: power1InputStatus.setStatus('current')
power2InputStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-present", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: power2InputStatus.setStatus('current')
monitorPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 3), )
if mibBuilder.loadTexts: monitorPortTable.setStatus('current')
monitorPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 3, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: monitorPortEntry.setStatus('current')
monitorLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("disable", -1), ("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorLinkStatus.setStatus('current')
monitorSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 4, 3, 2, 1, 0, -1))).clone(namedValues=NamedValues(("speed1000M-Full", 5), ("speed1000M-Half", 4), ("speed100M-Full", 3), ("speed100M-Half", 2), ("speed10M-Full", 1), ("speed10M-Half", 0), ("na", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorSpeed.setStatus('current')
monitorAutoMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, -1))).clone(namedValues=NamedValues(("mdiX", 1), ("mdi", 0), ("na", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorAutoMDI.setStatus('current')
monitorTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorTraffic.setStatus('current')
monitorFDXFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFDXFlowCtrl.setStatus('current')
monitorTxTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorTxTraffic.setStatus('current')
monitorRxTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRxTraffic.setStatus('current')
monitorDiTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 4), )
if mibBuilder.loadTexts: monitorDiTable.setStatus('current')
monitorDiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 4, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "diIndex"))
if mibBuilder.loadTexts: monitorDiEntry.setStatus('current')
diIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diIndex.setStatus('current')
diInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diInputStatus.setStatus('current')
monitorSFPTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 7), )
if mibBuilder.loadTexts: monitorSFPTable.setStatus('current')
monitorSFPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 7, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: monitorSFPEntry.setStatus('current')
sfpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpPort.setStatus('current')
sfpModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpModelName.setStatus('current')
sfpTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTemperature.setStatus('current')
sfpVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVoltage.setStatus('current')
sfpTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTxPower.setStatus('current')
sfpRXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 10, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpRXPower.setStatus('current')
emailWarning = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11))
emailService = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 1))
emailWarningMailServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningMailServer.setStatus('current')
emailWarningSMTPPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningSMTPPort.setStatus('current')
emailWarningFirstEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningFirstEmailAddr.setStatus('current')
emailWarningSecondEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningSecondEmailAddr.setStatus('current')
emailWarningThirdEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningThirdEmailAddr.setStatus('current')
emailWarningFourthEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningFourthEmailAddr.setStatus('current')
emailWarningEventType = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 2))
emailWarningEventServerColdStart = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventServerColdStart.setStatus('current')
emailWarningEventServerWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventServerWarmStart.setStatus('current')
emailWarningEventConfigChange = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventConfigChange.setStatus('current')
emailWarningEventPowerOn2Off = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventPowerOn2Off.setStatus('current')
emailWarningEventPowerOff2On = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventPowerOff2On.setStatus('current')
emailWarningEventAuthFail = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventAuthFail.setStatus('current')
emailWarningEventTopologyChanged = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventTopologyChanged.setStatus('current')
emailWarningEventPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 3), )
if mibBuilder.loadTexts: emailWarningEventPortTable.setStatus('current')
emailWarningEventPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 3, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: emailWarningEventPortEntry.setStatus('current')
emailWarningEventPortLinkOn = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventPortLinkOn.setStatus('current')
emailWarningEventPortLinkOff = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventPortLinkOff.setStatus('current')
emailWarningEventPortTrafficOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventPortTrafficOverload.setStatus('current')
emailWarningEventPortRxTrafficThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventPortRxTrafficThreshold.setStatus('current')
emailWarningEventPortTrafficDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventPortTrafficDuration.setStatus('current')
emailWarningEventDiTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 4), )
if mibBuilder.loadTexts: emailWarningEventDiTable.setStatus('current')
emailWarningEventDiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 4, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "diIndex"))
if mibBuilder.loadTexts: emailWarningEventDiEntry.setStatus('current')
emailWarningEventDiInputOn2Off = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventDiInputOn2Off.setStatus('current')
emailWarningEventDiInputOff2On = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningEventDiInputOff2On.setStatus('current')
setDeviceIp = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 12))
setDevIpTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 12, 1), )
if mibBuilder.loadTexts: setDevIpTable.setStatus('current')
setDevIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 12, 1, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "setDevIpIndex"))
if mibBuilder.loadTexts: setDevIpEntry.setStatus('current')
setDevIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDevIpIndex.setStatus('current')
setDevIpCurrentIpofDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 12, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDevIpCurrentIpofDevice.setStatus('current')
setDevIpPresentBy = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("no", 0), ("dhcpClient", 1), ("rarp", 2), ("bootp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDevIpPresentBy.setStatus('current')
setDevIpDedicatedIp = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 12, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDevIpDedicatedIp.setStatus('current')
mirroring = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 13))
targetPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: targetPort.setStatus('current')
mirroringPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 13, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirroringPort.setStatus('current')
monitorDirection = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("inputDataStream", 0), ("outputDataStream", 1), ("biDirectional", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorDirection.setStatus('current')
portTrunking = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 14))
trunkSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 14, 1), )
if mibBuilder.loadTexts: trunkSettingTable.setStatus('current')
trunkSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 14, 1, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "trunkSettingIndex"))
if mibBuilder.loadTexts: trunkSettingEntry.setStatus('current')
trunkSettingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkSettingIndex.setStatus('current')
trunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkType.setStatus('current')
trunkMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 14, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkMemberPorts.setStatus('current')
trunkTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 14, 2), )
if mibBuilder.loadTexts: trunkTable.setStatus('current')
trunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 14, 2, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "trunkIndex"), (0, "MOXA-EDSP510A8POE-MIB", "trunkPort"))
if mibBuilder.loadTexts: trunkEntry.setStatus('current')
trunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkIndex.setStatus('current')
trunkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkPort.setStatus('current')
trunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("success", 1), ("fail", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkStatus.setStatus('current')
commRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16))
protocolOfRedundancySetup = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("spanningTree", 1), ("turboRing", 2), ("turboRingV2", 3), ("turboChain", 4), ("mstp", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocolOfRedundancySetup.setStatus('current')
turboRing = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2))
turboRingMaster = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingMaster.setStatus('current')
turboRingMasterSetup = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingMasterSetup.setStatus('current')
turboRingPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 3), )
if mibBuilder.loadTexts: turboRingPortTable.setStatus('current')
turboRingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 3, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "turboRingPortIndex"))
if mibBuilder.loadTexts: turboRingPortEntry.setStatus('current')
turboRingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingPortIndex.setStatus('current')
turboRingPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("portDisabled", 0), ("notTurboRingPort", 1), ("linkDown", 2), ("blocked", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingPortStatus.setStatus('current')
turboRingPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingPortDesignatedBridge.setStatus('current')
turboRingPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingPortDesignatedPort.setStatus('current')
turboRingDesignatedMaster = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingDesignatedMaster.setStatus('current')
turboRingRdntPort1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingRdntPort1.setStatus('current')
turboRingRdntPort2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingRdntPort2.setStatus('current')
turboRingEnableCoupling = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingEnableCoupling.setStatus('current')
turboRingCouplingPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingCouplingPort.setStatus('current')
turboRingCouplingPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5))).clone(namedValues=NamedValues(("portDisabled", 0), ("notCouplingPort", 1), ("linkDown", 2), ("blocked", 3), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingCouplingPortStatus.setStatus('current')
turboRingControlPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingControlPort.setStatus('current')
turboRingControlPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7))).clone(namedValues=NamedValues(("portDisabled", 0), ("notControlPort", 1), ("linkDown", 2), ("blocked", 3), ("forwarding", 5), ("inactive", 6), ("active", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingControlPortStatus.setStatus('current')
turboRingBrokenStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("normal", 1), ("broken", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingBrokenStatus.setStatus('current')
spanningTree = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3))
spanningTreeRoot = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreeRoot.setStatus('current')
spanningTreeBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4096, 8192, 12288, 16384, 20480, 24576, 28672, 32768, 36864, 40960, 45056, 49152, 53248, 57344, 61440))).clone(namedValues=NamedValues(("priority0", 0), ("priority4096", 4096), ("priority8192", 8192), ("priority12288", 12288), ("priority16384", 16384), ("priority20480", 20480), ("priority24576", 24576), ("priority28672", 28672), ("priority32768", 32768), ("priority36864", 36864), ("priority40960", 40960), ("priority45056", 45056), ("priority49152", 49152), ("priority53248", 53248), ("priority57344", 57344), ("priority61440", 61440)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreeBridgePriority.setStatus('current')
spanningTreeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreeHelloTime.setStatus('current')
spanningTreeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreeMaxAge.setStatus('current')
spanningTreeForwardingDelay = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreeForwardingDelay.setStatus('current')
spanningTreeTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 6), )
if mibBuilder.loadTexts: spanningTreeTable.setStatus('current')
spanningTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 6, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "spanningTreeIndex"))
if mibBuilder.loadTexts: spanningTreeEntry.setStatus('current')
spanningTreeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreeIndex.setStatus('current')
enableSpanningTree = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableSpanningTree.setStatus('current')
spanningTreePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240))).clone(namedValues=NamedValues(("priority0", 0), ("priority16", 16), ("priority32", 32), ("priority48", 48), ("priority64", 64), ("priority80", 80), ("priority96", 96), ("priority112", 112), ("priority128", 128), ("priority144", 144), ("priority160", 160), ("priority176", 176), ("priority192", 192), ("priority208", 208), ("priority224", 224), ("priority240", 240)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreePortPriority.setStatus('current')
spanningTreePortCost = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreePortCost.setStatus('current')
spanningTreePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("portDisabled", 0), ("notSpanningTreePort", 1), ("linkDown", 2), ("blocked", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreePortStatus.setStatus('current')
spanningTreePortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("forceEdge", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreePortEdge.setStatus('current')
activeProtocolOfRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("spanningTree", 1), ("turboRing", 2), ("turboRingV2", 3), ("turboChain", 4), ("mstp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeProtocolOfRedundancy.setStatus('current')
turboRingV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5))
turboRingV2Ring1 = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 1))
ringIndexRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringIndexRing1.setStatus('current')
ringEnableRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringEnableRing1.setStatus('current')
masterSetupRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: masterSetupRing1.setStatus('current')
masterStatusRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: masterStatusRing1.setStatus('current')
designatedMasterRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: designatedMasterRing1.setStatus('current')
rdnt1stPortRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnt1stPortRing1.setStatus('current')
rdnt1stPortStatusRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnt1stPortStatusRing1.setStatus('current')
rdnt2ndPortRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnt2ndPortRing1.setStatus('current')
rdnt2ndPortStatusRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnt2ndPortStatusRing1.setStatus('current')
brokenStatusRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("normal", 1), ("broken", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brokenStatusRing1.setStatus('current')
turboRingV2Ring2 = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 2))
ringIndexRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringIndexRing2.setStatus('current')
ringEnableRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringEnableRing2.setStatus('current')
masterSetupRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: masterSetupRing2.setStatus('current')
masterStatusRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: masterStatusRing2.setStatus('current')
designatedMasterRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 2, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: designatedMasterRing2.setStatus('current')
rdnt1stPortRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnt1stPortRing2.setStatus('current')
rdnt1stPortStatusRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnt1stPortStatusRing2.setStatus('current')
rdnt2ndPortRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnt2ndPortRing2.setStatus('current')
rdnt2ndPortStatusRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnt2ndPortStatusRing2.setStatus('current')
brokenStatusRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("normal", 1), ("broken", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brokenStatusRing2.setStatus('current')
turboRingV2Coupling = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 3))
couplingEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: couplingEnable.setStatus('current')
couplingMode = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dualHoming", 1), ("couplingBackup", 2), ("couplingPrimary", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: couplingMode.setStatus('current')
coupling1stPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coupling1stPort.setStatus('current')
coupling1stPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coupling1stPortStatus.setStatus('current')
coupling2ndPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coupling2ndPort.setStatus('current')
coupling2ndPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 5, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coupling2ndPortStatus.setStatus('current')
turboChain = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 6))
turboChainRole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("head", 1), ("member", 2), ("tail", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboChainRole.setStatus('current')
turboChainPort1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboChainPort1.setStatus('current')
turboChainPort2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboChainPort2.setStatus('current')
turboChainPort1Status = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notTurboChainPort", 0), ("linkDown", 1), ("blocking", 2), ("blocked", 3), ("forwarding", 4), ("na", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboChainPort1Status.setStatus('current')
turboChainPort2Status = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notTurboChainPort", 0), ("linkDown", 1), ("blocking", 2), ("blocked", 3), ("forwarding", 4), ("na", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboChainPort2Status.setStatus('current')
turboChainPort1PartnerBridge = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 6, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboChainPort1PartnerBridge.setStatus('current')
turboChainPort2PartnerBridge = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 16, 6, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboChainPort2PartnerBridge.setStatus('current')
relayWarning = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17))
relayWarningTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 11), )
if mibBuilder.loadTexts: relayWarningTable.setStatus('current')
relayWarningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 11, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "relayAlarmIndex"))
if mibBuilder.loadTexts: relayWarningEntry.setStatus('current')
relayAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayAlarmIndex.setStatus('current')
relayWarningRelayContact = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("opened", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayWarningRelayContact.setStatus('current')
overrideRelayWarningSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideRelayWarningSetting.setStatus('current')
relayWarningPower1Off = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningPower1Off.setStatus('current')
relayWarningPower1OffStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-triggered", 0), ("triggered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayWarningPower1OffStatus.setStatus('current')
relayWarningPower2Off = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningPower2Off.setStatus('current')
relayWarningPower2OffStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-triggered", 0), ("triggered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayWarningPower2OffStatus.setStatus('current')
relayWarningTurboRingBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningTurboRingBreak.setStatus('current')
relayWarningTurboRingBreakStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-triggered", 0), ("triggered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayWarningTurboRingBreakStatus.setStatus('current')
portRelayWarningTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 12), )
if mibBuilder.loadTexts: portRelayWarningTable.setStatus('current')
portRelayWarningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 12, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portIndex"), (0, "MOXA-EDSP510A8POE-MIB", "relayAlarmIndex"))
if mibBuilder.loadTexts: portRelayWarningEntry.setStatus('current')
relayWarningLinkChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ignore", 0), ("on2off", 1), ("off2on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningLinkChanged.setStatus('current')
relayWarningLinkChangedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-triggered", 0), ("triggered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayWarningLinkChangedStatus.setStatus('current')
relayWarningTrafficOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningTrafficOverload.setStatus('current')
relayWarningTrafficOverloadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-triggered", 0), ("triggered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayWarningTrafficOverloadStatus.setStatus('current')
relayWarningRxTrafficThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 12, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningRxTrafficThreshold.setStatus('current')
relayWarningTrafficDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 12, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningTrafficDuration.setStatus('current')
diRelayWarningTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 13), )
if mibBuilder.loadTexts: diRelayWarningTable.setStatus('current')
diRelayWarningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 13, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "diIndex"), (0, "MOXA-EDSP510A8POE-MIB", "relayAlarmIndex"))
if mibBuilder.loadTexts: diRelayWarningEntry.setStatus('current')
relayWarningDiInputChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningDiInputChanged.setStatus('current')
relayWarningDiInputChangedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 17, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-triggered", 0), ("triggered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayWarningDiInputChangedStatus.setStatus('current')
trafficPrioritization = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18))
qosClassification = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 1))
queuingMechanism = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("schedweightfair", 0), ("schedstrict", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queuingMechanism.setStatus('current')
qosPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 1, 2), )
if mibBuilder.loadTexts: qosPortTable.setStatus('current')
qosPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 1, 2, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: qosPortEntry.setStatus('current')
inspectTos = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inspectTos.setStatus('current')
inspectCos = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inspectCos.setStatus('current')
portPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("priority0", 0), ("priority1", 1), ("priority2", 2), ("priority3", 3), ("priority4", 4), ("priority5", 5), ("priority6", 6), ("priority7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPriority.setStatus('current')
cosMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 2))
cosMappingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 2, 1), )
if mibBuilder.loadTexts: cosMappingTable.setStatus('current')
cosMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 2, 1, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "cosTag"))
if mibBuilder.loadTexts: cosMappingEntry.setStatus('current')
cosTag = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosTag.setStatus('current')
cosMappedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("normal", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosMappedPriority.setStatus('current')
tosMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 3))
tosMappingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 3, 1), )
if mibBuilder.loadTexts: tosMappingTable.setStatus('current')
tosMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 3, 1, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "tosClass"))
if mibBuilder.loadTexts: tosMappingEntry.setStatus('current')
tosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tosClass.setStatus('current')
tosMappedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 18, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("normal", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tosMappedPriority.setStatus('current')
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19))
vlanPortSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 1), )
if mibBuilder.loadTexts: vlanPortSettingTable.setStatus('current')
vlanPortSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 1, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: vlanPortSettingEntry.setStatus('current')
portVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("access", 0), ("trunk", 1), ("hybrid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVlanType.setStatus('current')
portDefaultVid = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDefaultVid.setStatus('current')
portFixedVid = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFixedVid.setStatus('current')
portForbiddenVid = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForbiddenVid.setStatus('current')
portFixedVidUntag = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFixedVidUntag.setStatus('current')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 2), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 2, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "vlanId"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
vlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanId.setStatus('current')
joinedAccessPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 2, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joinedAccessPorts.setStatus('current')
joinedTrunkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 2, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joinedTrunkPorts.setStatus('current')
joinedHybridPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 2, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joinedHybridPorts.setStatus('current')
managementVlanId = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementVlanId.setStatus('current')
vlanType = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tagBased", 0), ("portBased", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanType.setStatus('current')
portbaseVlanSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 5), )
if mibBuilder.loadTexts: portbaseVlanSettingTable.setStatus('current')
portbaseVlanSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 5, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portbaseVlanSettingIndex"))
if mibBuilder.loadTexts: portbaseVlanSettingEntry.setStatus('current')
portbaseVlanSettingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portbaseVlanSettingIndex.setStatus('current')
portbaseVlanMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 5, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portbaseVlanMemberPorts.setStatus('current')
enableGvrp = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 19, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableGvrp.setStatus('current')
multicastFiltering = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20))
igmpSnooping = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 1))
querierQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: querierQueryInterval.setStatus('current')
igmpSnoopingSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 1, 2), )
if mibBuilder.loadTexts: igmpSnoopingSettingTable.setStatus('current')
igmpSnoopingSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 1, 2, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "vlanId"))
if mibBuilder.loadTexts: igmpSnoopingSettingEntry.setStatus('current')
enableIgmpSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableIgmpSnooping.setStatus('current')
enableQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableQuerier.setStatus('current')
fixedMulticastQuerierPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 1, 2, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fixedMulticastQuerierPorts.setStatus('current')
learnedMulticastQuerierPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 1, 2, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: learnedMulticastQuerierPorts.setStatus('current')
enableGlobalIgmpSnooping = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableGlobalIgmpSnooping.setStatus('current')
multicastFastForwarding = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastFastForwarding.setStatus('current')
staticMulticast = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 2))
staticMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 2, 1), )
if mibBuilder.loadTexts: staticMulticastTable.setStatus('current')
staticMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 2, 1, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "staticMulticastAddress"))
if mibBuilder.loadTexts: staticMulticastEntry.setStatus('current')
staticMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 2, 1, 1, 1), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticMulticastAddress.setStatus('current')
staticMulticastPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 2, 1, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticMulticastPorts.setStatus('current')
staticMulticastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticMulticastStatus.setStatus('current')
gmrp = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 3))
gmrpSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 3, 1), )
if mibBuilder.loadTexts: gmrpSettingTable.setStatus('current')
gmrpSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 3, 1, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: gmrpSettingEntry.setStatus('current')
enableGMRP = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableGMRP.setStatus('current')
gmrpTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 3, 2), )
if mibBuilder.loadTexts: gmrpTable.setStatus('current')
gmrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 3, 2, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "gmrpMulticastGroup"))
if mibBuilder.loadTexts: gmrpEntry.setStatus('current')
gmrpMulticastGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 3, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmrpMulticastGroup.setStatus('current')
gmrpFixedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 3, 2, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmrpFixedPorts.setStatus('current')
gmrpLearnedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 20, 3, 2, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmrpLearnedPorts.setStatus('current')
rateLimiting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21))
rateLimitingMode = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("portDisable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rateLimitingMode.setStatus('current')
normalModeRateLimitingIngressTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 1), )
if mibBuilder.loadTexts: normalModeRateLimitingIngressTable.setStatus('current')
normalModeRateLimitingIngressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 1, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: normalModeRateLimitingIngressEntry.setStatus('current')
limitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("all", 0), ("bmucast", 1), ("bmcast", 2), ("bcast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitMode.setStatus('current')
lowPriLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notlimit", 0), ("limit128k", 1), ("limit256k", 2), ("limit512k", 3), ("limit1M", 4), ("limit2M", 5), ("limit4M", 6), ("limit8M", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowPriLimitRate.setStatus('current')
normalPriLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notlimit", 0), ("limit128k", 1), ("limit256k", 2), ("limit512k", 3), ("limit1M", 4), ("limit2M", 5), ("limit4M", 6), ("limit8M", 7), ("limit16M", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: normalPriLimitRate.setStatus('current')
mediumPriLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notlimit", 0), ("limit128k", 1), ("limit256k", 2), ("limit512k", 3), ("limit1M", 4), ("limit2M", 5), ("limit4M", 6), ("limit8M", 7), ("limit16M", 8), ("limit32M", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mediumPriLimitRate.setStatus('current')
highPriLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("notlimit", 0), ("limit128k", 1), ("limit256k", 2), ("limit512k", 3), ("limit1M", 4), ("limit2M", 5), ("limit4M", 6), ("limit8M", 7), ("limit16M", 8), ("limit32M", 9), ("limit64M", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highPriLimitRate.setStatus('current')
egressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notlimited", 0), ("percentage03", 1), ("percentage05", 2), ("percentage10", 3), ("percentage15", 4), ("percentage25", 5), ("percentage35", 6), ("percentage50", 7), ("percentage65", 8), ("percentage85", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressLimit.setStatus('current')
portDisableMode = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 3))
portDisableModePeriod = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDisableModePeriod.setStatus('current')
portDisableModeTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 3, 2), )
if mibBuilder.loadTexts: portDisableModeTable.setStatus('current')
portDisableModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 3, 2, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: portDisableModeEntry.setStatus('current')
ingressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 21, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("notlimited", 0), ("rateMega1Fps4464", 1), ("rateMega2Fps7441", 2), ("rateMega3Fps14881", 3), ("rateMega4Fps22322", 4), ("rateMega5Fps37203", 5), ("rateMega6Fps52084", 6), ("rateMega7Fps74405", 7), ("rateGiga1Fps44640", 8), ("rateGiga2Fps74410", 9), ("rateGiga3Fps148810", 10), ("rateGiga4Fps223220", 11), ("rateGiga5Fps372030", 12), ("rateGiga6Fps520840", 13), ("rateGiga7Fps744050", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressLimit.setStatus('current')
security = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22))
userLoginSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1))
userLoginServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tacacs", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userLoginServer.setStatus('current')
tacacsServerSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 2))
tacacsLoginAuthServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLoginAuthServer.setStatus('current')
tacacsLoginAuthPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLoginAuthPort.setStatus('current')
tacacsLoginAuthSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLoginAuthSharedKey.setStatus('current')
tacacsLoginAuthAuthType = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("ascii", 0), ("pap", 1), ("chap", 2), ("mschap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLoginAuthAuthType.setStatus('current')
tacacsLoginAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLoginAuthTimeout.setStatus('current')
radiusServerSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 3))
radiusLoginAuthServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusLoginAuthServer.setStatus('current')
radiusLoginAuthPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusLoginAuthPort.setStatus('current')
radiusLoginAuthSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusLoginAuthSharedKey.setStatus('current')
radiusLoginAuthAuthType = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("eap-md5", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusLoginAuthAuthType.setStatus('current')
radiusLoginAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusLoginAuthTimeout.setStatus('current')
portAccessControl = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2))
staticPortLock = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 1))
staticPortLockAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 1, 1), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticPortLockAddress.setStatus('current')
staticPortLockPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticPortLockPort.setStatus('current')
staticPortLockStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticPortLockStatus.setStatus('current')
dot1x = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2))
dataBaseOption = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("radius", 2), ("radiuslocal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataBaseOption.setStatus('current')
dot1xReauthEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xReauthEnable.setStatus('current')
dot1xReauthPeriod = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xReauthPeriod.setStatus('current')
dot1xSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 7), )
if mibBuilder.loadTexts: dot1xSettingTable.setStatus('current')
dot1xSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 7, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: dot1xSettingEntry.setStatus('current')
enableDot1X = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableDot1X.setStatus('current')
dot1xReauthTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 8), )
if mibBuilder.loadTexts: dot1xReauthTable.setStatus('current')
dot1xReauthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 8, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "dot1xReauthPortIndex"))
if mibBuilder.loadTexts: dot1xReauthEntry.setStatus('current')
dot1xReauthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xReauthPortIndex.setStatus('current')
dot1xReauth = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xReauth.setStatus('current')
dot1xRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 9))
dot1xSameAsAuthServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notSame", 0), ("same", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xSameAsAuthServer.setStatus('current')
dot1x1stRadiusServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 9, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x1stRadiusServer.setStatus('current')
dot1x1stRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x1stRadiusPort.setStatus('current')
dot1x1stRadiusSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 9, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x1stRadiusSharedKey.setStatus('current')
dot1x2ndRadiusServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 9, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x2ndRadiusServer.setStatus('current')
dot1x2ndRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x2ndRadiusPort.setStatus('current')
dot1x2ndRadiusSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 2, 9, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x2ndRadiusSharedKey.setStatus('current')
portAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 3), )
if mibBuilder.loadTexts: portAccessControlTable.setStatus('current')
portAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 3, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "portAccessControlAddress"))
if mibBuilder.loadTexts: portAccessControlEntry.setStatus('current')
portAccessControlAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAccessControlAddress.setStatus('current')
portAccessControlPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAccessControlPortNo.setStatus('current')
portAccessControlAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("staticLock", 1), ("authorized", 2), ("unAuthorized", 3), ("authorizing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAccessControlAccessStatus.setStatus('current')
portAccessControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 22, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portAccessControlStatus.setStatus('current')
accessibleIP = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 30))
enableAccessibleIP = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableAccessibleIP.setStatus('current')
accessibleIpTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 30, 2), )
if mibBuilder.loadTexts: accessibleIpTable.setStatus('current')
accessibleIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 30, 2, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "accessibleIpAddress"))
if mibBuilder.loadTexts: accessibleIpEntry.setStatus('current')
accessibleIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 30, 2, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessibleIpAddress.setStatus('current')
accessibleIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 30, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessibleIpNetMask.setStatus('current')
accessibleIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 30, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessibleIpStatus.setStatus('current')
sysFileUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 31))
tftpServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 31, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpServer.setStatus('current')
firmwarePathName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 31, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwarePathName.setStatus('current')
logPathName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 31, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logPathName.setStatus('current')
confPathName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 31, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confPathName.setStatus('current')
tftpUpdate = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 31, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("importFirmware", 1), ("importConfig", 2), ("exportConfig", 3), ("exportLog", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tftpUpdate.setStatus('current')
timeSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32))
sysDateTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 1), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDateTime.setStatus('current')
calibratePeriod = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calibratePeriod.setStatus('current')
timeServer1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServer1.setStatus('current')
timeServer2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServer2.setStatus('current')
daylightSaving = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 5))
startMonth = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("na", 0), ("jan", 1), ("feb", 2), ("mar", 3), ("apr", 4), ("may", 5), ("jun", 6), ("jul", 7), ("aug", 8), ("sep", 9), ("oct", 10), ("nov", 11), ("dec", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startMonth.setStatus('current')
startWeek = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("na", 0), ("week1", 1), ("week2", 2), ("week3", 3), ("week4", 4), ("weeklast", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startWeek.setStatus('current')
startDay = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("na", 0), ("sun", 1), ("mon", 2), ("tue", 3), ("wed", 4), ("thu", 5), ("fri", 6), ("sat", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startDay.setStatus('current')
startHour = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startHour.setStatus('current')
endMonth = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("na", 0), ("jan", 1), ("feb", 2), ("mar", 3), ("apr", 4), ("may", 5), ("jun", 6), ("jul", 7), ("aug", 8), ("sep", 9), ("oct", 10), ("nov", 11), ("dec", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endMonth.setStatus('current')
endWeek = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("na", 0), ("week1", 1), ("week2", 2), ("week3", 3), ("week4", 4), ("weeklast", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endWeek.setStatus('current')
endDay = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("na", 0), ("sun", 1), ("mon", 2), ("tue", 3), ("wed", 4), ("thu", 5), ("fri", 6), ("sat", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endDay.setStatus('current')
endHour = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endHour.setStatus('current')
offsetHours = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: offsetHours.setStatus('current')
enableNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableNTPServer.setStatus('current')
timeProtocolOption = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 32, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("sntp", 1), ("ntp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeProtocolOption.setStatus('current')
dipSwitchSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 34))
dipSwitchEnableTurboRing = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 34, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dipSwitchEnableTurboRing.setStatus('current')
dipSwitchTurboRingPole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 34, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dipSwitchTurboRingPole.setStatus('current')
dipSwitchRingCouplingPole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 34, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dipSwitchRingCouplingPole.setStatus('current')
dipSwitchRingMasterPole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 34, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dipSwitchRingMasterPole.setStatus('current')
backupMediaSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 35))
backupMediaAutoLoad = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 35, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupMediaAutoLoad.setStatus('current')
enableWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableWarmStart.setStatus('current')
syslogSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 37))
syslogServer1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 37, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer1.setStatus('current')
syslogServer1port = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 37, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer1port.setStatus('current')
syslogServer2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 37, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer2.setStatus('current')
syslogServer2port = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 37, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer2port.setStatus('current')
syslogServer3 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 37, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer3.setStatus('current')
syslogServer3port = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 37, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer3port.setStatus('current')
dhcpRelayAgentSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39))
dhcpServer1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServer1.setStatus('current')
dhcpServer2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServer2.setStatus('current')
dhcpServer3 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServer3.setStatus('current')
dhcpServer4 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServer4.setStatus('current')
option82Setting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 5))
enableOption82 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableOption82.setStatus('current')
option82Type = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ip", 0), ("mac", 1), ("client-id", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: option82Type.setStatus('current')
option82Value = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: option82Value.setStatus('current')
option82ValueDisplay = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 5, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: option82ValueDisplay.setStatus('current')
dhcpFunctionTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 6), )
if mibBuilder.loadTexts: dhcpFunctionTable.setStatus('current')
dhcpFunctionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 6, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "dhcpPortIndex"))
if mibBuilder.loadTexts: dhcpFunctionEntry.setStatus('current')
dhcpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPortIndex.setStatus('current')
circuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitID.setStatus('current')
option82Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 39, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: option82Enable.setStatus('current')
poeSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40))
poePortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 3), )
if mibBuilder.loadTexts: poePortTable.setStatus('current')
poePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 3, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "poePortIndex"))
if mibBuilder.loadTexts: poePortEntry.setStatus('current')
poePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortIndex.setStatus('current')
poePortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortEnable.setStatus('current')
poePowerOutputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("highPower", 1), ("force", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePowerOutputMode.setStatus('current')
powerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerLimit.setStatus('current')
pdfailure = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdfailure.setStatus('current')
pdipaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdipaddr.setStatus('current')
pdPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdPollingInterval.setStatus('current')
poeporttimetabling = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeporttimetabling.setStatus('current')
poeTimeTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 5), )
if mibBuilder.loadTexts: poeTimeTable.setStatus('current')
poeTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 5, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "poeTPortIndex"), (0, "MOXA-EDSP510A8POE-MIB", "poeWeekDay"))
if mibBuilder.loadTexts: poeTimeEntry.setStatus('current')
poeTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeTPortIndex.setStatus('current')
poeWeekDay = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeWeekDay.setStatus('current')
poeDayEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeDayEnable.setStatus('current')
poeDayStart = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeDayStart.setStatus('current')
poeDayStop = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeDayStop.setStatus('current')
poeStatusTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 6), )
if mibBuilder.loadTexts: poeStatusTable.setStatus('current')
poeStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 6, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "poePortIndex"))
if mibBuilder.loadTexts: poeStatusEntry.setStatus('current')
poePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortStatus.setStatus('current')
poePortConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortConsumption.setStatus('current')
poePortVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortVoltage.setStatus('current')
poePortCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 40, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortCurrent.setStatus('current')
ieee1588Setting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41))
ptpv1Setting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 1))
enablePtpv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablePtpv1.setStatus('current')
clockModev1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1BC", 0), ("v2E2E2stepTC", 1), ("v2E2E1stepTC", 2), ("v2P2PTC", 3), ("v2E2EBC", 4), ("v2P2PBC", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockModev1.setStatus('current')
syncIntervalv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("oneSec", 0), ("twoSec", 1), ("fourSec", 2), ("eightSec", 3), ("sixteenSec", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syncIntervalv1.setStatus('current')
subDomainNamev1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("dflt", 0), ("alt1", 1), ("alt2", 2), ("alt3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subDomainNamev1.setStatus('current')
preferMasterv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: preferMasterv1.setStatus('current')
ptpv2Setting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2))
enablePtp = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablePtp.setStatus('current')
clockMode = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1BC", 0), ("v2E2E2stepTC", 1), ("v2E2E1stepTC", 2), ("v2P2PTC", 3), ("v2E2EBC", 4), ("v2P2PBC", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockMode.setStatus('current')
transport = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ieee802dot3", 0), ("ipv4", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transport.setStatus('current')
syncInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-3, -2, -1, 0, 1))).clone(namedValues=NamedValues(("t128msec", -3), ("t256msec", -2), ("t512msec", -1), ("t1sec", 0), ("t2sec", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syncInterval.setStatus('current')
logMinDelayReqInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("t1sec", 0), ("t2sec", 1), ("t4sec", 2), ("t8sec", 3), ("t16sec", 4), ("t32sec", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logMinDelayReqInterval.setStatus('current')
logMinPdelayReqInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("t512msec", -1), ("t1sec", 0), ("t2sec", 1), ("t4sec", 2), ("t8sec", 3), ("t16sec", 4), ("t32sec", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logMinPdelayReqInterval.setStatus('current')
logAnnounceInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("t1sec", 0), ("t2sec", 1), ("t4sec", 2), ("t8sec", 3), ("t16sec", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logAnnounceInterval.setStatus('current')
announceReceiptTimeout = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: announceReceiptTimeout.setStatus('current')
priority1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priority1.setStatus('current')
priority2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priority2.setStatus('current')
clockClass = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockClass.setStatus('current')
domainNumber = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("dflt", 0), ("alt1", 1), ("alt2", 2), ("alt3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainNumber.setStatus('current')
localUtcOffset = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUtcOffset.setStatus('current')
localUtcOffsetValid = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUtcOffsetValid.setStatus('current')
localLeap59 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localLeap59.setStatus('current')
localLeap61 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localLeap61.setStatus('current')
localPtpTimescale = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("arb", 0), ("ptp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localPtpTimescale.setStatus('current')
localArbTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 2, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localArbTime.setStatus('current')
ptpv1Status = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 3))
offsetToMasterv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: offsetToMasterv1.setStatus('current')
meanPathDelayv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meanPathDelayv1.setStatus('current')
grandMasterUuidv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 3, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandMasterUuidv1.setStatus('current')
parentUuidv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 3, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parentUuidv1.setStatus('current')
clockStratumv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockStratumv1.setStatus('current')
clockIdentifierv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockIdentifierv1.setStatus('current')
ptpv2Status = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4))
offsetToMaster = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: offsetToMaster.setStatus('current')
meanPathDelay = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meanPathDelay.setStatus('current')
parentIdentity = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parentIdentity.setStatus('current')
grandmasterIdentity = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandmasterIdentity.setStatus('current')
grandmasterClockClass = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandmasterClockClass.setStatus('current')
grandmasterClockAccuracy = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandmasterClockAccuracy.setStatus('current')
grandmasterPriority1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandmasterPriority1.setStatus('current')
grandmasterPriority2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandmasterPriority2.setStatus('current')
stepsRemoved = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stepsRemoved.setStatus('current')
currentUtcOffset = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentUtcOffset.setStatus('current')
currentUtcOffsetValid = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentUtcOffsetValid.setStatus('current')
leap59 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: leap59.setStatus('current')
leap61 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: leap61.setStatus('current')
ptpTimescale = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpTimescale.setStatus('current')
timesource = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 4, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timesource.setStatus('current')
ptpPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 5), )
if mibBuilder.loadTexts: ptpPortTable.setStatus('current')
ptpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 5, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "ptpPortIndex"))
if mibBuilder.loadTexts: ptpPortEntry.setStatus('current')
ptpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpPortIndex.setStatus('current')
ptpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptpPortEnable.setStatus('current')
ptpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 41, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ptpInitializing", 0), ("ptpFaulty", 1), ("ptpDisabled", 2), ("ptpListening", 3), ("ptpPreMaster", 4), ("ptpMaster", 5), ("ptpPassive", 6), ("ptpUncalibrated", 7), ("ptpSlave", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpPortStatus.setStatus('current')
varconfigChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("configChanged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varconfigChangeTrap.setStatus('current')
configChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 86, 0, 1)).setObjects(("MOXA-EDSP510A8POE-MIB", "varconfigChangeTrap"))
if mibBuilder.loadTexts: configChangeTrap.setStatus('current')
varpower1Trap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on2off", 2), ("off2on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varpower1Trap.setStatus('current')
power1Trap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 86, 0, 2)).setObjects(("MOXA-EDSP510A8POE-MIB", "varpower1Trap"))
if mibBuilder.loadTexts: power1Trap.setStatus('current')
varpower2Trap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on2off", 2), ("off2on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varpower2Trap.setStatus('current')
power2Trap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 86, 0, 3)).setObjects(("MOXA-EDSP510A8POE-MIB", "varpower2Trap"))
if mibBuilder.loadTexts: power2Trap.setStatus('current')
vartrafficOverloadTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vartrafficOverloadTrap.setStatus('current')
trafficOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 86, 0, 4)).setObjects(("MOXA-EDSP510A8POE-MIB", "vartrafficOverloadTrap"))
if mibBuilder.loadTexts: trafficOverloadTrap.setStatus('current')
varredundancyTopologyChangedTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("topologyChanged", 2), ("topologyChangedTurboChainHead", 3), ("topologyChangedTurboChainTail", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varredundancyTopologyChangedTrap.setStatus('current')
redundancyTopologyChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 86, 0, 5)).setObjects(("MOXA-EDSP510A8POE-MIB", "varredundancyTopologyChangedTrap"))
if mibBuilder.loadTexts: redundancyTopologyChangedTrap.setStatus('current')
varturboRingCouplingPortChangedTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("couplingPortChanged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varturboRingCouplingPortChangedTrap.setStatus('current')
turboRingCouplingPortChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 86, 0, 6)).setObjects(("MOXA-EDSP510A8POE-MIB", "varturboRingCouplingPortChangedTrap"))
if mibBuilder.loadTexts: turboRingCouplingPortChangedTrap.setStatus('current')
varturboRingMasterChangedTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("ringMasterChanged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varturboRingMasterChangedTrap.setStatus('current')
turboRingMasterChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 86, 0, 7)).setObjects(("MOXA-EDSP510A8POE-MIB", "varturboRingMasterChangedTrap"))
if mibBuilder.loadTexts: turboRingMasterChangedTrap.setStatus('current')
varPoEWarningTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("pdOverCurrent", 1), ("pdCheckFail", 2), ("pdPowerOn", 3), ("pdPowerOff", 4), ("exceedSystemThreshold", 5), ("pseFetBad", 6), ("pseOverTemperature", 7), ("pseVeeUvlo", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varPoEWarningTrap.setStatus('current')
diagnosis = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 42))
lldpSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 42, 1))
enableLLDP = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 42, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableLLDP.setStatus('current')
lldpMSGInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 42, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMSGInterval.setStatus('current')
industrialProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 47))
eipSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 47, 1))
modbusTCPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 47, 2))
enableEtherNetIP = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 47, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableEtherNetIP.setStatus('current')
enableModbusTCP = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 47, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableModbusTCP.setStatus('current')
garpSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 45))
leaveAllTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 45, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: leaveAllTime.setStatus('current')
leaveTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 45, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: leaveTime.setStatus('current')
joinTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 45, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: joinTime.setStatus('current')
enableFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableFactoryDefault.setStatus('current')
eventlog = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 46))
eventlogTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 46, 1), )
if mibBuilder.loadTexts: eventlogTable.setStatus('current')
eventlogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 46, 1, 1), ).setIndexNames((0, "MOXA-EDSP510A8POE-MIB", "eventlogIndex"))
if mibBuilder.loadTexts: eventlogEntry.setStatus('current')
eventlogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 46, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogIndex.setStatus('current')
eventlogBootup = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 46, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogBootup.setStatus('current')
eventlogDate = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 46, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogDate.setStatus('current')
eventlogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 46, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogTime.setStatus('current')
eventlogUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 46, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogUptime.setStatus('current')
eventlogEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 46, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogEvent.setStatus('current')
eventlogClear = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 46, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noop", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventlogClear.setStatus('current')
cpuLoading5s = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoading5s.setStatus('current')
cpuLoading30s = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoading30s.setStatus('current')
cpuLoading300s = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoading300s.setStatus('current')
totalMemory = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalMemory.setStatus('current')
freeMemory = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeMemory.setStatus('current')
usedMemory = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usedMemory.setStatus('current')
memoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryUsage.setStatus('current')
loopProtection = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 86, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopProtection.setStatus('current')
mibBuilder.exportSymbols("MOXA-EDSP510A8POE-MIB", poePortIndex=poePortIndex, tosMappingTable=tosMappingTable, dhcpServer3=dhcpServer3, emailWarningEventTopologyChanged=emailWarningEventTopologyChanged, poeDayStop=poeDayStop, mibNotificationsPrefix=mibNotificationsPrefix, dnsServer1IpAddr=dnsServer1IpAddr, enableGMRP=enableGMRP, dipSwitchEnableTurboRing=dipSwitchEnableTurboRing, dipSwitchTurboRingPole=dipSwitchTurboRingPole, option82ValueDisplay=option82ValueDisplay, poeDayEnable=poeDayEnable, monitorDiTable=monitorDiTable, portbaseVlanMemberPorts=portbaseVlanMemberPorts, enableFactoryDefault=enableFactoryDefault, learnedMulticastQuerierPorts=learnedMulticastQuerierPorts, poeSetting=poeSetting, qosPortTable=qosPortTable, clockIdentifierv1=clockIdentifierv1, eventlogUptime=eventlogUptime, rdnt2ndPortRing1=rdnt2ndPortRing1, turboChainPort2Status=turboChainPort2Status, logAnnounceInterval=logAnnounceInterval, staticMulticastAddress=staticMulticastAddress, offsetToMasterv1=offsetToMasterv1, joinedAccessPorts=joinedAccessPorts, option82Type=option82Type, currentUtcOffsetValid=currentUtcOffsetValid, ptpPortEntry=ptpPortEntry, portDisableMode=portDisableMode, mediumPriLimitRate=mediumPriLimitRate, portSetting=portSetting, portbaseVlanSettingEntry=portbaseVlanSettingEntry, spanningTree=spanningTree, tftpServer=tftpServer, eventlogTime=eventlogTime, relayWarningEntry=relayWarningEntry, staticMulticastEntry=staticMulticastEntry, rdnt1stPortStatusRing1=rdnt1stPortStatusRing1, emailWarningEventPortRxTrafficThreshold=emailWarningEventPortRxTrafficThreshold, enableNTPServer=enableNTPServer, igmpSnoopingSettingTable=igmpSnoopingSettingTable, poePortEntry=poePortEntry, designatedMasterRing1=designatedMasterRing1, emailWarningEventPortLinkOff=emailWarningEventPortLinkOff, poePortCurrent=poePortCurrent, gmrp=gmrp, portbaseVlanSettingTable=portbaseVlanSettingTable, industrialProtocol=industrialProtocol, networkSetting=networkSetting, poeWeekDay=poeWeekDay, turboRingV2Coupling=turboRingV2Coupling, grandMasterUuidv1=grandMasterUuidv1, trunkSettingTable=trunkSettingTable, turboRingEnableCoupling=turboRingEnableCoupling, dot1xReauthEntry=dot1xReauthEntry, relayWarningDiInputChanged=relayWarningDiInputChanged, enableModbusTCP=enableModbusTCP, domainNumber=domainNumber, edsp510a8poe=edsp510a8poe, setDevIpCurrentIpofDevice=setDevIpCurrentIpofDevice, switchModel=switchModel, turboChainPort1Status=turboChainPort1Status, offsetHours=offsetHours, portDisableModeEntry=portDisableModeEntry, timeServer1=timeServer1, tftpUpdate=tftpUpdate, varpower1Trap=varpower1Trap, accessibleIpNetMask=accessibleIpNetMask, spanningTreeBridgePriority=spanningTreeBridgePriority, relayWarningTurboRingBreak=relayWarningTurboRingBreak, startDay=startDay, lowPriLimitRate=lowPriLimitRate, logMinPdelayReqInterval=logMinPdelayReqInterval, portRelayWarningTable=portRelayWarningTable, ptpPortStatus=ptpPortStatus, accessibleIpTable=accessibleIpTable, dot1xRadius=dot1xRadius, swTraps=swTraps, clockMode=clockMode, activeProtocolOfRedundancy=activeProtocolOfRedundancy, emailWarningEventPowerOn2Off=emailWarningEventPowerOn2Off, relayWarningLinkChanged=relayWarningLinkChanged, coupling1stPortStatus=coupling1stPortStatus, snmpInformTimeout=snmpInformTimeout, syslogServer3=syslogServer3, turboRingCouplingPortChangedTrap=turboRingCouplingPortChangedTrap, grandmasterClockClass=grandmasterClockClass, portDefaultVid=portDefaultVid, staticPortLock=staticPortLock, grandmasterPriority1=grandmasterPriority1, varturboRingCouplingPortChangedTrap=varturboRingCouplingPortChangedTrap, eventlogIndex=eventlogIndex, stepsRemoved=stepsRemoved, turboRing=turboRing, poeStatusEntry=poeStatusEntry, turboChainPort2=turboChainPort2, turboRingControlPort=turboRingControlPort, enableSpanningTree=enableSpanningTree, circuitID=circuitID, userLoginServer=userLoginServer, relayWarningTrafficOverloadStatus=relayWarningTrafficOverloadStatus, radiusLoginAuthAuthType=radiusLoginAuthAuthType, emailWarningEventType=emailWarningEventType, eventlogBootup=eventlogBootup, rdnt1stPortStatusRing2=rdnt1stPortStatusRing2, gmrpSettingEntry=gmrpSettingEntry, portEnable=portEnable, dataBaseOption=dataBaseOption, gmrpLearnedPorts=gmrpLearnedPorts, backupMediaSetting=backupMediaSetting, ringEnableRing2=ringEnableRing2, security=security, sfpRXPower=sfpRXPower, vlanEntry=vlanEntry, enableOption82=enableOption82, rateLimiting=rateLimiting, enableWarmStart=enableWarmStart, accessibleIpAddress=accessibleIpAddress, emailWarningThirdEmailAddr=emailWarningThirdEmailAddr, portForbiddenVid=portForbiddenVid, tosMapping=tosMapping, monitorPortTable=monitorPortTable, spanningTreeRoot=spanningTreeRoot, monitorSFPTable=monitorSFPTable, gmrpFixedPorts=gmrpFixedPorts, dot1x=dot1x, emailWarningSMTPPort=emailWarningSMTPPort, confPathName=confPathName, power2InputStatus=power2InputStatus, turboRingCouplingPort=turboRingCouplingPort, emailWarningEventPortEntry=emailWarningEventPortEntry, endDay=endDay, spanningTreeEntry=spanningTreeEntry, clockModev1=clockModev1, localLeap61=localLeap61, spanningTreePortStatus=spanningTreePortStatus, radiusLoginAuthServer=radiusLoginAuthServer, snmpReadCommunity=snmpReadCommunity, timeProtocolOption=timeProtocolOption, monitorSpeed=monitorSpeed, spanningTreePortCost=spanningTreePortCost, timeSetting=timeSetting, relayWarning=relayWarning, clockStratumv1=clockStratumv1, gmrpSettingTable=gmrpSettingTable, snmpInformEnable=snmpInformEnable, tosMappingEntry=tosMappingEntry, multicastFastForwarding=multicastFastForwarding, enableIgmpSnooping=enableIgmpSnooping, monitorRxTraffic=monitorRxTraffic, ringIndexRing2=ringIndexRing2, gmrpMulticastGroup=gmrpMulticastGroup, turboChainPort2PartnerBridge=turboChainPort2PartnerBridge, dot1xSettingEntry=dot1xSettingEntry, diIndex=diIndex, emailWarningEventServerColdStart=emailWarningEventServerColdStart, switchIpAddr=switchIpAddr, backupMediaAutoLoad=backupMediaAutoLoad, portFDXFlowCtrl=portFDXFlowCtrl, portAccessControlAccessStatus=portAccessControlAccessStatus, rdnt1stPortRing1=rdnt1stPortRing1, option82Value=option82Value, joinTime=joinTime, overrideRelayWarningSetting=overrideRelayWarningSetting, dot1xReauth=dot1xReauth, coupling1stPort=coupling1stPort, ptpv1Setting=ptpv1Setting, managementVlanId=managementVlanId, protocolOfRedundancySetup=protocolOfRedundancySetup, pdfailure=pdfailure, qosPortEntry=qosPortEntry, turboRingRdntPort2=turboRingRdntPort2, portDisableModeTable=portDisableModeTable, rdnt2ndPortRing2=rdnt2ndPortRing2, turboRingRdntPort1=turboRingRdntPort1, masterSetupRing1=masterSetupRing1, trunkIndex=trunkIndex, modbusTCPSetting=modbusTCPSetting, tacacsServerSetting=tacacsServerSetting, startHour=startHour, leap59=leap59, setDevIpEntry=setDevIpEntry, dot1x1stRadiusSharedKey=dot1x1stRadiusSharedKey, poePortTable=poePortTable, trunkMemberPorts=trunkMemberPorts, accessibleIpEntry=accessibleIpEntry, currentUtcOffset=currentUtcOffset, tosMappedPriority=tosMappedPriority, relayAlarmIndex=relayAlarmIndex, emailWarningSecondEmailAddr=emailWarningSecondEmailAddr, designatedMasterRing2=designatedMasterRing2, portEntry=portEntry, daylightSaving=daylightSaving, syslogServer3port=syslogServer3port, freeMemory=freeMemory, emailWarningEventPortTrafficOverload=emailWarningEventPortTrafficOverload, enableWebConfig=enableWebConfig, trunkPort=trunkPort, syslogServer1=syslogServer1, grandmasterClockAccuracy=grandmasterClockAccuracy, ptpPortTable=ptpPortTable, ptpv2Setting=ptpv2Setting, priority2=priority2, setDevIpTable=setDevIpTable, poePortVoltage=poePortVoltage, option82Setting=option82Setting, monitorAutoMDI=monitorAutoMDI, portTable=portTable, portFixedVid=portFixedVid, sfpTxPower=sfpTxPower, emailWarningEventServerWarmStart=emailWarningEventServerWarmStart, accessibleIP=accessibleIP, joinedTrunkPorts=joinedTrunkPorts, querierQueryInterval=querierQueryInterval, usedMemory=usedMemory, relayWarningTrafficDuration=relayWarningTrafficDuration, cosMappingTable=cosMappingTable, syslogServer1port=syslogServer1port, diRelayWarningEntry=diRelayWarningEntry, setDevIpDedicatedIp=setDevIpDedicatedIp, monitor=monitor, configChangeTrap=configChangeTrap, staticMulticast=staticMulticast, setDevIpPresentBy=setDevIpPresentBy, endHour=endHour, spanningTreeIndex=spanningTreeIndex, masterSetupRing2=masterSetupRing2, turboRingMaster=turboRingMaster, PYSNMP_MODULE_ID=edsp510a8poe, emailWarningEventPowerOff2On=emailWarningEventPowerOff2On, normalModeRateLimitingIngressTable=normalModeRateLimitingIngressTable, powerLimit=powerLimit, poePowerOutputMode=poePowerOutputMode, monitorDirection=monitorDirection, tacacsLoginAuthTimeout=tacacsLoginAuthTimeout, trunkSettingIndex=trunkSettingIndex, sfpPort=sfpPort, normalModeRateLimitingIngressEntry=normalModeRateLimitingIngressEntry, eventlog=eventlog, gmrpEntry=gmrpEntry, ingressLimit=ingressLimit, trafficOverloadTrap=trafficOverloadTrap, poeDayStart=poeDayStart, inspectCos=inspectCos, ieee1588Setting=ieee1588Setting, dot1x1stRadiusPort=dot1x1stRadiusPort, turboRingBrokenStatus=turboRingBrokenStatus, sfpTemperature=sfpTemperature, logMinDelayReqInterval=logMinDelayReqInterval, ptpv2Status=ptpv2Status, portFixedVidUntag=portFixedVidUntag, trunkStatus=trunkStatus, syslogServer2=syslogServer2)
mibBuilder.exportSymbols("MOXA-EDSP510A8POE-MIB", clockClass=clockClass, poeTimeTable=poeTimeTable, portRelayWarningEntry=portRelayWarningEntry, vlanPortSettingEntry=vlanPortSettingEntry, emailWarningEventDiTable=emailWarningEventDiTable, masterStatusRing1=masterStatusRing1, cosMapping=cosMapping, brokenStatusRing1=brokenStatusRing1, enableEtherNetIP=enableEtherNetIP, turboRingPortIndex=turboRingPortIndex, commRedundancy=commRedundancy, cosTag=cosTag, poePortStatus=poePortStatus, targetPort=targetPort, relayWarningPower2Off=relayWarningPower2Off, startMonth=startMonth, sfpModelName=sfpModelName, trapServerAddr=trapServerAddr, logPathName=logPathName, enableAutoIpConfig=enableAutoIpConfig, monitorFDXFlowCtrl=monitorFDXFlowCtrl, vartrafficOverloadTrap=vartrafficOverloadTrap, dot1xReauthEnable=dot1xReauthEnable, setDevIpIndex=setDevIpIndex, moxa=moxa, portName=portName, highPriLimitRate=highPriLimitRate, userLoginSetting=userLoginSetting, industrialEthernet=industrialEthernet, webTimeout=webTimeout, offsetToMaster=offsetToMaster, trafficPrioritization=trafficPrioritization, cpuLoading30s=cpuLoading30s, enableTelnetConsole=enableTelnetConsole, fixedMulticastQuerierPorts=fixedMulticastQuerierPorts, vlanTable=vlanTable, endWeek=endWeek, enablePtp=enablePtp, snmpInformRetries=snmpInformRetries, startWeek=startWeek, staticMulticastStatus=staticMulticastStatus, portPriority=portPriority, parentUuidv1=parentUuidv1, spanningTreePortEdge=spanningTreePortEdge, rdnt2ndPortStatusRing1=rdnt2ndPortStatusRing1, dhcpServer1=dhcpServer1, portDesc=portDesc, numberOfPorts=numberOfPorts, cosMappedPriority=cosMappedPriority, relayWarningPower2OffStatus=relayWarningPower2OffStatus, swMgmt=swMgmt, turboRingPortDesignatedPort=turboRingPortDesignatedPort, turboChain=turboChain, poePortConsumption=poePortConsumption, staticMulticastTable=staticMulticastTable, tacacsLoginAuthPort=tacacsLoginAuthPort, preferMasterv1=preferMasterv1, parentIdentity=parentIdentity, turboRingCouplingPortStatus=turboRingCouplingPortStatus, enableGvrp=enableGvrp, grandmasterPriority2=grandmasterPriority2, totalMemory=totalMemory, timeServer2=timeServer2, leaveTime=leaveTime, sysFileUpdate=sysFileUpdate, enableGlobalIgmpSnooping=enableGlobalIgmpSnooping, varpower2Trap=varpower2Trap, relayWarningTrafficOverload=relayWarningTrafficOverload, dipSwitchRingMasterPole=dipSwitchRingMasterPole, grandmasterIdentity=grandmasterIdentity, pdPollingInterval=pdPollingInterval, portAccessControlTable=portAccessControlTable, turboRingControlPortStatus=turboRingControlPortStatus, relayWarningTable=relayWarningTable, emailWarningFirstEmailAddr=emailWarningFirstEmailAddr, subDomainNamev1=subDomainNamev1, normalPriLimitRate=normalPriLimitRate, dot1xReauthPeriod=dot1xReauthPeriod, dipSwitchRingCouplingPole=dipSwitchRingCouplingPole, ptpPortIndex=ptpPortIndex, meanPathDelayv1=meanPathDelayv1, eventlogDate=eventlogDate, calibratePeriod=calibratePeriod, emailWarningEventConfigChange=emailWarningEventConfigChange, diInputStatus=diInputStatus, ringEnableRing1=ringEnableRing1, monitorLinkStatus=monitorLinkStatus, ptpv1Status=ptpv1Status, dot1x2ndRadiusSharedKey=dot1x2ndRadiusSharedKey, trunkTable=trunkTable, PortList=PortList, radiusLoginAuthPort=radiusLoginAuthPort, dot1x2ndRadiusPort=dot1x2ndRadiusPort, poeStatusTable=poeStatusTable, brokenStatusRing2=brokenStatusRing2, emailService=emailService, enableLLDP=enableLLDP, turboChainPort1PartnerBridge=turboChainPort1PartnerBridge, announceReceiptTimeout=announceReceiptTimeout, mirroringPort=mirroringPort, spanningTreePortPriority=spanningTreePortPriority, trunkType=trunkType, firmwareVersion=firmwareVersion, spanningTreeHelloTime=spanningTreeHelloTime, emailWarningEventPortLinkOn=emailWarningEventPortLinkOn, sysDateTime=sysDateTime, poeTimeEntry=poeTimeEntry, switchIpMask=switchIpMask, varPoEWarningTrap=varPoEWarningTrap, emailWarningEventPortTrafficDuration=emailWarningEventPortTrafficDuration, turboRingPortDesignatedBridge=turboRingPortDesignatedBridge, portMDI=portMDI, spanningTreeMaxAge=spanningTreeMaxAge, trunkSettingEntry=trunkSettingEntry, dnsServer2IpAddr=dnsServer2IpAddr, poeTPortIndex=poeTPortIndex, localLeap59=localLeap59, varturboRingMasterChangedTrap=varturboRingMasterChangedTrap, localArbTime=localArbTime, staticPortLockStatus=staticPortLockStatus, portAccessControlEntry=portAccessControlEntry, dhcpRelayAgentSetting=dhcpRelayAgentSetting, vlan=vlan, transport=transport, dot1xReauthTable=dot1xReauthTable, endMonth=endMonth, turboRingV2Ring2=turboRingV2Ring2, portSpeed=portSpeed, poePortEnable=poePortEnable, trunkEntry=trunkEntry, syslogServer2port=syslogServer2port, cpuLoading300s=cpuLoading300s, qosClassification=qosClassification, localUtcOffset=localUtcOffset, turboChainRole=turboChainRole, priority1=priority1, snmpTrapCommunity=snmpTrapCommunity, portbaseVlanSettingIndex=portbaseVlanSettingIndex, turboRingDesignatedMaster=turboRingDesignatedMaster, defaultGateway=defaultGateway, monitorDiEntry=monitorDiEntry, setDeviceIp=setDeviceIp, joinedHybridPorts=joinedHybridPorts, turboRingV2=turboRingV2, tosClass=tosClass, monitorTraffic=monitorTraffic, varconfigChangeTrap=varconfigChangeTrap, turboRingPortTable=turboRingPortTable, pdipaddr=pdipaddr, power1InputStatus=power1InputStatus, multicastFiltering=multicastFiltering, inspectTos=inspectTos, tacacsLoginAuthServer=tacacsLoginAuthServer, ptpPortEnable=ptpPortEnable, poeporttimetabling=poeporttimetabling, dhcpServer4=dhcpServer4, emailWarningEventDiInputOn2Off=emailWarningEventDiInputOn2Off, dot1x1stRadiusServer=dot1x1stRadiusServer, emailWarningEventDiInputOff2On=emailWarningEventDiInputOff2On, portAccessControlStatus=portAccessControlStatus, enableQuerier=enableQuerier, ageTime=ageTime, localPtpTimescale=localPtpTimescale, memoryUsage=memoryUsage, syncInterval=syncInterval, emailWarningFourthEmailAddr=emailWarningFourthEmailAddr, radiusLoginAuthTimeout=radiusLoginAuthTimeout, rdnt1stPortRing2=rdnt1stPortRing2, gmrpTable=gmrpTable, relayWarningPower1OffStatus=relayWarningPower1OffStatus, snmpTrap2Community=snmpTrap2Community, tacacsLoginAuthSharedKey=tacacsLoginAuthSharedKey, spanningTreeTable=spanningTreeTable, eventlogTable=eventlogTable, dhcpFunctionEntry=dhcpFunctionEntry, dhcpPortIndex=dhcpPortIndex, monitorSFPEntry=monitorSFPEntry, dhcpRetryPeriods=dhcpRetryPeriods, portAccessControlPortNo=portAccessControlPortNo, enableAccessibleIP=enableAccessibleIP, relayWarningPower1Off=relayWarningPower1Off, dot1xSettingTable=dot1xSettingTable, couplingEnable=couplingEnable, trap2ServerAddr=trap2ServerAddr, igmpSnooping=igmpSnooping, turboRingV2Ring1=turboRingV2Ring1, consoleLoginMode=consoleLoginMode, couplingMode=couplingMode, eventlogEvent=eventlogEvent, portAccessControl=portAccessControl, redundancyTopologyChangedTrap=redundancyTopologyChangedTrap, staticPortLockAddress=staticPortLockAddress, emailWarningEventDiEntry=emailWarningEventDiEntry, coupling2ndPort=coupling2ndPort, emailWarningMailServer=emailWarningMailServer, dhcpFunctionTable=dhcpFunctionTable, dot1xReauthPortIndex=dot1xReauthPortIndex, igmpSnoopingSettingEntry=igmpSnoopingSettingEntry, radiusServerSetting=radiusServerSetting, eventlogEntry=eventlogEntry, queuingMechanism=queuingMechanism, masterStatusRing2=masterStatusRing2, monitorPortEntry=monitorPortEntry, ptpTimescale=ptpTimescale, tacacsLoginAuthAuthType=tacacsLoginAuthAuthType, turboRingPortStatus=turboRingPortStatus, relayWarningRelayContact=relayWarningRelayContact, enablePtpv1=enablePtpv1, loopProtection=loopProtection, diagnosis=diagnosis, enableDot1X=enableDot1X, turboRingMasterChangedTrap=turboRingMasterChangedTrap, spanningTreeForwardingDelay=spanningTreeForwardingDelay, relayWarningRxTrafficThreshold=relayWarningRxTrafficThreshold, rdnt2ndPortStatusRing2=rdnt2ndPortStatusRing2, vlanId=vlanId, dipSwitchSetting=dipSwitchSetting, meanPathDelay=meanPathDelay, vlanType=vlanType, turboRingPortEntry=turboRingPortEntry, emailWarningEventPortTable=emailWarningEventPortTable, dot1x2ndRadiusServer=dot1x2ndRadiusServer, power1Trap=power1Trap, dot1xSameAsAuthServer=dot1xSameAsAuthServer, limitMode=limitMode, cosMappingEntry=cosMappingEntry, staticPortLockPort=staticPortLockPort, eipSetting=eipSetting, radiusLoginAuthSharedKey=radiusLoginAuthSharedKey, mirroring=mirroring, syslogSetting=syslogSetting, timesource=timesource, lineSwapRecovery=lineSwapRecovery, portAccessControlAddress=portAccessControlAddress, relayWarningDiInputChangedStatus=relayWarningDiInputChangedStatus, turboChainPort1=turboChainPort1, egressLimit=egressLimit, lldpMSGInterval=lldpMSGInterval, turboRingMasterSetup=turboRingMasterSetup, accessibleIpStatus=accessibleIpStatus, rateLimitingMode=rateLimitingMode, portTrunking=portTrunking, lldpSetting=lldpSetting, coupling2ndPortStatus=coupling2ndPortStatus, garpSetting=garpSetting, syncIntervalv1=syncIntervalv1, emailWarning=emailWarning, vlanPortSettingTable=vlanPortSettingTable, eventlogClear=eventlogClear, leap61=leap61, localUtcOffsetValid=localUtcOffsetValid, power2Trap=power2Trap, ringIndexRing1=ringIndexRing1, portVlanType=portVlanType)
mibBuilder.exportSymbols("MOXA-EDSP510A8POE-MIB", staticMulticastPorts=staticMulticastPorts, firmwarePathName=firmwarePathName, leaveAllTime=leaveAllTime, dhcpServer2=dhcpServer2, portDisableModePeriod=portDisableModePeriod, dhcpRetryTimes=dhcpRetryTimes, option82Enable=option82Enable, relayWarningLinkChangedStatus=relayWarningLinkChangedStatus, monitorTxTraffic=monitorTxTraffic, emailWarningEventAuthFail=emailWarningEventAuthFail, varredundancyTopologyChangedTrap=varredundancyTopologyChangedTrap, portIndex=portIndex, sfpVoltage=sfpVoltage, relayWarningTurboRingBreakStatus=relayWarningTurboRingBreakStatus, cpuLoading5s=cpuLoading5s, diRelayWarningTable=diRelayWarningTable)
