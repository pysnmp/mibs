#
# PySNMP MIB module SIAE-SENSOR-TEMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/siae/SIAE-SENSOR-TEMP-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 13:57:06 2024
# On host fv-az1110-484 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
AlarmSeverityCode, AlarmStatus = mibBuilder.importSymbols("SIAE-ALARM-MIB", "AlarmSeverityCode", "AlarmStatus")
siaeMib, = mibBuilder.importSymbols("SIAE-TREE-MIB", "siaeMib")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Integer32, Gauge32, TimeTicks, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter32, IpAddress, Bits, ObjectIdentity, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "Gauge32", "TimeTicks", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter32", "IpAddress", "Bits", "ObjectIdentity", "MibIdentifier", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sensorTemp = ModuleIdentity((1, 3, 6, 1, 4, 1, 3373, 1103, 77))
sensorTemp.setRevisions(('2016-05-03 00:00', '2014-03-31 00:00',))
if mibBuilder.loadTexts: sensorTemp.setLastUpdated('201605030000Z')
if mibBuilder.loadTexts: sensorTemp.setOrganization('SIAE MICROELETTRONICA spa')
sensorTempMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTempMibVersion.setStatus('current')
sensorTempTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 2), )
if mibBuilder.loadTexts: sensorTempTable.setStatus('current')
sensorTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 2, 1), ).setIndexNames((0, "SIAE-SENSOR-TEMP-MIB", "sensorTempIndex"))
if mibBuilder.loadTexts: sensorTempEntry.setStatus('current')
sensorTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTempIndex.setStatus('current')
sensorTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTempValue.setStatus('current')
sensorTempThreshold1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTempThreshold1.setStatus('current')
sensorTempThreshold2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTempThreshold2.setStatus('current')
sensorTempHysteresis1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTempHysteresis1.setStatus('current')
sensorTempHysteresis2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTempHysteresis2.setStatus('current')
sensorTempStatus1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cleared", 1), ("alarmed", 2), ("hysteresis", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTempStatus1.setStatus('current')
sensorTempStatus2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cleared", 1), ("alarmed", 2), ("hysteresis", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTempStatus2.setStatus('current')
sensorTempLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTempLabel.setStatus('current')
sensorTempAlarmThreshold1 = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 3), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTempAlarmThreshold1.setStatus('current')
sensorTempAlarmThreshold2 = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 4), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTempAlarmThreshold2.setStatus('current')
sensorTempAlarmThreshold1Severity = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 5), AlarmSeverityCode().clone('warningTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTempAlarmThreshold1Severity.setStatus('current')
sensorTempAlarmThreshold2Severity = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 6), AlarmSeverityCode().clone('criticalTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTempAlarmThreshold2Severity.setStatus('current')
sensorTempMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 7), )
if mibBuilder.loadTexts: sensorTempMonitorTable.setStatus('current')
sensorTempMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 7, 1), ).setIndexNames((0, "SIAE-SENSOR-TEMP-MIB", "sensorTempIndex"))
if mibBuilder.loadTexts: sensorTempMonitorEntry.setStatus('current')
sensorTempMonitorAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTempMonitorAdminStatus.setStatus('current')
sensorTempMonitorOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTempMonitorOperStatus.setStatus('current')
sensorTempMonitorMinTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTempMonitorMinTemp.setStatus('current')
sensorTempMonitorMaxTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTempMonitorMaxTemp.setStatus('current')
sensorTempMonitorAverageTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTempMonitorAverageTemp.setStatus('current')
sensorTempMonitorSystemControl = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 77, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("shutdown", 2))).clone('shutdown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTempMonitorSystemControl.setStatus('current')
mibBuilder.exportSymbols("SIAE-SENSOR-TEMP-MIB", sensorTempAlarmThreshold1=sensorTempAlarmThreshold1, sensorTempStatus1=sensorTempStatus1, sensorTempMonitorMinTemp=sensorTempMonitorMinTemp, sensorTempIndex=sensorTempIndex, sensorTempMonitorAverageTemp=sensorTempMonitorAverageTemp, sensorTempThreshold2=sensorTempThreshold2, sensorTempMonitorMaxTemp=sensorTempMonitorMaxTemp, sensorTempMibVersion=sensorTempMibVersion, PYSNMP_MODULE_ID=sensorTemp, sensorTempMonitorEntry=sensorTempMonitorEntry, sensorTempAlarmThreshold2=sensorTempAlarmThreshold2, sensorTempLabel=sensorTempLabel, sensorTempAlarmThreshold2Severity=sensorTempAlarmThreshold2Severity, sensorTemp=sensorTemp, sensorTempHysteresis1=sensorTempHysteresis1, sensorTempMonitorSystemControl=sensorTempMonitorSystemControl, sensorTempMonitorOperStatus=sensorTempMonitorOperStatus, sensorTempValue=sensorTempValue, sensorTempMonitorAdminStatus=sensorTempMonitorAdminStatus, sensorTempStatus2=sensorTempStatus2, sensorTempEntry=sensorTempEntry, sensorTempThreshold1=sensorTempThreshold1, sensorTempAlarmThreshold1Severity=sensorTempAlarmThreshold1Severity, sensorTempHysteresis2=sensorTempHysteresis2, sensorTempMonitorTable=sensorTempMonitorTable, sensorTempTable=sensorTempTable)
