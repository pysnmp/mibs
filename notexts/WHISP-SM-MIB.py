#
# PySNMP MIB module WHISP-SM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/cambium/WHISP-SM-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 08:15:56 2024
# On host fv-az530-683 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, Gauge32, NotificationType, Integer32, Counter32, Counter64, Unsigned32, iso, MibIdentifier, Bits, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "NotificationType", "Integer32", "Counter32", "Counter64", "Unsigned32", "iso", "MibIdentifier", "Bits", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
MacAddress, TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "PhysAddress", "DisplayString")
whispBoxEsn, dhcpRfPublicIp = mibBuilder.importSymbols("WHISP-BOX-MIBV2-MIB", "whispBoxEsn", "dhcpRfPublicIp")
whispModules, whispBox, whispSm, whispAps = mibBuilder.importSymbols("WHISP-GLOBAL-REG-MIB", "whispModules", "whispBox", "whispSm", "whispAps")
WhispMACAddress, WhispLUID = mibBuilder.importSymbols("WHISP-TCV2-MIB", "WhispMACAddress", "WhispLUID")
whispSmMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 161, 19, 1, 1, 13))
if mibBuilder.loadTexts: whispSmMibModule.setLastUpdated('200304150000Z')
if mibBuilder.loadTexts: whispSmMibModule.setOrganization('Cambium Networks')
whispSmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1))
whispSmSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 7))
whispSmStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2))
whispSmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 3))
whispSmEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 4))
whispSmDfsEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 4, 1))
whispSmSpAnEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 4, 2))
whispSmDHCPClientEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 4, 3))
whispSmControls = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 8))
rfScanList = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfScanList.setStatus('current')
powerUpMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("operational", 0), ("aim", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerUpMode.setStatus('current')
lanIpSm = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIpSm.setStatus('current')
lanMaskSm = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanMaskSm.setStatus('current')
defaultGwSm = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultGwSm.setStatus('current')
networkAccess = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("localIP", 0), ("publicIP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkAccess.setStatus('current')
authKeySm = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authKeySm.setStatus('current')
enable8023link = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable8023link.setStatus('deprecated')
authKeyOption = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("useDefault", 0), ("useKeySet", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authKeyOption.setStatus('current')
timingPulseGated = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timingPulseGated.setStatus('current')
naptPrivateIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: naptPrivateIP.setStatus('current')
naptPrivateSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: naptPrivateSubnetMask.setStatus('current')
naptPublicIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: naptPublicIP.setStatus('current')
naptPublicSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: naptPublicSubnetMask.setStatus('current')
naptPublicGatewayIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: naptPublicGatewayIP.setStatus('current')
naptRFPublicIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: naptRFPublicIP.setStatus('current')
naptRFPublicSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: naptRFPublicSubnetMask.setStatus('current')
naptRFPublicGateway = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: naptRFPublicGateway.setStatus('current')
naptEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: naptEnable.setStatus('current')
arpCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpCacheTimeout.setStatus('current')
tcpGarbageCollectTmout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpGarbageCollectTmout.setStatus('current')
udpGarbageCollectTmout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpGarbageCollectTmout.setStatus('current')
dhcpClientEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientEnable.setStatus('obsolete')
dhcpServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerEnable.setStatus('current')
dhcpServerLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerLeaseTime.setStatus('current')
dhcpIPStart = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpIPStart.setStatus('current')
dnsAutomatic = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("manually", 0), ("automatically", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsAutomatic.setStatus('current')
prefferedDNSIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prefferedDNSIP.setStatus('current')
alternateDNSIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alternateDNSIP.setStatus('current')
dmzIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 30), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmzIP.setStatus('current')
dmzEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmzEnable.setStatus('current')
dhcpNumIPsToLease = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpNumIPsToLease.setStatus('current')
pppoeFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeFilter.setStatus('obsolete')
smbFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smbFilter.setStatus('obsolete')
snmpFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpFilter.setStatus('obsolete')
userP1Filter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userP1Filter.setStatus('obsolete')
userP2Filter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userP2Filter.setStatus('obsolete')
userP3Filter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userP3Filter.setStatus('obsolete')
allOtherIpFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allOtherIpFilter.setStatus('obsolete')
upLinkBCastFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upLinkBCastFilter.setStatus('obsolete')
arpFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpFilter.setStatus('obsolete')
allOthersFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allOthersFilter.setStatus('obsolete')
userDefinedPort1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userDefinedPort1.setStatus('obsolete')
port1TCPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port1TCPFilter.setStatus('obsolete')
port1UDPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port1UDPFilter.setStatus('obsolete')
userDefinedPort2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userDefinedPort2.setStatus('obsolete')
port2TCPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port2TCPFilter.setStatus('obsolete')
port2UDPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port2UDPFilter.setStatus('obsolete')
userDefinedPort3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userDefinedPort3.setStatus('obsolete')
port3TCPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port3TCPFilter.setStatus('obsolete')
port3UDPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port3UDPFilter.setStatus('obsolete')
bootpcFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpcFilter.setStatus('obsolete')
bootpsFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpsFilter.setStatus('obsolete')
ip4MultFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ip4MultFilter.setStatus('obsolete')
ingressVID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressVID.setStatus('current')
lowPriorityUplinkCIR = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowPriorityUplinkCIR.setStatus('current')
lowPriorityDownlinkCIR = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowPriorityDownlinkCIR.setStatus('current')
hiPriorityChannel = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hiPriorityChannel.setStatus('current')
hiPriorityUplinkCIR = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hiPriorityUplinkCIR.setStatus('current')
hiPriorityDownlinkCIR = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hiPriorityDownlinkCIR.setStatus('current')
smRateAdapt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("onex", 0), ("onextwox", 1), ("onextwoxthreex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smRateAdapt.setStatus('obsolete')
upLnkDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upLnkDataRate.setStatus('current')
upLnkLimit = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 63), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upLnkLimit.setStatus('current')
dwnLnkDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 64), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dwnLnkDataRate.setStatus('current')
dwnLnkLimit = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 65), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dwnLnkLimit.setStatus('current')
dfsConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfsConfig.setStatus('obsolete')
ethAccessFilterEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethAccessFilterEnable.setStatus('obsolete')
ipAccessFilterEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAccessFilterEnable.setStatus('current')
allowedIPAccess1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 69), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccess1.setStatus('current')
allowedIPAccess2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 70), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccess2.setStatus('current')
allowedIPAccess3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 71), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccess3.setStatus('current')
rfDhcpState = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfDhcpState.setStatus('current')
bCastMIR = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bCastMIR.setStatus('current')
bhsReReg = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bhsReReg.setStatus('obsolete')
smLEDModeFlag = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("legacy", 0), ("revised", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smLEDModeFlag.setStatus('current')
ethAccessEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethAccessEnable.setStatus('current')
pppoeEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeEnable.setStatus('current')
pppoeAuthenticationType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("chap-pap", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeAuthenticationType.setStatus('current')
pppoeAccessConcentrator = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 79), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeAccessConcentrator.setStatus('current')
pppoeServiceName = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 80), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeServiceName.setStatus('current')
pppoeUserName = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 81), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeUserName.setStatus('current')
pppoePassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 82), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePassword.setStatus('current')
pppoeTCPMSSClampEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeTCPMSSClampEnable.setStatus('current')
pppoeMTUOverrideEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeMTUOverrideEnable.setStatus('current')
pppoeMTUOverrideValue = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1492))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeMTUOverrideValue.setStatus('current')
pppoeTimerType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("keepAlive", 1), ("idleTimeout", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeTimerType.setStatus('current')
pppoeTimeoutPeriod = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 87), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeTimeoutPeriod.setStatus('current')
timedSpectrumAnalysisDuration = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timedSpectrumAnalysisDuration.setStatus('deprecated')
spectrumAnalysisOnBoot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spectrumAnalysisOnBoot.setStatus('current')
spectrumAnalysisAction = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("stopSpectrumAnalysis", 0), ("startTimedSpectrumAnalysis", 1), ("startContinuousSpectrumAnalysis", 2), ("idleNoSpectrumAnalysis", 3), ("idleCompleteSpectrumAnalysis", 4), ("inProgressTimedSpectrumAnalysis", 5), ("inProgressContinuousSpectrumAnalysis", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spectrumAnalysisAction.setStatus('deprecated')
pppoeConnectOD = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("connectOnDemand", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeConnectOD.setStatus('current')
pppoeDisconnectOD = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("disconnectOnDemand", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeDisconnectOD.setStatus('current')
smAntennaType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("integrated", 0), ("external", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smAntennaType.setStatus('obsolete')
natConnectionType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("staticIP", 0), ("dhcp", 1), ("pppoe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: natConnectionType.setStatus('current')
wanPingReplyEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanPingReplyEnable.setStatus('current')
packetFilterDirection = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 96), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upstream", 1), ("downstream", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: packetFilterDirection.setStatus('obsolete')
colorCode2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCode2.setStatus('deprecated')
colorCodepriority2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 0))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("tertiary", 3), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCodepriority2.setStatus('deprecated')
colorCode3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCode3.setStatus('deprecated')
colorCodepriority3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 0))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("tertiary", 3), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCodepriority3.setStatus('deprecated')
colorCode4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCode4.setStatus('deprecated')
colorCodepriority4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 0))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("tertiary", 3), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCodepriority4.setStatus('deprecated')
colorCode5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 103), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCode5.setStatus('deprecated')
colorCodepriority5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 0))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("tertiary", 3), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCodepriority5.setStatus('deprecated')
colorCode6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 105), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCode6.setStatus('deprecated')
colorCodepriority6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 0))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("tertiary", 3), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCodepriority6.setStatus('deprecated')
colorCode7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 107), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCode7.setStatus('deprecated')
colorCodepriority7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 0))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("tertiary", 3), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCodepriority7.setStatus('deprecated')
colorCode8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 109), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCode8.setStatus('deprecated')
colorCodepriority8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 0))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("tertiary", 3), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCodepriority8.setStatus('deprecated')
colorCode9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 111), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCode9.setStatus('deprecated')
colorCodepriority9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 0))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("tertiary", 3), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCodepriority9.setStatus('deprecated')
colorCode10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 113), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCode10.setStatus('deprecated')
colorCodepriority10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 114), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 0))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("tertiary", 3), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCodepriority10.setStatus('deprecated')
natDNSProxyEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 115), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: natDNSProxyEnable.setStatus('current')
allIpv4Filter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allIpv4Filter.setStatus('obsolete')
spectrumAnalysisDisplay = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 117), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("averaging", 0), ("instantaneous", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spectrumAnalysisDisplay.setStatus('current')
syslogSMXmitSetting = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 118), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("obtain-from-AP", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSMXmitSetting.setStatus('deprecated')
syslogServerApPreferred = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 119), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("use-local", 0), ("use-AP-preferred", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerApPreferred.setStatus('current')
syslogMinLevelApPreferred = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 120), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("use-local", 0), ("use-AP-preferred", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogMinLevelApPreferred.setStatus('current')
syslogSMXmitControl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 121), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("obtain-from-AP-default-disabled", 0), ("obtain-from-AP-default-enabled", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSMXmitControl.setStatus('current')
eapPeerAAAServerCommonName = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 126), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapPeerAAAServerCommonName.setStatus('current')
rfScanListBandFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 127), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 9))).clone(namedValues=NamedValues(("band5400", 8), ("band5700", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfScanListBandFilter.setStatus('obsolete')
upLnkMaxBurstDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 128), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upLnkMaxBurstDataRate.setStatus('current')
dwnLnkMaxBurstDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 129), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dwnLnkMaxBurstDataRate.setStatus('current')
cyclicPrefixScan = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 130), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cyclicPrefixScan.setStatus('current')
bandwidthScan = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 131), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthScan.setStatus('current')
apSelection = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 132), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("powerLevel", 1), ("optimizeForThroughput", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSelection.setStatus('current')
radioBandscanConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 133), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("instant", 0), ("delayed", 1), ("apply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioBandscanConfig.setStatus('current')
forcepoweradjust = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 134), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forcepoweradjust.setStatus('current')
clearBerrResults = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 135), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearBerrResults.setStatus('current')
berrautoupdateflag = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 136), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berrautoupdateflag.setStatus('current')
testSMBER = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 137), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: testSMBER.setStatus('current')
allowedIPAccessNMLength1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 138), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccessNMLength1.setStatus('current')
allowedIPAccessNMLength2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 139), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccessNMLength2.setStatus('current')
allowedIPAccessNMLength3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 140), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccessNMLength3.setStatus('current')
naptRemoteManage = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 141), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable-standalone", 1), ("enable-wan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: naptRemoteManage.setStatus('current')
spectrumAnalysisScanBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 142), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bandwidth5MHz", 0), ("bandwidth10MHz", 1), ("bandwidth20MHz", 2), ("bandwidth7MHz", 3), ("bandwidth15MHz", 4), ("bandwidth30MHz", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spectrumAnalysisScanBandwidth.setStatus('current')
berDeModSelect = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 143), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("qpsk", 0), ("qam-16", 1), ("qam-64", 2), ("qam-256", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berDeModSelect.setStatus('current')
multicastVCRcvRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 144), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastVCRcvRate.setStatus('current')
pmp430ApRegistrationOptions = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 145), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pmp430", 1), ("pmp450", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmp430ApRegistrationOptions.setStatus('deprecated')
switchRadioModeAndReboot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 146), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("finishedReboot", 0), ("switchRadioModeAndReboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchRadioModeAndReboot.setStatus('obsolete')
natTslTableSize = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 147), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: natTslTableSize.setStatus('current')
ingressVIDPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 148), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressVIDPriority.setStatus('current')
ingressVIDPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 149), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressVIDPriorityMode.setStatus('current')
providerVIDPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 150), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: providerVIDPriority.setStatus('current')
providerVIDPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 151), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1), ("copy-inner-tag-priority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: providerVIDPriorityMode.setStatus('current')
additionalColorCode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 152), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: additionalColorCode.setStatus('current')
additionalColorCodePriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 153), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("tertiary", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: additionalColorCodePriority.setStatus('current')
deleteAdditionalColorCode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 154), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deleteAdditionalColorCode.setStatus('current')
bCastMIRUnits = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 155), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("kbps", 0), ("pps", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bCastMIRUnits.setStatus('current')
txPowerControl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 157), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPowerControl.setStatus('current')
bridgeTableSize = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 158), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeTableSize.setStatus('current')
bridgeTableRestrict = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 159), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeTableRestrict.setStatus('current')
maxTxPowerEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 160), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxTxPowerEnable.setStatus('current')
maxTxPower = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 161), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 27))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxTxPower.setStatus('current')
rfScanListTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 156), )
if mibBuilder.loadTexts: rfScanListTable.setStatus('current')
rfScanListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 156, 1), ).setIndexNames((0, "WHISP-SM-MIB", "rfScanListFrequency"))
if mibBuilder.loadTexts: rfScanListEntry.setStatus('current')
rfScanListFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 1, 156, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfScanListFrequency.setStatus('current')
numAuthCerts = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numAuthCerts.setStatus('current')
authenticationEnforce = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("aaa", 1), ("presharedkey", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authenticationEnforce.setStatus('current')
phase1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("eapttls", 0), ("eapMSChapV2", 1), ("eappeap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phase1.setStatus('current')
phase2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pap", 0), ("chap", 1), ("mschapv2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phase2.setStatus('current')
authOuterId = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 7, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 253))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authOuterId.setStatus('current')
authPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 7, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authPassword.setStatus('current')
authUsername = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 7, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authUsername.setStatus('current')
useRealm = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useRealm.setStatus('current')
realm = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 7, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realm.setStatus('current')
certTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 7, 1), )
if mibBuilder.loadTexts: certTable.setStatus('current')
certEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 7, 1, 1), ).setIndexNames((0, "WHISP-SM-MIB", "certIndex"))
if mibBuilder.loadTexts: certEntry.setStatus('current')
certIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: certIndex.setStatus('current')
cert = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cert.setStatus('current')
action = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noop", 0), ("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: action.setStatus('current')
certificateDN = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 7, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certificateDN.setStatus('current')
sessionStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatus.setStatus('current')
rssi = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rssi.setStatus('current')
jitter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jitter.setStatus('current')
airDelay = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airDelay.setStatus('current')
radioSlicingSm = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioSlicingSm.setStatus('obsolete')
radioTxGainSm = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioTxGainSm.setStatus('current')
calibrationStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calibrationStatus.setStatus('deprecated')
radioDbm = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioDbm.setStatus('current')
registeredToAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: registeredToAp.setStatus('current')
dhcpCip = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpCip.setStatus('current')
dhcpSip = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSip.setStatus('current')
dhcpClientLease = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientLease.setStatus('current')
dhcpCSMask = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpCSMask.setStatus('current')
dhcpDfltRterIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDfltRterIP.setStatus('current')
dhcpcdns1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpcdns1.setStatus('current')
dhcpcdns2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpcdns2.setStatus('current')
dhcpcdns3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpcdns3.setStatus('current')
dhcpDomName = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDomName.setStatus('current')
adaptRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptRate.setStatus('current')
radioDbmInt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioDbmInt.setStatus('current')
dfsStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsStatus.setStatus('current')
radioTxPwr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioTxPwr.setStatus('current')
activeRegion = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeRegion.setStatus('current')
snmpBerLevel = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 6, 8))).clone(namedValues=NamedValues(("twoLevelOrMimoQPSK", 2), ("fourLevelOrMimo16QAM", 4), ("mimo64QAM", 6), ("mimo256QAM", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpBerLevel.setStatus('current')
nbBitsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbBitsRcvd.setStatus('current')
nbPriBitsErr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbPriBitsErr.setStatus('current')
nbSndBitsErr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSndBitsErr.setStatus('current')
primaryBER = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryBER.setStatus('obsolete')
secondaryBER = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secondaryBER.setStatus('obsolete')
totalBER = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBER.setStatus('obsolete')
minRSSI = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minRSSI.setStatus('current')
maxRSSI = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxRSSI.setStatus('current')
minJitter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 34), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: minJitter.setStatus('current')
maxJitter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 35), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxJitter.setStatus('current')
smSessionTimer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 36), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSessionTimer.setStatus('current')
pppoeSessionStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeSessionStatus.setStatus('current')
pppoeSessionID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeSessionID.setStatus('current')
pppoeIPCPAddress = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 39), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeIPCPAddress.setStatus('current')
pppoeMTUOverrideEn = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeMTUOverrideEn.setStatus('current')
pppoeMTUValue = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeMTUValue.setStatus('current')
pppoeTimerTypeValue = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("keepAlive", 1), ("idleTimeout", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeTimerTypeValue.setStatus('current')
pppoeTimeoutValue = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeTimeoutValue.setStatus('current')
pppoeDNSServer1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 44), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeDNSServer1.setStatus('current')
pppoeDNSServer2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 45), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeDNSServer2.setStatus('current')
pppoeControlBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeControlBytesSent.setStatus('current')
pppoeControlBytesReceived = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeControlBytesReceived.setStatus('current')
pppoeDataBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeDataBytesSent.setStatus('current')
pppoeDataBytesReceived = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeDataBytesReceived.setStatus('current')
pppoeEnabledStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeEnabledStatus.setStatus('current')
pppoeTCPMSSClampEnableStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeTCPMSSClampEnableStatus.setStatus('current')
pppoeACNameStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeACNameStatus.setStatus('current')
pppoeSvcNameStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 53), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeSvcNameStatus.setStatus('current')
pppoeSessUptime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 54), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeSessUptime.setStatus('current')
primaryBERDisplay = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 55), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryBERDisplay.setStatus('current')
secondaryBERDisplay = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 56), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secondaryBERDisplay.setStatus('current')
totalBERDisplay = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 57), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBERDisplay.setStatus('current')
minRadioDbm = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minRadioDbm.setStatus('current')
maxRadioDbm = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxRadioDbm.setStatus('current')
pppoeSessIdleTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 60), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeSessIdleTime.setStatus('current')
radioDbmAvg = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioDbmAvg.setStatus('current')
zoltarFPGAFreqOffset = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoltarFPGAFreqOffset.setStatus('current')
zoltarSWFreqOffset = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoltarSWFreqOffset.setStatus('current')
airDelayns = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 64), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airDelayns.setStatus('current')
currentColorCode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentColorCode.setStatus('current')
currentColorCodePri = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("secondary", 2), ("tertiary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentColorCodePri.setStatus('current')
currentChanFreq = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 67), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentChanFreq.setStatus('current')
linkQualityBeacon = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 68), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkQualityBeacon.setStatus('current')
dhcpServerPktXmt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerPktXmt.setStatus('current')
dhcpServerPktRcv = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerPktRcv.setStatus('current')
dhcpServerPktToss = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerPktToss.setStatus('current')
receiveFragmentsModulationPercentage = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 86), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveFragmentsModulationPercentage.setStatus('current')
fragmentsReceived1XVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragmentsReceived1XVertical.setStatus('current')
fragmentsReceived2XVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragmentsReceived2XVertical.setStatus('current')
fragmentsReceived3XVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragmentsReceived3XVertical.setStatus('current')
fragmentsReceived4XVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragmentsReceived4XVertical.setStatus('current')
linkQualityData1XVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 91), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkQualityData1XVertical.setStatus('current')
linkQualityData2XVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 92), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkQualityData2XVertical.setStatus('current')
linkQualityData3XVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 93), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkQualityData3XVertical.setStatus('current')
linkQualityData4XVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 94), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkQualityData4XVertical.setStatus('current')
signalToNoiseRatioSMVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioSMVertical.setStatus('current')
rfStatTxSuppressionCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatTxSuppressionCount.setStatus('current')
bridgecbUplinkCreditRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 97), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgecbUplinkCreditRate.setStatus('current')
bridgecbUplinkCreditLimit = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 98), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgecbUplinkCreditLimit.setStatus('current')
bridgecbDownlinkCreditRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 99), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgecbDownlinkCreditRate.setStatus('current')
bridgecbDownlinkCreditLimit = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 100), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgecbDownlinkCreditLimit.setStatus('current')
mimoQpskBerDisplay = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mimoQpskBerDisplay.setStatus('current')
mimo16QamBerDisplay = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mimo16QamBerDisplay.setStatus('current')
mimo64QamBerDisplay = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mimo64QamBerDisplay.setStatus('current')
mimo256QamBerDisplay = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 104), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mimo256QamBerDisplay.setStatus('current')
mimoBerRcvModulationType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 105), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mimoBerRcvModulationType.setStatus('current')
signalToNoiseRatioSMHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 106), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioSMHorizontal.setStatus('current')
maxRadioDbmDeprecated = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 107), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxRadioDbmDeprecated.setStatus('deprecated')
signalStrengthRatio = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 108), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalStrengthRatio.setStatus('current')
fragmentsReceived1XHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 109), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragmentsReceived1XHorizontal.setStatus('current')
fragmentsReceived2XHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragmentsReceived2XHorizontal.setStatus('current')
fragmentsReceived3XHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 111), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragmentsReceived3XHorizontal.setStatus('current')
fragmentsReceived4XHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragmentsReceived4XHorizontal.setStatus('current')
linkQualityData1XHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 113), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkQualityData1XHorizontal.setStatus('current')
linkQualityData2XHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 114), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkQualityData2XHorizontal.setStatus('current')
linkQualityData3XHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 115), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkQualityData3XHorizontal.setStatus('current')
linkQualityData4XHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 116), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkQualityData4XHorizontal.setStatus('current')
radioDbmHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 117), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioDbmHorizontal.setStatus('current')
radioDbmVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 118), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioDbmVertical.setStatus('current')
bridgecbDownlinkMaxBurstBitRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 119), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgecbDownlinkMaxBurstBitRate.setStatus('current')
bridgecbUplinkMaxBurstBitRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 120), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgecbUplinkMaxBurstBitRate.setStatus('current')
currentCyclicPrefix = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 121), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("one-quarter", 0), ("one-eighth", 1), ("one-sixteenth", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentCyclicPrefix.setStatus('current')
currentBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 122), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("bandwidth5mhz", 1), ("bandwidth7MHz", 2), ("bandwidth10mhz", 3), ("bandwidth15mhz", 4), ("bandwidth20mhz", 5), ("bandwidth30mhz", 6), ("bandwidth40MHz", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentBandwidth.setStatus('current')
berPwrRxFPGAPathA = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 123), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berPwrRxFPGAPathA.setStatus('current')
berPwrRxFPGAPathB = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 124), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berPwrRxFPGAPathB.setStatus('current')
rawBERPwrRxPathA = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 125), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rawBERPwrRxPathA.setStatus('current')
rawBERPwrRxPathB = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 126), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rawBERPwrRxPathB.setStatus('current')
radioModeStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 127), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("pmp430", 1), ("pmp450Interoperability", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioModeStatus.setStatus('deprecated')
adaptRateLowPri = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 128), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 8))).clone(namedValues=NamedValues(("noSession", 0), ("rate1X", 1), ("rate2X", 2), ("rete3X", 3), ("rate4X", 4), ("rate6X", 6), ("rate8X", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptRateLowPri.setStatus('current')
adaptRateHighPri = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 129), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 6, 8))).clone(namedValues=NamedValues(("noHighPriorityChannel", -1), ("noSession", 0), ("rate1X", 1), ("rate2X", 2), ("rete3X", 3), ("rate4X", 4), ("rate6X", 6), ("rate8X", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptRateHighPri.setStatus('current')
bitErrorsQSPKpathA = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 130), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsQSPKpathA.setStatus('current')
bitErrorsQSPKpathB = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 131), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsQSPKpathB.setStatus('current')
bitErrors16QAMpathA = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 132), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrors16QAMpathA.setStatus('current')
bitErrors16QAMpathB = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 133), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrors16QAMpathB.setStatus('current')
bitErrors64QAMpathA = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 134), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrors64QAMpathA.setStatus('current')
bitErrors64QAMpathB = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 135), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrors64QAMpathB.setStatus('current')
bitErrors256QAMpathA = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 136), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrors256QAMpathA.setStatus('current')
bitErrors256QAMpathB = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 137), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrors256QAMpathB.setStatus('current')
bitsReceivedPerPathModulation = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 138), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsReceivedPerPathModulation.setStatus('current')
beaconsPercentReceived = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 139), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: beaconsPercentReceived.setStatus('current')
mapsPercentReceived = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 140), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mapsPercentReceived.setStatus('current')
natTslTableEntries = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 141), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natTslTableEntries.setStatus('current')
maxReceivePower = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 142), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxReceivePower.setStatus('current')
beaconsPercentMinReceived = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 143), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: beaconsPercentMinReceived.setStatus('current')
beaconsPercentMaxReceived = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 144), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: beaconsPercentMaxReceived.setStatus('current')
beaconsPercentReceivedSnapshot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 145), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: beaconsPercentReceivedSnapshot.setStatus('current')
smSectorID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 146), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSectorID.setStatus('current')
scanCycleCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 147), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scanCycleCount.setStatus('current')
bridgeCbErrStatBridgeDropCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 148), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbErrStatBridgeDropCount.setStatus('current')
dhcpServerTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 19), )
if mibBuilder.loadTexts: dhcpServerTable.setStatus('current')
dhcpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 19, 1), ).setIndexNames((0, "WHISP-SM-MIB", "hostIp"))
if mibBuilder.loadTexts: dhcpServerEntry.setStatus('current')
hostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 19, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIp.setStatus('current')
hostMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 19, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostMacAddress.setStatus('current')
hostLease = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 2, 19, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostLease.setStatus('current')
whispSmConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 3, 1)).setObjects(("WHISP-SM-MIB", "rfScanListBandFilter"), ("WHISP-SM-MIB", "rfScanList"), ("WHISP-SM-MIB", "powerUpMode"), ("WHISP-SM-MIB", "lanIpSm"), ("WHISP-SM-MIB", "lanMaskSm"), ("WHISP-SM-MIB", "defaultGwSm"), ("WHISP-SM-MIB", "networkAccess"), ("WHISP-SM-MIB", "authKeySm"), ("WHISP-SM-MIB", "enable8023link"), ("WHISP-SM-MIB", "authKeyOption"), ("WHISP-SM-MIB", "timingPulseGated"), ("WHISP-SM-MIB", "naptPrivateIP"), ("WHISP-SM-MIB", "naptPrivateSubnetMask"), ("WHISP-SM-MIB", "naptPublicIP"), ("WHISP-SM-MIB", "naptPublicSubnetMask"), ("WHISP-SM-MIB", "naptPublicGatewayIP"), ("WHISP-SM-MIB", "naptRFPublicIP"), ("WHISP-SM-MIB", "naptRFPublicSubnetMask"), ("WHISP-SM-MIB", "naptRFPublicGateway"), ("WHISP-SM-MIB", "naptEnable"), ("WHISP-SM-MIB", "arpCacheTimeout"), ("WHISP-SM-MIB", "tcpGarbageCollectTmout"), ("WHISP-SM-MIB", "udpGarbageCollectTmout"), ("WHISP-SM-MIB", "natTslTableSize"), ("WHISP-SM-MIB", "dhcpClientEnable"), ("WHISP-SM-MIB", "dhcpServerEnable"), ("WHISP-SM-MIB", "dhcpServerLeaseTime"), ("WHISP-SM-MIB", "dhcpIPStart"), ("WHISP-SM-MIB", "dnsAutomatic"), ("WHISP-SM-MIB", "prefferedDNSIP"), ("WHISP-SM-MIB", "alternateDNSIP"), ("WHISP-SM-MIB", "natDNSProxyEnable"), ("WHISP-SM-MIB", "spectrumAnalysisDisplay"), ("WHISP-SM-MIB", "dmzIP"), ("WHISP-SM-MIB", "dmzEnable"), ("WHISP-SM-MIB", "dhcpNumIPsToLease"), ("WHISP-SM-MIB", "pppoeFilter"), ("WHISP-SM-MIB", "smbFilter"), ("WHISP-SM-MIB", "snmpFilter"), ("WHISP-SM-MIB", "userP1Filter"), ("WHISP-SM-MIB", "userP2Filter"), ("WHISP-SM-MIB", "userP3Filter"), ("WHISP-SM-MIB", "allOtherIpFilter"), ("WHISP-SM-MIB", "allIpv4Filter"), ("WHISP-SM-MIB", "upLinkBCastFilter"), ("WHISP-SM-MIB", "arpFilter"), ("WHISP-SM-MIB", "allOthersFilter"), ("WHISP-SM-MIB", "userDefinedPort1"), ("WHISP-SM-MIB", "port1TCPFilter"), ("WHISP-SM-MIB", "port1UDPFilter"), ("WHISP-SM-MIB", "userDefinedPort2"), ("WHISP-SM-MIB", "port2TCPFilter"), ("WHISP-SM-MIB", "port2UDPFilter"), ("WHISP-SM-MIB", "userDefinedPort3"), ("WHISP-SM-MIB", "port3TCPFilter"), ("WHISP-SM-MIB", "port3UDPFilter"), ("WHISP-SM-MIB", "bootpcFilter"), ("WHISP-SM-MIB", "bootpsFilter"), ("WHISP-SM-MIB", "ip4MultFilter"), ("WHISP-SM-MIB", "ingressVID"), ("WHISP-SM-MIB", "ingressVIDPriority"), ("WHISP-SM-MIB", "ingressVIDPriorityMode"), ("WHISP-SM-MIB", "providerVIDPriority"), ("WHISP-SM-MIB", "providerVIDPriorityMode"), ("WHISP-SM-MIB", "lowPriorityUplinkCIR"), ("WHISP-SM-MIB", "lowPriorityDownlinkCIR"), ("WHISP-SM-MIB", "hiPriorityChannel"), ("WHISP-SM-MIB", "hiPriorityUplinkCIR"), ("WHISP-SM-MIB", "hiPriorityDownlinkCIR"), ("WHISP-SM-MIB", "smRateAdapt"), ("WHISP-SM-MIB", "upLnkMaxBurstDataRate"), ("WHISP-SM-MIB", "upLnkDataRate"), ("WHISP-SM-MIB", "upLnkLimit"), ("WHISP-SM-MIB", "dwnLnkMaxBurstDataRate"), ("WHISP-SM-MIB", "cyclicPrefixScan"), ("WHISP-SM-MIB", "bandwidthScan"), ("WHISP-SM-MIB", "apSelection"), ("WHISP-SM-MIB", "radioBandscanConfig"), ("WHISP-SM-MIB", "forcepoweradjust"), ("WHISP-SM-MIB", "clearBerrResults"), ("WHISP-SM-MIB", "berrautoupdateflag"), ("WHISP-SM-MIB", "testSMBER"), ("WHISP-SM-MIB", "dwnLnkDataRate"), ("WHISP-SM-MIB", "dwnLnkLimit"), ("WHISP-SM-MIB", "dfsConfig"), ("WHISP-SM-MIB", "ethAccessFilterEnable"), ("WHISP-SM-MIB", "ipAccessFilterEnable"), ("WHISP-SM-MIB", "allowedIPAccess1"), ("WHISP-SM-MIB", "allowedIPAccess2"), ("WHISP-SM-MIB", "allowedIPAccess3"), ("WHISP-SM-MIB", "allowedIPAccessNMLength1"), ("WHISP-SM-MIB", "allowedIPAccessNMLength2"), ("WHISP-SM-MIB", "allowedIPAccessNMLength3"), ("WHISP-SM-MIB", "rfDhcpState"), ("WHISP-SM-MIB", "bCastMIR"), ("WHISP-SM-MIB", "bhsReReg"), ("WHISP-SM-MIB", "smLEDModeFlag"), ("WHISP-SM-MIB", "ethAccessEnable"), ("WHISP-SM-MIB", "pppoeEnable"), ("WHISP-SM-MIB", "pppoeAuthenticationType"), ("WHISP-SM-MIB", "pppoeAccessConcentrator"), ("WHISP-SM-MIB", "pppoeServiceName"), ("WHISP-SM-MIB", "pppoeUserName"), ("WHISP-SM-MIB", "pppoePassword"), ("WHISP-SM-MIB", "pppoeTCPMSSClampEnable"), ("WHISP-SM-MIB", "pppoeMTUOverrideEnable"), ("WHISP-SM-MIB", "pppoeMTUOverrideValue"), ("WHISP-SM-MIB", "pppoeTimerType"), ("WHISP-SM-MIB", "pppoeTimeoutPeriod"), ("WHISP-SM-MIB", "timedSpectrumAnalysisDuration"), ("WHISP-SM-MIB", "spectrumAnalysisScanBandwidth"), ("WHISP-SM-MIB", "spectrumAnalysisOnBoot"), ("WHISP-SM-MIB", "spectrumAnalysisAction"), ("WHISP-SM-MIB", "pppoeConnectOD"), ("WHISP-SM-MIB", "pppoeDisconnectOD"), ("WHISP-SM-MIB", "smAntennaType"), ("WHISP-SM-MIB", "natConnectionType"), ("WHISP-SM-MIB", "wanPingReplyEnable"), ("WHISP-SM-MIB", "packetFilterDirection"), ("WHISP-SM-MIB", "colorCode2"), ("WHISP-SM-MIB", "colorCodepriority2"), ("WHISP-SM-MIB", "colorCode3"), ("WHISP-SM-MIB", "colorCodepriority3"), ("WHISP-SM-MIB", "colorCode4"), ("WHISP-SM-MIB", "colorCodepriority4"), ("WHISP-SM-MIB", "colorCode5"), ("WHISP-SM-MIB", "colorCodepriority5"), ("WHISP-SM-MIB", "colorCode6"), ("WHISP-SM-MIB", "colorCodepriority6"), ("WHISP-SM-MIB", "colorCode7"), ("WHISP-SM-MIB", "colorCodepriority7"), ("WHISP-SM-MIB", "colorCode8"), ("WHISP-SM-MIB", "colorCodepriority8"), ("WHISP-SM-MIB", "colorCode9"), ("WHISP-SM-MIB", "colorCodepriority9"), ("WHISP-SM-MIB", "colorCode10"), ("WHISP-SM-MIB", "colorCodepriority10"), ("WHISP-SM-MIB", "additionalColorCode"), ("WHISP-SM-MIB", "additionalColorCodePriority"), ("WHISP-SM-MIB", "deleteAdditionalColorCode"), ("WHISP-SM-MIB", "bridgeTableSize"), ("WHISP-SM-MIB", "bridgeTableRestrict"), ("WHISP-SM-MIB", "berDeModSelect"), ("WHISP-SM-MIB", "multicastVCRcvRate"), ("WHISP-SM-MIB", "syslogServerApPreferred"), ("WHISP-SM-MIB", "syslogMinLevelApPreferred"), ("WHISP-SM-MIB", "syslogSMXmitSetting"), ("WHISP-SM-MIB", "syslogSMXmitControl"), ("WHISP-SM-MIB", "bCastMIRUnits"), ("WHISP-SM-MIB", "naptRemoteManage"), ("WHISP-SM-MIB", "maxTxPowerEnable"), ("WHISP-SM-MIB", "maxTxPower"), ("WHISP-SM-MIB", "txPowerControl"), ("WHISP-SM-MIB", "eapPeerAAAServerCommonName"), ("WHISP-SM-MIB", "pmp430ApRegistrationOptions"), ("WHISP-SM-MIB", "switchRadioModeAndReboot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispSmConfigGroup = whispSmConfigGroup.setStatus('current')
whispSmStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 3, 2)).setObjects(("WHISP-SM-MIB", "natTslTableEntries"), ("WHISP-SM-MIB", "sessionStatus"), ("WHISP-SM-MIB", "rssi"), ("WHISP-SM-MIB", "jitter"), ("WHISP-SM-MIB", "airDelay"), ("WHISP-SM-MIB", "radioSlicingSm"), ("WHISP-SM-MIB", "radioTxGainSm"), ("WHISP-SM-MIB", "calibrationStatus"), ("WHISP-SM-MIB", "radioDbm"), ("WHISP-SM-MIB", "registeredToAp"), ("WHISP-SM-MIB", "dhcpCip"), ("WHISP-SM-MIB", "dhcpSip"), ("WHISP-SM-MIB", "dhcpClientLease"), ("WHISP-SM-MIB", "dhcpCSMask"), ("WHISP-SM-MIB", "dhcpDfltRterIP"), ("WHISP-SM-MIB", "dhcpcdns1"), ("WHISP-SM-MIB", "dhcpcdns2"), ("WHISP-SM-MIB", "dhcpcdns3"), ("WHISP-SM-MIB", "dhcpDomName"), ("WHISP-SM-MIB", "adaptRate"), ("WHISP-SM-MIB", "adaptRateLowPri"), ("WHISP-SM-MIB", "adaptRateHighPri"), ("WHISP-SM-MIB", "bitErrorsQSPKpathA"), ("WHISP-SM-MIB", "bitErrorsQSPKpathB"), ("WHISP-SM-MIB", "bitErrors16QAMpathA"), ("WHISP-SM-MIB", "bitErrors16QAMpathB"), ("WHISP-SM-MIB", "bitErrors64QAMpathA"), ("WHISP-SM-MIB", "bitErrors64QAMpathB"), ("WHISP-SM-MIB", "bitErrors256QAMpathA"), ("WHISP-SM-MIB", "bitErrors256QAMpathB"), ("WHISP-SM-MIB", "bitsReceivedPerPathModulation"), ("WHISP-SM-MIB", "radioDbmInt"), ("WHISP-SM-MIB", "dfsStatus"), ("WHISP-SM-MIB", "radioTxPwr"), ("WHISP-SM-MIB", "activeRegion"), ("WHISP-SM-MIB", "snmpBerLevel"), ("WHISP-SM-MIB", "nbBitsRcvd"), ("WHISP-SM-MIB", "nbPriBitsErr"), ("WHISP-SM-MIB", "nbSndBitsErr"), ("WHISP-SM-MIB", "primaryBER"), ("WHISP-SM-MIB", "secondaryBER"), ("WHISP-SM-MIB", "totalBER"), ("WHISP-SM-MIB", "minRSSI"), ("WHISP-SM-MIB", "maxRSSI"), ("WHISP-SM-MIB", "minJitter"), ("WHISP-SM-MIB", "maxJitter"), ("WHISP-SM-MIB", "smSessionTimer"), ("WHISP-SM-MIB", "pppoeSessionStatus"), ("WHISP-SM-MIB", "pppoeSessionID"), ("WHISP-SM-MIB", "pppoeIPCPAddress"), ("WHISP-SM-MIB", "pppoeMTUOverrideEn"), ("WHISP-SM-MIB", "pppoeMTUValue"), ("WHISP-SM-MIB", "pppoeTimerTypeValue"), ("WHISP-SM-MIB", "pppoeTimeoutValue"), ("WHISP-SM-MIB", "pppoeDNSServer1"), ("WHISP-SM-MIB", "pppoeDNSServer2"), ("WHISP-SM-MIB", "pppoeControlBytesSent"), ("WHISP-SM-MIB", "pppoeControlBytesReceived"), ("WHISP-SM-MIB", "pppoeDataBytesSent"), ("WHISP-SM-MIB", "pppoeDataBytesReceived"), ("WHISP-SM-MIB", "pppoeEnabledStatus"), ("WHISP-SM-MIB", "pppoeTCPMSSClampEnableStatus"), ("WHISP-SM-MIB", "pppoeACNameStatus"), ("WHISP-SM-MIB", "pppoeSvcNameStatus"), ("WHISP-SM-MIB", "pppoeSessUptime"), ("WHISP-SM-MIB", "primaryBERDisplay"), ("WHISP-SM-MIB", "secondaryBERDisplay"), ("WHISP-SM-MIB", "totalBERDisplay"), ("WHISP-SM-MIB", "mimoQpskBerDisplay"), ("WHISP-SM-MIB", "mimo16QamBerDisplay"), ("WHISP-SM-MIB", "mimo64QamBerDisplay"), ("WHISP-SM-MIB", "mimo256QamBerDisplay"), ("WHISP-SM-MIB", "mimoBerRcvModulationType"), ("WHISP-SM-MIB", "minRadioDbm"), ("WHISP-SM-MIB", "maxRadioDbm"), ("WHISP-SM-MIB", "maxRadioDbmDeprecated"), ("WHISP-SM-MIB", "pppoeSessIdleTime"), ("WHISP-SM-MIB", "radioDbmAvg"), ("WHISP-SM-MIB", "zoltarFPGAFreqOffset"), ("WHISP-SM-MIB", "zoltarSWFreqOffset"), ("WHISP-SM-MIB", "airDelayns"), ("WHISP-SM-MIB", "smSectorID"), ("WHISP-SM-MIB", "scanCycleCount"), ("WHISP-SM-MIB", "currentColorCode"), ("WHISP-SM-MIB", "currentColorCodePri"), ("WHISP-SM-MIB", "currentChanFreq"), ("WHISP-SM-MIB", "linkQualityBeacon"), ("WHISP-SM-MIB", "currentCyclicPrefix"), ("WHISP-SM-MIB", "currentBandwidth"), ("WHISP-SM-MIB", "berPwrRxFPGAPathA"), ("WHISP-SM-MIB", "berPwrRxFPGAPathB"), ("WHISP-SM-MIB", "rawBERPwrRxPathA"), ("WHISP-SM-MIB", "rawBERPwrRxPathB"), ("WHISP-SM-MIB", "linkQualityData1XVertical"), ("WHISP-SM-MIB", "linkQualityData2XVertical"), ("WHISP-SM-MIB", "linkQualityData3XVertical"), ("WHISP-SM-MIB", "linkQualityData4XVertical"), ("WHISP-SM-MIB", "linkQualityData1XHorizontal"), ("WHISP-SM-MIB", "linkQualityData2XHorizontal"), ("WHISP-SM-MIB", "linkQualityData3XHorizontal"), ("WHISP-SM-MIB", "linkQualityData4XHorizontal"), ("WHISP-SM-MIB", "signalToNoiseRatioSMVertical"), ("WHISP-SM-MIB", "signalToNoiseRatioSMHorizontal"), ("WHISP-SM-MIB", "signalStrengthRatio"), ("WHISP-SM-MIB", "radioDbmHorizontal"), ("WHISP-SM-MIB", "radioDbmVertical"), ("WHISP-SM-MIB", "rfStatTxSuppressionCount"), ("WHISP-SM-MIB", "receiveFragmentsModulationPercentage"), ("WHISP-SM-MIB", "fragmentsReceived1XVertical"), ("WHISP-SM-MIB", "fragmentsReceived2XVertical"), ("WHISP-SM-MIB", "fragmentsReceived3XVertical"), ("WHISP-SM-MIB", "fragmentsReceived4XVertical"), ("WHISP-SM-MIB", "fragmentsReceived1XHorizontal"), ("WHISP-SM-MIB", "fragmentsReceived2XHorizontal"), ("WHISP-SM-MIB", "fragmentsReceived3XHorizontal"), ("WHISP-SM-MIB", "fragmentsReceived4XHorizontal"), ("WHISP-SM-MIB", "beaconsPercentReceived"), ("WHISP-SM-MIB", "mapsPercentReceived"), ("WHISP-SM-MIB", "beaconsPercentMinReceived"), ("WHISP-SM-MIB", "beaconsPercentMaxReceived"), ("WHISP-SM-MIB", "beaconsPercentReceivedSnapshot"), ("WHISP-SM-MIB", "maxReceivePower"), ("WHISP-SM-MIB", "bridgecbUplinkCreditRate"), ("WHISP-SM-MIB", "bridgecbUplinkCreditLimit"), ("WHISP-SM-MIB", "bridgecbDownlinkCreditRate"), ("WHISP-SM-MIB", "bridgecbDownlinkCreditLimit"), ("WHISP-SM-MIB", "bridgecbDownlinkMaxBurstBitRate"), ("WHISP-SM-MIB", "bridgecbUplinkMaxBurstBitRate"), ("WHISP-SM-MIB", "bridgeCbErrStatBridgeDropCount"), ("WHISP-SM-MIB", "radioModeStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispSmStatusGroup = whispSmStatusGroup.setStatus('current')
whispSmNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 3, 3)).setObjects(("WHISP-SM-MIB", "enterSpectrumAnalysis"), ("WHISP-SM-MIB", "availableSpectrumAnalysis"), ("WHISP-SM-MIB", "whispRadarDetected"), ("WHISP-SM-MIB", "whispRadarEnd"), ("WHISP-SM-MIB", "smNatWanDHCPClientEvent"), ("WHISP-SM-MIB", "smNatRFPubDHCPClientEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispSmNotifGroup = whispSmNotifGroup.setStatus('current')
whispMappingTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 3, 4)).setObjects(("WHISP-SM-MIB", "tableIndex"), ("WHISP-SM-MIB", "protocol"), ("WHISP-SM-MIB", "port"), ("WHISP-SM-MIB", "localIp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispMappingTableGroup = whispMappingTableGroup.setStatus('current')
whispRadarDetected = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 4, 1, 1)).setObjects(("WHISP-SM-MIB", "dfsStatus"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: whispRadarDetected.setStatus('current')
whispRadarEnd = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 4, 1, 2)).setObjects(("WHISP-SM-MIB", "dfsStatus"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: whispRadarEnd.setStatus('current')
enterSpectrumAnalysis = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 4, 2, 1)).setObjects(("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: enterSpectrumAnalysis.setStatus('current')
availableSpectrumAnalysis = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 4, 2, 2)).setObjects(("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: availableSpectrumAnalysis.setStatus('current')
smNatWanDHCPClientEvent = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 4, 3, 1)).setObjects(("WHISP-SM-MIB", "dhcpCip"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: smNatWanDHCPClientEvent.setStatus('current')
smNatRFPubDHCPClientEvent = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 4, 3, 2)).setObjects(("WHISP-BOX-MIBV2-MIB", "dhcpRfPublicIp"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: smNatRFPubDHCPClientEvent.setStatus('current')
clearLinkStats = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearLinkStats.setStatus('current')
rescan = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rescan.setStatus('current')
apEvalControl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apEvalControl.setStatus('current')
whispMappingTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 5), )
if mibBuilder.loadTexts: whispMappingTable.setStatus('current')
whispMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 5, 1), ).setIndexNames((0, "WHISP-SM-MIB", "tableIndex"))
if mibBuilder.loadTexts: whispMappingEntry.setStatus('current')
tableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tableIndex.setStatus('current')
protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocol.setStatus('current')
port = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port.setStatus('current')
localIp = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localIp.setStatus('current')
whispSmTranslationTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 6), )
if mibBuilder.loadTexts: whispSmTranslationTable.setStatus('current')
whispSmTranslationTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 6, 1), ).setIndexNames((0, "WHISP-SM-MIB", "whispTranslationTableIndex"))
if mibBuilder.loadTexts: whispSmTranslationTableEntry.setStatus('current')
whispTranslationTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispTranslationTableIndex.setStatus('current')
whispTranslationTableMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 6, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispTranslationTableMacAddr.setStatus('current')
whispTranslationTableIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispTranslationTableIpAddr.setStatus('current')
whispTranslationTableAge = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispTranslationTableAge.setStatus('current')
whispSmColorCodeTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 9), )
if mibBuilder.loadTexts: whispSmColorCodeTable.setStatus('current')
whispSmColorCodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 9, 1), ).setIndexNames((0, "WHISP-SM-MIB", "entryColorCode"))
if mibBuilder.loadTexts: whispSmColorCodeEntry.setStatus('current')
entryColorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entryColorCode.setStatus('current')
entryColorCodePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("tertiary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entryColorCodePriority.setStatus('current')
whispSmAPEvalTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10), )
if mibBuilder.loadTexts: whispSmAPEvalTable.setStatus('current')
whispSmAPEvalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1), ).setIndexNames((0, "WHISP-SM-MIB", "evalIndex"))
if mibBuilder.loadTexts: whispSmAPEvalEntry.setStatus('current')
evalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalIndex.setStatus('current')
evalFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalFrequency.setStatus('current')
evalChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("bandwidth3Point5MHz", 0), ("bandwidth5MHz", 1), ("bandwidth7MHz", 2), ("bandwidth10MHz", 3), ("bandwidth15MHz", 4), ("bandwidth20MHz", 5), ("bandwidth30MHz", 6), ("bandwidth40MHz", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalChannelBandwidth.setStatus('current')
evalCyclicPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("one-quarter", 0), ("one-eighth", 1), ("one-sixteenth", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalCyclicPrefix.setStatus('current')
evalESN = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalESN.setStatus('current')
evalRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalRegion.setStatus('current')
evalBeaconReceivePowerCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalBeaconReceivePowerCombined.setStatus('current')
evalBeaconReceivePowerH = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalBeaconReceivePowerH.setStatus('current')
evalBeaconReceivePowerV = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalBeaconReceivePowerV.setStatus('current')
evalFECEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalFECEnable.setStatus('current')
evalType = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("multipoint", 0), ("point-to-point", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalType.setStatus('current')
evalAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalAvail.setStatus('current')
evalAge = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalAge.setStatus('current')
evalLockout = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalLockout.setStatus('current')
evalRegFail = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalRegFail.setStatus('current')
evalRange = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalRange.setStatus('current')
evalMaxRange = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalMaxRange.setStatus('current')
evalTxBER = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalTxBER.setStatus('current')
evalEBCast = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalEBCast.setStatus('current')
evalSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalSessionCount.setStatus('current')
evalNoLuid = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalNoLuid.setStatus('current')
evalOutOfRange = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalOutOfRange.setStatus('current')
evalAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalAuthFail.setStatus('current')
evalEncryptFail = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalEncryptFail.setStatus('current')
evalReScanReq = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalReScanReq.setStatus('current')
evalLimitReached = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalLimitReached.setStatus('current')
evalNoVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalNoVCs.setStatus('current')
evalVCReserveFail = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalVCReserveFail.setStatus('current')
evalVCActFail = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalVCActFail.setStatus('current')
evalTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalTxPower.setStatus('current')
evalReceiveTargetLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalReceiveTargetLevel.setStatus('current')
evalColorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalColorCode.setStatus('current')
evalBeaconVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalBeaconVersion.setStatus('current')
evalSectorUserCount = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalSectorUserCount.setStatus('current')
evalSyncSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("generate-sync", 0), ("gps-sync", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalSyncSrc.setStatus('current')
evalNumULSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalNumULSlots.setStatus('current')
evalNumDLSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalNumDLSlots.setStatus('current')
evalNumULContSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalNumULContSlots.setStatus('current')
evalICC = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalICC.setStatus('current')
evalAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalAuthentication.setStatus('current')
evalSMPPPoE = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-supported", 0), ("suported", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalSMPPPoE.setStatus('current')
evalPToPVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-supported", 0), ("suported", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalPToPVLAN.setStatus('current')
evalFramePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 2, 10, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("twoPointFiveMs", 0), ("fiveMs", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evalFramePeriod.setStatus('current')
mibBuilder.exportSymbols("WHISP-SM-MIB", smNatWanDHCPClientEvent=smNatWanDHCPClientEvent, evalTxPower=evalTxPower, smAntennaType=smAntennaType, dhcpDomName=dhcpDomName, rfScanListBandFilter=rfScanListBandFilter, evalBeaconReceivePowerH=evalBeaconReceivePowerH, colorCode2=colorCode2, multicastVCRcvRate=multicastVCRcvRate, localIp=localIp, linkQualityData3XHorizontal=linkQualityData3XHorizontal, userP1Filter=userP1Filter, evalPToPVLAN=evalPToPVLAN, currentBandwidth=currentBandwidth, ethAccessFilterEnable=ethAccessFilterEnable, arpCacheTimeout=arpCacheTimeout, syslogSMXmitControl=syslogSMXmitControl, colorCode6=colorCode6, dhcpCip=dhcpCip, linkQualityData1XVertical=linkQualityData1XVertical, dwnLnkLimit=dwnLnkLimit, eapPeerAAAServerCommonName=eapPeerAAAServerCommonName, rfScanList=rfScanList, evalVCActFail=evalVCActFail, whispTranslationTableAge=whispTranslationTableAge, allOtherIpFilter=allOtherIpFilter, evalColorCode=evalColorCode, smNatRFPubDHCPClientEvent=smNatRFPubDHCPClientEvent, linkQualityData4XVertical=linkQualityData4XVertical, arpFilter=arpFilter, whispSmDHCPClientEvent=whispSmDHCPClientEvent, naptPublicSubnetMask=naptPublicSubnetMask, alternateDNSIP=alternateDNSIP, entryColorCodePriority=entryColorCodePriority, linkQualityData2XHorizontal=linkQualityData2XHorizontal, authKeySm=authKeySm, apEvalControl=apEvalControl, tableIndex=tableIndex, pppoeTCPMSSClampEnable=pppoeTCPMSSClampEnable, evalEBCast=evalEBCast, pppoeFilter=pppoeFilter, userDefinedPort1=userDefinedPort1, whispSmColorCodeTable=whispSmColorCodeTable, ingressVIDPriorityMode=ingressVIDPriorityMode, dhcpServerEntry=dhcpServerEntry, dhcpCSMask=dhcpCSMask, whispTranslationTableIpAddr=whispTranslationTableIpAddr, evalReScanReq=evalReScanReq, bridgecbDownlinkMaxBurstBitRate=bridgecbDownlinkMaxBurstBitRate, whispSmEvent=whispSmEvent, realm=realm, rfScanListTable=rfScanListTable, hostMacAddress=hostMacAddress, berPwrRxFPGAPathA=berPwrRxFPGAPathA, whispTranslationTableIndex=whispTranslationTableIndex, evalBeaconVersion=evalBeaconVersion, hiPriorityDownlinkCIR=hiPriorityDownlinkCIR, pppoeSessionStatus=pppoeSessionStatus, rssi=rssi, smSectorID=smSectorID, smRateAdapt=smRateAdapt, fragmentsReceived3XVertical=fragmentsReceived3XVertical, deleteAdditionalColorCode=deleteAdditionalColorCode, pppoeControlBytesReceived=pppoeControlBytesReceived, evalIndex=evalIndex, bitErrorsQSPKpathA=bitErrorsQSPKpathA, signalStrengthRatio=signalStrengthRatio, smbFilter=smbFilter, linkQualityData2XVertical=linkQualityData2XVertical, berPwrRxFPGAPathB=berPwrRxFPGAPathB, useRealm=useRealm, pppoeSessionID=pppoeSessionID, availableSpectrumAnalysis=availableSpectrumAnalysis, whispRadarEnd=whispRadarEnd, radioBandscanConfig=radioBandscanConfig, pppoeEnabledStatus=pppoeEnabledStatus, naptRFPublicSubnetMask=naptRFPublicSubnetMask, currentCyclicPrefix=currentCyclicPrefix, minJitter=minJitter, mapsPercentReceived=mapsPercentReceived, evalType=evalType, evalRegion=evalRegion, dhcpServerTable=dhcpServerTable, maxRSSI=maxRSSI, naptPublicGatewayIP=naptPublicGatewayIP, radioDbmInt=radioDbmInt, colorCodepriority3=colorCodepriority3, whispRadarDetected=whispRadarDetected, defaultGwSm=defaultGwSm, evalFECEnable=evalFECEnable, naptEnable=naptEnable, primaryBERDisplay=primaryBERDisplay, maxRadioDbm=maxRadioDbm, networkAccess=networkAccess, dhcpServerPktToss=dhcpServerPktToss, zoltarFPGAFreqOffset=zoltarFPGAFreqOffset, natTslTableEntries=natTslTableEntries, bitErrors256QAMpathA=bitErrors256QAMpathA, numAuthCerts=numAuthCerts, pppoeDNSServer1=pppoeDNSServer1, dwnLnkMaxBurstDataRate=dwnLnkMaxBurstDataRate, rfDhcpState=rfDhcpState, pppoeMTUOverrideEnable=pppoeMTUOverrideEnable, snmpBerLevel=snmpBerLevel, bridgecbUplinkCreditRate=bridgecbUplinkCreditRate, syslogServerApPreferred=syslogServerApPreferred, ethAccessEnable=ethAccessEnable, dmzEnable=dmzEnable, clearLinkStats=clearLinkStats, evalESN=evalESN, bCastMIR=bCastMIR, wanPingReplyEnable=wanPingReplyEnable, whispSmConfig=whispSmConfig, dfsConfig=dfsConfig, linkQualityData3XVertical=linkQualityData3XVertical, smSessionTimer=smSessionTimer, forcepoweradjust=forcepoweradjust, ingressVID=ingressVID, upLnkDataRate=upLnkDataRate, radioDbmVertical=radioDbmVertical, beaconsPercentMinReceived=beaconsPercentMinReceived, whispSmSpAnEvent=whispSmSpAnEvent, receiveFragmentsModulationPercentage=receiveFragmentsModulationPercentage, radioDbmAvg=radioDbmAvg, additionalColorCodePriority=additionalColorCodePriority, pppoeEnable=pppoeEnable, dhcpcdns1=dhcpcdns1, evalBeaconReceivePowerV=evalBeaconReceivePowerV, whispSmDfsEvent=whispSmDfsEvent, dhcpClientEnable=dhcpClientEnable, whispSmNotifGroup=whispSmNotifGroup, spectrumAnalysisOnBoot=spectrumAnalysisOnBoot, natConnectionType=natConnectionType, mimoQpskBerDisplay=mimoQpskBerDisplay, adaptRateLowPri=adaptRateLowPri, beaconsPercentReceivedSnapshot=beaconsPercentReceivedSnapshot, radioModeStatus=radioModeStatus, pppoeControlBytesSent=pppoeControlBytesSent, beaconsPercentMaxReceived=beaconsPercentMaxReceived, pppoeDataBytesReceived=pppoeDataBytesReceived, fragmentsReceived1XHorizontal=fragmentsReceived1XHorizontal, lowPriorityDownlinkCIR=lowPriorityDownlinkCIR, ipAccessFilterEnable=ipAccessFilterEnable, natDNSProxyEnable=natDNSProxyEnable, spectrumAnalysisScanBandwidth=spectrumAnalysisScanBandwidth, additionalColorCode=additionalColorCode, naptRFPublicGateway=naptRFPublicGateway, whispMappingEntry=whispMappingEntry, phase1=phase1, colorCodepriority5=colorCodepriority5, lanIpSm=lanIpSm, radioDbmHorizontal=radioDbmHorizontal, bridgecbDownlinkCreditRate=bridgecbDownlinkCreditRate, pppoeConnectOD=pppoeConnectOD, port3TCPFilter=port3TCPFilter, adaptRate=adaptRate, colorCode7=colorCode7, rfScanListFrequency=rfScanListFrequency, allIpv4Filter=allIpv4Filter, minRadioDbm=minRadioDbm, whispSmConfigGroup=whispSmConfigGroup, cyclicPrefixScan=cyclicPrefixScan, enterSpectrumAnalysis=enterSpectrumAnalysis, pppoeMTUValue=pppoeMTUValue, certTable=certTable, linkQualityData1XHorizontal=linkQualityData1XHorizontal, dhcpClientLease=dhcpClientLease, dwnLnkDataRate=dwnLnkDataRate, ip4MultFilter=ip4MultFilter, tcpGarbageCollectTmout=tcpGarbageCollectTmout, pppoeSessIdleTime=pppoeSessIdleTime, allOthersFilter=allOthersFilter, whispSmTranslationTableEntry=whispSmTranslationTableEntry, airDelayns=airDelayns, evalEncryptFail=evalEncryptFail, fragmentsReceived3XHorizontal=fragmentsReceived3XHorizontal, authenticationEnforce=authenticationEnforce, bitErrors256QAMpathB=bitErrors256QAMpathB, dhcpSip=dhcpSip, evalRange=evalRange, pppoeTimeoutValue=pppoeTimeoutValue, allowedIPAccessNMLength2=allowedIPAccessNMLength2, certEntry=certEntry, evalNoLuid=evalNoLuid, evalRegFail=evalRegFail, authPassword=authPassword, fragmentsReceived4XVertical=fragmentsReceived4XVertical, entryColorCode=entryColorCode, rfStatTxSuppressionCount=rfStatTxSuppressionCount, bitErrors64QAMpathB=bitErrors64QAMpathB, totalBERDisplay=totalBERDisplay, evalAge=evalAge, allowedIPAccessNMLength1=allowedIPAccessNMLength1, signalToNoiseRatioSMVertical=signalToNoiseRatioSMVertical, radioTxPwr=radioTxPwr, currentColorCode=currentColorCode, dhcpServerLeaseTime=dhcpServerLeaseTime, evalAvail=evalAvail, bitErrorsQSPKpathB=bitErrorsQSPKpathB, pppoeSessUptime=pppoeSessUptime, bridgecbUplinkCreditLimit=bridgecbUplinkCreditLimit, pppoeTCPMSSClampEnableStatus=pppoeTCPMSSClampEnableStatus, colorCode9=colorCode9, maxJitter=maxJitter, pppoeUserName=pppoeUserName, totalBER=totalBER, evalBeaconReceivePowerCombined=evalBeaconReceivePowerCombined, smLEDModeFlag=smLEDModeFlag, authOuterId=authOuterId, pmp430ApRegistrationOptions=pmp430ApRegistrationOptions, whispSmTranslationTable=whispSmTranslationTable, colorCode8=colorCode8, evalLimitReached=evalLimitReached, currentColorCodePri=currentColorCodePri, evalNoVCs=evalNoVCs, timingPulseGated=timingPulseGated, port2UDPFilter=port2UDPFilter, bandwidthScan=bandwidthScan, whispSmAPEvalTable=whispSmAPEvalTable, pppoeTimerTypeValue=pppoeTimerTypeValue, timedSpectrumAnalysisDuration=timedSpectrumAnalysisDuration, packetFilterDirection=packetFilterDirection, dhcpcdns3=dhcpcdns3, maxReceivePower=maxReceivePower, upLinkBCastFilter=upLinkBCastFilter, rawBERPwrRxPathA=rawBERPwrRxPathA, whispMappingTableGroup=whispMappingTableGroup, colorCodepriority10=colorCodepriority10, dhcpServerPktXmt=dhcpServerPktXmt, colorCodepriority8=colorCodepriority8, mimo64QamBerDisplay=mimo64QamBerDisplay, evalNumULSlots=evalNumULSlots, certificateDN=certificateDN, registeredToAp=registeredToAp, naptPrivateSubnetMask=naptPrivateSubnetMask, bridgeTableRestrict=bridgeTableRestrict, minRSSI=minRSSI, pppoeAccessConcentrator=pppoeAccessConcentrator, dhcpServerEnable=dhcpServerEnable, spectrumAnalysisDisplay=spectrumAnalysisDisplay, naptRemoteManage=naptRemoteManage, dnsAutomatic=dnsAutomatic, radioDbm=radioDbm, nbPriBitsErr=nbPriBitsErr, phase2=phase2, maxTxPower=maxTxPower, whispSmSecurity=whispSmSecurity, mimo16QamBerDisplay=mimo16QamBerDisplay, nbSndBitsErr=nbSndBitsErr, calibrationStatus=calibrationStatus, rawBERPwrRxPathB=rawBERPwrRxPathB, port1UDPFilter=port1UDPFilter, whispSmMibModule=whispSmMibModule, whispSmStatus=whispSmStatus, clearBerrResults=clearBerrResults)
mibBuilder.exportSymbols("WHISP-SM-MIB", activeRegion=activeRegion, bootpcFilter=bootpcFilter, dhcpcdns2=dhcpcdns2, radioTxGainSm=radioTxGainSm, airDelay=airDelay, protocol=protocol, beaconsPercentReceived=beaconsPercentReceived, allowedIPAccess2=allowedIPAccess2, whispSmControls=whispSmControls, spectrumAnalysisAction=spectrumAnalysisAction, authUsername=authUsername, whispSmGroups=whispSmGroups, colorCodepriority6=colorCodepriority6, evalAuthentication=evalAuthentication, jitter=jitter, pppoeDisconnectOD=pppoeDisconnectOD, pppoePassword=pppoePassword, hiPriorityChannel=hiPriorityChannel, maxRadioDbmDeprecated=maxRadioDbmDeprecated, bitErrors16QAMpathA=bitErrors16QAMpathA, userDefinedPort2=userDefinedPort2, evalReceiveTargetLevel=evalReceiveTargetLevel, evalFramePeriod=evalFramePeriod, mimoBerRcvModulationType=mimoBerRcvModulationType, pppoeTimeoutPeriod=pppoeTimeoutPeriod, naptPublicIP=naptPublicIP, mimo256QamBerDisplay=mimo256QamBerDisplay, port1TCPFilter=port1TCPFilter, evalOutOfRange=evalOutOfRange, upLnkLimit=upLnkLimit, linkQualityBeacon=linkQualityBeacon, bridgecbUplinkMaxBurstBitRate=bridgecbUplinkMaxBurstBitRate, secondaryBERDisplay=secondaryBERDisplay, snmpFilter=snmpFilter, zoltarSWFreqOffset=zoltarSWFreqOffset, bCastMIRUnits=bCastMIRUnits, evalChannelBandwidth=evalChannelBandwidth, currentChanFreq=currentChanFreq, naptRFPublicIP=naptRFPublicIP, apSelection=apSelection, powerUpMode=powerUpMode, userDefinedPort3=userDefinedPort3, switchRadioModeAndReboot=switchRadioModeAndReboot, evalICC=evalICC, bridgecbDownlinkCreditLimit=bridgecbDownlinkCreditLimit, syslogMinLevelApPreferred=syslogMinLevelApPreferred, whispSmStatusGroup=whispSmStatusGroup, pppoeAuthenticationType=pppoeAuthenticationType, port2TCPFilter=port2TCPFilter, evalFrequency=evalFrequency, allowedIPAccess3=allowedIPAccess3, colorCode4=colorCode4, whispMappingTable=whispMappingTable, testSMBER=testSMBER, enable8023link=enable8023link, allowedIPAccessNMLength3=allowedIPAccessNMLength3, primaryBER=primaryBER, bitErrors64QAMpathA=bitErrors64QAMpathA, port3UDPFilter=port3UDPFilter, udpGarbageCollectTmout=udpGarbageCollectTmout, bridgeCbErrStatBridgeDropCount=bridgeCbErrStatBridgeDropCount, evalSectorUserCount=evalSectorUserCount, bitErrors16QAMpathB=bitErrors16QAMpathB, pppoeDNSServer2=pppoeDNSServer2, pppoeTimerType=pppoeTimerType, natTslTableSize=natTslTableSize, linkQualityData4XHorizontal=linkQualityData4XHorizontal, pppoeMTUOverrideValue=pppoeMTUOverrideValue, port=port, evalSessionCount=evalSessionCount, sessionStatus=sessionStatus, pppoeACNameStatus=pppoeACNameStatus, bootpsFilter=bootpsFilter, evalTxBER=evalTxBER, dhcpIPStart=dhcpIPStart, pppoeDataBytesSent=pppoeDataBytesSent, prefferedDNSIP=prefferedDNSIP, authKeyOption=authKeyOption, bhsReReg=bhsReReg, hostIp=hostIp, maxTxPowerEnable=maxTxPowerEnable, action=action, hostLease=hostLease, evalCyclicPrefix=evalCyclicPrefix, whispTranslationTableMacAddr=whispTranslationTableMacAddr, evalAuthFail=evalAuthFail, lanMaskSm=lanMaskSm, nbBitsRcvd=nbBitsRcvd, syslogSMXmitSetting=syslogSMXmitSetting, signalToNoiseRatioSMHorizontal=signalToNoiseRatioSMHorizontal, evalNumULContSlots=evalNumULContSlots, providerVIDPriority=providerVIDPriority, cert=cert, fragmentsReceived1XVertical=fragmentsReceived1XVertical, colorCode10=colorCode10, pppoeMTUOverrideEn=pppoeMTUOverrideEn, evalSyncSrc=evalSyncSrc, pppoeSvcNameStatus=pppoeSvcNameStatus, colorCodepriority9=colorCodepriority9, naptPrivateIP=naptPrivateIP, lowPriorityUplinkCIR=lowPriorityUplinkCIR, colorCodepriority7=colorCodepriority7, dhcpNumIPsToLease=dhcpNumIPsToLease, allowedIPAccess1=allowedIPAccess1, colorCodepriority2=colorCodepriority2, berDeModSelect=berDeModSelect, dhcpDfltRterIP=dhcpDfltRterIP, hiPriorityUplinkCIR=hiPriorityUplinkCIR, userP3Filter=userP3Filter, rescan=rescan, adaptRateHighPri=adaptRateHighPri, colorCode3=colorCode3, whispSmColorCodeEntry=whispSmColorCodeEntry, rfScanListEntry=rfScanListEntry, scanCycleCount=scanCycleCount, colorCode5=colorCode5, evalNumDLSlots=evalNumDLSlots, certIndex=certIndex, fragmentsReceived2XVertical=fragmentsReceived2XVertical, userP2Filter=userP2Filter, radioSlicingSm=radioSlicingSm, bitsReceivedPerPathModulation=bitsReceivedPerPathModulation, dfsStatus=dfsStatus, evalMaxRange=evalMaxRange, dmzIP=dmzIP, fragmentsReceived2XHorizontal=fragmentsReceived2XHorizontal, upLnkMaxBurstDataRate=upLnkMaxBurstDataRate, bridgeTableSize=bridgeTableSize, whispSmAPEvalEntry=whispSmAPEvalEntry, PYSNMP_MODULE_ID=whispSmMibModule, secondaryBER=secondaryBER, evalLockout=evalLockout, colorCodepriority4=colorCodepriority4, providerVIDPriorityMode=providerVIDPriorityMode, pppoeServiceName=pppoeServiceName, fragmentsReceived4XHorizontal=fragmentsReceived4XHorizontal, txPowerControl=txPowerControl, evalVCReserveFail=evalVCReserveFail, evalSMPPPoE=evalSMPPPoE, pppoeIPCPAddress=pppoeIPCPAddress, ingressVIDPriority=ingressVIDPriority, dhcpServerPktRcv=dhcpServerPktRcv, berrautoupdateflag=berrautoupdateflag)
