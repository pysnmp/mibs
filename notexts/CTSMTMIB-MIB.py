#
# PySNMP MIB module CTSMTMIB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTSMTMIB-MIB
# Produced by pysmi-1.1.12 at Tue May 28 12:34:24 2024
# On host fv-az768-311 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ctsmtmib, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctsmtmib")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits, Gauge32, Unsigned32, MibIdentifier, Integer32, iso, ObjectIdentity, ModuleIdentity, Counter64, TimeTicks, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits", "Gauge32", "Unsigned32", "MibIdentifier", "Integer32", "iso", "ObjectIdentity", "ModuleIdentity", "Counter64", "TimeTicks", "NotificationType", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ctsmtmibRingTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 1), )
if mibBuilder.loadTexts: ctsmtmibRingTable.setStatus('mandatory')
ctsmtmibRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 1, 1), ).setIndexNames((0, "CTSMTMIB-MIB", "ctsmtmibRingSmtIndex"), (0, "CTSMTMIB-MIB", "ctsmtmibRingMacIndex"), (0, "CTSMTMIB-MIB", "ctsmtmibRingNodeIndex"), (0, "CTSMTMIB-MIB", "ctsmtmibRingMacAddr"))
if mibBuilder.loadTexts: ctsmtmibRingEntry.setStatus('mandatory')
ctsmtmibRingSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibRingSmtIndex.setStatus('mandatory')
ctsmtmibRingMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibRingMacIndex.setStatus('mandatory')
ctsmtmibRingNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibRingNodeIndex.setStatus('mandatory')
ctsmtmibRingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibRingMacAddr.setStatus('mandatory')
ctsmtmibRingUpStreamAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibRingUpStreamAddr.setStatus('mandatory')
ctsmtmibRingNodeClass = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("station", 1), ("concentrator", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibRingNodeClass.setStatus('mandatory')
ctsmtmibRingMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibRingMacCount.setStatus('mandatory')
ctsmtmibRingNonMasterCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibRingNonMasterCount.setStatus('mandatory')
ctsmtmibRingMasterCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibRingMasterCount.setStatus('mandatory')
ctsmtmibRingTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibRingTopology.setStatus('mandatory')
ctsmtmibRingDuplicate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibRingDuplicate.setStatus('mandatory')
ctsmtmibMacTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 2), )
if mibBuilder.loadTexts: ctsmtmibMacTable.setStatus('mandatory')
ctsmtmibMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 2, 1), ).setIndexNames((0, "CTSMTMIB-MIB", "ctsmtmibMacSmtIndex"), (0, "CTSMTMIB-MIB", "ctsmtmibMacIndex"))
if mibBuilder.loadTexts: ctsmtmibMacEntry.setStatus('mandatory')
ctsmtmibMacSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibMacSmtIndex.setStatus('mandatory')
ctsmtmibMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibMacIndex.setStatus('mandatory')
ctsmtmibMacNifTxCts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibMacNifTxCts.setStatus('mandatory')
ctsmtmibMacNifRxCts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibMacNifRxCts.setStatus('mandatory')
ctsmtmibMacSifTxCts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibMacSifTxCts.setStatus('mandatory')
ctsmtmibMacSifRxCts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibMacSifRxCts.setStatus('mandatory')
ctsmtmibMacEcfTxCts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibMacEcfTxCts.setStatus('mandatory')
ctsmtmibMacEcfRxCts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibMacEcfRxCts.setStatus('mandatory')
ctsmtmibMacPmfTxCts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibMacPmfTxCts.setStatus('mandatory')
ctsmtmibMacPmfRxCts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibMacPmfRxCts.setStatus('mandatory')
ctsmtmibMacRdfTxCts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibMacRdfTxCts.setStatus('mandatory')
ctsmtmibMacRdfRxCts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibMacRdfRxCts.setStatus('mandatory')
ctsmtmibMacRingOpCts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibMacRingOpCts.setStatus('mandatory')
ctsmtmibMacTxCts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibMacTxCts.setStatus('mandatory')
ctsmtmibMacRingMapUpdateCts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibMacRingMapUpdateCts.setStatus('mandatory')
ctsmtmibMacAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsmtmibMacAutoNegotiation.setStatus('mandatory')
ctsmtmibAttachmentNumber = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibAttachmentNumber.setStatus('mandatory')
ctsmtmibAttachmentTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 4), )
if mibBuilder.loadTexts: ctsmtmibAttachmentTable.setStatus('mandatory')
ctsmtmibAttachmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 4, 1), ).setIndexNames((0, "CTSMTMIB-MIB", "ctsmtmibAttachmentSMTIndex"), (0, "CTSMTMIB-MIB", "ctsmtmibAttachmentIndex"))
if mibBuilder.loadTexts: ctsmtmibAttachmentEntry.setStatus('mandatory')
ctsmtmibAttachmentSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibAttachmentSMTIndex.setStatus('mandatory')
ctsmtmibAttachmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibAttachmentIndex.setStatus('mandatory')
ctsmtmibAttachmentClass = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("single-attachment", 1), ("dual-attachment", 2), ("concentrator", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibAttachmentClass.setStatus('mandatory')
ctsmtmibAttachmentOpticalBypassPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibAttachmentOpticalBypassPresent.setStatus('mandatory')
ctsmtmibAttachmentIMaxExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibAttachmentIMaxExpiration.setStatus('mandatory')
ctsmtmibAttachmentInsertedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("unimplemented", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibAttachmentInsertedStatus.setStatus('mandatory')
ctsmtmibAttachmentInsertPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("unimplemented", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsmtmibAttachmentInsertPolicy.setStatus('mandatory')
ctsmtmibSMTTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 5), )
if mibBuilder.loadTexts: ctsmtmibSMTTable.setStatus('mandatory')
ctsmtmibSMTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 5, 1), ).setIndexNames((0, "CTSMTMIB-MIB", "ctsmtmibSmtIndex"))
if mibBuilder.loadTexts: ctsmtmibSMTEntry.setStatus('mandatory')
ctsmtmibSMTDualHomeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notDualHomed", 1), ("linkAorB", 2), ("linkAandB", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibSMTDualHomeStatus.setStatus('mandatory')
ctsmtmibSMTDualHomeWrpLEDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsmtmibSMTDualHomeWrpLEDStatus.setStatus('mandatory')
ctsmtmibSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsmtmibSmtIndex.setStatus('mandatory')
mibBuilder.exportSymbols("CTSMTMIB-MIB", ctsmtmibMacNifTxCts=ctsmtmibMacNifTxCts, ctsmtmibRingTable=ctsmtmibRingTable, ctsmtmibSMTEntry=ctsmtmibSMTEntry, ctsmtmibRingNodeClass=ctsmtmibRingNodeClass, ctsmtmibAttachmentTable=ctsmtmibAttachmentTable, ctsmtmibSMTDualHomeStatus=ctsmtmibSMTDualHomeStatus, ctsmtmibRingMacIndex=ctsmtmibRingMacIndex, ctsmtmibMacPmfRxCts=ctsmtmibMacPmfRxCts, ctsmtmibAttachmentInsertedStatus=ctsmtmibAttachmentInsertedStatus, ctsmtmibSMTTable=ctsmtmibSMTTable, ctsmtmibMacRdfTxCts=ctsmtmibMacRdfTxCts, ctsmtmibMacSifRxCts=ctsmtmibMacSifRxCts, ctsmtmibRingMasterCount=ctsmtmibRingMasterCount, ctsmtmibMacSmtIndex=ctsmtmibMacSmtIndex, ctsmtmibAttachmentIMaxExpiration=ctsmtmibAttachmentIMaxExpiration, ctsmtmibRingMacAddr=ctsmtmibRingMacAddr, ctsmtmibAttachmentNumber=ctsmtmibAttachmentNumber, ctsmtmibRingEntry=ctsmtmibRingEntry, ctsmtmibRingUpStreamAddr=ctsmtmibRingUpStreamAddr, ctsmtmibMacEcfRxCts=ctsmtmibMacEcfRxCts, ctsmtmibMacIndex=ctsmtmibMacIndex, ctsmtmibRingTopology=ctsmtmibRingTopology, ctsmtmibMacEntry=ctsmtmibMacEntry, ctsmtmibMacRingMapUpdateCts=ctsmtmibMacRingMapUpdateCts, ctsmtmibMacPmfTxCts=ctsmtmibMacPmfTxCts, ctsmtmibAttachmentIndex=ctsmtmibAttachmentIndex, ctsmtmibAttachmentClass=ctsmtmibAttachmentClass, ctsmtmibRingNodeIndex=ctsmtmibRingNodeIndex, ctsmtmibAttachmentSMTIndex=ctsmtmibAttachmentSMTIndex, ctsmtmibMacNifRxCts=ctsmtmibMacNifRxCts, ctsmtmibMacEcfTxCts=ctsmtmibMacEcfTxCts, ctsmtmibAttachmentEntry=ctsmtmibAttachmentEntry, ctsmtmibRingNonMasterCount=ctsmtmibRingNonMasterCount, ctsmtmibRingSmtIndex=ctsmtmibRingSmtIndex, ctsmtmibMacSifTxCts=ctsmtmibMacSifTxCts, ctsmtmibMacAutoNegotiation=ctsmtmibMacAutoNegotiation, ctsmtmibAttachmentOpticalBypassPresent=ctsmtmibAttachmentOpticalBypassPresent, ctsmtmibMacRingOpCts=ctsmtmibMacRingOpCts, ctsmtmibMacRdfRxCts=ctsmtmibMacRdfRxCts, ctsmtmibRingDuplicate=ctsmtmibRingDuplicate, ctsmtmibAttachmentInsertPolicy=ctsmtmibAttachmentInsertPolicy, ctsmtmibMacTable=ctsmtmibMacTable, ctsmtmibMacTxCts=ctsmtmibMacTxCts, ctsmtmibSMTDualHomeWrpLEDStatus=ctsmtmibSMTDualHomeWrpLEDStatus, ctsmtmibSmtIndex=ctsmtmibSmtIndex, ctsmtmibRingMacCount=ctsmtmibRingMacCount)
