#
# PySNMP MIB module PEGASUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/pegasus/PEGASUS-MIB
# Produced by pysmi-1.1.12 at Tue May 28 13:12:53 2024
# On host fv-az1789-536 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, NotificationType, Gauge32, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, ModuleIdentity, iso, TimeTicks, enterprises, Counter32, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "Gauge32", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "ModuleIdentity", "iso", "TimeTicks", "enterprises", "Counter32", "Unsigned32", "Counter64")
RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
pegasusMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6368, 2))
pegasusMibModule.setRevisions(('2004-12-17 00:00', '2004-06-14 00:00', '2004-04-08 00:00', '2003-12-11 00:00', '2003-10-30 00:00', '2003-10-24 00:00', '2003-10-02 00:00', '2003-03-14 00:00', '2003-03-11 00:00', '2002-10-09 00:00', '2002-09-19 00:00', '2002-08-23 00:00', '2002-07-16 00:00', '2002-07-03 00:00', '2002-06-24 00:00', '2002-06-20 00:00', '2002-06-07 00:00', '2002-05-22 00:00', '2002-05-10 00:00', '2002-04-25 00:00', '2002-04-16 00:00', '2002-04-03 00:00', '2002-03-19 00:00', '2002-03-14 00:00', '2002-03-01 00:00', '2002-02-28 00:00', '2002-02-18 00:00', '2002-02-14 00:00', '2002-01-25 00:00', '2002-01-23 00:00', '2000-12-21 00:00',))
if mibBuilder.loadTexts: pegasusMibModule.setLastUpdated('200412170000Z')
if mibBuilder.loadTexts: pegasusMibModule.setOrganization('Schmid Telecom, Zurich')
schmidtelecom = MibIdentifier((1, 3, 6, 1, 4, 1, 6368))
dsl = MibIdentifier((1, 3, 6, 1, 4, 1, 6368, 2, 1))
v5 = MibIdentifier((1, 3, 6, 1, 4, 1, 6368, 2, 2))
data = MibIdentifier((1, 3, 6, 1, 4, 1, 6368, 2, 3))
pegasusSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 6368, 2, 4))
perf = MibIdentifier((1, 3, 6, 1, 4, 1, 6368, 2, 7))
class AdminStateEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("locked", 1), ("unlocked", 2), ("shutdown", 3))

class OperStateEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class AvailabilityStatusElem(TextualConvention, Bits):
    reference = 'X.731, section 8.1.2.3 (explanation) X.721, section 14.2 (formal definition of values)'
    status = 'current'
    namedValues = NamedValues(("inTest", 0), ("failed", 1), ("powerOff", 2), ("offLine", 3), ("offDuty", 4), ("dependency", 5), ("degraded", 6), ("notInstalled", 7), ("logFull", 8))

class CommStateEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("disconnected", 1), ("init", 2), ("identification", 3), ("checkHw", 4), ("hwAdaption", 5), ("checkHwVers", 6), ("wrongProgram", 7), ("checkConfig", 8), ("downloadConfig", 9), ("uploadConfig", 10), ("statusSynch", 11), ("resetting", 12), ("inactive", 13), ("active", 14))

class DataPortSpeedEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("autoCrossoverAndPortSpeed", 1), ("autoNegotiationPortSpeed", 2), ("base100TFullDuplex", 3), ("base100THalfDuplex", 4), ("base10TFullDuplex", 5), ("base10THalfDuplex", 6), ("unknown", 7))

class DataPortFlowControlEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("autoNegotiationFlowControl", 1), ("onFlowControl", 2), ("offFlowControl", 3), ("unknown", 4))

class SlotNumber(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 12)

class DataCardSlotNumber(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2)

class V5SlotNumber(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(3, 4)

class DslSlotNumber(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(5, 12)

class DslLinkNumber(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 16)

class TrunkNumber(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 5)

class TrunkNumberOrZero(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 5)

class Priority(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 7)

class DslLinkLoopEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("loop1", 2), ("loop2", 3))

class DslLinkAlarmElem(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("config", 0), ("service", 1))

class DslLinkPSDMaskEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("symmetric", 1), ("asymmetric", 2))

class DslCardAlarmStatus(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("intercom", 0))

dslCardTable = MibTable((1, 3, 6, 1, 4, 1, 6368, 2, 1, 1), )
if mibBuilder.loadTexts: dslCardTable.setStatus('current')
dslCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6368, 2, 1, 1, 1), ).setIndexNames((0, "PEGASUS-MIB", "dslCardSlotNumber"))
if mibBuilder.loadTexts: dslCardEntry.setStatus('current')
dslCardSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 1, 1, 1), DslSlotNumber())
if mibBuilder.loadTexts: dslCardSlotNumber.setStatus('current')
dslCardAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 1, 1, 2), AvailabilityStatusElem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dslCardAvailabilityStatus.setStatus('current')
dslCardHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dslCardHardwareVersion.setStatus('current')
dslCardManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dslCardManufacturer.setStatus('current')
dslCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dslCardName.setStatus('current')
dslCardOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 1, 1, 6), OperStateEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dslCardOperState.setStatus('current')
dslCardFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dslCardFirmwareVersion.setStatus('current')
dslCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dslCardSerialNumber.setStatus('current')
dslCardCommState = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 1, 1, 9), CommStateEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dslCardCommState.setStatus('current')
dslCardAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 1, 1, 10), DslCardAlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dslCardAlarmStatus.setStatus('current')
dslCardM16FirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dslCardM16FirmwareVersion.setStatus('current')
dslLinkTable = MibTable((1, 3, 6, 1, 4, 1, 6368, 2, 1, 2), )
if mibBuilder.loadTexts: dslLinkTable.setStatus('current')
dslLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6368, 2, 1, 2, 1), ).setIndexNames((0, "PEGASUS-MIB", "dslCardSlotNumber"), (0, "PEGASUS-MIB", "dslLinkNumber"))
if mibBuilder.loadTexts: dslLinkEntry.setStatus('current')
dslLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 2, 1, 1), DslLinkNumber())
if mibBuilder.loadTexts: dslLinkNumber.setStatus('current')
dslLinkActiveLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 2, 1, 2), DslLinkLoopEnum()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkActiveLoop.setStatus('current')
dslLinkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkAddress.setStatus('current')
dslLinkAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 2, 1, 4), AdminStateEnum()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkAdminState.setStatus('current')
dslLinkAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 2, 1, 5), DslLinkAlarmElem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dslLinkAlarmStatus.setStatus('current')
dslLinkAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 2, 1, 6), AvailabilityStatusElem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dslLinkAvailabilityStatus.setStatus('current')
dslLinkContact = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkContact.setStatus('current')
dslLinkCustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkCustomerId.setStatus('current')
dslLinkDynamicSlotAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 2, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkDynamicSlotAllocation.setStatus('current')
dslLinkIsRemotePower = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 2, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkIsRemotePower.setStatus('current')
dslLinkLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 36))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkLineRate.setStatus('current')
dslLinkDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 36))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkDataRate.setStatus('current')
dslLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkName.setStatus('current')
dslLinkNotes = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkNotes.setStatus('current')
dslLinkNumberOfBRA = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkNumberOfBRA.setStatus('current')
dslLinkOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 2, 1, 16), OperStateEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dslLinkOperState.setStatus('current')
dslLinkNumberOfZBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkNumberOfZBits.setStatus('current')
dslLinkPSDMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 2, 1, 18), DslLinkPSDMaskEnum()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkPSDMask.setStatus('current')
dslLinkAssignedTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 2, 1, 19), TrunkNumberOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkAssignedTrunk.setStatus('current')
dslLinkPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 2, 1, 20), Priority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkPriority.setStatus('current')
class IadAlarmStatusElem(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("powerdown", 0), ("lifeline", 1), ("dcContinuity", 2))

class IadISDNPoweringEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("off", 1), ("normal", 2), ("lifeline", 3), ("always", 4))

class IadPOTSPoweringEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("off", 1), ("always", 2))

iadTable = MibTable((1, 3, 6, 1, 4, 1, 6368, 2, 1, 3), )
if mibBuilder.loadTexts: iadTable.setStatus('current')
iadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6368, 2, 1, 3, 1), )
dslLinkEntry.registerAugmentions(("PEGASUS-MIB", "iadEntry"))
iadEntry.setIndexNames(*dslLinkEntry.getIndexNames())
if mibBuilder.loadTexts: iadEntry.setStatus('current')
iadAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 3, 1, 1), AvailabilityStatusElem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iadAvailabilityStatus.setStatus('current')
iadHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iadHardwareVersion.setStatus('current')
iadManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iadManufacturer.setStatus('current')
iadName = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iadName.setStatus('current')
iadOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 3, 1, 5), OperStateEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iadOperState.setStatus('current')
iadFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iadFirmwareVersion.setStatus('current')
iadSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iadSerialNumber.setStatus('current')
iadAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 3, 1, 8), IadAlarmStatusElem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iadAlarmStatus.setStatus('current')
iadISDNPowering = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 3, 1, 9), IadISDNPoweringEnum()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iadISDNPowering.setStatus('current')
iadPOTSPowering = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 3, 1, 10), IadPOTSPoweringEnum()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iadPOTSPowering.setStatus('current')
iadEthPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 3, 1, 11), DataPortSpeedEnum()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iadEthPortSpeed.setStatus('current')
iadEthCurrentPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 3, 1, 12), DataPortSpeedEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iadEthCurrentPortSpeed.setStatus('current')
iadEthFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 3, 1, 13), DataPortFlowControlEnum()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iadEthFlowControl.setStatus('current')
iadEthCurrentFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 3, 1, 14), DataPortFlowControlEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iadEthCurrentFlowControl.setStatus('current')
class DslInterfaceTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ltu", 1), ("ntu", 2))

class DslPerformanceStatusElem(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("att", 0), ("losw", 1))

dslInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 6368, 2, 1, 4), )
if mibBuilder.loadTexts: dslInterfaceTable.setStatus('current')
dslInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6368, 2, 1, 4, 1), ).setIndexNames((0, "PEGASUS-MIB", "dslCardSlotNumber"), (0, "PEGASUS-MIB", "dslLinkNumber"), (0, "PEGASUS-MIB", "dslInterfaceType"))
if mibBuilder.loadTexts: dslInterfaceEntry.setStatus('current')
dslInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 4, 1, 1), DslInterfaceTypeEnum())
if mibBuilder.loadTexts: dslInterfaceType.setStatus('current')
dslInterfaceAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 4, 1, 2), AvailabilityStatusElem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dslInterfaceAvailabilityStatus.setStatus('current')
dslInterfaceOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 4, 1, 3), OperStateEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dslInterfaceOperState.setStatus('current')
dslInterfacePerformanceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 4, 1, 4), DslPerformanceStatusElem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dslInterfacePerformanceStatus.setStatus('current')
dslInterfacePerfControlIndexOrZero = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslInterfacePerfControlIndexOrZero.setStatus('current')
dslInterfaceSignalQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: dslInterfaceSignalQuality.setStatus('current')
dslInterfaceAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: dslInterfaceAttenuation.setStatus('current')
class CosClassifierEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("vlanPriority", 1), ("dscpPriority", 2))

class CosClassmap(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 8)

dslLinkCosTable = MibTable((1, 3, 6, 1, 4, 1, 6368, 2, 1, 5), )
if mibBuilder.loadTexts: dslLinkCosTable.setStatus('current')
dslLinkCosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6368, 2, 1, 5, 1), )
dslLinkEntry.registerAugmentions(("PEGASUS-MIB", "dslLinkCosEntry"))
dslLinkCosEntry.setIndexNames(*dslLinkEntry.getIndexNames())
if mibBuilder.loadTexts: dslLinkCosEntry.setStatus('current')
dslLinkCosAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dslLinkCosAvailable.setStatus('current')
dslLinkCosEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 5, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkCosEnabled.setStatus('current')
dslLinkCosClassifier = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 5, 1, 3), CosClassifierEnum()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkCosClassifier.setStatus('current')
dslLinkCosClassmapEF = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 5, 1, 4), CosClassmap()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkCosClassmapEF.setStatus('current')
dslLinkCosClassmapAF2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 5, 1, 5), CosClassmap()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkCosClassmapAF2.setStatus('current')
dslLinkCosClassmapAF1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 5, 1, 6), CosClassmap()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkCosClassmapAF1.setStatus('current')
dslLinkCosRateLimitEF = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2312))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkCosRateLimitEF.setStatus('current')
dslLinkCosRateLimitAF2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2312))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkCosRateLimitAF2.setStatus('current')
dslLinkCosRateLimitAF1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2312))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslLinkCosRateLimitAF1.setStatus('current')
class V5ClockModeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("v5ClockMaster", 1), ("v5ClockSlave", 2))

class V5ClockSourceEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("v5ClockExternal", 1), ("v5ClockLink1", 2), ("v5ClockLink2", 3), ("v5ClockLink3", 4), ("v5ClockLink4", 5), ("v5ClockLink5", 6), ("v5ClockLink6", 7), ("v5ClockLink7", 8), ("v5ClockLink8", 9))

class V5ProtocolVersionEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("v51", 1), ("v52", 2))

class V5CardFlagSet(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("noFastAlign", 0), ("noLinkId", 1), ("autoPortUnblock", 2), ("retryAutoPortUnblock", 3), ("rejectLinkId", 4), ("forcePSTNDL", 5), ("slowStart", 6), ("deallocBlockedPort", 7))

v5CardTable = MibTable((1, 3, 6, 1, 4, 1, 6368, 2, 2, 1), )
if mibBuilder.loadTexts: v5CardTable.setStatus('current')
v5CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6368, 2, 2, 1, 1), ).setIndexNames((0, "PEGASUS-MIB", "v5CardSlotNumber"))
if mibBuilder.loadTexts: v5CardEntry.setStatus('current')
v5CardSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 1, 1, 1), V5SlotNumber())
if mibBuilder.loadTexts: v5CardSlotNumber.setStatus('current')
v5CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 1, 1, 2), AdminStateEnum()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5CardAdminState.setStatus('current')
v5CardAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 1, 1, 3), AvailabilityStatusElem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v5CardAvailabilityStatus.setStatus('current')
v5CardHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v5CardHardwareVersion.setStatus('current')
v5CardManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v5CardManufacturer.setStatus('current')
v5CardName = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v5CardName.setStatus('current')
v5CardOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 1, 1, 7), OperStateEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v5CardOperState.setStatus('current')
v5CardFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v5CardFirmwareVersion.setStatus('current')
v5CardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v5CardSerialNumber.setStatus('current')
v5CardCommState = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 1, 1, 10), CommStateEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v5CardCommState.setStatus('current')
v5CardIsProvisioning = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v5CardIsProvisioning.setStatus('current')
v5CardClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 1, 1, 12), V5ClockModeEnum()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5CardClockMode.setStatus('current')
v5CardClockSource1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 1, 1, 13), V5ClockSourceEnum()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5CardClockSource1.setStatus('current')
v5CardClockSource2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 1, 1, 14), V5ClockSourceEnum()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5CardClockSource2.setStatus('current')
v5CardProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 1, 1, 15), V5ProtocolVersionEnum()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5CardProtocolVersion.setStatus('current')
v5CardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 1, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5CardRowStatus.setStatus('current')
v5CardFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 1, 1, 17), V5CardFlagSet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5CardFlags.setStatus('current')
v5CardETSIRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5CardETSIRelease.setStatus('current')
v5CardE1LineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hdb3", 1), ("ami", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5CardE1LineCode.setStatus('current')
v5CardE1FrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("crc4", 1), ("crc4e", 2), ("dff", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5CardE1FrameFormat.setStatus('current')
class V5LinkNumber(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 8)

class V5LinkNumberOrZero(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 8)

class V5InterfaceNumber(V5LinkNumber):
    pass

class V5InterfaceNumberOrZero(V5LinkNumberOrZero):
    pass

class V5PccCount(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 3)

class V5LinkAlarmStatusElem(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("v5LinkAlarmLOS", 0), ("v5LinkAlarmLFA", 1), ("v5LinkAlarmAIS", 2), ("v5LinkAlarmBERH", 3), ("v5LinkAlarmEXTLOC", 4), ("v5LinkAlarmRAI", 5), ("v5LinkAlarmIdFailure", 6))

class V5LinkTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("primary", 1), ("secondary", 2), ("normal", 3))

v5LinkTable = MibTable((1, 3, 6, 1, 4, 1, 6368, 2, 2, 2), )
if mibBuilder.loadTexts: v5LinkTable.setStatus('current')
v5LinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6368, 2, 2, 2, 1), ).setIndexNames((0, "PEGASUS-MIB", "v5CardSlotNumber"), (0, "PEGASUS-MIB", "v5LinkNumber"))
if mibBuilder.loadTexts: v5LinkEntry.setStatus('current')
v5LinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 2, 1, 1), V5LinkNumber())
if mibBuilder.loadTexts: v5LinkNumber.setStatus('current')
v5LinkAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 2, 1, 2), AdminStateEnum()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5LinkAdminState.setStatus('current')
v5LinkAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 2, 1, 3), AvailabilityStatusElem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v5LinkAvailabilityStatus.setStatus('current')
v5LinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5LinkId.setStatus('current')
v5LinkOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 2, 1, 5), OperStateEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v5LinkOperState.setStatus('current')
v5LinkInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 2, 1, 6), V5InterfaceNumberOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5LinkInterface.setStatus('current')
v5LinkAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 2, 1, 7), V5LinkAlarmStatusElem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v5LinkAlarmStatus.setStatus('current')
v5LinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 2, 1, 8), V5LinkTypeEnum()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5LinkType.setStatus('current')
v5LinkNumberOfPcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 2, 1, 9), V5PccCount()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5LinkNumberOfPcc.setStatus('current')
v5LinkPerfControlIndexOrZero = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 2, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5LinkPerfControlIndexOrZero.setStatus('current')
v5LinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5LinkRowStatus.setStatus('current')
v5LinkLineIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v5LinkLineIdentifier.setStatus('current')
class V5InterfaceAlarmSet(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("idFailure", 0), ("provisioningMismatch", 1))

v5InterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 6368, 2, 2, 3), )
if mibBuilder.loadTexts: v5InterfaceTable.setStatus('current')
v5InterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6368, 2, 2, 3, 1), ).setIndexNames((0, "PEGASUS-MIB", "v5CardSlotNumber"), (0, "PEGASUS-MIB", "v5InterfaceNumber"))
if mibBuilder.loadTexts: v5InterfaceEntry.setStatus('current')
v5InterfaceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 3, 1, 1), V5InterfaceNumber())
if mibBuilder.loadTexts: v5InterfaceNumber.setStatus('current')
v5InterfaceAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 3, 1, 2), AdminStateEnum()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5InterfaceAdminState.setStatus('current')
v5InterfaceAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 3, 1, 3), AvailabilityStatusElem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v5InterfaceAvailabilityStatus.setStatus('current')
v5InterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5InterfaceId.setStatus('current')
v5InterfaceOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 3, 1, 5), OperStateEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v5InterfaceOperState.setStatus('current')
v5InterfaceVariantId = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5InterfaceVariantId.setStatus('current')
v5InterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5InterfaceRowStatus.setStatus('current')
v5InterfaceAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 3, 1, 8), V5InterfaceAlarmSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v5InterfaceAlarmStatus.setStatus('current')
class V5LccNumber(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 21)

class V5LccNumberOrZero(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 21)

class V5PccNumberOrZero(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 3)

v5LccTable = MibTable((1, 3, 6, 1, 4, 1, 6368, 2, 2, 4), )
if mibBuilder.loadTexts: v5LccTable.setStatus('current')
v5LccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6368, 2, 2, 4, 1), ).setIndexNames((0, "PEGASUS-MIB", "v5CardSlotNumber"), (0, "PEGASUS-MIB", "v5InterfaceNumber"), (0, "PEGASUS-MIB", "v5LccNumber"))
if mibBuilder.loadTexts: v5LccEntry.setStatus('current')
v5LccNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 4, 1, 1), V5LccNumber())
if mibBuilder.loadTexts: v5LccNumber.setStatus('current')
v5LccIsProtected = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 4, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5LccIsProtected.setStatus('current')
v5LccId = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 4, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5LccId.setStatus('current')
v5LccOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 4, 1, 4), OperStateEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v5LccOperState.setStatus('current')
v5LccPccV5LinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 4, 1, 5), V5LinkNumberOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5LccPccV5LinkNumber.setStatus('current')
v5LccPccTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 4, 1, 6), V5PccNumberOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5LccPccTimeslot.setStatus('current')
v5LccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v5LccRowStatus.setStatus('current')
class V5IsdnPortLoopEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("loop1", 2), ("loop2", 3))

class V5IsdnPortBlockingStatusEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("local", 2), ("remote", 3), ("both", 4))

class V5IsdnPortAlarmStatusElem(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("l1ActivationFault", 0), ("losTref", 1), ("losDsig", 2))

class V5TimeslotNumber(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(1, 15), ValueRangeConstraint(17, 31), )
class V5EnvelopeFuncAddress(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 8175)

v5IsdnPortTable = MibTable((1, 3, 6, 1, 4, 1, 6368, 2, 2, 5), )
if mibBuilder.loadTexts: v5IsdnPortTable.setStatus('current')
v5IsdnPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6368, 2, 2, 5, 1), ).setIndexNames((0, "PEGASUS-MIB", "dslCardSlotNumber"), (0, "PEGASUS-MIB", "dslLinkNumber"), (0, "PEGASUS-MIB", "v5IsdnPortBRANumber"))
if mibBuilder.loadTexts: v5IsdnPortEntry.setStatus('current')
v5IsdnPortBRANumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: v5IsdnPortBRANumber.setStatus('current')
v5IsdnPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 5, 1, 4), AdminStateEnum()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v5IsdnPortAdminState.setStatus('current')
v5IsdnPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 5, 1, 5), OperStateEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v5IsdnPortOperState.setStatus('current')
v5IsdnPortBlockingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 5, 1, 6), V5IsdnPortBlockingStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v5IsdnPortBlockingStatus.setStatus('current')
v5IsdnPortBearer1Timeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 5, 1, 7), V5TimeslotNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v5IsdnPortBearer1Timeslot.setStatus('current')
v5IsdnPortBearer2Timeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 5, 1, 8), V5TimeslotNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v5IsdnPortBearer2Timeslot.setStatus('current')
v5IsdnPortEnvelopeFuncAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 5, 1, 9), V5EnvelopeFuncAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v5IsdnPortEnvelopeFuncAddress.setStatus('current')
v5IsdnPortIsActivated = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 5, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v5IsdnPortIsActivated.setStatus('current')
v5IsdnPortAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 5, 1, 11), V5IsdnPortAlarmStatusElem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v5IsdnPortAlarmStatus.setStatus('current')
v5IsdnPortActiveLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 5, 1, 12), V5IsdnPortLoopEnum()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v5IsdnPortActiveLoop.setStatus('obsolete')
v5IsdnPortV5CardSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 5, 1, 13), V5SlotNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v5IsdnPortV5CardSlotNumber.setStatus('current')
v5IsdnPortV5InterfaceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 5, 1, 14), V5InterfaceNumberOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v5IsdnPortV5InterfaceNumber.setStatus('current')
v5IsdnPortDSignallingCommChan = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 5, 1, 15), V5LccNumberOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v5IsdnPortDSignallingCommChan.setStatus('current')
v5IsdnPortFrameCommChan = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 5, 1, 16), V5LccNumberOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v5IsdnPortFrameCommChan.setStatus('current')
v5IsdnPortPacketCommChan = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 5, 1, 17), V5LccNumberOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v5IsdnPortPacketCommChan.setStatus('current')
v5IsdnPortLineIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 2, 5, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v5IsdnPortLineIdentifier.setStatus('current')
dataCardTable = MibTable((1, 3, 6, 1, 4, 1, 6368, 2, 3, 1), )
if mibBuilder.loadTexts: dataCardTable.setStatus('current')
dataCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6368, 2, 3, 1, 1), ).setIndexNames((0, "PEGASUS-MIB", "dataCardSlotNumber"))
if mibBuilder.loadTexts: dataCardEntry.setStatus('current')
dataCardSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 3, 1, 1, 1), DataCardSlotNumber())
if mibBuilder.loadTexts: dataCardSlotNumber.setStatus('current')
dataCardAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 3, 1, 1, 2), AvailabilityStatusElem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataCardAvailabilityStatus.setStatus('current')
dataCardHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataCardHardwareVersion.setStatus('current')
dataCardManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataCardManufacturer.setStatus('current')
dataCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataCardName.setStatus('current')
dataCardOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 3, 1, 1, 6), OperStateEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataCardOperState.setStatus('current')
dataCardFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataCardFirmwareVersion.setStatus('current')
dataCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 3, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataCardSerialNumber.setStatus('current')
dataCardCommState = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 3, 1, 1, 9), CommStateEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataCardCommState.setStatus('current')
dataCardVLANMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 3, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataCardVLANMode.setStatus('current')
dataPortTable = MibTable((1, 3, 6, 1, 4, 1, 6368, 2, 3, 2), )
if mibBuilder.loadTexts: dataPortTable.setStatus('current')
dataPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6368, 2, 3, 2, 1), ).setIndexNames((0, "PEGASUS-MIB", "dataCardSlotNumber"), (0, "PEGASUS-MIB", "dataPortNumber"))
if mibBuilder.loadTexts: dataPortEntry.setStatus('current')
dataPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 3, 2, 1, 1), TrunkNumber())
if mibBuilder.loadTexts: dataPortNumber.setStatus('current')
dataPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 3, 2, 1, 2), AdminStateEnum()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortAdminState.setStatus('current')
dataPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 3, 2, 1, 3), OperStateEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortOperState.setStatus('current')
dataPortAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 3, 2, 1, 4), AvailabilityStatusElem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortAvailabilityStatus.setStatus('current')
dataPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 3, 2, 1, 5), DataPortSpeedEnum()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortSpeed.setStatus('current')
dataPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 3, 2, 1, 6), DataPortFlowControlEnum()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortFlowControl.setStatus('current')
class ConfigPriorityEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("server", 1), ("device", 2))

class HWAdaptionPolicyEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("device", 1), ("server", 2))

class RackAlarmStatusElem(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("psu1Failure", 0), ("psu2Failure", 1), ("fanFailure", 2), ("urgentExt", 3), ("nonUrgentExt", 4))

autoPersistDelay = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoPersistDelay.setStatus('current')
autoPersistEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 4, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoPersistEnabled.setStatus('current')
configPriority = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 4, 3), ConfigPriorityEnum()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configPriority.setStatus('current')
hwAdaptionPolicy = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 4, 4), HWAdaptionPolicyEnum()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAdaptionPolicy.setStatus('obsolete')
ipBaseAddress = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 4, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipBaseAddress.setStatus('current')
javaRuntimeVersion = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 4, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: javaRuntimeVersion.setStatus('current')
javaVMName = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 4, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: javaVMName.setStatus('current')
javaVMVersion = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 4, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: javaVMVersion.setStatus('current')
mgmtIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 4, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtIPAddress.setStatus('current')
osArchitecture = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 4, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osArchitecture.setStatus('current')
osNameAndVersion = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 4, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osNameAndVersion.setStatus('current')
pemVersion = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 4, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemVersion.setStatus('current')
startedBy = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 4, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: startedBy.setStatus('current')
systemNumber = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNumber.setStatus('current')
mibRevision = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 4, 16), DisplayString().clone('$Workfile: PEGASUS.mib $ $Revision: 48 $ $Date: 12/17/04 1:16p $')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibRevision.setStatus('current')
readCommunity = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 4, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: readCommunity.setStatus('current')
writeCommunity = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 4, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: writeCommunity.setStatus('current')
trapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 4, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapCommunity.setStatus('current')
trapDestination = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 4, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestination.setStatus('current')
agentPort = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPort.setStatus('current')
authRespEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 4, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authRespEnabled.setStatus('obsolete')
rackAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 4, 23), RackAlarmStatusElem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackAlarmStatus.setStatus('current')
class PerfControlStatus(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("busy", 0), ("offline", 1), ("data", 2), ("marked", 3))

perfSweepCyclePeriod = MibScalar((1, 3, 6, 1, 4, 1, 6368, 2, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800)).clone(300)).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: perfSweepCyclePeriod.setStatus('current')
perfControlTable = MibTable((1, 3, 6, 1, 4, 1, 6368, 2, 7, 2), )
if mibBuilder.loadTexts: perfControlTable.setStatus('current')
perfControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6368, 2, 7, 2, 1), ).setIndexNames((0, "PEGASUS-MIB", "perfControlIndex"))
if mibBuilder.loadTexts: perfControlEntry.setStatus('current')
perfControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: perfControlIndex.setStatus('current')
perfControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 7, 2, 1, 2), PerfControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfControlStatus.setStatus('current')
perfControlLinkDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 7, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfControlLinkDescr.setStatus('current')
perfControlUpdatePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 180))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: perfControlUpdatePeriod.setStatus('current')
perfControlEffectiveUpdatePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 180))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfControlEffectiveUpdatePeriod.setStatus('obsolete')
perfControlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 7, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: perfControlRowStatus.setStatus('current')
class PerfHistoryType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("history15m", 1), ("history24h", 2))

perfDataTable = MibTable((1, 3, 6, 1, 4, 1, 6368, 2, 7, 3), )
if mibBuilder.loadTexts: perfDataTable.setStatus('current')
perfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6368, 2, 7, 3, 1), ).setIndexNames((0, "PEGASUS-MIB", "perfControlIndex"), (0, "PEGASUS-MIB", "perfDataKind"), (0, "PEGASUS-MIB", "perfDataIndex"))
if mibBuilder.loadTexts: perfDataEntry.setStatus('current')
perfDataKind = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 7, 3, 1, 1), PerfHistoryType())
if mibBuilder.loadTexts: perfDataKind.setStatus('current')
perfDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: perfDataIndex.setStatus('current')
perfDataES = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 7, 3, 1, 3), Integer32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: perfDataES.setStatus('current')
perfDataSES = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 7, 3, 1, 4), Integer32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: perfDataSES.setStatus('current')
perfDataUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 7, 3, 1, 5), Integer32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: perfDataUAS.setStatus('current')
perfDataCV = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 7, 3, 1, 6), Integer32()).setUnits('Frames with CRC faults').setMaxAccess("readonly")
if mibBuilder.loadTexts: perfDataCV.setStatus('current')
perfDataLOSWS = MibTableColumn((1, 3, 6, 1, 4, 1, 6368, 2, 7, 3, 1, 7), Integer32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: perfDataLOSWS.setStatus('current')
mibBuilder.exportSymbols("PEGASUS-MIB", dslLinkActiveLoop=dslLinkActiveLoop, osNameAndVersion=osNameAndVersion, iadEntry=iadEntry, dslCardAlarmStatus=dslCardAlarmStatus, dslInterfacePerformanceStatus=dslInterfacePerformanceStatus, dslInterfaceTable=dslInterfaceTable, V5InterfaceNumber=V5InterfaceNumber, v5LinkId=v5LinkId, v5LinkAlarmStatus=v5LinkAlarmStatus, dslLinkName=dslLinkName, v5LccPccTimeslot=v5LccPccTimeslot, mibRevision=mibRevision, pegasusMibModule=pegasusMibModule, DataPortFlowControlEnum=DataPortFlowControlEnum, dslLinkAddress=dslLinkAddress, perfControlRowStatus=perfControlRowStatus, v5CardFirmwareVersion=v5CardFirmwareVersion, v5CardSerialNumber=v5CardSerialNumber, v5CardRowStatus=v5CardRowStatus, V5LccNumberOrZero=V5LccNumberOrZero, PYSNMP_MODULE_ID=pegasusMibModule, perfControlEffectiveUpdatePeriod=perfControlEffectiveUpdatePeriod, perfControlUpdatePeriod=perfControlUpdatePeriod, dataPortSpeed=dataPortSpeed, DslLinkAlarmElem=DslLinkAlarmElem, v5IsdnPortBearer2Timeslot=v5IsdnPortBearer2Timeslot, V5LinkTypeEnum=V5LinkTypeEnum, IadPOTSPoweringEnum=IadPOTSPoweringEnum, systemNumber=systemNumber, V5InterfaceAlarmSet=V5InterfaceAlarmSet, DslLinkNumber=DslLinkNumber, v5CardFlags=v5CardFlags, RackAlarmStatusElem=RackAlarmStatusElem, v5LinkTable=v5LinkTable, v5CardClockSource1=v5CardClockSource1, DslCardAlarmStatus=DslCardAlarmStatus, v5LccNumber=v5LccNumber, DslPerformanceStatusElem=DslPerformanceStatusElem, v5LinkType=v5LinkType, PerfControlStatus=PerfControlStatus, iadFirmwareVersion=iadFirmwareVersion, v5IsdnPortBRANumber=v5IsdnPortBRANumber, dslLinkCosRateLimitEF=dslLinkCosRateLimitEF, v5IsdnPortActiveLoop=v5IsdnPortActiveLoop, dataCardAvailabilityStatus=dataCardAvailabilityStatus, perfDataSES=perfDataSES, dslLinkAvailabilityStatus=dslLinkAvailabilityStatus, iadEthPortSpeed=iadEthPortSpeed, dslLinkCosEnabled=dslLinkCosEnabled, HWAdaptionPolicyEnum=HWAdaptionPolicyEnum, v5IsdnPortTable=v5IsdnPortTable, dslLinkTable=dslLinkTable, dslLinkNumberOfZBits=dslLinkNumberOfZBits, DslLinkLoopEnum=DslLinkLoopEnum, dslLinkContact=dslLinkContact, v5CardHardwareVersion=v5CardHardwareVersion, dataPortOperState=dataPortOperState, v5LccIsProtected=v5LccIsProtected, v5InterfaceAvailabilityStatus=v5InterfaceAvailabilityStatus, dataCardCommState=dataCardCommState, iadISDNPowering=iadISDNPowering, perfDataES=perfDataES, DslSlotNumber=DslSlotNumber, dslLinkCosClassmapAF2=dslLinkCosClassmapAF2, v5CardClockMode=v5CardClockMode, v5CardCommState=v5CardCommState, v5IsdnPortV5InterfaceNumber=v5IsdnPortV5InterfaceNumber, dslCardM16FirmwareVersion=dslCardM16FirmwareVersion, v5InterfaceTable=v5InterfaceTable, perfDataUAS=perfDataUAS, V5LinkNumber=V5LinkNumber, v5InterfaceVariantId=v5InterfaceVariantId, v5CardName=v5CardName, v5IsdnPortBearer1Timeslot=v5IsdnPortBearer1Timeslot, iadHardwareVersion=iadHardwareVersion, v5IsdnPortV5CardSlotNumber=v5IsdnPortV5CardSlotNumber, v5IsdnPortLineIdentifier=v5IsdnPortLineIdentifier, v5IsdnPortIsActivated=v5IsdnPortIsActivated, dsl=dsl, V5IsdnPortAlarmStatusElem=V5IsdnPortAlarmStatusElem, dslCardSerialNumber=dslCardSerialNumber, dslLinkCosRateLimitAF1=dslLinkCosRateLimitAF1, v5IsdnPortAlarmStatus=v5IsdnPortAlarmStatus, perfControlStatus=perfControlStatus, dslCardHardwareVersion=dslCardHardwareVersion, dataCardManufacturer=dataCardManufacturer, perfDataLOSWS=perfDataLOSWS, perfDataIndex=perfDataIndex, v5LccPccV5LinkNumber=v5LccPccV5LinkNumber, dslLinkCosAvailable=dslLinkCosAvailable, iadAlarmStatus=iadAlarmStatus, perfSweepCyclePeriod=perfSweepCyclePeriod, IadAlarmStatusElem=IadAlarmStatusElem, agentPort=agentPort, V5EnvelopeFuncAddress=V5EnvelopeFuncAddress, v5LinkAdminState=v5LinkAdminState, v5IsdnPortEntry=v5IsdnPortEntry, CosClassifierEnum=CosClassifierEnum, v5CardE1FrameFormat=v5CardE1FrameFormat, v5LinkInterface=v5LinkInterface, javaVMVersion=javaVMVersion, v5CardAvailabilityStatus=v5CardAvailabilityStatus, dataPortNumber=dataPortNumber, V5SlotNumber=V5SlotNumber, rackAlarmStatus=rackAlarmStatus, perfDataKind=perfDataKind, iadEthCurrentPortSpeed=iadEthCurrentPortSpeed, IadISDNPoweringEnum=IadISDNPoweringEnum, dslCardFirmwareVersion=dslCardFirmwareVersion, dslInterfaceEntry=dslInterfaceEntry, V5LccNumber=V5LccNumber, v5InterfaceRowStatus=v5InterfaceRowStatus, DataCardSlotNumber=DataCardSlotNumber, dslCardManufacturer=dslCardManufacturer, perfControlIndex=perfControlIndex, dslLinkNumberOfBRA=dslLinkNumberOfBRA, iadTable=iadTable, readCommunity=readCommunity, dataPortFlowControl=dataPortFlowControl, dataCardName=dataCardName, v5LccEntry=v5LccEntry, CommStateEnum=CommStateEnum, dataCardOperState=dataCardOperState, dslLinkCosTable=dslLinkCosTable, dslCardOperState=dslCardOperState, iadName=iadName, AvailabilityStatusElem=AvailabilityStatusElem, dslCardName=dslCardName, dataPortAvailabilityStatus=dataPortAvailabilityStatus, dslInterfaceType=dslInterfaceType, v5LccId=v5LccId, v5IsdnPortBlockingStatus=v5IsdnPortBlockingStatus, startedBy=startedBy, v5LinkLineIdentifier=v5LinkLineIdentifier, dslCardEntry=dslCardEntry, V5ClockSourceEnum=V5ClockSourceEnum, V5ClockModeEnum=V5ClockModeEnum, v5IsdnPortAdminState=v5IsdnPortAdminState, V5InterfaceNumberOrZero=V5InterfaceNumberOrZero, v5InterfaceAlarmStatus=v5InterfaceAlarmStatus, dataPortAdminState=dataPortAdminState, dslLinkLineRate=dslLinkLineRate, dslLinkNotes=dslLinkNotes, iadEthCurrentFlowControl=iadEthCurrentFlowControl, v5LinkNumber=v5LinkNumber, dslLinkIsRemotePower=dslLinkIsRemotePower, autoPersistDelay=autoPersistDelay, v5=v5, iadAvailabilityStatus=iadAvailabilityStatus, dslInterfacePerfControlIndexOrZero=dslInterfacePerfControlIndexOrZero, CosClassmap=CosClassmap, dataCardTable=dataCardTable, v5IsdnPortOperState=v5IsdnPortOperState, dataPortEntry=dataPortEntry, v5LinkOperState=v5LinkOperState, trapCommunity=trapCommunity, v5InterfaceId=v5InterfaceId, javaVMName=javaVMName, V5ProtocolVersionEnum=V5ProtocolVersionEnum, V5LinkAlarmStatusElem=V5LinkAlarmStatusElem, ConfigPriorityEnum=ConfigPriorityEnum, pegasusSystem=pegasusSystem, iadPOTSPowering=iadPOTSPowering, dslLinkCosClassifier=dslLinkCosClassifier, v5LccRowStatus=v5LccRowStatus, v5InterfaceOperState=v5InterfaceOperState, V5TimeslotNumber=V5TimeslotNumber, dataCardVLANMode=dataCardVLANMode, v5CardE1LineCode=v5CardE1LineCode, perfControlLinkDescr=perfControlLinkDescr, v5CardIsProvisioning=v5CardIsProvisioning, v5CardClockSource2=v5CardClockSource2, perfControlEntry=perfControlEntry, dslLinkAdminState=dslLinkAdminState, dslCardSlotNumber=dslCardSlotNumber, dslInterfaceAvailabilityStatus=dslInterfaceAvailabilityStatus, v5CardETSIRelease=v5CardETSIRelease, v5IsdnPortEnvelopeFuncAddress=v5IsdnPortEnvelopeFuncAddress, dataCardSlotNumber=dataCardSlotNumber, PerfHistoryType=PerfHistoryType, perfDataCV=perfDataCV, dslLinkPriority=dslLinkPriority, iadEthFlowControl=iadEthFlowControl, dslLinkPSDMask=dslLinkPSDMask, dslLinkAlarmStatus=dslLinkAlarmStatus, javaRuntimeVersion=javaRuntimeVersion, writeCommunity=writeCommunity, iadManufacturer=iadManufacturer, v5CardSlotNumber=v5CardSlotNumber, perfDataTable=perfDataTable, AdminStateEnum=AdminStateEnum, v5LccOperState=v5LccOperState, dataCardEntry=dataCardEntry, perfDataEntry=perfDataEntry, v5IsdnPortPacketCommChan=v5IsdnPortPacketCommChan, SlotNumber=SlotNumber, autoPersistEnabled=autoPersistEnabled, DataPortSpeedEnum=DataPortSpeedEnum, dslLinkCosRateLimitAF2=dslLinkCosRateLimitAF2, V5IsdnPortBlockingStatusEnum=V5IsdnPortBlockingStatusEnum, configPriority=configPriority, v5CardTable=v5CardTable, dslLinkCosClassmapAF1=dslLinkCosClassmapAF1, dslLinkCosEntry=dslLinkCosEntry, v5LinkAvailabilityStatus=v5LinkAvailabilityStatus, Priority=Priority, dslLinkNumber=dslLinkNumber, V5IsdnPortLoopEnum=V5IsdnPortLoopEnum, dslLinkCosClassmapEF=dslLinkCosClassmapEF, TrunkNumber=TrunkNumber, v5LinkNumberOfPcc=v5LinkNumberOfPcc, data=data, v5IsdnPortDSignallingCommChan=v5IsdnPortDSignallingCommChan, v5IsdnPortFrameCommChan=v5IsdnPortFrameCommChan, v5LccTable=v5LccTable, dataCardSerialNumber=dataCardSerialNumber, osArchitecture=osArchitecture, dslInterfaceOperState=dslInterfaceOperState, iadOperState=iadOperState, dslLinkCustomerId=dslLinkCustomerId, dslLinkDataRate=dslLinkDataRate, dslInterfaceSignalQuality=dslInterfaceSignalQuality, v5InterfaceEntry=v5InterfaceEntry, hwAdaptionPolicy=hwAdaptionPolicy, dslCardAvailabilityStatus=dslCardAvailabilityStatus, v5CardProtocolVersion=v5CardProtocolVersion, dslInterfaceAttenuation=dslInterfaceAttenuation, V5PccCount=V5PccCount, OperStateEnum=OperStateEnum, v5LinkRowStatus=v5LinkRowStatus, V5CardFlagSet=V5CardFlagSet, TrunkNumberOrZero=TrunkNumberOrZero, V5PccNumberOrZero=V5PccNumberOrZero, pemVersion=pemVersion, trapDestination=trapDestination, dslCardCommState=dslCardCommState, mgmtIPAddress=mgmtIPAddress, V5LinkNumberOrZero=V5LinkNumberOrZero, v5CardEntry=v5CardEntry, dataCardHardwareVersion=dataCardHardwareVersion, iadSerialNumber=iadSerialNumber, v5LinkPerfControlIndexOrZero=v5LinkPerfControlIndexOrZero, DslInterfaceTypeEnum=DslInterfaceTypeEnum, v5CardManufacturer=v5CardManufacturer, dslLinkOperState=dslLinkOperState, dataCardFirmwareVersion=dataCardFirmwareVersion, dataPortTable=dataPortTable, perf=perf, schmidtelecom=schmidtelecom, v5InterfaceAdminState=v5InterfaceAdminState, dslLinkEntry=dslLinkEntry, DslLinkPSDMaskEnum=DslLinkPSDMaskEnum, dslCardTable=dslCardTable, v5LinkEntry=v5LinkEntry)
mibBuilder.exportSymbols("PEGASUS-MIB", perfControlTable=perfControlTable, authRespEnabled=authRespEnabled, dslLinkAssignedTrunk=dslLinkAssignedTrunk, ipBaseAddress=ipBaseAddress, v5InterfaceNumber=v5InterfaceNumber, dslLinkDynamicSlotAllocation=dslLinkDynamicSlotAllocation, v5CardAdminState=v5CardAdminState, v5CardOperState=v5CardOperState)
