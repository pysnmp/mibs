#
# PySNMP MIB module AVAMAR-MCS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/avamar/AVAMAR-MCS-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 15:07:35 2024
# On host fv-az692-788 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Counter32, Unsigned32, Bits, NotificationType, Integer32, iso, ModuleIdentity, enterprises, ObjectIdentity, Counter64, NotificationType, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "Unsigned32", "Bits", "NotificationType", "Integer32", "iso", "ModuleIdentity", "enterprises", "ObjectIdentity", "Counter64", "NotificationType", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
avamar = MibIdentifier((1, 3, 6, 1, 4, 1, 15597))
software = MibIdentifier((1, 3, 6, 1, 4, 1, 15597, 1))
mcs = MibIdentifier((1, 3, 6, 1, 4, 1, 15597, 1, 1))
event = MibIdentifier((1, 3, 6, 1, 4, 1, 15597, 1, 1, 1))
eventTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 15597, 1, 1, 1, 1))
eventData = MibIdentifier((1, 3, 6, 1, 4, 1, 15597, 1, 1, 1, 2))
burm = MibIdentifier((1, 3, 6, 1, 4, 1, 15597, 1, 1, 2))
burmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 15597, 1, 1, 2, 1))
burmLastActivityData = MibIdentifier((1, 3, 6, 1, 4, 1, 15597, 1, 1, 2, 2))
burmSchedulerData = MibIdentifier((1, 3, 6, 1, 4, 1, 15597, 1, 1, 2, 3))
dpn = MibIdentifier((1, 3, 6, 1, 4, 1, 15597, 1, 1, 3))
dpnTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 15597, 1, 1, 3, 1))
dpnData = MibIdentifier((1, 3, 6, 1, 4, 1, 15597, 1, 1, 3, 2))
eventTrap = NotificationType((1, 3, 6, 1, 4, 1, 15597, 1, 1, 1, 1) + (0,1)).setObjects(("AVAMAR-MCS-MIB", "eventCode"), ("AVAMAR-MCS-MIB", "eventTimestamp"), ("AVAMAR-MCS-MIB", "eventCategory"), ("AVAMAR-MCS-MIB", "eventType"), ("AVAMAR-MCS-MIB", "eventSummary"), ("AVAMAR-MCS-MIB", "eventHwSource"), ("AVAMAR-MCS-MIB", "eventSwSource"))
testEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 15597, 1, 1, 1, 1) + (0,2)).setObjects(("AVAMAR-MCS-MIB", "eventCode"))
eventCode = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventCode.setStatus('mandatory')
eventTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTimestamp.setStatus('mandatory')
eventCategory = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventCategory.setStatus('mandatory')
eventType = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventType.setStatus('mandatory')
eventSummary = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventSummary.setStatus('mandatory')
eventHwSource = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 1, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventHwSource.setStatus('mandatory')
eventSwSource = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventSwSource.setStatus('mandatory')
burmActivityTrap = NotificationType((1, 3, 6, 1, 4, 1, 15597, 1, 1, 2, 1) + (0,1)).setObjects(("AVAMAR-MCS-MIB", "lastActivityClient"), ("AVAMAR-MCS-MIB", "lastActivityDomain"), ("AVAMAR-MCS-MIB", "lastActivityGroup"), ("AVAMAR-MCS-MIB", "lastActivityPlugInName"), ("AVAMAR-MCS-MIB", "lastActivityType"), ("AVAMAR-MCS-MIB", "lastActivityDataset"), ("AVAMAR-MCS-MIB", "lastActivitySchedule"), ("AVAMAR-MCS-MIB", "lastActivityRetentionPolicy"), ("AVAMAR-MCS-MIB", "lastActivityBytesScanned"), ("AVAMAR-MCS-MIB", "lastActivityBytesModifiedSent"), ("AVAMAR-MCS-MIB", "lastActivityStatusCode"), ("AVAMAR-MCS-MIB", "lastActivityErrorCode"), ("AVAMAR-MCS-MIB", "lastActivityBackupLabel"), ("AVAMAR-MCS-MIB", "lastActivityBackupNumber"))
lastActivityClient = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastActivityClient.setStatus('mandatory')
lastActivityDomain = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastActivityDomain.setStatus('mandatory')
lastActivityGroup = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 2, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastActivityGroup.setStatus('mandatory')
lastActivityPlugInName = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 2, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastActivityPlugInName.setStatus('mandatory')
lastActivityType = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 2, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastActivityType.setStatus('mandatory')
lastActivityDataset = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 2, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastActivityDataset.setStatus('mandatory')
lastActivitySchedule = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 2, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastActivitySchedule.setStatus('mandatory')
lastActivityRetentionPolicy = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 2, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastActivityRetentionPolicy.setStatus('mandatory')
lastActivityBytesScanned = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 2, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastActivityBytesScanned.setStatus('mandatory')
lastActivityBytesModifiedSent = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 2, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastActivityBytesModifiedSent.setStatus('mandatory')
lastActivityStatusCode = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastActivityStatusCode.setStatus('mandatory')
lastActivityErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 2, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastActivityErrorCode.setStatus('mandatory')
lastActivityBackupLabel = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 2, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastActivityBackupLabel.setStatus('mandatory')
lastActivityBackupNumber = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 2, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastActivityBackupNumber.setStatus('mandatory')
schedulerStatus = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("suspended", 1), ("running", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerStatus.setStatus('mandatory')
serverStatus = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unsupported", 1), ("inactive", 2), ("offline", 3), ("suspended", 4), ("adminreadonly", 5), ("adminonly", 6), ("readonly", 7), ("synchronizing", 8), ("admin", 9), ("fullaccess", 10), ("degraded", 11), ("ddrinactive", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStatus.setStatus('mandatory')
activeSessions = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 3, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeSessions.setStatus('mandatory')
freeMegabytes = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 3, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeMegabytes.setStatus('mandatory')
reservedMegabytes = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 3, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reservedMegabytes.setStatus('mandatory')
utilization = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 3, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: utilization.setStatus('mandatory')
protectedMegabytes = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectedMegabytes.setStatus('mandatory')
lastCheckpoint = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastCheckpoint.setStatus('mandatory')
lastValidatedCheckpoint = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 3, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastValidatedCheckpoint.setStatus('mandatory')
timeSinceLastCheckpoint = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 3, 2, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeSinceLastCheckpoint.setStatus('mandatory')
timeSinceLastValidatedCheckpoint = MibScalar((1, 3, 6, 1, 4, 1, 15597, 1, 1, 3, 2, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeSinceLastValidatedCheckpoint.setStatus('mandatory')
mibBuilder.exportSymbols("AVAMAR-MCS-MIB", timeSinceLastCheckpoint=timeSinceLastCheckpoint, schedulerStatus=schedulerStatus, mcs=mcs, lastActivitySchedule=lastActivitySchedule, serverStatus=serverStatus, protectedMegabytes=protectedMegabytes, dpnTraps=dpnTraps, activeSessions=activeSessions, eventTraps=eventTraps, lastActivityBytesModifiedSent=lastActivityBytesModifiedSent, eventData=eventData, lastActivityDomain=lastActivityDomain, lastActivityPlugInName=lastActivityPlugInName, eventSwSource=eventSwSource, eventType=eventType, burmLastActivityData=burmLastActivityData, timeSinceLastValidatedCheckpoint=timeSinceLastValidatedCheckpoint, utilization=utilization, freeMegabytes=freeMegabytes, event=event, dpn=dpn, burmActivityTrap=burmActivityTrap, lastActivityClient=lastActivityClient, eventTrap=eventTrap, lastActivityBackupNumber=lastActivityBackupNumber, burmTraps=burmTraps, eventCode=eventCode, lastActivityDataset=lastActivityDataset, lastActivityRetentionPolicy=lastActivityRetentionPolicy, eventSummary=eventSummary, lastActivityStatusCode=lastActivityStatusCode, avamar=avamar, burm=burm, lastCheckpoint=lastCheckpoint, burmSchedulerData=burmSchedulerData, lastActivityErrorCode=lastActivityErrorCode, software=software, eventCategory=eventCategory, testEventTrap=testEventTrap, eventHwSource=eventHwSource, eventTimestamp=eventTimestamp, dpnData=dpnData, lastActivityBackupLabel=lastActivityBackupLabel, lastValidatedCheckpoint=lastValidatedCheckpoint, reservedMegabytes=reservedMegabytes, lastActivityBytesScanned=lastActivityBytesScanned, lastActivityGroup=lastActivityGroup, lastActivityType=lastActivityType)
