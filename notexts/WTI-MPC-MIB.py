#
# PySNMP MIB module WTI-MPC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/wti/WTI-MPC-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 10:12:03 2024
# On host fv-az1773-903 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, IpAddress, Unsigned32, NotificationType, MibIdentifier, Bits, Counter32, Integer32, Counter64, Gauge32, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "Unsigned32", "NotificationType", "MibIdentifier", "Bits", "Counter32", "Integer32", "Counter64", "Gauge32", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
westernTelematic = MibIdentifier((1, 3, 6, 1, 4, 1, 2634))
wti = ModuleIdentity((1, 3, 6, 1, 4, 1, 2634, 3))
wti.setRevisions(('2008-12-17 15:30',))
if mibBuilder.loadTexts: wti.setLastUpdated('200812171530Z')
if mibBuilder.loadTexts: wti.setOrganization('Western Telematic, Inc.')
systemTables = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 100))
plugTable = MibTable((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200), )
if mibBuilder.loadTexts: plugTable.setStatus('current')
plugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200, 1), ).setIndexNames((0, "WTI-MPC-MIB", "plugIndex"))
if mibBuilder.loadTexts: plugEntry.setStatus('current')
plugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80)))
if mibBuilder.loadTexts: plugIndex.setStatus('current')
plugID = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugID.setStatus('current')
plugStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugStatus.setStatus('current')
plugAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plugAction.setStatus('current')
plugName = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugName.setStatus('current')
plugGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2634, 3, 100, 300), )
if mibBuilder.loadTexts: plugGroupTable.setStatus('current')
plugGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2634, 3, 100, 300, 1), ).setIndexNames((0, "WTI-MPC-MIB", "plugGroupIndex"))
if mibBuilder.loadTexts: plugGroupEntry.setStatus('current')
plugGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 300, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 54)))
if mibBuilder.loadTexts: plugGroupIndex.setStatus('current')
plugGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 300, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugGroupName.setStatus('current')
plugGroupAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 300, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plugGroupAction.setStatus('current')
userTable = MibTable((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400), )
if mibBuilder.loadTexts: userTable.setStatus('current')
userEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1), ).setIndexNames((0, "WTI-MPC-MIB", "userIndex"))
if mibBuilder.loadTexts: userEntry.setStatus('current')
userIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: userIndex.setStatus('current')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName.setStatus('current')
userPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPasswd.setStatus('current')
userAccessLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAccessLevel.setStatus('current')
userPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPortAccess.setStatus('current')
userLocalAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userLocalAccess.setStatus('current')
userAux1Access = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAux1Access.setStatus('current')
userAux2Access = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAux2Access.setStatus('current')
userAux3Access = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAux3Access.setStatus('current')
userGroupAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 54))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userGroupAccess.setStatus('current')
userSerialAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSerialAccess.setStatus('current')
userTelnetSshAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userTelnetSshAccess.setStatus('current')
userWebAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userWebAccess.setStatus('current')
userCurrentPowerMetering = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userCurrentPowerMetering.setStatus('current')
userCallbackNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userCallbackNum.setStatus('current')
userSubmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSubmit.setStatus('current')
environmentTables = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 200))
environmentUnitTable = MibTable((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10), )
if mibBuilder.loadTexts: environmentUnitTable.setStatus('current')
environmentUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1), ).setIndexNames((0, "WTI-MPC-MIB", "environmentUnitIndex"))
if mibBuilder.loadTexts: environmentUnitEntry.setStatus('current')
environmentUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: environmentUnitIndex.setStatus('current')
environmentUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitName.setStatus('current')
environmentUnitTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitTemperature.setStatus('current')
environmentUnitCurrentA = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitCurrentA.setStatus('current')
environmentUnitVoltageA = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitVoltageA.setStatus('current')
environmentUnitPowerA = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitPowerA.setStatus('current')
environmentUnitCurrentB = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitCurrentB.setStatus('current')
environmentUnitVoltageB = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitVoltageB.setStatus('current')
environmentUnitPowerB = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitPowerB.setStatus('current')
environmentUnitCurrentC = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitCurrentC.setStatus('current')
environmentUnitVoltageC = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitVoltageC.setStatus('current')
environmentUnitPowerC = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitPowerC.setStatus('current')
environmentUnitCurrentD = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitCurrentD.setStatus('current')
environmentUnitVoltageD = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitVoltageD.setStatus('current')
environmentUnitPowerD = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitPowerD.setStatus('current')
environmentBranchATotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchATotalCurrent.setStatus('current')
environmentBranchATotalPower = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchATotalPower.setStatus('current')
environmentBranchBTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchBTotalCurrent.setStatus('current')
environmentBranchBTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchBTotalPower.setStatus('current')
environmentBranchCTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchCTotalCurrent.setStatus('current')
environmentBranchCTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchCTotalPower.setStatus('current')
environmentBranchDTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchDTotalCurrent.setStatus('current')
environmentBranchDTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchDTotalPower.setStatus('current')
environmentSystemTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentSystemTotalCurrent.setStatus('current')
environmentSystemTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentSystemTotalPower.setStatus('current')
environmentMonthlyPowerLog = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 80), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentMonthlyPowerLog.setStatus('current')
wtiTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300))
trapInfo = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 300, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapInfo.setStatus('current')
testTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 2))
testTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 2) + (0,1)).setObjects(("WTI-MPC-MIB", "trapInfo"))
overCurrentInitialTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 4))
overCurrentInitialSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 4) + (0,1)).setObjects(("WTI-MPC-MIB", "trapInfo"))
overCurrentInitialClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 4) + (0,2)).setObjects(("WTI-MPC-MIB", "trapInfo"))
overCurrentCriticalTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 5))
overCurrentCriticalSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 5) + (0,1)).setObjects(("WTI-MPC-MIB", "trapInfo"))
overCurrentCriticalClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 5) + (0,2)).setObjects(("WTI-MPC-MIB", "trapInfo"))
overTemperatureInitialTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 6))
overTemperatureInitialSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 6) + (0,1)).setObjects(("WTI-MPC-MIB", "trapInfo"))
overTemperatureInitialClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 6) + (0,2)).setObjects(("WTI-MPC-MIB", "trapInfo"))
overTemperatureCriticalTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 7))
overTemperatureCriticalSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 7) + (0,1)).setObjects(("WTI-MPC-MIB", "trapInfo"))
overTemperatureCriticalClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 7) + (0,2)).setObjects(("WTI-MPC-MIB", "trapInfo"))
circuitBreakerOpenTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 8))
circuitBreakerOpenSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 8) + (0,1)).setObjects(("WTI-MPC-MIB", "trapInfo"))
circuitBreakerOpenClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 8) + (0,2)).setObjects(("WTI-MPC-MIB", "trapInfo"))
lostCommTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 9))
lostCommSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 9) + (0,1)).setObjects(("WTI-MPC-MIB", "trapInfo"))
lostCommClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 9) + (0,2)).setObjects(("WTI-MPC-MIB", "trapInfo"))
lostVoltageTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 10))
lostVoltageSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 10) + (0,1)).setObjects(("WTI-MPC-MIB", "trapInfo"))
lostVoltageClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 10) + (0,2)).setObjects(("WTI-MPC-MIB", "trapInfo"))
pingNoAnswerTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 11))
pingNoAnswerSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 11) + (0,1)).setObjects(("WTI-MPC-MIB", "trapInfo"))
pingNoAnswerClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 11) + (0,2)).setObjects(("WTI-MPC-MIB", "trapInfo"))
lockoutTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 12))
lockoutSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 12) + (0,1)).setObjects(("WTI-MPC-MIB", "trapInfo"))
lockoutClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 12) + (0,2)).setObjects(("WTI-MPC-MIB", "trapInfo"))
powercycleTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 13))
powercycleSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 13) + (0,1)).setObjects(("WTI-MPC-MIB", "trapInfo"))
mibBuilder.exportSymbols("WTI-MPC-MIB", environmentUnitName=environmentUnitName, plugGroupName=plugGroupName, environmentUnitIndex=environmentUnitIndex, overCurrentInitialClearTrap=overCurrentInitialClearTrap, systemTables=systemTables, pingNoAnswerClearTrap=pingNoAnswerClearTrap, plugTable=plugTable, userPasswd=userPasswd, environmentUnitTemperature=environmentUnitTemperature, environmentTables=environmentTables, lostVoltageTraps=lostVoltageTraps, overTemperatureCriticalSetTrap=overTemperatureCriticalSetTrap, userWebAccess=userWebAccess, userAux1Access=userAux1Access, environmentBranchCTotalCurrent=environmentBranchCTotalCurrent, overTemperatureInitialClearTrap=overTemperatureInitialClearTrap, lostCommClearTrap=lostCommClearTrap, overCurrentCriticalSetTrap=overCurrentCriticalSetTrap, environmentUnitPowerC=environmentUnitPowerC, pingNoAnswerSetTrap=pingNoAnswerSetTrap, plugIndex=plugIndex, environmentUnitCurrentB=environmentUnitCurrentB, circuitBreakerOpenSetTrap=circuitBreakerOpenSetTrap, overCurrentCriticalClearTrap=overCurrentCriticalClearTrap, environmentBranchATotalCurrent=environmentBranchATotalCurrent, environmentBranchBTotalCurrent=environmentBranchBTotalCurrent, environmentBranchDTotalCurrent=environmentBranchDTotalCurrent, plugEntry=plugEntry, plugGroupAction=plugGroupAction, userSerialAccess=userSerialAccess, trapInfo=trapInfo, environmentSystemTotalPower=environmentSystemTotalPower, westernTelematic=westernTelematic, overTemperatureInitialSetTrap=overTemperatureInitialSetTrap, environmentBranchDTotalPower=environmentBranchDTotalPower, overCurrentCriticalTraps=overCurrentCriticalTraps, userGroupAccess=userGroupAccess, userTelnetSshAccess=userTelnetSshAccess, environmentBranchATotalPower=environmentBranchATotalPower, environmentUnitCurrentD=environmentUnitCurrentD, plugName=plugName, lostCommTraps=lostCommTraps, plugStatus=plugStatus, userLocalAccess=userLocalAccess, environmentUnitPowerD=environmentUnitPowerD, environmentUnitVoltageA=environmentUnitVoltageA, userEntry=userEntry, wti=wti, userAccessLevel=userAccessLevel, plugGroupIndex=plugGroupIndex, environmentUnitEntry=environmentUnitEntry, userCallbackNum=userCallbackNum, overTemperatureInitialTraps=overTemperatureInitialTraps, circuitBreakerOpenClearTrap=circuitBreakerOpenClearTrap, lostVoltageClearTrap=lostVoltageClearTrap, userAux3Access=userAux3Access, environmentUnitVoltageC=environmentUnitVoltageC, overTemperatureCriticalClearTrap=overTemperatureCriticalClearTrap, overCurrentInitialSetTrap=overCurrentInitialSetTrap, lockoutTraps=lockoutTraps, environmentBranchCTotalPower=environmentBranchCTotalPower, overCurrentInitialTraps=overCurrentInitialTraps, wtiTraps=wtiTraps, lockoutClearTrap=lockoutClearTrap, testTraps=testTraps, userTable=userTable, lostVoltageSetTrap=lostVoltageSetTrap, userSubmit=userSubmit, testTrap=testTrap, plugID=plugID, PYSNMP_MODULE_ID=wti, environmentUnitVoltageD=environmentUnitVoltageD, pingNoAnswerTraps=pingNoAnswerTraps, lockoutSetTrap=lockoutSetTrap, environmentBranchBTotalPower=environmentBranchBTotalPower, environmentUnitPowerB=environmentUnitPowerB, environmentUnitCurrentA=environmentUnitCurrentA, environmentUnitCurrentC=environmentUnitCurrentC, userName=userName, userIndex=userIndex, overTemperatureCriticalTraps=overTemperatureCriticalTraps, lostCommSetTrap=lostCommSetTrap, plugAction=plugAction, powercycleSetTrap=powercycleSetTrap, userCurrentPowerMetering=userCurrentPowerMetering, plugGroupTable=plugGroupTable, environmentUnitPowerA=environmentUnitPowerA, circuitBreakerOpenTraps=circuitBreakerOpenTraps, plugGroupEntry=plugGroupEntry, userPortAccess=userPortAccess, userAux2Access=userAux2Access, environmentMonthlyPowerLog=environmentMonthlyPowerLog, environmentUnitVoltageB=environmentUnitVoltageB, powercycleTraps=powercycleTraps, environmentSystemTotalCurrent=environmentSystemTotalCurrent, environmentUnitTable=environmentUnitTable)
