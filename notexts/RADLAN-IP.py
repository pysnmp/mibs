#
# PySNMP MIB module RADLAN-IP (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/radlan/RADLAN-IP
# Produced by pysmi-1.1.12 at Fri Jul 19 10:06:32 2024
# On host fv-az1251-884 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ipCidrRouteTos, ipCidrRouteDest, ipCidrRouteNextHop, ipCidrRouteEntry, ipCidrRouteMask = mibBuilder.importSymbols("IP-FORWARD-MIB", "ipCidrRouteTos", "ipCidrRouteDest", "ipCidrRouteNextHop", "ipCidrRouteEntry", "ipCidrRouteMask")
ipAddrEntry, = mibBuilder.importSymbols("IP-MIB", "ipAddrEntry")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
rip2IfConfEntry, = mibBuilder.importSymbols("RFC1389-MIB", "rip2IfConfEntry")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Gauge32, ObjectIdentity, TimeTicks, Unsigned32, Counter64, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter32, MibIdentifier, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "ObjectIdentity", "TimeTicks", "Unsigned32", "Counter64", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter32", "MibIdentifier", "Integer32", "Bits")
RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
DisplayString, = mibBuilder.importSymbols("SNMPv2-TC-v1", "DisplayString")
ipSpec = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 26))
ipSpec.setRevisions(('2005-09-29 00:00',))
if mibBuilder.loadTexts: ipSpec.setLastUpdated('200509290000Z')
if mibBuilder.loadTexts: ipSpec.setOrganization('Radlan Computer Communications Ltd.')
rsIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 89, 26, 1), )
if mibBuilder.loadTexts: rsIpAddrTable.setStatus('current')
rsIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 26, 1, 1), ).setIndexNames((0, "RADLAN-IP", "rsIpAdEntAddr"))
if mibBuilder.loadTexts: rsIpAddrEntry.setStatus('current')
rsIpAdEntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpAdEntAddr.setStatus('current')
rsIpAdEntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpAdEntIfIndex.setStatus('current')
rsIpAdEntNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpAdEntNetMask.setStatus('current')
rsIpAdEntForwardIpBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpAdEntForwardIpBroadcast.setStatus('current')
rsIpAdEntBackupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpAdEntBackupAddr.setStatus('current')
rsIpAdEntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpAdEntStatus.setStatus('current')
rsIpAdEntBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpAdEntBcastAddr.setStatus('current')
rsIpAdEntArpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpAdEntArpServer.setStatus('current')
rsIpAdEntName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpAdEntName.setStatus('current')
rsIpAdEntOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2), ("internal", 3), ("default", 4))).clone('static')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpAdEntOwner.setStatus('current')
rsIpAdEntAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpAdEntAdminStatus.setStatus('current')
rsIpAdEntOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpAdEntOperStatus.setStatus('current')
icmpSpec = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 26, 2))
rsIcmpGenErrMsgEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIcmpGenErrMsgEnable.setStatus('current')
rsIcmpRdTable = MibTable((1, 3, 6, 1, 4, 1, 89, 26, 2, 2), )
if mibBuilder.loadTexts: rsIcmpRdTable.setStatus('current')
rsIcmpRdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 26, 2, 2, 1), ).setIndexNames((0, "RADLAN-IP", "rsIcmpRdIpAddr"))
if mibBuilder.loadTexts: rsIcmpRdEntry.setStatus('current')
rsIcmpRdIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 2, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIcmpRdIpAddr.setStatus('current')
rsIcmpRdIpAdvertAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 2, 2, 1, 2), IpAddress().clone(hexValue="E0000001")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIcmpRdIpAdvertAddr.setStatus('current')
rsIcmpRdMaxAdvertInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1800)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIcmpRdMaxAdvertInterval.setStatus('current')
rsIcmpRdMinAdvertInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 1800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIcmpRdMinAdvertInterval.setStatus('current')
rsIcmpRdAdvertLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 9000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIcmpRdAdvertLifetime.setStatus('current')
rsIcmpRdAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIcmpRdAdvertise.setStatus('current')
rsIcmpRdPreferenceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIcmpRdPreferenceLevel.setStatus('current')
rsIcmpRdEntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIcmpRdEntStatus.setStatus('current')
rip2Spec = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 26, 3))
arpSpec = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 26, 4))
rsArpDeleteTable = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("noAction", 0), ("deleteArpTab", 1), ("deleteIpArpDynamicEntries", 2), ("deleteIpArpStaticEntries", 3), ("deleteIpArpDelDynamicRefreshStatic", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsArpDeleteTable.setStatus('current')
rsArpInactiveTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 4, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 40000000)).clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsArpInactiveTimeOut.setStatus('current')
rsArpProxy = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsArpProxy.setStatus('current')
rsArpRequestsSent = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsArpRequestsSent.setStatus('current')
rsArpRepliesSent = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsArpRepliesSent.setStatus('current')
rsArpProxyRepliesSent = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsArpProxyRepliesSent.setStatus('current')
rsArpUnresolveTimer = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsArpUnresolveTimer.setStatus('current')
rsArpMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsArpMibVersion.setStatus('current')
tftp = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 26, 5))
rsTftpRetryTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 5, 1), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsTftpRetryTimeOut.setStatus('current')
rsTftpTotalTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 5, 2), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsTftpTotalTimeOut.setStatus('current')
rsSendConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsSendConfigFile.setStatus('current')
rsGetConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsGetConfigFile.setStatus('current')
rsLoadSoftware = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 5, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsLoadSoftware.setStatus('current')
rsFileServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 5, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsFileServerAddress.setStatus('current')
rsSoftwareDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsSoftwareDeviceName.setStatus('current')
rsSoftwareFileAction = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("download", 1), ("upload", 2))).clone('download')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsSoftwareFileAction.setStatus('current')
ipRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 26, 6))
ipRouteLeaking = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 26, 7))
ipRipFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 26, 8))
rsRipEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsRipEnable.setStatus('current')
rsTelnetPassword = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsTelnetPassword.setStatus('current')
rlTranslationNameToIpTable = MibTable((1, 3, 6, 1, 4, 1, 89, 26, 12), )
if mibBuilder.loadTexts: rlTranslationNameToIpTable.setStatus('current')
rlTranslationNameToIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 26, 12, 1), ).setIndexNames((1, "RADLAN-IP", "rlTranslationNameToIpName"))
if mibBuilder.loadTexts: rlTranslationNameToIpEntry.setStatus('current')
rlTranslationNameToIpName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 12, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlTranslationNameToIpName.setStatus('current')
rlTranslationNameToIpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlTranslationNameToIpIpAddr.setStatus('current')
rlIpRoutingProtPreference = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 26, 13))
rlOspf = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 26, 14))
rlIpAddrTableMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpAddrTableMibVersion.setStatus('current')
rlIpCidrRouteExtTable = MibTable((1, 3, 6, 1, 4, 1, 89, 26, 16), )
if mibBuilder.loadTexts: rlIpCidrRouteExtTable.setStatus('current')
rlIpCidrRouteExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 26, 16, 1), )
ipCidrRouteEntry.registerAugmentions(("RADLAN-IP", "rlIpCidrRouteExtEntry"))
rlIpCidrRouteExtEntry.setIndexNames(*ipCidrRouteEntry.getIndexNames())
if mibBuilder.loadTexts: rlIpCidrRouteExtEntry.setStatus('current')
rlIpCidrRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("local", 1), ("netmgmt", 2), ("rip", 3), ("ospfInternal", 4), ("ospfExternal", 5), ("ospfAggregateNetRange", 6), ("bgp4Internal", 7), ("bgp4External", 8), ("aggregateRoute", 9), ("other", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpCidrRouteProto.setStatus('current')
rlIpStaticRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 26, 17))
rlIpStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 89, 26, 17, 1), )
if mibBuilder.loadTexts: rlIpStaticRouteTable.setStatus('current')
rlIpStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 26, 17, 1, 1), ).setIndexNames((0, "RADLAN-IP", "rlIpStaticRouteDest"), (0, "RADLAN-IP", "rlIpStaticRouteMask"), (0, "RADLAN-IP", "rlIpStaticRouteTos"), (0, "RADLAN-IP", "rlIpStaticRouteNextHop"))
if mibBuilder.loadTexts: rlIpStaticRouteEntry.setStatus('current')
rlIpStaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 17, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpStaticRouteDest.setStatus('current')
rlIpStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 17, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpStaticRouteMask.setStatus('current')
rlIpStaticRouteTos = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 17, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpStaticRouteTos.setStatus('current')
rlIpStaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 17, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpStaticRouteNextHop.setStatus('current')
rlIpStaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 17, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStaticRouteMetric.setStatus('current')
rlIpStaticRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reject", 1), ("local", 2), ("remote", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStaticRouteType.setStatus('current')
rlIpStaticRouteNextHopAS = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 17, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStaticRouteNextHopAS.setStatus('current')
rlIpStaticRouteForwardingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 17, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpStaticRouteForwardingStatus.setStatus('current')
rlIpStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 17, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStaticRouteRowStatus.setStatus('current')
rlIpStaticRouteOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 17, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2), ("default", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpStaticRouteOwner.setStatus('current')
rlIpRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 26, 18))
mibBuilder.exportSymbols("RADLAN-IP", rsSoftwareDeviceName=rsSoftwareDeviceName, rlIpCidrRouteExtEntry=rlIpCidrRouteExtEntry, rlIpStaticRouteNextHop=rlIpStaticRouteNextHop, rsLoadSoftware=rsLoadSoftware, rlIpStaticRouteMetric=rlIpStaticRouteMetric, rsArpDeleteTable=rsArpDeleteTable, rsIpAdEntNetMask=rsIpAdEntNetMask, rsIcmpRdIpAddr=rsIcmpRdIpAddr, rsSendConfigFile=rsSendConfigFile, rsRipEnable=rsRipEnable, rlIpStaticRouteOwner=rlIpStaticRouteOwner, rsTelnetPassword=rsTelnetPassword, rsArpRequestsSent=rsArpRequestsSent, rsArpRepliesSent=rsArpRepliesSent, rlIpStaticRoute=rlIpStaticRoute, rlIpStaticRouteNextHopAS=rlIpStaticRouteNextHopAS, rsGetConfigFile=rsGetConfigFile, rlOspf=rlOspf, rsIpAdEntBackupAddr=rsIpAdEntBackupAddr, rsIcmpRdPreferenceLevel=rsIcmpRdPreferenceLevel, rsIcmpRdTable=rsIcmpRdTable, rsArpMibVersion=rsArpMibVersion, ipRedundancy=ipRedundancy, rsIcmpRdAdvertLifetime=rsIcmpRdAdvertLifetime, rlIpStaticRouteTos=rlIpStaticRouteTos, rlIpRouter=rlIpRouter, rip2Spec=rip2Spec, rlTranslationNameToIpTable=rlTranslationNameToIpTable, rlIpAddrTableMibVersion=rlIpAddrTableMibVersion, rlIpStaticRouteType=rlIpStaticRouteType, rsIcmpRdMinAdvertInterval=rsIcmpRdMinAdvertInterval, arpSpec=arpSpec, rlIpRoutingProtPreference=rlIpRoutingProtPreference, rsArpUnresolveTimer=rsArpUnresolveTimer, rsArpInactiveTimeOut=rsArpInactiveTimeOut, rsIpAdEntAdminStatus=rsIpAdEntAdminStatus, rsIpAdEntIfIndex=rsIpAdEntIfIndex, rsTftpTotalTimeOut=rsTftpTotalTimeOut, PYSNMP_MODULE_ID=ipSpec, rsIcmpRdEntry=rsIcmpRdEntry, rlTranslationNameToIpEntry=rlTranslationNameToIpEntry, rlIpStaticRouteDest=rlIpStaticRouteDest, rsIpAdEntStatus=rsIpAdEntStatus, rsIcmpRdIpAdvertAddr=rsIcmpRdIpAdvertAddr, rsIpAddrEntry=rsIpAddrEntry, rsIpAdEntArpServer=rsIpAdEntArpServer, rlIpStaticRouteTable=rlIpStaticRouteTable, tftp=tftp, ipSpec=ipSpec, rlTranslationNameToIpIpAddr=rlTranslationNameToIpIpAddr, rsIpAdEntName=rsIpAdEntName, rlIpStaticRouteEntry=rlIpStaticRouteEntry, rsIcmpRdAdvertise=rsIcmpRdAdvertise, rsIpAdEntOperStatus=rsIpAdEntOperStatus, rsIcmpRdMaxAdvertInterval=rsIcmpRdMaxAdvertInterval, rlIpCidrRouteExtTable=rlIpCidrRouteExtTable, rsIcmpGenErrMsgEnable=rsIcmpGenErrMsgEnable, rsIpAdEntAddr=rsIpAdEntAddr, rsTftpRetryTimeOut=rsTftpRetryTimeOut, ipRouteLeaking=ipRouteLeaking, rlIpStaticRouteMask=rlIpStaticRouteMask, rsIpAddrTable=rsIpAddrTable, rlTranslationNameToIpName=rlTranslationNameToIpName, rsIcmpRdEntStatus=rsIcmpRdEntStatus, rsArpProxyRepliesSent=rsArpProxyRepliesSent, rlIpStaticRouteForwardingStatus=rlIpStaticRouteForwardingStatus, rsIpAdEntOwner=rsIpAdEntOwner, rsSoftwareFileAction=rsSoftwareFileAction, rsIpAdEntForwardIpBroadcast=rsIpAdEntForwardIpBroadcast, rsIpAdEntBcastAddr=rsIpAdEntBcastAddr, rsArpProxy=rsArpProxy, rsFileServerAddress=rsFileServerAddress, rlIpCidrRouteProto=rlIpCidrRouteProto, ipRipFilter=ipRipFilter, icmpSpec=icmpSpec, rlIpStaticRouteRowStatus=rlIpStaticRouteRowStatus)
