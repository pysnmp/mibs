#
# PySNMP MIB module RS-XX9-COMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rs/RS-XX9-COMMON-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 16:48:10 2024
# On host fv-az1437-189 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
entPhysicalEntry, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalEntry")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
rsXx9MibModule, rsXx9Common = mibBuilder.importSymbols("RS-XX9-SMI-MIB", "rsXx9MibModule", "rsXx9Common")
Xx9ModulationMode, Trigger, IndexTransmitter, NotificationPriority, Xx9RedundancyMode, EnableOption, NotificationState, NotificationClass, Xx9AmplifierType, NotificationMask, SwitchOnOff, Xx9SystemType = mibBuilder.importSymbols("RS-XX9-TC-MIB", "Xx9ModulationMode", "Trigger", "IndexTransmitter", "NotificationPriority", "Xx9RedundancyMode", "EnableOption", "NotificationState", "NotificationClass", "Xx9AmplifierType", "NotificationMask", "SwitchOnOff", "Xx9SystemType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Unsigned32, ObjectIdentity, IpAddress, MibIdentifier, NotificationType, iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, TimeTicks, Counter64, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ObjectIdentity", "IpAddress", "MibIdentifier", "NotificationType", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "TimeTicks", "Counter64", "Bits", "Counter32")
DateAndTime, RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
rsXx9CommonMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 1, 216, 2))
rsXx9CommonMibModule.setRevisions(('2016-03-21 15:00', '2016-02-16 10:00', '2015-11-18 15:00', '2015-09-09 08:00', '2015-08-06 16:00', '2015-07-15 17:00', '2015-04-02 08:00', '2015-03-04 09:00', '2014-12-22 16:00', '2014-11-28 15:00', '2014-07-03 15:00', '2014-03-27 10:00', '2014-02-21 11:00', '2013-12-02 10:00', '2013-09-05 17:00', '2011-08-16 08:00',))
if mibBuilder.loadTexts: rsXx9CommonMibModule.setLastUpdated('201603211500Z')
if mibBuilder.loadTexts: rsXx9CommonMibModule.setOrganization('Rohde&Schwarz GmbH & Co. KG')
class IndexTceDevice(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 32)

class GpsPowerSource(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("undefined", 1), ("passive", 2), ("active", 3))

rsXx9CommonNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0))
commonNtpSync = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 1)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonTxNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonTxNotificationState"))
if mibBuilder.loadTexts: commonNtpSync.setStatus('obsolete')
commonSwUpdateStatus = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 2)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonTxNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonTxNotificationState"))
if mibBuilder.loadTexts: commonSwUpdateStatus.setStatus('current')
commonFwUpdateStatus = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 3)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonTxNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonTxNotificationState"))
if mibBuilder.loadTexts: commonFwUpdateStatus.setStatus('current')
commonOptionKeyStatus = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 100)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonOpkNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonOpkNotificationState"))
if mibBuilder.loadTexts: commonOptionKeyStatus.setStatus('current')
commonTest = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 1000)).setObjects(("SNMPv2-MIB", "sysName"), ("RS-XX9-COMMON-MIB", "commonTrapCounter"))
if mibBuilder.loadTexts: commonTest.setStatus('current')
commonRising = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 1001)).setObjects(("RS-XX9-COMMON-MIB", "customNotificationVariable"), ("RS-XX9-COMMON-MIB", "customNotificationValue"), ("RS-XX9-COMMON-MIB", "customNotificationRisingThreshold"), ("RS-XX9-COMMON-MIB", "customNotificationPriority"))
if mibBuilder.loadTexts: commonRising.setStatus('current')
commonFalling = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 1002)).setObjects(("RS-XX9-COMMON-MIB", "customNotificationVariable"), ("RS-XX9-COMMON-MIB", "customNotificationValue"), ("RS-XX9-COMMON-MIB", "customNotificationFallingThreshold"), ("RS-XX9-COMMON-MIB", "customNotificationPriority"))
if mibBuilder.loadTexts: commonFalling.setStatus('current')
commonChanging = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 1003)).setObjects(("RS-XX9-COMMON-MIB", "customNotificationVariable"), ("RS-XX9-COMMON-MIB", "customNotificationValue"), ("RS-XX9-COMMON-MIB", "customNotificationPriority"))
if mibBuilder.loadTexts: commonChanging.setStatus('current')
commonDateTimeNtpState = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 2000)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonDateTimeNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonDateTimeNotificationState"))
if mibBuilder.loadTexts: commonDateTimeNtpState.setStatus('current')
commonGpsState = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 3000)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonGpsNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonGpsNotificationState"))
if mibBuilder.loadTexts: commonGpsState.setStatus('current')
commonDevInfoAcFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 4000)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonDevInfoNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonDevInfoNotificationState"))
if mibBuilder.loadTexts: commonDevInfoAcFail.setStatus('current')
commonDevInfoFanState = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 4100)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonDevInfoNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonDevInfoNotificationState"))
if mibBuilder.loadTexts: commonDevInfoFanState.setStatus('current')
commonDevInfoOvpState = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 4200)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonDevInfoNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonDevInfoNotificationState"))
if mibBuilder.loadTexts: commonDevInfoOvpState.setStatus('current')
commonEnvSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 5000)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonEnvNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonEnvNotificationState"))
if mibBuilder.loadTexts: commonEnvSummary.setStatus('current')
commonEnvTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 5001)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonEnvNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonEnvNotificationState"))
if mibBuilder.loadTexts: commonEnvTemperature.setStatus('current')
commonEnvDewPoint = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 5002)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonEnvNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonEnvNotificationState"))
if mibBuilder.loadTexts: commonEnvDewPoint.setStatus('current')
rsXx9CommonObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1))
commonProductInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 1))
commonEntPhysicalTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 1, 1), )
if mibBuilder.loadTexts: commonEntPhysicalTable.setStatus('current')
commonEntPhysicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 1, 1, 1), )
entPhysicalEntry.registerAugmentions(("RS-XX9-COMMON-MIB", "commonEntPhysicalEntry"))
commonEntPhysicalEntry.setIndexNames(*entPhysicalEntry.getIndexNames())
if mibBuilder.loadTexts: commonEntPhysicalEntry.setStatus('current')
commonEntPhysicalSwFwBiosNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 1, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEntPhysicalSwFwBiosNumber.setStatus('current')
commonEntPhysicalOperationHours = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 1, 1, 1, 2), Counter32()).setUnits('hour').setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEntPhysicalOperationHours.setStatus('current')
commonEntPhysicalPowerUpCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEntPhysicalPowerUpCycles.setStatus('current')
commonEntPhysicalHardwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 1, 1, 1, 4), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEntPhysicalHardwareStatus.setStatus('current')
commonEntPhysicalConfigurationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 1, 1, 1, 5), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEntPhysicalConfigurationStatus.setStatus('current')
commonEntPhysicalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 1, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEntPhysicalType.setStatus('current')
commonTransmitterConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2))
commonDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 1), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDateAndTime.setStatus('current')
ntp = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 2))
ntpMode = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("slewAdjust", 3), ("stepAdjust", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpMode.setStatus('obsolete')
ntpSyncTimeInterval = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 1440))).setUnits('minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSyncTimeInterval.setStatus('obsolete')
ntpServerAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 2, 3), )
if mibBuilder.loadTexts: ntpServerAddrTable.setStatus('obsolete')
ntpServerAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 2, 3, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "ntpServerAddrIdx"))
if mibBuilder.loadTexts: ntpServerAddrEntry.setStatus('obsolete')
ntpServerAddrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerAddrIdx.setStatus('obsolete')
ntpServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 2, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerAddressType.setStatus('obsolete')
ntpServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 2, 3, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerAddress.setStatus('obsolete')
ntpState = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("enabled", 3), ("notRunning", 4), ("syncFailed", 5), ("synchronizing", 6), ("syncOk", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpState.setStatus('obsolete')
ntpLastSync = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 2, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpLastSync.setStatus('obsolete')
softwareMaintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 3))
reboot = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 3, 1), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reboot.setStatus('current')
softwareUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 3, 2))
swUpdateStart = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 3, 2, 1), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpdateStart.setStatus('current')
swUpdateMode = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("permanent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpdateMode.setStatus('current')
swUpdateDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 3, 2, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpdateDeviceName.setStatus('current')
swUpdateDeviceGroup = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 3, 2, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpdateDeviceGroup.setStatus('current')
swUpdateRebootPending = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 3, 2, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUpdateRebootPending.setStatus('current')
commonTxNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 4), )
if mibBuilder.loadTexts: commonTxNotificationTable.setStatus('current')
commonTxNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 4, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "commonTxNotificationIdx"))
if mibBuilder.loadTexts: commonTxNotificationEntry.setStatus('current')
commonTxNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: commonTxNotificationIdx.setStatus('current')
commonTxNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("commonSwUpdateStatus", 2), ("commonFwUpdateStatus", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonTxNotificationName.setStatus('current')
commonTxNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 4, 1, 3), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonTxNotificationMask.setStatus('current')
commonTxNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 4, 1, 4), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonTxNotificationPriority.setStatus('current')
commonTxNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 4, 1, 5), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonTxNotificationState.setStatus('current')
commonTxFunctions = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 5))
commonFuncSystemControl = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 5, 1), EnableOption()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonFuncSystemControl.setStatus('current')
commonFuncTxControl = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 5, 2), EnableOption()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonFuncTxControl.setStatus('current')
commonFuncSignalProcessing = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 5, 3), EnableOption()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonFuncSignalProcessing.setStatus('current')
commonFuncCoolingControl = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 5, 4), EnableOption()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonFuncCoolingControl.setStatus('current')
commonFuncRackControl = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 5, 5), EnableOption()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonFuncRackControl.setStatus('current')
commonSystemControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 6))
commonSystemType = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 6, 1), Xx9SystemType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSystemType.setStatus('current')
commonSystemNumberOfTxA = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 6, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSystemNumberOfTxA.setStatus('current')
commonTxControlTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 7), )
if mibBuilder.loadTexts: commonTxControlTable.setStatus('current')
commonTxControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 7, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "cmnTxCtrlTxIdx"))
if mibBuilder.loadTexts: commonTxControlEntry.setStatus('current')
cmnTxCtrlTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 7, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: cmnTxCtrlTxIdx.setStatus('current')
cmnTxCtrlRedundancyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 7, 1, 2), Xx9RedundancyMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmnTxCtrlRedundancyMode.setStatus('current')
cmnTxCtrlModulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 7, 1, 3), Xx9ModulationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmnTxCtrlModulationMode.setStatus('current')
cmnTxCtrlAmplifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 7, 1, 4), Xx9AmplifierType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmnTxCtrlAmplifierType.setStatus('current')
commonSnmpConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3))
sendTestNotification = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 1), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sendTestNotification.setStatus('current')
irtNotificationsAllOn = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 2), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irtNotificationsAllOn.setStatus('current')
irtNotificationsAllOff = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 3), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irtNotificationsAllOff.setStatus('current')
rsNotificationsAllOn = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 4), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsNotificationsAllOn.setStatus('current')
rsNotificationsAllOff = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 5), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsNotificationsAllOff.setStatus('current')
rsNotificationsAllFaultsOn = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 6), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsNotificationsAllFaultsOn.setStatus('current')
rsNotificationsAllFaultsOff = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 7), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsNotificationsAllFaultsOff.setStatus('current')
rsNotificationsAllWarningsOn = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 8), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsNotificationsAllWarningsOn.setStatus('current')
rsNotificationsAllWarningsOff = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 9), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsNotificationsAllWarningsOff.setStatus('current')
customNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 10), )
if mibBuilder.loadTexts: customNotificationTable.setStatus('current')
customNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 10, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "customNotificationIndex"))
if mibBuilder.loadTexts: customNotificationEntry.setStatus('current')
customNotificationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: customNotificationIndex.setStatus('current')
customNotificationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 10, 1, 2), Unsigned32().clone(10)).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: customNotificationInterval.setStatus('current')
customNotificationVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 10, 1, 3), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: customNotificationVariable.setStatus('current')
customNotificationSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absoluteValue", 1), ("changingValue", 2))).clone('absoluteValue')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: customNotificationSampleType.setStatus('current')
customNotificationValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customNotificationValue.setStatus('current')
customNotificationRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 10, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: customNotificationRisingThreshold.setStatus('current')
customNotificationFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 10, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: customNotificationFallingThreshold.setStatus('current')
customNotificationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 10, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: customNotificationStatus.setStatus('current')
customNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 10, 1, 9), NotificationPriority().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: customNotificationPriority.setStatus('current')
snmpUserConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 11))
snmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 11, 1), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpEnable.setStatus('current')
snmpSyncTrapSinks = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 11, 2), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSyncTrapSinks.setStatus('current')
commonNotificationBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 4))
commonNotificationAlarmClass = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 4, 1), NotificationClass()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: commonNotificationAlarmClass.setStatus('current')
commonTrapCounter = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonTrapCounter.setStatus('current')
commonOptionManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5))
installOpkTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 1), )
if mibBuilder.loadTexts: installOpkTable.setStatus('current')
installOpkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 1, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "instOpkDeviceIdx"))
if mibBuilder.loadTexts: installOpkEntry.setStatus('current')
instOpkDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 1, 1, 1), IndexTceDevice())
if mibBuilder.loadTexts: instOpkDeviceIdx.setStatus('current')
instOpkDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: instOpkDeviceName.setStatus('current')
instOpkNewKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: instOpkNewKey.setStatus('current')
instOpkMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: instOpkMessage.setStatus('current')
optionKeyTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 2), )
if mibBuilder.loadTexts: optionKeyTable.setStatus('current')
optionKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 2, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "instOpkDeviceIdx"), (0, "RS-XX9-COMMON-MIB", "optionKeyIdx"))
if mibBuilder.loadTexts: optionKeyEntry.setStatus('current')
optionKeyIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: optionKeyIdx.setStatus('current')
optionKeyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optionKeyNumber.setStatus('current')
optionKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optionKeyName.setStatus('current')
optionKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("deactivated", 1), ("installed", 2), ("warning", 3), ("fault", 4), ("empty", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optionKeyStatus.setStatus('current')
optionKeyValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optionKeyValidity.setStatus('current')
deactivationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 3), )
if mibBuilder.loadTexts: deactivationTable.setStatus('current')
deactivationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 3, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "instOpkDeviceIdx"), (0, "RS-XX9-COMMON-MIB", "deactivationIdx"))
if mibBuilder.loadTexts: deactivationEntry.setStatus('current')
deactivationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)))
if mibBuilder.loadTexts: deactivationIdx.setStatus('current')
deactivationKeyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deactivationKeyNumber.setStatus('current')
deactivationKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deactivationKeyName.setStatus('current')
deactivationResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 3, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deactivationResponse.setStatus('current')
commonOpkNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 4), )
if mibBuilder.loadTexts: commonOpkNotificationTable.setStatus('current')
commonOpkNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 4, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "instOpkDeviceIdx"), (0, "RS-XX9-COMMON-MIB", "commonOpkNotificationIdx"))
if mibBuilder.loadTexts: commonOpkNotificationEntry.setStatus('current')
commonOpkNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 100)))
if mibBuilder.loadTexts: commonOpkNotificationIdx.setStatus('current')
commonOpkNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100))).clone(namedValues=NamedValues(("commonOptionKeyStatus", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonOpkNotificationName.setStatus('current')
commonOpkNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 4, 1, 4), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonOpkNotificationMask.setStatus('current')
commonOpkNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 4, 1, 5), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonOpkNotificationPriority.setStatus('current')
commonOpkNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 4, 1, 6), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonOpkNotificationState.setStatus('current')
commonDateTime = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6))
commonDateTimeConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 1), )
if mibBuilder.loadTexts: commonDateTimeConfigurationTable.setStatus('current')
commonDateTimeConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 1, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "commonDateTimeConfDeviceIdx"))
if mibBuilder.loadTexts: commonDateTimeConfigurationEntry.setStatus('current')
commonDateTimeConfDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 1, 1, 1), IndexTceDevice())
if mibBuilder.loadTexts: commonDateTimeConfDeviceIdx.setStatus('current')
commonDateTimeConfDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDateTimeConfDeviceName.setStatus('current')
commonDateTimeConfLocalDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 1, 1, 3), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDateTimeConfLocalDateTime.setStatus('current')
commonDateTimeConfLocalTimeOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-720, 840))).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDateTimeConfLocalTimeOffset.setStatus('current')
commonDateTimeConfNtpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 1, 1, 5), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDateTimeConfNtpEnable.setStatus('current')
commonDateTimeConfNtpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDateTimeConfNtpServer.setStatus('current')
commonDateTimeNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 2), )
if mibBuilder.loadTexts: commonDateTimeNotificationTable.setStatus('current')
commonDateTimeNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 2, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "commonDateTimeNotificationDeviceIdx"), (0, "RS-XX9-COMMON-MIB", "commonDateTimeNotificationIdx"))
if mibBuilder.loadTexts: commonDateTimeNotificationEntry.setStatus('current')
commonDateTimeNotificationDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 2, 1, 1), IndexTceDevice())
if mibBuilder.loadTexts: commonDateTimeNotificationDeviceIdx.setStatus('current')
commonDateTimeNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2000, 2000)))
if mibBuilder.loadTexts: commonDateTimeNotificationIdx.setStatus('current')
commonDateTimeNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2000))).clone(namedValues=NamedValues(("commonDateTimeNtpState", 2000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDateTimeNotificationName.setStatus('current')
commonDateTimeNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 2, 1, 4), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDateTimeNotificationMask.setStatus('current')
commonDateTimeNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 2, 1, 5), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDateTimeNotificationPriority.setStatus('current')
commonDateTimeNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 2, 1, 6), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDateTimeNotificationState.setStatus('current')
commonUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7))
upsInformationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1), )
if mibBuilder.loadTexts: upsInformationTable.setStatus('current')
upsInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "upsInfoDeviceIdx"))
if mibBuilder.loadTexts: upsInformationEntry.setStatus('current')
upsInfoDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 1), IndexTceDevice())
if mibBuilder.loadTexts: upsInfoDeviceIdx.setStatus('current')
upsInfoWithUPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unconfigured", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoWithUPS.setStatus('current')
upsInfoLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 3), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoLink.setStatus('current')
upsInfoManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoManufacturer.setStatus('current')
upsInfoModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoModel.setStatus('current')
upsInfoSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoSoftwareVersion.setStatus('current')
upsInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoName.setStatus('current')
upsInfoAttachedDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoAttachedDevices.setStatus('current')
upsInfoBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("low", 3), ("deplated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoBatteryStatus.setStatus('current')
upsInfoSecondsOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 10), Unsigned32()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoSecondsOnBattery.setStatus('current')
upsInfoMinutesRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 11), Unsigned32()).setUnits('minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoMinutesRemaining.setStatus('current')
upsInfoChargeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 12), Unsigned32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoChargeRemaining.setStatus('current')
upsInfoOutputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("normal", 3), ("bypass", 4), ("battery", 5), ("booster", 6), ("reducer", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoOutputSource.setStatus('current')
upsInfoOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 14), Unsigned32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoOutputPower.setStatus('current')
upsInfoSelftestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("donePass", 1), ("doneWarning", 2), ("doneError", 3), ("aborted", 4), ("inProgress", 5), ("noTestInitiated", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoSelftestResult.setStatus('current')
commonGPS = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8))
commonGpsConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 1), )
if mibBuilder.loadTexts: commonGpsConfigurationTable.setStatus('current')
commonGpsConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 1, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "commonGpsConfDeviceIdx"))
if mibBuilder.loadTexts: commonGpsConfigurationEntry.setStatus('current')
commonGpsConfDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 1, 1, 1), IndexTceDevice())
if mibBuilder.loadTexts: commonGpsConfDeviceIdx.setStatus('current')
commonGpsConfDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonGpsConfDeviceName.setStatus('current')
commonGpsConfAntennaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 1, 1, 3), GpsPowerSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonGpsConfAntennaType.setStatus('current')
commonGpsStateMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonGpsStateMonitoring.setStatus('current')
commonGpsConfGnssSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("undefined", 1), ("unknown", 2), ("none", 3), ("gps", 4), ("glonass", 5), ("gpsAndGlonass", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonGpsConfGnssSelection.setStatus('current')
commonGpsStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 2), )
if mibBuilder.loadTexts: commonGpsStateTable.setStatus('current')
commonGpsStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 2, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "commonGpsNotificationDeviceIdx"))
if mibBuilder.loadTexts: commonGpsStateEntry.setStatus('current')
commonGpsStAntennaState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 1), ("init", 2), ("dontKnow", 3), ("ok", 4), ("short", 5), ("open", 6), ("notMonitored", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonGpsStAntennaState.setStatus('current')
commonGpsStTdop = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonGpsStTdop.setStatus('current')
commonGpsStSatellitesInView = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonGpsStSatellitesInView.setStatus('current')
commonGpsStUsedSatellites = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonGpsStUsedSatellites.setStatus('current')
commonGpsNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 3), )
if mibBuilder.loadTexts: commonGpsNotificationTable.setStatus('current')
commonGpsNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 3, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "commonGpsNotificationDeviceIdx"), (0, "RS-XX9-COMMON-MIB", "commonGpsNotificationIdx"))
if mibBuilder.loadTexts: commonGpsNotificationEntry.setStatus('current')
commonGpsNotificationDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 3, 1, 1), IndexTceDevice())
if mibBuilder.loadTexts: commonGpsNotificationDeviceIdx.setStatus('current')
commonGpsNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3000, 3000)))
if mibBuilder.loadTexts: commonGpsNotificationIdx.setStatus('current')
commonGpsNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3000))).clone(namedValues=NamedValues(("commonGpsState", 3000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonGpsNotificationName.setStatus('current')
commonGpsNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 3, 1, 4), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonGpsNotificationMask.setStatus('current')
commonGpsNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 3, 1, 5), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonGpsNotificationPriority.setStatus('current')
commonGpsNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 3, 1, 6), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonGpsNotificationState.setStatus('current')
commonDeviceInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9))
commonDevInfoStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 1), )
if mibBuilder.loadTexts: commonDevInfoStateTable.setStatus('current')
commonDevInfoStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 1, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "devInfoStateDeviceIdx"))
if mibBuilder.loadTexts: commonDevInfoStateEntry.setStatus('current')
devInfoStateDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 1, 1, 1), IndexTceDevice())
if mibBuilder.loadTexts: devInfoStateDeviceIdx.setStatus('current')
devInfoStateDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInfoStateDeviceName.setStatus('current')
devInfoStateCapacitorBatteryInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInfoStateCapacitorBatteryInstalled.setStatus('current')
commonDevInfoNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 2), )
if mibBuilder.loadTexts: commonDevInfoNotificationTable.setStatus('current')
commonDevInfoNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 2, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "commonDevInfoNotificationDeviceIdx"), (0, "RS-XX9-COMMON-MIB", "commonDevInfoNotificationIdx"))
if mibBuilder.loadTexts: commonDevInfoNotificationEntry.setStatus('current')
commonDevInfoNotificationDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 2, 1, 1), IndexTceDevice())
if mibBuilder.loadTexts: commonDevInfoNotificationDeviceIdx.setStatus('current')
commonDevInfoNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(4000, 4000), ValueRangeConstraint(4100, 4100), ValueRangeConstraint(4200, 4200), )))
if mibBuilder.loadTexts: commonDevInfoNotificationIdx.setStatus('current')
commonDevInfoNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4000, 4100, 4200))).clone(namedValues=NamedValues(("commonDevInfoAcFail", 4000), ("commonDevInfoFanState", 4100), ("commonDevInfoOvpState", 4200)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDevInfoNotificationName.setStatus('current')
commonDevInfoNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 2, 1, 4), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDevInfoNotificationMask.setStatus('current')
commonDevInfoNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 2, 1, 5), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDevInfoNotificationPriority.setStatus('current')
commonDevInfoNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 2, 1, 6), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDevInfoNotificationState.setStatus('current')
commonDevInfoConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 3), )
if mibBuilder.loadTexts: commonDevInfoConfigTable.setStatus('current')
commonDevInfoConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 3, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "devInfoStateDeviceIdx"))
if mibBuilder.loadTexts: commonDevInfoConfigEntry.setStatus('current')
commonDevInfoConfAssignOvp = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 3, 1, 1), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDevInfoConfAssignOvp.setStatus('current')
commonEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10))
commonEnvConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 1), )
if mibBuilder.loadTexts: commonEnvConfigurationTable.setStatus('current')
commonEnvConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 1, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "commonEnvConfDeviceIdx"))
if mibBuilder.loadTexts: commonEnvConfigurationEntry.setStatus('current')
commonEnvConfDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 1, 1, 1), IndexTceDevice())
if mibBuilder.loadTexts: commonEnvConfDeviceIdx.setStatus('current')
commonEnvConfDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEnvConfDeviceName.setStatus('current')
commonEnvConfTempWarnUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 450))).setUnits('0.1 degree Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonEnvConfTempWarnUpper.setStatus('current')
commonEnvConfTempFaultUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 450))).setUnits('0.1 degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEnvConfTempFaultUpper.setStatus('current')
commonEnvConfTempWarnLower = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 450))).setUnits('0.1 degree Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonEnvConfTempWarnLower.setStatus('current')
commonEnvConfTempFaultLower = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 450))).setUnits('0.1 degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEnvConfTempFaultLower.setStatus('current')
commonEnvStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 2), )
if mibBuilder.loadTexts: commonEnvStateTable.setStatus('current')
commonEnvStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 2, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "commonEnvConfDeviceIdx"))
if mibBuilder.loadTexts: commonEnvStateEntry.setStatus('current')
commonEnvStTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 500))).setUnits('0.1 degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEnvStTemperature.setStatus('current')
commonEnvStHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEnvStHumidity.setStatus('current')
commonEnvStDewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 2, 1, 3), Integer32()).setUnits('0.1 degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEnvStDewPoint.setStatus('current')
commonEnvNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 3), )
if mibBuilder.loadTexts: commonEnvNotificationTable.setStatus('current')
commonEnvNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 3, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "commonEnvNotificationDeviceIdx"), (0, "RS-XX9-COMMON-MIB", "commonEnvNotificationIdx"))
if mibBuilder.loadTexts: commonEnvNotificationEntry.setStatus('current')
commonEnvNotificationDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 3, 1, 1), IndexTceDevice())
if mibBuilder.loadTexts: commonEnvNotificationDeviceIdx.setStatus('current')
commonEnvNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5000, 5002)))
if mibBuilder.loadTexts: commonEnvNotificationIdx.setStatus('current')
commonEnvNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5000, 5001, 5002))).clone(namedValues=NamedValues(("commonEnvSummary", 5000), ("commonEnvTemperature", 5001), ("commonEnvDewPoint", 5002)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEnvNotificationName.setStatus('current')
commonEnvNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 3, 1, 4), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonEnvNotificationMask.setStatus('current')
commonEnvNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 3, 1, 5), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonEnvNotificationPriority.setStatus('current')
commonEnvNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 3, 1, 6), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEnvNotificationState.setStatus('current')
rsXx9CommonConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2))
rsXx9CommonCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 1))
commonBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 1, 1)).setObjects(("RS-XX9-COMMON-MIB", "commonObjBasic"), ("RS-XX9-COMMON-MIB", "commonObjNtp"), ("RS-XX9-COMMON-MIB", "commonObjSoftwareUpdate"), ("RS-XX9-COMMON-MIB", "commonObjCustomNotification"), ("RS-XX9-COMMON-MIB", "commonObjOptionManagement"), ("RS-XX9-COMMON-MIB", "commonNotifyBasic"), ("RS-XX9-COMMON-MIB", "commonNotifyNtp"), ("RS-XX9-COMMON-MIB", "commonNotifySoftwareUpdate"), ("RS-XX9-COMMON-MIB", "commonNotifyCustomNotification"), ("RS-XX9-COMMON-MIB", "commonNotifyOptionManagement"), ("RS-XX9-COMMON-MIB", "commonObjUPS"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonBasicCompliance = commonBasicCompliance.setStatus('current')
rsXx9CommonGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2))
commonObjBasic = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 1)).setObjects(("RS-XX9-COMMON-MIB", "commonDateAndTime"), ("RS-XX9-COMMON-MIB", "rsNotificationsAllWarningsOff"), ("RS-XX9-COMMON-MIB", "rsNotificationsAllWarningsOn"), ("RS-XX9-COMMON-MIB", "rsNotificationsAllFaultsOff"), ("RS-XX9-COMMON-MIB", "rsNotificationsAllFaultsOn"), ("RS-XX9-COMMON-MIB", "rsNotificationsAllOff"), ("RS-XX9-COMMON-MIB", "rsNotificationsAllOn"), ("RS-XX9-COMMON-MIB", "irtNotificationsAllOff"), ("RS-XX9-COMMON-MIB", "irtNotificationsAllOn"), ("RS-XX9-COMMON-MIB", "commonEntPhysicalPowerUpCycles"), ("RS-XX9-COMMON-MIB", "commonEntPhysicalOperationHours"), ("RS-XX9-COMMON-MIB", "commonEntPhysicalSwFwBiosNumber"), ("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonTrapCounter"), ("RS-XX9-COMMON-MIB", "commonSystemNumberOfTxA"), ("RS-XX9-COMMON-MIB", "commonSystemType"), ("RS-XX9-COMMON-MIB", "commonFuncCoolingControl"), ("RS-XX9-COMMON-MIB", "commonFuncSignalProcessing"), ("RS-XX9-COMMON-MIB", "commonFuncTxControl"), ("RS-XX9-COMMON-MIB", "commonFuncSystemControl"), ("RS-XX9-COMMON-MIB", "sendTestNotification"), ("RS-XX9-COMMON-MIB", "reboot"), ("RS-XX9-COMMON-MIB", "commonTxNotificationName"), ("RS-XX9-COMMON-MIB", "commonTxNotificationMask"), ("RS-XX9-COMMON-MIB", "commonTxNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonTxNotificationState"), ("RS-XX9-COMMON-MIB", "cmnTxCtrlRedundancyMode"), ("RS-XX9-COMMON-MIB", "commonFuncRackControl"), ("RS-XX9-COMMON-MIB", "snmpEnable"), ("RS-XX9-COMMON-MIB", "snmpSyncTrapSinks"), ("RS-XX9-COMMON-MIB", "commonEntPhysicalConfigurationStatus"), ("RS-XX9-COMMON-MIB", "commonEntPhysicalHardwareStatus"), ("RS-XX9-COMMON-MIB", "cmnTxCtrlAmplifierType"), ("RS-XX9-COMMON-MIB", "cmnTxCtrlModulationMode"), ("RS-XX9-COMMON-MIB", "commonEntPhysicalType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonObjBasic = commonObjBasic.setStatus('current')
commonObjNtp = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 2)).setObjects(("RS-XX9-COMMON-MIB", "commonDateTimeConfDeviceName"), ("RS-XX9-COMMON-MIB", "commonDateTimeConfLocalDateTime"), ("RS-XX9-COMMON-MIB", "commonDateTimeConfLocalTimeOffset"), ("RS-XX9-COMMON-MIB", "commonDateTimeConfNtpEnable"), ("RS-XX9-COMMON-MIB", "commonDateTimeConfNtpServer"), ("RS-XX9-COMMON-MIB", "commonDateTimeNotificationName"), ("RS-XX9-COMMON-MIB", "commonDateTimeNotificationMask"), ("RS-XX9-COMMON-MIB", "commonDateTimeNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonDateTimeNotificationState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonObjNtp = commonObjNtp.setStatus('current')
commonObjSoftwareUpdate = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 3)).setObjects(("RS-XX9-COMMON-MIB", "swUpdateStart"), ("RS-XX9-COMMON-MIB", "swUpdateMode"), ("RS-XX9-COMMON-MIB", "swUpdateDeviceName"), ("RS-XX9-COMMON-MIB", "swUpdateDeviceGroup"), ("RS-XX9-COMMON-MIB", "swUpdateRebootPending"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonObjSoftwareUpdate = commonObjSoftwareUpdate.setStatus('current')
commonObjCustomNotification = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 4)).setObjects(("RS-XX9-COMMON-MIB", "customNotificationVariable"), ("RS-XX9-COMMON-MIB", "customNotificationSampleType"), ("RS-XX9-COMMON-MIB", "customNotificationValue"), ("RS-XX9-COMMON-MIB", "customNotificationRisingThreshold"), ("RS-XX9-COMMON-MIB", "customNotificationFallingThreshold"), ("RS-XX9-COMMON-MIB", "customNotificationStatus"), ("RS-XX9-COMMON-MIB", "customNotificationPriority"), ("RS-XX9-COMMON-MIB", "customNotificationInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonObjCustomNotification = commonObjCustomNotification.setStatus('current')
commonObjOptionManagement = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 5)).setObjects(("RS-XX9-COMMON-MIB", "optionKeyName"), ("RS-XX9-COMMON-MIB", "optionKeyStatus"), ("RS-XX9-COMMON-MIB", "optionKeyValidity"), ("RS-XX9-COMMON-MIB", "instOpkDeviceName"), ("RS-XX9-COMMON-MIB", "commonOpkNotificationState"), ("RS-XX9-COMMON-MIB", "commonOpkNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonOpkNotificationMask"), ("RS-XX9-COMMON-MIB", "commonOpkNotificationName"), ("RS-XX9-COMMON-MIB", "deactivationResponse"), ("RS-XX9-COMMON-MIB", "deactivationKeyName"), ("RS-XX9-COMMON-MIB", "deactivationKeyNumber"), ("RS-XX9-COMMON-MIB", "instOpkMessage"), ("RS-XX9-COMMON-MIB", "instOpkNewKey"), ("RS-XX9-COMMON-MIB", "optionKeyNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonObjOptionManagement = commonObjOptionManagement.setStatus('current')
commonObjUPS = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 6)).setObjects(("RS-XX9-COMMON-MIB", "upsInfoWithUPS"), ("RS-XX9-COMMON-MIB", "upsInfoLink"), ("RS-XX9-COMMON-MIB", "upsInfoManufacturer"), ("RS-XX9-COMMON-MIB", "upsInfoModel"), ("RS-XX9-COMMON-MIB", "upsInfoSoftwareVersion"), ("RS-XX9-COMMON-MIB", "upsInfoName"), ("RS-XX9-COMMON-MIB", "upsInfoAttachedDevices"), ("RS-XX9-COMMON-MIB", "upsInfoBatteryStatus"), ("RS-XX9-COMMON-MIB", "upsInfoSecondsOnBattery"), ("RS-XX9-COMMON-MIB", "upsInfoMinutesRemaining"), ("RS-XX9-COMMON-MIB", "upsInfoChargeRemaining"), ("RS-XX9-COMMON-MIB", "upsInfoOutputSource"), ("RS-XX9-COMMON-MIB", "upsInfoOutputPower"), ("RS-XX9-COMMON-MIB", "upsInfoSelftestResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonObjUPS = commonObjUPS.setStatus('current')
commonObjGps = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 7)).setObjects(("RS-XX9-COMMON-MIB", "commonGpsConfAntennaType"), ("RS-XX9-COMMON-MIB", "commonGpsStAntennaState"), ("RS-XX9-COMMON-MIB", "commonGpsStTdop"), ("RS-XX9-COMMON-MIB", "commonGpsStSatellitesInView"), ("RS-XX9-COMMON-MIB", "commonGpsStateMonitoring"), ("RS-XX9-COMMON-MIB", "commonGpsConfGnssSelection"), ("RS-XX9-COMMON-MIB", "commonGpsStUsedSatellites"), ("RS-XX9-COMMON-MIB", "commonGpsConfDeviceName"), ("RS-XX9-COMMON-MIB", "commonGpsNotificationName"), ("RS-XX9-COMMON-MIB", "commonGpsNotificationMask"), ("RS-XX9-COMMON-MIB", "commonGpsNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonGpsNotificationState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonObjGps = commonObjGps.setStatus('current')
commonObjDeviceInformation = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 8)).setObjects(("RS-XX9-COMMON-MIB", "devInfoStateDeviceName"), ("RS-XX9-COMMON-MIB", "devInfoStateCapacitorBatteryInstalled"), ("RS-XX9-COMMON-MIB", "commonDevInfoNotificationName"), ("RS-XX9-COMMON-MIB", "commonDevInfoNotificationMask"), ("RS-XX9-COMMON-MIB", "commonDevInfoNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonDevInfoNotificationState"), ("RS-XX9-COMMON-MIB", "commonDevInfoConfAssignOvp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonObjDeviceInformation = commonObjDeviceInformation.setStatus('current')
commonObjEnvironment = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 9)).setObjects(("RS-XX9-COMMON-MIB", "commonEnvConfTempWarnUpper"), ("RS-XX9-COMMON-MIB", "commonEnvConfTempFaultUpper"), ("RS-XX9-COMMON-MIB", "commonEnvConfTempWarnLower"), ("RS-XX9-COMMON-MIB", "commonEnvConfTempFaultLower"), ("RS-XX9-COMMON-MIB", "commonEnvStTemperature"), ("RS-XX9-COMMON-MIB", "commonEnvStHumidity"), ("RS-XX9-COMMON-MIB", "commonEnvStDewPoint"), ("RS-XX9-COMMON-MIB", "commonEnvNotificationName"), ("RS-XX9-COMMON-MIB", "commonEnvNotificationMask"), ("RS-XX9-COMMON-MIB", "commonEnvNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonEnvNotificationState"), ("RS-XX9-COMMON-MIB", "commonEnvConfDeviceName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonObjEnvironment = commonObjEnvironment.setStatus('current')
commonObjNtpObsoleted = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 50)).setObjects(("RS-XX9-COMMON-MIB", "ntpMode"), ("RS-XX9-COMMON-MIB", "ntpSyncTimeInterval"), ("RS-XX9-COMMON-MIB", "ntpServerAddrIdx"), ("RS-XX9-COMMON-MIB", "ntpServerAddressType"), ("RS-XX9-COMMON-MIB", "ntpServerAddress"), ("RS-XX9-COMMON-MIB", "ntpLastSync"), ("RS-XX9-COMMON-MIB", "ntpState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonObjNtpObsoleted = commonObjNtpObsoleted.setStatus('obsolete')
commonNotifyBasic = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 100)).setObjects(("RS-XX9-COMMON-MIB", "commonTest"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonNotifyBasic = commonNotifyBasic.setStatus('current')
commonNotifyNtp = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 101)).setObjects(("RS-XX9-COMMON-MIB", "commonDateTimeNtpState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonNotifyNtp = commonNotifyNtp.setStatus('current')
commonNotifySoftwareUpdate = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 102)).setObjects(("RS-XX9-COMMON-MIB", "commonSwUpdateStatus"), ("RS-XX9-COMMON-MIB", "commonFwUpdateStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonNotifySoftwareUpdate = commonNotifySoftwareUpdate.setStatus('current')
commonNotifyCustomNotification = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 103)).setObjects(("RS-XX9-COMMON-MIB", "commonRising"), ("RS-XX9-COMMON-MIB", "commonFalling"), ("RS-XX9-COMMON-MIB", "commonChanging"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonNotifyCustomNotification = commonNotifyCustomNotification.setStatus('current')
commonNotifyOptionManagement = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 104)).setObjects(("RS-XX9-COMMON-MIB", "commonOptionKeyStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonNotifyOptionManagement = commonNotifyOptionManagement.setStatus('current')
commonNotifyDeviceInformation = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 105)).setObjects(("RS-XX9-COMMON-MIB", "commonDevInfoAcFail"), ("RS-XX9-COMMON-MIB", "commonDevInfoFanState"), ("RS-XX9-COMMON-MIB", "commonDevInfoOvpState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonNotifyDeviceInformation = commonNotifyDeviceInformation.setStatus('current')
commonNotifyEnvironment = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 106)).setObjects(("RS-XX9-COMMON-MIB", "commonEnvSummary"), ("RS-XX9-COMMON-MIB", "commonEnvTemperature"), ("RS-XX9-COMMON-MIB", "commonEnvDewPoint"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonNotifyEnvironment = commonNotifyEnvironment.setStatus('current')
commonNotifyNtpObsoleted = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 150)).setObjects(("RS-XX9-COMMON-MIB", "commonNtpSync"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonNotifyNtpObsoleted = commonNotifyNtpObsoleted.setStatus('obsolete')
commonNotifyGps = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 151)).setObjects(("RS-XX9-COMMON-MIB", "commonGpsState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonNotifyGps = commonNotifyGps.setStatus('current')
mibBuilder.exportSymbols("RS-XX9-COMMON-MIB", upsInformationEntry=upsInformationEntry, ntpServerAddrIdx=ntpServerAddrIdx, commonGpsNotificationMask=commonGpsNotificationMask, swUpdateDeviceGroup=swUpdateDeviceGroup, rsNotificationsAllWarningsOn=rsNotificationsAllWarningsOn, ntp=ntp, commonEnvSummary=commonEnvSummary, devInfoStateDeviceName=devInfoStateDeviceName, snmpSyncTrapSinks=snmpSyncTrapSinks, upsInfoOutputPower=upsInfoOutputPower, commonOpkNotificationMask=commonOpkNotificationMask, commonEnvironment=commonEnvironment, ntpMode=ntpMode, commonDevInfoNotificationPriority=commonDevInfoNotificationPriority, commonOptionManagement=commonOptionManagement, commonTxControlEntry=commonTxControlEntry, commonGpsStSatellitesInView=commonGpsStSatellitesInView, commonDevInfoStateTable=commonDevInfoStateTable, commonTxNotificationMask=commonTxNotificationMask, commonNotifySoftwareUpdate=commonNotifySoftwareUpdate, commonDevInfoNotificationMask=commonDevInfoNotificationMask, deactivationIdx=deactivationIdx, commonProductInformation=commonProductInformation, commonDateTimeConfigurationEntry=commonDateTimeConfigurationEntry, commonObjBasic=commonObjBasic, upsInfoModel=upsInfoModel, commonEnvNotificationMask=commonEnvNotificationMask, commonGpsStTdop=commonGpsStTdop, rsXx9CommonObjects=rsXx9CommonObjects, commonEntPhysicalType=commonEntPhysicalType, commonNotifyDeviceInformation=commonNotifyDeviceInformation, commonOpkNotificationName=commonOpkNotificationName, commonEntPhysicalPowerUpCycles=commonEntPhysicalPowerUpCycles, commonDevInfoConfigEntry=commonDevInfoConfigEntry, customNotificationVariable=customNotificationVariable, commonDateTimeNotificationState=commonDateTimeNotificationState, commonEntPhysicalTable=commonEntPhysicalTable, commonEnvTemperature=commonEnvTemperature, irtNotificationsAllOn=irtNotificationsAllOn, commonEnvConfigurationTable=commonEnvConfigurationTable, commonDateTimeNtpState=commonDateTimeNtpState, commonDateTimeNotificationTable=commonDateTimeNotificationTable, commonDevInfoFanState=commonDevInfoFanState, commonNotifyGps=commonNotifyGps, IndexTceDevice=IndexTceDevice, commonGpsNotificationPriority=commonGpsNotificationPriority, commonNotifyOptionManagement=commonNotifyOptionManagement, commonTxNotificationEntry=commonTxNotificationEntry, commonEnvNotificationTable=commonEnvNotificationTable, devInfoStateCapacitorBatteryInstalled=devInfoStateCapacitorBatteryInstalled, commonGpsStateMonitoring=commonGpsStateMonitoring, customNotificationPriority=customNotificationPriority, customNotificationTable=customNotificationTable, ntpLastSync=ntpLastSync, commonEntPhysicalHardwareStatus=commonEntPhysicalHardwareStatus, swUpdateMode=swUpdateMode, rsXx9CommonGroups=rsXx9CommonGroups, commonUPS=commonUPS, snmpUserConfiguration=snmpUserConfiguration, commonEnvNotificationPriority=commonEnvNotificationPriority, commonFuncSignalProcessing=commonFuncSignalProcessing, commonObjEnvironment=commonObjEnvironment, commonNotificationBindings=commonNotificationBindings, instOpkMessage=instOpkMessage, upsInfoManufacturer=upsInfoManufacturer, commonObjGps=commonObjGps, ntpServerAddress=ntpServerAddress, commonSnmpConfiguration=commonSnmpConfiguration, commonDateTimeNotificationIdx=commonDateTimeNotificationIdx, commonNotifyNtpObsoleted=commonNotifyNtpObsoleted, commonChanging=commonChanging, commonOpkNotificationEntry=commonOpkNotificationEntry, commonEnvConfigurationEntry=commonEnvConfigurationEntry, commonObjNtpObsoleted=commonObjNtpObsoleted, customNotificationStatus=customNotificationStatus, commonNotifyCustomNotification=commonNotifyCustomNotification, commonEntPhysicalOperationHours=commonEntPhysicalOperationHours, ntpServerAddrTable=ntpServerAddrTable, commonFalling=commonFalling, commonDateTimeConfNtpEnable=commonDateTimeConfNtpEnable, upsInfoSelftestResult=upsInfoSelftestResult, optionKeyEntry=optionKeyEntry, upsInfoMinutesRemaining=upsInfoMinutesRemaining, sendTestNotification=sendTestNotification, commonEnvNotificationState=commonEnvNotificationState, commonTxFunctions=commonTxFunctions, cmnTxCtrlAmplifierType=cmnTxCtrlAmplifierType, optionKeyTable=optionKeyTable, upsInfoWithUPS=upsInfoWithUPS, commonEnvStTemperature=commonEnvStTemperature, commonEnvConfDeviceName=commonEnvConfDeviceName, rsNotificationsAllOff=rsNotificationsAllOff, commonGpsNotificationState=commonGpsNotificationState, commonEntPhysicalSwFwBiosNumber=commonEntPhysicalSwFwBiosNumber, commonNotifyEnvironment=commonNotifyEnvironment, ntpSyncTimeInterval=ntpSyncTimeInterval, upsInfoDeviceIdx=upsInfoDeviceIdx, commonNotifyBasic=commonNotifyBasic, customNotificationFallingThreshold=customNotificationFallingThreshold, rsXx9CommonMibModule=rsXx9CommonMibModule, commonDateTimeNotificationPriority=commonDateTimeNotificationPriority, swUpdateStart=swUpdateStart, commonEnvConfDeviceIdx=commonEnvConfDeviceIdx, commonDevInfoNotificationState=commonDevInfoNotificationState, commonDevInfoOvpState=commonDevInfoOvpState, optionKeyStatus=optionKeyStatus, installOpkEntry=installOpkEntry, commonGpsConfGnssSelection=commonGpsConfGnssSelection, customNotificationEntry=customNotificationEntry, commonDateTimeConfDeviceIdx=commonDateTimeConfDeviceIdx, commonDevInfoConfigTable=commonDevInfoConfigTable, commonGpsConfAntennaType=commonGpsConfAntennaType, commonDevInfoConfAssignOvp=commonDevInfoConfAssignOvp, commonNotificationAlarmClass=commonNotificationAlarmClass, GpsPowerSource=GpsPowerSource, rsXx9CommonCompliances=rsXx9CommonCompliances, optionKeyNumber=optionKeyNumber, commonGpsConfigurationTable=commonGpsConfigurationTable, commonDateTime=commonDateTime, upsInfoBatteryStatus=upsInfoBatteryStatus, commonDeviceInformation=commonDeviceInformation, rsXx9CommonNotifications=rsXx9CommonNotifications, optionKeyIdx=optionKeyIdx, commonNtpSync=commonNtpSync, customNotificationSampleType=customNotificationSampleType, commonEntPhysicalConfigurationStatus=commonEntPhysicalConfigurationStatus, deactivationTable=deactivationTable, commonEnvConfTempWarnUpper=commonEnvConfTempWarnUpper, reboot=reboot, commonEnvNotificationIdx=commonEnvNotificationIdx, rsNotificationsAllFaultsOff=rsNotificationsAllFaultsOff, commonDevInfoStateEntry=commonDevInfoStateEntry, deactivationKeyName=deactivationKeyName, commonObjUPS=commonObjUPS, commonEnvConfTempFaultLower=commonEnvConfTempFaultLower, commonGpsStateTable=commonGpsStateTable, rsNotificationsAllOn=rsNotificationsAllOn, commonDevInfoNotificationTable=commonDevInfoNotificationTable, commonEnvNotificationDeviceIdx=commonEnvNotificationDeviceIdx, commonGpsNotificationName=commonGpsNotificationName, commonGpsState=commonGpsState, commonSwUpdateStatus=commonSwUpdateStatus, upsInformationTable=upsInformationTable, commonGpsConfDeviceName=commonGpsConfDeviceName, commonGPS=commonGPS, commonDevInfoNotificationName=commonDevInfoNotificationName, commonEntPhysicalEntry=commonEntPhysicalEntry, upsInfoOutputSource=upsInfoOutputSource, commonFuncSystemControl=commonFuncSystemControl, cmnTxCtrlRedundancyMode=cmnTxCtrlRedundancyMode, cmnTxCtrlModulationMode=cmnTxCtrlModulationMode, commonEnvStDewPoint=commonEnvStDewPoint, commonObjDeviceInformation=commonObjDeviceInformation, commonFuncTxControl=commonFuncTxControl, commonTxNotificationIdx=commonTxNotificationIdx, optionKeyValidity=optionKeyValidity, snmpEnable=snmpEnable, commonGpsConfigurationEntry=commonGpsConfigurationEntry, commonGpsNotificationDeviceIdx=commonGpsNotificationDeviceIdx, rsNotificationsAllFaultsOn=rsNotificationsAllFaultsOn, commonTxNotificationName=commonTxNotificationName, commonSystemType=commonSystemType, instOpkDeviceName=instOpkDeviceName, commonEnvDewPoint=commonEnvDewPoint, swUpdateDeviceName=swUpdateDeviceName, customNotificationIndex=customNotificationIndex, commonDevInfoNotificationDeviceIdx=commonDevInfoNotificationDeviceIdx, commonEnvStHumidity=commonEnvStHumidity, commonTest=commonTest, swUpdateRebootPending=swUpdateRebootPending, customNotificationValue=customNotificationValue, commonDateAndTime=commonDateAndTime, softwareUpdate=softwareUpdate, commonGpsStAntennaState=commonGpsStAntennaState, commonObjNtp=commonObjNtp, commonOpkNotificationIdx=commonOpkNotificationIdx, irtNotificationsAllOff=irtNotificationsAllOff, commonEnvConfTempFaultUpper=commonEnvConfTempFaultUpper, commonEnvStateTable=commonEnvStateTable, commonTrapCounter=commonTrapCounter, commonDateTimeConfLocalDateTime=commonDateTimeConfLocalDateTime, upsInfoAttachedDevices=upsInfoAttachedDevices, commonEnvStateEntry=commonEnvStateEntry, upsInfoLink=upsInfoLink, commonFuncCoolingControl=commonFuncCoolingControl, commonFuncRackControl=commonFuncRackControl, commonDateTimeConfDeviceName=commonDateTimeConfDeviceName, deactivationResponse=deactivationResponse, commonGpsNotificationTable=commonGpsNotificationTable, ntpServerAddrEntry=ntpServerAddrEntry, rsNotificationsAllWarningsOff=rsNotificationsAllWarningsOff, upsInfoSecondsOnBattery=upsInfoSecondsOnBattery, installOpkTable=installOpkTable, commonEnvConfTempWarnLower=commonEnvConfTempWarnLower, commonGpsStUsedSatellites=commonGpsStUsedSatellites, rsXx9CommonConformance=rsXx9CommonConformance, ntpServerAddressType=ntpServerAddressType, commonGpsConfDeviceIdx=commonGpsConfDeviceIdx, commonEnvNotificationEntry=commonEnvNotificationEntry, customNotificationInterval=customNotificationInterval, devInfoStateDeviceIdx=devInfoStateDeviceIdx, upsInfoName=upsInfoName, upsInfoChargeRemaining=upsInfoChargeRemaining, commonObjOptionManagement=commonObjOptionManagement, commonDevInfoNotificationEntry=commonDevInfoNotificationEntry, deactivationKeyNumber=deactivationKeyNumber, commonDateTimeConfNtpServer=commonDateTimeConfNtpServer, commonTxNotificationTable=commonTxNotificationTable, commonDateTimeConfLocalTimeOffset=commonDateTimeConfLocalTimeOffset, commonDateTimeNotificationDeviceIdx=commonDateTimeNotificationDeviceIdx, commonTxNotificationPriority=commonTxNotificationPriority, deactivationEntry=deactivationEntry, commonTransmitterConfiguration=commonTransmitterConfiguration, commonSystemNumberOfTxA=commonSystemNumberOfTxA, softwareMaintenance=softwareMaintenance, ntpState=ntpState, commonOpkNotificationTable=commonOpkNotificationTable, commonNotifyNtp=commonNotifyNtp, commonFwUpdateStatus=commonFwUpdateStatus, PYSNMP_MODULE_ID=rsXx9CommonMibModule, commonDateTimeConfigurationTable=commonDateTimeConfigurationTable, customNotificationRisingThreshold=customNotificationRisingThreshold, commonGpsNotificationEntry=commonGpsNotificationEntry, commonOpkNotificationState=commonOpkNotificationState, commonDevInfoNotificationIdx=commonDevInfoNotificationIdx, commonOptionKeyStatus=commonOptionKeyStatus, cmnTxCtrlTxIdx=cmnTxCtrlTxIdx, upsInfoSoftwareVersion=upsInfoSoftwareVersion, commonGpsStateEntry=commonGpsStateEntry, commonTxControlTable=commonTxControlTable, commonTxNotificationState=commonTxNotificationState, commonObjSoftwareUpdate=commonObjSoftwareUpdate, optionKeyName=optionKeyName, commonDateTimeNotificationName=commonDateTimeNotificationName, commonBasicCompliance=commonBasicCompliance, instOpkNewKey=instOpkNewKey, commonGpsNotificationIdx=commonGpsNotificationIdx, commonRising=commonRising, commonOpkNotificationPriority=commonOpkNotificationPriority, commonSystemControl=commonSystemControl, commonDevInfoAcFail=commonDevInfoAcFail, commonObjCustomNotification=commonObjCustomNotification, commonDateTimeNotificationMask=commonDateTimeNotificationMask, instOpkDeviceIdx=instOpkDeviceIdx, commonEnvNotificationName=commonEnvNotificationName, commonDateTimeNotificationEntry=commonDateTimeNotificationEntry)
