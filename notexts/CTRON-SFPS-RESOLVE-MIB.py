#
# PySNMP MIB module CTRON-SFPS-RESOLVE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-SFPS-RESOLVE-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:42:47 2024
# On host fv-az1530-906 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
sfpsMobilityStats, sfpsTableResolve, sfpsISPResolve, sfpsSubnetResolve, sfpsSubnetResolveStats, sfpsUnresolveTableStats, sfpsUnresolveTableAPI, sfpsSwitchResolve, sfpsSubnetResolveNvram, sfpsBlockResolveAPI, sfpsBlockResolve, sfpsUnresolve, sfpsSubnetResolveAPI, sfpsTableResolveAPI, sfpsBlockResolveStats, sfpsRelayAgentResolve, sfpsRelayAgentResolveStats, sfpsResolveStats = mibBuilder.importSymbols("CTRON-SFPS-INCLUDE-MIB", "sfpsMobilityStats", "sfpsTableResolve", "sfpsISPResolve", "sfpsSubnetResolve", "sfpsSubnetResolveStats", "sfpsUnresolveTableStats", "sfpsUnresolveTableAPI", "sfpsSwitchResolve", "sfpsSubnetResolveNvram", "sfpsBlockResolveAPI", "sfpsBlockResolve", "sfpsUnresolve", "sfpsSubnetResolveAPI", "sfpsTableResolveAPI", "sfpsBlockResolveStats", "sfpsRelayAgentResolve", "sfpsRelayAgentResolveStats", "sfpsResolveStats")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Unsigned32, Counter64, ModuleIdentity, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, Integer32, IpAddress, iso, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Unsigned32", "Counter64", "ModuleIdentity", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "Integer32", "IpAddress", "iso", "Counter32", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class HexInteger(Integer32):
    pass

class SfpsAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

sfpsServiceCenterResolveTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 1), )
if mibBuilder.loadTexts: sfpsServiceCenterResolveTable.setStatus('mandatory')
sfpsServiceCenterResolveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 1, 1), ).setIndexNames((0, "CTRON-SFPS-RESOLVE-MIB", "sfpsServiceCenterResolveHashLeaf"))
if mibBuilder.loadTexts: sfpsServiceCenterResolveEntry.setStatus('mandatory')
sfpsServiceCenterResolveHashLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 1, 1, 1), HexInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterResolveHashLeaf.setStatus('mandatory')
sfpsServiceCenterResolveMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterResolveMetric.setStatus('mandatory')
sfpsServiceCenterResolveName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterResolveName.setStatus('mandatory')
sfpsServiceCenterResolveOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("kStatusRunning", 1), ("kStatusHalted", 2), ("kStatusPending", 3), ("kStatusFaulted", 4), ("kStatusNotStarted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterResolveOperStatus.setStatus('mandatory')
sfpsServiceCenterResolveAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsServiceCenterResolveAdminStatus.setStatus('mandatory')
sfpsServiceCenterResolveStatusTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterResolveStatusTime.setStatus('mandatory')
sfpsServiceCenterResolveRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterResolveRequests.setStatus('mandatory')
sfpsServiceCenterResolveResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterResolveResponses.setStatus('mandatory')
sfpsResolveStatsRequests = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsRequests.setStatus('mandatory')
sfpsResolveStatsResponses = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsResponses.setStatus('mandatory')
sfpsResolveStatsAcks = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsAcks.setStatus('mandatory')
sfpsResolveStatsNaks = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsNaks.setStatus('mandatory')
sfpsResolveStatsUnknowns = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsUnknowns.setStatus('mandatory')
sfpsResolveStatsNoAnswer = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsNoAnswer.setStatus('mandatory')
sfpsResolveStatsTimeout = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsResolveStatsTimeout.setStatus('mandatory')
sfpsResolveStatsAvgResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsAvgResponseTime.setStatus('mandatory')
sfpsResolveStatsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsTableSize.setStatus('mandatory')
sfpsResolveStatsTableHigh = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsTableHigh.setStatus('mandatory')
sfpsResolveStatsErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsErrorCount.setStatus('mandatory')
sfpsResolveStatsStaleCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsStaleCount.setStatus('mandatory')
sfpsResolveStatsDupMsgCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsDupMsgCount.setStatus('mandatory')
sfpsResolveStatsReqRcvd = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsReqRcvd.setStatus('mandatory')
sfpsResolveStatsRespAcksSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsRespAcksSent.setStatus('mandatory')
sfpsResolveStatsRespNaksSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsRespNaksSent.setStatus('mandatory')
sfpsResolveStatsRespUnknownsSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsRespUnknownsSent.setStatus('mandatory')
sfpsResolveStatsRespRecvd = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsRespRecvd.setStatus('mandatory')
sfpsResolveStatsResolveMask = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsResolveMask.setStatus('mandatory')
sfpsResolveStatsINBMask = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsINBMask.setStatus('mandatory')
sfpsResolveStatsFloodMask = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsFloodMask.setStatus('mandatory')
sfpsResolveStatsChangeCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsChangeCount.setStatus('mandatory')
sfpsResolveStatsChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 23), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsChangeTime.setStatus('mandatory')
sfpsResolveStatsResetStats = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsResolveStatsResetStats.setStatus('mandatory')
sfpsResolveStatsAnswerUnknown = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsResolveStatsAnswerUnknown.setStatus('mandatory')
sfpsResolveStatsDisableProxy = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsResolveStatsDisableProxy.setStatus('mandatory')
sfpsResolveStatsDisableLayer3 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsResolveStatsDisableLayer3.setStatus('mandatory')
sfpsResolveStatsCSPDaveMalPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsCSPDaveMalPkts.setStatus('mandatory')
sfpsResolveStatsStaleTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsResolveStatsStaleTimeOut.setStatus('mandatory')
sfpsResolveStatsMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsResolveStatsMaxResponseTime.setStatus('mandatory')
sfpsResolveStatsStaleEntryLost = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsStaleEntryLost.setStatus('mandatory')
sfpsResolveStatsDaveEntryLost = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsDaveEntryLost.setStatus('mandatory')
sfpsMobilityStatsOrigSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsOrigSendCount.setStatus('mandatory')
sfpsMobilityStatsOrigReceiveCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsOrigReceiveCount.setStatus('mandatory')
sfpsMobilityStatsOrigNUSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsOrigNUSendCount.setStatus('mandatory')
sfpsMobilityStatsOrigNASendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsOrigNASendCount.setStatus('mandatory')
sfpsMobilityStatsOrigNUASendReqCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsOrigNUASendReqCount.setStatus('mandatory')
sfpsMobilityStatsOrigRetrySendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsOrigRetrySendCount.setStatus('mandatory')
sfpsMobilityStatsOrigLocalMoveCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsOrigLocalMoveCount.setStatus('mandatory')
sfpsMobilityStatsOrigUnknownCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsOrigUnknownCount.setStatus('mandatory')
sfpsMobilityStatsOrigAckCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsOrigAckCount.setStatus('mandatory')
sfpsMobilityStatsOrigNakNodeCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsOrigNakNodeCount.setStatus('mandatory')
sfpsMobilityStatsOrigNakAliasCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsOrigNakAliasCount.setStatus('mandatory')
sfpsMobilityStatsErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsErrorCount.setStatus('mandatory')
sfpsMobilityStatsGenRecCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsGenRecCount.setStatus('mandatory')
sfpsMobilityStatsGenSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsGenSendCount.setStatus('mandatory')
sfpsMobilityStatsGenReqRecCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsGenReqRecCount.setStatus('mandatory')
sfpsMobilityStatsGenReqRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsGenReqRetryCount.setStatus('mandatory')
sfpsMobilityStatsGenReqForwardCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsGenReqForwardCount.setStatus('mandatory')
sfpsMobilityStatsGenRespRecCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsGenRespRecCount.setStatus('mandatory')
sfpsMobilityStatsGenRespSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsGenRespSendCount.setStatus('mandatory')
sfpsMobilityStatsNUReqRecCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNUReqRecCount.setStatus('mandatory')
sfpsMobilityStatsNURespSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNURespSendCount.setStatus('mandatory')
sfpsMobilityStatsNAReqRecCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNAReqRecCount.setStatus('mandatory')
sfpsMobilityStatsNARespSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNARespSendCount.setStatus('mandatory')
sfpsMobilityStatsNUARespRecUnknownCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNUARespRecUnknownCount.setStatus('mandatory')
sfpsMobilityStatsNURespRecAckCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNURespRecAckCount.setStatus('mandatory')
sfpsMobilityStatsNUARespRecAliasNakCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNUARespRecAliasNakCount.setStatus('mandatory')
sfpsMobilityStatsNUARespRecNodeNakCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNUARespRecNodeNakCount.setStatus('mandatory')
sfpsMobilityStatsNURespAliasNakSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNURespAliasNakSendCount.setStatus('mandatory')
sfpsMobilityStatsNURespNodeNakSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNURespNodeNakSendCount.setStatus('mandatory')
sfpsMobilityStatsNURespAckSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNURespAckSendCount.setStatus('mandatory')
sfpsMobilityStatsNURespUnknownSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNURespUnknownSendCount.setStatus('mandatory')
sfpsMobilityStatsInterNUARespRecCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsInterNUARespRecCount.setStatus('mandatory')
sfpsMobilityStatsInterNUARespSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsInterNUARespSendCount.setStatus('mandatory')
sfpsMobilityStatsInterNewUserRespRecCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsInterNewUserRespRecCount.setStatus('mandatory')
sfpsMobilityStatsInterNewAliasRespRecCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsInterNewAliasRespRecCount.setStatus('mandatory')
sfpsMobilityStatsInterNewUserRespSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsInterNewUserRespSendCount.setStatus('mandatory')
sfpsMobilityStatsInterNewAliasRespSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsInterNewAliasRespSendCount.setStatus('mandatory')
sfpsMobilityStatsInterRespNakNodeSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsInterRespNakNodeSendCount.setStatus('mandatory')
sfpsMobilityStatsInterRespNakAliasSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsInterRespNakAliasSendCount.setStatus('mandatory')
sfpsMobilityStatsInterRespUnknownSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsInterRespUnknownSendCount.setStatus('mandatory')
sfpsMobilityStatsInterRespAckSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsInterRespAckSendCount.setStatus('mandatory')
sfpsMobilityStatsAliasOnOfSwitch = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsAliasOnOfSwitch.setStatus('mandatory')
sfpsMobilityStatsResetCounters = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMobilityStatsResetCounters.setStatus('mandatory')
sfpsMobilityStatsRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMobilityStatsRetryCount.setStatus('mandatory')
sfpsMobilityStatsRetryDrops = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMobilityStatsRetryDrops.setStatus('mandatory')
sfpsMobilityStatsMaxRetryReached = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMobilityStatsMaxRetryReached.setStatus('mandatory')
sfpsMobilityStatsNewUserRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMobilityStatsNewUserRetryTime.setStatus('mandatory')
sfpsMobilityStatsMaxNewUserRetries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMobilityStatsMaxNewUserRetries.setStatus('mandatory')
sfpsMobilityStatsNewUserStaleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMobilityStatsNewUserStaleTimeout.setStatus('mandatory')
sfpsMobilityStatsAvgResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMobilityStatsAvgResponseTime.setStatus('mandatory')
sfpsMobilityStatsMaxResponeTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMobilityStatsMaxResponeTime.setStatus('mandatory')
sfpsUnresolveTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1), )
if mibBuilder.loadTexts: sfpsUnresolveTable.setStatus('mandatory')
sfpsUnresolveTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1, 1), ).setIndexNames((0, "CTRON-SFPS-RESOLVE-MIB", "sfpsUnresolveTableHash"), (0, "CTRON-SFPS-RESOLVE-MIB", "sfpsUnresolveTableHashIndex"))
if mibBuilder.loadTexts: sfpsUnresolveTableEntry.setStatus('mandatory')
sfpsUnresolveTableHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableHash.setStatus('mandatory')
sfpsUnresolveTableHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableHashIndex.setStatus('mandatory')
sfpsUnresolveTableAOType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("aoMacDX", 1), ("aoIpxSap", 2), ("aoIpxRIP", 3), ("aoInetYP", 4), ("aoInetUDP", 5), ("aoIpxIpx", 6), ("aoInetIP", 7), ("aoInetRPC", 8), ("aoInetRIP", 9), ("aoMacDXMcast", 10), ("aoAtDDP", 11), ("aoEmpty", 12), ("aoVlan", 13), ("aoHostName", 14), ("aoNetBiosName", 15), ("aoNBT", 16), ("aoInetIPMask", 17), ("aoIpxSap8022", 18), ("aoIpxSapSnap", 19), ("aoIpxSapEnet", 20), ("aoDHCPXID", 21), ("aoipxRip8022", 22), ("aoipxRipSnap", 23), ("aoipxRipEnet", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableAOType.setStatus('mandatory')
sfpsUnresolveTableAOValue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableAOValue.setStatus('mandatory')
sfpsUnresolveTableNumMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableNumMisses.setStatus('mandatory')
sfpsUnresolveTableLastMissTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableLastMissTime.setStatus('mandatory')
sfpsUnresolveTableLastCallProc = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableLastCallProc.setStatus('mandatory')
sfpsUnresolveTableSrcMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1, 1, 8), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableSrcMAC.setStatus('mandatory')
sfpsUnresolveTableAvgPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableAvgPeriod.setStatus('mandatory')
sfpsUnresolveTableBlockFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableBlockFlag.setStatus('mandatory')
sfpsUnresolveTableAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("set-parameter", 1), ("reset", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsUnresolveTableAPIVerb.setStatus('mandatory')
sfpsUnresolveTableAPIAgeOutTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsUnresolveTableAPIAgeOutTime.setStatus('mandatory')
sfpsUnresolveTableAPIBlockHoldDown = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsUnresolveTableAPIBlockHoldDown.setStatus('mandatory')
sfpsUnresolveTableStatsNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableStatsNumEntries.setStatus('mandatory')
sfpsUnresolveTableStatsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableStatsTableSize.setStatus('mandatory')
sfpsUnresolveTableStatsTableFullCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableStatsTableFullCount.setStatus('mandatory')
sfpsUnresolveTableStatsTotalReqSeen = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableStatsTotalReqSeen.setStatus('mandatory')
sfpsUnresolveTableStatsAvgReqTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableStatsAvgReqTime.setStatus('mandatory')
sfpsBlockResolveTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 1), )
if mibBuilder.loadTexts: sfpsBlockResolveTable.setStatus('mandatory')
sfpsBlockResolveTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 1, 1), ).setIndexNames((0, "CTRON-SFPS-RESOLVE-MIB", "sfpsBlockResolveTableHash"), (0, "CTRON-SFPS-RESOLVE-MIB", "sfpsBlockResolveTableHashIndex"))
if mibBuilder.loadTexts: sfpsBlockResolveTableEntry.setStatus('mandatory')
sfpsBlockResolveTableHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveTableHash.setStatus('mandatory')
sfpsBlockResolveTableHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveTableHashIndex.setStatus('mandatory')
sfpsBlockResolveTableAOType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("aoMacDX", 1), ("aoIpxSap", 2), ("aoIpxRIP", 3), ("aoInetYP", 4), ("aoInetUDP", 5), ("aoIpxIpx", 6), ("aoInetIP", 7), ("aoInetRPC", 8), ("aoInetRIP", 9), ("aoMacDXMcast", 10), ("aoAtDDP", 11), ("aoEmpty", 12), ("aoVlan", 13), ("aoHostName", 14), ("aoNetBiosName", 15), ("aoInetIPMask", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveTableAOType.setStatus('mandatory')
sfpsBlockResolveTableAOValue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveTableAOValue.setStatus('mandatory')
sfpsBlockResolveTableStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveTableStartTime.setStatus('mandatory')
sfpsBlockResolveTableNumBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveTableNumBlocked.setStatus('mandatory')
sfpsBlockResolveTableNumSent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveTableNumSent.setStatus('mandatory')
sfpsBlockResolveTableLastSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveTableLastSeen.setStatus('mandatory')
sfpsBlockResolveTableAvgPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveTableAvgPeriod.setStatus('mandatory')
sfpsBlockResolveAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("add-entry", 2), ("del-entry", 3), ("set-parameter", 4), ("reset", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockResolveAPIVerb.setStatus('mandatory')
sfpsBlockResolveAPIAOType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockResolveAPIAOType.setStatus('mandatory')
sfpsBlockResolveAPIAOValue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockResolveAPIAOValue.setStatus('mandatory')
sfpsBlockResolveAPITestCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockResolveAPITestCount.setStatus('mandatory')
sfpsBlockResolveAPIThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockResolveAPIThreshold.setStatus('mandatory')
sfpsBlockResolveAPISendPeriod = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockResolveAPISendPeriod.setStatus('mandatory')
sfpsBlockResolveStatsNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveStatsNumEntries.setStatus('mandatory')
sfpsBlockResolveStatsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveStatsTableSize.setStatus('mandatory')
sfpsBlockResolveStatsTotalReqSeen = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveStatsTotalReqSeen.setStatus('mandatory')
sfpsBlockResolveStatsTotalBlocked = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveStatsTotalBlocked.setStatus('mandatory')
sfpsBlockResolveStatsTotalSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveStatsTotalSent.setStatus('mandatory')
sfpsBlockResolveStatsAvgReqTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveStatsAvgReqTime.setStatus('mandatory')
sfpsTableResolveTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 1), )
if mibBuilder.loadTexts: sfpsTableResolveTable.setStatus('mandatory')
sfpsTableResolveTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 1, 1), ).setIndexNames((0, "CTRON-SFPS-RESOLVE-MIB", "sfpsTableResolveTag"), (0, "CTRON-SFPS-RESOLVE-MIB", "sfpsTableResolveHash"), (0, "CTRON-SFPS-RESOLVE-MIB", "sfpsTableResolveHashIndex"))
if mibBuilder.loadTexts: sfpsTableResolveTableEntry.setStatus('mandatory')
sfpsTableResolveTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTableResolveTag.setStatus('mandatory')
sfpsTableResolveHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTableResolveHash.setStatus('mandatory')
sfpsTableResolveHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTableResolveHashIndex.setStatus('mandatory')
sfpsTableResolveSrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTableResolveSrcType.setStatus('mandatory')
sfpsTableResolveSrcLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTableResolveSrcLoad.setStatus('mandatory')
sfpsTableResolveTrgType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTableResolveTrgType.setStatus('mandatory')
sfpsTableResolveTrgLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTableResolveTrgLoad.setStatus('mandatory')
sfpsTableResolveAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("delete", 3), ("modify", 4), ("clearTable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPIVerb.setStatus('mandatory')
sfpsTableResolveAPISrcAOType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPISrcAOType.setStatus('mandatory')
sfpsTableResolveAPISrcAOLoad = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPISrcAOLoad.setStatus('mandatory')
sfpsTableResolveAPITrgAOType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPITrgAOType.setStatus('mandatory')
sfpsTableResolveAPITrgAOLoad = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPITrgAOLoad.setStatus('mandatory')
sfpsTableResolveAPIVlanAOLoad = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPIVlanAOLoad.setStatus('mandatory')
sfpsTableResolveAPIDestSwMac = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPIDestSwMac.setStatus('mandatory')
sfpsTableResolveAPIScopeToVlan = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPIScopeToVlan.setStatus('mandatory')
sfpsTableResolveAPINVRAMEntry = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPINVRAMEntry.setStatus('mandatory')
sfpsTableResolveAPIMask = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 10), HexInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPIMask.setStatus('mandatory')
sfpsTableResolveAPIResolveOption = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ack", 1), ("nak", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPIResolveOption.setStatus('mandatory')
sfpsTableResolveAPIAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPIAdminStatus.setStatus('mandatory')
sfpsSubnetResolveStatsRequests = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveStatsRequests.setStatus('mandatory')
sfpsSubnetResolveStatsAcks = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveStatsAcks.setStatus('mandatory')
sfpsSubnetResolveStatsUnknowns = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveStatsUnknowns.setStatus('mandatory')
sfpsSubnetResolveStatsInternalUnknowns = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveStatsInternalUnknowns.setStatus('mandatory')
sfpsSubnetResolveStatsGatewayAcks = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveStatsGatewayAcks.setStatus('mandatory')
sfpsSubnetResolveStatsErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveStatsErrors.setStatus('mandatory')
sfpsSubnetResolveStatsMaxTblSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveStatsMaxTblSize.setStatus('mandatory')
sfpsSubnetResolveStatsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveStatsTableSize.setStatus('mandatory')
sfpsSubnetResolveAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("delete", 3), ("updateMask", 4), ("setDefGateway", 5), ("clearDefGateway", 6), ("clearTable", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSubnetResolveAPIVerb.setStatus('mandatory')
sfpsSubnetResolveAPISrcAOType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSubnetResolveAPISrcAOType.setStatus('mandatory')
sfpsSubnetResolveAPISrcAPLoad = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSubnetResolveAPISrcAPLoad.setStatus('mandatory')
sfpsSubnetResolveAPITrgAOType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSubnetResolveAPITrgAOType.setStatus('mandatory')
sfpsSubnetResolveAPITrgAOLoad = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSubnetResolveAPITrgAOLoad.setStatus('mandatory')
sfpsSubnetResolveAPIRouteType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("external", 1), ("internal", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSubnetResolveAPIRouteType.setStatus('mandatory')
sfpsSubnetResolveAPINVRAMEntry = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSubnetResolveAPINVRAMEntry.setStatus('mandatory')
sfpsSubnetResolveAPIAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSubnetResolveAPIAdminStatus.setStatus('mandatory')
sfpsSubnetResolveAPIDefGateway = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 2, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSubnetResolveAPIDefGateway.setStatus('mandatory')
sfpsSubnetResolveAPISubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 2, 10), HexInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSubnetResolveAPISubnetMask.setStatus('mandatory')
sfpsSubnetResolveTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3), )
if mibBuilder.loadTexts: sfpsSubnetResolveTable.setStatus('mandatory')
sfpsSubnetResolveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1), ).setIndexNames((0, "CTRON-SFPS-RESOLVE-MIB", "sfpsSubnetResolveTargetTag"), (0, "CTRON-SFPS-RESOLVE-MIB", "sfpsSubnetResolveSourceHash"), (0, "CTRON-SFPS-RESOLVE-MIB", "sfpsSubnetResolveHashIndex"))
if mibBuilder.loadTexts: sfpsSubnetResolveEntry.setStatus('mandatory')
sfpsSubnetResolveTargetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveTargetTag.setStatus('mandatory')
sfpsSubnetResolveSourceHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveSourceHash.setStatus('mandatory')
sfpsSubnetResolveHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveHashIndex.setStatus('mandatory')
sfpsSubnetResolveSrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveSrcType.setStatus('mandatory')
sfpsSubnetResolveSrcLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveSrcLoad.setStatus('mandatory')
sfpsSubnetResolveTrgType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveTrgType.setStatus('mandatory')
sfpsSubnetResolveTrgLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveTrgLoad.setStatus('mandatory')
sfpsSubnetResolveRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("external", 1), ("internal", 2), ("invalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveRouteType.setStatus('mandatory')
sfpsSubnetResolveRelativeCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveRelativeCnt.setStatus('mandatory')
sfpsSubnetResolveAbsoluteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveAbsoluteCnt.setStatus('mandatory')
sfpsSubnetResolveNVRAMEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveNVRAMEntry.setStatus('mandatory')
sfpsSubnetResolveAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveAdminStatus.setStatus('mandatory')
sfpsSubnetResolveOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("halted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveOperStatus.setStatus('mandatory')
sfpsRelayAgentResolveVlanName = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 10, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRelayAgentResolveVlanName.setStatus('mandatory')
sfpsSubnetResolveNvramMaskEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveNvramMaskEntries.setStatus('mandatory')
sfpsSubnetResolveNvramIpEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveNvramIpEntries.setStatus('mandatory')
sfpsRelayAgentResolveStatsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 10, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRelayAgentResolveStatsTableSize.setStatus('mandatory')
sfpsRelayAgentResolveStatsHighWater = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 10, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRelayAgentResolveStatsHighWater.setStatus('mandatory')
sfpsSwitchResolveTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 2, 1), )
if mibBuilder.loadTexts: sfpsSwitchResolveTable.setStatus('mandatory')
sfpsSwitchResolveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 2, 1, 1), ).setIndexNames((0, "CTRON-SFPS-RESOLVE-MIB", "sfpsSwitchResolveSwitch"), (0, "CTRON-SFPS-RESOLVE-MIB", "sfpsSwitchResolveCallTag"))
if mibBuilder.loadTexts: sfpsSwitchResolveEntry.setStatus('mandatory')
sfpsSwitchResolveSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSwitchResolveSwitch.setStatus('mandatory')
sfpsSwitchResolveCallTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSwitchResolveCallTag.setStatus('mandatory')
sfpsSwitchResolvePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSwitchResolvePortNum.setStatus('mandatory')
sfpsSwitchResolveNeighborSw = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSwitchResolveNeighborSw.setStatus('mandatory')
sfpsSwitchResolveRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSwitchResolveRequestCount.setStatus('mandatory')
sfpsSwitchResolveResponseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSwitchResolveResponseCount.setStatus('mandatory')
sfpsSwitchResolveMobilityRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSwitchResolveMobilityRetry.setStatus('mandatory')
sfpsSwitchResolveEventId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSwitchResolveEventId.setStatus('mandatory')
mibBuilder.exportSymbols("CTRON-SFPS-RESOLVE-MIB", sfpsResolveStatsResetStats=sfpsResolveStatsResetStats, sfpsMobilityStatsNUARespRecUnknownCount=sfpsMobilityStatsNUARespRecUnknownCount, sfpsTableResolveAPISrcAOLoad=sfpsTableResolveAPISrcAOLoad, sfpsUnresolveTableAOValue=sfpsUnresolveTableAOValue, HexInteger=HexInteger, sfpsSubnetResolveStatsInternalUnknowns=sfpsSubnetResolveStatsInternalUnknowns, sfpsResolveStatsResolveMask=sfpsResolveStatsResolveMask, sfpsMobilityStatsInterNUARespSendCount=sfpsMobilityStatsInterNUARespSendCount, sfpsSubnetResolveAPITrgAOLoad=sfpsSubnetResolveAPITrgAOLoad, sfpsResolveStatsDaveEntryLost=sfpsResolveStatsDaveEntryLost, sfpsServiceCenterResolveName=sfpsServiceCenterResolveName, sfpsSubnetResolveTable=sfpsSubnetResolveTable, sfpsMobilityStatsOrigNakNodeCount=sfpsMobilityStatsOrigNakNodeCount, sfpsMobilityStatsNURespUnknownSendCount=sfpsMobilityStatsNURespUnknownSendCount, sfpsResolveStatsRespNaksSent=sfpsResolveStatsRespNaksSent, sfpsTableResolveTable=sfpsTableResolveTable, sfpsTableResolveAPITrgAOLoad=sfpsTableResolveAPITrgAOLoad, sfpsMobilityStatsResetCounters=sfpsMobilityStatsResetCounters, sfpsSwitchResolveTable=sfpsSwitchResolveTable, sfpsResolveStatsAcks=sfpsResolveStatsAcks, sfpsResolveStatsErrorCount=sfpsResolveStatsErrorCount, sfpsResolveStatsStaleTimeOut=sfpsResolveStatsStaleTimeOut, sfpsSubnetResolveNvramIpEntries=sfpsSubnetResolveNvramIpEntries, sfpsMobilityStatsNAReqRecCount=sfpsMobilityStatsNAReqRecCount, sfpsUnresolveTableStatsTableSize=sfpsUnresolveTableStatsTableSize, sfpsResolveStatsRequests=sfpsResolveStatsRequests, sfpsUnresolveTableBlockFlag=sfpsUnresolveTableBlockFlag, sfpsSubnetResolveStatsRequests=sfpsSubnetResolveStatsRequests, sfpsSubnetResolveStatsTableSize=sfpsSubnetResolveStatsTableSize, sfpsSwitchResolveRequestCount=sfpsSwitchResolveRequestCount, sfpsMobilityStatsGenRespRecCount=sfpsMobilityStatsGenRespRecCount, sfpsBlockResolveTableAOType=sfpsBlockResolveTableAOType, sfpsMobilityStatsMaxNewUserRetries=sfpsMobilityStatsMaxNewUserRetries, sfpsTableResolveAPIVlanAOLoad=sfpsTableResolveAPIVlanAOLoad, sfpsMobilityStatsOrigNUSendCount=sfpsMobilityStatsOrigNUSendCount, sfpsTableResolveTrgLoad=sfpsTableResolveTrgLoad, sfpsTableResolveAPIMask=sfpsTableResolveAPIMask, sfpsResolveStatsTableHigh=sfpsResolveStatsTableHigh, sfpsSubnetResolveStatsMaxTblSize=sfpsSubnetResolveStatsMaxTblSize, sfpsBlockResolveTableLastSeen=sfpsBlockResolveTableLastSeen, sfpsMobilityStatsOrigNakAliasCount=sfpsMobilityStatsOrigNakAliasCount, sfpsServiceCenterResolveEntry=sfpsServiceCenterResolveEntry, sfpsUnresolveTableHash=sfpsUnresolveTableHash, sfpsMobilityStatsAvgResponseTime=sfpsMobilityStatsAvgResponseTime, sfpsUnresolveTableAPIBlockHoldDown=sfpsUnresolveTableAPIBlockHoldDown, sfpsMobilityStatsOrigLocalMoveCount=sfpsMobilityStatsOrigLocalMoveCount, sfpsMobilityStatsOrigAckCount=sfpsMobilityStatsOrigAckCount, sfpsTableResolveAPISrcAOType=sfpsTableResolveAPISrcAOType, sfpsMobilityStatsGenSendCount=sfpsMobilityStatsGenSendCount, sfpsUnresolveTableEntry=sfpsUnresolveTableEntry, sfpsSubnetResolveAPIDefGateway=sfpsSubnetResolveAPIDefGateway, sfpsSubnetResolveAPISubnetMask=sfpsSubnetResolveAPISubnetMask, sfpsResolveStatsDupMsgCount=sfpsResolveStatsDupMsgCount, sfpsMobilityStatsNUARespRecAliasNakCount=sfpsMobilityStatsNUARespRecAliasNakCount, sfpsTableResolveSrcType=sfpsTableResolveSrcType, sfpsSwitchResolveCallTag=sfpsSwitchResolveCallTag, sfpsResolveStatsDisableLayer3=sfpsResolveStatsDisableLayer3, sfpsUnresolveTableAPIVerb=sfpsUnresolveTableAPIVerb, sfpsMobilityStatsInterRespNakNodeSendCount=sfpsMobilityStatsInterRespNakNodeSendCount, sfpsSubnetResolveStatsAcks=sfpsSubnetResolveStatsAcks, sfpsResolveStatsFloodMask=sfpsResolveStatsFloodMask, sfpsMobilityStatsNewUserStaleTimeout=sfpsMobilityStatsNewUserStaleTimeout, sfpsMobilityStatsGenReqRecCount=sfpsMobilityStatsGenReqRecCount, sfpsResolveStatsDisableProxy=sfpsResolveStatsDisableProxy, sfpsMobilityStatsGenReqForwardCount=sfpsMobilityStatsGenReqForwardCount, sfpsSubnetResolveAPINVRAMEntry=sfpsSubnetResolveAPINVRAMEntry, sfpsMobilityStatsNewUserRetryTime=sfpsMobilityStatsNewUserRetryTime, sfpsSubnetResolveTargetTag=sfpsSubnetResolveTargetTag, sfpsBlockResolveTableAOValue=sfpsBlockResolveTableAOValue, sfpsResolveStatsTableSize=sfpsResolveStatsTableSize, sfpsBlockResolveTable=sfpsBlockResolveTable, sfpsMobilityStatsOrigNUASendReqCount=sfpsMobilityStatsOrigNUASendReqCount, sfpsUnresolveTableStatsNumEntries=sfpsUnresolveTableStatsNumEntries, sfpsBlockResolveTableHashIndex=sfpsBlockResolveTableHashIndex, sfpsServiceCenterResolveResponses=sfpsServiceCenterResolveResponses, sfpsSwitchResolveSwitch=sfpsSwitchResolveSwitch, sfpsServiceCenterResolveOperStatus=sfpsServiceCenterResolveOperStatus, sfpsTableResolveHash=sfpsTableResolveHash, sfpsBlockResolveStatsTotalSent=sfpsBlockResolveStatsTotalSent, sfpsSubnetResolveAdminStatus=sfpsSubnetResolveAdminStatus, sfpsServiceCenterResolveStatusTime=sfpsServiceCenterResolveStatusTime, sfpsMobilityStatsGenRespSendCount=sfpsMobilityStatsGenRespSendCount, sfpsSubnetResolveStatsErrors=sfpsSubnetResolveStatsErrors, sfpsSubnetResolveAPISrcAOType=sfpsSubnetResolveAPISrcAOType, sfpsTableResolveAPIScopeToVlan=sfpsTableResolveAPIScopeToVlan, sfpsTableResolveAPIVerb=sfpsTableResolveAPIVerb, sfpsServiceCenterResolveHashLeaf=sfpsServiceCenterResolveHashLeaf, sfpsMobilityStatsInterNewAliasRespSendCount=sfpsMobilityStatsInterNewAliasRespSendCount, sfpsBlockResolveAPIAOType=sfpsBlockResolveAPIAOType, sfpsResolveStatsRespUnknownsSent=sfpsResolveStatsRespUnknownsSent, sfpsBlockResolveTableHash=sfpsBlockResolveTableHash, sfpsBlockResolveAPITestCount=sfpsBlockResolveAPITestCount, sfpsMobilityStatsNURespSendCount=sfpsMobilityStatsNURespSendCount, sfpsSwitchResolveEventId=sfpsSwitchResolveEventId, sfpsSubnetResolveTrgType=sfpsSubnetResolveTrgType, sfpsMobilityStatsMaxRetryReached=sfpsMobilityStatsMaxRetryReached, sfpsSubnetResolveStatsGatewayAcks=sfpsSubnetResolveStatsGatewayAcks, sfpsResolveStatsCSPDaveMalPkts=sfpsResolveStatsCSPDaveMalPkts, sfpsMobilityStatsNARespSendCount=sfpsMobilityStatsNARespSendCount, sfpsSubnetResolveNVRAMEntry=sfpsSubnetResolveNVRAMEntry, sfpsUnresolveTableSrcMAC=sfpsUnresolveTableSrcMAC, sfpsBlockResolveTableEntry=sfpsBlockResolveTableEntry, sfpsMobilityStatsAliasOnOfSwitch=sfpsMobilityStatsAliasOnOfSwitch, sfpsUnresolveTableAPIAgeOutTime=sfpsUnresolveTableAPIAgeOutTime, sfpsResolveStatsReqRcvd=sfpsResolveStatsReqRcvd, sfpsMobilityStatsNURespRecAckCount=sfpsMobilityStatsNURespRecAckCount, sfpsMobilityStatsInterNUARespRecCount=sfpsMobilityStatsInterNUARespRecCount, sfpsMobilityStatsNURespAckSendCount=sfpsMobilityStatsNURespAckSendCount, sfpsBlockResolveTableAvgPeriod=sfpsBlockResolveTableAvgPeriod, sfpsMobilityStatsGenReqRetryCount=sfpsMobilityStatsGenReqRetryCount, sfpsSubnetResolveAPIVerb=sfpsSubnetResolveAPIVerb, sfpsUnresolveTableHashIndex=sfpsUnresolveTableHashIndex, sfpsSwitchResolvePortNum=sfpsSwitchResolvePortNum, sfpsResolveStatsStaleEntryLost=sfpsResolveStatsStaleEntryLost, sfpsResolveStatsResponses=sfpsResolveStatsResponses, sfpsMobilityStatsInterNewAliasRespRecCount=sfpsMobilityStatsInterNewAliasRespRecCount, sfpsResolveStatsNaks=sfpsResolveStatsNaks, sfpsUnresolveTableLastMissTime=sfpsUnresolveTableLastMissTime, sfpsMobilityStatsOrigSendCount=sfpsMobilityStatsOrigSendCount, sfpsSubnetResolveSrcLoad=sfpsSubnetResolveSrcLoad, sfpsMobilityStatsRetryCount=sfpsMobilityStatsRetryCount, sfpsBlockResolveStatsTableSize=sfpsBlockResolveStatsTableSize, sfpsServiceCenterResolveRequests=sfpsServiceCenterResolveRequests, sfpsResolveStatsRespRecvd=sfpsResolveStatsRespRecvd, sfpsMobilityStatsMaxResponeTime=sfpsMobilityStatsMaxResponeTime, sfpsUnresolveTableStatsAvgReqTime=sfpsUnresolveTableStatsAvgReqTime, sfpsTableResolveTrgType=sfpsTableResolveTrgType, sfpsSubnetResolveHashIndex=sfpsSubnetResolveHashIndex, sfpsTableResolveAPIAdminStatus=sfpsTableResolveAPIAdminStatus, sfpsBlockResolveStatsTotalReqSeen=sfpsBlockResolveStatsTotalReqSeen, sfpsSubnetResolveRouteType=sfpsSubnetResolveRouteType, sfpsResolveStatsINBMask=sfpsResolveStatsINBMask, sfpsSubnetResolveNvramMaskEntries=sfpsSubnetResolveNvramMaskEntries, sfpsSwitchResolveResponseCount=sfpsSwitchResolveResponseCount, sfpsMobilityStatsErrorCount=sfpsMobilityStatsErrorCount, sfpsMobilityStatsInterRespAckSendCount=sfpsMobilityStatsInterRespAckSendCount, sfpsSubnetResolveStatsUnknowns=sfpsSubnetResolveStatsUnknowns, SfpsAddress=SfpsAddress, sfpsSubnetResolveAPISrcAPLoad=sfpsSubnetResolveAPISrcAPLoad, sfpsBlockResolveTableStartTime=sfpsBlockResolveTableStartTime, sfpsBlockResolveStatsNumEntries=sfpsBlockResolveStatsNumEntries, sfpsUnresolveTableLastCallProc=sfpsUnresolveTableLastCallProc, sfpsTableResolveAPITrgAOType=sfpsTableResolveAPITrgAOType, sfpsTableResolveHashIndex=sfpsTableResolveHashIndex, sfpsMobilityStatsNURespNodeNakSendCount=sfpsMobilityStatsNURespNodeNakSendCount, sfpsResolveStatsAnswerUnknown=sfpsResolveStatsAnswerUnknown, sfpsSubnetResolveRelativeCnt=sfpsSubnetResolveRelativeCnt, sfpsServiceCenterResolveTable=sfpsServiceCenterResolveTable, sfpsSubnetResolveAPIRouteType=sfpsSubnetResolveAPIRouteType, sfpsBlockResolveStatsTotalBlocked=sfpsBlockResolveStatsTotalBlocked, sfpsSwitchResolveMobilityRetry=sfpsSwitchResolveMobilityRetry, sfpsTableResolveAPIResolveOption=sfpsTableResolveAPIResolveOption, sfpsRelayAgentResolveVlanName=sfpsRelayAgentResolveVlanName, sfpsMobilityStatsOrigUnknownCount=sfpsMobilityStatsOrigUnknownCount, sfpsResolveStatsStaleCount=sfpsResolveStatsStaleCount, sfpsMobilityStatsInterNewUserRespRecCount=sfpsMobilityStatsInterNewUserRespRecCount, sfpsResolveStatsChangeCount=sfpsResolveStatsChangeCount, sfpsMobilityStatsGenRecCount=sfpsMobilityStatsGenRecCount, sfpsSubnetResolveEntry=sfpsSubnetResolveEntry, sfpsResolveStatsAvgResponseTime=sfpsResolveStatsAvgResponseTime, sfpsMobilityStatsInterRespNakAliasSendCount=sfpsMobilityStatsInterRespNakAliasSendCount, sfpsMobilityStatsRetryDrops=sfpsMobilityStatsRetryDrops, sfpsTableResolveSrcLoad=sfpsTableResolveSrcLoad, sfpsSubnetResolveAbsoluteCnt=sfpsSubnetResolveAbsoluteCnt, sfpsBlockResolveAPIThreshold=sfpsBlockResolveAPIThreshold, sfpsBlockResolveAPISendPeriod=sfpsBlockResolveAPISendPeriod, sfpsTableResolveTableEntry=sfpsTableResolveTableEntry, sfpsSubnetResolveAPITrgAOType=sfpsSubnetResolveAPITrgAOType, sfpsSubnetResolveSourceHash=sfpsSubnetResolveSourceHash, sfpsMobilityStatsOrigNASendCount=sfpsMobilityStatsOrigNASendCount, sfpsMobilityStatsNUReqRecCount=sfpsMobilityStatsNUReqRecCount, sfpsBlockResolveAPIVerb=sfpsBlockResolveAPIVerb, sfpsUnresolveTableNumMisses=sfpsUnresolveTableNumMisses, sfpsResolveStatsNoAnswer=sfpsResolveStatsNoAnswer, sfpsSwitchResolveNeighborSw=sfpsSwitchResolveNeighborSw, sfpsBlockResolveTableNumBlocked=sfpsBlockResolveTableNumBlocked, sfpsSubnetResolveAPIAdminStatus=sfpsSubnetResolveAPIAdminStatus, sfpsMobilityStatsNURespAliasNakSendCount=sfpsMobilityStatsNURespAliasNakSendCount, sfpsBlockResolveAPIAOValue=sfpsBlockResolveAPIAOValue, sfpsSubnetResolveTrgLoad=sfpsSubnetResolveTrgLoad, sfpsServiceCenterResolveAdminStatus=sfpsServiceCenterResolveAdminStatus, sfpsUnresolveTable=sfpsUnresolveTable, sfpsMobilityStatsInterRespUnknownSendCount=sfpsMobilityStatsInterRespUnknownSendCount, sfpsResolveStatsChangeTime=sfpsResolveStatsChangeTime, sfpsRelayAgentResolveStatsTableSize=sfpsRelayAgentResolveStatsTableSize, sfpsMobilityStatsOrigReceiveCount=sfpsMobilityStatsOrigReceiveCount, sfpsMobilityStatsInterNewUserRespSendCount=sfpsMobilityStatsInterNewUserRespSendCount, sfpsUnresolveTableAvgPeriod=sfpsUnresolveTableAvgPeriod, sfpsUnresolveTableAOType=sfpsUnresolveTableAOType, sfpsBlockResolveStatsAvgReqTime=sfpsBlockResolveStatsAvgReqTime, sfpsTableResolveAPINVRAMEntry=sfpsTableResolveAPINVRAMEntry, sfpsSwitchResolveEntry=sfpsSwitchResolveEntry, sfpsTableResolveTag=sfpsTableResolveTag, sfpsSubnetResolveOperStatus=sfpsSubnetResolveOperStatus, sfpsUnresolveTableStatsTableFullCount=sfpsUnresolveTableStatsTableFullCount, sfpsUnresolveTableStatsTotalReqSeen=sfpsUnresolveTableStatsTotalReqSeen, sfpsServiceCenterResolveMetric=sfpsServiceCenterResolveMetric, sfpsBlockResolveTableNumSent=sfpsBlockResolveTableNumSent, sfpsResolveStatsRespAcksSent=sfpsResolveStatsRespAcksSent, sfpsResolveStatsMaxResponseTime=sfpsResolveStatsMaxResponseTime, sfpsResolveStatsUnknowns=sfpsResolveStatsUnknowns, sfpsTableResolveAPIDestSwMac=sfpsTableResolveAPIDestSwMac, sfpsSubnetResolveSrcType=sfpsSubnetResolveSrcType, sfpsResolveStatsTimeout=sfpsResolveStatsTimeout, sfpsMobilityStatsOrigRetrySendCount=sfpsMobilityStatsOrigRetrySendCount, sfpsMobilityStatsNUARespRecNodeNakCount=sfpsMobilityStatsNUARespRecNodeNakCount, sfpsRelayAgentResolveStatsHighWater=sfpsRelayAgentResolveStatsHighWater)
