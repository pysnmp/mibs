#
# PySNMP MIB module HMRINGARC-MGMT-SNMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/hirschmann/hmARC
# Produced by pysmi-1.1.12 at Tue Sep 17 13:32:16 2024
# On host fv-az975-559 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hmRingRedundancy, = mibBuilder.importSymbols("HMRING-MGMT-SNMP-MIB", "hmRingRedundancy")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity, MibIdentifier, Gauge32, Counter32, Unsigned32, Bits, Integer32, iso, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "Gauge32", "Counter32", "Unsigned32", "Bits", "Integer32", "iso", "NotificationType", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hmARC = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 14, 5, 7))
hmARC.setRevisions(('2010-09-01 12:00',))
if mibBuilder.loadTexts: hmARC.setLastUpdated('201009011200Z')
if mibBuilder.loadTexts: hmARC.setOrganization('Hirschmann Automation and Control GmbH')
hmArcManagerConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 1))
hmArcManagerStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 2))
hmArcClientConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 3))
hmArcClientStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 4))
hmArcManagerAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmArcManagerAdminStatus.setStatus('current')
hmArcManagerRedProtocol = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("mrp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmArcManagerRedProtocol.setStatus('current')
hmArcManagerPrimGroupID = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmArcManagerPrimGroupID.setStatus('current')
hmArcManagerPrimIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmArcManagerPrimIfIndex.setStatus('current')
hmArcManagerRedGroupID = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmArcManagerRedGroupID.setStatus('current')
hmArcManagerRedIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmArcManagerRedIfIndex.setStatus('current')
hmArcManagerVlanID = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmArcManagerVlanID.setStatus('current')
hmArcManagerAction = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("checkTopology", 2), ("configureRing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmArcManagerAction.setStatus('current')
hmArcManagerActionResult = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noAction", 1), ("pending", 2), ("closedRing", 3), ("configuredRing", 4), ("openRing", 5), ("invalidTopology", 6), ("configFailed", 7), ("configSuccessful", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmArcManagerActionResult.setStatus('current')
hmArcCheckResultTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 2, 1), )
if mibBuilder.loadTexts: hmArcCheckResultTable.setStatus('current')
hmArcCheckResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 2, 1, 1), ).setIndexNames((0, "HMRINGARC-MGMT-SNMP-MIB", "hmArcCheckStatusIndex"), (0, "HMRINGARC-MGMT-SNMP-MIB", "hmArcCheckStatusDeviceMac"))
if mibBuilder.loadTexts: hmArcCheckResultEntry.setStatus('current')
hmArcCheckStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmArcCheckStatusIndex.setStatus('current')
hmArcCheckStatusDeviceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmArcCheckStatusDeviceMac.setStatus('current')
hmArcCheckStatusDeviceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmArcCheckStatusDeviceIp.setStatus('current')
hmArcCheckStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("otherRm", 1), ("loop", 2), ("alreadyConfigured", 3), ("unsupportedOption", 4), ("openRing", 5), ("configFailed", 6), ("duplexMode", 7), ("noArcDevices", 8), ("portState", 9), ("info", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmArcCheckStatusType.setStatus('current')
hmArcCheckStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmArcCheckStatusInfo.setStatus('current')
hmArcCheckStatusClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("error", 1), ("warning", 2), ("ok", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmArcCheckStatusClassification.setStatus('current')
hmArcClientAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("checkOnly", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmArcClientAdminStatus.setStatus('current')
hmArcClientManagerDeviceMac = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmArcClientManagerDeviceMac.setStatus('current')
hmArcClientManagerDeviceIp = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 4, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmArcClientManagerDeviceIp.setStatus('current')
hmArcClientPrimGroupID = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmArcClientPrimGroupID.setStatus('current')
hmArcClientPrimIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmArcClientPrimIfIndex.setStatus('current')
hmArcClientRedGroupID = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmArcClientRedGroupID.setStatus('current')
hmArcClientRedIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 5, 7, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmArcClientRedIfIndex.setStatus('current')
mibBuilder.exportSymbols("HMRINGARC-MGMT-SNMP-MIB", hmArcClientAdminStatus=hmArcClientAdminStatus, hmARC=hmARC, hmArcManagerPrimIfIndex=hmArcManagerPrimIfIndex, hmArcCheckStatusClassification=hmArcCheckStatusClassification, hmArcManagerAdminStatus=hmArcManagerAdminStatus, hmArcManagerVlanID=hmArcManagerVlanID, hmArcClientRedIfIndex=hmArcClientRedIfIndex, hmArcManagerRedProtocol=hmArcManagerRedProtocol, hmArcManagerPrimGroupID=hmArcManagerPrimGroupID, hmArcCheckStatusIndex=hmArcCheckStatusIndex, hmArcCheckStatusDeviceMac=hmArcCheckStatusDeviceMac, hmArcClientManagerDeviceIp=hmArcClientManagerDeviceIp, hmArcCheckStatusDeviceIp=hmArcCheckStatusDeviceIp, hmArcClientPrimGroupID=hmArcClientPrimGroupID, hmArcManagerStatus=hmArcManagerStatus, hmArcManagerRedGroupID=hmArcManagerRedGroupID, PYSNMP_MODULE_ID=hmARC, hmArcCheckResultTable=hmArcCheckResultTable, hmArcManagerAction=hmArcManagerAction, hmArcCheckResultEntry=hmArcCheckResultEntry, hmArcClientStatus=hmArcClientStatus, hmArcCheckStatusType=hmArcCheckStatusType, hmArcManagerRedIfIndex=hmArcManagerRedIfIndex, hmArcClientManagerDeviceMac=hmArcClientManagerDeviceMac, hmArcManagerActionResult=hmArcManagerActionResult, hmArcClientConfig=hmArcClientConfig, hmArcClientPrimIfIndex=hmArcClientPrimIfIndex, hmArcCheckStatusInfo=hmArcCheckStatusInfo, hmArcManagerConfig=hmArcManagerConfig, hmArcClientRedGroupID=hmArcClientRedGroupID)
