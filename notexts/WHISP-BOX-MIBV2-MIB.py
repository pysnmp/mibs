#
# PySNMP MIB module WHISP-BOX-MIBV2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/cambium/WHISP-BOX-MIBV2-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 11:55:38 2024
# On host fv-az1385-213 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, ObjectIdentity, TimeTicks, Bits, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, iso, Gauge32, Counter64, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "TimeTicks", "Bits", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "iso", "Gauge32", "Counter64", "Counter32", "IpAddress")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
whispBox, whispModules = mibBuilder.importSymbols("WHISP-GLOBAL-REG-MIB", "whispBox", "whispModules")
WhispMACAddress, EventString, WhispLUID = mibBuilder.importSymbols("WHISP-TCV2-MIB", "WhispMACAddress", "EventString", "WhispLUID")
whispBoxLevelMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 161, 19, 1, 1, 8))
if mibBuilder.loadTexts: whispBoxLevelMibModule.setLastUpdated('200304150000Z')
if mibBuilder.loadTexts: whispBoxLevelMibModule.setOrganization('Cambium Networks')
whispBoxStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1))
whispBoxConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2))
whispBoxControls = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3))
whispBoxEventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 5))
whispBoxConf = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6))
whispBoxGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1))
whispBoxBridgeVar = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 7))
whispBoxCPVar = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9))
whispBoxEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 12))
whispBoxDHCPClientEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 12, 1))
whispBoxPoEEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 12, 2))
whispBoxRadioAlarmEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 12, 3))
whispBoxDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13))
whispBoxSNMPv3 = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14))
whispBoxLink = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18))
whispBoxLinkTestConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1))
whispBoxLinkTestResult = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2))
whispBoxLinkTestMVCResult = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 5))
whispUserAuthSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 19))
whispBoxRFPhysical = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15))
whispBoxRFConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 16))
whispBoxSoftwareVer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxSoftwareVer.setStatus('current')
whispBoxFPGAVer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxFPGAVer.setStatus('current')
whispBoxEsn = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxEsn.setStatus('current')
whispBoxBoot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxBoot.setStatus('current')
boxTemperature = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxTemperature.setStatus('obsolete')
boxDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxDeviceType.setStatus('current')
boxDeviceTypeID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxDeviceTypeID.setStatus('current')
boxEncryption = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxEncryption.setStatus('current')
etherLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherLinkStatus.setStatus('current')
boxFrequency = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxFrequency.setStatus('current')
platformVer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformVer.setStatus('current')
platformType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformType.setStatus('current')
dhcpLanIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLanIp.setStatus('current')
dhcpLanSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLanSubnetMask.setStatus('current')
dhcpLanGateway = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLanGateway.setStatus('current')
dhcpRfPublicIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRfPublicIp.setStatus('current')
dhcpRfPublicSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRfPublicSubnetMask.setStatus('current')
dhcpRfPublicGateway = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRfPublicGateway.setStatus('current')
lanDhcpStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDhcpStatus.setStatus('current')
rfPublicDhcpStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfPublicDhcpStatus.setStatus('current')
inSyncCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inSyncCount.setStatus('current')
outSyncCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outSyncCount.setStatus('current')
pllOutLockCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pllOutLockCount.setStatus('current')
txCalFailure = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txCalFailure.setStatus('current')
swVersion = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVersion.setStatus('current')
pldVersion = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pldVersion.setStatus('current')
platformInfo = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformInfo.setStatus('current')
antPolarization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antPolarization.setStatus('current')
packetOverloadCounter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: packetOverloadCounter.setStatus('current')
whispBoxP11Personality = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxP11Personality.setStatus('current')
whispBoxP11FPGAType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxP11FPGAType.setStatus('current')
whispBoxP11BstrapFPGAVer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxP11BstrapFPGAVer.setStatus('current')
numDFSDetections = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numDFSDetections.setStatus('current')
rxOverrunPkts = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxOverrunPkts.setStatus('current')
boxTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxTemperatureC.setStatus('current')
boxTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxTemperatureF.setStatus('current')
bridgeCbFecStatbin = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatbin.setStatus('current')
bridgeCbFecStatbout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatbout.setStatus('current')
bridgeCbFecStatbtoss = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatbtoss.setStatus('current')
bridgeCbFecStatbtosscap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatbtosscap.setStatus('current')
bridgeCbFecStatuin = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatuin.setStatus('current')
bridgeCbFecStatuout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatuout.setStatus('current')
bridgeCbFecStatutoss = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatutoss.setStatus('current')
bridgeCbFecStatutosscap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatutosscap.setStatus('current')
bridgeCbRFStatbin = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatbin.setStatus('current')
bridgeCbRFStatbout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatbout.setStatus('current')
bridgeCbRFStatbtoss = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatbtoss.setStatus('current')
bridgeCbRFStatbtosscap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatbtosscap.setStatus('current')
bridgeCbRFStatuin = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatuin.setStatus('current')
bridgeCbRFStatuout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatuout.setStatus('current')
bridgeCbRFStatutoss = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatutoss.setStatus('current')
bridgeCbRFStatutosscap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatutosscap.setStatus('current')
bridgeCbErrStatNI1QSend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbErrStatNI1QSend.setStatus('current')
bridgeCbErrStatNI2QSend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbErrStatNI2QSend.setStatus('current')
bridgeCbErrStatBridgeFull = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbErrStatBridgeFull.setStatus('current')
bridgeCbErrStatSendMsg = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbErrStatSendMsg.setStatus('current')
bridgeCbErrStatAPFecQSend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbErrStatAPFecQSend.setStatus('current')
bridgeCbErrStatApRfQSend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbErrStatApRfQSend.setStatus('current')
rfStatXmtUDataCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatXmtUDataCnt.setStatus('current')
rfStatXmtBDataCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatXmtBDataCnt.setStatus('current')
rfStatRcvUDataCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvUDataCnt.setStatus('current')
rfStatRcvBDataCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvBDataCnt.setStatus('current')
rfStatXmtCntlCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatXmtCntlCnt.setStatus('current')
rfStatRcvCntlCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvCntlCnt.setStatus('current')
rfStatInSyncCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatInSyncCount.setStatus('current')
rfStatOutSyncCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatOutSyncCount.setStatus('current')
rfStatOverrunCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatOverrunCount.setStatus('current')
rfStatUnderrunCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatUnderrunCount.setStatus('current')
rfStatRcvCorruptDataCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvCorruptDataCount.setStatus('current')
rfStatBadBcastCtlCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatBadBcastCtlCnt.setStatus('current')
rfStatPLLOutOfLockCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatPLLOutOfLockCnt.setStatus('current')
rfStatBeaconVerMismatchCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatBeaconVerMismatchCnt.setStatus('current')
rfStatBadFreqBcnRcvCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatBadFreqBcnRcvCnt.setStatus('current')
rfStatnonLiteBcnRcvCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatnonLiteBcnRcvCnt.setStatus('current')
rfStatUnsupFeatBcnRcvCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatUnsupFeatBcnRcvCnt.setStatus('current')
rfStatUnkwnFeatBcnRcvCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatUnkwnFeatBcnRcvCnt.setStatus('current')
rfStatTxCalFailCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatTxCalFailCnt.setStatus('current')
rfStatBadInSyncIDRcv = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatBadInSyncIDRcv.setStatus('current')
rfStatTempOutOfRange = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatTempOutOfRange.setStatus('current')
rfStatRSSIOutOfRange = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRSSIOutOfRange.setStatus('current')
rfStatRangeCapEnf = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRangeCapEnf.setStatus('current')
rfStatRcvLTStart = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvLTStart.setStatus('current')
rfStatRcvLTStartHS = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvLTStartHS.setStatus('current')
rfStatRcvLTResult = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvLTResult.setStatus('current')
rfStatXmtLTResult = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatXmtLTResult.setStatus('current')
whispFeatureKeyOrigin = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 86), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispFeatureKeyOrigin.setStatus('current')
radioMSN = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 87), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioMSN.setStatus('current')
updateStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: updateStatus.setStatus('current')
syslogStatTxSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogStatTxSuccesses.setStatus('current')
syslogStatDropped = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogStatDropped.setStatus('current')
fecStatLinkLost = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecStatLinkLost.setStatus('current')
fecStatLinkDetected = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecStatLinkDetected.setStatus('current')
natDhcpStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 93), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natDhcpStatus.setStatus('current')
fecInDiscardsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 94), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecInDiscardsCount.setStatus('current')
fecInErrorsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 95), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecInErrorsCount.setStatus('current')
fecOutDiscardsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 96), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecOutDiscardsCount.setStatus('current')
fecOutErrorsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 97), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecOutErrorsCount.setStatus('current')
rfInDiscardsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 98), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInDiscardsCount.setStatus('deprecated')
rfInErrorsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 99), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInErrorsCount.setStatus('deprecated')
rfOutDiscardsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 100), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOutDiscardsCount.setStatus('deprecated')
rfOutErrorsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 101), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOutErrorsCount.setStatus('deprecated')
fecInDiscardsOverloadCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecInDiscardsOverloadCount.setStatus('current')
fecOutDiscardsOverloadCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecOutDiscardsOverloadCount.setStatus('current')
rfInDiscardsOverloadCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInDiscardsOverloadCount.setStatus('current')
rfOutDiscardsOverloadCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOutDiscardsOverloadCount.setStatus('current')
fpgaCompileInfo = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 106), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaCompileInfo.setStatus('current')
fpgaBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 107), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaBuildDate.setStatus('current')
aggregateBandwidthCap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 108), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregateBandwidthCap.setStatus('current')
calibrationStatusBool = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 109), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notCalibrated", 0), ("calibrated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: calibrationStatusBool.setStatus('current')
calibrationStatusBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 110), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calibrationStatusBox.setStatus('current')
radioEngKeyed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 111), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEngKeyed.setStatus('current')
bridgeCbFecStatfloods = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatfloods.setStatus('current')
bridgeCbRFStatfloods = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 113), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatfloods.setStatus('current')
catalinaGainRxCH1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 114), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaGainRxCH1.setStatus('current')
catalinaGainRxCH2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 115), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaGainRxCH2.setStatus('current')
antType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("integrated", 0), ("external", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: antType.setStatus('current')
rfStatRcvCorruptControlCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 117), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvCorruptControlCount.setStatus('current')
numLBTDetections = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 118), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numLBTDetections.setStatus('current')
bridgeCbEthAuxStatbin = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 119), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbEthAuxStatbin.setStatus('current')
bridgeCbEthAuxStatbout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 120), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbEthAuxStatbout.setStatus('current')
catalinaAttenTxCH1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 121), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaAttenTxCH1.setStatus('current')
catalinaAttenTxCH2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 122), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaAttenTxCH2.setStatus('current')
catalinaCurrDetSetpointTxCH1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 123), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaCurrDetSetpointTxCH1.setStatus('current')
catalinaCurrDetSetpointTxCH2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 124), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaCurrDetSetpointTxCH2.setStatus('current')
catalinaCurrDetReadRefTxCH1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 125), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaCurrDetReadRefTxCH1.setStatus('current')
catalinaCurrDetReadRefTxCH2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 126), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaCurrDetReadRefTxCH2.setStatus('current')
catalinaCurrDetReadPowerOnTxCH1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 127), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaCurrDetReadPowerOnTxCH1.setStatus('current')
catalinaCurrDetReadPowerOnTxCH2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 128), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaCurrDetReadPowerOnTxCH2.setStatus('current')
catalinaOpenLoopAttenTxCH1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 129), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaOpenLoopAttenTxCH1.setStatus('current')
catalinaOpenLoopAttenTxCH2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 130), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaOpenLoopAttenTxCH2.setStatus('current')
catalinaTargetDetSetpointTxCH1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 131), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaTargetDetSetpointTxCH1.setStatus('current')
catalinaTargetDetSetpointTxCH2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 132), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaTargetDetSetpointTxCH2.setStatus('current')
catalinaGainReductionRxCH1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 133), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaGainReductionRxCH1.setStatus('current')
catalinaGainReductionRxCH2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 134), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaGainReductionRxCH2.setStatus('current')
catalinaLoAttenRxCH1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 135), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaLoAttenRxCH1.setStatus('current')
catalinaLoAttenRxCH2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 136), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaLoAttenRxCH2.setStatus('current')
catalinaTargetGainRxCH1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 137), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaTargetGainRxCH1.setStatus('current')
catalinaTargetGainRxCH2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 138), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaTargetGainRxCH2.setStatus('current')
bridgeCbEthAuxStatfloods = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 139), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbEthAuxStatfloods.setStatus('current')
bridgeCbEthAuxStatbtoss = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 141), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbEthAuxStatbtoss.setStatus('current')
bridgeCbEthAuxStatbtosscap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 142), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbEthAuxStatbtosscap.setStatus('current')
bridgeCbEthAuxStatuin = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 143), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbEthAuxStatuin.setStatus('current')
bridgeCbEthAuxStatuout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 144), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbEthAuxStatuout.setStatus('current')
bridgeCbEthAuxStatutoss = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 145), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbEthAuxStatutoss.setStatus('current')
bridgeCbEthAuxStatutosscap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 146), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbEthAuxStatutosscap.setStatus('current')
radioWatchDogLogged = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 147), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioWatchDogLogged.setStatus('current')
radioFatalErrorLogged = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 148), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioFatalErrorLogged.setStatus('current')
fecStatLinkUptime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 149), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecStatLinkUptime.setStatus('current')
fecAuxStatLinkUptime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 150), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxStatLinkUptime.setStatus('current')
rfStatXmtMDataCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 217), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatXmtMDataCnt.setStatus('current')
rfStatRcvMDataCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 218), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvMDataCnt.setStatus('current')
fecStatUnderSizedToss = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 219), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecStatUnderSizedToss.setStatus('current')
fecRxBabErr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 220), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecRxBabErr.setStatus('current')
fecTxHbErr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 221), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecTxHbErr.setStatus('current')
fecEthBusErr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 222), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecEthBusErr.setStatus('current')
fecCRCError = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 223), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecCRCError.setStatus('current')
fecRxFifoNoBuf = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 224), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecRxFifoNoBuf.setStatus('current')
fecRxOverrun = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 225), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecRxOverrun.setStatus('current')
fecLateCollision = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 226), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecLateCollision.setStatus('current')
fecRetransLimitExp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 227), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecRetransLimitExp.setStatus('current')
fecTxUnderrun = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 228), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecTxUnderrun.setStatus('current')
fecCarSenseLost = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 229), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecCarSenseLost.setStatus('current')
fecNoCarrier = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 230), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecNoCarrier.setStatus('current')
framePeriodCurrent = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 231), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("twoPointFiveMs", 0), ("fiveMs", 1), ("scanning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: framePeriodCurrent.setStatus('current')
activeTxPowerStr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 232), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeTxPowerStr.setStatus('current')
activeTxPowerHdths = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 233), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeTxPowerHdths.setStatus('current')
poeT2Status = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 234), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("error", 0), ("notPresent", 1), ("notPresentAndIgnored", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeT2Status.setStatus('current')
fecAuxStatLinkDetected = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 235), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxStatLinkDetected.setStatus('current')
fecAuxStatLinkLost = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 236), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxStatLinkLost.setStatus('current')
fecAuxInDiscardsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 237), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxInDiscardsCount.setStatus('current')
fecAuxInErrorsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 238), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxInErrorsCount.setStatus('current')
fecAuxOutDiscardsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 239), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxOutDiscardsCount.setStatus('current')
fecAuxOutErrorsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 240), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxOutErrorsCount.setStatus('current')
fecAuxCRCError = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 241), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxCRCError.setStatus('current')
fecAuxRxOverrun = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 242), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxRxOverrun.setStatus('current')
fecAuxLateCollision = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 243), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxLateCollision.setStatus('current')
fecAuxRetransLimitExp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 244), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxRetransLimitExp.setStatus('current')
fecAuxTxUnderrun = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 245), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxTxUnderrun.setStatus('current')
fecAuxCarSenseLost = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 246), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxCarSenseLost.setStatus('current')
fecAuxNoCarrier = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 247), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxNoCarrier.setStatus('current')
fecAuxLargeFrame = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 248), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxLargeFrame.setStatus('current')
fecAuxRuntFrame = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 249), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxRuntFrame.setStatus('current')
fecLargeFrame = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 250), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecLargeFrame.setStatus('current')
fecRuntFrame = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 251), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecRuntFrame.setStatus('current')
soundingStatClear = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 252), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: soundingStatClear.setStatus('current')
soundingStatRequestCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 253), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: soundingStatRequestCount.setStatus('current')
soundingStatResponseCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 254), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: soundingStatResponseCount.setStatus('current')
soundingStatRequestsIgnored = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 255), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: soundingStatRequestsIgnored.setStatus('current')
soundingStatAvgRequestInterval = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 256), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: soundingStatAvgRequestInterval.setStatus('current')
soundingStatMaxRequestInterval = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 257), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: soundingStatMaxRequestInterval.setStatus('current')
soundingStatErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 258), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: soundingStatErrorCount.setStatus('current')
camAccID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 259), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: camAccID.setStatus('current')
cnMaestroStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 260), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnMaestroStatus.setStatus('current')
daVersion = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 261), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daVersion.setStatus('current')
soundingStatRequestsDropped = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 262), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: soundingStatRequestsDropped.setStatus('current')
soundingStatResponsesSuppressed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 263), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: soundingStatResponsesSuppressed.setStatus('current')
soundingStatVersionMismatch = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 264), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: soundingStatVersionMismatch.setStatus('current')
hardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 265), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareVersion.setStatus('current')
productTypeName = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 266), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productTypeName.setStatus('current')
radioStatusTransmitControlOverridden = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 267), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioStatusTransmitControlOverridden.setStatus('current')
radioStatusTrackingFailure = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 268), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioStatusTrackingFailure.setStatus('current')
radioStatusSectorWeightsOff = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 269), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioStatusSectorWeightsOff.setStatus('current')
radioStatusRxBeamFormingOff = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 270), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioStatusRxBeamFormingOff.setStatus('current')
radioStatusPowerDetectorInactive = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 271), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioStatusPowerDetectorInactive.setStatus('current')
radioStatusCatQuadCalFail = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 272), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioStatusCatQuadCalFail.setStatus('current')
nearFieldOperationActive = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 273), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nearFieldOperationActive.setStatus('current')
radioStatusAlarmReason = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 274), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioStatusAlarmReason.setStatus('current')
radioStatusAlarm = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 275), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioStatusAlarm.setStatus('current')
forceReassessmentActive = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 276), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceReassessmentActive.setStatus('current')
fecExcessiveDeferrals = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 277), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecExcessiveDeferrals.setStatus('current')
rfInDiscardsCountExt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 278), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInDiscardsCountExt.setStatus('current')
rfInErrorsCountExt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 279), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInErrorsCountExt.setStatus('current')
rfOutDiscardsCountExt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 280), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOutDiscardsCountExt.setStatus('current')
rfOutErrorsCountExt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 281), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOutErrorsCountExt.setStatus('current')
boardModel = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 284), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardModel.setStatus('current')
linkNegoSpeed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkNegoSpeed.setStatus('obsolete')
colorCode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCode.setStatus('current')
displayOnlyAccess = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: displayOnlyAccess.setStatus('obsolete')
fullAccess = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fullAccess.setStatus('current')
webAutoUpdate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 5), Integer32()).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: webAutoUpdate.setStatus('current')
pass1Status = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pass1Status.setStatus('current')
pass2Status = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pass2Status.setStatus('current')
bridgeEntryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 1440))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeEntryTimeout.setStatus('current')
snmpMibPerm = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("readWrite", 0), ("readOnly", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpMibPerm.setStatus('current')
bhTimingMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("timingMaster", 1), ("timeingSlave", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bhTimingMode.setStatus('current')
bhModulation = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tenMbitsPerSecond", 0), ("twentyMbitsPerSecond", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bhModulation.setStatus('obsolete')
powerControl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("normal", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerControl.setStatus('current')
extFilterDelay = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 13), Integer32()).setUnits('nanoseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: extFilterDelay.setStatus('obsolete')
antennaGain = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 14), Integer32()).setUnits('dBi').setMaxAccess("readwrite")
if mibBuilder.loadTexts: antennaGain.setStatus('current')
eirp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 15), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eirp.setStatus('current')
dynamicLearning = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicLearning.setStatus('current')
managementVID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementVID.setStatus('current')
agingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agingTimeout.setStatus('current')
frameType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("allframes", 0), ("taggedonly", 1), ("untaggedonly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frameType.setStatus('current')
addVlanMember = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addVlanMember.setStatus('current')
removeVlanMember = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: removeVlanMember.setStatus('current')
scheduling = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("hardware", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduling.setStatus('current')
transmitterOP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 23), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: transmitterOP.setStatus('current')
bridgeEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeEnable.setStatus('current')
fecEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fecEnable.setStatus('current')
trapIP1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP1.setStatus('obsolete')
trapIP2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP2.setStatus('obsolete')
trapIP3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP3.setStatus('obsolete')
trapIP4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP4.setStatus('obsolete')
trapIP5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 30), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP5.setStatus('obsolete')
trapIP6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 31), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP6.setStatus('obsolete')
trapIP7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 32), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP7.setStatus('obsolete')
trapIP8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 33), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP8.setStatus('obsolete')
trapIP9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 34), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP9.setStatus('obsolete')
trapIP10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 35), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP10.setStatus('obsolete')
commStringRWrite = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 36), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commStringRWrite.setStatus('current')
subnetMask = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask.setStatus('current')
mngtIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 38), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP.setStatus('current')
allowVIDAccess = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowVIDAccess.setStatus('current')
setDefaultPlug = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDefaultPlug.setStatus('current')
hwsCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwsCompatibility.setStatus('obsolete')
gpsInput = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("generateSyncSignal", 0), ("syncToReceivedSignalTimingPort", 1), ("syncToReceivedSignalPowerPort", 2), ("syncToiGPS", 3), ("autoSync", 4), ("autoSyncFreeRun", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gpsInput.setStatus('current')
ism = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ism.setStatus('current')
hiPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hiPriority.setStatus('obsolete')
userName = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 45), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName.setStatus('current')
userPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPassword.setStatus('current')
userAccessLevel = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAccessLevel.setStatus('current')
deleteUser = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deleteUser.setStatus('current')
twoXRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: twoXRate.setStatus('obsolete')
lanDhcpState = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanDhcpState.setStatus('current')
sessionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionTimeout.setStatus('current')
vlanMemberSource = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("configured", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberSource.setStatus('current')
addCustomFreqList = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addCustomFreqList.setStatus('current')
removeCustomFreqList = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 54), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: removeCustomFreqList.setStatus('current')
allowColocation = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowColocation.setStatus('obsolete')
changeUsrPwd = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 56), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeUsrPwd.setStatus('current')
mngtIP2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 57), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP2.setStatus('current')
subnetMask2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask2.setStatus('current')
mngtIP3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 59), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP3.setStatus('current')
subnetMask3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask3.setStatus('current')
mngtIP4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 61), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP4.setStatus('current')
subnetMask4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask4.setStatus('current')
mngtIP5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 63), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP5.setStatus('current')
subnetMask5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 64), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask5.setStatus('current')
mngtIP6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 65), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP6.setStatus('current')
subnetMask6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 66), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask6.setStatus('current')
mngtIP7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 67), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP7.setStatus('current')
subnetMask7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 68), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask7.setStatus('current')
mngtIP8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 69), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP8.setStatus('current')
subnetMask8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 70), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask8.setStatus('current')
mngtIP9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 71), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP9.setStatus('current')
subnetMask9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 72), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask9.setStatus('current')
mngtIP10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 73), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP10.setStatus('current')
subnetMask10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 74), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask10.setStatus('current')
bhvlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bhvlanEnable.setStatus('current')
lldpBroadcastEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpBroadcastEnable.setStatus('current')
regionCode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 6, 5, 3, 8, 10, 11, 7, 9, 2, 1, 4))).clone(namedValues=NamedValues(("none", 0), ("australia", 6), ("brazil", 5), ("canada", 3), ("india", 8), ("indonesia", 10), ("ireland", 11), ("russia", 7), ("spain", 9), ("us", 2), ("other", 1), ("europe", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionCode.setStatus('deprecated')
russiaRegion = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("category1", 1), ("category2", 2), ("category3", 3), ("category4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: russiaRegion.setStatus('deprecated')
commStringROnly = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 79), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commStringROnly.setStatus('current')
ethernetLinkSpeed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 3, 5, 7, 12, 13, 15, 63))).clone(namedValues=NamedValues(("forced10H", 1), ("forced10F", 2), ("forced100H", 4), ("forced100F", 8), ("auto10F-10H", 3), ("auto100H-10H", 5), ("auto100H-10F-10H", 7), ("auto100F-100H", 12), ("auto100F-100H-10H", 13), ("auto100F-100H-10F-10H", 15), ("auto1000F-100F-100H-10F-10H", 63)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetLinkSpeed.setStatus('current')
cyclicPrefix = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("one-quarter", 0), ("one-eighth", 1), ("one-sixteenth", 2), ("one-quarter-one-eighth", 3), ("one-quarter-one-sixteenth", 4), ("one-eighth-one-sixteenth", 5), ("one-quarter-one-eighth-one-sixteenth", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cyclicPrefix.setStatus('current')
numberCustomFreq = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberCustomFreq.setStatus('current')
channelBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 83), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelBandwidth.setStatus('current')
setDefaults = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noChangeOrUndoFactoryDefaults", 0), ("setToFactoryDefaults", 1), ("factoryDefaultsSet-AwaitingReboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDefaults.setStatus('current')
radioRateAdapt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 1, 5, 2, 3, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("onex", 0), ("onexmimo", 4), ("onextwox", 1), ("onextwoxmimo", 5), ("onextwoxthreex", 2), ("onextwoxthreexfourx", 3), ("onextwoxfourx", 7), ("onextwoxfourxsixx", 8), ("onextwoxfourxsixxeightx", 9), ("onextwoxmimoa", 10), ("onextwoxthreexmimoa", 11), ("onextwoxthreexfourxmimoa", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioRateAdapt.setStatus('current')
siteInfoViewable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteInfoViewable.setStatus('current')
largeVCQ = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: largeVCQ.setStatus('current')
latitude = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 88), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latitude.setStatus('current')
longitude = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 89), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: longitude.setStatus('current')
height = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: height.setStatus('current')
bandwidth = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("bandwidth5mhz", 1), ("bandwidth7mhz", 2), ("bandwidth10mhz", 3), ("bandwidth15mhz", 4), ("bandwidth20mhz", 5), ("bandwidth30mhz", 6), ("bandwidth40mhz", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidth.setStatus('current')
dataScramblingMethod = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("legacyDataScrambling", 0), ("r10DataScrambling", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataScramblingMethod.setStatus('obsolete')
portVID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 93), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVID.setStatus('current')
radioRateAdaptUL = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 1, 5, 2, 3, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("onex", 0), ("onexmimo", 4), ("onextwox", 1), ("onextwoxmimo", 5), ("onextwoxthreex", 2), ("onextwoxthreexfourx", 3), ("onextwoxfourx", 7), ("onextwoxfourxsixx", 8), ("onextwoxfourxsixxeightx", 9), ("onextwoxmimoa", 10), ("onextwoxthreexmimoa", 11), ("onextwoxthreexfourxmimoa", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioRateAdaptUL.setStatus('current')
providerVID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 95), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: providerVID.setStatus('current')
mac1VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 96), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac1VIDMapAddr.setStatus('current')
mac1VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac1VIDMapVid.setStatus('current')
mac2VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 98), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac2VIDMapAddr.setStatus('current')
mac2VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac2VIDMapVid.setStatus('current')
mac3VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 100), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac3VIDMapAddr.setStatus('current')
mac3VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac3VIDMapVid.setStatus('current')
mac4VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 102), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac4VIDMapAddr.setStatus('current')
mac4VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 103), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac4VIDMapVid.setStatus('current')
mac5VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 104), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac5VIDMapAddr.setStatus('current')
mac5VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 105), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac5VIDMapVid.setStatus('current')
mac6VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 106), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac6VIDMapAddr.setStatus('current')
mac6VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 107), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac6VIDMapVid.setStatus('current')
mac7VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 108), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac7VIDMapAddr.setStatus('current')
mac7VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 109), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac7VIDMapVid.setStatus('current')
mac8VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 110), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac8VIDMapAddr.setStatus('current')
mac8VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 111), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac8VIDMapVid.setStatus('current')
mac9VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 112), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac9VIDMapAddr.setStatus('current')
mac9VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 113), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac9VIDMapVid.setStatus('current')
mac10VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 114), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac10VIDMapAddr.setStatus('current')
mac10VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 115), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac10VIDMapVid.setStatus('current')
vlanPortType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("q", 0), ("qinq", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortType.setStatus('current')
vlanAcceptQinQFrames = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 117), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAcceptQinQFrames.setStatus('current')
whispWebUserAccessMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 118), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("local", 0), ("remote", 1), ("remotethenlocal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispWebUserAccessMode.setStatus('current')
usrAccountEnableAccounting = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 119), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("deviceAccess", 1), ("dataUsage", 2), ("all", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrAccountEnableAccounting.setStatus('current')
allowRejectThenLocal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 120), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("doNotAllowLocalAuthifAAAReject", 0), ("allowLocalAuthIfAAAReject", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowRejectThenLocal.setStatus('current')
snrCalculation = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 121), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrCalculation.setStatus('deprecated')
priorityPrecedence = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 122), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("eight021pThenDiffServ", 0), ("diffservThenEight021p", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priorityPrecedence.setStatus('current')
installationColorCode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 123), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: installationColorCode.setStatus('current')
apSmMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 124), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("sm", 1), ("ap", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSmMode.setStatus('current')
pppoeFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 125), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeFilter.setStatus('current')
smbFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 126), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smbFilter.setStatus('current')
snmpFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 127), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpFilter.setStatus('current')
userP1Filter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 128), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userP1Filter.setStatus('current')
userP2Filter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 129), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userP2Filter.setStatus('current')
userP3Filter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 130), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userP3Filter.setStatus('current')
allOtherIpFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 131), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allOtherIpFilter.setStatus('current')
allIpv4Filter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 132), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allIpv4Filter.setStatus('current')
arpFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 133), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpFilter.setStatus('current')
allOthersFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 134), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allOthersFilter.setStatus('current')
userDefinedPort1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 135), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userDefinedPort1.setStatus('current')
port1TCPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 136), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port1TCPFilter.setStatus('current')
port1UDPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 137), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port1UDPFilter.setStatus('current')
userDefinedPort2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 138), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userDefinedPort2.setStatus('current')
port2TCPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 139), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port2TCPFilter.setStatus('current')
port2UDPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 140), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port2UDPFilter.setStatus('current')
userDefinedPort3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 141), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userDefinedPort3.setStatus('current')
port3TCPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 142), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port3TCPFilter.setStatus('current')
port3UDPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 143), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port3UDPFilter.setStatus('current')
bootpcFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 144), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpcFilter.setStatus('current')
bootpsFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 145), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpsFilter.setStatus('current')
ip4MultFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 146), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ip4MultFilter.setStatus('current')
packetFilterDirection = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 147), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upstream", 1), ("downstream", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: packetFilterDirection.setStatus('current')
encryptionConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 148), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("des", 0), ("aes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: encryptionConfig.setStatus('current')
pppoeCtlPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 149), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeCtlPriority.setStatus('current')
ftpPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 150), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPort.setStatus('current')
httpPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 151), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpPort.setStatus('current')
httpsPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 152), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsPort.setStatus('current')
snmpPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 153), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPort.setStatus('current')
snmpTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 154), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapPort.setStatus('current')
webAccess = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 155), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("http", 0), ("https", 1), ("http-and-https", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webAccess.setStatus('current')
syslogDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 156), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDomain", 0), ("appendDomain", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogDomainNameAppend.setStatus('current')
syslogServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 157), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerAddr.setStatus('current')
syslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 158), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerPort.setStatus('current')
syslogMinLevel = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 159), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("fatal", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogMinLevel.setStatus('current')
allIpv6Filter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 160), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allIpv6Filter.setStatus('current')
ipv6smbFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 161), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6smbFilter.setStatus('current')
ipv6snmpFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 162), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6snmpFilter.setStatus('current')
ipv6bootpcFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 163), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6bootpcFilter.setStatus('current')
ipv6bootpsFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 164), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6bootpsFilter.setStatus('current')
ipv6MultFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 165), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6MultFilter.setStatus('current')
allOtherIpv6Filter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 166), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allOtherIpv6Filter.setStatus('current')
snmpStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 167), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("snmpv2only", 1), ("snmpv3only", 2), ("snmpv2-and-snmpv3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpStatus.setStatus('current')
telnetStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 168), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabletelnet", 0), ("enabletelnet", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetStatus.setStatus('current')
ftpStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 169), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableftp", 0), ("enableftp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpStatus.setStatus('current')
tftpStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 170), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabletftp", 0), ("enabletftp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpStatus.setStatus('current')
userMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 171), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userMode.setStatus('current')
tcpAckPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 172), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpAckPriority.setStatus('current')
codePointSelect = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 173), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63))).clone(namedValues=NamedValues(("cp1", 1), ("cp2", 2), ("cp3", 3), ("cp4", 4), ("cp5", 5), ("cp6", 6), ("cp7", 7), ("cp8", 8), ("cp9", 9), ("cp10", 10), ("cp11", 11), ("cp12", 12), ("cp13", 13), ("cp14", 14), ("cp15", 15), ("cp16", 16), ("cp17", 17), ("cp18", 18), ("cp19", 19), ("cp20", 20), ("cp21", 21), ("cp22", 22), ("cp23", 23), ("cp24", 24), ("cp25", 25), ("cp26", 26), ("cp27", 27), ("cp28", 28), ("cp29", 29), ("cp30", 30), ("cp31", 31), ("cp32", 32), ("cp33", 33), ("cp34", 34), ("cp35", 35), ("cp36", 36), ("cp37", 37), ("cp38", 38), ("cp39", 39), ("cp40", 40), ("cp41", 41), ("cp42", 42), ("cp43", 43), ("cp44", 44), ("cp45", 45), ("cp46", 46), ("cp47", 47), ("cp49", 49), ("cp50", 50), ("cp51", 51), ("cp52", 52), ("cp53", 53), ("cp54", 54), ("cp55", 55), ("cp57", 57), ("cp58", 58), ("cp59", 59), ("cp60", 60), ("cp61", 61), ("cp62", 62), ("cp63", 63)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePointSelect.setStatus('current')
prioritySelect = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 174), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("p0", 0), ("p1", 1), ("p2", 2), ("p3", 3), ("p4", 4), ("p5", 5), ("p6", 6), ("p7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioritySelect.setStatus('current')
auxPortEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 175), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auxPortEnable.setStatus('current')
poeAuxEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 176), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeAuxEnable.setStatus('current')
whispUsrAuth = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 177), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("md5", 0), ("peap-mschapv2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAuth.setStatus('current')
lan1DhcpRelease = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 201), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("releaseIP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan1DhcpRelease.setStatus('current')
lan1DhcpRenew = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 202), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("renewIP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan1DhcpRenew.setStatus('current')
lan3DhcpRelease = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 203), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("releaseIP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan3DhcpRelease.setStatus('current')
lan3DhcpRenew = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 204), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("renewIP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan3DhcpRenew.setStatus('current')
natDhcpRelease = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 205), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("releaseIP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: natDhcpRelease.setStatus('current')
natDhcpRenew = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 206), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("renewIP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: natDhcpRenew.setStatus('current')
region = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 207), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 6, 3, 2, 5, 4, 7))).clone(namedValues=NamedValues(("none", 0), ("otherRegulatory", 1), ("asia", 6), ("europe", 3), ("northAmerica", 2), ("oceania", 5), ("southAmerica", 4), ("africa", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: region.setStatus('current')
regionAsia = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 208), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6, 7, 8, 10, 11))).clone(namedValues=NamedValues(("none", 0), ("india", 2), ("indonesia", 3), ("russiacategory1", 4), ("russiacategory2", 5), ("russiacategory3", 6), ("russiacategory4", 7), ("vietnam", 8), ("malaysia", 10), ("pakistan", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionAsia.setStatus('current')
regionEurope = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 209), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1))).clone(namedValues=NamedValues(("none", 0), ("spain", 2), ("ireland", 3), ("denmark", 4), ("finland", 5), ("germany", 6), ("greece", 7), ("iceland", 8), ("liechtenstein", 9), ("norway", 10), ("portugal", 11), ("switzerland", 12), ("serbia", 13), ("unitedkingdom", 14), ("other", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionEurope.setStatus('current')
regionNorthAmerica = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 210), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 2, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("canada", 3), ("unitedStates", 2), ("mexico", 4), ("puertoRico", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionNorthAmerica.setStatus('current')
regionOceania = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 211), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("australia", 2), ("newZealand", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionOceania.setStatus('current')
regionSouthAmerica = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 212), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("brazil", 2), ("ecuador", 3), ("colombia", 4), ("venezuela", 5), ("panama", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionSouthAmerica.setStatus('current')
regionOtherRegulatory = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 213), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("fcc", 2), ("etsi", 3), ("etsilbt", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionOtherRegulatory.setStatus('current')
interleave = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 214), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interleave.setStatus('current')
receiveQualityDebug = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 215), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiveQualityDebug.setStatus('current')
apType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 216), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("remote", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apType.setStatus('current')
regionAfrica = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 217), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("algeria", 2), ("nigeria", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionAfrica.setStatus('current')
addCustomFreqMimo = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 218), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addCustomFreqMimo.setStatus('current')
removeCustomFreqMimo = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 219), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: removeCustomFreqMimo.setStatus('current')
timedSpectrumAnalysisDurationBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 220), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timedSpectrumAnalysisDurationBox.setStatus('current')
spectrumAnalysisActionBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 221), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("stopSpectrumAnalysis", 0), ("startTimedSpectrumAnalysis", 1), ("startContinuousSpectrumAnalysis", 2), ("idleNoSpectrumAnalysis", 3), ("idleCompleteSpectrumAnalysis", 4), ("inProgressTimedSpectrumAnalysis", 5), ("inProgressContinuousSpectrumAnalysis", 6), ("notReady", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spectrumAnalysisActionBox.setStatus('current')
mac1VIDMapPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 222), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac1VIDMapPriority.setStatus('current')
mac1VIDMapPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 223), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac1VIDMapPriorityMode.setStatus('current')
mac2VIDMapPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 224), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac2VIDMapPriority.setStatus('current')
mac2VIDMapPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 225), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac2VIDMapPriorityMode.setStatus('current')
mac3VIDMapPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 226), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac3VIDMapPriority.setStatus('current')
mac3VIDMapPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 227), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac3VIDMapPriorityMode.setStatus('current')
mac4VIDMapPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 228), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac4VIDMapPriority.setStatus('current')
mac4VIDMapPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 229), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac4VIDMapPriorityMode.setStatus('current')
mac5VIDMapPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 230), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac5VIDMapPriority.setStatus('current')
mac5VIDMapPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 231), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac5VIDMapPriorityMode.setStatus('current')
mac6VIDMapPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 232), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac6VIDMapPriority.setStatus('current')
mac6VIDMapPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 233), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac6VIDMapPriorityMode.setStatus('current')
mac7VIDMapPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 234), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac7VIDMapPriority.setStatus('current')
mac7VIDMapPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 235), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac7VIDMapPriorityMode.setStatus('current')
mac8VIDMapPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 236), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac8VIDMapPriority.setStatus('current')
mac8VIDMapPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 237), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac8VIDMapPriorityMode.setStatus('current')
mac9VIDMapPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 238), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac9VIDMapPriority.setStatus('current')
mac9VIDMapPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 239), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac9VIDMapPriorityMode.setStatus('current')
mac10VIDMapPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 240), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac10VIDMapPriority.setStatus('current')
mac10VIDMapPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 241), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac10VIDMapPriorityMode.setStatus('current')
managementVIDPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 242), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementVIDPriority.setStatus('current')
managementVIDPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 243), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementVIDPriorityMode.setStatus('current')
remarkSrcVID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 244), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remarkSrcVID.setStatus('current')
addRemarkVID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 245), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addRemarkVID.setStatus('current')
addRemarkPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 246), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addRemarkPriority.setStatus('current')
deleteRemarkVID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 247), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deleteRemarkVID.setStatus('current')
deleteRemarkPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 248), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deleteRemarkPriority.setStatus('current')
mimoRateAdaptAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 249), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("mimobmimoa", 0), ("mimobonly", 1), ("mimoaonly", 2), ("siso", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mimoRateAdaptAlgorithm.setStatus('current')
controlMessages = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 250), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("siso", 1), ("mimoa", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlMessages.setStatus('current')
enableSecurityBanner = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 251), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableSecurityBanner.setStatus('current')
vcDepth = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 252), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8, 16, 32, 64, 128))).clone(namedValues=NamedValues(("default", 0), ("eight", 8), ("sixteen", 16), ("thirty-two", 32), ("sixty-four", 64), ("one-two-eight", 128)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcDepth.setStatus('current')
textSecurityBanner = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 253), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: textSecurityBanner.setStatus('current')
acceptSecurityBanner = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 254), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acceptSecurityBanner.setStatus('current')
poeT2Classification = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 255), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeT2Classification.setStatus('current')
simulatedAirDelay = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 256), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: simulatedAirDelay.setStatus('current')
cnMaestroEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 257), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnMaestroEnable.setStatus('current')
cnMaestroUrl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 258), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnMaestroUrl.setStatus('current')
camID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 259), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: camID.setStatus('current')
camOnboardKey = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 260), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: camOnboardKey.setStatus('current')
atexHazlocPowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 261), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("gasGroupA", 0), ("gasGroupB", 1), ("gasGroupC", 2), ("gasGroupD", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atexHazlocPowerLimit.setStatus('current')
nearFieldRange = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 262), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 3000))).setUnits('feet').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nearFieldRange.setStatus('current')
nearFieldOperation = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 263), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nearFieldOperation.setStatus('current')
defaultIPAccessEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 264), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultIPAccessEnable.setStatus('current')
pingWdogEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 265), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingWdogEnable.setStatus('current')
pingWdogIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 266), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingWdogIP.setStatus('current')
pingWdogInterval = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 267), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 86400))).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingWdogInterval.setStatus('current')
pingWdogRbtCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 268), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingWdogRbtCnt.setStatus('current')
forceReassessment = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 275), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceReassessment.setStatus('current')
enable8023linkBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 276), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable8023linkBox.setStatus('current')
ethernetPortSelection = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 278), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mainPort", 0), ("sfpPort", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetPortSelection.setStatus('current')
ethernetLinkSpeedSfp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 279), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 40, 64, 168))).clone(namedValues=NamedValues(("auto1000FX", 32), ("auto1000F-100F", 40), ("forced1000FX", 64), ("auto2500F-1000F-100F", 168)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetLinkSpeedSfp.setStatus('current')
saveFlash = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("doNotSaveToFlash", 0), ("saveToFlash", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveFlash.setStatus('obsolete')
reboot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("finishedReboot", 0), ("reboot", 1), ("fullReboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reboot.setStatus('current')
clearEventLog = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notClear", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearEventLog.setStatus('current')
rebootIfRequired = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("rebootNotRequired", 0), ("rebootRequired", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebootIfRequired.setStatus('current')
clearBERStats = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("doNotClearBERStats", 0), ("clearBERStats", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearBERStats.setStatus('current')
updateDevice = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: updateDevice.setStatus('current')
importConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: importConfigFile.setStatus('current')
exportConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exportConfigFile.setStatus('current')
undoUnitWideSavedChanges = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("undoUnitWideSavedChanges", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: undoUnitWideSavedChanges.setStatus('current')
resetPoEAux = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetPoEAux.setStatus('current')
whispBoxEvntLog = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 5, 1), EventString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxEvntLog.setStatus('current')
whispBoxAttributesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 1))
for _whispBoxAttributesGroup_obj in [[("WHISP-BOX-MIBV2-MIB", "vlanAcceptQinQFrames"), ("WHISP-BOX-MIBV2-MIB", "providerVID"), ("WHISP-BOX-MIBV2-MIB", "mac1VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac1VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac1VIDMapPriority"), ("WHISP-BOX-MIBV2-MIB", "mac1VIDMapPriorityMode"), ("WHISP-BOX-MIBV2-MIB", "mac2VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac2VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac2VIDMapPriority"), ("WHISP-BOX-MIBV2-MIB", "mac2VIDMapPriorityMode"), ("WHISP-BOX-MIBV2-MIB", "mac3VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac3VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac3VIDMapPriority"), ("WHISP-BOX-MIBV2-MIB", "mac3VIDMapPriorityMode"), ("WHISP-BOX-MIBV2-MIB", "mac4VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac4VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac4VIDMapPriority"), ("WHISP-BOX-MIBV2-MIB", "mac4VIDMapPriorityMode"), ("WHISP-BOX-MIBV2-MIB", "mac5VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac5VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac5VIDMapPriority"), ("WHISP-BOX-MIBV2-MIB", "mac5VIDMapPriorityMode"), ("WHISP-BOX-MIBV2-MIB", "mac6VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac6VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac6VIDMapPriority"), ("WHISP-BOX-MIBV2-MIB", "mac6VIDMapPriorityMode"), ("WHISP-BOX-MIBV2-MIB", "mac7VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac7VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac7VIDMapPriority"), ("WHISP-BOX-MIBV2-MIB", "mac7VIDMapPriorityMode"), ("WHISP-BOX-MIBV2-MIB", "mac8VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac8VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac8VIDMapPriority"), ("WHISP-BOX-MIBV2-MIB", "mac8VIDMapPriorityMode"), ("WHISP-BOX-MIBV2-MIB", "mac9VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac9VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac9VIDMapPriority"), ("WHISP-BOX-MIBV2-MIB", "mac9VIDMapPriorityMode"), ("WHISP-BOX-MIBV2-MIB", "mac10VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac10VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac10VIDMapPriority"), ("WHISP-BOX-MIBV2-MIB", "mac10VIDMapPriorityMode"), ("WHISP-BOX-MIBV2-MIB", "vlanPortType"), ("WHISP-BOX-MIBV2-MIB", "portVID"), ("WHISP-BOX-MIBV2-MIB", "timedSpectrumAnalysisDurationBox"), ("WHISP-BOX-MIBV2-MIB", "spectrumAnalysisActionBox"), ("WHISP-BOX-MIBV2-MIB", "calibrationStatusBox"), ("WHISP-BOX-MIBV2-MIB", "calibrationStatusBool"), ("WHISP-BOX-MIBV2-MIB", "catalinaGainRxCH1"), ("WHISP-BOX-MIBV2-MIB", "catalinaGainRxCH2"), ("WHISP-BOX-MIBV2-MIB", "catalinaAttenTxCH1"), ("WHISP-BOX-MIBV2-MIB", "catalinaAttenTxCH2"), ("WHISP-BOX-MIBV2-MIB", "catalinaCurrDetSetpointTxCH1"), ("WHISP-BOX-MIBV2-MIB", "catalinaCurrDetSetpointTxCH2"), ("WHISP-BOX-MIBV2-MIB", "catalinaCurrDetReadRefTxCH1"), ("WHISP-BOX-MIBV2-MIB", "catalinaCurrDetReadRefTxCH2"), ("WHISP-BOX-MIBV2-MIB", "catalinaCurrDetReadPowerOnTxCH1"), ("WHISP-BOX-MIBV2-MIB", "catalinaCurrDetReadPowerOnTxCH2"), ("WHISP-BOX-MIBV2-MIB", "catalinaOpenLoopAttenTxCH1"), ("WHISP-BOX-MIBV2-MIB", "catalinaOpenLoopAttenTxCH2"), ("WHISP-BOX-MIBV2-MIB", "catalinaTargetDetSetpointTxCH1"), ("WHISP-BOX-MIBV2-MIB", "catalinaTargetDetSetpointTxCH2"), ("WHISP-BOX-MIBV2-MIB", "catalinaGainReductionRxCH1"), ("WHISP-BOX-MIBV2-MIB", "catalinaGainReductionRxCH2"), ("WHISP-BOX-MIBV2-MIB", "catalinaLoAttenRxCH1"), ("WHISP-BOX-MIBV2-MIB", "catalinaLoAttenRxCH2"), ("WHISP-BOX-MIBV2-MIB", "catalinaTargetGainRxCH1"), ("WHISP-BOX-MIBV2-MIB", "catalinaTargetGainRxCH2"), ("WHISP-BOX-MIBV2-MIB", "whispBoxSoftwareVer"), ("WHISP-BOX-MIBV2-MIB", "whispBoxFPGAVer"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"), ("WHISP-BOX-MIBV2-MIB", "whispBoxBoot"), ("WHISP-BOX-MIBV2-MIB", "boxTemperature"), ("WHISP-BOX-MIBV2-MIB", "boxDeviceType"), ("WHISP-BOX-MIBV2-MIB", "boxDeviceTypeID"), ("WHISP-BOX-MIBV2-MIB", "boxEncryption"), ("WHISP-BOX-MIBV2-MIB", "etherLinkStatus"), ("WHISP-BOX-MIBV2-MIB", "boxFrequency"), ("WHISP-BOX-MIBV2-MIB", "platformVer"), ("WHISP-BOX-MIBV2-MIB", "platformType"), ("WHISP-BOX-MIBV2-MIB", "dhcpLanIp"), ("WHISP-BOX-MIBV2-MIB", "dhcpLanSubnetMask"), ("WHISP-BOX-MIBV2-MIB", "dhcpLanGateway"), ("WHISP-BOX-MIBV2-MIB", "dhcpRfPublicIp"), ("WHISP-BOX-MIBV2-MIB", "dhcpRfPublicSubnetMask"), ("WHISP-BOX-MIBV2-MIB", "dhcpRfPublicGateway"), ("WHISP-BOX-MIBV2-MIB", "lanDhcpStatus"), ("WHISP-BOX-MIBV2-MIB", "rfPublicDhcpStatus"), ("WHISP-BOX-MIBV2-MIB", "natDhcpStatus"), ("WHISP-BOX-MIBV2-MIB", "inSyncCount"), ("WHISP-BOX-MIBV2-MIB", "outSyncCount"), ("WHISP-BOX-MIBV2-MIB", "pllOutLockCount"), ("WHISP-BOX-MIBV2-MIB", "txCalFailure"), ("WHISP-BOX-MIBV2-MIB", "swVersion"), ("WHISP-BOX-MIBV2-MIB", "pldVersion"), ("WHISP-BOX-MIBV2-MIB", "platformInfo"), ("WHISP-BOX-MIBV2-MIB", "antType"), ("WHISP-BOX-MIBV2-MIB", "antPolarization"), ("WHISP-BOX-MIBV2-MIB", "whispBoxP11Personality"), ("WHISP-BOX-MIBV2-MIB", "whispBoxP11FPGAType"), ("WHISP-BOX-MIBV2-MIB", "whispBoxP11BstrapFPGAVer"), ("WHISP-BOX-MIBV2-MIB", "numDFSDetections"), ("WHISP-BOX-MIBV2-MIB", "numLBTDetections"), ("WHISP-BOX-MIBV2-MIB", "rxOverrunPkts"), ("WHISP-BOX-MIBV2-MIB", "boxTemperatureC"), ("WHISP-BOX-MIBV2-MIB", "boxTemperatureF"), ("WHISP-BOX-MIBV2-MIB", "linkNegoSpeed"), ("WHISP-BOX-MIBV2-MIB", "installationColorCode"), ("WHISP-BOX-MIBV2-MIB", "colorCode"), ("WHISP-BOX-MIBV2-MIB", "displayOnlyAccess"), ("WHISP-BOX-MIBV2-MIB", "fullAccess"), ("WHISP-BOX-MIBV2-MIB", "webAutoUpdate"), ("WHISP-BOX-MIBV2-MIB", "pass1Status"), ("WHISP-BOX-MIBV2-MIB", "pass2Status"), ("WHISP-BOX-MIBV2-MIB", "bridgeEntryTimeout"), ("WHISP-BOX-MIBV2-MIB", "cnMaestroEnable"), ("WHISP-BOX-MIBV2-MIB", "cnMaestroUrl"), ("WHISP-BOX-MIBV2-MIB", "camID"), ("WHISP-BOX-MIBV2-MIB", "camOnboardKey"), ("WHISP-BOX-MIBV2-MIB", "camAccID"), ("WHISP-BOX-MIBV2-MIB", "cnMaestroStatus"), ("WHISP-BOX-MIBV2-MIB", "daVersion"), ("WHISP-BOX-MIBV2-MIB", "snmpMibPerm"), ("WHISP-BOX-MIBV2-MIB", "bhTimingMode"), ("WHISP-BOX-MIBV2-MIB", "powerControl"), ("WHISP-BOX-MIBV2-MIB", "extFilterDelay"), ("WHISP-BOX-MIBV2-MIB", "antennaGain"), ("WHISP-BOX-MIBV2-MIB", "eirp"), ("WHISP-BOX-MIBV2-MIB", "dynamicLearning"), ("WHISP-BOX-MIBV2-MIB", "managementVID"), ("WHISP-BOX-MIBV2-MIB", "managementVIDPriority"), ("WHISP-BOX-MIBV2-MIB", "managementVIDPriorityMode"), ("WHISP-BOX-MIBV2-MIB", "agingTimeout"), ("WHISP-BOX-MIBV2-MIB", "remarkSrcVID"), ("WHISP-BOX-MIBV2-MIB", "addRemarkVID"), ("WHISP-BOX-MIBV2-MIB", "addRemarkPriority"), ("WHISP-BOX-MIBV2-MIB", "deleteRemarkVID"), ("WHISP-BOX-MIBV2-MIB", "deleteRemarkPriority"), ("WHISP-BOX-MIBV2-MIB", "frameType"), ("WHISP-BOX-MIBV2-MIB", "addVlanMember"), ("WHISP-BOX-MIBV2-MIB", "removeVlanMember"), ("WHISP-BOX-MIBV2-MIB", "scheduling"), ("WHISP-BOX-MIBV2-MIB", "transmitterOP"), ("WHISP-BOX-MIBV2-MIB", "bridgeEnable"), ("WHISP-BOX-MIBV2-MIB", "fecEnable"), ("WHISP-BOX-MIBV2-MIB", "trapIP1"), ("WHISP-BOX-MIBV2-MIB", "trapIP2"), ("WHISP-BOX-MIBV2-MIB", "trapIP3"), ("WHISP-BOX-MIBV2-MIB", "trapIP4"), ("WHISP-BOX-MIBV2-MIB", "trapIP5"), ("WHISP-BOX-MIBV2-MIB", "trapIP6"), ("WHISP-BOX-MIBV2-MIB", "trapIP7"), ("WHISP-BOX-MIBV2-MIB", "trapIP8"), ("WHISP-BOX-MIBV2-MIB", "trapIP9"), ("WHISP-BOX-MIBV2-MIB", "trapIP10"), ("WHISP-BOX-MIBV2-MIB", "commStringRWrite"), ("WHISP-BOX-MIBV2-MIB", "subnetMask"), ("WHISP-BOX-MIBV2-MIB", "mngtIP"), ("WHISP-BOX-MIBV2-MIB", "allowVIDAccess"), ("WHISP-BOX-MIBV2-MIB", "setDefaultPlug"), ("WHISP-BOX-MIBV2-MIB", "hwsCompatibility"), ("WHISP-BOX-MIBV2-MIB", "gpsInput"), ("WHISP-BOX-MIBV2-MIB", "ism"), ("WHISP-BOX-MIBV2-MIB", "hiPriority"), ("WHISP-BOX-MIBV2-MIB", "userName"), ("WHISP-BOX-MIBV2-MIB", "userPassword"), ("WHISP-BOX-MIBV2-MIB", "userAccessLevel"), ("WHISP-BOX-MIBV2-MIB", "userMode"), ("WHISP-BOX-MIBV2-MIB", "deleteUser"), ("WHISP-BOX-MIBV2-MIB", "twoXRate"), ("WHISP-BOX-MIBV2-MIB", "lanDhcpState"), ("WHISP-BOX-MIBV2-MIB", "dnsIpState"), ("WHISP-BOX-MIBV2-MIB", "sessionTimeout"), ("WHISP-BOX-MIBV2-MIB", "vlanMemberSource"), ("WHISP-BOX-MIBV2-MIB", "addCustomFreqList"), ("WHISP-BOX-MIBV2-MIB", "removeCustomFreqList"), ("WHISP-BOX-MIBV2-MIB", "allowColocation"), ("WHISP-BOX-MIBV2-MIB", "changeUsrPwd"), ("WHISP-BOX-MIBV2-MIB", "mngtIP2"), ("WHISP-BOX-MIBV2-MIB", "subnetMask2"), ("WHISP-BOX-MIBV2-MIB", "mngtIP3"), ("WHISP-BOX-MIBV2-MIB", "subnetMask3"), ("WHISP-BOX-MIBV2-MIB", "mngtIP4"), ("WHISP-BOX-MIBV2-MIB", "subnetMask4"), ("WHISP-BOX-MIBV2-MIB", "mngtIP5"), ("WHISP-BOX-MIBV2-MIB", "subnetMask5"), ("WHISP-BOX-MIBV2-MIB", "mngtIP6"), ("WHISP-BOX-MIBV2-MIB", "subnetMask6"), ("WHISP-BOX-MIBV2-MIB", "mngtIP7"), ("WHISP-BOX-MIBV2-MIB", "subnetMask7"), ("WHISP-BOX-MIBV2-MIB", "mngtIP8"), ("WHISP-BOX-MIBV2-MIB", "subnetMask8"), ("WHISP-BOX-MIBV2-MIB", "mngtIP9"), ("WHISP-BOX-MIBV2-MIB", "subnetMask9"), ("WHISP-BOX-MIBV2-MIB", "mngtIP10"), ("WHISP-BOX-MIBV2-MIB", "subnetMask10"), ("WHISP-BOX-MIBV2-MIB", "bhvlanEnable"), ("WHISP-BOX-MIBV2-MIB", "lldpBroadcastEnable"), ("WHISP-BOX-MIBV2-MIB", "radioRateAdapt"), ("WHISP-BOX-MIBV2-MIB", "boardModel"), ("WHISP-BOX-MIBV2-MIB", "productTypeName"), ("WHISP-BOX-MIBV2-MIB", "fpgaBuildDate"), ("WHISP-BOX-MIBV2-MIB", "fpgaCompileInfo"), ("WHISP-BOX-MIBV2-MIB", "syslogDomainNameAppend"), ("WHISP-BOX-MIBV2-MIB", "syslogServerAddr"), ("WHISP-BOX-MIBV2-MIB", "syslogServerPort"), ("WHISP-BOX-MIBV2-MIB", "syslogMinLevel"), ("WHISP-BOX-MIBV2-MIB", "pingWdogEnable"), ("WHISP-BOX-MIBV2-MIB", "pingWdogIP"), ("WHISP-BOX-MIBV2-MIB", "pingWdogInterval"), ("WHISP-BOX-MIBV2-MIB", "pingWdogRbtCnt"), ("WHISP-BOX-MIBV2-MIB", "syslogStatTxSuccesses"), ("WHISP-BOX-MIBV2-MIB", "syslogStatDropped"), ("WHISP-BOX-MIBV2-MIB", "apType"), ("WHISP-BOX-MIBV2-MIB", "apSmMode"), ("WHISP-BOX-MIBV2-MIB", "region"), ("WHISP-BOX-MIBV2-MIB", "regionCode"), ("WHISP-BOX-MIBV2-MIB", "regionAsia"), ("WHISP-BOX-MIBV2-MIB", "regionEurope"), ("WHISP-BOX-MIBV2-MIB", "regionNorthAmerica"), ("WHISP-BOX-MIBV2-MIB", "regionOceania"), ("WHISP-BOX-MIBV2-MIB", "regionSouthAmerica"), ("WHISP-BOX-MIBV2-MIB", "regionAfrica"), ("WHISP-BOX-MIBV2-MIB", "regionOtherRegulatory"), ("WHISP-BOX-MIBV2-MIB", "mimoRateAdaptAlgorithm"), ("WHISP-BOX-MIBV2-MIB", "radioRateAdaptUL"), ("WHISP-BOX-MIBV2-MIB", "tcpAckPriority"), ("WHISP-BOX-MIBV2-MIB", "dnsPrimaryMgmtIP"), ("WHISP-BOX-MIBV2-MIB", "dnsAlternateMgmtIP"), ("WHISP-BOX-MIBV2-MIB", "dnsMgmtDomainName"), ("WHISP-BOX-MIBV2-MIB", "auxPortEnable"), ("WHISP-BOX-MIBV2-MIB", "defaultIPAccessEnable"), ("WHISP-BOX-MIBV2-MIB", "poeAuxEnable"), ("WHISP-BOX-MIBV2-MIB", "addCustomFreqMimo"), ("WHISP-BOX-MIBV2-MIB", "removeCustomFreqMimo"), ("WHISP-BOX-MIBV2-MIB", "snmpv2cEnable"), ("WHISP-BOX-MIBV2-MIB", "nearFieldRange"), ("WHISP-BOX-MIBV2-MIB", "nearFieldOperation"), ("WHISP-BOX-MIBV2-MIB", "nearFieldOperationActive"), ("WHISP-BOX-MIBV2-MIB", "forceReassessment"), ("WHISP-BOX-MIBV2-MIB", "forceReassessmentActive"), ("WHISP-BOX-MIBV2-MIB", "ftpPort"), ("WHISP-BOX-MIBV2-MIB", "httpPort"), ("WHISP-BOX-MIBV2-MIB", "httpsPort"), ("WHISP-BOX-MIBV2-MIB", "snmpPort"), ("WHISP-BOX-MIBV2-MIB", "snmpTrapPort"), ("WHISP-BOX-MIBV2-MIB", "webAccess"), ("WHISP-BOX-MIBV2-MIB", "snmpStatus"), ("WHISP-BOX-MIBV2-MIB", "telnetStatus"), ("WHISP-BOX-MIBV2-MIB", "ftpStatus"), ("WHISP-BOX-MIBV2-MIB", "tftpStatus"), ("WHISP-BOX-MIBV2-MIB", "lan1DhcpRelease"), ("WHISP-BOX-MIBV2-MIB", "lan1DhcpRenew"), ("WHISP-BOX-MIBV2-MIB", "lan3DhcpRelease"), ("WHISP-BOX-MIBV2-MIB", "lan3DhcpRenew")], [("WHISP-BOX-MIBV2-MIB", "natDhcpRelease"), ("WHISP-BOX-MIBV2-MIB", "natDhcpRenew"), ("WHISP-BOX-MIBV2-MIB", "radioEngKeyed"), ("WHISP-BOX-MIBV2-MIB", "radioWatchDogLogged"), ("WHISP-BOX-MIBV2-MIB", "radioFatalErrorLogged"), ("WHISP-BOX-MIBV2-MIB", "codePointSelect"), ("WHISP-BOX-MIBV2-MIB", "prioritySelect"), ("WHISP-BOX-MIBV2-MIB", "priorityPrecedence"), ("WHISP-BOX-MIBV2-MIB", "pppoeCtlPriority"), ("WHISP-BOX-MIBV2-MIB", "rfStatXmtUDataCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatXmtBDataCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatXmtMDataCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvUDataCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvBDataCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvMDataCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatXmtCntlCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvCntlCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatInSyncCount"), ("WHISP-BOX-MIBV2-MIB", "rfStatOutSyncCount"), ("WHISP-BOX-MIBV2-MIB", "rfStatOverrunCount"), ("WHISP-BOX-MIBV2-MIB", "rfStatUnderrunCount"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvCorruptDataCount"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvCorruptControlCount"), ("WHISP-BOX-MIBV2-MIB", "rfStatBadBcastCtlCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatPLLOutOfLockCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatBeaconVerMismatchCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatBadFreqBcnRcvCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatnonLiteBcnRcvCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatUnsupFeatBcnRcvCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatUnkwnFeatBcnRcvCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatTxCalFailCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatBadInSyncIDRcv"), ("WHISP-BOX-MIBV2-MIB", "rfStatTempOutOfRange"), ("WHISP-BOX-MIBV2-MIB", "rfStatRSSIOutOfRange"), ("WHISP-BOX-MIBV2-MIB", "rfStatRangeCapEnf"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvLTStart"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvLTStartHS"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvLTResult"), ("WHISP-BOX-MIBV2-MIB", "rfStatXmtLTResult"), ("WHISP-BOX-MIBV2-MIB", "soundingStatClear"), ("WHISP-BOX-MIBV2-MIB", "soundingStatRequestCount"), ("WHISP-BOX-MIBV2-MIB", "soundingStatResponseCount"), ("WHISP-BOX-MIBV2-MIB", "soundingStatRequestsIgnored"), ("WHISP-BOX-MIBV2-MIB", "soundingStatAvgRequestInterval"), ("WHISP-BOX-MIBV2-MIB", "soundingStatMaxRequestInterval"), ("WHISP-BOX-MIBV2-MIB", "soundingStatErrorCount"), ("WHISP-BOX-MIBV2-MIB", "soundingStatRequestsDropped"), ("WHISP-BOX-MIBV2-MIB", "soundingStatResponsesSuppressed"), ("WHISP-BOX-MIBV2-MIB", "soundingStatVersionMismatch"), ("WHISP-BOX-MIBV2-MIB", "whispFeatureKeyOrigin"), ("WHISP-BOX-MIBV2-MIB", "poeT2Status"), ("WHISP-BOX-MIBV2-MIB", "updateStatus"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatbin"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatbout"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatbtoss"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatbtosscap"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatuin"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatuout"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatutoss"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatutosscap"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbEthAuxStatbin"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbEthAuxStatbout"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbEthAuxStatbtoss"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbEthAuxStatbtosscap"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbEthAuxStatuin"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbEthAuxStatuout"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbEthAuxStatutoss"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbEthAuxStatutosscap"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatfloods"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbEthAuxStatfloods"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatfloods"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatbin"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatbout"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatbtoss"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatbtosscap"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatuin"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatuout"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatutoss"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatutosscap"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbErrStatNI1QSend"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbErrStatNI2QSend"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbErrStatBridgeFull"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbErrStatSendMsg"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbErrStatAPFecQSend"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbErrStatApRfQSend"), ("WHISP-BOX-MIBV2-MIB", "fecStatLinkDetected"), ("WHISP-BOX-MIBV2-MIB", "fecStatLinkUptime"), ("WHISP-BOX-MIBV2-MIB", "fecStatLinkLost"), ("WHISP-BOX-MIBV2-MIB", "fecStatUnderSizedToss"), ("WHISP-BOX-MIBV2-MIB", "fecInDiscardsCount"), ("WHISP-BOX-MIBV2-MIB", "fecInErrorsCount"), ("WHISP-BOX-MIBV2-MIB", "fecOutDiscardsCount"), ("WHISP-BOX-MIBV2-MIB", "fecOutErrorsCount"), ("WHISP-BOX-MIBV2-MIB", "fecRxBabErr"), ("WHISP-BOX-MIBV2-MIB", "fecTxHbErr"), ("WHISP-BOX-MIBV2-MIB", "fecEthBusErr"), ("WHISP-BOX-MIBV2-MIB", "fecCRCError"), ("WHISP-BOX-MIBV2-MIB", "fecRxFifoNoBuf"), ("WHISP-BOX-MIBV2-MIB", "fecRxOverrun"), ("WHISP-BOX-MIBV2-MIB", "fecLateCollision"), ("WHISP-BOX-MIBV2-MIB", "fecRetransLimitExp"), ("WHISP-BOX-MIBV2-MIB", "fecTxUnderrun"), ("WHISP-BOX-MIBV2-MIB", "fecCarSenseLost"), ("WHISP-BOX-MIBV2-MIB", "fecNoCarrier"), ("WHISP-BOX-MIBV2-MIB", "fecLargeFrame"), ("WHISP-BOX-MIBV2-MIB", "fecRuntFrame"), ("WHISP-BOX-MIBV2-MIB", "fecExcessiveDeferrals"), ("WHISP-BOX-MIBV2-MIB", "fecAuxStatLinkDetected"), ("WHISP-BOX-MIBV2-MIB", "fecAuxStatLinkUptime"), ("WHISP-BOX-MIBV2-MIB", "fecAuxStatLinkLost"), ("WHISP-BOX-MIBV2-MIB", "fecAuxInDiscardsCount"), ("WHISP-BOX-MIBV2-MIB", "fecAuxInErrorsCount"), ("WHISP-BOX-MIBV2-MIB", "fecAuxOutDiscardsCount"), ("WHISP-BOX-MIBV2-MIB", "fecAuxOutErrorsCount"), ("WHISP-BOX-MIBV2-MIB", "fecAuxCRCError"), ("WHISP-BOX-MIBV2-MIB", "fecAuxRxOverrun"), ("WHISP-BOX-MIBV2-MIB", "fecAuxLateCollision"), ("WHISP-BOX-MIBV2-MIB", "fecAuxRetransLimitExp"), ("WHISP-BOX-MIBV2-MIB", "fecAuxTxUnderrun"), ("WHISP-BOX-MIBV2-MIB", "fecAuxCarSenseLost"), ("WHISP-BOX-MIBV2-MIB", "fecAuxNoCarrier"), ("WHISP-BOX-MIBV2-MIB", "fecAuxLargeFrame"), ("WHISP-BOX-MIBV2-MIB", "fecAuxRuntFrame"), ("WHISP-BOX-MIBV2-MIB", "rfInDiscardsCountExt"), ("WHISP-BOX-MIBV2-MIB", "rfInErrorsCountExt"), ("WHISP-BOX-MIBV2-MIB", "rfOutDiscardsCountExt"), ("WHISP-BOX-MIBV2-MIB", "rfOutErrorsCountExt"), ("WHISP-BOX-MIBV2-MIB", "rfInDiscardsCount"), ("WHISP-BOX-MIBV2-MIB", "rfInErrorsCount"), ("WHISP-BOX-MIBV2-MIB", "rfOutDiscardsCount"), ("WHISP-BOX-MIBV2-MIB", "rfOutErrorsCount"), ("WHISP-BOX-MIBV2-MIB", "packetOverloadCounter"), ("WHISP-BOX-MIBV2-MIB", "fecInDiscardsOverloadCount"), ("WHISP-BOX-MIBV2-MIB", "fecOutDiscardsOverloadCount"), ("WHISP-BOX-MIBV2-MIB", "rfInDiscardsOverloadCount"), ("WHISP-BOX-MIBV2-MIB", "rfOutDiscardsOverloadCount"), ("WHISP-BOX-MIBV2-MIB", "framePeriodCurrent"), ("WHISP-BOX-MIBV2-MIB", "hardwareVersion"), ("WHISP-BOX-MIBV2-MIB", "radioStatusTransmitControlOverridden"), ("WHISP-BOX-MIBV2-MIB", "radioStatusTrackingFailure"), ("WHISP-BOX-MIBV2-MIB", "radioStatusSectorWeightsOff"), ("WHISP-BOX-MIBV2-MIB", "radioStatusRxBeamFormingOff"), ("WHISP-BOX-MIBV2-MIB", "radioStatusPowerDetectorInactive"), ("WHISP-BOX-MIBV2-MIB", "radioStatusCatQuadCalFail"), ("WHISP-BOX-MIBV2-MIB", "radioStatusAlarmReason"), ("WHISP-BOX-MIBV2-MIB", "radioStatusAlarm"), ("WHISP-BOX-MIBV2-MIB", "atexHazlocPowerLimit"), ("WHISP-BOX-MIBV2-MIB", "interleave"), ("WHISP-BOX-MIBV2-MIB", "controlMessages"), ("WHISP-BOX-MIBV2-MIB", "radioMSN"), ("WHISP-BOX-MIBV2-MIB", "simulatedAirDelay"), ("WHISP-BOX-MIBV2-MIB", "latitude"), ("WHISP-BOX-MIBV2-MIB", "longitude"), ("WHISP-BOX-MIBV2-MIB", "height"), ("WHISP-BOX-MIBV2-MIB", "bandwidth"), ("WHISP-BOX-MIBV2-MIB", "dataScramblingMethod"), ("WHISP-BOX-MIBV2-MIB", "whispWebUserAccessMode"), ("WHISP-BOX-MIBV2-MIB", "whispUsrAuth"), ("WHISP-BOX-MIBV2-MIB", "usrAccountEnableAccounting"), ("WHISP-BOX-MIBV2-MIB", "allowRejectThenLocal"), ("WHISP-BOX-MIBV2-MIB", "pppoeFilter"), ("WHISP-BOX-MIBV2-MIB", "smbFilter"), ("WHISP-BOX-MIBV2-MIB", "ipv6smbFilter"), ("WHISP-BOX-MIBV2-MIB", "snmpFilter"), ("WHISP-BOX-MIBV2-MIB", "ipv6snmpFilter"), ("WHISP-BOX-MIBV2-MIB", "userP1Filter"), ("WHISP-BOX-MIBV2-MIB", "userP2Filter"), ("WHISP-BOX-MIBV2-MIB", "userP3Filter"), ("WHISP-BOX-MIBV2-MIB", "allOtherIpFilter"), ("WHISP-BOX-MIBV2-MIB", "allOtherIpv6Filter"), ("WHISP-BOX-MIBV2-MIB", "allIpv4Filter"), ("WHISP-BOX-MIBV2-MIB", "allIpv6Filter"), ("WHISP-BOX-MIBV2-MIB", "arpFilter"), ("WHISP-BOX-MIBV2-MIB", "allOthersFilter"), ("WHISP-BOX-MIBV2-MIB", "userDefinedPort1"), ("WHISP-BOX-MIBV2-MIB", "port1TCPFilter"), ("WHISP-BOX-MIBV2-MIB", "port1UDPFilter"), ("WHISP-BOX-MIBV2-MIB", "userDefinedPort2"), ("WHISP-BOX-MIBV2-MIB", "port2TCPFilter"), ("WHISP-BOX-MIBV2-MIB", "port2UDPFilter"), ("WHISP-BOX-MIBV2-MIB", "userDefinedPort3"), ("WHISP-BOX-MIBV2-MIB", "port3TCPFilter"), ("WHISP-BOX-MIBV2-MIB", "port3UDPFilter"), ("WHISP-BOX-MIBV2-MIB", "bootpcFilter"), ("WHISP-BOX-MIBV2-MIB", "ipv6bootpcFilter"), ("WHISP-BOX-MIBV2-MIB", "bootpsFilter"), ("WHISP-BOX-MIBV2-MIB", "ipv6bootpsFilter"), ("WHISP-BOX-MIBV2-MIB", "ip4MultFilter"), ("WHISP-BOX-MIBV2-MIB", "ipv6MultFilter"), ("WHISP-BOX-MIBV2-MIB", "packetFilterDirection"), ("WHISP-BOX-MIBV2-MIB", "encryptionConfig"), ("WHISP-BOX-MIBV2-MIB", "activeTxPowerStr"), ("WHISP-BOX-MIBV2-MIB", "activeTxPowerHdths")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        whispBoxAttributesGroup = whispBoxAttributesGroup.setObjects(*_whispBoxAttributesGroup_obj)
    else:
        whispBoxAttributesGroup = whispBoxAttributesGroup.setObjects(*_whispBoxAttributesGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxAttributesGroup = whispBoxAttributesGroup.setStatus('current')
whispBoxControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 2)).setObjects(("WHISP-BOX-MIBV2-MIB", "enable8023linkBox"), ("WHISP-BOX-MIBV2-MIB", "saveFlash"), ("WHISP-BOX-MIBV2-MIB", "reboot"), ("WHISP-BOX-MIBV2-MIB", "clearEventLog"), ("WHISP-BOX-MIBV2-MIB", "rebootIfRequired"), ("WHISP-BOX-MIBV2-MIB", "clearBERStats"), ("WHISP-BOX-MIBV2-MIB", "updateDevice"), ("WHISP-BOX-MIBV2-MIB", "undoUnitWideSavedChanges"), ("WHISP-BOX-MIBV2-MIB", "resetPoEAux"), ("WHISP-BOX-MIBV2-MIB", "siteInfoViewable"), ("WHISP-BOX-MIBV2-MIB", "largeVCQ"), ("WHISP-BOX-MIBV2-MIB", "snrCalculation"), ("WHISP-BOX-MIBV2-MIB", "receiveQualityDebug"), ("WHISP-BOX-MIBV2-MIB", "poeT2Classification"), ("WHISP-BOX-MIBV2-MIB", "vcDepth"), ("WHISP-BOX-MIBV2-MIB", "enableSecurityBanner"), ("WHISP-BOX-MIBV2-MIB", "textSecurityBanner"), ("WHISP-BOX-MIBV2-MIB", "acceptSecurityBanner"), ("WHISP-BOX-MIBV2-MIB", "importConfigFile"), ("WHISP-BOX-MIBV2-MIB", "exportConfigFile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxControlGroup = whispBoxControlGroup.setStatus('current')
whispBoxBTGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 3)).setObjects(("WHISP-BOX-MIBV2-MIB", "whispBridgeMacAddr"), ("WHISP-BOX-MIBV2-MIB", "whispBridgeDesLuid"), ("WHISP-BOX-MIBV2-MIB", "whispBridgeAge"), ("WHISP-BOX-MIBV2-MIB", "whispBridgeExt"), ("WHISP-BOX-MIBV2-MIB", "whispBridgeHash"), ("WHISP-BOX-MIBV2-MIB", "whispBridgeCAM"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxBTGroup = whispBoxBTGroup.setStatus('current')
whispBoxVLANTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 4)).setObjects(("WHISP-BOX-MIBV2-MIB", "whispVID"), ("WHISP-BOX-MIBV2-MIB", "whispVType"), ("WHISP-BOX-MIBV2-MIB", "whispVAge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxVLANTableGroup = whispBoxVLANTableGroup.setStatus('current')
whispBoxCPTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 5)).setObjects(("WHISP-BOX-MIBV2-MIB", "codePoint0"), ("WHISP-BOX-MIBV2-MIB", "codePoint1"), ("WHISP-BOX-MIBV2-MIB", "codePoint2"), ("WHISP-BOX-MIBV2-MIB", "codePoint3"), ("WHISP-BOX-MIBV2-MIB", "codePoint4"), ("WHISP-BOX-MIBV2-MIB", "codePoint5"), ("WHISP-BOX-MIBV2-MIB", "codePoint6"), ("WHISP-BOX-MIBV2-MIB", "codePoint7"), ("WHISP-BOX-MIBV2-MIB", "codePoint8"), ("WHISP-BOX-MIBV2-MIB", "codePoint9"), ("WHISP-BOX-MIBV2-MIB", "codePoint10"), ("WHISP-BOX-MIBV2-MIB", "codePoint11"), ("WHISP-BOX-MIBV2-MIB", "codePoint12"), ("WHISP-BOX-MIBV2-MIB", "codePoint13"), ("WHISP-BOX-MIBV2-MIB", "codePoint14"), ("WHISP-BOX-MIBV2-MIB", "codePoint15"), ("WHISP-BOX-MIBV2-MIB", "codePoint16"), ("WHISP-BOX-MIBV2-MIB", "codePoint17"), ("WHISP-BOX-MIBV2-MIB", "codePoint18"), ("WHISP-BOX-MIBV2-MIB", "codePoint19"), ("WHISP-BOX-MIBV2-MIB", "codePoint20"), ("WHISP-BOX-MIBV2-MIB", "codePoint21"), ("WHISP-BOX-MIBV2-MIB", "codePoint22"), ("WHISP-BOX-MIBV2-MIB", "codePoint23"), ("WHISP-BOX-MIBV2-MIB", "codePoint24"), ("WHISP-BOX-MIBV2-MIB", "codePoint25"), ("WHISP-BOX-MIBV2-MIB", "codePoint26"), ("WHISP-BOX-MIBV2-MIB", "codePoint27"), ("WHISP-BOX-MIBV2-MIB", "codePoint28"), ("WHISP-BOX-MIBV2-MIB", "codePoint29"), ("WHISP-BOX-MIBV2-MIB", "codePoint30"), ("WHISP-BOX-MIBV2-MIB", "codePoint31"), ("WHISP-BOX-MIBV2-MIB", "codePoint32"), ("WHISP-BOX-MIBV2-MIB", "codePoint33"), ("WHISP-BOX-MIBV2-MIB", "codePoint34"), ("WHISP-BOX-MIBV2-MIB", "codePoint35"), ("WHISP-BOX-MIBV2-MIB", "codePoint36"), ("WHISP-BOX-MIBV2-MIB", "codePoint37"), ("WHISP-BOX-MIBV2-MIB", "codePoint38"), ("WHISP-BOX-MIBV2-MIB", "codePoint39"), ("WHISP-BOX-MIBV2-MIB", "codePoint40"), ("WHISP-BOX-MIBV2-MIB", "codePoint41"), ("WHISP-BOX-MIBV2-MIB", "codePoint42"), ("WHISP-BOX-MIBV2-MIB", "codePoint43"), ("WHISP-BOX-MIBV2-MIB", "codePoint44"), ("WHISP-BOX-MIBV2-MIB", "codePoint45"), ("WHISP-BOX-MIBV2-MIB", "codePoint46"), ("WHISP-BOX-MIBV2-MIB", "codePoint47"), ("WHISP-BOX-MIBV2-MIB", "codePoint48"), ("WHISP-BOX-MIBV2-MIB", "codePoint49"), ("WHISP-BOX-MIBV2-MIB", "codePoint50"), ("WHISP-BOX-MIBV2-MIB", "codePoint51"), ("WHISP-BOX-MIBV2-MIB", "codePoint52"), ("WHISP-BOX-MIBV2-MIB", "codePoint53"), ("WHISP-BOX-MIBV2-MIB", "codePoint54"), ("WHISP-BOX-MIBV2-MIB", "codePoint55"), ("WHISP-BOX-MIBV2-MIB", "codePoint56"), ("WHISP-BOX-MIBV2-MIB", "codePoint57"), ("WHISP-BOX-MIBV2-MIB", "codePoint58"), ("WHISP-BOX-MIBV2-MIB", "codePoint59"), ("WHISP-BOX-MIBV2-MIB", "codePoint60"), ("WHISP-BOX-MIBV2-MIB", "codePoint61"), ("WHISP-BOX-MIBV2-MIB", "codePoint62"), ("WHISP-BOX-MIBV2-MIB", "codePoint63"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxCPTableGroup = whispBoxCPTableGroup.setStatus('current')
whispBoxUserTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 6)).setObjects(("WHISP-BOX-MIBV2-MIB", "entryIndex"), ("WHISP-BOX-MIBV2-MIB", "userLoginName"), ("WHISP-BOX-MIBV2-MIB", "userPswd"), ("WHISP-BOX-MIBV2-MIB", "accessLevel"), ("WHISP-BOX-MIBV2-MIB", "loginStatus"), ("WHISP-BOX-MIBV2-MIB", "loginMethod"), ("WHISP-BOX-MIBV2-MIB", "sessionTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxUserTableGroup = whispBoxUserTableGroup.setStatus('current')
whispLayer2NeighborTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 7)).setObjects(("WHISP-BOX-MIBV2-MIB", "entryL2Index"), ("WHISP-BOX-MIBV2-MIB", "neighborMAC"), ("WHISP-BOX-MIBV2-MIB", "neighborIP"), ("WHISP-BOX-MIBV2-MIB", "neighborSiteName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispLayer2NeighborTableGroup = whispLayer2NeighborTableGroup.setStatus('current')
whispBoxNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 8)).setObjects(("WHISP-BOX-MIBV2-MIB", "boxLan1DHCPClientEvent"), ("WHISP-BOX-MIBV2-MIB", "boxPoEType2PowerNotPresent"), ("WHISP-BOX-MIBV2-MIB", "radioStatusAlarmEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxNotifGroup = whispBoxNotifGroup.setStatus('current')
whispBoxVLANRemarkTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 9)).setObjects(("WHISP-BOX-MIBV2-MIB", "sourceVID"), ("WHISP-BOX-MIBV2-MIB", "remarkVIDState"), ("WHISP-BOX-MIBV2-MIB", "remarkVID"), ("WHISP-BOX-MIBV2-MIB", "remarkPriorityState"), ("WHISP-BOX-MIBV2-MIB", "remarkPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxVLANRemarkTableGroup = whispBoxVLANRemarkTableGroup.setStatus('current')
whispBoxSNMPv3Group = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 10)).setObjects(("WHISP-BOX-MIBV2-MIB", "snmpv3EngineId"), ("WHISP-BOX-MIBV2-MIB", "snmpv3SecLvl"), ("WHISP-BOX-MIBV2-MIB", "snmpv3AuthProt"), ("WHISP-BOX-MIBV2-MIB", "snmpv3PrivProt"), ("WHISP-BOX-MIBV2-MIB", "roUserName"), ("WHISP-BOX-MIBV2-MIB", "roAuthPassword"), ("WHISP-BOX-MIBV2-MIB", "roPrivPassword"), ("WHISP-BOX-MIBV2-MIB", "rwUserEnable"), ("WHISP-BOX-MIBV2-MIB", "rwUserName"), ("WHISP-BOX-MIBV2-MIB", "rwAuthPassword"), ("WHISP-BOX-MIBV2-MIB", "rwPrivPassword"), ("WHISP-BOX-MIBV2-MIB", "userName1"), ("WHISP-BOX-MIBV2-MIB", "user1Enable"), ("WHISP-BOX-MIBV2-MIB", "user1AuthPassword"), ("WHISP-BOX-MIBV2-MIB", "user1PrivPassword"), ("WHISP-BOX-MIBV2-MIB", "userGroup1"), ("WHISP-BOX-MIBV2-MIB", "userName2"), ("WHISP-BOX-MIBV2-MIB", "user2Enable"), ("WHISP-BOX-MIBV2-MIB", "user2AuthPassword"), ("WHISP-BOX-MIBV2-MIB", "user2PrivPassword"), ("WHISP-BOX-MIBV2-MIB", "user2Group"), ("WHISP-BOX-MIBV2-MIB", "userName3"), ("WHISP-BOX-MIBV2-MIB", "user3Enable"), ("WHISP-BOX-MIBV2-MIB", "user3AuthPassword"), ("WHISP-BOX-MIBV2-MIB", "user3PrivPassword"), ("WHISP-BOX-MIBV2-MIB", "user3Group"), ("WHISP-BOX-MIBV2-MIB", "snmpv3TrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxSNMPv3Group = whispBoxSNMPv3Group.setStatus('current')
whispBoxLinkTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 11)).setObjects(("WHISP-BOX-MIBV2-MIB", "linkTestLUIDBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestDurationBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestActionBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestPktLengthBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestModeBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestSNRCalculationBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestWithDualPathBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestNumPktBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestForceModulationBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestDirectionBox"), ("WHISP-BOX-MIBV2-MIB", "testLUIDBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestStatusBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestErrorBox"), ("WHISP-BOX-MIBV2-MIB", "testDurationBox"), ("WHISP-BOX-MIBV2-MIB", "downLinkRateBox"), ("WHISP-BOX-MIBV2-MIB", "upLinkRateBox"), ("WHISP-BOX-MIBV2-MIB", "downLinkRateExtrapolatedBox"), ("WHISP-BOX-MIBV2-MIB", "upLinkRateExtrapolatedBox"), ("WHISP-BOX-MIBV2-MIB", "downLinkEffBox"), ("WHISP-BOX-MIBV2-MIB", "maxDwnLinkIndexBox"), ("WHISP-BOX-MIBV2-MIB", "actDwnLinkIndexBox"), ("WHISP-BOX-MIBV2-MIB", "expDwnFragCountBox"), ("WHISP-BOX-MIBV2-MIB", "actDwnFragCountBox"), ("WHISP-BOX-MIBV2-MIB", "upLinkEffBox"), ("WHISP-BOX-MIBV2-MIB", "expUpFragCountBox"), ("WHISP-BOX-MIBV2-MIB", "actUpFragCountBox"), ("WHISP-BOX-MIBV2-MIB", "maxUpLinkIndexBox"), ("WHISP-BOX-MIBV2-MIB", "actUpLinkIndexBox"), ("WHISP-BOX-MIBV2-MIB", "fragments1xDwnLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments2xDwnLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments3xDwnLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments4xDwnLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments1xUpLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments2xUpLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments3xUpLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments4xUpLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments1xDwnLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments2xDwnLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments3xDwnLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments4xDwnLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments1xUpLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments2xUpLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments3xUpLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments4xUpLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected1xDwnLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected2xDwnLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected3xDwnLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected4xDwnLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected1xUpLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected2xUpLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected3xUpLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected4xUpLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "signalToNoiseRatioDownLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "signalToNoiseRatioUpLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected1xDwnLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected2xDwnLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected3xDwnLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected4xDwnLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected1xUpLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected2xUpLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected3xUpLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected4xUpLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "signalToNoiseRatioDownLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "signalToNoiseRatioUpLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestLastRunTime"), ("WHISP-BOX-MIBV2-MIB", "linkTestMissedFragDwnLink"), ("WHISP-BOX-MIBV2-MIB", "linkTestMissedFragUpLink"), ("WHISP-BOX-MIBV2-MIB", "linkTestNumPktTxActCnt"), ("WHISP-BOX-MIBV2-MIB", "linkTestNumPktTxExpCnt"), ("WHISP-BOX-MIBV2-MIB", "linkTestNumPktRxActCnt"), ("WHISP-BOX-MIBV2-MIB", "linkTestNumPktRxExpCnt"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCVC"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCPriority"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCXmtFragsDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCRcvFragsDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCThroughputDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCEfficiencyDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCSumimoModRateDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCSumimoXmtModeDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCMumimoModRateDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCMumimoXmtModeDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCGroupingRatioDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCXmtFragsTotalDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCRcvFragsTotalDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCThroughputTotalDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCThroughputTotalUntestedVCsDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCEfficiencyTotalDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCSlotDistributionDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestFloodModeBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestMumimoBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestVCListBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestSMRestriction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxLinkTestGroup = whispBoxLinkTestGroup.setStatus('current')
whispBridgeTbUsed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeTbUsed.setStatus('current')
whispBridgeTbFree = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeTbFree.setStatus('current')
whispBridgeTbErr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeTbErr.setStatus('current')
codePoint0 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: codePoint0.setStatus('current')
codePoint1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint1.setStatus('current')
codePoint2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint2.setStatus('current')
codePoint3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint3.setStatus('current')
codePoint4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint4.setStatus('current')
codePoint5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint5.setStatus('current')
codePoint6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint6.setStatus('current')
codePoint7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint7.setStatus('current')
codePoint8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint8.setStatus('current')
codePoint9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint9.setStatus('current')
codePoint10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint10.setStatus('current')
codePoint11 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint11.setStatus('current')
codePoint12 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint12.setStatus('current')
codePoint13 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint13.setStatus('current')
codePoint14 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint14.setStatus('current')
codePoint15 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint15.setStatus('current')
codePoint16 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint16.setStatus('current')
codePoint17 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint17.setStatus('current')
codePoint18 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint18.setStatus('current')
codePoint19 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint19.setStatus('current')
codePoint20 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint20.setStatus('current')
codePoint21 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint21.setStatus('current')
codePoint22 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint22.setStatus('current')
codePoint23 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint23.setStatus('current')
codePoint24 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint24.setStatus('current')
codePoint25 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint25.setStatus('current')
codePoint26 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint26.setStatus('current')
codePoint27 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint27.setStatus('current')
codePoint28 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint28.setStatus('current')
codePoint29 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint29.setStatus('current')
codePoint30 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint30.setStatus('current')
codePoint31 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint31.setStatus('current')
codePoint32 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint32.setStatus('current')
codePoint33 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint33.setStatus('current')
codePoint34 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint34.setStatus('current')
codePoint35 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint35.setStatus('current')
codePoint36 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint36.setStatus('current')
codePoint37 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint37.setStatus('current')
codePoint38 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint38.setStatus('current')
codePoint39 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint39.setStatus('current')
codePoint40 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint40.setStatus('current')
codePoint41 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint41.setStatus('current')
codePoint42 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint42.setStatus('current')
codePoint43 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint43.setStatus('current')
codePoint44 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint44.setStatus('current')
codePoint45 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint45.setStatus('current')
codePoint46 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint46.setStatus('current')
codePoint47 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint47.setStatus('current')
codePoint48 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: codePoint48.setStatus('current')
codePoint49 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint49.setStatus('current')
codePoint50 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint50.setStatus('current')
codePoint51 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint51.setStatus('current')
codePoint52 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint52.setStatus('current')
codePoint53 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint53.setStatus('current')
codePoint54 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint54.setStatus('current')
codePoint55 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint55.setStatus('current')
codePoint56 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: codePoint56.setStatus('current')
codePoint57 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint57.setStatus('current')
codePoint58 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint58.setStatus('current')
codePoint59 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint59.setStatus('current')
codePoint60 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint60.setStatus('current')
codePoint61 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint61.setStatus('current')
codePoint62 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 63), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint62.setStatus('current')
codePoint63 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 64), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint63.setStatus('current')
boxLan1DHCPClientEvent = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 12, 1, 1)).setObjects(("WHISP-BOX-MIBV2-MIB", "dhcpLanIp"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: boxLan1DHCPClientEvent.setStatus('current')
boxPoEType2PowerNotPresent = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 12, 2, 1)).setObjects(("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: boxPoEType2PowerNotPresent.setStatus('current')
radioStatusAlarmEvent = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 12, 3, 1)).setObjects(("WHISP-BOX-MIBV2-MIB", "radioStatusAlarmReason"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: radioStatusAlarmEvent.setStatus('current')
dnsIpState = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("manual", 0), ("automatic", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsIpState.setStatus('current')
dnsPrimaryMgmtIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsPrimaryMgmtIP.setStatus('current')
dnsAlternateMgmtIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsAlternateMgmtIP.setStatus('current')
dnsMgmtDomainName = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsMgmtDomainName.setStatus('current')
trapDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDomain", 0), ("appendDomain", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDomainNameAppend.setStatus('current')
trap1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap1.setStatus('current')
trap2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap2.setStatus('current')
trap3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap3.setStatus('current')
trap4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap4.setStatus('current')
trap5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap5.setStatus('current')
trap6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap6.setStatus('current')
trap7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap7.setStatus('current')
trap8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap8.setStatus('current')
trap9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap9.setStatus('current')
trap10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap10.setStatus('current')
snmpv2cEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv2cEnable.setStatus('current')
snmpv3EngineId = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3EngineId.setStatus('current')
snmpv3SecLvl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAuth-noPriv", 0), ("auth-noPriv", 1), ("auth-priv", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3SecLvl.setStatus('current')
snmpv3AuthProt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("md5", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3AuthProt.setStatus('current')
snmpv3PrivProt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("cbc-des", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3PrivProt.setStatus('current')
roUserName = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roUserName.setStatus('current')
roAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roAuthPassword.setStatus('current')
roPrivPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roPrivPassword.setStatus('current')
rwUserEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rwUserEnable.setStatus('current')
rwUserName = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rwUserName.setStatus('current')
rwAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rwAuthPassword.setStatus('current')
rwPrivPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rwPrivPassword.setStatus('current')
snmpv3TrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("roUserTrapEnable", 1), ("rwUserTrapEnable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3TrapEnable.setStatus('current')
user1Enable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: user1Enable.setStatus('current')
userName1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName1.setStatus('current')
user1AuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: user1AuthPassword.setStatus('current')
user1PrivPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: user1PrivPassword.setStatus('current')
userGroup1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("readwrite", 1), ("readonly", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userGroup1.setStatus('current')
userName2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName2.setStatus('current')
user2Enable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: user2Enable.setStatus('current')
user2AuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: user2AuthPassword.setStatus('current')
user2PrivPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: user2PrivPassword.setStatus('current')
user2Group = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("readwrite", 1), ("readonly", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: user2Group.setStatus('current')
userName3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName3.setStatus('current')
user3Enable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: user3Enable.setStatus('current')
user3AuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: user3AuthPassword.setStatus('current')
user3PrivPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: user3PrivPassword.setStatus('current')
user3Group = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("readwrite", 1), ("readonly", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: user3Group.setStatus('current')
whispRegStatusBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispRegStatusBox.setStatus('obsolete')
linkTestLUIDBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestLUIDBox.setStatus('current')
linkTestDurationBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestDurationBox.setStatus('current')
linkTestActionBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("stopped", 0), ("start", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestActionBox.setStatus('current')
linkTestPktLengthBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestPktLengthBox.setStatus('current')
linkTestModeBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 0, 1, 2, 3))).clone(namedValues=NamedValues(("linktestwithmultipleVCs", 4), ("linktestwithoutbridging", 0), ("linktestwithbridging", 1), ("linktestwithbridgingandmir", 2), ("extrapolatedlinktest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestModeBox.setStatus('current')
linkTestSNRCalculationBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestSNRCalculationBox.setStatus('current')
linkTestWithDualPathBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("lowpriorityvconly", 0), ("highandlowpriorityvcs", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestWithDualPathBox.setStatus('current')
linkTestNumPktBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestNumPktBox.setStatus('current')
linkTestForceModulationBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normalRateAdapt", 0), ("forceMaxModulation", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestForceModulationBox.setStatus('current')
linkTestDirectionBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("bidirectional", 0), ("uplinkonly", 1), ("downlinkonly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestDirectionBox.setStatus('current')
linkTestFloodModeBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("external", 0), ("internal", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestFloodModeBox.setStatus('current')
linkTestMumimoBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestMumimoBox.setStatus('current')
linkTestVCListBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestVCListBox.setStatus('current')
linkTestSMRestriction = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestSMRestriction.setStatus('current')
testLUIDBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: testLUIDBox.setStatus('current')
linkTestStatusBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestStatusBox.setStatus('current')
linkTestErrorBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestErrorBox.setStatus('current')
testDurationBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: testDurationBox.setStatus('current')
downLinkRateBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 5), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: downLinkRateBox.setStatus('current')
upLinkRateBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 6), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upLinkRateBox.setStatus('current')
downLinkEffBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 7), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: downLinkEffBox.setStatus('current')
maxDwnLinkIndexBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxDwnLinkIndexBox.setStatus('current')
actDwnLinkIndexBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actDwnLinkIndexBox.setStatus('current')
expDwnFragCountBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDwnFragCountBox.setStatus('current')
actDwnFragCountBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actDwnFragCountBox.setStatus('current')
upLinkEffBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 12), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: upLinkEffBox.setStatus('current')
expUpFragCountBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expUpFragCountBox.setStatus('current')
actUpFragCountBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actUpFragCountBox.setStatus('current')
maxUpLinkIndexBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxUpLinkIndexBox.setStatus('current')
actUpLinkIndexBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actUpLinkIndexBox.setStatus('current')
fragments1xDwnLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments1xDwnLinkVerticalBox.setStatus('current')
fragments2xDwnLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments2xDwnLinkVerticalBox.setStatus('current')
fragments3xDwnLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments3xDwnLinkVerticalBox.setStatus('current')
fragments4xDwnLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments4xDwnLinkVerticalBox.setStatus('current')
fragments1xUpLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments1xUpLinkVerticalBox.setStatus('current')
fragments2xUpLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments2xUpLinkVerticalBox.setStatus('current')
fragments3xUpLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments3xUpLinkVerticalBox.setStatus('current')
fragments4xUpLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments4xUpLinkVerticalBox.setStatus('current')
bitErrorsCorrected1xDwnLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected1xDwnLinkVerticalBox.setStatus('current')
bitErrorsCorrected2xDwnLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected2xDwnLinkVerticalBox.setStatus('current')
bitErrorsCorrected3xDwnLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected3xDwnLinkVerticalBox.setStatus('current')
bitErrorsCorrected4xDwnLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected4xDwnLinkVerticalBox.setStatus('current')
bitErrorsCorrected1xUpLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected1xUpLinkVerticalBox.setStatus('current')
bitErrorsCorrected2xUpLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected2xUpLinkVerticalBox.setStatus('current')
bitErrorsCorrected3xUpLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected3xUpLinkVerticalBox.setStatus('current')
bitErrorsCorrected4xUpLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected4xUpLinkVerticalBox.setStatus('current')
signalToNoiseRatioDownLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioDownLinkVerticalBox.setStatus('current')
signalToNoiseRatioUpLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioUpLinkVerticalBox.setStatus('current')
fragments1xDwnLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments1xDwnLinkHorizontalBox.setStatus('current')
fragments2xDwnLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments2xDwnLinkHorizontalBox.setStatus('current')
fragments3xDwnLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments3xDwnLinkHorizontalBox.setStatus('current')
fragments4xDwnLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments4xDwnLinkHorizontalBox.setStatus('current')
fragments1xUpLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments1xUpLinkHorizontalBox.setStatus('current')
fragments2xUpLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments2xUpLinkHorizontalBox.setStatus('current')
fragments3xUpLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments3xUpLinkHorizontalBox.setStatus('current')
fragments4xUpLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments4xUpLinkHorizontalBox.setStatus('current')
bitErrorsCorrected1xDwnLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected1xDwnLinkHorizontalBox.setStatus('current')
bitErrorsCorrected2xDwnLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected2xDwnLinkHorizontalBox.setStatus('current')
bitErrorsCorrected3xDwnLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected3xDwnLinkHorizontalBox.setStatus('current')
bitErrorsCorrected4xDwnLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected4xDwnLinkHorizontalBox.setStatus('current')
bitErrorsCorrected1xUpLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 47), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected1xUpLinkHorizontalBox.setStatus('current')
bitErrorsCorrected2xUpLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected2xUpLinkHorizontalBox.setStatus('current')
bitErrorsCorrected3xUpLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected3xUpLinkHorizontalBox.setStatus('current')
bitErrorsCorrected4xUpLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 50), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected4xUpLinkHorizontalBox.setStatus('current')
signalToNoiseRatioDownLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioDownLinkHorizontalBox.setStatus('current')
signalToNoiseRatioUpLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioUpLinkHorizontalBox.setStatus('current')
downLinkRateExtrapolatedBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 53), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: downLinkRateExtrapolatedBox.setStatus('current')
upLinkRateExtrapolatedBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 54), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upLinkRateExtrapolatedBox.setStatus('current')
linkTestLastRunTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 55), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestLastRunTime.setStatus('current')
linkTestMissedFragDwnLink = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMissedFragDwnLink.setStatus('current')
linkTestMissedFragUpLink = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMissedFragUpLink.setStatus('current')
linkTestNumPktTxActCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestNumPktTxActCnt.setStatus('current')
linkTestNumPktTxExpCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestNumPktTxExpCnt.setStatus('current')
linkTestNumPktRxActCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestNumPktRxActCnt.setStatus('current')
linkTestNumPktRxExpCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestNumPktRxExpCnt.setStatus('current')
linkTestMVCXmtFragsTotalDL = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCXmtFragsTotalDL.setStatus('current')
linkTestMVCRcvFragsTotalDL = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCRcvFragsTotalDL.setStatus('current')
linkTestMVCThroughputTotalDL = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCThroughputTotalDL.setStatus('current')
linkTestMVCThroughputTotalUntestedVCsDL = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCThroughputTotalUntestedVCsDL.setStatus('current')
linkTestMVCEfficiencyTotalDL = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCEfficiencyTotalDL.setStatus('current')
linkTestMVCSlotDistributionDL = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 5, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCSlotDistributionDL.setStatus('current')
whispBoxLinkTestMVCTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6), )
if mibBuilder.loadTexts: whispBoxLinkTestMVCTable.setStatus('current')
whispBoxLinkTestMVCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "linkTestMVCVC"))
if mibBuilder.loadTexts: whispBoxLinkTestMVCEntry.setStatus('current')
linkTestMVCVC = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCVC.setStatus('current')
linkTestMVCPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCPriority.setStatus('current')
linkTestMVCXmtFragsDL = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCXmtFragsDL.setStatus('current')
linkTestMVCRcvFragsDL = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCRcvFragsDL.setStatus('current')
linkTestMVCThroughputDL = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCThroughputDL.setStatus('current')
linkTestMVCEfficiencyDL = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCEfficiencyDL.setStatus('current')
linkTestMVCSumimoModRateDL = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 8))).clone(namedValues=NamedValues(("noSession", 0), ("rate1X", 1), ("rate2X", 2), ("rete3X", 3), ("rate4X", 4), ("rate6X", 6), ("rate8X", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCSumimoModRateDL.setStatus('current')
linkTestMVCSumimoXmtModeDL = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("mimo-b", 0), ("mimo-a", 1), ("noSession", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCSumimoXmtModeDL.setStatus('current')
linkTestMVCMumimoModRateDL = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 8))).clone(namedValues=NamedValues(("invalid", 0), ("rate1X", 1), ("rate2X", 2), ("rete3X", 3), ("rate4X", 4), ("rate6X", 6), ("rate8X", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCMumimoModRateDL.setStatus('current')
linkTestMVCMumimoXmtModeDL = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("mimo-b", 0), ("mimo-a", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCMumimoXmtModeDL.setStatus('current')
linkTestMVCGroupingRatioDL = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCGroupingRatioDL.setStatus('current')
certTableUserAuth = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 19, 1), )
if mibBuilder.loadTexts: certTableUserAuth.setStatus('current')
certEntryUserAuth = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 19, 1, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "certIdx"))
if mibBuilder.loadTexts: certEntryUserAuth.setStatus('current')
certIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: certIdx.setStatus('current')
certStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: certStatus.setStatus('current')
certAction = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noop", 0), ("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certAction.setStatus('current')
certDN = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 19, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certDN.setStatus('current')
whispBoxRFPhysicalRadios = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 1), )
if mibBuilder.loadTexts: whispBoxRFPhysicalRadios.setStatus('current')
whispBoxRFPhysicalRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 1, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "radioIndex"))
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioEntry.setStatus('current')
radioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioIndex.setStatus('current')
radioType = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fsk", 0), ("ofdm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioType.setStatus('current')
radioPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioPaths.setStatus('current')
whispBoxRFPhysicalRadioPaths = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 2), )
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioPaths.setStatus('current')
whispBoxRFPhysicalRadioPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 2, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "radioIndex"), (0, "WHISP-BOX-MIBV2-MIB", "pathIndex"))
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioPathEntry.setStatus('current')
pathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathIndex.setStatus('current')
whispBoxRFPhysicalRadioFrequencies = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 3), )
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioFrequencies.setStatus('current')
whispBoxRFPhysicalRadioFrequencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 3, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "radioIndex"), (0, "WHISP-BOX-MIBV2-MIB", "frequency"))
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioFrequencyEntry.setStatus('current')
frequency = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequency.setStatus('current')
whispBoxRFConfigRadios = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 16, 1), )
if mibBuilder.loadTexts: whispBoxRFConfigRadios.setStatus('current')
whispBoxRFConfigRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 16, 1, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "radioConfigIndex"))
if mibBuilder.loadTexts: whispBoxRFConfigRadioEntry.setStatus('current')
radioConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioConfigIndex.setStatus('current')
radioFrequencyBand = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("band700", 0), ("band900", 1), ("band2400", 2), ("band3500", 3), ("band3700", 4), ("band4900", 5), ("band5100", 6), ("band5200", 7), ("band5400", 8), ("band5700", 9), ("band5800", 10), ("band5900", 11), ("band6050", 12), ("band3600", 13), ("band4959", 14), ("band3", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioFrequencyBand.setStatus('current')
whispBoxBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4), )
if mibBuilder.loadTexts: whispBoxBridgeTable.setStatus('current')
whispBoxBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "whispBridgeMacAddr"))
if mibBuilder.loadTexts: whispBoxBridgeEntry.setStatus('current')
whispBridgeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeMacAddr.setStatus('current')
whispBridgeDesLuid = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4, 1, 2), WhispLUID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeDesLuid.setStatus('current')
whispBridgeAge = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeAge.setStatus('current')
whispBridgeExt = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeExt.setStatus('current')
whispBridgeHash = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeHash.setStatus('current')
whispBridgeCAM = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeCAM.setStatus('obsolete')
whispVLANTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 8), )
if mibBuilder.loadTexts: whispVLANTable.setStatus('current')
whispVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 8, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "whispVID"))
if mibBuilder.loadTexts: whispVLANEntry.setStatus('current')
whispVID = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispVID.setStatus('current')
whispVType = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispVType.setStatus('current')
whispVAge = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispVAge.setStatus('current')
whispVLANRemarkTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 17), )
if mibBuilder.loadTexts: whispVLANRemarkTable.setStatus('current')
whispVLANRemarkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 17, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "sourceVID"))
if mibBuilder.loadTexts: whispVLANRemarkEntry.setStatus('current')
sourceVID = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceVID.setStatus('current')
remarkVIDState = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 17, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remarkVIDState.setStatus('current')
remarkVID = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remarkVID.setStatus('current')
remarkPriorityState = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 17, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remarkPriorityState.setStatus('current')
remarkPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remarkPriority.setStatus('current')
whispUserTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10), )
if mibBuilder.loadTexts: whispUserTable.setStatus('current')
whispUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "entryIndex"))
if mibBuilder.loadTexts: whispUserEntry.setStatus('current')
entryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entryIndex.setStatus('current')
userLoginName = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userLoginName.setStatus('current')
userPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userPswd.setStatus('current')
accessLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessLevel.setStatus('current')
loginStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loginStatus.setStatus('current')
loginMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loginMethod.setStatus('current')
sessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionTime.setStatus('current')
whispLayer2NeighborTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 11), )
if mibBuilder.loadTexts: whispLayer2NeighborTable.setStatus('current')
whispLayer2NeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 11, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "entryL2Index"))
if mibBuilder.loadTexts: whispLayer2NeighborEntry.setStatus('current')
entryL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entryL2Index.setStatus('current')
neighborMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborMAC.setStatus('current')
neighborIP = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborIP.setStatus('current')
neighborSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborSiteName.setStatus('current')
mibBuilder.exportSymbols("WHISP-BOX-MIBV2-MIB", whispVLANRemarkEntry=whispVLANRemarkEntry, codePoint3=codePoint3, boxDeviceTypeID=boxDeviceTypeID, packetOverloadCounter=packetOverloadCounter, fragments3xUpLinkHorizontalBox=fragments3xUpLinkHorizontalBox, regionSouthAmerica=regionSouthAmerica, managementVIDPriorityMode=managementVIDPriorityMode, whispBoxNotifGroup=whispBoxNotifGroup, codePoint55=codePoint55, catalinaGainRxCH2=catalinaGainRxCH2, codePoint0=codePoint0, allowColocation=allowColocation, pppoeFilter=pppoeFilter, catalinaAttenTxCH1=catalinaAttenTxCH1, codePoint12=codePoint12, whispBoxLink=whispBoxLink, port1TCPFilter=port1TCPFilter, bitErrorsCorrected1xUpLinkVerticalBox=bitErrorsCorrected1xUpLinkVerticalBox, codePoint28=codePoint28, boxDeviceType=boxDeviceType, trap9=trap9, ftpStatus=ftpStatus, rfStatUnsupFeatBcnRcvCnt=rfStatUnsupFeatBcnRcvCnt, bhTimingMode=bhTimingMode, downLinkEffBox=downLinkEffBox, mac4VIDMapPriority=mac4VIDMapPriority, fecTxHbErr=fecTxHbErr, syslogStatTxSuccesses=syslogStatTxSuccesses, allIpv4Filter=allIpv4Filter, radioStatusSectorWeightsOff=radioStatusSectorWeightsOff, userP1Filter=userP1Filter, radioStatusAlarmReason=radioStatusAlarmReason, mac9VIDMapAddr=mac9VIDMapAddr, mac1VIDMapPriority=mac1VIDMapPriority, linkTestModeBox=linkTestModeBox, linkTestMVCGroupingRatioDL=linkTestMVCGroupingRatioDL, fecLargeFrame=fecLargeFrame, apType=apType, bridgeCbEthAuxStatbtosscap=bridgeCbEthAuxStatbtosscap, regionEurope=regionEurope, codePoint43=codePoint43, soundingStatResponseCount=soundingStatResponseCount, codePoint1=codePoint1, remarkPriorityState=remarkPriorityState, userDefinedPort2=userDefinedPort2, receiveQualityDebug=receiveQualityDebug, linkTestMVCVC=linkTestMVCVC, whispBoxLinkTestMVCResult=whispBoxLinkTestMVCResult, arpFilter=arpFilter, whispRegStatusBox=whispRegStatusBox, subnetMask7=subnetMask7, whispBoxAttributesGroup=whispBoxAttributesGroup, codePoint34=codePoint34, extFilterDelay=extFilterDelay, roPrivPassword=roPrivPassword, rfOutDiscardsCount=rfOutDiscardsCount, codePoint11=codePoint11, subnetMask=subnetMask, soundingStatResponsesSuppressed=soundingStatResponsesSuppressed, fecRxOverrun=fecRxOverrun, whispBoxSNMPv3Group=whispBoxSNMPv3Group, agingTimeout=agingTimeout, trap6=trap6, rfStatnonLiteBcnRcvCnt=rfStatnonLiteBcnRcvCnt, allowVIDAccess=allowVIDAccess, rfPublicDhcpStatus=rfPublicDhcpStatus, natDhcpStatus=natDhcpStatus, fecRxFifoNoBuf=fecRxFifoNoBuf, bridgeCbRFStatutoss=bridgeCbRFStatutoss, codePoint33=codePoint33, userLoginName=userLoginName, dhcpLanGateway=dhcpLanGateway, ethernetPortSelection=ethernetPortSelection, port2UDPFilter=port2UDPFilter, bhvlanEnable=bhvlanEnable, loginMethod=loginMethod, linkTestLUIDBox=linkTestLUIDBox, linkTestMVCRcvFragsTotalDL=linkTestMVCRcvFragsTotalDL, whispBoxBridgeTable=whispBoxBridgeTable, linkTestStatusBox=linkTestStatusBox, radioStatusRxBeamFormingOff=radioStatusRxBeamFormingOff, bridgeCbFecStatuout=bridgeCbFecStatuout, codePoint47=codePoint47, rfStatXmtBDataCnt=rfStatXmtBDataCnt, userName=userName, actDwnLinkIndexBox=actDwnLinkIndexBox, commStringROnly=commStringROnly, region=region, whispBridgeCAM=whispBridgeCAM, lan1DhcpRelease=lan1DhcpRelease, whispBridgeExt=whispBridgeExt, addVlanMember=addVlanMember, tcpAckPriority=tcpAckPriority, bitErrorsCorrected1xDwnLinkVerticalBox=bitErrorsCorrected1xDwnLinkVerticalBox, trapIP1=trapIP1, codePoint16=codePoint16, camOnboardKey=camOnboardKey, mngtIP4=mngtIP4, linkTestLastRunTime=linkTestLastRunTime, codePoint57=codePoint57, rwAuthPassword=rwAuthPassword, linkTestMissedFragDwnLink=linkTestMissedFragDwnLink, whispBoxRFPhysicalRadios=whispBoxRFPhysicalRadios, rfStatOverrunCount=rfStatOverrunCount, port1UDPFilter=port1UDPFilter, bridgeEnable=bridgeEnable, daVersion=daVersion, userName3=userName3, radioStatusTrackingFailure=radioStatusTrackingFailure, whispBoxRFConfigRadios=whispBoxRFConfigRadios, radioStatusAlarmEvent=radioStatusAlarmEvent, mac9VIDMapVid=mac9VIDMapVid, radioMSN=radioMSN, catalinaAttenTxCH2=catalinaAttenTxCH2, codePoint36=codePoint36, rfStatXmtMDataCnt=rfStatXmtMDataCnt, userDefinedPort1=userDefinedPort1, codePoint30=codePoint30, fecRuntFrame=fecRuntFrame, bridgeCbRFStatuout=bridgeCbRFStatuout, dnsIpState=dnsIpState, snmpv3PrivProt=snmpv3PrivProt, whispVAge=whispVAge, nearFieldOperation=nearFieldOperation, exportConfigFile=exportConfigFile, fecAuxOutDiscardsCount=fecAuxOutDiscardsCount, fecRetransLimitExp=fecRetransLimitExp, bridgeCbFecStatutoss=bridgeCbFecStatutoss, mac3VIDMapPriority=mac3VIDMapPriority, mac8VIDMapVid=mac8VIDMapVid, mac3VIDMapVid=mac3VIDMapVid, user1PrivPassword=user1PrivPassword, fecOutDiscardsCount=fecOutDiscardsCount, codePoint54=codePoint54, whispBoxCPVar=whispBoxCPVar, bitErrorsCorrected4xUpLinkVerticalBox=bitErrorsCorrected4xUpLinkVerticalBox, codePoint7=codePoint7, bridgeCbEthAuxStatutosscap=bridgeCbEthAuxStatutosscap, mac2VIDMapPriorityMode=mac2VIDMapPriorityMode, bitErrorsCorrected1xUpLinkHorizontalBox=bitErrorsCorrected1xUpLinkHorizontalBox, gpsInput=gpsInput, catalinaCurrDetReadPowerOnTxCH1=catalinaCurrDetReadPowerOnTxCH1, bridgeCbEthAuxStatuin=bridgeCbEthAuxStatuin, dnsPrimaryMgmtIP=dnsPrimaryMgmtIP, simulatedAirDelay=simulatedAirDelay, snmpv3EngineId=snmpv3EngineId, mngtIP7=mngtIP7, codePoint8=codePoint8, nearFieldRange=nearFieldRange, telnetStatus=telnetStatus, rfStatPLLOutOfLockCnt=rfStatPLLOutOfLockCnt, port3TCPFilter=port3TCPFilter, bridgeCbRFStatuin=bridgeCbRFStatuin, bitErrorsCorrected3xUpLinkVerticalBox=bitErrorsCorrected3xUpLinkVerticalBox, whispVLANRemarkTable=whispVLANRemarkTable, linkTestFloodModeBox=linkTestFloodModeBox, mngtIP10=mngtIP10, syslogStatDropped=syslogStatDropped, radioRateAdapt=radioRateAdapt, user3Enable=user3Enable, whispBridgeAge=whispBridgeAge, port3UDPFilter=port3UDPFilter, snmpMibPerm=snmpMibPerm, signalToNoiseRatioDownLinkHorizontalBox=signalToNoiseRatioDownLinkHorizontalBox, fragments2xUpLinkHorizontalBox=fragments2xUpLinkHorizontalBox, usrAccountEnableAccounting=usrAccountEnableAccounting, addCustomFreqMimo=addCustomFreqMimo, trapIP8=trapIP8, subnetMask5=subnetMask5, catalinaLoAttenRxCH2=catalinaLoAttenRxCH2, codePoint9=codePoint9, dnsMgmtDomainName=dnsMgmtDomainName, whispBoxRFPhysicalRadioFrequencies=whispBoxRFPhysicalRadioFrequencies, bandwidth=bandwidth, camID=camID, whispVID=whispVID, rfStatRcvBDataCnt=rfStatRcvBDataCnt, rxOverrunPkts=rxOverrunPkts, rfStatRcvLTResult=rfStatRcvLTResult, russiaRegion=russiaRegion, rfStatInSyncCount=rfStatInSyncCount, fecOutErrorsCount=fecOutErrorsCount, portVID=portVID, bridgeCbFecStatbtosscap=bridgeCbFecStatbtosscap, bridgeCbEthAuxStatfloods=bridgeCbEthAuxStatfloods, codePoint29=codePoint29, inSyncCount=inSyncCount, catalinaCurrDetSetpointTxCH1=catalinaCurrDetSetpointTxCH1, ipv6bootpcFilter=ipv6bootpcFilter, snmpTrapPort=snmpTrapPort, mac7VIDMapPriority=mac7VIDMapPriority, whispBoxP11FPGAType=whispBoxP11FPGAType, snmpFilter=snmpFilter, whispBoxGroups=whispBoxGroups, natDhcpRenew=natDhcpRenew, importConfigFile=importConfigFile, subnetMask4=subnetMask4, rfStatUnderrunCount=rfStatUnderrunCount, whispBoxUserTableGroup=whispBoxUserTableGroup, rfOutDiscardsCountExt=rfOutDiscardsCountExt, certStatus=certStatus, rfStatXmtLTResult=rfStatXmtLTResult, channelBandwidth=channelBandwidth, regionOtherRegulatory=regionOtherRegulatory, frequency=frequency, soundingStatErrorCount=soundingStatErrorCount, timedSpectrumAnalysisDurationBox=timedSpectrumAnalysisDurationBox, boxPoEType2PowerNotPresent=boxPoEType2PowerNotPresent, soundingStatClear=soundingStatClear, mac8VIDMapAddr=mac8VIDMapAddr, catalinaGainRxCH1=catalinaGainRxCH1, linkTestMVCRcvFragsDL=linkTestMVCRcvFragsDL, fecExcessiveDeferrals=fecExcessiveDeferrals, user2AuthPassword=user2AuthPassword, codePoint35=codePoint35, whispBoxLinkTestConfig=whispBoxLinkTestConfig, whispBoxPoEEvent=whispBoxPoEEvent, catalinaCurrDetReadRefTxCH1=catalinaCurrDetReadRefTxCH1, codePoint61=codePoint61, updateDevice=updateDevice, neighborMAC=neighborMAC, mac3VIDMapPriorityMode=mac3VIDMapPriorityMode, removeCustomFreqMimo=removeCustomFreqMimo, linkTestErrorBox=linkTestErrorBox, PYSNMP_MODULE_ID=whispBoxLevelMibModule, catalinaTargetGainRxCH2=catalinaTargetGainRxCH2, userP2Filter=userP2Filter, fragments1xDwnLinkVerticalBox=fragments1xDwnLinkVerticalBox, whispVType=whispVType, whispUsrAuth=whispUsrAuth, mac6VIDMapPriorityMode=mac6VIDMapPriorityMode, bridgeCbRFStatutosscap=bridgeCbRFStatutosscap, mac5VIDMapPriorityMode=mac5VIDMapPriorityMode, aggregateBandwidthCap=aggregateBandwidthCap, whispVLANEntry=whispVLANEntry, hiPriority=hiPriority, user3AuthPassword=user3AuthPassword, linkTestDirectionBox=linkTestDirectionBox, activeTxPowerHdths=activeTxPowerHdths, fecRxBabErr=fecRxBabErr, fecStatLinkDetected=fecStatLinkDetected, numDFSDetections=numDFSDetections, codePoint25=codePoint25, forceReassessmentActive=forceReassessmentActive, ipv6smbFilter=ipv6smbFilter, mac5VIDMapPriority=mac5VIDMapPriority, linkTestSNRCalculationBox=linkTestSNRCalculationBox, remarkVIDState=remarkVIDState, mac3VIDMapAddr=mac3VIDMapAddr, mac9VIDMapPriority=mac9VIDMapPriority, linkTestMVCSlotDistributionDL=linkTestMVCSlotDistributionDL, height=height, mac4VIDMapVid=mac4VIDMapVid, subnetMask3=subnetMask3)
mibBuilder.exportSymbols("WHISP-BOX-MIBV2-MIB", bridgeCbRFStatbin=bridgeCbRFStatbin, saveFlash=saveFlash, allOthersFilter=allOthersFilter, fragments4xUpLinkVerticalBox=fragments4xUpLinkVerticalBox, boxTemperature=boxTemperature, rfInDiscardsOverloadCount=rfInDiscardsOverloadCount, rfStatTempOutOfRange=rfStatTempOutOfRange, trapIP3=trapIP3, codePoint26=codePoint26, bridgeCbErrStatSendMsg=bridgeCbErrStatSendMsg, boxTemperatureC=boxTemperatureC, userAccessLevel=userAccessLevel, fecAuxTxUnderrun=fecAuxTxUnderrun, scheduling=scheduling, latitude=latitude, rfStatRcvLTStart=rfStatRcvLTStart, userPassword=userPassword, mac5VIDMapAddr=mac5VIDMapAddr, userPswd=userPswd, ftpPort=ftpPort, bridgeCbEthAuxStatuout=bridgeCbEthAuxStatuout, whispBoxSoftwareVer=whispBoxSoftwareVer, trapIP9=trapIP9, syslogMinLevel=syslogMinLevel, whispBoxP11Personality=whispBoxP11Personality, mac2VIDMapVid=mac2VIDMapVid, dynamicLearning=dynamicLearning, whispBoxFPGAVer=whispBoxFPGAVer, catalinaCurrDetReadRefTxCH2=catalinaCurrDetReadRefTxCH2, bridgeCbErrStatNI1QSend=bridgeCbErrStatNI1QSend, whispBoxControls=whispBoxControls, radioRateAdaptUL=radioRateAdaptUL, whispBoxRadioAlarmEvent=whispBoxRadioAlarmEvent, undoUnitWideSavedChanges=undoUnitWideSavedChanges, whispBoxRFPhysicalRadioEntry=whispBoxRFPhysicalRadioEntry, pass1Status=pass1Status, snmpStatus=snmpStatus, whispBoxEventLog=whispBoxEventLog, codePoint46=codePoint46, frameType=frameType, displayOnlyAccess=displayOnlyAccess, mac8VIDMapPriorityMode=mac8VIDMapPriorityMode, whispBoxRFConfig=whispBoxRFConfig, boxFrequency=boxFrequency, bitErrorsCorrected2xDwnLinkVerticalBox=bitErrorsCorrected2xDwnLinkVerticalBox, bitErrorsCorrected3xDwnLinkVerticalBox=bitErrorsCorrected3xDwnLinkVerticalBox, bitErrorsCorrected2xUpLinkHorizontalBox=bitErrorsCorrected2xUpLinkHorizontalBox, pingWdogRbtCnt=pingWdogRbtCnt, pingWdogInterval=pingWdogInterval, codePoint45=codePoint45, whispUserAuthSecurity=whispUserAuthSecurity, signalToNoiseRatioUpLinkVerticalBox=signalToNoiseRatioUpLinkVerticalBox, trapIP4=trapIP4, mac4VIDMapPriorityMode=mac4VIDMapPriorityMode, fragments1xDwnLinkHorizontalBox=fragments1xDwnLinkHorizontalBox, webAutoUpdate=webAutoUpdate, linkTestNumPktTxActCnt=linkTestNumPktTxActCnt, codePoint48=codePoint48, linkTestMVCSumimoModRateDL=linkTestMVCSumimoModRateDL, codePoint62=codePoint62, mngtIP2=mngtIP2, httpsPort=httpsPort, bitErrorsCorrected2xUpLinkVerticalBox=bitErrorsCorrected2xUpLinkVerticalBox, radioStatusPowerDetectorInactive=radioStatusPowerDetectorInactive, mac6VIDMapAddr=mac6VIDMapAddr, boxLan1DHCPClientEvent=boxLan1DHCPClientEvent, downLinkRateBox=downLinkRateBox, linkTestMVCSumimoXmtModeDL=linkTestMVCSumimoXmtModeDL, mngtIP6=mngtIP6, bridgeCbEthAuxStatbout=bridgeCbEthAuxStatbout, linkTestMVCThroughputTotalUntestedVCsDL=linkTestMVCThroughputTotalUntestedVCsDL, setDefaultPlug=setDefaultPlug, codePoint52=codePoint52, fecAuxLateCollision=fecAuxLateCollision, whispBoxEvntLog=whispBoxEvntLog, trap1=trap1, codePoint59=codePoint59, rfOutErrorsCount=rfOutErrorsCount, rfInErrorsCountExt=rfInErrorsCountExt, lldpBroadcastEnable=lldpBroadcastEnable, linkTestMVCThroughputTotalDL=linkTestMVCThroughputTotalDL, radioWatchDogLogged=radioWatchDogLogged, bridgeCbErrStatNI2QSend=bridgeCbErrStatNI2QSend, soundingStatAvgRequestInterval=soundingStatAvgRequestInterval, rfStatRcvMDataCnt=rfStatRcvMDataCnt, trapDomainNameAppend=trapDomainNameAppend, catalinaOpenLoopAttenTxCH2=catalinaOpenLoopAttenTxCH2, actUpFragCountBox=actUpFragCountBox, enableSecurityBanner=enableSecurityBanner, prioritySelect=prioritySelect, rebootIfRequired=rebootIfRequired, radioType=radioType, catalinaGainReductionRxCH1=catalinaGainReductionRxCH1, fecStatUnderSizedToss=fecStatUnderSizedToss, regionAfrica=regionAfrica, dhcpRfPublicIp=dhcpRfPublicIp, fecEnable=fecEnable, changeUsrPwd=changeUsrPwd, remarkPriority=remarkPriority, bridgeCbEthAuxStatbtoss=bridgeCbEthAuxStatbtoss, apSmMode=apSmMode, mngtIP5=mngtIP5, bridgeCbFecStatbtoss=bridgeCbFecStatbtoss, rfStatTxCalFailCnt=rfStatTxCalFailCnt, fecOutDiscardsOverloadCount=fecOutDiscardsOverloadCount, whispBoxRFConfigRadioEntry=whispBoxRFConfigRadioEntry, codePoint24=codePoint24, clearBERStats=clearBERStats, enable8023linkBox=enable8023linkBox, codePoint41=codePoint41, syslogServerPort=syslogServerPort, textSecurityBanner=textSecurityBanner, codePoint40=codePoint40, loginStatus=loginStatus, poeT2Classification=poeT2Classification, maxUpLinkIndexBox=maxUpLinkIndexBox, whispBoxLevelMibModule=whispBoxLevelMibModule, trapIP2=trapIP2, whispBoxStatus=whispBoxStatus, codePoint42=codePoint42, remarkSrcVID=remarkSrcVID, soundingStatMaxRequestInterval=soundingStatMaxRequestInterval, fecAuxInDiscardsCount=fecAuxInDiscardsCount, allOtherIpv6Filter=allOtherIpv6Filter, codePoint60=codePoint60, mac1VIDMapPriorityMode=mac1VIDMapPriorityMode, powerControl=powerControl, commStringRWrite=commStringRWrite, codePoint53=codePoint53, whispBoxRFPhysicalRadioFrequencyEntry=whispBoxRFPhysicalRadioFrequencyEntry, txCalFailure=txCalFailure, linkTestNumPktRxExpCnt=linkTestNumPktRxExpCnt, bridgeCbFecStatuin=bridgeCbFecStatuin, radioPaths=radioPaths, pathIndex=pathIndex, whispBoxSNMPv3=whispBoxSNMPv3, mimoRateAdaptAlgorithm=mimoRateAdaptAlgorithm, sourceVID=sourceVID, trap2=trap2, radioStatusTransmitControlOverridden=radioStatusTransmitControlOverridden, whispBoxControlGroup=whispBoxControlGroup, signalToNoiseRatioUpLinkHorizontalBox=signalToNoiseRatioUpLinkHorizontalBox, rfInDiscardsCount=rfInDiscardsCount, upLinkRateExtrapolatedBox=upLinkRateExtrapolatedBox, fragments4xDwnLinkHorizontalBox=fragments4xDwnLinkHorizontalBox, mac6VIDMapPriority=mac6VIDMapPriority, cnMaestroStatus=cnMaestroStatus, fecAuxStatLinkDetected=fecAuxStatLinkDetected, entryIndex=entryIndex, fragments4xDwnLinkVerticalBox=fragments4xDwnLinkVerticalBox, mac7VIDMapPriorityMode=mac7VIDMapPriorityMode, subnetMask6=subnetMask6, radioStatusCatQuadCalFail=radioStatusCatQuadCalFail, boardModel=boardModel, mac6VIDMapVid=mac6VIDMapVid, numLBTDetections=numLBTDetections, actUpLinkIndexBox=actUpLinkIndexBox, hwsCompatibility=hwsCompatibility, rfStatBadBcastCtlCnt=rfStatBadBcastCtlCnt, catalinaTargetDetSetpointTxCH1=catalinaTargetDetSetpointTxCH1, swVersion=swVersion, setDefaults=setDefaults, colorCode=colorCode, ipv6bootpsFilter=ipv6bootpsFilter, linkTestMissedFragUpLink=linkTestMissedFragUpLink, sessionTime=sessionTime, lan3DhcpRenew=lan3DhcpRenew, codePoint63=codePoint63, rwPrivPassword=rwPrivPassword, upLinkRateBox=upLinkRateBox, snmpPort=snmpPort, interleave=interleave, codePoint44=codePoint44, bridgeCbErrStatApRfQSend=bridgeCbErrStatApRfQSend, mac10VIDMapPriorityMode=mac10VIDMapPriorityMode, whispBridgeTbFree=whispBridgeTbFree, soundingStatVersionMismatch=soundingStatVersionMismatch, pldVersion=pldVersion, vlanMemberSource=vlanMemberSource, whispBridgeTbErr=whispBridgeTbErr, rwUserEnable=rwUserEnable, rfStatBadFreqBcnRcvCnt=rfStatBadFreqBcnRcvCnt, codePoint20=codePoint20, antennaGain=antennaGain, fecAuxRuntFrame=fecAuxRuntFrame, longitude=longitude, dhcpRfPublicGateway=dhcpRfPublicGateway, whispFeatureKeyOrigin=whispFeatureKeyOrigin, rfStatOutSyncCount=rfStatOutSyncCount, ethernetLinkSpeed=ethernetLinkSpeed, subnetMask2=subnetMask2, soundingStatRequestsDropped=soundingStatRequestsDropped, vlanPortType=vlanPortType, controlMessages=controlMessages, linkTestForceModulationBox=linkTestForceModulationBox, roUserName=roUserName, user2PrivPassword=user2PrivPassword, expDwnFragCountBox=expDwnFragCountBox, userName2=userName2, linkTestMVCThroughputDL=linkTestMVCThroughputDL, entryL2Index=entryL2Index, ipv6snmpFilter=ipv6snmpFilter, trap10=trap10, atexHazlocPowerLimit=atexHazlocPowerLimit, fecLateCollision=fecLateCollision, managementVID=managementVID, linkTestMVCMumimoXmtModeDL=linkTestMVCMumimoXmtModeDL, numberCustomFreq=numberCustomFreq, mac10VIDMapAddr=mac10VIDMapAddr, bridgeCbFecStatbout=bridgeCbFecStatbout, regionOceania=regionOceania, radioFrequencyBand=radioFrequencyBand, bitErrorsCorrected1xDwnLinkHorizontalBox=bitErrorsCorrected1xDwnLinkHorizontalBox, codePoint22=codePoint22, linkTestMVCPriority=linkTestMVCPriority, dataScramblingMethod=dataScramblingMethod, linkTestMVCXmtFragsDL=linkTestMVCXmtFragsDL, codePoint13=codePoint13, linkTestSMRestriction=linkTestSMRestriction, deleteRemarkVID=deleteRemarkVID, dhcpRfPublicSubnetMask=dhcpRfPublicSubnetMask, userName1=userName1, whispBoxRFPhysicalRadioPathEntry=whispBoxRFPhysicalRadioPathEntry, whispUserEntry=whispUserEntry, rfStatRcvCntlCnt=rfStatRcvCntlCnt, subnetMask8=subnetMask8, reboot=reboot, whispBoxCPTableGroup=whispBoxCPTableGroup, rfStatRangeCapEnf=rfStatRangeCapEnf, linkTestNumPktRxActCnt=linkTestNumPktRxActCnt, bridgeCbFecStatbin=bridgeCbFecStatbin, user3Group=user3Group, fecAuxRetransLimitExp=fecAuxRetransLimitExp, codePoint17=codePoint17, rfStatRcvLTStartHS=rfStatRcvLTStartHS, linkTestMVCEfficiencyDL=linkTestMVCEfficiencyDL, codePoint51=codePoint51, mac8VIDMapPriority=mac8VIDMapPriority, mngtIP8=mngtIP8, platformVer=platformVer, whispWebUserAccessMode=whispWebUserAccessMode, codePoint49=codePoint49, codePoint58=codePoint58, lan1DhcpRenew=lan1DhcpRenew, platformType=platformType, subnetMask10=subnetMask10, pass2Status=pass2Status, acceptSecurityBanner=acceptSecurityBanner, whispBoxVLANRemarkTableGroup=whispBoxVLANRemarkTableGroup, whispBoxEvent=whispBoxEvent, soundingStatRequestsIgnored=soundingStatRequestsIgnored, mngtIP9=mngtIP9, certDN=certDN, certEntryUserAuth=certEntryUserAuth)
mibBuilder.exportSymbols("WHISP-BOX-MIBV2-MIB", bridgeCbRFStatbout=bridgeCbRFStatbout, boxEncryption=boxEncryption, rfStatUnkwnFeatBcnRcvCnt=rfStatUnkwnFeatBcnRcvCnt, whispVLANTable=whispVLANTable, userMode=userMode, outSyncCount=outSyncCount, mac7VIDMapAddr=mac7VIDMapAddr, fragments2xDwnLinkVerticalBox=fragments2xDwnLinkVerticalBox, transmitterOP=transmitterOP, fpgaBuildDate=fpgaBuildDate, poeT2Status=poeT2Status, codePoint15=codePoint15, antType=antType, fecCarSenseLost=fecCarSenseLost, user1Enable=user1Enable, fecInDiscardsCount=fecInDiscardsCount, linkTestActionBox=linkTestActionBox, dhcpLanIp=dhcpLanIp, tftpStatus=tftpStatus, syslogServerAddr=syslogServerAddr, poeAuxEnable=poeAuxEnable, rfStatRSSIOutOfRange=rfStatRSSIOutOfRange, linkTestVCListBox=linkTestVCListBox, radioStatusAlarm=radioStatusAlarm, removeCustomFreqList=removeCustomFreqList, linkTestPktLengthBox=linkTestPktLengthBox, linkTestMVCXmtFragsTotalDL=linkTestMVCXmtFragsTotalDL, pingWdogIP=pingWdogIP, managementVIDPriority=managementVIDPriority, fecInDiscardsOverloadCount=fecInDiscardsOverloadCount, syslogDomainNameAppend=syslogDomainNameAppend, radioFatalErrorLogged=radioFatalErrorLogged, user3PrivPassword=user3PrivPassword, fullAccess=fullAccess, ipv6MultFilter=ipv6MultFilter, mac1VIDMapAddr=mac1VIDMapAddr, rfOutDiscardsOverloadCount=rfOutDiscardsOverloadCount, bridgeCbRFStatbtosscap=bridgeCbRFStatbtosscap, smbFilter=smbFilter, twoXRate=twoXRate, trap4=trap4, radioIndex=radioIndex, etherLinkStatus=etherLinkStatus, whispBridgeDesLuid=whispBridgeDesLuid, whispBoxBridgeVar=whispBoxBridgeVar, bridgeCbEthAuxStatbin=bridgeCbEthAuxStatbin, spectrumAnalysisActionBox=spectrumAnalysisActionBox, mac1VIDMapVid=mac1VIDMapVid, installationColorCode=installationColorCode, bootpsFilter=bootpsFilter, catalinaGainReductionRxCH2=catalinaGainReductionRxCH2, whispBoxConf=whispBoxConf, mac10VIDMapVid=mac10VIDMapVid, cyclicPrefix=cyclicPrefix, calibrationStatusBox=calibrationStatusBox, fecEthBusErr=fecEthBusErr, bitErrorsCorrected2xDwnLinkHorizontalBox=bitErrorsCorrected2xDwnLinkHorizontalBox, lan3DhcpRelease=lan3DhcpRelease, downLinkRateExtrapolatedBox=downLinkRateExtrapolatedBox, testLUIDBox=testLUIDBox, radioEngKeyed=radioEngKeyed, fecStatLinkLost=fecStatLinkLost, subnetMask9=subnetMask9, fecAuxOutErrorsCount=fecAuxOutErrorsCount, codePoint6=codePoint6, bridgeCbRFStatfloods=bridgeCbRFStatfloods, natDhcpRelease=natDhcpRelease, trapIP6=trapIP6, addRemarkVID=addRemarkVID, hardwareVersion=hardwareVersion, codePoint10=codePoint10, maxDwnLinkIndexBox=maxDwnLinkIndexBox, addCustomFreqList=addCustomFreqList, bridgeCbRFStatbtoss=bridgeCbRFStatbtoss, rfStatBadInSyncIDRcv=rfStatBadInSyncIDRcv, catalinaLoAttenRxCH1=catalinaLoAttenRxCH1, userDefinedPort3=userDefinedPort3, clearEventLog=clearEventLog, removeVlanMember=removeVlanMember, bootpcFilter=bootpcFilter, pppoeCtlPriority=pppoeCtlPriority, dhcpLanSubnetMask=dhcpLanSubnetMask, pingWdogEnable=pingWdogEnable, mac2VIDMapPriority=mac2VIDMapPriority, deleteRemarkPriority=deleteRemarkPriority, trap7=trap7, mac9VIDMapPriorityMode=mac9VIDMapPriorityMode, trap5=trap5, updateStatus=updateStatus, vcDepth=vcDepth, rfInErrorsCount=rfInErrorsCount, codePoint56=codePoint56, rfStatRcvCorruptDataCount=rfStatRcvCorruptDataCount, whispLayer2NeighborTable=whispLayer2NeighborTable, linkTestDurationBox=linkTestDurationBox, trap8=trap8, productTypeName=productTypeName, largeVCQ=largeVCQ, port2TCPFilter=port2TCPFilter, pllOutLockCount=pllOutLockCount, activeTxPowerStr=activeTxPowerStr, whispBridgeHash=whispBridgeHash, whispLayer2NeighborEntry=whispLayer2NeighborEntry, mac5VIDMapVid=mac5VIDMapVid, webAccess=webAccess, cnMaestroUrl=cnMaestroUrl, fecAuxRxOverrun=fecAuxRxOverrun, antPolarization=antPolarization, eirp=eirp, lanDhcpState=lanDhcpState, whispBoxP11BstrapFPGAVer=whispBoxP11BstrapFPGAVer, ethernetLinkSpeedSfp=ethernetLinkSpeedSfp, fragments3xDwnLinkVerticalBox=fragments3xDwnLinkVerticalBox, snrCalculation=snrCalculation, fragments2xDwnLinkHorizontalBox=fragments2xDwnLinkHorizontalBox, neighborSiteName=neighborSiteName, nearFieldOperationActive=nearFieldOperationActive, rfInDiscardsCountExt=rfInDiscardsCountExt, vlanAcceptQinQFrames=vlanAcceptQinQFrames, whispBoxDNS=whispBoxDNS, encryptionConfig=encryptionConfig, codePoint38=codePoint38, signalToNoiseRatioDownLinkVerticalBox=signalToNoiseRatioDownLinkVerticalBox, mac4VIDMapAddr=mac4VIDMapAddr, fecTxUnderrun=fecTxUnderrun, bridgeCbErrStatBridgeFull=bridgeCbErrStatBridgeFull, packetFilterDirection=packetFilterDirection, linkTestMumimoBox=linkTestMumimoBox, linkTestNumPktBox=linkTestNumPktBox, fecAuxCRCError=fecAuxCRCError, fragments1xUpLinkVerticalBox=fragments1xUpLinkVerticalBox, neighborIP=neighborIP, rfOutErrorsCountExt=rfOutErrorsCountExt, whispBoxVLANTableGroup=whispBoxVLANTableGroup, calibrationStatusBool=calibrationStatusBool, whispBoxLinkTestMVCEntry=whispBoxLinkTestMVCEntry, trapIP7=trapIP7, whispUserTable=whispUserTable, rfStatRcvCorruptControlCount=rfStatRcvCorruptControlCount, snmpv2cEnable=snmpv2cEnable, dnsAlternateMgmtIP=dnsAlternateMgmtIP, codePoint32=codePoint32, trap3=trap3, user1AuthPassword=user1AuthPassword, accessLevel=accessLevel, cnMaestroEnable=cnMaestroEnable, mngtIP=mngtIP, snmpv3AuthProt=snmpv3AuthProt, bhModulation=bhModulation, ip4MultFilter=ip4MultFilter, bridgeCbErrStatAPFecQSend=bridgeCbErrStatAPFecQSend, allOtherIpFilter=allOtherIpFilter, whispBoxConfig=whispBoxConfig, linkTestNumPktTxExpCnt=linkTestNumPktTxExpCnt, catalinaCurrDetSetpointTxCH2=catalinaCurrDetSetpointTxCH2, fpgaCompileInfo=fpgaCompileInfo, fecAuxNoCarrier=fecAuxNoCarrier, regionNorthAmerica=regionNorthAmerica, whispBoxBTGroup=whispBoxBTGroup, bitErrorsCorrected4xUpLinkHorizontalBox=bitErrorsCorrected4xUpLinkHorizontalBox, auxPortEnable=auxPortEnable, whispBoxRFPhysical=whispBoxRFPhysical, linkTestWithDualPathBox=linkTestWithDualPathBox, whispBoxBridgeEntry=whispBoxBridgeEntry, codePoint5=codePoint5, bridgeCbEthAuxStatutoss=bridgeCbEthAuxStatutoss, certTableUserAuth=certTableUserAuth, lanDhcpStatus=lanDhcpStatus, rfStatXmtUDataCnt=rfStatXmtUDataCnt, catalinaTargetDetSetpointTxCH2=catalinaTargetDetSetpointTxCH2, mac7VIDMapVid=mac7VIDMapVid, roAuthPassword=roAuthPassword, codePoint19=codePoint19, allowRejectThenLocal=allowRejectThenLocal, codePoint2=codePoint2, fecAuxStatLinkUptime=fecAuxStatLinkUptime, fragments3xUpLinkVerticalBox=fragments3xUpLinkVerticalBox, fragments2xUpLinkVerticalBox=fragments2xUpLinkVerticalBox, fecInErrorsCount=fecInErrorsCount, rwUserName=rwUserName, deleteUser=deleteUser, linkTestMVCMumimoModRateDL=linkTestMVCMumimoModRateDL, codePointSelect=codePointSelect, whispLayer2NeighborTableGroup=whispLayer2NeighborTableGroup, trapIP5=trapIP5, boxTemperatureF=boxTemperatureF, rfStatXmtCntlCnt=rfStatXmtCntlCnt, catalinaOpenLoopAttenTxCH1=catalinaOpenLoopAttenTxCH1, ism=ism, catalinaCurrDetReadPowerOnTxCH2=catalinaCurrDetReadPowerOnTxCH2, bridgeEntryTimeout=bridgeEntryTimeout, certIdx=certIdx, fecAuxLargeFrame=fecAuxLargeFrame, fragments3xDwnLinkHorizontalBox=fragments3xDwnLinkHorizontalBox, fragments1xUpLinkHorizontalBox=fragments1xUpLinkHorizontalBox, testDurationBox=testDurationBox, fecAuxInErrorsCount=fecAuxInErrorsCount, whispBoxLinkTestMVCTable=whispBoxLinkTestMVCTable, camAccID=camAccID, user2Group=user2Group, rfStatBeaconVerMismatchCnt=rfStatBeaconVerMismatchCnt, codePoint18=codePoint18, bitErrorsCorrected4xDwnLinkVerticalBox=bitErrorsCorrected4xDwnLinkVerticalBox, resetPoEAux=resetPoEAux, regionAsia=regionAsia, codePoint27=codePoint27, whispBoxRFPhysicalRadioPaths=whispBoxRFPhysicalRadioPaths, userP3Filter=userP3Filter, mac10VIDMapPriority=mac10VIDMapPriority, codePoint21=codePoint21, user2Enable=user2Enable, catalinaTargetGainRxCH1=catalinaTargetGainRxCH1, snmpv3TrapEnable=snmpv3TrapEnable, whispBoxLinkTestGroup=whispBoxLinkTestGroup, sessionTimeout=sessionTimeout, httpPort=httpPort, codePoint14=codePoint14, fecAuxCarSenseLost=fecAuxCarSenseLost, whispBoxLinkTestResult=whispBoxLinkTestResult, fecAuxStatLinkLost=fecAuxStatLinkLost, linkNegoSpeed=linkNegoSpeed, whispBoxBoot=whispBoxBoot, defaultIPAccessEnable=defaultIPAccessEnable, linkTestMVCEfficiencyTotalDL=linkTestMVCEfficiencyTotalDL, fecNoCarrier=fecNoCarrier, rfStatRcvUDataCnt=rfStatRcvUDataCnt, addRemarkPriority=addRemarkPriority, actDwnFragCountBox=actDwnFragCountBox, codePoint4=codePoint4, codePoint31=codePoint31, framePeriodCurrent=framePeriodCurrent, fecStatLinkUptime=fecStatLinkUptime, trapIP10=trapIP10, whispBoxDHCPClientEvent=whispBoxDHCPClientEvent, bitErrorsCorrected3xUpLinkHorizontalBox=bitErrorsCorrected3xUpLinkHorizontalBox, priorityPrecedence=priorityPrecedence, remarkVID=remarkVID, allIpv6Filter=allIpv6Filter, userGroup1=userGroup1, codePoint23=codePoint23, whispBoxEsn=whispBoxEsn, expUpFragCountBox=expUpFragCountBox, codePoint39=codePoint39, radioConfigIndex=radioConfigIndex, regionCode=regionCode, fragments4xUpLinkHorizontalBox=fragments4xUpLinkHorizontalBox, forceReassessment=forceReassessment, certAction=certAction, upLinkEffBox=upLinkEffBox, bitErrorsCorrected3xDwnLinkHorizontalBox=bitErrorsCorrected3xDwnLinkHorizontalBox, mac2VIDMapAddr=mac2VIDMapAddr, whispBridgeMacAddr=whispBridgeMacAddr, bitErrorsCorrected4xDwnLinkHorizontalBox=bitErrorsCorrected4xDwnLinkHorizontalBox, codePoint50=codePoint50)
mibBuilder.exportSymbols("WHISP-BOX-MIBV2-MIB", providerVID=providerVID, mngtIP3=mngtIP3, bridgeCbFecStatutosscap=bridgeCbFecStatutosscap, whispBridgeTbUsed=whispBridgeTbUsed, bridgeCbFecStatfloods=bridgeCbFecStatfloods, fecCRCError=fecCRCError, soundingStatRequestCount=soundingStatRequestCount, codePoint37=codePoint37, platformInfo=platformInfo, snmpv3SecLvl=snmpv3SecLvl, siteInfoViewable=siteInfoViewable)
