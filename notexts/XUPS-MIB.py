#
# PySNMP MIB module XUPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/eaton/XUPS-MIB
# Produced by pysmi-1.1.12 at Thu May 30 02:15:23 2024
# On host fv-az1567-87 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
xupsContactState, xupsEnvRemoteTemp, xupsEnvRemoteTempUpperLimit, xupsEnvRemoteHumidity, xupsContactIndex, xupsContactType, xupsEnvRemoteHumidityLowerLimit, xupsEnvRemoteTempLowerLimit, xupsContactDescr, xupsEnvRemoteHumidityUpperLimit = mibBuilder.importSymbols("EATON-EMP-MIB", "xupsContactState", "xupsEnvRemoteTemp", "xupsEnvRemoteTempUpperLimit", "xupsEnvRemoteHumidity", "xupsContactIndex", "xupsContactType", "xupsEnvRemoteHumidityLowerLimit", "xupsEnvRemoteTempLowerLimit", "xupsContactDescr", "xupsEnvRemoteHumidityUpperLimit")
eaton, xupsEnvironment = mibBuilder.importSymbols("EATON-OIDS", "eaton", "xupsEnvironment")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
ObjectIdentity, Bits, Unsigned32, MibIdentifier, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter32, Counter64, NotificationType, TimeTicks, Gauge32, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "Unsigned32", "MibIdentifier", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter32", "Counter64", "NotificationType", "TimeTicks", "Gauge32", "Integer32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xupsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 534, 1))
xupsMIB.setRevisions(('2019-09-27 00:00', '2019-09-12 00:00', '2019-09-10 00:00', '2019-04-12 00:00', '2019-03-05 00:00', '2019-02-19 00:00', '2018-09-12 00:00', '2018-04-23 00:00', '2012-11-26 15:13', '2012-04-03 00:00', '2011-02-25 00:00', '2008-10-02 00:00', '2007-05-03 00:00', '2007-03-13 00:00',))
if mibBuilder.loadTexts: xupsMIB.setLastUpdated('201909270000Z')
if mibBuilder.loadTexts: xupsMIB.setOrganization('Eaton Corporation')
xupsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 1))
xupsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 2))
xupsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 3))
xupsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 4))
xupsBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 5))
xupsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7))
xupsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 8))
xupsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 9))
xupsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 10))
xupsTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 11))
xupsRecep = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 12))
xupsTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 13))
xupsAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 14))
xupsInputTotal = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 3, 8))
xupsOutputTotal = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 4, 9))
xupsBypassTotal = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 5, 4))
xupsIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsIdentManufacturer.setStatus('current')
xupsIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsIdentModel.setStatus('current')
xupsIdentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsIdentSoftwareVersion.setStatus('current')
xupsIdentOemCode = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsIdentOemCode.setStatus('current')
xupsIdentPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsIdentPartNumber.setStatus('current')
xupsIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsIdentSerialNumber.setStatus('current')
xupsBatTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatTimeRemaining.setStatus('current')
xupsBatVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Volts DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatVoltage.setStatus('current')
xupsBatCurrent = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setUnits('Amps DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatCurrent.setStatus('current')
xupsBatCapacity = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatCapacity.setStatus('current')
xupsBatteryAbmStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("batteryCharging", 1), ("batteryDischarging", 2), ("batteryFloating", 3), ("batteryResting", 4), ("unknown", 5), ("batteryDisconnected", 6), ("batteryUnderTest", 7), ("checkBattery", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatteryAbmStatus.setStatus('current')
xupsBatteryLastReplacedDate = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatteryLastReplacedDate.setStatus('current')
xupsBatteryFailure = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatteryFailure.setStatus('current')
xupsBatteryNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatteryNotPresent.setStatus('current')
xupsBatteryAged = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatteryAged.setStatus('current')
xupsBatteryLowCapacity = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatteryLowCapacity.setStatus('current')
xupsInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputFrequency.setStatus('current')
xupsInputLineBads = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputLineBads.setStatus('current')
xupsInputNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputNumPhases.setStatus('current')
xupsInputTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 3, 4), )
if mibBuilder.loadTexts: xupsInputTable.setStatus('current')
xupsInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1), ).setIndexNames((0, "XUPS-MIB", "xupsInputPhase"))
if mibBuilder.loadTexts: xupsInputEntry.setStatus('current')
xupsInputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputPhase.setStatus('current')
xupsInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputVoltage.setStatus('current')
xupsInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputCurrent.setStatus('current')
xupsInputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputWatts.setStatus('current')
xupsInputId = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1toN", 1), ("phase2toN", 2), ("phase3toN", 3), ("phase1to2", 4), ("phase2to3", 5), ("phase3to1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputId.setStatus('current')
xupsInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputName.setStatus('current')
xupsInputCurrentHighPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS tenth of Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputCurrentHighPrecision.setStatus('current')
xupsInputSource = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("primaryUtility", 3), ("bypassFeed", 4), ("secondaryUtility", 5), ("generator", 6), ("flywheel", 7), ("fuelcell", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputSource.setStatus('current')
xupsDualInputStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bothSourcesBad", 1), ("primarySourceGood", 2), ("secondarySourceGood", 3), ("bothSourcesGood", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsDualInputStatus.setStatus('current')
xupsSecondaryInputWatch = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsSecondaryInputWatch.setStatus('current')
xupsInputAverageVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputAverageVoltage.setStatus('current')
xupsInputTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS tenth of Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputTotalCurrent.setStatus('current')
xupsInputTotalWatts = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputTotalWatts.setStatus('current')
xupsInputTotalVA = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputTotalVA.setStatus('current')
xupsInputAveragePowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputAveragePowerFactor.setStatus('current')
xupsInputStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inputBad", 1), ("inputGood", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputStatus.setStatus('current')
xupsOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputLoad.setStatus('current')
xupsOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputFrequency.setStatus('current')
xupsOutputNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputNumPhases.setStatus('current')
xupsOutputTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 4, 4), )
if mibBuilder.loadTexts: xupsOutputTable.setStatus('current')
xupsOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1), ).setIndexNames((0, "XUPS-MIB", "xupsOutputPhase"))
if mibBuilder.loadTexts: xupsOutputEntry.setStatus('current')
xupsOutputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputPhase.setStatus('current')
xupsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputVoltage.setStatus('current')
xupsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputCurrent.setStatus('current')
xupsOutputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputWatts.setStatus('current')
xupsOutputId = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1toN", 1), ("phase2toN", 2), ("phase3toN", 3), ("phase1to2", 4), ("phase2to3", 5), ("phase3to1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputId.setStatus('current')
xupsOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputName.setStatus('current')
xupsOutputCurrentHighPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS tenth of Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputCurrentHighPrecision.setStatus('current')
xupsOutputPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputPercentLoad.setStatus('current')
xupsOutputVA = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputVA.setStatus('current')
xupsOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("normal", 3), ("bypass", 4), ("battery", 5), ("booster", 6), ("reducer", 7), ("parallelCapacity", 8), ("parallelRedundant", 9), ("highEfficiencyMode", 10), ("maintenanceBypass", 11), ("essMode", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputSource.setStatus('current')
xupsOutputHourlyPowerUsage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Wh').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputHourlyPowerUsage.setStatus('current')
xupsOutputCumulativePowerUsage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Wh').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsOutputCumulativePowerUsage.setStatus('current')
xupsOutputCumulativePowerUsageTimer = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 8), Counter32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputCumulativePowerUsageTimer.setStatus('current')
xupsOutputAverageVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputAverageVoltage.setStatus('current')
xupsOutputTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS tenth of Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputTotalCurrent.setStatus('current')
xupsOutputTotalWatts = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputTotalWatts.setStatus('current')
xupsOutputTotalVA = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputTotalVA.setStatus('current')
xupsOutputAveragePowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputAveragePowerFactor.setStatus('current')
xupsOutputStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outputNotPowered", 1), ("outputNotProtected", 2), ("outputProtected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputStatus.setStatus('current')
xupsBypassFrequency = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassFrequency.setStatus('current')
xupsBypassNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassNumPhases.setStatus('current')
xupsBypassTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 5, 3), )
if mibBuilder.loadTexts: xupsBypassTable.setStatus('current')
xupsBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 5, 3, 1), ).setIndexNames((0, "XUPS-MIB", "xupsBypassPhase"))
if mibBuilder.loadTexts: xupsBypassEntry.setStatus('current')
xupsBypassPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassPhase.setStatus('current')
xupsBypassVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassVoltage.setStatus('current')
xupsBypassId = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1toN", 1), ("phase2toN", 2), ("phase3toN", 3), ("phase1to2", 4), ("phase2to3", 5), ("phase3to1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassId.setStatus('current')
xupsBypassName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 5, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassName.setStatus('current')
xupsBypassCurrentHighPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS tenth of Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassCurrentHighPrecision.setStatus('current')
xupsBypassWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassWatts.setStatus('current')
xupsBypassAverageVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassAverageVoltage.setStatus('current')
xupsBypassTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 5, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS tenth of Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassTotalCurrent.setStatus('current')
xupsBypassTotalWatts = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 5, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassTotalWatts.setStatus('current')
xupsBypassTotalVA = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 5, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassTotalVA.setStatus('current')
xupsBypassAveragePowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassAveragePowerFactor.setStatus('current')
xupsEnvAmbientTemp = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsEnvAmbientTemp.setStatus('current')
xupsEnvAmbientLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsEnvAmbientLowerLimit.setStatus('current')
xupsEnvAmbientUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsEnvAmbientUpperLimit.setStatus('current')
xupsEnvAmbientHumidity = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsEnvAmbientHumidity.setStatus('current')
xupsAlarms = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarms.setStatus('current')
xupsAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 7, 2), )
if mibBuilder.loadTexts: xupsAlarmTable.setStatus('current')
xupsAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 7, 2, 1), ).setIndexNames((0, "XUPS-MIB", "xupsAlarmID"))
if mibBuilder.loadTexts: xupsAlarmEntry.setStatus('current')
xupsAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmID.setStatus('current')
xupsAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmDescr.setStatus('current')
xupsAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmTime.setStatus('current')
xupsOnBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 3))
xupsLowBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 4))
xupsUtilityPowerRestored = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 5))
xupsReturnFromLowBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 6))
xupsOutputOverload = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 7))
xupsInternalFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 8))
xupsBatteryDischarged = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 9))
xupsInverterFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 10))
xupsOnBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 11))
xupsBypassNotAvailable = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 12))
xupsOutputOff = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 13))
xupsInputFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 14))
xupsBuildingAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 15))
xupsShutdownImminent = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 16))
xupsOnInverter = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 17))
xupsAlarmNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 7, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmNumEvents.setStatus('current')
xupsAlarmEventTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 7, 19), )
if mibBuilder.loadTexts: xupsAlarmEventTable.setStatus('current')
xupsAlarmEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1), ).setIndexNames((0, "XUPS-MIB", "xupsAlarmEventID"))
if mibBuilder.loadTexts: xupsAlarmEventEntry.setStatus('current')
xupsAlarmEventID = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 400)))
if mibBuilder.loadTexts: xupsAlarmEventID.setStatus('current')
xupsAlarmEventDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmEventDateAndTime.setStatus('deprecated')
xupsAlarmEventKind = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("occurred", 1), ("cleared", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmEventKind.setStatus('deprecated')
xupsAlarmEventDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmEventDescr.setStatus('deprecated')
xupsAlarmEventMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmEventMsg.setStatus('current')
xupsBreakerOpen = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 20))
xupsAlarmEntryAdded = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 21))
xupsAlarmEntryRemoved = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 22))
xupsAlarmBatteryBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 23))
xupsOutputOffAsRequested = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 24))
xupsDiagnosticTestFailed = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 25))
xupsCommunicationsLost = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 26))
xupsUpsShutdownPending = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 27))
xupsAlarmTestInProgress = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 28))
xupsAmbientTempBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 29))
xupsLossOfRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 30))
xupsAlarmTempBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 31))
xupsAlarmChargerFailed = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 32))
xupsAlarmFanFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 33))
xupsAlarmFuseFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 34))
xupsPowerSwitchBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 35))
xupsModuleFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 36))
xupsOnAlternatePowerSource = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 37))
xupsAltPowerNotAvailable = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 38))
xupsNoticeCondition = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 39))
xupsRemoteTempBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 40))
xupsRemoteHumidityBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 41))
xupsAlarmOutputBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 42))
xupsAlarmAwaitingPower = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 43))
xupsOnMaintenanceBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 44))
xupsOutputNotProtected = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 51))
xupsTestStart = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("testBattery", 1), ("noTestStarted", 2), ("testSystem", 3), ("testSecondarySource", 4), ("flashLightsTest", 5), ("cancelTest", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsTestStart.setStatus('current')
xupsTestBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("passed", 2), ("failed", 3), ("inProgress", 4), ("notSupported", 5), ("inhibited", 6), ("scheduled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsTestBatteryStatus.setStatus('current')
xupsLastGeneralTest = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("noTestStarted", 2), ("testSystem", 3), ("testSecondarySource", 4), ("flashLightsTest", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsLastGeneralTest.setStatus('current')
xupsLastGeneralTestResult = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("passed", 2), ("failed", 3), ("inProgress", 4), ("notSupported", 5), ("inhibited", 6), ("scheduled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsLastGeneralTestResult.setStatus('current')
xupsTestTrap = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("startTestTrap", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsTestTrap.setStatus('current')
xupsControlOutputOffDelay = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsControlOutputOffDelay.setStatus('current')
xupsControlOutputOnDelay = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsControlOutputOnDelay.setStatus('current')
xupsControlOutputOffTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsControlOutputOffTrapDelay.setStatus('current')
xupsControlOutputOnTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsControlOutputOnTrapDelay.setStatus('deprecated')
xupsControlToBypassDelay = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsControlToBypassDelay.setStatus('current')
xupsLoadShedSecsWithRestart = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsLoadShedSecsWithRestart.setStatus('current')
xupsSwitchable = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switchable", 1), ("notSwitchable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsSwitchable.setStatus('current')
xupsConfigOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigOutputVoltage.setStatus('current')
xupsConfigInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigInputVoltage.setStatus('current')
xupsConfigOutputWatts = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigOutputWatts.setStatus('current')
xupsConfigOutputFreq = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigOutputFreq.setStatus('current')
xupsConfigDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsConfigDateAndTime.setStatus('current')
xupsConfigLowOutputVoltageLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigLowOutputVoltageLimit.setStatus('current')
xupsConfigHighOutputVoltageLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigHighOutputVoltageLimit.setStatus('current')
xupsConfigInstallDate = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsConfigInstallDate.setStatus('current')
xupsMaxTrapLevel = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("critical", 2), ("major", 3), ("minor", 4), ("allTraps", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsMaxTrapLevel.setStatus('current')
xupsSendTrapType = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("stnd", 1), ("xups", 2), ("stndPlus", 3), ("xupsPlus", 4), ("pxg", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsSendTrapType.setStatus('current')
xupsTrapMessage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 11, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsTrapMessage.setStatus('current')
xupsTrapSource = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 11, 4))
xupsHeartbeatMinsInterval = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 11, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsHeartbeatMinsInterval.setStatus('current')
xupsNumReceptacles = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsNumReceptacles.setStatus('current')
xupsRecepTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 12, 2), )
if mibBuilder.loadTexts: xupsRecepTable.setStatus('current')
xupsRecepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1), ).setIndexNames((0, "XUPS-MIB", "xupsRecepIndex"))
if mibBuilder.loadTexts: xupsRecepEntry.setStatus('current')
xupsRecepIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsRecepIndex.setStatus('current')
xupsRecepStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("pendingOff", 3), ("pendingOn", 4), ("unknown", 5), ("reserved", 6), ("failedClosed", 7), ("failedOpen", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsRecepStatus.setStatus('current')
xupsRecepOffDelaySecs = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsRecepOffDelaySecs.setStatus('current')
xupsRecepOnDelaySecs = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsRecepOnDelaySecs.setStatus('current')
xupsRecepAutoOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsRecepAutoOffDelay.setStatus('current')
xupsRecepAutoOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsRecepAutoOnDelay.setStatus('current')
xupsRecepShedSecsWithRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsRecepShedSecsWithRestart.setStatus('current')
xupsRecepHourlyPowerUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Wh').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsRecepHourlyPowerUsage.setStatus('current')
xupsRecepCumulativePowerUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Wh').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsRecepCumulativePowerUsage.setStatus('current')
xupsRecepCumulativePowerUsageTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 10), Counter32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsRecepCumulativePowerUsageTimer.setStatus('current')
xupsTopologyType = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 13, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsTopologyType.setStatus('current')
xupsTopoMachineCode = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsTopoMachineCode.setStatus('current')
xupsTopoUnitNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsTopoUnitNumber.setStatus('current')
xupsTopoPowerStrategy = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("highAlert", 1), ("standard", 2), ("enableHighEfficiency", 3), ("immediateHighEfficiency", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsTopoPowerStrategy.setStatus('current')
xupsAgentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 14, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAgentManufacturer.setStatus('current')
xupsAgentModel = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 14, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAgentModel.setStatus('current')
xupsAgentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 14, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAgentSoftwareVersion.setStatus('current')
xupsAgentPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 14, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAgentPartNumber.setStatus('current')
xupsAgentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 14, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAgentSerialNumber.setStatus('current')
xupsTrapDefined = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1))
xupsTrapOidDefined = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0))
xupstdControlOff = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 1)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdControlOff.setStatus('current')
xupstdControlOn = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 2)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdControlOn.setStatus('current')
xupstdOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 3)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOnBattery.setStatus('current')
xupstdLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 4)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdLowBattery.setStatus('current')
xupstdUtilityPowerRestored = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 5)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdUtilityPowerRestored.setStatus('current')
xupstdReturnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 6)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdReturnFromLowBattery.setStatus('current')
xupstdOutputOverload = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 7)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOutputOverload.setStatus('current')
xupstdInternalFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 8)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdInternalFailure.setStatus('current')
xupstdBatteryDischarged = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 9)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdBatteryDischarged.setStatus('current')
xupstdInverterFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 10)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdInverterFailure.setStatus('current')
xupstdOnBypass = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 11)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOnBypass.setStatus('current')
xupstdBypassNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 12)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdBypassNotAvailable.setStatus('current')
xupstdOutputOff = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 13)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOutputOff.setStatus('current')
xupstdInputFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 14)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdInputFailure.setStatus('current')
xupstdBuildingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 15)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdBuildingAlarm.setStatus('current')
xupstdShutdownImminent = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 16)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdShutdownImminent.setStatus('current')
xupstdOnInverter = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 17)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOnInverter.setStatus('current')
xupstdBreakerOpen = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 20)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdBreakerOpen.setStatus('current')
xupstdAlarmEntryAdded = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 21)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmEntryAdded.setStatus('current')
xupstdAlarmEntryRemoved = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 22)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmEntryRemoved.setStatus('current')
xupstdAlarmBatteryBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 23)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmBatteryBad.setStatus('current')
xupstdOutputOffAsRequested = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 24)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOutputOffAsRequested.setStatus('current')
xupstdDiagnosticTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 25)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdDiagnosticTestFailed.setStatus('current')
xupstdCommunicationsLost = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 26)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdCommunicationsLost.setStatus('current')
xupstdUpsShutdownPending = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 27)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdUpsShutdownPending.setStatus('current')
xupstdAlarmTestInProgress = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 28)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmTestInProgress.setStatus('current')
xupstdAmbientTempBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 29)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("XUPS-MIB", "xupsEnvAmbientTemp"), ("XUPS-MIB", "xupsEnvAmbientLowerLimit"), ("XUPS-MIB", "xupsEnvAmbientUpperLimit"))
if mibBuilder.loadTexts: xupstdAmbientTempBad.setStatus('current')
xupstdContactActiveNotice = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 30)).setObjects(("EATON-EMP-MIB", "xupsContactIndex"), ("EATON-EMP-MIB", "xupsContactType"), ("EATON-EMP-MIB", "xupsContactState"), ("EATON-EMP-MIB", "xupsContactDescr"))
if mibBuilder.loadTexts: xupstdContactActiveNotice.setStatus('current')
xupstdContactInactiveNotice = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 31)).setObjects(("EATON-EMP-MIB", "xupsContactIndex"), ("EATON-EMP-MIB", "xupsContactType"), ("EATON-EMP-MIB", "xupsContactState"), ("EATON-EMP-MIB", "xupsContactDescr"))
if mibBuilder.loadTexts: xupstdContactInactiveNotice.setStatus('current')
xupstdLossOfRedundancy = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 32)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdLossOfRedundancy.setStatus('current')
xupstdAlarmTempBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 33)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmTempBad.setStatus('current')
xupstdAlarmChargerFailed = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 34)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmChargerFailed.setStatus('current')
xupstdAlarmFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 35)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmFanFailure.setStatus('current')
xupstdAlarmFuseFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 36)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmFuseFailure.setStatus('current')
xupstdPowerSwitchBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 37)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdPowerSwitchBad.setStatus('current')
xupstdModuleFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 38)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdModuleFailure.setStatus('current')
xupstdOnAlternatePowerSource = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 39)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("XUPS-MIB", "xupsInputSource"))
if mibBuilder.loadTexts: xupstdOnAlternatePowerSource.setStatus('current')
xupstdAltPowerNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 40)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAltPowerNotAvailable.setStatus('current')
xupstdNoticeCondition = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 41)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdNoticeCondition.setStatus('current')
xupstdRemoteTempBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 42)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("EATON-EMP-MIB", "xupsEnvRemoteTemp"), ("EATON-EMP-MIB", "xupsEnvRemoteTempLowerLimit"), ("EATON-EMP-MIB", "xupsEnvRemoteTempUpperLimit"))
if mibBuilder.loadTexts: xupstdRemoteTempBad.setStatus('current')
xupstdRemoteHumidityBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 43)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("EATON-EMP-MIB", "xupsEnvRemoteHumidity"), ("EATON-EMP-MIB", "xupsEnvRemoteHumidityLowerLimit"), ("EATON-EMP-MIB", "xupsEnvRemoteHumidityUpperLimit"))
if mibBuilder.loadTexts: xupstdRemoteHumidityBad.setStatus('current')
xupstdHeartbeat = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 44)).setObjects(("XUPS-MIB", "xupsInputSource"), ("XUPS-MIB", "xupsOutputSource"), ("XUPS-MIB", "xupsAlarms"))
if mibBuilder.loadTexts: xupstdHeartbeat.setStatus('current')
xupstdDiagnosticTestPassed = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 45)).setObjects(("XUPS-MIB", "xupsTestBatteryStatus"), ("XUPS-MIB", "xupsLastGeneralTest"), ("XUPS-MIB", "xupsLastGeneralTestResult"))
if mibBuilder.loadTexts: xupstdDiagnosticTestPassed.setStatus('current')
xupstdOutputBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 46)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOutputBad.setStatus('current')
xupstdAwaitingPower = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 47)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAwaitingPower.setStatus('current')
xupstdOnMaintenanceBypass = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 48)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOnMaintenanceBypass.setStatus('current')
xupstdCommEstablished = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 49)).setObjects(("XUPS-MIB", "xupsIdentModel"), ("XUPS-MIB", "xupsOutputSource"))
if mibBuilder.loadTexts: xupstdCommEstablished.setStatus('current')
xupstdAgentDown = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 50))
if mibBuilder.loadTexts: xupstdAgentDown.setStatus('current')
xupstdOutputNotProtected = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 51)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOutputNotProtected.setStatus('current')
xupstdTestTrap = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 100)).setObjects(("SNMPv2-MIB", "sysName"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdTestTrap.setStatus('current')
xupsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 100))
xupsIdentFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 2)).setObjects(("XUPS-MIB", "xupsIdentManufacturer"), ("XUPS-MIB", "xupsIdentModel"), ("XUPS-MIB", "xupsIdentSoftwareVersion"), ("XUPS-MIB", "xupsIdentOemCode"), ("XUPS-MIB", "xupsIdentPartNumber"), ("XUPS-MIB", "xupsIdentSerialNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsIdentFullGroup = xupsIdentFullGroup.setStatus('current')
xupsBatteryFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 3)).setObjects(("XUPS-MIB", "xupsBatTimeRemaining"), ("XUPS-MIB", "xupsBatVoltage"), ("XUPS-MIB", "xupsBatCurrent"), ("XUPS-MIB", "xupsBatCapacity"), ("XUPS-MIB", "xupsBatteryAbmStatus"), ("XUPS-MIB", "xupsBatteryLastReplacedDate"), ("XUPS-MIB", "xupsBatteryFailure"), ("XUPS-MIB", "xupsBatteryNotPresent"), ("XUPS-MIB", "xupsBatteryAged"), ("XUPS-MIB", "xupsBatteryLowCapacity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsBatteryFullGroup = xupsBatteryFullGroup.setStatus('current')
xupsInputFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 4)).setObjects(("XUPS-MIB", "xupsInputFrequency"), ("XUPS-MIB", "xupsInputLineBads"), ("XUPS-MIB", "xupsInputNumPhases"), ("XUPS-MIB", "xupsInputSource"), ("XUPS-MIB", "xupsDualInputStatus"), ("XUPS-MIB", "xupsSecondaryInputWatch"), ("XUPS-MIB", "xupsInputStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsInputFullGroup = xupsInputFullGroup.setStatus('current')
xupsInputTableFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 5)).setObjects(("XUPS-MIB", "xupsInputPhase"), ("XUPS-MIB", "xupsInputVoltage"), ("XUPS-MIB", "xupsInputCurrent"), ("XUPS-MIB", "xupsInputWatts"), ("XUPS-MIB", "xupsInputId"), ("XUPS-MIB", "xupsInputName"), ("XUPS-MIB", "xupsInputCurrentHighPrecision"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsInputTableFullGroup = xupsInputTableFullGroup.setStatus('current')
xupsOutputFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 6)).setObjects(("XUPS-MIB", "xupsOutputLoad"), ("XUPS-MIB", "xupsOutputFrequency"), ("XUPS-MIB", "xupsOutputNumPhases"), ("XUPS-MIB", "xupsOutputSource"), ("XUPS-MIB", "xupsOutputHourlyPowerUsage"), ("XUPS-MIB", "xupsOutputCumulativePowerUsage"), ("XUPS-MIB", "xupsOutputCumulativePowerUsageTimer"), ("XUPS-MIB", "xupsOutputStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsOutputFullGroup = xupsOutputFullGroup.setStatus('current')
xupsOutputTableFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 7)).setObjects(("XUPS-MIB", "xupsOutputPhase"), ("XUPS-MIB", "xupsOutputVoltage"), ("XUPS-MIB", "xupsOutputCurrent"), ("XUPS-MIB", "xupsOutputWatts"), ("XUPS-MIB", "xupsOutputId"), ("XUPS-MIB", "xupsOutputName"), ("XUPS-MIB", "xupsOutputCurrentHighPrecision"), ("XUPS-MIB", "xupsOutputPercentLoad"), ("XUPS-MIB", "xupsOutputVA"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsOutputTableFullGroup = xupsOutputTableFullGroup.setStatus('current')
xupsBypassFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 8)).setObjects(("XUPS-MIB", "xupsBypassFrequency"), ("XUPS-MIB", "xupsBypassNumPhases"), ("XUPS-MIB", "xupsBypassPhase"), ("XUPS-MIB", "xupsBypassVoltage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsBypassFullGroup = xupsBypassFullGroup.setStatus('current')
xupsEnvironmentFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 9)).setObjects(("XUPS-MIB", "xupsEnvAmbientTemp"), ("XUPS-MIB", "xupsEnvAmbientLowerLimit"), ("XUPS-MIB", "xupsEnvAmbientUpperLimit"), ("XUPS-MIB", "xupsEnvAmbientHumidity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsEnvironmentFullGroup = xupsEnvironmentFullGroup.setStatus('current')
xupsAlarmFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 10)).setObjects(("XUPS-MIB", "xupsAlarms"), ("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsAlarmTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsAlarmFullGroup = xupsAlarmFullGroup.setStatus('current')
xupsAlarmEventsFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 11)).setObjects(("XUPS-MIB", "xupsAlarmNumEvents"), ("XUPS-MIB", "xupsAlarmEventMsg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsAlarmEventsFullGroup = xupsAlarmEventsFullGroup.setStatus('current')
xupsTestFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 12)).setObjects(("XUPS-MIB", "xupsTestStart"), ("XUPS-MIB", "xupsTestBatteryStatus"), ("XUPS-MIB", "xupsLastGeneralTest"), ("XUPS-MIB", "xupsLastGeneralTestResult"), ("XUPS-MIB", "xupsTestTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsTestFullGroup = xupsTestFullGroup.setStatus('current')
xupsControlFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 13)).setObjects(("XUPS-MIB", "xupsControlOutputOffDelay"), ("XUPS-MIB", "xupsControlOutputOnDelay"), ("XUPS-MIB", "xupsControlOutputOffTrapDelay"), ("XUPS-MIB", "xupsControlToBypassDelay"), ("XUPS-MIB", "xupsLoadShedSecsWithRestart"), ("XUPS-MIB", "xupsSwitchable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsControlFullGroup = xupsControlFullGroup.setStatus('current')
xupsConfigFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 14)).setObjects(("XUPS-MIB", "xupsConfigOutputVoltage"), ("XUPS-MIB", "xupsConfigInputVoltage"), ("XUPS-MIB", "xupsConfigOutputWatts"), ("XUPS-MIB", "xupsConfigOutputFreq"), ("XUPS-MIB", "xupsConfigDateAndTime"), ("XUPS-MIB", "xupsConfigLowOutputVoltageLimit"), ("XUPS-MIB", "xupsConfigHighOutputVoltageLimit"), ("XUPS-MIB", "xupsConfigInstallDate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsConfigFullGroup = xupsConfigFullGroup.setStatus('current')
xupsTrapControlFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 15)).setObjects(("XUPS-MIB", "xupsMaxTrapLevel"), ("XUPS-MIB", "xupsSendTrapType"), ("XUPS-MIB", "xupsTrapMessage"), ("XUPS-MIB", "xupsHeartbeatMinsInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsTrapControlFullGroup = xupsTrapControlFullGroup.setStatus('current')
xupsRecepFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 16)).setObjects(("XUPS-MIB", "xupsNumReceptacles"), ("XUPS-MIB", "xupsRecepIndex"), ("XUPS-MIB", "xupsRecepStatus"), ("XUPS-MIB", "xupsRecepOffDelaySecs"), ("XUPS-MIB", "xupsRecepOnDelaySecs"), ("XUPS-MIB", "xupsRecepAutoOffDelay"), ("XUPS-MIB", "xupsRecepAutoOnDelay"), ("XUPS-MIB", "xupsRecepShedSecsWithRestart"), ("XUPS-MIB", "xupsRecepHourlyPowerUsage"), ("XUPS-MIB", "xupsRecepCumulativePowerUsage"), ("XUPS-MIB", "xupsRecepCumulativePowerUsageTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsRecepFullGroup = xupsRecepFullGroup.setStatus('current')
xupsTopologyFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 17)).setObjects(("XUPS-MIB", "xupsTopologyType"), ("XUPS-MIB", "xupsTopoMachineCode"), ("XUPS-MIB", "xupsTopoUnitNumber"), ("XUPS-MIB", "xupsTopoPowerStrategy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsTopologyFullGroup = xupsTopologyFullGroup.setStatus('current')
xupstdNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 18)).setObjects(("XUPS-MIB", "xupstdControlOff"), ("XUPS-MIB", "xupstdControlOn"), ("XUPS-MIB", "xupstdOnBattery"), ("XUPS-MIB", "xupstdLowBattery"), ("XUPS-MIB", "xupstdUtilityPowerRestored"), ("XUPS-MIB", "xupstdReturnFromLowBattery"), ("XUPS-MIB", "xupstdOutputOverload"), ("XUPS-MIB", "xupstdInternalFailure"), ("XUPS-MIB", "xupstdBatteryDischarged"), ("XUPS-MIB", "xupstdInverterFailure"), ("XUPS-MIB", "xupstdOnBypass"), ("XUPS-MIB", "xupstdBypassNotAvailable"), ("XUPS-MIB", "xupstdOutputOff"), ("XUPS-MIB", "xupstdInputFailure"), ("XUPS-MIB", "xupstdBuildingAlarm"), ("XUPS-MIB", "xupstdShutdownImminent"), ("XUPS-MIB", "xupstdOnInverter"), ("XUPS-MIB", "xupstdBreakerOpen"), ("XUPS-MIB", "xupstdAlarmEntryAdded"), ("XUPS-MIB", "xupstdAlarmEntryRemoved"), ("XUPS-MIB", "xupstdAlarmBatteryBad"), ("XUPS-MIB", "xupstdOutputOffAsRequested"), ("XUPS-MIB", "xupstdDiagnosticTestFailed"), ("XUPS-MIB", "xupstdCommunicationsLost"), ("XUPS-MIB", "xupstdUpsShutdownPending"), ("XUPS-MIB", "xupstdAlarmTempBad"), ("XUPS-MIB", "xupstdAlarmTestInProgress"), ("XUPS-MIB", "xupstdAmbientTempBad"), ("XUPS-MIB", "xupstdLossOfRedundancy"), ("XUPS-MIB", "xupstdAlarmChargerFailed"), ("XUPS-MIB", "xupstdAlarmFanFailure"), ("XUPS-MIB", "xupstdAlarmFuseFailure"), ("XUPS-MIB", "xupstdPowerSwitchBad"), ("XUPS-MIB", "xupstdModuleFailure"), ("XUPS-MIB", "xupstdOnAlternatePowerSource"), ("XUPS-MIB", "xupstdAltPowerNotAvailable"), ("XUPS-MIB", "xupstdNoticeCondition"), ("XUPS-MIB", "xupstdHeartbeat"), ("XUPS-MIB", "xupstdDiagnosticTestPassed"), ("XUPS-MIB", "xupstdOutputBad"), ("XUPS-MIB", "xupstdAwaitingPower"), ("XUPS-MIB", "xupstdOnMaintenanceBypass"), ("XUPS-MIB", "xupstdCommEstablished"), ("XUPS-MIB", "xupstdAgentDown"), ("XUPS-MIB", "xupstdOutputNotProtected"), ("XUPS-MIB", "xupstdTestTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupstdNotifyGroup = xupstdNotifyGroup.setStatus('current')
xupstdEMPNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 19)).setObjects(("XUPS-MIB", "xupstdContactActiveNotice"), ("XUPS-MIB", "xupstdContactInactiveNotice"), ("XUPS-MIB", "xupstdRemoteTempBad"), ("XUPS-MIB", "xupstdRemoteHumidityBad"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupstdEMPNotifyGroup = xupstdEMPNotifyGroup.setStatus('current')
xupsMibFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 534, 1, 100, 20)).setObjects(("XUPS-MIB", "xupsIdentFullGroup"), ("XUPS-MIB", "xupsBatteryFullGroup"), ("XUPS-MIB", "xupsInputFullGroup"), ("XUPS-MIB", "xupsInputTableFullGroup"), ("XUPS-MIB", "xupsOutputFullGroup"), ("XUPS-MIB", "xupsOutputTableFullGroup"), ("XUPS-MIB", "xupsBypassFullGroup"), ("XUPS-MIB", "xupsEnvironmentFullGroup"), ("XUPS-MIB", "xupsAlarmFullGroup"), ("XUPS-MIB", "xupsAlarmEventsFullGroup"), ("XUPS-MIB", "xupsTestFullGroup"), ("XUPS-MIB", "xupsControlFullGroup"), ("XUPS-MIB", "xupsConfigFullGroup"), ("XUPS-MIB", "xupsTrapControlFullGroup"), ("XUPS-MIB", "xupsRecepFullGroup"), ("XUPS-MIB", "xupsTopologyFullGroup"), ("XUPS-MIB", "xupstdNotifyGroup"), ("XUPS-MIB", "xupstdEMPNotifyGroup"), ("XUPS-MIB", "xupsBypassTableFullGroup"), ("XUPS-MIB", "xupsInputTotalFullGroup"), ("XUPS-MIB", "xupsOutputTotalFullGroup"), ("XUPS-MIB", "xupsBypassTotalFullGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsMibFullCompliance = xupsMibFullCompliance.setStatus('current')
xupsDeprecatedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 21)).setObjects(("XUPS-MIB", "xupsAlarmEventDateAndTime"), ("XUPS-MIB", "xupsAlarmEventKind"), ("XUPS-MIB", "xupsAlarmEventDescr"), ("XUPS-MIB", "xupsControlOutputOnTrapDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsDeprecatedGroup = xupsDeprecatedGroup.setStatus('deprecated')
xupsBypassTableFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 22)).setObjects(("XUPS-MIB", "xupsBypassId"), ("XUPS-MIB", "xupsBypassName"), ("XUPS-MIB", "xupsBypassCurrentHighPrecision"), ("XUPS-MIB", "xupsBypassWatts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsBypassTableFullGroup = xupsBypassTableFullGroup.setStatus('current')
xupsInputTotalFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 23)).setObjects(("XUPS-MIB", "xupsInputAverageVoltage"), ("XUPS-MIB", "xupsInputTotalCurrent"), ("XUPS-MIB", "xupsInputTotalWatts"), ("XUPS-MIB", "xupsInputTotalVA"), ("XUPS-MIB", "xupsInputAveragePowerFactor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsInputTotalFullGroup = xupsInputTotalFullGroup.setStatus('current')
xupsOutputTotalFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 24)).setObjects(("XUPS-MIB", "xupsOutputAverageVoltage"), ("XUPS-MIB", "xupsOutputTotalCurrent"), ("XUPS-MIB", "xupsOutputTotalWatts"), ("XUPS-MIB", "xupsOutputTotalVA"), ("XUPS-MIB", "xupsOutputAveragePowerFactor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsOutputTotalFullGroup = xupsOutputTotalFullGroup.setStatus('current')
xupsBypassTotalFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 25)).setObjects(("XUPS-MIB", "xupsBypassAverageVoltage"), ("XUPS-MIB", "xupsBypassTotalCurrent"), ("XUPS-MIB", "xupsBypassTotalWatts"), ("XUPS-MIB", "xupsBypassTotalVA"), ("XUPS-MIB", "xupsBypassAveragePowerFactor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsBypassTotalFullGroup = xupsBypassTotalFullGroup.setStatus('current')
xupsAgentFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 26)).setObjects(("XUPS-MIB", "xupsAgentManufacturer"), ("XUPS-MIB", "xupsAgentModel"), ("XUPS-MIB", "xupsAgentSoftwareVersion"), ("XUPS-MIB", "xupsAgentPartNumber"), ("XUPS-MIB", "xupsAgentSerialNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsAgentFullGroup = xupsAgentFullGroup.setStatus('current')
mibBuilder.exportSymbols("XUPS-MIB", xupsBreakerOpen=xupsBreakerOpen, xupstdNotifyGroup=xupstdNotifyGroup, xupstdUpsShutdownPending=xupstdUpsShutdownPending, xupsAltPowerNotAvailable=xupsAltPowerNotAvailable, xupstdAlarmEntryRemoved=xupstdAlarmEntryRemoved, xupsControlOutputOnTrapDelay=xupsControlOutputOnTrapDelay, xupsUtilityPowerRestored=xupsUtilityPowerRestored, xupsEnvAmbientUpperLimit=xupsEnvAmbientUpperLimit, xupsAgent=xupsAgent, xupsAlarmTable=xupsAlarmTable, xupsOutputTable=xupsOutputTable, xupsBypassTotal=xupsBypassTotal, xupsAlarmEventTable=xupsAlarmEventTable, xupsBatteryFullGroup=xupsBatteryFullGroup, xupsRecepFullGroup=xupsRecepFullGroup, xupsRecepAutoOnDelay=xupsRecepAutoOnDelay, xupsBypassTotalFullGroup=xupsBypassTotalFullGroup, xupsTopoMachineCode=xupsTopoMachineCode, xupsBypassTotalVA=xupsBypassTotalVA, xupsAmbientTempBad=xupsAmbientTempBad, xupsAlarmEventKind=xupsAlarmEventKind, xupsInputTotalFullGroup=xupsInputTotalFullGroup, xupsTrapDefined=xupsTrapDefined, xupsTopoUnitNumber=xupsTopoUnitNumber, xupsEnvAmbientLowerLimit=xupsEnvAmbientLowerLimit, xupsBypassFrequency=xupsBypassFrequency, xupsInputFullGroup=xupsInputFullGroup, xupsInputWatts=xupsInputWatts, xupsEnvAmbientHumidity=xupsEnvAmbientHumidity, xupsRemoteHumidityBad=xupsRemoteHumidityBad, xupsEnvironmentFullGroup=xupsEnvironmentFullGroup, xupsOutputNumPhases=xupsOutputNumPhases, xupsOnMaintenanceBypass=xupsOnMaintenanceBypass, xupstdOnInverter=xupstdOnInverter, xupsIdentModel=xupsIdentModel, xupsBypassPhase=xupsBypassPhase, xupsInputAveragePowerFactor=xupsInputAveragePowerFactor, xupsOutputVoltage=xupsOutputVoltage, xupsTestStart=xupsTestStart, xupsOutputVA=xupsOutputVA, xupsConfigDateAndTime=xupsConfigDateAndTime, xupsShutdownImminent=xupsShutdownImminent, xupsAlarmTempBad=xupsAlarmTempBad, xupsOutputOverload=xupsOutputOverload, xupsTestBatteryStatus=xupsTestBatteryStatus, xupsBatTimeRemaining=xupsBatTimeRemaining, xupsBatteryAged=xupsBatteryAged, xupsBatteryFailure=xupsBatteryFailure, xupsBatteryAbmStatus=xupsBatteryAbmStatus, xupsOutputId=xupsOutputId, xupsBypassName=xupsBypassName, xupsConfigOutputVoltage=xupsConfigOutputVoltage, xupsMibFullCompliance=xupsMibFullCompliance, xupstdInternalFailure=xupstdInternalFailure, xupsAlarmEntryRemoved=xupsAlarmEntryRemoved, xupsInputAverageVoltage=xupsInputAverageVoltage, xupsSwitchable=xupsSwitchable, xupstdOutputOff=xupstdOutputOff, xupstdAlarmTempBad=xupstdAlarmTempBad, xupsConfigHighOutputVoltageLimit=xupsConfigHighOutputVoltageLimit, xupsBypassNumPhases=xupsBypassNumPhases, xupsBatteryDischarged=xupsBatteryDischarged, xupstdDiagnosticTestPassed=xupstdDiagnosticTestPassed, xupsOutputName=xupsOutputName, xupstdControlOn=xupstdControlOn, xupsAlarmEventEntry=xupsAlarmEventEntry, xupsOutputTotal=xupsOutputTotal, xupstdNoticeCondition=xupstdNoticeCondition, xupsInputNumPhases=xupsInputNumPhases, xupsInputTable=xupsInputTable, xupsConfigOutputWatts=xupsConfigOutputWatts, xupsOutputWatts=xupsOutputWatts, xupsTestTrap=xupsTestTrap, xupsAlarmAwaitingPower=xupsAlarmAwaitingPower, xupsBypass=xupsBypass, xupstdRemoteTempBad=xupstdRemoteTempBad, xupsBypassNotAvailable=xupsBypassNotAvailable, xupsBypassAveragePowerFactor=xupsBypassAveragePowerFactor, xupsControl=xupsControl, xupstdOnMaintenanceBypass=xupstdOnMaintenanceBypass, xupstdCommunicationsLost=xupstdCommunicationsLost, xupsAgentFullGroup=xupsAgentFullGroup, xupstdLowBattery=xupstdLowBattery, xupsAlarmFuseFailure=xupsAlarmFuseFailure, xupstdControlOff=xupstdControlOff, xupsInputTableFullGroup=xupsInputTableFullGroup, xupsBypassTotalCurrent=xupsBypassTotalCurrent, PYSNMP_MODULE_ID=xupsMIB, xupsDeprecatedGroup=xupsDeprecatedGroup, xupsControlOutputOffDelay=xupsControlOutputOffDelay, xupsAlarmBatteryBad=xupsAlarmBatteryBad, xupsDiagnosticTestFailed=xupsDiagnosticTestFailed, xupsNumReceptacles=xupsNumReceptacles, xupstdModuleFailure=xupstdModuleFailure, xupsBatVoltage=xupsBatVoltage, xupstdReturnFromLowBattery=xupstdReturnFromLowBattery, xupstdAlarmBatteryBad=xupstdAlarmBatteryBad, xupsInputTotalVA=xupsInputTotalVA, xupsNoticeCondition=xupsNoticeCondition, xupsLowBattery=xupsLowBattery, xupsInternalFailure=xupsInternalFailure, xupsAgentSoftwareVersion=xupsAgentSoftwareVersion, xupstdOutputNotProtected=xupstdOutputNotProtected, xupsOutputPercentLoad=xupsOutputPercentLoad, xupsControlToBypassDelay=xupsControlToBypassDelay, xupsBypassWatts=xupsBypassWatts, xupsRecepIndex=xupsRecepIndex, xupsLastGeneralTest=xupsLastGeneralTest, xupsReturnFromLowBattery=xupsReturnFromLowBattery, xupstdOnAlternatePowerSource=xupstdOnAlternatePowerSource, xupsMIB=xupsMIB, xupsOutputCumulativePowerUsage=xupsOutputCumulativePowerUsage, xupsRecepAutoOffDelay=xupsRecepAutoOffDelay, xupstdBreakerOpen=xupstdBreakerOpen, xupstdAgentDown=xupstdAgentDown, xupsBypassTableFullGroup=xupsBypassTableFullGroup, xupsSendTrapType=xupsSendTrapType, xupsAlarm=xupsAlarm, xupsAlarmEventMsg=xupsAlarmEventMsg, xupsInputVoltage=xupsInputVoltage, xupstdAmbientTempBad=xupstdAmbientTempBad, xupstdTestTrap=xupstdTestTrap, xupsAgentManufacturer=xupsAgentManufacturer, xupsInputPhase=xupsInputPhase, xupsOutputHourlyPowerUsage=xupsOutputHourlyPowerUsage, xupsTrapControl=xupsTrapControl, xupsAlarmEventID=xupsAlarmEventID, xupsTopologyType=xupsTopologyType, xupsLoadShedSecsWithRestart=xupsLoadShedSecsWithRestart, xupsBypassVoltage=xupsBypassVoltage, xupsOutputCurrentHighPrecision=xupsOutputCurrentHighPrecision, xupstdOutputBad=xupstdOutputBad, xupsControlFullGroup=xupsControlFullGroup, xupsBatteryLowCapacity=xupsBatteryLowCapacity, xupstdInputFailure=xupstdInputFailure, xupsEnvAmbientTemp=xupsEnvAmbientTemp, xupsAlarmTime=xupsAlarmTime, xupstdAlarmFuseFailure=xupstdAlarmFuseFailure, xupsAlarmEventDescr=xupsAlarmEventDescr, xupsRecepCumulativePowerUsageTimer=xupsRecepCumulativePowerUsageTimer, xupstdBatteryDischarged=xupstdBatteryDischarged, xupsIdentFullGroup=xupsIdentFullGroup, xupstdContactInactiveNotice=xupstdContactInactiveNotice, xupsInputSource=xupsInputSource, xupsLastGeneralTestResult=xupsLastGeneralTestResult, xupsTopologyFullGroup=xupsTopologyFullGroup, xupsBattery=xupsBattery, xupsConfigOutputFreq=xupsConfigOutputFreq, xupsBatteryLastReplacedDate=xupsBatteryLastReplacedDate, xupsIdentOemCode=xupsIdentOemCode, xupsBuildingAlarm=xupsBuildingAlarm, xupstdShutdownImminent=xupstdShutdownImminent, xupstdAlarmTestInProgress=xupstdAlarmTestInProgress, xupsRecepEntry=xupsRecepEntry, xupsOnBattery=xupsOnBattery, xupsAlarms=xupsAlarms, xupsRecepShedSecsWithRestart=xupsRecepShedSecsWithRestart, xupsRecepHourlyPowerUsage=xupsRecepHourlyPowerUsage, xupstdAwaitingPower=xupstdAwaitingPower, xupsOutputEntry=xupsOutputEntry, xupsInputName=xupsInputName, xupstdBypassNotAvailable=xupstdBypassNotAvailable, xupsOutputOffAsRequested=xupsOutputOffAsRequested, xupsConfigInstallDate=xupsConfigInstallDate, xupsInputCurrentHighPrecision=xupsInputCurrentHighPrecision, xupstdAlarmChargerFailed=xupstdAlarmChargerFailed, xupsInputTotalWatts=xupsInputTotalWatts, xupstdHeartbeat=xupstdHeartbeat, xupstdRemoteHumidityBad=xupstdRemoteHumidityBad, xupsSecondaryInputWatch=xupsSecondaryInputWatch, xupsAgentModel=xupsAgentModel, xupsAlarmDescr=xupsAlarmDescr, xupsAlarmFullGroup=xupsAlarmFullGroup, xupsOutputLoad=xupsOutputLoad, xupsAlarmEntryAdded=xupsAlarmEntryAdded, xupsRecepOnDelaySecs=xupsRecepOnDelaySecs, xupsBypassAverageVoltage=xupsBypassAverageVoltage, xupsBypassId=xupsBypassId, xupsIdentPartNumber=xupsIdentPartNumber, xupstdOutputOffAsRequested=xupstdOutputOffAsRequested, xupsPowerSwitchBad=xupsPowerSwitchBad, xupstdAlarmEntryAdded=xupstdAlarmEntryAdded, xupsTrapSource=xupsTrapSource, xupsCommunicationsLost=xupsCommunicationsLost, xupsTopoPowerStrategy=xupsTopoPowerStrategy, xupstdOnBattery=xupstdOnBattery, xupstdOutputOverload=xupstdOutputOverload, xupsOnInverter=xupsOnInverter, xupsAlarmOutputBad=xupsAlarmOutputBad, xupsOutputTableFullGroup=xupsOutputTableFullGroup, xupsBatteryNotPresent=xupsBatteryNotPresent, xupsIdentSoftwareVersion=xupsIdentSoftwareVersion, xupsConfig=xupsConfig, xupsModuleFailure=xupsModuleFailure, xupsOutputFrequency=xupsOutputFrequency, xupsInputLineBads=xupsInputLineBads, xupsOutputSource=xupsOutputSource, xupsInputEntry=xupsInputEntry, xupsAlarmNumEvents=xupsAlarmNumEvents, xupsTest=xupsTest, xupsRecepStatus=xupsRecepStatus, xupsInputFrequency=xupsInputFrequency, xupstdCommEstablished=xupstdCommEstablished, xupsIdent=xupsIdent, xupsOutputPhase=xupsOutputPhase, xupsOutputNotProtected=xupsOutputNotProtected, xupsInputStatus=xupsInputStatus, xupsHeartbeatMinsInterval=xupsHeartbeatMinsInterval, xupsAlarmEventDateAndTime=xupsAlarmEventDateAndTime, xupsTrapOidDefined=xupsTrapOidDefined, xupstdUtilityPowerRestored=xupstdUtilityPowerRestored, xupsBypassFullGroup=xupsBypassFullGroup, xupsRecepCumulativePowerUsage=xupsRecepCumulativePowerUsage, xupsTestFullGroup=xupsTestFullGroup, xupsControlOutputOnDelay=xupsControlOutputOnDelay, xupsAlarmFanFailure=xupsAlarmFanFailure, xupsInverterFailure=xupsInverterFailure, xupstdAltPowerNotAvailable=xupstdAltPowerNotAvailable, xupsRecep=xupsRecep, xupsDualInputStatus=xupsDualInputStatus, xupsOnBypass=xupsOnBypass, xupsAlarmChargerFailed=xupsAlarmChargerFailed, xupsRemoteTempBad=xupsRemoteTempBad, xupsConformance=xupsConformance, xupstdEMPNotifyGroup=xupstdEMPNotifyGroup, xupstdLossOfRedundancy=xupstdLossOfRedundancy, xupsOutputTotalWatts=xupsOutputTotalWatts, xupsInputId=xupsInputId, xupsOutputAverageVoltage=xupsOutputAverageVoltage, xupsMaxTrapLevel=xupsMaxTrapLevel, xupsAlarmEntry=xupsAlarmEntry, xupsIdentManufacturer=xupsIdentManufacturer, xupsBypassCurrentHighPrecision=xupsBypassCurrentHighPrecision, xupsAgentPartNumber=xupsAgentPartNumber, xupsOutput=xupsOutput, xupsInputTotalCurrent=xupsInputTotalCurrent, xupsConfigLowOutputVoltageLimit=xupsConfigLowOutputVoltageLimit, xupsOnAlternatePowerSource=xupsOnAlternatePowerSource, xupstdDiagnosticTestFailed=xupstdDiagnosticTestFailed, xupsTopology=xupsTopology, xupsOutputTotalVA=xupsOutputTotalVA, xupsLossOfRedundancy=xupsLossOfRedundancy, xupsConfigInputVoltage=xupsConfigInputVoltage, xupsBatCapacity=xupsBatCapacity, xupsAlarmEventsFullGroup=xupsAlarmEventsFullGroup, xupsOutputOff=xupsOutputOff, xupsOutputCurrent=xupsOutputCurrent, xupsOutputAveragePowerFactor=xupsOutputAveragePowerFactor, xupstdOnBypass=xupstdOnBypass, xupsOutputTotalFullGroup=xupsOutputTotalFullGroup, xupsTrapControlFullGroup=xupsTrapControlFullGroup, xupstdContactActiveNotice=xupstdContactActiveNotice, xupsRecepOffDelaySecs=xupsRecepOffDelaySecs, xupsTrapMessage=xupsTrapMessage)
mibBuilder.exportSymbols("XUPS-MIB", xupsAgentSerialNumber=xupsAgentSerialNumber, xupsOutputStatus=xupsOutputStatus, xupsAlarmTestInProgress=xupsAlarmTestInProgress, xupstdPowerSwitchBad=xupstdPowerSwitchBad, xupsUpsShutdownPending=xupsUpsShutdownPending, xupsBypassTable=xupsBypassTable, xupsBypassEntry=xupsBypassEntry, xupstdAlarmFanFailure=xupstdAlarmFanFailure, xupsBatCurrent=xupsBatCurrent, xupsConfigFullGroup=xupsConfigFullGroup, xupsOutputTotalCurrent=xupsOutputTotalCurrent, xupstdBuildingAlarm=xupstdBuildingAlarm, xupsControlOutputOffTrapDelay=xupsControlOutputOffTrapDelay, xupsOutputCumulativePowerUsageTimer=xupsOutputCumulativePowerUsageTimer, xupstdInverterFailure=xupstdInverterFailure, xupsRecepTable=xupsRecepTable, xupsAlarmID=xupsAlarmID, xupsInputCurrent=xupsInputCurrent, xupsInputTotal=xupsInputTotal, xupsBypassTotalWatts=xupsBypassTotalWatts, xupsInputFailure=xupsInputFailure, xupsInput=xupsInput, xupsIdentSerialNumber=xupsIdentSerialNumber, xupsOutputFullGroup=xupsOutputFullGroup)
