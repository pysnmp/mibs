#
# PySNMP MIB module NAG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/snr/NAG-MIB
# Produced by pysmi-1.1.12 at Wed Dec  4 21:20:49 2024
# On host fv-az585-169 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, mib_2, Integer32, NotificationType, Bits, Gauge32, NotificationType, Counter32, ModuleIdentity, enterprises, experimental, ObjectIdentity, MibIdentifier, Counter64, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "mib-2", "Integer32", "NotificationType", "Bits", "Gauge32", "NotificationType", "Counter32", "ModuleIdentity", "enterprises", "experimental", "ObjectIdentity", "MibIdentifier", "Counter64", "iso", "Unsigned32")
DisplayString, TimeStamp, RowStatus, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "RowStatus", "TruthValue", "TextualConvention")
class DisplayString(OctetString):
    pass

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(17, 17)
    fixedLength = 17

class InetAddressType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 16))
    namedValues = NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("dns", 16))

class InetAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class VlanList(TextualConvention, OctetString):
    status = 'current'

class PortList(TextualConvention, OctetString):
    status = 'current'

class EnabledStatusPrivate(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("enabled", 1), ("disabled", 0))

class ValidStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("valid", 1), ("invalid", 0))

class OspfBigMetric(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 16777214)

class OspfAreaID(TextualConvention, IpAddress):
    status = 'current'

class SnmpAdminString(TextualConvention, OctetString):
    status = 'current'
    displayHint = '255t'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class InterfaceIndex(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class InterfaceIndexOrZero(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class TimeFilter(TextualConvention, TimeTicks):
    status = 'current'

class Ipv6Address(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

NAG = MibIdentifier((1, 3, 6, 1, 4, 1, 40418))
SNR = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7))
os = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100))
notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101))
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 102))
priSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1))
priSpanningTree = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2))
priPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3))
priIpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4))
priVlanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5))
priJumblyStacking = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 6))
priUamSecurityPortMib = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7))
priIgmpSnoopingMib = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8))
priQinQmib = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9))
prisecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10))
priQos = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11))
primirror = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12))
pridhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13))
priportGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14))
prisnmpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15))
l3 = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16))
sntpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17))
urpf = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 18))
dcscm = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20))
dcscm6 = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21))
prClusterv2 = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22))
dns = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23))
ntpSnmpMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25))
priPoeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26))
priQos2 = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27))
dot1xMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28))
portMacCountLimit = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 29))
ddm = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30))
priPppoeIaMib = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31))
portSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32))
macNotificationMib = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33))
prieeePortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 34))
portRateLimit = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35))
macBlackholeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 36))
priCable = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 37))
priMrppRing = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 38))
erpsMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39))
fdbMacInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40))
lldpPrivateInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 200))
ntpSnmpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1))
ntpEntInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 1))
ntpEntStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2))
sysResetUnit = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noReset", 1), ("setfactory", 2), ("warmReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResetUnit.setStatus('current')
sysHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareVersion.setStatus('current')
sysSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSoftwareVersion.setStatus('current')
sysStackFlag = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stack", 1), ("noStack", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStackFlag.setStatus('current')
sysCPUMac = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 5), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUMac.setStatus('current')
sysWriteConfig = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("write", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysWriteConfig.setStatus('current')
sysPowerStateTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 7), )
if mibBuilder.loadTexts: sysPowerStateTable.setStatus('current')
sysPowerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 7, 1), ).setIndexNames((0, "NAG-MIB", "sysPowerSlotIndex"))
if mibBuilder.loadTexts: sysPowerStateEntry.setStatus('current')
sysPowerSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: sysPowerSlotIndex.setStatus('current')
sysPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("sysPowerInstalled", 1), ("sysPowerNotInstalled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPowerState.setStatus('current')
sysPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPowerValue.setStatus('current')
sysPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("systemPower", 0), ("poePower", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPowerType.setStatus('current')
sysPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("abnormal", 1), ("na", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPowerStatus.setStatus('current')
sysSlotTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8), )
if mibBuilder.loadTexts: sysSlotTable.setStatus('current')
sysSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1), ).setIndexNames((0, "NAG-MIB", "sysSlotIndex"))
if mibBuilder.loadTexts: sysSlotEntry.setStatus('current')
sysSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: sysSlotIndex.setStatus('current')
sysCPUType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUType.setStatus('current')
sysCPUFiveSecondIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUFiveSecondIdle.setStatus('current')
sysCPUThirtySecondIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUThirtySecondIdle.setStatus('current')
sysCPUFiveMinuteIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUFiveMinuteIdle.setStatus('current')
sysCPUIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUIdle.setStatus('current')
sysMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemorySize.setStatus('current')
sysMemoryBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemoryBusy.setStatus('current')
sysFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFlashSize.setStatus('current')
sysTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTemperature.setStatus('current')
sysCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCpuUsage.setStatus('current')
sysMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemoryUsage.setStatus('current')
sysMemUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemUsage.setStatus('current')
sysPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortNum.setStatus('current')
sysFreeFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFreeFlashSize.setStatus('current')
sysMemorySizeInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemorySizeInMB.setStatus('current')
switchInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 9), )
if mibBuilder.loadTexts: switchInfoTable.setStatus('current')
switchInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 9, 1), ).setIndexNames((0, "NAG-MIB", "swSlotIndex"), (0, "NAG-MIB", "swUnitIndex"))
if mibBuilder.loadTexts: switchInfoEntry.setStatus('current')
swSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSlotIndex.setStatus('current')
swUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitIndex.setStatus('current')
swModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 8, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 299, 300, 301, 302, 303, 304, 305, 320, 321, 322, 323, 324, 326))).clone(namedValues=NamedValues(("typeMFC", 0), ("typeSFC", 1), ("type1GS", 2), ("type1GL", 3), ("type100M1GT", 4), ("type10M100MT", 8), ("type1-M12GB", 101), ("type1-12GT", 102), ("type1-210Gx", 103), ("type1-110Gx", 104), ("type1-CPU8245", 105), ("type1-BACKPLANE", 106), ("type1-24GB", 107), ("type1-24GT", 108), ("type1-36TX", 109), ("type1-4GX32TX", 110), ("type1-16FX", 111), ("type1-ES2GB", 112), ("type1-M4GX24TX", 113), ("type1-ES", 114), ("type1-MI", 115), ("type1-MII", 116), ("type1-12GB", 117), ("type1-M8GB", 118), ("type1-2XFP8GX16GB", 119), ("type1-8GX16GB", 120), ("type1-4GX24TX", 121), ("type1-L-M4GX24TX", 122), ("type1-1XFP8GX16GB", 123), ("type1-2XFP12GX12GT", 124), ("type1-12GX12GT", 125), ("type1-1XFP12GX12GT", 126), ("type1-48GT", 127), ("type1-M1XFP12GX12GT", 128), ("type1-4XFP", 129), ("type1-48GB", 130), ("type1-M44GT", 131), ("type1-M1XFP12GX12GB", 132), ("type1-12GX12GB", 133), ("type1-2XFP12GX12GB", 134), ("type1-4GB12GX8GT", 135), ("type1-2XFP24GB12GT", 136), ("type1-24GB12GT", 137), ("type1-NEWMI", 138), ("type1-M1XFP12GX12GTR4", 139), ("type1-12GX12GTR4", 140), ("type1-2XFP12GX12GTR4", 141), ("type1-E-24GB12GT", 142), ("type1-E-2XFP24GB12GT", 143), ("type1-MSC", 144), ("type8QSFP", 145), ("type1-FW", 146), ("type1-OF", 147), ("type1-MIIR2", 148), ("type1-E-M16GX8GB", 149), ("type1-E-4XS16GX8GB", 150), ("type1-2XFP12GX12GTR5", 151), ("type1-MIIR3", 152), ("type1-M2XS8GX16GB", 154), ("type1-28GB16GT4XS", 155), ("type1-E-48GT", 156), ("type1-44GB4XS", 157), ("type1-20XS2Q", 158), ("type2-M12GB", 165), ("type2-12GT", 166), ("type2-210Gx", 167), ("type2-110Gx", 168), ("type2-CPU8245", 169), ("type2-BACKPLANE", 170), ("type2-24GB", 171), ("type2-24GT", 172), ("type2-36TX", 173), ("type2-4GX32TX", 174), ("type2-16FX", 175), ("type2-ES2GB", 176), ("type2-M4GX24TX", 177), ("type2-ES", 178), ("type2-MI", 179), ("type2-MII", 180), ("type2-12GB", 181), ("type2-M8GB", 182), ("type2-2XFP8GX16GB", 183), ("type2-8GX16GB", 184), ("type2-4GX24TX", 185), ("type2-L-M4GX24TX", 186), ("type2-1XFP8GX16GB", 187), ("type2-2XFP12GX12GT", 188), ("type2-12GX12GT", 189), ("type2-1XFP12GX12GT", 190), ("type2-48GT", 191), ("type2-M1XFP12GX12GT", 192), ("type2-4XFP", 193), ("type2-48GB", 194), ("type2-M44GT", 195), ("type2-M1XFP12GX12GB", 196), ("type2-12GX12GB", 197), ("type2-2XFP12GX12GB", 198), ("type2-4GB12GX8GT", 199), ("type2-2XFP24GB12GT", 200), ("type2-24GB12GT", 201), ("type2-NEWMI", 202), ("type2-M1XFP12GX12GTR4", 203), ("type2-12GX12GTR4", 204), ("type2-2XFP12GX12GTR4", 205), ("type2-E-24GB12GT", 206), ("type2-E-2XFP24GB12GT", 207), ("type2-MSC", 208), ("type2-M1XFP12GX12GTV", 209), ("type2-FW", 210), ("type2-OF", 211), ("type2-MIIR2", 212), ("type2-E-M16GX8GB", 213), ("type2-E-4XS16GX8GB", 214), ("type2-2XFP12GX12GTR5", 215), ("type2-MIIR3", 216), ("type2-M2XS8GX16GB", 218), ("type2-28GB16GT4XS", 219), ("type2-E-48GT", 220), ("type2-44GB4XS", 221), ("type2-20XS2Q", 222), ("type3-M", 228), ("type3-MI", 229), ("type3-MII", 230), ("type3-24GT", 231), ("type3-24GB", 232), ("type3-ES-FW", 233), ("type3-4XFP", 234), ("type3-8XFP", 235), ("type3-24GT-V", 236), ("type3-24GB-V", 237), ("type3-24SFP-PLUS", 238), ("type3-SUP", 239), ("type3-FAB", 240), ("type3-MSC", 241), ("type3-24GT-WS", 242), ("type3-24GB-WS", 243), ("type3-FW", 244), ("type3-8QSFP", 245), ("type3-OF", 246), ("type3-20XS2Q", 247), ("type3-FAB-TWO-CHIP", 248), ("type3-08BACKPLANE", 299), ("type4-4GT", 300), ("type4-4FX", 301), ("type4-2GB", 302), ("type4-4TX", 303), ("type4-4GB", 304), ("type4-4FB", 305), ("type5-M16K-SUP", 320), ("type5-M16K-16Q", 321), ("type5-M16K-FC", 322), ("type5-M16K-48XS2Q", 323), ("type5-M16K-24T24S2XS", 324), ("type5-DCFW-1800-M16K", 326)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swModuleType.setStatus('current')
switchFileCopy = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10))
fileUserName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileUserName.setStatus('current')
fileUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileUserPassword.setStatus('current')
fileIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileIPaddress.setStatus('current')
sourceFileCopy = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceFileCopy.setStatus('current')
destinationFileCopy = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationFileCopy.setStatus('current')
fileCopyMode = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ascii", 0), ("binary", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyMode.setStatus('current')
fileCopyUseMode = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ftp", 1), ("tftp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyUseMode.setStatus('current')
fileCopy = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upload", 1), ("download", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopy.setStatus('current')
fileCopyResult = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("error", 0), ("ok", 1), ("uploading", 2), ("downloading", 3), ("idle", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCopyResult.setStatus('current')
fileName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileName.setStatus('current')
fileType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("any", 0), ("img", 1), ("cfg", 2), ("log", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileType.setStatus('current')
filePort = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filePort.setStatus('current')
fileCopyFailReason = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCopyFailReason.setStatus('current')
fileCMCCCopy = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upload", 1), ("download", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCMCCCopy.setStatus('current')
fileCMCCIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCMCCIPaddress.setStatus('current')
fileCMCCCopyResult = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("error", 0), ("ok", 1), ("uploading", 2), ("downloading", 3), ("idle", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCMCCCopyResult.setStatus('current')
switchInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11))
switchCPUType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCPUType.setStatus('current')
switchCPUFiveSecondIdle = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCPUFiveSecondIdle.setStatus('current')
switchCPUThirtySecondIdle = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCPUThirtySecondIdle.setStatus('current')
switchCPUFiveMinuteIdle = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCPUFiveMinuteIdle.setStatus('current')
switchCPUIdle = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCPUIdle.setStatus('current')
switchMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchMemorySize.setStatus('current')
switchMemoryBusy = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchMemoryBusy.setStatus('current')
switchFlashSize = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchFlashSize.setStatus('current')
switchTemperature = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchTemperature.setStatus('current')
switchCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCpuUsage.setStatus('current')
switchMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchMemoryUsage.setStatus('current')
sysFanTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 12), )
if mibBuilder.loadTexts: sysFanTable.setStatus('current')
sysFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 12, 1), ).setIndexNames((0, "NAG-MIB", "sysFanIndex"))
if mibBuilder.loadTexts: sysFanEntry.setStatus('current')
sysFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: sysFanIndex.setStatus('current')
sysFanInserted = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sysFanNotInstalled", 0), ("sysFanInstalled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFanInserted.setStatus('current')
sysFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("abnormal", 1), ("normal", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFanStatus.setStatus('current')
sysFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("low", 1), ("medium-low", 2), ("medium", 3), ("medium-high", 4), ("high", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysFanSpeed.setStatus('current')
switchBootImgPrimary = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchBootImgPrimary.setStatus('current')
switchBootImgSecondary = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchBootImgSecondary.setStatus('current')
switchBootStartUpCfg = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchBootStartUpCfg.setStatus('current')
showSwitchStartUpStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("success", 2), ("fail", 3), ("in-progress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showSwitchStartUpStatus.setStatus('current')
sysSlotBootInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 17), )
if mibBuilder.loadTexts: sysSlotBootInfoTable.setStatus('current')
sysSlotBootInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 17, 1), ).setIndexNames((0, "NAG-MIB", "sysBootInfoIndex"))
if mibBuilder.loadTexts: sysSlotBootInfoEntry.setStatus('current')
sysBootInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBootInfoIndex.setStatus('current')
sysBootImgPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 17, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBootImgPrimary.setStatus('current')
sysBootImgSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 17, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBootImgSecondary.setStatus('current')
sysBootStartupCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 17, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBootStartupCfg.setStatus('current')
sysSetBootPassword = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 18))
oldPassword = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 18, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oldPassword.setStatus('current')
newPassword = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 18, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newPassword.setStatus('current')
confirmPassword = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 18, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confirmPassword.setStatus('current')
deletePassword = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deletePassword.setStatus('current')
sysSetBootPwStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 18, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSetBootPwStatus.setStatus('current')
sysAddUser = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 22))
sysUserName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 22, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysUserName.setStatus('current')
sysUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 22, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysUserPassword.setStatus('current')
sysUserPasswordOption = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 22, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 7))).clone(namedValues=NamedValues(("uncrypted", 0), ("crypted", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysUserPasswordOption.setStatus('current')
sysUserNamePrivilege = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 22, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysUserNamePrivilege.setStatus('current')
sysAddUserStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 22, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAddUserStatus.setStatus('current')
priPowerTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 23), )
if mibBuilder.loadTexts: priPowerTable.setStatus('current')
priPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 23, 1), ).setIndexNames((0, "NAG-MIB", "priPowerIndex"))
if mibBuilder.loadTexts: priPowerEntry.setStatus('current')
priPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: priPowerIndex.setStatus('current')
priPowerPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 23, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: priPowerPresent.setStatus('current')
priPowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 23, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: priPowerSupply.setStatus('current')
vsfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 30))
vsfCount = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 30, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfCount.setStatus('current')
vsfModuleTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 30, 2), )
if mibBuilder.loadTexts: vsfModuleTable.setStatus('current')
vsfModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 30, 2, 1), ).setIndexNames((0, "NAG-MIB", "vsfSlotIndex"), (0, "NAG-MIB", "vsfMemberIndex"))
if mibBuilder.loadTexts: vsfModuleEntry.setStatus('current')
vsfSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 30, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfSlotIndex.setStatus('current')
vsfMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 30, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfMemberIndex.setStatus('current')
vsfModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 30, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 8, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 299, 300, 301, 302, 303, 304, 305, 320, 321, 322, 323, 324))).clone(namedValues=NamedValues(("typeMFC", 0), ("typeSFC", 1), ("type1GS", 2), ("type1GL", 3), ("type100M1GT", 4), ("type10M100MT", 8), ("type1-M12GB", 101), ("type1-12GT", 102), ("type1-210Gx", 103), ("type1-110Gx", 104), ("type1-CPU8245", 105), ("type1-BACKPLANE", 106), ("type1-24GB", 107), ("type1-24GT", 108), ("type1-36TX", 109), ("type1-4GX32TX", 110), ("type1-16FX", 111), ("type1-ES2GB", 112), ("type1-M4GX24TX", 113), ("type1-ES", 114), ("type1-MI", 115), ("type1-MII", 116), ("type1-12GB", 117), ("type1-M8GB", 118), ("type1-2XFP8GX16GB", 119), ("type1-8GX16GB", 120), ("type1-4GX24TX", 121), ("type1-L-M4GX24TX", 122), ("type1-1XFP8GX16GB", 123), ("type1-2XFP12GX12GT", 124), ("type1-12GX12GT", 125), ("type1-1XFP12GX12GT", 126), ("type1-48GT", 127), ("type1-M1XFP12GX12GT", 128), ("type1-4XFP", 129), ("type1-48GB", 130), ("type1-M44GT", 131), ("type1-M1XFP12GX12GB", 132), ("type1-12GX12GB", 133), ("type1-2XFP12GX12GB", 134), ("type1-4GB12GX8GT", 135), ("type1-2XFP24GB12GT", 136), ("type1-24GB12GT", 137), ("type1-NEWMI", 138), ("type1-M1XFP12GX12GTR4", 139), ("type1-12GX12GTR4", 140), ("type1-2XFP12GX12GTR4", 141), ("type1-E-24GB12GT", 142), ("type1-E-2XFP24GB12GT", 143), ("type1-MSC", 144), ("type8QSFP", 145), ("type1-FW", 146), ("type1-OF", 147), ("type1-MIIR2", 148), ("type1-E-M16GX8GB", 149), ("type1-E-4XS16GX8GB", 150), ("type1-2XFP12GX12GTR5", 151), ("type1-MIIR3", 152), ("type1-M2XS8GX16GB", 154), ("type1-28GB16GT4XS", 155), ("type1-E-48GT", 156), ("type1-44GB4XS", 157), ("type1-20XS2Q", 158), ("type2-M12GB", 165), ("type2-12GT", 166), ("type2-210Gx", 167), ("type2-110Gx", 168), ("type2-CPU8245", 169), ("type2-BACKPLANE", 170), ("type2-24GB", 171), ("type2-24GT", 172), ("type2-36TX", 173), ("type2-4GX32TX", 174), ("type2-16FX", 175), ("type2-ES2GB", 176), ("type2-M4GX24TX", 177), ("type2-ES", 178), ("type2-MI", 179), ("type2-MII", 180), ("type2-12GB", 181), ("type2-M8GB", 182), ("type2-2XFP8GX16GB", 183), ("type2-8GX16GB", 184), ("type2-4GX24TX", 185), ("type2-L-M4GX24TX", 186), ("type2-1XFP8GX16GB", 187), ("type2-2XFP12GX12GT", 188), ("type2-12GX12GT", 189), ("type2-1XFP12GX12GT", 190), ("type2-48GT", 191), ("type2-M1XFP12GX12GT", 192), ("type2-4XFP", 193), ("type2-48GB", 194), ("type2-M44GT", 195), ("type2-M1XFP12GX12GB", 196), ("type2-12GX12GB", 197), ("type2-2XFP12GX12GB", 198), ("type2-4GB12GX8GT", 199), ("type2-2XFP24GB12GT", 200), ("type2-24GB12GT", 201), ("type2-NEWMI", 202), ("type2-M1XFP12GX12GTR4", 203), ("type2-12GX12GTR4", 204), ("type2-2XFP12GX12GTR4", 205), ("type2-E-24GB12GT", 206), ("type2-E-2XFP24GB12GT", 207), ("type2-MSC", 208), ("type2-M1XFP12GX12GTV", 209), ("type2-FW", 210), ("type2-OF", 211), ("type2-MIIR2", 212), ("type2-E-M16GX8GB", 213), ("type2-E-4XS16GX8GB", 214), ("type2-2XFP12GX12GTR5", 215), ("type2-MIIR3", 216), ("type2-M2XS8GX16GB", 218), ("type2-28GB16GT4XS", 219), ("type2-E-48GT", 220), ("type2-44GB4XS", 221), ("type2-20XS2Q", 222), ("type3-M", 228), ("type3-MI", 229), ("type3-MII", 230), ("type3-24GT", 231), ("type3-24GB", 232), ("type3-ES-FW", 233), ("type3-4XFP", 234), ("type3-8XFP", 235), ("type3-24GT-V", 236), ("type3-24GB-V", 237), ("type3-24SFP-PLUS", 238), ("type3-SUP", 239), ("type3-FAB", 240), ("type3-MSC", 241), ("type3-24GT-WS", 242), ("type3-24GB-WS", 243), ("type3-FW", 244), ("type3-8QSFP", 245), ("type3-OF", 246), ("type3-20XS2Q", 247), ("type3-FAB-TWO-CHIP", 248), ("type3-08BACKPLANE", 299), ("type4-4GT", 300), ("type4-4FX", 301), ("type4-2GB", 302), ("type4-4TX", 303), ("type4-4GB", 304), ("type4-4FB", 305), ("type5-M16K-SUP", 320), ("type5-M16K-16Q", 321), ("type5-M16K-FC", 322), ("type5-M16K-48XS2Q", 323), ("type5-M16K-24T24S2XS", 324)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfModuleType.setStatus('current')
sysMonitorAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 31), )
if mibBuilder.loadTexts: sysMonitorAlarmTable.setStatus('current')
sysMonitorAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 31, 1), ).setIndexNames((0, "NAG-MIB", "sysMonitorAlarmIndex"))
if mibBuilder.loadTexts: sysMonitorAlarmEntry.setStatus('current')
sysMonitorAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 31, 1, 1), Integer32())
if mibBuilder.loadTexts: sysMonitorAlarmIndex.setStatus('current')
sysMonitorAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sysMonitorAlarmNotEnable", 0), ("sysMonitorAlarmEnable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMonitorAlarmEnable.setStatus('current')
sysMonitorAlarmBindSet = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("input1-output1", 1), ("input1-output2", 2), ("input2-output1", 3), ("input2-output2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMonitorAlarmBindSet.setStatus('current')
sysMonitorAlarmInputSet = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 31, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("input1-high", 1), ("input1-low", 2), ("input2-high", 3), ("input2-low", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMonitorAlarmInputSet.setStatus('current')
sysMonitorAlarmOutputSet = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 31, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("output1-high", 1), ("output1-low", 2), ("output2-high", 3), ("output2-low", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMonitorAlarmOutputSet.setStatus('current')
deviceTypeID = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTypeID.setStatus('current')
rpsPowerVoltage = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpsPowerVoltage.setStatus('current')
spanGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanGlobalEnable.setStatus('current')
mstpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2))
mstpSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1))
mstpEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpEnable.setStatus('current')
mstpTCFlush = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("protect", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpTCFlush.setStatus('current')
mstpForwardTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpForwardTime.setStatus('current')
mstpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpHelloTime.setStatus('current')
mstpMaxage = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpMaxage.setStatus('current')
mstpMaxhop = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpMaxhop.setStatus('current')
mstpMode = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("stp", 0), ("rstp", 2), ("mstp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpMode.setStatus('current')
mstpName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpName.setStatus('current')
mstpRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpRevisionLevel.setStatus('current')
mstpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpBridgeForwardDelay.setStatus('current')
mstpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpBridgeHelloTime.setStatus('current')
mstpBridgeMaxage = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpBridgeMaxage.setStatus('current')
mstpInstancePortTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3), )
if mibBuilder.loadTexts: mstpInstancePortTable.setStatus('current')
mstpInstancePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1), ).setIndexNames((0, "NAG-MIB", "mstpInstancePortInstanceID"), (0, "NAG-MIB", "mstpInstancePortPortIndex"))
if mibBuilder.loadTexts: mstpInstancePortEntry.setStatus('current')
mstpInstancePortInstanceID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: mstpInstancePortInstanceID.setStatus('current')
mstpInstancePortPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: mstpInstancePortPortIndex.setStatus('current')
mstpInstancePortCost = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpInstancePortCost.setStatus('current')
mstpInstancePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpInstancePortPriority.setStatus('current')
mstpInstancePortRootGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpInstancePortRootGuard.setStatus('current')
mstpInstancePortID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpInstancePortID.setStatus('current')
mstpInstancePortExtRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpInstancePortExtRootPathCost.setStatus('current')
mstpInstancePortIntRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpInstancePortIntRootPathCost.setStatus('current')
mstpInstancePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("block", 0), ("forwarding", 1), ("learning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpInstancePortState.setStatus('current')
mstpInstancePortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("nonstp", 0), ("alternate", 1), ("root", 2), ("designated", 3), ("backup", 4), ("master", 5), ("disabled", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpInstancePortRole.setStatus('current')
mstpInstancePortDesignatedBridgeID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpInstancePortDesignatedBridgeID.setStatus('current')
mstpInstancePortDesignatedPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpInstancePortDesignatedPortID.setStatus('current')
mstpInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2), )
if mibBuilder.loadTexts: mstpInstanceTable.setStatus('current')
mstpInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2, 1), ).setIndexNames((0, "NAG-MIB", "mstpInstanceID"))
if mibBuilder.loadTexts: mstpInstanceEntry.setStatus('current')
mstpInstanceID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: mstpInstanceID.setStatus('current')
mstpInstanceVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpInstanceVlans.setStatus('current')
mstpInstanceSwitchPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpInstanceSwitchPriority.setStatus('current')
mstpInstanceRegionRootID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpInstanceRegionRootID.setStatus('current')
mstpInstanceIntRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpInstanceIntRootPathCost.setStatus('current')
mstpInstanceRootPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpInstanceRootPortID.setStatus('current')
mstpPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4), )
if mibBuilder.loadTexts: mstpPortInfoTable.setStatus('current')
mstpPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1), ).setIndexNames((0, "NAG-MIB", "mstpPortInfoPortIndex"))
if mibBuilder.loadTexts: mstpPortInfoEntry.setStatus('current')
mstpPortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: mstpPortInfoPortIndex.setStatus('current')
mstpPortInfoEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpPortInfoEnable.setStatus('current')
mstpPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 0))).clone(namedValues=NamedValues(("auto", 2), ("force-true", 1), ("force-false", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpPortLinkType.setStatus('current')
mstpPortMcheck = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("untrigger", 0), ("trigger", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpPortMcheck.setStatus('current')
mstpPortPortFast = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("default", 0), ("bpdufilter", 1), ("bpduguard", 2), ("noportfast", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpPortPortFast.setStatus('current')
mstpPortFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("standard", 0), ("privacy", 1), ("auto", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpPortFormat.setStatus('current')
mstpPortDigestSnp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpPortDigestSnp.setStatus('current')
mstpPortTCFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("protect", 3), ("useglobal", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpPortTCFlush.setStatus('current')
portCount = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCount.setStatus('current')
portTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2), )
if mibBuilder.loadTexts: portTable.setStatus('current')
priPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1), ).setIndexNames((0, "NAG-MIB", "portIndex"))
if mibBuilder.loadTexts: priPortEntry.setStatus('current')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('current')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portName.setStatus('current')
switchNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchNum.setStatus('current')
slotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotNum.setStatus('current')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 255))).clone(namedValues=NamedValues(("typeSFP", 0), ("typeCombo", 1), ("typeFiber", 2), ("typeSingleOptFE", 3), ("typeMultiOptFE", 4), ("typeElecFE", 5), ("typeSingleOptGE", 6), ("typeMultiOptGE", 7), ("typeElecGE", 8), ("typePortAGG", 9), ("typePortUsbGE", 10), ("typeOptXge", 11), ("typeElecXge", 12), ("other", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
flowControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowControlStatus.setStatus('current')
bandwidthControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ingress", 0), ("egress", 1), ("both", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthControlStatus.setStatus('current')
maxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("default", 0), ("bw100M", 1), ("bw1000M", 2), ("bw10000M", 3), ("bw40000M", 4), ("bw20000M", 5), ("bw25G", 6), ("bw100G", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxBandwidth.setStatus('current')
receiveBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiveBandwidth.setStatus('current')
transmitBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transmitBandwidth.setStatus('current')
shutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("shutDown", 0), ("noshutdown", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shutdown.setStatus('current')
loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noloopback", 0), ("loopback", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopback.setStatus('current')
speedDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("auto", 0), ("half10", 1), ("full10", 2), ("half100", 3), ("full100", 4), ("half1000", 5), ("full1000", 6), ("half-1000-M", 7), ("half-1000-s", 8), ("full-1000-M", 9), ("full-1000-s", 10), ("fx-100", 13), ("fx-100-phy", 14), ("fx-100-no-phy", 15), ("neg-10-auto", 16), ("neg-10-full", 17), ("neg-10-half", 18), ("neg-10-100-auto", 19), ("neg-10-100-full", 20), ("neg-10-100-half", 21), ("neg-10-100-1000-full", 22), ("neg-10-100-1000-half", 23), ("neg-full-10g", 24), ("full-10g", 25), ("full-40g", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: speedDuplex.setStatus('current')
portMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("access", 1), ("trunk", 2), ("hybrid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMode.setStatus('current')
pvid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvid.setStatus('current')
indicatesType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("hundredBaseTX", 2), ("hundredBaseFX", 3), ("thousandBaseSX", 4), ("thousandBaseLX", 5), ("thousandBaseT", 6), ("thousandBaseGBIC", 7), ("thousandBaseSfp", 8), ("hundredBaseFxScSingleMode", 9), ("hundredBaseFxScMultiMode", 10), ("thousandBaseCX", 11), ("tenG", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: indicatesType.setStatus('current')
vctAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctAction.setStatus('current')
vctLastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctLastStatus.setStatus('current')
portTrunkAllowedvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrunkAllowedvlan.setStatus('current')
portHybridTaggedAllowedvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 21), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridTaggedAllowedvlan.setStatus('current')
portHybridUntaggedAllowedvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 22), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridUntaggedAllowedvlan.setStatus('current')
portBandWidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBandWidthUsage.setStatus('current')
lastFiveMinInPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastFiveMinInPktsPerSec.setStatus('current')
lastFiveMinOutPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastFiveMinOutPktsPerSec.setStatus('current')
lastFiveSecInPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastFiveSecInPktsPerSec.setStatus('current')
lastFiveSecOutPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastFiveSecOutPktsPerSec.setStatus('current')
transceiverSn = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transceiverSn.setStatus('current')
portBlockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBlockMode.setStatus('current')
portBlockState = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBlockState.setStatus('current')
portComboMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("phyModeCopperPrefered", 1), ("phyModeCopperForced", 2), ("phyModeFiberPrefered", 3), ("phyModeFiberForced", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portComboMediaType.setStatus('current')
portDiscardPktType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tag", 1), ("untag", 2), ("no-tag", 3), ("no-untag", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDiscardPktType.setStatus('current')
stormControlTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 3), )
if mibBuilder.loadTexts: stormControlTable.setStatus('current')
stormControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 3, 1), ).setIndexNames((0, "NAG-MIB", "stormControlIndex"), (0, "NAG-MIB", "stormControlType"))
if mibBuilder.loadTexts: stormControlEntry.setStatus('current')
stormControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormControlIndex.setStatus('current')
stormControlType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("broadcast", 0), ("multicast", 1), ("unicast", 2), ("dlf", 3), ("brmc", 4), ("brmcdlf", 5), ("all", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormControlType.setStatus('current')
stormControlRate = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormControlRate.setStatus('current')
stormControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("destroy", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormControlStatus.setStatus('current')
loopbackDetection = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4))
loopbackDetecCtrlRecovery = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopbackDetecCtrlRecovery.setStatus('current')
loopbackDetecIntervalTime = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 2))
lpbackDetecExistInterval = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpbackDetecExistInterval.setStatus('current')
lpbackDetecNoExistInterval = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpbackDetecNoExistInterval.setStatus('current')
loopbackDetecCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 3), )
if mibBuilder.loadTexts: loopbackDetecCtrlTable.setStatus('current')
loopbackDetecCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 3, 1), ).setIndexNames((0, "NAG-MIB", "lpbackDetecCtrlIndex"))
if mibBuilder.loadTexts: loopbackDetecCtrlEntry.setStatus('current')
lpbackDetecCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: lpbackDetecCtrlIndex.setStatus('current')
lpbackDetecCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nocontrol", 0), ("shutdown", 1), ("block", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpbackDetecCtrlMode.setStatus('current')
loopbackDetecSpecVlanTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 4), )
if mibBuilder.loadTexts: loopbackDetecSpecVlanTable.setStatus('current')
loopbackDetecSpecVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 4, 1), ).setIndexNames((0, "NAG-MIB", "lpbackDetecVlanPortIndex"))
if mibBuilder.loadTexts: loopbackDetecSpecVlanEntry.setStatus('current')
lpbackDetecVlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: lpbackDetecVlanPortIndex.setStatus('current')
lpbackDetecVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpbackDetecVlanList.setStatus('current')
lpbackDetecVlanListSetFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpbackDetecVlanListSetFlag.setStatus('current')
loopbackDetecShowTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 5), )
if mibBuilder.loadTexts: loopbackDetecShowTable.setStatus('current')
loopbackDetecShowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 5, 1), ).setIndexNames((0, "NAG-MIB", "lpbackDetecShowPortIndex"))
if mibBuilder.loadTexts: loopbackDetecShowEntry.setStatus('current')
lpbackDetecShowPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: lpbackDetecShowPortIndex.setStatus('current')
lpbackDetecShowInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpbackDetecShowInformation.setStatus('current')
stormControlPortTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 5), )
if mibBuilder.loadTexts: stormControlPortTable.setStatus('current')
stormControlPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 5, 1), ).setIndexNames((0, "NAG-MIB", "stormControlPortIndex"), (0, "NAG-MIB", "stormControlSuppressType"))
if mibBuilder.loadTexts: stormControlPortEntry.setStatus('current')
stormControlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormControlPortIndex.setStatus('current')
stormControlSuppressType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("broadcast", 0), ("multicast", 1), ("unicast", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormControlSuppressType.setStatus('current')
stormControlSuppressRateUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("kbps", 0), ("pps", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormControlSuppressRateUnit.setStatus('current')
stormControlSuppressRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormControlSuppressRateValue.setStatus('current')
stormControlSuppressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("destroy", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormControlSuppressStatus.setStatus('current')
flowCounterTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6), )
if mibBuilder.loadTexts: flowCounterTable.setStatus('current')
flowCouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1), ).setIndexNames((0, "NAG-MIB", "flowPortIndex"), (0, "NAG-MIB", "flowVlanID"))
if mibBuilder.loadTexts: flowCouterEntry.setStatus('current')
flowPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowPortIndex.setStatus('current')
flowVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowVlanID.setStatus('current')
flowCounterInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowCounterInOctets.setStatus('current')
flowCounterInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowCounterInUcastPkts.setStatus('current')
flowCounterInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowCounterInMulticastPkts.setStatus('current')
flowCounterInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowCounterInBroadcastPkts.setStatus('current')
flowCounterOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowCounterOutOctets.setStatus('current')
flowCounterOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowCounterOutUcastPkts.setStatus('current')
flowCounterOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowCounterOutMulticastPkts.setStatus('current')
flowCounterOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowCounterOutBroadcastPkts.setStatus('current')
clearFlowCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearFlowCounter.setStatus('current')
sumFlowCounterTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7), )
if mibBuilder.loadTexts: sumFlowCounterTable.setStatus('current')
sumFlowCouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7, 1), ).setIndexNames((0, "NAG-MIB", "sumFlowVlanID"))
if mibBuilder.loadTexts: sumFlowCouterEntry.setStatus('current')
sumFlowVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sumFlowVlanID.setStatus('current')
sumFlowCounterInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sumFlowCounterInOctets.setStatus('current')
sumFlowCounterInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sumFlowCounterInPkts.setStatus('current')
sumFlowCounterOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sumFlowCounterOutOctets.setStatus('current')
sumFlowCounterOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sumFlowCounterOutPkts.setStatus('current')
clearSumFlowCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearSumFlowCounter.setStatus('current')
portUtilTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 10), )
if mibBuilder.loadTexts: portUtilTable.setStatus('current')
portUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 10, 1), ).setIndexNames((0, "NAG-MIB", "portUtilIndex"))
if mibBuilder.loadTexts: portUtilEntry.setStatus('current')
portUtilIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portUtilIndex.setStatus('current')
wanIfInUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanIfInUtil.setStatus('current')
wanIfOutUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanIfOutUtil.setStatus('current')
ifBer = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBer.setStatus('current')
ifPaketLostRate = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifPaketLostRate.setStatus('current')
portLEDShutoffTable = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11))
portLEDTimerange = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1))
portLEDTimeRangeMapTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 1), )
if mibBuilder.loadTexts: portLEDTimeRangeMapTable.setStatus('current')
portLEDTimeRangeMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 1, 1), ).setIndexNames((0, "NAG-MIB", "portLEDTimeRangeMapIndex"))
if mibBuilder.loadTexts: portLEDTimeRangeMapEntry.setStatus('current')
portLEDTimeRangeMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLEDTimeRangeMapIndex.setStatus('current')
portLEDTimeRangeMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDTimeRangeMapName.setStatus('current')
portLEDTimeRangeMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDTimeRangeMapStatus.setStatus('current')
portLEDTimeRangeTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2), )
if mibBuilder.loadTexts: portLEDTimeRangeTable.setStatus('current')
portLEDTimeRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1), ).setIndexNames((0, "NAG-MIB", "portLEDTimeRangeIndex"), (0, "NAG-MIB", "portLEDTimeRangeSubIndex"))
if mibBuilder.loadTexts: portLEDTimeRangeEntry.setStatus('current')
portLEDTimeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLEDTimeRangeIndex.setStatus('current')
portLEDTimeRangeSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLEDTimeRangeSubIndex.setStatus('current')
portLEDTimeRangeType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absolute", 1), ("periodic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDTimeRangeType.setStatus('current')
portLEDTimeRangeStartWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 4), Bits().clone(namedValues=NamedValues(("monday", 0), ("tuesday", 1), ("wednesday", 2), ("thursday", 3), ("friday", 4), ("saturday", 5), ("sunday", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDTimeRangeStartWeek.setStatus('current')
portLEDTimeRangeStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDTimeRangeStartDate.setStatus('current')
portLEDTimeRangeStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDTimeRangeStartTime.setStatus('current')
portLEDTimeRangeEndWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 7), Bits().clone(namedValues=NamedValues(("monday", 0), ("tuesday", 1), ("wednesday", 2), ("thursday", 3), ("friday", 4), ("saturday", 5), ("sunday", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDTimeRangeEndWeek.setStatus('current')
portLEDTimeRangeEndDate = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDTimeRangeEndDate.setStatus('current')
portLEDTimeRangeEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDTimeRangeEndTime.setStatus('current')
portLEDTimeRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDTimeRangeStatus.setStatus('current')
portLEDConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 2))
portLEDTimeRangeName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDTimeRangeName.setStatus('current')
portLEDState = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("allOn", 0), ("allOff", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLEDState.setStatus('current')
portLEDTimeRangeDelete = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: portLEDTimeRangeDelete.setStatus('current')
portTruckAllowedVlanTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12), )
if mibBuilder.loadTexts: portTruckAllowedVlanTable.setStatus('current')
portTruckAllowedVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12, 1), ).setIndexNames((0, "NAG-MIB", "portTruckPortIndex"))
if mibBuilder.loadTexts: portTruckAllowedVlanEntry.setStatus('current')
portTruckPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: portTruckPortIndex.setStatus('current')
portTruckAllowedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTruckAllowedVlan.setStatus('current')
portTruckAllowedVlanAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTruckAllowedVlanAdd.setStatus('current')
portTruckAllowedVlanExcept = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTruckAllowedVlanExcept.setStatus('current')
portTruckAllowedVlanRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTruckAllowedVlanRemove.setStatus('current')
portTruckAllowedVlanAll = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("all", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTruckAllowedVlanAll.setStatus('current')
portHybridTaggedAllowedVlanTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13), )
if mibBuilder.loadTexts: portHybridTaggedAllowedVlanTable.setStatus('current')
portHybridTaggedAllowedVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13, 1), ).setIndexNames((0, "NAG-MIB", "portHybridTaggedPortIndex"))
if mibBuilder.loadTexts: portHybridTaggedAllowedVlanEntry.setStatus('current')
portHybridTaggedPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13, 1, 1), Integer32())
if mibBuilder.loadTexts: portHybridTaggedPortIndex.setStatus('current')
portHybridTaggedAllowedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridTaggedAllowedVlan.setStatus('current')
portHybridTaggedAllowedVlanAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridTaggedAllowedVlanAdd.setStatus('current')
portHybridTaggedAllowedVlanExcept = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridTaggedAllowedVlanExcept.setStatus('current')
portHybridTaggedAllowedVlanRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridTaggedAllowedVlanRemove.setStatus('current')
portHybridTaggedAllowedVlanAll = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("all", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridTaggedAllowedVlanAll.setStatus('current')
portHybridUntaggedAllowedVlanTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14), )
if mibBuilder.loadTexts: portHybridUntaggedAllowedVlanTable.setStatus('current')
portHybridUntaggedAllowedVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14, 1), ).setIndexNames((0, "NAG-MIB", "portHybridUntaggedPortIndex"))
if mibBuilder.loadTexts: portHybridUntaggedAllowedVlanEntry.setStatus('current')
portHybridUntaggedPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14, 1, 1), Integer32())
if mibBuilder.loadTexts: portHybridUntaggedPortIndex.setStatus('current')
portHybridUntaggedAllowedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridUntaggedAllowedVlan.setStatus('current')
portHybridUntaggedAllowedVlanAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridUntaggedAllowedVlanAdd.setStatus('current')
portHybridUntaggedAllowedVlanExcept = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridUntaggedAllowedVlanExcept.setStatus('current')
portHybridUntaggedAllowedVlanRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridUntaggedAllowedVlanRemove.setStatus('current')
portHybridUntaggedAllowedVlanAll = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("all", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHybridUntaggedAllowedVlanAll.setStatus('current')
netDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netDefaultGateway.setStatus('current')
ipHttpState = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpState.setStatus('current')
iPAddrTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 3), )
if mibBuilder.loadTexts: iPAddrTable.setStatus('current')
iPAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 3, 1), ).setIndexNames((0, "NAG-MIB", "iPAddrVid"), (0, "NAG-MIB", "iPAddrIPAddress"))
if mibBuilder.loadTexts: iPAddrEntry.setStatus('current')
iPAddrVid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: iPAddrVid.setStatus('current')
iPAddrIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: iPAddrIPAddress.setStatus('current')
iPAddrSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPAddrSubnetMask.setStatus('current')
iPAddrPrimaryInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPAddrPrimaryInterface.setStatus('current')
iPAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPAddrStatus.setStatus('current')
interfaceTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 4), )
if mibBuilder.loadTexts: interfaceTable.setStatus('current')
interfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 4, 1), ).setIndexNames((0, "NAG-MIB", "intfacetype"), (0, "NAG-MIB", "intfaceID"))
if mibBuilder.loadTexts: interfaceEntry.setStatus('current')
intfacetype = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vintf", 1), ("loopback", 2), ("tunnel", 3))))
if mibBuilder.loadTexts: intfacetype.setStatus('current')
intfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: intfaceID.setStatus('current')
intfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfaceIndex.setStatus('current')
intfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intfaceStatus.setStatus('current')
vlanInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 1), )
if mibBuilder.loadTexts: vlanInfoTable.setStatus('current')
vlanInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 1, 1), ).setIndexNames((0, "NAG-MIB", "vlanID"))
if mibBuilder.loadTexts: vlanInfoEntry.setStatus('current')
vlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: vlanID.setStatus('current')
vlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanName.setStatus('current')
vlanPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPortNumber.setStatus('current')
vlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanRowStatus.setStatus('current')
mvlanInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 2), )
if mibBuilder.loadTexts: mvlanInfoTable.setStatus('current')
mvlanInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 2, 1), ).setIndexNames((0, "NAG-MIB", "mvlanID"))
if mibBuilder.loadTexts: mvlanInfoEntry.setStatus('current')
mvlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: mvlanID.setStatus('current')
mvlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvlanStatus.setStatus('current')
mvlanAssoVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvlanAssoVlanList.setStatus('current')
mvlanAssoVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvlanAssoVlanStatus.setStatus('current')
mvlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("dynamic", 1), ("compatible", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvlanMode.setStatus('current')
mvlanPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 3), )
if mibBuilder.loadTexts: mvlanPortInfoTable.setStatus('current')
mvlanPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 3, 1), ).setIndexNames((0, "NAG-MIB", "mvlanVId"), (0, "NAG-MIB", "mvlanPortIndex"))
if mibBuilder.loadTexts: mvlanPortInfoEntry.setStatus('current')
mvlanVId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: mvlanVId.setStatus('current')
mvlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: mvlanPortIndex.setStatus('current')
mvlanAssoPortTagid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvlanAssoPortTagid.setStatus('current')
mvlanPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvlanPortStatus.setStatus('current')
vlanFlowCounterTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4), )
if mibBuilder.loadTexts: vlanFlowCounterTable.setStatus('current')
vlanFlowCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1), ).setIndexNames((0, "NAG-MIB", "vlanID"))
if mibBuilder.loadTexts: vlanFlowCounterEntry.setStatus('current')
vlanFCVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: vlanFCVlanID.setStatus('current')
vlanInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInOctets.setStatus('current')
vlanInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInUcastPkts.setStatus('current')
vlanInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInMulticastPkts.setStatus('current')
vlanInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInBroadcastPkts.setStatus('current')
vlanOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanOutOctets.setStatus('current')
vlanOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanOutUcastPkts.setStatus('current')
vlanOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanOutMulticastPkts.setStatus('current')
vlanOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanOutBroadcastPkts.setStatus('current')
clearVlanFlowCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearVlanFlowCounter.setStatus('current')
sysStackUnitNumber = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStackUnitNumber.setStatus('current')
jumblyStackingInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 2), )
if mibBuilder.loadTexts: jumblyStackingInfoTable.setStatus('current')
jumblyStackingInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 2, 1), ).setIndexNames((0, "NAG-MIB", "swUnitIndex"))
if mibBuilder.loadTexts: jumblyStackingInfoEntry.setStatus('current')
stackingUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackingUnitIndex.setStatus('current')
swHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHardwareVersion.setStatus('current')
swSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSoftwareVersion.setStatus('current')
swCPUMac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 2, 1, 4), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCPUMac.setStatus('current')
swType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swType.setStatus('current')
portSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1), )
if mibBuilder.loadTexts: portSecurityTable.setStatus('current')
portSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1), ).setIndexNames((0, "NAG-MIB", "psPortIndex"))
if mibBuilder.loadTexts: portSecurityEntry.setStatus('current')
psPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: psPortIndex.setStatus('current')
psPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPortSecurity.setStatus('current')
psSecuritytSaticMacAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 3), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecuritytSaticMacAdd.setStatus('current')
psSecurityStaticMacDel = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 4), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityStaticMacDel.setStatus('current')
psSecurityPortLock = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unlock", 0), ("lock", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityPortLock.setStatus('current')
psSecurityPortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityPortMax.setStatus('current')
psSecurityPortConvertmac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityPortConvertmac.setStatus('current')
psSecurityPortLocktimer = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityPortLocktimer.setStatus('current')
securityMacPortTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 2), )
if mibBuilder.loadTexts: securityMacPortTable.setStatus('current')
securityMacPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 2, 1), ).setIndexNames((0, "NAG-MIB", "secPortIndex"), (0, "NAG-MIB", "secMacAdress"))
if mibBuilder.loadTexts: securityMacPortEntry.setStatus('current')
secPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secPortIndex.setStatus('current')
secMacAdress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 2, 1, 2), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: secMacAdress.setStatus('current')
secVid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secVid.setStatus('current')
priIgmpSnoopingGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingGlobalEnable.setStatus('current')
priIgmpSnoopingVlanTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2), )
if mibBuilder.loadTexts: priIgmpSnoopingVlanTable.setStatus('current')
priIgmpSnoopingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1), ).setIndexNames((0, "NAG-MIB", "priIgmpSnoopingvlanID"))
if mibBuilder.loadTexts: priIgmpSnoopingEntry.setStatus('current')
priIgmpSnoopingvlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: priIgmpSnoopingvlanID.setStatus('current')
priIgmpSnoopingvlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingvlanEnable.setStatus('current')
priIgmpSnoopingleave = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-immediate-leave", 0), ("immediate-leave", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingleave.setStatus('current')
priIgmpSnoopingL2gen = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-l2-general-querier", 0), ("l2-general-querier", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingL2gen.setStatus('current')
priIgmpSnoopingGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingGroupNum.setStatus('current')
priIgmpSnoopingSourceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingSourceNum.setStatus('current')
priIgmpSnoopingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingPort.setStatus('current')
priIgmpSnoopingNoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingNoPort.setStatus('current')
priIgmpSnoopingPortTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingPortTime.setStatus('current')
priIgmpSnoopingQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingQueryInterval.setStatus('current')
priIgmpSnoopingQueryMrsp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingQueryMrsp.setStatus('current')
priIgmpSnoopingQueryRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingQueryRobustness.setStatus('current')
priIgmpSnoopingSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingSuppression.setStatus('current')
priIgmpSnoopingBindTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 3), )
if mibBuilder.loadTexts: priIgmpSnoopingBindTable.setStatus('current')
priIgmpSnoopingBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 3, 1), ).setIndexNames((0, "NAG-MIB", "priIgmpSnoopingVlanID"), (0, "NAG-MIB", "priIgmpSnoopingGroupAddress"))
if mibBuilder.loadTexts: priIgmpSnoopingBindEntry.setStatus('current')
priIgmpSnoopingVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: priIgmpSnoopingVlanID.setStatus('current')
priIgmpSnoopingGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: priIgmpSnoopingGroupAddress.setStatus('current')
priIgmpSnoopingPortBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: priIgmpSnoopingPortBitmap.setStatus('current')
priIgmpSnoopingLimitPortTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4), )
if mibBuilder.loadTexts: priIgmpSnoopingLimitPortTable.setStatus('current')
priIgmpSnoopingLimitPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4, 1), ).setIndexNames((0, "NAG-MIB", "priIgmpSnoopingLimitVlanID"), (0, "NAG-MIB", "priIgmpSnoopingLimitPortIndex"))
if mibBuilder.loadTexts: priIgmpSnoopingLimitPortEntry.setStatus('current')
priIgmpSnoopingLimitVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: priIgmpSnoopingLimitVlanID.setStatus('current')
priIgmpSnoopingLimitPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: priIgmpSnoopingLimitPortIndex.setStatus('current')
priIgmpSnoopingLimitPortGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingLimitPortGroupNum.setStatus('current')
priIgmpSnoopingLimitPortSourceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingLimitPortSourceNum.setStatus('current')
priIgmpSnoopingLimitPortStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingLimitPortStrategy.setStatus('current')
priIgmpSnoopingLimitPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingLimitPortStatus.setStatus('current')
priIgmpSnoopingPortCtrlPktTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 5), )
if mibBuilder.loadTexts: priIgmpSnoopingPortCtrlPktTable.setStatus('current')
priIgmpSnoopingPortCtrlPktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 5, 1), ).setIndexNames((0, "NAG-MIB", "priIgmpSnoopingPortCtrlPktDrop"))
if mibBuilder.loadTexts: priIgmpSnoopingPortCtrlPktEntry.setStatus('current')
priIgmpSnoopingPortCtrlPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("query", 1), ("report", 2), ("query-and-report", 3), ("no-query", 4), ("no-report", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingPortCtrlPktDrop.setStatus('current')
priIgmpSnoopingPortAuthTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 6), )
if mibBuilder.loadTexts: priIgmpSnoopingPortAuthTable.setStatus('current')
priIgmpSnoopingPortAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 6, 1), ).setIndexNames((0, "NAG-MIB", "priIgmpSnoopingPortAuthEnable"))
if mibBuilder.loadTexts: priIgmpSnoopingPortAuthEntry.setStatus('current')
priIgmpSnoopingPortAuthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priIgmpSnoopingPortAuthEnable.setStatus('current')
priIgmpSnoopingPortAuthFreeRule = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: priIgmpSnoopingPortAuthFreeRule.setStatus('current')
dot1qTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 1), )
if mibBuilder.loadTexts: dot1qTunnelTable.setStatus('current')
dot1qTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 1, 1), ).setIndexNames((0, "NAG-MIB", "qinqPortIndex"))
if mibBuilder.loadTexts: dot1qTunnelEntry.setStatus('current')
qinqPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: qinqPortIndex.setStatus('current')
tunnelPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelPortEnable.setStatus('current')
tunnelPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelPortType.setStatus('current')
vlanTranslationTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 2), )
if mibBuilder.loadTexts: vlanTranslationTable.setStatus('current')
vlanTranslationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 2, 1), ).setIndexNames((0, "NAG-MIB", "translatPortIndex"))
if mibBuilder.loadTexts: vlanTranslationEntry.setStatus('current')
translatPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: translatPortIndex.setStatus('current')
translationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: translationEnable.setStatus('current')
translationDropType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3), ("noIn", 4), ("noOut", 5), ("noBoth", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: translationDropType.setStatus('current')
vlanTranslationTypeTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 3), )
if mibBuilder.loadTexts: vlanTranslationTypeTable.setStatus('current')
vlanTranslationTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 3, 1), ).setIndexNames((0, "NAG-MIB", "translatPortTypeIndex"), (0, "NAG-MIB", "translationType"), (0, "NAG-MIB", "translationOldVlanid"), (0, "NAG-MIB", "translationNewVlanid"))
if mibBuilder.loadTexts: vlanTranslationTypeEntry.setStatus('current')
translatPortTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: translatPortTypeIndex.setStatus('current')
translationType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: translationType.setStatus('current')
translationOldVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: translationOldVlanid.setStatus('current')
translationNewVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: translationNewVlanid.setStatus('current')
translationTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: translationTypeStatus.setStatus('current')
acl = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1))
fireWall = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 1))
timeRange = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2))
aclConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3))
aclAttach = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4))
fireWallEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fireWallEnable.setStatus('current')
timeRangeMapTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 1), )
if mibBuilder.loadTexts: timeRangeMapTable.setStatus('current')
timeRangeMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 1, 1), ).setIndexNames((0, "NAG-MIB", "timeRangeMapIndex"))
if mibBuilder.loadTexts: timeRangeMapEntry.setStatus('current')
timeRangeMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeRangeMapIndex.setStatus('current')
timeRangeMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeMapName.setStatus('current')
timeRangeMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeMapStatus.setStatus('current')
timeRangeTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2), )
if mibBuilder.loadTexts: timeRangeTable.setStatus('current')
timeRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1), ).setIndexNames((0, "NAG-MIB", "timeRangeIndex"), (0, "NAG-MIB", "timeRangeSubIndex"))
if mibBuilder.loadTexts: timeRangeEntry.setStatus('current')
timeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeRangeIndex.setStatus('current')
timeRangeSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeRangeSubIndex.setStatus('current')
timeRangeType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absolute", 1), ("periodic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeType.setStatus('current')
timeRangeStartWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 4), Bits().clone(namedValues=NamedValues(("monday", 0), ("tuesday", 1), ("wednesday", 2), ("thursday", 3), ("friday", 4), ("saturday", 5), ("sunday", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeStartWeek.setStatus('current')
timeRangeStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeStartDate.setStatus('current')
timeRangeStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeStartTime.setStatus('current')
timeRangeEndWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 7), Bits().clone(namedValues=NamedValues(("monday", 0), ("tuesday", 1), ("wednesday", 2), ("thursday", 3), ("friday", 4), ("saturday", 5), ("sunday", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeEndWeek.setStatus('current')
timeRangeEndDate = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeEndDate.setStatus('current')
timeRangeEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeEndTime.setStatus('current')
timeRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeStatus.setStatus('current')
numAclGroupTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 1), )
if mibBuilder.loadTexts: numAclGroupTable.setStatus('current')
numAclGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 1, 1), ).setIndexNames((0, "NAG-MIB", "numAclGroupAclIndex"))
if mibBuilder.loadTexts: numAclGroupEntry.setStatus('current')
numAclGroupAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numAclGroupAclIndex.setStatus('current')
numAclGroupMatchOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("autoPriority", 0), ("configPriority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numAclGroupMatchOrder.setStatus('current')
numAclGroupSubitemNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numAclGroupSubitemNum.setStatus('current')
numAclGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numAclGroupStatus.setStatus('current')
nameAclGroupTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2), )
if mibBuilder.loadTexts: nameAclGroupTable.setStatus('current')
nameAclGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2, 1), ).setIndexNames((0, "NAG-MIB", "nameAclGroupAclIndex"))
if mibBuilder.loadTexts: nameAclGroupEntry.setStatus('current')
nameAclGroupAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameAclGroupAclIndex.setStatus('current')
nameAclGroupAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameAclGroupAclName.setStatus('current')
nameAclGroupAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ipStandard", 0), ("ipExtern", 1), ("macStandard", 2), ("macExtern", 3), ("macIpExtern", 4), ("macIpStandard", 5), ("ipv6Standard", 6), ("ipv6Extern", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameAclGroupAclType.setStatus('current')
nameAclGroupMatchOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("autoPriority", 0), ("configPriority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameAclGroupMatchOrder.setStatus('current')
nameAclGroupSubitemNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameAclGroupSubitemNum.setStatus('current')
nameAclGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameAclGroupStatus.setStatus('current')
ipStandardAclTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3), )
if mibBuilder.loadTexts: ipStandardAclTable.setStatus('current')
ipStandardAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1), ).setIndexNames((0, "NAG-MIB", "ipStandardIndex"), (0, "NAG-MIB", "ipStandardSubIndex"))
if mibBuilder.loadTexts: ipStandardAclEntry.setStatus('current')
ipStandardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStandardIndex.setStatus('current')
ipStandardSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStandardSubIndex.setStatus('current')
ipStandardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStandardPriority.setStatus('current')
ipStandardAct = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStandardAct.setStatus('current')
ipStandardSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStandardSrcIp.setStatus('current')
ipStandardSrcIpWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStandardSrcIpWild.setStatus('current')
ipStandardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStandardStatus.setStatus('current')
ipExternAclTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4), )
if mibBuilder.loadTexts: ipExternAclTable.setStatus('current')
ipExternAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1), ).setIndexNames((0, "NAG-MIB", "ipExternIndex"), (0, "NAG-MIB", "ipExternSubIndex"))
if mibBuilder.loadTexts: ipExternAclEntry.setStatus('current')
ipExternIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExternIndex.setStatus('current')
ipExternSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExternSubIndex.setStatus('current')
ipExternPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternPriority.setStatus('current')
ipExternAct = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternAct.setStatus('current')
ipExternProtocal = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternProtocal.setStatus('current')
ipExternSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternSrcIp.setStatus('current')
ipExternSrcIpWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternSrcIpWild.setStatus('current')
ipExternDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternDstIp.setStatus('current')
ipExternDstIpWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternDstIpWild.setStatus('current')
ipExternTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternTimeRangeName.setStatus('current')
ipExternSrcOp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noOperator", 0), ("eq", 1), ("range", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternSrcOp.setStatus('current')
ipExternSrcPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternSrcPort1.setStatus('current')
ipExternSrcPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternSrcPort2.setStatus('current')
ipExternDstOp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noOperator", 0), ("eq", 1), ("range", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternDstOp.setStatus('current')
ipExternDstPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternDstPort1.setStatus('current')
ipExternDstPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternDstPort2.setStatus('current')
ipExternStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExternStatus.setStatus('current')
macStandardAclTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5), )
if mibBuilder.loadTexts: macStandardAclTable.setStatus('current')
macStandardAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1), ).setIndexNames((0, "NAG-MIB", "macStandardIndex"), (0, "NAG-MIB", "macStandardSubIndex"))
if mibBuilder.loadTexts: macStandardAclEntry.setStatus('current')
macStandardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macStandardIndex.setStatus('current')
macStandardSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macStandardSubIndex.setStatus('current')
macStandardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macStandardPriority.setStatus('current')
macStandardAct = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macStandardAct.setStatus('current')
macStandardSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macStandardSrcMac.setStatus('current')
macStandardSrcMacWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macStandardSrcMacWild.setStatus('current')
macStandardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macStandardStatus.setStatus('current')
macExternAclTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6), )
if mibBuilder.loadTexts: macExternAclTable.setStatus('current')
macExternAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1), ).setIndexNames((0, "NAG-MIB", "macExternIndex"), (0, "NAG-MIB", "macExternSubIndex"))
if mibBuilder.loadTexts: macExternAclEntry.setStatus('current')
macExternIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macExternIndex.setStatus('current')
macExternSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macExternSubIndex.setStatus('current')
macExternPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternPriority.setStatus('current')
macExternAct = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternAct.setStatus('current')
macExternSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternSrcMac.setStatus('current')
macExternSrcMacWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternSrcMacWild.setStatus('current')
macExternDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternDstMac.setStatus('current')
macExternDstMacWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternDstMacWild.setStatus('current')
macExternPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternPacketType.setStatus('current')
macExternEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternEtherType.setStatus('current')
macExternEtherTypeWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternEtherTypeWild.setStatus('current')
macExternCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternCos.setStatus('current')
macExternCosWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternCosWild.setStatus('current')
macExternVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternVlanId.setStatus('current')
macExternVlanIdWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternVlanIdWild.setStatus('current')
macExternStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macExternStatus.setStatus('current')
ipv6StandardAclTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7), )
if mibBuilder.loadTexts: ipv6StandardAclTable.setStatus('current')
ipv6StandardAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1), ).setIndexNames((0, "NAG-MIB", "ipv6StandardIndex"), (0, "NAG-MIB", "ipv6StandardSubIndex"))
if mibBuilder.loadTexts: ipv6StandardAclEntry.setStatus('current')
ipv6StandardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6StandardIndex.setStatus('current')
ipv6StandardSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6StandardSubIndex.setStatus('current')
ipv6StandardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6StandardPriority.setStatus('current')
ipv6StandardAct = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6StandardAct.setStatus('current')
ipv6StandardSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6StandardSrcIp.setStatus('current')
ipv6StandardSrcPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6StandardSrcPrefixLen.setStatus('current')
ipv6StandardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6StandardStatus.setStatus('current')
ipv6ExternAclTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8), )
if mibBuilder.loadTexts: ipv6ExternAclTable.setStatus('current')
ipv6ExternAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1), ).setIndexNames((0, "NAG-MIB", "ipv6ExternIndex"), (0, "NAG-MIB", "ipv6ExternSubIndex"))
if mibBuilder.loadTexts: ipv6ExternAclEntry.setStatus('current')
ipv6ExternIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternIndex.setStatus('current')
ipv6ExternSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternSubIndex.setStatus('current')
ipv6ExternPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternPriority.setStatus('current')
ipv6ExternAct = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternAct.setStatus('current')
ipv6ExternProtocal = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternProtocal.setStatus('current')
ipv6ExternSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternSrcIp.setStatus('current')
ipv6ExternSrcPreLen = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternSrcPreLen.setStatus('current')
ipv6ExternDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternDstIp.setStatus('current')
ipv6ExternDstPreLen = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternDstPreLen.setStatus('current')
ipv6ExternTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternTimeRangeName.setStatus('current')
ipv6ExternSrcOp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 5))).clone(namedValues=NamedValues(("noOperator", 0), ("eq", 3), ("range", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternSrcOp.setStatus('current')
ipv6ExternSrcPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternSrcPort1.setStatus('current')
ipv6ExternSrcPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternSrcPort2.setStatus('current')
ipv6ExternDstOp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 5))).clone(namedValues=NamedValues(("noOperator", 0), ("eq", 3), ("range", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternDstOp.setStatus('current')
ipv6ExternDstPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternDstPort1.setStatus('current')
ipv6ExternDstPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternDstPort2.setStatus('current')
ipv6ExternStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6ExternStatus.setStatus('current')
macIpExternAclTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9), )
if mibBuilder.loadTexts: macIpExternAclTable.setStatus('current')
macIpExternAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1), ).setIndexNames((0, "NAG-MIB", "macIpExternIndex"), (0, "NAG-MIB", "macIpExternSubIndex"))
if mibBuilder.loadTexts: macIpExternAclEntry.setStatus('current')
macIpExternIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macIpExternIndex.setStatus('current')
macIpExternSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macIpExternSubIndex.setStatus('current')
macIpExternPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternPriority.setStatus('current')
macIpExternAct = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternAct.setStatus('current')
macIpExternProtocal = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternProtocal.setStatus('current')
macIpExternSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternSrcMac.setStatus('current')
macIpExternSrcMacWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternSrcMacWild.setStatus('current')
macIpExternDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternDstMac.setStatus('current')
macIpExternDstMacWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternDstMacWild.setStatus('current')
macIpExternSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternSrcIp.setStatus('current')
macIpExternSrcIpWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternSrcIpWild.setStatus('current')
macIpExternDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternDstIp.setStatus('current')
macIpExternDstIpWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternDstIpWild.setStatus('current')
macIpExternTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternTimeRangeName.setStatus('current')
macIpExternSrcOp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 5))).clone(namedValues=NamedValues(("noOperator", 0), ("eq", 3), ("range", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternSrcOp.setStatus('current')
macIpExternSrcPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternSrcPort1.setStatus('current')
macIpExternSrcPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternSrcPort2.setStatus('current')
macIpExternDstOp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noOperator", 0), ("eq", 1), ("range", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternDstOp.setStatus('current')
macIpExternDstPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternDstPort1.setStatus('current')
macIpExternDstPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternDstPort2.setStatus('current')
macIpExternPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternPrecedence.setStatus('current')
macIpExternTos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternTos.setStatus('current')
macIpExternStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternStatus.setStatus('current')
macIpExternVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternVlanId.setStatus('current')
macIpExternVlanIdWild = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macIpExternVlanIdWild.setStatus('current')
aclActiveTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1), )
if mibBuilder.loadTexts: aclActiveTable.setStatus('current')
aclActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1), ).setIndexNames((0, "NAG-MIB", "aclActiveBindType"), (0, "NAG-MIB", "aclActiveIndex"), (0, "NAG-MIB", "aclActiveType"), (0, "NAG-MIB", "aclActiveDirection"))
if mibBuilder.loadTexts: aclActiveEntry.setStatus('current')
aclActiveBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("port", 0), ("vlan", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclActiveBindType.setStatus('current')
aclActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclActiveIndex.setStatus('current')
aclActiveType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 8))).clone(namedValues=NamedValues(("ip", 1), ("ipv6", 3), ("mac", 5), ("macIp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclActiveType.setStatus('current')
aclActiveDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("out", 0), ("in", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclActiveDirection.setStatus('current')
aclActiveAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclActiveAclIndex.setStatus('current')
aclActiveStatistic = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclActiveStatistic.setStatus('current')
aclActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclActiveStatus.setStatus('current')
aclStatisticClearTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 2), )
if mibBuilder.loadTexts: aclStatisticClearTable.setStatus('current')
aclStatisticClearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 2, 1), ).setIndexNames((0, "NAG-MIB", "aclActiveBindType"), (0, "NAG-MIB", "aclActiveDirection"), (0, "NAG-MIB", "aclActiveIndex"))
if mibBuilder.loadTexts: aclStatisticClearEntry.setStatus('current')
aclStatisticClearBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("port", 0), ("vlan", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclStatisticClearBindType.setStatus('current')
aclStatisticClearDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("out", 0), ("in", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclStatisticClearDirection.setStatus('current')
aclStatisticClearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclStatisticClearIndex.setStatus('current')
aclStatisticClearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclStatisticClearStatus.setStatus('current')
sshMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2))
sshServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerStatus.setStatus('current')
sshServerVersion = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerVersion.setStatus('current')
sshTimeout = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshTimeout.setStatus('current')
sshAuthRetries = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshAuthRetries.setStatus('current')
sshUseTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 5), )
if mibBuilder.loadTexts: sshUseTable.setStatus('current')
sshUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 5, 1), ).setIndexNames((0, "NAG-MIB", "sshUserIndex"))
if mibBuilder.loadTexts: sshUseEntry.setStatus('current')
sshUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: sshUserIndex.setStatus('current')
sshUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserName.setStatus('current')
sshUserType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 7))).clone(namedValues=NamedValues(("noCryptograph", 0), ("cryptograph", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserType.setStatus('current')
sshUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserPassword.setStatus('current')
sshUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserStatus.setStatus('current')
sshConnInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 6), )
if mibBuilder.loadTexts: sshConnInfoTable.setStatus('current')
sshConnInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 6, 1), ).setIndexNames((0, "NAG-MIB", "sshConnID"))
if mibBuilder.loadTexts: sshConnInfoEntry.setStatus('current')
sshConnID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnID.setStatus('current')
sshConnVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnVersion.setStatus('current')
sshConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("negotiationStart", 1), ("authenticationStart", 2), ("sessionStart", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnStatus.setStatus('current')
sshConnUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnUserName.setStatus('current')
tacacsMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3))
tacacsServerHostTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1), )
if mibBuilder.loadTexts: tacacsServerHostTable.setStatus('current')
tacacsServerHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1), ).setIndexNames((0, "NAG-MIB", "tacacsServerHostIndex"))
if mibBuilder.loadTexts: tacacsServerHostEntry.setStatus('current')
tacacsServerHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: tacacsServerHostIndex.setStatus('current')
tacacsServerHostIP = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerHostIP.setStatus('current')
tacacsServerHostPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerHostPort.setStatus('current')
tacacsServerHostPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noPrimary", 0), ("primary", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerHostPrimary.setStatus('current')
tacacsServerHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerHostStatus.setStatus('current')
tacacsServerHostKey = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerHostKey.setStatus('current')
tacacsServerHostTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerHostTimeout.setStatus('current')
tacacsServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerTimeout.setStatus('current')
tacacsServerKey = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerKey.setStatus('current')
am = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4))
amGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amGlobalEnable.setStatus('current')
amPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2), )
if mibBuilder.loadTexts: amPortInfoTable.setStatus('current')
amPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1), ).setIndexNames((0, "NAG-MIB", "amPortIndex"), (0, "NAG-MIB", "amPortIp"))
if mibBuilder.loadTexts: amPortInfoEntry.setStatus('current')
amPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: amPortIndex.setStatus('current')
amPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amPortEnable.setStatus('current')
amPortForwardingType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip-pool", 1), ("mac-ip-pool", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amPortForwardingType.setStatus('current')
amPortIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amPortIp.setStatus('current')
amPortMac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1, 5), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amPortMac.setStatus('current')
amPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amPortCount.setStatus('current')
amPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amPortStatus.setStatus('current')
radiusMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5))
aaaEnabled = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaEnabled.setStatus('current')
aaaAccount = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAccount.setStatus('current')
aaaAccountUpdate = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAccountUpdate.setStatus('current')
aaaAccountBindingDHCP = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAccountBindingDHCP.setStatus('current')
radiusAuthenServerHostTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5), )
if mibBuilder.loadTexts: radiusAuthenServerHostTable.setStatus('current')
radiusAuthenServerHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1), ).setIndexNames((0, "NAG-MIB", "radiusAuthenServerHostIndex"))
if mibBuilder.loadTexts: radiusAuthenServerHostEntry.setStatus('current')
radiusAuthenServerHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: radiusAuthenServerHostIndex.setStatus('current')
radiusAuthenServerHostIP = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthenServerHostIP.setStatus('current')
radiusAuthenServerHostPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthenServerHostPort.setStatus('current')
radiusAutServerHostKey = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAutServerHostKey.setStatus('current')
radiusAuthenServerHostPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noPrimary", 0), ("primary", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthenServerHostPrimary.setStatus('current')
radiusAutServerHostAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("dot1x", 1), ("telnet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAutServerHostAccessMode.setStatus('current')
radiusAuthenServerHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthenServerHostStatus.setStatus('current')
radiusAcctServerHostTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6), )
if mibBuilder.loadTexts: radiusAcctServerHostTable.setStatus('current')
radiusAcctServerHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6, 1), ).setIndexNames((0, "NAG-MIB", "radiusAcctServerHostIndex"))
if mibBuilder.loadTexts: radiusAcctServerHostEntry.setStatus('current')
radiusAcctServerHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: radiusAcctServerHostIndex.setStatus('current')
radiusAcctServerHostIP = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctServerHostIP.setStatus('current')
radiusAcctServerHostPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctServerHostPort.setStatus('current')
radiusAcctServerHostKey = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctServerHostKey.setStatus('current')
radiusAcctServerHostPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noPrimary", 0), ("primary", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctServerHostPrimary.setStatus('current')
radiusAcctServerHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctServerHostStatus.setStatus('current')
radiusServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerTimeout.setStatus('current')
radiusServerRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerRetransmit.setStatus('current')
radiusServerDeadTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerDeadTime.setStatus('current')
radiusServerKey = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerKey.setStatus('current')
radiusServerAccountTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerAccountTimeOut.setStatus('current')
radiusServerNasIpv4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerNasIpv4.setStatus('current')
radiusServerNasIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerNasIpv6.setStatus('current')
qos = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1))
qosEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosEnable.setStatus('current')
qosPortTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2), )
if mibBuilder.loadTexts: qosPortTable.setStatus('current')
qosPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1), ).setIndexNames((0, "NAG-MIB", "qosPortIndex"))
if mibBuilder.loadTexts: qosPortEntry.setStatus('current')
qosPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: qosPortIndex.setStatus('current')
qosPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 2, 3))).clone(namedValues=NamedValues(("cos", 1), ("trust", 0), ("dscpMutation", 2), ("priorityQueueOut", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortType.setStatus('current')
qosPortCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortCos.setStatus('current')
qosPortTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("priority", 0), ("priAndPassThroughDscp", 1), ("priAndPassThroughCos", 2), ("priAndPassThroughCosAndPassThroughDscp", 3), ("cos", 4), ("cosAndPassThroughDscp", 5), ("cosAndPassThroughCos", 6), ("cosAndPassThroughCosAndPassThroughDscp", 7), ("dscp", 8), ("dscpAndPassThroughCos", 9), ("dscpAndPassThroughDscp", 10), ("dscpAndPassThroughDscpAndPassThroughCos", 11), ("ipPrecedence", 12), ("ipPreAndPassThroughCos", 13), ("ipPreAndPassThroughDSCP", 14), ("ipPreAndPassThroughDSCPAndPassThroughCos", 15), ("mplsEXP", 16)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortTrust.setStatus('current')
qosPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortPriority.setStatus('current')
qosPortMutation = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortMutation.setStatus('current')
qosPortQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("priorityQueue", 0), ("wrrQueue", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortQueue.setStatus('current')
qosPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortStatus.setStatus('current')
qosClassMapTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3), )
if mibBuilder.loadTexts: qosClassMapTable.setStatus('current')
qosclassmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1), ).setIndexNames((0, "NAG-MIB", "qosClassMapName"))
if mibBuilder.loadTexts: qosclassmapEntry.setStatus('current')
qosClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: qosClassMapName.setStatus('current')
qosClassMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 3, 8, 7, 4, 9, 10))).clone(namedValues=NamedValues(("configurClassMap", 0), ("accessGroup", 1), ("dscp", 2), ("v6dscp", 5), ("ippre", 3), ("v6AccessGroup", 8), ("v6Flow", 7), ("vlan", 4), ("cos", 9), ("exptopmost", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassMapType.setStatus('current')
qosClassMapAccessGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassMapAccessGroup.setStatus('current')
qosClassMapDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassMapDscp.setStatus('current')
qosClassMapV6Dscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassMapV6Dscp.setStatus('current')
qosClassMapIpPre = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassMapIpPre.setStatus('current')
qosClassMapV6AccGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassMapV6AccGroup.setStatus('current')
qosClassMapV6Flow = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassMapV6Flow.setStatus('current')
qosClassMapVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassMapVlan.setStatus('current')
qosClassCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 10), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassCos.setStatus('current')
qosClassMapEXPtopmost = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassMapEXPtopmost.setStatus('current')
qosClassMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassMapStatus.setStatus('current')
qosPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4), )
if mibBuilder.loadTexts: qosPolicyTable.setStatus('current')
qosPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1), ).setIndexNames((0, "NAG-MIB", "qosPolicyName"))
if mibBuilder.loadTexts: qosPolicyEntry.setStatus('current')
qosPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: qosPolicyName.setStatus('current')
qosPolicyClassMap = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyClassMap.setStatus('current')
qosPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("policymap", 0), ("matchclassmap", 1), ("sp", 2), ("aggregatePolicer", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyType.setStatus('current')
qosPolicyRateKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyRateKbps.setStatus('current')
qosPolicyNormalBurstKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyNormalBurstKbps.setStatus('current')
qosPolicyMaximumBurstKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyMaximumBurstKbps.setStatus('current')
qosPolicyPeakKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyPeakKbps.setStatus('current')
qosPolicyConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("set-dscp-transmit", 2), ("set-prec-transmit", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyConformAction.setStatus('current')
qosPolicyConformActionChangeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyConformActionChangeValue.setStatus('current')
qosPolicyExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("policeDscpTransmit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyExceedAction.setStatus('current')
qosPolicyViolateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("policeDscpTransmit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyViolateAction.setStatus('current')
qosPolicyAggregatePolicer = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyAggregatePolicer.setStatus('current')
qosPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPolicyStatus.setStatus('current')
qosAggPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5), )
if mibBuilder.loadTexts: qosAggPolicerTable.setStatus('current')
qosAggPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1), ).setIndexNames((0, "NAG-MIB", "qosAggPolicerName"))
if mibBuilder.loadTexts: qosAggPolicerEntry.setStatus('current')
qosAggPolicerName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: qosAggPolicerName.setStatus('current')
qosAggPolicerRateKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosAggPolicerRateKbps.setStatus('current')
qosAggPolicerNormalBurstKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosAggPolicerNormalBurstKbps.setStatus('current')
qosAggPolicerMaximumBurstKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosAggPolicerMaximumBurstKbps.setStatus('current')
qosAggPolicerPeakKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosAggPolicerPeakKbps.setStatus('current')
qosAggPolicerConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("set-dscp-transmit", 2), ("set-prec-transmit", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosAggPolicerConformAction.setStatus('current')
qosAggPolicerConformActionChangeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosAggPolicerConformActionChangeValue.setStatus('current')
qosAggPolicerExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("policeDscpTransmit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosAggPolicerExceedAction.setStatus('current')
qosAggPolicerViolateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("policeDscpTransmit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosAggPolicerViolateAction.setStatus('current')
qosAggPolicerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosAggPolicerStatus.setStatus('current')
qosSetTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6), )
if mibBuilder.loadTexts: qosSetTable.setStatus('current')
qosSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1), ).setIndexNames((0, "NAG-MIB", "qosSetPolicyMapName"))
if mibBuilder.loadTexts: qosSetEntry.setStatus('current')
qosSetPolicyMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: qosSetPolicyMapName.setStatus('current')
qosSetClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSetClassMapName.setStatus('current')
qosSetType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("dscp", 1), ("precedence", 2), ("nextHop", 3), ("v6Dscp", 4), ("v6FlowLabel", 6), ("v6nextHop", 7), ("cos", 8), ("expimposition", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSetType.setStatus('current')
qosSetdscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSetdscp.setStatus('current')
qosSetprecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSetprecedence.setStatus('current')
qosSetnextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSetnextHop.setStatus('current')
qosSetv6Dscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSetv6Dscp.setStatus('current')
qosSetv6FlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSetv6FlowLabel.setStatus('current')
qosSetv6nextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSetv6nextHop.setStatus('current')
qosSetCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSetCos.setStatus('current')
qosSetEXPimposition = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSetEXPimposition.setStatus('current')
qosSetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSetStatus.setStatus('current')
qosPortBindTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 7), )
if mibBuilder.loadTexts: qosPortBindTable.setStatus('current')
qosPortBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 7, 1), ).setIndexNames((0, "NAG-MIB", "qosPortBindIndex"), (0, "NAG-MIB", "qosPortBindPolicy"))
if mibBuilder.loadTexts: qosPortBindEntry.setStatus('current')
qosPortBindIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: qosPortBindIndex.setStatus('current')
qosPortBindPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: qosPortBindPolicy.setStatus('current')
qosPortBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("input", 1), ("output", 2), ("noinput", 3), ("nooutput", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortBindType.setStatus('current')
qosPortQueueTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8), )
if mibBuilder.loadTexts: qosPortQueueTable.setStatus('current')
qosPortQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1), ).setIndexNames((0, "NAG-MIB", "qosPortQueueIndex"))
if mibBuilder.loadTexts: qosPortQueueEntry.setStatus('current')
qosPortQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: qosPortQueueIndex.setStatus('current')
qosPortQueueWeight1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortQueueWeight1.setStatus('current')
qosPortQueueWeight2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortQueueWeight2.setStatus('current')
qosPortQueueWeight3 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortQueueWeight3.setStatus('current')
qosPortQueueWeight4 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortQueueWeight4.setStatus('current')
qosPortQueueWeight5 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortQueueWeight5.setStatus('current')
qosPortQueueWeight6 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortQueueWeight6.setStatus('current')
qosPortQueueWeight7 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortQueueWeight7.setStatus('current')
qosPortQueueWeight8 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortQueueWeight8.setStatus('current')
qosPortQueueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortQueueStatus.setStatus('current')
qosMap = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10))
qosMapType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cosDscp", 1), ("dscpCos", 2), ("dscpMutation", 3), ("ipPrecDscp", 4), ("policedDscp", 5), ("expdscp", 6), ("dscpexp", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapType.setStatus('current')
qosMapDscp1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapDscp1.setStatus('current')
qosMapDscp2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapDscp2.setStatus('current')
qosMapDscp3 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapDscp3.setStatus('current')
qosMapDscp4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapDscp4.setStatus('current')
qosMapDscp5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapDscp5.setStatus('current')
qosMapDscp6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapDscp6.setStatus('current')
qosMapDscp7 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapDscp7.setStatus('current')
qosMapDscp8 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapDscp8.setStatus('current')
qosMapCos = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapCos.setStatus('current')
qosMapEXP = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapEXP.setStatus('current')
qosMapMarkDownDscp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapMarkDownDscp.setStatus('current')
qosMapMarkDownType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal-burst", 0), ("max-burst", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapMarkDownType.setStatus('current')
qosMapMutationName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapMutationName.setStatus('current')
qosMapMutationOut = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapMutationOut.setStatus('current')
qosMapStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMapStatus.setStatus('current')
showqos = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11))
showclassmapTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 1), )
if mibBuilder.loadTexts: showclassmapTable.setStatus('current')
showclassmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 1, 1), ).setIndexNames((0, "NAG-MIB", "showclassmapname"))
if mibBuilder.loadTexts: showclassmapEntry.setStatus('current')
showclassmapname = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)))
if mibBuilder.loadTexts: showclassmapname.setStatus('current')
showclassmapmatch = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showclassmapmatch.setStatus('current')
showpolicymapTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 2), )
if mibBuilder.loadTexts: showpolicymapTable.setStatus('current')
showpolicymapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 2, 1), ).setIndexNames((0, "NAG-MIB", "showpolicymapname"))
if mibBuilder.loadTexts: showpolicymapEntry.setStatus('current')
showpolicymapname = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)))
if mibBuilder.loadTexts: showpolicymapname.setStatus('current')
showpolicymapcontent = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showpolicymapcontent.setStatus('current')
showqosaggregatepolicerTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 3), )
if mibBuilder.loadTexts: showqosaggregatepolicerTable.setStatus('current')
showqosaggregatepolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 3, 1), ).setIndexNames((0, "NAG-MIB", "showqosaggregatepolicername"))
if mibBuilder.loadTexts: showqosaggregatepolicerEntry.setStatus('current')
showqosaggregatepolicername = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)))
if mibBuilder.loadTexts: showqosaggregatepolicername.setStatus('current')
showqosaggregatepolicercontent = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showqosaggregatepolicercontent.setStatus('current')
showmlsqosinterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 4), )
if mibBuilder.loadTexts: showmlsqosinterfaceTable.setStatus('current')
showmlsqosinterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 4, 1), ).setIndexNames((0, "NAG-MIB", "showmlsqosinterfaceIndex"))
if mibBuilder.loadTexts: showmlsqosinterfaceEntry.setStatus('current')
showmlsqosinterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: showmlsqosinterfaceIndex.setStatus('current')
showmlsqosinterfaceqoscontent = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showmlsqosinterfaceqoscontent.setStatus('current')
showmlsqosmaps = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5))
showmlsqosmapscosdscp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showmlsqosmapscosdscp.setStatus('current')
showmlsqosmapscosqueue = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showmlsqosmapscosqueue.setStatus('current')
showmlsqosmapsdscpcos = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showmlsqosmapsdscpcos.setStatus('current')
showmlsqosmapsipprecdscp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showmlsqosmapsipprecdscp.setStatus('current')
showmlsqosmapspoliceddscp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showmlsqosmapspoliceddscp.setStatus('current')
showmlsqosmapspoliceddscpnormalburst = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showmlsqosmapspoliceddscpnormalburst.setStatus('current')
showmlsqosmapsexpdscp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showmlsqosmapsexpdscp.setStatus('current')
showmlsqosmapsdscpexp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showmlsqosmapsdscpexp.setStatus('current')
showmlsqosmapsdscpmutationTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 6), )
if mibBuilder.loadTexts: showmlsqosmapsdscpmutationTable.setStatus('current')
showmlsqosmapsdscpmutationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 6, 1), ).setIndexNames((0, "NAG-MIB", "showmlsqosmapsdscpmutationname"))
if mibBuilder.loadTexts: showmlsqosmapsdscpmutationEntry.setStatus('current')
showmlsqosmapsdscpmutationname = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)))
if mibBuilder.loadTexts: showmlsqosmapsdscpmutationname.setStatus('current')
showmlsqosmapsdscpmutationcontent = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: showmlsqosmapsdscpmutationcontent.setStatus('current')
mirrorDestTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 1), )
if mibBuilder.loadTexts: mirrorDestTable.setStatus('current')
mirrorDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 1, 1), ).setIndexNames((0, "NAG-MIB", "mirrorDestSession"))
if mibBuilder.loadTexts: mirrorDestEntry.setStatus('current')
mirrorDestSession = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorDestSession.setStatus('current')
mirrorDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorDestPort.setStatus('current')
mirrorDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorDestStatus.setStatus('current')
mirrorSrcPortTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 2), )
if mibBuilder.loadTexts: mirrorSrcPortTable.setStatus('current')
mirrorSrcPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 2, 1), ).setIndexNames((0, "NAG-MIB", "mirrorSrcPortSession"), (0, "NAG-MIB", "mirrorSrcPortDirect"))
if mibBuilder.loadTexts: mirrorSrcPortEntry.setStatus('current')
mirrorSrcPortSession = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorSrcPortSession.setStatus('current')
mirrorSrcPortDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rx", 1), ("tx", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorSrcPortDirect.setStatus('current')
mirrorSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorSrcPort.setStatus('current')
mirrorSrcPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorSrcPortStatus.setStatus('current')
qos3 = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2))
qos3PolicyMapGroupTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 1), )
if mibBuilder.loadTexts: qos3PolicyMapGroupTable.setStatus('current')
qos3PolicyMapGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 1, 1), ).setIndexNames((0, "NAG-MIB", "qos3PolicyMapGroupIndex"))
if mibBuilder.loadTexts: qos3PolicyMapGroupEntry.setStatus('current')
qos3PolicyMapGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3PolicyMapGroupIndex.setStatus('current')
qos3PolicyMapGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyMapGroupName.setStatus('current')
qos3PolicyMapGroupIsExt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyMapGroupIsExt.setStatus('current')
qos3PolicyMapGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyMapGroupStatus.setStatus('current')
qos3ClassMapTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 2), )
if mibBuilder.loadTexts: qos3ClassMapTable.setStatus('current')
qos3ClassMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 2, 1), ).setIndexNames((0, "NAG-MIB", "qos3ClassMapName"))
if mibBuilder.loadTexts: qos3ClassMapEntry.setStatus('current')
qos3ClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ClassMapName.setStatus('current')
qos3ClassMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cos", 0), ("dscp", 1), ("ipPrecedence", 2), ("ipv6Dscp", 3), ("ipv6Flowlabel", 4), ("exp", 5), ("vlan", 6), ("aclIndex", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ClassMapType.setStatus('current')
qos3ClassMapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ClassMapValue.setStatus('current')
qos3ClassMapUsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ClassMapUsedTime.setStatus('current')
qos3ClassMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ClassMapStatus.setStatus('current')
qos3AggregatePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3), )
if mibBuilder.loadTexts: qos3AggregatePolicyTable.setStatus('current')
qos3AggregatePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1), ).setIndexNames((0, "NAG-MIB", "qos3AggPolicyMapName"))
if mibBuilder.loadTexts: qos3AggregatePolicyEntry.setStatus('current')
qos3AggPolicyMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3AggPolicyMapName.setStatus('current')
qos3AggPolicyCIRKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyCIRKbps.setStatus('current')
qos3AggPolicyCBSKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyCBSKbps.setStatus('current')
qos3AggPolicyPBSKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyPBSKbps.setStatus('current')
qos3AggPolicyPIRKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyPIRKbps.setStatus('current')
qos3AggPolicyConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 6), Bits().clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("cos", 2), ("dscp", 3), ("ipPrecedence", 4), ("intp", 5), ("dp", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyConformAction.setStatus('current')
qos3AggPolicyconformSetCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyconformSetCos.setStatus('current')
qos3AggPolicyconformSetDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyconformSetDscp.setStatus('current')
qos3AggPolicyconformSetPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyconformSetPrec.setStatus('current')
qos3AggPolicyconformSetIntp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyconformSetIntp.setStatus('current')
qos3AggPolicyconformSetDp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyconformSetDp.setStatus('current')
qos3AggPolicyExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 12), Bits().clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("cos", 2), ("dscp", 3), ("ipPrecedence", 4), ("intp", 5), ("dp", 6), ("policiedIntpTransmit", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyExceedAction.setStatus('current')
qos3AggPolicyExceedSetCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyExceedSetCos.setStatus('current')
qos3AggPolicyExceedSetDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyExceedSetDscp.setStatus('current')
qos3AggPolicyExceedSetPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyExceedSetPrec.setStatus('current')
qos3AggPolicyExceedSetIntp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyExceedSetIntp.setStatus('current')
qos3AggPolicyExceedSetDp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyExceedSetDp.setStatus('current')
qos3AggPolicyViolateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 18), Bits().clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("cos", 2), ("dscp", 3), ("ipPrecedence", 4), ("intp", 5), ("dp", 6), ("policiedIntpTransmit", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyViolateAction.setStatus('current')
qos3AggPolicyViolateSetCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyViolateSetCos.setStatus('current')
qos3AggPolicyViolateSetDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyViolateSetDscp.setStatus('current')
qos3AggPolicyViolateSetPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyViolateSetPrec.setStatus('current')
qos3AggPolicyViolateSetIntp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyViolateSetIntp.setStatus('current')
qos3AggPolicyViolateSetDp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyViolateSetDp.setStatus('current')
qos3AggPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AggPolicyStatus.setStatus('current')
qos3PolicyTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4), )
if mibBuilder.loadTexts: qos3PolicyTable.setStatus('current')
qos3PolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1), ).setIndexNames((0, "NAG-MIB", "qos3PolicyMapIndex"), (0, "NAG-MIB", "qos3PolicyClassMapName"))
if mibBuilder.loadTexts: qos3PolicyEntry.setStatus('current')
qos3PolicyMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3PolicyMapIndex.setStatus('current')
qos3PolicyClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3PolicyClassMapName.setStatus('current')
qos3PolicyInsertClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyInsertClassMapName.setStatus('current')
qos3PolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 4), Bits().clone(namedValues=NamedValues(("pidAction", 0), ("colorAction", 1), ("aggregateAction", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyType.setStatus('current')
qos3PolicyCIRKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyCIRKbps.setStatus('current')
qos3PolicyCBSKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyCBSKbps.setStatus('current')
qos3PolicyPBSKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyPBSKbps.setStatus('current')
qos3PolicyPIRKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyPIRKbps.setStatus('current')
qos3PolicyConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 9), Bits().clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("cos", 2), ("dscp", 3), ("ipPrecedence", 4), ("intp", 5), ("dp", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyConformAction.setStatus('current')
qos3PolicyconformSetCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyconformSetCos.setStatus('current')
qos3PolicyconformSetDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyconformSetDscp.setStatus('current')
qos3PolicyconformSetPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyconformSetPrec.setStatus('current')
qos3PolicyconformSetIntp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyconformSetIntp.setStatus('current')
qos3PolicyconformSetDp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyconformSetDp.setStatus('current')
qos3PolicyExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 15), Bits().clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("cos", 2), ("dscp", 3), ("ipPrecedence", 4), ("intp", 5), ("dp", 6), ("policiedIntpTransmit", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyExceedAction.setStatus('current')
qos3PolicyExceedSetCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyExceedSetCos.setStatus('current')
qos3PolicyExceedSetDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyExceedSetDscp.setStatus('current')
qos3PolicyExceedSetPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyExceedSetPrec.setStatus('current')
qos3PolicyExceedSetIntp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyExceedSetIntp.setStatus('current')
qos3PolicyExceedSetDp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyExceedSetDp.setStatus('current')
qos3PolicyViolateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 21), Bits().clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("cos", 2), ("dscp", 3), ("ipPrecedence", 4), ("intp", 5), ("dp", 6), ("policiedIntpTransmit", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyViolateAction.setStatus('current')
qos3PolicyViolateSetCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyViolateSetCos.setStatus('current')
qos3PolicyViolateSetDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyViolateSetDscp.setStatus('current')
qos3PolicyViolateSetPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyViolateSetPrec.setStatus('current')
qos3PolicyViolateSetIntp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyViolateSetIntp.setStatus('current')
qos3PolicyViolateSetDp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyViolateSetDp.setStatus('current')
qos3PolicyAggregatePolicer = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyAggregatePolicer.setStatus('current')
qos3PolicyAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyAccounting.setStatus('current')
qos3PolicyPidAction = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 29), Bits().clone(namedValues=NamedValues(("cos", 0), ("dscp", 1), ("ipPrecedence", 2), ("ipNextHop", 3), ("exp", 4), ("ipv6NextHop", 5), ("intp", 6), ("dp", 7), ("setCvid", 8), ("setSvid", 9), ("setSTpid", 10), ("addSvid", 11), ("delCvid", 12), ("setTunnelId", 13), ("transmit", 14), ("drop", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyPidAction.setStatus('current')
qos3SetCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetCos.setStatus('current')
qos3SetIpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetIpDscp.setStatus('current')
qos3SetIpPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetIpPrec.setStatus('current')
qos3SetIntp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetIntp.setStatus('current')
qos3SetDp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetDp.setStatus('current')
qos3SetCVid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetCVid.setStatus('current')
qos3SetSVid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetSVid.setStatus('current')
qos3SetSTpid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("value0x8100", 1), ("value0x88a8", 2), ("value0x9100", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetSTpid.setStatus('current')
qos3AddSVid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3AddSVid.setStatus('current')
qos3DelCVid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3DelCVid.setStatus('current')
qos3SetTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetTunnelId.setStatus('current')
qos3SetIpDefaultPBR = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetIpDefaultPBR.setStatus('current')
qos3SetIpVrf = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 252))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetIpVrf.setStatus('current')
qos3SetIpNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 43), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetIpNextHop.setStatus('current')
qos3SetExp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetExp.setStatus('current')
qos3SetIpv6DefaultPBR = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetIpv6DefaultPBR.setStatus('current')
qos3SetIpv6Vrf = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 252))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetIpv6Vrf.setStatus('current')
qos3SetIpv6NextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SetIpv6NextHop.setStatus('current')
qos3PolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2), ("removeColorAct", 3), ("removeAggregateAct", 4), ("removePidAct", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PolicyStatus.setStatus('current')
qos3PortTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5), )
if mibBuilder.loadTexts: qos3PortTable.setStatus('current')
qos3PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1), ).setIndexNames((0, "NAG-MIB", "qos3PortIndex"))
if mibBuilder.loadTexts: qos3PortEntry.setStatus('current')
qos3PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3PortIndex.setStatus('current')
qos3PortCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PortCos.setStatus('current')
qos3PortTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1, 3), Bits().clone(namedValues=NamedValues(("cosEnable", 0), ("dscpEnable", 1), ("expEnable", 2), ("cosDisable", 3), ("dscpDisable", 4), ("expDisbable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PortTrust.setStatus('current')
qos3PortWredEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tail", 0), ("wred", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PortWredEnable.setStatus('current')
qos3PortQueueAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("sp", 0), ("wrr", 1), ("wdrr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PortQueueAlgorithm.setStatus('current')
qos3PortPassThroughCos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PortPassThroughCos.setStatus('current')
qos3PortPassThroughDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3PortPassThroughDscp.setStatus('current')
qos3QueueWeightTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6), )
if mibBuilder.loadTexts: qos3QueueWeightTable.setStatus('current')
qos3QueueWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1), ).setIndexNames((0, "NAG-MIB", "qos3QueueWeightPortIndex"), (0, "NAG-MIB", "qos3QueueWeightType"))
if mibBuilder.loadTexts: qos3QueueWeightEntry.setStatus('current')
qos3QueueWeightPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3QueueWeightPortIndex.setStatus('current')
qos3QueueWeightType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wrr", 0), ("wdrr", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3QueueWeightType.setStatus('current')
qos3QueueWeight0 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWeight0.setStatus('current')
qos3QueueWeight1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWeight1.setStatus('current')
qos3QueueWeight2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWeight2.setStatus('current')
qos3QueueWeight3 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWeight3.setStatus('current')
qos3QueueWeight4 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWeight4.setStatus('current')
qos3QueueWeight5 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWeight5.setStatus('current')
qos3QueueWeight6 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWeight6.setStatus('current')
qos3QueueWeight7 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWeight7.setStatus('current')
qos3QueueWeightStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWeightStatus.setStatus('current')
qos3QueueBindWidthTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 7), )
if mibBuilder.loadTexts: qos3QueueBindWidthTable.setStatus('current')
qos3QueueBindWidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 7, 1), ).setIndexNames((0, "NAG-MIB", "qos3QueueBindWidthPortIndex"), (0, "NAG-MIB", "qos3QueueBindWidthQueueId"))
if mibBuilder.loadTexts: qos3QueueBindWidthEntry.setStatus('current')
qos3QueueBindWidthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3QueueBindWidthPortIndex.setStatus('current')
qos3QueueBindWidthQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3QueueBindWidthQueueId.setStatus('current')
qos3QueueBindWidthMin = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueBindWidthMin.setStatus('current')
qos3QueueBindWidthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueBindWidthMax.setStatus('current')
qos3QueueBindWidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueBindWidthStatus.setStatus('current')
qos3QueueWredTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8), )
if mibBuilder.loadTexts: qos3QueueWredTable.setStatus('current')
qos3QueueWredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1), ).setIndexNames((0, "NAG-MIB", "qos3QueueWredPortIndex"), (0, "NAG-MIB", "qos3QueueWredQueueId"), (0, "NAG-MIB", "qos3QueueWredDp"))
if mibBuilder.loadTexts: qos3QueueWredEntry.setStatus('current')
qos3QueueWredPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3QueueWredPortIndex.setStatus('current')
qos3QueueWredQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3QueueWredQueueId.setStatus('current')
qos3QueueWredDp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3QueueWredDp.setStatus('current')
qos3QueueWredDpStart = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWredDpStart.setStatus('current')
qos3QueueWredDpEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWredDpEnd.setStatus('current')
qos3QueueWredDpMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWredDpMaxRate.setStatus('current')
qos3QueueWredStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3QueueWredStatus.setStatus('current')
qos3MapTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9), )
if mibBuilder.loadTexts: qos3MapTable.setStatus('current')
qos3MapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1), ).setIndexNames((0, "NAG-MIB", "qos3MapType"))
if mibBuilder.loadTexts: qos3MapEntry.setStatus('current')
qos3MapType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("cosToIntp", 0), ("cosToDp", 1), ("expToIntp", 2), ("expToDp", 3), ("intpToCos", 4), ("intpToDscp", 5), ("intpToExp", 6), ("cosToCosGreen", 7), ("cosToCosYellow", 8), ("cosToCosRed", 9), ("cosToDscpGreen", 10), ("cosToDscpYellow", 11), ("cosToDscpRed", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3MapType.setStatus('current')
qos3MapAtoB1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3MapAtoB1.setStatus('current')
qos3MapAtoB2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3MapAtoB2.setStatus('current')
qos3MapAtoB3 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3MapAtoB3.setStatus('current')
qos3MapAtoB4 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3MapAtoB4.setStatus('current')
qos3MapAtoB5 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3MapAtoB5.setStatus('current')
qos3MapAtoB6 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3MapAtoB6.setStatus('current')
qos3MapAtoB7 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3MapAtoB7.setStatus('current')
qos3MapAtoB8 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3MapAtoB8.setStatus('current')
qos3MapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3MapStatus.setStatus('current')
qos3MapDscpTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 10), )
if mibBuilder.loadTexts: qos3MapDscpTable.setStatus('current')
qos3MapDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 10, 1), ).setIndexNames((0, "NAG-MIB", "qos3MapDscpType"), (0, "NAG-MIB", "qos3MapDscpIndex"))
if mibBuilder.loadTexts: qos3MapDscpEntry.setStatus('current')
qos3MapDscpType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("dscpToIntp", 0), ("dscpToDp", 1), ("dscpToDscp", 2), ("dscpToDscpGreen", 3), ("dscpToDscpYellow", 4), ("dscpToDscpRed", 5), ("dscpToCosGreen", 6), ("dscpToCosYellow", 7), ("dscpToCosRed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3MapDscpType.setStatus('current')
qos3MapDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3MapDscpIndex.setStatus('current')
qos3MapDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3MapDscpValue.setStatus('current')
qos3mapDscpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3mapDscpStatus.setStatus('current')
qos3ServicePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 11), )
if mibBuilder.loadTexts: qos3ServicePolicyTable.setStatus('current')
qos3ServicePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 11, 1), ).setIndexNames((0, "NAG-MIB", "qos3ServicePolicyBindType"), (0, "NAG-MIB", "qos3ServicePolicyDirection"), (0, "NAG-MIB", "qos3ServicePolicyIndex"))
if mibBuilder.loadTexts: qos3ServicePolicyEntry.setStatus('current')
qos3ServicePolicyBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("port", 0), ("vlan", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ServicePolicyBindType.setStatus('current')
qos3ServicePolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ServicePolicyIndex.setStatus('current')
qos3ServicePolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("out", 0), ("in", 1), ("ext", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ServicePolicyDirection.setStatus('current')
qos3ServicePolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ServicePolicyName.setStatus('current')
qos3SercivePolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SercivePolicyStatus.setStatus('current')
qos3StatisticClearTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 12), )
if mibBuilder.loadTexts: qos3StatisticClearTable.setStatus('current')
qos3StatisticClearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 12, 1), ).setIndexNames((0, "NAG-MIB", "qos3StatisticClearBindType"), (0, "NAG-MIB", "qos3StatisticClearDirection"), (0, "NAG-MIB", "qos3StatisticClearIndex"))
if mibBuilder.loadTexts: qos3StatisticClearEntry.setStatus('current')
qos3StatisticClearBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("port", 0), ("vlan", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3StatisticClearBindType.setStatus('current')
qos3StatisticClearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3StatisticClearIndex.setStatus('current')
qos3StatisticClearDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("out", 0), ("in", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3StatisticClearDirection.setStatus('current')
qos3StatisticClearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3StatisticClearStatus.setStatus('current')
qos3Ets = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13))
qos3EtsTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 1), )
if mibBuilder.loadTexts: qos3EtsTable.setStatus('current')
qos3EtsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 1, 1), ).setIndexNames((0, "NAG-MIB", "qos3EtsPortIndex"))
if mibBuilder.loadTexts: qos3EtsEntry.setStatus('current')
qos3EtsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3EtsPortIndex.setStatus('current')
qos3EtsScheduleStatusConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("uc", 1), ("mc", 2), ("ets", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3EtsScheduleStatusConfig.setStatus('current')
qos3EtsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3EtsStatus.setStatus('current')
qos3McQueueBindWidthTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 2), )
if mibBuilder.loadTexts: qos3McQueueBindWidthTable.setStatus('current')
qos3McQueueBindWidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 2, 1), ).setIndexNames((0, "NAG-MIB", "qos3McQueueBindWidthPortIndex"), (0, "NAG-MIB", "qos3McQueueID"))
if mibBuilder.loadTexts: qos3McQueueBindWidthEntry.setStatus('current')
qos3McQueueBindWidthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3McQueueBindWidthPortIndex.setStatus('current')
qos3McQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3McQueueID.setStatus('current')
qos3McQueueBindWidthMin = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3McQueueBindWidthMin.setStatus('current')
qos3McQueueBindWidthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3McQueueBindWidthMax.setStatus('current')
qos3McQueueBindWidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3McQueueBindWidthStatus.setStatus('current')
qos3SchedulePolicyMapTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 3), )
if mibBuilder.loadTexts: qos3SchedulePolicyMapTable.setStatus('current')
qos3SchedulePolicyMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 3, 1), ).setIndexNames((0, "NAG-MIB", "qos3SchedulePolicyMapIndex"))
if mibBuilder.loadTexts: qos3SchedulePolicyMapEntry.setStatus('current')
qos3SchedulePolicyMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3SchedulePolicyMapIndex.setStatus('current')
qos3SchedulePolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SchedulePolicyName.setStatus('current')
qos3SchedulePolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SchedulePolicyStatus.setStatus('current')
qos3NodeScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 4), )
if mibBuilder.loadTexts: qos3NodeScheduleTable.setStatus('current')
qos3NodeScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 4, 1), ).setIndexNames((0, "NAG-MIB", "qos3NodeSchedulePolicyIndex"), (0, "NAG-MIB", "qos3NodeScheduleLevelID"), (0, "NAG-MIB", "qos3NodeScheduleNodeID"))
if mibBuilder.loadTexts: qos3NodeScheduleEntry.setStatus('current')
qos3NodeSchedulePolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3NodeSchedulePolicyIndex.setStatus('current')
qos3NodeScheduleLevelID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3NodeScheduleLevelID.setStatus('current')
qos3NodeScheduleNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3NodeScheduleNodeID.setStatus('current')
qos3NodeScheduleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3NodeScheduleStatus.setStatus('current')
qos3ScheduleQueueAlgorithmTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 5), )
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithmTable.setStatus('current')
qos3ScheduleQueueAlgorithmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 5, 1), ).setIndexNames((0, "NAG-MIB", "qos3ScheduleQueueAlgorithmPolicyIndex"), (0, "NAG-MIB", "qos3ScheduleQueueAlgorithmLevelID"), (0, "NAG-MIB", "qos3ScheduleQueueAlgorithmNodeID"))
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithmEntry.setStatus('current')
qos3ScheduleQueueAlgorithmPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithmPolicyIndex.setStatus('current')
qos3ScheduleQueueAlgorithmLevelID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithmLevelID.setStatus('current')
qos3ScheduleQueueAlgorithmNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithmNodeID.setStatus('current')
qos3ScheduleQueueAlgorithmConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("rr", 0), ("sp", 1), ("wrr", 2), ("wdrr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithmConfig.setStatus('current')
qos3ScheduleQueueAlgorithmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithmStatus.setStatus('current')
qos3ScheduleQueueWeightTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6), )
if mibBuilder.loadTexts: qos3ScheduleQueueWeightTable.setStatus('current')
qos3ScheduleQueueWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1), ).setIndexNames((0, "NAG-MIB", "qos3ScheduleQueueWeightPolicyIndex"), (0, "NAG-MIB", "qos3ScheduleQueueWeightLevelID"), (0, "NAG-MIB", "qos3ScheduleQueueWeightNodeID"), (0, "NAG-MIB", "qos3ScheduleQueueAlgorithm"), (0, "NAG-MIB", "qos3ScheduleQueueWeightQueueID"))
if mibBuilder.loadTexts: qos3ScheduleQueueWeightEntry.setStatus('current')
qos3ScheduleQueueWeightPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueWeightPolicyIndex.setStatus('current')
qos3ScheduleQueueWeightLevelID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueWeightLevelID.setStatus('current')
qos3ScheduleQueueWeightNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueWeightNodeID.setStatus('current')
qos3ScheduleQueueAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wrr", 0), ("wdrr", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueAlgorithm.setStatus('current')
qos3ScheduleQueueWeightQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueWeightQueueID.setStatus('current')
qos3ScheduleQueueWeightValue = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ScheduleQueueWeightValue.setStatus('current')
qos3ScheduleQueueWeightStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ScheduleQueueWeightStatus.setStatus('current')
qos3ScheduleQueueInputTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7), )
if mibBuilder.loadTexts: qos3ScheduleQueueInputTable.setStatus('current')
qos3ScheduleQueueInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1), ).setIndexNames((0, "NAG-MIB", "qos3ScheduleQueueInputPolicyIndex"), (0, "NAG-MIB", "qos3ScheduleQueueInputLevelID"), (0, "NAG-MIB", "qos3ScheduleQueueInputNodeID"), (0, "NAG-MIB", "qos3ScheduleQueueInputQueueID"))
if mibBuilder.loadTexts: qos3ScheduleQueueInputEntry.setStatus('current')
qos3ScheduleQueueInputPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueInputPolicyIndex.setStatus('current')
qos3ScheduleQueueInputLevelID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueInputLevelID.setStatus('current')
qos3ScheduleQueueInputNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueInputNodeID.setStatus('current')
qos3ScheduleQueueInputQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleQueueInputQueueID.setStatus('current')
qos3ScheduleQueueInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("uc", 0), ("mc", 1), ("node", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ScheduleQueueInputType.setStatus('current')
qos3ScheduleQueueInputTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ScheduleQueueInputTypeValue.setStatus('current')
qos3ScheduleQueueInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ScheduleQueueInputStatus.setStatus('current')
qos3ScheduleBindWidthTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8), )
if mibBuilder.loadTexts: qos3ScheduleBindWidthTable.setStatus('current')
qos3ScheduleBindWidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8, 1), ).setIndexNames((0, "NAG-MIB", "qos3ScheduleBindWidthPolicyIndex"), (0, "NAG-MIB", "qos3ScheduleBindWidthLevelID"), (0, "NAG-MIB", "qos3ScheduleBindWidthNodeID"))
if mibBuilder.loadTexts: qos3ScheduleBindWidthEntry.setStatus('current')
qos3ScheduleBindWidthPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleBindWidthPolicyIndex.setStatus('current')
qos3ScheduleBindWidthLevelID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleBindWidthLevelID.setStatus('current')
qos3ScheduleBindWidthNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3ScheduleBindWidthNodeID.setStatus('current')
qos3ScheduleBindWidthMin = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ScheduleBindWidthMin.setStatus('current')
qos3ScheduleBindWidthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ScheduleBindWidthMax.setStatus('current')
qos3ScheduleBindWidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3ScheduleBindWidthStatus.setStatus('current')
qos3SchedulePolicyBindTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 9), )
if mibBuilder.loadTexts: qos3SchedulePolicyBindTable.setStatus('current')
qos3SchedulePolicyBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 9, 1), ).setIndexNames((0, "NAG-MIB", "qos3SchedulePolicyBindPortIndex"))
if mibBuilder.loadTexts: qos3SchedulePolicyBindEntry.setStatus('current')
qos3SchedulePolicyBindPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3SchedulePolicyBindPortIndex.setStatus('current')
qos3SchedulePolicyBindPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SchedulePolicyBindPolicyName.setStatus('current')
qos3SchedulePolicyBindStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3SchedulePolicyBindStatus.setStatus('current')
qos3MapIntpExtendTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 14), )
if mibBuilder.loadTexts: qos3MapIntpExtendTable.setStatus('current')
qos3MapIntpExtendEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 14, 1), ).setIndexNames((0, "NAG-MIB", "qos3MapIntpExtendType"), (0, "NAG-MIB", "qos3MapIntpExtendIndex"))
if mibBuilder.loadTexts: qos3MapIntpExtendEntry.setStatus('current')
qos3MapIntpExtendType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("intpToCos", 0), ("intpToDscp", 1), ("intpToExp", 2), ("intpToQueue", 3), ("intpToDp", 4), ("intpToIntpRed", 5), ("intpToIntpYellow", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3MapIntpExtendType.setStatus('current')
qos3MapIntpExtendIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 119))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos3MapIntpExtendIndex.setStatus('current')
qos3MapIntpExtendValue = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3MapIntpExtendValue.setStatus('current')
qos3mapIntpExtendStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3mapIntpExtendStatus.setStatus('current')
qos3EgressRemark = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 15))
qos3EgressGreenRemark = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qos3EgressGreenRemark.setStatus('current')
showQos3 = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16))
showQos3VlanTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1), )
if mibBuilder.loadTexts: showQos3VlanTable.setStatus('current')
showQos3VlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1), ).setIndexNames((0, "NAG-MIB", "showQos3VlanId"), (0, "NAG-MIB", "showQos3PolicyDirection"), (0, "NAG-MIB", "showQos3ClassmapName"))
if mibBuilder.loadTexts: showQos3VlanEntry.setStatus('current')
showQos3VlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: showQos3VlanId.setStatus('current')
showQos3PolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("in", 0), ("out", 1), ("pre", 2), ("ext", 3))))
if mibBuilder.loadTexts: showQos3PolicyDirection.setStatus('current')
showQos3ClassmapName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: showQos3ClassmapName.setStatus('current')
showQos3VlanInCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3VlanInCounter.setStatus('current')
showQos3VlanOutCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3VlanOutCounter.setStatus('current')
showQos3VlanGreenCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3VlanGreenCounter.setStatus('current')
showQos3VlanYellowCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3VlanYellowCounter.setStatus('current')
showQos3VlanRedCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3VlanRedCounter.setStatus('current')
showQos3QueueStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 17), )
if mibBuilder.loadTexts: showQos3QueueStatisticsTable.setStatus('current')
showQos3QueueStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 17, 1), ).setIndexNames((0, "NAG-MIB", "showQos3QueueStatisticsPortIndex"))
if mibBuilder.loadTexts: showQos3QueueStatisticsEntry.setStatus('current')
showQos3QueueStatisticsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3QueueStatisticsPortIndex.setStatus('current')
showQos3QueueStatisticsQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3QueueStatisticsQueueID.setStatus('current')
showQos3QueueStatisticsPassedPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3QueueStatisticsPassedPacket.setStatus('current')
showQos3QueueStatisticsDropedPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 17, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3QueueStatisticsDropedPacket.setStatus('current')
showQos3MCQueueStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 18), )
if mibBuilder.loadTexts: showQos3MCQueueStatisticsTable.setStatus('current')
showQos3MCQueueStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 18, 1), ).setIndexNames((0, "NAG-MIB", "showQos3MCQueueStatisticsPortIndex"))
if mibBuilder.loadTexts: showQos3MCQueueStatisticsEntry.setStatus('current')
showQos3MCQueueStatisticsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3MCQueueStatisticsPortIndex.setStatus('current')
showQos3MCQueueStatisticsQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3MCQueueStatisticsQueueID.setStatus('current')
showQos3MCQueueStatisticsPassedPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 18, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3MCQueueStatisticsPassedPacket.setStatus('current')
showQos3MCQueueStatisticsDropedPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: showQos3MCQueueStatisticsDropedPacket.setStatus('current')
mirrorSrcCpuTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 3), )
if mibBuilder.loadTexts: mirrorSrcCpuTable.setStatus('current')
mirrorSrcCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 3, 1), ).setIndexNames((0, "NAG-MIB", "mirrorSrcCpuSession"), (0, "NAG-MIB", "mirrorSrcCpuDirect"), (0, "NAG-MIB", "mirrorSrcCpuSlot"))
if mibBuilder.loadTexts: mirrorSrcCpuEntry.setStatus('current')
mirrorSrcCpuSession = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorSrcCpuSession.setStatus('current')
mirrorSrcCpuDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rx", 1), ("tx", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorSrcCpuDirect.setStatus('current')
mirrorSrcCpuSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorSrcCpuSlot.setStatus('current')
mirrorSrcCpuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorSrcCpuStatus.setStatus('current')
mirrorReflectorPortTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 4), )
if mibBuilder.loadTexts: mirrorReflectorPortTable.setStatus('current')
mirrorReflectorPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 4, 1), ).setIndexNames((0, "NAG-MIB", "mirrorReflectorPortSession"), (0, "NAG-MIB", "mirrorReflectorPort"))
if mibBuilder.loadTexts: mirrorReflectorPortEntry.setStatus('current')
mirrorReflectorPortSession = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorReflectorPortSession.setStatus('current')
mirrorReflectorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorReflectorPort.setStatus('current')
mirrorReflectorPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorReflectorPortStatus.setStatus('current')
mirrorRspanVlanTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 5), )
if mibBuilder.loadTexts: mirrorRspanVlanTable.setStatus('current')
mirrorRspanVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 5, 1), ).setIndexNames((0, "NAG-MIB", "mirrorRspanVlan"))
if mibBuilder.loadTexts: mirrorRspanVlanEntry.setStatus('current')
mirrorRspanVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorRspanVlan.setStatus('current')
mirrorRspanVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorRspanVlanStatus.setStatus('current')
mirrorRspanSessionTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 6), )
if mibBuilder.loadTexts: mirrorRspanSessionTable.setStatus('current')
mirrorRspanSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 6, 1), ).setIndexNames((0, "NAG-MIB", "mirrorRspanSession"), (0, "NAG-MIB", "mirrorRspanSessionVlan"))
if mibBuilder.loadTexts: mirrorRspanSessionEntry.setStatus('current')
mirrorRspanSession = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorRspanSession.setStatus('current')
mirrorRspanSessionVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorRspanSessionVlan.setStatus('current')
mirrorRspanSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorRspanSessionStatus.setStatus('current')
mirrorDestGreTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7), )
if mibBuilder.loadTexts: mirrorDestGreTable.setStatus('current')
mirrorDestGreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7, 1), ).setIndexNames((0, "NAG-MIB", "mirrorDestGreSession"), (0, "NAG-MIB", "mirrorDestGrePort"))
if mibBuilder.loadTexts: mirrorDestGreEntry.setStatus('current')
mirrorDestGreSession = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorDestGreSession.setStatus('current')
mirrorDestGrePort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorDestGrePort.setStatus('current')
mirrorDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7, 1, 3), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorDestMacAddr.setStatus('current')
mirrorDestIP = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorDestIP.setStatus('current')
mirrorSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorSrcIP.setStatus('current')
mirrorDestGreStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorDestGreStatus.setStatus('current')
dhcpRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1))
dhcpRelayForwardUdpBootps = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noBootps", 0), ("bootps", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayForwardUdpBootps.setStatus('current')
dhcpRelayServerAddrTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 2), )
if mibBuilder.loadTexts: dhcpRelayServerAddrTable.setStatus('current')
dhcpRelayServerAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 2, 1), ).setIndexNames((0, "NAG-MIB", "dhcpRelayServerAddrVlanId"), (0, "NAG-MIB", "dhcpRelayServerAddrIndex"))
if mibBuilder.loadTexts: dhcpRelayServerAddrEntry.setStatus('current')
dhcpRelayServerAddrVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: dhcpRelayServerAddrVlanId.setStatus('current')
dhcpRelayServerAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: dhcpRelayServerAddrIndex.setStatus('current')
dhcpRelayServerAddrServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayServerAddrServerIp.setStatus('current')
dhcpRelayServerAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayServerAddrStatus.setStatus('current')
dhcpRelayOption82Enalbe = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noEnable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayOption82Enalbe.setStatus('current')
dhcpRelayInformationOptionRemoteIDFormat = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("vs-hp", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayInformationOptionRemoteIDFormat.setStatus('current')
dhcpRelayInformationOptionRemoteID = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayInformationOptionRemoteID.setStatus('current')
dhcpRelayInformationOptionSubscriberIDFormat = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("hex", 0), ("acsii", 1), ("vs-hp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayInformationOptionSubscriberIDFormat.setStatus('current')
dhcpServerRelayInformationEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noEnable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpServerRelayInformationEnable.setStatus('current')
dhcpRelayInformationOptionDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("colon", 0), ("dot", 1), ("slash", 2), ("space", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayInformationOptionDelimiter.setStatus('current')
dhcpRelayOptionSelfDefinedSubscriberIDFormat = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hex", 0), ("ascii", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayOptionSelfDefinedSubscriberIDFormat.setStatus('current')
dhcpRelayOptionSelfDefinedRemoteIDFormat = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hex", 0), ("ascii", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayOptionSelfDefinedRemoteIDFormat.setStatus('current')
dhcpRelayOptionSelfDefinedSubscriberID = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayOptionSelfDefinedSubscriberID.setStatus('current')
dhcpRelayOptionSelfDefinedRemoteID = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayOptionSelfDefinedRemoteID.setStatus('current')
dhcpRelayOption82InterfaceConfigureTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 13), )
if mibBuilder.loadTexts: dhcpRelayOption82InterfaceConfigureTable.setStatus('current')
dhcpRelayOption82InterfaceConfigureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 13, 1), ).setIndexNames((0, "NAG-MIB", "dhcpRelayOption82Vid"))
if mibBuilder.loadTexts: dhcpRelayOption82InterfaceConfigureEntry.setStatus('current')
dhcpRelayOption82Vid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 13, 1, 1), Integer32())
if mibBuilder.loadTexts: dhcpRelayOption82Vid.setStatus('current')
dhcpRelayOption82ForwardPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("keep", 2), ("replace", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayOption82ForwardPolicy.setStatus('current')
dhcpRelayOption82SubscriberID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayOption82SubscriberID.setStatus('current')
dhcpRelaySharevlanSubvlanConfigureTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 14), )
if mibBuilder.loadTexts: dhcpRelaySharevlanSubvlanConfigureTable.setStatus('current')
dhcpRelaySharevlanSubvlanConfigureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 14, 1), ).setIndexNames((0, "NAG-MIB", "dhcpRelaySharevlanSubvlanList"))
if mibBuilder.loadTexts: dhcpRelaySharevlanSubvlanConfigureEntry.setStatus('current')
dhcpRelaySharevlanSubvlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 14, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelaySharevlanSubvlanList.setStatus('current')
dhcpRelayNoSharevlan = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayNoSharevlan.setStatus('current')
dhcpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2))
dhcpServerServiceStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpServerServiceStatus.setStatus('current')
dhcploggingStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcploggingStatus.setStatus('current')
dhcpPool = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3))
dhcpPoolTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1), )
if mibBuilder.loadTexts: dhcpPoolTable.setStatus('current')
dhcpPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1), ).setIndexNames((0, "NAG-MIB", "dhcpPoolPoolName"))
if mibBuilder.loadTexts: dhcpPoolEntry.setStatus('current')
dhcpPoolPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: dhcpPoolPoolName.setStatus('current')
dhcpPoolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("active", 1), ("destroy", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolStatus.setStatus('current')
dhcpPoolAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("host", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolAddressType.setStatus('current')
dhcpPoolAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolAddress.setStatus('current')
dhcpPoolAddressPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolAddressPrefix.setStatus('current')
dhcpPoolAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("active", 1), ("destroy", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolAddressStatus.setStatus('current')
dhcpPoolMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolMacAddress.setStatus('current')
dhcpPoolProType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolProType.setStatus('current')
dhcpPoolMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("active", 1), ("destroy", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolMacStatus.setStatus('current')
dhcpPoolExpandTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2), )
if mibBuilder.loadTexts: dhcpPoolExpandTable.setStatus('current')
dhcpPoolExpandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2, 1), ).setIndexNames((0, "NAG-MIB", "dhcpPoolExpandName"))
if mibBuilder.loadTexts: dhcpPoolExpandEntry.setStatus('current')
dhcpPoolExpandName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: dhcpPoolExpandName.setStatus('current')
dhcpPoolNetbiosNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolNetbiosNodeType.setStatus('current')
dhcpPoolDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDomainName.setStatus('current')
dhcpPoolBootFile = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolBootFile.setStatus('current')
dhcpPoolCLid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolCLid.setStatus('current')
dhcpPoolExpandstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("valid", 0), ("destroy", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolExpandstatus.setStatus('current')
dhcpLeaseTimeTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4), )
if mibBuilder.loadTexts: dhcpLeaseTimeTable.setStatus('current')
dhcpLeaseTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4, 1), ).setIndexNames((0, "NAG-MIB", "dhcpLeaseTimePoolName"))
if mibBuilder.loadTexts: dhcpLeaseTimeEntry.setStatus('current')
dhcpLeaseTimePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: dhcpLeaseTimePoolName.setStatus('current')
dhcpLeaseTimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("temp", 0), ("infinite", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpLeaseTimeType.setStatus('current')
dhcpLeaseTimeDay = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpLeaseTimeDay.setStatus('current')
dhcpLeaseTimeHours = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpLeaseTimeHours.setStatus('current')
dhcpLeaseTimeMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpLeaseTimeMinutes.setStatus('current')
dhcpLeaseTimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpLeaseTimeStatus.setStatus('current')
dhcpPoolOptionTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5), )
if mibBuilder.loadTexts: dhcpPoolOptionTable.setStatus('current')
dhcpPoolOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5, 1), ).setIndexNames((0, "NAG-MIB", "dhcpPoolOptionName"), (0, "NAG-MIB", "dhcpPoolOptionIndex"))
if mibBuilder.loadTexts: dhcpPoolOptionEntry.setStatus('current')
dhcpPoolOptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: dhcpPoolOptionName.setStatus('current')
dhcpPoolOptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: dhcpPoolOptionIndex.setStatus('current')
dhcpPoolOptionId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolOptionId.setStatus('current')
dhcpPoolOptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2), ("ipaddress", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolOptionType.setStatus('current')
dhcpPoolOption = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolOption.setStatus('current')
dhcpPoolOptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolOptionStatus.setStatus('current')
dhcpServerExcludedIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 6), )
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrTable.setStatus('current')
dhcpServerExcludedIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 6, 1), ).setIndexNames((0, "NAG-MIB", "dhcpServerExcludedIpAddrLowIp"), (0, "NAG-MIB", "dhcpServerExcludedIpAddrHiIp"))
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrEntry.setStatus('current')
dhcpServerExcludedIpAddrLowIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrLowIp.setStatus('current')
dhcpServerExcludedIpAddrHiIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrHiIp.setStatus('current')
dhcpServerExcludedIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrStatus.setStatus('current')
dhcpPoolDnsSerTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8), )
if mibBuilder.loadTexts: dhcpPoolDnsSerTable.setStatus('current')
dhcpPoolDnsSerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1), ).setIndexNames((0, "NAG-MIB", "dhcpPoolDnsSerPoolName"))
if mibBuilder.loadTexts: dhcpPoolDnsSerEntry.setStatus('current')
dhcpPoolDnsSerPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPoolDnsSerPoolName.setStatus('current')
dhcpPoolDnsSerIpAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress1.setStatus('current')
dhcpPoolDnsSerIpAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress2.setStatus('current')
dhcpPoolDnsSerIpAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress3.setStatus('current')
dhcpPoolDnsSerIpAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress4.setStatus('current')
dhcpPoolDnsSerIpAddress5 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress5.setStatus('current')
dhcpPoolDnsSerIpAddress6 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress6.setStatus('current')
dhcpPoolDnsSerIpAddress7 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress7.setStatus('current')
dhcpPoolDnsSerIpAddress8 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDnsSerIpAddress8.setStatus('current')
dhcpPoolDnsSerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDnsSerStatus.setStatus('current')
dhcpPoolDefaultRouterTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9), )
if mibBuilder.loadTexts: dhcpPoolDefaultRouterTable.setStatus('current')
dhcpPoolDefaultRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1), ).setIndexNames((0, "NAG-MIB", "dhcpPoolDnsSerPoolName"))
if mibBuilder.loadTexts: dhcpPoolDefaultRouterEntry.setStatus('current')
dhcpPoolDefaultRouterPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPoolDefaultRouterPoolName.setStatus('current')
dhcpPoolDefaultRouterIpAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress1.setStatus('current')
dhcpPoolDefaultRouterIpAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress2.setStatus('current')
dhcpPoolDefaultRouterIpAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress3.setStatus('current')
dhcpPoolDefaultRouterIpAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress4.setStatus('current')
dhcpPoolDefaultRouterIpAddress5 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress5.setStatus('current')
dhcpPoolDefaultRouterIpAddress6 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress6.setStatus('current')
dhcpPoolDefaultRouterIpAddress7 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress7.setStatus('current')
dhcpPoolDefaultRouterIpAddress8 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDefaultRouterIpAddress8.setStatus('current')
dhcpPoolDefaultRouterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDefaultRouterStatus.setStatus('current')
dhcpPoolNextServerTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10), )
if mibBuilder.loadTexts: dhcpPoolNextServerTable.setStatus('current')
dhcpPoolNextServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1), ).setIndexNames((0, "NAG-MIB", "dhcpPoolNextServerPoolName"))
if mibBuilder.loadTexts: dhcpPoolNextServerEntry.setStatus('current')
dhcpPoolNextServerPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPoolNextServerPoolName.setStatus('current')
dhcpPoolNextServerIpAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress1.setStatus('current')
dhcpPoolNextServerIpAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress2.setStatus('current')
dhcpPoolNextServerIpAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress3.setStatus('current')
dhcpPoolNextServerIpAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress4.setStatus('current')
dhcpPoolNextServerIpAddress5 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress5.setStatus('current')
dhcpPoolNextServerIpAddress6 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress6.setStatus('current')
dhcpPoolNextServerIpAddress7 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress7.setStatus('current')
dhcpPoolNextServerIpAddress8 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolNextServerIpAddress8.setStatus('current')
dhcpPoolNextServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolNextServerStatus.setStatus('current')
dhcpPoolWinsTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11), )
if mibBuilder.loadTexts: dhcpPoolWinsTable.setStatus('current')
dhcpPoolWinsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1), ).setIndexNames((0, "NAG-MIB", "dhcpPoolDnsSerPoolName"))
if mibBuilder.loadTexts: dhcpPoolWinsEntry.setStatus('current')
dhcpPoolWinsPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPoolWinsPoolName.setStatus('current')
dhcpPoolWinsIpAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress1.setStatus('current')
dhcpPoolWinsIpAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress2.setStatus('current')
dhcpPoolWinsIpAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress3.setStatus('current')
dhcpPoolWinsIpAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress4.setStatus('current')
dhcpPoolWinsIpAddress5 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress5.setStatus('current')
dhcpPoolWinsIpAddress6 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress6.setStatus('current')
dhcpPoolWinsIpAddress7 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress7.setStatus('current')
dhcpPoolWinsIpAddress8 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolWinsIpAddress8.setStatus('current')
dhcpPoolWinsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolWinsStatus.setStatus('current')
dhcpServerLeaseBindingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 12), )
if mibBuilder.loadTexts: dhcpServerLeaseBindingTable.setStatus('current')
dhcpServerLeaseBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 12, 1), ).setIndexNames((0, "NAG-MIB", "dhcpServerLeaseBindingIp"), (0, "NAG-MIB", "dhcpServerLeaseBindingType"))
if mibBuilder.loadTexts: dhcpServerLeaseBindingEntry.setStatus('current')
dhcpServerLeaseBindingIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 12, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseBindingIp.setStatus('current')
dhcpServerLeaseBindingType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseBindingType.setStatus('current')
dhcpServerLeaseBindingMac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseBindingMac.setStatus('current')
dhcpServerLeaseBindingLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseBindingLeaseTime.setStatus('current')
dhcpSnooping = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3))
dhcpSnoopingEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noEnable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingEnable.setStatus('current')
dhcpSnoopingBindingEnalbe = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noEnable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBindingEnalbe.setStatus('current')
dhcpSnoopingVlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingVlanEnable.setStatus('current')
dhcpSnoopingInformationEnalbe = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noEnable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingInformationEnalbe.setStatus('current')
dhcpSnoopingLimitRate = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingLimitRate.setStatus('current')
dhcpSnoopingActionMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingActionMaxNum.setStatus('current')
dhcpSnoopingbindingARP = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notBindingARP", 0), ("bindingARP", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingbindingARP.setStatus('current')
dhcpSnoopingInformationOptionDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("colon", 0), ("dot", 1), ("slash", 2), ("space", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingInformationOptionDelimiter.setStatus('current')
dhcpSnoopingInformationOptionSubscriberIDFormat = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("hex", 0), ("acsii", 1), ("vs-hp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingInformationOptionSubscriberIDFormat.setStatus('current')
dhcpSnoopingInformationOptionRemoteID = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingInformationOptionRemoteID.setStatus('current')
dhcpSnoopingInformationOptionAllowUntrusted = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAllowUntrusted", 0), ("allowUntrusted", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingInformationOptionAllowUntrusted.setStatus('current')
dhcpSnoopingOptionSelfDefinedSubscriberIDFormat = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hex", 0), ("ascii", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOptionSelfDefinedSubscriberIDFormat.setStatus('current')
dhcpSnoopingOptionSelfDefinedRemoteIDFormat = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hex", 0), ("ascii", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOptionSelfDefinedRemoteIDFormat.setStatus('current')
dhcpSnoopingOptionSelfDefinedSubscriberID = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOptionSelfDefinedSubscriberID.setStatus('current')
dhcpSnoopingOptionSelfDefinedRemoteID = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOptionSelfDefinedRemoteID.setStatus('current')
dhcpSnoopingClearBinding = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingClearBinding.setStatus('current')
dhcpSnoopingPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17), )
if mibBuilder.loadTexts: dhcpSnoopingPortConfigTable.setStatus('current')
dhcpSnoopingPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1), ).setIndexNames((0, "NAG-MIB", "dhcpSnoopingPortIndex"))
if mibBuilder.loadTexts: dhcpSnoopingPortConfigEntry.setStatus('current')
dhcpSnoopingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 1), Integer32())
if mibBuilder.loadTexts: dhcpSnoopingPortIndex.setStatus('current')
dhcpSnoopingUserControlMaxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingUserControlMaxNum.setStatus('current')
dhcpSnoopingUserControl = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notEnable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingUserControl.setStatus('current')
dhcpSnoopingTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingTrust.setStatus('current')
dhcpSnoopingBindingDot1x = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notEnable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBindingDot1x.setStatus('current')
dhcpSnoopingSubScriberID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingSubScriberID.setStatus('current')
dhcpSnoopingAlarmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingAlarmCount.setStatus('current')
dhcpSnoopingBindingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingBindingCount.setStatus('current')
dhcpSnoopingPortActionTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 18), )
if mibBuilder.loadTexts: dhcpSnoopingPortActionTable.setStatus('current')
dhcpSnoopingPortActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 18, 1), ).setIndexNames((0, "NAG-MIB", "dhcpSnoopingPortIndex"))
if mibBuilder.loadTexts: dhcpSnoopingPortActionEntry.setStatus('current')
dhcpSnoopingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 18, 1, 1), Integer32())
if mibBuilder.loadTexts: dhcpSnoopingPort.setStatus('current')
dhcpSnoopingActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAction", 0), ("shutdown", 1), ("blackhole", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingActionType.setStatus('current')
dhcpSnoopingActionRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingActionRecoveryTime.setStatus('current')
dhcpSnoopingActionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("destroy", 0), ("active", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingActionStatus.setStatus('current')
dhcpSnoopingStaticBindingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19), )
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingTable.setStatus('current')
dhcpSnoopingStaticBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19, 1), ).setIndexNames((0, "NAG-MIB", "dhcpSnoopingStaticBindingIP"))
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingEntry.setStatus('current')
dhcpSnoopingStaticBindingIP = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19, 1, 1), IpAddress())
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingIP.setStatus('current')
dhcpSnoopingStaticBindingMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingMAC.setStatus('current')
dhcpSnoopingStaticBindingMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingMask.setStatus('current')
dhcpSnoopingStaticBindingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingPort.setStatus('current')
dhcpSnoopingStaticBindingVid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingVid.setStatus('current')
dhcpSnoopingStaticBindingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("destory", 0), ("active", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingStaticBindingStatus.setStatus('current')
dhcpSnoopingAckBindingInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20), )
if mibBuilder.loadTexts: dhcpSnoopingAckBindingInfoTable.setStatus('current')
dhcpSnoopingAckBindingInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20, 1), ).setIndexNames((0, "NAG-MIB", "dhcpSnoopingAckBindingIP"))
if mibBuilder.loadTexts: dhcpSnoopingAckBindingInfoEntry.setStatus('current')
dhcpSnoopingAckBindingIP = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20, 1, 1), IpAddress())
if mibBuilder.loadTexts: dhcpSnoopingAckBindingIP.setStatus('current')
dhcpSnoopingAckBindingMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingAckBindingMAC.setStatus('current')
dhcpSnoopingAckBindingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingAckBindingPort.setStatus('current')
dhcpSnoopingAckBindingVid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingAckBindingVid.setStatus('current')
dhcpSnoopingAckBindingLease = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingAckBindingLease.setStatus('current')
dhcpSnoopingAckBindingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingAckBindingFlag.setStatus('current')
dhcpSnoopingRequestBindingInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 21), )
if mibBuilder.loadTexts: dhcpSnoopingRequestBindingInfoTable.setStatus('current')
dhcpSnoopingRequestBindingInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 21, 1), ).setIndexNames((0, "NAG-MIB", "dhcpSnoopingRequestBindingIP"))
if mibBuilder.loadTexts: dhcpSnoopingRequestBindingInfoEntry.setStatus('current')
dhcpSnoopingRequestBindingIP = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 21, 1, 1), IpAddress())
if mibBuilder.loadTexts: dhcpSnoopingRequestBindingIP.setStatus('current')
dhcpSnoopingRequestBindingMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 21, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingRequestBindingMAC.setStatus('current')
dhcpSnoopingRequestBindingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingRequestBindingPort.setStatus('current')
dhcpSnoopingRequestBindingVid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingRequestBindingVid.setStatus('current')
dhcpSnoopingRequestBindingLease = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 21, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingRequestBindingLease.setStatus('current')
dhcpSnoopingAlarmInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22), )
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoTable.setStatus('current')
dhcpSnoopingAlarmInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22, 1), ).setIndexNames((0, "NAG-MIB", "dhcpSnoopingAlarmInfoPortIndex"), (0, "NAG-MIB", "dhcpSnoopingAlarmInfoNum"))
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoEntry.setStatus('current')
dhcpSnoopingAlarmInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22, 1, 1), Integer32())
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoPortIndex.setStatus('current')
dhcpSnoopingAlarmInfoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22, 1, 2), Integer32())
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoNum.setStatus('current')
dhcpSnoopingAlarmInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoType.setStatus('current')
dhcpSnoopingAlarmInfoBlackholeMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoBlackholeMAC.setStatus('current')
dhcpSnoopingAlarmInfoRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoRecoveryTime.setStatus('current')
dhcpSnoopingAlarmInfoRecoveryActionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingAlarmInfoRecoveryActionStatus.setStatus('current')
dhcpSnoopingStatisticTable = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 23))
dhcpSnoopingStatisticAlarmNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingStatisticAlarmNum.setStatus('current')
dhcpSnoopingStatisticAckBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 23, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingStatisticAckBindingNum.setStatus('current')
dhcpSnoopingStatisticRequestBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 23, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingStatisticRequestBindingNum.setStatus('current')
dhcpSnoopingStatisticDropPktsNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 23, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingStatisticDropPktsNum.setStatus('current')
dhcpSnoopingStatisticDiscardPktsNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 23, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingStatisticDiscardPktsNum.setStatus('current')
dhcpSnoopingBlockedInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 24), )
if mibBuilder.loadTexts: dhcpSnoopingBlockedInfoTable.setStatus('current')
dhcpSnoopingBlockedInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 24, 1), ).setIndexNames((0, "NAG-MIB", "dhcpSnoopingBlockedInfoPortIndex"), (0, "NAG-MIB", "dhcpSnoopingBlockedInfoRecordingTime"))
if mibBuilder.loadTexts: dhcpSnoopingBlockedInfoEntry.setStatus('current')
dhcpSnoopingBlockedInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 24, 1, 1), Integer32())
if mibBuilder.loadTexts: dhcpSnoopingBlockedInfoPortIndex.setStatus('current')
dhcpSnoopingBlockedInfoRecordingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 24, 1, 2), Integer32())
if mibBuilder.loadTexts: dhcpSnoopingBlockedInfoRecordingTime.setStatus('current')
dhcpSnoopingBlockedInfoShow = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 24, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingBlockedInfoShow.setStatus('current')
systemPriority = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemPriority.setStatus('current')
portGroupTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 2), )
if mibBuilder.loadTexts: portGroupTable.setStatus('current')
portGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 2, 1), ).setIndexNames((0, "NAG-MIB", "portGroupIndex"))
if mibBuilder.loadTexts: portGroupEntry.setStatus('current')
portGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: portGroupIndex.setStatus('current')
portGroupMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupMemberCount.setStatus('current')
loadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16))).clone(namedValues=NamedValues(("dst-src-mac", 1), ("dst-src-ip", 2), ("src-mac", 3), ("dst-mac", 4), ("src-ip", 5), ("dst-ip", 6), ("dst-src-mac-ip", 7), ("enhance-profile", 8), ("dst-src-mac-vlan", 9), ("dst-src-ip-port", 10), ("dst-src-mac-ip-port", 13), ("dst-src-mac-vlan-normal", 14), ("dst-src-ip-port-normal", 15), ("dst-src-mac-ip-port-normal", 16)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: loadBalance.setStatus('current')
portGroupInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupInfo.setStatus('current')
portGroupPortListTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3), )
if mibBuilder.loadTexts: portGroupPortListTable.setStatus('current')
portGroupPortListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3, 1), ).setIndexNames((0, "NAG-MIB", "portGroupIndex"), (0, "NAG-MIB", "portGroupMemberIndex"))
if mibBuilder.loadTexts: portGroupPortListEntry.setStatus('current')
portGroupMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: portGroupMemberIndex.setStatus('current')
portGroupMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupMemberName.setStatus('current')
portGroupMemberMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("active", 2), ("passive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupMemberMode.setStatus('current')
portGroupMemberPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portGroupMemberPriority.setStatus('current')
portGroupMemberTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("long", 0), ("short", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupMemberTimeout.setStatus('current')
portGroupMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unselected", 0), ("selected", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupMemberStatus.setStatus('current')
snmpSecurityIpStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpSecurityIpStatus.setStatus('current')
snmpTrapHostStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapHostStatus.setStatus('current')
snmpRmonStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpRmonStatus.setStatus('current')
securityIpTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 4), )
if mibBuilder.loadTexts: securityIpTable.setStatus('current')
securityIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 4, 1), ).setIndexNames((0, "NAG-MIB", "securityIpIndex"))
if mibBuilder.loadTexts: securityIpEntry.setStatus('current')
securityIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: securityIpIndex.setStatus('current')
securityIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 4, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: securityIpAddress.setStatus('current')
securityIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: securityIpStatus.setStatus('current')
trapDestTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 5), )
if mibBuilder.loadTexts: trapDestTable.setStatus('current')
trapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 5, 1), ).setIndexNames((0, "NAG-MIB", "trapDestIndex"))
if mibBuilder.loadTexts: trapDestEntry.setStatus('current')
trapDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: trapDestIndex.setStatus('current')
trapDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 5, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestAddress.setStatus('current')
trapDestVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("version1", 0), ("version2", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestVersion.setStatus('current')
trapDestCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestCommunity.setStatus('current')
trapDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestStatus.setStatus('current')
arpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1))
routeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2))
arpCacheDeleteAll = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("delete", 1), ("noDelete", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpCacheDeleteAll.setStatus('current')
arpCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpCacheTimeout.setStatus('current')
arpSecurityUpdateProtectALL = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpSecurityUpdateProtectALL.setStatus('current')
arpSecurityLearnProtectALL = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpSecurityLearnProtectALL.setStatus('current')
arpSecurityConvertALL = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpSecurityConvertALL.setStatus('current')
arpSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 6), )
if mibBuilder.loadTexts: arpSecurityTable.setStatus('current')
arpsecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 6, 1), ).setIndexNames((0, "NAG-MIB", "arpSecurityIfindex"))
if mibBuilder.loadTexts: arpsecurityEntry.setStatus('current')
arpSecurityIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: arpSecurityIfindex.setStatus('current')
arpSecurityUpdateProtect = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpSecurityUpdateProtect.setStatus('current')
arpSecurityLearnProtect = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpSecurityLearnProtect.setStatus('current')
arpSecurityConvert = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpSecurityConvert.setStatus('current')
arpProxyArpTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 7), )
if mibBuilder.loadTexts: arpProxyArpTable.setStatus('current')
arpProxyArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 7, 1), ).setIndexNames((0, "NAG-MIB", "arpProxyArpIfIndex"))
if mibBuilder.loadTexts: arpProxyArpEntry.setStatus('current')
arpProxyArpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: arpProxyArpIfIndex.setStatus('current')
arpProxyArpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpProxyArpStatus.setStatus('current')
arpStacticTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 8), )
if mibBuilder.loadTexts: arpStacticTable.setStatus('current')
arpStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 8, 1), ).setIndexNames((0, "NAG-MIB", "arpProxyArpIfIndex"), (0, "NAG-MIB", "arpStaticIpaddress"))
if mibBuilder.loadTexts: arpStaticEntry.setStatus('current')
arpStaticIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: arpStaticIfindex.setStatus('current')
arpStaticIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 8, 1, 2), IpAddress())
if mibBuilder.loadTexts: arpStaticIpaddress.setStatus('current')
arpStaticMac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 8, 1, 3), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpStaticMac.setStatus('current')
arpStaticPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 8, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpStaticPortIndex.setStatus('current')
arpStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("waitingforset", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpStaticStatus.setStatus('current')
ipStaticRouteExtTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2, 1), )
if mibBuilder.loadTexts: ipStaticRouteExtTable.setStatus('current')
ipStaticRouteExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2, 1, 1), ).setIndexNames((0, "NAG-MIB", "ipStaticRouteExtDest"), (0, "NAG-MIB", "ipStaticRouteExtMask"))
if mibBuilder.loadTexts: ipStaticRouteExtEntry.setStatus('current')
ipStaticRouteExtDest = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipStaticRouteExtDest.setStatus('current')
ipStaticRouteExtMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: ipStaticRouteExtMask.setStatus('current')
ipStaticRouteExtNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipStaticRouteExtNextHop.setStatus('current')
ipStaticRouteExtMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipStaticRouteExtMetric.setStatus('current')
ipStaticRouteExtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("waitingforset", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipStaticRouteExtStatus.setStatus('current')
dvmrpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5))
dvmrpScalar = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 1))
dvmrpVersionString = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpVersionString.setStatus('current')
dvmrpNumRoutes = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNumRoutes.setStatus('current')
dvmrpReachableRoutes = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpReachableRoutes.setStatus('current')
dvmrpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2), )
if mibBuilder.loadTexts: dvmrpInterfaceTable.setStatus('current')
dvmrpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1), ).setIndexNames((0, "NAG-MIB", "dvmrpInterfaceIndex"))
if mibBuilder.loadTexts: dvmrpInterfaceEntry.setStatus('current')
dvmrpInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceIndex.setStatus('current')
dvmrpInterfaceLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceLocalAddress.setStatus('current')
dvmrpInterfaceMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dvmrpInterfaceMetric.setStatus('current')
dvmrpInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dvmrpInterfaceStatus.setStatus('current')
dvmrpInterfaceRcvBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceRcvBadPkts.setStatus('current')
dvmrpInterfaceRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceRcvBadRoutes.setStatus('current')
dvmrpInterfaceSentRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceSentRoutes.setStatus('current')
dvmrpInterfaceKey = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceKey.setStatus('current')
dvmrpInterfaceKeyVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceKeyVersion.setStatus('current')
dvmrpInterfaceGenerationId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceGenerationId.setStatus('current')
dvmrpNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3), )
if mibBuilder.loadTexts: dvmrpNeighborTable.setStatus('current')
dvmrpNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1), ).setIndexNames((0, "NAG-MIB", "dvmrpNeighborIfIndex"), (0, "NAG-MIB", "dvmrpNeighborAddress"))
if mibBuilder.loadTexts: dvmrpNeighborEntry.setStatus('current')
dvmrpNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborIfIndex.setStatus('current')
dvmrpNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborAddress.setStatus('current')
dvmrpNeighborUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborUpTime.setStatus('current')
dvmrpNeighborExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborExpiryTime.setStatus('current')
dvmrpNeighborGenerationId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborGenerationId.setStatus('current')
dvmrpNeighborMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborMajorVersion.setStatus('current')
dvmrpNeighborMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborMinorVersion.setStatus('current')
dvmrpNeighborCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 8), Bits().clone(namedValues=NamedValues(("leaf", 0), ("prune", 1), ("generationID", 2), ("mtrace", 3), ("snmp", 4), ("netmask", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborCapabilities.setStatus('current')
dvmrpNeighborRcvRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborRcvRoutes.setStatus('current')
dvmrpNeighborRcvBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborRcvBadPkts.setStatus('current')
dvmrpNeighborRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborRcvBadRoutes.setStatus('current')
dvmrpNeighborState = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oneway", 1), ("active", 2), ("ignoring", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborState.setStatus('current')
dvmrpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4), )
if mibBuilder.loadTexts: dvmrpRouteTable.setStatus('current')
dvmrpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1), ).setIndexNames((0, "NAG-MIB", "dvmrpRouteSource"), (0, "NAG-MIB", "dvmrpRouteSourceMask"))
if mibBuilder.loadTexts: dvmrpRouteEntry.setStatus('current')
dvmrpRouteSource = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteSource.setStatus('current')
dvmrpRouteSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteSourceMask.setStatus('current')
dvmrpRouteUpstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteUpstreamNeighbor.setStatus('current')
dvmrpRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteIfIndex.setStatus('current')
dvmrpRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteMetric.setStatus('current')
dvmrpRouteExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteExpiryTime.setStatus('current')
dvmrpRouteUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteUpTime.setStatus('current')
dvmrpRouteNextHopTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 5), )
if mibBuilder.loadTexts: dvmrpRouteNextHopTable.setStatus('current')
dvmrpRouteNextHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 5, 1), ).setIndexNames((0, "NAG-MIB", "dvmrpRouteNextHopSource"), (0, "NAG-MIB", "dvmrpRouteNextHopSourceMask"), (0, "NAG-MIB", "dvmrpRouteNextHopIfIndex"))
if mibBuilder.loadTexts: dvmrpRouteNextHopEntry.setStatus('current')
dvmrpRouteNextHopSource = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteNextHopSource.setStatus('current')
dvmrpRouteNextHopSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteNextHopSourceMask.setStatus('current')
dvmrpRouteNextHopIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 5, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteNextHopIfIndex.setStatus('current')
dvmrpRouteNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leaf", 1), ("branch", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteNextHopType.setStatus('current')
dvmrpPruneTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 6), )
if mibBuilder.loadTexts: dvmrpPruneTable.setStatus('current')
dvmrpPruneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 6, 1), ).setIndexNames((0, "NAG-MIB", "dvmrpPruneGroup"), (0, "NAG-MIB", "dvmrpPruneSource"), (0, "NAG-MIB", "dvmrpPruneSourceMask"))
if mibBuilder.loadTexts: dvmrpPruneEntry.setStatus('current')
dvmrpPruneGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpPruneGroup.setStatus('current')
dvmrpPruneSource = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpPruneSource.setStatus('current')
dvmrpPruneSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpPruneSourceMask.setStatus('current')
dvmrpPruneExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 6, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpPruneExpiryTime.setStatus('current')
ripMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3))
ospfMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4))
ripTimers = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 1))
ripUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 2147483647)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripUpdateTime.setStatus('current')
ripTimeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 2147483647)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripTimeoutTime.setStatus('current')
ripGarbageCollectionTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 2147483647)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripGarbageCollectionTime.setStatus('current')
ripRoutingProcessStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 2), EnabledStatusPrivate().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripRoutingProcessStatus.setStatus('current')
ripRouterVersion = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rip1", 1), ("rip2", 2))).clone('rip2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripRouterVersion.setStatus('current')
ripInstabilityPreventingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 4), )
if mibBuilder.loadTexts: ripInstabilityPreventingTable.setStatus('current')
ripInstabilityPreventingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 4, 1), ).setIndexNames((0, "NAG-MIB", "ripVlanIndex"))
if mibBuilder.loadTexts: ripInstabilityPreventingEntry.setStatus('current')
ripVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripVlanIndex.setStatus('current')
ripSplitHorizonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 0, 1))).clone(namedValues=NamedValues(("splitHorizon", 2), ("poisonReverse", 0), ("none", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripSplitHorizonStatus.setStatus('current')
ripStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noReset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripStatisticsReset.setStatus('current')
ripNetworkInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 6), )
if mibBuilder.loadTexts: ripNetworkInterfaceTable.setStatus('current')
ripNetworkInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 6, 1), ).setIndexNames((0, "NAG-MIB", "ripNetworkInterfaceAddress"))
if mibBuilder.loadTexts: ripNetworkInterfaceEntry.setStatus('current')
ripNetworkInterfaceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNetworkInterfaceAddress.setStatus('current')
ripNetworkInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 6, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNetworkInterfaceStatus.setStatus('current')
ripNetworkAddrTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 7), )
if mibBuilder.loadTexts: ripNetworkAddrTable.setStatus('current')
ripNetworkAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 7, 1), ).setIndexNames((0, "NAG-MIB", "ripNetworkAddrAddress"), (0, "NAG-MIB", "ripNetworkAddrPrefixLen"))
if mibBuilder.loadTexts: ripNetworkAddrEntry.setStatus('current')
ripNetworkAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNetworkAddrAddress.setStatus('current')
ripNetworkAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNetworkAddrPrefixLen.setStatus('current')
ripNetworkAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNetworkAddrStatus.setStatus('current')
ospfSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1))
ospfRouterIdType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2))).clone('auto')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRouterIdType.setStatus('current')
ospfRfc1583CompatibleState = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 2), EnabledStatusPrivate().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfRfc1583CompatibleState.setStatus('current')
ospfAutoCost = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfAutoCost.setStatus('current')
ospfAdvertiseDefaultRoute = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("always", 1), ("notAlways", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfAdvertiseDefaultRoute.setStatus('current')
ospfDefaultExternalMetric = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 5), OspfBigMetric()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfDefaultExternalMetric.setStatus('current')
ospfSpfHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfSpfHoldTime.setStatus('current')
ospfSpfDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfSpfDelayTime.setStatus('current')
ospfAreaNumber = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNumber.setStatus('current')
clearOspfProcess = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearOspfProcess.setStatus('current')
ospfNssaTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 2), )
if mibBuilder.loadTexts: ospfNssaTable.setStatus('current')
ospfNssaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 2, 1), ).setIndexNames((0, "NAG-MIB", "ospfNssaAreaId"))
if mibBuilder.loadTexts: ospfNssaEntry.setStatus('current')
ospfNssaAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 2, 1, 1), OspfAreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNssaAreaId.setStatus('current')
ospfNssaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 2, 1, 2), EnabledStatusPrivate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNssaStatus.setStatus('current')
ospfNssaRedistributeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 2, 1, 3), EnabledStatusPrivate().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNssaRedistributeStatus.setStatus('current')
ospfNssaOriginateDefaultInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 2, 1, 4), EnabledStatusPrivate().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNssaOriginateDefaultInfoStatus.setStatus('current')
ospfRedistributeTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 3), )
if mibBuilder.loadTexts: ospfRedistributeTable.setStatus('current')
ospfRedistributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 3, 1), ).setIndexNames((0, "NAG-MIB", "ospfRedistributeProtocol"))
if mibBuilder.loadTexts: ospfRedistributeEntry.setStatus('current')
ospfRedistributeProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 8, 9))).clone(namedValues=NamedValues(("kernel", 1), ("connect", 2), ("static", 3), ("rip", 4), ("ospf", 6), ("bgp", 8), ("isis", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRedistributeProtocol.setStatus('current')
ospfRedistributeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 3, 1, 2), EnabledStatusPrivate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRedistributeStatus.setStatus('current')
ospfRedistributeMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2))).clone('type2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRedistributeMetricType.setStatus('current')
ospfRedistributeMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 3, 1, 4), OspfBigMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRedistributeMetric.setStatus('current')
ospfSummaryAddressTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 4), )
if mibBuilder.loadTexts: ospfSummaryAddressTable.setStatus('current')
ospfSummaryAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 4, 1), ).setIndexNames((0, "NAG-MIB", "ospfSummaryAddress"), (0, "NAG-MIB", "ospfSummaryMask"))
if mibBuilder.loadTexts: ospfSummaryAddressEntry.setStatus('current')
ospfSummaryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfSummaryAddress.setStatus('current')
ospfSummaryMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfSummaryMask.setStatus('current')
ospfSummaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 4, 1, 3), EnabledStatusPrivate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfSummaryStatus.setStatus('current')
ospfNetworkAreaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 5), )
if mibBuilder.loadTexts: ospfNetworkAreaAddressTable.setStatus('current')
ospfNetworkAreaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 5, 1), ).setIndexNames((0, "NAG-MIB", "ospfNetworkAareaAddress"), (0, "NAG-MIB", "ospfNetworkAreaMask"), (0, "NAG-MIB", "ospfNetworkAreaAreaId"))
if mibBuilder.loadTexts: ospfNetworkAreaAddressEntry.setStatus('current')
ospfNetworkAareaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNetworkAareaAddress.setStatus('current')
ospfNetworkAreaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNetworkAreaMask.setStatus('current')
ospfNetworkAreaAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNetworkAreaAreaId.setStatus('current')
ospfNetworkAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 5, 1, 4), EnabledStatusPrivate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNetworkAreaStatus.setStatus('current')
sntpPollTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 16284))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpPollTime.setStatus('current')
sntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 2), )
if mibBuilder.loadTexts: sntpServerTable.setStatus('current')
sntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 2, 1), ).setIndexNames((0, "NAG-MIB", "sntpServerVersion"), (0, "NAG-MIB", "sntpServerAddress"))
if mibBuilder.loadTexts: sntpServerEntry.setStatus('current')
sntpServerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpServerVersion.setStatus('current')
sntpServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpServerAddress.setStatus('current')
sntpServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sntpServerStatus.setStatus('current')
sntpServer6Table = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 3), )
if mibBuilder.loadTexts: sntpServer6Table.setStatus('current')
sntpServer6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 3, 1), ).setIndexNames((0, "NAG-MIB", "sntpServer6Version"), (0, "NAG-MIB", "sntpServer6Address"))
if mibBuilder.loadTexts: sntpServer6Entry.setStatus('current')
sntpServer6Version = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpServer6Version.setStatus('current')
sntpServer6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 3, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpServer6Address.setStatus('current')
sntpServer6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sntpServer6Status.setStatus('current')
sntpTimeZone = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 4))
sntpTimeZoneName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpTimeZoneName.setStatus('current')
sntpTimeZoneType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("add", 1), ("subtract", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpTimeZoneType.setStatus('current')
sntpTimeZoneTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpTimeZoneTime.setStatus('current')
sntpTimeZoneStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpTimeZoneStatus.setStatus('current')
urpfEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: urpfEnable.setStatus('current')
urpfPortTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 18, 2), )
if mibBuilder.loadTexts: urpfPortTable.setStatus('current')
urpfPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 18, 2, 1), ).setIndexNames((0, "NAG-MIB", "urpfPortIndex"))
if mibBuilder.loadTexts: urpfPortEntry.setStatus('current')
urpfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urpfPortIndex.setStatus('current')
urpfPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("loose", 1), ("strict", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: urpfPortMode.setStatus('current')
urpfPortAllowDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("allowdefaultroute", 1), ("noallowdefaultroute", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: urpfPortAllowDefault.setStatus('current')
urpfPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 18, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: urpfPortStatus.setStatus('current')
dcscmdcEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmdcEnable.setStatus('current')
dcscmdcAclTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2), )
if mibBuilder.loadTexts: dcscmdcAclTable.setStatus('current')
dcscmdcAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1), ).setIndexNames((0, "NAG-MIB", "dcscmdcAclNumber"), (0, "NAG-MIB", "dcscmdcAclSubNumber"))
if mibBuilder.loadTexts: dcscmdcAclEntry.setStatus('current')
dcscmdcAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6000, 7999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcscmdcAclNumber.setStatus('current')
dcscmdcAclSubNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcscmdcAclSubNumber.setStatus('current')
dcscmdcAclSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcscmdcAclSourceIp.setStatus('current')
dcscmdcAclSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcscmdcAclSourceMask.setStatus('current')
dcscmdcAclDestinationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcscmdcAclDestinationIp.setStatus('current')
dcscmdcAclDestinationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcscmdcAclDestinationMask.setStatus('current')
dcscmdcAclPermitOrDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 0), ("deltheAcl", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmdcAclPermitOrDeny.setStatus('current')
dcscmVMacbindingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 3), )
if mibBuilder.loadTexts: dcscmVMacbindingTable.setStatus('current')
dcscmVMacbindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 3, 1), ).setIndexNames((0, "NAG-MIB", "dcscmVMacbindingVlanid"), (0, "NAG-MIB", "dcscmVMacbindingMacAddr"))
if mibBuilder.loadTexts: dcscmVMacbindingEntry.setStatus('current')
dcscmVMacbindingVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscmVMacbindingVlanid.setStatus('current')
dcscmVMacbindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 3, 1, 2), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscmVMacbindingMacAddr.setStatus('current')
dcscmVMacbindingAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(6000, 7999), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmVMacbindingAclNumber.setStatus('current')
dcscmSipbindingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 4), )
if mibBuilder.loadTexts: dcscmSipbindingTable.setStatus('current')
dcscmSipbindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 4, 1), ).setIndexNames((0, "NAG-MIB", "dcscmSipbindingSipAddress"), (0, "NAG-MIB", "dcscmSipbindingSipMask"))
if mibBuilder.loadTexts: dcscmSipbindingEntry.setStatus('current')
dcscmSipbindingSipAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscmSipbindingSipAddress.setStatus('current')
dcscmSipbindingSipMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscmSipbindingSipMask.setStatus('current')
dcscmSipbindingAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(6000, 7999), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmSipbindingAclNumber.setStatus('current')
dcscmdcPortbindingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 5), )
if mibBuilder.loadTexts: dcscmdcPortbindingTable.setStatus('current')
dcscmdcPortbindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 5, 1), ).setIndexNames((0, "NAG-MIB", "dcscmdcPortbindingPortName"))
if mibBuilder.loadTexts: dcscmdcPortbindingEntry.setStatus('current')
dcscmdcPortbindingPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscmdcPortbindingPortName.setStatus('current')
dcscmdcPortbindingAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(6000, 7999), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmdcPortbindingAclNumber.setStatus('current')
dcscmscEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmscEnable.setStatus('current')
dcscmscAclTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7), )
if mibBuilder.loadTexts: dcscmscAclTable.setStatus('current')
dcscmscAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1), ).setIndexNames((0, "NAG-MIB", "dcscmscAclNumber"), (0, "NAG-MIB", "dcscmscAclSubNumber"))
if mibBuilder.loadTexts: dcscmscAclEntry.setStatus('current')
dcscmscAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5000, 5099))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmscAclNumber.setStatus('current')
dcscmscAclSubNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmscAclSubNumber.setStatus('current')
dcscmscAclSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmscAclSourceIp.setStatus('current')
dcscmscAclSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmscAclSourceMask.setStatus('current')
dcscmscAclDestinationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmscAclDestinationIp.setStatus('current')
dcscmscAclDestinationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmscAclDestinationMask.setStatus('current')
dcscmscAclPermitOrDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 0), ("deltheAcl", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmscAclPermitOrDeny.setStatus('current')
dcscmscPortbindingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 8), )
if mibBuilder.loadTexts: dcscmscPortbindingTable.setStatus('current')
dcscmscPortbindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 8, 1), ).setIndexNames((0, "NAG-MIB", "dcscmscPortbindingPortName"))
if mibBuilder.loadTexts: dcscmscPortbindingEntry.setStatus('current')
dcscmscPortbindingPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscmscPortbindingPortName.setStatus('current')
dcscmscPortbindingAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5099), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmscPortbindingAclNumber.setStatus('current')
dcscmpcTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 9), )
if mibBuilder.loadTexts: dcscmpcTable.setStatus('current')
dcscmpcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 9, 1), ).setIndexNames((0, "NAG-MIB", "dcscmpcSourceIp"), (0, "NAG-MIB", "dcscmpcSourceMasklen"), (0, "NAG-MIB", "dcscmpcDestinationIp"), (0, "NAG-MIB", "dcscmpcDestinationMasklen"))
if mibBuilder.loadTexts: dcscmpcEntry.setStatus('current')
dcscmpcSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscmpcSourceIp.setStatus('current')
dcscmpcSourceMasklen = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscmpcSourceMasklen.setStatus('current')
dcscmpcDestinationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscmpcDestinationIp.setStatus('current')
dcscmpcDestinationMasklen = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscmpcDestinationMasklen.setStatus('current')
dcscmpccos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscmpccos.setStatus('current')
dcscm6dcEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6dcEnable.setStatus('current')
dcscm6dcAcl = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 2))
dcscm6dcAclNumber = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9000, 10999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6dcAclNumber.setStatus('current')
dcscm6dcAclSourceIp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 2, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6dcAclSourceIp.setStatus('current')
dcscm6dcAclSourceMask = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6dcAclSourceMask.setStatus('current')
dcscm6dcAclDestinationIp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 2, 4), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6dcAclDestinationIp.setStatus('current')
dcscm6dcAclDestinationMask = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6dcAclDestinationMask.setStatus('current')
dcscm6dcAclPermitOrDeny = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 0), ("deltheAcl", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6dcAclPermitOrDeny.setStatus('current')
dcscm6VMacbindingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 3), )
if mibBuilder.loadTexts: dcscm6VMacbindingTable.setStatus('current')
dcscm6VMacbindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 3, 1), ).setIndexNames((0, "NAG-MIB", "dcscm6VMacbindingVlanid"), (0, "NAG-MIB", "dcscm6VMacbindingMacAddr"))
if mibBuilder.loadTexts: dcscm6VMacbindingEntry.setStatus('current')
dcscm6VMacbindingVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscm6VMacbindingVlanid.setStatus('current')
dcscm6VMacbindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 3, 1, 2), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscm6VMacbindingMacAddr.setStatus('current')
dcscm6VMacbindingAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(9000, 10999), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6VMacbindingAclNumber.setStatus('current')
dcscm6SipbindingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 4), )
if mibBuilder.loadTexts: dcscm6SipbindingTable.setStatus('current')
dcscm6SipbindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 4, 1), ).setIndexNames((0, "NAG-MIB", "dcscm6SipbindingSipAddress"), (0, "NAG-MIB", "dcscm6SipbindingSipMaskLen"))
if mibBuilder.loadTexts: dcscm6SipbindingEntry.setStatus('current')
dcscm6SipbindingSipAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 4, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscm6SipbindingSipAddress.setStatus('current')
dcscm6SipbindingSipMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscm6SipbindingSipMaskLen.setStatus('current')
dcscm6SipbindingAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(9000, 10999), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6SipbindingAclNumber.setStatus('current')
dcscm6dcPortbindingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 5), )
if mibBuilder.loadTexts: dcscm6dcPortbindingTable.setStatus('current')
dcscm6dcPortbindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 5, 1), ).setIndexNames((0, "NAG-MIB", "dcscm6dcPortbindingPortName"))
if mibBuilder.loadTexts: dcscm6dcPortbindingEntry.setStatus('current')
dcscm6dcPortbindingPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscm6dcPortbindingPortName.setStatus('current')
dcscm6dcPortbindingAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(9000, 10999), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6dcPortbindingAclNumber.setStatus('current')
dcscm6scEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6scEnable.setStatus('current')
dcscm6scAcl = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 7))
dcscm6scAclNumber = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8000, 8099))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6scAclNumber.setStatus('current')
dcscm6scAclSourceIp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 7, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6scAclSourceIp.setStatus('current')
dcscm6scAclSourceMask = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6scAclSourceMask.setStatus('current')
dcscm6scAclDestinationIp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 7, 4), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6scAclDestinationIp.setStatus('current')
dcscm6scAclDestinationMask = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6scAclDestinationMask.setStatus('current')
dcscm6scAclPermitOrDeny = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 0), ("deltheAcl", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6scAclPermitOrDeny.setStatus('current')
dcscm6scPortbindingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 8), )
if mibBuilder.loadTexts: dcscm6scPortbindingTable.setStatus('current')
dcscm6scPortbindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 8, 1), ).setIndexNames((0, "NAG-MIB", "dcscm6scPortbindingPortName"))
if mibBuilder.loadTexts: dcscm6scPortbindingEntry.setStatus('current')
dcscm6scPortbindingPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscm6scPortbindingPortName.setStatus('current')
dcscm6scPortbindingAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(8000, 8099), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6scPortbindingAclNumber.setStatus('current')
dcscm6pcTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 9), )
if mibBuilder.loadTexts: dcscm6pcTable.setStatus('current')
dcscm6pcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 9, 1), ).setIndexNames((0, "NAG-MIB", "dcscm6pcSourceIp"), (0, "NAG-MIB", "dcscm6pcSourceMask"), (0, "NAG-MIB", "dcscm6pcDestinationIp"), (0, "NAG-MIB", "dcscm6pcDestinationMask"))
if mibBuilder.loadTexts: dcscm6pcEntry.setStatus('current')
dcscm6pcSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 9, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscm6pcSourceIp.setStatus('current')
dcscm6pcSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscm6pcSourceMask.setStatus('current')
dcscm6pcDestinationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 9, 1, 3), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscm6pcDestinationIp.setStatus('current')
dcscm6pcDestinationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcscm6pcDestinationMask.setStatus('current')
dcscm6pccos = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcscm6pccos.setStatus('current')
clusterv2Base = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1))
clusterv2BaseKey = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterv2BaseKey.setStatus('current')
clusterv2BaseVlan = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterv2BaseVlan.setStatus('current')
clusterv2BaseRun = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterv2BaseRun.setStatus('current')
clusterv2BaseRole = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("candidateDevice", 1), ("memberDevice", 2), ("commanderDevice", 3), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2BaseRole.setStatus('current')
clusterv2BaseVersion = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2BaseVersion.setStatus('current')
clusterv2BaseMaxNumberOfMembers = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2BaseMaxNumberOfMembers.setStatus('current')
clusterv2BaseMaxNumberOfSwitches = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2BaseMaxNumberOfSwitches.setStatus('current')
clusterv2Create = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 2))
clusterv2CreateIPPool = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterv2CreateIPPool.setStatus('current')
clusterv2CreateName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterv2CreateName.setStatus('current')
clusterv2CreateCmdrOperate = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("create", 1), ("destroy", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterv2CreateCmdrOperate.setStatus('current')
clusterv2Status = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 3))
clusterv2StatusClusterName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterv2StatusClusterName.setStatus('current')
clusterv2StatusKeepalive = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterv2StatusKeepalive.setStatus('current')
clusterv2StatusLoss_count = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setLabel("clusterv2StatusLoss-count").setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterv2StatusLoss_count.setStatus('current')
clusterv2Commander = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4))
clusterv2CommanderAutoAddMem = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterv2CommanderAutoAddMem.setStatus('current')
clusterv2MemberCounter = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2MemberCounter.setStatus('current')
clusterv2MemberTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3), )
if mibBuilder.loadTexts: clusterv2MemberTable.setStatus('current')
clusterv2MemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3, 1), ).setIndexNames((0, "NAG-MIB", "clusterv2MemberNumber"))
if mibBuilder.loadTexts: clusterv2MemberEntry.setStatus('current')
clusterv2MemberNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2MemberNumber.setStatus('current')
clusterv2MemberIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2MemberIpAddress.setStatus('current')
clusterv2MemberOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notMember", 1), ("inactiveMember", 2), ("memberTobe", 3), ("activeMember", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2MemberOperStatus.setStatus('current')
clusterv2MemberMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3, 1, 4), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2MemberMacAddress.setStatus('current')
clusterv2MemberHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2MemberHostName.setStatus('current')
clusterv2MemberDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2MemberDeviceType.setStatus('current')
clusterv2CandidateCounter = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2CandidateCounter.setStatus('current')
clusterv2CandidateTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 5), )
if mibBuilder.loadTexts: clusterv2CandidateTable.setStatus('current')
clusterv2CandidateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 5, 1), ).setIndexNames((0, "NAG-MIB", "clusterv2CandidateId"))
if mibBuilder.loadTexts: clusterv2CandidateEntry.setStatus('current')
clusterv2CandidateId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2CandidateId.setStatus('current')
clusterv2CandidateMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 5, 1, 2), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2CandidateMacAddress.setStatus('current')
clusterv2CandidateHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2CandidateHostName.setStatus('current')
clusterv2CandidateDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterv2CandidateDeviceType.setStatus('current')
clusterv2RebootMem = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterv2RebootMem.setStatus('current')
dnsEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsEnable.setStatus('current')
dnsServerTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 2), )
if mibBuilder.loadTexts: dnsServerTable.setStatus('current')
dnsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 2, 1), ).setIndexNames((0, "NAG-MIB", "dnsServerInetAddrType"), (0, "NAG-MIB", "dnsServerIpAddr"))
if mibBuilder.loadTexts: dnsServerEntry.setStatus('current')
dnsServerInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: dnsServerInetAddrType.setStatus('current')
dnsServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsServerIpAddr.setStatus('current')
dnsServerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsServerPriority.setStatus('current')
dnsServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsServerStatus.setStatus('current')
dnsDomainSuffixTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 3), )
if mibBuilder.loadTexts: dnsDomainSuffixTable.setStatus('current')
dnsDomainSuffixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 3, 1), ).setIndexNames((0, "NAG-MIB", "dnsDomainSuffix"))
if mibBuilder.loadTexts: dnsDomainSuffixEntry.setStatus('current')
dnsDomainSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDomainSuffix.setStatus('current')
dnsDomainSuffixStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsDomainSuffixStatus.setStatus('current')
dnsDynHostTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 4), )
if mibBuilder.loadTexts: dnsDynHostTable.setStatus('current')
dnsDynHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 4, 1), ).setIndexNames((0, "NAG-MIB", "dnsDynHostIndex"))
if mibBuilder.loadTexts: dnsDynHostEntry.setStatus('current')
dnsDynHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: dnsDynHostIndex.setStatus('current')
dnsDynHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDynHostName.setStatus('current')
dnsDynHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 4, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDynHostIpAddr.setStatus('current')
dnsDynHostTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDynHostTtl.setStatus('current')
class NtpStratum(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 16)

class NtpDateTime(TextualConvention, OctetString):
    status = 'current'
    displayHint = '4d:4d:4d.4d'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), )
ntpEntSoftwareName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntSoftwareName.setStatus('current')
ntpEntSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntSoftwareVersion.setStatus('current')
ntpEntSoftwareVendor = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntSoftwareVendor.setStatus('current')
ntpEntSystemType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntSystemType.setStatus('current')
ntpEntTimeResolution = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntTimeResolution.setStatus('current')
ntpEntTimePrecision = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntTimePrecision.setStatus('current')
ntpEntStatusCurrentMode = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusCurrentMode.setStatus('current')
ntpEntStatusCurrentModeVal = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 99))).clone(namedValues=NamedValues(("notRunning", 1), ("notSynchronized", 2), ("noneConfigured", 3), ("syncToLocal", 4), ("syncToRefclock", 5), ("syncToRemoteServer", 6), ("unknown", 99))).clone(99)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusCurrentModeVal.setStatus('current')
ntpEntStatusStratum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 3), NtpStratum().clone(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusStratum.setStatus('current')
ntpEntStatusActiveRefSourceId = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusActiveRefSourceId.setStatus('current')
ntpEntStatusActiveRefSourceName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusActiveRefSourceName.setStatus('current')
ntpEntStatusNumberOfRefSources = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusNumberOfRefSources.setStatus('current')
ntpEntStatusDateTime = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 10), NtpDateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusDateTime.setStatus('current')
ntpEntStatusInPkts = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusInPkts.setStatus('current')
ntpEntStatusOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusOutPkts.setStatus('current')
ntpEntStatusBadVersion = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusBadVersion.setStatus('current')
ntpEntStatusProtocolError = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusProtocolError.setStatus('current')
ntpEntConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 6))
ntpEntCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 6, 1))
ntpEntGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 6, 2))
ntpEntNTPCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 6, 1, 1)).setObjects(("NAG-MIB", "ntpEntObjectsGroup1"), ("NAG-MIB", "ntpEntObjectsGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntpEntNTPCompliance = ntpEntNTPCompliance.setStatus('current')
ntpEntSNTPCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 6, 1, 2)).setObjects(("NAG-MIB", "ntpEntObjectsGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntpEntSNTPCompliance = ntpEntSNTPCompliance.setStatus('current')
ntpEntObjectsGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 6, 2, 1)).setObjects(("NAG-MIB", "ntpEntSoftwareName"), ("NAG-MIB", "ntpEntSoftwareVersion"), ("NAG-MIB", "ntpEntSoftwareVendor"), ("NAG-MIB", "ntpEntSystemType"), ("NAG-MIB", "ntpEntStatusDateTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntpEntObjectsGroup1 = ntpEntObjectsGroup1.setStatus('current')
ntpEntObjectsGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 6, 2, 2)).setObjects(("NAG-MIB", "ntpEntTimeResolution"), ("NAG-MIB", "ntpEntTimePrecision"), ("NAG-MIB", "ntpEntStatusCurrentMode"), ("NAG-MIB", "ntpEntStatusCurrentModeVal"), ("NAG-MIB", "ntpEntStatusStratum"), ("NAG-MIB", "ntpEntStatusActiveRefSourceId"), ("NAG-MIB", "ntpEntStatusActiveRefSourceName"), ("NAG-MIB", "ntpEntStatusNumberOfRefSources"), ("NAG-MIB", "ntpEntStatusInPkts"), ("NAG-MIB", "ntpEntStatusOutPkts"), ("NAG-MIB", "ntpEntStatusBadVersion"), ("NAG-MIB", "ntpEntStatusProtocolError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntpEntObjectsGroup2 = ntpEntObjectsGroup2.setStatus('current')
poeSystemEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeSystemEnable.setStatus('current')
poeMaxPower = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(37, 776))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeMaxPower.setStatus('current')
poePoliceEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePoliceEnable.setStatus('current')
poeLegacyEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeLegacyEnable.setStatus('current')
poeDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ac", 0), ("dc", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeDisconnect.setStatus('current')
poeCurrentPower = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeCurrentPower.setStatus('current')
poePortMode = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("spare", 1), ("signal", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortMode.setStatus('current')
poeSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeSoftwareVersion.setStatus('current')
poeHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeHardwareVersion.setStatus('current')
poePortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10), )
if mibBuilder.loadTexts: poePortConfigTable.setStatus('current')
poePortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1), ).setIndexNames((0, "NAG-MIB", "portIndex"))
if mibBuilder.loadTexts: poePortConfigEntry.setStatus('current')
poePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: poePortIndex.setStatus('current')
poePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enableAuto", 1), ("enableStatic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortStatus.setStatus('current')
poePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("critical", 0), ("high", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortPriority.setStatus('current')
poePortMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortMaxPower.setStatus('current')
poePortCurrentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortCurrentPower.setStatus('current')
poePortCurrentCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortCurrentCurrent.setStatus('current')
poePortCurrentVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortCurrentVoltage.setStatus('current')
poePortPdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("faulty", 3), ("deny", 4), ("force", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortPdStatus.setStatus('current')
poePortPdClass = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortPdClass.setStatus('current')
poeHighInrushEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeHighInrushEnable.setStatus('current')
qos2 = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1))
qos2MapCostoIntp = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1))
qos2MapCostoIntp1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoIntp1.setStatus('current')
qos2MapCostoIntp2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoIntp2.setStatus('current')
qos2MapCostoIntp3 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoIntp3.setStatus('current')
qos2MapCostoIntp4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoIntp4.setStatus('current')
qos2MapCostoIntp5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoIntp5.setStatus('current')
qos2MapCostoIntp6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoIntp6.setStatus('current')
qos2MapCostoIntp7 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoIntp7.setStatus('current')
qos2MapCostoIntp8 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoIntp8.setStatus('current')
qos2MapCostoIntpStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoIntpStatus.setStatus('current')
qos2MapCostoDP = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2))
qos2MapCostoDP1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoDP1.setStatus('current')
qos2MapCostoDP2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoDP2.setStatus('current')
qos2MapCostoDP3 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoDP3.setStatus('current')
qos2MapCostoDP4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoDP4.setStatus('current')
qos2MapCostoDP5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoDP5.setStatus('current')
qos2MapCostoDP6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoDP6.setStatus('current')
qos2MapCostoDP7 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoDP7.setStatus('current')
qos2MapCostoDP8 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoDP8.setStatus('current')
qos2MapCostoDPStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapCostoDPStatus.setStatus('current')
qos2MapDSCPtoDSCP = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3))
qos2MapDSCPtoDSCP1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP1.setStatus('current')
qos2MapDSCPtoDSCP2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP2.setStatus('current')
qos2MapDSCPtoDSCP3 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP3.setStatus('current')
qos2MapDSCPtoDSCP4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP4.setStatus('current')
qos2MapDSCPtoDSCP5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP5.setStatus('current')
qos2MapDSCPtoDSCP6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP6.setStatus('current')
qos2MapDSCPtoDSCP7 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP7.setStatus('current')
qos2MapDSCPtoDSCP8 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDSCP8.setStatus('current')
qos2MapDSCPtoDSCPoutDSCP = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDSCPoutDSCP.setStatus('current')
qos2MapDSCPtoDSCPStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDSCPStatus.setStatus('current')
qos2MapDSCPtoIntp = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4))
qos2MapDSCPtoIntp1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoIntp1.setStatus('current')
qos2MapDSCPtoIntp2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoIntp2.setStatus('current')
qos2MapDSCPtoIntp3 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoIntp3.setStatus('current')
qos2MapDSCPtoIntp4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoIntp4.setStatus('current')
qos2MapDSCPtoIntp5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoIntp5.setStatus('current')
qos2MapDSCPtoIntp6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoIntp6.setStatus('current')
qos2MapDSCPtoIntp7 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoIntp7.setStatus('current')
qos2MapDSCPtoIntp8 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoIntp8.setStatus('current')
qos2MapDSCPtoIntpIntPriovalue = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoIntpIntPriovalue.setStatus('current')
qos2MapDSCPtoIntpStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoIntpStatus.setStatus('current')
qos2MapDSCPtoDP = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5))
qos2MapDSCPtoDP1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDP1.setStatus('current')
qos2MapDSCPtoDP2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDP2.setStatus('current')
qos2MapDSCPtoDP3 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDP3.setStatus('current')
qos2MapDSCPtoDP4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDP4.setStatus('current')
qos2MapDSCPtoDP5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDP5.setStatus('current')
qos2MapDSCPtoDP6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDP6.setStatus('current')
qos2MapDSCPtoDP7 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDP7.setStatus('current')
qos2MapDSCPtoDP8 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDP8.setStatus('current')
qos2MapDSCPtoDPvalue = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDPvalue.setStatus('current')
qos2MapDSCPtoDPStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapDSCPtoDPStatus.setStatus('current')
qos2MapExptoIntp = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6))
qos2MapExptoIntp1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoIntp1.setStatus('current')
qos2MapExptoIntp2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoIntp2.setStatus('current')
qos2MapExptoIntp3 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoIntp3.setStatus('current')
qos2MapExptoIntp4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoIntp4.setStatus('current')
qos2MapExptoIntp5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoIntp5.setStatus('current')
qos2MapExptoIntp6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoIntp6.setStatus('current')
qos2MapExptoIntp7 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoIntp7.setStatus('current')
qos2MapExptoIntp8 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoIntp8.setStatus('current')
qos2MapExptoIntpStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoIntpStatus.setStatus('current')
qos2MapExptoDP = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7))
qos2MapExptoDP1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoDP1.setStatus('current')
qos2MapExptoDP2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoDP2.setStatus('current')
qos2MapExptoDP3 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoDP3.setStatus('current')
qos2MapExptoDP4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoDP4.setStatus('current')
qos2MapExptoDP5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoDP5.setStatus('current')
qos2MapExptoDP6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoDP6.setStatus('current')
qos2MapExptoDP7 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoDP7.setStatus('current')
qos2MapExptoDP8 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoDP8.setStatus('current')
qos2MapExptoDPStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapExptoDPStatus.setStatus('current')
qos2MapIntptoDSCP = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8))
qos2MapIntptoDSCP1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoDSCP1.setStatus('current')
qos2MapIntptoDSCP2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoDSCP2.setStatus('current')
qos2MapIntptoDSCP3 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoDSCP3.setStatus('current')
qos2MapIntptoDSCP4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoDSCP4.setStatus('current')
qos2MapIntptoDSCP5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoDSCP5.setStatus('current')
qos2MapIntptoDSCP6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoDSCP6.setStatus('current')
qos2MapIntptoDSCP7 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoDSCP7.setStatus('current')
qos2MapIntptoDSCP8 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoDSCP8.setStatus('current')
qos2MapIntptoDSCPStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoDSCPStatus.setStatus('current')
qos2MapIntptoEXP = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10))
qos2MapIntptoEXP1 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoEXP1.setStatus('current')
qos2MapIntptoEXP2 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoEXP2.setStatus('current')
qos2MapIntptoEXP3 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoEXP3.setStatus('current')
qos2MapIntptoEXP4 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoEXP4.setStatus('current')
qos2MapIntptoEXP5 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoEXP5.setStatus('current')
qos2MapIntptoEXP6 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoEXP6.setStatus('current')
qos2MapIntptoEXP7 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoEXP7.setStatus('current')
qos2MapIntptoEXP8 = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoEXP8.setStatus('current')
qos2MapIntptoEXPStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2MapIntptoEXPStatus.setStatus('current')
qos2AggregatePolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11))
qos2AggPolicyName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyName.setStatus('current')
qos2AggPolicyCIRKbps = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyCIRKbps.setStatus('current')
qos2AggPolicyCBSKbps = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyCBSKbps.setStatus('current')
qos2AggPolicyPBSKbps = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyPBSKbps.setStatus('current')
qos2AggPolicyPIRKbps = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyPIRKbps.setStatus('current')
qos2AggPolicyConformAction = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("set-dscp-transmit", 2), ("set-prec-transmit", 3), ("set-cos-transmit", 4), ("set-drop-precedence", 5), ("set-internal-priority", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyConformAction.setStatus('current')
qos2AggPolicyConformActionChangeValue = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyConformActionChangeValue.setStatus('current')
qos2AggPolicyExceedAction = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("set-dscp-transmit", 2), ("set-prec-transmit", 3), ("set-cos-transmit", 4), ("set-drop-precedence", 5), ("set-internal-priority", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyExceedAction.setStatus('current')
qos2AggPolicyExceedActionChangeValue = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyExceedActionChangeValue.setStatus('current')
qos2AggPolicyViolateAction = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("set-dscp-transmit", 2), ("set-prec-transmit", 3), ("set-cos-transmit", 4), ("set-drop-precedence", 5), ("set-internal-priority", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyViolateAction.setStatus('current')
qos2AggPolicyViolateActionChangeValue = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyViolateActionChangeValue.setStatus('current')
qos2AggPolicyStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2AggPolicyStatus.setStatus('current')
qos2ServicePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 12), )
if mibBuilder.loadTexts: qos2ServicePolicyTable.setStatus('current')
qos2ServicePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 12, 1), ).setIndexNames((0, "NAG-MIB", "qos2PolicyMapName"))
if mibBuilder.loadTexts: qos2ServicePolicyEntry.setStatus('current')
qos2PolicyMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 12, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos2PolicyMapName.setStatus('current')
qos2ServicePolicyVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qos2ServicePolicyVlanList.setStatus('current')
qos2ServicePolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ServicePolicyStatus.setStatus('current')
qos2PortTable = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13))
qos2PortIndex = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PortIndex.setStatus('current')
qos2PortType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("trust", 0), ("cos", 1), ("policy", 2), ("queueAndBandwidth", 3), ("queueAndAlgorithm", 4), ("queueAndWdrr", 5), ("queueAndWrr", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PortType.setStatus('current')
qos2PortCos = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PortCos.setStatus('current')
qos2PortTrust = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cos", 0), ("dscp", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PortTrust.setStatus('current')
qos2PortPolicy = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PortPolicy.setStatus('current')
qos2PortQueueBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PortQueueBandwidth.setStatus('current')
qos2PortQueueAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("sp", 0), ("wdrr", 1), ("wrr", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PortQueueAlgorithm.setStatus('current')
qos2PortQueueWdrr = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PortQueueWdrr.setStatus('current')
qos2PortQueueWrr = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PortQueueWrr.setStatus('current')
qos2PortStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PortStatus.setStatus('current')
qos2ClassMapTable = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14))
qos2ClassMapName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapName.setStatus('current')
qos2ClassMapType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 3, 8, 7, 4, 9, 10))).clone(namedValues=NamedValues(("configurClassMap", 0), ("accessGroup", 1), ("dscp", 2), ("v6dscp", 5), ("ippre", 3), ("v6AccessGroup", 8), ("v6Flow", 7), ("vlan", 4), ("cos", 9), ("exp", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapType.setStatus('current')
qos2ClassMapAccessGroup = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapAccessGroup.setStatus('current')
qos2ClassMapDscp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapDscp.setStatus('current')
qos2ClassMapV6Dscp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapV6Dscp.setStatus('current')
qos2ClassMapIpPre = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapIpPre.setStatus('current')
qos2ClassMapV6AccGroup = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapV6AccGroup.setStatus('current')
qos2ClassMapV6Flow = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapV6Flow.setStatus('current')
qos2ClassMapVlan = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapVlan.setStatus('current')
qos2ClassMapCos = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 10), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapCos.setStatus('current')
qos2ClassMapExp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapExp.setStatus('current')
qos2ClassMapStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2ClassMapStatus.setStatus('current')
qos2PolicyTable = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15))
qos2PolicyName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyName.setStatus('current')
qos2PolicyClassMap = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyClassMap.setStatus('current')
qos2PolicyInsertClassMap = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyInsertClassMap.setStatus('current')
qos2PolicyType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("policymap", 0), ("matchclassmap", 1), ("threeColor", 2), ("aggregatePolicer", 3), ("accounting", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyType.setStatus('current')
qos2PolicyCIRKbps = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyCIRKbps.setStatus('current')
qos2PolicyCBSKbps = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyCBSKbps.setStatus('current')
qos2PolicyPBSKbps = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyPBSKbps.setStatus('current')
qos2PolicyPIRKbps = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyPIRKbps.setStatus('current')
qos2PolicyConformActionChange = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("set-dscp-transmit", 2), ("set-prec-transmit", 3), ("set-cos-transmit", 4), ("set-internal-priority", 5), ("set-drop-Precedence", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyConformActionChange.setStatus('current')
qos2PolicyConformActionChangeValue = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyConformActionChangeValue.setStatus('current')
qos2PolicyExceedActionChange = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("set-dscp-transmit", 2), ("set-prec-transmit", 3), ("set-cos-transmit", 4), ("set-internal-priority", 5), ("set-drop-Precedence", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyExceedActionChange.setStatus('current')
qos2PolicyExceedActionChangeValue = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyExceedActionChangeValue.setStatus('current')
qos2PolicyViolateActionChange = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("set-dscp-transmit", 2), ("set-prec-transmit", 3), ("set-cos-transmit", 4), ("set-internal-priority", 5), ("set-drop-Precedence", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyViolateActionChange.setStatus('current')
qos2PolicyViolateActionChangeValue = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyViolateActionChangeValue.setStatus('current')
qos2PolicyAggregatePolicer = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 15), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyAggregatePolicer.setStatus('current')
qos2PolicyStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2PolicyStatus.setStatus('current')
qos2SetTable = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16))
qos2SetPolicyMapName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetPolicyMapName.setStatus('current')
qos2SetClassMapName = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetClassMapName.setStatus('current')
qos2SetType = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("dscp", 1), ("precedence", 2), ("internal-priority", 3), ("drop-precedence", 4), ("nextHop", 5), ("v6nextHop", 6), ("cos", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetType.setStatus('current')
qos2SetDscp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetDscp.setStatus('current')
qos2SetPrecedence = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetPrecedence.setStatus('current')
qos2SetInternalPriority = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetInternalPriority.setStatus('current')
qos2SetDropPrecedence = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetDropPrecedence.setStatus('current')
qos2SetDefaultPBR = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetDefaultPBR.setStatus('current')
qos2SetVrf = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 252))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetVrf.setStatus('current')
qos2SetnextHop = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetnextHop.setStatus('current')
qos2Setv6nextHop = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2Setv6nextHop.setStatus('current')
qos2SetCos = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetCos.setStatus('current')
qos2SetStatus = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos2SetStatus.setStatus('current')
mabOnlineUserTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 1), )
if mibBuilder.loadTexts: mabOnlineUserTable.setStatus('current')
mabOnlineUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 1, 1), ).setIndexNames((0, "NAG-MIB", "mabOnlineUserIndex"))
if mibBuilder.loadTexts: mabOnlineUserEntry.setStatus('current')
mabOnlineUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: mabOnlineUserIndex.setStatus('current')
mabOnlineUserMac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mabOnlineUserMac.setStatus('current')
mabOnlineUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mabOnlineUserName.setStatus('current')
mabOnlineUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mabOnlineUserState.setStatus('current')
mabOnlineUserPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mabOnlineUserPort.setStatus('current')
mabSetUserOffline = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mabSetUserOffline.setStatus('current')
dot1xOnlineUserTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3), )
if mibBuilder.loadTexts: dot1xOnlineUserTable.setStatus('current')
dot1xOnlineUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1), ).setIndexNames((0, "NAG-MIB", "dot1xOnlineUserIndex"))
if mibBuilder.loadTexts: dot1xOnlineUserEntry.setStatus('current')
dot1xOnlineUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: dot1xOnlineUserIndex.setStatus('current')
dot1xOnlineUserMac = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xOnlineUserMac.setStatus('current')
dot1xOnlineUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xOnlineUserName.setStatus('current')
dot1xOnlineUserPort = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xOnlineUserPort.setStatus('current')
dot1xOnlineUserPortVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xOnlineUserPortVlanid.setStatus('current')
dot1xOnlineUserPortMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xOnlineUserPortMethod.setStatus('current')
dot1xOnlineUserPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xOnlineUserPortControl.setStatus('current')
dot1xOnlineUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xOnlineUserState.setStatus('current')
dot1xSetUserOffline = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xSetUserOffline.setStatus('current')
portMacCountLimitTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1), )
if mibBuilder.loadTexts: portMacCountLimitTable.setStatus('current')
portMacCountLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1, 1), ).setIndexNames((0, "NAG-MIB", "portMacCountLimitPortIndex"))
if mibBuilder.loadTexts: portMacCountLimitEntry.setStatus('current')
portMacCountLimitPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMacCountLimitPortIndex.setStatus('current')
portMacCountLimitConfigNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portMacCountLimitConfigNum.setStatus('current')
portMacCountLimitCurNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMacCountLimitCurNum.setStatus('current')
portMacCountLimitDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("disable", 1), ("not-disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portMacCountLimitDisable.setStatus('current')
portMacCountLimitViolationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("protect", 1), ("shutdown", 2), ("replace", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portMacCountLimitViolationMode.setStatus('current')
portMacCountLimitShutRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portMacCountLimitShutRecoveryTime.setStatus('current')
ddmTranscDiagnosisTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1), )
if mibBuilder.loadTexts: ddmTranscDiagnosisTable.setStatus('current')
ddmTranscDiagnosisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1), ).setIndexNames((0, "NAG-MIB", "ddmDiagnosisIfIndex"))
if mibBuilder.loadTexts: ddmTranscDiagnosisEntry.setStatus('current')
ddmDiagnosisIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagnosisIfIndex.setStatus('current')
ddmDiagnosisTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagnosisTemperature.setStatus('current')
ddmDiagTempHighAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagTempHighAlarmThreshold.setStatus('current')
ddmDiagTempLowAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagTempLowAlarmThreshold.setStatus('current')
ddmDiagTempHighWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagTempHighWarnThreshold.setStatus('current')
ddmDiagTempLowWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagTempLowWarnThreshold.setStatus('current')
ddmDiagnosisVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagnosisVoltage.setStatus('current')
ddmDiagVoltHighAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagVoltHighAlarmThreshold.setStatus('current')
ddmDiagVoltLowAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagVoltLowAlarmThreshold.setStatus('current')
ddmDiagVoltHighWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagVoltHighWarnThreshold.setStatus('current')
ddmDiagVoltLowWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagVoltLowWarnThreshold.setStatus('current')
ddmDiagnosisBias = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagnosisBias.setStatus('current')
ddmDiagBiasHighAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagBiasHighAlarmThreshold.setStatus('current')
ddmDiagBiasLowAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagBiasLowAlarmThreshold.setStatus('current')
ddmDiagBiasHighWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagBiasHighWarnThreshold.setStatus('current')
ddmDiagBiasLowWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagBiasLowWarnThreshold.setStatus('current')
ddmDiagnosisRXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagnosisRXPower.setStatus('current')
ddmDiagRXPowerHighAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagRXPowerHighAlarmThreshold.setStatus('current')
ddmDiagRXPowerLowAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagRXPowerLowAlarmThreshold.setStatus('current')
ddmDiagRXPowerHighWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagRXPowerHighWarnThreshold.setStatus('current')
ddmDiagRXPowerLowWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagRXPowerLowWarnThreshold.setStatus('current')
ddmDiagnosisTXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagnosisTXPower.setStatus('current')
ddmDiagTXPowerHighAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagTXPowerHighAlarmThreshold.setStatus('current')
ddmDiagTXPowerLowAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagTXPowerLowAlarmThreshold.setStatus('current')
ddmDiagTXPowerHighWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagTXPowerHighWarnThreshold.setStatus('current')
ddmDiagTXPowerLowWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmDiagTXPowerLowWarnThreshold.setStatus('current')
ddmTranscAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 2), )
if mibBuilder.loadTexts: ddmTranscAlarmTable.setStatus('current')
ddmTranscAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 2, 1), ).setIndexNames((0, "NAG-MIB", "ddmAlarmIfIndex"))
if mibBuilder.loadTexts: ddmTranscAlarmEntry.setStatus('current')
ddmAlarmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmAlarmIfIndex.setStatus('current')
ddmAlarmInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmAlarmInfo.setStatus('current')
ddmTranscBasicInfoTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3), )
if mibBuilder.loadTexts: ddmTranscBasicInfoTable.setStatus('current')
ddmTranscBasicInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1), ).setIndexNames((0, "NAG-MIB", "ddmAlarmIfIndex"))
if mibBuilder.loadTexts: ddmTranscBasicInfoEntry.setStatus('current')
ddmTransSerialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTransSerialIndex.setStatus('current')
ddmTransSerialName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTransSerialName.setStatus('current')
ddmTransSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTransSerialNo.setStatus('current')
ddmTransSerialVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTransSerialVendorName.setStatus('current')
ddmTransSerialModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTransSerialModelName.setStatus('current')
ddmTransSerialTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTransSerialTypeName.setStatus('current')
ddmTransSerialBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTransSerialBitRate.setStatus('current')
ddmTransSerialWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTransSerialWaveLength.setStatus('current')
priPppoeIaGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaGlobalEnable.setStatus('current')
priPppoeIaSelfDefinedCircuitID = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaSelfDefinedCircuitID.setStatus('current')
priPppoeIaTr101CircuitID = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaTr101CircuitID.setStatus('current')
priPppoeIaSelfDefinedRemoteID = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaSelfDefinedRemoteID.setStatus('current')
priPppoeIaDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("default", 0), ("pound", 1), ("dot", 2), ("comma", 3), ("semicolon", 4), ("colon", 5), ("slash", 6), ("space", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaDelimiter.setStatus('current')
priPppoeIaCircuitIdFormat = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("hex", 1), ("ascii", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaCircuitIdFormat.setStatus('current')
priPppoeIaRemoteIdFormat = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("hex", 1), ("ascii", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaRemoteIdFormat.setStatus('current')
priPppoeIaPortTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8), )
if mibBuilder.loadTexts: priPppoeIaPortTable.setStatus('current')
priPppoeIaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8, 1), ).setIndexNames((0, "NAG-MIB", "priPppoeIaPortID"))
if mibBuilder.loadTexts: priPppoeIaEntry.setStatus('current')
priPppoeIaPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: priPppoeIaPortID.setStatus('current')
priPppoeIaPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaPortEnable.setStatus('current')
priPppoeIaPortCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaPortCircuitID.setStatus('current')
priPppoeIaPortRemoteID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaPortRemoteID.setStatus('current')
priPppoeIaPortTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaPortTrust.setStatus('current')
priPppoeIaPortVendorTagStrip = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPppoeIaPortVendorTagStrip.setStatus('current')
newPortSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1), )
if mibBuilder.loadTexts: newPortSecurityTable.setStatus('current')
newPortSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1), ).setIndexNames((0, "NAG-MIB", "portSecurityPortIndex"))
if mibBuilder.loadTexts: newPortSecurityEntry.setStatus('current')
portSecurityPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityPortIndex.setStatus('current')
portSecurityState = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityState.setStatus('current')
portSecuritySticky = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecuritySticky.setStatus('current')
portSecurityMaxMacNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityMaxMacNum.setStatus('current')
portSecurityCurMacNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityCurMacNum.setStatus('current')
portSecurityCfgMacNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityCfgMacNum.setStatus('current')
portSecurityVioMacNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityVioMacNum.setStatus('current')
portSecurityAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityAgingTime.setStatus('current')
portSecurityAgingType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("default", 0), ("absolute", 1), ("inactivity", 2), ("static", 4), ("absolute-static", 5), ("inactivity-static", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityAgingType.setStatus('current')
portSecurityVioMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("protect", 1), ("restrict", 2), ("shutdown", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityVioMode.setStatus('current')
portSecurityVioShutRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityVioShutRecoveryTime.setStatus('current')
portSecurityVioRestrictRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityVioRestrictRecoveryTime.setStatus('current')
portSecurityVlanMaxNumTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 2), )
if mibBuilder.loadTexts: portSecurityVlanMaxNumTable.setStatus('current')
portSecurityVlanMaxNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 2, 1), ).setIndexNames((0, "NAG-MIB", "portSecurityPortIndex"), (0, "NAG-MIB", "portSecurityVlanIndex"))
if mibBuilder.loadTexts: portSecurityVlanMaxNumEntry.setStatus('current')
portSecurityVlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityVlanPortIndex.setStatus('current')
portSecurityVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityVlanIndex.setStatus('current')
portSecurityVlanMaxMacNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityVlanMaxMacNum.setStatus('current')
portSecurityVlanCurMacNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityVlanCurMacNum.setStatus('current')
portSecurityMacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 3), )
if mibBuilder.loadTexts: portSecurityMacAddressTable.setStatus('current')
portSecurityMacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 3, 1), ).setIndexNames((0, "NAG-MIB", "portSecurityPortIndex"), (0, "NAG-MIB", "portSecurityVlanIndex"), (0, "NAG-MIB", "portSecurityMacAddress"))
if mibBuilder.loadTexts: portSecurityMacAddressEntry.setStatus('current')
portSecurityMacAddressPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityMacAddressPortIndex.setStatus('current')
portSecurityMacAddressVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityMacAddressVlanIndex.setStatus('current')
portSecurityMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityMacAddress.setStatus('current')
portSecurityMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32, 64))).clone(namedValues=NamedValues(("secured", 16), ("secures", 32), ("securec", 64)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityMacType.setStatus('current')
portSecurityMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("createAndGo", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityMacStatus.setStatus('current')
prieeePortTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 34, 1), )
if mibBuilder.loadTexts: prieeePortTable.setStatus('current')
prieeePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 34, 1, 1), ).setIndexNames((0, "NAG-MIB", "portIndex"))
if mibBuilder.loadTexts: prieeePortEntry.setStatus('current')
eeePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 34, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: eeePortIndex.setStatus('current')
eeePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 34, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eeePortStatus.setStatus('current')
portRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1), )
if mibBuilder.loadTexts: portRateLimitTable.setStatus('current')
portRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1), ).setIndexNames((0, "NAG-MIB", "portRateLimitPortIndex"))
if mibBuilder.loadTexts: portRateLimitEntry.setStatus('current')
portRateLimitPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRateLimitPortIndex.setStatus('current')
portRateLimitConfigBroadcastNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portRateLimitConfigBroadcastNum.setStatus('current')
portRateLimitCurBroadcastNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRateLimitCurBroadcastNum.setStatus('current')
portRateLimitConfigMulticastNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portRateLimitConfigMulticastNum.setStatus('current')
portRateLimitCurMulticastNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRateLimitCurMulticastNum.setStatus('current')
portRateLimitConfigUnicastNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portRateLimitConfigUnicastNum.setStatus('current')
portRateLimitCurUnicastNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRateLimitCurUnicastNum.setStatus('current')
portRateLimitConfigAllNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portRateLimitConfigAllNum.setStatus('current')
portRateLimitCurAllNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRateLimitCurAllNum.setStatus('current')
portRateLimitPacketsType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRateLimitPacketsType.setStatus('current')
portRateLimitViolationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nocontrol", 0), ("shutdown", 1), ("block", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portRateLimitViolationMode.setStatus('current')
portRateLimitShutRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portRateLimitShutRecoveryTime.setStatus('current')
macBlackholeTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 36, 1), )
if mibBuilder.loadTexts: macBlackholeTable.setStatus('current')
macBlackholeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 36, 1, 1), ).setIndexNames((0, "NAG-MIB", "macAddressInVlanID"), (0, "NAG-MIB", "macAddress"))
if mibBuilder.loadTexts: macBlackholeEntry.setStatus('current')
macAddressInVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 36, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: macAddressInVlanID.setStatus('current')
macAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 36, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: macAddress.setStatus('current')
macType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 36, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("both", 0), ("source", 1), ("destination", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macType.setStatus('current')
macStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 36, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("creat", 0), ("active", 1), ("destroy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macStatus.setStatus('current')
cableTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 37, 1), )
if mibBuilder.loadTexts: cableTable.setStatus('current')
priCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 37, 1, 1), ).setIndexNames((0, "NAG-MIB", "cableLengthInfo"))
if mibBuilder.loadTexts: priCableEntry.setStatus('current')
cableLengthInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 37, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableLengthInfo.setStatus('current')
priMrppRingTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1), )
if mibBuilder.loadTexts: priMrppRingTable.setStatus('current')
priMrppRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1), ).setIndexNames((0, "NAG-MIB", "mrppRingIndex"))
if mibBuilder.loadTexts: priMrppRingEntry.setStatus('current')
mrppRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrppRingIndex.setStatus('current')
mrppRingNodeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrppRingNodeMode.setStatus('current')
mrppRingNodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrppRingNodeState.setStatus('current')
mrppRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrppRingStatus.setStatus('current')
mrppRingPriPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrppRingPriPortName.setStatus('current')
mrppRingPriPortBlockState = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrppRingPriPortBlockState.setStatus('current')
mrppRingSecPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrppRingSecPortName.setStatus('current')
mrppRingSecPortBlockState = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrppRingSecPortBlockState.setStatus('current')
erpsTcnPropagationConfig = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("erps", 1), ("stp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsTcnPropagationConfig.setStatus('current')
erpsRingConfigTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2), )
if mibBuilder.loadTexts: erpsRingConfigTable.setStatus('current')
erpsRingConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1), ).setIndexNames((0, "NAG-MIB", "erpsRingNameIndex"))
if mibBuilder.loadTexts: erpsRingConfigEntry.setStatus('current')
erpsRingNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsRingNameIndex.setStatus('current')
erpsRingName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRingName.setStatus('current')
erpsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("v1", 1), ("v2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsVersion.setStatus('current')
erpsOpenRing = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none-open", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsOpenRing.setStatus('current')
erpsRapsVirtualChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("without", 0), ("with", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRapsVirtualChannel.setStatus('current')
erpsRingPort0 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRingPort0.setStatus('current')
erpsRingPort0Index = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsRingPort0Index.setStatus('current')
erpsRingPort1ExistFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("not-none", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRingPort1ExistFlag.setStatus('current')
erpsRingPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRingPort1.setStatus('current')
erpsRingPort1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsRingPort1Index.setStatus('current')
erpsRingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unset", 0), ("set", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRingRowStatus.setStatus('current')
erpsTrapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unset", 0), ("set", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsTrapEnabled.setStatus('current')
erpsLogEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unset", 0), ("set", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsLogEnabled.setStatus('current')
erpsInstanceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3), )
if mibBuilder.loadTexts: erpsInstanceConfigTable.setStatus('current')
erpsInstanceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1), ).setIndexNames((0, "NAG-MIB", "erpsRingNameIndex"), (0, "NAG-MIB", "erpsInstanceId"))
if mibBuilder.loadTexts: erpsInstanceConfigEntry.setStatus('current')
erpsInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsInstanceId.setStatus('current')
erpsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsDescription.setStatus('current')
erpsRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRingId.setStatus('current')
erpsRplPort0Role = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("owner", 1), ("neighbour", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRplPort0Role.setStatus('current')
erpsRplPort1Role = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("owner", 1), ("neighbour", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRplPort1Role.setStatus('current')
erpsRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("non-revertive", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRevertiveMode.setStatus('current')
erpsGuardTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGuardTimer.setStatus('current')
erpsHoldoffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsHoldoffTimer.setStatus('current')
erpsWtrTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsWtrTimer.setStatus('current')
erpsProtectedInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsProtectedInstance.setStatus('current')
erpsRapsMel = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRapsMel.setStatus('current')
erpsControlVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsControlVlan.setStatus('current')
erpsForcedSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("port0-forced-switch", 1), ("port1-forced-switch", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsForcedSwitch.setStatus('current')
erpsManualSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("port0-manual-switch", 1), ("port1-manual-switch", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsManualSwitch.setStatus('current')
erpsClearCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsClearCommand.setStatus('current')
erpsClearPortStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsClearPortStatistics.setStatus('current')
erpsInstanceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unset", 0), ("set", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsInstanceRowStatus.setStatus('current')
erpsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4))
erpsInstanceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 1), )
if mibBuilder.loadTexts: erpsInstanceStatusTable.setStatus('current')
erpsInstanceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 1, 1), ).setIndexNames((0, "NAG-MIB", "erpsRingNameIndex"), (0, "NAG-MIB", "erpsInstanceId"))
if mibBuilder.loadTexts: erpsInstanceStatusEntry.setStatus('current')
erpsActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsActiveStatus.setStatus('current')
erpsNodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsNodeState.setStatus('current')
erpsPort0StatusTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 2), )
if mibBuilder.loadTexts: erpsPort0StatusTable.setStatus('current')
erpsPort0StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 2, 1), ).setIndexNames((0, "NAG-MIB", "erpsRingNameIndex"), (0, "NAG-MIB", "erpsInstanceId"))
if mibBuilder.loadTexts: erpsPort0StatusEntry.setStatus('current')
erpsPort0Name = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0Name.setStatus('current')
erpsPort0Status = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0Status.setStatus('current')
erpsPort0SignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0SignalStatus.setStatus('current')
erpsPort0RRapsNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0RRapsNodeId.setStatus('current')
erpsPort0BPR = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0BPR.setStatus('current')
erpsPort1StatusTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 3), )
if mibBuilder.loadTexts: erpsPort1StatusTable.setStatus('current')
erpsPort1StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 3, 1), ).setIndexNames((0, "NAG-MIB", "erpsRingNameIndex"), (0, "NAG-MIB", "erpsInstanceId"))
if mibBuilder.loadTexts: erpsPort1StatusEntry.setStatus('current')
erpsPort1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1Name.setStatus('current')
erpsPort1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1Status.setStatus('current')
erpsPort1SignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1SignalStatus.setStatus('current')
erpsPort1RRapsNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1RRapsNodeId.setStatus('current')
erpsPort1BPR = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1BPR.setStatus('current')
erpsPortTrackConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5))
erpsPortTrackConfigTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1), )
if mibBuilder.loadTexts: erpsPortTrackConfigTable.setStatus('current')
erpsPortTrackConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1), ).setIndexNames((0, "NAG-MIB", "erpsRingNameIndex"), (0, "NAG-MIB", "erpsRingPortIndex"))
if mibBuilder.loadTexts: erpsPortTrackConfigEntry.setStatus('current')
erpsRingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("port0", 0), ("port1", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRingPortIndex.setStatus('current')
erpsPortTrackProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cc", 1), ("physical-link-or-cc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsPortTrackProtocolType.setStatus('current')
erpsPortTrackCfmDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsPortTrackCfmDomain.setStatus('current')
erpsPortTrackCfmMaName = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsPortTrackCfmMaName.setStatus('current')
erpsPortTrackCfmMaNum = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsPortTrackCfmMaNum.setStatus('current')
erpsPortTrackCfmPvlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsPortTrackCfmPvlanId.setStatus('current')
erpsPortTrackCfmMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsPortTrackCfmMepId.setStatus('current')
erpsPortTrackCfmRmepId = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsPortTrackCfmRmepId.setStatus('current')
erpsPortTrackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unset", 0), ("set", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsPortTrackRowStatus.setStatus('current')
erpsPortStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6))
erpsPort0StatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1), )
if mibBuilder.loadTexts: erpsPort0StatisticsTable.setStatus('current')
erpsPort0StatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1), ).setIndexNames((0, "NAG-MIB", "erpsRingNameIndex"), (0, "NAG-MIB", "erpsInstanceId"))
if mibBuilder.loadTexts: erpsPort0StatisticsEntry.setStatus('current')
erpsPort0TxRapsNrPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0TxRapsNrPktCnt.setStatus('current')
erpsPort0RxRapsNrPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0RxRapsNrPktCnt.setStatus('current')
erpsPort0TxRapsNrRbPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0TxRapsNrRbPktCnt.setStatus('current')
erpsPort0RxRapsNrRbPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0RxRapsNrRbPktCnt.setStatus('current')
erpsPort0TxRapsSfPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0TxRapsSfPktCnt.setStatus('current')
erpsPort0RxRapsSfPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0RxRapsSfPktCnt.setStatus('current')
erpsPort0TxRapsMsPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0TxRapsMsPktCnt.setStatus('current')
erpsPort0RxRapsMsPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0RxRapsMsPktCnt.setStatus('current')
erpsPort0TxRapsFsPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0TxRapsFsPktCnt.setStatus('current')
erpsPort0RxRapsFsPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0RxRapsFsPktCnt.setStatus('current')
erpsPort0TxRapsEventPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0TxRapsEventPktCnt.setStatus('current')
erpsPort0RxRapsEventPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0RxRapsEventPktCnt.setStatus('current')
erpsPort0TxRapsTotalPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0TxRapsTotalPktCnt.setStatus('current')
erpsPort0RxRapsTotalPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort0RxRapsTotalPktCnt.setStatus('current')
erpsPort1StatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2), )
if mibBuilder.loadTexts: erpsPort1StatisticsTable.setStatus('current')
erpsPort1StatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1), ).setIndexNames((0, "NAG-MIB", "erpsRingNameIndex"), (0, "NAG-MIB", "erpsInstanceId"))
if mibBuilder.loadTexts: erpsPort1StatisticsEntry.setStatus('current')
erpsPort1TxRapsNrPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1TxRapsNrPktCnt.setStatus('current')
erpsPort1RxRapsNrPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1RxRapsNrPktCnt.setStatus('current')
erpsPort1TxRapsNrRbPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1TxRapsNrRbPktCnt.setStatus('current')
erpsPort1RxRapsNrRbPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1RxRapsNrRbPktCnt.setStatus('current')
erpsPort1TxRapsSfPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1TxRapsSfPktCnt.setStatus('current')
erpsPort1RxRapsSfPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1RxRapsSfPktCnt.setStatus('current')
erpsPort1TxRapsMsPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1TxRapsMsPktCnt.setStatus('current')
erpsPort1RxRapsMsPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1RxRapsMsPktCnt.setStatus('current')
erpsPort1TxRapsFsPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1TxRapsFsPktCnt.setStatus('current')
erpsPort1RxRapsFsPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1RxRapsFsPktCnt.setStatus('current')
erpsPort1TxRapsEventPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1TxRapsEventPktCnt.setStatus('current')
erpsPort1RxRapsEventPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1RxRapsEventPktCnt.setStatus('current')
erpsPort1TxRapsTotalPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1TxRapsTotalPktCnt.setStatus('current')
erpsPort1RxRapsTotalPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsPort1RxRapsTotalPktCnt.setStatus('current')
fdbMacInfoTable = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1))
fdbMacMaxTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacMaxTotalNum.setStatus('current')
fdbMacMaxStaticNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacMaxStaticNum.setStatus('current')
fdbMacMaxUnicastNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacMaxUnicastNum.setStatus('current')
fdbMacMaxMulticastNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacMaxMulticastNum.setStatus('current')
fdbMacCurTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacCurTotalNum.setStatus('current')
fdbMacCurStaticNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacCurStaticNum.setStatus('current')
fdbMacCurUnicastNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacCurUnicastNum.setStatus('current')
fdbMacCurHiddenNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacCurHiddenNum.setStatus('current')
fdbMacCurMulticastInsertNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacCurMulticastInsertNum.setStatus('current')
fdbMacCurMulticastWaitNum = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacCurMulticastWaitNum.setStatus('current')
fdbMacCounterTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacCounterTimeStamp.setStatus('current')
lldpGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 200, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpGlobalEnable.setStatus('current')
macNotificationMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1))
macNotificationGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1))
macNotificationInterfaceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 2))
macNotificationGlobalFeatureEnabled = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotificationGlobalFeatureEnabled.setStatus('current')
macNotificationNotificationInterval = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 2), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: macNotificationNotificationInterval.setStatus('current')
macNotificationMacAddressesLearnt = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNotificationMacAddressesLearnt.setStatus('current')
macNotificationMacAddressesRemoved = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNotificationMacAddressesRemoved.setStatus('current')
macNotificationNotificationsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotificationNotificationsEnabled.setStatus('current')
macNotificationNotificationsSent = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNotificationNotificationsSent.setStatus('current')
macNotificationHistTableMaxLength = MibScalar((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 7), Counter32()).setUnits('entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: macNotificationHistTableMaxLength.setStatus('current')
macNotificationHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 8), )
if mibBuilder.loadTexts: macNotificationHistoryTable.setStatus('current')
macNotificationHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 8, 1), ).setIndexNames((0, "NAG-MIB", "macNotificationHistIndex"))
if mibBuilder.loadTexts: macNotificationHistoryEntry.setStatus('current')
macNotificationHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNotificationHistIndex.setStatus('current')
macNotificationHistMacChangedMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNotificationHistMacChangedMsg.setStatus('current')
macNotificationHistTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 8, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNotificationHistTimestamp.setStatus('current')
macNotificationIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 2, 1), )
if mibBuilder.loadTexts: macNotificationIfConfigTable.setStatus('current')
macNotificationIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 2, 1, 1), )
if mibBuilder.loadTexts: macNotificationIfConfigEntry.setStatus('current')
macNotificationMacAddrLearntEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 2, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotificationMacAddrLearntEnable.setStatus('current')
macNotificationMacAddrRemovedEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 2, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotificationMacAddrRemovedEnable.setStatus('current')
antiArpscan = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100))
prohibitPortOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 1))
if mibBuilder.loadTexts: prohibitPortOID.setStatus('current')
recoverPortOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 2))
if mibBuilder.loadTexts: recoverPortOID.setStatus('current')
prohibitIPOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 3))
if mibBuilder.loadTexts: prohibitIPOID.setStatus('current')
prohibitIPExceedSlimitOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 4))
if mibBuilder.loadTexts: prohibitIPExceedSlimitOID.setStatus('current')
prohibitIPExceedHlimitOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 5))
if mibBuilder.loadTexts: prohibitIPExceedHlimitOID.setStatus('current')
recoverIPOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 6))
if mibBuilder.loadTexts: recoverIPOID.setStatus('current')
ipAddress = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 7))
if mibBuilder.loadTexts: ipAddress.setStatus('current')
arpSpeedLimitOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 8))
if mibBuilder.loadTexts: arpSpeedLimitOID.setStatus('current')
arpDiscardOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 9))
if mibBuilder.loadTexts: arpDiscardOID.setStatus('current')
recoverArpSpeedOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 10))
if mibBuilder.loadTexts: recoverArpSpeedOID.setStatus('current')
recoverArpDiscardOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 11))
if mibBuilder.loadTexts: recoverArpDiscardOID.setStatus('current')
fan = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 101))
fanAbnormalOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 101, 1))
if mibBuilder.loadTexts: fanAbnormalOID.setStatus('current')
fanNormalOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 101, 2))
if mibBuilder.loadTexts: fanNormalOID.setStatus('current')
fanInsertOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 101, 3))
if mibBuilder.loadTexts: fanInsertOID.setStatus('current')
fanPullOutOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 101, 4))
if mibBuilder.loadTexts: fanPullOutOID.setStatus('current')
power = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 102))
powerAbnormalOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 102, 1))
if mibBuilder.loadTexts: powerAbnormalOID.setStatus('current')
powerNormalOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 102, 2))
if mibBuilder.loadTexts: powerNormalOID.setStatus('current')
powerInsertOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 102, 3))
if mibBuilder.loadTexts: powerInsertOID.setStatus('current')
powerPullOutOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 102, 4))
if mibBuilder.loadTexts: powerPullOutOID.setStatus('current')
slotTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 103))
slotTemperatureHigherOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 103, 1))
if mibBuilder.loadTexts: slotTemperatureHigherOID.setStatus('current')
slotTemperatureLowerOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 103, 2))
if mibBuilder.loadTexts: slotTemperatureLowerOID.setStatus('current')
dhcpsnooping = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 104))
shutdownPort = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 104, 1))
if mibBuilder.loadTexts: shutdownPort.setStatus('current')
noShutdownPort = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 104, 2))
if mibBuilder.loadTexts: noShutdownPort.setStatus('current')
addBlackhole = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 104, 3))
if mibBuilder.loadTexts: addBlackhole.setStatus('current')
delBlackhole = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 104, 4))
if mibBuilder.loadTexts: delBlackhole.setStatus('current')
addBlockedinfo = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 104, 5))
if mibBuilder.loadTexts: addBlockedinfo.setStatus('current')
rateViolation = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 105))
rateViolationShutdownPort = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 105, 1))
if mibBuilder.loadTexts: rateViolationShutdownPort.setStatus('current')
rateViolationNoShutdownPort = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 105, 2))
if mibBuilder.loadTexts: rateViolationNoShutdownPort.setStatus('current')
portGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 106))
portGroupCreate = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 106, 1))
if mibBuilder.loadTexts: portGroupCreate.setStatus('current')
portGroupDelete = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 106, 2))
if mibBuilder.loadTexts: portGroupDelete.setStatus('current')
portGroupUpdate = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 106, 3))
if mibBuilder.loadTexts: portGroupUpdate.setStatus('current')
transceiverMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 110))
transceiverMonitorAlarmEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 110, 1))
if mibBuilder.loadTexts: transceiverMonitorAlarmEvent.setStatus('current')
transceiverMonitorWarnEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 110, 2))
if mibBuilder.loadTexts: transceiverMonitorWarnEvent.setStatus('current')
efmOam = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109))
efmOamDiscoverySuccess = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 1))
if mibBuilder.loadTexts: efmOamDiscoverySuccess.setStatus('current')
efmOamDiscoveryTimeout = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 2))
if mibBuilder.loadTexts: efmOamDiscoveryTimeout.setStatus('current')
efmOamLocalErrSymbolPeriodEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 3))
if mibBuilder.loadTexts: efmOamLocalErrSymbolPeriodEvent.setStatus('current')
efmOamLocalErrFramePeriodEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 4))
if mibBuilder.loadTexts: efmOamLocalErrFramePeriodEvent.setStatus('current')
efmOamLocalErrFrameEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 5))
if mibBuilder.loadTexts: efmOamLocalErrFrameEvent.setStatus('current')
efmOamLocalErrFrameSecondsSummaryEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 6))
if mibBuilder.loadTexts: efmOamLocalErrFrameSecondsSummaryEvent.setStatus('current')
efmOamLocalLinkFault = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 7))
if mibBuilder.loadTexts: efmOamLocalLinkFault.setStatus('current')
efmOamLocalCriticalEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 8))
if mibBuilder.loadTexts: efmOamLocalCriticalEvent.setStatus('current')
efmOamRemoteErrSymbolPeriodEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 9))
if mibBuilder.loadTexts: efmOamRemoteErrSymbolPeriodEvent.setStatus('current')
efmOamRemoteErrFramePeriodEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 10))
if mibBuilder.loadTexts: efmOamRemoteErrFramePeriodEvent.setStatus('current')
efmOamRemoteErrFrameEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 11))
if mibBuilder.loadTexts: efmOamRemoteErrFrameEvent.setStatus('current')
efmOamRemoteErrFrameSecondsSummaryEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 12))
if mibBuilder.loadTexts: efmOamRemoteErrFrameSecondsSummaryEvent.setStatus('current')
efmOamRemoteLinkFault = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 13))
if mibBuilder.loadTexts: efmOamRemoteLinkFault.setStatus('current')
efmOamRemoteCriticalEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 14))
if mibBuilder.loadTexts: efmOamRemoteCriticalEvent.setStatus('current')
efmOamRemoteDyingGasp = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 15))
if mibBuilder.loadTexts: efmOamRemoteDyingGasp.setStatus('current')
efmOamLoopBackSuccess = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 16))
if mibBuilder.loadTexts: efmOamLoopBackSuccess.setStatus('current')
efmOamLoopBackExit = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 17))
if mibBuilder.loadTexts: efmOamLoopBackExit.setStatus('current')
dyingGasp = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 114))
dyingGaspEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 114, 1))
if mibBuilder.loadTexts: dyingGaspEvent.setStatus('current')
copyRunningConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 116))
copyRunningConfigEvent = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 116, 1))
if mibBuilder.loadTexts: copyRunningConfigEvent.setStatus('current')
mstp = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 121))
mstpTcnTrapOID = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 121, 1))
if mibBuilder.loadTexts: mstpTcnTrapOID.setStatus('current')
powerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 122))
powerSupplyTrap = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 122, 2))
if mibBuilder.loadTexts: powerSupplyTrap.setStatus('current')
powerPresentTrap = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 122, 4))
if mibBuilder.loadTexts: powerPresentTrap.setStatus('current')
erpsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 125))
swERPSSFDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 125, 1))
if mibBuilder.loadTexts: swERPSSFDetectedTrap.setStatus('current')
swERPSSFClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 125, 2))
if mibBuilder.loadTexts: swERPSSFClearedTrap.setStatus('current')
authLogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 40418, 7, 101, 126))
authLogin = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 126, 1))
if mibBuilder.loadTexts: authLogin.setStatus('current')
authLogout = NotificationType((1, 3, 6, 1, 4, 1, 40418, 7, 101, 126, 2))
if mibBuilder.loadTexts: authLogout.setStatus('current')
mibBuilder.exportSymbols("NAG-MIB", powerPullOutOID=powerPullOutOID, flowCounterOutMulticastPkts=flowCounterOutMulticastPkts, aclActiveDirection=aclActiveDirection, dvmrpRouteTable=dvmrpRouteTable, portGroupPortListEntry=portGroupPortListEntry, qos2MapDSCPtoDP=qos2MapDSCPtoDP, ripStatisticsReset=ripStatisticsReset, arpSecurityConvertALL=arpSecurityConvertALL, portMacCountLimitConfigNum=portMacCountLimitConfigNum, ospfNetworkAreaStatus=ospfNetworkAreaStatus, qos3PolicyMapGroupName=qos3PolicyMapGroupName, erpsInstanceStatusTable=erpsInstanceStatusTable, sumFlowCouterEntry=sumFlowCouterEntry, dhcpPoolNextServerTable=dhcpPoolNextServerTable, mirrorDestEntry=mirrorDestEntry, radiusAuthenServerHostPrimary=radiusAuthenServerHostPrimary, qos3McQueueBindWidthPortIndex=qos3McQueueBindWidthPortIndex, showmlsqosinterfaceEntry=showmlsqosinterfaceEntry, qos2PolicyAggregatePolicer=qos2PolicyAggregatePolicer, qosSetEXPimposition=qosSetEXPimposition, macStandardSrcMac=macStandardSrcMac, noShutdownPort=noShutdownPort, sysPowerState=sysPowerState, aaaAccountBindingDHCP=aaaAccountBindingDHCP, erpsPortTrackCfmMaNum=erpsPortTrackCfmMaNum, portBandWidthUsage=portBandWidthUsage, ipExternSrcIpWild=ipExternSrcIpWild, stormControlPortIndex=stormControlPortIndex, lpbackDetecCtrlMode=lpbackDetecCtrlMode, dcscm=dcscm, erpsPort0TxRapsNrRbPktCnt=erpsPort0TxRapsNrRbPktCnt, qos3ScheduleQueueInputType=qos3ScheduleQueueInputType, sysMonitorAlarmBindSet=sysMonitorAlarmBindSet, DisplayString=DisplayString, SnmpAdminString=SnmpAdminString, ddmTranscDiagnosisTable=ddmTranscDiagnosisTable, dvmrpInterfaceSentRoutes=dvmrpInterfaceSentRoutes, dhcpSnoopingPortIndex=dhcpSnoopingPortIndex, qosPortBindType=qosPortBindType, erpsPort0Status=erpsPort0Status, priIgmpSnoopingleave=priIgmpSnoopingleave, macStatus=macStatus, mirrorDestIP=mirrorDestIP, qos2MapDSCPtoIntpIntPriovalue=qos2MapDSCPtoIntpIntPriovalue, dhcpSnoopingRequestBindingVid=dhcpSnoopingRequestBindingVid, dhcpRelayInformationOptionDelimiter=dhcpRelayInformationOptionDelimiter, portGroupMemberIndex=portGroupMemberIndex, translationNewVlanid=translationNewVlanid, qos2PortCos=qos2PortCos, qosPortPriority=qosPortPriority, lldpPrivateInfo=lldpPrivateInfo, showQos3QueueStatisticsEntry=showQos3QueueStatisticsEntry, ipStandardPriority=ipStandardPriority, mirrorSrcPort=mirrorSrcPort, ddmDiagBiasLowAlarmThreshold=ddmDiagBiasLowAlarmThreshold, qosMapDscp3=qosMapDscp3, portHybridUntaggedAllowedVlanExcept=portHybridUntaggedAllowedVlanExcept, qos3PolicyconformSetDp=qos3PolicyconformSetDp, sysCPUThirtySecondIdle=sysCPUThirtySecondIdle, dvmrpRouteNextHopSource=dvmrpRouteNextHopSource, qosClassMapV6Dscp=qosClassMapV6Dscp, qosAggPolicerConformActionChangeValue=qosAggPolicerConformActionChangeValue, qos2MapCostoIntp6=qos2MapCostoIntp6, qos2MapDSCPtoDSCP3=qos2MapDSCPtoDSCP3, ipv6ExternDstPort1=ipv6ExternDstPort1, ripNetworkAddrStatus=ripNetworkAddrStatus, dvmrpRouteUpTime=dvmrpRouteUpTime, dhcpPoolNextServerIpAddress4=dhcpPoolNextServerIpAddress4, dvmrpReachableRoutes=dvmrpReachableRoutes, portGroupCreate=portGroupCreate, qos3QueueWeight7=qos3QueueWeight7, dcscmVMacbindingEntry=dcscmVMacbindingEntry, ddmTransSerialModelName=ddmTransSerialModelName, qos2MapExptoIntp2=qos2MapExptoIntp2, dcscmscEnable=dcscmscEnable, erpsDescription=erpsDescription, qos3PolicyCBSKbps=qos3PolicyCBSKbps, qosAggPolicerName=qosAggPolicerName, qos3PolicyconformSetPrec=qos3PolicyconformSetPrec, dcscm6dcAclPermitOrDeny=dcscm6dcAclPermitOrDeny, erpsGroup=erpsGroup, qos3NodeScheduleEntry=qos3NodeScheduleEntry, stormControlPortTable=stormControlPortTable, nameAclGroupMatchOrder=nameAclGroupMatchOrder, dhcpSnoopingAckBindingFlag=dhcpSnoopingAckBindingFlag, ospfAutoCost=ospfAutoCost, macStandardPriority=macStandardPriority, translatPortIndex=translatPortIndex, qos3StatisticClearTable=qos3StatisticClearTable, poeDisconnect=poeDisconnect, ifBer=ifBer, numAclGroupSubitemNum=numAclGroupSubitemNum, clusterv2Status=clusterv2Status, macBlackholeEntry=macBlackholeEntry, qos3ScheduleQueueAlgorithmNodeID=qos3ScheduleQueueAlgorithmNodeID, qosPortEntry=qosPortEntry, dhcpPoolDnsSerStatus=dhcpPoolDnsSerStatus, ddmDiagVoltLowWarnThreshold=ddmDiagVoltLowWarnThreshold, qos3MapIntpExtendTable=qos3MapIntpExtendTable, qos3QueueBindWidthStatus=qos3QueueBindWidthStatus, qos3AggPolicyconformSetCos=qos3AggPolicyconformSetCos, macIpExternTos=macIpExternTos, clusterv2StatusClusterName=clusterv2StatusClusterName, portDiscardPktType=portDiscardPktType, ripTimeoutTime=ripTimeoutTime, radiusAcctServerHostKey=radiusAcctServerHostKey, erpsPortTrackCfmMepId=erpsPortTrackCfmMepId, prisecurity=prisecurity, urpfEnable=urpfEnable, qos2ServicePolicyStatus=qos2ServicePolicyStatus, flowCounterInMulticastPkts=flowCounterInMulticastPkts, portGroupMemberTimeout=portGroupMemberTimeout, qos2MapIntptoEXP1=qos2MapIntptoEXP1, priPortEntry=priPortEntry, aclActiveType=aclActiveType, ipHttpState=ipHttpState, ntpEntNTPCompliance=ntpEntNTPCompliance, portSecurityMacAddressVlanIndex=portSecurityMacAddressVlanIndex, dcscmscAclSourceIp=dcscmscAclSourceIp, macNotificationMacAddrRemovedEnable=macNotificationMacAddrRemovedEnable, lastFiveSecInPktsPerSec=lastFiveSecInPktsPerSec, dhcpPoolDefaultRouterIpAddress1=dhcpPoolDefaultRouterIpAddress1, qosMapEXP=qosMapEXP, qos3ScheduleBindWidthLevelID=qos3ScheduleBindWidthLevelID, qos3QueueWeightPortIndex=qos3QueueWeightPortIndex, arpStaticStatus=arpStaticStatus, qosClassMapTable=qosClassMapTable, clearVlanFlowCounter=clearVlanFlowCounter, priPowerIndex=priPowerIndex, dhcpPoolAddress=dhcpPoolAddress, qos2MapDSCPtoIntp4=qos2MapDSCPtoIntp4, dhcpRelayForwardUdpBootps=dhcpRelayForwardUdpBootps, qos2SetDscp=qos2SetDscp, priSpanningTree=priSpanningTree, dhcpSnoopingInformationEnalbe=dhcpSnoopingInformationEnalbe, portMacCountLimitViolationMode=portMacCountLimitViolationMode, qos3PolicyExceedSetDp=qos3PolicyExceedSetDp, qos2MapIntptoEXP3=qos2MapIntptoEXP3, mirrorDestTable=mirrorDestTable, qos3SercivePolicyStatus=qos3SercivePolicyStatus, qos3NodeScheduleStatus=qos3NodeScheduleStatus, portSecurity=portSecurity, ddmDiagRXPowerHighAlarmThreshold=ddmDiagRXPowerHighAlarmThreshold, macExternDstMac=macExternDstMac, radiusAcctServerHostPort=radiusAcctServerHostPort, dhcpPoolWinsIpAddress6=dhcpPoolWinsIpAddress6, qos3McQueueBindWidthTable=qos3McQueueBindWidthTable, qos2PortTable=qos2PortTable, fileUserPassword=fileUserPassword, dhcpPoolDnsSerIpAddress6=dhcpPoolDnsSerIpAddress6, macNotificationGlobalObjects=macNotificationGlobalObjects, qos3McQueueBindWidthMax=qos3McQueueBindWidthMax, arpSecurityTable=arpSecurityTable, portSecurityVioMode=portSecurityVioMode, powerInsertOID=powerInsertOID, qosPortBindTable=qosPortBindTable, dhcpPoolExpandstatus=dhcpPoolExpandstatus, mvlanAssoPortTagid=mvlanAssoPortTagid, sntpServer6Address=sntpServer6Address, ipv6StandardAct=ipv6StandardAct, ddmTransSerialNo=ddmTransSerialNo, dcscmpcSourceIp=dcscmpcSourceIp, ddmTranscAlarmTable=ddmTranscAlarmTable, ipv6ExternIndex=ipv6ExternIndex, switchBootImgPrimary=switchBootImgPrimary, macNotificationNotificationsEnabled=macNotificationNotificationsEnabled, dhcpSnoopingStatisticDiscardPktsNum=dhcpSnoopingStatisticDiscardPktsNum, dhcpLeaseTimePoolName=dhcpLeaseTimePoolName, dcscmdcPortbindingAclNumber=dcscmdcPortbindingAclNumber, poePortIndex=poePortIndex, showpolicymapTable=showpolicymapTable, qosMapDscp2=qosMapDscp2, qos2SetClassMapName=qos2SetClassMapName, mirrorRspanSessionStatus=mirrorRspanSessionStatus, portGroupTable=portGroupTable, vsfCount=vsfCount, mvlanPortInfoTable=mvlanPortInfoTable, qos2ClassMapDscp=qos2ClassMapDscp, dcscm6dcPortbindingTable=dcscm6dcPortbindingTable, qos3MapDscpTable=qos3MapDscpTable, mirrorRspanSessionVlan=mirrorRspanSessionVlan, os=os, dhcpPoolWinsIpAddress2=dhcpPoolWinsIpAddress2, ipStaticRouteExtNextHop=ipStaticRouteExtNextHop, qos3PortEntry=qos3PortEntry, ipStaticRouteExtEntry=ipStaticRouteExtEntry, showQos3VlanGreenCounter=showQos3VlanGreenCounter, dvmrpNeighborMinorVersion=dvmrpNeighborMinorVersion, clearSumFlowCounter=clearSumFlowCounter, dhcpRelayOptionSelfDefinedRemoteIDFormat=dhcpRelayOptionSelfDefinedRemoteIDFormat, ntpEntStatusActiveRefSourceId=ntpEntStatusActiveRefSourceId, qosPolicyEntry=qosPolicyEntry, dnsEnable=dnsEnable, qos2MapIntptoDSCP6=qos2MapIntptoDSCP6, priCable=priCable, portName=portName, sysCPUFiveMinuteIdle=sysCPUFiveMinuteIdle, ospfNetworkAreaAddressTable=ospfNetworkAreaAddressTable, ripNetworkInterfaceTable=ripNetworkInterfaceTable, efmOamLocalCriticalEvent=efmOamLocalCriticalEvent, mirrorSrcIP=mirrorSrcIP, qosPolicyConformActionChangeValue=qosPolicyConformActionChangeValue, portLEDTimeRangeEndTime=portLEDTimeRangeEndTime, macBlackholeTable=macBlackholeTable, dhcpSnoopingInformationOptionDelimiter=dhcpSnoopingInformationOptionDelimiter, authLogGroup=authLogGroup, qos2PolicyClassMap=qos2PolicyClassMap, qos2MapCostoIntp5=qos2MapCostoIntp5, vlanTranslationTable=vlanTranslationTable, dhcpSnoopingStatisticRequestBindingNum=dhcpSnoopingStatisticRequestBindingNum, qos3QueueWeight6=qos3QueueWeight6, qos3ServicePolicyTable=qos3ServicePolicyTable, clusterv2CandidateEntry=clusterv2CandidateEntry, qos2MapExptoIntp7=qos2MapExptoIntp7, erpsPort1TxRapsNrPktCnt=erpsPort1TxRapsNrPktCnt, erpsVersion=erpsVersion, showQos3MCQueueStatisticsDropedPacket=showQos3MCQueueStatisticsDropedPacket, psSecurityPortLock=psSecurityPortLock, wanIfOutUtil=wanIfOutUtil, dnsServerStatus=dnsServerStatus, fdbMacCurUnicastNum=fdbMacCurUnicastNum, portType=portType, qosPortBindPolicy=qosPortBindPolicy, dhcpRelayOption82SubscriberID=dhcpRelayOption82SubscriberID, erpsClearCommand=erpsClearCommand, mvlanStatus=mvlanStatus, iPAddrStatus=iPAddrStatus, sysUserNamePrivilege=sysUserNamePrivilege, erpsPort1BPR=erpsPort1BPR, erpsPort0RxRapsNrRbPktCnt=erpsPort0RxRapsNrRbPktCnt, qos2SetnextHop=qos2SetnextHop, qos2PolicyStatus=qos2PolicyStatus, dcscmscPortbindingEntry=dcscmscPortbindingEntry, iPAddrTable=iPAddrTable, securityIpEntry=securityIpEntry, dcscm6scPortbindingPortName=dcscm6scPortbindingPortName, macIpExternTimeRangeName=macIpExternTimeRangeName, ospfRedistributeProtocol=ospfRedistributeProtocol, sshConnUserName=sshConnUserName, portSecurityAgingTime=portSecurityAgingTime, qos2MapDSCPtoDSCPStatus=qos2MapDSCPtoDSCPStatus, dhcpRelayOption82Enalbe=dhcpRelayOption82Enalbe, priIgmpSnoopingQueryRobustness=priIgmpSnoopingQueryRobustness, timeRangeTable=timeRangeTable, erpsPortTrackConfigEntry=erpsPortTrackConfigEntry, sshConnStatus=sshConnStatus, ipExternAclEntry=ipExternAclEntry, showpolicymapEntry=showpolicymapEntry, ddmDiagRXPowerLowWarnThreshold=ddmDiagRXPowerLowWarnThreshold, priIgmpSnoopingMib=priIgmpSnoopingMib, slotTemperatureHigherOID=slotTemperatureHigherOID, priPowerSupply=priPowerSupply, qos3StatisticClearStatus=qos3StatisticClearStatus, qos3QueueBindWidthPortIndex=qos3QueueBindWidthPortIndex)
mibBuilder.exportSymbols("NAG-MIB", timeRangeIndex=timeRangeIndex, dhcpPoolStatus=dhcpPoolStatus, dcscmdcAclSubNumber=dcscmdcAclSubNumber, portHybridTaggedAllowedVlanRemove=portHybridTaggedAllowedVlanRemove, qos2MapExptoDP=qos2MapExptoDP, qosPortQueueWeight5=qosPortQueueWeight5, dcscmpccos=dcscmpccos, l3=l3, dhcpPoolWinsIpAddress7=dhcpPoolWinsIpAddress7, dyingGaspEvent=dyingGaspEvent, dnsDynHostName=dnsDynHostName, qos2PolicyViolateActionChangeValue=qos2PolicyViolateActionChangeValue, dhcpServerLeaseBindingMac=dhcpServerLeaseBindingMac, mirrorSrcCpuStatus=mirrorSrcCpuStatus, sysMemUsage=sysMemUsage, dcscmscAclEntry=dcscmscAclEntry, dhcpPool=dhcpPool, qos3AggPolicyExceedSetCos=qos3AggPolicyExceedSetCos, qos3QueueWeight3=qos3QueueWeight3, priPppoeIaRemoteIdFormat=priPppoeIaRemoteIdFormat, nameAclGroupEntry=nameAclGroupEntry, qos3AggPolicyConformAction=qos3AggPolicyConformAction, qos2MapExptoDP4=qos2MapExptoDP4, mirrorSrcCpuDirect=mirrorSrcCpuDirect, portSecurityVlanCurMacNum=portSecurityVlanCurMacNum, qos3ScheduleBindWidthNodeID=qos3ScheduleBindWidthNodeID, vlanOutBroadcastPkts=vlanOutBroadcastPkts, vsfSlotIndex=vsfSlotIndex, amPortStatus=amPortStatus, qosPortQueueWeight2=qosPortQueueWeight2, efmOamRemoteDyingGasp=efmOamRemoteDyingGasp, mstpPortTCFlush=mstpPortTCFlush, ddmTransSerialName=ddmTransSerialName, dcscm6scAclDestinationMask=dcscm6scAclDestinationMask, qos3QueueWredDpStart=qos3QueueWredDpStart, qos3AggPolicyExceedSetIntp=qos3AggPolicyExceedSetIntp, erpsRingNameIndex=erpsRingNameIndex, qosClassMapName=qosClassMapName, erpsManualSwitch=erpsManualSwitch, radiusAcctServerHostTable=radiusAcctServerHostTable, qos3EtsPortIndex=qos3EtsPortIndex, erpsRingPortIndex=erpsRingPortIndex, qos2ClassMapTable=qos2ClassMapTable, dcscmVMacbindingTable=dcscmVMacbindingTable, dhcpRelayOptionSelfDefinedSubscriberID=dhcpRelayOptionSelfDefinedSubscriberID, dhcpSnoopingPortActionEntry=dhcpSnoopingPortActionEntry, qos2MapExptoIntp3=qos2MapExptoIntp3, dhcpSnoopingAckBindingInfoEntry=dhcpSnoopingAckBindingInfoEntry, radiusAutServerHostAccessMode=radiusAutServerHostAccessMode, slotTemperatureLowerOID=slotTemperatureLowerOID, stormControlSuppressRateUnit=stormControlSuppressRateUnit, InetAddressType=InetAddressType, qosPolicyExceedAction=qosPolicyExceedAction, qosPortQueueWeight7=qosPortQueueWeight7, ddmTranscDiagnosisEntry=ddmTranscDiagnosisEntry, clusterv2MemberDeviceType=clusterv2MemberDeviceType, dcscm6VMacbindingEntry=dcscm6VMacbindingEntry, portSecurityMacAddressEntry=portSecurityMacAddressEntry, aclStatisticClearStatus=aclStatisticClearStatus, portRateLimit=portRateLimit, qos2MapDSCPtoDP5=qos2MapDSCPtoDP5, aclActiveBindType=aclActiveBindType, qos3NodeSchedulePolicyIndex=qos3NodeSchedulePolicyIndex, aclActiveStatus=aclActiveStatus, dvmrpInterfaceRcvBadPkts=dvmrpInterfaceRcvBadPkts, dhcpRelayInformationOptionSubscriberIDFormat=dhcpRelayInformationOptionSubscriberIDFormat, ripInstabilityPreventingEntry=ripInstabilityPreventingEntry, qos2MapDSCPtoIntp2=qos2MapDSCPtoIntp2, qos2MapDSCPtoDSCP2=qos2MapDSCPtoDSCP2, swERPSSFDetectedTrap=swERPSSFDetectedTrap, ipStandardSrcIp=ipStandardSrcIp, qos2SetDefaultPBR=qos2SetDefaultPBR, qos3SetIpv6DefaultPBR=qos3SetIpv6DefaultPBR, sysStackFlag=sysStackFlag, erpsPort1StatusTable=erpsPort1StatusTable, mstpMaxhop=mstpMaxhop, vlanOutMulticastPkts=vlanOutMulticastPkts, qos3SetIntp=qos3SetIntp, dhcpSnoopingAlarmInfoBlackholeMAC=dhcpSnoopingAlarmInfoBlackholeMAC, dhcpPoolAddressType=dhcpPoolAddressType, qos3EtsTable=qos3EtsTable, dhcpPoolDefaultRouterIpAddress2=dhcpPoolDefaultRouterIpAddress2, dvmrpRouteNextHopEntry=dvmrpRouteNextHopEntry, ipv6ExternDstPort2=ipv6ExternDstPort2, dhcpSnoopingUserControl=dhcpSnoopingUserControl, sysBootInfoIndex=sysBootInfoIndex, showQos3MCQueueStatisticsEntry=showQos3MCQueueStatisticsEntry, switchInfoEntry=switchInfoEntry, sntpMgt=sntpMgt, flowCounterInUcastPkts=flowCounterInUcastPkts, urpfPortAllowDefault=urpfPortAllowDefault, qos3QueueWredQueueId=qos3QueueWredQueueId, erpsProtectedInstance=erpsProtectedInstance, ntpEntSoftwareVersion=ntpEntSoftwareVersion, EnabledStatusPrivate=EnabledStatusPrivate, switchTemperature=switchTemperature, sysStackUnitNumber=sysStackUnitNumber, qos2MapDSCPtoDSCP=qos2MapDSCPtoDSCP, dhcpSnoopingTrust=dhcpSnoopingTrust, priIgmpSnoopingL2gen=priIgmpSnoopingL2gen, qos3PolicyTable=qos3PolicyTable, dcscmdcEnable=dcscmdcEnable, qos2AggPolicyCBSKbps=qos2AggPolicyCBSKbps, rpsPowerVoltage=rpsPowerVoltage, qos3SetDp=qos3SetDp, qos3PolicyCIRKbps=qos3PolicyCIRKbps, dhcpServerLeaseBindingEntry=dhcpServerLeaseBindingEntry, dvmrpInterfaceMetric=dvmrpInterfaceMetric, numAclGroupStatus=numAclGroupStatus, priIgmpSnoopingPortAuthEnable=priIgmpSnoopingPortAuthEnable, lpbackDetecCtrlIndex=lpbackDetecCtrlIndex, qos3ClassMapUsedTime=qos3ClassMapUsedTime, dhcpPoolDnsSerIpAddress1=dhcpPoolDnsSerIpAddress1, indicatesType=indicatesType, dhcpSnoopingActionStatus=dhcpSnoopingActionStatus, portTruckAllowedVlanEntry=portTruckAllowedVlanEntry, sntpServer6Status=sntpServer6Status, qos2MapDSCPtoDSCP8=qos2MapDSCPtoDSCP8, qos2PolicyName=qos2PolicyName, ddmDiagTempLowWarnThreshold=ddmDiagTempLowWarnThreshold, dhcpSnoopingStatisticTable=dhcpSnoopingStatisticTable, sysFreeFlashSize=sysFreeFlashSize, timeRangeMapStatus=timeRangeMapStatus, vsfModuleType=vsfModuleType, showmlsqosinterfaceTable=showmlsqosinterfaceTable, macNotificationIfConfigEntry=macNotificationIfConfigEntry, dnsDynHostIpAddr=dnsDynHostIpAddr, erpsPort0RxRapsNrPktCnt=erpsPort0RxRapsNrPktCnt, sysAddUserStatus=sysAddUserStatus, fileIPaddress=fileIPaddress, qos2SetStatus=qos2SetStatus, qosClassMapStatus=qosClassMapStatus, qos2MapCostoIntp7=qos2MapCostoIntp7, qos2ClassMapV6Flow=qos2ClassMapV6Flow, qos2PolicyType=qos2PolicyType, timeRangeType=timeRangeType, qos2MapExptoDP1=qos2MapExptoDP1, vlanInMulticastPkts=vlanInMulticastPkts, dcscm6pccos=dcscm6pccos, SNR=SNR, qos3AggregatePolicyTable=qos3AggregatePolicyTable, TimeFilter=TimeFilter, dcscm6dcAclDestinationIp=dcscm6dcAclDestinationIp, qos3PolicyAggregatePolicer=qos3PolicyAggregatePolicer, qosPortQueueWeight1=qosPortQueueWeight1, qos3MapDscpEntry=qos3MapDscpEntry, qos2MapCostoDP7=qos2MapCostoDP7, swCPUMac=swCPUMac, sshUserType=sshUserType, mstpInstancePortPriority=mstpInstancePortPriority, mstpInstancePortDesignatedBridgeID=mstpInstancePortDesignatedBridgeID, dhcpSnoopingUserControlMaxNum=dhcpSnoopingUserControlMaxNum, fdbMacCurHiddenNum=fdbMacCurHiddenNum, priIgmpSnoopingEntry=priIgmpSnoopingEntry, mstpInstancePortState=mstpInstancePortState, portUtilIndex=portUtilIndex, erpsPort0TxRapsEventPktCnt=erpsPort0TxRapsEventPktCnt, priIgmpSnoopingNoPort=priIgmpSnoopingNoPort, macIpExternSrcOp=macIpExternSrcOp, portRateLimitConfigAllNum=portRateLimitConfigAllNum, sysBootImgPrimary=sysBootImgPrimary, ipv6ExternAct=ipv6ExternAct, qosClassMapDscp=qosClassMapDscp, arpStaticIfindex=arpStaticIfindex, lldpGlobalEnable=lldpGlobalEnable, qos3SetIpv6NextHop=qos3SetIpv6NextHop, dvmrpPruneEntry=dvmrpPruneEntry, dhcpPoolOptionEntry=dhcpPoolOptionEntry, speedDuplex=speedDuplex, qos3PolicyType=qos3PolicyType, vlanRowStatus=vlanRowStatus, qosMapDscp5=qosMapDscp5, urpfPortStatus=urpfPortStatus, dhcpSnoopingAlarmInfoRecoveryActionStatus=dhcpSnoopingAlarmInfoRecoveryActionStatus, priQos2=priQos2, dvmrpVersionString=dvmrpVersionString, sumFlowCounterInOctets=sumFlowCounterInOctets, dhcpPoolDefaultRouterIpAddress7=dhcpPoolDefaultRouterIpAddress7, ripNetworkAddrPrefixLen=ripNetworkAddrPrefixLen, dcscmSipbindingAclNumber=dcscmSipbindingAclNumber, clusterv2CandidateMacAddress=clusterv2CandidateMacAddress, mstpMode=mstpMode, erpsPort1RxRapsTotalPktCnt=erpsPort1RxRapsTotalPktCnt, ddmTransSerialVendorName=ddmTransSerialVendorName, dhcpSnoopingInformationOptionRemoteID=dhcpSnoopingInformationOptionRemoteID, macExternStatus=macExternStatus, poeCurrentPower=poeCurrentPower, qos2ClassMapType=qos2ClassMapType, macNotificationHistIndex=macNotificationHistIndex, ntpEntStatusStratum=ntpEntStatusStratum, erpsPort0TxRapsNrPktCnt=erpsPort0TxRapsNrPktCnt, qos3PortTrust=qos3PortTrust, sshTimeout=sshTimeout, ddmDiagVoltLowAlarmThreshold=ddmDiagVoltLowAlarmThreshold, clusterv2StatusLoss_count=clusterv2StatusLoss_count, dcscmpcSourceMasklen=dcscmpcSourceMasklen, dvmrpInterfaceEntry=dvmrpInterfaceEntry, radiusAutServerHostKey=radiusAutServerHostKey, qos2ClassMapCos=qos2ClassMapCos, qos3AggPolicyconformSetPrec=qos3AggPolicyconformSetPrec, dcscmSipbindingEntry=dcscmSipbindingEntry, dcscmSipbindingSipAddress=dcscmSipbindingSipAddress, efmOamRemoteErrFramePeriodEvent=efmOamRemoteErrFramePeriodEvent, qos3SetIpDscp=qos3SetIpDscp, erpsForcedSwitch=erpsForcedSwitch, powerPresentTrap=powerPresentTrap, priIgmpSnoopingLimitPortSourceNum=priIgmpSnoopingLimitPortSourceNum, macStandardSrcMacWild=macStandardSrcMacWild, dhcpSnoopingInformationOptionSubscriberIDFormat=dhcpSnoopingInformationOptionSubscriberIDFormat, dvmrpNeighborRcvBadPkts=dvmrpNeighborRcvBadPkts, qos3PolicyMapGroupIsExt=qos3PolicyMapGroupIsExt, ipExternSrcIp=ipExternSrcIp, timeRangeEndDate=timeRangeEndDate, qos3PolicyExceedSetPrec=qos3PolicyExceedSetPrec, sysHardwareVersion=sysHardwareVersion, dnsDynHostEntry=dnsDynHostEntry, sysFanInserted=sysFanInserted, dcscmSipbindingTable=dcscmSipbindingTable, erpsPort0RRapsNodeId=erpsPort0RRapsNodeId, dhcpSnoopingActionType=dhcpSnoopingActionType, sysMonitorAlarmTable=sysMonitorAlarmTable, flowCounterTable=flowCounterTable, macIpExternSrcPort1=macIpExternSrcPort1, qos3AggPolicyconformSetIntp=qos3AggPolicyconformSetIntp, vlanFlowCounterTable=vlanFlowCounterTable, ipv6ExternSrcOp=ipv6ExternSrcOp, erpsPortStatistics=erpsPortStatistics, sntpServer6Entry=sntpServer6Entry, recoverIPOID=recoverIPOID, dhcpServerLeaseBindingTable=dhcpServerLeaseBindingTable, priIgmpSnoopingSourceNum=priIgmpSnoopingSourceNum, dhcpSnoopingBlockedInfoRecordingTime=dhcpSnoopingBlockedInfoRecordingTime, aclStatisticClearEntry=aclStatisticClearEntry, erpsPort1TxRapsTotalPktCnt=erpsPort1TxRapsTotalPktCnt, qos2PolicyViolateActionChange=qos2PolicyViolateActionChange, qos3StatisticClearBindType=qos3StatisticClearBindType, sysCPUMac=sysCPUMac, dcscm6scPortbindingAclNumber=dcscm6scPortbindingAclNumber, erpsRingPort1=erpsRingPort1, dhcpPoolDefaultRouterIpAddress8=dhcpPoolDefaultRouterIpAddress8, stormControlSuppressType=stormControlSuppressType, qos2PolicyExceedActionChange=qos2PolicyExceedActionChange, radiusAuthenServerHostPort=radiusAuthenServerHostPort, NtpStratum=NtpStratum, arpStacticTable=arpStacticTable, clusterv2Base=clusterv2Base, ddmAlarmIfIndex=ddmAlarmIfIndex, qosPortBindIndex=qosPortBindIndex, aclActiveStatistic=aclActiveStatistic, tacacsServerKey=tacacsServerKey, ipExternSrcPort2=ipExternSrcPort2, fdbMacCurTotalNum=fdbMacCurTotalNum, aclConfig=aclConfig, ipExternTimeRangeName=ipExternTimeRangeName)
mibBuilder.exportSymbols("NAG-MIB", qos2MapExptoDP8=qos2MapExptoDP8, dhcpRelayServerAddrTable=dhcpRelayServerAddrTable, qos3ScheduleQueueInputQueueID=qos3ScheduleQueueInputQueueID, poePortMode=poePortMode, ddmDiagTXPowerLowWarnThreshold=ddmDiagTXPowerLowWarnThreshold, vlanOutOctets=vlanOutOctets, priIgmpSnoopingPortCtrlPktDrop=priIgmpSnoopingPortCtrlPktDrop, showclassmapmatch=showclassmapmatch, arpStaticPortIndex=arpStaticPortIndex, stormControlPortEntry=stormControlPortEntry, ipExternSrcPort1=ipExternSrcPort1, dhcpPoolWinsIpAddress1=dhcpPoolWinsIpAddress1, timeRangeStartTime=timeRangeStartTime, mstpTcnTrapOID=mstpTcnTrapOID, erpsPort1RRapsNodeId=erpsPort1RRapsNodeId, mirrorReflectorPortEntry=mirrorReflectorPortEntry, portSecurityCurMacNum=portSecurityCurMacNum, clusterv2CommanderAutoAddMem=clusterv2CommanderAutoAddMem, dhcpPoolOptionId=dhcpPoolOptionId, priIgmpSnoopingLimitPortEntry=priIgmpSnoopingLimitPortEntry, ntpEntTimePrecision=ntpEntTimePrecision, qosSetv6Dscp=qosSetv6Dscp, qosSetStatus=qosSetStatus, qosPortMutation=qosPortMutation, ntpEntTimeResolution=ntpEntTimeResolution, ntpEntStatusProtocolError=ntpEntStatusProtocolError, qos3ServicePolicyBindType=qos3ServicePolicyBindType, priMrppRingEntry=priMrppRingEntry, erpsRingPort1ExistFlag=erpsRingPort1ExistFlag, portTruckAllowedVlanAdd=portTruckAllowedVlanAdd, qos2MapDSCPtoIntp5=qos2MapDSCPtoIntp5, tacacsServerHostPort=tacacsServerHostPort, portLEDTimeRangeTable=portLEDTimeRangeTable, vlanTranslationTypeTable=vlanTranslationTypeTable, ospfNssaStatus=ospfNssaStatus, dcscmdcAclSourceIp=dcscmdcAclSourceIp, qos2MapCostoIntp=qos2MapCostoIntp, qosPortQueueWeight8=qosPortQueueWeight8, securityIpAddress=securityIpAddress, qosAggPolicerPeakKbps=qosAggPolicerPeakKbps, clusterv2Create=clusterv2Create, nameAclGroupStatus=nameAclGroupStatus, qos3QueueWredDpEnd=qos3QueueWredDpEnd, qosPolicyStatus=qosPolicyStatus, recoverArpSpeedOID=recoverArpSpeedOID, recoverArpDiscardOID=recoverArpDiscardOID, tacacsServerHostTimeout=tacacsServerHostTimeout, dhcpSnoopingRequestBindingLease=dhcpSnoopingRequestBindingLease, portSecurityMacAddressTable=portSecurityMacAddressTable, sysSlotIndex=sysSlotIndex, dcscmSipbindingSipMask=dcscmSipbindingSipMask, radiusAcctServerHostStatus=radiusAcctServerHostStatus, radiusAuthenServerHostTable=radiusAuthenServerHostTable, qos2SetVrf=qos2SetVrf, qos3QueueWredPortIndex=qos3QueueWredPortIndex, ipv6ExternSubIndex=ipv6ExternSubIndex, switchFlashSize=switchFlashSize, ipExternDstPort2=ipExternDstPort2, NAG=NAG, showQos3VlanTable=showQos3VlanTable, ipStaticRouteExtStatus=ipStaticRouteExtStatus, mstpInstancePortID=mstpInstancePortID, qos2MapDSCPtoDPStatus=qos2MapDSCPtoDPStatus, qos3MapTable=qos3MapTable, efmOamDiscoveryTimeout=efmOamDiscoveryTimeout, dcscmdcAclTable=dcscmdcAclTable, mirrorRspanSession=mirrorRspanSession, delBlackhole=delBlackhole, portSecurityVioRestrictRecoveryTime=portSecurityVioRestrictRecoveryTime, qosSetTable=qosSetTable, mirrorReflectorPortTable=mirrorReflectorPortTable, qos3MapAtoB3=qos3MapAtoB3, dcscmscAclDestinationIp=dcscmscAclDestinationIp, dvmrpNumRoutes=dvmrpNumRoutes, transceiverMonitorAlarmEvent=transceiverMonitorAlarmEvent, portTruckAllowedVlanTable=portTruckAllowedVlanTable, mstpMgt=mstpMgt, portRateLimitPortIndex=portRateLimitPortIndex, mstpBridgeMaxage=mstpBridgeMaxage, dcscmscPortbindingPortName=dcscmscPortbindingPortName, dhcpPoolWinsIpAddress3=dhcpPoolWinsIpAddress3, portSecurityMaxMacNum=portSecurityMaxMacNum, fileCopyUseMode=fileCopyUseMode, mirrorSrcPortEntry=mirrorSrcPortEntry, fdbMacCurMulticastInsertNum=fdbMacCurMulticastInsertNum, ipv6ExternProtocal=ipv6ExternProtocal, macAddress=macAddress, tacacsMgt=tacacsMgt, dhcpServerExcludedIpAddrLowIp=dhcpServerExcludedIpAddrLowIp, qos3PolicyconformSetDscp=qos3PolicyconformSetDscp, qos3PolicyPIRKbps=qos3PolicyPIRKbps, qosPortQueueWeight6=qosPortQueueWeight6, dcscm6dcAclSourceMask=dcscm6dcAclSourceMask, erpsInstanceConfigEntry=erpsInstanceConfigEntry, qosPortQueueIndex=qosPortQueueIndex, portLEDTimeRangeIndex=portLEDTimeRangeIndex, erpsMgt=erpsMgt, fireWall=fireWall, qosClassMapVlan=qosClassMapVlan, mabOnlineUserEntry=mabOnlineUserEntry, ipv6ExternAclTable=ipv6ExternAclTable, dcscm6dcAcl=dcscm6dcAcl, fileType=fileType, portComboMediaType=portComboMediaType, qosSetClassMapName=qosSetClassMapName, dhcpPoolWinsIpAddress5=dhcpPoolWinsIpAddress5, mirrorRspanSessionEntry=mirrorRspanSessionEntry, showmlsqosmapsdscpcos=showmlsqosmapsdscpcos, mirrorDestPort=mirrorDestPort, interfaceTable=interfaceTable, qos3ScheduleQueueInputStatus=qos3ScheduleQueueInputStatus, priPppoeIaGlobalEnable=priPppoeIaGlobalEnable, intfaceStatus=intfaceStatus, pvid=pvid, arpSecurityUpdateProtect=arpSecurityUpdateProtect, vsfInfo=vsfInfo, poePortPdStatus=poePortPdStatus, timeRangeStartDate=timeRangeStartDate, qos3PolicyPidAction=qos3PolicyPidAction, qos3PolicyAccounting=qos3PolicyAccounting, portRateLimitCurAllNum=portRateLimitCurAllNum, timeRangeSubIndex=timeRangeSubIndex, trapDestIndex=trapDestIndex, sntpServerEntry=sntpServerEntry, sysMonitorAlarmEnable=sysMonitorAlarmEnable, dvmrpInterfaceKeyVersion=dvmrpInterfaceKeyVersion, ddmDiagTempHighAlarmThreshold=ddmDiagTempHighAlarmThreshold, mirrorSrcCpuSlot=mirrorSrcCpuSlot, dhcpServerExcludedIpAddrEntry=dhcpServerExcludedIpAddrEntry, copyRunningConfig=copyRunningConfig, qos3SchedulePolicyBindTable=qos3SchedulePolicyBindTable, dhcpPoolMacStatus=dhcpPoolMacStatus, qos3PolicyMapIndex=qos3PolicyMapIndex, addBlockedinfo=addBlockedinfo, fdbMacInfoTable=fdbMacInfoTable, dot1xOnlineUserName=dot1xOnlineUserName, dhcpPoolDnsSerIpAddress3=dhcpPoolDnsSerIpAddress3, arpDiscardOID=arpDiscardOID, priPppoeIaPortCircuitID=priPppoeIaPortCircuitID, loopback=loopback, showclassmapEntry=showclassmapEntry, erpsPort1StatisticsTable=erpsPort1StatisticsTable, erpsHoldoffTimer=erpsHoldoffTimer, mvlanAssoVlanList=mvlanAssoVlanList, macIpExternAct=macIpExternAct, showmlsqosmapscosdscp=showmlsqosmapscosdscp, ipv6StandardStatus=ipv6StandardStatus, dcscmscAclPermitOrDeny=dcscmscAclPermitOrDeny, sysMemorySizeInMB=sysMemorySizeInMB, sysSlotBootInfoEntry=sysSlotBootInfoEntry, timeRangeMapIndex=timeRangeMapIndex, qos3PolicyMapGroupEntry=qos3PolicyMapGroupEntry, qos3ScheduleQueueWeightEntry=qos3ScheduleQueueWeightEntry, qos3ClassMapValue=qos3ClassMapValue, mirrorRspanVlan=mirrorRspanVlan, portHybridUntaggedAllowedVlan=portHybridUntaggedAllowedVlan, arpSpeedLimitOID=arpSpeedLimitOID, ipExternDstIp=ipExternDstIp, dhcpPoolNextServerIpAddress2=dhcpPoolNextServerIpAddress2, sysPowerStateEntry=sysPowerStateEntry, securityIpIndex=securityIpIndex, tunnelPortEnable=tunnelPortEnable, dcscmpcEntry=dcscmpcEntry, clusterv2MemberCounter=clusterv2MemberCounter, priIgmpSnoopingQueryInterval=priIgmpSnoopingQueryInterval, dhcpSnoopingSubScriberID=dhcpSnoopingSubScriberID, dhcpPoolDefaultRouterPoolName=dhcpPoolDefaultRouterPoolName, sysUserPasswordOption=sysUserPasswordOption, erpsPort0StatusTable=erpsPort0StatusTable, ValidStatus=ValidStatus, qosMapDscp4=qosMapDscp4, portHybridTaggedAllowedvlan=portHybridTaggedAllowedvlan, qos3PortIndex=qos3PortIndex, dhcpPoolNextServerIpAddress7=dhcpPoolNextServerIpAddress7, dhcpPoolDefaultRouterIpAddress6=dhcpPoolDefaultRouterIpAddress6, dcscm6SipbindingAclNumber=dcscm6SipbindingAclNumber, macNotificationHistoryEntry=macNotificationHistoryEntry, dot1xOnlineUserIndex=dot1xOnlineUserIndex, portTable=portTable, urpfPortTable=urpfPortTable, sysAddUser=sysAddUser, psSecurityPortLocktimer=psSecurityPortLocktimer, dhcpRelayInformationOptionRemoteIDFormat=dhcpRelayInformationOptionRemoteIDFormat, qos2MapIntptoEXPStatus=qos2MapIntptoEXPStatus, aclStatisticClearBindType=aclStatisticClearBindType, sysMonitorAlarmInputSet=sysMonitorAlarmInputSet, qos2MapExptoIntp=qos2MapExptoIntp, qos3EtsEntry=qos3EtsEntry, qos3AggPolicyStatus=qos3AggPolicyStatus, qosPortQueueWeight3=qosPortQueueWeight3, qos3QueueWeight4=qos3QueueWeight4, erpsPort1RxRapsFsPktCnt=erpsPort1RxRapsFsPktCnt, qos3MapDscpIndex=qos3MapDscpIndex, qos3ScheduleBindWidthTable=qos3ScheduleBindWidthTable, portTruckAllowedVlan=portTruckAllowedVlan, dcscm6dcAclSourceIp=dcscm6dcAclSourceIp, timeRangeMapName=timeRangeMapName, radiusAuthenServerHostIndex=radiusAuthenServerHostIndex, dhcpPoolPoolName=dhcpPoolPoolName, fileUserName=fileUserName, amPortIndex=amPortIndex, authLogout=authLogout, dhcpPoolAddressPrefix=dhcpPoolAddressPrefix, dhcpPoolDnsSerIpAddress5=dhcpPoolDnsSerIpAddress5, qos3PolicyViolateSetCos=qos3PolicyViolateSetCos, fileCMCCCopyResult=fileCMCCCopyResult, macNotificationMib=macNotificationMib, dhcpSnoopingBindingEnalbe=dhcpSnoopingBindingEnalbe, portLEDTimeRangeEndWeek=portLEDTimeRangeEndWeek, portRateLimitConfigMulticastNum=portRateLimitConfigMulticastNum, priIgmpSnoopingvlanEnable=priIgmpSnoopingvlanEnable, psSecurityPortConvertmac=psSecurityPortConvertmac, dhcpSnooping=dhcpSnooping, sysFanStatus=sysFanStatus, qos2MapCostoIntp8=qos2MapCostoIntp8, qos2MapDSCPtoDP6=qos2MapDSCPtoDP6, dcscm6scAcl=dcscm6scAcl, ddmDiagnosisBias=ddmDiagnosisBias, radiusServerDeadTime=radiusServerDeadTime, erpsPort1RxRapsSfPktCnt=erpsPort1RxRapsSfPktCnt, portHybridTaggedAllowedVlanTable=portHybridTaggedAllowedVlanTable, arpStaticMac=arpStaticMac, qos2MapDSCPtoDSCP5=qos2MapDSCPtoDSCP5, urpfPortEntry=urpfPortEntry, dhcpSnoopingStaticBindingIP=dhcpSnoopingStaticBindingIP, lpbackDetecShowPortIndex=lpbackDetecShowPortIndex, ospfRedistributeMetricType=ospfRedistributeMetricType, swERPSSFClearedTrap=swERPSSFClearedTrap, erpsPort0StatisticsEntry=erpsPort0StatisticsEntry, sntpTimeZoneType=sntpTimeZoneType, dhcpPoolDnsSerEntry=dhcpPoolDnsSerEntry, qos3ScheduleQueueWeightLevelID=qos3ScheduleQueueWeightLevelID, routeMgt=routeMgt, ripNetworkAddrEntry=ripNetworkAddrEntry, portRateLimitCurUnicastNum=portRateLimitCurUnicastNum, ipStandardSubIndex=ipStandardSubIndex, intfaceIndex=intfaceIndex, ipv6StandardAclEntry=ipv6StandardAclEntry, ipv6StandardIndex=ipv6StandardIndex, ipv6ExternSrcPort1=ipv6ExternSrcPort1, radiusAuthenServerHostIP=radiusAuthenServerHostIP, dhcpSnoopingStatisticDropPktsNum=dhcpSnoopingStatisticDropPktsNum, portMacCountLimitTable=portMacCountLimitTable, sysMemoryBusy=sysMemoryBusy, macIpExternDstMac=macIpExternDstMac, erpsClearPortStatistics=erpsClearPortStatistics, bandwidthControlStatus=bandwidthControlStatus, dot1xOnlineUserMac=dot1xOnlineUserMac, lpbackDetecExistInterval=lpbackDetecExistInterval, InterfaceIndexOrZero=InterfaceIndexOrZero, qos3PolicyViolateAction=qos3PolicyViolateAction, InetAddress=InetAddress, portUtilTable=portUtilTable, portLEDTimeRangeStartDate=portLEDTimeRangeStartDate)
mibBuilder.exportSymbols("NAG-MIB", efmOamRemoteCriticalEvent=efmOamRemoteCriticalEvent, erpsPort0BPR=erpsPort0BPR, portRateLimitConfigUnicastNum=portRateLimitConfigUnicastNum, portGroupPortListTable=portGroupPortListTable, priPppoeIaPortEnable=priPppoeIaPortEnable, switchInfoTable=switchInfoTable, qos3QueueBindWidthMin=qos3QueueBindWidthMin, tacacsServerHostKey=tacacsServerHostKey, mirrorReflectorPortSession=mirrorReflectorPortSession, qos3NodeScheduleLevelID=qos3NodeScheduleLevelID, dhcpPoolAddressStatus=dhcpPoolAddressStatus, qos3QueueWredEntry=qos3QueueWredEntry, sshUseTable=sshUseTable, erpsPort1RxRapsNrRbPktCnt=erpsPort1RxRapsNrRbPktCnt, mstpInstancePortInstanceID=mstpInstancePortInstanceID, securityIpStatus=securityIpStatus, erpsPort1RxRapsMsPktCnt=erpsPort1RxRapsMsPktCnt, erpsPortTrackCfmPvlanId=erpsPortTrackCfmPvlanId, qos3MapIntpExtendEntry=qos3MapIntpExtendEntry, priPoeConfig=priPoeConfig, dvmrpMgt=dvmrpMgt, macExternPriority=macExternPriority, macType=macType, priIgmpSnoopingPort=priIgmpSnoopingPort, dns=dns, mstpHelloTime=mstpHelloTime, dhcpRelayOptionSelfDefinedSubscriberIDFormat=dhcpRelayOptionSelfDefinedSubscriberIDFormat, qos3SetIpPrec=qos3SetIpPrec, dvmrpNeighborState=dvmrpNeighborState, qosPortQueueTable=qosPortQueueTable, dvmrpRouteMetric=dvmrpRouteMetric, qos3MapDscpType=qos3MapDscpType, dhcpPoolExpandTable=dhcpPoolExpandTable, priIgmpSnoopingLimitVlanID=priIgmpSnoopingLimitVlanID, amPortMac=amPortMac, qos2MapCostoDP4=qos2MapCostoDP4, portCount=portCount, portBlockState=portBlockState, timeRangeMapTable=timeRangeMapTable, portGroupIndex=portGroupIndex, newPortSecurityEntry=newPortSecurityEntry, dhcpPoolMacAddress=dhcpPoolMacAddress, swModuleType=swModuleType, filePort=filePort, ntpEntObjectsGroup1=ntpEntObjectsGroup1, macIpExternSrcPort2=macIpExternSrcPort2, portGroupMemberCount=portGroupMemberCount, stackingUnitIndex=stackingUnitIndex, dot1xOnlineUserEntry=dot1xOnlineUserEntry, spanGlobalEnable=spanGlobalEnable, qos2AggPolicyConformAction=qos2AggPolicyConformAction, qosMapMutationName=qosMapMutationName, qos3ScheduleQueueWeightNodeID=qos3ScheduleQueueWeightNodeID, portHybridUntaggedAllowedVlanEntry=portHybridUntaggedAllowedVlanEntry, dcscm6dcEnable=dcscm6dcEnable, dcscm6pcDestinationIp=dcscm6pcDestinationIp, qos2MapExptoDP2=qos2MapExptoDP2, qosPortQueue=qosPortQueue, qos3ServicePolicyIndex=qos3ServicePolicyIndex, portLEDState=portLEDState, snmpRmonStatus=snmpRmonStatus, qos3QueueWeight2=qos3QueueWeight2, showQos3PolicyDirection=showQos3PolicyDirection, mirrorSrcPortStatus=mirrorSrcPortStatus, showQos3QueueStatisticsPassedPacket=showQos3QueueStatisticsPassedPacket, qos2MapExptoIntp4=qos2MapExptoIntp4, priIgmpSnoopingPortTime=priIgmpSnoopingPortTime, dvmrpRouteExpiryTime=dvmrpRouteExpiryTime, dhcpLeaseTimeDay=dhcpLeaseTimeDay, qos3PolicyMapGroupIndex=qos3PolicyMapGroupIndex, switchBootStartUpCfg=switchBootStartUpCfg, ripRouterVersion=ripRouterVersion, rateViolation=rateViolation, dcscmdcAclPermitOrDeny=dcscmdcAclPermitOrDeny, qos3AddSVid=qos3AddSVid, erpsRingId=erpsRingId, dcscmpcDestinationIp=dcscmpcDestinationIp, qos2MapDSCPtoIntp8=qos2MapDSCPtoIntp8, qos3PortTable=qos3PortTable, showQos3VlanYellowCounter=showQos3VlanYellowCounter, dcscm6dcAclNumber=dcscm6dcAclNumber, tacacsServerHostIP=tacacsServerHostIP, sysTemperature=sysTemperature, dhcpPoolOptionTable=dhcpPoolOptionTable, qos3ScheduleQueueAlgorithmPolicyIndex=qos3ScheduleQueueAlgorithmPolicyIndex, qos2MapIntptoEXP=qos2MapIntptoEXP, translationEnable=translationEnable, macNotificationNotificationInterval=macNotificationNotificationInterval, poeSoftwareVersion=poeSoftwareVersion, lpbackDetecNoExistInterval=lpbackDetecNoExistInterval, dcscmdcPortbindingEntry=dcscmdcPortbindingEntry, mstpInstancePortPortIndex=mstpInstancePortPortIndex, qos3MapIntpExtendIndex=qos3MapIntpExtendIndex, flowCounterInBroadcastPkts=flowCounterInBroadcastPkts, ddmDiagnosisVoltage=ddmDiagnosisVoltage, sysFlashSize=sysFlashSize, clusterv2CreateName=clusterv2CreateName, dvmrpNeighborRcvBadRoutes=dvmrpNeighborRcvBadRoutes, vlanFlowCounterEntry=vlanFlowCounterEntry, mirrorDestStatus=mirrorDestStatus, dcscm6scAclPermitOrDeny=dcscm6scAclPermitOrDeny, qos2ServicePolicyEntry=qos2ServicePolicyEntry, ddmDiagBiasHighAlarmThreshold=ddmDiagBiasHighAlarmThreshold, sumFlowCounterTable=sumFlowCounterTable, dcscmdcAclDestinationMask=dcscmdcAclDestinationMask, efmOamLocalErrFramePeriodEvent=efmOamLocalErrFramePeriodEvent, sshServerStatus=sshServerStatus, intfaceID=intfaceID, tacacsServerHostIndex=tacacsServerHostIndex, mstpPortFormat=mstpPortFormat, sshUserName=sshUserName, efmOamRemoteErrSymbolPeriodEvent=efmOamRemoteErrSymbolPeriodEvent, portHybridUntaggedAllowedvlan=portHybridUntaggedAllowedvlan, clusterv2BaseVersion=clusterv2BaseVersion, qos3AggPolicyPBSKbps=qos3AggPolicyPBSKbps, mvlanPortIndex=mvlanPortIndex, iPAddrIPAddress=iPAddrIPAddress, qos=qos, mirrorDestGreSession=mirrorDestGreSession, macIpExternPriority=macIpExternPriority, dhcpSnoopingStaticBindingStatus=dhcpSnoopingStaticBindingStatus, fileCopy=fileCopy, qos3ScheduleQueueInputLevelID=qos3ScheduleQueueInputLevelID, macExternAclEntry=macExternAclEntry, qos2SetPolicyMapName=qos2SetPolicyMapName, dhcpSnoopingStaticBindingMAC=dhcpSnoopingStaticBindingMAC, mvlanInfoTable=mvlanInfoTable, qosPortTable=qosPortTable, sysSetBootPwStatus=sysSetBootPwStatus, dcscm6VMacbindingMacAddr=dcscm6VMacbindingMacAddr, qos2MapIntptoDSCP2=qos2MapIntptoDSCP2, dot1qTunnelEntry=dot1qTunnelEntry, mstpPortInfoTable=mstpPortInfoTable, qos3EtsStatus=qos3EtsStatus, priPppoeIaSelfDefinedCircuitID=priPppoeIaSelfDefinedCircuitID, mrppRingSecPortName=mrppRingSecPortName, ddmDiagRXPowerLowAlarmThreshold=ddmDiagRXPowerLowAlarmThreshold, efmOamRemoteErrFrameSecondsSummaryEvent=efmOamRemoteErrFrameSecondsSummaryEvent, qos3PolicyStatus=qos3PolicyStatus, priIgmpSnoopingLimitPortGroupNum=priIgmpSnoopingLimitPortGroupNum, priIpConfig=priIpConfig, dhcpPoolNextServerEntry=dhcpPoolNextServerEntry, qos2=qos2, shutdown=shutdown, portTruckAllowedVlanRemove=portTruckAllowedVlanRemove, priIgmpSnoopingGroupAddress=priIgmpSnoopingGroupAddress, dcscm6dcPortbindingPortName=dcscm6dcPortbindingPortName, priPppoeIaSelfDefinedRemoteID=priPppoeIaSelfDefinedRemoteID, qos3PolicyExceedSetIntp=qos3PolicyExceedSetIntp, dcscm6scAclSourceIp=dcscm6scAclSourceIp, vsfModuleEntry=vsfModuleEntry, dhcpServerRelayInformationEnable=dhcpServerRelayInformationEnable, qos2MapIntptoEXP6=qos2MapIntptoEXP6, antiArpscan=antiArpscan, numAclGroupMatchOrder=numAclGroupMatchOrder, dcscm6dcPortbindingAclNumber=dcscm6dcPortbindingAclNumber, macExternVlanIdWild=macExternVlanIdWild, sshMgt=sshMgt, ipv6ExternSrcIp=ipv6ExternSrcIp, portLEDTimeRangeMapTable=portLEDTimeRangeMapTable, portRateLimitViolationMode=portRateLimitViolationMode, urpfPortIndex=urpfPortIndex, macNotificationNotificationsSent=macNotificationNotificationsSent, priPppoeIaPortTable=priPppoeIaPortTable, dhcpRelayServerAddrIndex=dhcpRelayServerAddrIndex, priIgmpSnoopingPortCtrlPktTable=priIgmpSnoopingPortCtrlPktTable, qos3ClassMapEntry=qos3ClassMapEntry, swSoftwareVersion=swSoftwareVersion, sshUserIndex=sshUserIndex, am=am, qosAggPolicerMaximumBurstKbps=qosAggPolicerMaximumBurstKbps, ipExternIndex=ipExternIndex, dhcpSnoopingAlarmInfoEntry=dhcpSnoopingAlarmInfoEntry, switchBootImgSecondary=switchBootImgSecondary, mirrorDestGreTable=mirrorDestGreTable, ipv6ExternSrcPreLen=ipv6ExternSrcPreLen, fdbMacCurMulticastWaitNum=fdbMacCurMulticastWaitNum, dhcpSnoopingStaticBindingVid=dhcpSnoopingStaticBindingVid, qos3QueueWredDpMaxRate=qos3QueueWredDpMaxRate, showmlsqosinterfaceqoscontent=showmlsqosinterfaceqoscontent, dhcpPoolNextServerStatus=dhcpPoolNextServerStatus, sysSetBootPassword=sysSetBootPassword, qosSetv6FlowLabel=qosSetv6FlowLabel, qos3AggPolicyCIRKbps=qos3AggPolicyCIRKbps, poePortCurrentCurrent=poePortCurrentCurrent, priCableEntry=priCableEntry, erpsRingRowStatus=erpsRingRowStatus, dcscm6pcDestinationMask=dcscm6pcDestinationMask, ospfSummaryAddressEntry=ospfSummaryAddressEntry, ripNetworkInterfaceAddress=ripNetworkInterfaceAddress, qos2PortQueueWdrr=qos2PortQueueWdrr, qos2MapDSCPtoDSCPoutDSCP=qos2MapDSCPtoDSCPoutDSCP, qos2PolicyInsertClassMap=qos2PolicyInsertClassMap, portHybridUntaggedAllowedVlanAll=portHybridUntaggedAllowedVlanAll, macIpExternDstPort1=macIpExternDstPort1, mirrorSrcPortDirect=mirrorSrcPortDirect, priIgmpSnoopingVlanID=priIgmpSnoopingVlanID, qosSetprecedence=qosSetprecedence, dhcpSnoopingAckBindingMAC=dhcpSnoopingAckBindingMAC, ripNetworkAddrTable=ripNetworkAddrTable, mstpInstancePortExtRootPathCost=mstpInstancePortExtRootPathCost, qos2MapDSCPtoDP4=qos2MapDSCPtoDP4, ntpEntCompliances=ntpEntCompliances, dhcpPoolDefaultRouterTable=dhcpPoolDefaultRouterTable, qos2MapDSCPtoDSCP6=qos2MapDSCPtoDSCP6, showQos3QueueStatisticsQueueID=showQos3QueueStatisticsQueueID, qos3ClassMapName=qos3ClassMapName, qosPortQueueStatus=qosPortQueueStatus, dhcpPoolCLid=dhcpPoolCLid, aclActiveIndex=aclActiveIndex, poePoliceEnable=poePoliceEnable, amPortInfoTable=amPortInfoTable, ripNetworkInterfaceEntry=ripNetworkInterfaceEntry, arpStaticEntry=arpStaticEntry, qos3Ets=qos3Ets, qos3QueueWeight0=qos3QueueWeight0, timeRangeMapEntry=timeRangeMapEntry, fileName=fileName, power=power, erpsPort0SignalStatus=erpsPort0SignalStatus, mstpPortInfoEnable=mstpPortInfoEnable, sshServerVersion=sshServerVersion, qosMapDscp6=qosMapDscp6, portLEDTimeRangeType=portLEDTimeRangeType, ipv6StandardPriority=ipv6StandardPriority, qos2MapDSCPtoDSCP4=qos2MapDSCPtoDSCP4, switchCpuUsage=switchCpuUsage, qosSetType=qosSetType, ddmDiagTempHighWarnThreshold=ddmDiagTempHighWarnThreshold, sshConnID=sshConnID, dcscmscPortbindingTable=dcscmscPortbindingTable, qos2AggPolicyStatus=qos2AggPolicyStatus, fdbMacInfo=fdbMacInfo, amPortCount=amPortCount, mirrorDestMacAddr=mirrorDestMacAddr, dhcpServerLeaseBindingIp=dhcpServerLeaseBindingIp, dcscmdcAclDestinationIp=dcscmdcAclDestinationIp, qos3AggPolicyExceedSetDscp=qos3AggPolicyExceedSetDscp, dcscm6scPortbindingEntry=dcscm6scPortbindingEntry, priIgmpSnoopingPortAuthFreeRule=priIgmpSnoopingPortAuthFreeRule, aclStatisticClearTable=aclStatisticClearTable, mvlanID=mvlanID, prieeePortTable=prieeePortTable, dhcpServer=dhcpServer, loopbackDetecSpecVlanTable=loopbackDetecSpecVlanTable, portHybridUntaggedAllowedVlanTable=portHybridUntaggedAllowedVlanTable, qos2MapExptoIntpStatus=qos2MapExptoIntpStatus, qos3SchedulePolicyBindEntry=qos3SchedulePolicyBindEntry, portLEDShutoffTable=portLEDShutoffTable, dvmrpPruneSource=dvmrpPruneSource, dot1xOnlineUserState=dot1xOnlineUserState, prieeePortConfig=prieeePortConfig, macStandardStatus=macStandardStatus, stormControlRate=stormControlRate)
mibBuilder.exportSymbols("NAG-MIB", erpsOpenRing=erpsOpenRing, showQos3VlanOutCounter=showQos3VlanOutCounter, portLEDTimeRangeEntry=portLEDTimeRangeEntry, qos2MapDSCPtoIntp3=qos2MapDSCPtoIntp3, qos2PortIndex=qos2PortIndex, macExternSubIndex=macExternSubIndex, loopbackDetecCtrlTable=loopbackDetecCtrlTable, qos3ScheduleQueueWeightQueueID=qos3ScheduleQueueWeightQueueID, prisnmpMgt=prisnmpMgt, timeRangeStatus=timeRangeStatus, ipExternAclTable=ipExternAclTable, dhcpSnoopingStaticBindingPort=dhcpSnoopingStaticBindingPort, dhcpPoolWinsTable=dhcpPoolWinsTable, dvmrpNeighborEntry=dvmrpNeighborEntry, dhcpSnoopingBlockedInfoTable=dhcpSnoopingBlockedInfoTable, qos2MapCostoDP6=qos2MapCostoDP6, qos3PolicyEntry=qos3PolicyEntry, fanAbnormalOID=fanAbnormalOID, dhcpSnoopingInformationOptionAllowUntrusted=dhcpSnoopingInformationOptionAllowUntrusted, mstp=mstp, dvmrpRouteEntry=dvmrpRouteEntry, qos2MapDSCPtoDP7=qos2MapDSCPtoDP7, qos3SetSTpid=qos3SetSTpid, portSecurityVlanPortIndex=portSecurityVlanPortIndex, powerSupplyTrap=powerSupplyTrap, trapDestAddress=trapDestAddress, flowCounterOutOctets=flowCounterOutOctets, priIgmpSnoopingVlanTable=priIgmpSnoopingVlanTable, sysCPUType=sysCPUType, mstpForwardTime=mstpForwardTime, arpMgt=arpMgt, qos3MapDscpValue=qos3MapDscpValue, qosClassCos=qosClassCos, copyRunningConfigEvent=copyRunningConfigEvent, sysResetUnit=sysResetUnit, dcscm6pcSourceIp=dcscm6pcSourceIp, efmOamLoopBackSuccess=efmOamLoopBackSuccess, dhcpSnoopingAckBindingLease=dhcpSnoopingAckBindingLease, mstpInstancePortRole=mstpInstancePortRole, macIpExternDstPort2=macIpExternDstPort2, dvmrpInterfaceRcvBadRoutes=dvmrpInterfaceRcvBadRoutes, prieeePortEntry=prieeePortEntry, cableLengthInfo=cableLengthInfo, qosPortStatus=qosPortStatus, qos3AggPolicyMapName=qos3AggPolicyMapName, qos3ClassMapTable=qos3ClassMapTable, clusterv2MemberIpAddress=clusterv2MemberIpAddress, dcscmscPortbindingAclNumber=dcscmscPortbindingAclNumber, dhcpSnoopingRequestBindingInfoTable=dhcpSnoopingRequestBindingInfoTable, qos3PortQueueAlgorithm=qos3PortQueueAlgorithm, loopbackDetecIntervalTime=loopbackDetecIntervalTime, qos3McQueueID=qos3McQueueID, portHybridTaggedAllowedVlanAll=portHybridTaggedAllowedVlanAll, flowVlanID=flowVlanID, clusterv2MemberTable=clusterv2MemberTable, nameAclGroupTable=nameAclGroupTable, qos3SetIpv6Vrf=qos3SetIpv6Vrf, efmOamLocalErrSymbolPeriodEvent=efmOamLocalErrSymbolPeriodEvent, priIgmpSnoopingLimitPortTable=priIgmpSnoopingLimitPortTable, portTruckPortIndex=portTruckPortIndex, dhcpPoolOptionStatus=dhcpPoolOptionStatus, dhcpSnoopingRequestBindingInfoEntry=dhcpSnoopingRequestBindingInfoEntry, dhcpPoolDnsSerIpAddress4=dhcpPoolDnsSerIpAddress4, mstpInstanceIntRootPathCost=mstpInstanceIntRootPathCost, portGroupEntry=portGroupEntry, jumblyStackingInfoEntry=jumblyStackingInfoEntry, poePortPriority=poePortPriority, macIpExternProtocal=macIpExternProtocal, erpsRingName=erpsRingName, prClusterv2=prClusterv2, macAddressInVlanID=macAddressInVlanID, qos3QueueWeightTable=qos3QueueWeightTable, arpSecurityLearnProtect=arpSecurityLearnProtect, macExternEtherTypeWild=macExternEtherTypeWild, sysMemoryUsage=sysMemoryUsage, qos2MapExptoDP5=qos2MapExptoDP5, priJumblyStacking=priJumblyStacking, mrppRingNodeState=mrppRingNodeState, qos2MapDSCPtoDP2=qos2MapDSCPtoDP2, vlanID=vlanID, dvmrpRouteNextHopIfIndex=dvmrpRouteNextHopIfIndex, qos2MapIntptoDSCP1=qos2MapIntptoDSCP1, qos3AggregatePolicyEntry=qos3AggregatePolicyEntry, sshConnVersion=sshConnVersion, ipv6ExternTimeRangeName=ipv6ExternTimeRangeName, ospfNssaOriginateDefaultInfoStatus=ospfNssaOriginateDefaultInfoStatus, poePortConfigEntry=poePortConfigEntry, ipAddress=ipAddress, mrppRingNodeMode=mrppRingNodeMode, ifPaketLostRate=ifPaketLostRate, switchMemoryUsage=switchMemoryUsage, qos2MapExptoDP6=qos2MapExptoDP6, lpbackDetecVlanPortIndex=lpbackDetecVlanPortIndex, clusterv2BaseKey=clusterv2BaseKey, qos2AggPolicyExceedActionChangeValue=qos2AggPolicyExceedActionChangeValue, mstpSystemGroup=mstpSystemGroup, poeSystemEnable=poeSystemEnable, ntpEntSoftwareName=ntpEntSoftwareName, qosPortCos=qosPortCos, flowPortIndex=flowPortIndex, dcscm6scEnable=dcscm6scEnable, dot1xOnlineUserPortControl=dot1xOnlineUserPortControl, qos3SetIpNextHop=qos3SetIpNextHop, mrppRingIndex=mrppRingIndex, dcscm6VMacbindingVlanid=dcscm6VMacbindingVlanid, sysPowerSlotIndex=sysPowerSlotIndex, qos2MapCostoIntpStatus=qos2MapCostoIntpStatus, dnsDomainSuffixStatus=dnsDomainSuffixStatus, dvmrpPruneGroup=dvmrpPruneGroup, qos2MapCostoDP1=qos2MapCostoDP1, qos2AggPolicyConformActionChangeValue=qos2AggPolicyConformActionChangeValue, qosPortBindEntry=qosPortBindEntry, dvmrpNeighborIfIndex=dvmrpNeighborIfIndex, timeRangeEntry=timeRangeEntry, macExternIndex=macExternIndex, rateViolationShutdownPort=rateViolationShutdownPort, ripTimers=ripTimers, ddmTransSerialWaveLength=ddmTransSerialWaveLength, showQos3MCQueueStatisticsQueueID=showQos3MCQueueStatisticsQueueID, qosMapMarkDownType=qosMapMarkDownType, dhcpPoolOption=dhcpPoolOption, prohibitIPExceedSlimitOID=prohibitIPExceedSlimitOID, dnsDynHostTtl=dnsDynHostTtl, dhcpPoolWinsEntry=dhcpPoolWinsEntry, erpsPort1TxRapsEventPktCnt=erpsPort1TxRapsEventPktCnt, qosPortIndex=qosPortIndex, trapDestEntry=trapDestEntry, arpSecurityIfindex=arpSecurityIfindex, dvmrpNeighborCapabilities=dvmrpNeighborCapabilities, clusterv2BaseRole=clusterv2BaseRole, flowCounterOutUcastPkts=flowCounterOutUcastPkts, dhcpLeaseTimeType=dhcpLeaseTimeType, erpsLogEnabled=erpsLogEnabled, poePortCurrentPower=poePortCurrentPower, qos3PolicyViolateSetIntp=qos3PolicyViolateSetIntp, mstpInstancePortDesignatedPortID=mstpInstancePortDesignatedPortID, ripRoutingProcessStatus=ripRoutingProcessStatus, powerAbnormalOID=powerAbnormalOID, slotTemperature=slotTemperature, showmlsqosmapsdscpmutationname=showmlsqosmapsdscpmutationname, priIgmpSnoopingLimitPortStatus=priIgmpSnoopingLimitPortStatus, sysCpuUsage=sysCpuUsage, portRateLimitConfigBroadcastNum=portRateLimitConfigBroadcastNum, tacacsServerTimeout=tacacsServerTimeout, tacacsServerHostEntry=tacacsServerHostEntry, pridhcp=pridhcp, ipStaticRouteExtTable=ipStaticRouteExtTable, mrppRingPriPortName=mrppRingPriPortName, lpbackDetecVlanListSetFlag=lpbackDetecVlanListSetFlag, qosPortTrust=qosPortTrust, dhcpRelayOption82Vid=dhcpRelayOption82Vid, erpsPort0TxRapsMsPktCnt=erpsPort0TxRapsMsPktCnt, portMacCountLimit=portMacCountLimit, dhcpPoolWinsIpAddress4=dhcpPoolWinsIpAddress4, priIgmpSnoopingGlobalEnable=priIgmpSnoopingGlobalEnable, qos3ScheduleQueueWeightValue=qos3ScheduleQueueWeightValue, portSecuritySticky=portSecuritySticky, erpsRingConfigEntry=erpsRingConfigEntry, qos3QueueWeight5=qos3QueueWeight5, sysFanTable=sysFanTable, erpsGuardTimer=erpsGuardTimer, ipv6ExternPriority=ipv6ExternPriority, qos3MapType=qos3MapType, dhcpRelayOption82InterfaceConfigureEntry=dhcpRelayOption82InterfaceConfigureEntry, dvmrpInterfaceIndex=dvmrpInterfaceIndex, qos2MapDSCPtoDP3=qos2MapDSCPtoDP3, fileCMCCIPaddress=fileCMCCIPaddress, qos2ClassMapStatus=qos2ClassMapStatus, portGroup=portGroup, mrppRingStatus=mrppRingStatus, portSecurityCfgMacNum=portSecurityCfgMacNum, deviceTypeID=deviceTypeID, qos3PortPassThroughCos=qos3PortPassThroughCos, qos3AggPolicyPIRKbps=qos3AggPolicyPIRKbps, macNotificationIfConfigTable=macNotificationIfConfigTable, qosAggPolicerRateKbps=qosAggPolicerRateKbps, qos3QueueWeightEntry=qos3QueueWeightEntry, ripNetworkAddrAddress=ripNetworkAddrAddress, dnsServerIpAddr=dnsServerIpAddr, dnsServerEntry=dnsServerEntry, qosPortQueueEntry=qosPortQueueEntry, dcscmscAclSubNumber=dcscmscAclSubNumber, qos2ClassMapIpPre=qos2ClassMapIpPre, qos2MapIntptoDSCP3=qos2MapIntptoDSCP3, clearFlowCounter=clearFlowCounter, dhcpServerLeaseBindingLeaseTime=dhcpServerLeaseBindingLeaseTime, ospfSystemGroup=ospfSystemGroup, portRateLimitCurMulticastNum=portRateLimitCurMulticastNum, mstpName=mstpName, qos3MapAtoB1=qos3MapAtoB1, erpsPort0StatusEntry=erpsPort0StatusEntry, mstpInstancePortIntRootPathCost=mstpInstancePortIntRootPathCost, ntpEntStatusCurrentModeVal=ntpEntStatusCurrentModeVal, qos3PolicyconformSetIntp=qos3PolicyconformSetIntp, dhcpSnoopingOptionSelfDefinedSubscriberIDFormat=dhcpSnoopingOptionSelfDefinedSubscriberIDFormat, dhcpPoolDomainName=dhcpPoolDomainName, dhcpPoolNextServerIpAddress1=dhcpPoolNextServerIpAddress1, dcscmpcDestinationMasklen=dcscmpcDestinationMasklen, erpsActiveStatus=erpsActiveStatus, prohibitPortOID=prohibitPortOID, dnsDynHostIndex=dnsDynHostIndex, qos2MapCostoDPStatus=qos2MapCostoDPStatus, lastFiveSecOutPktsPerSec=lastFiveSecOutPktsPerSec, dhcpLeaseTimeHours=dhcpLeaseTimeHours, qosPolicyTable=qosPolicyTable, dhcpSnoopingStaticBindingEntry=dhcpSnoopingStaticBindingEntry, dhcpPoolExpandEntry=dhcpPoolExpandEntry, qos2PortStatus=qos2PortStatus, sourceFileCopy=sourceFileCopy, ipv6StandardAclTable=ipv6StandardAclTable, ddmDiagTXPowerHighAlarmThreshold=ddmDiagTXPowerHighAlarmThreshold, qos2MapDSCPtoDP8=qos2MapDSCPtoDP8, dhcpSnoopingPortActionTable=dhcpSnoopingPortActionTable, ospfNssaEntry=ospfNssaEntry, dcscm6dcPortbindingEntry=dcscm6dcPortbindingEntry, ddmTransSerialTypeName=ddmTransSerialTypeName, stormControlType=stormControlType, aclActiveAclIndex=aclActiveAclIndex, translatPortTypeIndex=translatPortTypeIndex, timeRangeEndWeek=timeRangeEndWeek, jumblyStackingInfoTable=jumblyStackingInfoTable, qos3MapAtoB4=qos3MapAtoB4, qos2MapCostoDP5=qos2MapCostoDP5, qos3AggPolicyconformSetDscp=qos3AggPolicyconformSetDscp, sntpServerAddress=sntpServerAddress, securityIpTable=securityIpTable, dhcpPoolDefaultRouterIpAddress5=dhcpPoolDefaultRouterIpAddress5, qosPolicyType=qosPolicyType, ospfNetworkAreaAreaId=ospfNetworkAreaAreaId, timeRangeEndTime=timeRangeEndTime, qos3StatisticClearIndex=qos3StatisticClearIndex, qos2MapDSCPtoIntp1=qos2MapDSCPtoIntp1, portSecurityState=portSecurityState, erpsPort1TxRapsNrRbPktCnt=erpsPort1TxRapsNrRbPktCnt, macIpExternPrecedence=macIpExternPrecedence, fileCopyMode=fileCopyMode, dhcpPoolExpandName=dhcpPoolExpandName, macStandardAct=macStandardAct, dvmrpRouteIfIndex=dvmrpRouteIfIndex, portMacCountLimitCurNum=portMacCountLimitCurNum, macExternSrcMac=macExternSrcMac, dhcpSnoopingAckBindingPort=dhcpSnoopingAckBindingPort, macExternCos=macExternCos, qosMapMarkDownDscp=qosMapMarkDownDscp, qos2MapCostoDP8=qos2MapCostoDP8, qos2MapCostoIntp4=qos2MapCostoIntp4, qosSetCos=qosSetCos, dhcpLeaseTimeEntry=dhcpLeaseTimeEntry, loopbackDetecShowTable=loopbackDetecShowTable, showmlsqosmapsdscpexp=showmlsqosmapsdscpexp, portLEDTimeRangeDelete=portLEDTimeRangeDelete, showQos3QueueStatisticsDropedPacket=showQos3QueueStatisticsDropedPacket, mirrorSrcPortSession=mirrorSrcPortSession, clusterv2CreateIPPool=clusterv2CreateIPPool)
mibBuilder.exportSymbols("NAG-MIB", timeRangeStartWeek=timeRangeStartWeek, qos2MapCostoDP=qos2MapCostoDP, dhcpServerExcludedIpAddrStatus=dhcpServerExcludedIpAddrStatus, qinqPortIndex=qinqPortIndex, showpolicymapname=showpolicymapname, prohibitIPExceedHlimitOID=prohibitIPExceedHlimitOID, macExternEtherType=macExternEtherType, qos3ScheduleQueueAlgorithmTable=qos3ScheduleQueueAlgorithmTable, dvmrpInterfaceLocalAddress=dvmrpInterfaceLocalAddress, erpsPort0StatisticsTable=erpsPort0StatisticsTable, erpsPort0RxRapsSfPktCnt=erpsPort0RxRapsSfPktCnt, qos3ClassMapStatus=qos3ClassMapStatus, dhcpServerLeaseBindingType=dhcpServerLeaseBindingType, dot1qTunnelTable=dot1qTunnelTable, qos3AggPolicyViolateSetDp=qos3AggPolicyViolateSetDp, VlanList=VlanList, sysPowerStatus=sysPowerStatus, qos3MapAtoB2=qos3MapAtoB2, dhcpPoolDnsSerTable=dhcpPoolDnsSerTable, qos2MapCostoDP3=qos2MapCostoDP3, macIpExternSrcIp=macIpExternSrcIp, dhcpSnoopingClearBinding=dhcpSnoopingClearBinding, fanInsertOID=fanInsertOID, showmlsqosmapsdscpmutationcontent=showmlsqosmapsdscpmutationcontent, qos2PolicyPBSKbps=qos2PolicyPBSKbps, poePortPdClass=poePortPdClass, stormControlEntry=stormControlEntry, qos2SetTable=qos2SetTable, priPppoeIaEntry=priPppoeIaEntry, dnsServerPriority=dnsServerPriority, dhcpSnoopingAlarmInfoRecoveryTime=dhcpSnoopingAlarmInfoRecoveryTime, dhcpPoolBootFile=dhcpPoolBootFile, macIpExternSrcIpWild=macIpExternSrcIpWild, qos3SchedulePolicyStatus=qos3SchedulePolicyStatus, clusterv2CandidateDeviceType=clusterv2CandidateDeviceType, trapDestCommunity=trapDestCommunity, priQinQmib=priQinQmib, qos2PortType=qos2PortType, dot1xMgt=dot1xMgt, portLEDConfig=portLEDConfig, ipStandardAclEntry=ipStandardAclEntry, qosPolicyPeakKbps=qosPolicyPeakKbps, arpSecurityLearnProtectALL=arpSecurityLearnProtectALL, macIpExternDstOp=macIpExternDstOp, efmOamLoopBackExit=efmOamLoopBackExit, priIgmpSnoopingGroupNum=priIgmpSnoopingGroupNum, sntpServer6Version=sntpServer6Version, clusterv2CandidateTable=clusterv2CandidateTable, dnsDomainSuffix=dnsDomainSuffix, qos3QueueBindWidthMax=qos3QueueBindWidthMax, ripUpdateTime=ripUpdateTime, qos3ScheduleQueueAlgorithmStatus=qos3ScheduleQueueAlgorithmStatus, dhcpSnoopingOptionSelfDefinedRemoteID=dhcpSnoopingOptionSelfDefinedRemoteID, switchCPUType=switchCPUType, dhcpPoolWinsPoolName=dhcpPoolWinsPoolName, urpfPortMode=urpfPortMode, qos2MapIntptoEXP7=qos2MapIntptoEXP7, mstpInstanceVlans=mstpInstanceVlans, clusterv2MemberMacAddress=clusterv2MemberMacAddress, ddmDiagBiasLowWarnThreshold=ddmDiagBiasLowWarnThreshold, dhcpsnooping=dhcpsnooping, sysPowerStateTable=sysPowerStateTable, portIndex=portIndex, qosAggPolicerEntry=qosAggPolicerEntry, qosclassmapEntry=qosclassmapEntry, radiusAuthenServerHostEntry=radiusAuthenServerHostEntry, stormControlIndex=stormControlIndex, dhcpServerExcludedIpAddrTable=dhcpServerExcludedIpAddrTable, sntpTimeZoneStatus=sntpTimeZoneStatus, ntpEntConformance=ntpEntConformance, dvmrpNeighborTable=dvmrpNeighborTable, qos3PolicyClassMapName=qos3PolicyClassMapName, macNotificationHistMacChangedMsg=macNotificationHistMacChangedMsg, macIpExternSrcMac=macIpExternSrcMac, qosPolicyNormalBurstKbps=qosPolicyNormalBurstKbps, dhcpSnoopingBlockedInfoEntry=dhcpSnoopingBlockedInfoEntry, slotNum=slotNum, erpsPort0Name=erpsPort0Name, priSystem=priSystem, iPAddrVid=iPAddrVid, trapDestVersion=trapDestVersion, dcscm6SipbindingSipMaskLen=dcscm6SipbindingSipMaskLen, dcscm6=dcscm6, portRateLimitTable=portRateLimitTable, ipExternAct=ipExternAct, qos3SetCos=qos3SetCos, qos3ScheduleBindWidthMin=qos3ScheduleBindWidthMin, qos2PolicyConformActionChangeValue=qos2PolicyConformActionChangeValue, mstpInstanceEntry=mstpInstanceEntry, stormControlSuppressStatus=stormControlSuppressStatus, qos2PortQueueBandwidth=qos2PortQueueBandwidth, mvlanVId=mvlanVId, qos3AggPolicyViolateSetCos=qos3AggPolicyViolateSetCos, qos3ScheduleBindWidthMax=qos3ScheduleBindWidthMax, ospfNetworkAreaMask=ospfNetworkAreaMask, sysBootImgSecondary=sysBootImgSecondary, qos2SetInternalPriority=qos2SetInternalPriority, qos3ScheduleQueueAlgorithmEntry=qos3ScheduleQueueAlgorithmEntry, erpsPort1TxRapsFsPktCnt=erpsPort1TxRapsFsPktCnt, newPortSecurityTable=newPortSecurityTable, qos3AggPolicyCBSKbps=qos3AggPolicyCBSKbps, lpbackDetecShowInformation=lpbackDetecShowInformation, qosPolicyRateKbps=qosPolicyRateKbps, dhcpPoolEntry=dhcpPoolEntry, qos3MapIntpExtendType=qos3MapIntpExtendType, erpsRingPort0=erpsRingPort0, qos2MapExptoIntp8=qos2MapExptoIntp8, dhcpSnoopingActionMaxNum=dhcpSnoopingActionMaxNum, ddmDiagnosisTemperature=ddmDiagnosisTemperature, macStandardIndex=macStandardIndex, fan=fan, portMacCountLimitDisable=portMacCountLimitDisable, portLEDTimerange=portLEDTimerange, dcscmpcTable=dcscmpcTable, portLEDTimeRangeMapName=portLEDTimeRangeMapName, vlanInUcastPkts=vlanInUcastPkts, dot1xOnlineUserPort=dot1xOnlineUserPort, dhcpSnoopingAlarmCount=dhcpSnoopingAlarmCount, amGlobalEnable=amGlobalEnable, arpCacheDeleteAll=arpCacheDeleteAll, ospfSummaryMask=ospfSummaryMask, tunnelPortType=tunnelPortType, qos2MapIntptoDSCP7=qos2MapIntptoDSCP7, dhcpSnoopingOptionSelfDefinedSubscriberID=dhcpSnoopingOptionSelfDefinedSubscriberID, tacacsServerHostPrimary=tacacsServerHostPrimary, vlanInBroadcastPkts=vlanInBroadcastPkts, qos3SchedulePolicyBindStatus=qos3SchedulePolicyBindStatus, qosClassMapType=qosClassMapType, radiusServerAccountTimeOut=radiusServerAccountTimeOut, fdbMacCounterTimeStamp=fdbMacCounterTimeStamp, ripNetworkInterfaceStatus=ripNetworkInterfaceStatus, portSecurityVlanMaxNumTable=portSecurityVlanMaxNumTable, ospfNssaTable=ospfNssaTable, sntpServerTable=sntpServerTable, ipStandardSrcIpWild=ipStandardSrcIpWild, ddmTranscAlarmEntry=ddmTranscAlarmEntry, authLogin=authLogin, stormControlStatus=stormControlStatus, mstpInstancePortCost=mstpInstancePortCost, sysMemorySize=sysMemorySize, portTrunkAllowedvlan=portTrunkAllowedvlan, dhcpPoolDefaultRouterIpAddress3=dhcpPoolDefaultRouterIpAddress3, mstpPortMcheck=mstpPortMcheck, trapDestStatus=trapDestStatus, sntpServerVersion=sntpServerVersion, eeePortStatus=eeePortStatus, swHardwareVersion=swHardwareVersion, transceiverMonitor=transceiverMonitor, qos2ClassMapExp=qos2ClassMapExp, portGroupUpdate=portGroupUpdate, erpsPort1TxRapsMsPktCnt=erpsPort1TxRapsMsPktCnt, dnsServerInetAddrType=dnsServerInetAddrType, arpProxyArpEntry=arpProxyArpEntry, qosMapDscp1=qosMapDscp1, switchCPUFiveMinuteIdle=switchCPUFiveMinuteIdle, ipv6ExternSrcPort2=ipv6ExternSrcPort2, qosMapCos=qosMapCos, mvlanAssoVlanStatus=mvlanAssoVlanStatus, vsfModuleTable=vsfModuleTable, ospfRouterIdType=ospfRouterIdType, portLEDTimeRangeStartTime=portLEDTimeRangeStartTime, qos3PolicyExceedSetDscp=qos3PolicyExceedSetDscp, priPppoeIaMib=priPppoeIaMib, psPortIndex=psPortIndex, maxBandwidth=maxBandwidth, dhcpSnoopingAlarmInfoPortIndex=dhcpSnoopingAlarmInfoPortIndex, showqosaggregatepolicername=showqosaggregatepolicername, ipStaticRouteExtDest=ipStaticRouteExtDest, dhcpPoolOptionIndex=dhcpPoolOptionIndex, mabOnlineUserState=mabOnlineUserState, qos3ScheduleQueueWeightStatus=qos3ScheduleQueueWeightStatus, mirrorSrcPortTable=mirrorSrcPortTable, qos2SetType=qos2SetType, dhcpRelayNoSharevlan=dhcpRelayNoSharevlan, dhcpSnoopingLimitRate=dhcpSnoopingLimitRate, portGroupMemberStatus=portGroupMemberStatus, dhcpSnoopingBindingCount=dhcpSnoopingBindingCount, showmlsqosmapsdscpmutationEntry=showmlsqosmapsdscpmutationEntry, portHybridUntaggedAllowedVlanAdd=portHybridUntaggedAllowedVlanAdd, qos2PolicyMapName=qos2PolicyMapName, dhcpPoolTable=dhcpPoolTable, qos2MapExptoIntp5=qos2MapExptoIntp5, qosAggPolicerConformAction=qosAggPolicerConformAction, dhcpPoolOptionType=dhcpPoolOptionType, ipExternDstIpWild=ipExternDstIpWild, dvmrpRouteSourceMask=dvmrpRouteSourceMask, portRateLimitPacketsType=portRateLimitPacketsType, radiusAcctServerHostPrimary=radiusAcctServerHostPrimary, priPppoeIaCircuitIdFormat=priPppoeIaCircuitIdFormat, qos3PolicyViolateSetDscp=qos3PolicyViolateSetDscp, priIgmpSnoopingPortAuthEntry=priIgmpSnoopingPortAuthEntry, efmOamLocalErrFrameSecondsSummaryEvent=efmOamLocalErrFrameSecondsSummaryEvent, qos3SchedulePolicyMapEntry=qos3SchedulePolicyMapEntry, dhcpRelayOption82InterfaceConfigureTable=dhcpRelayOption82InterfaceConfigureTable, ospfSummaryAddress=ospfSummaryAddress, mabSetUserOffline=mabSetUserOffline, dcscm6pcTable=dcscm6pcTable, showmlsqosmapspoliceddscpnormalburst=showmlsqosmapspoliceddscpnormalburst, fanPullOutOID=fanPullOutOID, priVlanConfig=priVlanConfig, aclActiveTable=aclActiveTable, macNotificationGlobalFeatureEnabled=macNotificationGlobalFeatureEnabled, portSecurityVioShutRecoveryTime=portSecurityVioShutRecoveryTime, erpsPort0TxRapsSfPktCnt=erpsPort0TxRapsSfPktCnt, qos3EtsScheduleStatusConfig=qos3EtsScheduleStatusConfig, qos2MapDSCPtoDSCP1=qos2MapDSCPtoDSCP1, qos3MapAtoB8=qos3MapAtoB8, qos3StatisticClearDirection=qos3StatisticClearDirection, ddmDiagRXPowerHighWarnThreshold=ddmDiagRXPowerHighWarnThreshold, vlanInOctets=vlanInOctets, clusterv2CandidateId=clusterv2CandidateId, dvmrpNeighborAddress=dvmrpNeighborAddress, sumFlowCounterOutPkts=sumFlowCounterOutPkts, qosPolicyMaximumBurstKbps=qosPolicyMaximumBurstKbps, dcscm6VMacbindingTable=dcscm6VMacbindingTable, vlanOutUcastPkts=vlanOutUcastPkts, efmOamRemoteErrFrameEvent=efmOamRemoteErrFrameEvent, ipv6ExternDstPreLen=ipv6ExternDstPreLen, ipStandardAct=ipStandardAct, qosClassMapAccessGroup=qosClassMapAccessGroup, ddmTranscBasicInfoEntry=ddmTranscBasicInfoEntry, ddmDiagTXPowerHighWarnThreshold=ddmDiagTXPowerHighWarnThreshold, qos3EgressRemark=qos3EgressRemark, arpProxyArpIfIndex=arpProxyArpIfIndex, showQos3MCQueueStatisticsPassedPacket=showQos3MCQueueStatisticsPassedPacket, dhcpPoolNextServerPoolName=dhcpPoolNextServerPoolName, mirrorReflectorPort=mirrorReflectorPort, qosAggPolicerNormalBurstKbps=qosAggPolicerNormalBurstKbps, mstpInstancePortRootGuard=mstpInstancePortRootGuard, qos3PortCos=qos3PortCos, sysMonitorAlarmIndex=sysMonitorAlarmIndex, priMrppRingTable=priMrppRingTable, portLEDTimeRangeSubIndex=portLEDTimeRangeSubIndex, ddmTransSerialIndex=ddmTransSerialIndex, transceiverMonitorWarnEvent=transceiverMonitorWarnEvent, nameAclGroupSubitemNum=nameAclGroupSubitemNum, qos3AggPolicyExceedSetDp=qos3AggPolicyExceedSetDp, portLEDTimeRangeMapStatus=portLEDTimeRangeMapStatus, portSecurityEntry=portSecurityEntry, portTruckAllowedVlanExcept=portTruckAllowedVlanExcept, ntpSnmpMIBObjects=ntpSnmpMIBObjects, numAclGroupTable=numAclGroupTable, sysUserPassword=sysUserPassword, dcscm6SipbindingEntry=dcscm6SipbindingEntry, erpsPort1SignalStatus=erpsPort1SignalStatus, swSlotIndex=swSlotIndex, priPowerTable=priPowerTable, clearOspfProcess=clearOspfProcess, qosAggPolicerTable=qosAggPolicerTable, dvmrpRouteNextHopType=dvmrpRouteNextHopType, amPortIp=amPortIp, qos3mapDscpStatus=qos3mapDscpStatus, qos3SchedulePolicyBindPolicyName=qos3SchedulePolicyBindPolicyName, erpsInstanceId=erpsInstanceId)
mibBuilder.exportSymbols("NAG-MIB", erpsPort1StatusEntry=erpsPort1StatusEntry, powerGroup=powerGroup, dhcpPoolProType=dhcpPoolProType, portMacCountLimitEntry=portMacCountLimitEntry, priIgmpSnoopingPortBitmap=priIgmpSnoopingPortBitmap, dhcpPoolNextServerIpAddress6=dhcpPoolNextServerIpAddress6, mstpInstanceRegionRootID=mstpInstanceRegionRootID, ospfDefaultExternalMetric=ospfDefaultExternalMetric, dhcpSnoopingPortConfigTable=dhcpSnoopingPortConfigTable, macNotificationMacAddressesRemoved=macNotificationMacAddressesRemoved, priIgmpSnoopingLimitPortIndex=priIgmpSnoopingLimitPortIndex, vlanTranslationEntry=vlanTranslationEntry, showQos3MCQueueStatisticsTable=showQos3MCQueueStatisticsTable, mrppRingSecPortBlockState=mrppRingSecPortBlockState, swType=swType, qos2AggPolicyName=qos2AggPolicyName, qos3QueueBindWidthQueueId=qos3QueueBindWidthQueueId, portSecurityTable=portSecurityTable, mirrorRspanVlanEntry=mirrorRspanVlanEntry, fdbMacMaxTotalNum=fdbMacMaxTotalNum, qos3EgressGreenRemark=qos3EgressGreenRemark, qos3SetTunnelId=qos3SetTunnelId, newPassword=newPassword, dhcploggingStatus=dhcploggingStatus, portHybridTaggedPortIndex=portHybridTaggedPortIndex, mstpInstancePortTable=mstpInstancePortTable, dhcpPoolDefaultRouterEntry=dhcpPoolDefaultRouterEntry, clusterv2CandidateHostName=clusterv2CandidateHostName, erpsPortTrackProtocolType=erpsPortTrackProtocolType, OspfAreaID=OspfAreaID, transceiverSn=transceiverSn, ddmDiagTempLowAlarmThreshold=ddmDiagTempLowAlarmThreshold, portHybridTaggedAllowedVlan=portHybridTaggedAllowedVlan, erpsPort0RxRapsFsPktCnt=erpsPort0RxRapsFsPktCnt, erpsStatus=erpsStatus, macNotificationMacAddrLearntEnable=macNotificationMacAddrLearntEnable, wanIfInUtil=wanIfInUtil, dot1xOnlineUserTable=dot1xOnlineUserTable, flowCouterEntry=flowCouterEntry, mstpInstanceTable=mstpInstanceTable, dhcpServerExcludedIpAddrHiIp=dhcpServerExcludedIpAddrHiIp, dhcpRelayServerAddrEntry=dhcpRelayServerAddrEntry, vctAction=vctAction, dot1xOnlineUserPortMethod=dot1xOnlineUserPortMethod, clusterv2Commander=clusterv2Commander, qos2ClassMapAccessGroup=qos2ClassMapAccessGroup, showmlsqosmapsdscpmutationTable=showmlsqosmapsdscpmutationTable, dcscm6scAclSourceMask=dcscm6scAclSourceMask, erpsTcnPropagationConfig=erpsTcnPropagationConfig, qos2PolicyExceedActionChangeValue=qos2PolicyExceedActionChangeValue, cableTable=cableTable, clusterv2BaseRun=clusterv2BaseRun, dhcpRelayServerAddrServerIp=dhcpRelayServerAddrServerIp, qos3PortWredEnable=qos3PortWredEnable, ddmDiagnosisTXPower=ddmDiagnosisTXPower, mstpInstanceSwitchPriority=mstpInstanceSwitchPriority, priIgmpSnoopingQueryMrsp=priIgmpSnoopingQueryMrsp, qos2PortQueueAlgorithm=qos2PortQueueAlgorithm, psSecurityPortMax=psSecurityPortMax, showmlsqosmapsexpdscp=showmlsqosmapsexpdscp, mirrorDestGreStatus=mirrorDestGreStatus, ddm=ddm, qos3MapIntpExtendValue=qos3MapIntpExtendValue, macIpExternDstMacWild=macIpExternDstMacWild, portBlockMode=portBlockMode, switchFileCopy=switchFileCopy, dhcpSnoopingBlockedInfoPortIndex=dhcpSnoopingBlockedInfoPortIndex, showqos=showqos, radiusServerTimeout=radiusServerTimeout, aclActiveEntry=aclActiveEntry, sntpServer6Table=sntpServer6Table, ipStandardAclTable=ipStandardAclTable, dvmrpPruneExpiryTime=dvmrpPruneExpiryTime, qos3MapEntry=qos3MapEntry, portMode=portMode, qosSetdscp=qosSetdscp, mirrorRspanVlanStatus=mirrorRspanVlanStatus, stormControlSuppressRateValue=stormControlSuppressRateValue, primirror=primirror, qos3PolicyconformSetCos=qos3PolicyconformSetCos, sysPowerValue=sysPowerValue, switchMemoryBusy=switchMemoryBusy, qos3QueueWredTable=qos3QueueWredTable, nameAclGroupAclName=nameAclGroupAclName, erpsInstanceConfigTable=erpsInstanceConfigTable, qos3MapStatus=qos3MapStatus, ipv6ExternDstOp=ipv6ExternDstOp, fdbMacMaxStaticNum=fdbMacMaxStaticNum, mabOnlineUserIndex=mabOnlineUserIndex, clusterv2BaseMaxNumberOfSwitches=clusterv2BaseMaxNumberOfSwitches, ospfMgt=ospfMgt, qosPolicyAggregatePolicer=qosPolicyAggregatePolicer, macExternCosWild=macExternCosWild, macNotificationMacAddressesLearnt=macNotificationMacAddressesLearnt, qos3ServicePolicyDirection=qos3ServicePolicyDirection, mstpPortLinkType=mstpPortLinkType, showQos3MCQueueStatisticsPortIndex=showQos3MCQueueStatisticsPortIndex, showpolicymapcontent=showpolicymapcontent, qos2MapCostoDP2=qos2MapCostoDP2, dhcpRelay=dhcpRelay, qos3ScheduleQueueInputPolicyIndex=qos3ScheduleQueueInputPolicyIndex, clusterv2BaseVlan=clusterv2BaseVlan, erpsPortTrackCfmRmepId=erpsPortTrackCfmRmepId, portSecurityVlanMaxNumEntry=portSecurityVlanMaxNumEntry, erpsTrapEnabled=erpsTrapEnabled, priIgmpSnoopingPortCtrlPktEntry=priIgmpSnoopingPortCtrlPktEntry, macExternAclTable=macExternAclTable, amPortInfoEntry=amPortInfoEntry, qosMapType=qosMapType, qosPolicyName=qosPolicyName, arpCacheTimeout=arpCacheTimeout, loopbackDetecShowEntry=loopbackDetecShowEntry, qosEnable=qosEnable, mstpInstanceRootPortID=mstpInstanceRootPortID, OspfBigMetric=OspfBigMetric, qos3MapAtoB6=qos3MapAtoB6, dcscm6scAclNumber=dcscm6scAclNumber, arpSecurityUpdateProtectALL=arpSecurityUpdateProtectALL, clusterv2BaseMaxNumberOfMembers=clusterv2BaseMaxNumberOfMembers, sysFanIndex=sysFanIndex, qosSetPolicyMapName=qosSetPolicyMapName, ntpEntStatusDateTime=ntpEntStatusDateTime, sumFlowCounterOutOctets=sumFlowCounterOutOctets, qos2ServicePolicyVlanList=qos2ServicePolicyVlanList, dcscm6scAclDestinationIp=dcscm6scAclDestinationIp, sntpTimeZoneName=sntpTimeZoneName, radiusAcctServerHostIndex=radiusAcctServerHostIndex, qosPolicyConformAction=qosPolicyConformAction, portHybridUntaggedPortIndex=portHybridUntaggedPortIndex, dhcpPoolDefaultRouterStatus=dhcpPoolDefaultRouterStatus, macIpExternAclEntry=macIpExternAclEntry, mirrorRspanVlanTable=mirrorRspanVlanTable, portSecurityVlanIndex=portSecurityVlanIndex, poeHighInrushEnable=poeHighInrushEnable, dhcpPoolNetbiosNodeType=dhcpPoolNetbiosNodeType, dhcpRelayServerAddrStatus=dhcpRelayServerAddrStatus, dcscm6pcEntry=dcscm6pcEntry, sumFlowVlanID=sumFlowVlanID, qos2MapIntptoEXP2=qos2MapIntptoEXP2, erpsPort0RxRapsMsPktCnt=erpsPort0RxRapsMsPktCnt, dhcpSnoopingRequestBindingPort=dhcpSnoopingRequestBindingPort, qos3ScheduleQueueInputTypeValue=qos3ScheduleQueueInputTypeValue, qos3ScheduleBindWidthPolicyIndex=qos3ScheduleBindWidthPolicyIndex, priIgmpSnoopingBindEntry=priIgmpSnoopingBindEntry, secMacAdress=secMacAdress, qos2MapIntptoEXP4=qos2MapIntptoEXP4, mirrorDestGrePort=mirrorDestGrePort, mstpInstanceID=mstpInstanceID, dcscmdcAclSourceMask=dcscmdcAclSourceMask, qos3PolicyPBSKbps=qos3PolicyPBSKbps, dhcpRelaySharevlanSubvlanList=dhcpRelaySharevlanSubvlanList, dhcpRelayServerAddrVlanId=dhcpRelayServerAddrVlanId, qos3AggPolicyViolateSetDscp=qos3AggPolicyViolateSetDscp, sysSoftwareVersion=sysSoftwareVersion, dnsServerTable=dnsServerTable, qosSetnextHop=qosSetnextHop, securityMacPortEntry=securityMacPortEntry, qos2MapDSCPtoIntpStatus=qos2MapDSCPtoIntpStatus, ddmAlarmInfo=ddmAlarmInfo, priPppoeIaPortID=priPppoeIaPortID, sysCPUIdle=sysCPUIdle, loopbackDetecCtrlEntry=loopbackDetecCtrlEntry, ripInstabilityPreventingTable=ripInstabilityPreventingTable, erpsRplPort1Role=erpsRplPort1Role, mstpRevisionLevel=mstpRevisionLevel, erpsPort0RxRapsEventPktCnt=erpsPort0RxRapsEventPktCnt, interfaceEntry=interfaceEntry, qos3PolicyExceedSetCos=qos3PolicyExceedSetCos, dcscm6dcAclDestinationMask=dcscm6dcAclDestinationMask, macIpExternVlanIdWild=macIpExternVlanIdWild, ddmTranscBasicInfoTable=ddmTranscBasicInfoTable, numAclGroupEntry=numAclGroupEntry, ddmDiagVoltHighAlarmThreshold=ddmDiagVoltHighAlarmThreshold, qosClassMapIpPre=qosClassMapIpPre, dvmrpPruneTable=dvmrpPruneTable, snmpSecurityIpStatus=snmpSecurityIpStatus, qos2SetCos=qos2SetCos, erpsPortTrackCfmMaName=erpsPortTrackCfmMaName, psSecuritytSaticMacAdd=psSecuritytSaticMacAdd, showQos3VlanRedCounter=showQos3VlanRedCounter, dcscmdcAclEntry=dcscmdcAclEntry, qos2AggPolicyViolateAction=qos2AggPolicyViolateAction, dhcpPoolNextServerIpAddress8=dhcpPoolNextServerIpAddress8, translationType=translationType, translationDropType=translationDropType, macNotificationHistTableMaxLength=macNotificationHistTableMaxLength, ospfRfc1583CompatibleState=ospfRfc1583CompatibleState, ddmDiagVoltHighWarnThreshold=ddmDiagVoltHighWarnThreshold, amPortEnable=amPortEnable, lastFiveMinOutPktsPerSec=lastFiveMinOutPktsPerSec, showQos3VlanInCounter=showQos3VlanInCounter, portMacCountLimitShutRecoveryTime=portMacCountLimitShutRecoveryTime, portRateLimitEntry=portRateLimitEntry, mvlanPortInfoEntry=mvlanPortInfoEntry, destinationFileCopy=destinationFileCopy, dvmrpNeighborRcvRoutes=dvmrpNeighborRcvRoutes, qos2Setv6nextHop=qos2Setv6nextHop, erpsRingConfigTable=erpsRingConfigTable, priIgmpSnoopingvlanID=priIgmpSnoopingvlanID, mirrorSrcCpuTable=mirrorSrcCpuTable, transmitBandwidth=transmitBandwidth, portGroupDelete=portGroupDelete, poePortCurrentVoltage=poePortCurrentVoltage, qosAggPolicerStatus=qosAggPolicerStatus, ddmTransSerialBitRate=ddmTransSerialBitRate, priPowerEntry=priPowerEntry, dhcpSnoopingAlarmInfoNum=dhcpSnoopingAlarmInfoNum, vsfMemberIndex=vsfMemberIndex, priPppoeIaDelimiter=priPppoeIaDelimiter, ddmDiagBiasHighWarnThreshold=ddmDiagBiasHighWarnThreshold, sntpTimeZone=sntpTimeZone, qosSetv6nextHop=qosSetv6nextHop, ipStandardStatus=ipStandardStatus, qosMapMutationOut=qosMapMutationOut, aclStatisticClearDirection=aclStatisticClearDirection, portRateLimitShutRecoveryTime=portRateLimitShutRecoveryTime, ripVlanIndex=ripVlanIndex, dhcpSnoopingOptionSelfDefinedRemoteIDFormat=dhcpSnoopingOptionSelfDefinedRemoteIDFormat, qos2PolicyTable=qos2PolicyTable, mstpBridgeHelloTime=mstpBridgeHelloTime, macIpExternSrcMacWild=macIpExternSrcMacWild, ddmDiagnosisRXPower=ddmDiagnosisRXPower, qos2ClassMapV6Dscp=qos2ClassMapV6Dscp, amPortForwardingType=amPortForwardingType, iPAddrSubnetMask=iPAddrSubnetMask, efmOamDiscoverySuccess=efmOamDiscoverySuccess, qos2PolicyCBSKbps=qos2PolicyCBSKbps, qos3SetExp=qos3SetExp, clusterv2MemberEntry=clusterv2MemberEntry, aclStatisticClearIndex=aclStatisticClearIndex, dvmrpInterfaceKey=dvmrpInterfaceKey, powerNormalOID=powerNormalOID, vlanPortNumber=vlanPortNumber, InterfaceIndex=InterfaceIndex, qosAggPolicerExceedAction=qosAggPolicerExceedAction, poeLegacyEnable=poeLegacyEnable, conformance=conformance, dcscmscAclDestinationMask=dcscmscAclDestinationMask, qos2SetDropPrecedence=qos2SetDropPrecedence, poeHardwareVersion=poeHardwareVersion, qosMapDscp8=qosMapDscp8, qos2ClassMapV6AccGroup=qos2ClassMapV6AccGroup, ripGarbageCollectionTime=ripGarbageCollectionTime, dhcpServerServiceStatus=dhcpServerServiceStatus, mstpBridgeForwardDelay=mstpBridgeForwardDelay, portHybridUntaggedAllowedVlanRemove=portHybridUntaggedAllowedVlanRemove, macExternPacketType=macExternPacketType, dvmrpPruneSourceMask=dvmrpPruneSourceMask, ospfNssaRedistributeStatus=ospfNssaRedistributeStatus, sumFlowCounterInPkts=sumFlowCounterInPkts, qos3SetCVid=qos3SetCVid, qos2MapCostoIntp1=qos2MapCostoIntp1, ipExternSrcOp=ipExternSrcOp, dhcpRelayInformationOptionRemoteID=dhcpRelayInformationOptionRemoteID)
mibBuilder.exportSymbols("NAG-MIB", ospfSpfDelayTime=ospfSpfDelayTime, dhcpSnoopingAckBindingInfoTable=dhcpSnoopingAckBindingInfoTable, netDefaultGateway=netDefaultGateway, sshConnInfoEntry=sshConnInfoEntry, showclassmapname=showclassmapname, ntpEntStatusBadVersion=ntpEntStatusBadVersion, qosClassMapEXPtopmost=qosClassMapEXPtopmost, switchNum=switchNum, portHybridTaggedAllowedVlanAdd=portHybridTaggedAllowedVlanAdd, qos3StatisticClearEntry=qos3StatisticClearEntry, portSecurityPortIndex=portSecurityPortIndex, efmOam=efmOam, qos3ScheduleQueueAlgorithmLevelID=qos3ScheduleQueueAlgorithmLevelID, ospfNetworkAareaAddress=ospfNetworkAareaAddress, mabOnlineUserName=mabOnlineUserName, switchCPUFiveSecondIdle=switchCPUFiveSecondIdle, dhcpSnoopingStaticBindingMask=dhcpSnoopingStaticBindingMask, macIpExternVlanId=macIpExternVlanId, qos3McQueueBindWidthEntry=qos3McQueueBindWidthEntry, showqosaggregatepolicerEntry=showqosaggregatepolicerEntry, qosSetEntry=qosSetEntry, dvmrpRouteUpstreamNeighbor=dvmrpRouteUpstreamNeighbor, showSwitchStartUpStatus=showSwitchStartUpStatus, qos3=qos3, dhcpSnoopingRequestBindingMAC=dhcpSnoopingRequestBindingMAC, oldPassword=oldPassword, priPppoeIaTr101CircuitID=priPppoeIaTr101CircuitID, psSecurityStaticMacDel=psSecurityStaticMacDel, qos2MapExptoDP7=qos2MapExptoDP7, qos3ScheduleQueueInputNodeID=qos3ScheduleQueueInputNodeID, qos3QueueWredDp=qos3QueueWredDp, ipExternStatus=ipExternStatus, radiusServerNasIpv6=radiusServerNasIpv6, radiusServerNasIpv4=radiusServerNasIpv4, sysBootStartupCfg=sysBootStartupCfg, sshConnInfoTable=sshConnInfoTable, vlanInfoEntry=vlanInfoEntry, priportGroup=priportGroup, ntpEntStatusActiveRefSourceName=ntpEntStatusActiveRefSourceName, qos3SchedulePolicyName=qos3SchedulePolicyName, dcscmVMacbindingVlanid=dcscmVMacbindingVlanid, qos3mapIntpExtendStatus=qos3mapIntpExtendStatus, ntpEntStatusNumberOfRefSources=ntpEntStatusNumberOfRefSources, radiusAcctServerHostEntry=radiusAcctServerHostEntry, showQos3QueueStatisticsPortIndex=showQos3QueueStatisticsPortIndex, ospfSpfHoldTime=ospfSpfHoldTime, dnsDomainSuffixTable=dnsDomainSuffixTable, erpsPort1StatisticsEntry=erpsPort1StatisticsEntry, macExternDstMacWild=macExternDstMacWild, erpsPortTrackConfig=erpsPortTrackConfig, fdbMacMaxUnicastNum=fdbMacMaxUnicastNum, recoverPortOID=recoverPortOID, qos2MapIntptoEXP8=qos2MapIntptoEXP8, radiusServerKey=radiusServerKey, ipExternDstOp=ipExternDstOp, qos3NodeScheduleTable=qos3NodeScheduleTable, fireWallEnable=fireWallEnable, qos2AggPolicyPIRKbps=qos2AggPolicyPIRKbps, portRateLimitCurBroadcastNum=portRateLimitCurBroadcastNum, dcscmdcPortbindingPortName=dcscmdcPortbindingPortName, fileCopyFailReason=fileCopyFailReason, dcscmscAclSourceMask=dcscmscAclSourceMask, dcscmscAclTable=dcscmscAclTable, secPortIndex=secPortIndex, ospfNssaAreaId=ospfNssaAreaId, qos2MapIntptoEXP5=qos2MapIntptoEXP5, dvmrpInterfaceStatus=dvmrpInterfaceStatus, erpsPort1Name=erpsPort1Name, qos3QueueWeightStatus=qos3QueueWeightStatus, mvlanMode=mvlanMode, fileCopyResult=fileCopyResult, vlanFCVlanID=vlanFCVlanID, timeRange=timeRange, qos3QueueWeightType=qos3QueueWeightType, mstpTCFlush=mstpTCFlush, erpsPort1TxRapsSfPktCnt=erpsPort1TxRapsSfPktCnt, ipv6ExternStatus=ipv6ExternStatus, sntpTimeZoneTime=sntpTimeZoneTime, qos3PolicyExceedAction=qos3PolicyExceedAction, dnsDynHostTable=dnsDynHostTable, portTruckAllowedVlanAll=portTruckAllowedVlanAll, mirrorReflectorPortStatus=mirrorReflectorPortStatus, qos3ServicePolicyName=qos3ServicePolicyName, addBlackhole=addBlackhole, aaaAccountUpdate=aaaAccountUpdate, qos2MapCostoIntp3=qos2MapCostoIntp3, stormControlTable=stormControlTable, qos2PolicyPIRKbps=qos2PolicyPIRKbps, dyingGasp=dyingGasp, aaaAccount=aaaAccount, dhcpSnoopingStatisticAlarmNum=dhcpSnoopingStatisticAlarmNum, tacacsServerHostStatus=tacacsServerHostStatus, qos3AggPolicyExceedAction=qos3AggPolicyExceedAction, ipv6StandardSrcPrefixLen=ipv6StandardSrcPrefixLen, qosMapStatus=qosMapStatus, priIgmpSnoopingLimitPortStrategy=priIgmpSnoopingLimitPortStrategy, qos2AggPolicyExceedAction=qos2AggPolicyExceedAction, qos2ClassMapName=qos2ClassMapName, erpsWtrTimer=erpsWtrTimer, clusterv2CreateCmdrOperate=clusterv2CreateCmdrOperate, dhcpSnoopingBindingDot1x=dhcpSnoopingBindingDot1x, qos2MapIntptoDSCP8=qos2MapIntptoDSCP8, qos3ServicePolicyEntry=qos3ServicePolicyEntry, ospfRedistributeMetric=ospfRedistributeMetric, portSecurityMacType=portSecurityMacType, qos3PolicyViolateSetDp=qos3PolicyViolateSetDp, switchCPUThirtySecondIdle=switchCPUThirtySecondIdle, priQos=priQos, ospfRedistributeTable=ospfRedistributeTable, arpsecurityEntry=arpsecurityEntry, ipv6ExternAclEntry=ipv6ExternAclEntry, qosPortType=qosPortType, qos3QueueBindWidthTable=qos3QueueBindWidthTable, poePortStatus=poePortStatus, ipv6StandardSrcIp=ipv6StandardSrcIp, portSecurityMacAddress=portSecurityMacAddress, switchCPUIdle=switchCPUIdle, ipExternSubIndex=ipExternSubIndex, macStandardSubIndex=macStandardSubIndex, priPppoeIaPortRemoteID=priPppoeIaPortRemoteID, portGroupMemberName=portGroupMemberName, ipStandardIndex=ipStandardIndex, sysMonitorAlarmEntry=sysMonitorAlarmEntry, dhcpPoolDnsSerIpAddress2=dhcpPoolDnsSerIpAddress2, showQos3=showQos3, qos2MapDSCPtoDP1=qos2MapDSCPtoDP1, dhcpLeaseTimeStatus=dhcpLeaseTimeStatus, shutdownPort=shutdownPort, intfacetype=intfacetype, fdbMacMaxMulticastNum=fdbMacMaxMulticastNum, priMrppRing=priMrppRing, dhcpSnoopingEnable=dhcpSnoopingEnable, sysMonitorAlarmOutputSet=sysMonitorAlarmOutputSet, confirmPassword=confirmPassword, dvmrpRouteSource=dvmrpRouteSource, clusterv2MemberNumber=clusterv2MemberNumber, dhcpRelayOptionSelfDefinedRemoteID=dhcpRelayOptionSelfDefinedRemoteID, qos3PolicyConformAction=qos3PolicyConformAction, dvmrpNeighborUpTime=dvmrpNeighborUpTime, portLEDTimeRangeStatus=portLEDTimeRangeStatus, ipStaticRouteExtMask=ipStaticRouteExtMask, erpsRplPort0Role=erpsRplPort0Role, nameAclGroupAclIndex=nameAclGroupAclIndex, qos3AggPolicyViolateSetIntp=qos3AggPolicyViolateSetIntp, vlanInfoTable=vlanInfoTable, dhcpSnoopingVlanEnable=dhcpSnoopingVlanEnable, sntpPollTime=sntpPollTime, radiusAuthenServerHostStatus=radiusAuthenServerHostStatus, eeePortIndex=eeePortIndex, priIgmpSnoopingSuppression=priIgmpSnoopingSuppression, qosPolicyClassMap=qosPolicyClassMap, dhcpRelayOption82ForwardPolicy=dhcpRelayOption82ForwardPolicy, portGroupInfo=portGroupInfo, showQos3ClassmapName=showQos3ClassmapName, dhcpLeaseTimeTable=dhcpLeaseTimeTable, switchMemorySize=switchMemorySize, PortList=PortList, qos3QueueBindWidthEntry=qos3QueueBindWidthEntry, efmOamLocalErrFrameEvent=efmOamLocalErrFrameEvent, swUnitIndex=swUnitIndex, sshAuthRetries=sshAuthRetries, portHybridTaggedAllowedVlanExcept=portHybridTaggedAllowedVlanExcept, sshUserStatus=sshUserStatus, erpsPort0RxRapsTotalPktCnt=erpsPort0RxRapsTotalPktCnt, vctLastStatus=vctLastStatus, loadBalance=loadBalance, dhcpRelaySharevlanSubvlanConfigureTable=dhcpRelaySharevlanSubvlanConfigureTable, mabOnlineUserPort=mabOnlineUserPort, notifications=notifications, portSecurityVioMacNum=portSecurityVioMacNum, qos2MapExptoDP3=qos2MapExptoDP3, ipExternProtocal=ipExternProtocal, dhcpSnoopingAlarmInfoTable=dhcpSnoopingAlarmInfoTable, macIpExternDstIpWild=macIpExternDstIpWild, dhcpPoolWinsIpAddress8=dhcpPoolWinsIpAddress8, showqosaggregatepolicerTable=showqosaggregatepolicerTable, qos3QueueWeight1=qos3QueueWeight1, systemPriority=systemPriority, qos3PolicyViolateSetPrec=qos3PolicyViolateSetPrec, ntpEntSystemType=ntpEntSystemType, flowCounterOutBroadcastPkts=flowCounterOutBroadcastPkts, qos2SetPrecedence=qos2SetPrecedence, dcscmdcPortbindingTable=dcscmdcPortbindingTable, qos3ScheduleQueueWeightTable=qos3ScheduleQueueWeightTable, erpsPort1RxRapsNrPktCnt=erpsPort1RxRapsNrPktCnt, qos3AggPolicyExceedSetPrec=qos3AggPolicyExceedSetPrec, dcscm6SipbindingTable=dcscm6SipbindingTable, qos3SetIpDefaultPBR=qos3SetIpDefaultPBR, vlanTranslationTypeEntry=vlanTranslationTypeEntry, dhcpRelaySharevlanSubvlanConfigureEntry=dhcpRelaySharevlanSubvlanConfigureEntry, ntpEntSoftwareVendor=ntpEntSoftwareVendor, showQos3QueueStatisticsTable=showQos3QueueStatisticsTable, erpsRevertiveMode=erpsRevertiveMode, qos3SetSVid=qos3SetSVid, ntpEntStatusCurrentMode=ntpEntStatusCurrentMode, poeMaxPower=poeMaxPower, erpsPort1Status=erpsPort1Status, ntpEntStatusInPkts=ntpEntStatusInPkts, iPAddrEntry=iPAddrEntry, qosAggPolicerViolateAction=qosAggPolicerViolateAction, dcscm6SipbindingSipAddress=dcscm6SipbindingSipAddress, ospfRedistributeStatus=ospfRedistributeStatus, fileCMCCCopy=fileCMCCCopy, MacAddress=MacAddress, mabOnlineUserMac=mabOnlineUserMac, portSecurityMacStatus=portSecurityMacStatus, dcscm6pcSourceMask=dcscm6pcSourceMask, showmlsqosmapspoliceddscp=showmlsqosmapspoliceddscp, Ipv6Address=Ipv6Address, flowCounterInOctets=flowCounterInOctets, qos3ScheduleBindWidthEntry=qos3ScheduleBindWidthEntry, macIpExternSubIndex=macIpExternSubIndex, mvlanInfoEntry=mvlanInfoEntry, ntpEntSNTPCompliance=ntpEntSNTPCompliance, qos2PortTrust=qos2PortTrust, qos3AggPolicyViolateAction=qos3AggPolicyViolateAction, qos3SchedulePolicyBindPortIndex=qos3SchedulePolicyBindPortIndex, mstpPortInfoEntry=mstpPortInfoEntry, dhcpPoolDefaultRouterIpAddress4=dhcpPoolDefaultRouterIpAddress4, translationTypeStatus=translationTypeStatus, qos3ScheduleQueueInputTable=qos3ScheduleQueueInputTable, macStandardAclTable=macStandardAclTable, qos3PortPassThroughDscp=qos3PortPassThroughDscp, arpProxyArpStatus=arpProxyArpStatus, qos2PolicyCIRKbps=qos2PolicyCIRKbps, dhcpSnoopingPort=dhcpSnoopingPort, acl=acl, portMacCountLimitPortIndex=portMacCountLimitPortIndex, dvmrpNeighborExpiryTime=dvmrpNeighborExpiryTime, dhcpPoolDnsSerIpAddress7=dhcpPoolDnsSerIpAddress7, dcscmscAclNumber=dcscmscAclNumber, qosMapDscp7=qosMapDscp7, qos2PortQueueWrr=qos2PortQueueWrr, qosClassMapV6Flow=qosClassMapV6Flow, qos2MapIntptoDSCP5=qos2MapIntptoDSCP5, erpsPort0TxRapsTotalPktCnt=erpsPort0TxRapsTotalPktCnt, dhcpSnoopingAlarmInfoType=dhcpSnoopingAlarmInfoType, showmlsqosinterfaceIndex=showmlsqosinterfaceIndex, qos2MapIntptoDSCP4=qos2MapIntptoDSCP4, showmlsqosmapscosqueue=showmlsqosmapscosqueue, ospfSummaryAddressTable=ospfSummaryAddressTable, qos2AggPolicyPBSKbps=qos2AggPolicyPBSKbps, clusterv2RebootMem=clusterv2RebootMem, priPppoeIaPortTrust=priPppoeIaPortTrust, radiusServerRetransmit=radiusServerRetransmit, vlanName=vlanName, portLEDTimeRangeEndDate=portLEDTimeRangeEndDate, dvmrpNeighborGenerationId=dvmrpNeighborGenerationId, mirrorDestSession=mirrorDestSession, fdbMacCurStaticNum=fdbMacCurStaticNum, ntpEntObjectsGroup2=ntpEntObjectsGroup2, dhcpPoolOptionName=dhcpPoolOptionName, sysPowerType=sysPowerType, rateViolationNoShutdownPort=rateViolationNoShutdownPort)
mibBuilder.exportSymbols("NAG-MIB", urpf=urpf, prohibitIPOID=prohibitIPOID, macExternAct=macExternAct, aaaEnabled=aaaEnabled, macBlackholeConfig=macBlackholeConfig, macIpExternIndex=macIpExternIndex, portSecurityVlanMaxMacNum=portSecurityVlanMaxMacNum, ntpEntStatus=ntpEntStatus, qos2MapDSCPtoDPvalue=qos2MapDSCPtoDPvalue, qos2MapDSCPtoDSCP7=qos2MapDSCPtoDSCP7, qos2AggregatePolicy=qos2AggregatePolicy, clusterv2MemberHostName=clusterv2MemberHostName, qos3McQueueBindWidthStatus=qos3McQueueBindWidthStatus, arpSecurityConvert=arpSecurityConvert, priPowerPresent=priPowerPresent, dhcpSnoopingAckBindingIP=dhcpSnoopingAckBindingIP, aclAttach=aclAttach, dcscmVMacbindingMacAddr=dcscmVMacbindingMacAddr, sysSlotTable=sysSlotTable, ipExternPriority=ipExternPriority, qos2AggPolicyCIRKbps=qos2AggPolicyCIRKbps, priPorts=priPorts, dvmrpInterfaceTable=dvmrpInterfaceTable, ipExternDstPort1=ipExternDstPort1, qos2PolicyConformActionChange=qos2PolicyConformActionChange, qos3QueueWredStatus=qos3QueueWredStatus, sntpServerStatus=sntpServerStatus, qosPortQueueWeight4=qosPortQueueWeight4, dvmrpScalar=dvmrpScalar, macIpExternStatus=macIpExternStatus, qos3ScheduleQueueInputEntry=qos3ScheduleQueueInputEntry, dvmrpRouteNextHopTable=dvmrpRouteNextHopTable, erpsPortTrackConfigTable=erpsPortTrackConfigTable, ipv6StandardSubIndex=ipv6StandardSubIndex, showQos3VlanId=showQos3VlanId, erpsRingPort1Index=erpsRingPort1Index, dot1xSetUserOffline=dot1xSetUserOffline, dcscmVMacbindingAclNumber=dcscmVMacbindingAclNumber, erpsRingPort0Index=erpsRingPort0Index, dvmrpRouteNextHopSourceMask=dvmrpRouteNextHopSourceMask, flowControlStatus=flowControlStatus, ospfAdvertiseDefaultRoute=ospfAdvertiseDefaultRoute, qos3MapAtoB5=qos3MapAtoB5, qos2ClassMapVlan=qos2ClassMapVlan, ospfNetworkAreaAddressEntry=ospfNetworkAreaAddressEntry, ipStaticRouteExtMetric=ipStaticRouteExtMetric, portSecurityMacAddressPortIndex=portSecurityMacAddressPortIndex, macNotificationMibObjects=macNotificationMibObjects, qos3MapAtoB7=qos3MapAtoB7, dhcpSnoopingStatisticAckBindingNum=dhcpSnoopingStatisticAckBindingNum, qos2MapIntptoDSCP=qos2MapIntptoDSCP, dhcpSnoopingbindingARP=dhcpSnoopingbindingARP, erpsPortTrackRowStatus=erpsPortTrackRowStatus, sysSlotBootInfoTable=sysSlotBootInfoTable, dhcpPoolNextServerIpAddress5=dhcpPoolNextServerIpAddress5, qos2MapExptoIntp1=qos2MapExptoIntp1, erpsPort1RxRapsEventPktCnt=erpsPort1RxRapsEventPktCnt, efmOamLocalLinkFault=efmOamLocalLinkFault, sysFanEntry=sysFanEntry, mstpInstancePortEntry=mstpInstancePortEntry, receiveBandwidth=receiveBandwidth, switchInfo=switchInfo, poePortMaxPower=poePortMaxPower, numAclGroupAclIndex=numAclGroupAclIndex, portLEDTimeRangeMapEntry=portLEDTimeRangeMapEntry, qos3SchedulePolicyMapIndex=qos3SchedulePolicyMapIndex, portLEDTimeRangeMapIndex=portLEDTimeRangeMapIndex, ospfSummaryStatus=ospfSummaryStatus, qosPolicyViolateAction=qosPolicyViolateAction, qos3McQueueBindWidthMin=qos3McQueueBindWidthMin, dhcpPoolNextServerIpAddress3=dhcpPoolNextServerIpAddress3, erpsPortTrackCfmDomain=erpsPortTrackCfmDomain, showQos3VlanEntry=showQos3VlanEntry, ntpEntStatusOutPkts=ntpEntStatusOutPkts, dhcpSnoopingPortConfigEntry=dhcpSnoopingPortConfigEntry, deletePassword=deletePassword, qosClassMapV6AccGroup=qosClassMapV6AccGroup, showmlsqosmapsipprecdscp=showmlsqosmapsipprecdscp, macStandardAclEntry=macStandardAclEntry, qos3PolicyInsertClassMapName=qos3PolicyInsertClassMapName, qos3ScheduleQueueWeightPolicyIndex=qos3ScheduleQueueWeightPolicyIndex, loopbackDetecSpecVlanEntry=loopbackDetecSpecVlanEntry, erpsControlVlan=erpsControlVlan, macExternSrcMacWild=macExternSrcMacWild, ripMgt=ripMgt, sysCPUFiveSecondIdle=sysCPUFiveSecondIdle, qos3NodeScheduleNodeID=qos3NodeScheduleNodeID, dnsDomainSuffixEntry=dnsDomainSuffixEntry, dhcpPoolWinsStatus=dhcpPoolWinsStatus, ddmDiagnosisIfIndex=ddmDiagnosisIfIndex, qosMap=qosMap, showmlsqosmaps=showmlsqosmaps, dhcpSnoopingAckBindingVid=dhcpSnoopingAckBindingVid, dcscm6scPortbindingTable=dcscm6scPortbindingTable, sshUserPassword=sshUserPassword, qos3SchedulePolicyMapTable=qos3SchedulePolicyMapTable, fanNormalOID=fanNormalOID, arpProxyArpTable=arpProxyArpTable, lpbackDetecVlanList=lpbackDetecVlanList, ntpEntInfo=ntpEntInfo, portLEDTimeRangeName=portLEDTimeRangeName, efmOamRemoteLinkFault=efmOamRemoteLinkFault, translationOldVlanid=translationOldVlanid, macNotificationHistTimestamp=macNotificationHistTimestamp, erpsRapsVirtualChannel=erpsRapsVirtualChannel, mirrorDestGreEntry=mirrorDestGreEntry, sysPortNum=sysPortNum, dhcpSnoopingBlockedInfoShow=dhcpSnoopingBlockedInfoShow, dvmrpNeighborMajorVersion=dvmrpNeighborMajorVersion, clusterv2CandidateCounter=clusterv2CandidateCounter, qos2MapExptoIntp6=qos2MapExptoIntp6, priPppoeIaPortVendorTagStrip=priPppoeIaPortVendorTagStrip, mstpPortPortFast=mstpPortPortFast, portUtilEntry=portUtilEntry, dhcpPoolDnsSerIpAddress8=dhcpPoolDnsSerIpAddress8, macIpExternAclTable=macIpExternAclTable, qos3ScheduleBindWidthStatus=qos3ScheduleBindWidthStatus, mabOnlineUserTable=mabOnlineUserTable, ntpEntGroups=ntpEntGroups, tacacsServerHostTable=tacacsServerHostTable, qos2MapExptoDPStatus=qos2MapExptoDPStatus, NtpDateTime=NtpDateTime, dot1xOnlineUserPortVlanid=dot1xOnlineUserPortVlanid, erpsRapsMel=erpsRapsMel, qos2AggPolicyViolateActionChangeValue=qos2AggPolicyViolateActionChangeValue, mirrorSrcCpuEntry=mirrorSrcCpuEntry, qos2PortPolicy=qos2PortPolicy, erpsInstanceRowStatus=erpsInstanceRowStatus, qos3ClassMapType=qos3ClassMapType, sysFanSpeed=sysFanSpeed, snmpTrapHostStatus=snmpTrapHostStatus, poePortConfigTable=poePortConfigTable, portHybridTaggedAllowedVlanEntry=portHybridTaggedAllowedVlanEntry, dhcpSnoopingStaticBindingTable=dhcpSnoopingStaticBindingTable, dhcpPoolDnsSerPoolName=dhcpPoolDnsSerPoolName, macNotificationHistoryTable=macNotificationHistoryTable, ipv6ExternDstIp=ipv6ExternDstIp, dvmrpInterfaceGenerationId=dvmrpInterfaceGenerationId, qos2ServicePolicyTable=qos2ServicePolicyTable, macIpExternDstIp=macIpExternDstIp, ospfAreaNumber=ospfAreaNumber, portLEDTimeRangeStartWeek=portLEDTimeRangeStartWeek, priIgmpSnoopingPortAuthTable=priIgmpSnoopingPortAuthTable, macNotificationInterfaceObjects=macNotificationInterfaceObjects, qos3AggPolicyconformSetDp=qos3AggPolicyconformSetDp, qos3PolicyMapGroupStatus=qos3PolicyMapGroupStatus, psPortSecurity=psPortSecurity, radiusMgt=radiusMgt, erpsNodeState=erpsNodeState, loopbackDetecCtrlRecovery=loopbackDetecCtrlRecovery, nameAclGroupAclType=nameAclGroupAclType, portGroupMemberPriority=portGroupMemberPriority, portGroupMemberMode=portGroupMemberMode, secVid=secVid, lastFiveMinInPktsPerSec=lastFiveMinInPktsPerSec, radiusAcctServerHostIP=radiusAcctServerHostIP, sshUseEntry=sshUseEntry, qos3ScheduleQueueAlgorithm=qos3ScheduleQueueAlgorithm, qos2MapIntptoDSCPStatus=qos2MapIntptoDSCPStatus, mstpEnable=mstpEnable, dhcpSnoopingRequestBindingIP=dhcpSnoopingRequestBindingIP, priUamSecurityPortMib=priUamSecurityPortMib, erpsPort0TxRapsFsPktCnt=erpsPort0TxRapsFsPktCnt, arpStaticIpaddress=arpStaticIpaddress, dcscmdcAclNumber=dcscmdcAclNumber, showqosaggregatepolicercontent=showqosaggregatepolicercontent, sysWriteConfig=sysWriteConfig, qos2MapDSCPtoIntp6=qos2MapDSCPtoIntp6, dhcpSnoopingActionRecoveryTime=dhcpSnoopingActionRecoveryTime, portSecurityAgingType=portSecurityAgingType, clusterv2StatusKeepalive=clusterv2StatusKeepalive, qos3SetIpVrf=qos3SetIpVrf, priIgmpSnoopingBindTable=priIgmpSnoopingBindTable, mrppRingPriPortBlockState=mrppRingPriPortBlockState, mirrorRspanSessionTable=mirrorRspanSessionTable, showclassmapTable=showclassmapTable, iPAddrPrimaryInterface=iPAddrPrimaryInterface, sysUserName=sysUserName, mstpPortDigestSnp=mstpPortDigestSnp, qos2MapCostoIntp2=qos2MapCostoIntp2, mstpMaxage=mstpMaxage, ospfRedistributeEntry=ospfRedistributeEntry, clusterv2MemberOperStatus=clusterv2MemberOperStatus, mirrorSrcCpuSession=mirrorSrcCpuSession, loopbackDetection=loopbackDetection, erpsInstanceStatusEntry=erpsInstanceStatusEntry, qos3ScheduleQueueAlgorithmConfig=qos3ScheduleQueueAlgorithmConfig, mvlanPortStatus=mvlanPortStatus, ripSplitHorizonStatus=ripSplitHorizonStatus, ntpSnmpMIB=ntpSnmpMIB, ddmDiagTXPowerLowAlarmThreshold=ddmDiagTXPowerLowAlarmThreshold, qos3PolicyMapGroupTable=qos3PolicyMapGroupTable, qos2MapDSCPtoIntp=qos2MapDSCPtoIntp, mstpPortInfoPortIndex=mstpPortInfoPortIndex, dhcpLeaseTimeMinutes=dhcpLeaseTimeMinutes, qos2MapDSCPtoIntp7=qos2MapDSCPtoIntp7, sysSlotEntry=sysSlotEntry, qos3AggPolicyViolateSetPrec=qos3AggPolicyViolateSetPrec, macExternVlanId=macExternVlanId, trapDestTable=trapDestTable, securityMacPortTable=securityMacPortTable, qos3DelCVid=qos3DelCVid, dcscm6VMacbindingAclNumber=dcscm6VMacbindingAclNumber)
