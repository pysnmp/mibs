#
# PySNMP MIB module RS-XX9-LIQUID-COOLING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rs/RS-XX9-LIQUID-COOLING-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 13:33:57 2024
# On host fv-az883-167 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
commonNotificationAlarmClass, = mibBuilder.importSymbols("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass")
rsXx9MibModule, rsXx9LiquidCooling = mibBuilder.importSymbols("RS-XX9-SMI-MIB", "rsXx9MibModule", "rsXx9LiquidCooling")
NotificationPriority, NotificationMask, SwitchOnOff, NotificationState = mibBuilder.importSymbols("RS-XX9-TC-MIB", "NotificationPriority", "NotificationMask", "SwitchOnOff", "NotificationState")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, Integer32, NotificationType, IpAddress, iso, ModuleIdentity, Gauge32, Bits, Counter32, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "NotificationType", "IpAddress", "iso", "ModuleIdentity", "Gauge32", "Bits", "Counter32", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
rsXx9LqMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 1, 216, 100))
rsXx9LqMibModule.setRevisions(('2015-11-30 17:00', '2015-08-20 15:00', '2015-06-23 12:00', '2015-02-27 15:00', '2014-12-22 16:00', '2013-10-07 12:00', '2013-01-31 13:00', '2012-05-11 08:00', '2012-01-26 08:00',))
if mibBuilder.loadTexts: rsXx9LqMibModule.setLastUpdated('201511301700Z')
if mibBuilder.loadTexts: rsXx9LqMibModule.setOrganization('Rohde&Schwarz GmbH & Co. KG')
rsXx9LiquidCoolingNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 0))
lqSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 0, 1)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationPriority"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationState"))
if mibBuilder.loadTexts: lqSummary.setStatus('current')
lqFilterSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 0, 2)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationPriority"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationState"))
if mibBuilder.loadTexts: lqFilterSummary.setStatus('current')
lqSensorsSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 0, 3)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationPriority"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationState"))
if mibBuilder.loadTexts: lqSensorsSummary.setStatus('current')
lqSiteWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 0, 4)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationPriority"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationState"))
if mibBuilder.loadTexts: lqSiteWarning.setStatus('current')
lqSiteFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 0, 5)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationPriority"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationState"))
if mibBuilder.loadTexts: lqSiteFault.setStatus('current')
rsXx9LiquidCoolingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1))
lqStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1))
lqNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 1), )
if mibBuilder.loadTexts: lqNotificationTable.setStatus('current')
lqNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 1, 1), ).setIndexNames((0, "RS-XX9-LIQUID-COOLING-MIB", "lqNotificationCycleIdx"), (0, "RS-XX9-LIQUID-COOLING-MIB", "lqNotificationIdx"))
if mibBuilder.loadTexts: lqNotificationEntry.setStatus('current')
lqNotificationCycleIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: lqNotificationCycleIdx.setStatus('current')
lqNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: lqNotificationIdx.setStatus('current')
lqNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lqSummary", 1), ("lqFilterSummary", 2), ("lqSensorsSummary", 3), ("lqSiteWarning", 4), ("lqSiteFault", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqNotificationName.setStatus('current')
lqNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 1, 1, 4), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqNotificationMask.setStatus('current')
lqNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 1, 1, 5), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqNotificationPriority.setStatus('current')
lqNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 1, 1, 6), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqNotificationState.setStatus('current')
lqStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2), )
if mibBuilder.loadTexts: lqStateTable.setStatus('current')
lqStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1), ).setIndexNames((0, "RS-XX9-LIQUID-COOLING-MIB", "lqNotificationCycleIdx"))
if mibBuilder.loadTexts: lqStateEntry.setStatus('current')
lqStInletTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 2), Integer32()).setUnits('degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStInletTemperature.setStatus('current')
lqStInletTemperatureSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 3), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStInletTemperatureSensor.setStatus('current')
lqStInletTemperatureSumState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 4), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStInletTemperatureSumState.setStatus('current')
lqStOutletTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 5), Integer32()).setUnits('degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStOutletTemperature.setStatus('current')
lqStOutletTemperatureSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 6), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStOutletTemperatureSensor.setStatus('current')
lqStOutletTemperatureSumState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 7), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStOutletTemperatureSumState.setStatus('current')
lqStCoolantPressure = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 8), Unsigned32()).setUnits('deci bar').setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStCoolantPressure.setStatus('current')
lqStCoolantPressureSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 9), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStCoolantPressureSensor.setStatus('current')
lqStCoolantPressureSumState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 10), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStCoolantPressureSumState.setStatus('current')
lqStInletTemperatureFaultLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 11), Integer32()).setUnits('degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStInletTemperatureFaultLimit.setStatus('obsolete')
lqStInletTemperatureWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 12), Integer32()).setUnits('degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStInletTemperatureWarningLimit.setStatus('obsolete')
lqStCompactPumpDesiredSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lqStCompactPumpDesiredSpeed.setStatus('current')
lqPumpStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 3), )
if mibBuilder.loadTexts: lqPumpStateTable.setStatus('current')
lqPumpStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 3, 1), ).setIndexNames((0, "RS-XX9-LIQUID-COOLING-MIB", "lqNotificationCycleIdx"), (0, "RS-XX9-LIQUID-COOLING-MIB", "lqPStPumpIdx"))
if mibBuilder.loadTexts: lqPumpStateEntry.setStatus('current')
lqPStPumpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: lqPStPumpIdx.setStatus('current')
lqPStCommunicationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 3, 1, 3), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqPStCommunicationState.setStatus('current')
lqPStSumState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 3, 1, 4), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqPStSumState.setStatus('current')
lqPStMotorBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 3, 1, 5), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqPStMotorBlocked.setStatus('current')
lqPStOperatingHours = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 3, 1, 6), Unsigned32()).setUnits('hour').setMaxAccess("readonly")
if mibBuilder.loadTexts: lqPStOperatingHours.setStatus('current')
lqPStType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 3, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqPStType.setStatus('current')
lqPStCurrentFlowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 3, 1, 8), Unsigned32()).setUnits('liter per minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: lqPStCurrentFlowRate.setStatus('current')
lqPStCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 3, 1, 9), Unsigned32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lqPStCurrentSpeed.setStatus('current')
lqFanStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 4), )
if mibBuilder.loadTexts: lqFanStateTable.setStatus('current')
lqFanStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 4, 1), ).setIndexNames((0, "RS-XX9-LIQUID-COOLING-MIB", "lqNotificationCycleIdx"), (0, "RS-XX9-LIQUID-COOLING-MIB", "lqFStFanIdx"))
if mibBuilder.loadTexts: lqFanStateEntry.setStatus('current')
lqFStFanIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: lqFStFanIdx.setStatus('current')
lqFStCommunicationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 4, 1, 2), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqFStCommunicationState.setStatus('current')
lqFStSumState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 4, 1, 3), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqFStSumState.setStatus('current')
lqFStMotorBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 4, 1, 4), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqFStMotorBlocked.setStatus('current')
lqFStOperatingHours = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 4, 1, 5), Unsigned32()).setUnits('hour').setMaxAccess("readonly")
if mibBuilder.loadTexts: lqFStOperatingHours.setStatus('current')
lqFStSupplyFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 4, 1, 6), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqFStSupplyFailure.setStatus('current')
lqFStCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 1, 4, 1, 7), Unsigned32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lqFStCurrentSpeed.setStatus('current')
lqConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2))
lqConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1), )
if mibBuilder.loadTexts: lqConfigTable.setStatus('current')
lqConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1), ).setIndexNames((0, "RS-XX9-LIQUID-COOLING-MIB", "lqCfgCycleIdx"))
if mibBuilder.loadTexts: lqConfigEntry.setStatus('current')
lqCfgCycleIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: lqCfgCycleIdx.setStatus('current')
lqCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("coolingRS", 1), ("coolingSite", 2), ("coolingRSsmall", 3), ("cooling8000", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgType.setStatus('current')
lqCfgHeatExchangersPerRack = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgHeatExchangersPerRack.setStatus('current')
lqCfgFansPerHeatExchanger = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgFansPerHeatExchanger.setStatus('current')
lqCfgCoolantSetPointTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 65))).setUnits('degree Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgCoolantSetPointTemperature.setStatus('current')
lqCfgCoolantTemperatureFaultLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 65))).setUnits('degree Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgCoolantTemperatureFaultLimit.setStatus('current')
lqCfgCoolantTemperatureWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 65))).setUnits('degree Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgCoolantTemperatureWarningLimit.setStatus('current')
lqCfgCoolantPressureFaultLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setUnits('deci bar').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgCoolantPressureFaultLimit.setStatus('current')
lqCfgCoolantPressureWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setUnits('deci bar').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgCoolantPressureWarningLimit.setStatus('current')
lqCfgFanMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(50, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgFanMaxSpeed.setStatus('current')
lqCfgPumpsExtraFlowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setUnits('10 liter per minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgPumpsExtraFlowRate.setStatus('current')
lqCfgAntiFreeze = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 12), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgAntiFreeze.setStatus('current')
lqCfgAutoOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alwaysOn", 1), ("autoOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lqCfgAutoOn.setStatus('current')
compactCoolingConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2), )
if mibBuilder.loadTexts: compactCoolingConfigTable.setStatus('current')
compactCoolingConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2, 1), ).setIndexNames((0, "RS-XX9-LIQUID-COOLING-MIB", "compactCfgCycleIdx"))
if mibBuilder.loadTexts: compactCoolingConfigEntry.setStatus('current')
compactCfgCycleIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: compactCfgCycleIdx.setStatus('current')
compactCfgHeatExchangers = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compactCfgHeatExchangers.setStatus('current')
compactCfgFans = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compactCfgFans.setStatus('current')
compactCfgCoolantTemperatureFaultLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 65))).setUnits('degree Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: compactCfgCoolantTemperatureFaultLimit.setStatus('current')
compactCfgCoolantTemperatureWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 65))).setUnits('degree Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: compactCfgCoolantTemperatureWarningLimit.setStatus('current')
compactCfgCoolantPressureFaultLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setUnits('deci bar').setMaxAccess("readwrite")
if mibBuilder.loadTexts: compactCfgCoolantPressureFaultLimit.setStatus('current')
compactCfgCoolantPressureWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setUnits('deci bar').setMaxAccess("readwrite")
if mibBuilder.loadTexts: compactCfgCoolantPressureWarningLimit.setStatus('current')
compactCfgPumpsExtraFlowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setUnits('10 liter per minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: compactCfgPumpsExtraFlowRate.setStatus('current')
compactCfgAutoOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alwaysOn", 1), ("autoOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compactCfgAutoOn.setStatus('current')
compactCfgServiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 1, 2, 2, 1, 10), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compactCfgServiceMode.setStatus('current')
rsXx9LiquidCoolingConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2))
rsXx9LqCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 1))
lqRsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 1, 1)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "rsXx9LqObjCommon"), ("RS-XX9-LIQUID-COOLING-MIB", "rsXx9LqObjRS"), ("RS-XX9-LIQUID-COOLING-MIB", "rsXx9LqNotifyCommon"), ("RS-XX9-LIQUID-COOLING-MIB", "rsXx9LqNotifyRS"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lqRsCompliance = lqRsCompliance.setStatus('current')
lqSiteCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 1, 2)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "rsXx9LqObjCommon"), ("RS-XX9-LIQUID-COOLING-MIB", "rsXx9LqNotifyCommon"), ("RS-XX9-LIQUID-COOLING-MIB", "rsXx9LqNotifySite"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lqSiteCompliance = lqSiteCompliance.setStatus('current')
lqRsSmallCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 1, 3)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "rsXx9LqObjCommon"), ("RS-XX9-LIQUID-COOLING-MIB", "rsXx9LqNotifyCommon"), ("RS-XX9-LIQUID-COOLING-MIB", "rsXx9LqObjSmall"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lqRsSmallCompliance = lqRsSmallCompliance.setStatus('current')
lqCompactCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 1, 4)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "rsXx9LqNotifyCommon"), ("RS-XX9-LIQUID-COOLING-MIB", "rsXx9CompactCoolingObjs"), ("RS-XX9-LIQUID-COOLING-MIB", "rsXx9CompactCoolingNotify"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lqCompactCompliance = lqCompactCompliance.setStatus('current')
rsXx9LqGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 2))
rsXx9LqObjCommon = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 2, 1)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationName"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationMask"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationPriority"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgType"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgCoolantTemperatureFaultLimit"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgAutoOn"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgCoolantTemperatureWarningLimit"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStInletTemperature"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStInletTemperatureSensor"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStInletTemperatureSumState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStOutletTemperature"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStOutletTemperatureSensor"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStOutletTemperatureSumState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStCoolantPressure"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStCoolantPressureSensor"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStCoolantPressureSumState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx9LqObjCommon = rsXx9LqObjCommon.setStatus('current')
rsXx9LqObjRS = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 2, 2)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "lqPStCommunicationState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqPStSumState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqPStMotorBlocked"), ("RS-XX9-LIQUID-COOLING-MIB", "lqPStOperatingHours"), ("RS-XX9-LIQUID-COOLING-MIB", "lqPStType"), ("RS-XX9-LIQUID-COOLING-MIB", "lqPStCurrentFlowRate"), ("RS-XX9-LIQUID-COOLING-MIB", "lqPStCurrentSpeed"), ("RS-XX9-LIQUID-COOLING-MIB", "lqFStCommunicationState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqFStSumState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqFStMotorBlocked"), ("RS-XX9-LIQUID-COOLING-MIB", "lqFStOperatingHours"), ("RS-XX9-LIQUID-COOLING-MIB", "lqFStSupplyFailure"), ("RS-XX9-LIQUID-COOLING-MIB", "lqFStCurrentSpeed"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgHeatExchangersPerRack"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgFansPerHeatExchanger"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgCoolantSetPointTemperature"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgCoolantPressureFaultLimit"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgCoolantPressureWarningLimit"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgFanMaxSpeed"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgPumpsExtraFlowRate"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgAntiFreeze"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx9LqObjRS = rsXx9LqObjRS.setStatus('current')
rsXx9LqObjSmall = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 2, 3)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "lqCfgCoolantPressureFaultLimit"), ("RS-XX9-LIQUID-COOLING-MIB", "lqCfgCoolantPressureWarningLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx9LqObjSmall = rsXx9LqObjSmall.setStatus('current')
rsXx9LqNotifyCommon = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 2, 4)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "lqSummary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx9LqNotifyCommon = rsXx9LqNotifyCommon.setStatus('current')
rsXx9LqNotifyRS = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 2, 5)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "lqFilterSummary"), ("RS-XX9-LIQUID-COOLING-MIB", "lqSensorsSummary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx9LqNotifyRS = rsXx9LqNotifyRS.setStatus('current')
rsXx9LqNotifySite = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 2, 6)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "lqSiteWarning"), ("RS-XX9-LIQUID-COOLING-MIB", "lqSiteFault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx9LqNotifySite = rsXx9LqNotifySite.setStatus('current')
rsXx9LqObjsObsoleted = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 2, 7)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "lqStInletTemperatureFaultLimit"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStInletTemperatureWarningLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx9LqObjsObsoleted = rsXx9LqObjsObsoleted.setStatus('obsolete')
rsXx9CompactCoolingObjs = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 2, 100)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "lqPStType"), ("RS-XX9-LIQUID-COOLING-MIB", "lqFStSumState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStCoolantPressureSumState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStCoolantPressureSensor"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStCoolantPressure"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStOutletTemperatureSumState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStOutletTemperatureSensor"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStOutletTemperature"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStInletTemperatureSumState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStInletTemperatureSensor"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStInletTemperature"), ("RS-XX9-LIQUID-COOLING-MIB", "lqPStSumState"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationName"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationMask"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationPriority"), ("RS-XX9-LIQUID-COOLING-MIB", "lqNotificationState"), ("RS-XX9-LIQUID-COOLING-MIB", "compactCfgHeatExchangers"), ("RS-XX9-LIQUID-COOLING-MIB", "compactCfgCoolantTemperatureFaultLimit"), ("RS-XX9-LIQUID-COOLING-MIB", "compactCfgCoolantTemperatureWarningLimit"), ("RS-XX9-LIQUID-COOLING-MIB", "compactCfgCoolantPressureFaultLimit"), ("RS-XX9-LIQUID-COOLING-MIB", "compactCfgCoolantPressureWarningLimit"), ("RS-XX9-LIQUID-COOLING-MIB", "compactCfgPumpsExtraFlowRate"), ("RS-XX9-LIQUID-COOLING-MIB", "lqStCompactPumpDesiredSpeed"), ("RS-XX9-LIQUID-COOLING-MIB", "compactCfgServiceMode"), ("RS-XX9-LIQUID-COOLING-MIB", "compactCfgAutoOn"), ("RS-XX9-LIQUID-COOLING-MIB", "compactCfgFans"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx9CompactCoolingObjs = rsXx9CompactCoolingObjs.setStatus('current')
rsXx9CompactCoolingNotify = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 100, 2, 2, 200)).setObjects(("RS-XX9-LIQUID-COOLING-MIB", "lqSensorsSummary"), ("RS-XX9-LIQUID-COOLING-MIB", "lqSiteWarning"), ("RS-XX9-LIQUID-COOLING-MIB", "lqSiteFault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx9CompactCoolingNotify = rsXx9CompactCoolingNotify.setStatus('current')
mibBuilder.exportSymbols("RS-XX9-LIQUID-COOLING-MIB", lqStOutletTemperatureSensor=lqStOutletTemperatureSensor, lqSiteFault=lqSiteFault, lqFanStateTable=lqFanStateTable, rsXx9LqCompliances=rsXx9LqCompliances, lqCfgAutoOn=lqCfgAutoOn, compactCfgServiceMode=compactCfgServiceMode, lqSiteCompliance=lqSiteCompliance, lqStInletTemperatureWarningLimit=lqStInletTemperatureWarningLimit, lqStOutletTemperatureSumState=lqStOutletTemperatureSumState, lqConfigEntry=lqConfigEntry, lqPStOperatingHours=lqPStOperatingHours, lqPStMotorBlocked=lqPStMotorBlocked, lqStInletTemperatureFaultLimit=lqStInletTemperatureFaultLimit, lqNotificationCycleIdx=lqNotificationCycleIdx, compactCfgFans=compactCfgFans, compactCfgCoolantTemperatureWarningLimit=compactCfgCoolantTemperatureWarningLimit, lqStatus=lqStatus, lqStateEntry=lqStateEntry, lqFStMotorBlocked=lqFStMotorBlocked, lqPStType=lqPStType, compactCfgHeatExchangers=compactCfgHeatExchangers, lqStCoolantPressure=lqStCoolantPressure, lqCfgFanMaxSpeed=lqCfgFanMaxSpeed, lqStInletTemperatureSensor=lqStInletTemperatureSensor, lqNotificationPriority=lqNotificationPriority, lqFStSumState=lqFStSumState, lqFStOperatingHours=lqFStOperatingHours, lqPStCurrentSpeed=lqPStCurrentSpeed, lqFanStateEntry=lqFanStateEntry, lqNotificationIdx=lqNotificationIdx, lqFStFanIdx=lqFStFanIdx, compactCfgCoolantPressureWarningLimit=compactCfgCoolantPressureWarningLimit, rsXx9LqObjRS=rsXx9LqObjRS, lqPStCurrentFlowRate=lqPStCurrentFlowRate, lqFStSupplyFailure=lqFStSupplyFailure, rsXx9LqNotifySite=rsXx9LqNotifySite, lqSummary=lqSummary, rsXx9LqObjsObsoleted=rsXx9LqObjsObsoleted, lqCfgFansPerHeatExchanger=lqCfgFansPerHeatExchanger, lqCfgCoolantPressureWarningLimit=lqCfgCoolantPressureWarningLimit, rsXx9CompactCoolingObjs=rsXx9CompactCoolingObjs, compactCfgCoolantTemperatureFaultLimit=compactCfgCoolantTemperatureFaultLimit, lqPumpStateEntry=lqPumpStateEntry, rsXx9LqMibModule=rsXx9LqMibModule, lqFilterSummary=lqFilterSummary, rsXx9LiquidCoolingObjects=rsXx9LiquidCoolingObjects, lqStInletTemperatureSumState=lqStInletTemperatureSumState, lqCfgAntiFreeze=lqCfgAntiFreeze, rsXx9LqObjCommon=rsXx9LqObjCommon, lqCfgCoolantTemperatureFaultLimit=lqCfgCoolantTemperatureFaultLimit, lqCfgPumpsExtraFlowRate=lqCfgPumpsExtraFlowRate, compactCfgCycleIdx=compactCfgCycleIdx, lqPStCommunicationState=lqPStCommunicationState, rsXx9LqNotifyCommon=rsXx9LqNotifyCommon, lqPStSumState=lqPStSumState, lqSiteWarning=lqSiteWarning, lqCfgCoolantTemperatureWarningLimit=lqCfgCoolantTemperatureWarningLimit, lqCfgCycleIdx=lqCfgCycleIdx, lqCfgCoolantSetPointTemperature=lqCfgCoolantSetPointTemperature, lqFStCommunicationState=lqFStCommunicationState, lqStCompactPumpDesiredSpeed=lqStCompactPumpDesiredSpeed, lqCfgCoolantPressureFaultLimit=lqCfgCoolantPressureFaultLimit, lqNotificationMask=lqNotificationMask, lqCompactCompliance=lqCompactCompliance, lqNotificationEntry=lqNotificationEntry, compactCoolingConfigTable=compactCoolingConfigTable, lqStCoolantPressureSensor=lqStCoolantPressureSensor, lqRsCompliance=lqRsCompliance, rsXx9LiquidCoolingNotifications=rsXx9LiquidCoolingNotifications, lqNotificationName=lqNotificationName, rsXx9LqObjSmall=rsXx9LqObjSmall, lqPStPumpIdx=lqPStPumpIdx, lqNotificationTable=lqNotificationTable, lqNotificationState=lqNotificationState, lqCfgHeatExchangersPerRack=lqCfgHeatExchangersPerRack, compactCoolingConfigEntry=compactCoolingConfigEntry, rsXx9LiquidCoolingConformance=rsXx9LiquidCoolingConformance, lqSensorsSummary=lqSensorsSummary, compactCfgPumpsExtraFlowRate=compactCfgPumpsExtraFlowRate, lqConfigTable=lqConfigTable, rsXx9LqGroups=rsXx9LqGroups, lqStOutletTemperature=lqStOutletTemperature, lqCfgType=lqCfgType, lqStCoolantPressureSumState=lqStCoolantPressureSumState, PYSNMP_MODULE_ID=rsXx9LqMibModule, lqFStCurrentSpeed=lqFStCurrentSpeed, rsXx9LqNotifyRS=rsXx9LqNotifyRS, compactCfgCoolantPressureFaultLimit=compactCfgCoolantPressureFaultLimit, lqConfiguration=lqConfiguration, lqStInletTemperature=lqStInletTemperature, lqRsSmallCompliance=lqRsSmallCompliance, compactCfgAutoOn=compactCfgAutoOn, lqPumpStateTable=lqPumpStateTable, lqStateTable=lqStateTable, rsXx9CompactCoolingNotify=rsXx9CompactCoolingNotify)
