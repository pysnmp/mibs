#
# PySNMP MIB module PT-RADIOLINK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/ericsson/PT-RADIOLINK-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 13:31:14 2024
# On host fv-az975-559 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ifEntry, = mibBuilder.importSymbols("IF-MIB", "ifEntry")
InetAddressIPv6, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv6")
pt, = mibBuilder.importSymbols("PT-MIB", "pt")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, ModuleIdentity, Gauge32, ObjectIdentity, Counter32, Bits, MibIdentifier, TimeTicks, Counter64, IpAddress, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "ModuleIdentity", "Gauge32", "ObjectIdentity", "Counter32", "Bits", "MibIdentifier", "TimeTicks", "Counter64", "IpAddress", "Unsigned32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ptRadioLink = ModuleIdentity((1, 3, 6, 1, 4, 1, 193, 223, 2, 7))
ptRadioLink.setRevisions(('2017-12-01 16:00', '2017-04-05 10:00', '2017-01-18 10:00', '2016-12-06 14:00', '2016-05-22 10:30',))
if mibBuilder.loadTexts: ptRadioLink.setLastUpdated('201712011600Z')
if mibBuilder.loadTexts: ptRadioLink.setOrganization('Ericsson')
ptRadioLinkConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 2))
ctPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4))
class AcmTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))
    namedValues = NamedValues(("acmHalfBpsk", 1), ("acmHalfBpskLight", 2), ("acmHalfBpskStrong", 3), ("acmBpsk", 4), ("acmBpskLight", 5), ("acmBpskStrong", 6), ("acm4Qam", 7), ("acm4QamLight", 8), ("acm4QamStrong", 9), ("acm16Qam", 10), ("acm16QamLight", 11), ("acm16QamStrong", 12), ("acm32Qam", 13), ("acm32QamLight", 14), ("acm32QamStrong", 15), ("acm64Qam", 16), ("acm64QamLight", 17), ("acm64QamStrong", 18), ("acm128Qam", 19), ("acm128QamLight", 20), ("acm128QamStrong", 21), ("acm256Qam", 22), ("acm256QamLight", 23), ("acm256QamStrong", 24), ("acm512Qam", 25), ("acm512QamLight", 26), ("acm512QamStrong", 27), ("acm1024Qam", 28), ("acm1024QamLight", 29), ("acm1024QamStrong", 30), ("acm2048Qam", 31), ("acm2048QamLight", 32), ("acm2048QamStrong", 33), ("acm4096Qam", 34), ("acm4096QamLight", 35), ("acm4096QamStrong", 36))

class EnableStatusTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3))

class XpicMimoTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("notAvailable", 1), ("locked", 2), ("unlocked", 3), ("unknown", 4))

ctTable = MibTable((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1), )
if mibBuilder.loadTexts: ctTable.setStatus('current')
ctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1), )
ifEntry.registerAugmentions(("PT-RADIOLINK-MIB", "ctEntry"))
ctEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: ctEntry.setStatus('current')
actualInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actualInputPower.setStatus('current')
actualOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actualOutputPower.setStatus('current')
actualRxAcm = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actualRxAcm.setStatus('current')
actualTxAcm = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actualTxAcm.setStatus('current')
ctDistinguishedName = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDistinguishedName.setStatus('current')
description = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: description.setStatus('current')
carrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("c", 3), ("d", 4), ("unknown", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: carrierId.setStatus('current')
ctStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("na", 3), ("unknown", 4), ("degraded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctStatus.setStatus('current')
frameId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frameId.setStatus('current')
txFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txFrequency.setStatus('current')
minTxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minTxFrequency.setStatus('current')
maxTxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxTxFrequency.setStatus('current')
rxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxFrequency.setStatus('current')
minRxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minRxFrequency.setStatus('current')
maxRxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxRxFrequency.setStatus('current')
frequencyStepSize = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequencyStepSize.setStatus('current')
duplexDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: duplexDistance.setStatus('current')
duplexType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("variable", 1), ("fixed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: duplexType.setStatus('current')
duplexConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 19), EnableStatusTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: duplexConfig.setStatus('current')
autoFreqSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("master", 2), ("slave", 3), ("unknown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFreqSelection.setStatus('current')
autoFreqSelectedChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFreqSelectedChannel.setStatus('current')
autoFreqSelectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("idle", 1), ("searchingForSlave", 2), ("requestingInfoFromSlave", 3), ("waitingForMaster", 4), ("waitingForChannelInfoRequest", 5), ("inProgress", 6), ("initializing", 7), ("finished", 8), ("failed", 9), ("unknown", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoFreqSelectionStatus.setStatus('current')
channelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("cs7MHz", 1), ("cs10MHz", 2), ("cs14MHz", 3), ("cs20MHz", 4), ("cs28MHz", 5), ("cs30MHz", 6), ("cs40MHz", 7), ("cs50MHz", 8), ("cs56MHz", 9), ("cs250MHz", 10), ("cs60MHz", 11), ("cs500MHz", 12), ("cs750MHz", 13), ("cs100MHz", 14), ("cs150MHz", 15), ("cs200MHz", 16), ("cs125MHz", 17), ("cs80MHz", 18), ("cs112MHz", 19), ("cs1000MHz", 20), ("cs1250MHz", 21), ("cs1500MHz", 22), ("cs62p5MHz", 23), ("cs2000MHz", 24), ("unknown", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelSpacing.setStatus('current')
polarization = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSpecified", 1), ("horizontal", 2), ("vertical", 3), ("unknown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polarization.setStatus('current')
txOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("off", 2), ("on", 3), ("standby", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txOperStatus.setStatus('current')
txAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txAdminStatus.setStatus('current')
selectedOutputPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standard", 1), ("high", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: selectedOutputPowerType.setStatus('current')
availableOutputPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standard", 1), ("high", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: availableOutputPowerType.setStatus('current')
selectedMinOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: selectedMinOutputPower.setStatus('current')
selectedMaxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: selectedMaxOutputPower.setStatus('current')
availableMinOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: availableMinOutputPower.setStatus('current')
availableMaxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: availableMaxOutputPower.setStatus('current')
referenceSec = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("noAvailable", 1), ("sec2", 2), ("sec4L", 4), ("sec4H", 5), ("sec5B", 7), ("sec6B", 9), ("sec5LB", 10), ("sec5HB", 11), ("sec6LB", 12), ("sec6HB", 13), ("sec7B", 14), ("unknown", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: referenceSec.setStatus('current')
targetInputPowerFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: targetInputPowerFarEnd.setStatus('current')
berAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tenExpMinus6", 1), ("tenExpMinus3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berAlarmThreshold.setStatus('current')
inputPowerAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputPowerAlarmThreshold.setStatus('current')
plannedAlignmentInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plannedAlignmentInputPower.setStatus('current')
atpcFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 38), EnableStatusTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atpcFallback.setStatus('current')
atpcFallbackTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atpcFallbackTimer.setStatus('current')
atpcFallbackOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atpcFallbackOutputPower.setStatus('current')
xpicStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 41), XpicMimoTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpicStatus.setStatus('current')
mimoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 42), XpicMimoTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mimoStatus.setStatus('current')
actualSnir = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 43), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actualSnir.setStatus('current')
actualXpi = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actualXpi.setStatus('current')
actualSi = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 45), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actualSi.setStatus('current')
actualTxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actualTxCapacity.setStatus('current')
licensedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensedCapacity.setStatus('current')
availableMinCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: availableMinCapacity.setStatus('current')
availableMaxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: availableMaxCapacity.setStatus('current')
selectedMinCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: selectedMinCapacity.setStatus('current')
selectedMaxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: selectedMaxCapacity.setStatus('current')
wantedLicensedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wantedLicensedCapacity.setStatus('current')
availableMinAcm = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 53), AcmTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: availableMinAcm.setStatus('current')
availableMaxAcm = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 54), AcmTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: availableMaxAcm.setStatus('current')
selectedMinAcm = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 55), AcmTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: selectedMinAcm.setStatus('current')
selectedMaxAcm = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 56), AcmTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: selectedMaxAcm.setStatus('current')
actualRxAcmTC = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 57), AcmTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actualRxAcmTC.setStatus('current')
actualTxAcmTC = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 58), AcmTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actualTxAcmTC.setStatus('current')
alignmentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 59), EnableStatusTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alignmentMode.setStatus('current')
rfLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 1, 1, 60), EnableStatusTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLoop.setStatus('current')
rltTable = MibTable((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3), )
if mibBuilder.loadTexts: rltTable.setStatus('current')
rltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1), )
ifEntry.registerAugmentions(("PT-RADIOLINK-MIB", "rltEntry"))
rltEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: rltEntry.setStatus('current')
rltDistinguishedName = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rltDistinguishedName.setStatus('current')
neIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neIpAddress.setStatus('current')
neIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 3), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neIpv6Address.setStatus('current')
neName = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neName.setStatus('current')
neType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("mle", 2), ("xfMle", 3), ("tn", 4), ("cn", 5), ("pt", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neType.setStatus('current')
id = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: id.setStatus('current')
rltStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("na", 3), ("unknown", 4), ("degraded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rltStatus.setStatus('current')
mode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("mode1plus0", 1), ("mode1plus1CSB", 2), ("mode1plus1RLP", 3), ("mode2plus0RLB", 4), ("mode2plus1CSB", 5), ("mode2plus1RLP", 6), ("mode2plus2CSB", 7), ("mode2plus2RLP", 8), ("mode3plus0RLB", 9), ("mode4plus0RLB", 10), ("notAvailable11", 11), ("notAvailable12", 12), ("notAvailable13", 13), ("notAvailable14", 14), ("mode3plus1RLP", 15), ("mode3plus2RLP", 16), ("mode3plus3RLP", 17), ("mode4plus1RLP", 18), ("mode4plus2RLP", 19), ("mode4plus3RLP", 20), ("mode4plus4RLP", 21), ("notAvailable22", 22), ("notAvailable23", 23), ("notAvailable24", 24), ("notAvailable25", 25), ("notAvailable26", 26), ("notAvailable27", 27), ("mode3plus1CSB", 28), ("mode3plus2CSB", 29), ("mode3plus3CSB", 30), ("mode4plus1CSB", 31), ("mode4plus2CSB", 32), ("mode4plus3CSB", 33), ("mode4plus4CSB", 34), ("unknown", 35)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mode.setStatus('current')
actualTxTotalCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actualTxTotalCapacity.setStatus('current')
limitedTotalCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitedTotalCapacity.setStatus('current')
protectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unprotected", 1), ("protected", 2), ("unableToProtect", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionStatus.setStatus('current')
revertiveWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: revertiveWaitToRestore.setStatus('current')
revertivePreferredTx = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ct11", 1), ("ct12", 2), ("ct21", 3), ("ct22", 4), ("notApplicable", 5), ("unknown", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: revertivePreferredTx.setStatus('current')
protectionSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2), ("autoAndRevertive", 3), ("unknown", 4), ("notApplicable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protectionSwitchMode.setStatus('current')
fadeNotificationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fadeNotificationTimer.setStatus('current')
expectedFarEndId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expectedFarEndId.setStatus('current')
farEndIdCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: farEndIdCheck.setStatus('current')
cpriMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("notApplicable", 3), ("unknown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpriMode.setStatus('current')
cpriStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("waitingOnRtcSync", 2), ("waitingOnCpri", 3), ("waitingOnRxRequest", 4), ("waitingOnTxRequest", 5), ("inSync", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpriStatus.setStatus('current')
manualSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ct11", 1), ("ct12", 2), ("ct21", 3), ("ct22", 4), ("notApplicable", 5), ("unknown", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manualSwitch.setStatus('current')
mlhcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlhcOperStatus.setStatus('current')
mlhcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlhcAdminStatus.setStatus('current')
mlhcMplsConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("controlWord", 1), ("l2", 2), ("l3", 3), ("mplsOnly", 4), ("unknown", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlhcMplsConfig.setStatus('current')
plcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcOperStatus.setStatus('current')
plcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcAdminStatus.setStatus('current')
ctG826ContinuousTable = MibTable((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 1), )
if mibBuilder.loadTexts: ctG826ContinuousTable.setStatus('current')
ctG826ContinuousEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 1, 1), )
ifEntry.registerAugmentions(("PT-RADIOLINK-MIB", "ctG826ContinuousEntry"))
ctG826ContinuousEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: ctG826ContinuousEntry.setStatus('current')
ctG826TimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctG826TimeElapsed.setStatus('current')
ctBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctBBE.setStatus('current')
ctBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctBBER.setStatus('current')
ctES = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctES.setStatus('current')
ctESR = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctESR.setStatus('current')
ctSES = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctSES.setStatus('current')
ctSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctSESR.setStatus('current')
ctBB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctBB.setStatus('current')
ctUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctUAS.setStatus('current')
ctG826Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noReset", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctG826Reset.setStatus('current')
ctG826Current15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 2), )
if mibBuilder.loadTexts: ctG826Current15mTable.setStatus('current')
ctG826Current15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 2, 1), )
ifEntry.registerAugmentions(("PT-RADIOLINK-MIB", "ctG826Current15mEntry"))
ctG826Current15mEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: ctG826Current15mEntry.setStatus('current')
ctG826Current15mTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctG826Current15mTimeElapsed.setStatus('current')
ctCurrent15mBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctCurrent15mBBE.setStatus('current')
ctCurrent15mBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctCurrent15mBBER.setStatus('current')
ctCurrent15mES = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctCurrent15mES.setStatus('current')
ctCurrent15mESR = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctCurrent15mESR.setStatus('current')
ctCurrent15mSES = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctCurrent15mSES.setStatus('current')
ctCurrent15mSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctCurrent15mSESR.setStatus('current')
ctCurrent15mBB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctCurrent15mBB.setStatus('current')
ctCurrent15mUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctCurrent15mUAS.setStatus('current')
ctG826Current24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 3), )
if mibBuilder.loadTexts: ctG826Current24hTable.setStatus('current')
ctG826Current24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 3, 1), )
ifEntry.registerAugmentions(("PT-RADIOLINK-MIB", "ctG826Current24hEntry"))
ctG826Current24hEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: ctG826Current24hEntry.setStatus('current')
ctG826Current24hTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctG826Current24hTimeElapsed.setStatus('current')
ctCurrent24hBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctCurrent24hBBE.setStatus('current')
ctCurrent24hBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctCurrent24hBBER.setStatus('current')
ctCurrent24hES = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctCurrent24hES.setStatus('current')
ctCurrent24hESR = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctCurrent24hESR.setStatus('current')
ctCurrent24hSES = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctCurrent24hSES.setStatus('current')
ctCurrent24hSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctCurrent24hSESR.setStatus('current')
ctCurrent24hBB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctCurrent24hBB.setStatus('current')
ctCurrent24hUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctCurrent24hUAS.setStatus('current')
ptRadioLinkCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 2, 1))
ptRadioLinkGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 2, 2))
ptRadioLinkFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 2, 1, 1)).setObjects(("PT-RADIOLINK-MIB", "ptRadioLinkCompleteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ptRadioLinkFullCompliance = ptRadioLinkFullCompliance.setStatus('current')
ptRadioLinkCompleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 193, 223, 2, 7, 2, 2, 1)).setObjects(("PT-RADIOLINK-MIB", "actualInputPower"), ("PT-RADIOLINK-MIB", "actualOutputPower"), ("PT-RADIOLINK-MIB", "actualRxAcm"), ("PT-RADIOLINK-MIB", "actualRxAcmTC"), ("PT-RADIOLINK-MIB", "actualSi"), ("PT-RADIOLINK-MIB", "actualSnir"), ("PT-RADIOLINK-MIB", "actualTxAcm"), ("PT-RADIOLINK-MIB", "actualTxAcmTC"), ("PT-RADIOLINK-MIB", "actualTxCapacity"), ("PT-RADIOLINK-MIB", "actualTxTotalCapacity"), ("PT-RADIOLINK-MIB", "actualXpi"), ("PT-RADIOLINK-MIB", "alignmentMode"), ("PT-RADIOLINK-MIB", "atpcFallback"), ("PT-RADIOLINK-MIB", "atpcFallbackTimer"), ("PT-RADIOLINK-MIB", "atpcFallbackOutputPower"), ("PT-RADIOLINK-MIB", "autoFreqSelectedChannel"), ("PT-RADIOLINK-MIB", "autoFreqSelection"), ("PT-RADIOLINK-MIB", "autoFreqSelectionStatus"), ("PT-RADIOLINK-MIB", "availableMaxAcm"), ("PT-RADIOLINK-MIB", "availableMaxCapacity"), ("PT-RADIOLINK-MIB", "availableMaxOutputPower"), ("PT-RADIOLINK-MIB", "availableMinAcm"), ("PT-RADIOLINK-MIB", "availableMinCapacity"), ("PT-RADIOLINK-MIB", "availableMinOutputPower"), ("PT-RADIOLINK-MIB", "availableOutputPowerType"), ("PT-RADIOLINK-MIB", "berAlarmThreshold"), ("PT-RADIOLINK-MIB", "carrierId"), ("PT-RADIOLINK-MIB", "channelSpacing"), ("PT-RADIOLINK-MIB", "cpriMode"), ("PT-RADIOLINK-MIB", "cpriStatus"), ("PT-RADIOLINK-MIB", "ctDistinguishedName"), ("PT-RADIOLINK-MIB", "ctCurrent15mBB"), ("PT-RADIOLINK-MIB", "ctCurrent15mBBE"), ("PT-RADIOLINK-MIB", "ctCurrent15mBBER"), ("PT-RADIOLINK-MIB", "ctCurrent15mES"), ("PT-RADIOLINK-MIB", "ctCurrent15mESR"), ("PT-RADIOLINK-MIB", "ctCurrent15mSES"), ("PT-RADIOLINK-MIB", "ctCurrent15mSESR"), ("PT-RADIOLINK-MIB", "ctCurrent15mUAS"), ("PT-RADIOLINK-MIB", "ctG826Current15mTimeElapsed"), ("PT-RADIOLINK-MIB", "ctCurrent24hBB"), ("PT-RADIOLINK-MIB", "ctCurrent24hBBE"), ("PT-RADIOLINK-MIB", "ctCurrent24hBBER"), ("PT-RADIOLINK-MIB", "ctCurrent24hES"), ("PT-RADIOLINK-MIB", "ctCurrent24hESR"), ("PT-RADIOLINK-MIB", "ctCurrent24hSES"), ("PT-RADIOLINK-MIB", "ctCurrent24hSESR"), ("PT-RADIOLINK-MIB", "ctCurrent24hUAS"), ("PT-RADIOLINK-MIB", "ctG826Current24hTimeElapsed"), ("PT-RADIOLINK-MIB", "ctBB"), ("PT-RADIOLINK-MIB", "ctBBE"), ("PT-RADIOLINK-MIB", "ctBBER"), ("PT-RADIOLINK-MIB", "ctES"), ("PT-RADIOLINK-MIB", "ctESR"), ("PT-RADIOLINK-MIB", "ctG826Reset"), ("PT-RADIOLINK-MIB", "ctSES"), ("PT-RADIOLINK-MIB", "ctSESR"), ("PT-RADIOLINK-MIB", "ctG826TimeElapsed"), ("PT-RADIOLINK-MIB", "ctUAS"), ("PT-RADIOLINK-MIB", "ctStatus"), ("PT-RADIOLINK-MIB", "description"), ("PT-RADIOLINK-MIB", "duplexConfig"), ("PT-RADIOLINK-MIB", "duplexDistance"), ("PT-RADIOLINK-MIB", "duplexType"), ("PT-RADIOLINK-MIB", "expectedFarEndId"), ("PT-RADIOLINK-MIB", "fadeNotificationTimer"), ("PT-RADIOLINK-MIB", "farEndIdCheck"), ("PT-RADIOLINK-MIB", "frameId"), ("PT-RADIOLINK-MIB", "frequencyStepSize"), ("PT-RADIOLINK-MIB", "id"), ("PT-RADIOLINK-MIB", "inputPowerAlarmThreshold"), ("PT-RADIOLINK-MIB", "licensedCapacity"), ("PT-RADIOLINK-MIB", "limitedTotalCapacity"), ("PT-RADIOLINK-MIB", "manualSwitch"), ("PT-RADIOLINK-MIB", "maxRxFrequency"), ("PT-RADIOLINK-MIB", "maxTxFrequency"), ("PT-RADIOLINK-MIB", "mimoStatus"), ("PT-RADIOLINK-MIB", "minRxFrequency"), ("PT-RADIOLINK-MIB", "minTxFrequency"), ("PT-RADIOLINK-MIB", "mlhcAdminStatus"), ("PT-RADIOLINK-MIB", "mlhcMplsConfig"), ("PT-RADIOLINK-MIB", "mlhcOperStatus"), ("PT-RADIOLINK-MIB", "plcAdminStatus"), ("PT-RADIOLINK-MIB", "plcOperStatus"), ("PT-RADIOLINK-MIB", "mode"), ("PT-RADIOLINK-MIB", "neIpAddress"), ("PT-RADIOLINK-MIB", "neIpv6Address"), ("PT-RADIOLINK-MIB", "neName"), ("PT-RADIOLINK-MIB", "neType"), ("PT-RADIOLINK-MIB", "plannedAlignmentInputPower"), ("PT-RADIOLINK-MIB", "polarization"), ("PT-RADIOLINK-MIB", "protectionStatus"), ("PT-RADIOLINK-MIB", "protectionSwitchMode"), ("PT-RADIOLINK-MIB", "referenceSec"), ("PT-RADIOLINK-MIB", "revertivePreferredTx"), ("PT-RADIOLINK-MIB", "revertiveWaitToRestore"), ("PT-RADIOLINK-MIB", "rfLoop"), ("PT-RADIOLINK-MIB", "rltDistinguishedName"), ("PT-RADIOLINK-MIB", "rltStatus"), ("PT-RADIOLINK-MIB", "rxFrequency"), ("PT-RADIOLINK-MIB", "selectedMaxAcm"), ("PT-RADIOLINK-MIB", "selectedMaxCapacity"), ("PT-RADIOLINK-MIB", "selectedMaxOutputPower"), ("PT-RADIOLINK-MIB", "selectedMinAcm"), ("PT-RADIOLINK-MIB", "selectedMinCapacity"), ("PT-RADIOLINK-MIB", "selectedMinOutputPower"), ("PT-RADIOLINK-MIB", "selectedOutputPowerType"), ("PT-RADIOLINK-MIB", "targetInputPowerFarEnd"), ("PT-RADIOLINK-MIB", "txAdminStatus"), ("PT-RADIOLINK-MIB", "txFrequency"), ("PT-RADIOLINK-MIB", "txOperStatus"), ("PT-RADIOLINK-MIB", "wantedLicensedCapacity"), ("PT-RADIOLINK-MIB", "xpicStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ptRadioLinkCompleteGroup = ptRadioLinkCompleteGroup.setStatus('current')
mibBuilder.exportSymbols("PT-RADIOLINK-MIB", frameId=frameId, actualRxAcmTC=actualRxAcmTC, alignmentMode=alignmentMode, actualXpi=actualXpi, actualTxTotalCapacity=actualTxTotalCapacity, ctCurrent15mBB=ctCurrent15mBB, ctG826Reset=ctG826Reset, XpicMimoTC=XpicMimoTC, availableMaxAcm=availableMaxAcm, plannedAlignmentInputPower=plannedAlignmentInputPower, ctG826Current15mTable=ctG826Current15mTable, neIpv6Address=neIpv6Address, ptRadioLinkFullCompliance=ptRadioLinkFullCompliance, cpriStatus=cpriStatus, selectedMaxOutputPower=selectedMaxOutputPower, mlhcMplsConfig=mlhcMplsConfig, rltDistinguishedName=rltDistinguishedName, revertiveWaitToRestore=revertiveWaitToRestore, availableMinOutputPower=availableMinOutputPower, rltEntry=rltEntry, limitedTotalCapacity=limitedTotalCapacity, ctG826Current15mTimeElapsed=ctG826Current15mTimeElapsed, ptRadioLinkCompliances=ptRadioLinkCompliances, inputPowerAlarmThreshold=inputPowerAlarmThreshold, ctStatus=ctStatus, id=id, fadeNotificationTimer=fadeNotificationTimer, ctBBE=ctBBE, actualOutputPower=actualOutputPower, maxRxFrequency=maxRxFrequency, atpcFallback=atpcFallback, ctG826Current24hTable=ctG826Current24hTable, carrierId=carrierId, atpcFallbackOutputPower=atpcFallbackOutputPower, selectedMinCapacity=selectedMinCapacity, ctG826Current24hEntry=ctG826Current24hEntry, referenceSec=referenceSec, availableMinAcm=availableMinAcm, ctCurrent15mSESR=ctCurrent15mSESR, ctCurrent24hBB=ctCurrent24hBB, ctCurrent24hES=ctCurrent24hES, EnableStatusTC=EnableStatusTC, txOperStatus=txOperStatus, AcmTC=AcmTC, description=description, rxFrequency=rxFrequency, selectedMinOutputPower=selectedMinOutputPower, ctG826ContinuousTable=ctG826ContinuousTable, plcAdminStatus=plcAdminStatus, actualSnir=actualSnir, minTxFrequency=minTxFrequency, PYSNMP_MODULE_ID=ptRadioLink, minRxFrequency=minRxFrequency, availableMaxOutputPower=availableMaxOutputPower, txFrequency=txFrequency, ctCurrent24hBBE=ctCurrent24hBBE, ctPerformance=ctPerformance, ctCurrent24hSESR=ctCurrent24hSESR, neType=neType, ctCurrent15mBBE=ctCurrent15mBBE, mlhcOperStatus=mlhcOperStatus, atpcFallbackTimer=atpcFallbackTimer, actualTxCapacity=actualTxCapacity, ctCurrent24hBBER=ctCurrent24hBBER, wantedLicensedCapacity=wantedLicensedCapacity, berAlarmThreshold=berAlarmThreshold, actualRxAcm=actualRxAcm, ctCurrent24hUAS=ctCurrent24hUAS, duplexDistance=duplexDistance, availableOutputPowerType=availableOutputPowerType, ctDistinguishedName=ctDistinguishedName, ctUAS=ctUAS, ctBB=ctBB, selectedMinAcm=selectedMinAcm, farEndIdCheck=farEndIdCheck, ctESR=ctESR, ptRadioLinkConformance=ptRadioLinkConformance, ctCurrent24hSES=ctCurrent24hSES, neIpAddress=neIpAddress, manualSwitch=manualSwitch, ctCurrent15mESR=ctCurrent15mESR, duplexConfig=duplexConfig, ptRadioLinkCompleteGroup=ptRadioLinkCompleteGroup, availableMinCapacity=availableMinCapacity, channelSpacing=channelSpacing, ctCurrent15mES=ctCurrent15mES, selectedMaxCapacity=selectedMaxCapacity, ctCurrent24hESR=ctCurrent24hESR, autoFreqSelectionStatus=autoFreqSelectionStatus, protectionSwitchMode=protectionSwitchMode, mimoStatus=mimoStatus, selectedMaxAcm=selectedMaxAcm, cpriMode=cpriMode, ctES=ctES, ctEntry=ctEntry, ctBBER=ctBBER, actualTxAcmTC=actualTxAcmTC, ptRadioLinkGroups=ptRadioLinkGroups, ctG826Current24hTimeElapsed=ctG826Current24hTimeElapsed, targetInputPowerFarEnd=targetInputPowerFarEnd, polarization=polarization, mode=mode, rfLoop=rfLoop, ctSES=ctSES, ctCurrent15mSES=ctCurrent15mSES, mlhcAdminStatus=mlhcAdminStatus, ctTable=ctTable, protectionStatus=protectionStatus, revertivePreferredTx=revertivePreferredTx, expectedFarEndId=expectedFarEndId, actualInputPower=actualInputPower, ctG826TimeElapsed=ctG826TimeElapsed, ctSESR=ctSESR, xpicStatus=xpicStatus, neName=neName, maxTxFrequency=maxTxFrequency, rltTable=rltTable, autoFreqSelection=autoFreqSelection, actualTxAcm=actualTxAcm, selectedOutputPowerType=selectedOutputPowerType, ctCurrent15mBBER=ctCurrent15mBBER, ctCurrent15mUAS=ctCurrent15mUAS, txAdminStatus=txAdminStatus, duplexType=duplexType, autoFreqSelectedChannel=autoFreqSelectedChannel, ptRadioLink=ptRadioLink, licensedCapacity=licensedCapacity, plcOperStatus=plcOperStatus, availableMaxCapacity=availableMaxCapacity, actualSi=actualSi, ctG826Current15mEntry=ctG826Current15mEntry, rltStatus=rltStatus, ctG826ContinuousEntry=ctG826ContinuousEntry, frequencyStepSize=frequencyStepSize)
