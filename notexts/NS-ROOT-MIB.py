#
# PySNMP MIB module NS-ROOT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/citrix/NS-MIB-SMIV2-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:09:39 2024
# On host fv-az915-96 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, TimeTicks, iso, MibIdentifier, ModuleIdentity, enterprises, ObjectIdentity, IpAddress, Unsigned32, Counter32, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "TimeTicks", "iso", "MibIdentifier", "ModuleIdentity", "enterprises", "ObjectIdentity", "IpAddress", "Unsigned32", "Counter32", "NotificationType", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
netScaler = ModuleIdentity((1, 3, 6, 1, 4, 1, 5951))
if mibBuilder.loadTexts: netScaler.setLastUpdated('201609250000Z')
if mibBuilder.loadTexts: netScaler.setOrganization('Citrix Systems, Inc.')
nsRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1))
netScalerEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 1))
wsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 2))
sysStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1))
totalClientConnections = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalClientConnections.setStatus('obsolete')
curClientConnections = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curClientConnections.setStatus('obsolete')
totalServerConnections = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalServerConnections.setStatus('obsolete')
curServerConnections = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curServerConnections.setStatus('obsolete')
clientConnRefused = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientConnRefused.setStatus('obsolete')
reuseHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reuseHit.setStatus('obsolete')
reuseMiss = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reuseMiss.setStatus('obsolete')
totClientDontReuse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totClientDontReuse.setStatus('obsolete')
totServerDontReuse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totServerDontReuse.setStatus('obsolete')
curPhysicalServers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curPhysicalServers.setStatus('obsolete')
totPhysicalServers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totPhysicalServers.setStatus('obsolete')
cookiePacketSeqReject = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cookiePacketSeqReject.setStatus('obsolete')
cookieSignatureReject = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cookieSignatureReject.setStatus('obsolete')
cpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUsage.setStatus('obsolete')
unackSyn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unackSyn.setStatus('obsolete')
curClientEstablishedConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curClientEstablishedConn.setStatus('obsolete')
curServerEstablishedConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curServerEstablishedConn.setStatus('obsolete')
wsHttpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18))
totalRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalRequests.setStatus('obsolete')
totalGets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalGets.setStatus('obsolete')
totalRequests1_0 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 3), Counter32()).setLabel("totalRequests1-0").setMaxAccess("readonly")
if mibBuilder.loadTexts: totalRequests1_0.setStatus('obsolete')
totalPosts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPosts.setStatus('obsolete')
totalResponses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalResponses.setStatus('obsolete')
totalResponses1_0 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 6), Counter32()).setLabel("totalResponses1-0").setMaxAccess("readonly")
if mibBuilder.loadTexts: totalResponses1_0.setStatus('obsolete')
totalContentLenResponses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalContentLenResponses.setStatus('obsolete')
totalChunkedResponses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalChunkedResponses.setStatus('obsolete')
totalMultiPartResponses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalMultiPartResponses.setStatus('obsolete')
totalIncompleteHeaders = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalIncompleteHeaders.setStatus('obsolete')
totalIncompleteRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalIncompleteRequests.setStatus('obsolete')
totalIncompleteResponses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalIncompleteResponses.setStatus('obsolete')
totalPipeLinedRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPipeLinedRequests.setStatus('obsolete')
serverBusyErrs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverBusyErrs.setStatus('obsolete')
wsIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19), )
if mibBuilder.loadTexts: wsIfStatsTable.setStatus('obsolete')
wsIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1), ).setIndexNames((0, "NS-ROOT-MIB", "index"))
if mibBuilder.loadTexts: wsIfStatsEntry.setStatus('obsolete')
index = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: index.setStatus('obsolete')
wsIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIfName.setStatus('obsolete')
wsIfMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIfMedia.setStatus('obsolete')
rxRawBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxRawBandwidthUsage.setStatus('obsolete')
rxAveragePacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxAveragePacketRate.setStatus('obsolete')
rxCurrentPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxCurrentPacketRate.setStatus('obsolete')
rxAveragePacketsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxAveragePacketsSize.setStatus('obsolete')
rxFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFrameErrors.setStatus('obsolete')
rxCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxCrcErrors.setStatus('obsolete')
rxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxAlignmentErrors.setStatus('obsolete')
txRawBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txRawBandwidthUsage.setStatus('obsolete')
txAveragePacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txAveragePacketRate.setStatus('obsolete')
txCurrentPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txCurrentPacketRate.setStatus('obsolete')
txAveragePacketsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txAveragePacketsSize.setStatus('obsolete')
txExcessCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExcessCollisions.setStatus('obsolete')
txLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txLateCollisions.setStatus('obsolete')
txCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txCollisions.setStatus('obsolete')
txMultiCollisionsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMultiCollisionsErrors.setStatus('obsolete')
txCarrierErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txCarrierErrors.setStatus('obsolete')
wsudpgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 20))
totudpsessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 20, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totudpsessions.setStatus('obsolete')
currudpsessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 20, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currudpsessions.setStatus('obsolete')
sysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2))
wsIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIpAddress.setStatus('obsolete')
wsNetmask = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNetmask.setStatus('obsolete')
wsMappedIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMappedIpAddress.setStatus('obsolete')
wsLastMappedIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsLastMappedIpAddress.setStatus('obsolete')
wsMappedIpAddressRange = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMappedIpAddressRange.setStatus('obsolete')
wsFailOver = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsFailOver.setStatus('obsolete')
wsPriority = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsPriority.setStatus('obsolete')
wsMaxClientList = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMaxClientList.setStatus('obsolete')
wsClientIp = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsClientIp.setStatus('obsolete')
wsFailoverTime = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsFailoverTime.setStatus('obsolete')
wsMaxRequestsPerConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMaxRequestsPerConn.setStatus('obsolete')
wsSmoothConnection = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSmoothConnection.setStatus('obsolete')
loadBalancing = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 3))
lbStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1), )
if mibBuilder.loadTexts: lbStatisticsTable.setStatus('obsolete')
lbStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vsId"), (0, "NS-ROOT-MIB", "psId"))
if mibBuilder.loadTexts: lbStatisticsEntry.setStatus('obsolete')
vsId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsId.setStatus('obsolete')
psId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psId.setStatus('obsolete')
vsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsIpAddress.setStatus('obsolete')
vsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsPort.setStatus('obsolete')
psIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIpAddress.setStatus('obsolete')
psPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPort.setStatus('obsolete')
protocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("http", 0), ("ftp", 1), ("tcp", 2), ("udp", 3), ("sslBridge", 4), ("monitor", 5), ("monitorUdp", 6), ("nntp", 7), ("httpserver", 8), ("httpclient", 9), ("rpcserver", 10), ("rpcclient", 11), ("ssf", 12), ("nat", 13), ("any", 14), ("ssl", 15), ("dns", 16), ("adns", 17), ("snmp", 18), ("ha", 19), ("monitorPing", 20), ("serviceUnknown", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolType.setStatus('obsolete')
lbMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("weightedRoundRobin", 1), ("leastConnections", 2), ("leastResponse", 3), ("asynchronousMAC", 4), ("urlHashed", 5), ("domainHashed", 6), ("destinationIPHashed", 7), ("sourceIPHashed", 8), ("leastBandwidth", 9), ("leastPackets", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbMethod.setStatus('obsolete')
serviceHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceHits.setStatus('obsolete')
latency = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latency.setStatus('obsolete')
connections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connections.setStatus('obsolete')
lbConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2))
virServiceTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 1), )
if mibBuilder.loadTexts: virServiceTable.setStatus('obsolete')
virServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vserId"))
if mibBuilder.loadTexts: virServiceEntry.setStatus('obsolete')
vserId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserId.setStatus('obsolete')
ipAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddress.setStatus('obsolete')
port = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: port.setStatus('obsolete')
vsProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("http", 0), ("ftp", 1), ("tcp", 2), ("udp", 3), ("sslBridge", 4), ("monitor", 5), ("monitorUdp", 6), ("nntp", 7), ("httpserver", 8), ("httpclient", 9), ("rpcserver", 10), ("rpcclient", 11), ("ssf", 12), ("nat", 13), ("any", 14), ("ssl", 15), ("dns", 16), ("adns", 17), ("snmp", 18), ("ha", 19), ("monitorPing", 20), ("serviceUnknown", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsProtocolType.setStatus('obsolete')
name = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: name.setStatus('obsolete')
vsLbMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("weightedRoundRobin", 1), ("leastConnections", 2), ("leastResponse", 3), ("asynchronousMAC", 4), ("urlHashed", 5), ("domainHashed", 6), ("destinationIPHashed", 7), ("sourceIPHashed", 8), ("leastBandwidth", 9), ("leastPackets", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLbMethod.setStatus('obsolete')
persistanceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sourceIp", 1), ("cookieInsert", 2), ("cookieDelete", 3), ("cookieRead", 4), ("cookieHash", 5), ("sessionId", 6), ("server", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistanceType.setStatus('obsolete')
persistanceTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistanceTimeout.setStatus('obsolete')
state = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 0), ("down", 1), ("unknown", 2), ("busy", 3), ("outOfService", 4), ("transitionToOutOfService", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: state.setStatus('obsolete')
phyServiceTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 2), )
if mibBuilder.loadTexts: phyServiceTable.setStatus('obsolete')
phyServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "pserId"))
if mibBuilder.loadTexts: phyServiceEntry.setStatus('obsolete')
pserId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pserId.setStatus('obsolete')
pserIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pserIpAddress.setStatus('obsolete')
pserPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pserPort.setStatus('obsolete')
psProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("http", 0), ("ftp", 1), ("tcp", 2), ("udp", 3), ("sslBridge", 4), ("monitor", 5), ("monitorUdp", 6), ("nntp", 7), ("httpserver", 8), ("httpclient", 9), ("rpcserver", 10), ("rpcclient", 11), ("ssf", 12), ("nat", 13), ("any", 14), ("ssl", 15), ("dns", 16), ("adns", 17), ("snmp", 18), ("ha", 19), ("monitorPing", 20), ("serviceUnknown", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psProtocolType.setStatus('obsolete')
psName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psName.setStatus('obsolete')
psState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psState.setStatus('obsolete')
weight = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: weight.setStatus('obsolete')
psVsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psVsIpAddress.setStatus('obsolete')
psVsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psVsPort.setStatus('obsolete')
sureConnect = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 4))
scStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1))
scperServiceStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 1), )
if mibBuilder.loadTexts: scperServiceStatisticsTable.setStatus('obsolete')
scperServiceStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "devno"))
if mibBuilder.loadTexts: scperServiceStatisticsEntry.setStatus('obsolete')
devno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devno.setStatus('obsolete')
phyIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyIpAddress.setStatus('obsolete')
phyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyPort.setStatus('obsolete')
scProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("http", 0), ("ftp", 1), ("tcp", 2), ("udp", 3), ("sslBridge", 4), ("monitor", 5), ("monitorUdp", 6), ("nntp", 7), ("httpserver", 8), ("httpclient", 9), ("rpcserver", 10), ("rpcclient", 11), ("ssf", 12), ("nat", 13), ("any", 14), ("ssl", 15), ("dns", 16), ("adns", 17), ("snmp", 18), ("ha", 19), ("monitorPing", 20), ("serviceUnknown", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scProtocolType.setStatus('obsolete')
currentDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDelay.setStatus('obsolete')
avgTxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avgTxTime.setStatus('obsolete')
surgeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: surgeCount.setStatus('obsolete')
iohCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iohCount.setStatus('obsolete')
scperPolicyStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 2), )
if mibBuilder.loadTexts: scperPolicyStatisticsTable.setStatus('obsolete')
scperPolicyStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "policydevno"))
if mibBuilder.loadTexts: scperPolicyStatisticsEntry.setStatus('obsolete')
policydevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policydevno.setStatus('obsolete')
primaryserviceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryserviceIp.setStatus('obsolete')
primaryserviceport = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryserviceport.setStatus('obsolete')
destserviceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destserviceIp.setStatus('obsolete')
destserviceport = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destserviceport.setStatus('obsolete')
transactiontime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactiontime.setStatus('obsolete')
totaltransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totaltransaction.setStatus('obsolete')
totalopenconnection = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalopenconnection.setStatus('obsolete')
scGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 3))
scUrlHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scUrlHits.setStatus('obsolete')
popUps = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popUps.setStatus('obsolete')
altContUrls = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: altContUrls.setStatus('obsolete')
sessReqs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessReqs.setStatus('obsolete')
postReqs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postReqs.setStatus('obsolete')
thresholdFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdFail.setStatus('obsolete')
faultyCookies = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultyCookies.setStatus('obsolete')
unSupBrow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unSupBrow.setStatus('obsolete')
resetStats = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resetStats.setStatus('obsolete')
scConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2))
scPolicyconfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2, 1), )
if mibBuilder.loadTexts: scPolicyconfigTable.setStatus('obsolete')
scPolicyconfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "policyIndex"))
if mibBuilder.loadTexts: scPolicyconfigEntry.setStatus('obsolete')
policyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyIndex.setStatus('obsolete')
policyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyName.setStatus('obsolete')
scPolicyUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPolicyUrl.setStatus('obsolete')
delayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1))).clone(namedValues=NamedValues(("notconfigured", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: delayThreshold.setStatus('obsolete')
maxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1))).clone(namedValues=NamedValues(("notconfigured", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxConnections.setStatus('obsolete')
actionType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("ns", 0), ("acs", 1), ("noAction", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionType.setStatus('obsolete')
alternatecontentServicename = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alternatecontentServicename.setStatus('obsolete')
ruleName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleName.setStatus('obsolete')
alternatecontentPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alternatecontentPath.setStatus('obsolete')
contentSwitching = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 5))
cswStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 5, 1), )
if mibBuilder.loadTexts: cswStatisticsTable.setStatus('obsolete')
cswStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 5, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "cswIndex"))
if mibBuilder.loadTexts: cswStatisticsEntry.setStatus('obsolete')
cswIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswIndex.setStatus('obsolete')
cswVsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswVsIpAddress.setStatus('obsolete')
cswVsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswVsPort.setStatus('obsolete')
cswProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("http", 0), ("ftp", 1), ("tcp", 2), ("udp", 3), ("sslBridge", 4), ("monitor", 5), ("monitorUdp", 6), ("nntp", 7), ("httpserver", 8), ("httpclient", 9), ("rpcserver", 10), ("rpcclient", 11), ("ssf", 12), ("nat", 13), ("any", 14), ("ssl", 15), ("dns", 16), ("adns", 17), ("snmp", 18), ("ha", 19), ("monitorPing", 20), ("serviceUnknown", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswProtocolType.setStatus('obsolete')
virServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virServiceName.setStatus('obsolete')
vsHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsHits.setStatus('obsolete')
vsMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsMiss.setStatus('obsolete')
cswConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 5, 2), )
if mibBuilder.loadTexts: cswConfigTable.setStatus('obsolete')
cswConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 5, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "cswVsId"), (0, "NS-ROOT-MIB", "policyId"))
if mibBuilder.loadTexts: cswConfigEntry.setStatus('obsolete')
cswVsId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswVsId.setStatus('obsolete')
policyId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyId.setStatus('obsolete')
vServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vServerName.setStatus('obsolete')
policyname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyname.setStatus('obsolete')
policyvalue = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyvalue.setStatus('obsolete')
policyHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyHits.setStatus('obsolete')
domain = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domain.setStatus('obsolete')
cacheRedirection = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 6))
crStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 6, 1), )
if mibBuilder.loadTexts: crStatisticsTable.setStatus('obsolete')
crStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 6, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "crVsIndex"))
if mibBuilder.loadTexts: crStatisticsEntry.setStatus('obsolete')
crVsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crVsIndex.setStatus('obsolete')
crVsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crVsIpAddress.setStatus('obsolete')
crVsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crVsPort.setStatus('obsolete')
crProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("http", 0), ("ftp", 1), ("tcp", 2), ("udp", 3), ("sslBridge", 4), ("monitor", 5), ("monitorUdp", 6), ("nntp", 7), ("httpserver", 8), ("httpclient", 9), ("rpcserver", 10), ("rpcclient", 11), ("ssf", 12), ("nat", 13), ("any", 14), ("ssl", 15), ("dns", 16), ("adns", 17), ("snmp", 18), ("ha", 19), ("monitorPing", 20), ("serviceUnknown", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crProtocolType.setStatus('obsolete')
crVirServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crVirServiceName.setStatus('obsolete')
crVsHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crVsHits.setStatus('obsolete')
crVsMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crVsMiss.setStatus('obsolete')
crConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2))
crPolBindConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 1), )
if mibBuilder.loadTexts: crPolBindConfigTable.setStatus('obsolete')
crPolBindConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "bindId"))
if mibBuilder.loadTexts: crPolBindConfigEntry.setStatus('obsolete')
bindId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bindId.setStatus('obsolete')
crbVServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crbVServerName.setStatus('obsolete')
crbPolicyname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crbPolicyname.setStatus('obsolete')
crbPolicyvalue = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crbPolicyvalue.setStatus('obsolete')
crbPolicyHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crbPolicyHits.setStatus('obsolete')
crMapBindConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 2), )
if mibBuilder.loadTexts: crMapBindConfigTable.setStatus('obsolete')
crMapBindConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "mapbindId"))
if mibBuilder.loadTexts: crMapBindConfigEntry.setStatus('obsolete')
mapbindId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mapbindId.setStatus('obsolete')
mapName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mapName.setStatus('obsolete')
mapHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mapHits.setStatus('obsolete')
vserverName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverName.setStatus('obsolete')
crMapConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 3), )
if mibBuilder.loadTexts: crMapConfigTable.setStatus('obsolete')
crMapConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 3, 1), ).setIndexNames((0, "NS-ROOT-MIB", "crmIndex"))
if mibBuilder.loadTexts: crMapConfigEntry.setStatus('obsolete')
crmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmIndex.setStatus('obsolete')
crmMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmMapName.setStatus('obsolete')
srcDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srcDomain.setStatus('obsolete')
dstDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstDomain.setStatus('obsolete')
srcUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srcUrl.setStatus('obsolete')
dstUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstUrl.setStatus('obsolete')
compression = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 7))
compressionStats = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 7, 1))
cmpTotRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpTotRequests.setStatus('obsolete')
cmpTotTxbytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpTotTxbytes.setStatus('obsolete')
cmpTotRxbytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpTotRxbytes.setStatus('obsolete')
cmpTotTxpkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpTotTxpkts.setStatus('obsolete')
cmpTotRxpkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpTotRxpkts.setStatus('obsolete')
compressionRatio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 7, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressionRatio.setStatus('obsolete')
totalDataCompressionRatio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 7, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalDataCompressionRatio.setStatus('obsolete')
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 8))
vlanstatsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 8, 1), )
if mibBuilder.loadTexts: vlanstatsTable.setStatus('obsolete')
vlanstatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 8, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vlansDevno"))
if mibBuilder.loadTexts: vlanstatsEntry.setStatus('obsolete')
vlansDevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlansDevno.setStatus('obsolete')
totalrxpkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalrxpkts.setStatus('obsolete')
totaltxpkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totaltxpkts.setStatus('obsolete')
totalrxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalrxbytes.setStatus('obsolete')
totaltxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totaltxbytes.setStatus('obsolete')
totaldroppedpkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totaldroppedpkts.setStatus('obsolete')
totalbroadcastpackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalbroadcastpackets.setStatus('obsolete')
vlanconfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 8, 2), )
if mibBuilder.loadTexts: vlanconfigTable.setStatus('obsolete')
vlanconfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 8, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vlancDevno"))
if mibBuilder.loadTexts: vlanconfigEntry.setStatus('obsolete')
vlancDevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlancDevno.setStatus('obsolete')
tagId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tagId.setStatus('obsolete')
vlancInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlancInterfaces.setStatus('obsolete')
ipaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddress.setStatus('obsolete')
netmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netmask.setStatus('obsolete')
tagging = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tagging.setStatus('obsolete')
domainNameService = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 9))
dnsServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1))
dnsServerStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1))
totQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totQueries.setStatus('obsolete')
totAnswers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totAnswers.setStatus('obsolete')
totAuthAns = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totAuthAns.setStatus('obsolete')
totAuthNoNames = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totAuthNoNames.setStatus('obsolete')
totAuthNoDataResps = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totAuthNoDataResps.setStatus('obsolete')
totNonAuthDatas = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totNonAuthDatas.setStatus('obsolete')
totNonAuthNoDatas = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totNonAuthNoDatas.setStatus('obsolete')
totReqRefusals = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totReqRefusals.setStatus('obsolete')
totReqUnparses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totReqUnparses.setStatus('obsolete')
totOtherErrors = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totOtherErrors.setStatus('obsolete')
aRecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aRecQueries.setStatus('obsolete')
nsRecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsRecQueries.setStatus('obsolete')
mxRecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mxRecQueries.setStatus('obsolete')
soaRecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: soaRecQueries.setStatus('obsolete')
cnameRecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnameRecQueries.setStatus('obsolete')
totUnsupportedQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totUnsupportedQueries.setStatus('obsolete')
dnsServerConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 2))
dnsServerRecursion = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("available", 1), ("restricted", 2), ("unavailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsServerRecursion.setStatus('obsolete')
dnsServerZoneTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 2, 2), )
if mibBuilder.loadTexts: dnsServerZoneTable.setStatus('obsolete')
dnsServerZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 2, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "zoneIndex"))
if mibBuilder.loadTexts: dnsServerZoneEntry.setStatus('obsolete')
zoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneIndex.setStatus('obsolete')
zoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneName.setStatus('obsolete')
globalServerLB = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 10))
gslbStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 10, 1))
gslbDomainStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 10, 1, 1), )
if mibBuilder.loadTexts: gslbDomainStatsTable.setStatus('obsolete')
gslbDomainStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 10, 1, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "gslbDomainIndex"))
if mibBuilder.loadTexts: gslbDomainStatsEntry.setStatus('obsolete')
gslbDomainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 10, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbDomainIndex.setStatus('obsolete')
domainname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 10, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainname.setStatus('obsolete')
gslbDomainQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 10, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbDomainQueries.setStatus('obsolete')
gslbConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 10, 2))
gslbDomainConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 10, 2, 1), )
if mibBuilder.loadTexts: gslbDomainConfigTable.setStatus('obsolete')
gslbDomainConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 10, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "gslbcDomainIndex"))
if mibBuilder.loadTexts: gslbDomainConfigEntry.setStatus('obsolete')
gslbcDomainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbcDomainIndex.setStatus('obsolete')
gslbcDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 10, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbcDomainName.setStatus('obsolete')
gslbVipName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 10, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbVipName.setStatus('obsolete')
reOrderInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 10, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reOrderInterval.setStatus('obsolete')
pq = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 11))
pqstatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1))
pqStatsperLBVipTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 1), )
if mibBuilder.loadTexts: pqStatsperLBVipTable.setStatus('obsolete')
pqStatsperLBVipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "pqDevno"))
if mibBuilder.loadTexts: pqStatsperLBVipEntry.setStatus('obsolete')
pqDevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqDevno.setStatus('obsolete')
totclienttransactiontime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totclienttransactiontime.setStatus('obsolete')
totclienttransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totclienttransaction.setStatus('obsolete')
dropped = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dropped.setStatus('obsolete')
qdepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qdepth.setStatus('obsolete')
pqStatsperpqpolicyandperLBVipTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 2), )
if mibBuilder.loadTexts: pqStatsperpqpolicyandperLBVipTable.setStatus('obsolete')
pqStatsperpqpolicyandperLBVipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "pqvsdevno"), (0, "NS-ROOT-MIB", "pqpoldevno"))
if mibBuilder.loadTexts: pqStatsperpqpolicyandperLBVipEntry.setStatus('obsolete')
pqvsdevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqvsdevno.setStatus('obsolete')
pqpoldevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpoldevno.setStatus('obsolete')
pqtotclienttransactiontime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqtotclienttransactiontime.setStatus('obsolete')
pqtotclienttransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqtotclienttransaction.setStatus('obsolete')
pqDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqDropped.setStatus('obsolete')
pqQdepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqQdepth.setStatus('obsolete')
pqconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 11, 2))
pqpolicyconfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 11, 2, 1), )
if mibBuilder.loadTexts: pqpolicyconfigTable.setStatus('obsolete')
pqpolicyconfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 11, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "pqPolDevno"))
if mibBuilder.loadTexts: pqpolicyconfigEntry.setStatus('obsolete')
pqPolDevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqPolDevno.setStatus('obsolete')
pqpolicyname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicyname.setStatus('obsolete')
rulename = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rulename.setStatus('obsolete')
qdepthThreshval = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qdepthThreshval.setStatus('obsolete')
polqdepthThreshval = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polqdepthThreshval.setStatus('obsolete')
priority = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: priority.setStatus('obsolete')
pqPolWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqPolWeight.setStatus('obsolete')
dos = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 12))
dosstatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 12, 1))
dosservicestatsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 12, 1, 1), )
if mibBuilder.loadTexts: dosservicestatsTable.setStatus('obsolete')
dosservicestatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 12, 1, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "dosDevno"))
if mibBuilder.loadTexts: dosservicestatsEntry.setStatus('obsolete')
dosDevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 12, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosDevno.setStatus('obsolete')
surgecnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 12, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: surgecnt.setStatus('obsolete')
dosqdepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 12, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosqdepth.setStatus('obsolete')
totaljstransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 12, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totaljstransaction.setStatus('obsolete')
dosconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 12, 2))
dospolicyconfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 12, 2, 1), )
if mibBuilder.loadTexts: dospolicyconfigTable.setStatus('obsolete')
dospolicyconfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 12, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "dosPolDevno"))
if mibBuilder.loadTexts: dospolicyconfigEntry.setStatus('obsolete')
dosPolDevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 12, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosPolDevno.setStatus('obsolete')
dospolicyname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 12, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dospolicyname.setStatus('obsolete')
thresholdvalue = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 12, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdvalue.setStatus('obsolete')
ssloffloading = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 13))
sslstatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1))
sslglobalstats = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1))
currSPS = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currSPS.setStatus('obsolete')
sslV2TxCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslV2TxCount.setStatus('obsolete')
sslV3TxCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslV3TxCount.setStatus('obsolete')
tlsV1TxCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsV1TxCount.setStatus('obsolete')
keyExRSA512 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyExRSA512.setStatus('obsolete')
keyExRSA1024 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyExRSA1024.setStatus('obsolete')
keyExDH512 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyExDH512.setStatus('obsolete')
keyExDH1024 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyExDH1024.setStatus('obsolete')
authRSA = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authRSA.setStatus('obsolete')
authDH = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authDH.setStatus('obsolete')
authDS = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authDS.setStatus('obsolete')
cipher40BitRC4 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipher40BitRC4.setStatus('obsolete')
cipher56BitRC4 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipher56BitRC4.setStatus('obsolete')
cipher64BitRC4 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipher64BitRC4.setStatus('obsolete')
cipher128BitRC4 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipher128BitRC4.setStatus('obsolete')
cipher40BitDES = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipher40BitDES.setStatus('obsolete')
cipher56BitDES = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipher56BitDES.setStatus('obsolete')
cipher168Bit3DES = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipher168Bit3DES.setStatus('obsolete')
cipher40BitRC2 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipher40BitRC2.setStatus('obsolete')
cipher56BitRC2 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipher56BitRC2.setStatus('obsolete')
cipher128BitRC2 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipher128BitRC2.setStatus('obsolete')
cipher128BitIDEA = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipher128BitIDEA.setStatus('obsolete')
hashMD5 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hashMD5.setStatus('obsolete')
hashSHA = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hashSHA.setStatus('obsolete')
sslConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2))
certKeyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 1), )
if mibBuilder.loadTexts: certKeyTable.setStatus('obsolete')
certKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "certKeyId"))
if mibBuilder.loadTexts: certKeyEntry.setStatus('obsolete')
certKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certKeyId.setStatus('obsolete')
certKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certKeyName.setStatus('obsolete')
certPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certPath.setStatus('obsolete')
keyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyPath.setStatus('obsolete')
inputFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("der", 1), ("pem", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputFormat.setStatus('obsolete')
crlTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 2), )
if mibBuilder.loadTexts: crlTable.setStatus('obsolete')
crlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "crlId"))
if mibBuilder.loadTexts: crlEntry.setStatus('obsolete')
crlId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crlId.setStatus('obsolete')
crlName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crlName.setStatus('obsolete')
crlPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crlPath.setStatus('obsolete')
crlInputFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("der", 1), ("pem", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crlInputFormat.setStatus('obsolete')
cipherGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 3), )
if mibBuilder.loadTexts: cipherGroupTable.setStatus('obsolete')
cipherGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 3, 1), ).setIndexNames((0, "NS-ROOT-MIB", "cipherGroupId"), (0, "NS-ROOT-MIB", "cipherId"))
if mibBuilder.loadTexts: cipherGroupEntry.setStatus('obsolete')
cipherGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipherGroupId.setStatus('obsolete')
cipherId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipherId.setStatus('obsolete')
cipherGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipherGroupName.setStatus('obsolete')
cipherName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipherName.setStatus('obsolete')
cipherDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipherDesc.setStatus('obsolete')
advanceSSLConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4), )
if mibBuilder.loadTexts: advanceSSLConfigTable.setStatus('obsolete')
advanceSSLConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1), ).setIndexNames((0, "NS-ROOT-MIB", "id"))
if mibBuilder.loadTexts: advanceSSLConfigEntry.setStatus('obsolete')
id = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: id.setStatus('obsolete')
serviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceName.setStatus('obsolete')
dh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh.setStatus('obsolete')
dhCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhCount.setStatus('obsolete')
dhFile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhFile.setStatus('obsolete')
eRSA = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRSA.setStatus('obsolete')
eRSACount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRSACount.setStatus('obsolete')
certHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: certHeader.setStatus('obsolete')
certHeaderTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certHeaderTag.setStatus('obsolete')
sessHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessHeader.setStatus('obsolete')
sessHeaderTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessHeaderTag.setStatus('obsolete')
sslv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslv2.setStatus('obsolete')
sslv3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslv3.setStatus('obsolete')
tlsv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsv1.setStatus('obsolete')
owaSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owaSupport.setStatus('obsolete')
sslRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslRedirect.setStatus('obsolete')
clearTextPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clearTextPort.setStatus('obsolete')
serviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("virtualserver", 0), ("physicalservice", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceType.setStatus('obsolete')
certBindingConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 5), )
if mibBuilder.loadTexts: certBindingConfigTable.setStatus('obsolete')
certBindingConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 5, 1), ).setIndexNames((0, "NS-ROOT-MIB", "certBindId"), (0, "NS-ROOT-MIB", "certKeyID"), (0, "NS-ROOT-MIB", "certType"))
if mibBuilder.loadTexts: certBindingConfigEntry.setStatus('obsolete')
certBindId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certBindId.setStatus('obsolete')
certKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certKeyID.setStatus('obsolete')
certType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("serverCertificate", 1), ("caCertificate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: certType.setStatus('obsolete')
certBindServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certBindServiceName.setStatus('obsolete')
certBindKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certBindKeyName.setStatus('obsolete')
certBindServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("virtualserver", 0), ("physicalservice", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: certBindServiceType.setStatus('obsolete')
cipherBindingConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 6), )
if mibBuilder.loadTexts: cipherBindingConfigTable.setStatus('obsolete')
cipherBindingConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 6, 1), ).setIndexNames((0, "NS-ROOT-MIB", "cipherBindId"), (0, "NS-ROOT-MIB", "cipherID"))
if mibBuilder.loadTexts: cipherBindingConfigEntry.setStatus('obsolete')
cipherBindId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipherBindId.setStatus('obsolete')
cipherID = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipherID.setStatus('obsolete')
cipherBindServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 6, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipherBindServiceName.setStatus('obsolete')
cipherbName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 6, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipherbName.setStatus('obsolete')
cipherbDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 6, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipherbDesc.setStatus('obsolete')
cipherBindServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("virtualserver", 0), ("physicalservice", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipherBindServiceType.setStatus('obsolete')
cpe = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 14))
cpestatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 14, 1))
cpestatspolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 14, 1, 1), )
if mibBuilder.loadTexts: cpestatspolicyTable.setStatus('obsolete')
cpestatspolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 14, 1, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "cpesDevno"))
if mibBuilder.loadTexts: cpestatspolicyEntry.setStatus('obsolete')
cpesDevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpesDevno.setStatus('obsolete')
cpesPolicyname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpesPolicyname.setStatus('obsolete')
cpesPolicyhits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpesPolicyhits.setStatus('obsolete')
cpestatsactionTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 14, 1, 2), )
if mibBuilder.loadTexts: cpestatsactionTable.setStatus('obsolete')
cpestatsactionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 14, 1, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "cpeaDevno"))
if mibBuilder.loadTexts: cpestatsactionEntry.setStatus('obsolete')
cpeaDevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpeaDevno.setStatus('obsolete')
actionname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionname.setStatus('obsolete')
actionhits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionhits.setStatus('obsolete')
cpeconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2))
cpeconfigpolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 1), )
if mibBuilder.loadTexts: cpeconfigpolicyTable.setStatus('obsolete')
cpeconfigpolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "cpecDevno"))
if mibBuilder.loadTexts: cpeconfigpolicyEntry.setStatus('obsolete')
cpecDevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpecDevno.setStatus('obsolete')
cpecPolicyname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpecPolicyname.setStatus('obsolete')
reqrule = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqrule.setStatus('obsolete')
reqaction = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqaction.setStatus('obsolete')
cpeconfigactionTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 2), )
if mibBuilder.loadTexts: cpeconfigactionTable.setStatus('obsolete')
cpeconfigactionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "cpecaDevno"))
if mibBuilder.loadTexts: cpeconfigactionEntry.setStatus('obsolete')
cpecaDevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpecaDevno.setStatus('obsolete')
cpecaActionname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpecaActionname.setStatus('obsolete')
directive = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 0), ("reset", 1), ("drop", 2), ("httpec", 3), ("cmp", 4), ("add", 5), ("mod", 6), ("del", 7), ("cor", 8), ("forward", 9), ("noComparison", 10), ("last", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: directive.setStatus('obsolete')
qualifier = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("http", 1), ("header", 2), ("query", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qualifier.setStatus('obsolete')
value = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: value.setStatus('obsolete')
page = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: page.setStatus('obsolete')
server = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: server.setStatus('obsolete')
cpeExprConfigStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 14, 3), )
if mibBuilder.loadTexts: cpeExprConfigStatsTable.setStatus('obsolete')
cpeExprConfigStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 14, 3, 1), ).setIndexNames((0, "NS-ROOT-MIB", "cpeeIndex"))
if mibBuilder.loadTexts: cpeExprConfigStatsEntry.setStatus('obsolete')
cpeeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpeeIndex.setStatus('obsolete')
exprName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exprName.setStatus('obsolete')
cpeeQualifier = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknownQualifier", -1), ("method", 0), ("urlPrefix", 1), ("urlSuffix", 2), ("urlTokens", 3), ("version", 4), ("header", 5), ("urlQuery", 6), ("url", 7), ("urllen", 8), ("urlquerylen", 9), ("domain", 10), ("sourceIp", 11), ("sourcePort", 12), ("destinationIp", 13), ("destinationPort", 14), ("compoundExpression", 15), ("evaluatePredefined", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpeeQualifier.setStatus('obsolete')
operator = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("and", 0), ("or", 1), ("not", 2), ("equal", 3), ("notEqual", 4), ("greaterThan", 5), ("lessThan", 6), ("greaterThanOrEqualTo", 7), ("lessThanOrEqualTo", 8), ("exists", 9), ("notExists", 10), ("contains", 11), ("notContains", 12), ("contents", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: operator.setStatus('obsolete')
hdrName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdrName.setStatus('obsolete')
cpeeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpeeValue.setStatus('obsolete')
length = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: length.setStatus('obsolete')
offset = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: offset.setStatus('obsolete')
cpeeNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpeeNetmask.setStatus('obsolete')
class EntityProtocolType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 39, 40, 41, 48, 49, 50, 52, 53, 54, 55, 61, 62, 63, 73, 74, 75, 90, 91, 92, 95, 96, 99))
    namedValues = NamedValues(("http", 0), ("ftp", 1), ("tcp", 2), ("udp", 3), ("sslBridge", 4), ("monitor", 5), ("monitorUdp", 6), ("nntp", 7), ("httpserver", 8), ("httpclient", 9), ("rpcserver", 10), ("rpcclient", 11), ("nat", 12), ("any", 13), ("ssl", 14), ("dns", 16), ("adns", 17), ("snmp", 18), ("ha", 19), ("monitorPing", 20), ("sslOtherTcp", 21), ("aaa", 22), ("secureMonitor", 23), ("sslvpnUdp", 24), ("rip", 25), ("dnsClient", 26), ("rpcServer", 27), ("rpcClient", 28), ("dhcrpa", 36), ("sipudp", 39), ("siptcp", 40), ("siptls", 41), ("dnstcp", 48), ("adnstcp", 49), ("rtsp", 50), ("push", 52), ("sslPush", 53), ("dhcpClient", 54), ("radius", 55), ("rdp", 61), ("mysql", 62), ("mssql", 63), ("diameter", 73), ("sslDiameter", 74), ("tftp", 75), ("tftp", 90), ("pptp", 91), ("gre", 92), ("fix", 95), ("sslFix", 96), ("serviceUnknown", 99))

class EntityState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8))
    namedValues = NamedValues(("down", 1), ("unknown", 2), ("busy", 3), ("outOfService", 4), ("transitionToOutOfService", 5), ("up", 7), ("transitionToOutOfServiceDown", 8))

class MepStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("mepDown", 0), ("mepUp", 1))

class SiteType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("localSite", 1), ("remoteSite", 2))

class MetricExchange(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4))
    namedValues = NamedValues(("disabled", 3), ("enabled", 4))

class AdminStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disabled", 1), ("enabled", 2))

class HAMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("standalone", 0), ("primary", 1), ("secondary", 2), ("unknown", 3))

class HAState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("unknown", 0), ("init", 1), ("down", 2), ("up", 3), ("partialFail", 4), ("monitorFail", 5), ("monitorOk", 6), ("completeFail", 7), ("dumb", 8), ("disabled", 9), ("partialFailSsl", 10), ("routemonitorFail", 11))

class HAON(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("no", 0), ("yes", 1))

class ClusterAdminState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("active", 1), ("spare", 2), ("passive", 3))

class ClusterMasterState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("inactive", 0), ("active", 1), ("unknown", 2))

class ClusterCurHealth(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14))
    namedValues = NamedValues(("unknown", 0), ("init", 1), ("down", 2), ("up", 3), ("partialFail", 4), ("completeFail", 5), ("partialFailSsl", 6), ("routemonitorFail", 7), ("lbStateSyncInprog", 8), ("bkplaneFail", 9), ("clagFail", 10), ("dhtSyncInprog", 11), ("syncookieSyncInprog", 12), ("unkwnBadHlth", 14))

class ClusterEffHealth(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("up", 1), ("notup", 2), ("unknown", 3), ("init", 4))

class ClusterSyncState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("enabled", 1), ("success", 2), ("inprog", 3), ("failure", 4), ("incsyncdisabled", 5), ("disabled", 6), ("unknown", 7))

class FeatureStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notLicensed", 0), ("licensedButDisabled", 1), ("licensedAndEnabled", 2))

class FeaturePlatform(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("ns", 0), ("agee", 1), ("nsva", 2))

class ModeStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disabled", 0), ("enabled", 1))

class LbPolicy(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("weightedRoundRobin", 1), ("leastConnections", 2), ("leastResponse", 3), ("asynchronousMAC", 4), ("urlHashed", 5), ("domainHashed", 6), ("destinationIPHashed", 7), ("sourceIPHashed", 8), ("leastBandwidth", 9), ("leastPackets", 10), ("customLoad", 11), ("token", 12), ("staticProximity", 13), ("rdp", 14), ("leastreq", 15), ("rtt", 16), ("sourceIPDestinationIPHashed", 17), ("sourceIPSourcePort", 18), ("lrtm", 19), ("callIDHashed", 20))

class PersistanceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))
    namedValues = NamedValues(("none", 0), ("sourceIp", 1), ("cookieInsert", 2), ("cookieDelete", 3), ("cookieRead", 4), ("cookieHash", 5), ("sessionId", 6), ("server", 7), ("rule", 8), ("urlPassive", 9), ("customServerID", 10), ("groupSourceID", 11), ("groupCookieInsert", 12), ("groupRule", 13), ("destinationIP", 14), ("spillOver", 15), ("sourceIPdestinationIP", 16), ("callerID", 17), ("gslbBackup", 18), ("rtspSessionID", 19), ("diameter", 20), ("fixSession", 21))

class ActionType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ns", 1), ("acs", 2), ("noAction", 3))

class InputFormat(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 3))
    namedValues = NamedValues(("der", 1), ("pem", 3))

class IpAddressType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 2048))
    namedValues = NamedValues(("netScalerIp", 1), ("mappedIp", 2), ("subnetIp", 4), ("vserverIp", 8), ("clusterIp", 2048))

class IpAddressMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("passive", 2))

class AuthorizationStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("authorized", 1), ("notAuthorized", 2))

class CommandExecutionStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("failed", 1), ("successful", 2))

class MonitorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 52, 53))
    namedValues = NamedValues(("ping", 1), ("tcp", 2), ("http", 3), ("tcpEcv", 4), ("httpEcv", 5), ("udpEcv", 6), ("dns", 7), ("ftp", 8), ("https", 9), ("tcps", 10), ("ldnsPing", 11), ("ldnsTcp", 12), ("ldnsDns", 13), ("radius", 14), ("dbsResolver", 15), ("user", 16), ("httpInline", 17), ("sipUdp", 18), ("sipTcp", 19), ("ftpExtended", 20), ("smtp", 21), ("snmp", 22), ("nntp", 23), ("mysql", 24), ("ldap", 25), ("pop3", 26), ("load", 27), ("citrixXmlService", 28), ("citrixWebInterface", 29), ("citrixStaService", 30), ("citrixStaServiceNhop", 31), ("dnsTcp", 32), ("rtsp", 33), ("arp", 34), ("citrixAg", 35), ("citrixAacLoginPage", 36), ("citrixAacLas", 37), ("citrixXdDdc", 38), ("nd6", 39), ("mysqlEcv", 40), ("mssqlEcv", 41), ("citrixWiExtended", 42), ("diameter", 44), ("radiusaccounting", 46), ("storeFront", 47), ("tftpExtended", 48), ("appc", 49), ("smpp", 50), ("citrixXncEcv", 52), ("citrixXdm", 53))

class MonitorState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 7))
    namedValues = NamedValues(("monitorStateNotProbed", 0), ("monitorStateDown", 1), ("monitorStateUnknown", 2), ("monitorStateDisabled", 6), ("monitorStateUp", 7))

class ServiceGroupState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disabled", 0), ("enabled", 1))

class VServerType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 0), ("loadbalancing", 1), ("loadbalancinggroup", 2), ("sslvpn", 3), ("contentswitching", 4), ("cacheredirection", 5))

class SvcEntityType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("service", 0), ("serviceGroupMember", 1))

class ActiveActiveState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("active", 1), ("backup", 2))

nsProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4))
rs9000 = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1))
nsSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1))
sysBuildVersion = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBuildVersion.setStatus('current')
sysIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpAddress.setStatus('current')
sysNetmask = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysNetmask.setStatus('current')
sysMappedIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMappedIpAddress.setStatus('obsolete')
sysMappedIpAddressRange = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMappedIpAddressRange.setStatus('obsolete')
sysHighAvailabilityMode = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 6), HAMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHighAvailabilityMode.setStatus('current')
sysGateway = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGateway.setStatus('current')
sysCurMappedIpCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCurMappedIpCount.setStatus('current')
sysCustomID = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCustomID.setStatus('current')
sysHardwareVersionId = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareVersionId.setStatus('current')
sysHardwareVersionDesc = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareVersionDesc.setStatus('current')
sysTotConfigChanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTotConfigChanges.setStatus('current')
sysTotSaveConfigs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTotSaveConfigs.setStatus('current')
sysHardwareSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareSerialNumber.setStatus('current')
sysHardwareEncodedSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareEncodedSerialNumber.setStatus('current')
sysModelId = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysModelId.setStatus('current')
nsFeatureInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20))
featureWebLogging = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 1), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureWebLogging.setStatus('current')
featureSurgeProtection = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 2), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureSurgeProtection.setStatus('current')
featureLoadBalancing = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 3), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureLoadBalancing.setStatus('current')
featureContentSwitching = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 4), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureContentSwitching.setStatus('current')
featureCacheRedirection = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 5), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureCacheRedirection.setStatus('current')
featureSureConnect = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 6), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureSureConnect.setStatus('current')
featureCompression = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 7), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureCompression.setStatus('current')
featurePriorityQueuing = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 8), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featurePriorityQueuing.setStatus('current')
featureSslOffloading = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 9), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureSslOffloading.setStatus('current')
featureGslb = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 10), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureGslb.setStatus('current')
featureHttpDosProtection = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 11), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureHttpDosProtection.setStatus('current')
featureDynamicRouting = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 12), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureDynamicRouting.setStatus('obsolete')
featureContentFiltering = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 13), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureContentFiltering.setStatus('current')
featureInternalCaching = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 14), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureInternalCaching.setStatus('current')
featureSSLVPN = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 15), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureSSLVPN.setStatus('current')
featureOSPF = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 16), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureOSPF.setStatus('current')
featureRIP = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 17), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureRIP.setStatus('current')
featureBGP = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 18), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureBGP.setStatus('current')
featureRewrite = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 19), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureRewrite.setStatus('current')
featureDeltaCompression = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 20), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureDeltaCompression.setStatus('current')
featureGSLBProximity = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 21), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureGSLBProximity.setStatus('current')
featureIPv6ProtocolTranslation = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 22), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureIPv6ProtocolTranslation.setStatus('current')
featureApplicationFirewall = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 23), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureApplicationFirewall.setStatus('current')
featureResponder = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 24), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureResponder.setStatus('current')
featureHtmlInjection = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 25), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureHtmlInjection.setStatus('current')
featureAGEE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 50), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureAGEE.setStatus('current')
featureAAA = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 51), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureAAA.setStatus('current')
featurePLATFORM = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 60), FeaturePlatform()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featurePLATFORM.setStatus('current')
featureAPPFLOW = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 61), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureAPPFLOW.setStatus('current')
featureISIS = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 62), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureISIS.setStatus('current')
featureContentAdapation = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 63), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureContentAdapation.setStatus('current')
nsModeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21))
modeFastRamp = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 1), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeFastRamp.setStatus('current')
l2Mode = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 2), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2Mode.setStatus('current')
modeUseSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 3), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeUseSrcIp.setStatus('current')
modeClientKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 4), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeClientKeepAlive.setStatus('current')
modeTcpBuffering = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 5), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeTcpBuffering.setStatus('current')
modeMacBasedForwarding = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 6), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeMacBasedForwarding.setStatus('current')
modeUseSubnetIp = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 7), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeUseSubnetIp.setStatus('current')
modeEdgeConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 8), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeEdgeConfiguration.setStatus('current')
l3mode = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 9), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3mode.setStatus('current')
modePathMTUDiscovery = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 10), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modePathMTUDiscovery.setStatus('current')
modeStaticRouteAdv = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 11), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeStaticRouteAdv.setStatus('current')
modeDirectRouteAdv = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 12), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeDirectRouteAdv.setStatus('current')
modeIntranetRouteAdv = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 13), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeIntranetRouteAdv.setStatus('current')
brgBpdu = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 14), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgBpdu.setStatus('current')
modeIpv6StaticRouteAdv = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 15), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeIpv6StaticRouteAdv.setStatus('current')
modeIpv6DirectRouteAdv = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 16), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeIpv6DirectRouteAdv.setStatus('current')
mediaclassification = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 17), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaclassification.setStatus('current')
nsFiltersGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22))
aclStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1))
aclTotPktsBridgedLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsBridgedLow.setStatus('obsolete')
aclTotPktsBridgedHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsBridgedHigh.setStatus('obsolete')
aclTotPktsDeniedLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsDeniedLow.setStatus('obsolete')
aclTotPktsDeniedHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsDeniedHigh.setStatus('obsolete')
aclTotPktsAllowedLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsAllowedLow.setStatus('obsolete')
aclTotPktsAllowedHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsAllowedHigh.setStatus('obsolete')
aclTotPktsReusedLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsReusedLow.setStatus('obsolete')
aclTotPktsReusedHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsReusedHigh.setStatus('obsolete')
aclTotPktsBridged = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsBridged.setStatus('current')
aclTotPktsDenied = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsDenied.setStatus('current')
aclTotPktsAllowed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsAllowed.setStatus('current')
aclTotHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotHits.setStatus('current')
aclTotMisses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotMisses.setStatus('current')
aclTotPktsNAT = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsNAT.setStatus('current')
nsAclTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 20), )
if mibBuilder.loadTexts: nsAclTable.setStatus('current')
nsAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 20, 1), ).setIndexNames((0, "NS-ROOT-MIB", "aclName"))
if mibBuilder.loadTexts: nsAclEntry.setStatus('current')
aclName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 20, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclName.setStatus('current')
aclPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclPriority.setStatus('current')
aclHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 20, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclHits.setStatus('obsolete')
aclperHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 20, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclperHits.setStatus('current')
aclFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 20, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclFullName.setStatus('current')
aclTotCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotCount.setStatus('current')
contentFiltersTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 2), )
if mibBuilder.loadTexts: contentFiltersTable.setStatus('obsolete')
contentFiltersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "contentFilterName"))
if mibBuilder.loadTexts: contentFiltersEntry.setStatus('obsolete')
contentFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contentFilterName.setStatus('obsolete')
contentFilterHitsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contentFilterHitsLow.setStatus('obsolete')
contentFilterHitsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contentFilterHitsHigh.setStatus('obsolete')
contentFilterHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contentFilterHits.setStatus('obsolete')
saclStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 3))
saclTotPktsBridged = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 3, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saclTotPktsBridged.setStatus('current')
saclTotPktsDenied = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 3, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saclTotPktsDenied.setStatus('current')
saclTotPktsAllowed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 3, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saclTotPktsAllowed.setStatus('current')
saclTotHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 3, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saclTotHits.setStatus('current')
saclTotMisses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 3, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saclTotMisses.setStatus('current')
saclsCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 3, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saclsCount.setStatus('current')
acl6StatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4))
nsAcl6Table = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 20), )
if mibBuilder.loadTexts: nsAcl6Table.setStatus('current')
nsAcl6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 20, 1), ).setIndexNames((0, "NS-ROOT-MIB", "acAclName"))
if mibBuilder.loadTexts: nsAcl6Entry.setStatus('current')
acAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 20, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAclName.setStatus('current')
acl6Priority = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6Priority.setStatus('current')
acl6perHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 20, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6perHits.setStatus('current')
acl6FullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 20, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6FullName.setStatus('current')
acl6TotPktsBridged = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6TotPktsBridged.setStatus('current')
acl6TotPktsDenied = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6TotPktsDenied.setStatus('current')
acl6TotPktsAllowed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6TotPktsAllowed.setStatus('current')
acl6TotPktsNAT = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6TotPktsNAT.setStatus('current')
acl6TotHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6TotHits.setStatus('current')
acl6TotMisses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6TotMisses.setStatus('current')
acl6TotPktsNAT64 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6TotPktsNAT64.setStatus('current')
acl6TotCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6TotCount.setStatus('current')
pbrStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5))
nsPbrTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5, 20), )
if mibBuilder.loadTexts: nsPbrTable.setStatus('current')
nsPbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5, 20, 1), ).setIndexNames((0, "NS-ROOT-MIB", "pbrName"))
if mibBuilder.loadTexts: nsPbrEntry.setStatus('current')
pbrName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5, 20, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbrName.setStatus('current')
pbrFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5, 20, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbrFullName.setStatus('current')
pbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbrPriority.setStatus('current')
pbrperHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5, 20, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbrperHits.setStatus('current')
pbrTotPktsAllowed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbrTotPktsAllowed.setStatus('current')
pbrTotPktsDenied = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbrTotPktsDenied.setStatus('current')
pbrTotHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbrTotHits.setStatus('current')
pbrTotMisses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbrTotMisses.setStatus('current')
pbrTotNullDrop = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbrTotNullDrop.setStatus('current')
sacl6StatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 6))
sacl6TotPktsBridged = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 6, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sacl6TotPktsBridged.setStatus('current')
sacl6TotPktsDenied = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 6, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sacl6TotPktsDenied.setStatus('current')
sacl6TotPktsAllowed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 6, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sacl6TotPktsAllowed.setStatus('current')
sacl6TotHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 6, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sacl6TotHits.setStatus('current')
sacl6TotMisses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 6, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sacl6TotMisses.setStatus('current')
sacl6sCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 6, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sacl6sCount.setStatus('current')
pbr6StatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7))
nsPbr6Table = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7, 20), )
if mibBuilder.loadTexts: nsPbr6Table.setStatus('current')
nsPbr6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7, 20, 1), ).setIndexNames((0, "NS-ROOT-MIB", "acPbrName"))
if mibBuilder.loadTexts: nsPbr6Entry.setStatus('current')
acPbrName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7, 20, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPbrName.setStatus('current')
pbr6FullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7, 20, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbr6FullName.setStatus('current')
pbr6Priority = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbr6Priority.setStatus('current')
pbr6perHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7, 20, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbr6perHits.setStatus('current')
pbr6TotPktsAllowed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbr6TotPktsAllowed.setStatus('current')
pbr6TotPktsDenied = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbr6TotPktsDenied.setStatus('current')
pbr6TotHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbr6TotHits.setStatus('current')
pbr6TotMisses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbr6TotMisses.setStatus('current')
pbr6TotNullDrop = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbr6TotNullDrop.setStatus('current')
nsHighAvailabilityGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23))
haPeerId = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haPeerId.setStatus('current')
haPeerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haPeerIpAddress.setStatus('current')
haPeerState = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 3), HAMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haPeerState.setStatus('current')
haTotStateTransitions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haTotStateTransitions.setStatus('current')
haTimeofLastStateTransition = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haTimeofLastStateTransition.setStatus('current')
haTotStateFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haTotStateFail.setStatus('current')
haErrSyncFailure = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haErrSyncFailure.setStatus('current')
haErrTotNodeDown = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haErrTotNodeDown.setStatus('current')
haErrPropMemFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haErrPropMemFail.setStatus('current')
haErrNsbMemFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haErrNsbMemFail.setStatus('current')
haErrPortSilent = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haErrPortSilent.setStatus('current')
haTotTimerRecoveries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haTotTimerRecoveries.setStatus('current')
haErrSwMonitorFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haErrSwMonitorFail.setStatus('obsolete')
haNicsMonitorFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haNicsMonitorFailed.setStatus('current')
haLastMasterStateTransitionReason = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haLastMasterStateTransitionReason.setStatus('current')
haPeerSystemState = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 16), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: haPeerSystemState.setStatus('current')
haErrPropTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haErrPropTimeout.setStatus('current')
haCurDerivedInc = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haCurDerivedInc.setStatus('current')
haCurPeerInc = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haCurPeerInc.setStatus('current')
haErrMasterDispute = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haErrMasterDispute.setStatus('current')
haTotPktTx = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haTotPktTx.setStatus('current')
haTotPktRx = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haTotPktRx.setStatus('current')
haCurStatus = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 23), HAON()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haCurStatus.setStatus('current')
haCurState = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 24), HAState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haCurState.setStatus('current')
haPeerInetAddrType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 25), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haPeerInetAddrType.setStatus('current')
haPeerInetAddr = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 26), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haPeerInetAddr.setStatus('current')
haNicMonitorSucceeded = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 27), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: haNicMonitorSucceeded.setStatus('current')
haLastNicMonitorFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 28), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: haLastNicMonitorFailed.setStatus('current')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vlanId"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
vlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanId.setStatus('current')
vlanMemberInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMemberInterfaces.setStatus('current')
vlanTaggedInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTaggedInterfaces.setStatus('current')
vlanTotRxPktsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotRxPktsLow.setStatus('obsolete')
vlanTotRxPktsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotRxPktsHigh.setStatus('obsolete')
vlanTotRxBytesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotRxBytesLow.setStatus('obsolete')
vlanTotRxBytesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotRxBytesHigh.setStatus('obsolete')
vlanTotTxPktsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotTxPktsLow.setStatus('obsolete')
vlanTotTxPktsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotTxPktsHigh.setStatus('obsolete')
vlanTotTxBytesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotTxBytesLow.setStatus('obsolete')
vlanTotTxBytesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotTxBytesHigh.setStatus('obsolete')
vlanTotDroppedPktsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotDroppedPktsLow.setStatus('obsolete')
vlanTotDroppedPktsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotDroppedPktsHigh.setStatus('obsolete')
vlanTotBroadcastPktsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotBroadcastPktsLow.setStatus('obsolete')
vlanTotBroadcastPktsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotBroadcastPktsHigh.setStatus('obsolete')
vlanTotRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotRxPkts.setStatus('current')
vlanTotRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotRxBytes.setStatus('current')
vlanTotTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotTxPkts.setStatus('current')
vlanTotTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotTxBytes.setStatus('current')
vlanTotDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotDroppedPkts.setStatus('current')
vlanTotBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotBroadcastPkts.setStatus('current')
vlanBindIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanBindIpAddress.setStatus('obsolete')
vlanBindIpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanBindIpNetmask.setStatus('obsolete')
vlanBridgeGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanBridgeGroup.setStatus('current')
vlanAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanAliasName.setStatus('current')
nsIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 26), )
if mibBuilder.loadTexts: nsIpAddrTable.setStatus('current')
nsIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 26, 1), ).setIndexNames((0, "NS-ROOT-MIB", "ipAddr"))
if mibBuilder.loadTexts: nsIpAddrEntry.setStatus('current')
ipAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 26, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddr.setStatus('current')
ipNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 26, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNetmask.setStatus('current')
ipType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 26, 1, 3), IpAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipType.setStatus('current')
ipMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 26, 1, 4), IpAddressMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMode.setStatus('current')
ipFreePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 26, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFreePorts.setStatus('current')
ipVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 26, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipVlan.setStatus('current')
ipBridgeGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 26, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipBridgeGroup.setStatus('current')
ipVxlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 26, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipVxlan.setStatus('current')
nsResourceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41))
resCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resCpuUsage.setStatus('current')
resMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resMemUsage.setStatus('current')
numCPUs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numCPUs.setStatus('current')
memSizeMB = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSizeMB.setStatus('current')
numSSLCards = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numSSLCards.setStatus('current')
nsCPUTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 6), )
if mibBuilder.loadTexts: nsCPUTable.setStatus('current')
nsCPUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 6, 1), ).setIndexNames((0, "NS-ROOT-MIB", "nsCPUname"))
if mibBuilder.loadTexts: nsCPUEntry.setStatus('current')
nsCPUname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 6, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCPUname.setStatus('current')
nsCPUusage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCPUusage.setStatus('current')
nsSysHealthTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 7), )
if mibBuilder.loadTexts: nsSysHealthTable.setStatus('current')
nsSysHealthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 7, 1), ).setIndexNames((0, "NS-ROOT-MIB", "sysHealthCounterName"))
if mibBuilder.loadTexts: nsSysHealthEntry.setStatus('current')
sysHealthCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 7, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHealthCounterName.setStatus('current')
sysHealthCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHealthCounterValue.setStatus('current')
nsSysHealthDiskTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 8), )
if mibBuilder.loadTexts: nsSysHealthDiskTable.setStatus('current')
nsSysHealthDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 8, 1), ).setIndexNames((0, "NS-ROOT-MIB", "sysHealthDiskName"))
if mibBuilder.loadTexts: nsSysHealthDiskEntry.setStatus('current')
sysHealthDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 8, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHealthDiskName.setStatus('current')
sysHealthDiskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 8, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHealthDiskSize.setStatus('current')
sysHealthDiskAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHealthDiskAvail.setStatus('current')
sysHealthDiskUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHealthDiskUsed.setStatus('current')
sysHealthDiskPerusage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 8, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHealthDiskPerusage.setStatus('current')
cpuSpeedMHz = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuSpeedMHz.setStatus('current')
numPEs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numPEs.setStatus('current')
sysStatisticsTime = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatisticsTime.setStatus('current')
nsIpStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43))
ipTotRxPktsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotRxPktsLow.setStatus('obsolete')
ipTotRxPktsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotRxPktsHigh.setStatus('obsolete')
ipTotRxBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotRxBytesLow.setStatus('obsolete')
ipTotRxBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotRxBytesHigh.setStatus('obsolete')
ipTotRxMbitsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotRxMbitsLow.setStatus('obsolete')
ipTotRxMbitsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotRxMbitsHigh.setStatus('obsolete')
ipTotTxPktsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTxPktsLow.setStatus('obsolete')
ipTotTxPktsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTxPktsHigh.setStatus('obsolete')
ipTotTxBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTxBytesLow.setStatus('obsolete')
ipTotTxBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTxBytesHigh.setStatus('obsolete')
ipTotTxMbitsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTxMbitsLow.setStatus('obsolete')
ipTotTxMbitsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTxMbitsHigh.setStatus('obsolete')
ipTotFragmentsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotFragmentsLow.setStatus('obsolete')
ipTotFragmentsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotFragmentsHigh.setStatus('obsolete')
ipTotBadlensLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotBadlensLow.setStatus('obsolete')
ipTotBadlensHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotBadlensHigh.setStatus('obsolete')
ipTotBadMacAddrsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotBadMacAddrsLow.setStatus('obsolete')
ipTotBadMacAddrsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotBadMacAddrsHigh.setStatus('obsolete')
ipTotMaxClientsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotMaxClientsLow.setStatus('obsolete')
ipTotMaxClientsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotMaxClientsHigh.setStatus('obsolete')
ipTotUnknownSvcsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotUnknownSvcsLow.setStatus('obsolete')
ipTotUnknownSvcsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotUnknownSvcsHigh.setStatus('obsolete')
ipTotLandattacksLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotLandattacksLow.setStatus('obsolete')
ipTotLandattacksHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotLandattacksHigh.setStatus('obsolete')
ipTotRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotRxPkts.setStatus('current')
ipTotRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotRxBytes.setStatus('current')
ipTotRxMbits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotRxMbits.setStatus('current')
ipTotTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTxPkts.setStatus('current')
ipTotTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTxBytes.setStatus('current')
ipTotTxMbits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTxMbits.setStatus('current')
ipTotFragments = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotFragments.setStatus('current')
ipTotBadlens = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotBadlens.setStatus('current')
ipTotBadMacAddrs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotBadMacAddrs.setStatus('current')
ipTotMaxClients = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotMaxClients.setStatus('current')
ipTotUnknownSvcs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotUnknownSvcs.setStatus('current')
ipTotLandattacks = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotLandattacks.setStatus('current')
ipTotBadChecksums = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotBadChecksums.setStatus('current')
ipTotReassemblyAttempt = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotReassemblyAttempt.setStatus('current')
ipTotSuccReassembly = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotSuccReassembly.setStatus('current')
ipTotUnsuccReassembly = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotUnsuccReassembly.setStatus('current')
ipTotTooBig = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTooBig.setStatus('current')
ipTotZeroFragmentLen = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotZeroFragmentLen.setStatus('current')
ipTotDupFragments = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotDupFragments.setStatus('current')
ipTotOutOfOrderFrag = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotOutOfOrderFrag.setStatus('current')
ipTotUnknownDstRcvd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotUnknownDstRcvd.setStatus('current')
ipTotBadTransport = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotBadTransport.setStatus('current')
ipTotVIPDown = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotVIPDown.setStatus('current')
ipTotFixHeaderFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotFixHeaderFail.setStatus('current')
ipTotAddrLookup = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotAddrLookup.setStatus('current')
ipTotAddrLookupFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotAddrLookupFail.setStatus('current')
ipTotUDPfragmentsFwd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotUDPfragmentsFwd.setStatus('current')
ipTotTCPfragmentsFwd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTCPfragmentsFwd.setStatus('current')
ipTotFragPktsGen = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotFragPktsGen.setStatus('current')
ipTotInvalidHeaderSz = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotInvalidHeaderSz.setStatus('current')
ipTotInvalidPacketSize = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotInvalidPacketSize.setStatus('current')
ipTotTruncatedPackets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTruncatedPackets.setStatus('current')
ipTotZeroNextHop = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotZeroNextHop.setStatus('current')
ipTotTtlExpired = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTtlExpired.setStatus('current')
nonIpTotTruncatedPackets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nonIpTotTruncatedPackets.setStatus('current')
nsIcmpStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44))
icmpTotRxPktsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxPktsLow.setStatus('obsolete')
icmpTotRxPktsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxPktsHigh.setStatus('obsolete')
icmpTotRxBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxBytesLow.setStatus('obsolete')
icmpTotRxBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxBytesHigh.setStatus('obsolete')
icmpTotTxPktsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotTxPktsLow.setStatus('obsolete')
icmpTotTxPktsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotTxPktsHigh.setStatus('obsolete')
icmpTotTxBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotTxBytesLow.setStatus('obsolete')
icmpTotTxBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotTxBytesHigh.setStatus('obsolete')
icmpTotRxEchoReplyLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxEchoReplyLow.setStatus('obsolete')
icmpTotRxEchoReplyHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxEchoReplyHigh.setStatus('obsolete')
icmpTotTxEchoReplyLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotTxEchoReplyLow.setStatus('obsolete')
icmpTotTxEchoReplyHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotTxEchoReplyHigh.setStatus('obsolete')
icmpTotRxEchoLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxEchoLow.setStatus('obsolete')
icmpTotRxEchoHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxEchoHigh.setStatus('obsolete')
icmpTotPktsDroppedLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotPktsDroppedLow.setStatus('obsolete')
icmpTotPktsDroppedHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotPktsDroppedHigh.setStatus('obsolete')
icmpCurRateThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpCurRateThreshold.setStatus('current')
icmpCurRateThresholdInterval = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpCurRateThresholdInterval.setStatus('obsolete')
icmpCurRateCounter = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpCurRateCounter.setStatus('obsolete')
icmpTotThresholdExceedsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotThresholdExceedsLow.setStatus('obsolete')
icmpTotThresholdExceedsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotThresholdExceedsHigh.setStatus('obsolete')
icmpTotRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxPkts.setStatus('current')
icmpTotRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxBytes.setStatus('current')
icmpTotTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotTxPkts.setStatus('current')
icmpTotTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotTxBytes.setStatus('current')
icmpTotRxEchoReply = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxEchoReply.setStatus('current')
icmpTotTxEchoReply = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotTxEchoReply.setStatus('current')
icmpTotRxEcho = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxEcho.setStatus('current')
icmpTotPktsDropped = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotPktsDropped.setStatus('current')
icmpTotThresholdExceeds = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotThresholdExceeds.setStatus('current')
icmpTotPortUnreachableRx = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotPortUnreachableRx.setStatus('current')
icmpTotPortUnreachableTx = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotPortUnreachableTx.setStatus('current')
icmpTotBadChecksum = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotBadChecksum.setStatus('current')
icmpTotNeedFragRx = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotNeedFragRx.setStatus('current')
icmpTotNonFirstIpFrag = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotNonFirstIpFrag.setStatus('current')
icmpTotInvalidBodyLen = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotInvalidBodyLen.setStatus('current')
icmpTotNoTcpConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotNoTcpConn.setStatus('current')
icmpTotNoUdpConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotNoUdpConn.setStatus('current')
icmpTotInvalidTcpSeqno = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotInvalidTcpSeqno.setStatus('current')
icmpTotInvalidNextMTUval = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotInvalidNextMTUval.setStatus('current')
icmpTotDstIpLookup = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotDstIpLookup.setStatus('current')
icmpTotBigNextMTU = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotBigNextMTU.setStatus('current')
icmpTotInvalidProtocol = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotInvalidProtocol.setStatus('current')
icmpTotBadPMTUIpChecksum = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotBadPMTUIpChecksum.setStatus('current')
icmpTotPMTUnoLink = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotPMTUnoLink.setStatus('current')
icmpTotPMTUDiscoveryDisabled = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotPMTUDiscoveryDisabled.setStatus('current')
nsUdpStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45))
udpTotUnknownSvcPktsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotUnknownSvcPktsLow.setStatus('obsolete')
udpTotUnknownSvcPktsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotUnknownSvcPktsHigh.setStatus('obsolete')
udpTotRxPktsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotRxPktsLow.setStatus('obsolete')
udpTotRxPktsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotRxPktsHigh.setStatus('obsolete')
udpTotRxBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotRxBytesLow.setStatus('obsolete')
udpTotRxBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotRxBytesHigh.setStatus('obsolete')
udpTotTxPktsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotTxPktsLow.setStatus('obsolete')
udpTotTxPktsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotTxPktsHigh.setStatus('obsolete')
udpTotTxBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotTxBytesLow.setStatus('obsolete')
udpTotTxBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotTxBytesHigh.setStatus('obsolete')
udpCurRateThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpCurRateThreshold.setStatus('current')
udpRateInterval = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpRateInterval.setStatus('obsolete')
udpCurRateCounter = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpCurRateCounter.setStatus('obsolete')
udpCurRateThresholdExceedsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpCurRateThresholdExceedsLow.setStatus('obsolete')
udpCurRateThresholdExceedsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpCurRateThresholdExceedsHigh.setStatus('obsolete')
udpTotUnknownSvcPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotUnknownSvcPkts.setStatus('current')
udpTotRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotRxPkts.setStatus('current')
udpTotRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotRxBytes.setStatus('current')
udpTotTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotTxPkts.setStatus('current')
udpTotTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotTxBytes.setStatus('current')
udpCurRateThresholdExceeds = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpCurRateThresholdExceeds.setStatus('current')
udpBadChecksum = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBadChecksum.setStatus('current')
nsTcpStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46))
tcpCurServerConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurServerConn.setStatus('current')
tcpCurClientConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurClientConn.setStatus('current')
tcpCurPendingConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurPendingConn.setStatus('obsolete')
tcpCurResetCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurResetCount.setStatus('obsolete')
tcpMaxServerConnections = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpMaxServerConnections.setStatus('obsolete')
tcpMaxReqsperConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpMaxReqsperConn.setStatus('obsolete')
tcpMaxPerSrvrReusePool = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpMaxPerSrvrReusePool.setStatus('obsolete')
tcpActiveServerConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpActiveServerConn.setStatus('current')
tcpCurClientConnClosing = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurClientConnClosing.setStatus('current')
tcpCurServerConnEstablished = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurServerConnEstablished.setStatus('current')
tcpCurClientConnOpening = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurClientConnOpening.setStatus('current')
tcpCurClientConnEstablished = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurClientConnEstablished.setStatus('current')
tcpCurServerConnClosing = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurServerConnClosing.setStatus('current')
tcpSpareConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpSpareConn.setStatus('current')
tcpSurgeQueueLen = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpSurgeQueueLen.setStatus('current')
tcpCurServerConnOpening = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurServerConnOpening.setStatus('current')
tcpTotServerConnOpened = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotServerConnOpened.setStatus('current')
tcpTotServerConnClosed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotServerConnClosed.setStatus('current')
tcpTotClientConnOpened = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotClientConnOpened.setStatus('current')
tcpTotClientConnClosed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotClientConnClosed.setStatus('current')
tcpTotSyn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotSyn.setStatus('current')
tcpTotSynProbe = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotSynProbe.setStatus('current')
tcpTotSvrFin = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotSvrFin.setStatus('current')
tcpTotCltFin = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotCltFin.setStatus('current')
tcpWaitToSyn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpWaitToSyn.setStatus('current')
tcpTotZombieCltConnFlushed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotZombieCltConnFlushed.setStatus('current')
tcpTotZombieSvrConnFlushed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotZombieSvrConnFlushed.setStatus('current')
tcpTotZombieHalfOpenCltConnFlushed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotZombieHalfOpenCltConnFlushed.setStatus('current')
tcpTotZombieHalfOpenSvrConnFlushed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotZombieHalfOpenSvrConnFlushed.setStatus('current')
tcpTotZombieActiveHalfCloseCltConnFlushed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotZombieActiveHalfCloseCltConnFlushed.setStatus('current')
tcpTotZombieActiveHalfCloseSvrConnFlushed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotZombieActiveHalfCloseSvrConnFlushed.setStatus('current')
tcpTotZombiePassiveHalfCloseCltConnFlushed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotZombiePassiveHalfCloseCltConnFlushed.setStatus('current')
tcpTotZombiePassiveHalfCloseSrvConnFlushed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotZombiePassiveHalfCloseSrvConnFlushed.setStatus('current')
tcpErrBadCheckSum = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrBadCheckSum.setStatus('current')
tcpErrSynInSynRcvd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSynInSynRcvd.setStatus('current')
tcpErrSynInEst = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSynInEst.setStatus('current')
tcpErrSynGiveUp = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSynGiveUp.setStatus('current')
tcpErrSynSentBadAck = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSynSentBadAck.setStatus('current')
tcpErrSynRetry = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSynRetry.setStatus('current')
tcpErrFinRetry = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrFinRetry.setStatus('current')
tcpErrFinGiveUp = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrFinGiveUp.setStatus('current')
tcpErrFinDup = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrFinDup.setStatus('current')
tcpErrRst = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrRst.setStatus('current')
tcpErrRstNonEst = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrRstNonEst.setStatus('current')
tcpErrRstOutOfWindow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrRstOutOfWindow.setStatus('current')
tcpErrRstInTimewait = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrRstInTimewait.setStatus('current')
tcpErrSvrRetrasmit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSvrRetrasmit.setStatus('current')
tcpErrCltRetrasmit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrCltRetrasmit.setStatus('current')
tcpErrFullRetrasmit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrFullRetrasmit.setStatus('current')
tcpErrPartialRetrasmit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrPartialRetrasmit.setStatus('current')
tcpErrSvrOutOfOrder = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSvrOutOfOrder.setStatus('current')
tcpErrCltOutOfOrder = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrCltOutOfOrder.setStatus('current')
tcpErrCltHole = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrCltHole.setStatus('current')
tcpErrSvrHole = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSvrHole.setStatus('current')
tcpErrCookiePktSeqReject = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrCookiePktSeqReject.setStatus('current')
tcpErrCookiePktSigReject = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrCookiePktSigReject.setStatus('current')
tcpErrCookiePktSeqDrop = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrCookiePktSeqDrop.setStatus('current')
tcpErrCookiePktMssReject = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrCookiePktMssReject.setStatus('current')
tcpErrRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrRetransmit.setStatus('current')
tcpErrRetransmitGiveUp = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrRetransmitGiveUp.setStatus('current')
tcpTotRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotRxPkts.setStatus('current')
tcpTotRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotRxBytes.setStatus('current')
tcpTotTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotTxPkts.setStatus('current')
tcpTotTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotTxBytes.setStatus('current')
pcbTotZombieCall = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcbTotZombieCall.setStatus('current')
tcpTotSynHeld = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotSynHeld.setStatus('current')
tcpTotSynFlush = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotSynFlush.setStatus('current')
tcpTotFinWaitClosed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotFinWaitClosed.setStatus('current')
tcpErrAnyPortFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrAnyPortFail.setStatus('current')
tcpErrIpPortFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrIpPortFail.setStatus('current')
tcpErrSentRst = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSentRst.setStatus('current')
tcpErrBadStateConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrBadStateConn.setStatus('current')
tcpErrFastRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrFastRetransmissions.setStatus('current')
tcpErrFirstRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrFirstRetransmissions.setStatus('current')
tcpErrSecondRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSecondRetransmissions.setStatus('current')
tcpErrThirdRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrThirdRetransmissions.setStatus('current')
tcpErrForthRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrForthRetransmissions.setStatus('current')
tcpErrFifthRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrFifthRetransmissions.setStatus('current')
tcpErrSixthRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSixthRetransmissions.setStatus('current')
tcpErrSeventhRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSeventhRetransmissions.setStatus('current')
tcpErrDataAfterFin = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrDataAfterFin.setStatus('current')
tcpErrRstThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrRstThreshold.setStatus('current')
tcpErrOutOfWindowPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrOutOfWindowPkts.setStatus('current')
tcpErrSynDroppedCongestion = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSynDroppedCongestion.setStatus('current')
tcpCurPhysicalServers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 85), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurPhysicalServers.setStatus('current')
tcpReuseHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpReuseHit.setStatus('current')
tcpWaitToData = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpWaitToData.setStatus('current')
tcpErrStrayPkt = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrStrayPkt.setStatus('current')
tcpTotClientConnOpenRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 89), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotClientConnOpenRate.setStatus('current')
tcpCurRateThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 90), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurRateThreshold.setStatus('current')
freeConnHalfClosed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 91), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeConnHalfClosed.setStatus('current')
freeConnFlushMarked = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 92), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeConnFlushMarked.setStatus('current')
freeConnEstd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 93), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeConnEstd.setStatus('current')
flushThresReached = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 94), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flushThresReached.setStatus('current')
memFailFlushTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memFailFlushTrigger.setStatus('current')
mptcpCurMpcapableSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 96), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpCurMpcapableSessions.setStatus('current')
mptcpCurSFConnections = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 97), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpCurSFConnections.setStatus('current')
mptcpCurPendingJoin = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 98), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpCurPendingJoin.setStatus('current')
mptcpErrInvalCookie = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 99), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrInvalCookie.setStatus('current')
mptcpErrUnknownToken = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrUnknownToken.setStatus('current')
mptcpErrAddridExist = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 101), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrAddridExist.setStatus('current')
mptcpErrMaxSF = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 102), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrMaxSF.setStatus('current')
mptcpErrInvalMAC = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 103), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrInvalMAC.setStatus('current')
mptcpErrBadCksum = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 104), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrBadCksum.setStatus('current')
mptcpErrAddrId0 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrAddrId0.setStatus('current')
mptcpErrfastclose = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 106), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrfastclose.setStatus('current')
mptcpErrJoinThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 107), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrJoinThreshold.setStatus('current')
mptcpErrInvalOpts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 108), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrInvalOpts.setStatus('current')
mptcpErrInvalRemAddr = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 109), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrInvalRemAddr.setStatus('current')
mptcpErrVersionNotSupported = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrVersionNotSupported.setStatus('current')
mptcpErrCryptoNotSupported = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 111), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrCryptoNotSupported.setStatus('current')
mptcpErrExtnFlagSet = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 112), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrExtnFlagSet.setStatus('current')
mptcpErrResFlagSet = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 113), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrResFlagSet.setStatus('current')
mptcpErrJoinAfterFallback = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 114), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrJoinAfterFallback.setStatus('current')
mptcpErrDataFinpassive = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 115), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrDataFinpassive.setStatus('current')
mptcpErrFastClosepassive = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 116), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrFastClosepassive.setStatus('current')
mptcpErrFastClose = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 117), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrFastClose.setStatus('current')
mptcpErrFastCloseKey = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 118), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrFastCloseKey.setStatus('current')
mptcpPlainackFallback = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 119), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpPlainackFallback.setStatus('current')
mptcpPlainackRST = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 120), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpPlainackRST.setStatus('current')
mptcpMPFailSent = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 121), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpMPFailSent.setStatus('current')
mptcpMPFailRecvd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 122), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpMPFailRecvd.setStatus('current')
mptcpInfiniteMapRecvd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 123), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpInfiniteMapRecvd.setStatus('current')
mptcpTotMpCapSyn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 124), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpTotMpCapSyn.setStatus('current')
mptcpTotMpJoinSyn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 125), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpTotMpJoinSyn.setStatus('current')
mptcpTotMpcapSession = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 126), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpTotMpcapSession.setStatus('current')
mptcpTotSFConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 127), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpTotSFConn.setStatus('current')
mptcpTotEstSFReplaced = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 128), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpTotEstSFReplaced.setStatus('current')
mptcpTotPendSFReplaced = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 129), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpTotPendSFReplaced.setStatus('current')
mptcpCurSessWithoutSFs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 130), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpCurSessWithoutSFs.setStatus('current')
tcpOptimizationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 131), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpOptimizationEnabled.setStatus('current')
tcpOptimizationBypassed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 132), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpOptimizationBypassed.setStatus('current')
nsSslStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47))
sslCardStatus = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCardStatus.setStatus('current')
sslEngineStatus = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslEngineStatus.setStatus('current')
sslSessionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionsPerSec.setStatus('current')
sslTotTransactionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTransactionsLow.setStatus('obsolete')
sslTotTransactionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTransactionsHigh.setStatus('obsolete')
sslTotSSLv2TransactionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2TransactionsLow.setStatus('obsolete')
sslTotSSLv2TransactionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2TransactionsHigh.setStatus('obsolete')
sslTotSSLv3TransactionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3TransactionsLow.setStatus('obsolete')
sslTotSSLv3TransactionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3TransactionsHigh.setStatus('obsolete')
sslTotTLSv1TransactionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1TransactionsLow.setStatus('obsolete')
sslTotTLSv1TransactionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1TransactionsHigh.setStatus('obsolete')
sslTotSessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSessionsLow.setStatus('obsolete')
sslTotSessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSessionsHigh.setStatus('obsolete')
sslTotSSLv2SessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2SessionsLow.setStatus('obsolete')
sslTotSSLv2SessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2SessionsHigh.setStatus('obsolete')
sslTotSSLv3SessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3SessionsLow.setStatus('obsolete')
sslTotSSLv3SessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3SessionsHigh.setStatus('obsolete')
sslTotTLSv1SessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1SessionsLow.setStatus('obsolete')
sslTotTLSv1SessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1SessionsHigh.setStatus('obsolete')
sslTotExpiredSessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotExpiredSessionsLow.setStatus('obsolete')
sslTotExpiredSessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotExpiredSessionsHigh.setStatus('obsolete')
sslTotNewSessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotNewSessionsLow.setStatus('obsolete')
sslTotNewSessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotNewSessionsHigh.setStatus('obsolete')
sslTotSessionHitsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSessionHitsLow.setStatus('obsolete')
sslTotSessionHitsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSessionHitsHigh.setStatus('obsolete')
sslTotSessionMissLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSessionMissLow.setStatus('obsolete')
sslTotSessionMissHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSessionMissHigh.setStatus('obsolete')
sslTotRenegSessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRenegSessionsLow.setStatus('obsolete')
sslTotRenegSessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRenegSessionsHigh.setStatus('obsolete')
sslTotSSLv3RenegSessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3RenegSessionsLow.setStatus('obsolete')
sslTotSSLv3RenegSessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3RenegSessionsHigh.setStatus('obsolete')
sslTotTLSv1RenegSessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1RenegSessionsLow.setStatus('obsolete')
sslTotTLSv1RenegSessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1RenegSessionsHigh.setStatus('obsolete')
sslTotSSLv2HandshakesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2HandshakesLow.setStatus('obsolete')
sslTotSSLv2HandshakesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2HandshakesHigh.setStatus('obsolete')
sslTotSSLv3HandshakesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3HandshakesLow.setStatus('obsolete')
sslTotSSLv3HandshakesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3HandshakesHigh.setStatus('obsolete')
sslTotTLSv1HandshakesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1HandshakesLow.setStatus('obsolete')
sslTotTLSv1HandshakesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1HandshakesHigh.setStatus('obsolete')
sslTotSSLv2ClientAuthenticationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2ClientAuthenticationsLow.setStatus('obsolete')
sslTotSSLv2ClientAuthenticationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2ClientAuthenticationsHigh.setStatus('obsolete')
sslTotSSLv3ClientAuthenticationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3ClientAuthenticationsLow.setStatus('obsolete')
sslTotSSLv3ClientAuthenticationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3ClientAuthenticationsHigh.setStatus('obsolete')
sslTotTLSv1ClientAuthenticationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1ClientAuthenticationsLow.setStatus('obsolete')
sslTotTLSv1ClientAuthenticationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1ClientAuthenticationsHigh.setStatus('obsolete')
sslTotRSA512keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSA512keyExchangesLow.setStatus('obsolete')
sslTotRSA512keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSA512keyExchangesHigh.setStatus('obsolete')
sslTotRSA1024keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSA1024keyExchangesLow.setStatus('obsolete')
sslTotRSA1024keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSA1024keyExchangesHigh.setStatus('obsolete')
sslTotRSA2048keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSA2048keyExchangesLow.setStatus('obsolete')
sslTotRSA2048keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSA2048keyExchangesHigh.setStatus('obsolete')
sslTotDH512keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDH512keyExchangesLow.setStatus('obsolete')
sslTotDH512keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDH512keyExchangesHigh.setStatus('obsolete')
sslTotDH1024keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDH1024keyExchangesLow.setStatus('obsolete')
sslTotDH1024keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDH1024keyExchangesHigh.setStatus('obsolete')
sslTotDH2048keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDH2048keyExchangesLow.setStatus('obsolete')
sslTotDH2048keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDH2048keyExchangesHigh.setStatus('obsolete')
sslTotRSAAuthorizationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSAAuthorizationsLow.setStatus('obsolete')
sslTotRSAAuthorizationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSAAuthorizationsHigh.setStatus('obsolete')
sslTotDHAuthorizationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDHAuthorizationsLow.setStatus('obsolete')
sslTotDHAuthorizationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDHAuthorizationsHigh.setStatus('obsolete')
sslTotDSSAuthorizationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDSSAuthorizationsLow.setStatus('obsolete')
sslTotDSSAuthorizationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDSSAuthorizationsHigh.setStatus('obsolete')
sslTotNULLAuthorizationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotNULLAuthorizationsLow.setStatus('obsolete')
sslTotNULLAuthorizationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotNULLAuthorizationsHigh.setStatus('obsolete')
sslTot40BitRC4CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot40BitRC4CiphersLow.setStatus('obsolete')
sslTot40BitRC4CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot40BitRC4CiphersHigh.setStatus('obsolete')
sslTot56BitRC4CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot56BitRC4CiphersLow.setStatus('obsolete')
sslTot56BitRC4CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot56BitRC4CiphersHigh.setStatus('obsolete')
sslTot64BitRC4CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot64BitRC4CiphersLow.setStatus('obsolete')
sslTot64BitRC4CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot64BitRC4CiphersHigh.setStatus('obsolete')
sslTot128BitRC4CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot128BitRC4CiphersLow.setStatus('obsolete')
sslTot128BitRC4CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot128BitRC4CiphersHigh.setStatus('obsolete')
sslTot40BitDESCiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot40BitDESCiphersLow.setStatus('obsolete')
sslTot40BitDESCiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot40BitDESCiphersHigh.setStatus('obsolete')
sslTot56BitDESCiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot56BitDESCiphersLow.setStatus('obsolete')
sslTot56BitDESCiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot56BitDESCiphersHigh.setStatus('obsolete')
sslTot168Bit3DESCiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot168Bit3DESCiphersLow.setStatus('obsolete')
sslTot168Bit3DESCiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot168Bit3DESCiphersHigh.setStatus('obsolete')
sslTot40BitRC2CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot40BitRC2CiphersLow.setStatus('obsolete')
sslTot40BitRC2CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot40BitRC2CiphersHigh.setStatus('obsolete')
sslTot56BitRC2CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot56BitRC2CiphersLow.setStatus('obsolete')
sslTot56BitRC2CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot56BitRC2CiphersHigh.setStatus('obsolete')
sslTot128BitRC2CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot128BitRC2CiphersLow.setStatus('obsolete')
sslTot128BitRC2CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot128BitRC2CiphersHigh.setStatus('obsolete')
sslTot128BitIDEACiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot128BitIDEACiphersLow.setStatus('obsolete')
sslTot128BitIDEACiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot128BitIDEACiphersHigh.setStatus('obsolete')
sslTotNULLCiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 95), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotNULLCiphersLow.setStatus('obsolete')
sslTotNULLCiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotNULLCiphersHigh.setStatus('obsolete')
sslTotMD5MacLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotMD5MacLow.setStatus('obsolete')
sslTotMD5MacHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotMD5MacHigh.setStatus('obsolete')
sslTotSHAMacLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSHAMacLow.setStatus('obsolete')
sslTotSHAMacHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSHAMacHigh.setStatus('obsolete')
sslTotOffloadBulkDESLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadBulkDESLow.setStatus('obsolete')
sslTotOffloadBulkDESHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadBulkDESHigh.setStatus('obsolete')
sslTotOffloadRSAKeyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadRSAKeyExchangesLow.setStatus('obsolete')
sslTotOffloadRSAKeyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadRSAKeyExchangesHigh.setStatus('obsolete')
sslTotOffloadDHKeyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadDHKeyExchangesLow.setStatus('obsolete')
sslTotOffloadDHKeyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 106), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadDHKeyExchangesHigh.setStatus('obsolete')
sslTotOffloadSignRSALow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 107), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadSignRSALow.setStatus('obsolete')
sslTotOffloadSignRSAHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadSignRSAHigh.setStatus('obsolete')
sslBeTotSessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 120), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessionsLow.setStatus('obsolete')
sslBeTotSessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 121), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessionsHigh.setStatus('obsolete')
sslBeTotSSLv3SessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 122), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSSLv3SessionsLow.setStatus('obsolete')
sslBeTotSSLv3SessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 123), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSSLv3SessionsHigh.setStatus('obsolete')
sslBeTotTLSv1SessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 124), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv1SessionsLow.setStatus('obsolete')
sslBeTotTLSv1SessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 125), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv1SessionsHigh.setStatus('obsolete')
sslBeExpiredSessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 126), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeExpiredSessionsLow.setStatus('obsolete')
sslBeTotExpiredSessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 127), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotExpiredSessionsHigh.setStatus('obsolete')
sslBeTotSessionMultiplexAttemptsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 128), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptsLow.setStatus('obsolete')
sslBeTotSessionMultiplexAttemptsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 129), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptsHigh.setStatus('obsolete')
sslBeTotSessionMultiplexAttemptSuccessLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 130), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptSuccessLow.setStatus('obsolete')
sslBeTotSessionMultiplexAttemptSuccessHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 131), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptSuccessHigh.setStatus('obsolete')
sslBeTotSessionMultiplexAttemptFailsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 132), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptFailsLow.setStatus('obsolete')
sslBeTotSessionMultiplexAttemptFailsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 133), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptFailsHigh.setStatus('obsolete')
sslBeMaxMultiplexedSessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 134), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeMaxMultiplexedSessionsLow.setStatus('obsolete')
sslBeMaxMultiplexedSessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 135), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeMaxMultiplexedSessionsHigh.setStatus('obsolete')
sslBeSessionsReplacedLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 136), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeSessionsReplacedLow.setStatus('obsolete')
sslBeSessionsReplacedHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 137), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeSessionsReplacedHigh.setStatus('obsolete')
sslBeTotSSLv3HandshakesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 138), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSSLv3HandshakesLow.setStatus('obsolete')
sslBeTotSSLv3HandshakesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 139), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSSLv3HandshakesHigh.setStatus('obsolete')
sslBeTotTLSv1HandshakesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 140), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv1HandshakesLow.setStatus('obsolete')
sslBeTotTLSv1HandshakesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 141), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv1HandshakesHigh.setStatus('obsolete')
sslBeTotSSLv3ClientAuthenticationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 142), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSSLv3ClientAuthenticationsLow.setStatus('obsolete')
sslBeTotSSLv3ClientAuthenticationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 143), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSSLv3ClientAuthenticationsHigh.setStatus('obsolete')
sslBeTotTLSv1ClientAuthenticationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 144), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv1ClientAuthenticationsLow.setStatus('obsolete')
sslBeTotTLSv1ClientAuthenticationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 145), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv1ClientAuthenticationsHigh.setStatus('obsolete')
sslBeTotRSA512keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 146), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSA512keyExchangesLow.setStatus('obsolete')
sslBeTotRSA512keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 147), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSA512keyExchangesHigh.setStatus('obsolete')
sslBeTotRSA1024keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 148), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSA1024keyExchangesLow.setStatus('obsolete')
sslBeTotRSA1024keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 149), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSA1024keyExchangesHigh.setStatus('obsolete')
sslBeTotRSA2048keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 150), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSA2048keyExchangesLow.setStatus('obsolete')
sslBeTotRSA2048keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 151), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSA2048keyExchangesHigh.setStatus('obsolete')
sslBeTotDH512keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 152), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDH512keyExchangesLow.setStatus('obsolete')
sslBeTotDH512keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 153), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDH512keyExchangesHigh.setStatus('obsolete')
sslBeTotDH1024keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 154), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDH1024keyExchangesLow.setStatus('obsolete')
sslBeTotDH1024keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 155), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDH1024keyExchangesHigh.setStatus('obsolete')
sslBeTotDH2048keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 156), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDH2048keyExchangesLow.setStatus('obsolete')
sslBeTotDH2048keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 157), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDH2048keyExchangesHigh.setStatus('obsolete')
sslBeTotRSAAuthorizationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 158), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSAAuthorizationsLow.setStatus('obsolete')
sslBeTotRSAAuthorizationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 159), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSAAuthorizationsHigh.setStatus('obsolete')
sslBeTotDHAuthorizationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 160), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDHAuthorizationsLow.setStatus('obsolete')
sslBeTotDHAuthorizationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 161), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDHAuthorizationsHigh.setStatus('obsolete')
sslBeTotDSSAuthorizationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 162), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDSSAuthorizationsLow.setStatus('obsolete')
sslBeTotDSSAuthorizationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 163), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDSSAuthorizationsHigh.setStatus('obsolete')
sslBeTotNULLAuthorizationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 164), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotNULLAuthorizationsLow.setStatus('obsolete')
sslBeTotNULLAuthorizationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 165), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotNULLAuthorizationsHigh.setStatus('obsolete')
sslBeTot40BitRC4CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 166), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot40BitRC4CiphersLow.setStatus('obsolete')
sslBeTot40BitRC4CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 167), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot40BitRC4CiphersHigh.setStatus('obsolete')
sslBeTot56BitRC4CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 168), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot56BitRC4CiphersLow.setStatus('obsolete')
sslBeTot56BitRC4CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 169), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot56BitRC4CiphersHigh.setStatus('obsolete')
sslBeTot64BitRC4CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 170), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot64BitRC4CiphersLow.setStatus('obsolete')
sslBeTot64BitRC4CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 171), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot64BitRC4CiphersHigh.setStatus('obsolete')
sslBeTot128BitRC4CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 172), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot128BitRC4CiphersLow.setStatus('obsolete')
sslBeTot128BitRC4CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 173), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot128BitRC4CiphersHigh.setStatus('obsolete')
sslBeTot40BitDESCiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 174), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot40BitDESCiphersLow.setStatus('obsolete')
sslBeTot40BitDESCiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 175), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot40BitDESCiphersHigh.setStatus('obsolete')
sslBeTot56BitDESCiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 176), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot56BitDESCiphersLow.setStatus('obsolete')
sslBeTot56BitDESCiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 177), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot56BitDESCiphersHigh.setStatus('obsolete')
sslBeTot168Bit3DESCiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 178), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot168Bit3DESCiphersLow.setStatus('obsolete')
sslBeTot168Bit3DESCiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 179), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot168Bit3DESCiphersHigh.setStatus('obsolete')
sslBeTot40BitRC2CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 180), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot40BitRC2CiphersLow.setStatus('obsolete')
sslBeTot40BitRC2CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 181), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot40BitRC2CiphersHigh.setStatus('obsolete')
sslBeTot56BitRC2CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 182), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot56BitRC2CiphersLow.setStatus('obsolete')
sslBeTot56BitRC2CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 183), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot56BitRC2CiphersHigh.setStatus('obsolete')
sslBeTot128BitRC2CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 184), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot128BitRC2CiphersLow.setStatus('obsolete')
sslBeTot128BitRC2CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 185), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot128BitRC2CiphersHigh.setStatus('obsolete')
sslBeTot128BitIDEACiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 186), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot128BitIDEACiphersLow.setStatus('obsolete')
sslBeTot128BitIDEACiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 187), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot128BitIDEACiphersHigh.setStatus('obsolete')
sslBeTotNULLCiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 188), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotNULLCiphersLow.setStatus('obsolete')
sslBeTotNULLCiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 189), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotNULLCiphersHigh.setStatus('obsolete')
sslBeTotMD5MacLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 190), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotMD5MacLow.setStatus('obsolete')
sslBeTotMD5MacHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 191), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotMD5MacHigh.setStatus('obsolete')
sslBeTotSHAMacLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 192), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSHAMacLow.setStatus('obsolete')
sslBeTotSHAMacHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 193), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSHAMacHigh.setStatus('obsolete')
sslTotTransactions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 200), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTransactions.setStatus('current')
sslTotSSLv2Transactions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 201), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2Transactions.setStatus('current')
sslTotSSLv3Transactions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 202), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3Transactions.setStatus('current')
sslTotTLSv1Transactions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 203), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1Transactions.setStatus('current')
sslTotSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 204), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSessions.setStatus('current')
sslTotSSLv2Sessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 205), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2Sessions.setStatus('current')
sslTotSSLv3Sessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 206), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3Sessions.setStatus('current')
sslTotTLSv1Sessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 207), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1Sessions.setStatus('current')
sslTotExpiredSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 208), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotExpiredSessions.setStatus('current')
sslTotNewSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 209), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotNewSessions.setStatus('current')
sslTotSessionHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 210), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSessionHits.setStatus('current')
sslTotSessionMiss = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 211), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSessionMiss.setStatus('current')
sslTotRenegSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 212), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRenegSessions.setStatus('current')
sslTotSSLv3RenegSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 213), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3RenegSessions.setStatus('current')
sslTotTLSv1RenegSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 214), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1RenegSessions.setStatus('current')
sslTotSSLv2Handshakes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 215), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2Handshakes.setStatus('current')
sslTotSSLv3Handshakes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 216), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3Handshakes.setStatus('current')
sslTotTLSv1Handshakes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 217), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1Handshakes.setStatus('current')
sslTotSSLv2ClientAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 218), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2ClientAuthentications.setStatus('current')
sslTotSSLv3ClientAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 219), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3ClientAuthentications.setStatus('current')
sslTotTLSv1ClientAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 220), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1ClientAuthentications.setStatus('current')
sslTotRSA512keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 221), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSA512keyExchanges.setStatus('current')
sslTotRSA1024keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 222), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSA1024keyExchanges.setStatus('current')
sslTotRSA2048keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 223), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSA2048keyExchanges.setStatus('current')
sslTotDH512keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 224), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDH512keyExchanges.setStatus('current')
sslTotDH1024keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 225), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDH1024keyExchanges.setStatus('current')
sslTotDH2048keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 226), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDH2048keyExchanges.setStatus('current')
sslTotRSAAuthorizations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 227), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSAAuthorizations.setStatus('current')
sslTotDHAuthorizations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 228), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDHAuthorizations.setStatus('current')
sslTotDSSAuthorizations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 229), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDSSAuthorizations.setStatus('current')
sslTotNULLAuthorizations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 230), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotNULLAuthorizations.setStatus('current')
sslTot40BitRC4Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 231), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot40BitRC4Ciphers.setStatus('current')
sslTot56BitRC4Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 232), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot56BitRC4Ciphers.setStatus('current')
sslTot64BitRC4Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 233), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot64BitRC4Ciphers.setStatus('current')
sslTot128BitRC4Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 234), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot128BitRC4Ciphers.setStatus('current')
sslTot40BitDESCiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 235), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot40BitDESCiphers.setStatus('current')
sslTot56BitDESCiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 236), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot56BitDESCiphers.setStatus('current')
sslTot168Bit3DESCiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 237), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot168Bit3DESCiphers.setStatus('current')
sslTot40BitRC2Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 238), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot40BitRC2Ciphers.setStatus('current')
sslTot56BitRC2Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 239), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot56BitRC2Ciphers.setStatus('current')
sslTot128BitRC2Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 240), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot128BitRC2Ciphers.setStatus('current')
sslTot128BitIDEACiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 241), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot128BitIDEACiphers.setStatus('current')
sslTotNULLCiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 242), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotNULLCiphers.setStatus('current')
sslTotMD5Mac = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 243), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotMD5Mac.setStatus('current')
sslTotSHAMac = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 244), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSHAMac.setStatus('current')
sslTotOffloadBulkDES = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 245), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadBulkDES.setStatus('current')
sslTotOffloadRSAKeyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 246), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadRSAKeyExchanges.setStatus('current')
sslTotOffloadDHKeyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 247), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadDHKeyExchanges.setStatus('current')
sslTotOffloadSignRSA = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 248), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadSignRSA.setStatus('current')
sslBeTotSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 260), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessions.setStatus('current')
sslBeTotSSLv3Sessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 261), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSSLv3Sessions.setStatus('current')
sslBeTotTLSv1Sessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 262), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv1Sessions.setStatus('current')
sslBeExpiredSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 263), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeExpiredSessions.setStatus('current')
sslBeTotSessionMultiplexAttempts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 264), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttempts.setStatus('current')
sslBeTotSessionMultiplexAttemptSuccess = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 265), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptSuccess.setStatus('current')
sslBeTotSessionMultiplexAttemptFails = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 266), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptFails.setStatus('current')
sslBeMaxMultiplexedSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 267), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeMaxMultiplexedSessions.setStatus('current')
sslBeTotSSLv3Handshakes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 268), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSSLv3Handshakes.setStatus('current')
sslBeTotTLSv1Handshakes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 269), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv1Handshakes.setStatus('current')
sslBeTotSSLv3ClientAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 270), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSSLv3ClientAuthentications.setStatus('current')
sslBeTotTLSv1ClientAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 271), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv1ClientAuthentications.setStatus('current')
sslBeTotRSA512keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 272), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSA512keyExchanges.setStatus('current')
sslBeTotRSA1024keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 273), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSA1024keyExchanges.setStatus('current')
sslBeTotRSA2048keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 274), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSA2048keyExchanges.setStatus('current')
sslBeTotDH512keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 275), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDH512keyExchanges.setStatus('current')
sslBeTotDH1024keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 276), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDH1024keyExchanges.setStatus('current')
sslBeTotDH2048keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 277), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDH2048keyExchanges.setStatus('current')
sslBeTotRSAAuthorizations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 278), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSAAuthorizations.setStatus('current')
sslBeTotDHAuthorizations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 279), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDHAuthorizations.setStatus('current')
sslBeTotDSSAuthorizations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 280), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDSSAuthorizations.setStatus('current')
sslBeTotNULLAuthorizations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 281), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotNULLAuthorizations.setStatus('current')
sslBeTot40BitRC4Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 282), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot40BitRC4Ciphers.setStatus('current')
sslBeTot56BitRC4Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 283), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot56BitRC4Ciphers.setStatus('current')
sslBeTot64BitRC4Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 284), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot64BitRC4Ciphers.setStatus('current')
sslBeTot128BitRC4Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 285), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot128BitRC4Ciphers.setStatus('current')
sslBeTot40BitDESCiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 286), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot40BitDESCiphers.setStatus('current')
sslBeTot56BitDESCiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 287), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot56BitDESCiphers.setStatus('current')
sslBeTot168Bit3DESCiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 288), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot168Bit3DESCiphers.setStatus('current')
sslBeTot40BitRC2Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 289), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot40BitRC2Ciphers.setStatus('current')
sslBeTot56BitRC2Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 290), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot56BitRC2Ciphers.setStatus('current')
sslBeTot128BitRC2Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 291), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot128BitRC2Ciphers.setStatus('current')
sslBeTot128BitIDEACiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 292), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot128BitIDEACiphers.setStatus('current')
sslBeTotNULLCiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 293), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotNULLCiphers.setStatus('current')
sslBeTotMD5Mac = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 294), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotMD5Mac.setStatus('current')
sslBeTotSHAMac = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 295), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSHAMac.setStatus('current')
sslCurSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 296), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCurSessions.setStatus('current')
sslTotOffloadBulkAES = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 297), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadBulkAES.setStatus('current')
sslTotOffloadBulkRC4 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 298), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadBulkRC4.setStatus('current')
sslNumCardsUP = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 299), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslNumCardsUP.setStatus('current')
sslCards = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 300), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCards.setStatus('current')
sslTotBkendSessionReNegotiate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 301), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotBkendSessionReNegotiate.setStatus('current')
sslTotCipherAES128 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 302), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotCipherAES128.setStatus('current')
sslTotBkendSslV3Renego = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 303), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotBkendSslV3Renego.setStatus('current')
sslTotBkendTlSvlRenego = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 304), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotBkendTlSvlRenego.setStatus('current')
sslTotCipherAES256 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 305), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotCipherAES256.setStatus('current')
sslTotBkendCipherAES128 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 306), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotBkendCipherAES128.setStatus('current')
sslTotBkendCipherAES256 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 307), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotBkendCipherAES256.setStatus('current')
sslTotHwEncBE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 308), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotHwEncBE.setStatus('current')
sslTotDec = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 309), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDec.setStatus('current')
sslTotSwEncFE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 310), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSwEncFE.setStatus('current')
sslTotEncFE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 311), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotEncFE.setStatus('current')
sslTotEnc = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 312), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotEnc.setStatus('current')
sslTotDecHw = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 313), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDecHw.setStatus('current')
sslTotSwDecBE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 314), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSwDecBE.setStatus('current')
sslTotHwDecFE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 315), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotHwDecFE.setStatus('current')
sslTotEncHw = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 316), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotEncHw.setStatus('current')
sslTotDecSw = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 317), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDecSw.setStatus('current')
sslTotSwEncBE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 318), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSwEncBE.setStatus('current')
sslTotEncSw = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 319), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotEncSw.setStatus('current')
sslTotSwDecFE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 320), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSwDecFE.setStatus('current')
sslTotEncBE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 321), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotEncBE.setStatus('current')
sslTotDecBE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 322), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDecBE.setStatus('current')
sslTotHwDecBE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 323), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotHwDecBE.setStatus('current')
sslTotDecFE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 324), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDecFE.setStatus('current')
sslTotHwEncFE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 325), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotHwEncFE.setStatus('current')
sslTotRSA4096keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 326), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSA4096keyExchanges.setStatus('current')
sslCurQSize = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 327), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCurQSize.setStatus('current')
sslChipReinitCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 328), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslChipReinitCount.setStatus('current')
sslTotECDHE224keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 329), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotECDHE224keyExchanges.setStatus('current')
sslTotECDHE256keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 330), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotECDHE256keyExchanges.setStatus('current')
sslTotECDHE384keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 331), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotECDHE384keyExchanges.setStatus('current')
sslTotECDHE521keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 332), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotECDHE521keyExchanges.setStatus('current')
sslTotTransactionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 333), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTransactionsRate.setStatus('current')
sslTotSSLv2TransactionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 334), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2TransactionsRate.setStatus('current')
sslTotSSLv3TransactionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 335), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3TransactionsRate.setStatus('current')
sslTotTLSv1TransactionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 336), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1TransactionsRate.setStatus('current')
sslBeTotEcdheCurve521 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 337), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotEcdheCurve521.setStatus('current')
sslBeTotEcdheCurve384 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 338), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotEcdheCurve384.setStatus('current')
sslBeTotEcdheCurve256 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 339), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotEcdheCurve256.setStatus('current')
sslBeTotEcdheCurve224 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 340), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotEcdheCurve224.setStatus('current')
sslTotTLSv11Handshakes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 341), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv11Handshakes.setStatus('current')
sslTotTLSv12Handshakes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 342), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv12Handshakes.setStatus('current')
sslTotTLSv11Transactions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 343), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv11Transactions.setStatus('current')
sslTotTLSv12Transactions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 344), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv12Transactions.setStatus('current')
sslTotTLSv11Sessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 345), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv11Sessions.setStatus('current')
sslTotTLSv12Sessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 346), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv12Sessions.setStatus('current')
sslTotTLSv11RenegSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 347), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv11RenegSessions.setStatus('current')
sslTotTLSv12RenegSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 348), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv12RenegSessions.setStatus('current')
sslTotTLSv11ClientAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 349), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv11ClientAuthentications.setStatus('current')
sslTotTLSv12ClientAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 350), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv12ClientAuthentications.setStatus('current')
sslTotTLSv11TransactionRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 351), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv11TransactionRate.setStatus('current')
sslTotTLSv12TransactionRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 352), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv12TransactionRate.setStatus('current')
sslTot128BitAESGCMCiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 353), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot128BitAESGCMCiphers.setStatus('current')
sslTot256BitAESGCMCiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 354), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot256BitAESGCMCiphers.setStatus('current')
sslTotOffloadBulkAESGCM128 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 355), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadBulkAESGCM128.setStatus('current')
sslTotOffloadBulkAESGCM256 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 356), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadBulkAESGCM256.setStatus('current')
sslBeTotTLSv11Sessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 357), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv11Sessions.setStatus('current')
sslBeTotTLSv12Sessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 358), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv12Sessions.setStatus('current')
sslBeTotTLSv11Handshakes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 359), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv11Handshakes.setStatus('current')
sslBeTotTLSv12Handshakes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 360), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv12Handshakes.setStatus('current')
sslBeTotTLSv11ClientAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 361), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv11ClientAuthentications.setStatus('current')
sslBeTotTLSv12ClientAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 362), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv12ClientAuthentications.setStatus('current')
sslTotBkendTlSv11Renego = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 363), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotBkendTlSv11Renego.setStatus('current')
sslTotBkendTlSv12Renego = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 364), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotBkendTlSv12Renego.setStatus('current')
sslCryptoUtilization = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 365), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCryptoUtilization.setStatus('current')
sslTotECDSAAuthorizations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 366), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotECDSAAuthorizations.setStatus('current')
nsHttpStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48))
httpTotGetsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotGetsLow.setStatus('obsolete')
httpTotGetsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotGetsHigh.setStatus('obsolete')
httpTotPostsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotPostsLow.setStatus('obsolete')
httpTotPostsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotPostsHigh.setStatus('obsolete')
httpTotOthersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotOthersLow.setStatus('obsolete')
httpTotOthersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotOthersHigh.setStatus('obsolete')
httpTotRxRequestBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotRxRequestBytesLow.setStatus('obsolete')
httpTotRxRequestBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotRxRequestBytesHigh.setStatus('obsolete')
httpTotRxResponseBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotRxResponseBytesLow.setStatus('obsolete')
httpTotRxResponseBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotRxResponseBytesHigh.setStatus('obsolete')
httpTotTxRequestBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotTxRequestBytesLow.setStatus('obsolete')
httpTotTxRequestBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotTxRequestBytesHigh.setStatus('obsolete')
httpTotTxResponseBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotTxResponseBytesLow.setStatus('obsolete')
httpTotTxResponseBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotTxResponseBytesHigh.setStatus('obsolete')
httpTotHTTP10reqLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotHTTP10reqLow.setStatus('obsolete')
httpTotHTTP10reqHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotHTTP10reqHigh.setStatus('obsolete')
httpTotResponsesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotResponsesLow.setStatus('obsolete')
httpTotResponsesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotResponsesHigh.setStatus('obsolete')
httpTot10ResponsesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTot10ResponsesLow.setStatus('obsolete')
httpTot10ResponsesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTot10ResponsesHigh.setStatus('obsolete')
httpTotClenResponsesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotClenResponsesLow.setStatus('obsolete')
httpTotClenResponsesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotClenResponsesHigh.setStatus('obsolete')
httpTotChunkedResponsesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotChunkedResponsesLow.setStatus('obsolete')
httpTotChunkedResponsesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotChunkedResponsesHigh.setStatus('obsolete')
httpErrIncompleteRequestsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrIncompleteRequestsLow.setStatus('obsolete')
httpErrIncompleteRequestsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrIncompleteRequestsHigh.setStatus('obsolete')
httpErrIncompleteResponsesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrIncompleteResponsesLow.setStatus('obsolete')
httpErrIncompleteResponsesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrIncompleteResponsesHigh.setStatus('obsolete')
httpErrPipelinedRequestsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrPipelinedRequestsLow.setStatus('obsolete')
httpErrPipelinedRequestsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrPipelinedRequestsHigh.setStatus('obsolete')
httpErrIncompleteHeadersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrIncompleteHeadersLow.setStatus('obsolete')
httpErrIncompleteHeadersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrIncompleteHeadersHigh.setStatus('obsolete')
httpErrServerBusyLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrServerBusyLow.setStatus('obsolete')
httpErrServerBusyHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrServerBusyHigh.setStatus('obsolete')
httpTotChunkedReqLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotChunkedReqLow.setStatus('obsolete')
httpTotChunkedReqHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotChunkedReqHigh.setStatus('obsolete')
httpTotClenReqLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotClenReqLow.setStatus('obsolete')
httpTotClenReqHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotClenReqHigh.setStatus('obsolete')
httpErrLargeContentLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrLargeContentLow.setStatus('obsolete')
httpErrLargeContentHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrLargeContentHigh.setStatus('obsolete')
httpErrLargeCtlenLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrLargeCtlenLow.setStatus('obsolete')
httpErrLargeCtlenHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrLargeCtlenHigh.setStatus('obsolete')
httpErrLargeChunkLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrLargeChunkLow.setStatus('obsolete')
httpErrLargeChunkHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrLargeChunkHigh.setStatus('obsolete')
httpTotGets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotGets.setStatus('current')
httpTotPosts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotPosts.setStatus('current')
httpTotOthers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotOthers.setStatus('current')
httpTotRxRequestBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotRxRequestBytes.setStatus('current')
httpTotRxResponseBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotRxResponseBytes.setStatus('current')
httpTotTxRequestBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotTxRequestBytes.setStatus('current')
httpTotTxResponseBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotTxResponseBytes.setStatus('current')
httpTot10Requests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTot10Requests.setStatus('current')
httpTotResponses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotResponses.setStatus('current')
httpTot10Responses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTot10Responses.setStatus('current')
httpTotClenResponses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotClenResponses.setStatus('current')
httpTotChunkedResponses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotChunkedResponses.setStatus('current')
httpErrIncompleteRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrIncompleteRequests.setStatus('current')
httpErrIncompleteResponses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrIncompleteResponses.setStatus('current')
httpErrPipelinedRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrPipelinedRequests.setStatus('obsolete')
httpErrIncompleteHeaders = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrIncompleteHeaders.setStatus('current')
httpErrServerBusy = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrServerBusy.setStatus('current')
httpTotChunkedRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotChunkedRequests.setStatus('current')
httpTotClenRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotClenRequests.setStatus('current')
httpErrLargeContent = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrLargeContent.setStatus('current')
httpErrLargeCtlen = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrLargeCtlen.setStatus('current')
httpErrLargeChunk = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrLargeChunk.setStatus('current')
httpTotRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotRequests.setStatus('current')
httpTot11Requests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTot11Requests.setStatus('current')
httpTot11Responses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTot11Responses.setStatus('current')
httpTotNoClenChunkResponses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotNoClenChunkResponses.setStatus('current')
httpErrNoreuseMultipart = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrNoreuseMultipart.setStatus('current')
spdy2TotStreams = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdy2TotStreams.setStatus('obsolete')
spdyTotStreams = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdyTotStreams.setStatus('current')
spdyv2TotStreams = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdyv2TotStreams.setStatus('current')
spdyv3TotStreams = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdyv3TotStreams.setStatus('current')
httpTotRequestsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 76), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotRequestsRate.setStatus('current')
httpTotResposesRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 77), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotResposesRate.setStatus('current')
nsCacheStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49))
cacheMaxMemoryKB = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMaxMemoryKB.setStatus('current')
cacheUtilizedMemoryKB = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheUtilizedMemoryKB.setStatus('current')
cacheNumCached = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheNumCached.setStatus('current')
cacheErrMemAllocLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrMemAllocLow.setStatus('obsolete')
cacheErrMemAllocHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrMemAllocHigh.setStatus('obsolete')
cacheTotRequestsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotRequestsLow.setStatus('obsolete')
cacheTotRequestsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotRequestsHigh.setStatus('obsolete')
cacheTotHitsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotHitsLow.setStatus('obsolete')
cacheTotHitsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotHitsHigh.setStatus('obsolete')
cacheTotMissesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotMissesLow.setStatus('obsolete')
cacheTotMissesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotMissesHigh.setStatus('obsolete')
cachePercentHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePercentHit.setStatus('current')
cacheRecentPercentHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheRecentPercentHit.setStatus('current')
cacheCurHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCurHits.setStatus('current')
cacheCurMisses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCurMisses.setStatus('current')
cacheTot304HitsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTot304HitsLow.setStatus('obsolete')
cacheTot304HitsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTot304HitsHigh.setStatus('obsolete')
cacheTotNon304HitsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotNon304HitsLow.setStatus('obsolete')
cacheTotNon304HitsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotNon304HitsHigh.setStatus('obsolete')
cachePercent304Hits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePercent304Hits.setStatus('current')
cacheRecentPercent304Hits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheRecentPercent304Hits.setStatus('current')
cacheTotStoreAbleMissesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotStoreAbleMissesLow.setStatus('obsolete')
cacheTotStoreAbleMissesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotStoreAbleMissesHigh.setStatus('obsolete')
cacheTotNonStoreAbleMissesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotNonStoreAbleMissesLow.setStatus('obsolete')
cacheTotNonStoreAbleMissesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotNonStoreAbleMissesHigh.setStatus('obsolete')
cachePercentStoreAbleMiss = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePercentStoreAbleMiss.setStatus('current')
cacheRecentPercentStoreAbleMiss = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheRecentPercentStoreAbleMiss.setStatus('current')
cacheTotRevalidationMissLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotRevalidationMissLow.setStatus('obsolete')
cacheTotRevalidationMissHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotRevalidationMissHigh.setStatus('obsolete')
cacheTotFullToConditionalRequestLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotFullToConditionalRequestLow.setStatus('obsolete')
cacheTotFullToConditionalRequestHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotFullToConditionalRequestHigh.setStatus('obsolete')
cacheTotSuccessfulRevalidationLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotSuccessfulRevalidationLow.setStatus('obsolete')
cacheTotSuccessfulRevalidationHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotSuccessfulRevalidationHigh.setStatus('obsolete')
cachePercentSuccessfulRevalidation = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePercentSuccessfulRevalidation.setStatus('current')
cacheRecentPercentSuccessfulRevalidation = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheRecentPercentSuccessfulRevalidation.setStatus('current')
cacheBytesServedLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBytesServedLow.setStatus('obsolete')
cacheBytesServedHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBytesServedHigh.setStatus('obsolete')
cacheCompressedBytesServedLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCompressedBytesServedLow.setStatus('obsolete')
cacheCompressedBytesServedHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCompressedBytesServedHigh.setStatus('obsolete')
cachePercentByteHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePercentByteHit.setStatus('current')
cacheRecentPercentByteHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheRecentPercentByteHit.setStatus('current')
cachePercentOriginBandwidthSaved = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePercentOriginBandwidthSaved.setStatus('current')
cacheRecentPercentOriginBandwidthSaved = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheRecentPercentOriginBandwidthSaved.setStatus('current')
cacheErrMemAlloc = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrMemAlloc.setStatus('current')
cacheTotRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotRequests.setStatus('current')
cacheTotHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotHits.setStatus('current')
cacheTotMisses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotMisses.setStatus('current')
cacheTot304Hits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTot304Hits.setStatus('current')
cacheTotNon304Hits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotNon304Hits.setStatus('current')
cacheTotStoreAbleMisses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotStoreAbleMisses.setStatus('current')
cacheTotNonStoreAbleMisses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotNonStoreAbleMisses.setStatus('current')
cacheTotRevalidationMiss = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotRevalidationMiss.setStatus('current')
cacheTotFullToConditionalRequest = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotFullToConditionalRequest.setStatus('current')
cacheTotSuccessfulRevalidation = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotSuccessfulRevalidation.setStatus('current')
cacheTotResponseBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotResponseBytes.setStatus('current')
cacheBytesServed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBytesServed.setStatus('current')
cacheCompressedBytesServed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCompressedBytesServed.setStatus('current')
cacheTotPetRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotPetRequests.setStatus('current')
cacheTotPetHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotPetHits.setStatus('current')
cachePercentPetHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePercentPetHits.setStatus('current')
cacheTotParameterizedRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotParameterizedRequests.setStatus('current')
cacheTotParameterizedHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotParameterizedHits.setStatus('current')
cacheTotParameterizedNon304Hits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotParameterizedNon304Hits.setStatus('current')
cacheTotParameterized304Hits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotParameterized304Hits.setStatus('current')
cachePercentParameterized304Hits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePercentParameterized304Hits.setStatus('current')
cacheRecentPercentParameterizedHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheRecentPercentParameterizedHits.setStatus('current')
cacheTotInvalidationRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotInvalidationRequests.setStatus('current')
cacheTotNonParameterizedInvalidationRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotNonParameterizedInvalidationRequests.setStatus('current')
cacheTotParameterizedInvalidationRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotParameterizedInvalidationRequests.setStatus('current')
cacheLargestResponseReceived = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheLargestResponseReceived.setStatus('current')
cacheTotFlashcacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotFlashcacheMisses.setStatus('current')
cacheTotFlashcacheHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotFlashcacheHits.setStatus('current')
cacheTotExpireAtLastByte = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotExpireAtLastByte.setStatus('current')
cacheNumMarker = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheNumMarker.setStatus('current')
cacheMaxMemoryActiveKB = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMaxMemoryActiveKB.setStatus('current')
cache64MaxMemoryKB = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cache64MaxMemoryKB.setStatus('current')
cacheNumObjSavedOnDisk = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheNumObjSavedOnDisk.setStatus('current')
cacheNumMBSavedOnDisk = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheNumMBSavedOnDisk.setStatus('current')
cacheNumMBReadFromDisk = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheNumMBReadFromDisk.setStatus('current')
cacheNumMBWrittenToDisk = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheNumMBWrittenToDisk.setStatus('current')
cacheTotSqlHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotSqlHits.setStatus('current')
nsCompressionStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50))
compTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTotalRequests.setStatus('current')
compTotalTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTotalTxBytes.setStatus('current')
compTotalRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTotalRxBytes.setStatus('current')
compTotalTxPackets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTotalTxPackets.setStatus('current')
compTotalRxPackets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTotalRxPackets.setStatus('current')
compRatio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compRatio.setStatus('current')
compTotalDataCompressionRatio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTotalDataCompressionRatio.setStatus('current')
compTcpTotalTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTcpTotalTxBytes.setStatus('current')
compTcpTotalRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTcpTotalRxBytes.setStatus('current')
compTcpTotalTxPackets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTcpTotalTxPackets.setStatus('current')
compTcpTotalRxPackets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTcpTotalRxPackets.setStatus('current')
compTcpTotalQuantum = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTcpTotalQuantum.setStatus('current')
compTcpTotalPush = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTcpTotalPush.setStatus('current')
compTcpTotalEoi = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTcpTotalEoi.setStatus('current')
compTcpTotalTimer = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTcpTotalTimer.setStatus('current')
compTcpRatio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTcpRatio.setStatus('current')
compTcpBandwidthSaving = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTcpBandwidthSaving.setStatus('current')
deCompTcpRxPackets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCompTcpRxPackets.setStatus('current')
deCompTcpTxPackets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCompTcpTxPackets.setStatus('current')
deCompTcpRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCompTcpRxBytes.setStatus('current')
deCompTcpTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCompTcpTxBytes.setStatus('current')
deCompTcpErrData = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCompTcpErrData.setStatus('current')
deCompTcpErrLessData = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCompTcpErrLessData.setStatus('current')
deCompTcpErrMoreData = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCompTcpErrMoreData.setStatus('current')
deCompTcpErrMemory = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCompTcpErrMemory.setStatus('current')
deCompTcpErrUnknown = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCompTcpErrUnknown.setStatus('current')
deCompTcpRatio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCompTcpRatio.setStatus('current')
deCompTcpBandwidthSaving = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCompTcpBandwidthSaving.setStatus('current')
delCompTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompTotalRequests.setStatus('current')
delCompFirstAccess = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompFirstAccess.setStatus('current')
delCompDone = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompDone.setStatus('current')
delCompTcpRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompTcpRxBytes.setStatus('current')
delCompTcpTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompTcpTxBytes.setStatus('current')
delCompTcpRxPackets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompTcpRxPackets.setStatus('current')
delCompTcpTxPackets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompTcpTxPackets.setStatus('current')
delCompBaseServed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompBaseServed.setStatus('current')
delCompBaseTcpTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompBaseTcpTxBytes.setStatus('current')
delCompErrBypassed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompErrBypassed.setStatus('current')
delCompErrBFileWHdrFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompErrBFileWHdrFailed.setStatus('current')
delCompErrNostoreMiss = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompErrNostoreMiss.setStatus('current')
delCompErrReqinfoToobig = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompErrReqinfoToobig.setStatus('current')
delCompErrReqinfoAllocfail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompErrReqinfoAllocfail.setStatus('current')
delCompErrSessallocFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompErrSessallocFail.setStatus('current')
delCmpRatio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCmpRatio.setStatus('current')
delBwSaving = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delBwSaving.setStatus('current')
compHttpBandwidthSaving = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compHttpBandwidthSaving.setStatus('current')
nsGslbGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51))
gslbGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 1))
customEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customEntries.setStatus('current')
staticEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticEntries.setStatus('current')
gslbGlobalInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2))
gslbSitesTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1), )
if mibBuilder.loadTexts: gslbSitesTable.setStatus('current')
gslbSitesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "siteName"))
if mibBuilder.loadTexts: gslbSitesEntry.setStatus('current')
siteName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteName.setStatus('current')
siteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteIp.setStatus('current')
siteType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 3), SiteType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteType.setStatus('current')
siteMetricExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 4), MetricExchange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteMetricExchange.setStatus('current')
siteMepStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 5), MepStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteMepStatus.setStatus('obsolete')
sitePublicIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sitePublicIp.setStatus('current')
siteTotalRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteTotalRequests.setStatus('current')
siteTotalRequestBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteTotalRequestBytes.setStatus('current')
siteTotalResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteTotalResponses.setStatus('current')
siteTotalResponseBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteTotalResponseBytes.setStatus('current')
siteCurSrvrConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteCurSrvrConnections.setStatus('current')
siteCurClntConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteCurClntConnections.setStatus('current')
siteMetricMepStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 13), MepStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteMetricMepStatus.setStatus('current')
nwMetricMepStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 14), MepStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwMetricMepStatus.setStatus('current')
nwMetricExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 15), MetricExchange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwMetricExchange.setStatus('current')
persExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 16), MetricExchange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: persExchange.setStatus('current')
gslbSiteInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 17), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbSiteInetAddressType.setStatus('current')
gslbSiteInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 18), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbSiteInetAddress.setStatus('current')
gslbSitePublicInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 19), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbSitePublicInetAddressType.setStatus('current')
gslbSitePublicInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 20), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbSitePublicInetAddress.setStatus('current')
gslbPoliciesTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 2), )
if mibBuilder.loadTexts: gslbPoliciesTable.setStatus('obsolete')
gslbPoliciesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "gslbPolicyName"))
if mibBuilder.loadTexts: gslbPoliciesEntry.setStatus('obsolete')
gslbPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbPolicyName.setStatus('obsolete')
totalHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalHits.setStatus('obsolete')
gslbDomainStats = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 3))
nsDomainTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 3, 1), )
if mibBuilder.loadTexts: nsDomainTable.setStatus('current')
nsDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 3, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "domainName"))
if mibBuilder.loadTexts: nsDomainEntry.setStatus('current')
domainName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 3, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainName.setStatus('current')
dnsTotalQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 3, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotalQueries.setStatus('current')
domainNameFull = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainNameFull.setStatus('current')
nsPolicyEngineGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 52))
nsPolicyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 52, 1), )
if mibBuilder.loadTexts: nsPolicyStatsTable.setStatus('current')
nsPolicyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 52, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "pengPolicyName"))
if mibBuilder.loadTexts: nsPolicyStatsEntry.setStatus('current')
pengPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 52, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pengPolicyName.setStatus('current')
pengPolicyHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 52, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pengPolicyHits.setStatus('current')
pengBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 52, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pengBytesIn.setStatus('current')
pengBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 52, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pengBytesOut.setStatus('current')
pengPolicyFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 52, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pengPolicyFullName.setStatus('current')
nsDomainNameServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53))
nsDnsServerStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1))
dnsTotQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotQueries.setStatus('current')
dnsTotAnswers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotAnswers.setStatus('current')
dnsTotArecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotArecQueries.setStatus('obsolete')
dnsTotAresponse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotAresponse.setStatus('obsolete')
dnsTotNSrecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotNSrecQueries.setStatus('obsolete')
dnsTotNSresponse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotNSresponse.setStatus('obsolete')
dnsTotMXrecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotMXrecQueries.setStatus('obsolete')
dnsTotMXresponse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotMXresponse.setStatus('obsolete')
dnsTotSOArecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotSOArecQueries.setStatus('obsolete')
dnsTotSOAresponse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotSOAresponse.setStatus('obsolete')
dnsTotCNAMErecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotCNAMErecQueries.setStatus('obsolete')
dnsTotCNAMEresponse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotCNAMEresponse.setStatus('obsolete')
dnsTotUnsupportedResponseClass = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotUnsupportedResponseClass.setStatus('current')
dnsTotUnsupportedResponseType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotUnsupportedResponseType.setStatus('current')
dnsTotUnsupportedQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotUnsupportedQueries.setStatus('current')
dnsTotUnsupportedQueryClass = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotUnsupportedQueryClass.setStatus('current')
dnsTotInvalidQueryFormat = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotInvalidQueryFormat.setStatus('current')
dnsTotNonAuthNoDatas = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotNonAuthNoDatas.setStatus('current')
dnsTotMultiQuery = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotMultiQuery.setStatus('current')
dnsTotStrayAnswer = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotStrayAnswer.setStatus('current')
dnsTotCacheFlush = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotCacheFlush.setStatus('current')
dnsTotCacheEntriesFlush = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotCacheEntriesFlush.setStatus('current')
dnsTotServerQuery = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotServerQuery.setStatus('current')
dnsTotServerResponse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotServerResponse.setStatus('current')
dnsTotArecFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotArecFailed.setStatus('obsolete')
dnsTotNSrecFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotNSrecFailed.setStatus('obsolete')
dnsTotMXrecFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotMXrecFailed.setStatus('obsolete')
dnsTotCNAMErecFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotCNAMErecFailed.setStatus('obsolete')
dnsTotArecUpdate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotArecUpdate.setStatus('obsolete')
dnsTotNSrecUpdate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotNSrecUpdate.setStatus('obsolete')
dnsTotMXrecUpdate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotMXrecUpdate.setStatus('obsolete')
dnsTotSOArecUpdate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotSOArecUpdate.setStatus('obsolete')
dnsTotCNAMErecUpdate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotCNAMErecUpdate.setStatus('obsolete')
dnsTotRecUpdate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotRecUpdate.setStatus('current')
dnsTotMultiQueryDisableError = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotMultiQueryDisableError.setStatus('current')
dnsCurArecord = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurArecord.setStatus('obsolete')
dnsCurNSrecord = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurNSrecord.setStatus('obsolete')
dnsCurMXrecord = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurMXrecord.setStatus('obsolete')
dnsCurSOArecord = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurSOArecord.setStatus('obsolete')
dnsCurCNAMErecord = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCNAMErecord.setStatus('obsolete')
dnsCurAuthEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurAuthEntries.setStatus('current')
dnsCurNoAuthEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurNoAuthEntries.setStatus('current')
dnsTotAuthAns = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotAuthAns.setStatus('current')
dnsTotAuthNoNames = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotAuthNoNames.setStatus('current')
dnsTotNoDataResps = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotNoDataResps.setStatus('current')
dnsTotResponseBadLen = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotResponseBadLen.setStatus('current')
dnsTotReqRefusals = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotReqRefusals.setStatus('current')
dnsTotOtherErrors = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotOtherErrors.setStatus('current')
dnsTotPTRrecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotPTRrecQueries.setStatus('obsolete')
dnsTotPTRresponse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotPTRresponse.setStatus('obsolete')
dnsTotPTRrecUpdate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotPTRrecUpdate.setStatus('obsolete')
dnsTotPTRrecFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotPTRrecFailed.setStatus('obsolete')
dnsCurPTRrecord = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurPTRrecord.setStatus('obsolete')
dnsTotSRVrecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotSRVrecQueries.setStatus('obsolete')
dnsTotSRVresponse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotSRVresponse.setStatus('obsolete')
dnsTotSRVrecUpdate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotSRVrecUpdate.setStatus('obsolete')
dnsTotSRVrecFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotSRVrecFailed.setStatus('obsolete')
dnsCurSRVrecord = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurSRVrecord.setStatus('obsolete')
dnsTotAAAArecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotAAAArecQueries.setStatus('obsolete')
dnsTotAAAAresponse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotAAAAresponse.setStatus('obsolete')
dnsTotAAAArecUpdate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotAAAArecUpdate.setStatus('obsolete')
dnsTotAAAArecFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotAAAArecFailed.setStatus('obsolete')
dnsCurAAAArecord = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurAAAArecord.setStatus('obsolete')
dnsTotANYqueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotANYqueries.setStatus('obsolete')
dnsTotANYresponse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotANYresponse.setStatus('obsolete')
dnsTotANYrecFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotANYrecFailed.setStatus('obsolete')
dnsTotSOArecFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotSOArecFailed.setStatus('obsolete')
dns64TotQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns64TotQueries.setStatus('current')
dns64TotAnswers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns64TotAnswers.setStatus('current')
dns64TotsvrAQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns64TotsvrAQueries.setStatus('current')
dnsErrNullAttack = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsErrNullAttack.setStatus('current')
nsdnsRegisterTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2), )
if mibBuilder.loadTexts: nsdnsRegisterTable.setStatus('current')
nsdnsRegisterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "dnsRecordType"))
if mibBuilder.loadTexts: nsdnsRegisterEntry.setStatus('current')
dnsRecordType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsRecordType.setStatus('current')
dnsTotEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotEntries.setStatus('current')
dnsTotUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotUpdates.setStatus('current')
dnsTotResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotResponses.setStatus('current')
dnsTotRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotRequests.setStatus('current')
dnsTotErrLimits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotErrLimits.setStatus('current')
dnsTotErrRespForm = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotErrRespForm.setStatus('current')
dnsTotErrAliasEx = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotErrAliasEx.setStatus('current')
dnsTotErrNoDomains = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotErrNoDomains.setStatus('current')
dnsCurEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurEntries.setStatus('current')
dnsCurRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurRecords.setStatus('current')
nsIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54), )
if mibBuilder.loadTexts: nsIfStatsTable.setStatus('current')
nsIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1), ).setIndexNames((0, "NS-ROOT-MIB", "ifName"))
if mibBuilder.loadTexts: nsIfStatsEntry.setStatus('current')
ifName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifName.setStatus('current')
ifMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMedia.setStatus('current')
ifTotRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotRxBytes.setStatus('current')
ifRxAvgBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifRxAvgBandwidthUsage.setStatus('current')
ifTotRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotRxPkts.setStatus('current')
ifRxAvgPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifRxAvgPacketRate.setStatus('current')
ifTotTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotTxBytes.setStatus('current')
ifTxAvgBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTxAvgBandwidthUsage.setStatus('current')
ifTotTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotTxPkts.setStatus('current')
ifTxAvgPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTxAvgPacketRate.setStatus('current')
ifRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifRxCRCErrors.setStatus('current')
ifRxFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifRxFrameErrors.setStatus('current')
ifRxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifRxAlignmentErrors.setStatus('current')
ifTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTxCollisions.setStatus('obsolete')
ifTxExcessCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTxExcessCollisions.setStatus('obsolete')
ifTxLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTxLateCollisions.setStatus('obsolete')
ifTxMultiCollisionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTxMultiCollisionErrors.setStatus('obsolete')
ifTxCarrierError = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTxCarrierError.setStatus('current')
ifTotRxMbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotRxMbits.setStatus('current')
ifTotTxMbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotTxMbits.setStatus('current')
ifTotNetScalerPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotNetScalerPkts.setStatus('current')
ifErrDroppedRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrDroppedRxPkts.setStatus('current')
ifErrLinkHangs = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrLinkHangs.setStatus('current')
ifLinkReinits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLinkReinits.setStatus('current')
ifErrDuplexMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrDuplexMismatch.setStatus('current')
ifErrCongestedPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrCongestedPktsDrops.setStatus('current')
ifErrCongestionLimitPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrCongestionLimitPktDrops.setStatus('current')
ifErrPktRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrPktRx.setStatus('current')
ifErrRxFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrRxFIFO.setStatus('current')
ifErrRxNoBuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrRxNoBuffs.setStatus('current')
ifErrTxNoNSB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrTxNoNSB.setStatus('obsolete')
ifErrRxFCS = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrRxFCS.setStatus('current')
ifErrPktTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrPktTx.setStatus('current')
ifErrTxFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrTxFIFO.setStatus('current')
ifErrTxHeartBeat = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrTxHeartBeat.setStatus('current')
ifErrTxOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrTxOverflow.setStatus('current')
ifErrTxDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrTxDeferred.setStatus('obsolete')
ifErrDroppedTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrDroppedTxPkts.setStatus('current')
ifTotRxXonPause = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotRxXonPause.setStatus('current')
ifTotRxXoffPause = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotRxXoffPause.setStatus('current')
ifTotXoffStateEntered = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotXoffStateEntered.setStatus('current')
ifTotXonSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotXonSent.setStatus('current')
ifTotXoffSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotXoffSent.setStatus('current')
ifnicStsStalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifnicStsStalls.setStatus('current')
ifnicTxStalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifnicTxStalls.setStatus('current')
ifnicRxStalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifnicRxStalls.setStatus('current')
ifnicErrDisables = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifnicErrDisables.setStatus('current')
ifThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifThroughput.setStatus('current')
ifMinThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMinThroughput.setStatus('current')
ifErrDroppedRxPktsRl = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrDroppedRxPktsRl.setStatus('current')
ifErrRxNoNSB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrRxNoNSB.setStatus('current')
ifInterfaceAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 52), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInterfaceAlias.setStatus('current')
nsScPolicyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55))
scPolicyStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1))
scPolicyUrlHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPolicyUrlHits.setStatus('current')
scPopUps = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPopUps.setStatus('current')
scAltContUrls = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scAltContUrls.setStatus('current')
scSessionReqs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scSessionReqs.setStatus('current')
scPostReqs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPostReqs.setStatus('current')
scThresholdFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scThresholdFail.setStatus('current')
scFaultyCookies = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scFaultyCookies.setStatus('current')
scUnSupBrow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scUnSupBrow.setStatus('current')
scResetStats = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scResetStats.setStatus('current')
scTotCondTriggered = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scTotCondTriggered.setStatus('current')
scTotReissuedRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scTotReissuedRequests.setStatus('current')
scPolicyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 2))
scPolicyConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 2, 1), )
if mibBuilder.loadTexts: scPolicyConfigTable.setStatus('current')
scPolicyConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "scPolicyName"))
if mibBuilder.loadTexts: scPolicyConfigEntry.setStatus('current')
scPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPolicyName.setStatus('current')
scPolUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPolUrl.setStatus('current')
scDelayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDelayThreshold.setStatus('current')
scMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scMaxConnections.setStatus('current')
scActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 2, 1, 1, 5), ActionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scActionType.setStatus('current')
scAlternateContentServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scAlternateContentServiceName.setStatus('current')
scRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scRuleName.setStatus('current')
scAlternateContentPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 2, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scAlternateContentPath.setStatus('current')
nsSslConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56))
sslCertKeyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 1), )
if mibBuilder.loadTexts: sslCertKeyTable.setStatus('current')
sslCertKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "sslCertKeyName"))
if mibBuilder.loadTexts: sslCertKeyEntry.setStatus('current')
sslCertKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCertKeyName.setStatus('current')
sslCertPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCertPath.setStatus('current')
sslKeyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslKeyPath.setStatus('current')
sslInputFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 1, 1, 4), InputFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslInputFormat.setStatus('current')
sslDaysToExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslDaysToExpire.setStatus('current')
sslCrlTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 2), )
if mibBuilder.loadTexts: sslCrlTable.setStatus('current')
sslCrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "sslCrlName"))
if mibBuilder.loadTexts: sslCrlEntry.setStatus('current')
sslCrlName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCrlName.setStatus('current')
sslCrlPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCrlPath.setStatus('current')
sslCrlInputFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 2, 1, 3), InputFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCrlInputFormat.setStatus('current')
sslCipherGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 3), )
if mibBuilder.loadTexts: sslCipherGroupTable.setStatus('current')
sslCipherGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 3, 1), ).setIndexNames((0, "NS-ROOT-MIB", "sslCipherGroupName"), (0, "NS-ROOT-MIB", "sslCipherName"))
if mibBuilder.loadTexts: sslCipherGroupEntry.setStatus('current')
sslCipherGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherGroupName.setStatus('current')
sslCipherName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherName.setStatus('current')
sslCipherDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDesc.setStatus('current')
nsDosPolicyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 57))
dosPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 57, 1), )
if mibBuilder.loadTexts: dosPolicyTable.setStatus('current')
dosPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 57, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "dosPolicyName"))
if mibBuilder.loadTexts: dosPolicyEntry.setStatus('current')
dosPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 57, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosPolicyName.setStatus('current')
thresholdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 57, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdValue.setStatus('current')
dosPolicyStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 57, 2))
dosTotConditionTriggered = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 57, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosTotConditionTriggered.setStatus('current')
dosTotValidCookies = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 57, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosTotValidCookies.setStatus('current')
dosTotDosPriorityClients = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 57, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosTotDosPriorityClients.setStatus('current')
dosAvgValidClients = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 57, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosAvgValidClients.setStatus('current')
dosAvgDospriClients = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 57, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosAvgDospriClients.setStatus('current')
nsExpressionTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 58), )
if mibBuilder.loadTexts: nsExpressionTable.setStatus('current')
nsExpressionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 58, 1), ).setIndexNames((0, "NS-ROOT-MIB", "expressionName"))
if mibBuilder.loadTexts: nsExpressionEntry.setStatus('current')
expressionName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 58, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressionName.setStatus('current')
expressionTotalHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 58, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressionTotalHits.setStatus('current')
nsPqPolicyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59))
pqPolicyConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 1), )
if mibBuilder.loadTexts: pqPolicyConfigTable.setStatus('current')
pqPolicyConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "pqName"))
if mibBuilder.loadTexts: pqPolicyConfigEntry.setStatus('current')
pqName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqName.setStatus('current')
pqRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqRuleName.setStatus('current')
pqQdepthThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqQdepthThreshold.setStatus('current')
pqPolQdepthThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqPolQdepthThreshold.setStatus('current')
pqPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqPriority.setStatus('current')
pqPolicyWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqPolicyWeight.setStatus('current')
pqPolicyStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 2))
pqTotalPolicyMatches = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqTotalPolicyMatches.setStatus('current')
pqTotalThresholdFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqTotalThresholdFailed.setStatus('current')
pqPriority1Requests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqPriority1Requests.setStatus('current')
pqPriority2Requests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqPriority2Requests.setStatus('current')
pqPriority3Requests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqPriority3Requests.setStatus('current')
crConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 60))
crPolicyMapConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 60, 1), )
if mibBuilder.loadTexts: crPolicyMapConfigTable.setStatus('current')
crPolicyMapConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 60, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "crMapName"))
if mibBuilder.loadTexts: crPolicyMapConfigEntry.setStatus('current')
crMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 60, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crMapName.setStatus('current')
crMapSrcName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 60, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crMapSrcName.setStatus('current')
crMapDstName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 60, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crMapDstName.setStatus('current')
crMapSrcUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 60, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crMapSrcUrl.setStatus('current')
crMapDstUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 60, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crMapDstUrl.setStatus('current')
monitorCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorCount.setStatus('current')
monitorBindCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorBindCount.setStatus('current')
htmlInjectionStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 63))
htmlInjectedBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 63, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htmlInjectedBytes.setStatus('current')
htmlInjectionSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 63, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htmlInjectionSessions.setStatus('obsolete')
htmlInjectionTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 63, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htmlInjectionTotalSessions.setStatus('obsolete')
htmlInjectMemAllocFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 63, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htmlInjectMemAllocFailed.setStatus('current')
htmlInitFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 63, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htmlInitFailed.setStatus('obsolete')
appFirewallGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64))
appFirewallStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1))
appFirewallRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallRequests.setStatus('current')
appFirewallResponses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallResponses.setStatus('current')
appFirewallAborts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallAborts.setStatus('current')
appFirewallRedirects = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallRedirects.setStatus('current')
appFirewallViolStartURL = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolStartURL.setStatus('current')
appFirewallViolDenyURL = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolDenyURL.setStatus('current')
appFirewallViolBufferOverflow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolBufferOverflow.setStatus('current')
appFirewallViolCookie = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolCookie.setStatus('current')
appFirewallViolXSS = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolXSS.setStatus('current')
appFirewallViolSQL = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolSQL.setStatus('current')
appFirewallViolFieldformat = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolFieldformat.setStatus('current')
appFirewallViolFieldConsistency = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolFieldConsistency.setStatus('current')
appFirewallViolCreditCard = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolCreditCard.setStatus('current')
appFirewallViolSafeObject = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolSafeObject.setStatus('current')
appFirewallTotalViol = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallTotalViol.setStatus('current')
appFirewallViolWellformednessViolations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolWellformednessViolations.setStatus('current')
appFirewallViolXdosViolations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolXdosViolations.setStatus('current')
appFirewallViolMsgValViolations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolMsgValViolations.setStatus('current')
appFirewallViolWSIViolations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolWSIViolations.setStatus('current')
appFirewallViolXmlSqlViolations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolXmlSqlViolations.setStatus('current')
appFirewallViolXmlXssViolations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolXmlXssViolations.setStatus('current')
appFirewallViolXmlAttachmentViolations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolXmlAttachmentViolations.setStatus('current')
appFirewallViolCSRFtag = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolCSRFtag.setStatus('current')
appFirewallViolRefererHeader = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolRefererHeader.setStatus('current')
appFirewallViolXmlSoapFaultViolations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolXmlSoapFaultViolations.setStatus('current')
appFirewallRet4xx = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallRet4xx.setStatus('current')
appFirewallRet5xx = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallRet5xx.setStatus('current')
appFirewallReqBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallReqBytes.setStatus('current')
appFirewallResBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallResBytes.setStatus('current')
appFirewallLongAvgRespTime = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallLongAvgRespTime.setStatus('current')
appFirewallShortAvgRespTime = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallShortAvgRespTime.setStatus('current')
appFirewallViolXmlGenViolations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolXmlGenViolations.setStatus('current')
appFirewallViolSignature = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolSignature.setStatus('current')
appFirewallTrapsDropped = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallTrapsDropped.setStatus('current')
appfwProfileTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2), )
if mibBuilder.loadTexts: appfwProfileTable.setStatus('current')
appfwProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "appfwprofileName"))
if mibBuilder.loadTexts: appfwProfileEntry.setStatus('current')
appfwprofileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwprofileName.setStatus('current')
appfwappFirewallRequestsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallRequestsPerProfile.setStatus('current')
appfwappFirewallResponsesPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallResponsesPerProfile.setStatus('current')
appfwappFirewallAbortsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallAbortsPerProfile.setStatus('current')
appfwappFirewallRedirectsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallRedirectsPerProfile.setStatus('current')
appfwappFirewallViolStartURLPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolStartURLPerProfile.setStatus('current')
appfwappFirewallViolDenyURLPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolDenyURLPerProfile.setStatus('current')
appfwappFirewallViolRefererHeaderPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolRefererHeaderPerProfile.setStatus('current')
appfwappFirewallViolBufferOverflowPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolBufferOverflowPerProfile.setStatus('current')
appfwappFirewallViolCSRFtagPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolCSRFtagPerProfile.setStatus('current')
appfwappFirewallViolCookiePerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolCookiePerProfile.setStatus('current')
appfwappFirewallViolXSSPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolXSSPerProfile.setStatus('current')
appfwappFirewallViolSQLPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolSQLPerProfile.setStatus('current')
appfwappFirewallViolFieldformatPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolFieldformatPerProfile.setStatus('current')
appfwappFirewallViolFieldConsistencyPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolFieldConsistencyPerProfile.setStatus('current')
appfwappFirewallViolCreditCardPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolCreditCardPerProfile.setStatus('current')
appfwappFirewallViolSafeObjectPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolSafeObjectPerProfile.setStatus('current')
appfwappFirewallViolWellformednessViolationsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolWellformednessViolationsPerProfile.setStatus('current')
appfwappFirewallViolXdosViolationsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolXdosViolationsPerProfile.setStatus('current')
appfwappFirewallViolMsgValViolationsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolMsgValViolationsPerProfile.setStatus('current')
appfwappFirewallViolWSIViolationsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolWSIViolationsPerProfile.setStatus('current')
appfwappFirewallViolXmlSqlViolationsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolXmlSqlViolationsPerProfile.setStatus('current')
appfwappFirewallViolXmlXssViolationsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolXmlXssViolationsPerProfile.setStatus('current')
appfwappFirewallViolXmlAttachmentViolationsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolXmlAttachmentViolationsPerProfile.setStatus('current')
appfwappFirewallTotalViolPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallTotalViolPerProfile.setStatus('current')
appfwappFirewallRet4xxPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallRet4xxPerProfile.setStatus('current')
appfwappFirewallRet5xxPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallRet5xxPerProfile.setStatus('current')
appfwappFirewallViolXmlSoapFaultViolationsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolXmlSoapFaultViolationsPerProfile.setStatus('current')
appfwappFirewallReqBytesPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallReqBytesPerProfile.setStatus('current')
appfwappFirewallResBytesPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallResBytesPerProfile.setStatus('current')
appfwappFirewallLongAvgRespTimePerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallLongAvgRespTimePerProfile.setStatus('current')
appfwappFirewallShortAvgRespTimePerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallShortAvgRespTimePerProfile.setStatus('current')
appfwappFirewallViolXmlGenericViolationsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolXmlGenericViolationsPerProfile.setStatus('current')
appfwappFirewallViolSignaturePerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolSignaturePerProfile.setStatus('current')
nsRnatStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65))
nsRnatGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 1))
rnatTotRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnatTotRxBytes.setStatus('current')
rnatTotTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnatTotTxBytes.setStatus('current')
rnatTotRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnatTotRxPkts.setStatus('current')
rnatTotTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnatTotTxPkts.setStatus('current')
rnatTotTxSyn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnatTotTxSyn.setStatus('current')
rnatCurSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnatCurSessions.setStatus('current')
nsRnatPerIPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 2), )
if mibBuilder.loadTexts: nsRnatPerIPStatsTable.setStatus('current')
nsRnatPerIPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "ipAddr"))
if mibBuilder.loadTexts: nsRnatPerIPStatsEntry.setStatus('current')
ipRnatTotRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRnatTotRxBytes.setStatus('current')
ipRnatTotTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRnatTotTxBytes.setStatus('current')
ipRnatTotRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRnatTotRxPkts.setStatus('current')
ipRnatTotTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRnatTotTxPkts.setStatus('current')
ipRnatTotTxSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRnatTotTxSyn.setStatus('current')
ipRnatCurSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRnatCurSessions.setStatus('current')
nsSslVpnStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66))
indexHtmlHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: indexHtmlHit.setStatus('current')
indexHtmlNoServed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: indexHtmlNoServed.setStatus('current')
cfgHtmlServed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgHtmlServed.setStatus('current')
dnsReqHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsReqHit.setStatus('current')
winsRequestHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winsRequestHit.setStatus('current')
csRequestHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRequestHit.setStatus('current')
csNonHttpProbeHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csNonHttpProbeHit.setStatus('current')
csHttpProbeHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csHttpProbeHit.setStatus('current')
totalCsConnSucc = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalCsConnSucc.setStatus('current')
totalFsRequest = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalFsRequest.setStatus('current')
iipDisabledMIPdisabled = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iipDisabledMIPdisabled.setStatus('current')
iipFailedMIPdisabled = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iipFailedMIPdisabled.setStatus('current')
iipDisabledMIPused = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iipDisabledMIPused.setStatus('current')
iipFailedMIPused = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iipFailedMIPused.setStatus('current')
socksMethReqRcvd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksMethReqRcvd.setStatus('current')
socksMethReqSent = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksMethReqSent.setStatus('current')
socksMethRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksMethRespRcvd.setStatus('current')
socksMethRespSent = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksMethRespSent.setStatus('current')
socksConnReqRcvd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksConnReqRcvd.setStatus('current')
socksConnReqSent = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksConnReqSent.setStatus('current')
socksConnRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksConnRespRcvd.setStatus('current')
socksConnRespSent = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksConnRespSent.setStatus('current')
socksServerError = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksServerError.setStatus('current')
socksClientError = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksClientError.setStatus('current')
staConnSuccess = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConnSuccess.setStatus('current')
staConnFailure = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConnFailure.setStatus('current')
cpsConnSuccess = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsConnSuccess.setStatus('current')
cpsConnFailure = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsConnFailure.setStatus('current')
staRequestSent = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRequestSent.setStatus('current')
staResponseRecvd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staResponseRecvd.setStatus('current')
icaLicenseFailure = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icaLicenseFailure.setStatus('current')
staRenewSent = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRenewSent.setStatus('current')
staRenewRecvd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRenewRecvd.setStatus('current')
staReassErr = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staReassErr.setStatus('current')
staRnewNoClnt = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRnewNoClnt.setStatus('current')
staRenewNoRfsh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRenewNoRfsh.setStatus('current')
staValidNoClnt = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staValidNoClnt.setStatus('current')
staValidNoEst = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staValidNoEst.setStatus('current')
staMonSent = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staMonSent.setStatus('current')
staMonRcvd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staMonRcvd.setStatus('current')
staMonSucc = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staMonSucc.setStatus('current')
staMonFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staMonFail.setStatus('current')
iipSpilloverMIPused = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iipSpilloverMIPused.setStatus('current')
iPv6tov4FindIPv6MapErr = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPv6tov4FindIPv6MapErr.setStatus('current')
iPv6toV4MapInsertErr = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPv6toV4MapInsertErr.setStatus('current')
parseIPv6AddressErr = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parseIPv6AddressErr.setStatus('current')
dtlsStaValidation = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtlsStaValidation.setStatus('current')
dtlsStaValidationError = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtlsStaValidationError.setStatus('current')
dtlsStaReconnectTktReq = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtlsStaReconnectTktReq.setStatus('current')
dtlsStaPostResponseSuccess = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtlsStaPostResponseSuccess.setStatus('current')
dtlsStaPostResponseError = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtlsStaPostResponseError.setStatus('current')
nsAaaStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67))
aaaAuthFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaAuthFail.setStatus('current')
aaaAuthSuccess = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaAuthSuccess.setStatus('current')
aaaAuthNonHttpFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaAuthNonHttpFail.setStatus('current')
aaaAuthOnlyHttpFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaAuthOnlyHttpFail.setStatus('current')
aaaAuthNonHttpSuccess = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaAuthNonHttpSuccess.setStatus('current')
aaaAuthOnlyHttpSuccess = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaAuthOnlyHttpSuccess.setStatus('current')
aaaTotSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaTotSessions.setStatus('current')
aaaTotSessionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaTotSessionTimeout.setStatus('current')
aaaCurSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaCurSessions.setStatus('current')
aaaCurICASessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaCurICASessions.setStatus('current')
aaaCurTMSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaCurTMSessions.setStatus('current')
aaaTotTMSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaTotTMSessions.setStatus('current')
aaaCurICAOnlyConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaCurICAOnlyConn.setStatus('current')
aaaCurICAConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaCurICAConn.setStatus('current')
nsGlobalConfigSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 68))
webServerHttpPorts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 68, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerHttpPorts.setStatus('current')
maxTcpConnections = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 68, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxTcpConnections.setStatus('current')
maxReqPerConnection = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 68, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxReqPerConnection.setStatus('current')
cipInsertionStatus = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 68, 4), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipInsertionStatus.setStatus('current')
cipInsertionHeader = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 68, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipInsertionHeader.setStatus('current')
cookieVersionInserted = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 68, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cookieVersionInserted.setStatus('current')
minPathMTU = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 68, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minPathMTU.setStatus('current')
mtuEntryTimeoutValue = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 68, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtuEntryTimeoutValue.setStatus('current')
ftpPortRange = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 68, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpPortRange.setStatus('current')
nsPolicyInfrastructureGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 69))
piPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 69, 1), )
if mibBuilder.loadTexts: piPolicyTable.setStatus('current')
piPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 69, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "piPolName"))
if mibBuilder.loadTexts: piPolicyEntry.setStatus('current')
piPolName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 69, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piPolName.setStatus('current')
piPolicyHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 69, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piPolicyHits.setStatus('current')
piPolicyUndefHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 69, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piPolicyUndefHits.setStatus('current')
piPolFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 69, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piPolFullName.setStatus('current')
nsInetAddressTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 70), )
if mibBuilder.loadTexts: nsInetAddressTable.setStatus('current')
nsInetAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 70, 1), ).setIndexNames((0, "NS-ROOT-MIB", "nsInetAddressType"), (0, "NS-ROOT-MIB", "nsInetAddress"))
if mibBuilder.loadTexts: nsInetAddressEntry.setStatus('current')
nsInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 70, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsInetAddressType.setStatus('current')
nsInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 70, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsInetAddress.setStatus('current')
nsInetMaskLenth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 70, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsInetMaskLenth.setStatus('current')
nsInetType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 70, 1, 4), IpAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsInetType.setStatus('current')
nsInetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 70, 1, 5), IpAddressMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsInetMode.setStatus('current')
nsInetFreePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 70, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsInetFreePorts.setStatus('current')
nsInetVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 70, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsInetVlan.setStatus('current')
nsInetBridgeGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 70, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsInetBridgeGroup.setStatus('current')
nsInetVxlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 70, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsInetVxlan.setStatus('current')
nsNicStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 71))
allNicTotRxMbits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 71, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allNicTotRxMbits.setStatus('current')
allNicTotTxMbits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 71, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allNicTotTxMbits.setStatus('current')
clusterTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72), )
if mibBuilder.loadTexts: clusterTable.setStatus('current')
clusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72, 1), ).setIndexNames((0, "NS-ROOT-MIB", "clnodeID"))
if mibBuilder.loadTexts: clusterEntry.setStatus('current')
clnodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnodeID.setStatus('current')
clPeerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clPeerIP.setStatus('current')
clNodeIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72, 1, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clNodeIP.setStatus('current')
clAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72, 1, 4), ClusterAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clAdminState.setStatus('current')
clMasterState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72, 1, 5), ClusterMasterState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMasterState.setStatus('current')
clNodeHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72, 1, 6), ClusterCurHealth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clNodeHealth.setStatus('current')
clNodeEffectiveHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72, 1, 7), ClusterEffHealth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clNodeEffectiveHealth.setStatus('current')
clSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72, 1, 8), ClusterSyncState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clSyncState.setStatus('current')
clNodeViewQuorum = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72, 1, 9), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clNodeViewQuorum.setStatus('current')
clNodeHealthReason = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72, 1, 10), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clNodeHealthReason.setStatus('current')
nsClusterStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 73))
clViewLeader = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 73, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clViewLeader.setStatus('current')
nsInatStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74))
nsInatGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 1))
nat46TotTcp46 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat46TotTcp46.setStatus('current')
nat46TotUdp46 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat46TotUdp46.setStatus('current')
nat46TotIcmp46 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat46TotIcmp46.setStatus('current')
nat46TotDrop46 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat46TotDrop46.setStatus('current')
nat46TotTcp64 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat46TotTcp64.setStatus('current')
nat46TotUdp64 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat46TotUdp64.setStatus('current')
nat46TotIcmp64 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat46TotIcmp64.setStatus('current')
nat46TotDrop64 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat46TotDrop64.setStatus('current')
nsInatPerNat46StatsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 2), )
if mibBuilder.loadTexts: nsInatPerNat46StatsTable.setStatus('current')
nsInatPerNat46StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "inatname"))
if mibBuilder.loadTexts: nsInatPerNat46StatsEntry.setStatus('current')
inatname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatname.setStatus('current')
inatNat46Tcp46 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatNat46Tcp46.setStatus('current')
inatNat46Udp46 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatNat46Udp46.setStatus('current')
inatNat46Icmp46 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatNat46Icmp46.setStatus('current')
inatNat46Drop46 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatNat46Drop46.setStatus('current')
inatNat46Tcp64 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatNat46Tcp64.setStatus('current')
inatNat46Udp64 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatNat46Udp64.setStatus('current')
inatNat46Icmp64 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatNat46Icmp64.setStatus('current')
inatNat46Drop64 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatNat46Drop64.setStatus('current')
nsInatPerNatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 3), )
if mibBuilder.loadTexts: nsInatPerNatStatsTable.setStatus('current')
nsInatPerNatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 3, 1), ).setIndexNames((0, "NS-ROOT-MIB", "inat44name"))
if mibBuilder.loadTexts: nsInatPerNatStatsEntry.setStatus('current')
inat44name = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inat44name.setStatus('current')
inatTotHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatTotHits.setStatus('current')
inatCurSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatCurSessions.setStatus('current')
inatTotReceiveBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatTotReceiveBytes.setStatus('current')
inatTotSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatTotSentBytes.setStatus('current')
inatTotpktreceived = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatTotpktreceived.setStatus('current')
inatTotpktsent = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatTotpktsent.setStatus('current')
nsNat64StatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 75))
nsNat64GlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 75, 1))
nat64TotUdpSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 75, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat64TotUdpSessions.setStatus('current')
nat64TotTcpSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 75, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat64TotTcpSessions.setStatus('current')
nat64TotSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 75, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat64TotSessions.setStatus('current')
nat64TotIcmpSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 75, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat64TotIcmpSessions.setStatus('current')
nsIp6StatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76))
ipv6TotRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotRxPkts.setStatus('current')
ipv6TotTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotTxPkts.setStatus('current')
ipv6TotRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotRxBytes.setStatus('current')
ipv6TotTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotTxBytes.setStatus('current')
ipv6FragTotRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6FragTotRxPkts.setStatus('current')
ipv6FragTotPktsForward = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6FragTotPktsForward.setStatus('current')
ipv6FragTotPktsProcessNoReass = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6FragTotPktsProcessNoReass.setStatus('current')
ipv6ErrHdr = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ErrHdr.setStatus('current')
ipv6LandAttack = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6LandAttack.setStatus('current')
ipv6FragZeroLenPkt = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6FragZeroLenPkt.setStatus('current')
ipv6TotIcmpFragPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotIcmpFragPkts.setStatus('current')
ipv6TotLookupDone = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotLookupDone.setStatus('current')
ipv6TotLookupFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotLookupFailed.setStatus('current')
ipv6TotStaticRoutes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotStaticRoutes.setStatus('current')
ipv6TotDynamicRoutes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotDynamicRoutes.setStatus('current')
ipv6TotNeigborDiscovered = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotNeigborDiscovered.setStatus('current')
ipv6TotIpv6To4Conversions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotIpv6To4Conversions.setStatus('current')
ipv6TotIpv4To6Conversions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotIpv4To6Conversions.setStatus('current')
ipv6TotTcpConnection = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotTcpConnection.setStatus('current')
ipv6TotNonTcpConnection = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotNonTcpConnection.setStatus('current')
nsTdInetAddressTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77), )
if mibBuilder.loadTexts: nsTdInetAddressTable.setStatus('current')
nsTdInetAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77, 1), ).setIndexNames((0, "NS-ROOT-MIB", "nsTdInetId"), (0, "NS-ROOT-MIB", "nsTdInetAddressType"), (0, "NS-ROOT-MIB", "nsTdInetAddress"))
if mibBuilder.loadTexts: nsTdInetAddressEntry.setStatus('current')
nsTdInetId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTdInetId.setStatus('current')
nsTdInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTdInetAddressType.setStatus('current')
nsTdInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTdInetAddress.setStatus('current')
nsTdInetMaskLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTdInetMaskLength.setStatus('current')
nsTdInetType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77, 1, 5), IpAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTdInetType.setStatus('current')
nsTdInetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77, 1, 6), IpAddressMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTdInetMode.setStatus('current')
nsTdInetFreePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTdInetFreePorts.setStatus('current')
nsTdInetVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTdInetVlan.setStatus('current')
nsTdInetBridgeGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTdInetBridgeGroup.setStatus('current')
nsTdInetVxlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTdInetVxlan.setStatus('current')
nsCaStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78))
caTotaudio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTotaudio.setStatus('current')
caTotgetobjreq = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTotgetobjreq.setStatus('current')
caTotlookuphit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTotlookuphit.setStatus('current')
caTotlookupnostoremiss = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTotlookupnostoremiss.setStatus('current')
caTotRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTotRequests.setStatus('current')
caTotlookupstoremiss = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTotlookupstoremiss.setStatus('current')
caTotobjstored = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTotobjstored.setStatus('current')
caTotvideo = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTotvideo.setStatus('current')
caTotother = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTotother.setStatus('current')
caTotputobjreq = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTotputobjreq.setStatus('current')
caTotrespbytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTotrespbytes.setStatus('current')
caMsftSmthStrmVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMsftSmthStrmVid.setStatus('current')
cacMsftSmthStrmVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacMsftSmthStrmVid.setStatus('current')
caMsftSmthStrmVidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMsftSmthStrmVidBytes.setStatus('current')
caMicrosoftSmoothStreamingVidCacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMicrosoftSmoothStreamingVidCacheBytes.setStatus('current')
caMsftSmthStrVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMsftSmthStrVid.setStatus('current')
cacMsftSmthStrmPlVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacMsftSmthStrmPlVid.setStatus('current')
caMsftSmthStrmPlVidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMsftSmthStrmPlVidBytes.setStatus('current')
caMicrosoftSmoothStreamingPlaylistVidcacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMicrosoftSmoothStreamingPlaylistVidcacheBytes.setStatus('current')
cacApleLiveStrmngVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacApleLiveStrmngVid.setStatus('current')
cacAppleLiveStreamingVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacAppleLiveStreamingVid.setStatus('current')
caAppleLiveStreamingVidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAppleLiveStreamingVidBytes.setStatus('current')
caAppleLiveStreamingVidcacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAppleLiveStreamingVidcacheBytes.setStatus('current')
cacAppleLiveStrmngVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacAppleLiveStrmngVid.setStatus('current')
cacAppleLiveStreamingPlaylistVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacAppleLiveStreamingPlaylistVid.setStatus('current')
caAppleLiveStreamingPlaylistVidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAppleLiveStreamingPlaylistVidBytes.setStatus('current')
caAppleLiveStreamingPlaylistVidcacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAppleLiveStreamingPlaylistVidcacheBytes.setStatus('current')
caADTSaudio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caADTSaudio.setStatus('current')
cacADTSaudio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacADTSaudio.setStatus('current')
caADTSaudioBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caADTSaudioBytes.setStatus('current')
caADTSaudiocacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caADTSaudiocacheBytes.setStatus('current')
caAACaudio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAACaudio.setStatus('current')
cacAACaudio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacAACaudio.setStatus('current')
caAACaudiobytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAACaudiobytes.setStatus('current')
caAACaudiocachebytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAACaudiocachebytes.setStatus('current')
caFLVVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caFLVVid.setStatus('current')
cacFLVVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacFLVVid.setStatus('current')
caFLVVidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caFLVVidBytes.setStatus('current')
caFLVVidcacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caFLVVidcacheBytes.setStatus('current')
caMP4Vid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMP4Vid.setStatus('current')
cacMP4Vid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacMP4Vid.setStatus('current')
caMP4VidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMP4VidBytes.setStatus('current')
caMP4VidcacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMP4VidcacheBytes.setStatus('current')
ca3PVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ca3PVid.setStatus('current')
ca3GPVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ca3GPVid.setStatus('current')
ca3GPVidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ca3GPVidBytes.setStatus('current')
ca3GPVidcacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ca3GPVidcacheBytes.setStatus('current')
caMsftSmthStrmVidHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMsftSmthStrmVidHR.setStatus('current')
cacMsftSmthStrmPlVidHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacMsftSmthStrmPlVidHR.setStatus('current')
cacAppleLiveStreamingVidHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacAppleLiveStreamingVidHR.setStatus('current')
cacAppleLiveStreamingPlaylistVidHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacAppleLiveStreamingPlaylistVidHR.setStatus('current')
cacADTSaudioHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacADTSaudioHR.setStatus('current')
cacAACaudioHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacAACaudioHR.setStatus('current')
cacFLVVidHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacFLVVidHR.setStatus('current')
cacMP4VidHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacMP4VidHR.setStatus('current')
ca3GPVidHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ca3GPVidHR.setStatus('current')
caMsftSmthStrmngVidCaBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMsftSmthStrmngVidCaBytesHR.setStatus('current')
caMsftSmthStrmngPlVidcaBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMsftSmthStrmngPlVidcaBytesHR.setStatus('current')
caAppleLiveStrmngVidcacheBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAppleLiveStrmngVidcacheBytesHR.setStatus('current')
caApleLiveStrmngPlVidcacheBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caApleLiveStrmngPlVidcacheBytesHR.setStatus('current')
caADTSaudiocacheBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caADTSaudiocacheBytesHR.setStatus('current')
caAACaudiocachebytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAACaudiocachebytesHR.setStatus('current')
caFLVVidcacheBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caFLVVidcacheBytesHR.setStatus('current')
caMP4VidcacheBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMP4VidcacheBytesHR.setStatus('current')
ca3GPVidcacheBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ca3GPVidcacheBytesHR.setStatus('current')
caAndroid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAndroid.setStatus('current')
caLaptopDesktp = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caLaptopDesktp.setStatus('current')
caIos = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caIos.setStatus('current')
caOther = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caOther.setStatus('current')
caUnidentified = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caUnidentified.setStatus('current')
caAndroidcache = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAndroidcache.setStatus('current')
caIoscache = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caIoscache.setStatus('current')
caOthercache = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caOthercache.setStatus('current')
calaptopDesktpcache = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calaptopDesktpcache.setStatus('current')
caUnidentifiedcache = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caUnidentifiedcache.setStatus('current')
caAndroidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAndroidBytes.setStatus('current')
caIosBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caIosBytes.setStatus('current')
caOtherBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caOtherBytes.setStatus('current')
caAlptopDsktpBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAlptopDsktpBytes.setStatus('current')
caUnidentifiedBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caUnidentifiedBytes.setStatus('current')
caAndroididcacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAndroididcacheBytes.setStatus('current')
caIosidcacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caIosidcacheBytes.setStatus('current')
caOtherididcacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caOtherididcacheBytes.setStatus('current')
caLaptpdektpBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caLaptpdektpBytes.setStatus('current')
caAunindentifiedBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAunindentifiedBytes.setStatus('current')
caAndroidHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 86), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAndroidHR.setStatus('current')
calaptopDesktpHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 87), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calaptopDesktpHR.setStatus('current')
caotherHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 88), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caotherHR.setStatus('current')
caIosHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 89), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caIosHR.setStatus('current')
caUnidentifiedHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 90), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caUnidentifiedHR.setStatus('current')
caAndroidBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 91), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAndroidBytesHR.setStatus('current')
caLaptpdsktpBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 92), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caLaptpdsktpBytesHR.setStatus('current')
caotherBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 93), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caotherBytesHR.setStatus('current')
caiosBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 94), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caiosBytesHR.setStatus('current')
caAunindentifiedBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 95), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAunindentifiedBytesHR.setStatus('current')
nsvPathStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 79))
vPathTotL2DataRx = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 79, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPathTotL2DataRx.setStatus('current')
vPathTotL3DataRx = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 79, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPathTotL3DataRx.setStatus('current')
vPathTotL2CntrlPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 79, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPathTotL2CntrlPkts.setStatus('current')
vPathTotL3CntrlPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 79, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPathTotL3CntrlPkts.setStatus('current')
vPathTotFragPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 79, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPathTotFragPkts.setStatus('current')
vPathTotL2EncapPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 79, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPathTotL2EncapPkts.setStatus('current')
vPathTotL3EncapPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 79, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPathTotL3EncapPkts.setStatus('current')
vPathTotFragEncapPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 79, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPathTotFragEncapPkts.setStatus('current')
vPathTotOffload = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 79, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPathTotOffload.setStatus('current')
nsLLDPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80))
nsLLDPConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 1))
lldpMessageTxInterval = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMessageTxInterval.setStatus('current')
lldpMessageTxHoldMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMessageTxHoldMultiplier.setStatus('current')
nsLLDPStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2))
nsLLDPStatsTxPortTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 1), )
if mibBuilder.loadTexts: nsLLDPStatsTxPortTable.setStatus('current')
nsLLDPStatsTxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "lldpStatsTxPortNum"))
if mibBuilder.loadTexts: nsLLDPStatsTxPortEntry.setStatus('current')
lldpStatsTxPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsTxPortNum.setStatus('current')
lldpStatsTxPortFramesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsTxPortFramesTotal.setStatus('current')
nsLLDPStatsRxPortTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 2), )
if mibBuilder.loadTexts: nsLLDPStatsRxPortTable.setStatus('current')
nsLLDPStatsRxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "lldpStatsRxPortNum"))
if mibBuilder.loadTexts: nsLLDPStatsRxPortEntry.setStatus('current')
lldpStatsRxPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortNum.setStatus('current')
lldpStatsRxPortTLVsDiscardedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortTLVsDiscardedTotal.setStatus('current')
lldpStatsRxPortFramesErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortFramesErrors.setStatus('current')
lldpStatsRxPortFramesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortFramesTotal.setStatus('current')
lldpStatsRxPortTLVsUnrecognizedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortTLVsUnrecognizedTotal.setStatus('current')
lldpStatsRemTablesLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRemTablesLastChangeTime.setStatus('current')
lldpStatsRemTablesInserts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRemTablesInserts.setStatus('current')
lldpStatsRemTablesDeletes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRemTablesDeletes.setStatus('current')
lldpStatsRemTablesAgeouts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRemTablesAgeouts.setStatus('current')
nsLLDPLocSystemsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3))
nsLLDPLocPortTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 1), )
if mibBuilder.loadTexts: nsLLDPLocPortTable.setStatus('current')
nsLLDPLocPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "lldpLocPortNum"))
if mibBuilder.loadTexts: nsLLDPLocPortEntry.setStatus('current')
lldpLocPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocPortNum.setStatus('current')
lldpLocPortIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocPortIdSubtype.setStatus('current')
lldpLocPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocPortId.setStatus('current')
nsLLDPLocManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 2), )
if mibBuilder.loadTexts: nsLLDPLocManAddrTable.setStatus('current')
nsLLDPLocManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "lldpLocManAddrSubtype"))
if mibBuilder.loadTexts: nsLLDPLocManAddrEntry.setStatus('current')
lldpLocManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocManAddrSubtype.setStatus('current')
lldpLocManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocManAddr.setStatus('current')
lldpLocManAddrIfSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocManAddrIfSubtype.setStatus('current')
lldpLocManAddrIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocManAddrIfId.setStatus('current')
lldpLocManAddrOID = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocManAddrOID.setStatus('current')
lldpLocChassisIdSubtype = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocChassisIdSubtype.setStatus('current')
lldpLocChassisId = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocChassisId.setStatus('current')
lldpLocSysName = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocSysName.setStatus('current')
lldpLocSysDesc = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocSysDesc.setStatus('current')
lldpLocSysCapSupported = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocSysCapSupported.setStatus('current')
lldpLocSysCapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocSysCapEnabled.setStatus('current')
nsLLDPRemSystemsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4))
nsLLDPRemTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1), )
if mibBuilder.loadTexts: nsLLDPRemTable.setStatus('current')
nsLLDPRemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "lldpRemLocalPortNum"))
if mibBuilder.loadTexts: nsLLDPRemEntry.setStatus('current')
lldpRemTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemTimeMark.setStatus('current')
lldpRemLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemLocalPortNum.setStatus('current')
lldpRemChassisIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemChassisIdSubtype.setStatus('current')
lldpRemChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemChassisId.setStatus('current')
lldpRemPortIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemPortIdSubtype.setStatus('current')
lldpRemPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemPortId.setStatus('current')
lldpRemPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemPortDesc.setStatus('current')
lldpRemSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemSysName.setStatus('current')
lldpRemSysDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemSysDesc.setStatus('current')
lldpRemSysCapSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemSysCapSupported.setStatus('current')
lldpRemSysCapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemSysCapEnabled.setStatus('current')
nsLLDPRemManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 2), )
if mibBuilder.loadTexts: nsLLDPRemManAddrTable.setStatus('current')
nsLLDPRemManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "lldpRemLocalPortNum"), (0, "NS-ROOT-MIB", "lldpRemManAddr"))
if mibBuilder.loadTexts: nsLLDPRemManAddrEntry.setStatus('current')
lldpRemManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManAddrSubtype.setStatus('current')
lldpRemManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManAddr.setStatus('current')
lldpRemManAddrIfSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManAddrIfSubtype.setStatus('current')
lldpRemManAddrIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManAddrIfId.setStatus('current')
lldpRemManAddrOID = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManAddrOID.setStatus('current')
vxlanTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 81), )
if mibBuilder.loadTexts: vxlanTable.setStatus('current')
vxlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 81, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vxlanVNId"))
if mibBuilder.loadTexts: vxlanEntry.setStatus('current')
vxlanVNId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 81, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxlanVNId.setStatus('current')
vxlanTotRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 81, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxlanTotRxPkts.setStatus('current')
vxlanTotRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 81, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxlanTotRxBytes.setStatus('current')
vxlanTotTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 81, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxlanTotTxPkts.setStatus('current')
vxlanTotTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 81, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxlanTotTxBytes.setStatus('current')
cacheGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 82), )
if mibBuilder.loadTexts: cacheGroupTable.setStatus('current')
cacheGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 82, 1), ).setIndexNames((0, "NS-ROOT-MIB", "cachegroupName"))
if mibBuilder.loadTexts: cacheGroupEntry.setStatus('current')
cachegroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 82, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachegroupName.setStatus('current')
groupnon304hit = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 82, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupnon304hit.setStatus('current')
group304hit = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 82, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: group304hit.setStatus('current')
totcell = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 82, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totcell.setStatus('current')
totmarkercell = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 82, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totmarkercell.setStatus('current')
timesflushed = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 82, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timesflushed.setStatus('current')
totmemory = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 82, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totmemory.setStatus('current')
maxmemory = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 82, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxmemory.setStatus('current')
nsLsnStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83))
nsLsnGlobalStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1))
lsnTotRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotRxPkts.setStatus('current')
lsnTotRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotRxBytes.setStatus('current')
lsnTotTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotTxPkts.setStatus('current')
lsnTotTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotTxBytes.setStatus('current')
lsnCurSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnCurSessions.setStatus('current')
lsnCurSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnCurSubscribers.setStatus('current')
lsnTotTcpRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotTcpRxPkts.setStatus('current')
lsnTotTcpTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotTcpTxPkts.setStatus('current')
lsnTotUdpRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotUdpRxPkts.setStatus('current')
lsnTotUdpTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotUdpTxPkts.setStatus('current')
lsnTotIcmpRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotIcmpRxPkts.setStatus('current')
lsnTotIcmpTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotIcmpTxPkts.setStatus('current')
lsnTotTcpRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotTcpRxBytes.setStatus('current')
lsnTotTcpTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotTcpTxBytes.setStatus('current')
lsnTotUdpRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotUdpRxBytes.setStatus('current')
lsnTotUdpTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotUdpTxBytes.setStatus('current')
lsnTotIcmpRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotIcmpRxBytes.setStatus('current')
lsnTotIcmpTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotIcmpTxBytes.setStatus('current')
lsnTotDrpPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotDrpPkts.setStatus('current')
lsnTotTcpDrpPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotTcpDrpPkts.setStatus('current')
lsnTotUdpDrpPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotUdpDrpPkts.setStatus('current')
lsnTotIcmpDrpPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotIcmpDrpPkts.setStatus('current')
lsnCurTcpSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnCurTcpSessions.setStatus('current')
lsnCurUdpSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnCurUdpSessions.setStatus('current')
lsnCurIcmpSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnCurIcmpSessions.setStatus('current')
lsnSessionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnSessionsRate.setStatus('current')
lsnTcpSessionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTcpSessionsRate.setStatus('current')
lsnUdpSessionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnUdpSessionsRate.setStatus('current')
lsnIcmpSessionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnIcmpSessionsRate.setStatus('current')
nsLsnGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2), )
if mibBuilder.loadTexts: nsLsnGroupTable.setStatus('current')
nsLsnGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "lsnGrpName"))
if mibBuilder.loadTexts: nsLsnGroupEntry.setStatus('current')
lsnGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpName.setStatus('current')
lsnGrpTotTranslPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotTranslPkts.setStatus('current')
lsnGrpTotTranslBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotTranslBytes.setStatus('current')
lsnGrpCurSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpCurSessions.setStatus('current')
lsnGrpCurSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpCurSubscribers.setStatus('current')
lsnGrpTotTcpTranslPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotTcpTranslPkts.setStatus('current')
lsnGrpTotUdpTranslPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotUdpTranslPkts.setStatus('current')
lsnGrpTotIcmpTranslPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotIcmpTranslPkts.setStatus('current')
lsnGrpTotTcpTranslBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotTcpTranslBytes.setStatus('current')
lsnGrpTotUdpTranslBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotUdpTranslBytes.setStatus('current')
lsnGrpTotIcmpTranslBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotIcmpTranslBytes.setStatus('current')
lsnGrpTotTcpDrpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotTcpDrpPkts.setStatus('current')
lsnGrpTotUdpDrpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotUdpDrpPkts.setStatus('current')
lsnGrpTotIcmpDrpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotIcmpDrpPkts.setStatus('current')
lsnGrpTotTcpDrpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotTcpDrpBytes.setStatus('current')
lsnGrpTotUdpDrpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotUdpDrpBytes.setStatus('current')
lsnGrpTotIcmpDrpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotIcmpDrpBytes.setStatus('current')
lsnGrpCurTcpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpCurTcpSessions.setStatus('current')
lsnGrpCurUdpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpCurUdpSessions.setStatus('current')
lsnGrpCurIcmpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpCurIcmpSessions.setStatus('current')
lsnGrpSessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpSessRate.setStatus('current')
lsnGrpTcpSessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTcpSessRate.setStatus('current')
lsnGrpUdpSessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpUdpSessRate.setStatus('current')
lsnGrpIcmpSessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpIcmpSessRate.setStatus('current')
nsPPTPStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3))
pptpCurCtrlSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpCurCtrlSessions.setStatus('current')
pptpTotCtrlSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpTotCtrlSessions.setStatus('current')
pptpTotGRESessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpTotGRESessions.setStatus('current')
pptpCurGRESessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpCurGRESessions.setStatus('current')
pptpStrtCtrlConnReply = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpStrtCtrlConnReply.setStatus('current')
pptpStpCtrlConnReply = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpStpCtrlConnReply.setStatus('current')
pptpOutCallReply = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpOutCallReply.setStatus('current')
pptpCtlErrNoCallidMap = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpCtlErrNoCallidMap.setStatus('current')
pptpInCallReq = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpInCallReq.setStatus('current')
pptpInCallConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpInCallConn.setStatus('current')
pptpCallDisNotify = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpCallDisNotify.setStatus('current')
pptpWanErrNotify = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpWanErrNotify.setStatus('current')
pptpSetLinkInfo = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpSetLinkInfo.setStatus('current')
pptpEchoReq = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpEchoReq.setStatus('current')
pptpEchoRep = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpEchoRep.setStatus('current')
pptpStrtCtrlConnReq = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpStrtCtrlConnReq.setStatus('current')
pptpStpCtrlConnReq = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpStpCtrlConnReq.setStatus('current')
pptpOutCallReq = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpOutCallReq.setStatus('current')
pptpInCallRep = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpInCallRep.setStatus('current')
pptpCallClrReq = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpCallClrReq.setStatus('current')
pptpCntlOcreq = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpCntlOcreq.setStatus('current')
pptpCntlIcreq = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpCntlIcreq.setStatus('current')
nsLsnDSLiteGlobalStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 4))
lsnTotDSLiteRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotDSLiteRxPkts.setStatus('current')
lsnTotDSLiteRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotDSLiteRxBytes.setStatus('current')
lsnTotDSLiteTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotDSLiteTxPkts.setStatus('current')
lsnTotDSLiteTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 4, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotDSLiteTxBytes.setStatus('current')
lsnCurDSLiteSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 4, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnCurDSLiteSessions.setStatus('current')
lsnDSLiteCurSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 4, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnDSLiteCurSubscribers.setStatus('current')
nsLsnLogStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5))
nsLsnMappingLogStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1))
lsnLogTotMappingCreateEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotMappingCreateEntries.setStatus('current')
lsnLogTotMappingDeleteEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotMappingDeleteEntries.setStatus('current')
lsnLogTotAPDMappingCreateEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotAPDMappingCreateEntries.setStatus('current')
lsnLogTotAPDMappingDeleteEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotAPDMappingDeleteEntries.setStatus('current')
lsnLogTotADMappingCreateEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotADMappingCreateEntries.setStatus('current')
lsnLogTotADMappingDeleteEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotADMappingDeleteEntries.setStatus('current')
lsnLogTotEIMappingCreateEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotEIMappingCreateEntries.setStatus('current')
lsnLogTotEIMappingDeleteEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotEIMappingDeleteEntries.setStatus('current')
lsnLogTotTcpMappingCreateEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotTcpMappingCreateEntries.setStatus('current')
lsnLogTotTcpMappingDeleteEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotTcpMappingDeleteEntries.setStatus('current')
lsnLogTotUdpMappingCreateEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotUdpMappingCreateEntries.setStatus('current')
lsnLogTotUdpMappingDeleteEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotUdpMappingDeleteEntries.setStatus('current')
lsnLogTotIcmpMappingCreateEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotIcmpMappingCreateEntries.setStatus('current')
lsnLogTotIcmpMappingDeleteEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotIcmpMappingDeleteEntries.setStatus('current')
lsnLogTotWrongMappingFlagEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotWrongMappingFlagEntries.setStatus('current')
nsLsnSessionLogStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 2))
lsnLogTotSessionCreateEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotSessionCreateEntries.setStatus('current')
lsnLogTotSessionDeleteEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotSessionDeleteEntries.setStatus('current')
lsnLogTotTcpSessionCreateEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotTcpSessionCreateEntries.setStatus('current')
lsnLogTotTcpSessionDeleteEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotTcpSessionDeleteEntries.setStatus('current')
lsnLogTotUdpSessionCreateEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotUdpSessionCreateEntries.setStatus('current')
lsnLogTotUdpSessionDeleteEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotUdpSessionDeleteEntries.setStatus('current')
lsnLogTotIcmpSessionCreateEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotIcmpSessionCreateEntries.setStatus('current')
lsnLogTotIcmpSessionDeleteEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotIcmpSessionDeleteEntries.setStatus('current')
lsnLogTotEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotEntries.setStatus('current')
lsnLogTotDeterministicAllocs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotDeterministicAllocs.setStatus('current')
lsnLogTotDeterministicDeallocs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotDeterministicDeallocs.setStatus('current')
lsnLogTotPortblockAllocs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotPortblockAllocs.setStatus('current')
lsnLogTotPortblockDeallocs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotPortblockDeallocs.setStatus('current')
lsnLogTotTcpPortblockAllocs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotTcpPortblockAllocs.setStatus('current')
lsnLogTotTcpPortblockDeallocs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotTcpPortblockDeallocs.setStatus('current')
lsnLogTotNontcpPortblockAllocs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotNontcpPortblockAllocs.setStatus('current')
lsnLogTotNontcpPortblockDeallocs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotNontcpPortblockDeallocs.setStatus('current')
lsnLogTotWrongFlags = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotWrongFlags.setStatus('current')
lsnLogTotWrongProtocols = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotWrongProtocols.setStatus('current')
nsLsnNAT64GlobalStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6))
lsnTotNAT64RxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64RxPkts.setStatus('current')
lsnTotNAT64RxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64RxBytes.setStatus('current')
lsnTotNAT64TxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64TxPkts.setStatus('current')
lsnTotNAT64TxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64TxBytes.setStatus('current')
lsnCurNAT64sessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnCurNAT64sessions.setStatus('current')
lsnNAT64CurSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnNAT64CurSubscribers.setStatus('current')
lsnTotNAT64TcpRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64TcpRxPkts.setStatus('current')
lsnTotNAT64TcpTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64TcpTxPkts.setStatus('current')
lsnTotNAT64UdpRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64UdpRxPkts.setStatus('current')
lsnTotNAT64UdpTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64UdpTxPkts.setStatus('current')
lsnTotNAT64IcmpRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64IcmpRxPkts.setStatus('current')
lsnTotNAT64IcmpTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64IcmpTxPkts.setStatus('current')
lsnTotNAT64TcpRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64TcpRxBytes.setStatus('current')
lsnTotNAT64TcpTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64TcpTxBytes.setStatus('current')
lsnTotNAT64UdpRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64UdpRxBytes.setStatus('current')
lsnTotNAT64UdpTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64UdpTxBytes.setStatus('current')
lsnTotNAT64IcmpRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64IcmpRxBytes.setStatus('current')
lsnTotNAT64IcmpTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64IcmpTxBytes.setStatus('current')
lsnTotNAT64TcpDrpPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64TcpDrpPkts.setStatus('current')
lsnTotNAT64UdpDrpPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64UdpDrpPkts.setStatus('current')
lsnTotnat64IcmpDrpPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotnat64IcmpDrpPkts.setStatus('current')
lsnCurNAT64TcpSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnCurNAT64TcpSessions.setStatus('current')
lsnCurNAT64UdpSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnCurNAT64UdpSessions.setStatus('current')
lsnCurNAT64IcmpSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnCurNAT64IcmpSessions.setStatus('current')
lsnNAT64SessionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnNAT64SessionsRate.setStatus('current')
lsnNAT64TcpSessionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnNAT64TcpSessionsRate.setStatus('current')
lsnNAT64UdpSessionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnNAT64UdpSessionsRate.setStatus('current')
lsnNAT64IcmpSessionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnNAT64IcmpSessionsRate.setStatus('current')
nsmcStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84))
mcTotaudio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTotaudio.setStatus('current')
mcTotvideo = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTotvideo.setStatus('current')
mcTotother = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTotother.setStatus('current')
mcMsSmthStrmVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcMsSmthStrmVid.setStatus('current')
mcMsSmthStrmVidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcMsSmthStrmVidBytes.setStatus('current')
mcMsSmthStrVidpl = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcMsSmthStrVidpl.setStatus('current')
mcMsSmthStrmPlVidBytespl = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcMsSmthStrmPlVidBytespl.setStatus('current')
mccApleLiveStrmngVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mccApleLiveStrmngVid.setStatus('current')
mcAppleLiveStreamingVidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcAppleLiveStreamingVidBytes.setStatus('current')
mccAppleLiveStrmngVidpl = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mccAppleLiveStrmngVidpl.setStatus('current')
mcAppleLiveStreamingPlaylistVidBytespl = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcAppleLiveStreamingPlaylistVidBytespl.setStatus('current')
mcADTSaudio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcADTSaudio.setStatus('current')
mcADTSaudioBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcADTSaudioBytes.setStatus('current')
mcAACaudio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcAACaudio.setStatus('current')
mcAACaudiobytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcAACaudiobytes.setStatus('current')
mcFLVVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcFLVVid.setStatus('current')
mcFLVVidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcFLVVidBytes.setStatus('current')
mcMP4Vid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcMP4Vid.setStatus('current')
mcMP4VidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcMP4VidBytes.setStatus('current')
mc3PVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mc3PVid.setStatus('current')
mc3GPVidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mc3GPVidBytes.setStatus('current')
mcTotResponse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTotResponse.setStatus('current')
mcAndroid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcAndroid.setStatus('current')
mcLaptopDesktp = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcLaptopDesktp.setStatus('current')
mcIos = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcIos.setStatus('current')
mcUnidentified = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcUnidentified.setStatus('current')
mcOther = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcOther.setStatus('current')
mcYoutubedash = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcYoutubedash.setStatus('current')
mcYoutubedashBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcYoutubedashBytes.setStatus('current')
mcEncVideo = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEncVideo.setStatus('current')
mcEncHls = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEncHls.setStatus('current')
mcEncDASH = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEncDASH.setStatus('current')
mcEncOthStream = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEncOthStream.setStatus('current')
mcEncAndroid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEncAndroid.setStatus('current')
mcEncIos = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEncIos.setStatus('current')
mcEncOther = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEncOther.setStatus('current')
nsSvcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2))
serviceTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1), )
if mibBuilder.loadTexts: serviceTable.setStatus('current')
serviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "svcServiceName"))
if mibBuilder.loadTexts: serviceEntry.setStatus('current')
svcServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcServiceName.setStatus('current')
svcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcIpAddress.setStatus('current')
svcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPort.setStatus('current')
svcServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 4), EntityProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcServiceType.setStatus('current')
svcState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 5), EntityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcState.setStatus('current')
svcMaxReqPerConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcMaxReqPerConn.setStatus('current')
svcAvgTransactionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAvgTransactionTime.setStatus('current')
svcEstablishedConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEstablishedConn.setStatus('current')
svcActiveConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcActiveConn.setStatus('current')
svcSurgeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSurgeCount.setStatus('current')
svcTotalRequestsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalRequestsLow.setStatus('obsolete')
svcTotalRequestsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalRequestsHigh.setStatus('obsolete')
svcTotalRequestBytesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalRequestBytesLow.setStatus('obsolete')
svcTotalRequestBytesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalRequestBytesHigh.setStatus('obsolete')
svcTotalResponsesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalResponsesLow.setStatus('obsolete')
svcTotalResponsesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalResponsesHigh.setStatus('obsolete')
svcTotalResponseBytesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalResponseBytesLow.setStatus('obsolete')
svcTotalResponseBytesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalResponseBytesHigh.setStatus('obsolete')
svcTotalPktsRecvdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalPktsRecvdLow.setStatus('obsolete')
svcTotalPktsRecvdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalPktsRecvdHigh.setStatus('obsolete')
svcTotalPktsSentLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalPktsSentLow.setStatus('obsolete')
svcTotalPktsSentHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalPktsSentHigh.setStatus('obsolete')
svcTotalSynsRecvdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalSynsRecvdLow.setStatus('obsolete')
svcTotalSynsRecvdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalSynsRecvdHigh.setStatus('obsolete')
svcTotalRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalRequests.setStatus('current')
svcTotalRequestBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalRequestBytes.setStatus('current')
svcTotalResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalResponses.setStatus('current')
svcTotalResponseBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalResponseBytes.setStatus('current')
svcTotalPktsRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalPktsRecvd.setStatus('current')
svcTotalPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalPktsSent.setStatus('current')
svcTotalSynsRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalSynsRecvd.setStatus('current')
svcGslbSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGslbSiteName.setStatus('current')
svcAvgSvrTTFB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAvgSvrTTFB.setStatus('current')
svctotalJsTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svctotalJsTransactions.setStatus('current')
svcdosQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcdosQDepth.setStatus('current')
svcCurClntConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcCurClntConnections.setStatus('current')
svcRequestRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 42), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRequestRate.setStatus('current')
svcRxBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 43), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRxBytesRate.setStatus('current')
svcTxBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTxBytesRate.setStatus('current')
svcSynfloodRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 45), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSynfloodRate.setStatus('current')
svcTicksSinceLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 47), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTicksSinceLastStateChange.setStatus('current')
svcTotalClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalClients.setStatus('current')
svcTotalServers = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalServers.setStatus('current')
svcMaxClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcMaxClients.setStatus('current')
svcActiveTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcActiveTransactions.setStatus('current')
svcServiceFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 54), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcServiceFullName.setStatus('current')
svcInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 55), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcInetAddressType.setStatus('current')
svcInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 56), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcInetAddress.setStatus('current')
svcTdId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTdId.setStatus('current')
svcGslbState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 58), EntityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGslbState.setStatus('current')
svcCurSrvrConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcCurSrvrConnections.setStatus('current')
serverTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 2), )
if mibBuilder.loadTexts: serverTable.setStatus('current')
serverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "serverName"))
if mibBuilder.loadTexts: serverEntry.setStatus('current')
serverName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverName.setStatus('current')
serverIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverIpAddress.setStatus('current')
serverState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 2, 1, 3), EntityState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverState.setStatus('current')
serverDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverDelay.setStatus('current')
serverFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverFullName.setStatus('current')
serverInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverInetAddressType.setStatus('current')
serverInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverInetAddress.setStatus('current')
serverTdId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTdId.setStatus('current')
serviceScpolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3), )
if mibBuilder.loadTexts: serviceScpolicyTable.setStatus('current')
serviceScpolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1), ).setIndexNames((0, "NS-ROOT-MIB", "svcServiceName"), (0, "NS-ROOT-MIB", "scPolicyName"))
if mibBuilder.loadTexts: serviceScpolicyEntry.setStatus('current')
svcscpolicyPrimaryIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyPrimaryIPAddress.setStatus('current')
svcscpolicyPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyPrimaryPort.setStatus('current')
svcscpolicyDesIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyDesIpAddress.setStatus('obsolete')
svcscpolicyDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyDestPort.setStatus('obsolete')
svcscpolicyAvgServerTransactionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyAvgServerTransactionTime.setStatus('obsolete')
svcscpolicyTotClientTransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyTotClientTransaction.setStatus('obsolete')
svcscpolicyTotOpenConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyTotOpenConn.setStatus('obsolete')
svcscpolicydesIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicydesIpAddress.setStatus('current')
svcscpolicydestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicydestPort.setStatus('current')
svcscpolicyavgServerTransactionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyavgServerTransactionTime.setStatus('current')
svcscpolicytotClientTransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicytotClientTransaction.setStatus('current')
svcscpolicytotOpenConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicytotOpenConn.setStatus('current')
svcscpolicyscPhysicalServiceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscPhysicalServiceIP.setStatus('current')
svcscpolicyscPhysicalServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscPhysicalServicePort.setStatus('current')
svcscpolicyscCurrentWaitingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscCurrentWaitingTime.setStatus('current')
svcscpolicyscCurrentClientConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscCurrentClientConnections.setStatus('current')
svcscpolicyscTotalClientConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscTotalClientConnections.setStatus('current')
svcscpolicyscTotalServerConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscTotalServerConnections.setStatus('current')
svcscpolicyscTotalRequestsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscTotalRequestsReceived.setStatus('current')
svcscpolicyscTotalRequestBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscTotalRequestBytes.setStatus('current')
svcscpolicyscTotalResponsesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscTotalResponsesReceived.setStatus('current')
svcscpolicyscTotalResponseBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscTotalResponseBytes.setStatus('current')
svcscpolicyscCurrentSurgeQClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscCurrentSurgeQClients.setStatus('current')
svcscpolicyscCurrentWaitingClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscCurrentWaitingClients.setStatus('current')
svcscpolicyscTotalServerTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscTotalServerTransactions.setStatus('current')
svcscpolicyscTotalServerTTFBTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscTotalServerTTFBTransactions.setStatus('current')
svcscpolicyscTotalServerTTLB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscTotalServerTTLB.setStatus('current')
svcscpolicyscTotalClientTTLB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscTotalClientTTLB.setStatus('current')
svcscpolicyscTotalServerTTFB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscTotalServerTTFB.setStatus('current')
svcscpolicyscAverageClientTTLB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscAverageClientTTLB.setStatus('current')
svcscpolicyscAverageServerTTFB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscAverageServerTTFB.setStatus('current')
serviceAdvanceSslConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4), )
if mibBuilder.loadTexts: serviceAdvanceSslConfigTable.setStatus('current')
serviceAdvanceSslConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4, 1), ).setIndexNames((0, "NS-ROOT-MIB", "svcServiceName"))
if mibBuilder.loadTexts: serviceAdvanceSslConfigEntry.setStatus('current')
svcSslDH = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4, 1, 1), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSslDH.setStatus('current')
svcSslDHCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSslDHCount.setStatus('current')
svcSslDHFilePath = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSslDHFilePath.setStatus('current')
svcSsleRSA = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4, 1, 4), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSsleRSA.setStatus('current')
svcSsleRSACount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSsleRSACount.setStatus('current')
svcSslv2Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4, 1, 6), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSslv2Protocol.setStatus('current')
svcSslv3Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4, 1, 7), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSslv3Protocol.setStatus('current')
svcSslTLSv1Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4, 1, 8), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSslTLSv1Protocol.setStatus('current')
svcSslRedirectSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4, 1, 9), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSslRedirectSupport.setStatus('current')
svcSslClearTextPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSslClearTextPort.setStatus('current')
serviceCipherBindingTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 5), )
if mibBuilder.loadTexts: serviceCipherBindingTable.setStatus('current')
serviceCipherBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 5, 1), ).setIndexNames((0, "NS-ROOT-MIB", "svcServiceName"), (0, "NS-ROOT-MIB", "svcSslCipherBindName"))
if mibBuilder.loadTexts: serviceCipherBindingEntry.setStatus('current')
svcSslCipherBindName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 5, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSslCipherBindName.setStatus('current')
svcSslCipherBindDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSslCipherBindDesc.setStatus('current')
serviceGlobalStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 6))
svcCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcCount.setStatus('current')
serverCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCount.setStatus('current')
svcgroupCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcgroupCount.setStatus('current')
svcgroupmemCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcgroupmemCount.setStatus('current')
syssvcCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syssvcCount.setStatus('current')
sysupsvcCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysupsvcCount.setStatus('current')
sysupsvcitmCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysupsvcitmCount.setStatus('current')
serviceGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7), )
if mibBuilder.loadTexts: serviceGroupMemberTable.setStatus('current')
serviceGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1), ).setIndexNames((0, "NS-ROOT-MIB", "svcGrpMemberGroupName"), (0, "NS-ROOT-MIB", "svcGrpMemberName"))
if mibBuilder.loadTexts: serviceGroupMemberEntry.setStatus('current')
svcGrpMemberGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberGroupName.setStatus('current')
svcGrpMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberName.setStatus('current')
svcGrpMemberPrimaryIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberPrimaryIPAddress.setStatus('current')
svcGrpMemberPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberPrimaryPort.setStatus('current')
svcGrpMemberServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 5), EntityProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberServiceType.setStatus('current')
svcGrpMemberState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 6), EntityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberState.setStatus('current')
svcGrpMemberWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcGrpMemberWeight.setStatus('current')
svcGrpMemberMaxReqPerConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberMaxReqPerConn.setStatus('current')
svcGrpMemberAvgTransactionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberAvgTransactionTime.setStatus('current')
svcGrpMemberEstablishedConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberEstablishedConn.setStatus('current')
svcGrpMemberActiveConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberActiveConn.setStatus('current')
svcGrpMemberSurgeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberSurgeCount.setStatus('current')
svcGrpMemberTotalRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberTotalRequests.setStatus('current')
svcGrpMemberTotalRequestBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberTotalRequestBytes.setStatus('current')
svcGrpMemberTotalResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberTotalResponses.setStatus('current')
svcGrpMemberTotalResponseBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberTotalResponseBytes.setStatus('current')
svcGrpMemberTotalPktsRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberTotalPktsRecvd.setStatus('current')
svcGrpMemberTotalPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberTotalPktsSent.setStatus('current')
svcGrpMemberTotalSynsRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberTotalSynsRecvd.setStatus('current')
svcGrpMemberGslbSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberGslbSiteName.setStatus('current')
svcGrpMemberAvgSvrTTFB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberAvgSvrTTFB.setStatus('current')
svcGrpMembertotalJsTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMembertotalJsTransactions.setStatus('current')
svcGrpMemberdosQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberdosQDepth.setStatus('current')
svcGrpMemberCurClntConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberCurClntConnections.setStatus('current')
svcGrpMemberRequestRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberRequestRate.setStatus('current')
svcGrpMemberRxBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberRxBytesRate.setStatus('current')
svcGrpMemberTxBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberTxBytesRate.setStatus('current')
svcGrpMemberSynfloodRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberSynfloodRate.setStatus('current')
svcGrpMemberTicksSinceLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 31), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberTicksSinceLastStateChange.setStatus('current')
svcGrpMemberGroupFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberGroupFullName.setStatus('current')
svcGrpMemberFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberFullName.setStatus('current')
svcGrpMemberPrimaryInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 34), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberPrimaryInetAddressType.setStatus('current')
svcGrpMemberPrimaryInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 35), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberPrimaryInetAddress.setStatus('current')
svcGrpMemberServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberServerName.setStatus('current')
svcGrpMemberTdId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberTdId.setStatus('current')
serviceDospolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8), )
if mibBuilder.loadTexts: serviceDospolicyTable.setStatus('current')
serviceDospolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8, 1), ).setIndexNames((0, "NS-ROOT-MIB", "svcServiceName"), (0, "NS-ROOT-MIB", "dosPolicyName"))
if mibBuilder.loadTexts: serviceDospolicyEntry.setStatus('current')
svcdospolicydosTotJSSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcdospolicydosTotJSSent.setStatus('current')
svcdospolicydosTotJSBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcdospolicydosTotJSBytesSent.setStatus('current')
svcdospolicydosTotJSRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcdospolicydosTotJSRefused.setStatus('current')
svcdospolicydosTotNonGetPostRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcdospolicydosTotNonGetPostRequests.setStatus('current')
svcdospolicydosPhysicalServiceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcdospolicydosPhysicalServiceIP.setStatus('current')
svcdospolicydosPhysicalServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcdospolicydosPhysicalServicePort.setStatus('current')
svcdospolicydosCurrentQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcdospolicydosCurrentQueueSize.setStatus('current')
svcdospolicydosCurrentJSRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcdospolicydosCurrentJSRate.setStatus('current')
svcdospolicydosTotValidClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcdospolicydosTotValidClients.setStatus('current')
svcdospolicydosCurServerRespRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcdospolicydosCurServerRespRate.setStatus('current')
monitorMemberTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9), )
if mibBuilder.loadTexts: monitorMemberTable.setStatus('current')
monitorMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1), ).setIndexNames((0, "NS-ROOT-MIB", "monitorName"))
if mibBuilder.loadTexts: monitorMemberEntry.setStatus('current')
monitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorName.setStatus('current')
responseTimeoutThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: responseTimeoutThreshold.setStatus('current')
monitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 3), MonitorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorType.setStatus('current')
monitorInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorInterval.setStatus('current')
monitorResponseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorResponseTimeout.setStatus('current')
monitorDowntime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorDowntime.setStatus('current')
monitorRetrys = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRetrys.setStatus('current')
destinationIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destinationIP.setStatus('current')
destinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destinationPort.setStatus('current')
drtmDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drtmDeviation.setStatus('current')
drtmActiveMonitors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drtmActiveMonitors.setStatus('current')
drtmCumResponseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drtmCumResponseTimeout.setStatus('current')
alarmProbeFailedRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmProbeFailedRetries.setStatus('current')
destinationInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 14), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destinationInetAddressType.setStatus('current')
destinationInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 15), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destinationInetAddress.setStatus('current')
monServiceMemberTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10), )
if mibBuilder.loadTexts: monServiceMemberTable.setStatus('current')
monServiceMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1), ).setIndexNames((0, "NS-ROOT-MIB", "monServiceName"), (0, "NS-ROOT-MIB", "monitorName"))
if mibBuilder.loadTexts: monServiceMemberEntry.setStatus('current')
monServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monServiceName.setStatus('current')
monitorRTO = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRTO.setStatus('current')
monitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 3), MonitorState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorState.setStatus('current')
drtmRTO = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drtmRTO.setStatus('current')
drtmLearningProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drtmLearningProbes.setStatus('current')
monitorCurFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorCurFailedCount.setStatus('current')
monitorWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorWeight.setStatus('current')
alarmMonrespto = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 8), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmMonrespto.setStatus('current')
monitorProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorProbes.setStatus('current')
monitorFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFailed.setStatus('current')
monitorMaxClient = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorMaxClient.setStatus('current')
monitorFailedCon = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFailedCon.setStatus('current')
monitorFailedCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFailedCode.setStatus('current')
monitorFailedStr = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFailedStr.setStatus('current')
monitorFailedTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFailedTimeout.setStatus('current')
monitorFailedSend = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFailedSend.setStatus('current')
monitorFailedFTP = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFailedFTP.setStatus('current')
monitorFailedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFailedPort.setStatus('current')
monitorFailedResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFailedResponse.setStatus('current')
monitorFailedId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFailedId.setStatus('current')
monitorProbesNoChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorProbesNoChange.setStatus('current')
monitorResponseTimeoutThreshExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorResponseTimeoutThreshExceed.setStatus('current')
serviceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 11), )
if mibBuilder.loadTexts: serviceGroupTable.setStatus('current')
serviceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 11, 1), ).setIndexNames((0, "NS-ROOT-MIB", "svcgrpSvcGroupName"))
if mibBuilder.loadTexts: serviceGroupEntry.setStatus('current')
svcgrpSvcGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 11, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcgrpSvcGroupName.setStatus('current')
svcgrpSvcGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 11, 1, 2), EntityProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcgrpSvcGroupType.setStatus('current')
svcgrpSvcGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 11, 1, 3), ServiceGroupState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcgrpSvcGroupState.setStatus('current')
svcgrpSvcGroupFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 11, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcgrpSvcGroupFullName.setStatus('current')
svcgrpTdId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcgrpTdId.setStatus('current')
nsVserverGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3))
vserverTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1), )
if mibBuilder.loadTexts: vserverTable.setStatus('current')
vserverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vsvrName"))
if mibBuilder.loadTexts: vserverEntry.setStatus('current')
vsvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrName.setStatus('current')
vsvrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrIpAddress.setStatus('current')
vsvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrPort.setStatus('current')
vsvrType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 4), EntityProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrType.setStatus('current')
vsvrState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 5), EntityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrState.setStatus('current')
vsvrMaxReqPerConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrMaxReqPerConn.setStatus('obsolete')
vsvrCurClntConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCurClntConnections.setStatus('current')
vsvrCurSrvrConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCurSrvrConnections.setStatus('current')
vsvrAvgTransactionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrAvgTransactionTime.setStatus('obsolete')
vsvrSurgeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSurgeCount.setStatus('current')
vsvrTotalRequestsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalRequestsLow.setStatus('obsolete')
vsvrTotalRequestsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalRequestsHigh.setStatus('obsolete')
vsvrTotalRequestBytesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalRequestBytesLow.setStatus('obsolete')
vsvrTotalRequestBytesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalRequestBytesHigh.setStatus('obsolete')
vsvrTotalResponsesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalResponsesLow.setStatus('obsolete')
vsvrTotalResponsesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalResponsesHigh.setStatus('obsolete')
vsvrTotalResponseBytesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalResponseBytesLow.setStatus('obsolete')
vsvrTotalResponseBytesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalResponseBytesHigh.setStatus('obsolete')
vsvrTotalPktsRecvdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalPktsRecvdLow.setStatus('obsolete')
vsvrTotalPktsRecvdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalPktsRecvdHigh.setStatus('obsolete')
vsvrTotalPktsSentLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalPktsSentLow.setStatus('obsolete')
vsvrTotalPktsSentHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalPktsSentHigh.setStatus('obsolete')
vsvrTotalSynsRecvdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalSynsRecvdLow.setStatus('obsolete')
vsvrTotalSynsRecvdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalSynsRecvdHigh.setStatus('obsolete')
vsvrTotalRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalRequests.setStatus('current')
vsvrTotalRequestBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalRequestBytes.setStatus('current')
vsvrTotalResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalResponses.setStatus('current')
vsvrTotalResponseBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalResponseBytes.setStatus('current')
vsvrTotalPktsRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalPktsRecvd.setStatus('current')
vsvrTotalPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalPktsSent.setStatus('current')
vsvrTotalSynsRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalSynsRecvd.setStatus('current')
vsvrCurServicesDown = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCurServicesDown.setStatus('current')
vsvrCurServicesUnKnown = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCurServicesUnKnown.setStatus('current')
vsvrCurServicesOutOfSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCurServicesOutOfSvc.setStatus('current')
vsvrCurServicesTransToOutOfSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCurServicesTransToOutOfSvc.setStatus('current')
vsvrCurServicesUp = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCurServicesUp.setStatus('current')
vsvrTotMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotMiss.setStatus('current')
vsvrRequestRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 43), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrRequestRate.setStatus('current')
vsvrRxBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrRxBytesRate.setStatus('current')
vsvrTxBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 45), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTxBytesRate.setStatus('current')
vsvrSynfloodRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 46), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSynfloodRate.setStatus('current')
vsvrIp6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 47), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrIp6Address.setStatus('current')
vsvrTotHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotHits.setStatus('current')
vsvrTotSpillOvers = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotSpillOvers.setStatus('current')
vsvrTotalClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalClients.setStatus('current')
vsvrClientConnOpenRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 58), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrClientConnOpenRate.setStatus('current')
vsvrFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 59), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrFullName.setStatus('current')
vsvrCurSslVpnUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCurSslVpnUsers.setStatus('current')
vsvrTotalServicesBound = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalServicesBound.setStatus('current')
vsvrHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrHealth.setStatus('current')
vsvrTicksSinceLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 63), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTicksSinceLastStateChange.setStatus('current')
vsvrEntityType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 64), VServerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrEntityType.setStatus('current')
vsvrTotalServers = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalServers.setStatus('current')
vsvrActiveActiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 66), ActiveActiveState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrActiveActiveState.setStatus('current')
vsvrInvalidRequestResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrInvalidRequestResponse.setStatus('current')
vsvrInvalidRequestResponseDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrInvalidRequestResponseDropped.setStatus('current')
vsvrTdId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTdId.setStatus('current')
vsvrSoThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSoThreshold.setStatus('current')
vsvrEstablishedConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrEstablishedConn.setStatus('current')
vsvrCurTotalVpnUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCurTotalVpnUsers.setStatus('current')
vsvrCurMptcpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCurMptcpSessions.setStatus('current')
vsvrCursubflowConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCursubflowConn.setStatus('current')
vsvrCurEffState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 75), EntityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCurEffState.setStatus('current')
vserverServiceTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2), )
if mibBuilder.loadTexts: vserverServiceTable.setStatus('current')
vserverServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vsvrName"), (0, "NS-ROOT-MIB", "vsvrServiceName"))
if mibBuilder.loadTexts: vserverServiceEntry.setStatus('current')
serviceHitsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceHitsLow.setStatus('obsolete')
serviceHitsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceHitsHigh.setStatus('obsolete')
servicePersistentHitsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: servicePersistentHitsLow.setStatus('obsolete')
servicePersistentHitsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: servicePersistentHitsHigh.setStatus('obsolete')
vsvrServiceHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrServiceHits.setStatus('current')
servicePersistentHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: servicePersistentHits.setStatus('current')
serviceWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceWeight.setStatus('current')
vsvrServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrServiceName.setStatus('current')
vsvrServiceFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrServiceFullName.setStatus('current')
vserverFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverFullName.setStatus('current')
vsvrServiceEntityType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1, 11), SvcEntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrServiceEntityType.setStatus('current')
vserverCspolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 3), )
if mibBuilder.loadTexts: vserverCspolicyTable.setStatus('current')
vserverCspolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 3, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vsvrName"), (0, "NS-ROOT-MIB", "cspolicyName"))
if mibBuilder.loadTexts: vserverCspolicyEntry.setStatus('current')
cspolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspolicyName.setStatus('current')
cspolicyDestVserverName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspolicyDestVserverName.setStatus('current')
cspolicyHitsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspolicyHitsLow.setStatus('obsolete')
cspolicyHitsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspolicyHitsHigh.setStatus('obsolete')
cspolicyHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspolicyHits.setStatus('current')
csIndexVserverFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIndexVserverFullName.setStatus('current')
vserverCrpolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 4), )
if mibBuilder.loadTexts: vserverCrpolicyTable.setStatus('current')
vserverCrpolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 4, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vsvrName"), (0, "NS-ROOT-MIB", "crpolicyName"))
if mibBuilder.loadTexts: vserverCrpolicyEntry.setStatus('current')
crpolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 4, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crpolicyName.setStatus('current')
crpolicyHitsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crpolicyHitsLow.setStatus('obsolete')
crpolicyHitsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crpolicyHitsHigh.setStatus('obsolete')
crpolicyHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crpolicyHits.setStatus('current')
crIndexVserverFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crIndexVserverFullName.setStatus('current')
vserverGlobalStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 5))
curConfigVservers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curConfigVservers.setStatus('current')
vsvrBindCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrBindCount.setStatus('current')
vsvrSvcGrpBindCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSvcGrpBindCount.setStatus('current')
curConfigLbVservers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 5, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curConfigLbVservers.setStatus('current')
curConfigGslbVservers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 5, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curConfigGslbVservers.setStatus('current')
totSpilloverCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 5, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totSpilloverCount.setStatus('current')
lbvserverTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 6), )
if mibBuilder.loadTexts: lbvserverTable.setStatus('current')
lbvserverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 6, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vsvrName"))
if mibBuilder.loadTexts: lbvserverEntry.setStatus('current')
lbvsvrLBMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 6, 1, 1), LbPolicy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbvsvrLBMethod.setStatus('current')
lbvsvrPersistanceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 6, 1, 2), PersistanceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbvsvrPersistanceType.setStatus('current')
lbvsvrPersistenceTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbvsvrPersistenceTimeOut.setStatus('current')
lbvsvrActiveConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbvsvrActiveConn.setStatus('current')
lbvsvrAvgSvrTTFB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbvsvrAvgSvrTTFB.setStatus('current')
lbvsvrRdpCookieParsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbvsvrRdpCookieParsed.setStatus('current')
vserverPqpolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7), )
if mibBuilder.loadTexts: vserverPqpolicyTable.setStatus('current')
vserverPqpolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vsvrName"), (0, "NS-ROOT-MIB", "pqName"))
if mibBuilder.loadTexts: vserverPqpolicyEntry.setStatus('current')
pqpolicyTotClientTransactionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicyTotClientTransactionTime.setStatus('obsolete')
pqpolicyTotClientTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicyTotClientTransactions.setStatus('obsolete')
pqpolicyDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicyDropped.setStatus('obsolete')
pqpolicyQdepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicyQdepth.setStatus('obsolete')
pqpolicytotClientTransactionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicytotClientTransactionTime.setStatus('current')
pqpolicytotClientTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicytotClientTransactions.setStatus('current')
pqpolicypqDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqDropped.setStatus('current')
pqpolicypqQdepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqQdepth.setStatus('current')
pqpolicypqAvgClientTransactionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqAvgClientTransactionTime.setStatus('current')
pqpolicypqVserverIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqVserverIP.setStatus('current')
pqpolicypqVserverPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqVserverPort.setStatus('current')
pqpolicypqCurrentClientConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqCurrentClientConnections.setStatus('current')
pqpolicypqTotQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqTotQueueDepth.setStatus('current')
pqpolicypqTotClientConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqTotClientConnections.setStatus('current')
pqpolicypqTotQueueWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqTotQueueWaitTime.setStatus('current')
pqpolicypqTotAvgQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqTotAvgQueueDepth.setStatus('current')
pqpolicypqTotAvgQueueWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqTotAvgQueueWaitTime.setStatus('current')
pqpolicytotClientTransactionTimems = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicytotClientTransactionTimems.setStatus('current')
pqpolicypqAvgClientTransactionTimems = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqAvgClientTransactionTimems.setStatus('current')
vserverScpolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8), )
if mibBuilder.loadTexts: vserverScpolicyTable.setStatus('current')
vserverScpolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1), ).setIndexNames((0, "NS-ROOT-MIB", "svcServiceName"), (0, "NS-ROOT-MIB", "scPolicyName"))
if mibBuilder.loadTexts: vserverScpolicyEntry.setStatus('current')
vsvrscpolicyPrimaryIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyPrimaryIPAddress.setStatus('current')
vsvrscpolicyPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyPrimaryPort.setStatus('current')
vsvrscpolicyDesIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyDesIpAddress.setStatus('obsolete')
vsvrscpolicyDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyDestPort.setStatus('obsolete')
vsvrscpolicyAvgServerTransactionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyAvgServerTransactionTime.setStatus('obsolete')
vsvrscpolicyTotClientTransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyTotClientTransaction.setStatus('obsolete')
vsvrscpolicyTotOpenConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyTotOpenConn.setStatus('obsolete')
vsvrscpolicydesIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicydesIpAddress.setStatus('current')
vsvrscpolicydestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicydestPort.setStatus('current')
vsvrscpolicyavgServerTransactionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyavgServerTransactionTime.setStatus('current')
vsvrscpolicytotClientTransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicytotClientTransaction.setStatus('current')
vsvrscpolicytotOpenConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicytotOpenConn.setStatus('current')
vsvrscpolicyscPhysicalServiceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscPhysicalServiceIP.setStatus('current')
vsvrscpolicyscPhysicalServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscPhysicalServicePort.setStatus('current')
vsvrscpolicyscCurrentWaitingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscCurrentWaitingTime.setStatus('current')
vsvrscpolicyscCurrentClientConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscCurrentClientConnections.setStatus('current')
vsvrscpolicyscTotalClientConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscTotalClientConnections.setStatus('current')
vsvrscpolicyscTotalServerConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscTotalServerConnections.setStatus('current')
vsvrscpolicyscTotalRequestsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscTotalRequestsReceived.setStatus('current')
vsvrscpolicyscTotalRequestBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscTotalRequestBytes.setStatus('current')
vsvrscpolicyscTotalResponsesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscTotalResponsesReceived.setStatus('current')
vsvrscpolicyscTotalResponseBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscTotalResponseBytes.setStatus('current')
vsvrscpolicyscCurrentSurgeQClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscCurrentSurgeQClients.setStatus('current')
vsvrscpolicyscCurrentWaitingClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscCurrentWaitingClients.setStatus('current')
vsvrscpolicyscTotalServerTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscTotalServerTransactions.setStatus('current')
vsvrscpolicyscTotalServerTTFBTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscTotalServerTTFBTransactions.setStatus('current')
vsvrscpolicyscTotalServerTTLB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscTotalServerTTLB.setStatus('current')
vsvrscpolicyscTotalClientTTLB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscTotalClientTTLB.setStatus('current')
vsvrscpolicyscTotalServerTTFB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscTotalServerTTFB.setStatus('current')
vsvrscpolicyscAverageClientTTLB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscAverageClientTTLB.setStatus('current')
vsvrscpolicyscAverageServerTTFB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscAverageServerTTFB.setStatus('current')
vserverAdvanceSslConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9), )
if mibBuilder.loadTexts: vserverAdvanceSslConfigTable.setStatus('current')
vserverAdvanceSslConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vsvrName"))
if mibBuilder.loadTexts: vserverAdvanceSslConfigEntry.setStatus('current')
vsvrSslDH = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9, 1, 1), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSslDH.setStatus('current')
vsvrSslDHCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSslDHCount.setStatus('current')
vsvrSslDHFilePath = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSslDHFilePath.setStatus('current')
vsvrSsleRSA = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9, 1, 4), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSsleRSA.setStatus('current')
vsvrSsleRSACount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSsleRSACount.setStatus('current')
vsvrSslv2Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9, 1, 6), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSslv2Protocol.setStatus('current')
vsvrSslv3Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9, 1, 7), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSslv3Protocol.setStatus('current')
vsvrSslTLSv1Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9, 1, 8), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSslTLSv1Protocol.setStatus('current')
vsvrSslRedirectSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9, 1, 9), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSslRedirectSupport.setStatus('current')
vsvrSslClearTextPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSslClearTextPort.setStatus('current')
vserverCipherBindingTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 10), )
if mibBuilder.loadTexts: vserverCipherBindingTable.setStatus('current')
vserverCipherBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 10, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vsvrName"), (0, "NS-ROOT-MIB", "vsvrSslCipherBindName"))
if mibBuilder.loadTexts: vserverCipherBindingEntry.setStatus('current')
vsvrSslCipherBindName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 10, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSslCipherBindName.setStatus('current')
vsvrSslCipherBindDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 10, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSslCipherBindDesc.setStatus('current')
vserverCsPiPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 11), )
if mibBuilder.loadTexts: vserverCsPiPolicyTable.setStatus('current')
vserverCsPiPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 11, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vsvrName"), (0, "NS-ROOT-MIB", "csPipolicyName"))
if mibBuilder.loadTexts: vserverCsPiPolicyEntry.setStatus('current')
csPipolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 11, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPipolicyName.setStatus('current')
csPipolicyDestVserverName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 11, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPipolicyDestVserverName.setStatus('current')
piPolicyBindingHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 11, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piPolicyBindingHits.setStatus('current')
csPiIndexVserverFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 11, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPiIndexVserverFullName.setStatus('current')
cspolicyActionName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 11, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspolicyActionName.setStatus('current')
nsSnmpEventsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10))
snmpTrapVarBindOidsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2))
alarmHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 1), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmHighThreshold.setStatus('current')
alarmNormalThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 2), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmNormalThreshold.setStatus('current')
entityName = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: entityName.setStatus('current')
nsUserName = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 4), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsUserName.setStatus('current')
configurationCmd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 5), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: configurationCmd.setStatus('current')
authorizationStatus = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 6), AuthorizationStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: authorizationStatus.setStatus('current')
commandExecutionStatus = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 7), CommandExecutionStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: commandExecutionStatus.setStatus('current')
unackSynCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 8), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: unackSynCount.setStatus('current')
alarmLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 9), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmLowThreshold.setStatus('current')
alarmProbeFailedErrorString = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 10), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmProbeFailedErrorString.setStatus('current')
alarmVipRhiIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 11), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmVipRhiIpAddr.setStatus('current')
alarmVipRhiState = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 12), EntityState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmVipRhiState.setStatus('current')
alarmRateLmtThresholdExceeded = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 13), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmRateLmtThresholdExceeded.setStatus('current')
ipAddressGathered = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 14), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipAddressGathered.setStatus('current')
stringComputed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 15), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stringComputed.setStatus('current')
alarmEntityCurState = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 16), EntityState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmEntityCurState.setStatus('current')
sysHealthPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 17), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sysHealthPowerSupplyStatus.setStatus('current')
alarmCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 18), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmCurrentValue.setStatus('current')
alarmVipRhiInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 19), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmVipRhiInetAddressType.setStatus('current')
alarmVipRhiInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 20), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmVipRhiInetAddress.setStatus('current')
alarmVsvrOldName = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 21), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmVsvrOldName.setStatus('obsolete')
alarmVsvrNewName = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 22), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmVsvrNewName.setStatus('obsolete')
nsClientIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 23), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsClientIPAddr.setStatus('current')
ipConflictAddr = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 24), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipConflictAddr.setStatus('current')
appfwLogMsg = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 25), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: appfwLogMsg.setStatus('current')
dnskeyName = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 26), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dnskeyName.setStatus('current')
dnskeyTimeToExpire = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 27), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dnskeyTimeToExpire.setStatus('current')
dnskeyUnitsOfExpiry = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 28), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dnskeyUnitsOfExpiry.setStatus('current')
entityNewName = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 29), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: entityNewName.setStatus('current')
entityOldName = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 30), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: entityOldName.setStatus('current')
platformRateLimitPacketDropCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 31), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: platformRateLimitPacketDropCount.setStatus('current')
haLicenseMatchState = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 32), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: haLicenseMatchState.setStatus('current')
sslCardStatusMsg = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 33), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sslCardStatusMsg.setStatus('current')
callHomeUploadEventStatusMsg = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 34), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: callHomeUploadEventStatusMsg.setStatus('current')
oldCCOIP = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 35), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oldCCOIP.setStatus('current')
newCCOIP = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 36), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: newCCOIP.setStatus('current')
oldOVS = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 37), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oldOVS.setStatus('current')
newOVS = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 38), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: newOVS.setStatus('current')
qosdVersion = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 39), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: qosdVersion.setStatus('current')
brVersion = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 40), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: brVersion.setStatus('current')
sslChipName = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 41), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sslChipName.setStatus('current')
vrid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 42), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vrid.setStatus('current')
vridBoundVIP = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 43), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vridBoundVIP.setStatus('current')
newVridPriority = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 44), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: newVridPriority.setStatus('current')
oldVridPriority = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 45), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oldVridPriority.setStatus('obsolete')
effectiveVridPriority = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 46), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: effectiveVridPriority.setStatus('current')
dstip = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 47), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dstip.setStatus('current')
platformLicensedThroughput = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 48), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: platformLicensedThroughput.setStatus('current')
platformLicensedPPS = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 49), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: platformLicensedPPS.setStatus('current')
commandFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 50), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: commandFailureReason.setStatus('current')
nsIPAddressType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 51), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsIPAddressType.setStatus('current')
nsIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 52), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsIPAddress.setStatus('current')
lsnSubscrIP = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 53), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lsnSubscrIP.setStatus('current')
lsnSubscrTD = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 54), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lsnSubscrTD.setStatus('current')
protocol = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 55), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: protocol.setStatus('current')
vsvrCurSoValue = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 56), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vsvrCurSoValue.setStatus('current')
vsvrSoMethod = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 57), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vsvrSoMethod.setStatus('current')
vsvrSoThresh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 58), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vsvrSoThresh.setStatus('current')
lsnSessLimitExceededBy = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 59), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lsnSessLimitExceededBy.setStatus('current')
nsPartitionName = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 60), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsPartitionName.setStatus('current')
operation = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 61), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: operation.setStatus('current')
fromPartition = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 62), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fromPartition.setStatus('current')
toPartition = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 63), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: toPartition.setStatus('current')
clPeerID = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 64), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clPeerID.setStatus('current')
lsnDSLiteB4Address = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 65), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lsnDSLiteB4Address.setStatus('current')
ipConflictMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 66), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipConflictMacAddr.setStatus('current')
gslbSite = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 67), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: gslbSite.setStatus('current')
siteIP = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 68), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: siteIP.setStatus('current')
lsnNAT64SubscrIPV6 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 69), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lsnNAT64SubscrIPV6.setStatus('current')
netScalerEventsV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0))
if mibBuilder.loadTexts: netScalerEventsV2.setStatus('current')
changeToPrimary = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 1)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: changeToPrimary.setStatus('current')
changeToSecondary = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 2)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: changeToSecondary.setStatus('current')
cpuUtilization = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 3)).setObjects(("NS-ROOT-MIB", "nsCPUusage"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: cpuUtilization.setStatus('current')
linkUp = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 4))
if mibBuilder.loadTexts: linkUp.setStatus('obsolete')
linkDown = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 5))
if mibBuilder.loadTexts: linkDown.setStatus('obsolete')
discoverFailure = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 6))
if mibBuilder.loadTexts: discoverFailure.setStatus('obsolete')
memUtilization = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 7))
if mibBuilder.loadTexts: memUtilization.setStatus('obsolete')
entitydown = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 8)).setObjects(("NS-ROOT-MIB", "entityName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: entitydown.setStatus('current')
entityup = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 9)).setObjects(("NS-ROOT-MIB", "entityName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: entityup.setStatus('current')
synflood = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 10)).setObjects(("NS-ROOT-MIB", "unackSynCount"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: synflood.setStatus('current')
cpuUtilizationNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 11)).setObjects(("NS-ROOT-MIB", "nsCPUusage"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: cpuUtilizationNormal.setStatus('current')
synfloodNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 12)).setObjects(("NS-ROOT-MIB", "unackSynCount"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: synfloodNormal.setStatus('current')
memoryUtilization = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 13)).setObjects(("NS-ROOT-MIB", "resMemUsage"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: memoryUtilization.setStatus('current')
memoryUtilizationNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 14)).setObjects(("NS-ROOT-MIB", "resMemUsage"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: memoryUtilizationNormal.setStatus('current')
vServerRequestRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 15)).setObjects(("NS-ROOT-MIB", "vsvrName"), ("NS-ROOT-MIB", "vsvrRequestRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "vsvrFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: vServerRequestRate.setStatus('current')
vServerRequestRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 16)).setObjects(("NS-ROOT-MIB", "vsvrName"), ("NS-ROOT-MIB", "vsvrRequestRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "vsvrFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: vServerRequestRateNormal.setStatus('current')
serviceRequestRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 17)).setObjects(("NS-ROOT-MIB", "svcServiceName"), ("NS-ROOT-MIB", "svcRequestRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "svcServiceFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: serviceRequestRate.setStatus('current')
serviceRequestRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 18)).setObjects(("NS-ROOT-MIB", "svcServiceName"), ("NS-ROOT-MIB", "svcRequestRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "svcServiceFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: serviceRequestRateNormal.setStatus('current')
entityRxRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 19))
if mibBuilder.loadTexts: entityRxRate.setStatus('obsolete')
entityRxRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 20))
if mibBuilder.loadTexts: entityRxRateNormal.setStatus('obsolete')
entityTxRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 21))
if mibBuilder.loadTexts: entityTxRate.setStatus('obsolete')
entityTxRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 22))
if mibBuilder.loadTexts: entityTxRateNormal.setStatus('obsolete')
entitySynflood = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 23))
if mibBuilder.loadTexts: entitySynflood.setStatus('obsolete')
entitySynfloodNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 24))
if mibBuilder.loadTexts: entitySynfloodNormal.setStatus('obsolete')
netScalerConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 25)).setObjects(("NS-ROOT-MIB", "nsUserName"), ("NS-ROOT-MIB", "configurationCmd"), ("NS-ROOT-MIB", "authorizationStatus"), ("NS-ROOT-MIB", "commandExecutionStatus"), ("NS-ROOT-MIB", "nsClientIPAddr"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: netScalerConfigChange.setStatus('current')
maxClients = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 26)).setObjects(("NS-ROOT-MIB", "svcServiceName"), ("NS-ROOT-MIB", "svcEstablishedConn"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "svcServiceFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: maxClients.setStatus('current')
maxClientsNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 27)).setObjects(("NS-ROOT-MIB", "svcServiceName"), ("NS-ROOT-MIB", "svcEstablishedConn"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "svcServiceFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: maxClientsNormal.setStatus('current')
netScalerConfigSave = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 28)).setObjects(("NS-ROOT-MIB", "nsUserName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: netScalerConfigSave.setStatus('current')
serviceRxBytesRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 29)).setObjects(("NS-ROOT-MIB", "svcServiceName"), ("NS-ROOT-MIB", "svcRxBytesRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "svcServiceFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: serviceRxBytesRate.setStatus('current')
serviceRxBytesRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 30)).setObjects(("NS-ROOT-MIB", "svcServiceName"), ("NS-ROOT-MIB", "svcRxBytesRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "svcServiceFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: serviceRxBytesRateNormal.setStatus('current')
vserverRxBytesRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 31)).setObjects(("NS-ROOT-MIB", "vsvrName"), ("NS-ROOT-MIB", "vsvrRxBytesRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "vsvrFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: vserverRxBytesRate.setStatus('current')
vserverRxBytesRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 32)).setObjects(("NS-ROOT-MIB", "vsvrName"), ("NS-ROOT-MIB", "vsvrRxBytesRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "vsvrFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: vserverRxBytesRateNormal.setStatus('current')
serviceTxBytesRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 33)).setObjects(("NS-ROOT-MIB", "svcServiceName"), ("NS-ROOT-MIB", "svcTxBytesRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "svcServiceFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: serviceTxBytesRate.setStatus('current')
serviceTxBytesRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 34)).setObjects(("NS-ROOT-MIB", "svcServiceName"), ("NS-ROOT-MIB", "svcTxBytesRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "svcServiceFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: serviceTxBytesRateNormal.setStatus('current')
vserverTxBytesRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 35)).setObjects(("NS-ROOT-MIB", "vsvrName"), ("NS-ROOT-MIB", "vsvrTxBytesRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "vsvrFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: vserverTxBytesRate.setStatus('current')
vserverTxBytesRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 36)).setObjects(("NS-ROOT-MIB", "vsvrName"), ("NS-ROOT-MIB", "vsvrTxBytesRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "vsvrFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: vserverTxBytesRateNormal.setStatus('current')
serviceSynfloodRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 37)).setObjects(("NS-ROOT-MIB", "svcServiceName"), ("NS-ROOT-MIB", "svcSynfloodRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "svcServiceFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: serviceSynfloodRate.setStatus('current')
serviceSynfloodNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 38)).setObjects(("NS-ROOT-MIB", "svcServiceName"), ("NS-ROOT-MIB", "svcSynfloodRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "svcServiceFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: serviceSynfloodNormal.setStatus('current')
vserverSynfloodRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 39)).setObjects(("NS-ROOT-MIB", "vsvrName"), ("NS-ROOT-MIB", "vsvrSynfloodRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "vsvrFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: vserverSynfloodRate.setStatus('current')
vserverSynfloodNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 40)).setObjects(("NS-ROOT-MIB", "vsvrName"), ("NS-ROOT-MIB", "vsvrSynfloodRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "vsvrFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: vserverSynfloodNormal.setStatus('current')
svcGroupMemberRequestRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 41)).setObjects(("NS-ROOT-MIB", "svcGrpMemberName"), ("NS-ROOT-MIB", "svcGrpMemberRequestRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "svcGrpMemberFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: svcGroupMemberRequestRate.setStatus('current')
svcGroupMemberRequestRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 42)).setObjects(("NS-ROOT-MIB", "svcGrpMemberName"), ("NS-ROOT-MIB", "svcGrpMemberRequestRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "svcGrpMemberFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: svcGroupMemberRequestRateNormal.setStatus('current')
svcGroupMemberRxBytesRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 43)).setObjects(("NS-ROOT-MIB", "svcGrpMemberName"), ("NS-ROOT-MIB", "svcGrpMemberRxBytesRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "svcGrpMemberFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: svcGroupMemberRxBytesRate.setStatus('current')
svcGroupMemberRxBytesRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 44)).setObjects(("NS-ROOT-MIB", "svcGrpMemberName"), ("NS-ROOT-MIB", "svcGrpMemberRxBytesRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "svcGrpMemberFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: svcGroupMemberRxBytesRateNormal.setStatus('current')
svcGroupMemberTxBytesRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 45)).setObjects(("NS-ROOT-MIB", "svcGrpMemberName"), ("NS-ROOT-MIB", "svcGrpMemberTxBytesRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "svcGrpMemberFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: svcGroupMemberTxBytesRate.setStatus('current')
svcGroupMemberTxBytesRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 46)).setObjects(("NS-ROOT-MIB", "svcGrpMemberName"), ("NS-ROOT-MIB", "svcGrpMemberTxBytesRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "svcGrpMemberFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: svcGroupMemberTxBytesRateNormal.setStatus('current')
svcGroupMemberSynfloodRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 47)).setObjects(("NS-ROOT-MIB", "svcGrpMemberName"), ("NS-ROOT-MIB", "svcGrpMemberSynfloodRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "svcGrpMemberFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: svcGroupMemberSynfloodRate.setStatus('current')
svcGroupMemberSynfloodNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 48)).setObjects(("NS-ROOT-MIB", "svcGrpMemberName"), ("NS-ROOT-MIB", "svcGrpMemberSynfloodRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "svcGrpMemberFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: svcGroupMemberSynfloodNormal.setStatus('current')
svcGroupMemberMaxClients = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 49)).setObjects(("NS-ROOT-MIB", "svcGrpMemberName"), ("NS-ROOT-MIB", "svcGrpMemberEstablishedConn"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "svcGrpMemberFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: svcGroupMemberMaxClients.setStatus('current')
svcGroupMemberMaxClientsNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 50)).setObjects(("NS-ROOT-MIB", "svcGrpMemberName"), ("NS-ROOT-MIB", "svcGrpMemberEstablishedConn"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "svcGrpMemberFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: svcGroupMemberMaxClientsNormal.setStatus('current')
averageCpuUtilization = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 51)).setObjects(("NS-ROOT-MIB", "resCpuUsage"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: averageCpuUtilization.setStatus('current')
averageCpuUtilizationNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 52)).setObjects(("NS-ROOT-MIB", "resCpuUsage"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: averageCpuUtilizationNormal.setStatus('current')
monRespTimeoutAboveThresh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 53)).setObjects(("NS-ROOT-MIB", "monServiceName"), ("NS-ROOT-MIB", "monitorName"), ("NS-ROOT-MIB", "responseTimeoutThreshold"), ("NS-ROOT-MIB", "alarmMonrespto"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: monRespTimeoutAboveThresh.setStatus('current')
monRespTimeoutBelowThresh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 54)).setObjects(("NS-ROOT-MIB", "monServiceName"), ("NS-ROOT-MIB", "monitorName"), ("NS-ROOT-MIB", "responseTimeoutThreshold"), ("NS-ROOT-MIB", "alarmMonrespto"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: monRespTimeoutBelowThresh.setStatus('current')
netScalerLoginFailure = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 55)).setObjects(("NS-ROOT-MIB", "nsUserName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: netScalerLoginFailure.setStatus('current')
sslCertificateExpiry = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 56)).setObjects(("NS-ROOT-MIB", "sslCertKeyName"), ("NS-ROOT-MIB", "sslDaysToExpire"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: sslCertificateExpiry.setStatus('current')
fanSpeedLow = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 57)).setObjects(("NS-ROOT-MIB", "sysHealthCounterName"), ("NS-ROOT-MIB", "sysHealthCounterValue"), ("NS-ROOT-MIB", "alarmLowThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: fanSpeedLow.setStatus('current')
fanSpeedNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 58)).setObjects(("NS-ROOT-MIB", "sysHealthCounterName"), ("NS-ROOT-MIB", "sysHealthCounterValue"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: fanSpeedNormal.setStatus('current')
voltageLow = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 59)).setObjects(("NS-ROOT-MIB", "sysHealthCounterName"), ("NS-ROOT-MIB", "sysHealthCounterValue"), ("NS-ROOT-MIB", "alarmLowThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: voltageLow.setStatus('current')
voltageNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 60)).setObjects(("NS-ROOT-MIB", "sysHealthCounterName"), ("NS-ROOT-MIB", "sysHealthCounterValue"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: voltageNormal.setStatus('current')
voltageHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 61)).setObjects(("NS-ROOT-MIB", "sysHealthCounterName"), ("NS-ROOT-MIB", "sysHealthCounterValue"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: voltageHigh.setStatus('current')
temperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 62)).setObjects(("NS-ROOT-MIB", "sysHealthCounterName"), ("NS-ROOT-MIB", "sysHealthCounterValue"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: temperatureHigh.setStatus('current')
temperatureNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 63)).setObjects(("NS-ROOT-MIB", "sysHealthCounterName"), ("NS-ROOT-MIB", "sysHealthCounterValue"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: temperatureNormal.setStatus('current')
diskUsageHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 64)).setObjects(("NS-ROOT-MIB", "sysHealthDiskName"), ("NS-ROOT-MIB", "sysHealthDiskPerusage"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: diskUsageHigh.setStatus('current')
diskUsageNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 65)).setObjects(("NS-ROOT-MIB", "sysHealthDiskName"), ("NS-ROOT-MIB", "sysHealthDiskPerusage"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: diskUsageNormal.setStatus('current')
interfaceThroughputLow = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 66)).setObjects(("NS-ROOT-MIB", "ifName"), ("NS-ROOT-MIB", "ifThroughput"), ("NS-ROOT-MIB", "ifMinThroughput"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: interfaceThroughputLow.setStatus('current')
interfaceThroughputNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 67)).setObjects(("NS-ROOT-MIB", "ifName"), ("NS-ROOT-MIB", "ifThroughput"), ("NS-ROOT-MIB", "ifMinThroughput"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: interfaceThroughputNormal.setStatus('current')
haVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 68)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: haVersionMismatch.setStatus('current')
haSyncFailure = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 69)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: haSyncFailure.setStatus('current')
haNoHeartbeats = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 70)).setObjects(("NS-ROOT-MIB", "haNicsMonitorFailed"), ("NS-ROOT-MIB", "haLastNicMonitorFailed"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: haNoHeartbeats.setStatus('current')
haBadSecState = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 71)).setObjects(("NS-ROOT-MIB", "haPeerSystemState"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: haBadSecState.setStatus('current')
interfaceBWUseHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 72)).setObjects(("NS-ROOT-MIB", "ifName"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "platformLicensedThroughput"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: interfaceBWUseHigh.setStatus('current')
interfaceBWUseNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 73)).setObjects(("NS-ROOT-MIB", "ifName"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "platformLicensedThroughput"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: interfaceBWUseNormal.setStatus('current')
aggregateBWUseHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 74)).setObjects(("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "platformLicensedThroughput"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: aggregateBWUseHigh.setStatus('current')
aggregateBWUseNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 75)).setObjects(("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "platformLicensedThroughput"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: aggregateBWUseNormal.setStatus('current')
vserverRhiStateChange = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 76)).setObjects(("NS-ROOT-MIB", "alarmVipRhiState"), ("NS-ROOT-MIB", "alarmVipRhiInetAddressType"), ("NS-ROOT-MIB", "alarmVipRhiInetAddress"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: vserverRhiStateChange.setStatus('current')
rateLmtThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 77)).setObjects(("NS-ROOT-MIB", "alarmRateLmtThresholdExceeded"), ("NS-ROOT-MIB", "ipAddressGathered"), ("NS-ROOT-MIB", "stringComputed"), ("NS-ROOT-MIB", "platformLicensedThroughput"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: rateLmtThresholdExceed.setStatus('current')
monProbeFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 78)).setObjects(("NS-ROOT-MIB", "monServiceName"), ("NS-ROOT-MIB", "monitorName"), ("NS-ROOT-MIB", "alarmProbeFailedRetries"), ("NS-ROOT-MIB", "monitorRetrys"), ("NS-ROOT-MIB", "alarmProbeFailedErrorString"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: monProbeFailed.setStatus('current')
temperatureCpuHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 79)).setObjects(("NS-ROOT-MIB", "sysHealthCounterName"), ("NS-ROOT-MIB", "sysHealthCounterValue"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: temperatureCpuHigh.setStatus('current')
temperatureCpuNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 80)).setObjects(("NS-ROOT-MIB", "sysHealthCounterName"), ("NS-ROOT-MIB", "sysHealthCounterValue"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: temperatureCpuNormal.setStatus('current')
entityofs = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 81)).setObjects(("NS-ROOT-MIB", "entityName"), ("NS-ROOT-MIB", "alarmEntityCurState"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: entityofs.setStatus('current')
powerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 82)).setObjects(("NS-ROOT-MIB", "sysHealthCounterName"), ("NS-ROOT-MIB", "sysHealthCounterValue"), ("NS-ROOT-MIB", "sysHealthPowerSupplyStatus"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: powerSupplyFailed.setStatus('current')
powerSupplyNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 83)).setObjects(("NS-ROOT-MIB", "sysHealthCounterName"), ("NS-ROOT-MIB", "sysHealthCounterValue"), ("NS-ROOT-MIB", "sysHealthPowerSupplyStatus"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: powerSupplyNormal.setStatus('current')
entityNameChanged = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 84)).setObjects(("NS-ROOT-MIB", "entityName"), ("NS-ROOT-MIB", "entityOldName"), ("NS-ROOT-MIB", "entityNewName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: entityNameChanged.setStatus('current')
haPropFailure = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 85)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: haPropFailure.setStatus('current')
ipConflict = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 86)).setObjects(("NS-ROOT-MIB", "ipConflictAddr"), ("NS-ROOT-MIB", "ipConflictMacAddr"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: ipConflict.setStatus('current')
appfwStartUrl = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 87)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwStartUrl.setStatus('current')
appfwDenyUrl = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 88)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwDenyUrl.setStatus('current')
appfwRefererHeader = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 89)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwRefererHeader.setStatus('current')
appfwCSRFTag = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 90)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwCSRFTag.setStatus('current')
appfwCookie = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 91)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwCookie.setStatus('current')
appfwFieldConsistency = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 92)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwFieldConsistency.setStatus('current')
appfwBufferOverflow = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 93)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwBufferOverflow.setStatus('current')
appfwFieldFormat = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 94)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwFieldFormat.setStatus('current')
appfwSafeCommerce = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 95)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwSafeCommerce.setStatus('current')
appfwSafeObject = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 96)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwSafeObject.setStatus('current')
appfwPolicyHit = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 97)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwPolicyHit.setStatus('current')
appfwXSS = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 98)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwXSS.setStatus('current')
appfwXMLXSS = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 99)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwXMLXSS.setStatus('current')
appfwSQL = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 100)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwSQL.setStatus('current')
appfwXMLSQL = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 101)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwXMLSQL.setStatus('current')
appfwXMLAttachment = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 102)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwXMLAttachment.setStatus('current')
appfwXMLDos = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 103)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwXMLDos.setStatus('current')
appfwXMLValidation = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 104)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwXMLValidation.setStatus('current')
appfwXMLWSI = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 105)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwXMLWSI.setStatus('current')
appfwXMLSchemaCompile = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 106)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwXMLSchemaCompile.setStatus('current')
appfwXMLSoapFault = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 107)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwXMLSoapFault.setStatus('current')
dnskeyExpiry = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 108)).setObjects(("NS-ROOT-MIB", "dnskeyName"), ("NS-ROOT-MIB", "dnskeyTimeToExpire"), ("NS-ROOT-MIB", "dnskeyUnitsOfExpiry"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: dnskeyExpiry.setStatus('current')
platformRateLimitThresholdHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 109)).setObjects(("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "platformLicensedThroughput"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: platformRateLimitThresholdHigh.setStatus('current')
platformRateLimitThresholdNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 110)).setObjects(("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "platformLicensedThroughput"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: platformRateLimitThresholdNormal.setStatus('current')
platformPpsLimitThresholdHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 111)).setObjects(("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "platformLicensedPPS"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: platformPpsLimitThresholdHigh.setStatus('current')
platformPpsLimitThresholdNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 112)).setObjects(("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "platformLicensedPPS"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: platformPpsLimitThresholdNormal.setStatus('current')
platformRateLimitPktDrop = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 113)).setObjects(("NS-ROOT-MIB", "platformRateLimitPacketDropCount"), ("NS-ROOT-MIB", "platformLicensedThroughput"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: platformRateLimitPktDrop.setStatus('current')
platformPpsLimitPktDrop = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 114)).setObjects(("NS-ROOT-MIB", "platformRateLimitPacketDropCount"), ("NS-ROOT-MIB", "platformLicensedPPS"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: platformPpsLimitPktDrop.setStatus('current')
DataStreamRateLimitHit = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 115))
if mibBuilder.loadTexts: DataStreamRateLimitHit.setStatus('obsolete')
haLicenseCheck = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 116)).setObjects(("NS-ROOT-MIB", "haLicenseMatchState"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: haLicenseCheck.setStatus('current')
sslCardFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 117)).setObjects(("NS-ROOT-MIB", "sslCardStatusMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: sslCardFailed.setStatus('current')
sslCardNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 118)).setObjects(("NS-ROOT-MIB", "sslCardStatusMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: sslCardNormal.setStatus('current')
warmRestartEvent = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 119)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: warmRestartEvent.setStatus('current')
hardDiskDriveErrors = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 120)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: hardDiskDriveErrors.setStatus('current')
compactFlashErrors = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 121)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: compactFlashErrors.setStatus('current')
callHomeUploadEvent = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 122)).setObjects(("NS-ROOT-MIB", "callHomeUploadEventStatusMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: callHomeUploadEvent.setStatus('current')
rsa1024KeyExThresholdHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 123)).setObjects(("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: rsa1024KeyExThresholdHigh.setStatus('current')
rsa1024KeyExThresholdNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 124)).setObjects(("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: rsa1024KeyExThresholdNormal.setStatus('current')
rsa2048KeyExThresholdHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 125)).setObjects(("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: rsa2048KeyExThresholdHigh.setStatus('current')
rsa2048KeyExThresholdNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 126)).setObjects(("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: rsa2048KeyExThresholdNormal.setStatus('current')
rsa4096KeyExThresholdHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 127)).setObjects(("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: rsa4096KeyExThresholdHigh.setStatus('current')
rsa4096KeyExThresholdNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 128)).setObjects(("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: rsa4096KeyExThresholdNormal.setStatus('current')
sslCurSessionInUseHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 129)).setObjects(("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: sslCurSessionInUseHigh.setStatus('current')
sslCurSessionInUseNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 130)).setObjects(("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: sslCurSessionInUseNormal.setStatus('current')
clusterNodeHealth = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 131)).setObjects(("NS-ROOT-MIB", "clNodeIP"), ("NS-ROOT-MIB", "clNodeEffectiveHealth"), ("NS-ROOT-MIB", "clNodeHealthReason"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: clusterNodeHealth.setStatus('current')
clusterNodeQuorum = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 132)).setObjects(("NS-ROOT-MIB", "clNodeViewQuorum"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: clusterNodeQuorum.setStatus('current')
clusterVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 133)).setObjects(("NS-ROOT-MIB", "clNodeIP"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: clusterVersionMismatch.setStatus('current')
clusterCCOChange = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 134)).setObjects(("NS-ROOT-MIB", "oldCCOIP"), ("NS-ROOT-MIB", "newCCOIP"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: clusterCCOChange.setStatus('current')
clusterOVSChange = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 135)).setObjects(("NS-ROOT-MIB", "oldOVS"), ("NS-ROOT-MIB", "newOVS"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: clusterOVSChange.setStatus('current')
clusterSyncFailure = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 136)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: clusterSyncFailure.setStatus('current')
clusterPropFailure = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 137)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: clusterPropFailure.setStatus('current')
stickyPrimary = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 138)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: stickyPrimary.setStatus('current')
inbandProtocolVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 139)).setObjects(("NS-ROOT-MIB", "qosdVersion"), ("NS-ROOT-MIB", "brVersion"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: inbandProtocolVersionMismatch.setStatus('current')
sslChipReinit = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 140)).setObjects(("NS-ROOT-MIB", "sslChipName"), ("NS-ROOT-MIB", "sslChipReinitCount"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: sslChipReinit.setStatus('current')
appfwViolations = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 141)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwViolations.setStatus('current')
vridStateChange = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 142)).setObjects(("NS-ROOT-MIB", "vrid"), ("NS-ROOT-MIB", "vridBoundVIP"), ("NS-ROOT-MIB", "newVridPriority"), ("NS-ROOT-MIB", "effectiveVridPriority"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: vridStateChange.setStatus('current')
portAllocFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 143)).setObjects(("NS-ROOT-MIB", "dstip"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: portAllocFailed.setStatus('current')
lldpRemTablesChange = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 144)).setObjects(("NS-ROOT-MIB", "lldpRemLocalPortNum"), ("NS-ROOT-MIB", "lldpRemChassisId"), ("NS-ROOT-MIB", "lldpRemPortId"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: lldpRemTablesChange.setStatus('current')
ipv6AddressDuplicated = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 145)).setObjects(("NS-ROOT-MIB", "nsIPAddressType"), ("NS-ROOT-MIB", "nsIPAddress"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: ipv6AddressDuplicated.setStatus('current')
lsnPortAllocFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 146)).setObjects(("NS-ROOT-MIB", "lsnGrpName"), ("NS-ROOT-MIB", "lsnSubscrTD"), ("NS-ROOT-MIB", "protocol"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: lsnPortAllocFailed.setStatus('current')
lsnPortQuotaExceed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 147)).setObjects(("NS-ROOT-MIB", "lsnGrpName"), ("NS-ROOT-MIB", "lsnSubscrTD"), ("NS-ROOT-MIB", "protocol"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: lsnPortQuotaExceed.setStatus('current')
lsnSessionQuotaExceed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 148)).setObjects(("NS-ROOT-MIB", "lsnGrpName"), ("NS-ROOT-MIB", "lsnSubscrTD"), ("NS-ROOT-MIB", "protocol"), ("NS-ROOT-MIB", "lsnSessLimitExceededBy"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: lsnSessionQuotaExceed.setStatus('current')
haVersionMatched = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 149)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: haVersionMatched.setStatus('current')
haSyncSucceded = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 150)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: haSyncSucceded.setStatus('current')
haSecondaryStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 151)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: haSecondaryStateNormal.setStatus('current')
haHeartbeatsRecvd = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 152)).setObjects(("NS-ROOT-MIB", "haNicMonitorSucceeded"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: haHeartbeatsRecvd.setStatus('current')
vserverSpillOver = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 153)).setObjects(("NS-ROOT-MIB", "vsvrName"), ("NS-ROOT-MIB", "vsvrCurSoValue"), ("NS-ROOT-MIB", "vsvrSoMethod"), ("NS-ROOT-MIB", "vsvrSoThresh"), ("NS-ROOT-MIB", "vsvrFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: vserverSpillOver.setStatus('current')
haPropSuccess = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 154)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: haPropSuccess.setStatus('current')
partitionConfigEvent = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 155)).setObjects(("NS-ROOT-MIB", "nsPartitionName"), ("NS-ROOT-MIB", "operation"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: partitionConfigEvent.setStatus('current')
partitionSwitched = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 156)).setObjects(("NS-ROOT-MIB", "fromPartition"), ("NS-ROOT-MIB", "toPartition"), ("NS-ROOT-MIB", "nsUserName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: partitionSwitched.setStatus('current')
partitionCONNLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 157)).setObjects(("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: partitionCONNLimitExceeded.setStatus('current')
partitionCONNLimitNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 158)).setObjects(("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: partitionCONNLimitNormal.setStatus('current')
partitionBWLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 159)).setObjects(("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: partitionBWLimitExceeded.setStatus('current')
clusterBackplaneHBMissing = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 160)).setObjects(("NS-ROOT-MIB", "clPeerID"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: clusterBackplaneHBMissing.setStatus('current')
pooledLicenseGraceStarted = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 161)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: pooledLicenseGraceStarted.setStatus('current')
pooledLicenseGraceNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 162)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: pooledLicenseGraceNormal.setStatus('current')
pooledLicenseGracePeriodOver = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 163)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: pooledLicenseGracePeriodOver.setStatus('current')
pooledLicenseCapacityPartial = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 164)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: pooledLicenseCapacityPartial.setStatus('current')
pooledLicenseCapacityNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 165)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: pooledLicenseCapacityNormal.setStatus('current')
gslbSiteMEPflap = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 166)).setObjects(("NS-ROOT-MIB", "gslbSite"), ("NS-ROOT-MIB", "siteIP"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: gslbSiteMEPflap.setStatus('current')
mibBuilder.exportSymbols("NS-ROOT-MIB", nsExpressionTable=nsExpressionTable, entityRxRateNormal=entityRxRateNormal, diskUsageNormal=diskUsageNormal, svcGroupMemberSynfloodRate=svcGroupMemberSynfloodRate, resMemUsage=resMemUsage, cpeExprConfigStatsTable=cpeExprConfigStatsTable, cacheTotSuccessfulRevalidationHigh=cacheTotSuccessfulRevalidationHigh, indexHtmlHit=indexHtmlHit, saclsCount=saclsCount, scRuleName=scRuleName, pqpolicypqTotAvgQueueDepth=pqpolicypqTotAvgQueueDepth, cmpTotRequests=cmpTotRequests, siteMetricMepStatus=siteMetricMepStatus, customEntries=customEntries, crbVServerName=crbVServerName, scTotCondTriggered=scTotCondTriggered, ipTotRxMbitsHigh=ipTotRxMbitsHigh, lsnGrpName=lsnGrpName, vlanTotTxBytesHigh=vlanTotTxBytesHigh, nsLLDPRemManAddrEntry=nsLLDPRemManAddrEntry, nsCacheStatsGroup=nsCacheStatsGroup, vsvrSsleRSA=vsvrSsleRSA, nwMetricMepStatus=nwMetricMepStatus, lsnLogTotWrongProtocols=lsnLogTotWrongProtocols, totcell=totcell, aclName=aclName, appFirewallTrapsDropped=appFirewallTrapsDropped, gslbConfig=gslbConfig, httpErrLargeCtlen=httpErrLargeCtlen, memSizeMB=memSizeMB, serviceHitsHigh=serviceHitsHigh, operation=operation, entitySynfloodNormal=entitySynfloodNormal, cacheErrMemAlloc=cacheErrMemAlloc, sslTotTLSv11RenegSessions=sslTotTLSv11RenegSessions, tcpTotSynFlush=tcpTotSynFlush, crPolBindConfigEntry=crPolBindConfigEntry, appfwappFirewallViolXmlSqlViolationsPerProfile=appfwappFirewallViolXmlSqlViolationsPerProfile, pqRuleName=pqRuleName, vsvrSslTLSv1Protocol=vsvrSslTLSv1Protocol, rsa2048KeyExThresholdHigh=rsa2048KeyExThresholdHigh, haCurStatus=haCurStatus, ipv6FragTotPktsProcessNoReass=ipv6FragTotPktsProcessNoReass, qdepth=qdepth, monitorMemberTable=monitorMemberTable, vserverRhiStateChange=vserverRhiStateChange, dtlsStaValidation=dtlsStaValidation, caTotRequests=caTotRequests, sslCardStatus=sslCardStatus, svcGrpMemberGroupFullName=svcGrpMemberGroupFullName, httpTotRxResponseBytes=httpTotRxResponseBytes, modeStaticRouteAdv=modeStaticRouteAdv, vsvrCurTotalVpnUsers=vsvrCurTotalVpnUsers, mptcpTotPendSFReplaced=mptcpTotPendSFReplaced, nsCaStatsGroup=nsCaStatsGroup, pqpolicypqTotQueueWaitTime=pqpolicypqTotQueueWaitTime, psId=psId, sslBeTotSSLv3SessionsLow=sslBeTotSSLv3SessionsLow, vserverPqpolicyEntry=vserverPqpolicyEntry, acl6TotPktsAllowed=acl6TotPktsAllowed, sslTotSSLv3HandshakesHigh=sslTotSSLv3HandshakesHigh, svcAvgTransactionTime=svcAvgTransactionTime, pqpolicypqTotClientConnections=pqpolicypqTotClientConnections, sslCrlInputFormat=sslCrlInputFormat, domain=domain, modeUseSubnetIp=modeUseSubnetIp, nsInatGlobalStats=nsInatGlobalStats, lsnLogTotUdpSessionDeleteEntries=lsnLogTotUdpSessionDeleteEntries, vsvrscpolicyPrimaryIPAddress=vsvrscpolicyPrimaryIPAddress, dosAvgDospriClients=dosAvgDospriClients, sslTotDH1024keyExchanges=sslTotDH1024keyExchanges, thresholdFail=thresholdFail, sslTot256BitAESGCMCiphers=sslTot256BitAESGCMCiphers, appfwappFirewallViolCreditCardPerProfile=appfwappFirewallViolCreditCardPerProfile, alarmCurrentValue=alarmCurrentValue, maxConnections=maxConnections, lldpStatsRemTablesAgeouts=lldpStatsRemTablesAgeouts, vlancDevno=vlancDevno, vsvrSslDHFilePath=vsvrSslDHFilePath, ipAddress=ipAddress, PYSNMP_MODULE_ID=netScaler, cswConfigTable=cswConfigTable, cacheNumObjSavedOnDisk=cacheNumObjSavedOnDisk, domainname=domainname, icmpTotRxPkts=icmpTotRxPkts, sslTotRSA4096keyExchanges=sslTotRSA4096keyExchanges, featureContentSwitching=featureContentSwitching, maxClientsNormal=maxClientsNormal, memFailFlushTrigger=memFailFlushTrigger, vlanTable=vlanTable, vsvrSoThreshold=vsvrSoThreshold, cspolicyActionName=cspolicyActionName, dosPolicyTable=dosPolicyTable, domainNameService=domainNameService, cacFLVVid=cacFLVVid, appfwappFirewallViolXmlGenericViolationsPerProfile=appfwappFirewallViolXmlGenericViolationsPerProfile, featureGslb=featureGslb, sslTot64BitRC4CiphersHigh=sslTot64BitRC4CiphersHigh, mptcpPlainackRST=mptcpPlainackRST, clusterNodeHealth=clusterNodeHealth, ifRxAvgBandwidthUsage=ifRxAvgBandwidthUsage, cacheTotRequests=cacheTotRequests, spdyv2TotStreams=spdyv2TotStreams, tcpTotSynHeld=tcpTotSynHeld, scperPolicyStatisticsEntry=scperPolicyStatisticsEntry, sslCipherGroupTable=sslCipherGroupTable, sslSessionsPerSec=sslSessionsPerSec, appFirewallViolSQL=appFirewallViolSQL, nsIpAddrTable=nsIpAddrTable, sslBeTotSessionMultiplexAttemptSuccessHigh=sslBeTotSessionMultiplexAttemptSuccessHigh, monitorResponseTimeoutThreshExceed=monitorResponseTimeoutThreshExceed, caMicrosoftSmoothStreamingPlaylistVidcacheBytes=caMicrosoftSmoothStreamingPlaylistVidcacheBytes, memUtilization=memUtilization, udpBadChecksum=udpBadChecksum, vsvrTotalResponseBytes=vsvrTotalResponseBytes, nsDomainNameServiceGroup=nsDomainNameServiceGroup, appFirewallRedirects=appFirewallRedirects, cacheNumCached=cacheNumCached, sslTotDecSw=sslTotDecSw, icmpTotNoUdpConn=icmpTotNoUdpConn, staRequestSent=staRequestSent, scUnSupBrow=scUnSupBrow, sslTotSSLv2Transactions=sslTotSSLv2Transactions, contentFiltersEntry=contentFiltersEntry, ipTotBadlensHigh=ipTotBadlensHigh, sacl6TotHits=sacl6TotHits, sslBeTotSSLv3Handshakes=sslBeTotSSLv3Handshakes, udpTotUnknownSvcPkts=udpTotUnknownSvcPkts, tcpTotRxPkts=tcpTotRxPkts, pcbTotZombieCall=pcbTotZombieCall, tcpErrIpPortFail=tcpErrIpPortFail, appFirewallViolSignature=appFirewallViolSignature, partitionSwitched=partitionSwitched, timesflushed=timesflushed, svcscpolicyscTotalRequestBytes=svcscpolicyscTotalRequestBytes, httpErrServerBusyHigh=httpErrServerBusyHigh, dosqdepth=dosqdepth, httpTotTxResponseBytesLow=httpTotTxResponseBytesLow, vlanEntry=vlanEntry, ifErrDroppedRxPktsRl=ifErrDroppedRxPktsRl, sslBeTotSHAMac=sslBeTotSHAMac, lldpStatsRemTablesDeletes=lldpStatsRemTablesDeletes, primaryserviceIp=primaryserviceIp, cacheTotMissesHigh=cacheTotMissesHigh, sslBeTotRSA2048keyExchangesHigh=sslBeTotRSA2048keyExchangesHigh, sslTotTransactionsLow=sslTotTransactionsLow, mptcpErrFastCloseKey=mptcpErrFastCloseKey, httpErrIncompleteResponsesLow=httpErrIncompleteResponsesLow, nsSysHealthEntry=nsSysHealthEntry, certBindingConfigTable=certBindingConfigTable, contentFiltersTable=contentFiltersTable, udpTotUnknownSvcPktsHigh=udpTotUnknownSvcPktsHigh, svcscpolicyscTotalClientTTLB=svcscpolicyscTotalClientTTLB, vlanAliasName=vlanAliasName, dnsTotCacheEntriesFlush=dnsTotCacheEntriesFlush, siteIP=siteIP, totalDataCompressionRatio=totalDataCompressionRatio, httpErrServerBusyLow=httpErrServerBusyLow, deCompTcpErrMoreData=deCompTcpErrMoreData, lsnTotDSLiteTxPkts=lsnTotDSLiteTxPkts, portAllocFailed=portAllocFailed, serverEntry=serverEntry, featureSSLVPN=featureSSLVPN, appFirewallViolXdosViolations=appFirewallViolXdosViolations, staMonSucc=staMonSucc, ActionType=ActionType, scUrlHits=scUrlHits, ipTotTxPktsHigh=ipTotTxPktsHigh, pbr6TotPktsDenied=pbr6TotPktsDenied, haErrPortSilent=haErrPortSilent, sslTotMD5Mac=sslTotMD5Mac, svcgrpSvcGroupName=svcgrpSvcGroupName, haErrPropTimeout=haErrPropTimeout, tcpWaitToData=tcpWaitToData, mptcpTotMpcapSession=mptcpTotMpcapSession, lsnGrpTotUdpTranslBytes=lsnGrpTotUdpTranslBytes, sslTot56BitRC2Ciphers=sslTot56BitRC2Ciphers, vsvrTotalPktsSent=vsvrTotalPktsSent, dh=dh, haTotPktRx=haTotPktRx, cacheRedirection=cacheRedirection, ipBridgeGroup=ipBridgeGroup, svcGrpMemberRequestRate=svcGrpMemberRequestRate, authRSA=authRSA, nsLsnStatsGroup=nsLsnStatsGroup, sslBeTot56BitRC4CiphersHigh=sslBeTot56BitRC4CiphersHigh, phyIpAddress=phyIpAddress, udpCurRateThresholdExceedsLow=udpCurRateThresholdExceedsLow, cacMP4VidHR=cacMP4VidHR, ifErrTxNoNSB=ifErrTxNoNSB, inputFormat=inputFormat, appfwappFirewallRedirectsPerProfile=appfwappFirewallRedirectsPerProfile, sslTotDH1024keyExchangesHigh=sslTotDH1024keyExchangesHigh, nsCompressionStatsGroup=nsCompressionStatsGroup, svcGrpMemberTotalRequests=svcGrpMemberTotalRequests, acl6TotMisses=acl6TotMisses, ipv6TotRxBytes=ipv6TotRxBytes, cacheTotInvalidationRequests=cacheTotInvalidationRequests, sslTotTransactionsHigh=sslTotTransactionsHigh, gslbPoliciesTable=gslbPoliciesTable, caAndroidBytesHR=caAndroidBytesHR, nsLLDPRemSystemsGroup=nsLLDPRemSystemsGroup, appfwFieldFormat=appfwFieldFormat, sslBeTotDH2048keyExchanges=sslBeTotDH2048keyExchanges, lsnTotRxPkts=lsnTotRxPkts, svcTotalSynsRecvdHigh=svcTotalSynsRecvdHigh, devno=devno, sslBeTotEcdheCurve384=sslBeTotEcdheCurve384, sysHealthDiskUsed=sysHealthDiskUsed, cpeconfigpolicyTable=cpeconfigpolicyTable, sessHeader=sessHeader, acl6TotCount=acl6TotCount, sslConfig=sslConfig, cacAppleLiveStreamingPlaylistVid=cacAppleLiveStreamingPlaylistVid, persistanceTimeout=persistanceTimeout, httpTotRxResponseBytesHigh=httpTotRxResponseBytesHigh, svcscpolicyscTotalServerTTFB=svcscpolicyscTotalServerTTFB, nsTdInetMode=nsTdInetMode, cpuUtilizationNormal=cpuUtilizationNormal, vsvrServiceHits=vsvrServiceHits, deCompTcpRatio=deCompTcpRatio, lsnTotUdpTxPkts=lsnTotUdpTxPkts, appfwappFirewallViolBufferOverflowPerProfile=appfwappFirewallViolBufferOverflowPerProfile, vsvrCurClntConnections=vsvrCurClntConnections, sslTotOffloadBulkDES=sslTotOffloadBulkDES, commandFailureReason=commandFailureReason, nsRnatGlobalStats=nsRnatGlobalStats, psVsPort=psVsPort, sslTotRSA2048keyExchangesHigh=sslTotRSA2048keyExchangesHigh, serviceRxBytesRate=serviceRxBytesRate, appFirewallViolXmlSoapFaultViolations=appFirewallViolXmlSoapFaultViolations, inatname=inatname, servicePersistentHits=servicePersistentHits, appfwProfileEntry=appfwProfileEntry, lsnLogTotNontcpPortblockDeallocs=lsnLogTotNontcpPortblockDeallocs, scDelayThreshold=scDelayThreshold, ipv6TotNeigborDiscovered=ipv6TotNeigborDiscovered, cacMsftSmthStrmVid=cacMsftSmthStrmVid, udpTotRxPktsHigh=udpTotRxPktsHigh, lldpMessageTxInterval=lldpMessageTxInterval, scResetStats=scResetStats, lsnSubscrTD=lsnSubscrTD, caIosHR=caIosHR, svcscpolicytotClientTransaction=svcscpolicytotClientTransaction, socksConnRespSent=socksConnRespSent, vsvrSurgeCount=vsvrSurgeCount, svcGrpMemberAvgSvrTTFB=svcGrpMemberAvgSvrTTFB, cacApleLiveStrmngVid=cacApleLiveStrmngVid, lldpLocPortId=lldpLocPortId, ipTotTxPktsLow=ipTotTxPktsLow, httpTotHTTP10reqLow=httpTotHTTP10reqLow, sslBeTotSessionMultiplexAttemptsLow=sslBeTotSessionMultiplexAttemptsLow, alternatecontentServicename=alternatecontentServicename, dnsTotSRVrecFailed=dnsTotSRVrecFailed)
mibBuilder.exportSymbols("NS-ROOT-MIB", pengPolicyHits=pengPolicyHits, sslTotSSLv3ClientAuthenticationsLow=sslTotSSLv3ClientAuthenticationsLow, sslTot56BitDESCiphersHigh=sslTot56BitDESCiphersHigh, tcpTotSyn=tcpTotSyn, sslBeTotSSLv3HandshakesHigh=sslBeTotSSLv3HandshakesHigh, sysTotConfigChanges=sysTotConfigChanges, gslbSitePublicInetAddress=gslbSitePublicInetAddress, ipv6TotLookupDone=ipv6TotLookupDone, scConfig=scConfig, mcYoutubedash=mcYoutubedash, sslTotSessionHits=sslTotSessionHits, httpTotOthersHigh=httpTotOthersHigh, certKeyEntry=certKeyEntry, sslTotSSLv3Sessions=sslTotSSLv3Sessions, featureIPv6ProtocolTranslation=featureIPv6ProtocolTranslation, svcTotalServers=svcTotalServers, lsnTotNAT64TcpDrpPkts=lsnTotNAT64TcpDrpPkts, crlEntry=crlEntry, icmpTotRxEchoReplyHigh=icmpTotRxEchoReplyHigh, sslBeTotSessionMultiplexAttemptFailsLow=sslBeTotSessionMultiplexAttemptFailsLow, lsnPortQuotaExceed=lsnPortQuotaExceed, sslTotRSA1024keyExchangesHigh=sslTotRSA1024keyExchangesHigh, vsvrscpolicyscAverageClientTTLB=vsvrscpolicyscAverageClientTTLB, linkDown=linkDown, mcUnidentified=mcUnidentified, nsCPUname=nsCPUname, aclTotPktsReusedLow=aclTotPktsReusedLow, vsvrTotalResponsesHigh=vsvrTotalResponsesHigh, entityofs=entityofs, ifnicTxStalls=ifnicTxStalls, appfwappFirewallViolCSRFtagPerProfile=appfwappFirewallViolCSRFtagPerProfile, crmMapName=crmMapName, dnsTotNSrecQueries=dnsTotNSrecQueries, aclTotCount=aclTotCount, appFirewallViolMsgValViolations=appFirewallViolMsgValViolations, appfwSafeCommerce=appfwSafeCommerce, lsnCurSubscribers=lsnCurSubscribers, siteMetricExchange=siteMetricExchange, cpeconfig=cpeconfig, winsRequestHit=winsRequestHit, lsnTotIcmpDrpPkts=lsnTotIcmpDrpPkts, cpeeValue=cpeeValue, mptcpCurMpcapableSessions=mptcpCurMpcapableSessions, vsvrTotSpillOvers=vsvrTotSpillOvers, qualifier=qualifier, lldpRemSysCapSupported=lldpRemSysCapSupported, tcpTotZombieActiveHalfCloseSvrConnFlushed=tcpTotZombieActiveHalfCloseSvrConnFlushed, sslTotHwEncBE=sslTotHwEncBE, pqpolicypqAvgClientTransactionTime=pqpolicypqAvgClientTransactionTime, mcMsSmthStrmPlVidBytespl=mcMsSmthStrmPlVidBytespl, lsnCurDSLiteSessions=lsnCurDSLiteSessions, monRespTimeoutAboveThresh=monRespTimeoutAboveThresh, dnsTotUpdates=dnsTotUpdates, dstUrl=dstUrl, vsvrscpolicyAvgServerTransactionTime=vsvrscpolicyAvgServerTransactionTime, vsvrCurServicesUnKnown=vsvrCurServicesUnKnown, psName=psName, sslBeTotSSLv3Sessions=sslBeTotSSLv3Sessions, svcState=svcState, vsvrTotalPktsSentHigh=vsvrTotalPktsSentHigh, lsnTotNAT64TxPkts=lsnTotNAT64TxPkts, lsnCurNAT64IcmpSessions=lsnCurNAT64IcmpSessions, ifTotNetScalerPkts=ifTotNetScalerPkts, cacheUtilizedMemoryKB=cacheUtilizedMemoryKB, vsvrServiceFullName=vsvrServiceFullName, vsvrSynfloodRate=vsvrSynfloodRate, sslTotMD5MacHigh=sslTotMD5MacHigh, crVsMiss=crVsMiss, ipTotOutOfOrderFrag=ipTotOutOfOrderFrag, saclStatsGroup=saclStatsGroup, svcgroupmemCount=svcgroupmemCount, httpErrLargeChunk=httpErrLargeChunk, caAACaudiobytes=caAACaudiobytes, appfwStartUrl=appfwStartUrl, sslTotBkendTlSv11Renego=sslTotBkendTlSv11Renego, pptpOutCallReq=pptpOutCallReq, dnsCurArecord=dnsCurArecord, vrid=vrid, sslTotBkendSessionReNegotiate=sslTotBkendSessionReNegotiate, lsnCurNAT64TcpSessions=lsnCurNAT64TcpSessions, pqpolicyDropped=pqpolicyDropped, monitorFailedStr=monitorFailedStr, ipv6TotDynamicRoutes=ipv6TotDynamicRoutes, cacheTotRequestsHigh=cacheTotRequestsHigh, pqTotalPolicyMatches=pqTotalPolicyMatches, tcpTotServerConnClosed=tcpTotServerConnClosed, crConfig=crConfig, modeTcpBuffering=modeTcpBuffering, sslTot128BitIDEACiphers=sslTot128BitIDEACiphers, vridBoundVIP=vridBoundVIP, haNoHeartbeats=haNoHeartbeats, vsvrscpolicydestPort=vsvrscpolicydestPort, crProtocolType=crProtocolType, cacheTotNonParameterizedInvalidationRequests=cacheTotNonParameterizedInvalidationRequests, sslTotSSLv3RenegSessions=sslTotSSLv3RenegSessions, vlanTotTxPktsLow=vlanTotTxPktsLow, wsLastMappedIpAddress=wsLastMappedIpAddress, pooledLicenseCapacityNormal=pooledLicenseCapacityNormal, lsnTotTcpTxPkts=lsnTotTcpTxPkts, ifnicRxStalls=ifnicRxStalls, icmpTotNoTcpConn=icmpTotNoTcpConn, htmlInjectionTotalSessions=htmlInjectionTotalSessions, sslTotDHAuthorizationsLow=sslTotDHAuthorizationsLow, aRecQueries=aRecQueries, tcpErrFinRetry=tcpErrFinRetry, sslBeTotMD5MacLow=sslBeTotMD5MacLow, icmpTotRxBytes=icmpTotRxBytes, vServerRequestRate=vServerRequestRate, totalIncompleteRequests=totalIncompleteRequests, ipTotRxMbits=ipTotRxMbits, inatTotpktsent=inatTotpktsent, lldpRemManAddrIfId=lldpRemManAddrIfId, gslbVipName=gslbVipName, curClientConnections=curClientConnections, staConnFailure=staConnFailure, nsdnsRegisterEntry=nsdnsRegisterEntry, ipv6TotIpv4To6Conversions=ipv6TotIpv4To6Conversions, srcDomain=srcDomain, vPathTotL3CntrlPkts=vPathTotL3CntrlPkts, lsnLogTotUdpMappingDeleteEntries=lsnLogTotUdpMappingDeleteEntries, linkUp=linkUp, PersistanceType=PersistanceType, vlanBindIpAddress=vlanBindIpAddress, vsvrTotalPktsSentLow=vsvrTotalPktsSentLow, txCollisions=txCollisions, mptcpErrAddrId0=mptcpErrAddrId0, dnsTotAAAAresponse=dnsTotAAAAresponse, delCompTcpRxBytes=delCompTcpRxBytes, pbr6TotNullDrop=pbr6TotNullDrop, svcdospolicydosPhysicalServiceIP=svcdospolicydosPhysicalServiceIP, svcdospolicydosCurrentJSRate=svcdospolicydosCurrentJSRate, lbvsvrPersistenceTimeOut=lbvsvrPersistenceTimeOut, totalChunkedResponses=totalChunkedResponses, haVersionMismatch=haVersionMismatch, sslTot56BitRC4CiphersHigh=sslTot56BitRC4CiphersHigh, nwMetricExchange=nwMetricExchange, lsnGrpTotIcmpTranslPkts=lsnGrpTotIcmpTranslPkts, vserId=vserId, appfwappFirewallViolSignaturePerProfile=appfwappFirewallViolSignaturePerProfile, serviceEntry=serviceEntry, keyExDH1024=keyExDH1024, sslBeTot40BitDESCiphersHigh=sslBeTot40BitDESCiphersHigh, siteTotalResponseBytes=siteTotalResponseBytes, ipRnatTotRxPkts=ipRnatTotRxPkts, bindId=bindId, AuthorizationStatus=AuthorizationStatus, vlanId=vlanId, curPhysicalServers=curPhysicalServers, svcscpolicyscCurrentClientConnections=svcscpolicyscCurrentClientConnections, sslBeTotDSSAuthorizationsLow=sslBeTotDSSAuthorizationsLow, InputFormat=InputFormat, ipTotMaxClientsHigh=ipTotMaxClientsHigh, sslBeTotSSLv3HandshakesLow=sslBeTotSSLv3HandshakesLow, ifTotRxBytes=ifTotRxBytes, vsvrServiceName=vsvrServiceName, policyName=policyName, pqvsdevno=pqvsdevno, vsvrTotalResponseBytesLow=vsvrTotalResponseBytesLow, svcGrpMemberTicksSinceLastStateChange=svcGrpMemberTicksSinceLastStateChange, ipVxlan=ipVxlan, synflood=synflood, dnsServerRecursion=dnsServerRecursion, aclTotMisses=aclTotMisses, sslTot56BitRC4CiphersLow=sslTot56BitRC4CiphersLow, sslTotNULLCiphersLow=sslTotNULLCiphersLow, ipv6TotIpv6To4Conversions=ipv6TotIpv6To4Conversions, vsvrscpolicyTotOpenConn=vsvrscpolicyTotOpenConn, svcGrpMemberTdId=svcGrpMemberTdId, vsvrscpolicyDesIpAddress=vsvrscpolicyDesIpAddress, scperServiceStatisticsTable=scperServiceStatisticsTable, ifMedia=ifMedia, nsIpStatsGroup=nsIpStatsGroup, acl6TotPktsNAT=acl6TotPktsNAT, dnsTotMXrecQueries=dnsTotMXrecQueries, delCompTcpTxPackets=delCompTcpTxPackets, sslBeSessionsReplacedHigh=sslBeSessionsReplacedHigh, dnsTotAAAArecFailed=dnsTotAAAArecFailed, vsvrCurSrvrConnections=vsvrCurSrvrConnections, httpTotClenRequests=httpTotClenRequests, cspolicyHitsHigh=cspolicyHitsHigh, vserverAdvanceSslConfigEntry=vserverAdvanceSslConfigEntry, vserverCspolicyTable=vserverCspolicyTable, lsnTotNAT64TcpTxBytes=lsnTotNAT64TcpTxBytes, delCompDone=delCompDone, vsvrTotalServicesBound=vsvrTotalServicesBound, httpTotRxRequestBytesLow=httpTotRxRequestBytesLow, svcscpolicyscTotalRequestsReceived=svcscpolicyscTotalRequestsReceived, l3mode=l3mode, cacheBytesServed=cacheBytesServed, appFirewallViolStartURL=appFirewallViolStartURL, virServiceTable=virServiceTable, servicePersistentHitsHigh=servicePersistentHitsHigh, primaryserviceport=primaryserviceport, piPolicyTable=piPolicyTable, sslBeMaxMultiplexedSessions=sslBeMaxMultiplexedSessions, lsnTotNAT64RxBytes=lsnTotNAT64RxBytes, dnsTotAuthAns=dnsTotAuthAns, expressionTotalHits=expressionTotalHits, nsInetVxlan=nsInetVxlan, tcpErrThirdRetransmissions=tcpErrThirdRetransmissions, pbrTotNullDrop=pbrTotNullDrop, serviceCipherBindingEntry=serviceCipherBindingEntry, nsAaaStatsGroup=nsAaaStatsGroup, sslBeTotTLSv12ClientAuthentications=sslBeTotTLSv12ClientAuthentications, nsIp6StatsGroup=nsIp6StatsGroup, serverDelay=serverDelay, icmpCurRateCounter=icmpCurRateCounter, ipaddress=ipaddress, svcdospolicydosTotJSRefused=svcdospolicydosTotJSRefused, mptcpErrfastclose=mptcpErrfastclose, sslBeTot56BitRC4Ciphers=sslBeTot56BitRC4Ciphers, mptcpCurSessWithoutSFs=mptcpCurSessWithoutSFs, lsnCurIcmpSessions=lsnCurIcmpSessions, cipherGroupEntry=cipherGroupEntry, ipVlan=ipVlan, lsnTotDSLiteRxBytes=lsnTotDSLiteRxBytes, svcGrpMemberPrimaryPort=svcGrpMemberPrimaryPort, tcpTotZombieHalfOpenSvrConnFlushed=tcpTotZombieHalfOpenSvrConnFlushed, deCompTcpErrMemory=deCompTcpErrMemory, svcTotalPktsRecvd=svcTotalPktsRecvd, featureHttpDosProtection=featureHttpDosProtection, lldpStatsRxPortFramesTotal=lldpStatsRxPortFramesTotal, sslTotSSLv2ClientAuthenticationsLow=sslTotSSLv2ClientAuthenticationsLow, lldpRemTimeMark=lldpRemTimeMark, certKeyName=certKeyName, monServiceMemberEntry=monServiceMemberEntry, rsa4096KeyExThresholdNormal=rsa4096KeyExThresholdNormal, pptpEchoReq=pptpEchoReq, svcSslClearTextPort=svcSslClearTextPort, vxlanTotTxPkts=vxlanTotTxPkts, sslCertKeyTable=sslCertKeyTable, curConfigGslbVservers=curConfigGslbVservers, caTotgetobjreq=caTotgetobjreq, vsvrscpolicyscAverageServerTTFB=vsvrscpolicyscAverageServerTTFB, httpTotOthers=httpTotOthers, vPathTotL3DataRx=vPathTotL3DataRx, featureCompression=featureCompression, tcpTotClientConnOpenRate=tcpTotClientConnOpenRate, siteMepStatus=siteMepStatus, sslBeTotDH1024keyExchangesLow=sslBeTotDH1024keyExchangesLow, cacheCurMisses=cacheCurMisses, clearTextPort=clearTextPort, aclTotPktsAllowedHigh=aclTotPktsAllowedHigh, sslTotSSLv2HandshakesLow=sslTotSSLv2HandshakesLow, monServiceName=monServiceName, staMonRcvd=staMonRcvd, lsnDSLiteB4Address=lsnDSLiteB4Address, cipher40BitRC2=cipher40BitRC2, appFirewallViolCreditCard=appFirewallViolCreditCard, configurationCmd=configurationCmd, drtmRTO=drtmRTO, deCompTcpErrData=deCompTcpErrData, sslTotDH2048keyExchanges=sslTotDH2048keyExchanges, rnatTotTxSyn=rnatTotTxSyn)
mibBuilder.exportSymbols("NS-ROOT-MIB", mcADTSaudio=mcADTSaudio, sslBeTotTLSv1ClientAuthentications=sslBeTotTLSv1ClientAuthentications, delCompErrNostoreMiss=delCompErrNostoreMiss, crMapConfigTable=crMapConfigTable, httpTotChunkedReqHigh=httpTotChunkedReqHigh, pbr6TotHits=pbr6TotHits, pserIpAddress=pserIpAddress, mcEncDASH=mcEncDASH, icmpTotThresholdExceeds=icmpTotThresholdExceeds, sslv2=sslv2, mcADTSaudioBytes=mcADTSaudioBytes, sslBeTot40BitRC2CiphersHigh=sslBeTot40BitRC2CiphersHigh, sslTotOffloadBulkRC4=sslTotOffloadBulkRC4, cacheTot304HitsHigh=cacheTot304HitsHigh, lsnNAT64SessionsRate=lsnNAT64SessionsRate, delayThreshold=delayThreshold, tcpErrFifthRetransmissions=tcpErrFifthRetransmissions, sslTotBkendCipherAES256=sslTotBkendCipherAES256, dnsTotMultiQuery=dnsTotMultiQuery, cacheTotSuccessfulRevalidation=cacheTotSuccessfulRevalidation, sslTot40BitDESCiphersHigh=sslTot40BitDESCiphersHigh, aggregateBWUseNormal=aggregateBWUseNormal, ifTotTxBytes=ifTotTxBytes, tcpErrSixthRetransmissions=tcpErrSixthRetransmissions, cipherBindServiceName=cipherBindServiceName, caMP4Vid=caMP4Vid, lldpStatsTxPortNum=lldpStatsTxPortNum, mccAppleLiveStrmngVidpl=mccAppleLiveStrmngVidpl, crConfigGroup=crConfigGroup, monitorFailedTimeout=monitorFailedTimeout, tcpErrCltHole=tcpErrCltHole, destinationInetAddressType=destinationInetAddressType, mcMsSmthStrmVidBytes=mcMsSmthStrmVidBytes, sslBeTot56BitDESCiphersHigh=sslBeTot56BitDESCiphersHigh, nsAclEntry=nsAclEntry, httpTotChunkedReqLow=httpTotChunkedReqLow, rnatTotRxPkts=rnatTotRxPkts, appfwFieldConsistency=appfwFieldConsistency, id=id, svcscpolicyscTotalServerTTFBTransactions=svcscpolicyscTotalServerTTFBTransactions, popUps=popUps, serviceType=serviceType, contentFilterHits=contentFilterHits, acl6TotPktsDenied=acl6TotPktsDenied, sslBeTotSSLv3ClientAuthenticationsHigh=sslBeTotSSLv3ClientAuthenticationsHigh, sslBeTotSessionMultiplexAttempts=sslBeTotSessionMultiplexAttempts, temperatureNormal=temperatureNormal, svcActiveConn=svcActiveConn, nsModeInfo=nsModeInfo, sslTotTLSv1RenegSessions=sslTotTLSv1RenegSessions, appFirewallRequests=appFirewallRequests, dosservicestatsTable=dosservicestatsTable, svcTotalResponseBytesHigh=svcTotalResponseBytesHigh, icmpTotRxPktsLow=icmpTotRxPktsLow, sslBeTot128BitIDEACiphersLow=sslBeTot128BitIDEACiphersLow, appFirewallViolSafeObject=appFirewallViolSafeObject, haHeartbeatsRecvd=haHeartbeatsRecvd, serviceTxBytesRate=serviceTxBytesRate, featurePLATFORM=featurePLATFORM, scStatistics=scStatistics, featureAAA=featureAAA, pooledLicenseCapacityPartial=pooledLicenseCapacityPartial, sslTot40BitRC2CiphersLow=sslTot40BitRC2CiphersLow, appfwprofileName=appfwprofileName, powerSupplyNormal=powerSupplyNormal, crpolicyHitsLow=crpolicyHitsLow, nsTdInetFreePorts=nsTdInetFreePorts, wsudpgroup=wsudpgroup, virServiceEntry=virServiceEntry, vsvrInvalidRequestResponse=vsvrInvalidRequestResponse, deCompTcpErrUnknown=deCompTcpErrUnknown, caTotobjstored=caTotobjstored, sslV2TxCount=sslV2TxCount, httpErrPipelinedRequestsHigh=httpErrPipelinedRequestsHigh, lsnTotNAT64UdpDrpPkts=lsnTotNAT64UdpDrpPkts, ipTotUnknownSvcsHigh=ipTotUnknownSvcsHigh, cacheMaxMemoryKB=cacheMaxMemoryKB, sslBeTot128BitRC2Ciphers=sslBeTot128BitRC2Ciphers, sslTotSwEncBE=sslTotSwEncBE, appfwXMLXSS=appfwXMLXSS, resetStats=resetStats, udpCurRateThreshold=udpCurRateThreshold, totalMultiPartResponses=totalMultiPartResponses, lsnTotNAT64UdpRxPkts=lsnTotNAT64UdpRxPkts, wsIfMedia=wsIfMedia, pbrStatsGroup=pbrStatsGroup, lldpLocPortNum=lldpLocPortNum, nsNicStatsGroup=nsNicStatsGroup, httpErrIncompleteHeaders=httpErrIncompleteHeaders, scAlternateContentPath=scAlternateContentPath, cacheRecentPercentOriginBandwidthSaved=cacheRecentPercentOriginBandwidthSaved, aclTotPktsAllowed=aclTotPktsAllowed, appfwDenyUrl=appfwDenyUrl, svcGrpMemberServerName=svcGrpMemberServerName, tcpCurPendingConn=tcpCurPendingConn, saclTotHits=saclTotHits, sslBeTotSessionsLow=sslBeTotSessionsLow, dnsCurSOArecord=dnsCurSOArecord, ActiveActiveState=ActiveActiveState, vsvrscpolicyscTotalServerTTFBTransactions=vsvrscpolicyscTotalServerTTFBTransactions, aaaCurTMSessions=aaaCurTMSessions, cacheTotPetHits=cacheTotPetHits, scGlobalStats=scGlobalStats, lsnTotNAT64TcpRxPkts=lsnTotNAT64TcpRxPkts, ifTotRxMbits=ifTotRxMbits, udpCurRateThresholdExceedsHigh=udpCurRateThresholdExceedsHigh, vsvrscpolicyscTotalResponsesReceived=vsvrscpolicyscTotalResponsesReceived, tagging=tagging, ipRnatCurSessions=ipRnatCurSessions, vlanTotBroadcastPktsLow=vlanTotBroadcastPktsLow, index=index, nsIfStatsEntry=nsIfStatsEntry, monitorName=monitorName, svcdospolicydosTotJSBytesSent=svcdospolicydosTotJSBytesSent, sysIpAddress=sysIpAddress, wsSmoothConnection=wsSmoothConnection, icmpTotPktsDroppedHigh=icmpTotPktsDroppedHigh, gslbStatistics=gslbStatistics, ipTotLandattacksLow=ipTotLandattacksLow, sslTotSessionMissLow=sslTotSessionMissLow, lsnGrpTotIcmpTranslBytes=lsnGrpTotIcmpTranslBytes, serviceGroupTable=serviceGroupTable, ipTotBadMacAddrs=ipTotBadMacAddrs, cacheTotParameterizedNon304Hits=cacheTotParameterizedNon304Hits, dnsServerZoneTable=dnsServerZoneTable, scMaxConnections=scMaxConnections, serverInetAddress=serverInetAddress, sslTotDHAuthorizationsHigh=sslTotDHAuthorizationsHigh, sslTotRSAAuthorizationsLow=sslTotRSAAuthorizationsLow, sslBeTotSessionMultiplexAttemptsHigh=sslBeTotSessionMultiplexAttemptsHigh, svcscpolicyPrimaryIPAddress=svcscpolicyPrimaryIPAddress, entityup=entityup, cacheTotStoreAbleMisses=cacheTotStoreAbleMisses, gslbDomainIndex=gslbDomainIndex, sslBeTot40BitRC2Ciphers=sslBeTot40BitRC2Ciphers, nat46TotUdp46=nat46TotUdp46, vPathTotL2EncapPkts=vPathTotL2EncapPkts, sslTot128BitAESGCMCiphers=sslTot128BitAESGCMCiphers, aclTotPktsDeniedHigh=aclTotPktsDeniedHigh, mcEncOthStream=mcEncOthStream, mptcpTotSFConn=mptcpTotSFConn, pqPriority1Requests=pqPriority1Requests, vsvrscpolicyDestPort=vsvrscpolicyDestPort, mcAACaudiobytes=mcAACaudiobytes, clViewLeader=clViewLeader, mapbindId=mapbindId, lsnTotTcpRxBytes=lsnTotTcpRxBytes, cswStatisticsEntry=cswStatisticsEntry, sslDaysToExpire=sslDaysToExpire, svcscpolicyscCurrentSurgeQClients=svcscpolicyscCurrentSurgeQClients, serverCount=serverCount, vsvrscpolicyavgServerTransactionTime=vsvrscpolicyavgServerTransactionTime, offset=offset, cpecDevno=cpecDevno, alarmNormalThreshold=alarmNormalThreshold, keyExRSA1024=keyExRSA1024, appFirewallRet4xx=appFirewallRet4xx, mcYoutubedashBytes=mcYoutubedashBytes, sslBeTot56BitRC4CiphersLow=sslBeTot56BitRC4CiphersLow, tcpTotServerConnOpened=tcpTotServerConnOpened, svcTotalRequestsHigh=svcTotalRequestsHigh, sslTotSSLv2TransactionsLow=sslTotSSLv2TransactionsLow, sacl6TotPktsAllowed=sacl6TotPktsAllowed, appFirewallViolWSIViolations=appFirewallViolWSIViolations, sslTotTLSv1TransactionsLow=sslTotTLSv1TransactionsLow, tcpErrSvrOutOfOrder=tcpErrSvrOutOfOrder, sslTotBkendTlSvlRenego=sslTotBkendTlSvlRenego, dnsTotalQueries=dnsTotalQueries, sslTot40BitRC2Ciphers=sslTot40BitRC2Ciphers, cacheTot304HitsLow=cacheTot304HitsLow, gslbDomainConfigEntry=gslbDomainConfigEntry, cpesDevno=cpesDevno, sysupsvcCount=sysupsvcCount, tcpTotClientConnOpened=tcpTotClientConnOpened, LbPolicy=LbPolicy, crbPolicyvalue=crbPolicyvalue, rateLmtThresholdExceed=rateLmtThresholdExceed, svcTicksSinceLastStateChange=svcTicksSinceLastStateChange, ipv6TotIcmpFragPkts=ipv6TotIcmpFragPkts, pqpoldevno=pqpoldevno, acl6TotHits=acl6TotHits, pengPolicyName=pengPolicyName, caIosidcacheBytes=caIosidcacheBytes, sysHardwareSerialNumber=sysHardwareSerialNumber, ipTotBadTransport=ipTotBadTransport, appfwappFirewallViolSQLPerProfile=appfwappFirewallViolSQLPerProfile, scAltContUrls=scAltContUrls, tcpErrFastRetransmissions=tcpErrFastRetransmissions, EntityProtocolType=EntityProtocolType, monitorProbesNoChange=monitorProbesNoChange, sslTotTLSv1SessionsHigh=sslTotTLSv1SessionsHigh, txMultiCollisionsErrors=txMultiCollisionsErrors, dnsRecordType=dnsRecordType, sysNetmask=sysNetmask, svcscpolicydestPort=svcscpolicydestPort, nsNat64GlobalStats=nsNat64GlobalStats, priority=priority, temperatureHigh=temperatureHigh, dnsCurCNAMErecord=dnsCurCNAMErecord, totmarkercell=totmarkercell, sslBeTotTLSv12Handshakes=sslBeTotTLSv12Handshakes, httpTotRequestsRate=httpTotRequestsRate, icmpTotInvalidBodyLen=icmpTotInvalidBodyLen, scActionType=scActionType, svcscpolicyavgServerTransactionTime=svcscpolicyavgServerTransactionTime, aclTotPktsBridgedLow=aclTotPktsBridgedLow, sslTotTLSv11TransactionRate=sslTotTLSv11TransactionRate, caTotrespbytes=caTotrespbytes, totNonAuthNoDatas=totNonAuthNoDatas, aclTotPktsAllowedLow=aclTotPktsAllowedLow, dosTotValidCookies=dosTotValidCookies, ipNetmask=ipNetmask, pptpStpCtrlConnReq=pptpStpCtrlConnReq, monitorFailedSend=monitorFailedSend, wsHttpGroup=wsHttpGroup, cacheTotRevalidationMiss=cacheTotRevalidationMiss, clNodeIP=clNodeIP, nsInatPerNat46StatsTable=nsInatPerNat46StatsTable, dnsCurEntries=dnsCurEntries, ifErrDuplexMismatch=ifErrDuplexMismatch, svcTotalResponseBytesLow=svcTotalResponseBytesLow, port=port, pqpolicypqVserverIP=pqpolicypqVserverIP, nsSnmpEventsGroup=nsSnmpEventsGroup, sslTotDecFE=sslTotDecFE, appfwCookie=appfwCookie, cpsConnFailure=cpsConnFailure, sslBeTotRSA512keyExchanges=sslBeTotRSA512keyExchanges, totReqRefusals=totReqRefusals, surgeCount=surgeCount, iipDisabledMIPused=iipDisabledMIPused, cnameRecQueries=cnameRecQueries, vServerName=vServerName, pptpStrtCtrlConnReply=pptpStrtCtrlConnReply, tcpErrFinDup=tcpErrFinDup, sslBeTotDH512keyExchanges=sslBeTotDH512keyExchanges, sslTotNewSessions=sslTotNewSessions, svcdospolicydosCurrentQueueSize=svcdospolicydosCurrentQueueSize, sslCardFailed=sslCardFailed, dnsTotANYrecFailed=dnsTotANYrecFailed, HAMode=HAMode, svcGrpMemberGslbSiteName=svcGrpMemberGslbSiteName, spdy2TotStreams=spdy2TotStreams, lsnTotUdpDrpPkts=lsnTotUdpDrpPkts, svcTxBytesRate=svcTxBytesRate, sslCipherName=sslCipherName, lsnTotTcpTxBytes=lsnTotTcpTxBytes, sslTotSSLv3RenegSessionsLow=sslTotSSLv3RenegSessionsLow, vserverRxBytesRateNormal=vserverRxBytesRateNormal, sslTotECDHE224keyExchanges=sslTotECDHE224keyExchanges, nat64TotUdpSessions=nat64TotUdpSessions, compTcpBandwidthSaving=compTcpBandwidthSaving, sslBeTotSessionMultiplexAttemptFails=sslBeTotSessionMultiplexAttemptFails, sslTot40BitRC2CiphersHigh=sslTot40BitRC2CiphersHigh)
mibBuilder.exportSymbols("NS-ROOT-MIB", ca3GPVid=ca3GPVid, crVsIndex=crVsIndex, svcGrpMemberTotalResponses=svcGrpMemberTotalResponses, maxTcpConnections=maxTcpConnections, ipTotTxBytesHigh=ipTotTxBytesHigh, tcpTotZombieSvrConnFlushed=tcpTotZombieSvrConnFlushed, nsPolicyEngineGroup=nsPolicyEngineGroup, lsnLogTotADMappingCreateEntries=lsnLogTotADMappingCreateEntries, iohCount=iohCount, serviceGlobalStatsGroup=serviceGlobalStatsGroup, totaltxpkts=totaltxpkts, siteTotalResponses=siteTotalResponses, lsnLogTotWrongFlags=lsnLogTotWrongFlags, nsSysHealthDiskEntry=nsSysHealthDiskEntry, nsRnatStatsGroup=nsRnatStatsGroup, crStatisticsEntry=crStatisticsEntry, vsvrscpolicyscPhysicalServicePort=vsvrscpolicyscPhysicalServicePort, cpestatistics=cpestatistics, socksMethRespSent=socksMethRespSent, vsvrscpolicyscTotalServerTransactions=vsvrscpolicyscTotalServerTransactions, sslBeTot128BitIDEACiphers=sslBeTot128BitIDEACiphers, platformLicensedThroughput=platformLicensedThroughput, socksMethReqSent=socksMethReqSent, httpTotClenReqHigh=httpTotClenReqHigh, dnsCurNoAuthEntries=dnsCurNoAuthEntries, cpestatspolicyEntry=cpestatspolicyEntry, dnsTotErrRespForm=dnsTotErrRespForm, monitorWeight=monitorWeight, ipv6TotNonTcpConnection=ipv6TotNonTcpConnection, httpErrIncompleteRequestsHigh=httpErrIncompleteRequestsHigh, pbrTotPktsAllowed=pbrTotPktsAllowed, icmpTotNeedFragRx=icmpTotNeedFragRx, haLicenseCheck=haLicenseCheck, icmpTotThresholdExceedsHigh=icmpTotThresholdExceedsHigh, staRnewNoClnt=staRnewNoClnt, mapName=mapName, nsPbrTable=nsPbrTable, svcscpolicyTotOpenConn=svcscpolicyTotOpenConn, svcGrpMemberPrimaryIPAddress=svcGrpMemberPrimaryIPAddress, psState=psState, pbrPriority=pbrPriority, sslTotSSLv2ClientAuthentications=sslTotSSLv2ClientAuthentications, lldpRemChassisIdSubtype=lldpRemChassisIdSubtype, entityNewName=entityNewName, ca3GPVidHR=ca3GPVidHR, vsvrTotalRequests=vsvrTotalRequests, tcpSpareConn=tcpSpareConn, cipInsertionStatus=cipInsertionStatus, udpTotTxPktsHigh=udpTotTxPktsHigh, sslBeTotNULLAuthorizations=sslBeTotNULLAuthorizations, featureLoadBalancing=featureLoadBalancing, compTcpTotalRxBytes=compTcpTotalRxBytes, vserverServiceEntry=vserverServiceEntry, caiosBytesHR=caiosBytesHR, sysMappedIpAddress=sysMappedIpAddress, IpAddressType=IpAddressType, totAuthAns=totAuthAns, dnsTotSOArecQueries=dnsTotSOArecQueries, tcpCurResetCount=tcpCurResetCount, mcAACaudio=mcAACaudio, compHttpBandwidthSaving=compHttpBandwidthSaving, socksMethReqRcvd=socksMethReqRcvd, svcSslv3Protocol=svcSslv3Protocol, vsvrscpolicyPrimaryPort=vsvrscpolicyPrimaryPort, sslTotTLSv12TransactionRate=sslTotTLSv12TransactionRate, wsIfName=wsIfName, reqrule=reqrule, wsFailOver=wsFailOver, mcMP4Vid=mcMP4Vid, svcSslRedirectSupport=svcSslRedirectSupport, caAlptopDsktpBytes=caAlptopDsktpBytes, ifErrTxDeferred=ifErrTxDeferred, svcgrpTdId=svcgrpTdId, surgecnt=surgecnt, totalopenconnection=totalopenconnection, modeMacBasedForwarding=modeMacBasedForwarding, ifErrTxFIFO=ifErrTxFIFO, cpuUsage=cpuUsage, ifTxMultiCollisionErrors=ifTxMultiCollisionErrors, vlan=vlan, staRenewNoRfsh=staRenewNoRfsh, sslTotRSA2048keyExchanges=sslTotRSA2048keyExchanges, cacheBytesServedLow=cacheBytesServedLow, vsvrPort=vsvrPort, pqpolicypqTotAvgQueueWaitTime=pqpolicypqTotAvgQueueWaitTime, haLicenseMatchState=haLicenseMatchState, pooledLicenseGracePeriodOver=pooledLicenseGracePeriodOver, pptpOutCallReply=pptpOutCallReply, sslTotDH2048keyExchangesLow=sslTotDH2048keyExchangesLow, ClusterEffHealth=ClusterEffHealth, cacAACaudio=cacAACaudio, staResponseRecvd=staResponseRecvd, sslBeTotDH2048keyExchangesHigh=sslBeTotDH2048keyExchangesHigh, csIndexVserverFullName=csIndexVserverFullName, haBadSecState=haBadSecState, tcpWaitToSyn=tcpWaitToSyn, sslTotOffloadRSAKeyExchangesHigh=sslTotOffloadRSAKeyExchangesHigh, scPolicyName=scPolicyName, lsnLogTotTcpPortblockDeallocs=lsnLogTotTcpPortblockDeallocs, discoverFailure=discoverFailure, vsvrscpolicyscTotalServerTTFB=vsvrscpolicyscTotalServerTTFB, lsnTotNAT64TcpRxBytes=lsnTotNAT64TcpRxBytes, sureConnect=sureConnect, lsnSessionQuotaExceed=lsnSessionQuotaExceed, socksClientError=socksClientError, svcGrpMemberState=svcGrpMemberState, vServerRequestRateNormal=vServerRequestRateNormal, nsTdInetVlan=nsTdInetVlan, totAuthNoDataResps=totAuthNoDataResps, inatNat46Drop64=inatNat46Drop64, csRequestHit=csRequestHit, serverIpAddress=serverIpAddress, sslTotRSA512keyExchangesHigh=sslTotRSA512keyExchangesHigh, clnodeID=clnodeID, sslTotSSLv3HandshakesLow=sslTotSSLv3HandshakesLow, httpTotOthersLow=httpTotOthersLow, lsnLogTotMappingDeleteEntries=lsnLogTotMappingDeleteEntries, caLaptopDesktp=caLaptopDesktp, caAndroididcacheBytes=caAndroididcacheBytes, aclTotPktsDeniedLow=aclTotPktsDeniedLow, ca3GPVidBytes=ca3GPVidBytes, alarmProbeFailedErrorString=alarmProbeFailedErrorString, directive=directive, dtlsStaPostResponseSuccess=dtlsStaPostResponseSuccess, clNodeViewQuorum=clNodeViewQuorum, sslBeTot56BitRC2CiphersLow=sslBeTot56BitRC2CiphersLow, lsnLogTotWrongMappingFlagEntries=lsnLogTotWrongMappingFlagEntries, delCompTotalRequests=delCompTotalRequests, gslbSite=gslbSite, alarmHighThreshold=alarmHighThreshold, serverTdId=serverTdId, nsClientIPAddr=nsClientIPAddr, ipTotRxPktsLow=ipTotRxPktsLow, advanceSSLConfigTable=advanceSSLConfigTable, tcpTotTxPkts=tcpTotTxPkts, pptpCntlIcreq=pptpCntlIcreq, ifTotXoffSent=ifTotXoffSent, httpTotPostsHigh=httpTotPostsHigh, svcTotalResponses=svcTotalResponses, pqpolicypqDropped=pqpolicypqDropped, crPolBindConfigTable=crPolBindConfigTable, cacMP4Vid=cacMP4Vid, serviceScpolicyEntry=serviceScpolicyEntry, delCompBaseTcpTxBytes=delCompBaseTcpTxBytes, nsLLDPConfigGroup=nsLLDPConfigGroup, sysGateway=sysGateway, dnsTotCNAMEresponse=dnsTotCNAMEresponse, rxCrcErrors=rxCrcErrors, icmpTotBigNextMTU=icmpTotBigNextMTU, socksMethRespRcvd=socksMethRespRcvd, serverState=serverState, entityRxRate=entityRxRate, cpecaDevno=cpecaDevno, dnsServerStatistics=dnsServerStatistics, pqtotclienttransaction=pqtotclienttransaction, txAveragePacketRate=txAveragePacketRate, icmpTotRxEchoReply=icmpTotRxEchoReply, aaaTotSessionTimeout=aaaTotSessionTimeout, ipTotFragPktsGen=ipTotFragPktsGen, nsInatPerNatStatsEntry=nsInatPerNatStatsEntry, httpErrNoreuseMultipart=httpErrNoreuseMultipart, httpTotHTTP10reqHigh=httpTotHTTP10reqHigh, svcTotalRequestBytes=svcTotalRequestBytes, nsHttpStatsGroup=nsHttpStatsGroup, memoryUtilizationNormal=memoryUtilizationNormal, hardDiskDriveErrors=hardDiskDriveErrors, serverTable=serverTable, vxlanEntry=vxlanEntry, sslBeTot168Bit3DESCiphersHigh=sslBeTot168Bit3DESCiphersHigh, sslTotDSSAuthorizations=sslTotDSSAuthorizations, sslTotSessionsLow=sslTotSessionsLow, nat46TotDrop46=nat46TotDrop46, caOtherBytes=caOtherBytes, vserverCsPiPolicyEntry=vserverCsPiPolicyEntry, sslBeTot56BitDESCiphersLow=sslBeTot56BitDESCiphersLow, sslTotSwDecBE=sslTotSwDecBE, dnsTotResponses=dnsTotResponses, totQueries=totQueries, haErrSyncFailure=haErrSyncFailure, ipTotFragmentsHigh=ipTotFragmentsHigh, sslTotRSA2048keyExchangesLow=sslTotRSA2048keyExchangesLow, svcGrpMemberTotalPktsSent=svcGrpMemberTotalPktsSent, totReqUnparses=totReqUnparses, sslBeTotSHAMacHigh=sslBeTotSHAMacHigh, haLastMasterStateTransitionReason=haLastMasterStateTransitionReason, svcgrpSvcGroupFullName=svcgrpSvcGroupFullName, sslTotRSA1024keyExchangesLow=sslTotRSA1024keyExchangesLow, zoneName=zoneName, vlanTotRxPktsLow=vlanTotRxPktsLow, sslTotSwDecFE=sslTotSwDecFE, appFirewallViolXmlGenViolations=appFirewallViolXmlGenViolations, svcTotalRequestBytesHigh=svcTotalRequestBytesHigh, SiteType=SiteType, vsvrscpolicyscCurrentWaitingClients=vsvrscpolicyscCurrentWaitingClients, ifTxExcessCollisions=ifTxExcessCollisions, dospolicyname=dospolicyname, sslTot168Bit3DESCiphers=sslTot168Bit3DESCiphers, sslTotHwEncFE=sslTotHwEncFE, MetricExchange=MetricExchange, sslBeTotSSLv3ClientAuthenticationsLow=sslBeTotSSLv3ClientAuthenticationsLow, ipTotTxBytesLow=ipTotTxBytesLow, httpErrIncompleteHeadersLow=httpErrIncompleteHeadersLow, svcscpolicyTotClientTransaction=svcscpolicyTotClientTransaction, monitorCurFailedCount=monitorCurFailedCount, sslTotSSLv2ClientAuthenticationsHigh=sslTotSSLv2ClientAuthenticationsHigh, sysHealthDiskSize=sysHealthDiskSize, serviceAdvanceSslConfigTable=serviceAdvanceSslConfigTable, sslCurSessions=sslCurSessions, tcpCurRateThreshold=tcpCurRateThreshold, mc3GPVidBytes=mc3GPVidBytes, svcscpolicyscAverageServerTTFB=svcscpolicyscAverageServerTTFB, entityName=entityName, vsId=vsId, sslTotSSLv3ClientAuthenticationsHigh=sslTotSSLv3ClientAuthenticationsHigh, caAACaudio=caAACaudio, sslTotTLSv12Handshakes=sslTotTLSv12Handshakes, sslBeTotRSA1024keyExchangesLow=sslBeTotRSA1024keyExchangesLow, lldpRemSysCapEnabled=lldpRemSysCapEnabled, appfwXMLValidation=appfwXMLValidation, cacheGroupTable=cacheGroupTable, tcpErrSvrRetrasmit=tcpErrSvrRetrasmit, sslTotSSLv3TransactionsHigh=sslTotSSLv3TransactionsHigh, sslBeTotTLSv1Handshakes=sslBeTotTLSv1Handshakes, vserverGlobalStatsGroup=vserverGlobalStatsGroup, cpeExprConfigStatsEntry=cpeExprConfigStatsEntry, sysTotSaveConfigs=sysTotSaveConfigs, lsnCurNAT64sessions=lsnCurNAT64sessions, lsnTcpSessionsRate=lsnTcpSessionsRate, sslTotTransactionsRate=sslTotTransactionsRate, vsvrBindCount=vsvrBindCount, icmpTotRxEcho=icmpTotRxEcho, lbStatisticsEntry=lbStatisticsEntry, featureISIS=featureISIS, caAunindentifiedBytesHR=caAunindentifiedBytesHR, scSessionReqs=scSessionReqs, sslTotNewSessionsLow=sslTotNewSessionsLow, ipTotRxPkts=ipTotRxPkts, nsRnatPerIPStatsEntry=nsRnatPerIPStatsEntry, dosPolicyStatistics=dosPolicyStatistics, icmpTotTxPkts=icmpTotTxPkts, mc3PVid=mc3PVid, mptcpTotMpJoinSyn=mptcpTotMpJoinSyn, appfwXMLSchemaCompile=appfwXMLSchemaCompile, svcscpolicyDesIpAddress=svcscpolicyDesIpAddress, nsTdInetAddressTable=nsTdInetAddressTable, nsAcl6Entry=nsAcl6Entry, lsnTotNAT64UdpTxBytes=lsnTotNAT64UdpTxBytes, cacheTotStoreAbleMissesLow=cacheTotStoreAbleMissesLow, dnsTotAnswers=dnsTotAnswers, clusterOVSChange=clusterOVSChange, dnsTotSRVrecUpdate=dnsTotSRVrecUpdate, cacheTotStoreAbleMissesHigh=cacheTotStoreAbleMissesHigh, mptcpMPFailSent=mptcpMPFailSent, vserverFullName=vserverFullName)
mibBuilder.exportSymbols("NS-ROOT-MIB", svcTotalClients=svcTotalClients, contentFilterName=contentFilterName, dnskeyUnitsOfExpiry=dnskeyUnitsOfExpiry, cpeconfigpolicyEntry=cpeconfigpolicyEntry, sysHealthDiskAvail=sysHealthDiskAvail, soaRecQueries=soaRecQueries, lbStatisticsTable=lbStatisticsTable, nsSysGroup=nsSysGroup, sslBeMaxMultiplexedSessionsLow=sslBeMaxMultiplexedSessionsLow, mptcpErrDataFinpassive=mptcpErrDataFinpassive, sslBeTot128BitRC4CiphersHigh=sslBeTot128BitRC4CiphersHigh, sslBeTotTLSv11Sessions=sslBeTotTLSv11Sessions, svcscpolicyDestPort=svcscpolicyDestPort, srcUrl=srcUrl, svcscpolicyscAverageClientTTLB=svcscpolicyscAverageClientTTLB, monitorFailedCon=monitorFailedCon, lbvsvrPersistanceType=lbvsvrPersistanceType, dnsTotANYqueries=dnsTotANYqueries, clMasterState=clMasterState, destinationPort=destinationPort, httpErrLargeContent=httpErrLargeContent, pptpEchoRep=pptpEchoRep, synfloodNormal=synfloodNormal, serverFullName=serverFullName, scPolUrl=scPolUrl, changeToPrimary=changeToPrimary, thresholdValue=thresholdValue, aaaCurICAOnlyConn=aaaCurICAOnlyConn, sslTotBkendCipherAES128=sslTotBkendCipherAES128, totalPosts=totalPosts, contentFilterHitsHigh=contentFilterHitsHigh, appFirewallGroup=appFirewallGroup, vsvrCurEffState=vsvrCurEffState, sslTotOffloadBulkAESGCM256=sslTotOffloadBulkAESGCM256, pooledLicenseGraceStarted=pooledLicenseGraceStarted, sslBeTot128BitRC2CiphersHigh=sslBeTot128BitRC2CiphersHigh, brgBpdu=brgBpdu, sslBeTot168Bit3DESCiphersLow=sslBeTot168Bit3DESCiphersLow, dosTotConditionTriggered=dosTotConditionTriggered, serviceHits=serviceHits, svcgrpSvcGroupType=svcgrpSvcGroupType, vsvrSvcGrpBindCount=vsvrSvcGrpBindCount, httpErrIncompleteRequests=httpErrIncompleteRequests, tcpErrRetransmitGiveUp=tcpErrRetransmitGiveUp, dnsTotAAAArecQueries=dnsTotAAAArecQueries, cswProtocolType=cswProtocolType, sslTotTLSv1HandshakesHigh=sslTotTLSv1HandshakesHigh, icmpTotBadPMTUIpChecksum=icmpTotBadPMTUIpChecksum, totalGets=totalGets, lsnLogTotTcpSessionCreateEntries=lsnLogTotTcpSessionCreateEntries, ipTotRxPktsHigh=ipTotRxPktsHigh, featureInternalCaching=featureInternalCaching, eRSA=eRSA, nsmcStatsGroup=nsmcStatsGroup, cacheTotNon304HitsLow=cacheTotNon304HitsLow, vlanTotRxBytes=vlanTotRxBytes, dnsTotServerQuery=dnsTotServerQuery, ipAddr=ipAddr, mccApleLiveStrmngVid=mccApleLiveStrmngVid, nsdnsRegisterTable=nsdnsRegisterTable, cpeeNetmask=cpeeNetmask, advanceSSLConfigEntry=advanceSSLConfigEntry, exprName=exprName, cacheErrMemAllocLow=cacheErrMemAllocLow, vlanTotTxPkts=vlanTotTxPkts, mptcpErrFastClose=mptcpErrFastClose, appFirewallResBytes=appFirewallResBytes, unackSynCount=unackSynCount, svcGroupMemberMaxClientsNormal=svcGroupMemberMaxClientsNormal, piPolFullName=piPolFullName, caTotputobjreq=caTotputobjreq, lsnLogTotEntries=lsnLogTotEntries, pbr6TotPktsAllowed=pbr6TotPktsAllowed, sysHealthPowerSupplyStatus=sysHealthPowerSupplyStatus, nsNat64StatsGroup=nsNat64StatsGroup, iPv6tov4FindIPv6MapErr=iPv6tov4FindIPv6MapErr, vsvrSslv2Protocol=vsvrSslv2Protocol, udpTotRxPkts=udpTotRxPkts, pbrFullName=pbrFullName, sslBeTotDSSAuthorizationsHigh=sslBeTotDSSAuthorizationsHigh, ifErrDroppedTxPkts=ifErrDroppedTxPkts, pbr6TotMisses=pbr6TotMisses, txLateCollisions=txLateCollisions, cacheTotFullToConditionalRequestHigh=cacheTotFullToConditionalRequestHigh, gslbDomainConfigTable=gslbDomainConfigTable, totPhysicalServers=totPhysicalServers, caApleLiveStrmngPlVidcacheBytesHR=caApleLiveStrmngPlVidcacheBytesHR, iipDisabledMIPdisabled=iipDisabledMIPdisabled, nsIfStatsTable=nsIfStatsTable, cfgHtmlServed=cfgHtmlServed, sslBeTotRSA512keyExchangesHigh=sslBeTotRSA512keyExchangesHigh, svcGroupMemberMaxClients=svcGroupMemberMaxClients, httpTotGetsHigh=httpTotGetsHigh, nsPPTPStatsGroup=nsPPTPStatsGroup, lldpMessageTxHoldMultiplier=lldpMessageTxHoldMultiplier, interfaceThroughputLow=interfaceThroughputLow, dosPolicyEntry=dosPolicyEntry, sslChipName=sslChipName, svcGslbState=svcGslbState, serviceDospolicyTable=serviceDospolicyTable, appfwappFirewallRet4xxPerProfile=appfwappFirewallRet4xxPerProfile, svcCurClntConnections=svcCurClntConnections, calaptopDesktpHR=calaptopDesktpHR, cpestatsactionTable=cpestatsactionTable, rxAveragePacketRate=rxAveragePacketRate, mcEncIos=mcEncIos, appFirewallAborts=appFirewallAborts, appFirewallViolXmlAttachmentViolations=appFirewallViolXmlAttachmentViolations, ca3GPVidcacheBytesHR=ca3GPVidcacheBytesHR, cacheTotNonStoreAbleMissesLow=cacheTotNonStoreAbleMissesLow, sslTot168Bit3DESCiphersHigh=sslTot168Bit3DESCiphersHigh, cipher40BitRC4=cipher40BitRC4, sslTotTransactions=sslTotTransactions, lsnTotNAT64IcmpRxBytes=lsnTotNAT64IcmpRxBytes, sacl6TotPktsDenied=sacl6TotPktsDenied, sslTotTLSv1HandshakesLow=sslTotTLSv1HandshakesLow, clNodeHealth=clNodeHealth, svcGrpMemberPrimaryInetAddress=svcGrpMemberPrimaryInetAddress, vlansDevno=vlansDevno, pqtotclienttransactiontime=pqtotclienttransactiontime, dosconfig=dosconfig, pqPolDevno=pqPolDevno, sslTotOffloadDHKeyExchangesHigh=sslTotOffloadDHKeyExchangesHigh, cpe=cpe, sslBeTotTLSv1ClientAuthenticationsHigh=sslBeTotTLSv1ClientAuthenticationsHigh, totAuthNoNames=totAuthNoNames, svcgroupCount=svcgroupCount, svcIpAddress=svcIpAddress, featureDynamicRouting=featureDynamicRouting, haPeerState=haPeerState, SvcEntityType=SvcEntityType, caUnidentifiedHR=caUnidentifiedHR, serviceAdvanceSslConfigEntry=serviceAdvanceSslConfigEntry, vsvrSoMethod=vsvrSoMethod, lbvserverEntry=lbvserverEntry, vsvrTdId=vsvrTdId, appfwappFirewallReqBytesPerProfile=appfwappFirewallReqBytesPerProfile, ifTotTxMbits=ifTotTxMbits, serviceRequestRateNormal=serviceRequestRateNormal, vsvrscpolicyscTotalClientConnections=vsvrscpolicyscTotalClientConnections, appfwappFirewallViolMsgValViolationsPerProfile=appfwappFirewallViolMsgValViolationsPerProfile, vserverTxBytesRateNormal=vserverTxBytesRateNormal, vsvrscpolicyscCurrentSurgeQClients=vsvrscpolicyscCurrentSurgeQClients, httpTotRxRequestBytes=httpTotRxRequestBytes, scPolicyConfigEntry=scPolicyConfigEntry, featureAPPFLOW=featureAPPFLOW, sslBeTotTLSv12Sessions=sslBeTotTLSv12Sessions, lsnNAT64CurSubscribers=lsnNAT64CurSubscribers, ipTotFixHeaderFail=ipTotFixHeaderFail, haLastNicMonitorFailed=haLastNicMonitorFailed, cacheTotPetRequests=cacheTotPetRequests, crMapName=crMapName, cpesPolicyname=cpesPolicyname, tcpErrForthRetransmissions=tcpErrForthRetransmissions, sslTotOffloadDHKeyExchangesLow=sslTotOffloadDHKeyExchangesLow, sysModelId=sysModelId, caTotvideo=caTotvideo, staMonSent=staMonSent, ifErrTxOverflow=ifErrTxOverflow, nat46TotDrop64=nat46TotDrop64, caAndroidcache=caAndroidcache, vsvrCurSslVpnUsers=vsvrCurSslVpnUsers, unackSyn=unackSyn, sslBeTotEcdheCurve521=sslBeTotEcdheCurve521, vserverCspolicyEntry=vserverCspolicyEntry, cachegroupName=cachegroupName, sslTot128BitRC4CiphersHigh=sslTot128BitRC4CiphersHigh, EntityState=EntityState, tcpErrOutOfWindowPkts=tcpErrOutOfWindowPkts, sslTotOffloadBulkAES=sslTotOffloadBulkAES, vsvrscpolicyscTotalRequestsReceived=vsvrscpolicyscTotalRequestsReceived, lsnLogTotSessionCreateEntries=lsnLogTotSessionCreateEntries, tcpTotZombieCltConnFlushed=tcpTotZombieCltConnFlushed, policyId=policyId, icmpTotDstIpLookup=icmpTotDstIpLookup, ifRxAvgPacketRate=ifRxAvgPacketRate, nsTdInetBridgeGroup=nsTdInetBridgeGroup, sslBeTotRSA2048keyExchanges=sslBeTotRSA2048keyExchanges, icmpTotTxEchoReply=icmpTotTxEchoReply, pqDropped=pqDropped, allNicTotTxMbits=allNicTotTxMbits, lsnGrpCurSubscribers=lsnGrpCurSubscribers, monitorFailedCode=monitorFailedCode, sslBeTotRSA1024keyExchanges=sslBeTotRSA1024keyExchanges, nsSysHealthDiskTable=nsSysHealthDiskTable, staticEntries=staticEntries, caIosBytes=caIosBytes, saclTotPktsDenied=saclTotPktsDenied, icmpTotPktsDropped=icmpTotPktsDropped, ipTotReassemblyAttempt=ipTotReassemblyAttempt, cipherGroupName=cipherGroupName, txExcessCollisions=txExcessCollisions, sslTotSessionMissHigh=sslTotSessionMissHigh, dnsTotAuthNoNames=dnsTotAuthNoNames, totclienttransaction=totclienttransaction, spdyv3TotStreams=spdyv3TotStreams, pengBytesOut=pengBytesOut, responseTimeoutThreshold=responseTimeoutThreshold, cachePercentOriginBandwidthSaved=cachePercentOriginBandwidthSaved, httpTotChunkedResponsesHigh=httpTotChunkedResponsesHigh, cacheTotHits=cacheTotHits, rnatTotRxBytes=rnatTotRxBytes, nat46TotIcmp64=nat46TotIcmp64, pptpInCallRep=pptpInCallRep, ipv6FragTotRxPkts=ipv6FragTotRxPkts, nsTdInetAddressEntry=nsTdInetAddressEntry, svcGrpMemberActiveConn=svcGrpMemberActiveConn, featureSslOffloading=featureSslOffloading, vlanMemberInterfaces=vlanMemberInterfaces, svcTotalResponsesHigh=svcTotalResponsesHigh, authDH=authDH, mcMP4VidBytes=mcMP4VidBytes, altContUrls=altContUrls, sslBeTot128BitRC4CiphersLow=sslBeTot128BitRC4CiphersLow, dnsTotOtherErrors=dnsTotOtherErrors, wsIpAddress=wsIpAddress, polqdepthThreshval=polqdepthThreshval, lsnGrpTotTcpTranslBytes=lsnGrpTotTcpTranslBytes, appFirewallStatistics=appFirewallStatistics, netScalerEvents=netScalerEvents, caotherHR=caotherHR, ipTotTCPfragmentsFwd=ipTotTCPfragmentsFwd, drtmDeviation=drtmDeviation, cipherbDesc=cipherbDesc, dnsTotInvalidQueryFormat=dnsTotInvalidQueryFormat, cacheTotParameterizedHits=cacheTotParameterizedHits, pqpolicytotClientTransactionTime=pqpolicytotClientTransactionTime, vlanTotTxPktsHigh=vlanTotTxPktsHigh, transactiontime=transactiontime, serverInetAddressType=serverInetAddressType, modeClientKeepAlive=modeClientKeepAlive, totalCsConnSucc=totalCsConnSucc, lsnNAT64UdpSessionsRate=lsnNAT64UdpSessionsRate, curConfigLbVservers=curConfigLbVservers, httpTotResposesRate=httpTotResposesRate, inbandProtocolVersionMismatch=inbandProtocolVersionMismatch, server=server, totClientDontReuse=totClientDontReuse, sslCurQSize=sslCurQSize, nsInatPerNatStatsTable=nsInatPerNatStatsTable, lsnLogTotUdpMappingCreateEntries=lsnLogTotUdpMappingCreateEntries, cipherBindId=cipherBindId, svcGroupMemberRxBytesRate=svcGroupMemberRxBytesRate, svcTotalPktsRecvdLow=svcTotalPktsRecvdLow, netmask=netmask, rsa1024KeyExThresholdHigh=rsa1024KeyExThresholdHigh, tcpTotFinWaitClosed=tcpTotFinWaitClosed, httpErrIncompleteResponses=httpErrIncompleteResponses, voltageNormal=voltageNormal, svcSslDH=svcSslDH, cacheTot304Hits=cacheTot304Hits, lldpLocManAddrSubtype=lldpLocManAddrSubtype, haSyncFailure=haSyncFailure, platformPpsLimitPktDrop=platformPpsLimitPktDrop)
mibBuilder.exportSymbols("NS-ROOT-MIB", haPropFailure=haPropFailure, totNonAuthDatas=totNonAuthDatas, alarmVipRhiState=alarmVipRhiState, nsExpressionEntry=nsExpressionEntry, vsvrIp6Address=vsvrIp6Address, sslBeTotSessionMultiplexAttemptSuccessLow=sslBeTotSessionMultiplexAttemptSuccessLow, pbr6StatsGroup=pbr6StatsGroup, contentFilterHitsLow=contentFilterHitsLow, vserverTxBytesRate=vserverTxBytesRate, tcpErrSynGiveUp=tcpErrSynGiveUp, platformRateLimitPktDrop=platformRateLimitPktDrop, svcMaxClients=svcMaxClients, servicePersistentHitsLow=servicePersistentHitsLow, ipTotBadlens=ipTotBadlens, udpCurRateThresholdExceeds=udpCurRateThresholdExceeds, nsPbr6Table=nsPbr6Table, dnsTotRequests=dnsTotRequests, tcpErrSentRst=tcpErrSentRst, sslTot40BitRC4CiphersLow=sslTot40BitRC4CiphersLow, aclTotHits=aclTotHits, ifTxLateCollisions=ifTxLateCollisions, appfwCSRFTag=appfwCSRFTag, dosPolDevno=dosPolDevno, icmpCurRateThresholdInterval=icmpCurRateThresholdInterval, nsvPathStatsGroup=nsvPathStatsGroup, featureGSLBProximity=featureGSLBProximity, vsvrTotalPktsRecvd=vsvrTotalPktsRecvd, crStatisticsTable=crStatisticsTable, pqpolicypqAvgClientTransactionTimems=pqpolicypqAvgClientTransactionTimems, sslTotOffloadRSAKeyExchangesLow=sslTotOffloadRSAKeyExchangesLow, vserverCsPiPolicyTable=vserverCsPiPolicyTable, sslTot40BitDESCiphers=sslTot40BitDESCiphers, pqpolicyTotClientTransactions=pqpolicyTotClientTransactions, expressionName=expressionName, DataStreamRateLimitHit=DataStreamRateLimitHit, svcRxBytesRate=svcRxBytesRate, lsnGrpTotTranslBytes=lsnGrpTotTranslBytes, sslBeTotRSAAuthorizations=sslBeTotRSAAuthorizations, caAACaudiocachebytes=caAACaudiocachebytes, vsvrAvgTransactionTime=vsvrAvgTransactionTime, mptcpErrInvalOpts=mptcpErrInvalOpts, vsPort=vsPort, deCompTcpErrLessData=deCompTcpErrLessData, policydevno=policydevno, udpTotRxBytesHigh=udpTotRxBytesHigh, ifRxFrameErrors=ifRxFrameErrors, lsnTotnat64IcmpDrpPkts=lsnTotnat64IcmpDrpPkts, tcpTotSynProbe=tcpTotSynProbe, sslTotDSSAuthorizationsLow=sslTotDSSAuthorizationsLow, lsnLogTotMappingCreateEntries=lsnLogTotMappingCreateEntries, serviceTable=serviceTable, sslBeTot40BitRC4CiphersLow=sslBeTot40BitRC4CiphersLow, siteTotalRequests=siteTotalRequests, currentDelay=currentDelay, eRSACount=eRSACount, compTotalTxPackets=compTotalTxPackets, cpeeIndex=cpeeIndex, ifnicErrDisables=ifnicErrDisables, vsvrCursubflowConn=vsvrCursubflowConn, appfwappFirewallViolXdosViolationsPerProfile=appfwappFirewallViolXdosViolationsPerProfile, lsnTotNAT64TcpTxPkts=lsnTotNAT64TcpTxPkts, inatTotHits=inatTotHits, dtlsStaReconnectTktReq=dtlsStaReconnectTktReq, aaaAuthNonHttpFail=aaaAuthNonHttpFail, scPolicyConfig=scPolicyConfig, svcGrpMemberPrimaryInetAddressType=svcGrpMemberPrimaryInetAddressType, serviceGroupEntry=serviceGroupEntry, compTotalRxPackets=compTotalRxPackets, haTotTimerRecoveries=haTotTimerRecoveries, sslTot56BitDESCiphersLow=sslTot56BitDESCiphersLow, compTcpTotalRxPackets=compTcpTotalRxPackets, sslBeTotRSA1024keyExchangesHigh=sslBeTotRSA1024keyExchangesHigh, alarmLowThreshold=alarmLowThreshold, ClusterMasterState=ClusterMasterState, ipTotFragmentsLow=ipTotFragmentsLow, caTotother=caTotother, vxlanTable=vxlanTable, callHomeUploadEventStatusMsg=callHomeUploadEventStatusMsg, dnsCurAuthEntries=dnsCurAuthEntries, ipTotLandattacks=ipTotLandattacks, serviceName=serviceName, sslTotTLSv12RenegSessions=sslTotTLSv12RenegSessions, tcpErrRetransmit=tcpErrRetransmit, ipv6TotTcpConnection=ipv6TotTcpConnection, protocolType=protocolType, featureCacheRedirection=featureCacheRedirection, ifErrRxNoNSB=ifErrRxNoNSB, alarmEntityCurState=alarmEntityCurState, dnsTotCNAMErecUpdate=dnsTotCNAMErecUpdate, clusterEntry=clusterEntry, cachePercentSuccessfulRevalidation=cachePercentSuccessfulRevalidation, ifTotTxPkts=ifTotTxPkts, numPEs=numPEs, sslTotSHAMacHigh=sslTotSHAMacHigh, lldpRemPortDesc=lldpRemPortDesc, tcpErrFinGiveUp=tcpErrFinGiveUp, cacheNumMBReadFromDisk=cacheNumMBReadFromDisk, svcRequestRate=svcRequestRate, sslTotSSLv2Sessions=sslTotSSLv2Sessions, pptpCallClrReq=pptpCallClrReq, lsnLogTotTcpSessionDeleteEntries=lsnLogTotTcpSessionDeleteEntries, sslTotTLSv1ClientAuthenticationsHigh=sslTotTLSv1ClientAuthenticationsHigh, monitorState=monitorState, lldpLocManAddrIfId=lldpLocManAddrIfId, appfwappFirewallViolXmlAttachmentViolationsPerProfile=appfwappFirewallViolXmlAttachmentViolationsPerProfile, nat64TotSessions=nat64TotSessions, nsLsnGlobalStatsGroup=nsLsnGlobalStatsGroup, sslTotOffloadSignRSAHigh=sslTotOffloadSignRSAHigh, svcGrpMemberCurClntConnections=svcGrpMemberCurClntConnections, ipv6TotLookupFailed=ipv6TotLookupFailed, fromPartition=fromPartition, sslTotRenegSessionsHigh=sslTotRenegSessionsHigh, httpErrPipelinedRequests=httpErrPipelinedRequests, dnsTotUnsupportedResponseType=dnsTotUnsupportedResponseType, svcSslTLSv1Protocol=svcSslTLSv1Protocol, httpTot10ResponsesHigh=httpTot10ResponsesHigh, ipv6LandAttack=ipv6LandAttack, nsPartitionName=nsPartitionName, lsnNAT64SubscrIPV6=lsnNAT64SubscrIPV6, sslBeTot40BitRC4Ciphers=sslBeTot40BitRC4Ciphers, cachePercentParameterized304Hits=cachePercentParameterized304Hits, ca3GPVidcacheBytes=ca3GPVidcacheBytes, sslCertKeyEntry=sslCertKeyEntry, aaaCurICASessions=aaaCurICASessions, sslBeTotMD5Mac=sslBeTotMD5Mac, caTotlookupnostoremiss=caTotlookupnostoremiss, aclTotPktsDenied=aclTotPktsDenied, sslInputFormat=sslInputFormat, platformLicensedPPS=platformLicensedPPS, certBindKeyName=certBindKeyName, acl6TotPktsBridged=acl6TotPktsBridged, appfwPolicyHit=appfwPolicyHit, tcpErrRstNonEst=tcpErrRstNonEst, crmIndex=crmIndex, sslTotHwDecBE=sslTotHwDecBE, scAlternateContentServiceName=scAlternateContentServiceName, ifErrLinkHangs=ifErrLinkHangs, mcLaptopDesktp=mcLaptopDesktp, latency=latency, mptcpTotEstSFReplaced=mptcpTotEstSFReplaced, MonitorState=MonitorState, httpTotClenResponsesHigh=httpTotClenResponsesHigh, iipFailedMIPused=iipFailedMIPused, tcpErrSecondRetransmissions=tcpErrSecondRetransmissions, sysHealthDiskPerusage=sysHealthDiskPerusage, modeEdgeConfiguration=modeEdgeConfiguration, sslRedirect=sslRedirect, sysBuildVersion=sysBuildVersion, sslCrlEntry=sslCrlEntry, caAppleLiveStreamingVidcacheBytes=caAppleLiveStreamingVidcacheBytes, cpeconfigactionTable=cpeconfigactionTable, tcpTotTxBytes=tcpTotTxBytes, appfwappFirewallViolXmlXssViolationsPerProfile=appfwappFirewallViolXmlXssViolationsPerProfile, lsnLogTotPortblockDeallocs=lsnLogTotPortblockDeallocs, lsnCurTcpSessions=lsnCurTcpSessions, lsnTotRxBytes=lsnTotRxBytes, ipAddressGathered=ipAddressGathered, tcpTotZombieActiveHalfCloseCltConnFlushed=tcpTotZombieActiveHalfCloseCltConnFlushed, caAACaudiocachebytesHR=caAACaudiocachebytesHR, dnsCurPTRrecord=dnsCurPTRrecord, ipTotZeroFragmentLen=ipTotZeroFragmentLen, curConfigVservers=curConfigVservers, destserviceport=destserviceport, haSecondaryStateNormal=haSecondaryStateNormal, sslBeTot128BitRC4Ciphers=sslBeTot128BitRC4Ciphers, sslTotCipherAES256=sslTotCipherAES256, lldpRemLocalPortNum=lldpRemLocalPortNum, rxAveragePacketsSize=rxAveragePacketsSize, pqDevno=pqDevno, vserverCrpolicyEntry=vserverCrpolicyEntry, dnskeyName=dnskeyName, sslTotSSLv2TransactionsRate=sslTotSSLv2TransactionsRate, appFirewallRet5xx=appFirewallRet5xx, tcpErrRstInTimewait=tcpErrRstInTimewait, vsvrscpolicyscTotalResponseBytes=vsvrscpolicyscTotalResponseBytes, icmpTotRxBytesHigh=icmpTotRxBytesHigh, dosstatistics=dosstatistics, dnsTotSRVrecQueries=dnsTotSRVrecQueries, pqPolicyConfigTable=pqPolicyConfigTable, ipTotUnknownDstRcvd=ipTotUnknownDstRcvd, clusterNodeQuorum=clusterNodeQuorum, lsnTotDSLiteTxBytes=lsnTotDSLiteTxBytes, mcMsSmthStrVidpl=mcMsSmthStrVidpl, caADTSaudioBytes=caADTSaudioBytes, caAndroid=caAndroid, vxlanVNId=vxlanVNId, freeConnFlushMarked=freeConnFlushMarked, sslCrlName=sslCrlName, sslBeTot168Bit3DESCiphers=sslBeTot168Bit3DESCiphers, vsvrscpolicyscCurrentWaitingTime=vsvrscpolicyscCurrentWaitingTime, cspolicyHits=cspolicyHits, svcscpolicyPrimaryPort=svcscpolicyPrimaryPort, crMapDstName=crMapDstName, cpestatsactionEntry=cpestatsactionEntry, mptcpErrFastClosepassive=mptcpErrFastClosepassive, icmpTotInvalidProtocol=icmpTotInvalidProtocol, cacFLVVidHR=cacFLVVidHR, sslTot128BitRC2CiphersHigh=sslTot128BitRC2CiphersHigh, dnsCurAAAArecord=dnsCurAAAArecord, appfwappFirewallResponsesPerProfile=appfwappFirewallResponsesPerProfile, lldpLocSysName=lldpLocSysName, svcGrpMemberFullName=svcGrpMemberFullName, sslBeTotRSAAuthorizationsHigh=sslBeTotRSAAuthorizationsHigh, ipTotBadlensLow=ipTotBadlensLow, cacheRecentPercentHit=cacheRecentPercentHit, vsvrscpolicyTotClientTransaction=vsvrscpolicyTotClientTransaction, certType=certType, ipFreePorts=ipFreePorts, featureOSPF=featureOSPF, vsvrTotalResponses=vsvrTotalResponses, txCurrentPacketRate=txCurrentPacketRate, certBindingConfigEntry=certBindingConfigEntry, vsvrTotalRequestsHigh=vsvrTotalRequestsHigh, pqpolicypqTotQueueDepth=pqpolicypqTotQueueDepth, dnsTotArecQueries=dnsTotArecQueries, appfwappFirewallViolSafeObjectPerProfile=appfwappFirewallViolSafeObjectPerProfile, certHeader=certHeader, aclFullName=aclFullName, sysStatistics=sysStatistics, vsvrSslDHCount=vsvrSslDHCount, nsLLDPStatsRxPortEntry=nsLLDPStatsRxPortEntry, entitySynflood=entitySynflood, psVsIpAddress=psVsIpAddress, sslTotTLSv12ClientAuthentications=sslTotTLSv12ClientAuthentications, lsnLogTotSessionDeleteEntries=lsnLogTotSessionDeleteEntries, dnsTotUnsupportedQueryClass=dnsTotUnsupportedQueryClass, lldpLocChassisId=lldpLocChassisId, lsnTotNAT64TxBytes=lsnTotNAT64TxBytes, vsvrSslDH=vsvrSslDH, cacheCurHits=cacheCurHits, lsnLogTotIcmpSessionDeleteEntries=lsnLogTotIcmpSessionDeleteEntries, htmlInitFailed=htmlInitFailed, svcCurSrvrConnections=svcCurSrvrConnections, svcSsleRSACount=svcSsleRSACount, toPartition=toPartition, tcpErrSynInEst=tcpErrSynInEst, wsMaxRequestsPerConn=wsMaxRequestsPerConn, lbvserverTable=lbvserverTable, dnsTotMXrecUpdate=dnsTotMXrecUpdate, cacheTotParameterizedInvalidationRequests=cacheTotParameterizedInvalidationRequests, siteIp=siteIp, appfwXMLDos=appfwXMLDos, webServerHttpPorts=webServerHttpPorts, unSupBrow=unSupBrow, lldpRemManAddr=lldpRemManAddr, cacheTotSqlHits=cacheTotSqlHits, sslTotSSLv2Handshakes=sslTotSSLv2Handshakes, cacheTotFullToConditionalRequest=cacheTotFullToConditionalRequest, vsvrscpolicyscPhysicalServiceIP=vsvrscpolicyscPhysicalServiceIP, vserverScpolicyTable=vserverScpolicyTable, cacheTotNonStoreAbleMissesHigh=cacheTotNonStoreAbleMissesHigh, dnsTotStrayAnswer=dnsTotStrayAnswer, ifName=ifName, vsvrState=vsvrState)
mibBuilder.exportSymbols("NS-ROOT-MIB", MepStatus=MepStatus, tcpCurClientConnEstablished=tcpCurClientConnEstablished, hashSHA=hashSHA, vlanstatsEntry=vlanstatsEntry, httpTotResponsesHigh=httpTotResponsesHigh, icmpTotPktsDroppedLow=icmpTotPktsDroppedLow, inatNat46Udp64=inatNat46Udp64, appfwXMLAttachment=appfwXMLAttachment, entityTxRate=entityTxRate, ipTotBadChecksums=ipTotBadChecksums, appFirewallResponses=appFirewallResponses, sslTotSessionHitsLow=sslTotSessionHitsLow, postReqs=postReqs, pqconfig=pqconfig, HAON=HAON, vlanTotDroppedPktsLow=vlanTotDroppedPktsLow, AdminStatus=AdminStatus, httpTotTxRequestBytes=httpTotTxRequestBytes, dns64TotQueries=dns64TotQueries, pq=pq, httpTotChunkedResponses=httpTotChunkedResponses, pptpInCallReq=pptpInCallReq, wsMappedIpAddress=wsMappedIpAddress, ipTotMaxClients=ipTotMaxClients, ipTotTooBig=ipTotTooBig, ipTotInvalidHeaderSz=ipTotInvalidHeaderSz, sslTot128BitRC4CiphersLow=sslTot128BitRC4CiphersLow, pptpCntlOcreq=pptpCntlOcreq, svcGroupMemberRequestRateNormal=svcGroupMemberRequestRateNormal, featureRIP=featureRIP, avgTxTime=avgTxTime, featurePriorityQueuing=featurePriorityQueuing, icmpTotPMTUnoLink=icmpTotPMTUnoLink, sslCards=sslCards, ipTotInvalidPacketSize=ipTotInvalidPacketSize, lsnLogTotPortblockAllocs=lsnLogTotPortblockAllocs, alarmVipRhiInetAddress=alarmVipRhiInetAddress, siteCurSrvrConnections=siteCurSrvrConnections, ipTotRxBytesLow=ipTotRxBytesLow, svcdospolicydosTotJSSent=svcdospolicydosTotJSSent, httpTotClenReqLow=httpTotClenReqLow, lldpLocManAddrOID=lldpLocManAddrOID, keyExRSA512=keyExRSA512, featureContentFiltering=featureContentFiltering, icmpTotPortUnreachableRx=icmpTotPortUnreachableRx, svcGrpMemberTotalResponseBytes=svcGrpMemberTotalResponseBytes, sslCertificateExpiry=sslCertificateExpiry, httpTot11Requests=httpTot11Requests, sslTotNULLCiphersHigh=sslTotNULLCiphersHigh, destserviceIp=destserviceIp, nsInetAddress=nsInetAddress, sslTotMD5MacLow=sslTotMD5MacLow, sslCertKeyName=sslCertKeyName, cipher40BitDES=cipher40BitDES, sslTotSSLv3SessionsHigh=sslTotSSLv3SessionsHigh, dnsErrNullAttack=dnsErrNullAttack, appfwappFirewallViolWellformednessViolationsPerProfile=appfwappFirewallViolWellformednessViolationsPerProfile, acAclName=acAclName, delCompFirstAccess=delCompFirstAccess, scperPolicyStatisticsTable=scperPolicyStatisticsTable, FeaturePlatform=FeaturePlatform, caMP4VidcacheBytesHR=caMP4VidcacheBytesHR, httpTotTxRequestBytesLow=httpTotTxRequestBytesLow, cacMsftSmthStrmPlVid=cacMsftSmthStrmPlVid, lsnGrpIcmpSessRate=lsnGrpIcmpSessRate, sslTotTLSv11Handshakes=sslTotTLSv11Handshakes, appFirewallReqBytes=appFirewallReqBytes, nsPolicyInfrastructureGroup=nsPolicyInfrastructureGroup, domainName=domainName, gslbSiteInetAddressType=gslbSiteInetAddressType, svcTotalRequestsLow=svcTotalRequestsLow, cmpTotTxpkts=cmpTotTxpkts, sslBeTotSessions=sslBeTotSessions, svcGrpMemberTotalRequestBytes=svcGrpMemberTotalRequestBytes, platformRateLimitPacketDropCount=platformRateLimitPacketDropCount, tcpReuseHit=tcpReuseHit, sslBeTotTLSv11ClientAuthentications=sslBeTotTLSv11ClientAuthentications, aaaAuthOnlyHttpSuccess=aaaAuthOnlyHttpSuccess, oldOVS=oldOVS, lldpStatsRemTablesLastChangeTime=lldpStatsRemTablesLastChangeTime, dnskeyTimeToExpire=dnskeyTimeToExpire, callHomeUploadEvent=callHomeUploadEvent, mptcpCurPendingJoin=mptcpCurPendingJoin, nsClusterStatsGroup=nsClusterStatsGroup, sslBeTotTLSv1SessionsLow=sslBeTotTLSv1SessionsLow, modeUseSrcIp=modeUseSrcIp, sslBeTotRSAAuthorizationsLow=sslBeTotRSAAuthorizationsLow, tcpErrAnyPortFail=tcpErrAnyPortFail, serviceScpolicyTable=serviceScpolicyTable, lldpRemSysName=lldpRemSysName, platformRateLimitThresholdHigh=platformRateLimitThresholdHigh, appFirewallViolWellformednessViolations=appFirewallViolWellformednessViolations, policyIndex=policyIndex, inatNat46Tcp64=inatNat46Tcp64, pptpTotGRESessions=pptpTotGRESessions, svcTotalSynsRecvd=svcTotalSynsRecvd, sslBeTotNULLCiphersHigh=sslBeTotNULLCiphersHigh, cipherBindingConfigTable=cipherBindingConfigTable, featureApplicationFirewall=featureApplicationFirewall, vlanTaggedInterfaces=vlanTaggedInterfaces, inatNat46Icmp64=inatNat46Icmp64, vxlanTotRxPkts=vxlanTotRxPkts, lsnLogTotAPDMappingDeleteEntries=lsnLogTotAPDMappingDeleteEntries, svcscpolicytotOpenConn=svcscpolicytotOpenConn, sslEngineStatus=sslEngineStatus, appfwLogMsg=appfwLogMsg, caAppleLiveStreamingPlaylistVidcacheBytes=caAppleLiveStreamingPlaylistVidcacheBytes, svcServiceFullName=svcServiceFullName, scperServiceStatisticsEntry=scperServiceStatisticsEntry, state=state, dosDevno=dosDevno, cipherDesc=cipherDesc, lsnTotTcpRxPkts=lsnTotTcpRxPkts, svcPort=svcPort, svcGrpMemberdosQDepth=svcGrpMemberdosQDepth, averageCpuUtilizationNormal=averageCpuUtilizationNormal, lldpStatsRxPortTLVsUnrecognizedTotal=lldpStatsRxPortTLVsUnrecognizedTotal, cpestatspolicyTable=cpestatspolicyTable, dnsTotAresponse=dnsTotAresponse, pengBytesIn=pengBytesIn, sslKeyPath=sslKeyPath, sslCardNormal=sslCardNormal, currSPS=currSPS, totOtherErrors=totOtherErrors, haCurPeerInc=haCurPeerInc, dnsTotANYresponse=dnsTotANYresponse, ipTotBadMacAddrsHigh=ipTotBadMacAddrsHigh, icmpTotTxBytes=icmpTotTxBytes, sslChipReinitCount=sslChipReinitCount, ifErrRxFIFO=ifErrRxFIFO, sslTotExpiredSessionsHigh=sslTotExpiredSessionsHigh, sslTotRSA512keyExchangesLow=sslTotRSA512keyExchangesLow, sslBeTotSessionMultiplexAttemptFailsHigh=sslBeTotSessionMultiplexAttemptFailsHigh, svcTdId=svcTdId, gslbcDomainName=gslbcDomainName, ruleName=ruleName, piPolicyEntry=piPolicyEntry, monitorDowntime=monitorDowntime, sslTotSSLv3Transactions=sslTotSSLv3Transactions, lsnLogTotNontcpPortblockAllocs=lsnLogTotNontcpPortblockAllocs, monitorInterval=monitorInterval, gslbGlobalInfo=gslbGlobalInfo, stickyPrimary=stickyPrimary, appFirewallViolRefererHeader=appFirewallViolRefererHeader, icmpTotTxEchoReplyHigh=icmpTotTxEchoReplyHigh, cipherBindingConfigEntry=cipherBindingConfigEntry, sslBeTotTLSv1HandshakesLow=sslBeTotTLSv1HandshakesLow, cachePercentHit=cachePercentHit, dos=dos, sslTotEnc=sslTotEnc, cachePercent304Hits=cachePercent304Hits, ifErrCongestionLimitPktDrops=ifErrCongestionLimitPktDrops, aaaAuthFail=aaaAuthFail, nat46TotTcp64=nat46TotTcp64, caMsftSmthStrmngPlVidcaBytesHR=caMsftSmthStrmngPlVidcaBytesHR, aaaTotTMSessions=aaaTotTMSessions, gslbPolicyName=gslbPolicyName, cipher128BitIDEA=cipher128BitIDEA, socksConnRespRcvd=socksConnRespRcvd, delCompBaseServed=delCompBaseServed, csPipolicyName=csPipolicyName, svctotalJsTransactions=svctotalJsTransactions, totaljstransaction=totaljstransaction, lldpStatsTxPortFramesTotal=lldpStatsTxPortFramesTotal, nsHighAvailabilityGroup=nsHighAvailabilityGroup, featureSureConnect=featureSureConnect, sysHealthCounterValue=sysHealthCounterValue, ifLinkReinits=ifLinkReinits, nat46TotUdp64=nat46TotUdp64, appFirewallViolFieldConsistency=appFirewallViolFieldConsistency, lsnLogTotADMappingDeleteEntries=lsnLogTotADMappingDeleteEntries, svcscpolicyAvgServerTransactionTime=svcscpolicyAvgServerTransactionTime, psIpAddress=psIpAddress, mptcpErrJoinThreshold=mptcpErrJoinThreshold, compTcpRatio=compTcpRatio, udpTotTxPkts=udpTotTxPkts, ipv6AddressDuplicated=ipv6AddressDuplicated, vsProtocolType=vsProtocolType, tcpSurgeQueueLen=tcpSurgeQueueLen, cacheTotParameterized304Hits=cacheTotParameterized304Hits, cacheTotParameterizedRequests=cacheTotParameterizedRequests, caAppleLiveStreamingPlaylistVidBytes=caAppleLiveStreamingPlaylistVidBytes, lsnTotUdpRxPkts=lsnTotUdpRxPkts, pptpCtlErrNoCallidMap=pptpCtlErrNoCallidMap, totalClientConnections=totalClientConnections, haTotStateFail=haTotStateFail, tcpTotZombiePassiveHalfCloseCltConnFlushed=tcpTotZombiePassiveHalfCloseCltConnFlushed, cacheTotRequestsLow=cacheTotRequestsLow, platformPpsLimitThresholdNormal=platformPpsLimitThresholdNormal, nsTdInetMaskLength=nsTdInetMaskLength, caMsftSmthStrmVidBytes=caMsftSmthStrmVidBytes, sslTotSSLv3RenegSessionsHigh=sslTotSSLv3RenegSessionsHigh, svcTotalRequests=svcTotalRequests, svcServiceName=svcServiceName, pbr6FullName=pbr6FullName, scPolicyconfigTable=scPolicyconfigTable, tcpMaxReqsperConn=tcpMaxReqsperConn, certPath=certPath, tcpErrFirstRetransmissions=tcpErrFirstRetransmissions, crIndexVserverFullName=crIndexVserverFullName, sslBeTotDHAuthorizationsLow=sslBeTotDHAuthorizationsLow, svcGrpMemberName=svcGrpMemberName, ifTxAvgBandwidthUsage=ifTxAvgBandwidthUsage, deCompTcpBandwidthSaving=deCompTcpBandwidthSaving, nat46TotIcmp46=nat46TotIcmp46, partitionConfigEvent=partitionConfigEvent, caTotlookupstoremiss=caTotlookupstoremiss, crMapConfigEntry=crMapConfigEntry, compressionStats=compressionStats, svcGrpMemberGroupName=svcGrpMemberGroupName, sslBeTot40BitRC2CiphersLow=sslBeTot40BitRC2CiphersLow, icmpTotTxPktsHigh=icmpTotTxPktsHigh, scTotReissuedRequests=scTotReissuedRequests, cacAACaudioHR=cacAACaudioHR, inatNat46Drop46=inatNat46Drop46, sslTot128BitRC2Ciphers=sslTot128BitRC2Ciphers, vsvrTotalRequestBytesLow=vsvrTotalRequestBytesLow, dnsTotResponseBadLen=dnsTotResponseBadLen, cache64MaxMemoryKB=cache64MaxMemoryKB, wsIfStatsEntry=wsIfStatsEntry, appfwappFirewallViolStartURLPerProfile=appfwappFirewallViolStartURLPerProfile, svcSslCipherBindName=svcSslCipherBindName, sslTotSSLv3ClientAuthentications=sslTotSSLv3ClientAuthentications, qdepthThreshval=qdepthThreshval, nsLsnDSLiteGlobalStatsGroup=nsLsnDSLiteGlobalStatsGroup, compTotalDataCompressionRatio=compTotalDataCompressionRatio, tcpMaxPerSrvrReusePool=tcpMaxPerSrvrReusePool, cacheTotHitsLow=cacheTotHitsLow, sslTotTLSv11Transactions=sslTotTLSv11Transactions, sslBeTotDH512keyExchangesHigh=sslBeTotDH512keyExchangesHigh, sslTot40BitRC4Ciphers=sslTot40BitRC4Ciphers, lsnLogTotDeterministicAllocs=lsnLogTotDeterministicAllocs, serviceTxBytesRateNormal=serviceTxBytesRateNormal, scPolicyUrl=scPolicyUrl, rnatTotTxBytes=rnatTotTxBytes, vsvrName=vsvrName, cswVsIpAddress=cswVsIpAddress, httpTotTxResponseBytesHigh=httpTotTxResponseBytesHigh, lsnTotDSLiteRxPkts=lsnTotDSLiteRxPkts, aggregateBWUseHigh=aggregateBWUseHigh, caUnidentifiedcache=caUnidentifiedcache, tcpErrRstThreshold=tcpErrRstThreshold, sslTotTLSv1RenegSessionsLow=sslTotTLSv1RenegSessionsLow, delCompTcpRxPackets=delCompTcpRxPackets, htmlInjectionStatsGroup=htmlInjectionStatsGroup, vserverAdvanceSslConfigTable=vserverAdvanceSslConfigTable, nsRoot=nsRoot, modeDirectRouteAdv=modeDirectRouteAdv, sslBeTotRSA512keyExchangesLow=sslBeTotRSA512keyExchangesLow, crMapDstUrl=crMapDstUrl, nsTdInetAddressType=nsTdInetAddressType, sslBeTot56BitRC2Ciphers=sslBeTot56BitRC2Ciphers, lldpLocSysCapEnabled=lldpLocSysCapEnabled, sslCurSessionInUseNormal=sslCurSessionInUseNormal)
mibBuilder.exportSymbols("NS-ROOT-MIB", lldpStatsRemTablesInserts=lldpStatsRemTablesInserts, nsLLDPRemEntry=nsLLDPRemEntry, mcAppleLiveStreamingVidBytes=mcAppleLiveStreamingVidBytes, cacheRecentPercentByteHit=cacheRecentPercentByteHit, pbr6perHits=pbr6perHits, cipherGroupId=cipherGroupId, socksConnReqRcvd=socksConnReqRcvd, dnsServerZoneEntry=dnsServerZoneEntry, cachePercentPetHits=cachePercentPetHits, keyExDH512=keyExDH512, cacAppleLiveStreamingPlaylistVidHR=cacAppleLiveStreamingPlaylistVidHR, caMP4VidBytes=caMP4VidBytes, lsnGrpCurTcpSessions=lsnGrpCurTcpSessions, cacheTotFullToConditionalRequestLow=cacheTotFullToConditionalRequestLow, svcMaxReqPerConn=svcMaxReqPerConn, caIoscache=caIoscache, monitorRTO=monitorRTO, lsnGrpTotTcpTranslPkts=lsnGrpTotTcpTranslPkts, clusterVersionMismatch=clusterVersionMismatch, cacADTSaudio=cacADTSaudio, mcTotResponse=mcTotResponse, pqpolicyconfigEntry=pqpolicyconfigEntry, httpTotGetsLow=httpTotGetsLow, nsPolicyStatsEntry=nsPolicyStatsEntry, sslBeTotSHAMacLow=sslBeTotSHAMacLow, htmlInjectedBytes=htmlInjectedBytes, dosPolicyName=dosPolicyName, appfwappFirewallViolFieldConsistencyPerProfile=appfwappFirewallViolFieldConsistencyPerProfile, vsvrTotalResponsesLow=vsvrTotalResponsesLow, icmpTotTxEchoReplyLow=icmpTotTxEchoReplyLow, cswConfigEntry=cswConfigEntry, ipConflict=ipConflict, sacl6StatsGroup=sacl6StatsGroup, mediaclassification=mediaclassification, cacheTotResponseBytes=cacheTotResponseBytes, dnsTotPTRrecQueries=dnsTotPTRrecQueries, svcGslbSiteName=svcGslbSiteName, pqpolicypqCurrentClientConnections=pqpolicypqCurrentClientConnections, virServiceName=virServiceName, cpeeQualifier=cpeeQualifier, sslTotTLSv1SessionsLow=sslTotTLSv1SessionsLow, sslTotBkendTlSv12Renego=sslTotBkendTlSv12Renego, vPathTotFragEncapPkts=vPathTotFragEncapPkts, lsnTotNAT64UdpRxBytes=lsnTotNAT64UdpRxBytes, ipv6TotTxPkts=ipv6TotTxPkts, sslTotRSAAuthorizations=sslTotRSAAuthorizations, sslBeTotDSSAuthorizations=sslBeTotDSSAuthorizations, lldpLocSysDesc=lldpLocSysDesc, entitydown=entitydown, curServerEstablishedConn=curServerEstablishedConn, sslCipherDesc=sslCipherDesc, httpTot10Requests=httpTot10Requests, vPathTotFragPkts=vPathTotFragPkts, vsvrTotalSynsRecvdHigh=vsvrTotalSynsRecvdHigh, crlId=crlId, pbr6Priority=pbr6Priority, changeToSecondary=changeToSecondary, zoneIndex=zoneIndex, mptcpErrVersionNotSupported=mptcpErrVersionNotSupported, sslV3TxCount=sslV3TxCount, compactFlashErrors=compactFlashErrors, sslBeTotSSLv3SessionsHigh=sslBeTotSSLv3SessionsHigh, rxFrameErrors=rxFrameErrors, sslBeTot40BitDESCiphers=sslBeTot40BitDESCiphers, serviceHitsLow=serviceHitsLow, appFirewallViolXmlXssViolations=appFirewallViolXmlXssViolations, caFLVVidBytes=caFLVVidBytes, cacheNumMBSavedOnDisk=cacheNumMBSavedOnDisk, vlanBindIpNetmask=vlanBindIpNetmask, lldpStatsRxPortTLVsDiscardedTotal=lldpStatsRxPortTLVsDiscardedTotal, lldpStatsRxPortNum=lldpStatsRxPortNum, httpErrServerBusy=httpErrServerBusy, cipherbName=cipherbName, totaltxbytes=totaltxbytes, dnsTotArecUpdate=dnsTotArecUpdate, lsnSubscrIP=lsnSubscrIP, dnsTotSOArecFailed=dnsTotSOArecFailed, nsInetMode=nsInetMode, lldpRemChassisId=lldpRemChassisId, caADTSaudiocacheBytes=caADTSaudiocacheBytes, alarmProbeFailedRetries=alarmProbeFailedRetries, vserverScpolicyEntry=vserverScpolicyEntry, sslTotDH1024keyExchangesLow=sslTotDH1024keyExchangesLow, dnsTotSOAresponse=dnsTotSOAresponse, weight=weight, icmpTotInvalidNextMTUval=icmpTotInvalidNextMTUval, gslbDomainStatsTable=gslbDomainStatsTable, sslTotECDHE521keyExchanges=sslTotECDHE521keyExchanges, serviceCipherBindingTable=serviceCipherBindingTable, wsMappedIpAddressRange=wsMappedIpAddressRange, pqPolicyWeight=pqPolicyWeight, caMsftSmthStrmPlVidBytes=caMsftSmthStrmPlVidBytes, svcgrpSvcGroupState=svcgrpSvcGroupState, ifErrPktRx=ifErrPktRx, svcSurgeCount=svcSurgeCount, sslBeTotSessionMultiplexAttemptSuccess=sslBeTotSessionMultiplexAttemptSuccess, vsvrActiveActiveState=vsvrActiveActiveState, icmpTotPMTUDiscoveryDisabled=icmpTotPMTUDiscoveryDisabled, inatTotpktreceived=inatTotpktreceived, svcEstablishedConn=svcEstablishedConn, cacheTotExpireAtLastByte=cacheTotExpireAtLastByte, dnsTotArecFailed=dnsTotArecFailed, nsInetMaskLenth=nsInetMaskLenth, caOther=caOther, actionname=actionname, caMsftSmthStrmVid=caMsftSmthStrmVid, cpesPolicyhits=cpesPolicyhits, rulename=rulename, ifInterfaceAlias=ifInterfaceAlias, vsvrTotalSynsRecvdLow=vsvrTotalSynsRecvdLow, alarmVipRhiIpAddr=alarmVipRhiIpAddr, lsnTotUdpRxBytes=lsnTotUdpRxBytes, lsnCurUdpSessions=lsnCurUdpSessions, cacheMaxMemoryActiveKB=cacheMaxMemoryActiveKB, compTotalTxBytes=compTotalTxBytes, clNodeEffectiveHealth=clNodeEffectiveHealth, mptcpErrInvalCookie=mptcpErrInvalCookie, fanSpeedLow=fanSpeedLow, httpTotClenResponses=httpTotClenResponses, pptpTotCtrlSessions=pptpTotCtrlSessions, cipInsertionHeader=cipInsertionHeader, newOVS=newOVS, staValidNoClnt=staValidNoClnt, clusterBackplaneHBMissing=clusterBackplaneHBMissing, svcGroupMemberTxBytesRate=svcGroupMemberTxBytesRate, vsvrSsleRSACount=vsvrSsleRSACount, tcpActiveServerConn=tcpActiveServerConn, caUnidentifiedBytes=caUnidentifiedBytes, dnsTotMXresponse=dnsTotMXresponse, sslBeTotDH1024keyExchangesHigh=sslBeTotDH1024keyExchangesHigh, ifTotRxXoffPause=ifTotRxXoffPause, appfwappFirewallViolXmlSoapFaultViolationsPerProfile=appfwappFirewallViolXmlSoapFaultViolationsPerProfile, crpolicyName=crpolicyName, nsUdpStatsGroup=nsUdpStatsGroup, sysCurMappedIpCount=sysCurMappedIpCount, sslTot64BitRC4Ciphers=sslTot64BitRC4Ciphers, haErrSwMonitorFail=haErrSwMonitorFail, wsClientIp=wsClientIp, pqTotalThresholdFailed=pqTotalThresholdFailed, tcpErrSynRetry=tcpErrSynRetry, sslTot128BitIDEACiphersHigh=sslTot128BitIDEACiphersHigh, vsvrCurServicesOutOfSvc=vsvrCurServicesOutOfSvc, rxRawBandwidthUsage=rxRawBandwidthUsage, persExchange=persExchange, iipSpilloverMIPused=iipSpilloverMIPused, length=length, svcInetAddressType=svcInetAddressType, dstip=dstip, compTcpTotalPush=compTcpTotalPush, appfwRefererHeader=appfwRefererHeader, inatTotReceiveBytes=inatTotReceiveBytes, siteType=siteType, lsnGrpCurUdpSessions=lsnGrpCurUdpSessions, ifThroughput=ifThroughput, sslTotTLSv1Handshakes=sslTotTLSv1Handshakes, totalResponses1_0=totalResponses1_0, protocol=protocol, cacheTotSuccessfulRevalidationLow=cacheTotSuccessfulRevalidationLow, haPropSuccess=haPropSuccess, crMapBindConfigTable=crMapBindConfigTable, compTcpTotalTxPackets=compTcpTotalTxPackets, crpolicyHitsHigh=crpolicyHitsHigh, icmpTotBadChecksum=icmpTotBadChecksum, socksServerError=socksServerError, mcEncAndroid=mcEncAndroid, haErrPropMemFail=haErrPropMemFail, totUnsupportedQueries=totUnsupportedQueries, cipherID=cipherID, vsvrSslCipherBindName=vsvrSslCipherBindName, httpErrLargeChunkHigh=httpErrLargeChunkHigh, cacheCompressedBytesServedHigh=cacheCompressedBytesServedHigh, aaaCurSessions=aaaCurSessions, tagId=tagId, cacheRecentPercentStoreAbleMiss=cacheRecentPercentStoreAbleMiss, appfwSQL=appfwSQL, dnsCurRecords=dnsCurRecords, compTcpTotalTimer=compTcpTotalTimer, lsnGrpTotTcpDrpBytes=lsnGrpTotTcpDrpBytes, vsvrHealth=vsvrHealth, cacheTotFlashcacheMisses=cacheTotFlashcacheMisses, cipherBindServiceType=cipherBindServiceType, sslTotOffloadDHKeyExchanges=sslTotOffloadDHKeyExchanges, nsLLDPStatsTxPortEntry=nsLLDPStatsTxPortEntry, powerSupplyFailed=powerSupplyFailed, lsnTotIcmpTxBytes=lsnTotIcmpTxBytes, vlanTotTxBytesLow=vlanTotTxBytesLow, cacheTotRevalidationMissLow=cacheTotRevalidationMissLow, clSyncState=clSyncState, appfwSafeObject=appfwSafeObject, lsnGrpTotIcmpDrpBytes=lsnGrpTotIcmpDrpBytes, dhFile=dhFile, sslBeTot40BitDESCiphersLow=sslBeTot40BitDESCiphersLow, sslTotTLSv1Sessions=sslTotTLSv1Sessions, httpErrLargeContentLow=httpErrLargeContentLow, delCompErrReqinfoToobig=delCompErrReqinfoToobig, caADTSaudiocacheBytesHR=caADTSaudiocacheBytesHR, sysHealthDiskName=sysHealthDiskName, appfwappFirewallRet5xxPerProfile=appfwappFirewallRet5xxPerProfile, piPolicyBindingHits=piPolicyBindingHits, sslTot168Bit3DESCiphersLow=sslTot168Bit3DESCiphersLow, pqpolicypqVserverPort=pqpolicypqVserverPort, httpTotChunkedRequests=httpTotChunkedRequests, cspolicyHitsLow=cspolicyHitsLow, udpTotRxBytesLow=udpTotRxBytesLow, nsLLDPLocManAddrEntry=nsLLDPLocManAddrEntry, svcGrpMemberMaxReqPerConn=svcGrpMemberMaxReqPerConn, nsFiltersGroup=nsFiltersGroup, vridStateChange=vridStateChange, caFLVVidcacheBytes=caFLVVidcacheBytes, dnsServer=dnsServer, sysHardwareEncodedSerialNumber=sysHardwareEncodedSerialNumber, tcpCurServerConnOpening=tcpCurServerConnOpening, httpErrIncompleteResponsesHigh=httpErrIncompleteResponsesHigh, vsvrMaxReqPerConn=vsvrMaxReqPerConn, vPathTotL3EncapPkts=vPathTotL3EncapPkts, lsnTotIcmpRxPkts=lsnTotIcmpRxPkts, pqpolicypqQdepth=pqpolicypqQdepth, monitorProbes=monitorProbes, minPathMTU=minPathMTU, ipConflictMacAddr=ipConflictMacAddr, pqStatsperpqpolicyandperLBVipTable=pqStatsperpqpolicyandperLBVipTable, nsTdInetVxlan=nsTdInetVxlan, vsvrTotalClients=vsvrTotalClients, dnsTotRecUpdate=dnsTotRecUpdate, appfwappFirewallShortAvgRespTimePerProfile=appfwappFirewallShortAvgRespTimePerProfile, ipv6TotStaticRoutes=ipv6TotStaticRoutes, tcpTotCltFin=tcpTotCltFin, sslBeTotTLSv1ClientAuthenticationsLow=sslBeTotTLSv1ClientAuthenticationsLow, lsnTotDrpPkts=lsnTotDrpPkts, nsLLDPLocPortTable=nsLLDPLocPortTable, haPeerSystemState=haPeerSystemState, caMP4VidcacheBytes=caMP4VidcacheBytes, nat64TotIcmpSessions=nat64TotIcmpSessions, lldpRemSysDesc=lldpRemSysDesc, sslTotCipherAES128=sslTotCipherAES128, totalRequests=totalRequests, cacheRecentPercentSuccessfulRevalidation=cacheRecentPercentSuccessfulRevalidation, appfwappFirewallViolRefererHeaderPerProfile=appfwappFirewallViolRefererHeaderPerProfile, lsnLogTotIcmpMappingCreateEntries=lsnLogTotIcmpMappingCreateEntries, monitorFailedPort=monitorFailedPort, svcGrpMemberServiceType=svcGrpMemberServiceType, cachePercentStoreAbleMiss=cachePercentStoreAbleMiss, ifTotXonSent=ifTotXonSent, svcscpolicyscTotalServerConnections=svcscpolicyscTotalServerConnections, featureWebLogging=featureWebLogging, staValidNoEst=staValidNoEst, rnatTotTxPkts=rnatTotTxPkts, nsInetBridgeGroup=nsInetBridgeGroup, vsvrscpolicyscCurrentClientConnections=vsvrscpolicyscCurrentClientConnections, crVsIpAddress=crVsIpAddress, sslTotTLSv1ClientAuthenticationsLow=sslTotTLSv1ClientAuthenticationsLow, ifTotRxXonPause=ifTotRxXonPause, dnsTotSRVresponse=dnsTotSRVresponse, sslBeTot56BitDESCiphers=sslBeTot56BitDESCiphers)
mibBuilder.exportSymbols("NS-ROOT-MIB", piPolicyUndefHits=piPolicyUndefHits, pqpolicyQdepth=pqpolicyQdepth, sslTotHwDecFE=sslTotHwDecFE, scPolicyStatistics=scPolicyStatistics, ipTotTxPkts=ipTotTxPkts, caFLVVid=caFLVVid, lsnLogTotIcmpSessionCreateEntries=lsnLogTotIcmpSessionCreateEntries, aaaAuthSuccess=aaaAuthSuccess, svcServiceType=svcServiceType, svcGrpMemberTxBytesRate=svcGrpMemberTxBytesRate, alarmVsvrNewName=alarmVsvrNewName, mptcpErrBadCksum=mptcpErrBadCksum, cacheTotHitsHigh=cacheTotHitsHigh, svcscpolicyscPhysicalServicePort=svcscpolicyscPhysicalServicePort, dnskeyExpiry=dnskeyExpiry, sslTotNULLAuthorizationsHigh=sslTotNULLAuthorizationsHigh, aclPriority=aclPriority, featureHtmlInjection=featureHtmlInjection, dnsTotQueries=dnsTotQueries, dnsTotErrNoDomains=dnsTotErrNoDomains, crbPolicyname=crbPolicyname, cacAppleLiveStreamingVid=cacAppleLiveStreamingVid, sslTotSSLv3Handshakes=sslTotSSLv3Handshakes, monitorMaxClient=monitorMaxClient, serviceRxBytesRateNormal=serviceRxBytesRateNormal, pqStatsperLBVipTable=pqStatsperLBVipTable, lldpRemManAddrIfSubtype=lldpRemManAddrIfSubtype, serviceRequestRate=serviceRequestRate, alarmVipRhiInetAddressType=alarmVipRhiInetAddressType, sslTotSSLv2SessionsHigh=sslTotSSLv2SessionsHigh, maxClients=maxClients, numSSLCards=numSSLCards, caFLVVidcacheBytesHR=caFLVVidcacheBytesHR, crbPolicyHits=crbPolicyHits, sslTotExpiredSessionsLow=sslTotExpiredSessionsLow, cswStatisticsTable=cswStatisticsTable, sslTotECDSAAuthorizations=sslTotECDSAAuthorizations, modeIntranetRouteAdv=modeIntranetRouteAdv, pserPort=pserPort, nsTdInetId=nsTdInetId, vxlanTotRxBytes=vxlanTotRxBytes, voltageLow=voltageLow, cacAppleLiveStreamingVidHR=cacAppleLiveStreamingVidHR, cipher128BitRC4=cipher128BitRC4, sslBeTotEcdheCurve224=sslBeTotEcdheCurve224, crlPath=crlPath, curClientEstablishedConn=curClientEstablishedConn, nsRecQueries=nsRecQueries, maxReqPerConnection=maxReqPerConnection, csPiIndexVserverFullName=csPiIndexVserverFullName, pbrName=pbrName, lsnTotTcpDrpPkts=lsnTotTcpDrpPkts, lsnNAT64IcmpSessionsRate=lsnNAT64IcmpSessionsRate, tcpTotSvrFin=tcpTotSvrFin, pqpolicyconfigTable=pqpolicyconfigTable, vserverEntry=vserverEntry, cacheTotMissesLow=cacheTotMissesLow, pqstatistics=pqstatistics, sslTot40BitRC4CiphersHigh=sslTot40BitRC4CiphersHigh, scFaultyCookies=scFaultyCookies, ClusterCurHealth=ClusterCurHealth, haNicsMonitorFailed=haNicsMonitorFailed, gslbGlobalStats=gslbGlobalStats, ifRxCRCErrors=ifRxCRCErrors, pqPolicyConfigEntry=pqPolicyConfigEntry, sysCustomID=sysCustomID, sslBeTotSessionsHigh=sslBeTotSessionsHigh, nsSslConfigGroup=nsSslConfigGroup, cachePercentByteHit=cachePercentByteHit, tcpErrPartialRetrasmit=tcpErrPartialRetrasmit, nsInetFreePorts=nsInetFreePorts, sslTotSessions=sslTotSessions, txRawBandwidthUsage=txRawBandwidthUsage, sslBeMaxMultiplexedSessionsHigh=sslBeMaxMultiplexedSessionsHigh, phyPort=phyPort, monitorRetrys=monitorRetrys, svcTotalPktsRecvdHigh=svcTotalPktsRecvdHigh, sslBeExpiredSessionsLow=sslBeExpiredSessionsLow, nsScPolicyGroup=nsScPolicyGroup, ipRnatTotTxBytes=ipRnatTotTxBytes, crlTable=crlTable, sslTotEncFE=sslTotEncFE, txCarrierErrors=txCarrierErrors, cacheCompressedBytesServedLow=cacheCompressedBytesServedLow, lldpLocPortIdSubtype=lldpLocPortIdSubtype, svcGrpMemberWeight=svcGrpMemberWeight, sslTotSSLv3TransactionsLow=sslTotSSLv3TransactionsLow, rnatCurSessions=rnatCurSessions, nsDomainEntry=nsDomainEntry, sslTotNewSessionsHigh=sslTotNewSessionsHigh, nsInetAddressType=nsInetAddressType, haCurDerivedInc=haCurDerivedInc, totalIncompleteHeaders=totalIncompleteHeaders, sslTot56BitRC2CiphersHigh=sslTot56BitRC2CiphersHigh, tcpErrCookiePktSigReject=tcpErrCookiePktSigReject, cacheRecentPercentParameterizedHits=cacheRecentPercentParameterizedHits, tcpErrCookiePktMssReject=tcpErrCookiePktMssReject, svcGrpMemberSynfloodRate=svcGrpMemberSynfloodRate, haErrMasterDispute=haErrMasterDispute, acl6FullName=acl6FullName, netScalerConfigChange=netScalerConfigChange, lsnGrpTotUdpDrpPkts=lsnGrpTotUdpDrpPkts, group304hit=group304hit, sslTotNULLAuthorizationsLow=sslTotNULLAuthorizationsLow, sslTot64BitRC4CiphersLow=sslTot64BitRC4CiphersLow, vlanTotRxBytesLow=vlanTotRxBytesLow, spdyTotStreams=spdyTotStreams, svcInetAddress=svcInetAddress, pqPolWeight=pqPolWeight, scProtocolType=scProtocolType, crpolicyHits=crpolicyHits, svcGroupMemberRxBytesRateNormal=svcGroupMemberRxBytesRateNormal, udpTotRxBytes=udpTotRxBytes, ifErrPktTx=ifErrPktTx, vlanTotBroadcastPktsHigh=vlanTotBroadcastPktsHigh, compTcpTotalEoi=compTcpTotalEoi, sslCrlTable=sslCrlTable, mcMsSmthStrmVid=mcMsSmthStrmVid, interfaceBWUseHigh=interfaceBWUseHigh, sslNumCardsUP=sslNumCardsUP, aaaTotSessions=aaaTotSessions, cipher56BitDES=cipher56BitDES, udpTotTxBytes=udpTotTxBytes, sslTotSSLv2HandshakesHigh=sslTotSSLv2HandshakesHigh, dnsTotEntries=dnsTotEntries, dnsTotReqRefusals=dnsTotReqRefusals, cipher56BitRC2=cipher56BitRC2, appFirewallViolXSS=appFirewallViolXSS, featureSurgeProtection=featureSurgeProtection, deCompTcpRxPackets=deCompTcpRxPackets, mcFLVVidBytes=mcFLVVidBytes, cacheErrMemAllocHigh=cacheErrMemAllocHigh, nsVserverGroup=nsVserverGroup, vsvrscpolicytotClientTransaction=vsvrscpolicytotClientTransaction, sslBeTot64BitRC4Ciphers=sslBeTot64BitRC4Ciphers, caAppleLiveStrmngVidcacheBytesHR=caAppleLiveStrmngVidcacheBytesHR, sslTotDecBE=sslTotDecBE, nat64TotTcpSessions=nat64TotTcpSessions, cpuUtilization=cpuUtilization, csNonHttpProbeHit=csNonHttpProbeHit, dtlsStaPostResponseError=dtlsStaPostResponseError, mcIos=mcIos, nsTcpStatsGroup=nsTcpStatsGroup, serviceGroupMemberTable=serviceGroupMemberTable, delCompTcpTxBytes=delCompTcpTxBytes, lsnSessLimitExceededBy=lsnSessLimitExceededBy, mcEncHls=mcEncHls, lsnGrpCurSessions=lsnGrpCurSessions, dstDomain=dstDomain, cipher168Bit3DES=cipher168Bit3DES, monitorFailedId=monitorFailedId, tcpErrBadStateConn=tcpErrBadStateConn, caMsftSmthStrmngVidCaBytesHR=caMsftSmthStrmngVidCaBytesHR, ipTotZeroNextHop=ipTotZeroNextHop, IpAddressMode=IpAddressMode, vsvrTotMiss=vsvrTotMiss, policyHits=policyHits, mcAppleLiveStreamingPlaylistVidBytespl=mcAppleLiveStreamingPlaylistVidBytespl, svcdospolicydosTotValidClients=svcdospolicydosTotValidClients, svcGrpMemberEstablishedConn=svcGrpMemberEstablishedConn, memoryUtilization=memoryUtilization, svcscpolicydesIpAddress=svcscpolicydesIpAddress, nsTdInetType=nsTdInetType, vsvrTotHits=vsvrTotHits, ifTotXoffStateEntered=ifTotXoffStateEntered, cipherGroupTable=cipherGroupTable, modeFastRamp=modeFastRamp, value=value, sslBeTotSSLv3ClientAuthentications=sslBeTotSSLv3ClientAuthentications, mcEncOther=mcEncOther, authorizationStatus=authorizationStatus, dosservicestatsEntry=dosservicestatsEntry, lldpLocManAddrIfSubtype=lldpLocManAddrIfSubtype, gslbSiteInetAddress=gslbSiteInetAddress, appfwappFirewallTotalViolPerProfile=appfwappFirewallTotalViolPerProfile, svcTotalResponsesLow=svcTotalResponsesLow, nsInetAddressEntry=nsInetAddressEntry, fanSpeedNormal=fanSpeedNormal, pqName=pqName, ipTotUnknownSvcs=ipTotUnknownSvcs, dnsTotServerResponse=dnsTotServerResponse, aaaAuthNonHttpSuccess=aaaAuthNonHttpSuccess, monitorMemberEntry=monitorMemberEntry, wsPriority=wsPriority, entityTxRateNormal=entityTxRateNormal, sslBeTotNULLAuthorizationsHigh=sslBeTotNULLAuthorizationsHigh, lsnGrpUdpSessRate=lsnGrpUdpSessRate, svcSslDHFilePath=svcSslDHFilePath, vserverSynfloodRate=vserverSynfloodRate, aclHits=aclHits, cmpTotRxbytes=cmpTotRxbytes, sslTotRSA512keyExchanges=sslTotRSA512keyExchanges, sysConfig=sysConfig, sslBeTot64BitRC4CiphersLow=sslBeTot64BitRC4CiphersLow, tcpErrSynInSynRcvd=tcpErrSynInSynRcvd, sslCardStatusMsg=sslCardStatusMsg, appfwappFirewallRequestsPerProfile=appfwappFirewallRequestsPerProfile, lsnTotIcmpTxPkts=lsnTotIcmpTxPkts, appfwProfileTable=appfwProfileTable, tcpErrStrayPkt=tcpErrStrayPkt, appfwappFirewallResBytesPerProfile=appfwappFirewallResBytesPerProfile, totalrxbytes=totalrxbytes, deCompTcpRxBytes=deCompTcpRxBytes, csHttpProbeHit=csHttpProbeHit, sslChipReinit=sslChipReinit, inatNat46Udp46=inatNat46Udp46, lsnTotUdpTxBytes=lsnTotUdpTxBytes, wsFailoverTime=wsFailoverTime, vserverTable=vserverTable, httpErrLargeCtlenHigh=httpErrLargeCtlenHigh, mptcpInfiniteMapRecvd=mptcpInfiniteMapRecvd, crPolicyMapConfigTable=crPolicyMapConfigTable, actionType=actionType, pserId=pserId, saclTotPktsAllowed=saclTotPktsAllowed, ifTxCollisions=ifTxCollisions, totalServerConnections=totalServerConnections, ipTotAddrLookupFail=ipTotAddrLookupFail, sslTotSHAMacLow=sslTotSHAMacLow, policyvalue=policyvalue, delCompErrBypassed=delCompErrBypassed, cspolicyDestVserverName=cspolicyDestVserverName, vsvrSslClearTextPort=vsvrSslClearTextPort, MonitorType=MonitorType, sslTotSessionHitsHigh=sslTotSessionHitsHigh, tcpErrSvrHole=tcpErrSvrHole, pqpolicyname=pqpolicyname, svcCount=svcCount, siteTotalRequestBytes=siteTotalRequestBytes, vsvrType=vsvrType, haTimeofLastStateTransition=haTimeofLastStateTransition, ipTotUnknownSvcsLow=ipTotUnknownSvcsLow, cacheCompressedBytesServed=cacheCompressedBytesServed, netScalerLoginFailure=netScalerLoginFailure, appfwXMLWSI=appfwXMLWSI, staRenewRecvd=staRenewRecvd, actionhits=actionhits, haErrNsbMemFail=haErrNsbMemFail, pqPriority2Requests=pqPriority2Requests, sslTotDH512keyExchangesHigh=sslTotDH512keyExchangesHigh, interfaceBWUseNormal=interfaceBWUseNormal, totalPipeLinedRequests=totalPipeLinedRequests, totalRequests1_0=totalRequests1_0, clusterTable=clusterTable, httpTotNoClenChunkResponses=httpTotNoClenChunkResponses, caTotlookuphit=caTotlookuphit, haTotPktTx=haTotPktTx, nsLsnMappingLogStatsGroup=nsLsnMappingLogStatsGroup, appfwXMLSQL=appfwXMLSQL, svcSslCipherBindDesc=svcSslCipherBindDesc, vsvrTotalRequestsLow=vsvrTotalRequestsLow, tcpErrRst=tcpErrRst, ipTotTtlExpired=ipTotTtlExpired, aclStatsGroup=aclStatsGroup)
mibBuilder.exportSymbols("NS-ROOT-MIB", dnsTotCNAMErecQueries=dnsTotCNAMErecQueries, rsa2048KeyExThresholdNormal=rsa2048KeyExThresholdNormal, ClusterSyncState=ClusterSyncState, ifErrRxNoBuffs=ifErrRxNoBuffs, tcpCurServerConn=tcpCurServerConn, cacheLargestResponseReceived=cacheLargestResponseReceived, lsnLogTotAPDMappingCreateEntries=lsnLogTotAPDMappingCreateEntries, destinationInetAddress=destinationInetAddress, sslTotRenegSessionsLow=sslTotRenegSessionsLow, vsvrCurServicesDown=vsvrCurServicesDown, calaptopDesktpcache=calaptopDesktpcache, sslTotRSA1024keyExchanges=sslTotRSA1024keyExchanges, rsa4096KeyExThresholdHigh=rsa4096KeyExThresholdHigh, lldpRemPortId=lldpRemPortId, mcTotother=mcTotother, cpecPolicyname=cpecPolicyname, phyServiceTable=phyServiceTable, tcpErrSeventhRetransmissions=tcpErrSeventhRetransmissions, vsvrEstablishedConn=vsvrEstablishedConn, caOtherididcacheBytes=caOtherididcacheBytes, mptcpErrCryptoNotSupported=mptcpErrCryptoNotSupported, lsnTotIcmpRxBytes=lsnTotIcmpRxBytes, crlName=crlName, svcdospolicydosTotNonGetPostRequests=svcdospolicydosTotNonGetPostRequests, lldpLocManAddr=lldpLocManAddr, sslTotEncBE=sslTotEncBE, appFirewallViolFieldformat=appFirewallViolFieldformat, sacl6TotPktsBridged=sacl6TotPktsBridged, flushThresReached=flushThresReached, acPbrName=acPbrName, lsnLogTotEIMappingCreateEntries=lsnLogTotEIMappingCreateEntries, interfaceThroughputNormal=interfaceThroughputNormal, lsnLogTotTcpPortblockAllocs=lsnLogTotTcpPortblockAllocs, sslTotOffloadSignRSALow=sslTotOffloadSignRSALow, udpTotTxBytesHigh=udpTotTxBytesHigh, vsvrRequestRate=vsvrRequestRate, vlancInterfaces=vlancInterfaces, aclperHits=aclperHits, ftpPortRange=ftpPortRange, drtmActiveMonitors=drtmActiveMonitors, appfwXSS=appfwXSS, vxlanTotTxBytes=vxlanTotTxBytes, oldCCOIP=oldCCOIP, aclTotPktsReusedHigh=aclTotPktsReusedHigh, scThresholdFail=scThresholdFail, tcpCurServerConnEstablished=tcpCurServerConnEstablished, cacheTotRevalidationMissHigh=cacheTotRevalidationMissHigh, cpsConnSuccess=cpsConnSuccess, reuseHit=reuseHit, nsPbrEntry=nsPbrEntry, sslTotTLSv1ClientAuthentications=sslTotTLSv1ClientAuthentications, VServerType=VServerType, mptcpMPFailRecvd=mptcpMPFailRecvd, lbvsvrActiveConn=lbvsvrActiveConn, svcdospolicydosPhysicalServicePort=svcdospolicydosPhysicalServicePort, httpTotResponsesLow=httpTotResponsesLow, mptcpErrResFlagSet=mptcpErrResFlagSet, sslBeTotDHAuthorizationsHigh=sslBeTotDHAuthorizationsHigh, svcscpolicyscTotalResponseBytes=svcscpolicyscTotalResponseBytes, nsSysHealthTable=nsSysHealthTable, dhCount=dhCount, httpTotRequests=httpTotRequests, crMapBindConfigEntry=crMapBindConfigEntry, ipTotUnsuccReassembly=ipTotUnsuccReassembly, appfwappFirewallAbortsPerProfile=appfwappFirewallAbortsPerProfile, svcdosQDepth=svcdosQDepth, netScalerConfigSave=netScalerConfigSave, ipTotDupFragments=ipTotDupFragments, sslBeTotTLSv1SessionsHigh=sslBeTotTLSv1SessionsHigh, nsLsnLogStatsGroup=nsLsnLogStatsGroup, pqpolicyTotClientTransactionTime=pqpolicyTotClientTransactionTime, totalHits=totalHits, vsvrTotalPktsRecvdHigh=vsvrTotalPktsRecvdHigh, vsvrSoThresh=vsvrSoThresh, sslTotDec=sslTotDec, nsAclTable=nsAclTable, compTcpTotalTxBytes=compTcpTotalTxBytes, lsnTotNAT64IcmpRxPkts=lsnTotNAT64IcmpRxPkts, owaSupport=owaSupport, mptcpErrJoinAfterFallback=mptcpErrJoinAfterFallback, httpTot10ResponsesLow=httpTot10ResponsesLow, allNicTotRxMbits=allNicTotRxMbits, vsvrSslv3Protocol=vsvrSslv3Protocol, tlsV1TxCount=tlsV1TxCount, vsLbMethod=vsLbMethod, lldpRemPortIdSubtype=lldpRemPortIdSubtype, parseIPv6AddressErr=parseIPv6AddressErr, FeatureStatus=FeatureStatus, sslCipherGroupEntry=sslCipherGroupEntry, svcGroupMemberTxBytesRateNormal=svcGroupMemberTxBytesRateNormal, lsnTotNAT64IcmpTxBytes=lsnTotNAT64IcmpTxBytes, vlanstatsTable=vlanstatsTable, sslTotSessionMiss=sslTotSessionMiss, wsSystem=wsSystem, icmpTotTxPktsLow=icmpTotTxPktsLow, cacheTotNon304HitsHigh=cacheTotNon304HitsHigh, ifTotRxPkts=ifTotRxPkts, dnsTotErrAliasEx=dnsTotErrAliasEx, cacheTotNon304Hits=cacheTotNon304Hits, nsAcl6Table=nsAcl6Table, phyServiceEntry=phyServiceEntry, sslTotEncSw=sslTotEncSw, vserverServiceTable=vserverServiceTable, currudpsessions=currudpsessions, sslTotDH2048keyExchangesHigh=sslTotDH2048keyExchangesHigh, svcTotalResponseBytes=svcTotalResponseBytes, cacMsftSmthStrmPlVidHR=cacMsftSmthStrmPlVidHR, sslTotExpiredSessions=sslTotExpiredSessions, svcGrpMemberRxBytesRate=svcGrpMemberRxBytesRate, scPolicyConfigTable=scPolicyConfigTable, cookiePacketSeqReject=cookiePacketSeqReject, httpTotPostsLow=httpTotPostsLow, nsLsnGroupEntry=nsLsnGroupEntry, ipRnatTotRxBytes=ipRnatTotRxBytes, sslTotOffloadRSAKeyExchanges=sslTotOffloadRSAKeyExchanges, gslbSitesTable=gslbSitesTable, qosdVersion=qosdVersion, nsIcmpStatsGroup=nsIcmpStatsGroup, totalContentLenResponses=totalContentLenResponses, vsvrTotalPktsRecvdLow=vsvrTotalPktsRecvdLow, lldpStatsRxPortFramesErrors=lldpStatsRxPortFramesErrors, crMapSrcName=crMapSrcName, totalFsRequest=totalFsRequest, pptpSetLinkInfo=pptpSetLinkInfo, warmRestartEvent=warmRestartEvent, clientConnRefused=clientConnRefused, lsnGrpCurIcmpSessions=lsnGrpCurIcmpSessions, aclTotPktsBridged=aclTotPktsBridged, staConnSuccess=staConnSuccess, monitorFailedResponse=monitorFailedResponse, httpTotResponses=httpTotResponses, caAndroidBytes=caAndroidBytes, lsnLogTotTcpMappingCreateEntries=lsnLogTotTcpMappingCreateEntries, vserverName=vserverName, lsnGrpTotTranslPkts=lsnGrpTotTranslPkts, ipTotMaxClientsLow=ipTotMaxClientsLow, delCompErrBFileWHdrFailed=delCompErrBFileWHdrFailed, sslCrlPath=sslCrlPath, lsnPortAllocFailed=lsnPortAllocFailed, svcTotalPktsSentLow=svcTotalPktsSentLow, cmpTotRxpkts=cmpTotRxpkts, tcpErrSynSentBadAck=tcpErrSynSentBadAck, sysHardwareVersionId=sysHardwareVersionId, icmpTotPortUnreachableTx=icmpTotPortUnreachableTx, sslTotECDHE256keyExchanges=sslTotECDHE256keyExchanges, nsRnatPerIPStatsTable=nsRnatPerIPStatsTable, svcAvgSvrTTFB=svcAvgSvrTTFB, gslbcDomainIndex=gslbcDomainIndex, cswVsPort=cswVsPort, sslBeSessionsReplacedLow=sslBeSessionsReplacedLow, pptpInCallConn=pptpInCallConn, delCompErrSessallocFail=delCompErrSessallocFail, appFirewallViolXmlSqlViolations=appFirewallViolXmlSqlViolations, caMsftSmthStrmVidHR=caMsftSmthStrmVidHR, pqPolicyStatistics=pqPolicyStatistics, ipv6FragTotPktsForward=ipv6FragTotPktsForward, icmpTotThresholdExceedsLow=icmpTotThresholdExceedsLow, dospolicyconfigTable=dospolicyconfigTable, totmemory=totmemory, vserverCipherBindingTable=vserverCipherBindingTable, vsvrTotalResponseBytesHigh=vsvrTotalResponseBytesHigh, sslv3=sslv3, compTcpTotalQuantum=compTcpTotalQuantum, ipTotTxBytes=ipTotTxBytes, appfwappFirewallViolDenyURLPerProfile=appfwappFirewallViolDenyURLPerProfile, svcSsleRSA=svcSsleRSA, snmpTrapVarBindOidsGroup=snmpTrapVarBindOidsGroup, sslBeTotDH2048keyExchangesLow=sslBeTotDH2048keyExchangesLow, vsvrTotalServers=vsvrTotalServers, ipTotTxMbitsHigh=ipTotTxMbitsHigh, cookieSignatureReject=cookieSignatureReject, lsnGrpTotUdpTranslPkts=lsnGrpTotUdpTranslPkts, lsnSessionsRate=lsnSessionsRate, totaltransaction=totaltransaction, nsCPUusage=nsCPUusage, dns64TotsvrAQueries=dns64TotsvrAQueries, lldpLocSysCapSupported=lldpLocSysCapSupported, pptpWanErrNotify=pptpWanErrNotify, appFirewallLongAvgRespTime=appFirewallLongAvgRespTime, sslBeTot64BitRC4CiphersHigh=sslBeTot64BitRC4CiphersHigh, sslTotECDHE384keyExchanges=sslTotECDHE384keyExchanges, vPathTotL2DataRx=vPathTotL2DataRx, pptpStrtCtrlConnReq=pptpStrtCtrlConnReq, acl6TotPktsNAT64=acl6TotPktsNAT64, sslTot56BitRC2CiphersLow=sslTot56BitRC2CiphersLow, lsnTotTxBytes=lsnTotTxBytes, lsnTotNAT64UdpTxPkts=lsnTotNAT64UdpTxPkts, vsvrTicksSinceLastStateChange=vsvrTicksSinceLastStateChange, vsvrscpolicytotOpenConn=vsvrscpolicytotOpenConn, vlanTotDroppedPktsHigh=vlanTotDroppedPktsHigh, dnsTotMultiQueryDisableError=dnsTotMultiQueryDisableError, dosAvgValidClients=dosAvgValidClients, svcGrpMemberAvgTransactionTime=svcGrpMemberAvgTransactionTime, ifErrRxFCS=ifErrRxFCS, nsTdInetAddress=nsTdInetAddress, tlsv1=tlsv1, nsGlobalConfigSettings=nsGlobalConfigSettings, sslBeTotDHAuthorizations=sslBeTotDHAuthorizations, sslTotTLSv12Transactions=sslTotTLSv12Transactions, ServiceGroupState=ServiceGroupState, dosTotDosPriorityClients=dosTotDosPriorityClients, mptcpErrUnknownToken=mptcpErrUnknownToken, sslTotDH512keyExchanges=sslTotDH512keyExchanges, vsvrTotalSynsRecvd=vsvrTotalSynsRecvd, pqpolicytotClientTransactions=pqpolicytotClientTransactions, ipConflictAddr=ipConflictAddr, nsIPAddress=nsIPAddress, dns64TotAnswers=dns64TotAnswers, serviceSynfloodNormal=serviceSynfloodNormal, operator=operator, temperatureCpuHigh=temperatureCpuHigh, lbConfig=lbConfig, modeIpv6DirectRouteAdv=modeIpv6DirectRouteAdv, sslTotOffloadBulkDESHigh=sslTotOffloadBulkDESHigh, socksConnReqSent=socksConnReqSent, haPeerInetAddrType=haPeerInetAddrType, tcpErrFullRetrasmit=tcpErrFullRetrasmit, inatNat46Icmp46=inatNat46Icmp46, pqPriority3Requests=pqPriority3Requests, tcpErrSynDroppedCongestion=tcpErrSynDroppedCongestion, ipv6TotRxPkts=ipv6TotRxPkts, nat46TotTcp46=nat46TotTcp46, httpErrIncompleteHeadersHigh=httpErrIncompleteHeadersHigh, totalResponses=totalResponses, mptcpErrInvalRemAddr=mptcpErrInvalRemAddr, vserverSpillOver=vserverSpillOver, featureDeltaCompression=featureDeltaCompression, vPathTotL2CntrlPkts=vPathTotL2CntrlPkts, crPolicyMapConfigEntry=crPolicyMapConfigEntry, icmpTotRxEchoHigh=icmpTotRxEchoHigh, httpTotClenResponsesLow=httpTotClenResponsesLow, clAdminState=clAdminState, sslBeTotDH512keyExchangesLow=sslBeTotDH512keyExchangesLow, vserverSynfloodNormal=vserverSynfloodNormal, ipv6ErrHdr=ipv6ErrHdr, icmpTotTxBytesLow=icmpTotTxBytesLow, svcscpolicyscCurrentWaitingClients=svcscpolicyscCurrentWaitingClients, tcpTotZombieHalfOpenCltConnFlushed=tcpTotZombieHalfOpenCltConnFlushed, globalServerLB=globalServerLB, caAndroidHR=caAndroidHR, totalbroadcastpackets=totalbroadcastpackets, nsDosPolicyGroup=nsDosPolicyGroup, ipTotVIPDown=ipTotVIPDown, icmpTotRxEchoReplyLow=icmpTotRxEchoReplyLow, lsnCurNAT64UdpSessions=lsnCurNAT64UdpSessions, hashMD5=hashMD5, serviceSynfloodRate=serviceSynfloodRate, vsvrServiceEntityType=vsvrServiceEntityType, sysHardwareVersionDesc=sysHardwareVersionDesc, udpTotUnknownSvcPktsLow=udpTotUnknownSvcPktsLow, inatNat46Tcp46=inatNat46Tcp46, l2Mode=l2Mode, nsUserName=nsUserName, ipRnatTotTxPkts=ipRnatTotTxPkts)
mibBuilder.exportSymbols("NS-ROOT-MIB", cipherName=cipherName, crlInputFormat=crlInputFormat, certBindServiceName=certBindServiceName, ipv6FragZeroLenPkt=ipv6FragZeroLenPkt, sslTotOffloadBulkDESLow=sslTotOffloadBulkDESLow, CommandExecutionStatus=CommandExecutionStatus, scPolicyconfigEntry=scPolicyconfigEntry, maxmemory=maxmemory, sslTotTLSv12Sessions=sslTotTLSv12Sessions, svcGroupMemberRequestRate=svcGroupMemberRequestRate, mptcpErrMaxSF=mptcpErrMaxSF, cipher64BitRC4=cipher64BitRC4, drtmCumResponseTimeout=drtmCumResponseTimeout, nsLsnSessionLogStatsGroup=nsLsnSessionLogStatsGroup, txAveragePacketsSize=txAveragePacketsSize, certBindId=certBindId, cacheNumMBWrittenToDisk=cacheNumMBWrittenToDisk, ifTxCarrierError=ifTxCarrierError, clusterSyncFailure=clusterSyncFailure, reuseMiss=reuseMiss, sitePublicIp=sitePublicIp, caUnidentified=caUnidentified, totSpilloverCount=totSpilloverCount, sslBeTotNULLCiphersLow=sslBeTotNULLCiphersLow, appFirewallViolCookie=appFirewallViolCookie, nsLLDPGroup=nsLLDPGroup, crVsPort=crVsPort, ifRxAlignmentErrors=ifRxAlignmentErrors, vlanTotRxBytesHigh=vlanTotRxBytesHigh, httpErrPipelinedRequestsLow=httpErrPipelinedRequestsLow, lbvsvrLBMethod=lbvsvrLBMethod, staRenewSent=staRenewSent, nonIpTotTruncatedPackets=nonIpTotTruncatedPackets, mcTotaudio=mcTotaudio, caOthercache=caOthercache, sslCertPath=sslCertPath, pptpCurCtrlSessions=pptpCurCtrlSessions, ipTotTxMbitsLow=ipTotTxMbitsLow, lsnCurSessions=lsnCurSessions, haTotStateTransitions=haTotStateTransitions, cacheGroupEntry=cacheGroupEntry, sslstatistics=sslstatistics, haVersionMatched=haVersionMatched, svcdospolicydosCurServerRespRate=svcdospolicydosCurServerRespRate, lldpRemTablesChange=lldpRemTablesChange, icmpTotRxPktsHigh=icmpTotRxPktsHigh, staMonFail=staMonFail, cookieVersionInserted=cookieVersionInserted, sslBeTotTLSv1Sessions=sslBeTotTLSv1Sessions, sslBeTot40BitRC4CiphersHigh=sslBeTot40BitRC4CiphersHigh, rxCurrentPacketRate=rxCurrentPacketRate, sslBeTotRSA2048keyExchangesLow=sslBeTotRSA2048keyExchangesLow, vsvrTotalRequestBytes=vsvrTotalRequestBytes, ipMode=ipMode, sslTotTLSv11Sessions=sslTotTLSv11Sessions, nsResourceGroup=nsResourceGroup, haCurState=haCurState, serverBusyErrs=serverBusyErrs, lsnIcmpSessionsRate=lsnIcmpSessionsRate, vsvrRxBytesRate=vsvrRxBytesRate, nsLsnGroupTable=nsLsnGroupTable, ssloffloading=ssloffloading, certKeyID=certKeyID, ca3PVid=ca3PVid, mptcpErrInvalMAC=mptcpErrInvalMAC, lbvsvrAvgSvrTTFB=lbvsvrAvgSvrTTFB, iPv6toV4MapInsertErr=iPv6toV4MapInsertErr, vsvrscpolicyscTotalRequestBytes=vsvrscpolicyscTotalRequestBytes, freeConnHalfClosed=freeConnHalfClosed, nsSslStatsGroup=nsSslStatsGroup, httpTotPosts=httpTotPosts, delCompErrReqinfoAllocfail=delCompErrReqinfoAllocfail, pqStatsperpqpolicyandperLBVipEntry=pqStatsperpqpolicyandperLBVipEntry, pooledLicenseGraceNormal=pooledLicenseGraceNormal, icmpTotInvalidTcpSeqno=icmpTotInvalidTcpSeqno, tcpCurClientConnOpening=tcpCurClientConnOpening, vserverCrpolicyTable=vserverCrpolicyTable, vlanTotRxPktsHigh=vlanTotRxPktsHigh, alarmVsvrOldName=alarmVsvrOldName, dnsTotPTRresponse=dnsTotPTRresponse, vsvrCurServicesTransToOutOfSvc=vsvrCurServicesTransToOutOfSvc, dnsTotUnsupportedQueries=dnsTotUnsupportedQueries, ipTotUDPfragmentsFwd=ipTotUDPfragmentsFwd, vsvrIpAddress=vsvrIpAddress, pengPolicyFullName=pengPolicyFullName, mptcpTotMpCapSyn=mptcpTotMpCapSyn, httpTotTxResponseBytes=httpTotTxResponseBytes, httpTotRxResponseBytesLow=httpTotRxResponseBytesLow, lsnUdpSessionsRate=lsnUdpSessionsRate, lsnDSLiteCurSubscribers=lsnDSLiteCurSubscribers, sslCryptoUtilization=sslCryptoUtilization, deCompTcpTxPackets=deCompTcpTxPackets, nsInatPerNat46StatsEntry=nsInatPerNat46StatsEntry, alternatecontentPath=alternatecontentPath, nsLLDPLocSystemsGroup=nsLLDPLocSystemsGroup, partitionCONNLimitExceeded=partitionCONNLimitExceeded, page=page, pbrTotPktsDenied=pbrTotPktsDenied, sslBeTotNULLCiphers=sslBeTotNULLCiphers, commandExecutionStatus=commandExecutionStatus, oldVridPriority=oldVridPriority, udpTotTxPktsLow=udpTotTxPktsLow, dnsTotNonAuthNoDatas=dnsTotNonAuthNoDatas, gslbDomainQueries=gslbDomainQueries, caAppleLiveStreamingVidBytes=caAppleLiveStreamingVidBytes, partitionBWLimitExceeded=partitionBWLimitExceeded, scPopUps=scPopUps, nsLLDPStatsRxPortTable=nsLLDPStatsRxPortTable, reOrderInterval=reOrderInterval, reqaction=reqaction, dospolicyconfigEntry=dospolicyconfigEntry, dnsTotNoDataResps=dnsTotNoDataResps, sslTotRSAAuthorizationsHigh=sslTotRSAAuthorizationsHigh, vsvrSslRedirectSupport=vsvrSslRedirectSupport, nsInetAddressTable=nsInetAddressTable, svcscpolicyscTotalServerTransactions=svcscpolicyscTotalServerTransactions, appfwappFirewallViolXSSPerProfile=appfwappFirewallViolXSSPerProfile, delBwSaving=delBwSaving, nsLsnNAT64GlobalStatsGroup=nsLsnNAT64GlobalStatsGroup, groupnon304hit=groupnon304hit, pqStatsperLBVipEntry=pqStatsperLBVipEntry, gslbSitePublicInetAddressType=gslbSitePublicInetAddressType, vlanTotBroadcastPkts=vlanTotBroadcastPkts, mtuEntryTimeoutValue=mtuEntryTimeoutValue, sslTotSSLv2SessionsLow=sslTotSSLv2SessionsLow, caMsftSmthStrVid=caMsftSmthStrVid, ipTotAddrLookup=ipTotAddrLookup, nsSvcGroup=nsSvcGroup, HAState=HAState, vsvrEntityType=vsvrEntityType, ifErrTxHeartBeat=ifErrTxHeartBeat, persistanceType=persistanceType, sysStatisticsTime=sysStatisticsTime, monitorCount=monitorCount, caotherBytesHR=caotherBytesHR, modePathMTUDiscovery=modePathMTUDiscovery, acl6Priority=acl6Priority, tcpCurClientConn=tcpCurClientConn, name=name, svcTotalSynsRecvdLow=svcTotalSynsRecvdLow, sslTotSSLv3SessionsLow=sslTotSSLv3SessionsLow, nsPolicyStatsTable=nsPolicyStatsTable, nsProducts=nsProducts, numCPUs=numCPUs, svcscpolicyscPhysicalServiceIP=svcscpolicyscPhysicalServiceIP, drtmLearningProbes=drtmLearningProbes, cpecaActionname=cpecaActionname, nsPbr6Entry=nsPbr6Entry, tcpErrDataAfterFin=tcpErrDataAfterFin, gslbDomainStatsEntry=gslbDomainStatsEntry, httpErrIncompleteRequestsLow=httpErrIncompleteRequestsLow, sslTot128BitRC4Ciphers=sslTot128BitRC4Ciphers, nsDomainTable=nsDomainTable, dnsCurSRVrecord=dnsCurSRVrecord, acl6StatsGroup=acl6StatsGroup, dtlsStaValidationError=dtlsStaValidationError, clPeerIP=clPeerIP, sslTotBkendSslV3Renego=sslTotBkendSslV3Renego, lsnNAT64TcpSessionsRate=lsnNAT64TcpSessionsRate, tcpCurPhysicalServers=tcpCurPhysicalServers, ifTxAvgPacketRate=ifTxAvgPacketRate, thresholdvalue=thresholdvalue, nsSslVpnStatsGroup=nsSslVpnStatsGroup, httpTotChunkedResponsesLow=httpTotChunkedResponsesLow, deCompTcpTxBytes=deCompTcpTxBytes, cspolicyName=cspolicyName, cacAppleLiveStrmngVid=cacAppleLiveStrmngVid, icmpTotRxBytesLow=icmpTotRxBytesLow, sysMappedIpAddressRange=sysMappedIpAddressRange, nsIpAddrEntry=nsIpAddrEntry, pqQdepthThreshold=pqQdepthThreshold, vsvrFullName=vsvrFullName, vsvrCurSoValue=vsvrCurSoValue, tcpOptimizationBypassed=tcpOptimizationBypassed, lsnTotNAT64RxPkts=lsnTotNAT64RxPkts, entityOldName=entityOldName, vlanTotTxBytes=vlanTotTxBytes, effectiveVridPriority=effectiveVridPriority, dnsTotNSrecFailed=dnsTotNSrecFailed, udpTotRxPktsLow=udpTotRxPktsLow, aaaCurICAConn=aaaCurICAConn, appFirewallShortAvgRespTime=appFirewallShortAvgRespTime, loadBalancing=loadBalancing, iipFailedMIPdisabled=iipFailedMIPdisabled, cpeconfigactionEntry=cpeconfigactionEntry, udpCurRateCounter=udpCurRateCounter, diskUsageHigh=diskUsageHigh, dnsTotNSresponse=dnsTotNSresponse, sslTotDecHw=sslTotDecHw, sslCipherGroupName=sslCipherGroupName, caAunindentifiedBytes=caAunindentifiedBytes, gslbPoliciesEntry=gslbPoliciesEntry, syssvcCount=syssvcCount, nsIPAddressType=nsIPAddressType, pbrTotHits=pbrTotHits, nsFeatureInfo=nsFeatureInfo, newCCOIP=newCCOIP, piPolicyHits=piPolicyHits, icmpTotTxBytesHigh=icmpTotTxBytesHigh, sslTotSwEncFE=sslTotSwEncFE, nsInetVlan=nsInetVlan, vsvrInvalidRequestResponseDropped=vsvrInvalidRequestResponseDropped, vlanTotDroppedPkts=vlanTotDroppedPkts, dnsReqHit=dnsReqHit, mcEncVideo=mcEncVideo, featureBGP=featureBGP, caLaptpdsktpBytesHR=caLaptpdsktpBytesHR, svcSslv2Protocol=svcSslv2Protocol, httpTotGets=httpTotGets, pptpStpCtrlConnReply=pptpStpCtrlConnReply, tcpTotRxBytes=tcpTotRxBytes, lsnGrpTotTcpDrpPkts=lsnGrpTotTcpDrpPkts, nsLLDPStatsGroup=nsLLDPStatsGroup, cpeaDevno=cpeaDevno, pbrperHits=pbrperHits, caIos=caIos, svcTotalRequestBytesLow=svcTotalRequestBytesLow, mptcpPlainackFallback=mptcpPlainackFallback, modeIpv6StaticRouteAdv=modeIpv6StaticRouteAdv, serviceDospolicyEntry=serviceDospolicyEntry, monServiceMemberTable=monServiceMemberTable, dnsTotAAAArecUpdate=dnsTotAAAArecUpdate, lsnTotNAT64IcmpTxPkts=lsnTotNAT64IcmpTxPkts, httpTot11Responses=httpTot11Responses, lldpLocChassisIdSubtype=lldpLocChassisIdSubtype, platformRateLimitThresholdNormal=platformRateLimitThresholdNormal, sessReqs=sessReqs, sslTotSHAMac=sslTotSHAMac, rxAlignmentErrors=rxAlignmentErrors, saclTotPktsBridged=saclTotPktsBridged, monitorFailedFTP=monitorFailedFTP, cswVsId=cswVsId, sslBeTotTLSv11Handshakes=sslBeTotTLSv11Handshakes, appFirewallTotalViol=appFirewallTotalViol, nsPqPolicyGroup=nsPqPolicyGroup, lsnLogTotEIMappingDeleteEntries=lsnLogTotEIMappingDeleteEntries, mcTotvideo=mcTotvideo, vserverRxBytesRate=vserverRxBytesRate, dnsTotUnsupportedResponseClass=dnsTotUnsupportedResponseClass, vserverCipherBindingEntry=vserverCipherBindingEntry, tcpOptimizationEnabled=tcpOptimizationEnabled, sslTotEncHw=sslTotEncHw, icmpCurRateThreshold=icmpCurRateThreshold, svcTotalPktsSentHigh=svcTotalPktsSentHigh, serverName=serverName, dnsTotErrLimits=dnsTotErrLimits, brVersion=brVersion, serviceGroupMemberEntry=serviceGroupMemberEntry, connections=connections, wsIfStatsTable=wsIfStatsTable, stringComputed=stringComputed, totAnswers=totAnswers, ipTotSuccReassembly=ipTotSuccReassembly, compressionRatio=compressionRatio)
mibBuilder.exportSymbols("NS-ROOT-MIB", vPathTotOffload=vPathTotOffload, alarmMonrespto=alarmMonrespto, ifMinThroughput=ifMinThroughput, vsHits=vsHits, tcpErrBadCheckSum=tcpErrBadCheckSum, sslBeTotNULLAuthorizationsLow=sslBeTotNULLAuthorizationsLow, wsNetmask=wsNetmask, pqPriority=pqPriority, sacl6sCount=sacl6sCount, cacheTotNonStoreAbleMisses=cacheTotNonStoreAbleMisses, mcFLVVid=mcFLVVid, cacheBytesServedHigh=cacheBytesServedHigh, clusterPropFailure=clusterPropFailure, totudpsessions=totudpsessions, hdrName=hdrName, vlanconfigEntry=vlanconfigEntry, sessHeaderTag=sessHeaderTag, sslTotTLSv1TransactionsHigh=sslTotTLSv1TransactionsHigh, platformPpsLimitThresholdHigh=platformPpsLimitThresholdHigh, haErrTotNodeDown=haErrTotNodeDown, cpuSpeedMHz=cpuSpeedMHz, faultyCookies=faultyCookies, pqPolQdepthThreshold=pqPolQdepthThreshold, psProtocolType=psProtocolType, httpErrLargeContentHigh=httpErrLargeContentHigh, svcActiveTransactions=svcActiveTransactions, svcscpolicyscTotalResponsesReceived=svcscpolicyscTotalResponsesReceived, nsLLDPLocManAddrTable=nsLLDPLocManAddrTable, caMicrosoftSmoothStreamingVidCacheBytes=caMicrosoftSmoothStreamingVidCacheBytes, appfwBufferOverflow=appfwBufferOverflow, lldpRemManAddrOID=lldpRemManAddrOID, ipTotRxBytesHigh=ipTotRxBytesHigh, caLaptpdektpBytes=caLaptpdektpBytes, gslbDomainStats=gslbDomainStats, featureAGEE=featureAGEE, nsLLDPRemTable=nsLLDPRemTable, dnsTotSOArecUpdate=dnsTotSOArecUpdate, crMapSrcUrl=crMapSrcUrl, vsIpAddress=vsIpAddress, tcpErrRstOutOfWindow=tcpErrRstOutOfWindow, tcpErrCltOutOfOrder=tcpErrCltOutOfOrder, ipType=ipType, htmlInjectMemAllocFailed=htmlInjectMemAllocFailed, dnsTotMXrecFailed=dnsTotMXrecFailed, cipherId=cipherId, lsnLogTotTcpMappingDeleteEntries=lsnLogTotTcpMappingDeleteEntries, ipTotRxMbitsLow=ipTotRxMbitsLow, ClusterAdminState=ClusterAdminState, vsvrscpolicyscTotalServerConnections=vsvrscpolicyscTotalServerConnections, ipv6TotTxBytes=ipv6TotTxBytes, mptcpCurSFConnections=mptcpCurSFConnections, lsnGrpTotIcmpDrpPkts=lsnGrpTotIcmpDrpPkts, sslTot56BitDESCiphers=sslTot56BitDESCiphers, sslBeTotEcdheCurve256=sslBeTotEcdheCurve256, ipRnatTotTxSyn=ipRnatTotTxSyn, wsMaxClientList=wsMaxClientList, certKeyTable=certKeyTable, nsLLDPStatsTxPortTable=nsLLDPStatsTxPortTable, mxRecQueries=mxRecQueries, sslglobalstats=sslglobalstats, lsnLogTotUdpSessionCreateEntries=lsnLogTotUdpSessionCreateEntries, mptcpErrAddridExist=mptcpErrAddridExist, svcscpolicyscCurrentWaitingTime=svcscpolicyscCurrentWaitingTime, udpTotTxBytesLow=udpTotTxBytesLow, lbvsvrRdpCookieParsed=lbvsvrRdpCookieParsed, vsvrTxBytesRate=vsvrTxBytesRate, vsvrCurServicesUp=vsvrCurServicesUp, featureResponder=featureResponder, sslTotNULLCiphers=sslTotNULLCiphers, dropped=dropped, totclienttransactiontime=totclienttransactiontime, gslbSiteMEPflap=gslbSiteMEPflap, dnsTotNSrecUpdate=dnsTotNSrecUpdate, certKeyId=certKeyId, appfwappFirewallViolFieldformatPerProfile=appfwappFirewallViolFieldformatPerProfile, lsnGrpTotUdpDrpBytes=lsnGrpTotUdpDrpBytes, monitorType=monitorType, acl6perHits=acl6perHits, mapHits=mapHits, ifErrCongestedPktsDrops=ifErrCongestedPktsDrops, siteName=siteName, sslTotSSLv3TransactionsRate=sslTotSSLv3TransactionsRate, ipTotTruncatedPackets=ipTotTruncatedPackets, httpErrLargeCtlenLow=httpErrLargeCtlenLow, nsCPUEntry=nsCPUEntry, svcSslDHCount=svcSslDHCount, vserverPqpolicyTable=vserverPqpolicyTable, sslTotOffloadBulkAESGCM128=sslTotOffloadBulkAESGCM128, saclTotMisses=saclTotMisses, compTotalRxBytes=compTotalRxBytes, appfwappFirewallLongAvgRespTimePerProfile=appfwappFirewallLongAvgRespTimePerProfile, pqpolicytotClientTransactionTimems=pqpolicytotClientTransactionTimems, crVsHits=crVsHits, psPort=psPort, svcGrpMemberSurgeCount=svcGrpMemberSurgeCount, lldpRemManAddrSubtype=lldpRemManAddrSubtype, vsvrSslCipherBindDesc=vsvrSslCipherBindDesc, haPeerId=haPeerId, ifnicStsStalls=ifnicStsStalls, serviceWeight=serviceWeight, haSyncSucceded=haSyncSucceded, monitorResponseTimeout=monitorResponseTimeout, voltageHigh=voltageHigh, alarmRateLmtThresholdExceeded=alarmRateLmtThresholdExceeded, vsvrscpolicyscTotalServerTTLB=vsvrscpolicyscTotalServerTTLB, inatTotSentBytes=inatTotSentBytes, sslBeTot128BitRC2CiphersLow=sslBeTot128BitRC2CiphersLow, ModeStatus=ModeStatus, sslCurSessionInUseHigh=sslCurSessionInUseHigh, sslTotTLSv1TransactionsRate=sslTotTLSv1TransactionsRate, caTotaudio=caTotaudio, dnsServerConfig=dnsServerConfig, pptpCallDisNotify=pptpCallDisNotify, sslTotSSLv2TransactionsHigh=sslTotSSLv2TransactionsHigh, vlanBridgeGroup=vlanBridgeGroup, featureRewrite=featureRewrite, sslBeTotExpiredSessionsHigh=sslBeTotExpiredSessionsHigh, httpTotTxRequestBytesHigh=httpTotTxRequestBytesHigh, nsCPUTable=nsCPUTable, appFirewallViolBufferOverflow=appFirewallViolBufferOverflow, certHeaderTag=certHeaderTag, tcpErrCookiePktSeqDrop=tcpErrCookiePktSeqDrop, crVirServiceName=crVirServiceName, mcOther=mcOther, clPeerID=clPeerID, sslTotDHAuthorizations=sslTotDHAuthorizations, nsLLDPLocPortEntry=nsLLDPLocPortEntry, compression=compression, dnsTotCacheFlush=dnsTotCacheFlush, cacheTotFlashcacheHits=cacheTotFlashcacheHits, domainNameFull=domainNameFull, dnsTotPTRrecFailed=dnsTotPTRrecFailed, entityNameChanged=entityNameChanged, sslTotDSSAuthorizationsHigh=sslTotDSSAuthorizationsHigh, aaaAuthOnlyHttpFail=aaaAuthOnlyHttpFail, keyPath=keyPath, rs9000=rs9000, tcpErrCookiePktSeqReject=tcpErrCookiePktSeqReject, nsInatStatsGroup=nsInatStatsGroup, monRespTimeoutBelowThresh=monRespTimeoutBelowThresh, tcpTotClientConnClosed=tcpTotClientConnClosed, appfwViolations=appfwViolations, appfwXMLSoapFault=appfwXMLSoapFault, nsDnsServerStatsGroup=nsDnsServerStatsGroup, icmpTotRxEchoLow=icmpTotRxEchoLow, vsvrTotalRequestBytesHigh=vsvrTotalRequestBytesHigh, sslTot128BitIDEACiphersLow=sslTot128BitIDEACiphersLow, authDS=authDS, clusterCCOChange=clusterCCOChange, tcpCurServerConnClosing=tcpCurServerConnClosing, scPostReqs=scPostReqs, gslbSitesEntry=gslbSitesEntry, haPeerIpAddress=haPeerIpAddress, mptcpErrExtnFlagSet=mptcpErrExtnFlagSet, haPeerInetAddr=haPeerInetAddr, dnsTotPTRrecUpdate=dnsTotPTRrecUpdate, svcGrpMemberTotalSynsRecvd=svcGrpMemberTotalSynsRecvd, sslTotTLSv11ClientAuthentications=sslTotTLSv11ClientAuthentications, csPipolicyDestVserverName=csPipolicyDestVserverName, tcpTotZombiePassiveHalfCloseSrvConnFlushed=tcpTotZombiePassiveHalfCloseSrvConnFlushed, svcscpolicyscTotalServerTTLB=svcscpolicyscTotalServerTTLB, udpRateInterval=udpRateInterval, temperatureCpuNormal=temperatureCpuNormal, sslTotDH512keyExchangesLow=sslTotDH512keyExchangesLow, appfwappFirewallViolWSIViolationsPerProfile=appfwappFirewallViolWSIViolationsPerProfile, freeConnEstd=freeConnEstd, icmpTotNonFirstIpFrag=icmpTotNonFirstIpFrag, cipher128BitRC2=cipher128BitRC2, lsnGrpTcpSessRate=lsnGrpTcpSessRate, totaldroppedpkts=totaldroppedpkts, piPolName=piPolName, vsvrscpolicydesIpAddress=vsvrscpolicydesIpAddress, ifErrDroppedRxPkts=ifErrDroppedRxPkts, totServerDontReuse=totServerDontReuse, compRatio=compRatio, partitionCONNLimitNormal=partitionCONNLimitNormal, contentSwitching=contentSwitching, dnsTotCNAMErecFailed=dnsTotCNAMErecFailed, appfwappFirewallViolCookiePerProfile=appfwappFirewallViolCookiePerProfile, mcAndroid=mcAndroid, vsvrCurMptcpSessions=vsvrCurMptcpSessions, averageCpuUtilization=averageCpuUtilization, sslTot56BitRC4Ciphers=sslTot56BitRC4Ciphers, delCmpRatio=delCmpRatio, ipTotFragments=ipTotFragments, cmpTotTxbytes=cmpTotTxbytes, sslBeTot128BitIDEACiphersHigh=sslBeTot128BitIDEACiphersHigh, sysupsvcitmCount=sysupsvcitmCount, sslTotOffloadSignRSA=sslTotOffloadSignRSA, caADTSaudio=caADTSaudio, rsa1024KeyExThresholdNormal=rsa1024KeyExThresholdNormal, netScaler=netScaler, newVridPriority=newVridPriority, vsMiss=vsMiss, policyname=policyname, vsvrscpolicyscTotalClientTTLB=vsvrscpolicyscTotalClientTTLB, svcGrpMemberTotalPktsRecvd=svcGrpMemberTotalPktsRecvd, compTotalRequests=compTotalRequests, sslBeExpiredSessions=sslBeExpiredSessions, dnsCurMXrecord=dnsCurMXrecord, indexHtmlNoServed=indexHtmlNoServed, sslTot128BitRC2CiphersLow=sslTot128BitRC2CiphersLow, sslTotRenegSessions=sslTotRenegSessions, ipTotBadMacAddrsLow=ipTotBadMacAddrsLow, tcpCurClientConnClosing=tcpCurClientConnClosing, lsnGrpSessRate=lsnGrpSessRate, ipTotTxMbits=ipTotTxMbits, sslTotNULLAuthorizations=sslTotNULLAuthorizations, sslTotTLSv1RenegSessionsHigh=sslTotTLSv1RenegSessionsHigh, featureContentAdapation=featureContentAdapation, sslBeTot56BitRC2CiphersHigh=sslBeTot56BitRC2CiphersHigh, certBindServiceType=certBindServiceType, ipTotLandattacksHigh=ipTotLandattacksHigh, httpTot10Responses=httpTot10Responses, cacheNumMarker=cacheNumMarker, appFirewallViolDenyURL=appFirewallViolDenyURL, cipher56BitRC4=cipher56BitRC4, monProbeFailed=monProbeFailed, curServerConnections=curServerConnections, sacl6TotMisses=sacl6TotMisses, aclTotPktsNAT=aclTotPktsNAT, sslTotSessionsHigh=sslTotSessionsHigh, nsLLDPRemManAddrTable=nsLLDPRemManAddrTable, clNodeHealthReason=clNodeHealthReason, lbMethod=lbMethod, monitorFailed=monitorFailed, totalrxpkts=totalrxpkts, appFirewallViolCSRFtag=appFirewallViolCSRFtag, httpTotRxRequestBytesHigh=httpTotRxRequestBytesHigh, cswIndex=cswIndex, cacheTotMisses=cacheTotMisses, sysHighAvailabilityMode=sysHighAvailabilityMode, netScalerEventsV2=netScalerEventsV2, pbrTotMisses=pbrTotMisses, sslTot40BitDESCiphersLow=sslTot40BitDESCiphersLow, inatCurSessions=inatCurSessions, lsnTotTxPkts=lsnTotTxPkts, destinationIP=destinationIP, ipTotRxBytes=ipTotRxBytes, vsvrClientConnOpenRate=vsvrClientConnOpenRate, pqQdepth=pqQdepth, htmlInjectionSessions=htmlInjectionSessions, lsnLogTotIcmpMappingDeleteEntries=lsnLogTotIcmpMappingDeleteEntries, inat44name=inat44name, totalIncompleteResponses=totalIncompleteResponses, svcSynfloodRate=svcSynfloodRate, dnsCurNSrecord=dnsCurNSrecord, vlanTotRxPkts=vlanTotRxPkts, nsGslbGroup=nsGslbGroup, cacADTSaudioHR=cacADTSaudioHR, staReassErr=staReassErr, vlanconfigTable=vlanconfigTable, nsInetType=nsInetType, siteCurClntConnections=siteCurClntConnections)
mibBuilder.exportSymbols("NS-ROOT-MIB", sysHealthCounterName=sysHealthCounterName, scPolicyUrlHits=scPolicyUrlHits, sslBeTotTLSv1HandshakesHigh=sslBeTotTLSv1HandshakesHigh, pptpCurGRESessions=pptpCurGRESessions, resCpuUsage=resCpuUsage, tcpMaxServerConnections=tcpMaxServerConnections, httpErrLargeChunkLow=httpErrLargeChunkLow, svcGrpMembertotalJsTransactions=svcGrpMembertotalJsTransactions, icaLicenseFailure=icaLicenseFailure, cacheRecentPercent304Hits=cacheRecentPercent304Hits, monitorBindCount=monitorBindCount, sslTotTLSv1Transactions=sslTotTLSv1Transactions, haNicMonitorSucceeded=haNicMonitorSucceeded, tcpErrCltRetrasmit=tcpErrCltRetrasmit, svcGroupMemberSynfloodNormal=svcGroupMemberSynfloodNormal, svcTotalPktsSent=svcTotalPktsSent, aclTotPktsBridgedHigh=aclTotPktsBridgedHigh, sslBeTotMD5MacHigh=sslBeTotMD5MacHigh, lsnLogTotDeterministicDeallocs=lsnLogTotDeterministicDeallocs, svcscpolicyscTotalClientConnections=svcscpolicyscTotalClientConnections, sslBeTotDH1024keyExchanges=sslBeTotDH1024keyExchanges)
