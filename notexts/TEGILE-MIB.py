#
# PySNMP MIB module TEGILE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/tegile/TEGILE-MIB
# Produced by pysmi-1.1.12 at Tue May 28 13:42:09 2024
# On host fv-az973-743 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, iso, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ModuleIdentity, IpAddress, ObjectIdentity, MibIdentifier, Gauge32, Counter32, enterprises, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ModuleIdentity", "IpAddress", "ObjectIdentity", "MibIdentifier", "Gauge32", "Counter32", "enterprises", "TimeTicks", "Unsigned32")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
tegile = ModuleIdentity((1, 3, 6, 1, 4, 1, 43906))
tegile.setRevisions(('2015-09-23 10:10', '2016-04-06 10:10', '2016-09-10 10:10', '2017-03-21 10:10',))
if mibBuilder.loadTexts: tegile.setLastUpdated('201604061010Z')
if mibBuilder.loadTexts: tegile.setOrganization('Tegile Storage, Inc.')
tegileArray = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1))
tegileArray_notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 2)).setLabel("tegileArray-notifications")
properties = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 1))
globalStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 2))
disks = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 3))
pools = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 4))
network = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 5))
sanProperties = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 6))
vmwareNFSDatastores = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 7))
haResources = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 8))
poolProjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3))
projectLUNs = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2))
projectShares = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3))
iscsiProperties = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1))
fcProperties = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2))
iscsiTargets = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1))
iscsiInitiators = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 2))
fcTargets = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1))
fcInitiators = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 2))
haControllerA_Name = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 1, 1), OctetString()).setLabel("haControllerA-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: haControllerA_Name.setStatus('current')
haControllerA_IPAddr = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 1, 2), IpAddress()).setLabel("haControllerA-IPAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: haControllerA_IPAddr.setStatus('current')
haControllerA_SoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 1, 3), OctetString()).setLabel("haControllerA-SoftwareVersion").setMaxAccess("readonly")
if mibBuilder.loadTexts: haControllerA_SoftwareVersion.setStatus('current')
haControllerA_Uptime = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 1, 4), OctetString()).setLabel("haControllerA-Uptime").setMaxAccess("readonly")
if mibBuilder.loadTexts: haControllerA_Uptime.setStatus('current')
haControllerB_Name = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 1, 5), OctetString()).setLabel("haControllerB-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: haControllerB_Name.setStatus('current')
haControllerB_IPAddr = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 1, 6), IpAddress()).setLabel("haControllerB-IPAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: haControllerB_IPAddr.setStatus('current')
haControllerB_SoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 1, 7), OctetString()).setLabel("haControllerB-SoftwareVersion").setMaxAccess("readonly")
if mibBuilder.loadTexts: haControllerB_SoftwareVersion.setStatus('current')
haControllerB_Uptime = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 1, 8), OctetString()).setLabel("haControllerB-Uptime").setMaxAccess("readonly")
if mibBuilder.loadTexts: haControllerB_Uptime.setStatus('current')
controllerHardwareModel = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerHardwareModel.setStatus('current')
snmpAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentVersion.setStatus('current')
cpuTotalUsage = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTotalUsage.setStatus('current')
cpuSystemCalls = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuSystemCalls.setStatus('current')
cpuInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuInterrupts.setStatus('current')
cacheTotalWriteMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalWriteMbps.setStatus('current')
cacheTotalReadMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalReadMbps.setStatus('current')
cacheTotalWriteIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalWriteIops.setStatus('current')
cacheTotalReadIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalReadIops.setStatus('current')
cacheRAMReads = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheRAMReads.setStatus('current')
cacheSSDReads = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSSDReads.setStatus('current')
diskTotalWriteMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTotalWriteMbps.setStatus('current')
diskTotalReadMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTotalReadMbps.setStatus('current')
diskTotalWriteIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTotalWriteIops.setStatus('current')
diskTotalReadIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTotalReadIops.setStatus('current')
diskDataWriteMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskDataWriteMbps.setStatus('current')
diskDataReadMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskDataReadMbps.setStatus('current')
diskDataWriteIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskDataWriteIops.setStatus('current')
diskDataReadIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskDataReadIops.setStatus('current')
diskAvgWriteLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskAvgWriteLatency.setStatus('current')
diskAvgReadLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskAvgReadLatency.setStatus('current')
diskIOCount = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskIOCount.setStatus('current')
diskRandomIOCount = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskRandomIOCount.setStatus('current')
diskSequentialIOCount = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSequentialIOCount.setStatus('current')
poolTotalWriteMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolTotalWriteMbps.setStatus('current')
poolTotalReadMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolTotalReadMbps.setStatus('current')
poolTotalWriteIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolTotalWriteIops.setStatus('current')
poolTotalReadIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolTotalReadIops.setStatus('current')
poolAvgWriteLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolAvgWriteLatency.setStatus('current')
poolAvgReadLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolAvgReadLatency.setStatus('current')
cifsTotalWriteMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTotalWriteMbps.setStatus('current')
cifsTotalReadMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTotalReadMbps.setStatus('current')
cifsTotalWriteIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTotalWriteIops.setStatus('current')
cifsTotalReadIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTotalReadIops.setStatus('current')
cifsAvgWriteLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAvgWriteLatency.setStatus('current')
cifsAvgReadLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAvgReadLatency.setStatus('current')
nfsTotalWriteMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsTotalWriteMbps.setStatus('current')
nfsTotalReadMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsTotalReadMbps.setStatus('current')
nfsTotalWriteIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsTotalWriteIops.setStatus('current')
nfsTotalReadIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsTotalReadIops.setStatus('current')
nfsAvgWriteLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsAvgWriteLatency.setStatus('current')
nfsAvgReadLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsAvgReadLatency.setStatus('current')
iscsiTotalWriteMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTotalWriteMbps.setStatus('current')
iscsiTotalReadMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTotalReadMbps.setStatus('current')
iscsiWriteIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiWriteIops.setStatus('current')
iscsiTotalReadIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTotalReadIops.setStatus('current')
iscsiAvgWriteLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiAvgWriteLatency.setStatus('current')
iscsiAvgReadLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiAvgReadLatency.setStatus('current')
fcTotalWriteMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 47), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTotalWriteMbps.setStatus('current')
fcTotalReadMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 48), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTotalReadMbps.setStatus('current')
fcTotalWriteIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTotalWriteIops.setStatus('current')
fcTotalReadIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTotalReadIops.setStatus('current')
fcAvgWriteLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 51), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcAvgWriteLatency.setStatus('current')
fcAvgReadLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 52), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcAvgReadLatency.setStatus('current')
vmwareNFSDatastoresTotalWriteMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 53), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoresTotalWriteMbps.setStatus('current')
vmwareNFSDatastoresTotalReadMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 54), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoresTotalReadMbps.setStatus('current')
vmwareNFSDatastoresTotalWriteIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 55), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoresTotalWriteIops.setStatus('current')
vmwareNFSDatastoresTotalReadIops = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 56), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoresTotalReadIops.setStatus('current')
vmwareNFSDatastoresAvgWriteLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 57), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoresAvgWriteLatency.setStatus('current')
vmwareNFSDatastoresAvgReadLatency = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 58), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoresAvgReadLatency.setStatus('current')
networkTotalReceiveMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 59), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkTotalReceiveMbps.setStatus('current')
networkTotalTransmitMbps = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 2, 60), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkTotalTransmitMbps.setStatus('current')
diskCount = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskCount.setStatus('current')
diskTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 3, 2), )
if mibBuilder.loadTexts: diskTable.setStatus('current')
diskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 3, 2, 1), ).setIndexNames((0, "TEGILE-MIB", "diskChassisIdx"), (0, "TEGILE-MIB", "diskIndex"))
if mibBuilder.loadTexts: diskEntry.setStatus('current')
diskChassisIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: diskChassisIdx.setStatus('current')
diskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 3, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: diskIndex.setStatus('current')
diskAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskAlias.setStatus('current')
diskSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSizeLow.setStatus('current')
diskSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSizeHigh.setStatus('current')
diskState = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 3, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskState.setStatus('current')
diskType = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 3, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskType.setStatus('current')
diskPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 3, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPoolName.setStatus('current')
poolCount = MibScalar((1, 3, 6, 1, 4, 1, 43906, 1, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolCount.setStatus('current')
poolTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2), )
if mibBuilder.loadTexts: poolTable.setStatus('current')
poolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1), ).setIndexNames((0, "TEGILE-MIB", "poolIndex"))
if mibBuilder.loadTexts: poolEntry.setStatus('current')
poolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: poolIndex.setStatus('current')
poolName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolName.setStatus('current')
poolState = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolState.setStatus('current')
poolHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolHealth.setStatus('current')
poolOwnerController = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolOwnerController.setStatus('current')
poolProjectCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolProjectCount.setStatus('current')
poolSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolSizeLow.setStatus('current')
poolSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolSizeHigh.setStatus('current')
poolUsedSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolUsedSizeLow.setStatus('current')
poolUsedSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolUsedSizeHigh.setStatus('current')
poolFreeSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolFreeSizeLow.setStatus('current')
poolFreeSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolFreeSizeHigh.setStatus('current')
poolDataSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDataSizeLow.setStatus('current')
poolDataSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDataSizeHigh.setStatus('current')
poolPostDedupDataSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolPostDedupDataSizeLow.setStatus('current')
poolPostDedupDataSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolPostDedupDataSizeHigh.setStatus('current')
poolPostCompressionDataSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolPostCompressionDataSizeLow.setStatus('current')
poolPostCompressionDataSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolPostCompressionDataSizeHigh.setStatus('current')
poolUnusedReservedSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolUnusedReservedSizeLow.setStatus('current')
poolUnusedReservedSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolUnusedReservedSizeHigh.setStatus('current')
poolTotalSaving = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolTotalSaving.setStatus('current')
poolDataWriteMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDataWriteMbps.setStatus('current')
poolDataReadMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDataReadMbps.setStatus('current')
poolDataWriteIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDataWriteIops.setStatus('current')
poolDataReadIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDataReadIops.setStatus('current')
poolDataWriteLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDataWriteLatency.setStatus('current')
poolDataReadLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDataReadLatency.setStatus('current')
poolMetaWriteMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMetaWriteMbps.setStatus('current')
poolMetaReadMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMetaReadMbps.setStatus('current')
poolMetaWriteIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMetaWriteIops.setStatus('current')
poolMetaReadIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMetaReadIops.setStatus('current')
poolMetaWriteLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMetaWriteLatency.setStatus('current')
poolMetaReadLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMetaReadLatency.setStatus('current')
poolReadCacheWriteMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolReadCacheWriteMbps.setStatus('current')
poolReadCacheReadMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolReadCacheReadMbps.setStatus('current')
poolReadCacheWriteIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolReadCacheWriteIops.setStatus('current')
poolReadCacheReadIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolReadCacheReadIops.setStatus('current')
poolReadCacheWriteLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolReadCacheWriteLatency.setStatus('current')
poolReadCacheReadLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolReadCacheReadLatency.setStatus('current')
poolWriteCacheWriteMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolWriteCacheWriteMbps.setStatus('current')
poolWriteCacheWriteIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolWriteCacheWriteIops.setStatus('current')
poolWriteCacheWriteLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 2, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolWriteCacheWriteLatency.setStatus('current')
projectTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1), )
if mibBuilder.loadTexts: projectTable.setStatus('current')
projectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1), ).setIndexNames((0, "TEGILE-MIB", "poolIndex"), (0, "TEGILE-MIB", "projectIndex"))
if mibBuilder.loadTexts: projectEntry.setStatus('current')
projectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: projectIndex.setStatus('current')
projectName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectName.setStatus('current')
projectPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectPoolName.setStatus('current')
projectDedupEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectDedupEnabled.setStatus('current')
projectCompressionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectCompressionEnabled.setStatus('current')
projectQuotaSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectQuotaSizeLow.setStatus('current')
projectQuotaSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectQuotaSizeHigh.setStatus('current')
projectDataSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectDataSizeLow.setStatus('current')
projectDataSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectDataSizeHigh.setStatus('current')
projectFreeSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectFreeSizeLow.setStatus('current')
projectFreeSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectFreeSizeHigh.setStatus('current')
projectSnapshotSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectSnapshotSizeLow.setStatus('current')
projectSnapshotSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectSnapshotSizeHigh.setStatus('current')
projectPostCompressionDataSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectPostCompressionDataSizeLow.setStatus('current')
projectPostCompressionDataSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectPostCompressionDataSizeHigh.setStatus('current')
projectUnusedReservedSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectUnusedReservedSizeLow.setStatus('current')
projectUnusedReservedSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectUnusedReservedSizeHigh.setStatus('current')
projectTotalSaving = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectTotalSaving.setStatus('current')
projectLunCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectLunCount.setStatus('current')
projectShareCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: projectShareCount.setStatus('current')
lunTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3), )
if mibBuilder.loadTexts: lunTable.setStatus('current')
lunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1), ).setIndexNames((0, "TEGILE-MIB", "poolIndex"), (0, "TEGILE-MIB", "projectIndex"), (0, "TEGILE-MIB", "lunIndex"))
if mibBuilder.loadTexts: lunEntry.setStatus('current')
lunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lunIndex.setStatus('current')
lunName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunName.setStatus('current')
lunProjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunProjectName.setStatus('current')
lunPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunPoolName.setStatus('current')
lunGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunGUID.setStatus('current')
lunBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunBlockSize.setStatus('current')
lunDedupEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunDedupEnabled.setStatus('current')
lunCompressionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunCompressionEnabled.setStatus('current')
lunSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSizeLow.setStatus('current')
lunSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSizeHigh.setStatus('current')
lunDataSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunDataSizeLow.setStatus('current')
lunDataSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunDataSizeHigh.setStatus('current')
lunSnapshotSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSnapshotSizeLow.setStatus('current')
lunSnapshotSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSnapshotSizeHigh.setStatus('current')
lunFreeSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunFreeSizeLow.setStatus('current')
lunFreeSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunFreeSizeHigh.setStatus('current')
lunReservedSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunReservedSizeLow.setStatus('current')
lunReservedSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunReservedSizeHigh.setStatus('current')
lunCompressedRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunCompressedRatio.setStatus('current')
lunProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunProtocol.setStatus('current')
lunTargetGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunTargetGroup.setStatus('current')
lunInitiatorGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunInitiatorGroup.setStatus('current')
lunWriteMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunWriteMbps.setStatus('current')
lunReadMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunReadMbps.setStatus('current')
lunWriteIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunWriteIops.setStatus('current')
lunReadIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunReadIops.setStatus('current')
lunWriteLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunWriteLatency.setStatus('current')
lunReadLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 2, 3, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunReadLatency.setStatus('current')
shareTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1), )
if mibBuilder.loadTexts: shareTable.setStatus('current')
shareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1), ).setIndexNames((0, "TEGILE-MIB", "poolIndex"), (0, "TEGILE-MIB", "projectIndex"), (0, "TEGILE-MIB", "shareIndex"))
if mibBuilder.loadTexts: shareEntry.setStatus('current')
shareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: shareIndex.setStatus('current')
shareName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareName.setStatus('current')
shareMountPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareMountPoint.setStatus('current')
shareProjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareProjectName.setStatus('current')
sharePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharePoolName.setStatus('current')
shareQuotaLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareQuotaLow.setStatus('current')
shareQuotaHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareQuotaHigh.setStatus('current')
shareNFSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareNFSEnabled.setStatus('current')
shareCIFSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareCIFSEnabled.setStatus('current')
shareDedupEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareDedupEnabled.setStatus('current')
shareCompressionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareCompressionEnabled.setStatus('current')
shareDataSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareDataSizeLow.setStatus('current')
shareDataSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareDataSizeHigh.setStatus('current')
shareSnapshotSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareSnapshotSizeLow.setStatus('current')
shareSnapshotSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareSnapshotSizeHigh.setStatus('current')
shareReservedSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareReservedSizeLow.setStatus('current')
shareReservedSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareReservedSizeHigh.setStatus('current')
shareCompressedRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareCompressedRatio.setStatus('current')
shareCIFSWriteMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareCIFSWriteMbps.setStatus('current')
shareCIFSReadMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareCIFSReadMbps.setStatus('current')
shareCIFSWriteIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareCIFSWriteIops.setStatus('current')
shareCIFSReadIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareCIFSReadIops.setStatus('current')
shareCIFSWriteLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareCIFSWriteLatency.setStatus('current')
shareCIFSReadLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareCIFSReadLatency.setStatus('current')
shareNFSWriteMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareNFSWriteMbps.setStatus('current')
shareNFSReadMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareNFSReadMbps.setStatus('current')
shareNFSWriteIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareNFSWriteIops.setStatus('current')
shareNFSReadIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareNFSReadIops.setStatus('current')
shareNFSWriteLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareNFSWriteLatency.setStatus('current')
shareNFSReadLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 4, 3, 3, 1, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareNFSReadLatency.setStatus('current')
iscsiTargetsTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1), )
if mibBuilder.loadTexts: iscsiTargetsTable.setStatus('current')
iscsiTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1), ).setIndexNames((0, "TEGILE-MIB", "iscsiTargetIndex"))
if mibBuilder.loadTexts: iscsiTargetEntry.setStatus('current')
iscsiTargetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: iscsiTargetIndex.setStatus('current')
iscsiTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTargetName.setStatus('current')
iscsiTargetAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTargetAlias.setStatus('current')
iscsiTargetGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTargetGroup.setStatus('current')
iscsiTargetAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTargetAuth.setStatus('current')
iscsiTargetWriteMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTargetWriteMbps.setStatus('current')
iscsiTargetReadMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTargetReadMbps.setStatus('current')
iscsiTargetWriteIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTargetWriteIops.setStatus('current')
iscsiTargetReadIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTargetReadIops.setStatus('current')
iscsiTargetWriteLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTargetWriteLatency.setStatus('current')
iscsiTargetReadLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTargetReadLatency.setStatus('current')
iscsiInitiatorsTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 2, 1), )
if mibBuilder.loadTexts: iscsiInitiatorsTable.setStatus('current')
iscsiInitiatorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 2, 1, 1), ).setIndexNames((0, "TEGILE-MIB", "iscsiInitiatorIndex"))
if mibBuilder.loadTexts: iscsiInitiatorEntry.setStatus('current')
iscsiInitiatorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: iscsiInitiatorIndex.setStatus('current')
iscsiInitiatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInitiatorName.setStatus('current')
iscsiInitiatorChapUser = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInitiatorChapUser.setStatus('current')
iscsiInitiatorGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInitiatorGroup.setStatus('current')
fcTargetsTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1), )
if mibBuilder.loadTexts: fcTargetsTable.setStatus('current')
fcTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1, 1), ).setIndexNames((0, "TEGILE-MIB", "fcTargetIndex"))
if mibBuilder.loadTexts: fcTargetEntry.setStatus('current')
fcTargetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fcTargetIndex.setStatus('current')
fcTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTargetName.setStatus('current')
fcTargetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTargetStatus.setStatus('current')
fcTargetGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTargetGroup.setStatus('current')
fcTargetWriteMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTargetWriteMbps.setStatus('current')
fcTargetReadMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTargetReadMbps.setStatus('current')
fcTargetWriteIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTargetWriteIops.setStatus('current')
fcTargetReadIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTargetReadIops.setStatus('current')
fcTargetWriteLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTargetWriteLatency.setStatus('current')
fcTargetReadLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTargetReadLatency.setStatus('current')
fcInitiatorsTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 2, 1), )
if mibBuilder.loadTexts: fcInitiatorsTable.setStatus('current')
fcInitiatorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 2, 1, 1), ).setIndexNames((0, "TEGILE-MIB", "fcInitiatorIndex"))
if mibBuilder.loadTexts: fcInitiatorEntry.setStatus('current')
fcInitiatorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fcInitiatorIndex.setStatus('current')
fcInitiatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcInitiatorName.setStatus('current')
fcInitiatorGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 6, 2, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcInitiatorGroup.setStatus('current')
vmwareNFSDatastoresTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 7, 1), )
if mibBuilder.loadTexts: vmwareNFSDatastoresTable.setStatus('current')
vmwareNFSDatastoreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 7, 1, 1), ).setIndexNames((0, "TEGILE-MIB", "vmwareNFSDatastoreIndex"))
if mibBuilder.loadTexts: vmwareNFSDatastoreEntry.setStatus('current')
vmwareNFSDatastoreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 7, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vmwareNFSDatastoreIndex.setStatus('current')
vmwareNFSDatastoreVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoreVMName.setStatus('current')
vmwareNFSDatastoreESXName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 7, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoreESXName.setStatus('current')
vmwareNFSDatastoreWriteMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 7, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoreWriteMbps.setStatus('current')
vmwareNFSDatastoreReadMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 7, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoreReadMbps.setStatus('current')
vmwareNFSDatastoreWriteIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 7, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoreWriteIops.setStatus('current')
vmwareNFSDatastoreReadIops = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 7, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoreReadIops.setStatus('current')
vmwareNFSDatastoreWriteLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 7, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoreWriteLatency.setStatus('current')
vmwareNFSDatastoreReadLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 7, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwareNFSDatastoreReadLatency.setStatus('current')
haResourcesTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 8, 1), )
if mibBuilder.loadTexts: haResourcesTable.setStatus('current')
haResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 8, 1, 1), ).setIndexNames((0, "TEGILE-MIB", "haResourceIndex"))
if mibBuilder.loadTexts: haResourceEntry.setStatus('current')
haResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 8, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: haResourceIndex.setStatus('current')
haResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haResourceName.setStatus('current')
haResourceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haResourceDescription.setStatus('current')
haResourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 8, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haResourceStatus.setStatus('current')
haResourceGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 8, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haResourceGroup.setStatus('current')
haResourceActiveNode = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 8, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haResourceActiveNode.setStatus('current')
nicTable = MibTable((1, 3, 6, 1, 4, 1, 43906, 1, 5, 1), )
if mibBuilder.loadTexts: nicTable.setStatus('current')
nicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43906, 1, 5, 1, 1), ).setIndexNames((0, "TEGILE-MIB", "nicIndex"))
if mibBuilder.loadTexts: nicEntry.setStatus('current')
nicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nicIndex.setStatus('current')
nicName = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicName.setStatus('current')
nicState = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicState.setStatus('current')
nicGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicGroup.setStatus('current')
nicMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 5, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicMTU.setStatus('current')
nicReceiveMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 5, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicReceiveMbps.setStatus('current')
nicTransmitMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43906, 1, 5, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTransmitMbps.setStatus('current')
notificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 2, 1))
notificationProps = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1))
notificationDescription = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationDescription.setStatus('current')
notificationTime = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationTime.setStatus('current')
notificationSeverity = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationSeverity.setStatus('current')
notificationComponentName = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationComponentName.setStatus('current')
notificationTargetEntityName = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationTargetEntityName.setStatus('current')
notificationEventCode = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationEventCode.setStatus('current')
notificationSensorAction = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationSensorAction.setStatus('current')
notificationSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationSensorNumber.setStatus('current')
notificationSensorSuspect = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationSensorSuspect.setStatus('current')
notificationReadingTriggerValue = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationReadingTriggerValue.setStatus('current')
notificationThresholdTriggerValue = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationThresholdTriggerValue.setStatus('current')
notificationReadingUnit = MibScalar((1, 3, 6, 1, 4, 1, 43906, 2, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationReadingUnit.setStatus('current')
notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2))
testNotification = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 10)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: testNotification.setStatus('current')
diskIsOnline = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 101)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: diskIsOnline.setStatus('current')
diskGoneOffline = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 102)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: diskGoneOffline.setStatus('current')
diskError = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 103)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: diskError.setStatus('current')
spareDiskReplaced = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 104)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: spareDiskReplaced.setStatus('current')
diskSlowIo = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 105)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: diskSlowIo.setStatus('current')
poolCreated = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 201)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolCreated.setStatus('current')
poolDeleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 202)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolDeleted.setStatus('current')
poolDeletionFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 203)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolDeletionFailed.setStatus('current')
poolExpanded = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 204)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolExpanded.setStatus('current')
poolExported = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 205)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolExported.setStatus('current')
poolImported = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 206)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolImported.setStatus('current')
poolUpgraded = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 207)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolUpgraded.setStatus('current')
poolQuotaExceedThresholdWarning = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 208)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolQuotaExceedThresholdWarning.setStatus('current')
poolMetaDataQuotaExceedThresholdWarning = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 209)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolMetaDataQuotaExceedThresholdWarning.setStatus('current')
poolAvailableMetaToDataRatioBelowThresholdWarning = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 210)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolAvailableMetaToDataRatioBelowThresholdWarning.setStatus('current')
poolQuotaFinished = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 211)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolQuotaFinished.setStatus('current')
poolDegraded = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 212)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: poolDegraded.setStatus('current')
projectCreatedSuccessfully = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 301)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: projectCreatedSuccessfully.setStatus('current')
projectDeletionFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 302)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: projectDeletionFailed.setStatus('current')
projectDeleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 303)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: projectDeleted.setStatus('current')
projectModified = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 304)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: projectModified.setStatus('current')
projectThresholdExceedWarning = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 305)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: projectThresholdExceedWarning.setStatus('current')
projectQuotaFinished = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 306)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: projectQuotaFinished.setStatus('current')
projectCreatedWithNonOptimalBlockSize = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 307)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: projectCreatedWithNonOptimalBlockSize.setStatus('current')
volumeCreatedSuccessfully = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 401)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: volumeCreatedSuccessfully.setStatus('current')
volumeModifyCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 402)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: volumeModifyCompleted.setStatus('current')
volumeDeleteCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 403)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: volumeDeleteCompleted.setStatus('current')
volumeDeleteFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 404)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: volumeDeleteFailed.setStatus('current')
volumeExceedsThresholdWarning = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 405)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: volumeExceedsThresholdWarning.setStatus('current')
volumeQuotaFinished = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 406)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: volumeQuotaFinished.setStatus('current')
volumeCreatedWithNonOptimalBlockSize = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 407)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: volumeCreatedWithNonOptimalBlockSize.setStatus('current')
shareCreatedSuccessfully = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 501)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: shareCreatedSuccessfully.setStatus('current')
shareDeletionFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 502)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: shareDeletionFailed.setStatus('current')
shareDeleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 503)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: shareDeleted.setStatus('current')
shareExceedThresholdWarning = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 504)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: shareExceedThresholdWarning.setStatus('current')
shareQuotaFinished = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 505)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: shareQuotaFinished.setStatus('current')
shareCreatedWithNonOptimalBlockSize = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 506)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: shareCreatedWithNonOptimalBlockSize.setStatus('current')
aclMigrationStarted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 601)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: aclMigrationStarted.setStatus('current')
aclMigrationCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 602)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: aclMigrationCompleted.setStatus('current')
deleteFolderCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 701)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: deleteFolderCompleted.setStatus('current')
deleteFolderFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 702)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: deleteFolderFailed.setStatus('current')
snapshotCreatedSuccessfully = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 801)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snapshotCreatedSuccessfully.setStatus('current')
snapshotCreationFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 802)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snapshotCreationFailed.setStatus('current')
snapshotDeletedSuccessfully = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 803)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snapshotDeletedSuccessfully.setStatus('current')
snapshotDeleteFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 804)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snapshotDeleteFailed.setStatus('current')
snapshotCloningFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 805)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snapshotCloningFailed.setStatus('current')
snapshotCloneCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 806)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snapshotCloneCompleted.setStatus('current')
snapshotRollbackFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 807)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snapshotRollbackFailed.setStatus('current')
snapshotRollbackCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 808)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snapshotRollbackCompleted.setStatus('current')
haResourceGroupTakeBackCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 901)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: haResourceGroupTakeBackCompleted.setStatus('current')
haResourceGroupTakeOverCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 902)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: haResourceGroupTakeOverCompleted.setStatus('current')
controllerUp = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1001)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: controllerUp.setStatus('current')
controllerDown = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1002)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: controllerDown.setStatus('current')
intelliFlashSoftwareUp = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1003)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: intelliFlashSoftwareUp.setStatus('current')
intelliFlashSoftwareDown = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1004)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: intelliFlashSoftwareDown.setStatus('current')
controllerTimeDrift = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1005)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: controllerTimeDrift.setStatus('current')
fcInitiatorCreateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1101)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: fcInitiatorCreateCompleted.setStatus('current')
fcInitiatorCreateFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1102)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: fcInitiatorCreateFailed.setStatus('current')
fcInitiatorModifyCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1103)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: fcInitiatorModifyCompleted.setStatus('current')
fcTargetResetHbaPortCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1104)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: fcTargetResetHbaPortCompleted.setStatus('current')
fcTargetResetHbaPortFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1105)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: fcTargetResetHbaPortFailed.setStatus('current')
fcTargetModifyCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1106)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: fcTargetModifyCompleted.setStatus('current')
fcPortOnline = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1107)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: fcPortOnline.setStatus('current')
fcPortOffline = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1108)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: fcPortOffline.setStatus('current')
initiatorGroupCreateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1201)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: initiatorGroupCreateCompleted.setStatus('current')
initiatorGroupMemberAdded = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1202)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: initiatorGroupMemberAdded.setStatus('current')
initiatorGroupMemberRemoved = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1203)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: initiatorGroupMemberRemoved.setStatus('current')
initiatorGroupDeleteCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1204)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: initiatorGroupDeleteCompleted.setStatus('current')
iscsiInitiatorCreateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1301)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: iscsiInitiatorCreateCompleted.setStatus('current')
iscsiInitiatorCreateFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1302)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: iscsiInitiatorCreateFailed.setStatus('current')
iscsiInitiatorModifyCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1303)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: iscsiInitiatorModifyCompleted.setStatus('current')
iscsiInitiatorDeleteCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1304)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: iscsiInitiatorDeleteCompleted.setStatus('current')
iscsiTargetCreateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1305)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: iscsiTargetCreateCompleted.setStatus('current')
iscsiTargetModifyCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1306)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: iscsiTargetModifyCompleted.setStatus('current')
iscsiTargetDeleteCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1307)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: iscsiTargetDeleteCompleted.setStatus('current')
iscsiTargetError = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1308)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: iscsiTargetError.setStatus('current')
iscsiTargetGroupError = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1309)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: iscsiTargetGroupError.setStatus('current')
iscsiImproperTargetGroup = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1310)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: iscsiImproperTargetGroup.setStatus('current')
targetGroupCreateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1401)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: targetGroupCreateCompleted.setStatus('current')
targetGroupMemberAdded = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1402)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: targetGroupMemberAdded.setStatus('current')
targetGroupMemberRemoved = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1403)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: targetGroupMemberRemoved.setStatus('current')
targetGroupDeleteCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1404)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: targetGroupDeleteCompleted.setStatus('current')
adServerTimeDrift = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1501)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: adServerTimeDrift.setStatus('current')
maintenanceModeEnabled = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1502)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: maintenanceModeEnabled.setStatus('current')
maintenanceModeDisabled = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1503)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: maintenanceModeDisabled.setStatus('current')
diagnosticDataUploaded = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1504)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: diagnosticDataUploaded.setStatus('current')
diagnosticDataUploadingFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1505)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: diagnosticDataUploadingFailed.setStatus('current')
alertsCleanupCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1506)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: alertsCleanupCompleted.setStatus('current')
userLoginFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1507)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: userLoginFailed.setStatus('current')
ntpServerTimeDrift = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1508)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: ntpServerTimeDrift.setStatus('current')
smbSocketFailure = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1601)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: smbSocketFailure.setStatus('current')
netbiosSocketFailure = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1602)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: netbiosSocketFailure.setStatus('current')
upgradeStarted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1701)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: upgradeStarted.setStatus('current')
upgradeCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1702)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: upgradeCompleted.setStatus('current')
upgradeFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1703)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: upgradeFailed.setStatus('current')
upgradeTimeout = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1704)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: upgradeTimeout.setStatus('current')
upgradeCantProcessFilesManually = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1705)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: upgradeCantProcessFilesManually.setStatus('current')
upgradeDownloadStarted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1706)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: upgradeDownloadStarted.setStatus('current')
upgradeDownloadCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1707)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: upgradeDownloadCompleted.setStatus('current')
upgradeDownloadFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1708)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: upgradeDownloadFailed.setStatus('current')
tdpsUpgradeCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1709)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: tdpsUpgradeCompleted.setStatus('current')
tdpsUpgradeFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1710)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: tdpsUpgradeFailed.setStatus('current')
tdpsUpgradeTimeout = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1711)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: tdpsUpgradeTimeout.setStatus('current')
tdpsUpgradeDownloadStarted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1712)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: tdpsUpgradeDownloadStarted.setStatus('current')
tdpsUpgradeDownloadCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1713)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: tdpsUpgradeDownloadCompleted.setStatus('current')
tdpsUpgradeDownloadFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1714)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: tdpsUpgradeDownloadFailed.setStatus('current')
webdocsUpgradeDownloadStarted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1715)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: webdocsUpgradeDownloadStarted.setStatus('current')
webdocsUpgradeDownloadCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1716)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: webdocsUpgradeDownloadCompleted.setStatus('current')
webdocsUpgradeDownloadFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1717)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: webdocsUpgradeDownloadFailed.setStatus('current')
webdocsUpgradeCompleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1718)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: webdocsUpgradeCompleted.setStatus('current')
webdocsUpgradeFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1719)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: webdocsUpgradeFailed.setStatus('current')
replicationTargetDeleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1801)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: replicationTargetDeleted.setStatus('current')
replicationComplete = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1802)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: replicationComplete.setStatus('current')
replicationAborted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1803)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: replicationAborted.setStatus('current')
replicationAbandoned = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1804)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: replicationAbandoned.setStatus('current')
replicationResumed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1805)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: replicationResumed.setStatus('current')
replicationStarted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1806)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: replicationStarted.setStatus('current')
replicationFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1807)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: replicationFailed.setStatus('current')
replicationSourceRegistered = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1808)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: replicationSourceRegistered.setStatus('current')
replicationPaused = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1809)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: replicationPaused.setStatus('current')
snmpServiceStarted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1901)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snmpServiceStarted.setStatus('current')
snmpServiceStartFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1902)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snmpServiceStartFailed.setStatus('current')
snmpServiceStopped = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1903)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snmpServiceStopped.setStatus('current')
snmpServiceStopFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1904)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: snmpServiceStopFailed.setStatus('current')
smisServiceStarted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1905)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: smisServiceStarted.setStatus('current')
smisServiceStartFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1906)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: smisServiceStartFailed.setStatus('current')
smisServiceStopped = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1907)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: smisServiceStopped.setStatus('current')
smisServiceStopFailed = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 1908)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: smisServiceStopFailed.setStatus('current')
ipmiTemperature = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2001)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationEventCode"), ("TEGILE-MIB", "notificationSensorAction"), ("TEGILE-MIB", "notificationSensorNumber"), ("TEGILE-MIB", "notificationSensorSuspect"), ("TEGILE-MIB", "notificationReadingTriggerValue"), ("TEGILE-MIB", "notificationThresholdTriggerValue"), ("TEGILE-MIB", "notificationReadingUnit"))
if mibBuilder.loadTexts: ipmiTemperature.setStatus('current')
ipmiVoltage = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2002)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationEventCode"), ("TEGILE-MIB", "notificationSensorAction"), ("TEGILE-MIB", "notificationSensorNumber"), ("TEGILE-MIB", "notificationSensorSuspect"), ("TEGILE-MIB", "notificationReadingTriggerValue"), ("TEGILE-MIB", "notificationThresholdTriggerValue"), ("TEGILE-MIB", "notificationReadingUnit"))
if mibBuilder.loadTexts: ipmiVoltage.setStatus('current')
ipmiCurrent = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2003)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationEventCode"), ("TEGILE-MIB", "notificationSensorAction"), ("TEGILE-MIB", "notificationSensorNumber"), ("TEGILE-MIB", "notificationSensorSuspect"), ("TEGILE-MIB", "notificationReadingTriggerValue"), ("TEGILE-MIB", "notificationThresholdTriggerValue"), ("TEGILE-MIB", "notificationReadingUnit"))
if mibBuilder.loadTexts: ipmiCurrent.setStatus('current')
ipmiFan = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2004)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationEventCode"), ("TEGILE-MIB", "notificationSensorAction"), ("TEGILE-MIB", "notificationSensorNumber"), ("TEGILE-MIB", "notificationSensorSuspect"), ("TEGILE-MIB", "notificationReadingTriggerValue"), ("TEGILE-MIB", "notificationThresholdTriggerValue"), ("TEGILE-MIB", "notificationReadingUnit"))
if mibBuilder.loadTexts: ipmiFan.setStatus('current')
ipmiPowerSupply = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2005)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationEventCode"), ("TEGILE-MIB", "notificationSensorAction"), ("TEGILE-MIB", "notificationSensorNumber"), ("TEGILE-MIB", "notificationSensorSuspect"))
if mibBuilder.loadTexts: ipmiPowerSupply.setStatus('current')
ipmiMemory = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2006)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationEventCode"), ("TEGILE-MIB", "notificationSensorAction"), ("TEGILE-MIB", "notificationSensorNumber"), ("TEGILE-MIB", "notificationSensorSuspect"))
if mibBuilder.loadTexts: ipmiMemory.setStatus('current')
ipmiCriticalInterrupt = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2007)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationEventCode"), ("TEGILE-MIB", "notificationSensorAction"), ("TEGILE-MIB", "notificationSensorNumber"), ("TEGILE-MIB", "notificationSensorSuspect"))
if mibBuilder.loadTexts: ipmiCriticalInterrupt.setStatus('current')
ipmiThreshold = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2008)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationEventCode"), ("TEGILE-MIB", "notificationSensorAction"), ("TEGILE-MIB", "notificationSensorNumber"), ("TEGILE-MIB", "notificationSensorSuspect"), ("TEGILE-MIB", "notificationReadingTriggerValue"), ("TEGILE-MIB", "notificationThresholdTriggerValue"), ("TEGILE-MIB", "notificationReadingUnit"))
if mibBuilder.loadTexts: ipmiThreshold.setStatus('current')
ipmiOther = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2009)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationEventCode"), ("TEGILE-MIB", "notificationSensorAction"), ("TEGILE-MIB", "notificationSensorNumber"), ("TEGILE-MIB", "notificationSensorSuspect"))
if mibBuilder.loadTexts: ipmiOther.setStatus('current')
memoryFailure = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2051)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: memoryFailure.setStatus('current')
sensorFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2052)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: sensorFailureEvent.setStatus('current')
unknownSensorEvent = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2053)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: unknownSensorEvent.setStatus('current')
networkIpmpGroupUp = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2201)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: networkIpmpGroupUp.setStatus('current')
networkIpmpGroupDown = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2202)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: networkIpmpGroupDown.setStatus('current')
networkIpmpMemberInterfaceAdded = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2203)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: networkIpmpMemberInterfaceAdded.setStatus('current')
networkIpmpMemberInterfaceRemoved = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2204)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: networkIpmpMemberInterfaceRemoved.setStatus('current')
networkInterfaceUp = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2205)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: networkInterfaceUp.setStatus('current')
networkInterfaceDown = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2206)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: networkInterfaceDown.setStatus('current')
vmwareNFSDatastoreCreated = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2301)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: vmwareNFSDatastoreCreated.setStatus('current')
vmwareNFSDatastoreDeleted = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2302)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: vmwareNFSDatastoreDeleted.setStatus('current')
nvdimmFailDeviceError = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2401)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: nvdimmFailDeviceError.setStatus('current')
nvdimmFailSoftError = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2402)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: nvdimmFailSoftError.setStatus('current')
nvdimmFailInitializationError = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2403)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: nvdimmFailInitializationError.setStatus('current')
nvdimmFailUnknownError = NotificationType((1, 3, 6, 1, 4, 1, 43906, 2, 1, 2, 2404)).setObjects(("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"))
if mibBuilder.loadTexts: nvdimmFailUnknownError.setStatus('current')
tegileConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 3))
tegileGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 3, 1))
currentObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43906, 3, 1, 1)).setObjects(("TEGILE-MIB", "haControllerA_Name"), ("TEGILE-MIB", "haControllerA_IPAddr"), ("TEGILE-MIB", "haControllerA_SoftwareVersion"), ("TEGILE-MIB", "haControllerA_Uptime"), ("TEGILE-MIB", "haControllerB_Name"), ("TEGILE-MIB", "haControllerB_IPAddr"), ("TEGILE-MIB", "haControllerB_SoftwareVersion"), ("TEGILE-MIB", "haControllerB_Uptime"), ("TEGILE-MIB", "controllerHardwareModel"), ("TEGILE-MIB", "snmpAgentVersion"), ("TEGILE-MIB", "cpuTotalUsage"), ("TEGILE-MIB", "cpuSystemCalls"), ("TEGILE-MIB", "cpuInterrupts"), ("TEGILE-MIB", "cacheTotalWriteMbps"), ("TEGILE-MIB", "cacheTotalReadMbps"), ("TEGILE-MIB", "cacheTotalWriteIops"), ("TEGILE-MIB", "cacheTotalReadIops"), ("TEGILE-MIB", "cacheRAMReads"), ("TEGILE-MIB", "cacheSSDReads"), ("TEGILE-MIB", "diskTotalWriteMbps"), ("TEGILE-MIB", "diskTotalReadMbps"), ("TEGILE-MIB", "diskTotalWriteIops"), ("TEGILE-MIB", "diskTotalReadIops"), ("TEGILE-MIB", "diskDataWriteMbps"), ("TEGILE-MIB", "diskDataReadMbps"), ("TEGILE-MIB", "diskDataWriteIops"), ("TEGILE-MIB", "diskDataReadIops"), ("TEGILE-MIB", "diskAvgWriteLatency"), ("TEGILE-MIB", "diskAvgReadLatency"), ("TEGILE-MIB", "diskIOCount"), ("TEGILE-MIB", "diskRandomIOCount"), ("TEGILE-MIB", "diskSequentialIOCount"), ("TEGILE-MIB", "poolTotalWriteMbps"), ("TEGILE-MIB", "poolTotalReadMbps"), ("TEGILE-MIB", "poolTotalWriteIops"), ("TEGILE-MIB", "poolTotalReadIops"), ("TEGILE-MIB", "poolAvgWriteLatency"), ("TEGILE-MIB", "poolAvgReadLatency"), ("TEGILE-MIB", "cifsTotalWriteMbps"), ("TEGILE-MIB", "cifsTotalReadMbps"), ("TEGILE-MIB", "cifsTotalWriteIops"), ("TEGILE-MIB", "cifsTotalReadIops"), ("TEGILE-MIB", "cifsAvgWriteLatency"), ("TEGILE-MIB", "cifsAvgReadLatency"), ("TEGILE-MIB", "nfsTotalWriteMbps"), ("TEGILE-MIB", "nfsTotalReadMbps"), ("TEGILE-MIB", "nfsTotalWriteIops"), ("TEGILE-MIB", "nfsTotalReadIops"), ("TEGILE-MIB", "nfsAvgWriteLatency"), ("TEGILE-MIB", "nfsAvgReadLatency"), ("TEGILE-MIB", "iscsiTotalWriteMbps"), ("TEGILE-MIB", "iscsiTotalReadMbps"), ("TEGILE-MIB", "iscsiWriteIops"), ("TEGILE-MIB", "iscsiTotalReadIops"), ("TEGILE-MIB", "iscsiAvgWriteLatency"), ("TEGILE-MIB", "iscsiAvgReadLatency"), ("TEGILE-MIB", "fcTotalWriteMbps"), ("TEGILE-MIB", "fcTotalReadMbps"), ("TEGILE-MIB", "fcTotalWriteIops"), ("TEGILE-MIB", "fcTotalReadIops"), ("TEGILE-MIB", "fcAvgWriteLatency"), ("TEGILE-MIB", "fcAvgReadLatency"), ("TEGILE-MIB", "vmwareNFSDatastoresTotalWriteMbps"), ("TEGILE-MIB", "vmwareNFSDatastoresTotalReadMbps"), ("TEGILE-MIB", "vmwareNFSDatastoresTotalWriteIops"), ("TEGILE-MIB", "vmwareNFSDatastoresTotalReadIops"), ("TEGILE-MIB", "vmwareNFSDatastoresAvgWriteLatency"), ("TEGILE-MIB", "vmwareNFSDatastoresAvgReadLatency"), ("TEGILE-MIB", "networkTotalReceiveMbps"), ("TEGILE-MIB", "networkTotalTransmitMbps"), ("TEGILE-MIB", "diskCount"), ("TEGILE-MIB", "diskAlias"), ("TEGILE-MIB", "diskSizeLow"), ("TEGILE-MIB", "diskSizeHigh"), ("TEGILE-MIB", "diskState"), ("TEGILE-MIB", "diskType"), ("TEGILE-MIB", "diskPoolName"), ("TEGILE-MIB", "poolCount"), ("TEGILE-MIB", "poolName"), ("TEGILE-MIB", "poolState"), ("TEGILE-MIB", "poolHealth"), ("TEGILE-MIB", "poolOwnerController"), ("TEGILE-MIB", "poolProjectCount"), ("TEGILE-MIB", "poolSizeLow"), ("TEGILE-MIB", "poolSizeHigh"), ("TEGILE-MIB", "poolUsedSizeLow"), ("TEGILE-MIB", "poolUsedSizeHigh"), ("TEGILE-MIB", "poolFreeSizeLow"), ("TEGILE-MIB", "poolFreeSizeHigh"), ("TEGILE-MIB", "poolDataSizeLow"), ("TEGILE-MIB", "poolDataSizeHigh"), ("TEGILE-MIB", "poolPostDedupDataSizeLow"), ("TEGILE-MIB", "poolPostDedupDataSizeHigh"), ("TEGILE-MIB", "poolPostCompressionDataSizeLow"), ("TEGILE-MIB", "poolPostCompressionDataSizeHigh"), ("TEGILE-MIB", "poolUnusedReservedSizeLow"), ("TEGILE-MIB", "poolUnusedReservedSizeHigh"), ("TEGILE-MIB", "poolTotalSaving"), ("TEGILE-MIB", "poolDataWriteMbps"), ("TEGILE-MIB", "poolDataReadMbps"), ("TEGILE-MIB", "poolDataWriteIops"), ("TEGILE-MIB", "poolDataReadIops"), ("TEGILE-MIB", "poolDataWriteLatency"), ("TEGILE-MIB", "poolDataReadLatency"), ("TEGILE-MIB", "poolMetaWriteMbps"), ("TEGILE-MIB", "poolMetaReadMbps"), ("TEGILE-MIB", "poolMetaWriteIops"), ("TEGILE-MIB", "poolMetaReadIops"), ("TEGILE-MIB", "poolMetaWriteLatency"), ("TEGILE-MIB", "poolMetaReadLatency"), ("TEGILE-MIB", "poolReadCacheWriteMbps"), ("TEGILE-MIB", "poolReadCacheReadMbps"), ("TEGILE-MIB", "poolReadCacheWriteIops"), ("TEGILE-MIB", "poolReadCacheReadIops"), ("TEGILE-MIB", "poolReadCacheWriteLatency"), ("TEGILE-MIB", "poolReadCacheReadLatency"), ("TEGILE-MIB", "poolWriteCacheWriteMbps"), ("TEGILE-MIB", "poolWriteCacheWriteIops"), ("TEGILE-MIB", "poolWriteCacheWriteLatency"), ("TEGILE-MIB", "projectName"), ("TEGILE-MIB", "projectPoolName"), ("TEGILE-MIB", "projectDedupEnabled"), ("TEGILE-MIB", "projectCompressionEnabled"), ("TEGILE-MIB", "projectQuotaSizeLow"), ("TEGILE-MIB", "projectQuotaSizeHigh"), ("TEGILE-MIB", "projectDataSizeLow"), ("TEGILE-MIB", "projectDataSizeHigh"), ("TEGILE-MIB", "projectFreeSizeLow"), ("TEGILE-MIB", "projectFreeSizeHigh"), ("TEGILE-MIB", "projectSnapshotSizeLow"), ("TEGILE-MIB", "projectSnapshotSizeHigh"), ("TEGILE-MIB", "projectPostCompressionDataSizeLow"), ("TEGILE-MIB", "projectPostCompressionDataSizeHigh"), ("TEGILE-MIB", "projectUnusedReservedSizeLow"), ("TEGILE-MIB", "projectUnusedReservedSizeHigh"), ("TEGILE-MIB", "projectTotalSaving"), ("TEGILE-MIB", "projectLunCount"), ("TEGILE-MIB", "projectShareCount"), ("TEGILE-MIB", "lunName"), ("TEGILE-MIB", "lunProjectName"), ("TEGILE-MIB", "lunPoolName"), ("TEGILE-MIB", "lunGUID"), ("TEGILE-MIB", "lunBlockSize"), ("TEGILE-MIB", "lunDedupEnabled"), ("TEGILE-MIB", "lunCompressionEnabled"), ("TEGILE-MIB", "lunSizeLow"), ("TEGILE-MIB", "lunSizeHigh"), ("TEGILE-MIB", "lunDataSizeLow"), ("TEGILE-MIB", "lunDataSizeHigh"), ("TEGILE-MIB", "lunSnapshotSizeLow"), ("TEGILE-MIB", "lunSnapshotSizeHigh"), ("TEGILE-MIB", "lunFreeSizeLow"), ("TEGILE-MIB", "lunFreeSizeHigh"), ("TEGILE-MIB", "lunReservedSizeLow"), ("TEGILE-MIB", "lunReservedSizeHigh"), ("TEGILE-MIB", "lunCompressedRatio"), ("TEGILE-MIB", "lunProtocol"), ("TEGILE-MIB", "lunTargetGroup"), ("TEGILE-MIB", "lunInitiatorGroup"), ("TEGILE-MIB", "lunWriteMbps"), ("TEGILE-MIB", "lunReadMbps"), ("TEGILE-MIB", "lunWriteIops"), ("TEGILE-MIB", "lunReadIops"), ("TEGILE-MIB", "lunWriteLatency"), ("TEGILE-MIB", "lunReadLatency"), ("TEGILE-MIB", "shareName"), ("TEGILE-MIB", "shareMountPoint"), ("TEGILE-MIB", "shareProjectName"), ("TEGILE-MIB", "sharePoolName"), ("TEGILE-MIB", "shareQuotaLow"), ("TEGILE-MIB", "shareQuotaHigh"), ("TEGILE-MIB", "shareNFSEnabled"), ("TEGILE-MIB", "shareCIFSEnabled"), ("TEGILE-MIB", "shareDedupEnabled"), ("TEGILE-MIB", "shareCompressionEnabled"), ("TEGILE-MIB", "shareDataSizeLow"), ("TEGILE-MIB", "shareDataSizeHigh"), ("TEGILE-MIB", "shareSnapshotSizeLow"), ("TEGILE-MIB", "shareSnapshotSizeHigh"), ("TEGILE-MIB", "shareReservedSizeLow"), ("TEGILE-MIB", "shareReservedSizeHigh"), ("TEGILE-MIB", "shareCompressedRatio"), ("TEGILE-MIB", "shareCIFSWriteMbps"), ("TEGILE-MIB", "shareCIFSReadMbps"), ("TEGILE-MIB", "shareCIFSWriteIops"), ("TEGILE-MIB", "shareCIFSReadIops"), ("TEGILE-MIB", "shareCIFSWriteLatency"), ("TEGILE-MIB", "shareCIFSReadLatency"), ("TEGILE-MIB", "shareNFSWriteMbps"), ("TEGILE-MIB", "shareNFSReadMbps"), ("TEGILE-MIB", "shareNFSWriteIops"), ("TEGILE-MIB", "shareNFSReadIops"), ("TEGILE-MIB", "shareNFSWriteLatency"), ("TEGILE-MIB", "shareNFSReadLatency"), ("TEGILE-MIB", "iscsiTargetName"), ("TEGILE-MIB", "iscsiTargetAlias"), ("TEGILE-MIB", "iscsiTargetGroup"), ("TEGILE-MIB", "iscsiTargetAuth"), ("TEGILE-MIB", "iscsiTargetWriteMbps"), ("TEGILE-MIB", "iscsiTargetReadMbps"), ("TEGILE-MIB", "iscsiTargetWriteIops"), ("TEGILE-MIB", "iscsiTargetReadIops"), ("TEGILE-MIB", "iscsiTargetWriteLatency"), ("TEGILE-MIB", "iscsiTargetReadLatency"), ("TEGILE-MIB", "iscsiInitiatorName"), ("TEGILE-MIB", "iscsiInitiatorChapUser"), ("TEGILE-MIB", "iscsiInitiatorGroup"), ("TEGILE-MIB", "fcTargetName"), ("TEGILE-MIB", "fcTargetStatus"), ("TEGILE-MIB", "fcTargetGroup"), ("TEGILE-MIB", "fcTargetWriteMbps"), ("TEGILE-MIB", "fcTargetReadMbps"), ("TEGILE-MIB", "fcTargetWriteIops"), ("TEGILE-MIB", "fcTargetReadIops"), ("TEGILE-MIB", "fcTargetWriteLatency"), ("TEGILE-MIB", "fcTargetReadLatency"), ("TEGILE-MIB", "fcInitiatorName"), ("TEGILE-MIB", "fcInitiatorGroup"), ("TEGILE-MIB", "vmwareNFSDatastoreVMName"), ("TEGILE-MIB", "vmwareNFSDatastoreESXName"), ("TEGILE-MIB", "vmwareNFSDatastoreWriteMbps"), ("TEGILE-MIB", "vmwareNFSDatastoreReadMbps"), ("TEGILE-MIB", "vmwareNFSDatastoreWriteIops"), ("TEGILE-MIB", "vmwareNFSDatastoreReadIops"), ("TEGILE-MIB", "vmwareNFSDatastoreWriteLatency"), ("TEGILE-MIB", "vmwareNFSDatastoreReadLatency"), ("TEGILE-MIB", "haResourceName"), ("TEGILE-MIB", "haResourceDescription"), ("TEGILE-MIB", "haResourceStatus"), ("TEGILE-MIB", "haResourceGroup"), ("TEGILE-MIB", "haResourceActiveNode"), ("TEGILE-MIB", "nicName"), ("TEGILE-MIB", "nicState"), ("TEGILE-MIB", "nicGroup"), ("TEGILE-MIB", "nicMTU"), ("TEGILE-MIB", "nicReceiveMbps"), ("TEGILE-MIB", "nicTransmitMbps"), ("TEGILE-MIB", "notificationDescription"), ("TEGILE-MIB", "notificationTime"), ("TEGILE-MIB", "notificationSeverity"), ("TEGILE-MIB", "notificationComponentName"), ("TEGILE-MIB", "notificationTargetEntityName"), ("TEGILE-MIB", "notificationEventCode"), ("TEGILE-MIB", "notificationSensorAction"), ("TEGILE-MIB", "notificationSensorNumber"), ("TEGILE-MIB", "notificationSensorSuspect"), ("TEGILE-MIB", "notificationReadingTriggerValue"), ("TEGILE-MIB", "notificationThresholdTriggerValue"), ("TEGILE-MIB", "notificationReadingUnit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    currentObjectGroup = currentObjectGroup.setStatus('current')
currentNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 43906, 3, 1, 2)).setObjects(("TEGILE-MIB", "testNotification"), ("TEGILE-MIB", "diskIsOnline"), ("TEGILE-MIB", "diskGoneOffline"), ("TEGILE-MIB", "diskError"), ("TEGILE-MIB", "spareDiskReplaced"), ("TEGILE-MIB", "diskSlowIo"), ("TEGILE-MIB", "poolCreated"), ("TEGILE-MIB", "poolDeleted"), ("TEGILE-MIB", "poolDeletionFailed"), ("TEGILE-MIB", "poolExpanded"), ("TEGILE-MIB", "poolExported"), ("TEGILE-MIB", "poolImported"), ("TEGILE-MIB", "poolUpgraded"), ("TEGILE-MIB", "poolQuotaExceedThresholdWarning"), ("TEGILE-MIB", "poolMetaDataQuotaExceedThresholdWarning"), ("TEGILE-MIB", "poolAvailableMetaToDataRatioBelowThresholdWarning"), ("TEGILE-MIB", "poolQuotaFinished"), ("TEGILE-MIB", "poolDegraded"), ("TEGILE-MIB", "projectCreatedSuccessfully"), ("TEGILE-MIB", "projectDeletionFailed"), ("TEGILE-MIB", "projectDeleted"), ("TEGILE-MIB", "projectModified"), ("TEGILE-MIB", "projectThresholdExceedWarning"), ("TEGILE-MIB", "projectQuotaFinished"), ("TEGILE-MIB", "projectCreatedWithNonOptimalBlockSize"), ("TEGILE-MIB", "volumeCreatedSuccessfully"), ("TEGILE-MIB", "volumeModifyCompleted"), ("TEGILE-MIB", "volumeDeleteCompleted"), ("TEGILE-MIB", "volumeDeleteFailed"), ("TEGILE-MIB", "volumeExceedsThresholdWarning"), ("TEGILE-MIB", "volumeQuotaFinished"), ("TEGILE-MIB", "volumeCreatedWithNonOptimalBlockSize"), ("TEGILE-MIB", "shareCreatedSuccessfully"), ("TEGILE-MIB", "shareDeletionFailed"), ("TEGILE-MIB", "shareDeleted"), ("TEGILE-MIB", "shareExceedThresholdWarning"), ("TEGILE-MIB", "shareQuotaFinished"), ("TEGILE-MIB", "shareCreatedWithNonOptimalBlockSize"), ("TEGILE-MIB", "aclMigrationStarted"), ("TEGILE-MIB", "aclMigrationCompleted"), ("TEGILE-MIB", "deleteFolderCompleted"), ("TEGILE-MIB", "deleteFolderFailed"), ("TEGILE-MIB", "snapshotCreatedSuccessfully"), ("TEGILE-MIB", "snapshotCreationFailed"), ("TEGILE-MIB", "snapshotDeletedSuccessfully"), ("TEGILE-MIB", "snapshotDeleteFailed"), ("TEGILE-MIB", "snapshotCloningFailed"), ("TEGILE-MIB", "snapshotCloneCompleted"), ("TEGILE-MIB", "snapshotRollbackFailed"), ("TEGILE-MIB", "snapshotRollbackCompleted"), ("TEGILE-MIB", "haResourceGroupTakeBackCompleted"), ("TEGILE-MIB", "haResourceGroupTakeOverCompleted"), ("TEGILE-MIB", "controllerUp"), ("TEGILE-MIB", "controllerDown"), ("TEGILE-MIB", "intelliFlashSoftwareUp"), ("TEGILE-MIB", "intelliFlashSoftwareDown"), ("TEGILE-MIB", "controllerTimeDrift"), ("TEGILE-MIB", "fcInitiatorCreateCompleted"), ("TEGILE-MIB", "fcInitiatorCreateFailed"), ("TEGILE-MIB", "fcInitiatorModifyCompleted"), ("TEGILE-MIB", "fcTargetResetHbaPortCompleted"), ("TEGILE-MIB", "fcTargetResetHbaPortFailed"), ("TEGILE-MIB", "fcTargetModifyCompleted"), ("TEGILE-MIB", "fcPortOnline"), ("TEGILE-MIB", "fcPortOffline"), ("TEGILE-MIB", "initiatorGroupCreateCompleted"), ("TEGILE-MIB", "initiatorGroupMemberAdded"), ("TEGILE-MIB", "initiatorGroupMemberRemoved"), ("TEGILE-MIB", "initiatorGroupDeleteCompleted"), ("TEGILE-MIB", "iscsiInitiatorCreateCompleted"), ("TEGILE-MIB", "iscsiInitiatorCreateFailed"), ("TEGILE-MIB", "iscsiInitiatorModifyCompleted"), ("TEGILE-MIB", "iscsiInitiatorDeleteCompleted"), ("TEGILE-MIB", "iscsiTargetCreateCompleted"), ("TEGILE-MIB", "iscsiTargetModifyCompleted"), ("TEGILE-MIB", "iscsiTargetDeleteCompleted"), ("TEGILE-MIB", "iscsiTargetError"), ("TEGILE-MIB", "iscsiTargetGroupError"), ("TEGILE-MIB", "iscsiImproperTargetGroup"), ("TEGILE-MIB", "targetGroupCreateCompleted"), ("TEGILE-MIB", "targetGroupMemberAdded"), ("TEGILE-MIB", "targetGroupMemberRemoved"), ("TEGILE-MIB", "targetGroupDeleteCompleted"), ("TEGILE-MIB", "adServerTimeDrift"), ("TEGILE-MIB", "maintenanceModeEnabled"), ("TEGILE-MIB", "maintenanceModeDisabled"), ("TEGILE-MIB", "diagnosticDataUploaded"), ("TEGILE-MIB", "diagnosticDataUploadingFailed"), ("TEGILE-MIB", "alertsCleanupCompleted"), ("TEGILE-MIB", "userLoginFailed"), ("TEGILE-MIB", "ntpServerTimeDrift"), ("TEGILE-MIB", "smbSocketFailure"), ("TEGILE-MIB", "netbiosSocketFailure"), ("TEGILE-MIB", "upgradeStarted"), ("TEGILE-MIB", "upgradeCompleted"), ("TEGILE-MIB", "upgradeFailed"), ("TEGILE-MIB", "upgradeTimeout"), ("TEGILE-MIB", "upgradeCantProcessFilesManually"), ("TEGILE-MIB", "upgradeDownloadStarted"), ("TEGILE-MIB", "upgradeDownloadCompleted"), ("TEGILE-MIB", "upgradeDownloadFailed"), ("TEGILE-MIB", "tdpsUpgradeCompleted"), ("TEGILE-MIB", "tdpsUpgradeFailed"), ("TEGILE-MIB", "tdpsUpgradeTimeout"), ("TEGILE-MIB", "tdpsUpgradeDownloadStarted"), ("TEGILE-MIB", "tdpsUpgradeDownloadCompleted"), ("TEGILE-MIB", "tdpsUpgradeDownloadFailed"), ("TEGILE-MIB", "webdocsUpgradeDownloadStarted"), ("TEGILE-MIB", "webdocsUpgradeDownloadCompleted"), ("TEGILE-MIB", "webdocsUpgradeDownloadFailed"), ("TEGILE-MIB", "webdocsUpgradeCompleted"), ("TEGILE-MIB", "webdocsUpgradeFailed"), ("TEGILE-MIB", "replicationTargetDeleted"), ("TEGILE-MIB", "replicationComplete"), ("TEGILE-MIB", "replicationAborted"), ("TEGILE-MIB", "replicationAbandoned"), ("TEGILE-MIB", "replicationResumed"), ("TEGILE-MIB", "replicationStarted"), ("TEGILE-MIB", "replicationFailed"), ("TEGILE-MIB", "replicationSourceRegistered"), ("TEGILE-MIB", "replicationPaused"), ("TEGILE-MIB", "snmpServiceStarted"), ("TEGILE-MIB", "snmpServiceStartFailed"), ("TEGILE-MIB", "snmpServiceStopped"), ("TEGILE-MIB", "snmpServiceStopFailed"), ("TEGILE-MIB", "smisServiceStarted"), ("TEGILE-MIB", "smisServiceStartFailed"), ("TEGILE-MIB", "smisServiceStopped"), ("TEGILE-MIB", "smisServiceStopFailed"), ("TEGILE-MIB", "ipmiTemperature"), ("TEGILE-MIB", "ipmiVoltage"), ("TEGILE-MIB", "ipmiCurrent"), ("TEGILE-MIB", "ipmiFan"), ("TEGILE-MIB", "ipmiPowerSupply"), ("TEGILE-MIB", "ipmiMemory"), ("TEGILE-MIB", "ipmiCriticalInterrupt"), ("TEGILE-MIB", "ipmiThreshold"), ("TEGILE-MIB", "ipmiOther"), ("TEGILE-MIB", "memoryFailure"), ("TEGILE-MIB", "sensorFailureEvent"), ("TEGILE-MIB", "unknownSensorEvent"), ("TEGILE-MIB", "networkIpmpGroupUp"), ("TEGILE-MIB", "networkIpmpGroupDown"), ("TEGILE-MIB", "networkIpmpMemberInterfaceAdded"), ("TEGILE-MIB", "networkIpmpMemberInterfaceRemoved"), ("TEGILE-MIB", "networkInterfaceUp"), ("TEGILE-MIB", "networkInterfaceDown"), ("TEGILE-MIB", "vmwareNFSDatastoreCreated"), ("TEGILE-MIB", "vmwareNFSDatastoreDeleted"), ("TEGILE-MIB", "nvdimmFailDeviceError"), ("TEGILE-MIB", "nvdimmFailSoftError"), ("TEGILE-MIB", "nvdimmFailInitializationError"), ("TEGILE-MIB", "nvdimmFailUnknownError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    currentNotificationGroup = currentNotificationGroup.setStatus('current')
tegileCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 43906, 3, 2))
basicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 43906, 3, 2, 1)).setObjects(("TEGILE-MIB", "currentObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    basicCompliance = basicCompliance.setStatus('current')
mibBuilder.exportSymbols("TEGILE-MIB", network=network, shareCreatedWithNonOptimalBlockSize=shareCreatedWithNonOptimalBlockSize, poolFreeSizeHigh=poolFreeSizeHigh, nfsTotalReadMbps=nfsTotalReadMbps, nicName=nicName, snmpServiceStartFailed=snmpServiceStartFailed, diskSizeHigh=diskSizeHigh, iscsiWriteIops=iscsiWriteIops, maintenanceModeDisabled=maintenanceModeDisabled, shareDeleted=shareDeleted, shareCIFSWriteIops=shareCIFSWriteIops, lunTable=lunTable, shareProjectName=shareProjectName, cacheTotalWriteIops=cacheTotalWriteIops, shareQuotaLow=shareQuotaLow, smbSocketFailure=smbSocketFailure, aclMigrationCompleted=aclMigrationCompleted, poolPostCompressionDataSizeLow=poolPostCompressionDataSizeLow, vmwareNFSDatastoreWriteIops=vmwareNFSDatastoreWriteIops, snapshotCreationFailed=snapshotCreationFailed, poolTable=poolTable, replicationFailed=replicationFailed, fcInitiatorEntry=fcInitiatorEntry, upgradeStarted=upgradeStarted, ipmiVoltage=ipmiVoltage, lunFreeSizeLow=lunFreeSizeLow, iscsiTotalReadIops=iscsiTotalReadIops, fcTotalWriteMbps=fcTotalWriteMbps, notificationSeverity=notificationSeverity, vmwareNFSDatastoresTotalWriteMbps=vmwareNFSDatastoresTotalWriteMbps, shareDataSizeHigh=shareDataSizeHigh, tdpsUpgradeCompleted=tdpsUpgradeCompleted, poolWriteCacheWriteLatency=poolWriteCacheWriteLatency, lunFreeSizeHigh=lunFreeSizeHigh, fcTargetModifyCompleted=fcTargetModifyCompleted, snapshotCloningFailed=snapshotCloningFailed, projectEntry=projectEntry, poolDeletionFailed=poolDeletionFailed, poolOwnerController=poolOwnerController, fcInitiatorModifyCompleted=fcInitiatorModifyCompleted, projectLunCount=projectLunCount, shareCIFSEnabled=shareCIFSEnabled, fcInitiatorCreateFailed=fcInitiatorCreateFailed, vmwareNFSDatastoreReadLatency=vmwareNFSDatastoreReadLatency, fcTotalReadMbps=fcTotalReadMbps, iscsiInitiatorCreateFailed=iscsiInitiatorCreateFailed, shareCompressionEnabled=shareCompressionEnabled, cpuSystemCalls=cpuSystemCalls, networkIpmpGroupDown=networkIpmpGroupDown, webdocsUpgradeDownloadCompleted=webdocsUpgradeDownloadCompleted, diskState=diskState, diskAvgReadLatency=diskAvgReadLatency, replicationStarted=replicationStarted, nvdimmFailUnknownError=nvdimmFailUnknownError, tdpsUpgradeFailed=tdpsUpgradeFailed, diskTable=diskTable, cifsTotalWriteMbps=cifsTotalWriteMbps, iscsiInitiatorGroup=iscsiInitiatorGroup, vmwareNFSDatastoreReadMbps=vmwareNFSDatastoreReadMbps, iscsiInitiatorChapUser=iscsiInitiatorChapUser, poolUnusedReservedSizeHigh=poolUnusedReservedSizeHigh, iscsiInitiatorIndex=iscsiInitiatorIndex, deleteFolderFailed=deleteFolderFailed, poolSizeLow=poolSizeLow, iscsiInitiatorName=iscsiInitiatorName, replicationAbandoned=replicationAbandoned, tegileArray_notifications=tegileArray_notifications, sanProperties=sanProperties, shareCIFSReadMbps=shareCIFSReadMbps, snmpServiceStopFailed=snmpServiceStopFailed, diskEntry=diskEntry, lunTargetGroup=lunTargetGroup, poolMetaReadMbps=poolMetaReadMbps, nicIndex=nicIndex, fcInitiatorIndex=fcInitiatorIndex, fcPortOnline=fcPortOnline, aclMigrationStarted=aclMigrationStarted, shareReservedSizeHigh=shareReservedSizeHigh, projectDataSizeLow=projectDataSizeLow, diskError=diskError, lunReservedSizeLow=lunReservedSizeLow, poolAvgReadLatency=poolAvgReadLatency, tegileArray=tegileArray, replicationComplete=replicationComplete, iscsiAvgReadLatency=iscsiAvgReadLatency, poolProjects=poolProjects, volumeDeleteCompleted=volumeDeleteCompleted, projectPostCompressionDataSizeLow=projectPostCompressionDataSizeLow, fcTargetReadIops=fcTargetReadIops, upgradeTimeout=upgradeTimeout, properties=properties, ipmiCriticalInterrupt=ipmiCriticalInterrupt, haControllerA_IPAddr=haControllerA_IPAddr, ipmiMemory=ipmiMemory, lunWriteLatency=lunWriteLatency, diskType=diskType, initiatorGroupCreateCompleted=initiatorGroupCreateCompleted, poolDataWriteIops=poolDataWriteIops, snapshotRollbackFailed=snapshotRollbackFailed, snapshotCreatedSuccessfully=snapshotCreatedSuccessfully, tegileCompliances=tegileCompliances, diskSizeLow=diskSizeLow, controllerUp=controllerUp, controllerTimeDrift=controllerTimeDrift, smisServiceStartFailed=smisServiceStartFailed, lunIndex=lunIndex, snapshotDeletedSuccessfully=snapshotDeletedSuccessfully, fcTargetStatus=fcTargetStatus, vmwareNFSDatastoreESXName=vmwareNFSDatastoreESXName, replicationResumed=replicationResumed, iscsiTargetWriteLatency=iscsiTargetWriteLatency, fcInitiatorGroup=fcInitiatorGroup, shareDeletionFailed=shareDeletionFailed, projectCreatedSuccessfully=projectCreatedSuccessfully, poolDataWriteMbps=poolDataWriteMbps, shareQuotaHigh=shareQuotaHigh, diskRandomIOCount=diskRandomIOCount, notificationTime=notificationTime, iscsiAvgWriteLatency=iscsiAvgWriteLatency, sensorFailureEvent=sensorFailureEvent, snmpServiceStopped=snmpServiceStopped, lunSnapshotSizeLow=lunSnapshotSizeLow, iscsiInitiatorCreateCompleted=iscsiInitiatorCreateCompleted, poolDataWriteLatency=poolDataWriteLatency, projectTable=projectTable, shareNFSWriteLatency=shareNFSWriteLatency, poolAvailableMetaToDataRatioBelowThresholdWarning=poolAvailableMetaToDataRatioBelowThresholdWarning, targetGroupCreateCompleted=targetGroupCreateCompleted, diskPoolName=diskPoolName, upgradeCompleted=upgradeCompleted, projectQuotaSizeLow=projectQuotaSizeLow, poolReadCacheWriteMbps=poolReadCacheWriteMbps, diskChassisIdx=diskChassisIdx, haResourceGroupTakeBackCompleted=haResourceGroupTakeBackCompleted, basicCompliance=basicCompliance, projectQuotaSizeHigh=projectQuotaSizeHigh, iscsiTargetModifyCompleted=iscsiTargetModifyCompleted, netbiosSocketFailure=netbiosSocketFailure, deleteFolderCompleted=deleteFolderCompleted, poolUpgraded=poolUpgraded, poolTotalWriteIops=poolTotalWriteIops, shareNFSWriteIops=shareNFSWriteIops, shareSnapshotSizeHigh=shareSnapshotSizeHigh, iscsiTotalReadMbps=iscsiTotalReadMbps, vmwareNFSDatastoresAvgReadLatency=vmwareNFSDatastoresAvgReadLatency, projectCreatedWithNonOptimalBlockSize=projectCreatedWithNonOptimalBlockSize, poolUsedSizeHigh=poolUsedSizeHigh, notificationSensorNumber=notificationSensorNumber, fcTargetResetHbaPortCompleted=fcTargetResetHbaPortCompleted, vmwareNFSDatastoresTotalReadIops=vmwareNFSDatastoresTotalReadIops, diagnosticDataUploadingFailed=diagnosticDataUploadingFailed, ipmiTemperature=ipmiTemperature, diskIOCount=diskIOCount, upgradeFailed=upgradeFailed, haControllerA_Name=haControllerA_Name, cpuInterrupts=cpuInterrupts, volumeModifyCompleted=volumeModifyCompleted, poolExpanded=poolExpanded, testNotification=testNotification, vmwareNFSDatastoresAvgWriteLatency=vmwareNFSDatastoresAvgWriteLatency, diskCount=diskCount, fcTargets=fcTargets, poolDataSizeHigh=poolDataSizeHigh, haResourcesTable=haResourcesTable, lunProtocol=lunProtocol, nicTable=nicTable, nvdimmFailDeviceError=nvdimmFailDeviceError, shareDedupEnabled=shareDedupEnabled, haControllerB_Uptime=haControllerB_Uptime, alertsCleanupCompleted=alertsCleanupCompleted, haResourceActiveNode=haResourceActiveNode, poolQuotaExceedThresholdWarning=poolQuotaExceedThresholdWarning, haResourceGroup=haResourceGroup, cacheSSDReads=cacheSSDReads, vmwareNFSDatastoreIndex=vmwareNFSDatastoreIndex, fcAvgReadLatency=fcAvgReadLatency, notificationComponentName=notificationComponentName, nicState=nicState, vmwareNFSDatastoreVMName=vmwareNFSDatastoreVMName, iscsiTargetIndex=iscsiTargetIndex, volumeExceedsThresholdWarning=volumeExceedsThresholdWarning, cpuTotalUsage=cpuTotalUsage, nfsTotalReadIops=nfsTotalReadIops, poolDeleted=poolDeleted, replicationAborted=replicationAborted, poolUnusedReservedSizeLow=poolUnusedReservedSizeLow, poolAvgWriteLatency=poolAvgWriteLatency, iscsiTotalWriteMbps=iscsiTotalWriteMbps, notificationEventCode=notificationEventCode, diskDataReadIops=diskDataReadIops, cifsAvgReadLatency=cifsAvgReadLatency, lunDataSizeLow=lunDataSizeLow, fcInitiatorCreateCompleted=fcInitiatorCreateCompleted, targetGroupMemberAdded=targetGroupMemberAdded, tegile=tegile, upgradeDownloadCompleted=upgradeDownloadCompleted, upgradeDownloadFailed=upgradeDownloadFailed, fcInitiatorsTable=fcInitiatorsTable, lunReadIops=lunReadIops, iscsiTargetReadIops=iscsiTargetReadIops, iscsiTargetAuth=iscsiTargetAuth, lunReservedSizeHigh=lunReservedSizeHigh, projectThresholdExceedWarning=projectThresholdExceedWarning, shareExceedThresholdWarning=shareExceedThresholdWarning, projectTotalSaving=projectTotalSaving, shareIndex=shareIndex, notifications=notifications, volumeCreatedSuccessfully=volumeCreatedSuccessfully, poolReadCacheWriteLatency=poolReadCacheWriteLatency, PYSNMP_MODULE_ID=tegile, fcTargetWriteMbps=fcTargetWriteMbps, snapshotRollbackCompleted=snapshotRollbackCompleted, lunGUID=lunGUID, poolTotalReadMbps=poolTotalReadMbps, fcTargetName=fcTargetName, projectUnusedReservedSizeHigh=projectUnusedReservedSizeHigh, diskTotalWriteIops=diskTotalWriteIops, intelliFlashSoftwareDown=intelliFlashSoftwareDown, iscsiTargetWriteIops=iscsiTargetWriteIops, shareCIFSReadLatency=shareCIFSReadLatency, lunDedupEnabled=lunDedupEnabled, poolIndex=poolIndex, ipmiCurrent=ipmiCurrent, tdpsUpgradeTimeout=tdpsUpgradeTimeout, shareCIFSReadIops=shareCIFSReadIops, poolMetaWriteMbps=poolMetaWriteMbps, shareNFSReadLatency=shareNFSReadLatency, poolReadCacheWriteIops=poolReadCacheWriteIops, ipmiThreshold=ipmiThreshold, globalStatistics=globalStatistics, lunDataSizeHigh=lunDataSizeHigh, tdpsUpgradeDownloadCompleted=tdpsUpgradeDownloadCompleted, controllerDown=controllerDown, shareEntry=shareEntry, currentObjectGroup=currentObjectGroup, iscsiProperties=iscsiProperties, projectFreeSizeLow=projectFreeSizeLow, vmwareNFSDatastores=vmwareNFSDatastores, fcTargetGroup=fcTargetGroup, projectPoolName=projectPoolName, networkTotalReceiveMbps=networkTotalReceiveMbps, poolReadCacheReadLatency=poolReadCacheReadLatency, projectSnapshotSizeLow=projectSnapshotSizeLow, ntpServerTimeDrift=ntpServerTimeDrift, haControllerB_IPAddr=haControllerB_IPAddr, vmwareNFSDatastoresTotalReadMbps=vmwareNFSDatastoresTotalReadMbps, haControllerB_SoftwareVersion=haControllerB_SoftwareVersion, iscsiTargetEntry=iscsiTargetEntry, replicationTargetDeleted=replicationTargetDeleted, lunWriteMbps=lunWriteMbps, shareQuotaFinished=shareQuotaFinished, iscsiTargets=iscsiTargets, cacheTotalReadMbps=cacheTotalReadMbps, nfsTotalWriteMbps=nfsTotalWriteMbps)
mibBuilder.exportSymbols("TEGILE-MIB", upgradeDownloadStarted=upgradeDownloadStarted, nicGroup=nicGroup, notificationReadingTriggerValue=notificationReadingTriggerValue, fcTotalWriteIops=fcTotalWriteIops, shareNFSReadMbps=shareNFSReadMbps, poolWriteCacheWriteIops=poolWriteCacheWriteIops, projectPostCompressionDataSizeHigh=projectPostCompressionDataSizeHigh, lunCompressedRatio=lunCompressedRatio, diskTotalWriteMbps=diskTotalWriteMbps, initiatorGroupMemberRemoved=initiatorGroupMemberRemoved, projectSnapshotSizeHigh=projectSnapshotSizeHigh, poolImported=poolImported, projectDeletionFailed=projectDeletionFailed, notificationThresholdTriggerValue=notificationThresholdTriggerValue, cifsAvgWriteLatency=cifsAvgWriteLatency, nfsAvgWriteLatency=nfsAvgWriteLatency, shareTable=shareTable, networkIpmpMemberInterfaceAdded=networkIpmpMemberInterfaceAdded, diskAlias=diskAlias, lunSnapshotSizeHigh=lunSnapshotSizeHigh, diskIndex=diskIndex, upgradeCantProcessFilesManually=upgradeCantProcessFilesManually, shareDataSizeLow=shareDataSizeLow, diskTotalReadIops=diskTotalReadIops, networkIpmpGroupUp=networkIpmpGroupUp, poolUsedSizeLow=poolUsedSizeLow, vmwareNFSDatastoreWriteMbps=vmwareNFSDatastoreWriteMbps, nicReceiveMbps=nicReceiveMbps, nvdimmFailSoftError=nvdimmFailSoftError, projectQuotaFinished=projectQuotaFinished, nicTransmitMbps=nicTransmitMbps, fcTargetWriteLatency=fcTargetWriteLatency, iscsiTargetsTable=iscsiTargetsTable, notificationReadingUnit=notificationReadingUnit, notificationProps=notificationProps, diskIsOnline=diskIsOnline, shareName=shareName, poolDataSizeLow=poolDataSizeLow, iscsiTargetName=iscsiTargetName, smisServiceStarted=smisServiceStarted, haControllerA_Uptime=haControllerA_Uptime, poolDataReadMbps=poolDataReadMbps, shareNFSReadIops=shareNFSReadIops, adServerTimeDrift=adServerTimeDrift, nfsTotalWriteIops=nfsTotalWriteIops, tegileGroups=tegileGroups, iscsiInitiatorModifyCompleted=iscsiInitiatorModifyCompleted, poolPostCompressionDataSizeHigh=poolPostCompressionDataSizeHigh, iscsiInitiators=iscsiInitiators, poolHealth=poolHealth, replicationPaused=replicationPaused, networkTotalTransmitMbps=networkTotalTransmitMbps, iscsiTargetGroup=iscsiTargetGroup, iscsiImproperTargetGroup=iscsiImproperTargetGroup, vmwareNFSDatastoreReadIops=vmwareNFSDatastoreReadIops, fcInitiatorName=fcInitiatorName, projectFreeSizeHigh=projectFreeSizeHigh, poolExported=poolExported, lunSizeLow=lunSizeLow, projectShareCount=projectShareCount, iscsiTargetAlias=iscsiTargetAlias, ipmiOther=ipmiOther, lunReadMbps=lunReadMbps, sharePoolName=sharePoolName, shareCIFSWriteMbps=shareCIFSWriteMbps, poolTotalSaving=poolTotalSaving, projectModified=projectModified, fcTargetReadMbps=fcTargetReadMbps, haResourceGroupTakeOverCompleted=haResourceGroupTakeOverCompleted, snmpServiceStarted=snmpServiceStarted, haResourceName=haResourceName, currentNotificationGroup=currentNotificationGroup, smisServiceStopped=smisServiceStopped, haControllerB_Name=haControllerB_Name, poolMetaWriteLatency=poolMetaWriteLatency, cifsTotalReadIops=cifsTotalReadIops, notificationDescription=notificationDescription, fcTargetEntry=fcTargetEntry, poolPostDedupDataSizeLow=poolPostDedupDataSizeLow, poolMetaWriteIops=poolMetaWriteIops, webdocsUpgradeCompleted=webdocsUpgradeCompleted, diskDataReadMbps=diskDataReadMbps, poolFreeSizeLow=poolFreeSizeLow, iscsiInitiatorEntry=iscsiInitiatorEntry, snapshotCloneCompleted=snapshotCloneCompleted, poolReadCacheReadIops=poolReadCacheReadIops, projectShares=projectShares, notificationSensorAction=notificationSensorAction, networkInterfaceDown=networkInterfaceDown, projectDeleted=projectDeleted, fcPortOffline=fcPortOffline, projectCompressionEnabled=projectCompressionEnabled, replicationSourceRegistered=replicationSourceRegistered, webdocsUpgradeDownloadFailed=webdocsUpgradeDownloadFailed, diskGoneOffline=diskGoneOffline, haResourceStatus=haResourceStatus, poolTotalWriteMbps=poolTotalWriteMbps, userLoginFailed=userLoginFailed, haResourceIndex=haResourceIndex, poolPostDedupDataSizeHigh=poolPostDedupDataSizeHigh, volumeCreatedWithNonOptimalBlockSize=volumeCreatedWithNonOptimalBlockSize, cacheTotalReadIops=cacheTotalReadIops, nfsAvgReadLatency=nfsAvgReadLatency, projectLUNs=projectLUNs, iscsiInitiatorDeleteCompleted=iscsiInitiatorDeleteCompleted, poolDegraded=poolDegraded, vmwareNFSDatastoresTable=vmwareNFSDatastoresTable, fcAvgWriteLatency=fcAvgWriteLatency, poolWriteCacheWriteMbps=poolWriteCacheWriteMbps, iscsiTargetGroupError=iscsiTargetGroupError, shareCreatedSuccessfully=shareCreatedSuccessfully, maintenanceModeEnabled=maintenanceModeEnabled, unknownSensorEvent=unknownSensorEvent, targetGroupMemberRemoved=targetGroupMemberRemoved, spareDiskReplaced=spareDiskReplaced, initiatorGroupMemberAdded=initiatorGroupMemberAdded, fcTargetReadLatency=fcTargetReadLatency, haResources=haResources, diskAvgWriteLatency=diskAvgWriteLatency, iscsiTargetError=iscsiTargetError, tegileConformance=tegileConformance, shareCIFSWriteLatency=shareCIFSWriteLatency, poolCreated=poolCreated, fcTargetsTable=fcTargetsTable, shareSnapshotSizeLow=shareSnapshotSizeLow, iscsiTargetDeleteCompleted=iscsiTargetDeleteCompleted, tdpsUpgradeDownloadStarted=tdpsUpgradeDownloadStarted, poolEntry=poolEntry, shareReservedSizeLow=shareReservedSizeLow, notificationTargetEntityName=notificationTargetEntityName, disks=disks, poolMetaReadLatency=poolMetaReadLatency, poolCount=poolCount, vmwareNFSDatastoreDeleted=vmwareNFSDatastoreDeleted, poolMetaReadIops=poolMetaReadIops, fcInitiators=fcInitiators, poolDataReadLatency=poolDataReadLatency, ipmiFan=ipmiFan, diskDataWriteIops=diskDataWriteIops, lunCompressionEnabled=lunCompressionEnabled, tdpsUpgradeDownloadFailed=tdpsUpgradeDownloadFailed, shareMountPoint=shareMountPoint, diskSequentialIOCount=diskSequentialIOCount, lunBlockSize=lunBlockSize, iscsiInitiatorsTable=iscsiInitiatorsTable, poolState=poolState, intelliFlashSoftwareUp=intelliFlashSoftwareUp, volumeQuotaFinished=volumeQuotaFinished, nicEntry=nicEntry, fcTargetResetHbaPortFailed=fcTargetResetHbaPortFailed, poolDataReadIops=poolDataReadIops, vmwareNFSDatastoreEntry=vmwareNFSDatastoreEntry, smisServiceStopFailed=smisServiceStopFailed, volumeDeleteFailed=volumeDeleteFailed, webdocsUpgradeDownloadStarted=webdocsUpgradeDownloadStarted, vmwareNFSDatastoresTotalWriteIops=vmwareNFSDatastoresTotalWriteIops, fcTargetIndex=fcTargetIndex, controllerHardwareModel=controllerHardwareModel, projectUnusedReservedSizeLow=projectUnusedReservedSizeLow, lunEntry=lunEntry, poolQuotaFinished=poolQuotaFinished, lunReadLatency=lunReadLatency, iscsiTargetWriteMbps=iscsiTargetWriteMbps, lunWriteIops=lunWriteIops, poolReadCacheReadMbps=poolReadCacheReadMbps, poolProjectCount=poolProjectCount, snmpAgentVersion=snmpAgentVersion, haControllerA_SoftwareVersion=haControllerA_SoftwareVersion, fcTargetWriteIops=fcTargetWriteIops, notificationObjects=notificationObjects, initiatorGroupDeleteCompleted=initiatorGroupDeleteCompleted, memoryFailure=memoryFailure, iscsiTargetCreateCompleted=iscsiTargetCreateCompleted, projectDedupEnabled=projectDedupEnabled, snapshotDeleteFailed=snapshotDeleteFailed, cifsTotalWriteIops=cifsTotalWriteIops, projectName=projectName, networkIpmpMemberInterfaceRemoved=networkIpmpMemberInterfaceRemoved, lunInitiatorGroup=lunInitiatorGroup, nicMTU=nicMTU, fcProperties=fcProperties, haResourceEntry=haResourceEntry, diskDataWriteMbps=diskDataWriteMbps, shareNFSEnabled=shareNFSEnabled, vmwareNFSDatastoreWriteLatency=vmwareNFSDatastoreWriteLatency, cacheRAMReads=cacheRAMReads, poolTotalReadIops=poolTotalReadIops, diagnosticDataUploaded=diagnosticDataUploaded, lunSizeHigh=lunSizeHigh, vmwareNFSDatastoreCreated=vmwareNFSDatastoreCreated, shareCompressedRatio=shareCompressedRatio, targetGroupDeleteCompleted=targetGroupDeleteCompleted, cifsTotalReadMbps=cifsTotalReadMbps, lunProjectName=lunProjectName, poolMetaDataQuotaExceedThresholdWarning=poolMetaDataQuotaExceedThresholdWarning, networkInterfaceUp=networkInterfaceUp, poolName=poolName, shareNFSWriteMbps=shareNFSWriteMbps, lunName=lunName, lunPoolName=lunPoolName, webdocsUpgradeFailed=webdocsUpgradeFailed, haResourceDescription=haResourceDescription, nvdimmFailInitializationError=nvdimmFailInitializationError, cacheTotalWriteMbps=cacheTotalWriteMbps, projectDataSizeHigh=projectDataSizeHigh, iscsiTargetReadMbps=iscsiTargetReadMbps, pools=pools, projectIndex=projectIndex, iscsiTargetReadLatency=iscsiTargetReadLatency, fcTotalReadIops=fcTotalReadIops, diskSlowIo=diskSlowIo, diskTotalReadMbps=diskTotalReadMbps, notificationSensorSuspect=notificationSensorSuspect, poolSizeHigh=poolSizeHigh, ipmiPowerSupply=ipmiPowerSupply)
