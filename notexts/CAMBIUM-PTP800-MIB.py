#
# PySNMP MIB module CAMBIUM-PTP800-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/cambium/CAMBIUM-PTP800-V1-MIB
# Produced by pysmi-1.1.12 at Mon Jul  1 09:17:09 2024
# On host fv-az735-465 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, ObjectIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, iso, enterprises, NotificationType, Counter64, Bits, ModuleIdentity, IpAddress, Integer32, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ObjectIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "iso", "enterprises", "NotificationType", "Counter64", "Bits", "ModuleIdentity", "IpAddress", "Integer32", "MibIdentifier", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cambium = MibIdentifier((1, 3, 6, 1, 4, 1, 17713))
ptp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 1))
ptmp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 2))
ptp800 = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8))
bridge = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 4))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 5))
ethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 6))
licence = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 8))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 9))
phyControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 10))
phyStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 12))
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 13))
smtp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 15))
snmpControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 16))
sntp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 17))
reset = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 18))
versions = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 19))
pubStats = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 20))
encryption = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 22))
rfu = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 23))
radioLicense = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 24))
protectionConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 25))
protectionStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 26))
protectionStats = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 27))
aAAControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 29))
syslogControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 28))
supplementary = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 96))
ptpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 99))
ptpTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0))
ethernetPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 8, 6, 15), )
if mibBuilder.loadTexts: ethernetPriorityTable.setStatus('mandatory')
ethernetPriorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 8, 6, 15, 1), ).setIndexNames((0, "CAMBIUM-PTP800-MIB", "ethernetPriorityTableIndex"))
if mibBuilder.loadTexts: ethernetPriorityTableEntry.setStatus('mandatory')
l2CPPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 8, 6, 32), )
if mibBuilder.loadTexts: l2CPPriorityTable.setStatus('mandatory')
l2CPPriorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 8, 6, 32, 1), ).setIndexNames((0, "CAMBIUM-PTP800-MIB", "l2CPPriorityTableIndex"))
if mibBuilder.loadTexts: l2CPPriorityTableEntry.setStatus('mandatory')
iPDSCPPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 8, 6, 38), )
if mibBuilder.loadTexts: iPDSCPPriorityTable.setStatus('mandatory')
iPDSCPPriorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 8, 6, 38, 1), ).setIndexNames((0, "CAMBIUM-PTP800-MIB", "iPDSCPPriorityTableIndex"))
if mibBuilder.loadTexts: iPDSCPPriorityTableEntry.setStatus('mandatory')
mPLSTCPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 8, 6, 40), )
if mibBuilder.loadTexts: mPLSTCPriorityTable.setStatus('mandatory')
mPLSTCPriorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 8, 6, 40, 1), ).setIndexNames((0, "CAMBIUM-PTP800-MIB", "mPLSTCPriorityTableIndex"))
if mibBuilder.loadTexts: mPLSTCPriorityTableEntry.setStatus('mandatory')
sNMPTrapTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 8, 16, 10), )
if mibBuilder.loadTexts: sNMPTrapTable.setStatus('mandatory')
sNMPTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 8, 16, 10, 1), ).setIndexNames((0, "CAMBIUM-PTP800-MIB", "sNMPTrapTableIndex"))
if mibBuilder.loadTexts: sNMPTrapTableEntry.setStatus('mandatory')
sNTPServerTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 8, 17, 15), )
if mibBuilder.loadTexts: sNTPServerTable.setStatus('mandatory')
sNTPServerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 8, 17, 15, 1), ).setIndexNames((0, "CAMBIUM-PTP800-MIB", "sNTPServerTableIndex"))
if mibBuilder.loadTexts: sNTPServerTableEntry.setStatus('mandatory')
userTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 8, 29, 2), )
if mibBuilder.loadTexts: userTable.setStatus('mandatory')
userTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 8, 29, 2, 1), ).setIndexNames((0, "CAMBIUM-PTP800-MIB", "userTableIndex"))
if mibBuilder.loadTexts: userTableEntry.setStatus('mandatory')
localPacketFiltering = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localPacketFiltering.setStatus('mandatory')
iPv4Address = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4Address.setStatus('mandatory')
subnetMask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask.setStatus('mandatory')
gatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayIPAddress.setStatus('mandatory')
maximumTransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 370))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumTransmitPower.setStatus('mandatory')
antennaGain = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 610))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: antennaGain.setStatus('mandatory')
rFFeederLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFFeederLoss.setStatus('mandatory')
remoteIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteIPAddress.setStatus('mandatory')
remoteMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteMACAddress.setStatus('mandatory')
enableTransmission = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("muted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableTransmission.setStatus('mandatory')
aTPCEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aTPCEnable.setStatus('mandatory')
iFCableLength = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 19000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iFCableLength.setStatus('mandatory')
linkName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkName.setStatus('mandatory')
siteName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteName.setStatus('mandatory')
diverseAntennaGain = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 610))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diverseAntennaGain.setStatus('mandatory')
diverseRfFeederLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diverseRfFeederLoss.setStatus('mandatory')
iPv6Address = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv6Address.setStatus('mandatory')
iPVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ipv4", 0), ("ipv6", 1), ("dual-ipv4-and-ipv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPVersion.setStatus('mandatory')
iPv6AutoConfiguredLinkLocalAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPv6AutoConfiguredLinkLocalAddress.setStatus('mandatory')
iPv6PrefixLength = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv6PrefixLength.setStatus('mandatory')
iPv6GatewayAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv6GatewayAddress.setStatus('mandatory')
remoteInternetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("unknown-6", 5), ("unknown-7", 6), ("unknown-8", 7), ("unknown-9", 8), ("unknown-10", 9), ("unknown-11", 10), ("unknown-12", 11), ("unknown-13", 12), ("unknown-14", 13), ("unknown-15", 14), ("unknown-16", 15), ("dns", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteInternetAddressType.setStatus('mandatory')
remoteInternetAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 27), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteInternetAddress.setStatus('mandatory')
dataPortCopperAutoNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortCopperAutoNegotiation.setStatus('mandatory')
dataPortCopperAutoNegAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 2), Bits().clone(namedValues=NamedValues(("neg-100-mbps-full-duplex", 6), ("neg-1000-mbps-full-duplex", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortCopperAutoNegAdvertisement.setStatus('mandatory')
dataPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("down", 0), ("copper-link-up", 1), ("fiber-link-up", 2), ("fiber-y-inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortStatus.setStatus('mandatory')
dataPortSpeedAndDuplex = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("speed1000mbpsfullduplex", 0), ("speed100mbpsfullduplex", 1), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortSpeedAndDuplex.setStatus('mandatory')
dataPortWirelessDownAlert = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortWirelessDownAlert.setStatus('mandatory')
useVLANForManagementInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("no-vlan-tagging", 0), ("ieee-8021q-tagged-c-tag-type-8100", 1), ("ieee-8021ad-tagged-s-tag-or-b-tag-type-88a8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useVLANForManagementInterfaces.setStatus('mandatory')
vLANManagementPriority = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLANManagementPriority.setStatus('mandatory')
vLANManagementVIDValidation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLANManagementVIDValidation.setStatus('mandatory')
vLANManagementVID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLANManagementVID.setStatus('mandatory')
ethernetPriorityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPriorityTableNumber.setStatus('mandatory')
managementPortAutoNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementPortAutoNegotiation.setStatus('mandatory')
managementPortAutoNegAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 17), Bits().clone(namedValues=NamedValues(("neg-10-mbps-full-duplex", 6), ("neg-100-mbps-full-duplex", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementPortAutoNegAdvertisement.setStatus('mandatory')
managementPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("copper-link-up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortStatus.setStatus('mandatory')
managementPortSpeedAndDuplex = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("speed100mbpsfullduplex", 1), ("speed10mbpsfullduplex", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortSpeedAndDuplex.setStatus('mandatory')
managementPortWirelessDownAlert = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementPortWirelessDownAlert.setStatus('mandatory')
managementMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("out-of-band-local", 0), ("out-of-band", 1), ("in-band", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementMode.setStatus('mandatory')
managementCommittedInformationRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("kbps-200", 0), ("kbps-300", 1), ("kbps-400", 2), ("kbps-500", 3), ("kbps-600", 4), ("kbps-700", 5), ("kbps-800", 6), ("kbps-900", 7), ("kbps-1000", 8), ("kbps-1100", 9), ("kbps-1200", 10), ("kbps-1300", 11), ("kbps-1400", 12), ("kbps-1500", 13), ("kbps-1600", 14), ("kbps-1700", 15), ("kbps-1800", 16), ("kbps-1900", 17), ("kbps-2000", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementCommittedInformationRate.setStatus('mandatory')
dataPortPauseFrames = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tunnel", 0), ("discard", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortPauseFrames.setStatus('mandatory')
transmitCapacityLimit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitCapacityLimit.setStatus('mandatory')
transmitCapacityLimitDetail = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("limited-due-to-absence-of-license-key", 0), ("running-at-the-capacity-limit", 1), ("running-at-unlimited-capacity", 2), ("restricted-due-to-remote-ethernet-speed", 3), ("limited-due-to-development-override", 4), ("unlimited-due-to-development-override", 5), ("unlimited-capacity-trial-period", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitCapacityLimitDetail.setStatus('mandatory')
dataPortEthernetMediaTypeToUse = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("auto-with-fiber-preference", 0), ("force-copper", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortEthernetMediaTypeToUse.setStatus('mandatory')
dataPortCopperForcedConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("force-100-mbps-full-duplex", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortCopperForcedConfiguration.setStatus('mandatory')
managementPortForcedConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("force-100-mbps-full-duplex", 0), ("force-10-mbps-full-duplex", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortForcedConfiguration.setStatus('mandatory')
l2CPPriorityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2CPPriorityTableNumber.setStatus('mandatory')
unknownNetworkPriorityQueueMapping = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unknownNetworkPriorityQueueMapping.setStatus('mandatory')
dSCPManagementPriority = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dSCPManagementPriority.setStatus('mandatory')
qOSPriorityScheme = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ethernet", 0), ("ipmpls", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qOSPriorityScheme.setStatus('mandatory')
iPDSCPPriorityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPDSCPPriorityTableNumber.setStatus('mandatory')
mPLSTCPriorityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mPLSTCPriorityTableNumber.setStatus('mandatory')
ethernetPriorityQueueMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetPriorityQueueMapping.setStatus('mandatory')
ethernetPriorityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("p0", 1), ("p1", 2), ("p2", 3), ("p3", 4), ("p4", 5), ("p5", 6), ("p6", 7), ("p7", 8), ("untagged", 9))))
if mibBuilder.loadTexts: ethernetPriorityTableIndex.setStatus('mandatory')
l2CPPriorityQueueMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 32, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2CPPriorityQueueMapping.setStatus('mandatory')
l2CPPriorityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 32, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bridge", 1), ("garpmrp", 2), ("cfm", 3), ("r-aps", 4), ("eaps", 5))))
if mibBuilder.loadTexts: l2CPPriorityTableIndex.setStatus('mandatory')
iPDSCPPriorityQueueMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 38, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPDSCPPriorityQueueMapping.setStatus('mandatory')
iPDSCPPriorityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 38, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: iPDSCPPriorityTableIndex.setStatus('mandatory')
mPLSTCPriorityQueueMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 40, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mPLSTCPriorityQueueMapping.setStatus('mandatory')
mPLSTCPriorityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 40, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: mPLSTCPriorityTableIndex.setStatus('mandatory')
productVariant = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("ptp-xx400-full", 0), ("ptp-xx400-deprecated-1", 1), ("ptp-xx400-deprecated-2", 2), ("ptp-xx400-lite", 3), ("spare-1", 4), ("ptp-xx300", 5), ("spare-2", 6), ("spare-3", 7), ("ptp-xx500-full-deprecated", 8), ("ptp-xx500-lite-deprecated", 9), ("ptp-xx500", 10), ("ptp-xx600-lite", 11), ("ptp-xx600-full", 12), ("spare-5", 13), ("spare-6", 14), ("ptp-800", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVariant.setStatus('mandatory')
productName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productName.setStatus('mandatory')
ethernetFiberSupport = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetFiberSupport.setStatus('mandatory')
transmitCapacity = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("rate-10-mbps", 0), ("rate-20-mbps", 1), ("rate-30-mbps", 2), ("rate-40-mbps", 3), ("rate-50-mbps", 4), ("rate-100-mbps", 5), ("rate-150-mbps", 6), ("rate-200-mbps", 7), ("rate-300-mbps", 8), ("rate-unlimited", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitCapacity.setStatus('mandatory')
encryptionAlgorithmsAvail = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("aes-rijndael", 1), ("aes-256-bit-rijndael", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: encryptionAlgorithmsAvail.setStatus('mandatory')
securityLevel = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 8, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityLevel.setStatus('mandatory')
linkNameMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("link-name-mismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNameMismatch.setStatus('mandatory')
alignmentMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("aligning", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alignmentMode.setStatus('mandatory')
tFTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPServerIPAddress.setStatus('mandatory')
tFTPServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPServerPortNumber.setStatus('mandatory')
tFTPSoftwareUpgradeFileName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeFileName.setStatus('mandatory')
tFTPStartSoftwareUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPStartSoftwareUpgrade.setStatus('mandatory')
tFTPSoftwareUpgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 0), ("upload-in-progress", 1), ("upload-successful-programming-flash", 2), ("upgrade-successful-reboot-to-run-the-new-software-image", 3), ("upgrade-failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatus.setStatus('mandatory')
tFTPSoftwareUpgradeStatusText = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusText.setStatus('mandatory')
tFTPSoftwareUpgradeStatusAdditionalText = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusAdditionalText.setStatus('mandatory')
hTTPAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPAccessEnabled.setStatus('mandatory')
telnetAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetAccessEnabled.setStatus('mandatory')
hTTPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPPortNumber.setStatus('mandatory')
hTTPSPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPSPortNumber.setStatus('mandatory')
telnetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortNumber.setStatus('mandatory')
hTTPSAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hTTPSAccessEnabled.setStatus('mandatory')
tFTPServerInternetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("unknown-6", 5), ("unknown-7", 6), ("unknown-8", 7), ("unknown-9", 8), ("unknown-10", 9), ("unknown-11", 10), ("unknown-12", 11), ("unknown-13", 12), ("unknown-14", 13), ("unknown-15", 14), ("unknown-16", 15), ("dns", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPServerInternetAddressType.setStatus('mandatory')
tFTPServerInternetAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 19), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPServerInternetAddress.setStatus('mandatory')
remoteMaximumTransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 370))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteMaximumTransmitPower.setStatus('mandatory')
minModulation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("mod-qpsk", 0), ("mod-8psk", 1), ("mod-16qam", 2), ("mod-32qam", 3), ("mod-64qam", 4), ("mod-128qam", 5), ("mod-256qam", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: minModulation.setStatus('mandatory')
minCodeRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: minCodeRate.setStatus('mandatory')
maxModulation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("mod-qpsk", 0), ("mod-8psk", 1), ("mod-16qam", 2), ("mod-32qam", 3), ("mod-64qam", 4), ("mod-128qam", 5), ("mod-256qam", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxModulation.setStatus('mandatory')
maxCodeRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 10, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxCodeRate.setStatus('mandatory')
receivePower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receivePower.setStatus('mandatory')
vectorError = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vectorError.setStatus('mandatory')
transmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitPower.setStatus('mandatory')
linkLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 1800))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkLoss.setStatus('mandatory')
receiveModulation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("mod-qpsk", 0), ("mod-8psk", 1), ("mod-16qam", 2), ("mod-32qam", 3), ("mod-64qam", 4), ("mod-128qam", 5), ("mod-256qam", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveModulation.setStatus('mandatory')
transmitModulation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("mod-qpsk", 0), ("mod-8psk", 1), ("mod-16qam", 2), ("mod-32qam", 3), ("mod-64qam", 4), ("mod-128qam", 5), ("mod-256qam", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitModulation.setStatus('mandatory')
receiveCodeRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveCodeRate.setStatus('mandatory')
transmitCodeRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitCodeRate.setStatus('mandatory')
unitOutOfCalibration = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("calibrated", 0), ("partial-calibration", 1), ("invalid-calibration", 2), ("bandwidth-variant-unsupported-pas-shutdown", 3), ("out-of-calibration-pas-shutdown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitOutOfCalibration.setStatus('mandatory')
encryptionEnabledMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("encryption-enabled-mismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: encryptionEnabledMismatch.setStatus('mandatory')
dataPortDisabledWarning = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("disabled-by-snmp-ifadminstatus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortDisabledWarning.setStatus('mandatory')
dataPortFiberStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("installed-fiber-not-licensed", 1), ("no-fiber-link-established-but-los-not-detected", 2), ("no-fiber-link-established-and-los-detected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortFiberStatus.setStatus('mandatory')
dataPortConfigurationMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-error", 0), ("mismatch-detected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortConfigurationMismatch.setStatus('mandatory')
softwareVersionRemoteCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("mismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersionRemoteCompatibility.setStatus('mandatory')
managementPortDisabledWarning = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("disabled-by-snmp-ifadminstatus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortDisabledWarning.setStatus('mandatory')
rFUStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("ok", 0), ("fault", 1), ("unknown-3", 2), ("in-reset", 3), ("download-in-progress", 4), ("incompatible-firmware-version", 5), ("incompatible-device", 6), ("ifi-card-attached", 7), ("no-response", 8), ("power-supply-fault", 9), ("power-supply-disabled", 10), ("switching-memory-banks", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUStatus.setStatus('mandatory')
managementPortConfigurationMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-error", 0), ("mismatch-detected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortConfigurationMismatch.setStatus('mandatory')
secureModeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("secure-mode-is-active", 0), ("secure-mode-is-not-configured", 1), ("secure-mode-is-configured-but-not-active", 2), ("secure-mode-is-not-supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureModeAlarm.setStatus('mandatory')
rFUPlatformCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("mismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUPlatformCompatibility.setStatus('mandatory')
rFUProtectionCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("mismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUProtectionCompatibility.setStatus('mandatory')
sMTPEmailAlert = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPEmailAlert.setStatus('mandatory')
sMTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 15, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPServerIPAddress.setStatus('mandatory')
sMTPServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPServerPortNumber.setStatus('mandatory')
sMTPSourceEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 15, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPSourceEmailAddress.setStatus('mandatory')
sMTPDestinationEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 15, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPDestinationEmailAddress.setStatus('mandatory')
sMTPEnabledMessages = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 15, 6), Bits().clone(namedValues=NamedValues(("protection-state", 3), ("enabled-diagnostic-alarms", 4), ("management-port-up-down", 5), ("data-port-up-down", 6), ("wireless-link-up-down", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPEnabledMessages.setStatus('mandatory')
sMTPServerInternetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 15, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("unknown-6", 5), ("unknown-7", 6), ("unknown-8", 7), ("unknown-9", 8), ("unknown-10", 9), ("unknown-11", 10), ("unknown-12", 11), ("unknown-13", 12), ("unknown-14", 13), ("unknown-15", 14), ("unknown-16", 15), ("dns", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sMTPServerInternetAddressType.setStatus('mandatory')
sMTPServerInternetAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 15, 8), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPServerInternetAddress.setStatus('mandatory')
sNMPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 16, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPPortNumber.setStatus('mandatory')
sNMPCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 16, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPCommunityString.setStatus('mandatory')
sNMPTrapVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 16, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("v1", 0), ("v2c", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapVersion.setStatus('mandatory')
sNMPEnabledTraps = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 16, 6), Bits().clone(namedValues=NamedValues(("protection-state", 1), ("authentication-failure", 2), ("enabled-diagnostic-alarms", 3), ("management-port-up-down", 4), ("data-port-up-down", 5), ("wireless-link-up-down", 6), ("cold-start", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPEnabledTraps.setStatus('mandatory')
enabledDiagnosticAlarms = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 16, 7), Bits().clone(namedValues=NamedValues(("data-port-configuration-mismatch", 0), ("unknown-7", 1), ("wireless-link-status", 2), ("sntp-sync", 3), ("encryption-enabled-mismatch", 4), ("unit-out-of-calibration", 5), ("link-name-mismatch", 6), ("alignment-mode", 7), ("syslog-disabled-warning", 8), ("management-port-status", 9), ("data-port-status", 10), ("rfu-status", 11), ("management-port-disabled-warning", 12), ("management-port-configuration-mismatch", 13), ("data-port-fiber-status", 14), ("data-port-disabled-warning", 15), ("software-version-mismatch", 18), ("syslog-client-disabled-warning", 19), ("rfu-power-button-pressed", 20), ("secure-mode", 21), ("syslog-local-wrapped", 22), ("syslog-local-nearly-full", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enabledDiagnosticAlarms.setStatus('mandatory')
enabledDiagnosticProtectionAlarms = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 16, 8), Bits().clone(namedValues=NamedValues(("end-wireless-receive-signal-status", 0), ("protection-interface-status", 1), ("management-port-ethernet-speed-status", 2), ("data-port-ethernet-speed-status", 3), ("licensed-transmit-capacity-status", 4), ("wireless-receive-signal-status", 5), ("protection-configuration-status", 6), ("protection-availability-status", 7), ("rx-diversity-availability-status", 13), ("rx-diversity-configuration-status", 14), ("rx-diversity-data-port-status", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enabledDiagnosticProtectionAlarms.setStatus('mandatory')
sNMPTrapTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 16, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPTrapTableNumber.setStatus('mandatory')
sNMPTrapTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 16, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: sNMPTrapTableIndex.setStatus('mandatory')
sNMPTrapIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 16, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapIPAddress.setStatus('mandatory')
sNMPTrapPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 16, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapPortNumber.setStatus('mandatory')
sNMPTrapInternetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 16, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("unknown-6", 5), ("unknown-7", 6), ("unknown-8", 7), ("unknown-9", 8), ("unknown-10", 9), ("unknown-11", 10), ("unknown-12", 11), ("unknown-13", 12), ("unknown-14", 13), ("unknown-15", 14), ("unknown-16", 15), ("dns", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPTrapInternetAddressType.setStatus('mandatory')
sNMPTrapInternetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 16, 10, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapInternetAddress.setStatus('mandatory')
sNMPTrapReceiverEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 16, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPTrapReceiverEnabled.setStatus('mandatory')
sNTPState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPState.setStatus('mandatory')
sNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 43200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPPollInterval.setStatus('mandatory')
sNTPSync = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-sync", 0), ("in-sync", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPSync.setStatus('mandatory')
sNTPLastSync = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPLastSync.setStatus('mandatory')
systemClock = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemClock.setStatus('mandatory')
timeZone = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50))).clone(namedValues=NamedValues(("gmt-minus-1200", 0), ("gmt-minus-1130", 1), ("gmt-minus-1100", 2), ("gmt-minus-1030", 3), ("gmt-minus-1000", 4), ("gmt-minus-0930", 5), ("gmt-minus-0900", 6), ("gmt-minus-0830", 7), ("gmt-minus-0800", 8), ("gmt-minus-0730", 9), ("gmt-minus-0700", 10), ("gmt-minus-0630", 11), ("gmt-minus-0600", 12), ("gmt-minus-0530", 13), ("gmt-minus-0500", 14), ("gmt-minus-0430", 15), ("gmt-minus-0400", 16), ("gmt-minus-0330", 17), ("gmt-minus-0300", 18), ("gmt-minus-0230", 19), ("gmt-minus-0200", 20), ("gmt-minus-0130", 21), ("gmt-minus-0100", 22), ("gmt-minus-0030", 23), ("gmt-zero", 24), ("gmt-plus-0030", 25), ("gmt-plus-0100", 26), ("gmt-plus-0130", 27), ("gmt-plus-0200", 28), ("gmt-plus-0230", 29), ("gmt-plus-0300", 30), ("gmt-plus-0330", 31), ("gmt-plus-0400", 32), ("gmt-plus-0430", 33), ("gmt-plus-0500", 34), ("gmt-plus-0530", 35), ("gmt-plus-0600", 36), ("gmt-plus-0630", 37), ("gmt-plus-0700", 38), ("gmt-plus-0730", 39), ("gmt-plus-0800", 40), ("gmt-plus-0830", 41), ("gmt-plus-0900", 42), ("gmt-plus-0930", 43), ("gmt-plus-1000", 44), ("gmt-plus-1030", 45), ("gmt-plus-1100", 46), ("gmt-plus-1130", 47), ("gmt-plus-1200", 48), ("gmt-plus-1230", 49), ("gmt-plus-1300", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZone.setStatus('mandatory')
daylightSaving = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daylightSaving.setStatus('mandatory')
sNTPPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("server-1", 0), ("server-2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPPrimaryServer.setStatus('mandatory')
sNTPPrimaryServerDeadTime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPPrimaryServerDeadTime.setStatus('mandatory')
sNTPServerRetries = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerRetries.setStatus('mandatory')
sNTPServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerTimeout.setStatus('mandatory')
sNTPServerTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPServerTableNumber.setStatus('mandatory')
sNTPServerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 17, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: sNTPServerTableIndex.setStatus('mandatory')
sNTPServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 17, 15, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerIPAddress.setStatus('mandatory')
sNTPServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 17, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerPortNumber.setStatus('mandatory')
sNTPServerResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 17, 15, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPServerResponse.setStatus('mandatory')
sNTPServerInternetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 17, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("unknown-6", 5), ("unknown-7", 6), ("unknown-8", 7), ("unknown-9", 8), ("unknown-10", 9), ("unknown-11", 10), ("unknown-12", 11), ("unknown-13", 12), ("unknown-14", 13), ("unknown-15", 14), ("unknown-16", 15), ("dns", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPServerInternetAddressType.setStatus('mandatory')
sNTPServerInternetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 17, 15, 1, 6), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerInternetAddress.setStatus('mandatory')
systemReset = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("running", 0), ("console-reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemReset.setStatus('mandatory')
softwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 19, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('mandatory')
hardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 19, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareVersion.setStatus('mandatory')
secondarySoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 19, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secondarySoftwareVersion.setStatus('mandatory')
bootVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 19, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootVersion.setStatus('mandatory')
receiveDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveDataRate.setStatus('mandatory')
transmitDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 20, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitDataRate.setStatus('mandatory')
aggregateDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 20, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregateDataRate.setStatus('mandatory')
wirelessLinkAvailability = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 20, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkAvailability.setStatus('mandatory')
wirelessLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 0), ("registering", 1), ("searching", 2), ("acquiring", 3), ("radar-cac", 4), ("initialising", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkStatus.setStatus('mandatory')
encryptionAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("aes-rijndael", 1), ("aes-256-bit-rijndael", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: encryptionAlgorithm.setStatus('mandatory')
rFURfBand = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 70000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURfBand.setStatus('mandatory')
rFUTxBandAboveRx = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxBandAboveRx.setStatus('mandatory')
rFUFreqSpacing = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUFreqSpacing.setStatus('mandatory')
rFUTxPowerMin = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxPowerMin.setStatus('mandatory')
rFUTxPowerMax = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(160, 370))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxPowerMax.setStatus('mandatory')
rFURxFreqMin = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5725000, 70000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURxFreqMin.setStatus('mandatory')
rFURxFreqMax = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5725000, 70000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURxFreqMax.setStatus('mandatory')
rFUTxFreqMin = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5725000, 70000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxFreqMin.setStatus('mandatory')
rFUTxFreqMax = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5725000, 70000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxFreqMax.setStatus('mandatory')
rFUSerial = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUSerial.setStatus('mandatory')
rFUActiveFirmwareBank = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUActiveFirmwareBank.setStatus('mandatory')
rFUVersionBank1 = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUVersionBank1.setStatus('mandatory')
rFUVersionBank2 = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUVersionBank2.setStatus('mandatory')
rFUType = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUType.setStatus('mandatory')
rFURxRFSynthLockAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("out-of-lock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURxRFSynthLockAlarm.setStatus('mandatory')
rFUTxRFSynthLockAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("out-of-lock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxRFSynthLockAlarm.setStatus('mandatory')
rFUTxPowerAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("tx-output-failed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxPowerAlarm.setStatus('mandatory')
rFUCommonIFSynthLockAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("out-of-lock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUCommonIFSynthLockAlarm.setStatus('mandatory')
rFUPowerAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("power-failed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUPowerAlarm.setStatus('mandatory')
rFULockoutAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("locked-out", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFULockoutAlarm.setStatus('mandatory')
rFUCableAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("if-cable-voltage-out-of-range", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUCableAlarm.setStatus('mandatory')
rFUCableAttenuationAdjustAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("if-cable-attenuator-adjusting", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUCableAttenuationAdjustAlarm.setStatus('mandatory')
rFUTxPowerDegradedAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("degraded", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxPowerDegradedAlarm.setStatus('mandatory')
rFURpsAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("rps-alarm-active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURpsAlarm.setStatus('mandatory')
rFUTxMuteStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("transmitting", 0), ("muted-by-user", 1), ("muted-due-to-configuration-error", 2), ("muted-due-to-rfu-fault", 3), ("muted-due-to-rfu-configuring", 4), ("muted-due-to-rfu-incompatible-with-cmu", 5), ("muted-due-to-inactive", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxMuteStatus.setStatus('mandatory')
rFUFanAssemblyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("partial-fan-failure", 1), ("total-fan-failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUFanAssemblyAlarm.setStatus('mandatory')
rFUHighTemperatureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("high-temperature", 1), ("very-high-temperature", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUHighTemperatureAlarm.setStatus('mandatory')
rFURFSwitchAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("fault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURFSwitchAlarm.setStatus('mandatory')
rFURxIFSynthLockAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("out-of-lock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURxIFSynthLockAlarm.setStatus('mandatory')
rFUTxIFSynthLockAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("out-of-lock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxIFSynthLockAlarm.setStatus('mandatory')
rFUPowerButtonPressed = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("irfu-power-button-was-pressed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUPowerButtonPressed.setStatus('mandatory')
rFUConnectedPlatform = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("odu-a", 1), ("odu-b", 2), ("irfu-hp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUConnectedPlatform.setStatus('mandatory')
rFUCommonRFSynthLockAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("out-of-lock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUCommonRFSynthLockAlarm.setStatus('mandatory')
rFUBranchingConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rfu-1plus0", 0), ("rfu-1plus0-mhsb-ready-equal", 1), ("rfu-1plus0-mhsb-ready-unequal", 2), ("rfu-1plus1-mhsb-equal", 3), ("rfu-1plus1-mhsb-unequal", 4), ("rfu-1plus1-tx-mhsb--rx-sd", 5), ("rfu-2plus0", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rFUBranchingConfiguration.setStatus('mandatory')
rFUTransceiverLocation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("left-trx-a", 0), ("right-trx-b", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rFUTransceiverLocation.setStatus('mandatory')
rFURfSwitchCableAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("fault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURfSwitchCableAlarm.setStatus('mandatory')
rFUReceiveBranchingUnitLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUReceiveBranchingUnitLoss.setStatus('mandatory')
rFUTransmitBranchingUnitLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTransmitBranchingUnitLoss.setStatus('mandatory')
radioLicenseIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseIdentifier.setStatus('mandatory')
radioLicenseBand = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("band-lower-6-ghz", 0), ("band-7-ghz", 1), ("band-8-ghz", 2), ("band-11-ghz", 3), ("band-13-ghz", 4), ("band-15-ghz", 5), ("band-18-ghz", 6), ("band-23-ghz", 7), ("band-26-ghz", 8), ("band-32-ghz", 9), ("band-38-ghz", 10), ("band-upper-6-ghz", 11), ("band-28-ghz", 12), ("band-42-ghz", 13), ("band-unsupported", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseBand.setStatus('mandatory')
radioLicenseRegion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("etsi", 0), ("fcc", 1), ("canada", 2), ("brazil", 3), ("ntia", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseRegion.setStatus('mandatory')
radioLicenseTxFreq = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5925000, 70000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseTxFreq.setStatus('mandatory')
radioLicenseRxFreq = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5925000, 70000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseRxFreq.setStatus('mandatory')
radioLicenseBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("bw-7-mhz", 0), ("bw-10-mhz", 1), ("bw-1375-mhz", 2), ("bw-14-mhz", 3), ("bw-20-mhz", 4), ("bw-275-mhz", 5), ("bw-28-mhz", 6), ("bw-30-mhz", 7), ("bw-40-mhz", 8), ("bw-50-mhz", 9), ("bw-55-mhz", 10), ("bw-56-mhz", 11), ("bw-80-mhz", 12), ("bw-25-mhz", 13), ("bw-60-mhz", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseBandwidth.setStatus('mandatory')
radioLicenseMaxEIRP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-300, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseMaxEIRP.setStatus('mandatory')
radioLicenseModulation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("mod-qpsk", 0), ("mod-8psk", 1), ("mod-16qam", 2), ("mod-32qam", 3), ("mod-64qam", 4), ("mod-128qam", 5), ("mod-256qam", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseModulation.setStatus('mandatory')
radioLicenseCodeRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseCodeRate.setStatus('mandatory')
radioLicenseIncompatibleAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("radio-license-incompatible-with-rfu", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseIncompatibleAlarm.setStatus('mandatory')
radioLicenseMinModulation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("mod-qpsk", 0), ("mod-8psk", 1), ("mod-16qam", 2), ("mod-32qam", 3), ("mod-64qam", 4), ("mod-128qam", 5), ("mod-256qam", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseMinModulation.setStatus('mandatory')
radioLicenseMinCodeRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseMinCodeRate.setStatus('mandatory')
radioLicenseMaxModulation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("mod-qpsk", 0), ("mod-8psk", 1), ("mod-16qam", 2), ("mod-32qam", 3), ("mod-64qam", 4), ("mod-128qam", 5), ("mod-256qam", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseMaxModulation.setStatus('mandatory')
radioLicenseMaxCodeRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseMaxCodeRate.setStatus('mandatory')
protection = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("hot-standby-1plus1", 1), ("hot-standby-1plus1-with-rx-diversity", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protection.setStatus('mandatory')
faultProtectionSwitching = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faultProtectionSwitching.setStatus('mandatory')
primarySecondaryMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primarySecondaryMode.setStatus('mandatory')
numberOfAntennas = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("one", 0), ("two", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numberOfAntennas.setStatus('mandatory')
primaryRecovery = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryRecovery.setStatus('mandatory')
primaryRecoveryPeriod = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2880))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryRecoveryPeriod.setStatus('mandatory')
requestedProtectionState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: requestedProtectionState.setStatus('mandatory')
antennaReceiveLevelDeltaThreshold = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: antennaReceiveLevelDeltaThreshold.setStatus('mandatory')
antennaReceiveLevelMeasurementWindow = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2880))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: antennaReceiveLevelMeasurementWindow.setStatus('mandatory')
fiberY = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fiberY.setStatus('mandatory')
rxDiversityVlanTpid = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ieee-8021q-tagged-c-tag-type-8100", 0), ("ieee-8021ad-tagged-s-tag-or-b-tag-type-88a8", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxDiversityVlanTpid.setStatus('mandatory')
rxDiversityVid = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxDiversityVid.setStatus('mandatory')
protectionAvailabilityStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("not-protected", 1), ("not-protecting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionAvailabilityStatus.setStatus('mandatory')
protectionConfigurationStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("configuration-not-protecting", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionConfigurationStatus.setStatus('mandatory')
protectionState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionState.setStatus('mandatory')
activeUnit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeUnit.setStatus('mandatory')
protectionSwitchCause = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("no-previous-protection-switch", 0), ("neighbor-cmu-connected-but-not-responding", 1), ("rfu-not-responding", 2), ("rfu-rx-rf-synth-out-of-lock", 3), ("rfu-tx-rf-synth-out-of-lock", 4), ("rfu-common-rf-synth-out-of-lock", 5), ("rfu-cable-failure", 6), ("rfu-cable-attenuator-adjustment-failure", 7), ("rfu-tx-power-degraded", 8), ("data-port-down", 9), ("management-port-down", 10), ("wireless-receive-signal-not-detected", 11), ("byte-error-ratio-over-threshold", 12), ("code-word-error-ratio-over-threshold", 13), ("cmu-rebooting", 14), ("configuration-not-protecting", 15), ("wireless-receive-signal-not-detected-at-remote-end", 16), ("byte-error-ratio-over-threshold-at-remote-end", 17), ("code-word-error-ratio-over-threshold-at-remote-end", 18), ("multiple-receive-failure-at-remote-end", 19), ("primary-recovery", 20), ("managed-protection-switch", 21), ("rfu-rx-if-synth-out-of-lock", 22), ("rfu-tx-if-synth-out-of-lock", 23), ("rfu-common-if-synth-out-of-lock", 24), ("rfu-very-high-temperature", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionSwitchCause.setStatus('mandatory')
endId = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: endId.setStatus('mandatory')
neighborIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborIPAddress.setStatus('mandatory')
neighborMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborMACAddress.setStatus('mandatory')
wirelessReceiveSignalStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("not-detected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessReceiveSignalStatus.setStatus('mandatory')
licensedTransmitCapacityStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("less-than-neighbor", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensedTransmitCapacityStatus.setStatus('mandatory')
dataPortEthernetSpeedStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("less-than-neighbor", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortEthernetSpeedStatus.setStatus('mandatory')
managementPortEthernetSpeedStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("less-than-neighbor", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortEthernetSpeedStatus.setStatus('mandatory')
protectionInterfaceStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("neighbor-not-responding", 1), ("neighbor-not-connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionInterfaceStatus.setStatus('mandatory')
remotePrimaryIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePrimaryIPAddress.setStatus('mandatory')
remoteSecondaryIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteSecondaryIPAddress.setStatus('mandatory')
remotePrimaryMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePrimaryMACAddress.setStatus('mandatory')
remoteSecondaryMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteSecondaryMACAddress.setStatus('mandatory')
remotePrimarySecondaryMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePrimarySecondaryMode.setStatus('mandatory')
transmitterStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("muted", 0), ("transmitting", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitterStatus.setStatus('mandatory')
endWirelessReceiveSignalStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("not-detected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: endWirelessReceiveSignalStatus.setStatus('mandatory')
rxDiversityDataPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("not-protecting", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDiversityDataPortStatus.setStatus('mandatory')
rxDiversityAvailabilityStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("not-protected", 1), ("not-protecting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDiversityAvailabilityStatus.setStatus('mandatory')
rxDiversityConfigurationStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("configuration-not-protecting", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDiversityConfigurationStatus.setStatus('mandatory')
rxDiversityNeighborCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("mismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDiversityNeighborCompatibility.setStatus('mandatory')
rxDiversityVlanTpidNeighborCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("mismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDiversityVlanTpidNeighborCompatibility.setStatus('mandatory')
rxDiversityVidNeighborCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("mismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDiversityVidNeighborCompatibility.setStatus('mandatory')
neighborInternetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("unknown-6", 5), ("unknown-7", 6), ("unknown-8", 7), ("unknown-9", 8), ("unknown-10", 9), ("unknown-11", 10), ("unknown-12", 11), ("unknown-13", 12), ("unknown-14", 13), ("unknown-15", 14), ("unknown-16", 15), ("dns", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborInternetAddressType.setStatus('mandatory')
neighborInternetAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 34), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborInternetAddress.setStatus('mandatory')
remotePrimaryInternetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("unknown-6", 5), ("unknown-7", 6), ("unknown-8", 7), ("unknown-9", 8), ("unknown-10", 9), ("unknown-11", 10), ("unknown-12", 11), ("unknown-13", 12), ("unknown-14", 13), ("unknown-15", 14), ("unknown-16", 15), ("dns", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePrimaryInternetAddressType.setStatus('mandatory')
remotePrimaryInternetAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 36), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePrimaryInternetAddress.setStatus('mandatory')
remoteSecondaryInternetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("unknown-6", 5), ("unknown-7", 6), ("unknown-8", 7), ("unknown-9", 8), ("unknown-10", 9), ("unknown-11", 10), ("unknown-12", 11), ("unknown-13", 12), ("unknown-14", 13), ("unknown-15", 14), ("unknown-16", 15), ("dns", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteSecondaryInternetAddressType.setStatus('mandatory')
remoteSecondaryInternetAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 38), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteSecondaryInternetAddress.setStatus('mandatory')
activeAvailableTime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 27, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAvailableTime.setStatus('mandatory')
activeCounterMeasurementPeriod = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 27, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeCounterMeasurementPeriod.setStatus('mandatory')
activeWirelessLinkAvailability = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 27, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeWirelessLinkAvailability.setStatus('mandatory')
userTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 29, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userTableNumber.setStatus('mandatory')
userTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 29, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: userTableIndex.setStatus('mandatory')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 29, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('mandatory')
userRole = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 29, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("read-only", 0), ("system-administrator", 1), ("security-officer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userRole.setStatus('mandatory')
userEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 29, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userEnabled.setStatus('mandatory')
userPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 29, 2, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPassword.setStatus('mandatory')
syslogClient = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 28, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogClient.setStatus('mandatory')
syslogState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 28, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogState.setStatus('mandatory')
longitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 96, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: longitude.setStatus('mandatory')
latitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 96, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latitude.setStatus('mandatory')
altitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 96, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: altitude.setStatus('mandatory')
dataPortStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,3)).setObjects(("CAMBIUM-PTP800-MIB", "dataPortStatus"))
linkNameMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,9)).setObjects(("CAMBIUM-PTP800-MIB", "linkNameMismatch"))
alignmentModeTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,10)).setObjects(("CAMBIUM-PTP800-MIB", "alignmentMode"))
unitOutOfCalibrationTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,11)).setObjects(("CAMBIUM-PTP800-MIB", "unitOutOfCalibration"))
encryptionEnabledMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,13)).setObjects(("CAMBIUM-PTP800-MIB", "encryptionEnabledMismatch"))
dataPortDisabledWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,17)).setObjects(("CAMBIUM-PTP800-MIB", "dataPortDisabledWarning"))
dataPortFiberStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,18)).setObjects(("CAMBIUM-PTP800-MIB", "dataPortFiberStatus"))
dataPortConfigurationMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,19)).setObjects(("CAMBIUM-PTP800-MIB", "dataPortConfigurationMismatch"))
softwareVersionRemoteCompatibilityTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,20)).setObjects(("CAMBIUM-PTP800-MIB", "softwareVersionRemoteCompatibility"))
sNTPSyncTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,21)).setObjects(("CAMBIUM-PTP800-MIB", "sNTPSync"))
managementPortStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,23)).setObjects(("CAMBIUM-PTP800-MIB", "managementPortStatus"))
managementPortDisabledWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,24)).setObjects(("CAMBIUM-PTP800-MIB", "managementPortDisabledWarning"))
rFUStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,27)).setObjects(("CAMBIUM-PTP800-MIB", "rFUStatus"))
managementPortConfigurationMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,28)).setObjects(("CAMBIUM-PTP800-MIB", "managementPortConfigurationMismatch"))
wirelessLinkStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,29)).setObjects(("CAMBIUM-PTP800-MIB", "wirelessLinkStatus"))
protectionAvailabilityStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,31)).setObjects(("CAMBIUM-PTP800-MIB", "protectionAvailabilityStatus"))
protectionConfigurationStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,32)).setObjects(("CAMBIUM-PTP800-MIB", "protectionConfigurationStatus"))
protectionStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,33)).setObjects(("CAMBIUM-PTP800-MIB", "protectionState"))
wirelessReceiveSignalStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,34)).setObjects(("CAMBIUM-PTP800-MIB", "wirelessReceiveSignalStatus"))
licensedTransmitCapacityStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,36)).setObjects(("CAMBIUM-PTP800-MIB", "licensedTransmitCapacityStatus"))
dataPortEthernetSpeedStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,37)).setObjects(("CAMBIUM-PTP800-MIB", "dataPortEthernetSpeedStatus"))
managementPortEthernetSpeedStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,38)).setObjects(("CAMBIUM-PTP800-MIB", "managementPortEthernetSpeedStatus"))
protectionInterfaceStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,39)).setObjects(("CAMBIUM-PTP800-MIB", "protectionInterfaceStatus"))
syslogStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,40)).setObjects(("CAMBIUM-PTP800-MIB", "syslogState"))
syslogLocalNearlyFullTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,41))
syslogLocalWrappedTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,42))
secureModeAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,43)).setObjects(("CAMBIUM-PTP800-MIB", "secureModeAlarm"))
endWirelessReceiveSignalStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,44)).setObjects(("CAMBIUM-PTP800-MIB", "endWirelessReceiveSignalStatus"))
rxDiversityDataPortStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,45)).setObjects(("CAMBIUM-PTP800-MIB", "rxDiversityDataPortStatus"))
rxDiversityAvailabilityStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,46)).setObjects(("CAMBIUM-PTP800-MIB", "rxDiversityAvailabilityStatus"))
rxDiversityConfigurationStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,47)).setObjects(("CAMBIUM-PTP800-MIB", "rxDiversityConfigurationStatus"))
rFUPowerButtonPressedTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,48)).setObjects(("CAMBIUM-PTP800-MIB", "rFUPowerButtonPressed"))
syslogClientTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99) + (0,49)).setObjects(("CAMBIUM-PTP800-MIB", "syslogClient"))
mibBuilder.exportSymbols("CAMBIUM-PTP800-MIB", primarySecondaryMode=primarySecondaryMode, iPDSCPPriorityTable=iPDSCPPriorityTable, sMTPServerInternetAddress=sMTPServerInternetAddress, rFUBranchingConfiguration=rFUBranchingConfiguration, telnetAccessEnabled=telnetAccessEnabled, rxDiversityAvailabilityStatusTrap=rxDiversityAvailabilityStatusTrap, radioLicenseModulation=radioLicenseModulation, userTableEntry=userTableEntry, antennaGain=antennaGain, bootVersion=bootVersion, radioLicenseCodeRate=radioLicenseCodeRate, managementPortSpeedAndDuplex=managementPortSpeedAndDuplex, protection=protection, productVariant=productVariant, syslogClient=syslogClient, pubStats=pubStats, managementPortWirelessDownAlert=managementPortWirelessDownAlert, rFUFreqSpacing=rFUFreqSpacing, dataPortEthernetSpeedStatus=dataPortEthernetSpeedStatus, ethernetPriorityTableNumber=ethernetPriorityTableNumber, tFTPSoftwareUpgradeStatusAdditionalText=tFTPSoftwareUpgradeStatusAdditionalText, userPassword=userPassword, radioLicenseRegion=radioLicenseRegion, hTTPSAccessEnabled=hTTPSAccessEnabled, alignmentMode=alignmentMode, sNTPServerTableEntry=sNTPServerTableEntry, transmitCapacityLimitDetail=transmitCapacityLimitDetail, radioLicenseMaxModulation=radioLicenseMaxModulation, receiveCodeRate=receiveCodeRate, protectionConfig=protectionConfig, sMTPEmailAlert=sMTPEmailAlert, systemReset=systemReset, secureModeAlarmTrap=secureModeAlarmTrap, rFURfSwitchCableAlarm=rFURfSwitchCableAlarm, sNMPTrapTableNumber=sNMPTrapTableNumber, endId=endId, rFUActiveFirmwareBank=rFUActiveFirmwareBank, tFTPSoftwareUpgradeStatusText=tFTPSoftwareUpgradeStatusText, userEnabled=userEnabled, iPDSCPPriorityQueueMapping=iPDSCPPriorityQueueMapping, sNTPLastSync=sNTPLastSync, tFTPServerInternetAddressType=tFTPServerInternetAddressType, managementPortConfigurationMismatchTrap=managementPortConfigurationMismatchTrap, antennaReceiveLevelDeltaThreshold=antennaReceiveLevelDeltaThreshold, rxDiversityVlanTpidNeighborCompatibility=rxDiversityVlanTpidNeighborCompatibility, rxDiversityConfigurationStatus=rxDiversityConfigurationStatus, ethernetPriorityTableEntry=ethernetPriorityTableEntry, iPDSCPPriorityTableNumber=iPDSCPPriorityTableNumber, rFUCableAttenuationAdjustAlarm=rFUCableAttenuationAdjustAlarm, dataPortConfigurationMismatch=dataPortConfigurationMismatch, rFUTxPowerMin=rFUTxPowerMin, useVLANForManagementInterfaces=useVLANForManagementInterfaces, ethernetFiberSupport=ethernetFiberSupport, subnetMask=subnetMask, rFUConnectedPlatform=rFUConnectedPlatform, dSCPManagementPriority=dSCPManagementPriority, remoteInternetAddressType=remoteInternetAddressType, rFULockoutAlarm=rFULockoutAlarm, primaryRecovery=primaryRecovery, phyControl=phyControl, antennaReceiveLevelMeasurementWindow=antennaReceiveLevelMeasurementWindow, rxDiversityAvailabilityStatus=rxDiversityAvailabilityStatus, sNMPTrapIPAddress=sNMPTrapIPAddress, iFCableLength=iFCableLength, managementPortStatus=managementPortStatus, sNMPTrapTableEntry=sNMPTrapTableEntry, smtp=smtp, rFURfBand=rFURfBand, faultProtectionSwitching=faultProtectionSwitching, licensedTransmitCapacityStatusTrap=licensedTransmitCapacityStatusTrap, rxDiversityVid=rxDiversityVid, mPLSTCPriorityQueueMapping=mPLSTCPriorityQueueMapping, sMTPEnabledMessages=sMTPEnabledMessages, rFURxIFSynthLockAlarm=rFURxIFSynthLockAlarm, rFUPowerAlarm=rFUPowerAlarm, radioLicense=radioLicense, syslogLocalNearlyFullTrap=syslogLocalNearlyFullTrap, sNTPPrimaryServer=sNTPPrimaryServer, configuration=configuration, activeWirelessLinkAvailability=activeWirelessLinkAvailability, managementPortStatusTrap=managementPortStatusTrap, sntp=sntp, activeCounterMeasurementPeriod=activeCounterMeasurementPeriod, rxDiversityVlanTpid=rxDiversityVlanTpid, managementPortEthernetSpeedStatus=managementPortEthernetSpeedStatus, phyStatus=phyStatus, radioLicenseIdentifier=radioLicenseIdentifier, hardwareVersion=hardwareVersion, protectionStatus=protectionStatus, linkNameMismatch=linkNameMismatch, rFUTxFreqMin=rFUTxFreqMin, protectionInterfaceStatusTrap=protectionInterfaceStatusTrap, dataPortStatusTrap=dataPortStatusTrap, managementPortEthernetSpeedStatusTrap=managementPortEthernetSpeedStatusTrap, syslogLocalWrappedTrap=syslogLocalWrappedTrap, managementMode=managementMode, rFURFSwitchAlarm=rFURFSwitchAlarm, dataPortFiberStatusTrap=dataPortFiberStatusTrap, transmitDataRate=transmitDataRate, rxDiversityConfigurationStatusTrap=rxDiversityConfigurationStatusTrap, sNTPServerTable=sNTPServerTable, remotePrimaryIPAddress=remotePrimaryIPAddress, remoteIPAddress=remoteIPAddress, protectionInterfaceStatus=protectionInterfaceStatus, linkName=linkName, dataPortPauseFrames=dataPortPauseFrames, sNTPServerTableIndex=sNTPServerTableIndex, iPVersion=iPVersion, sNTPServerIPAddress=sNTPServerIPAddress, sNTPServerInternetAddress=sNTPServerInternetAddress, rFUHighTemperatureAlarm=rFUHighTemperatureAlarm, syslogState=syslogState, snmpControl=snmpControl, dataPortSpeedAndDuplex=dataPortSpeedAndDuplex, rxDiversityDataPortStatusTrap=rxDiversityDataPortStatusTrap, radioLicenseMinModulation=radioLicenseMinModulation, rFUTxMuteStatus=rFUTxMuteStatus, dataPortDisabledWarning=dataPortDisabledWarning, sNTPState=sNTPState, hTTPAccessEnabled=hTTPAccessEnabled, rfu=rfu, sNTPServerPortNumber=sNTPServerPortNumber, remotePrimaryMACAddress=remotePrimaryMACAddress, iPDSCPPriorityTableEntry=iPDSCPPriorityTableEntry, iPv6PrefixLength=iPv6PrefixLength, protectionState=protectionState, radioLicenseIncompatibleAlarm=radioLicenseIncompatibleAlarm, remoteInternetAddress=remoteInternetAddress, hTTPSPortNumber=hTTPSPortNumber, reset=reset, userTable=userTable, transmitCodeRate=transmitCodeRate, systemClock=systemClock, ethernet=ethernet, ethernetPriorityQueueMapping=ethernetPriorityQueueMapping, protectionSwitchCause=protectionSwitchCause, encryptionAlgorithm=encryptionAlgorithm, maximumTransmitPower=maximumTransmitPower, rFUTxBandAboveRx=rFUTxBandAboveRx, activeUnit=activeUnit, rFUTxPowerDegradedAlarm=rFUTxPowerDegradedAlarm, rFURxFreqMin=rFURxFreqMin, rxDiversityNeighborCompatibility=rxDiversityNeighborCompatibility, vLANManagementVIDValidation=vLANManagementVIDValidation, sNMPPortNumber=sNMPPortNumber, sNTPSync=sNTPSync, rFUStatus=rFUStatus, l2CPPriorityTable=l2CPPriorityTable, softwareVersionRemoteCompatibilityTrap=softwareVersionRemoteCompatibilityTrap, protectionAvailabilityStatus=protectionAvailabilityStatus, secureModeAlarm=secureModeAlarm, userTableNumber=userTableNumber, productName=productName, softwareVersion=softwareVersion, sMTPServerPortNumber=sMTPServerPortNumber, hTTPPortNumber=hTTPPortNumber, neighborMACAddress=neighborMACAddress, rFURxRFSynthLockAlarm=rFURxRFSynthLockAlarm, dataPortFiberStatus=dataPortFiberStatus, dataPortWirelessDownAlert=dataPortWirelessDownAlert, managementPortConfigurationMismatch=managementPortConfigurationMismatch, daylightSaving=daylightSaving, remoteMaximumTransmitPower=remoteMaximumTransmitPower, dataPortEthernetMediaTypeToUse=dataPortEthernetMediaTypeToUse, sNTPServerInternetAddressType=sNTPServerInternetAddressType, l2CPPriorityTableIndex=l2CPPriorityTableIndex, sNMPTrapInternetAddress=sNMPTrapInternetAddress, transmitCapacityLimit=transmitCapacityLimit, protectionAvailabilityStatusTrap=protectionAvailabilityStatusTrap, unitOutOfCalibration=unitOutOfCalibration, remoteSecondaryMACAddress=remoteSecondaryMACAddress, radioLicenseTxFreq=radioLicenseTxFreq, ptpTraps=ptpTraps, tFTPSoftwareUpgradeFileName=tFTPSoftwareUpgradeFileName, sNMPTrapPortNumber=sNMPTrapPortNumber, sNMPTrapVersion=sNMPTrapVersion, telnetPortNumber=telnetPortNumber, tFTPServerIPAddress=tFTPServerIPAddress, sNTPPrimaryServerDeadTime=sNTPPrimaryServerDeadTime, gatewayIPAddress=gatewayIPAddress, diverseAntennaGain=diverseAntennaGain, encryption=encryption, managementPortDisabledWarning=managementPortDisabledWarning, dataPortStatus=dataPortStatus, receiveModulation=receiveModulation, secondarySoftwareVersion=secondarySoftwareVersion, wirelessReceiveSignalStatusTrap=wirelessReceiveSignalStatusTrap, rFUTxIFSynthLockAlarm=rFUTxIFSynthLockAlarm, sNTPSyncTrap=sNTPSyncTrap, rFUVersionBank1=rFUVersionBank1, qOSPriorityScheme=qOSPriorityScheme, maxCodeRate=maxCodeRate, wirelessLinkStatus=wirelessLinkStatus, tFTPSoftwareUpgradeStatus=tFTPSoftwareUpgradeStatus, dataPortCopperAutoNegAdvertisement=dataPortCopperAutoNegAdvertisement, management=management, protectionConfigurationStatusTrap=protectionConfigurationStatusTrap, dataPortCopperForcedConfiguration=dataPortCopperForcedConfiguration, rFUVersionBank2=rFUVersionBank2, rFFeederLoss=rFFeederLoss, sMTPSourceEmailAddress=sMTPSourceEmailAddress, enabledDiagnosticAlarms=enabledDiagnosticAlarms, sNMPTrapReceiverEnabled=sNMPTrapReceiverEnabled, rFUPowerButtonPressed=rFUPowerButtonPressed, iPv4Address=iPv4Address, syslogClientTrap=syslogClientTrap, l2CPPriorityTableNumber=l2CPPriorityTableNumber, unitOutOfCalibrationTrap=unitOutOfCalibrationTrap, altitude=altitude, rFUCommonRFSynthLockAlarm=rFUCommonRFSynthLockAlarm, rFURxFreqMax=rFURxFreqMax, rFUFanAssemblyAlarm=rFUFanAssemblyAlarm, tFTPServerInternetAddress=tFTPServerInternetAddress, sMTPDestinationEmailAddress=sMTPDestinationEmailAddress, remotePrimaryInternetAddressType=remotePrimaryInternetAddressType, sNMPTrapTable=sNMPTrapTable, receivePower=receivePower, sNMPCommunityString=sNMPCommunityString, endWirelessReceiveSignalStatusTrap=endWirelessReceiveSignalStatusTrap, fiberY=fiberY, neighborInternetAddressType=neighborInternetAddressType, ptmp=ptmp, syslogStateTrap=syslogStateTrap, l2CPPriorityTableEntry=l2CPPriorityTableEntry, receiveDataRate=receiveDataRate, sNTPPollInterval=sNTPPollInterval, l2CPPriorityQueueMapping=l2CPPriorityQueueMapping, siteName=siteName, radioLicenseMinCodeRate=radioLicenseMinCodeRate, managementPortAutoNegotiation=managementPortAutoNegotiation, sNTPServerTimeout=sNTPServerTimeout, licence=licence, mPLSTCPriorityTableEntry=mPLSTCPriorityTableEntry, diverseRfFeederLoss=diverseRfFeederLoss, mPLSTCPriorityTableNumber=mPLSTCPriorityTableNumber, rFUTransceiverLocation=rFUTransceiverLocation, primaryRecoveryPeriod=primaryRecoveryPeriod, wirelessLinkAvailability=wirelessLinkAvailability, radioLicenseBandwidth=radioLicenseBandwidth, radioLicenseBand=radioLicenseBand, minCodeRate=minCodeRate, remoteSecondaryInternetAddressType=remoteSecondaryInternetAddressType, timeZone=timeZone, rFUTxFreqMax=rFUTxFreqMax, iPv6AutoConfiguredLinkLocalAddress=iPv6AutoConfiguredLinkLocalAddress, protectionStats=protectionStats, managementCommittedInformationRate=managementCommittedInformationRate, securityLevel=securityLevel, sMTPServerIPAddress=sMTPServerIPAddress, wirelessReceiveSignalStatus=wirelessReceiveSignalStatus, rFUReceiveBranchingUnitLoss=rFUReceiveBranchingUnitLoss, rFUProtectionCompatibility=rFUProtectionCompatibility, ptp800=ptp800, transmitModulation=transmitModulation)
mibBuilder.exportSymbols("CAMBIUM-PTP800-MIB", radioLicenseMaxEIRP=radioLicenseMaxEIRP, dataPortConfigurationMismatchTrap=dataPortConfigurationMismatchTrap, userRole=userRole, ptp=ptp, dataPortEthernetSpeedStatusTrap=dataPortEthernetSpeedStatusTrap, iPv6GatewayAddress=iPv6GatewayAddress, mPLSTCPriorityTable=mPLSTCPriorityTable, transmitCapacity=transmitCapacity, enableTransmission=enableTransmission, sNMPTrapInternetAddressType=sNMPTrapInternetAddressType, rFUTxPowerAlarm=rFUTxPowerAlarm, rFUStatusTrap=rFUStatusTrap, iPv6Address=iPv6Address, versions=versions, localPacketFiltering=localPacketFiltering, sNMPTrapTableIndex=sNMPTrapTableIndex, aTPCEnable=aTPCEnable, rFUTxPowerMax=rFUTxPowerMax, protectionConfigurationStatus=protectionConfigurationStatus, licensedTransmitCapacityStatus=licensedTransmitCapacityStatus, cambium=cambium, sNMPEnabledTraps=sNMPEnabledTraps, syslogControl=syslogControl, neighborInternetAddress=neighborInternetAddress, requestedProtectionState=requestedProtectionState, radioLicenseMaxCodeRate=radioLicenseMaxCodeRate, rFUPlatformCompatibility=rFUPlatformCompatibility, encryptionEnabledMismatchTrap=encryptionEnabledMismatchTrap, ethernetPriorityTableIndex=ethernetPriorityTableIndex, rxDiversityDataPortStatus=rxDiversityDataPortStatus, rFUPowerButtonPressedTrap=rFUPowerButtonPressedTrap, remoteSecondaryInternetAddress=remoteSecondaryInternetAddress, aggregateDataRate=aggregateDataRate, linkNameMismatchTrap=linkNameMismatchTrap, linkLoss=linkLoss, managementPortAutoNegAdvertisement=managementPortAutoNegAdvertisement, unknownNetworkPriorityQueueMapping=unknownNetworkPriorityQueueMapping, dataPortCopperAutoNegotiation=dataPortCopperAutoNegotiation, tFTPServerPortNumber=tFTPServerPortNumber, ethernetPriorityTable=ethernetPriorityTable, wirelessLinkStatusTrap=wirelessLinkStatusTrap, encryptionEnabledMismatch=encryptionEnabledMismatch, rxDiversityVidNeighborCompatibility=rxDiversityVidNeighborCompatibility, alignmentModeTrap=alignmentModeTrap, numberOfAntennas=numberOfAntennas, encryptionAlgorithmsAvail=encryptionAlgorithmsAvail, ptpTrapPrefix=ptpTrapPrefix, aAAControl=aAAControl, minModulation=minModulation, vLANManagementPriority=vLANManagementPriority, rFUSerial=rFUSerial, vLANManagementVID=vLANManagementVID, vectorError=vectorError, rFUTxRFSynthLockAlarm=rFUTxRFSynthLockAlarm, rFUTransmitBranchingUnitLoss=rFUTransmitBranchingUnitLoss, dataPortDisabledWarningTrap=dataPortDisabledWarningTrap, remoteMACAddress=remoteMACAddress, mPLSTCPriorityTableIndex=mPLSTCPriorityTableIndex, rFUCommonIFSynthLockAlarm=rFUCommonIFSynthLockAlarm, alarms=alarms, sNTPServerRetries=sNTPServerRetries, remoteSecondaryIPAddress=remoteSecondaryIPAddress, activeAvailableTime=activeAvailableTime, userName=userName, supplementary=supplementary, rFURpsAlarm=rFURpsAlarm, transmitPower=transmitPower, sNTPServerTableNumber=sNTPServerTableNumber, sNTPServerResponse=sNTPServerResponse, protectionStateTrap=protectionStateTrap, bridge=bridge, iPDSCPPriorityTableIndex=iPDSCPPriorityTableIndex, longitude=longitude, sMTPServerInternetAddressType=sMTPServerInternetAddressType, endWirelessReceiveSignalStatus=endWirelessReceiveSignalStatus, rFUCableAlarm=rFUCableAlarm, remotePrimarySecondaryMode=remotePrimarySecondaryMode, remotePrimaryInternetAddress=remotePrimaryInternetAddress, softwareVersionRemoteCompatibility=softwareVersionRemoteCompatibility, userTableIndex=userTableIndex, managementPortForcedConfiguration=managementPortForcedConfiguration, maxModulation=maxModulation, rFUType=rFUType, managementPortDisabledWarningTrap=managementPortDisabledWarningTrap, transmitterStatus=transmitterStatus, latitude=latitude, radioLicenseRxFreq=radioLicenseRxFreq, neighborIPAddress=neighborIPAddress, tFTPStartSoftwareUpgrade=tFTPStartSoftwareUpgrade, enabledDiagnosticProtectionAlarms=enabledDiagnosticProtectionAlarms)
