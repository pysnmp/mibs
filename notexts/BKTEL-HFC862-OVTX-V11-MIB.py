#
# PySNMP MIB module BKTEL-HFC862-OVTX-V11-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/bktel/BKTEL-HFC862-OVTX-V11-MIB
# Produced by pysmi-1.1.12 at Wed Oct  9 02:16:50 2024
# On host fv-az1144-128 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
TruthValue, modules, NESlotValue, ModuleWidthValue, PerceivedSeverityValue, DisplayString = mibBuilder.importSymbols("BKTEL-HFC862-BASE-MIB", "TruthValue", "modules", "NESlotValue", "ModuleWidthValue", "PerceivedSeverityValue", "DisplayString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, MibIdentifier, TimeTicks, enterprises, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, experimental, ModuleIdentity, Integer32, Counter32, NotificationType, IpAddress, Bits, Gauge32, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibIdentifier", "TimeTicks", "enterprises", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "experimental", "ModuleIdentity", "Integer32", "Counter32", "NotificationType", "IpAddress", "Bits", "Gauge32", "Counter64", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ovtx = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101))
ovtxCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 1))
ovtxStates = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2))
ovtxConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3))
ovtxControl = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 4))
ovtxMeasuringValues = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5))
ovtxDisplay = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6))
class AGCmode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("modeAgcOff", 1), ("modeUnmodulatedAgcOn", 2), ("modeModulatedAgcOn", 3))

class SatAGCmode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("satAgcOff", 1), ("satAgcOn", 2))

class RedundancyMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("modeActiveLowOutput", 1), ("modeActiveHighOutput", 2), ("modeNominalMasterIrreversible", 3), ("modeNominalMasterFallback", 4), ("modeRedundantSlave", 5))

class RedundancyMask(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("maskAlarmsOnly", 1), ("maskAlarmsAndWarnings", 2), ("maskSpecialAdjusted", 3))

class LaserOutputMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("laserShutdown", 1), ("laserActive", 2), ("laserShutdownOnMaskedError", 3))

class CsoRegulationMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("csoRegModeChannelControlled", 1), ("csoRegModePilotControlled", 2))

class RegulationState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("regulationStateUnknownOrNotSupported", 1), ("regulationStateOutputpowerBased", 2), ("regulationStateCsoBasedRough", 3), ("regulationStateCsoBasedFine", 4), ("regulationStatePilotBased", 5))

class RfInputCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("rfInputCatvOnlySupported", 1), ("rfInputSatOnlySupported", 2), ("rfInputCatvAndSatSupported", 3))

class RfInputAlarmMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("alarmEnableAll", 1), ("alarmCatvEnableSatDisable", 2), ("alarmSatEnableCatvDisable", 3))

class LnbSupplyValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("lnbSupplyOff", 1), ("lnbSupply14V", 2), ("lnbSupply18V", 3), ("lnbSupply14V_22kHz", 4), ("lnbSupply18V_22kHz", 5))

class LnbSupplySupportedValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("notSupported", 1), ("lnbSupply14V18VSwitchSupported", 2), ("lnbSupply14V18VAnd22kHzSwitchSupported", 3))

class SbsSuppressionModeValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("modeStandard", 1), ("modeCatvOnly", 2))

class SbsFiberTypeValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("typeStandardFiber", 1), ("typeSbsOptimizedFiber", 2))

class SbsFiberLengthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("length10km", 1), ("length25km", 2), ("length40km", 3), ("length65km", 4))

class NESlotWriteValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-1, 99)

ovtxCommonNumberOfModules = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxCommonNumberOfModules.setStatus('mandatory')
ovtxCommonTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 1, 2), )
if mibBuilder.loadTexts: ovtxCommonTable.setStatus('mandatory')
ovtxCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 1, 2, 1), ).setIndexNames((0, "BKTEL-HFC862-OVTX-V11-MIB", "ovtxNESlot"))
if mibBuilder.loadTexts: ovtxCommonEntry.setStatus('mandatory')
ovtxNESlot = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 1, 2, 1, 1), NESlotValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxNESlot.setStatus('mandatory')
ovtxCommonType = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxCommonType.setStatus('mandatory')
ovtxCommonDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxCommonDescr.setStatus('mandatory')
ovtxCommonFirmwareId = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxCommonFirmwareId.setStatus('mandatory')
ovtxCommonModuleWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 1, 2, 1, 5), ModuleWidthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxCommonModuleWidth.setStatus('optional')
ovtxMeasuringValuesTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1), )
if mibBuilder.loadTexts: ovtxMeasuringValuesTable.setStatus('mandatory')
ovtxMeasuringValuesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1), ).setIndexNames((0, "BKTEL-HFC862-OVTX-V11-MIB", "ovtxNESlot"))
if mibBuilder.loadTexts: ovtxMeasuringValuesEntry.setStatus('mandatory')
ovtxOmiMeasuredLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxOmiMeasuredLoLo.setStatus('mandatory')
ovtxOmiMeasuredLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxOmiMeasuredLo.setStatus('mandatory')
ovtxOmiMeasuredValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxOmiMeasuredValue.setStatus('mandatory')
ovtxOmiMeasuredHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxOmiMeasuredHi.setStatus('mandatory')
ovtxOmiMeasuredHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxOmiMeasuredHiHi.setStatus('mandatory')
ovtxRfGainMeasuredLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxRfGainMeasuredLoLo.setStatus('mandatory')
ovtxRfGainMeasuredLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxRfGainMeasuredLo.setStatus('mandatory')
ovtxRfGainMeasuredValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxRfGainMeasuredValue.setStatus('mandatory')
ovtxRfGainMeasuredHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxRfGainMeasuredHi.setStatus('mandatory')
ovtxRfGainMeasuredHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxRfGainMeasuredHiHi.setStatus('mandatory')
ovtxLaserCurrentRelLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxLaserCurrentRelLoLo.setStatus('mandatory')
ovtxLaserCurrentRelLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxLaserCurrentRelLo.setStatus('mandatory')
ovtxLaserCurrentRelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxLaserCurrentRelValue.setStatus('mandatory')
ovtxLaserCurrentRelHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxLaserCurrentRelHi.setStatus('mandatory')
ovtxLaserCurrentRelHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxLaserCurrentRelHiHi.setStatus('mandatory')
ovtxTecCurrentRelLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxTecCurrentRelLoLo.setStatus('mandatory')
ovtxTecCurrentRelLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxTecCurrentRelLo.setStatus('mandatory')
ovtxTecCurrentRelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxTecCurrentRelValue.setStatus('mandatory')
ovtxTecCurrentRelHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxTecCurrentRelHi.setStatus('mandatory')
ovtxTecCurrentRelHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxTecCurrentRelHiHi.setStatus('mandatory')
ovtxOutputPowerLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxOutputPowerLoLo.setStatus('mandatory')
ovtxOutputPowerLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxOutputPowerLo.setStatus('mandatory')
ovtxOutputPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxOutputPowerValue.setStatus('mandatory')
ovtxOutputPowerHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxOutputPowerHi.setStatus('mandatory')
ovtxOutputPowerHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxOutputPowerHiHi.setStatus('mandatory')
ovtxPlus3p3VLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus3p3VLoLo.setStatus('mandatory')
ovtxPlus3p3VLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus3p3VLo.setStatus('mandatory')
ovtxPlus3p3VValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus3p3VValue.setStatus('mandatory')
ovtxPlus3p3VHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus3p3VHi.setStatus('mandatory')
ovtxPlus3p3VHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus3p3VHiHi.setStatus('mandatory')
ovtxPlus5VLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus5VLoLo.setStatus('mandatory')
ovtxPlus5VLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus5VLo.setStatus('mandatory')
ovtxPlus5VValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus5VValue.setStatus('mandatory')
ovtxPlus5VHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus5VHi.setStatus('mandatory')
ovtxPlus5VHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus5VHiHi.setStatus('mandatory')
ovtxPlus12VLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus12VLoLo.setStatus('mandatory')
ovtxPlus12VLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus12VLo.setStatus('mandatory')
ovtxPlus12VValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus12VValue.setStatus('mandatory')
ovtxPlus12VHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus12VHi.setStatus('mandatory')
ovtxPlus12VHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus12VHiHi.setStatus('mandatory')
ovtxPlus24VLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus24VLoLo.setStatus('mandatory')
ovtxPlus24VLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus24VLo.setStatus('mandatory')
ovtxPlus24VValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus24VValue.setStatus('mandatory')
ovtxPlus24VHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus24VHi.setStatus('mandatory')
ovtxPlus24VHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus24VHiHi.setStatus('mandatory')
ovtxMinus5VLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxMinus5VLoLo.setStatus('mandatory')
ovtxMinus5VLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxMinus5VLo.setStatus('mandatory')
ovtxMinus5VValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxMinus5VValue.setStatus('mandatory')
ovtxMinus5VHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxMinus5VHi.setStatus('mandatory')
ovtxMinus5VHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxMinus5VHiHi.setStatus('mandatory')
ovtxMinus12VLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxMinus12VLoLo.setStatus('mandatory')
ovtxMinus12VLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxMinus12VLo.setStatus('mandatory')
ovtxMinus12VValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxMinus12VValue.setStatus('mandatory')
ovtxMinus12VHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxMinus12VHi.setStatus('mandatory')
ovtxMinus12VHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxMinus12VHiHi.setStatus('mandatory')
ovtxTemperatureLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxTemperatureLoLo.setStatus('mandatory')
ovtxTemperatureLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxTemperatureLo.setStatus('mandatory')
ovtxTemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxTemperatureValue.setStatus('mandatory')
ovtxTemperatureHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxTemperatureHi.setStatus('mandatory')
ovtxTemperatureHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxTemperatureHiHi.setStatus('mandatory')
ovtxRfInputLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxRfInputLoLo.setStatus('mandatory')
ovtxRfInputLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxRfInputLo.setStatus('mandatory')
ovtxRfInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxRfInputValue.setStatus('mandatory')
ovtxRfInputHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 64), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxRfInputHi.setStatus('mandatory')
ovtxRfInputHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 65), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxRfInputHiHi.setStatus('mandatory')
ovtxSatRfInputLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 66), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatRfInputLoLo.setStatus('mandatory')
ovtxSatRfInputLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 67), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatRfInputLo.setStatus('mandatory')
ovtxSatRfInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxSatRfInputValue.setStatus('mandatory')
ovtxSatRfInputHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 69), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatRfInputHi.setStatus('mandatory')
ovtxSatRfInputHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 70), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatRfInputHiHi.setStatus('mandatory')
ovtxSatOmiMeasuredLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 71), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatOmiMeasuredLoLo.setStatus('mandatory')
ovtxSatOmiMeasuredLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 72), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatOmiMeasuredLo.setStatus('mandatory')
ovtxSatOmiMeasuredValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxSatOmiMeasuredValue.setStatus('mandatory')
ovtxSatOmiMeasuredHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 74), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatOmiMeasuredHi.setStatus('mandatory')
ovtxSatOmiMeasuredHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 75), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatOmiMeasuredHiHi.setStatus('mandatory')
ovtxSatRfGainMeasuredLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 76), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatRfGainMeasuredLoLo.setStatus('mandatory')
ovtxSatRfGainMeasuredLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 77), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatRfGainMeasuredLo.setStatus('mandatory')
ovtxSatRfGainMeasuredValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxSatRfGainMeasuredValue.setStatus('mandatory')
ovtxSatRfGainMeasuredHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 79), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatRfGainMeasuredHi.setStatus('mandatory')
ovtxSatRfGainMeasuredHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 80), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatRfGainMeasuredHiHi.setStatus('mandatory')
ovtxStatesTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1), )
if mibBuilder.loadTexts: ovtxStatesTable.setStatus('mandatory')
ovtxStatesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1), ).setIndexNames((0, "BKTEL-HFC862-OVTX-V11-MIB", "ovtxNESlot"))
if mibBuilder.loadTexts: ovtxStatesEntry.setStatus('mandatory')
ovtxStatesOutputLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 1), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesOutputLow.setStatus('mandatory')
ovtxStatesOutputHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 2), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesOutputHigh.setStatus('mandatory')
ovtxStatesInputLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 3), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesInputLow.setStatus('mandatory')
ovtxStatesLaserAging = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 4), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesLaserAging.setStatus('mandatory')
ovtxStatesTecHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 5), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesTecHigh.setStatus('mandatory')
ovtxStatesLaserTempLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 6), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesLaserTempLow.setStatus('mandatory')
ovtxStatesLaserTempHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 7), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesLaserTempHigh.setStatus('mandatory')
ovtxStatesOmiOrRfgainLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 8), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesOmiOrRfgainLow.setStatus('mandatory')
ovtxStatesOmiOrRfgainHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 9), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesOmiOrRfgainHigh.setStatus('mandatory')
ovtxStatesPowerSupplyLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 10), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesPowerSupplyLeft.setStatus('mandatory')
ovtxStatesPowerSupplyRight = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 11), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesPowerSupplyRight.setStatus('mandatory')
ovtxStatesFanLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 12), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesFanLeft.setStatus('mandatory')
ovtxStatesFanRight = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 13), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesFanRight.setStatus('mandatory')
ovtxStatesTemperatureLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 14), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesTemperatureLow.setStatus('mandatory')
ovtxStatesTemperatureHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 15), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesTemperatureHigh.setStatus('mandatory')
ovtxStatesPlus3p3VLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 16), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesPlus3p3VLow.setStatus('mandatory')
ovtxStatesPlus3p3VHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 17), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesPlus3p3VHigh.setStatus('mandatory')
ovtxStatesPlus5VLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 18), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesPlus5VLow.setStatus('mandatory')
ovtxStatesPlus5VHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 19), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesPlus5VHigh.setStatus('mandatory')
ovtxStatesPlus12VLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 20), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesPlus12VLow.setStatus('mandatory')
ovtxStatesPlus12VHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 21), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesPlus12VHigh.setStatus('mandatory')
ovtxStatesPlus24VLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 22), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesPlus24VLow.setStatus('mandatory')
ovtxStatesPlus24VHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 23), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesPlus24VHigh.setStatus('mandatory')
ovtxStatesMinus5VLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 24), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesMinus5VLow.setStatus('mandatory')
ovtxStatesMinus5VHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 25), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesMinus5VHigh.setStatus('mandatory')
ovtxStatesMinus12VLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 26), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesMinus12VLow.setStatus('mandatory')
ovtxStatesMinus12VHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 27), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesMinus12VHigh.setStatus('mandatory')
ovtxStatesLaserShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 28), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesLaserShutdown.setStatus('mandatory')
ovtxStatesInitializing = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 29), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesInitializing.setStatus('mandatory')
ovtxStatesBootloader = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 30), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesBootloader.setStatus('mandatory')
ovtxStatesCommLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 31), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesCommLoss.setStatus('mandatory')
ovtxStatesInputHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 32), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesInputHigh.setStatus('mandatory')
ovtxStatesRedundancySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 33), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesRedundancySwitch.setStatus('mandatory')
ovtxStatesSatInputLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 34), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesSatInputLow.setStatus('mandatory')
ovtxStatesSatInputHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 35), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesSatInputHigh.setStatus('mandatory')
ovtxStatesSatOmiOrRfgainLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 36), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesSatOmiOrRfgainLow.setStatus('mandatory')
ovtxStatesSatOmiOrRfgainHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 37), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesSatOmiOrRfgainHigh.setStatus('mandatory')
ovtxStatesSatLnbShortCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 38), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesSatLnbShortCircuit.setStatus('mandatory')
ovtxStatesSbs1Level = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 39), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesSbs1Level.setStatus('mandatory')
ovtxStatesSbs2Level = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 40), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesSbs2Level.setStatus('mandatory')
ovtxStatesSbs1PllNotLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 41), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesSbs1PllNotLocked.setStatus('mandatory')
ovtxStatesSbs2PllNotLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 42), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesSbs2PllNotLocked.setStatus('mandatory')
ovtxStatesInternalAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 43), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesInternalAlarm.setStatus('mandatory')
ovtxControlTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 4, 1), )
if mibBuilder.loadTexts: ovtxControlTable.setStatus('mandatory')
ovtxControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 4, 1, 1), ).setIndexNames((0, "BKTEL-HFC862-OVTX-V11-MIB", "ovtxNESlot"))
if mibBuilder.loadTexts: ovtxControlEntry.setStatus('mandatory')
ovtxControlLaserOutputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 4, 1, 1, 1), LaserOutputMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxControlLaserOutputMode.setStatus('mandatory')
ovtxControlReset = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 4, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxControlReset.setStatus('mandatory')
ovtxControlModuleLedBlink = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 4, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxControlModuleLedBlink.setStatus('mandatory')
ovtxConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1), )
if mibBuilder.loadTexts: ovtxConfigurationTable.setStatus('mandatory')
ovtxConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1), ).setIndexNames((0, "BKTEL-HFC862-OVTX-V11-MIB", "ovtxNESlot"))
if mibBuilder.loadTexts: ovtxConfigurationEntry.setStatus('mandatory')
ovtxConfigurationNESlotWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 1), NESlotWriteValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationNESlotWrite.setStatus('optional')
ovtxConfigurationModeAGC = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 2), AGCmode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationModeAGC.setStatus('mandatory')
ovtxConfigurationOmi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationOmi.setStatus('mandatory')
ovtxConfigurationRfGain = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRfGain.setStatus('mandatory')
ovtxConfigurationSbsSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationSbsSuppression.setStatus('mandatory')
ovtxConfigurationChannelDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationChannelDistance.setStatus('mandatory')
ovtxConfigurationLaserFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationLaserFrequency.setStatus('mandatory')
ovtxConfigurationRfInputLimitLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRfInputLimitLoLo.setStatus('mandatory')
ovtxConfigurationRfInputLimitLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRfInputLimitLo.setStatus('mandatory')
ovtxConfigurationRfInputLimitHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRfInputLimitHi.setStatus('mandatory')
ovtxConfigurationRfInputLimitHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRfInputLimitHiHi.setStatus('mandatory')
ovtxConfigurationRfGainMeasuredLimitLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRfGainMeasuredLimitLoLo.setStatus('mandatory')
ovtxConfigurationRfGainMeasuredLimitLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRfGainMeasuredLimitLo.setStatus('mandatory')
ovtxConfigurationRfGainMeasuredLimitHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRfGainMeasuredLimitHi.setStatus('mandatory')
ovtxConfigurationRfGainMeasuredLimitHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRfGainMeasuredLimitHiHi.setStatus('mandatory')
ovtxConfigurationOmiMeasuredLimitLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationOmiMeasuredLimitLoLo.setStatus('mandatory')
ovtxConfigurationOmiMeasuredLimitLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationOmiMeasuredLimitLo.setStatus('mandatory')
ovtxConfigurationOmiMeasuredLimitHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationOmiMeasuredLimitHi.setStatus('mandatory')
ovtxConfigurationOmiMeasuredLimitHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationOmiMeasuredLimitHiHi.setStatus('mandatory')
ovtxConfigurationOutputPwrLimitLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationOutputPwrLimitLoLo.setStatus('mandatory')
ovtxConfigurationOutputPwrLimitLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationOutputPwrLimitLo.setStatus('mandatory')
ovtxConfigurationOutputPwrLimitHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationOutputPwrLimitHi.setStatus('mandatory')
ovtxConfigurationOutputPwrLimitHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationOutputPwrLimitHiHi.setStatus('mandatory')
ovtxConfigurationRedundancyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 24), RedundancyMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRedundancyMode.setStatus('mandatory')
ovtxConfigurationRedundancyMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 25), RedundancyMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRedundancyMask.setStatus('mandatory')
ovtxConfigurationCsoRegulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 26), CsoRegulationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationCsoRegulationMode.setStatus('mandatory')
ovtxConfigurationSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationSlope.setStatus('mandatory')
ovtxConfigurationFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationFiberLength.setStatus('mandatory')
ovtxConfigurationSatModeAGC = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 29), SatAGCmode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationSatModeAGC.setStatus('mandatory')
ovtxConfigurationSatOmi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationSatOmi.setStatus('mandatory')
ovtxConfigurationSatRfGain = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationSatRfGain.setStatus('mandatory')
ovtxConfigurationSatSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationSatSlope.setStatus('mandatory')
ovtxConfigurationRfInputAlarmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 33), RfInputAlarmMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRfInputAlarmMode.setStatus('mandatory')
ovtxConfigurationSatLnbSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 34), LnbSupplyValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationSatLnbSupply.setStatus('mandatory')
ovtxConfigurationSbsSuppressionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 35), SbsSuppressionModeValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationSbsSuppressionMode.setStatus('mandatory')
ovtxConfigurationSbsFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 36), SbsFiberTypeValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationSbsFiberType.setStatus('mandatory')
ovtxConfigurationSbsFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 37), SbsFiberLengthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationSbsFiberLength.setStatus('mandatory')
ovtxDisplayTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1), )
if mibBuilder.loadTexts: ovtxDisplayTable.setStatus('mandatory')
ovtxDisplayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1), ).setIndexNames((0, "BKTEL-HFC862-OVTX-V11-MIB", "ovtxNESlot"))
if mibBuilder.loadTexts: ovtxDisplayEntry.setStatus('mandatory')
ovtxDisplayRfInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplayRfInputValue.setStatus('mandatory')
ovtxDisplayLaserFrequencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplayLaserFrequencyMin.setStatus('mandatory')
ovtxDisplayLaserFrequencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplayLaserFrequencyMax.setStatus('mandatory')
ovtxDisplayLaserFrequencyStep = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplayLaserFrequencyStep.setStatus('mandatory')
ovtxDisplayOmiNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplayOmiNominal.setStatus('mandatory')
ovtxDisplaySatOmiNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplaySatOmiNominal.setStatus('mandatory')
ovtxDisplayRegulationState = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 7), RegulationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplayRegulationState.setStatus('mandatory')
ovtxDisplayExtendedCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplayExtendedCapabilities.setStatus('mandatory')
ovtxDisplayRfInputCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 9), RfInputCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplayRfInputCapabilities.setStatus('mandatory')
ovtxDisplaySatLnbSupplySupported = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 10), LnbSupplySupportedValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplaySatLnbSupplySupported.setStatus('mandatory')
ovtxDisplaySbsExtensionsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplaySbsExtensionsSupported.setStatus('mandatory')
ovtxDisplaySbsSuppressionModeSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplaySbsSuppressionModeSupported.setStatus('mandatory')
ovtxDisplaySbsFiberParametersSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplaySbsFiberParametersSupported.setStatus('mandatory')
mibBuilder.exportSymbols("BKTEL-HFC862-OVTX-V11-MIB", ovtxPlus5VLo=ovtxPlus5VLo, ovtxControl=ovtxControl, LaserOutputMode=LaserOutputMode, ovtx=ovtx, ovtxMinus12VLoLo=ovtxMinus12VLoLo, ovtxMinus12VHi=ovtxMinus12VHi, ovtxTemperatureHi=ovtxTemperatureHi, ovtxSatRfGainMeasuredValue=ovtxSatRfGainMeasuredValue, ovtxMinus5VHiHi=ovtxMinus5VHiHi, ovtxStatesSbs1PllNotLocked=ovtxStatesSbs1PllNotLocked, ovtxConfigurationSbsSuppression=ovtxConfigurationSbsSuppression, ovtxConfigurationLaserFrequency=ovtxConfigurationLaserFrequency, ovtxConfigurationRfInputLimitLoLo=ovtxConfigurationRfInputLimitLoLo, ovtxSatOmiMeasuredLo=ovtxSatOmiMeasuredLo, ovtxPlus24VLo=ovtxPlus24VLo, ovtxStatesSatOmiOrRfgainHigh=ovtxStatesSatOmiOrRfgainHigh, ovtxRfInputLo=ovtxRfInputLo, ovtxConfigurationOmi=ovtxConfigurationOmi, ovtxCommonDescr=ovtxCommonDescr, ovtxConfigurationRfGain=ovtxConfigurationRfGain, ovtxDisplayOmiNominal=ovtxDisplayOmiNominal, ovtxControlEntry=ovtxControlEntry, ovtxDisplayExtendedCapabilities=ovtxDisplayExtendedCapabilities, ovtxPlus3p3VHiHi=ovtxPlus3p3VHiHi, ovtxRfGainMeasuredLo=ovtxRfGainMeasuredLo, ovtxTecCurrentRelHi=ovtxTecCurrentRelHi, ovtxOmiMeasuredHi=ovtxOmiMeasuredHi, ovtxStatesLaserAging=ovtxStatesLaserAging, SatAGCmode=SatAGCmode, ovtxStatesInputLow=ovtxStatesInputLow, ovtxConfigurationRfGainMeasuredLimitHi=ovtxConfigurationRfGainMeasuredLimitHi, ovtxConfigurationRfInputLimitHiHi=ovtxConfigurationRfInputLimitHiHi, ovtxPlus24VHi=ovtxPlus24VHi, ovtxStatesSatOmiOrRfgainLow=ovtxStatesSatOmiOrRfgainLow, ovtxDisplaySbsExtensionsSupported=ovtxDisplaySbsExtensionsSupported, ovtxTemperatureHiHi=ovtxTemperatureHiHi, ovtxDisplayTable=ovtxDisplayTable, ovtxStatesTecHigh=ovtxStatesTecHigh, ovtxCommonModuleWidth=ovtxCommonModuleWidth, ovtxStates=ovtxStates, ovtxSatOmiMeasuredLoLo=ovtxSatOmiMeasuredLoLo, ovtxStatesInternalAlarm=ovtxStatesInternalAlarm, ovtxStatesOutputLow=ovtxStatesOutputLow, ovtxControlTable=ovtxControlTable, ovtxPlus12VLoLo=ovtxPlus12VLoLo, ovtxPlus3p3VValue=ovtxPlus3p3VValue, ovtxCommonFirmwareId=ovtxCommonFirmwareId, ovtxStatesCommLoss=ovtxStatesCommLoss, ovtxStatesLaserTempLow=ovtxStatesLaserTempLow, ovtxDisplayRfInputValue=ovtxDisplayRfInputValue, ovtxRfGainMeasuredLoLo=ovtxRfGainMeasuredLoLo, ovtxStatesSatInputHigh=ovtxStatesSatInputHigh, ovtxOutputPowerLo=ovtxOutputPowerLo, ovtxConfigurationRedundancyMode=ovtxConfigurationRedundancyMode, ovtxSatRfInputLo=ovtxSatRfInputLo, ovtxTecCurrentRelHiHi=ovtxTecCurrentRelHiHi, SbsSuppressionModeValue=SbsSuppressionModeValue, ovtxConfigurationRfGainMeasuredLimitLo=ovtxConfigurationRfGainMeasuredLimitLo, ovtxConfigurationTable=ovtxConfigurationTable, ovtxStatesLaserShutdown=ovtxStatesLaserShutdown, ovtxConfigurationRfInputLimitHi=ovtxConfigurationRfInputLimitHi, ovtxStatesRedundancySwitch=ovtxStatesRedundancySwitch, ovtxStatesMinus12VLow=ovtxStatesMinus12VLow, ovtxMeasuringValuesEntry=ovtxMeasuringValuesEntry, ovtxOmiMeasuredHiHi=ovtxOmiMeasuredHiHi, ovtxTecCurrentRelLoLo=ovtxTecCurrentRelLoLo, ovtxConfigurationSbsFiberType=ovtxConfigurationSbsFiberType, ovtxRfInputHiHi=ovtxRfInputHiHi, ovtxConfigurationOmiMeasuredLimitLo=ovtxConfigurationOmiMeasuredLimitLo, RegulationState=RegulationState, ovtxConfigurationRfInputLimitLo=ovtxConfigurationRfInputLimitLo, ovtxConfigurationEntry=ovtxConfigurationEntry, ovtxConfigurationSatSlope=ovtxConfigurationSatSlope, SbsFiberTypeValue=SbsFiberTypeValue, ovtxDisplayRfInputCapabilities=ovtxDisplayRfInputCapabilities, ovtxPlus3p3VLoLo=ovtxPlus3p3VLoLo, RfInputAlarmMode=RfInputAlarmMode, ovtxOmiMeasuredLo=ovtxOmiMeasuredLo, ovtxLaserCurrentRelValue=ovtxLaserCurrentRelValue, ovtxPlus12VValue=ovtxPlus12VValue, ovtxSatOmiMeasuredHiHi=ovtxSatOmiMeasuredHiHi, ovtxOutputPowerHiHi=ovtxOutputPowerHiHi, ovtxCommonTable=ovtxCommonTable, ovtxStatesSatLnbShortCircuit=ovtxStatesSatLnbShortCircuit, ovtxConfigurationOmiMeasuredLimitHiHi=ovtxConfigurationOmiMeasuredLimitHiHi, ovtxConfigurationOutputPwrLimitLoLo=ovtxConfigurationOutputPwrLimitLoLo, ovtxCommon=ovtxCommon, ovtxConfigurationRedundancyMask=ovtxConfigurationRedundancyMask, ovtxControlLaserOutputMode=ovtxControlLaserOutputMode, LnbSupplyValue=LnbSupplyValue, ovtxSatRfGainMeasuredLoLo=ovtxSatRfGainMeasuredLoLo, ovtxLaserCurrentRelLo=ovtxLaserCurrentRelLo, ovtxSatRfInputLoLo=ovtxSatRfInputLoLo, ovtxStatesLaserTempHigh=ovtxStatesLaserTempHigh, ovtxSatRfInputValue=ovtxSatRfInputValue, ovtxConfigurationRfInputAlarmMode=ovtxConfigurationRfInputAlarmMode, ovtxConfiguration=ovtxConfiguration, ovtxTemperatureLo=ovtxTemperatureLo, ovtxSatOmiMeasuredHi=ovtxSatOmiMeasuredHi, ovtxStatesPlus24VLow=ovtxStatesPlus24VLow, ovtxTecCurrentRelLo=ovtxTecCurrentRelLo, ovtxConfigurationOutputPwrLimitHiHi=ovtxConfigurationOutputPwrLimitHiHi, ovtxStatesPlus12VLow=ovtxStatesPlus12VLow, ovtxConfigurationOutputPwrLimitLo=ovtxConfigurationOutputPwrLimitLo, ovtxStatesFanLeft=ovtxStatesFanLeft, ovtxStatesPowerSupplyLeft=ovtxStatesPowerSupplyLeft, ovtxDisplaySatLnbSupplySupported=ovtxDisplaySatLnbSupplySupported, ovtxMinus12VHiHi=ovtxMinus12VHiHi, ovtxSatRfGainMeasuredHi=ovtxSatRfGainMeasuredHi, ovtxStatesEntry=ovtxStatesEntry, ovtxLaserCurrentRelLoLo=ovtxLaserCurrentRelLoLo, ovtxMinus5VLoLo=ovtxMinus5VLoLo, ovtxTemperatureValue=ovtxTemperatureValue, ovtxPlus5VHiHi=ovtxPlus5VHiHi, ovtxConfigurationOmiMeasuredLimitHi=ovtxConfigurationOmiMeasuredLimitHi, ovtxTecCurrentRelValue=ovtxTecCurrentRelValue, ovtxStatesOutputHigh=ovtxStatesOutputHigh, ovtxConfigurationChannelDistance=ovtxConfigurationChannelDistance, NESlotWriteValue=NESlotWriteValue, ovtxSatRfInputHiHi=ovtxSatRfInputHiHi, ovtxDisplay=ovtxDisplay, SbsFiberLengthValue=SbsFiberLengthValue, ovtxRfGainMeasuredHiHi=ovtxRfGainMeasuredHiHi, ovtxConfigurationSatRfGain=ovtxConfigurationSatRfGain, ovtxDisplayLaserFrequencyStep=ovtxDisplayLaserFrequencyStep, ovtxConfigurationOutputPwrLimitHi=ovtxConfigurationOutputPwrLimitHi, ovtxConfigurationCsoRegulationMode=ovtxConfigurationCsoRegulationMode, ovtxStatesSbs2Level=ovtxStatesSbs2Level, ovtxStatesOmiOrRfgainLow=ovtxStatesOmiOrRfgainLow, ovtxCommonNumberOfModules=ovtxCommonNumberOfModules, ovtxConfigurationOmiMeasuredLimitLoLo=ovtxConfigurationOmiMeasuredLimitLoLo, RedundancyMask=RedundancyMask, ovtxPlus24VHiHi=ovtxPlus24VHiHi, ovtxStatesPlus3p3VHigh=ovtxStatesPlus3p3VHigh, ovtxRfInputValue=ovtxRfInputValue, ovtxOutputPowerLoLo=ovtxOutputPowerLoLo, ovtxConfigurationSatModeAGC=ovtxConfigurationSatModeAGC, ovtxDisplaySbsFiberParametersSupported=ovtxDisplaySbsFiberParametersSupported, ovtxStatesFanRight=ovtxStatesFanRight, ovtxMinus5VValue=ovtxMinus5VValue, ovtxOutputPowerHi=ovtxOutputPowerHi, ovtxConfigurationSlope=ovtxConfigurationSlope, ovtxConfigurationFiberLength=ovtxConfigurationFiberLength, ovtxStatesSbs1Level=ovtxStatesSbs1Level, ovtxStatesTemperatureLow=ovtxStatesTemperatureLow, ovtxConfigurationModeAGC=ovtxConfigurationModeAGC, ovtxConfigurationSatLnbSupply=ovtxConfigurationSatLnbSupply, ovtxMinus12VValue=ovtxMinus12VValue, ovtxRfInputHi=ovtxRfInputHi, ovtxStatesPlus12VHigh=ovtxStatesPlus12VHigh, ovtxPlus5VValue=ovtxPlus5VValue, AGCmode=AGCmode, ovtxOmiMeasuredValue=ovtxOmiMeasuredValue, ovtxStatesBootloader=ovtxStatesBootloader, ovtxDisplaySatOmiNominal=ovtxDisplaySatOmiNominal, ovtxSatRfGainMeasuredHiHi=ovtxSatRfGainMeasuredHiHi, ovtxPlus5VLoLo=ovtxPlus5VLoLo, ovtxCommonType=ovtxCommonType, ovtxStatesMinus5VHigh=ovtxStatesMinus5VHigh, ovtxConfigurationRfGainMeasuredLimitHiHi=ovtxConfigurationRfGainMeasuredLimitHiHi, LnbSupplySupportedValue=LnbSupplySupportedValue, ovtxDisplayLaserFrequencyMin=ovtxDisplayLaserFrequencyMin, ovtxStatesPlus3p3VLow=ovtxStatesPlus3p3VLow, ovtxStatesMinus12VHigh=ovtxStatesMinus12VHigh, RedundancyMode=RedundancyMode, ovtxRfInputLoLo=ovtxRfInputLoLo, ovtxMeasuringValuesTable=ovtxMeasuringValuesTable, CsoRegulationMode=CsoRegulationMode, ovtxLaserCurrentRelHi=ovtxLaserCurrentRelHi, ovtxPlus3p3VLo=ovtxPlus3p3VLo, ovtxDisplayEntry=ovtxDisplayEntry, ovtxPlus3p3VHi=ovtxPlus3p3VHi, ovtxMinus5VLo=ovtxMinus5VLo, ovtxStatesSatInputLow=ovtxStatesSatInputLow, ovtxSatOmiMeasuredValue=ovtxSatOmiMeasuredValue, ovtxSatRfGainMeasuredLo=ovtxSatRfGainMeasuredLo, ovtxOmiMeasuredLoLo=ovtxOmiMeasuredLoLo, ovtxStatesPlus5VLow=ovtxStatesPlus5VLow, ovtxOutputPowerValue=ovtxOutputPowerValue, ovtxPlus12VHi=ovtxPlus12VHi, ovtxStatesSbs2PllNotLocked=ovtxStatesSbs2PllNotLocked, ovtxPlus12VLo=ovtxPlus12VLo, ovtxConfigurationSbsFiberLength=ovtxConfigurationSbsFiberLength, ovtxConfigurationRfGainMeasuredLimitLoLo=ovtxConfigurationRfGainMeasuredLimitLoLo, ovtxDisplayLaserFrequencyMax=ovtxDisplayLaserFrequencyMax, ovtxRfGainMeasuredHi=ovtxRfGainMeasuredHi, ovtxStatesPowerSupplyRight=ovtxStatesPowerSupplyRight, ovtxNESlot=ovtxNESlot, ovtxSatRfInputHi=ovtxSatRfInputHi, ovtxControlModuleLedBlink=ovtxControlModuleLedBlink, ovtxConfigurationSbsSuppressionMode=ovtxConfigurationSbsSuppressionMode, ovtxPlus5VHi=ovtxPlus5VHi, ovtxDisplayRegulationState=ovtxDisplayRegulationState, ovtxStatesTable=ovtxStatesTable, ovtxStatesPlus24VHigh=ovtxStatesPlus24VHigh, ovtxStatesOmiOrRfgainHigh=ovtxStatesOmiOrRfgainHigh, ovtxPlus12VHiHi=ovtxPlus12VHiHi, ovtxStatesTemperatureHigh=ovtxStatesTemperatureHigh, ovtxControlReset=ovtxControlReset, RfInputCapabilities=RfInputCapabilities, ovtxLaserCurrentRelHiHi=ovtxLaserCurrentRelHiHi, ovtxStatesInputHigh=ovtxStatesInputHigh, ovtxConfigurationNESlotWrite=ovtxConfigurationNESlotWrite, ovtxCommonEntry=ovtxCommonEntry, ovtxDisplaySbsSuppressionModeSupported=ovtxDisplaySbsSuppressionModeSupported, ovtxPlus24VValue=ovtxPlus24VValue, ovtxPlus24VLoLo=ovtxPlus24VLoLo, ovtxStatesInitializing=ovtxStatesInitializing, ovtxRfGainMeasuredValue=ovtxRfGainMeasuredValue, ovtxMinus5VHi=ovtxMinus5VHi, ovtxMinus12VLo=ovtxMinus12VLo, ovtxConfigurationSatOmi=ovtxConfigurationSatOmi, ovtxStatesPlus5VHigh=ovtxStatesPlus5VHigh, ovtxMeasuringValues=ovtxMeasuringValues, ovtxStatesMinus5VLow=ovtxStatesMinus5VLow, ovtxTemperatureLoLo=ovtxTemperatureLoLo)
