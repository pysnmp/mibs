#
# PySNMP MIB module A10-AX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/a10/A10-AX-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:03:57 2024
# On host fv-az883-299 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
a10Mgmt, = mibBuilder.importSymbols("A10-COMMON-MIB", "a10Mgmt")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
InetAddressType, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, iso, Bits, ModuleIdentity, TimeTicks, Integer32, Unsigned32, NotificationType, IpAddress, Gauge32, MibIdentifier, Counter32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "Bits", "ModuleIdentity", "TimeTicks", "Integer32", "Unsigned32", "NotificationType", "IpAddress", "Gauge32", "MibIdentifier", "Counter32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString")
axMgmt = ModuleIdentity((1, 3, 6, 1, 4, 1, 22610, 2, 4))
if mibBuilder.loadTexts: axMgmt.setLastUpdated('200705071327Z')
if mibBuilder.loadTexts: axMgmt.setOrganization('A10 Networks, Inc.')
axSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1))
axLogging = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2))
axApp = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3))
acosRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 100))
axSysVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 1))
axSysMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 2))
axSysCpu = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3))
axSysDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 4))
axSysHwInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5))
axSysInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 6))
axNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7))
axSysPrimaryVersionOnDisk = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysPrimaryVersionOnDisk.setStatus('current')
axSysSecondaryVersionOnDisk = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysSecondaryVersionOnDisk.setStatus('current')
axSysPrimaryVersionOnCF = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysPrimaryVersionOnCF.setStatus('current')
axSysSecondaryVersionOnCF = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysSecondaryVersionOnCF.setStatus('current')
axSysMemoryTotal = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysMemoryTotal.setStatus('current')
axSysMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysMemoryUsage.setStatus('current')
axSysCpuNumber = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuNumber.setStatus('current')
axSysCpuTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 2), )
if mibBuilder.loadTexts: axSysCpuTable.setStatus('current')
axSysCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axSysCpuIndex"))
if mibBuilder.loadTexts: axSysCpuEntry.setStatus('current')
axSysCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuIndex.setStatus('current')
axSysCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsage.setStatus('current')
axSysCpuUsageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsageValue.setStatus('current')
axSysCpuCtrlCpuFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuCtrlCpuFlag.setStatus('current')
axSysAverageCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysAverageCpuUsage.setStatus('current')
axSysAverageControlCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysAverageControlCpuUsage.setStatus('current')
axSysAverageDataCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysAverageDataCpuUsage.setStatus('current')
axSysCpuUsageTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 6), )
if mibBuilder.loadTexts: axSysCpuUsageTable.setStatus('current')
axSysCpuUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 6, 1), ).setIndexNames((0, "A10-AX-MIB", "axSysCpuIndexInUsage"), (0, "A10-AX-MIB", "axSysCpuUsagePeriodIndex"))
if mibBuilder.loadTexts: axSysCpuUsageEntry.setStatus('current')
axSysCpuIndexInUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuIndexInUsage.setStatus('current')
axSysCpuUsagePeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsagePeriodIndex.setStatus('current')
axSysCpuUsageValueAtPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsageValueAtPeriod.setStatus('current')
axSysCpuUsageCtrlCpuFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsageCtrlCpuFlag.setStatus('current')
axSysCpuUsagePerPartitionTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 7), )
if mibBuilder.loadTexts: axSysCpuUsagePerPartitionTable.setStatus('current')
axSysCpuUsagePerPartitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 7, 1), ).setIndexNames((0, "A10-AX-MIB", "axSysCpuIndexInUsagePerPartition"), (0, "A10-AX-MIB", "axSysCpuUsagePerPartitionPeriodIndex"), (0, "A10-AX-MIB", "axSysCpuUsagePartitionName"))
if mibBuilder.loadTexts: axSysCpuUsagePerPartitionEntry.setStatus('current')
axSysCpuIndexInUsagePerPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuIndexInUsagePerPartition.setStatus('current')
axSysCpuUsagePerPartitionPeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsagePerPartitionPeriodIndex.setStatus('current')
axSysCpuUsagePartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsagePartitionName.setStatus('current')
axSysCpuUsagePerPartitionValueAtPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsagePerPartitionValueAtPeriod.setStatus('current')
axSysCpuUsagePerPartitionCtrlCpuFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsagePerPartitionCtrlCpuFlag.setStatus('current')
axSysDiskTotalSpace = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysDiskTotalSpace.setStatus('current')
axSysDiskFreeSpace = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysDiskFreeSpace.setStatus('current')
axSysHwPhySystemTemp = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysHwPhySystemTemp.setStatus('current')
axSysHwFan1Speed = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysHwFan1Speed.setStatus('deprecated')
axSysHwFan2Speed = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysHwFan2Speed.setStatus('deprecated')
axSysHwFan3Speed = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysHwFan3Speed.setStatus('deprecated')
axSysHwPhySystemTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("failed", 0), ("low-med", 1), ("med-med", 2), ("med-high", 3), ("ok", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysHwPhySystemTempStatus.setStatus('current')
axSysLowerOrLeftPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -1))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysLowerOrLeftPowerSupplyStatus.setStatus('deprecated')
axSysUpperOrRightPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -1))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysUpperOrRightPowerSupplyStatus.setStatus('deprecated')
axSysFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 9), )
if mibBuilder.loadTexts: axSysFanStatusTable.setStatus('current')
axSysFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 9, 1), ).setIndexNames((0, "A10-AX-MIB", "axFanIndex"))
if mibBuilder.loadTexts: axSysFanStatusEntry.setStatus('current')
axFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFanIndex.setStatus('current')
axFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFanName.setStatus('current')
axFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, -2, -1))).clone(namedValues=NamedValues(("failed", 0), ("okFixedHigh", 4), ("okLowMed", 5), ("okMedMed", 6), ("okMedHigh", 7), ("notReady", -2), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFanStatus.setStatus('current')
axFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFanSpeed.setStatus('current')
axPowerSupplyVoltageTotal = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPowerSupplyVoltageTotal.setStatus('current')
axPowerSupplyVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 11), )
if mibBuilder.loadTexts: axPowerSupplyVoltageTable.setStatus('current')
axPowerSupplyVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 11, 1), ).setIndexNames((0, "A10-AX-MIB", "axPowerSupplyVoltageIndex"))
if mibBuilder.loadTexts: axPowerSupplyVoltageEntry.setStatus('current')
axPowerSupplyVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPowerSupplyVoltageIndex.setStatus('current')
axPowerSupplyVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("normal", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPowerSupplyVoltageStatus.setStatus('current')
axPowerSupplyVoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPowerSupplyVoltageDescription.setStatus('current')
axSysPowerSupplyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 12), )
if mibBuilder.loadTexts: axSysPowerSupplyStatusTable.setStatus('current')
axSysPowerSupplyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 12, 1), ).setIndexNames((0, "A10-AX-MIB", "axPowerSupplyIndex"))
if mibBuilder.loadTexts: axSysPowerSupplyStatusEntry.setStatus('current')
axPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPowerSupplyIndex.setStatus('current')
axPowerSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPowerSupplyName.setStatus('current')
axPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, -1))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("absent", 2), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPowerSupplyStatus.setStatus('current')
axSysStartupMode = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 0))).clone(namedValues=NamedValues(("primaryDisk", 1), ("secondaryDisk", 2), ("primaryCF", 3), ("secondaryCF", 4), ("unknown", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysStartupMode.setStatus('current')
axSysSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 6, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysSerialNumber.setStatus('current')
axSysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 6, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysFirmwareVersion.setStatus('current')
axSysAFleXEngineVersion = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 6, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysAFleXEngineVersion.setStatus('current')
axInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1))
axVlans = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2))
axTrunks = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3))
axLayer3 = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100))
axInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1))
axInterfaceStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2))
axInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceCount.setStatus('current')
axInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2), )
if mibBuilder.loadTexts: axInterfaceTable.setStatus('current')
axInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axInterfaceIndex"))
if mibBuilder.loadTexts: axInterfaceEntry.setStatus('current')
axInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceIndex.setStatus('current')
axInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceName.setStatus('current')
axInterfaceMediaMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMediaMaxSpeed.setStatus('current')
axInterfaceMediaMaxDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("half", 1), ("full", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMediaMaxDuplex.setStatus('current')
axInterfaceMediaActiveSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMediaActiveSpeed.setStatus('current')
axInterfaceMediaActiveDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("half", 1), ("full", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMediaActiveDuplex.setStatus('current')
axInterfaceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 7), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMacAddr.setStatus('current')
axInterfaceMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMtu.setStatus('current')
axInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceAdminStatus.setStatus('current')
axInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("up", 0), ("down", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatus.setStatus('current')
axInterfaceAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceAlias.setStatus('current')
axInterfaceFlowCtrlAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceFlowCtrlAdminStatus.setStatus('current')
axInterfaceFlowCtrlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceFlowCtrlOperStatus.setStatus('current')
axInterfaceStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1), )
if mibBuilder.loadTexts: axInterfaceStatTable.setStatus('current')
axInterfaceStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axInterfaceStatIndex"))
if mibBuilder.loadTexts: axInterfaceStatEntry.setStatus('current')
axInterfaceStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatIndex.setStatus('current')
axInterfaceStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatPktsIn.setStatus('current')
axInterfaceStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatBytesIn.setStatus('current')
axInterfaceStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatPktsOut.setStatus('current')
axInterfaceStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatBytesOut.setStatus('current')
axInterfaceStatMcastIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatMcastIn.setStatus('current')
axInterfaceStatMcastOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatMcastOut.setStatus('current')
axInterfaceStatErrorsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatErrorsIn.setStatus('current')
axInterfaceStatErrorsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatErrorsOut.setStatus('current')
axInterfaceStatDropsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatDropsIn.setStatus('current')
axInterfaceStatDropsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatDropsOut.setStatus('current')
axInterfaceStatCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatCollisions.setStatus('current')
axInterfaceStatBitsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatBitsPerSecIn.setStatus('current')
axInterfaceStatPktsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatPktsPerSecIn.setStatus('current')
axInterfaceStatUtilPercentIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatUtilPercentIn.setStatus('current')
axInterfaceStatBitsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatBitsPerSecOut.setStatus('current')
axInterfaceStatPktsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatPktsPerSecOut.setStatus('current')
axInterfaceStatUtilPercentOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatUtilPercentOut.setStatus('current')
axVlanCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1))
axVlanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 1), )
if mibBuilder.loadTexts: axVlanCfgTable.setStatus('current')
axVlanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axVlanId"))
if mibBuilder.loadTexts: axVlanCfgEntry.setStatus('current')
axVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanId.setStatus('current')
axVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanName.setStatus('current')
axVlanRouterInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanRouterInterface.setStatus('current')
axVlanCfgMemberTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 2), )
if mibBuilder.loadTexts: axVlanCfgMemberTable.setStatus('current')
axVlanCfgMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axVlanMemberVlanId"), (0, "A10-AX-MIB", "axVlanMemberIntfId"))
if mibBuilder.loadTexts: axVlanCfgMemberEntry.setStatus('current')
axVlanMemberVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanMemberVlanId.setStatus('current')
axVlanMemberIntfId = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanMemberIntfId.setStatus('current')
axVlanMemberTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanMemberTagged.setStatus('current')
axTrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 1))
axTrunkStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2))
axTrunkCfgMembers = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 3))
axTrunkTotal = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkTotal.setStatus('current')
axTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 1, 2), )
if mibBuilder.loadTexts: axTrunkTable.setStatus('current')
axTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axTrunkName"))
if mibBuilder.loadTexts: axTrunkEntry.setStatus('current')
axTrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkName.setStatus('current')
axTrunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatus.setStatus('current')
axTrunkDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkDescription.setStatus('current')
axTrunkTypeLacpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkTypeLacpEnabled.setStatus('current')
axTrunkCfgMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkCfgMemberCount.setStatus('current')
axTrunkPortThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkPortThreshold.setStatus('current')
axTrunkPortThresholdTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkPortThresholdTimer.setStatus('current')
axTrunkStatTotal = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatTotal.setStatus('current')
axTrunkStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2), )
if mibBuilder.loadTexts: axTrunkStatTable.setStatus('current')
axTrunkStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axTrunkStatName"))
if mibBuilder.loadTexts: axTrunkStatEntry.setStatus('current')
axTrunkStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatName.setStatus('current')
axTrunkStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatPktsIn.setStatus('current')
axTrunkStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatBytesIn.setStatus('current')
axTrunkStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatPktsOut.setStatus('current')
axTrunkStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatBytesOut.setStatus('current')
axTrunkStatMcastIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatMcastIn.setStatus('current')
axTrunkStatMcastOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatMcastOut.setStatus('current')
axTrunkStatErrorsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatErrorsIn.setStatus('current')
axTrunkStatErrorsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatErrorsOut.setStatus('current')
axTrunkStatDropsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatDropsIn.setStatus('current')
axTrunkStatDropsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatDropsOut.setStatus('current')
axTrunkCfgMemberTotal = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkCfgMemberTotal.setStatus('current')
axTrunkCfgMemberTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 3, 2), )
if mibBuilder.loadTexts: axTrunkCfgMemberTable.setStatus('current')
axTrunkCfgMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 3, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axTrunkCfgMemberTrunkName"), (0, "A10-AX-MIB", "axTrunkCfgMemberName"))
if mibBuilder.loadTexts: axTrunkCfgMemberEntry.setStatus('current')
axTrunkCfgMemberTrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkCfgMemberTrunkName.setStatus('current')
axTrunkCfgMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkCfgMemberName.setStatus('current')
axTrunkCfgMemberAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkCfgMemberAdminStatus.setStatus('current')
axTrunkCfgMemberOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkCfgMemberOperStatus.setStatus('current')
axLogBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 1), Integer32().clone(100000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogBufferSize.setStatus('current')
axLogBufferPri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, -1))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7), ("notDefined", -1))).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogBufferPri.setStatus('current')
axLogConsolePri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, -1))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7), ("notDefined", -1))).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogConsolePri.setStatus('current')
axLogEmailPri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, -1))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7), ("notDefined", -1))).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogEmailPri.setStatus('current')
axLogEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogEmailAddr.setStatus('current')
axLogSyslogPri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, -1))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7), ("notDefined", -1))).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogSyslogPri.setStatus('current')
axLogSyslogHostTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 9), )
if mibBuilder.loadTexts: axLogSyslogHostTable.setStatus('current')
axLogSyslogHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 9, 1), ).setIndexNames((0, "A10-AX-MIB", "axLogSyslogHostIndex"))
if mibBuilder.loadTexts: axLogSyslogHostEntry.setStatus('current')
axLogSyslogHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogSyslogHostIndex.setStatus('current')
axLogSyslogHost = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogSyslogHost.setStatus('current')
axLogSyslogPort = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(514)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogSyslogPort.setStatus('current')
axLogMonitorPri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, -1))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7), ("notDefined", -1))).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogMonitorPri.setStatus('current')
axArpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100, 1))
axArpEntryTotal = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axArpEntryTotal.setStatus('current')
axArpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100, 1, 2), )
if mibBuilder.loadTexts: axArpInfoTable.setStatus('current')
axArpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axArpIpAddr"))
if mibBuilder.loadTexts: axArpInfoEntry.setStatus('current')
axArpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axArpIpAddr.setStatus('current')
axArpMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100, 1, 2, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axArpMacAddr.setStatus('current')
axArpEntryVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axArpEntryVlan.setStatus('current')
axArpEntrySourceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axArpEntrySourceInterface.setStatus('current')
axArpEntrySourceIntName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axArpEntrySourceIntName.setStatus('current')
axArpEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("incomplete", 0), ("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axArpEntryType.setStatus('current')
axArpEntryAging = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axArpEntryAging.setStatus('current')
axAppGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1))
axServers = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2))
axServiceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3))
axVirtualServers = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4))
axConnReuseStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5))
axFastHttpProxyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6))
axHttpProxyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7))
axTcpProxyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8))
axSslStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9))
axFtpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10))
axNetStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11))
axNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12))
axSmtpProxyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13))
axSslProxyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14))
axPersistentStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15))
axSwitchStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16))
axHA = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17))
axIpNatStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18))
axSessionStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19))
axGslb = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20))
axNetworkingStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 21))
axAppGlobalSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1))
axAppGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2))
axGlobalAppBuffer = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 3))
axL3vStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4))
axServer = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1))
axServerStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2))
axServerPort = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3))
axServerPortStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4))
axServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1))
axServiceGroupStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2))
axServiceGroupMember = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3))
axServiceGroupMemberStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4))
axVirtualServer = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1))
axVirtualServerStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2))
axVirtualServerPort = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3))
axVirtualServerPortStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4))
axVirtualServerNameStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5))
axVirtualServerNamePortStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6))
axHAGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1))
axHAGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2))
axHAFloatingIP = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3))
axAppGlobalSystemResourceUsageTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1), )
if mibBuilder.loadTexts: axAppGlobalSystemResourceUsageTable.setStatus('current')
axAppGlobalSystemResourceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axAppGlobalSystemResourceIndex"))
if mibBuilder.loadTexts: axAppGlobalSystemResourceUsageEntry.setStatus('current')
axAppGlobalSystemResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalSystemResourceIndex.setStatus('current')
axAppGlobalSystemResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalSystemResourceName.setStatus('current')
axAppGlobalAllowedCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalAllowedCurrentValue.setStatus('current')
axAppGlobalAllowedDefaultValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalAllowedDefaultValue.setStatus('current')
axAppGlobalAllowedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalAllowedMinValue.setStatus('current')
axAppGlobalAllowedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalAllowedMaxValue.setStatus('current')
axAppGlobalTotalCurrentConnections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalCurrentConnections.setStatus('current')
axAppGlobalTotalNewConnections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalNewConnections.setStatus('current')
axAppGlobalTotalNewL4Connections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalNewL4Connections.setStatus('current')
axAppGlobalTotalNewL7Connections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalNewL7Connections.setStatus('current')
axAppGlobalTotalNewIPNatConnections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalNewIPNatConnections.setStatus('current')
axAppGlobalTotalSSLConnections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalSSLConnections.setStatus('current')
axAppGlobalTotalL7Requests = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalL7Requests.setStatus('current')
axGlobalAppPacketDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGlobalAppPacketDrop.setStatus('current')
axGlobalTotalAppPacketDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGlobalTotalAppPacketDrop.setStatus('current')
axGlobalTotalL4Session = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGlobalTotalL4Session.setStatus('current')
axGlobalTotalThroughput = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGlobalTotalThroughput.setStatus('current')
axAppGlobalTotalCurrentConnectionsInteger = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalCurrentConnectionsInteger.setStatus('current')
axGlobalTotalL4SessionInteger = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGlobalTotalL4SessionInteger.setStatus('current')
axAppGlobalBufferConfigLimit = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalBufferConfigLimit.setStatus('current')
axAppGlobalBufferCurrentUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalBufferCurrentUsage.setStatus('current')
axL3vGlobalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4, 1), )
if mibBuilder.loadTexts: axL3vGlobalStatsTable.setStatus('current')
axL3vGlobalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axL3vGlobalStatsPartitionName"))
if mibBuilder.loadTexts: axL3vGlobalStatsEntry.setStatus('current')
axL3vGlobalStatsPartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axL3vGlobalStatsPartitionName.setStatus('current')
axL3vGlobalStatsTotalThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axL3vGlobalStatsTotalThroughput.setStatus('current')
axL3vGlobalStatsTotalCurrentConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axL3vGlobalStatsTotalCurrentConnections.setStatus('current')
axL3vGlobalStatsTotalNewConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axL3vGlobalStatsTotalNewConnections.setStatus('current')
axL3vGlobalStatsTotalNewL4Connections = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axL3vGlobalStatsTotalNewL4Connections.setStatus('current')
axL3vGlobalStatsTotalNewL7Connections = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axL3vGlobalStatsTotalNewL7Connections.setStatus('current')
axL3vGlobalStatsTotalSslConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axL3vGlobalStatsTotalSslConnections.setStatus('current')
axL3vGlobalStatsTotalL7Requests = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axL3vGlobalStatsTotalL7Requests.setStatus('current')
axL3vGlobalStatsTotalL4Sessions = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axL3vGlobalStatsTotalL4Sessions.setStatus('current')
axServerCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerCount.setStatus('current')
axServerTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2), )
if mibBuilder.loadTexts: axServerTable.setStatus('current')
axServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axServerName"))
if mibBuilder.loadTexts: axServerEntry.setStatus('current')
axServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerName.setStatus('current')
axServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerAddress.setStatus('current')
axServerEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerEnabledState.setStatus('current')
axServerHealthMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerHealthMonitor.setStatus('current')
axServerMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerMonitorState.setStatus('current')
axServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerAddressType.setStatus('current')
axServerStatCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatCount.setStatus('current')
axServerStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2), )
if mibBuilder.loadTexts: axServerStatTable.setStatus('current')
axServerStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axServerStatAddress"))
if mibBuilder.loadTexts: axServerStatEntry.setStatus('current')
axServerStatAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatAddress.setStatus('current')
axServerStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatName.setStatus('current')
axServerStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerPktsIn.setStatus('current')
axServerStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerBytesIn.setStatus('current')
axServerStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerPktsOut.setStatus('current')
axServerStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerBytesOut.setStatus('current')
axServerStatServerTotalConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerTotalConns.setStatus('current')
axServerStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerCurConns.setStatus('current')
axServerStatServerPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerPersistConns.setStatus('deprecated')
axServerStatServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerStatus.setStatus('current')
axServerStatServerTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerTotalL7Reqs.setStatus('current')
axServerStatServerTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerTotalCurrL7Reqs.setStatus('current')
axServerStatServerTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerTotalSuccL7Reqs.setStatus('current')
axServerStatServerPeakConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerPeakConns.setStatus('current')
axServerStatAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 15), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatAddressType.setStatus('current')
axServerPortTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1), )
if mibBuilder.loadTexts: axServerPortTable.setStatus('current')
axServerPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axServerNameInPort"), (0, "A10-AX-MIB", "axServerPortType"), (0, "A10-AX-MIB", "axServerPortNum"))
if mibBuilder.loadTexts: axServerPortEntry.setStatus('current')
axServerNameInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerNameInPort.setStatus('current')
axServerPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortType.setStatus('current')
axServerPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortNum.setStatus('current')
axServerAddressInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerAddressInPort.setStatus('current')
axServerPortEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortEnabledState.setStatus('current')
axServerPortHealthMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortHealthMonitor.setStatus('current')
axServerPortConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortConnLimit.setStatus('current')
axServerPortWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortWeight.setStatus('current')
axServerPortMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortMonitorState.setStatus('current')
axServerAddressInPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerAddressInPortType.setStatus('current')
axServerPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1), )
if mibBuilder.loadTexts: axServerPortStatTable.setStatus('current')
axServerPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axServerStatAddrInPort"), (0, "A10-AX-MIB", "axServerStatPortType"), (0, "A10-AX-MIB", "axServerStatPortNum"))
if mibBuilder.loadTexts: axServerPortStatEntry.setStatus('current')
axServerStatAddrInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatAddrInPort.setStatus('current')
axServerStatPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatPortType.setStatus('current')
axServerStatPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatPortNum.setStatus('current')
axServerStatNameInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatNameInPort.setStatus('current')
axServerPortStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatPktsIn.setStatus('current')
axServerPortStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatBytesIn.setStatus('current')
axServerPortStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatPktsOut.setStatus('current')
axServerPortStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatBytesOut.setStatus('current')
axServerPortStatTotalConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatTotalConns.setStatus('current')
axServerPortStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatCurConns.setStatus('current')
axServerPortStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatPersistConns.setStatus('deprecated')
axServerPortStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatStatus.setStatus('current')
axServerPortStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatTotalL7Reqs.setStatus('current')
axServerPortStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatTotalCurrL7Reqs.setStatus('current')
axServerPortStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatTotalSuccL7Reqs.setStatus('current')
axServerPortStatPeakConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatPeakConns.setStatus('current')
axServerStatAddrInPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 17), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatAddrInPortType.setStatus('current')
axServiceGroupCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupCount.setStatus('current')
axServiceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2), )
if mibBuilder.loadTexts: axServiceGroupTable.setStatus('current')
axServiceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axServiceGroupName"))
if mibBuilder.loadTexts: axServiceGroupEntry.setStatus('current')
axServiceGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupName.setStatus('current')
axServiceGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupType.setStatus('current')
axServiceGroupLbAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18))).clone(namedValues=NamedValues(("roundRobin", 0), ("weightRoundRobin", 1), ("leastConnection", 2), ("weightLeastConnection", 3), ("serviceLeastConnection", 4), ("serviceWeightLeastConnection", 5), ("fastResponseTime", 6), ("leastRequest", 7), ("roundRobinStrict", 8), ("sourceIpHashBasedStateless", 9), ("sourceIpOnlyHashBasedStateless", 10), ("destinationIpHashBasedStateless", 11), ("sourceDestinationIpHashBasedStateless", 12), ("perPacketRoundRobinStateless", 13), ("sourceIpOnlyHash", 15), ("sourceIpWithPortHash", 16), ("destinationIpOnlyHash", 17), ("destinationIpWithPortHash", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupLbAlgorithm.setStatus('current')
axServiceGroupDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allUp", 1), ("functionalUp", 2), ("partialUp", 3), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupDisplayStatus.setStatus('current')
axServiceGroupStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1), )
if mibBuilder.loadTexts: axServiceGroupStatTable.setStatus('current')
axServiceGroupStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axServiceGroupStatName"))
if mibBuilder.loadTexts: axServiceGroupStatEntry.setStatus('current')
axServiceGroupStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatName.setStatus('current')
axServiceGroupStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatPktsIn.setStatus('current')
axServiceGroupStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatBytesIn.setStatus('current')
axServiceGroupStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatPktsOut.setStatus('current')
axServiceGroupStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatBytesOut.setStatus('current')
axServiceGroupStatTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatTotConns.setStatus('current')
axServiceGroupStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatCurConns.setStatus('current')
axServiceGroupStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatPersistConns.setStatus('deprecated')
axServiceGroupStatDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allUp", 1), ("functionalUp", 2), ("partialUp", 3), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatDisplayStatus.setStatus('current')
axServiceGroupStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatTotalL7Reqs.setStatus('current')
axServiceGroupStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatTotalCurrL7Reqs.setStatus('current')
axServiceGroupStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatTotalSuccL7Reqs.setStatus('current')
axServiceGroupStatPeakConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatPeakConns.setStatus('current')
axServiceGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1), )
if mibBuilder.loadTexts: axServiceGroupMemberTable.setStatus('current')
axServiceGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axServiceGroupNameInMember"), (0, "A10-AX-MIB", "axServiceGroupMemberAddrType"), (0, "A10-AX-MIB", "axServerNameInServiceGroupMember"), (0, "A10-AX-MIB", "axServerPortNumInServiceGroupMember"))
if mibBuilder.loadTexts: axServiceGroupMemberEntry.setStatus('current')
axServiceGroupNameInMember = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupNameInMember.setStatus('current')
axServiceGroupMemberAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberAddrType.setStatus('current')
axServerNameInServiceGroupMember = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerNameInServiceGroupMember.setStatus('current')
axServerPortNumInServiceGroupMember = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortNumInServiceGroupMember.setStatus('current')
axServerPortPriorityInServiceGroupMember = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortPriorityInServiceGroupMember.setStatus('current')
axServerPortStatusInServiceGroupMember = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatusInServiceGroupMember.setStatus('current')
axServiceGroupMemberStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1), )
if mibBuilder.loadTexts: axServiceGroupMemberStatTable.setStatus('current')
axServiceGroupMemberStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axServiceGroupMemberStatName"), (0, "A10-AX-MIB", "axServiceGroupMemberStatAddrType"), (0, "A10-AX-MIB", "axServerNameInServiceGroupMemberStat"), (0, "A10-AX-MIB", "axServerPortNumInServiceGroupMemberStat"))
if mibBuilder.loadTexts: axServiceGroupMemberStatEntry.setStatus('current')
axServiceGroupMemberStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatName.setStatus('current')
axServiceGroupMemberStatAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatAddrType.setStatus('current')
axServerNameInServiceGroupMemberStat = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerNameInServiceGroupMemberStat.setStatus('current')
axServerPortNumInServiceGroupMemberStat = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortNumInServiceGroupMemberStat.setStatus('current')
axServiceGroupMemberStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatPktsIn.setStatus('current')
axServiceGroupMemberStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatBytesIn.setStatus('current')
axServiceGroupMemberStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatPktsOut.setStatus('current')
axServiceGroupMemberStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatBytesOut.setStatus('current')
axServiceGroupMemberStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatPersistConns.setStatus('deprecated')
axServiceGroupMemberStatTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatTotConns.setStatus('current')
axServiceGroupMemberStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatCurConns.setStatus('current')
axServerPortStatusInServiceGroupMemberStat = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatusInServiceGroupMemberStat.setStatus('current')
axServiceGroupMemberStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatTotalL7Reqs.setStatus('current')
axServiceGroupMemberStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatTotalCurrL7Reqs.setStatus('current')
axServiceGroupMemberStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatTotalSuccL7Reqs.setStatus('current')
axServiceGroupMemberStatResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatResponseTime.setStatus('current')
axServiceGroupMemberStatPeakConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatPeakConns.setStatus('current')
axVirtualServerCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerCount.setStatus('current')
axVirtualServerTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2), )
if mibBuilder.loadTexts: axVirtualServerTable.setStatus('current')
axVirtualServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axVirtualServerName"))
if mibBuilder.loadTexts: axVirtualServerEntry.setStatus('current')
axVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerName.setStatus('current')
axVirtualServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerAddress.setStatus('current')
axVirtualServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerEnabled.setStatus('current')
axVirtualServerHAGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerHAGroup.setStatus('current')
axVirtualServerDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("allUp", 1), ("functionalUp", 2), ("partialUp", 3), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerDisplayStatus.setStatus('current')
axVirtualServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerAddressType.setStatus('current')
axVirtualServerStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1), )
if mibBuilder.loadTexts: axVirtualServerStatTable.setStatus('current')
axVirtualServerStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axVirtualServerStatAddress"))
if mibBuilder.loadTexts: axVirtualServerStatEntry.setStatus('current')
axVirtualServerStatAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatAddress.setStatus('current')
axVirtualServerStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatName.setStatus('current')
axVirtualServerStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPktsIn.setStatus('current')
axVirtualServerStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatBytesIn.setStatus('current')
axVirtualServerStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPktsOut.setStatus('current')
axVirtualServerStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatBytesOut.setStatus('current')
axVirtualServerStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPersistConns.setStatus('deprecated')
axVirtualServerStatTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatTotConns.setStatus('current')
axVirtualServerStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatCurConns.setStatus('current')
axVirtualServerStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatStatus.setStatus('current')
axVirtualServerStatDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("allUp", 1), ("functionalUp", 2), ("partialUp", 3), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatDisplayStatus.setStatus('current')
axVirtualServerStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatTotalL7Reqs.setStatus('current')
axVirtualServerStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatTotalCurrL7Reqs.setStatus('current')
axVirtualServerStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatTotalSuccL7Reqs.setStatus('current')
axVirtualServerStatPeakConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPeakConns.setStatus('current')
axVirtualServerStatAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 16), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatAddressType.setStatus('current')
axVirtualServerPortTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1), )
if mibBuilder.loadTexts: axVirtualServerPortTable.setStatus('current')
axVirtualServerPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axVirtualServerPortName"), (0, "A10-AX-MIB", "axVirtualServerPortType"), (0, "A10-AX-MIB", "axVirtualServerPortNum"))
if mibBuilder.loadTexts: axVirtualServerPortEntry.setStatus('current')
axVirtualServerPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortName.setStatus('current')
axVirtualServerPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 8, 9, 10, 12, 14, 15, 16, 17, 11, 19, 18, 5, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3), ("rtsp", 8), ("ftp", 9), ("mms", 10), ("fastHTTP", 12), ("http", 14), ("https", 15), ("sslProxy", 16), ("smtp", 17), ("sip", 11), ("sips", 19), ("sip-TCP", 18), ("others", 5), ("tcpProxy", 20), ("diameter", 21), ("dnsUdp", 22), ("tftp", 23), ("dnsTcp", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortType.setStatus('current')
axVirtualServerPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortNum.setStatus('current')
axVirtualServerPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortAddress.setStatus('current')
axVirtualServerPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortEnabled.setStatus('current')
axVirtualServerPortServiceGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortServiceGroup.setStatus('current')
axVirtualServerPortHaGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortHaGroupID.setStatus('current')
axVirtualServerPortPersistTemplateType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 0))).clone(namedValues=NamedValues(("cookiePersist", 1), ("sourcIPPersist", 2), ("destinationIPPersist", 3), ("sslIDPersist", 4), ("unknown", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortPersistTemplateType.setStatus('current')
axVirtualServerPortPersistTempl = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortPersistTempl.setStatus('current')
axVirtualServerPortTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortTemplate.setStatus('current')
axVirtualServerPortPolicyTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortPolicyTemplate.setStatus('current')
axVirtualServerPortTCPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortTCPTemplate.setStatus('current')
axVirtualServerPortHTTPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortHTTPTemplate.setStatus('current')
axVirtualServerPortRamCacheTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortRamCacheTemplate.setStatus('current')
axVirtualServerPortConnReuseTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortConnReuseTemplate.setStatus('current')
axVirtualServerPortTCPProxyTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortTCPProxyTemplate.setStatus('current')
axVirtualServerPortClientSSLTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortClientSSLTemplate.setStatus('current')
axVirtualServerPortServerSSLTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortServerSSLTemplate.setStatus('current')
axVirtualServerPortRTSPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortRTSPTemplate.setStatus('current')
axVirtualServerPortSMTPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortSMTPTemplate.setStatus('current')
axVirtualServerPortSIPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortSIPTemplate.setStatus('current')
axVirtualServerPortUDPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortUDPTemplate.setStatus('current')
axVirtualServerPortDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("disabled", 0), ("allUp", 1), ("functionalUp", 2), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortDisplayStatus.setStatus('current')
axVirtualServerPortAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 24), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortAddressType.setStatus('current')
axVirtualServerPortDiameterTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortDiameterTemplate.setStatus('current')
axVirtualServerPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1), )
if mibBuilder.loadTexts: axVirtualServerPortStatTable.setStatus('current')
axVirtualServerPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axVirtualServerPortStatAddress"), (0, "A10-AX-MIB", "axVirtualServerStatPortType"), (0, "A10-AX-MIB", "axVirtualServerStatPortNum"))
if mibBuilder.loadTexts: axVirtualServerPortStatEntry.setStatus('current')
axVirtualServerPortStatAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatAddress.setStatus('current')
axVirtualServerStatPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 8, 9, 10, 12, 14, 15, 16, 17, 11, 19, 18, 5, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3), ("rtsp", 8), ("ftp", 9), ("mms", 10), ("fastHTTP", 12), ("http", 14), ("https", 15), ("sslProxy", 16), ("smtp", 17), ("sip", 11), ("sips", 19), ("sip-tcp", 18), ("others", 5), ("tcpProxy", 20), ("diameter", 21), ("dnsUdp", 22), ("tftp", 23), ("dnsTcp", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPortType.setStatus('current')
axVirtualServerStatPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPortNum.setStatus('current')
axVirtualServerPortStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatName.setStatus('current')
axVirtualServerStatPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPortStatus.setStatus('current')
axVirtualServerPortStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatPktsIn.setStatus('current')
axVirtualServerPortStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatBytesIn.setStatus('current')
axVirtualServerPortStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatPktsOut.setStatus('current')
axVirtualServerPortStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatBytesOut.setStatus('current')
axVirtualServerPortStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatPersistConns.setStatus('deprecated')
axVirtualServerPortStatTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatTotConns.setStatus('current')
axVirtualServerPortStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatCurConns.setStatus('current')
axVirtualServerStatPortDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("disabled", 0), ("allUp", 1), ("functionalUp", 2), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPortDisplayStatus.setStatus('current')
axVirtualServerPortStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatTotalL7Reqs.setStatus('current')
axVirtualServerPortStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatTotalCurrL7Reqs.setStatus('current')
axVirtualServerPortStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatTotalSuccL7Reqs.setStatus('current')
axVirtualServerPortStatPeakConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatPeakConns.setStatus('current')
axVirtualServerPortStatAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 18), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatAddressType.setStatus('current')
axVirtualServerNameStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1), )
if mibBuilder.loadTexts: axVirtualServerNameStatTable.setStatus('current')
axVirtualServerNameStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axVirtualServerStatDisplayName"))
if mibBuilder.loadTexts: axVirtualServerNameStatEntry.setStatus('current')
axVirtualServerStatDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatDisplayName.setStatus('current')
axVirtualServerNameStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatPktsIn.setStatus('current')
axVirtualServerNameStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatBytesIn.setStatus('current')
axVirtualServerNameStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatPktsOut.setStatus('current')
axVirtualServerNameStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatBytesOut.setStatus('current')
axVirtualServerNameStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatPersistConns.setStatus('deprecated')
axVirtualServerNameStatTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatTotConns.setStatus('current')
axVirtualServerNameStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatCurConns.setStatus('current')
axVirtualServerNameStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatStatus.setStatus('current')
axVirtualServerNameStatDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("allUp", 1), ("functionalUp", 2), ("partialUp", 3), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatDisplayStatus.setStatus('current')
axVirtualServerNameStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatTotalL7Reqs.setStatus('current')
axVirtualServerNameStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatTotalCurrL7Reqs.setStatus('current')
axVirtualServerNameStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatTotalSuccL7Reqs.setStatus('current')
axVirtualServerNameStatPeakConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatPeakConns.setStatus('current')
axVirtualServerNamePortStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1), )
if mibBuilder.loadTexts: axVirtualServerNamePortStatTable.setStatus('current')
axVirtualServerNamePortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axVirtualServerNamePortStatName"), (0, "A10-AX-MIB", "axVirtualServerNameStatPortType"), (0, "A10-AX-MIB", "axVirtualServerNameStatPortNum"))
if mibBuilder.loadTexts: axVirtualServerNamePortStatEntry.setStatus('current')
axVirtualServerNamePortStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatName.setStatus('current')
axVirtualServerNameStatPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 8, 9, 10, 12, 14, 15, 16, 17, 11, 19, 18, 5, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3), ("rtsp", 8), ("ftp", 9), ("mms", 10), ("fastHTTP", 12), ("http", 14), ("https", 15), ("sslProxy", 16), ("smtp", 17), ("sip", 11), ("sips", 19), ("sip-tcp", 18), ("others", 5), ("tcpProxy", 20), ("diameter", 21), ("dnsUdp", 22), ("tftp", 23), ("dnsTcp", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatPortType.setStatus('current')
axVirtualServerNameStatPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatPortNum.setStatus('current')
axVirtualServerNameStatPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatPortStatus.setStatus('current')
axVirtualServerNamePortStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatPktsIn.setStatus('current')
axVirtualServerNamePortStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatBytesIn.setStatus('current')
axVirtualServerNamePortStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatPktsOut.setStatus('current')
axVirtualServerNamePortStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatBytesOut.setStatus('current')
axVirtualServerNamePortStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatPersistConns.setStatus('deprecated')
axVirtualServerNamePortStatTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatTotConns.setStatus('current')
axVirtualServerNamePortStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatCurConns.setStatus('current')
axVirtualServerNameStatPortDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("disabled", 0), ("allUp", 1), ("functionalUp", 2), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatPortDisplayStatus.setStatus('current')
axVirtualServerNamePortStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatTotalL7Reqs.setStatus('current')
axVirtualServerNamePortStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatTotalCurrL7Reqs.setStatus('current')
axVirtualServerNamePortStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatTotalSuccL7Reqs.setStatus('current')
axVirtualServerNamePortStatPeakConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatPeakConns.setStatus('current')
axConnReuseStatTotalOpenPersist = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalOpenPersist.setStatus('current')
axConnReuseStatTotalActivePersist = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalActivePersist.setStatus('current')
axConnReuseStatTotalEstablished = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalEstablished.setStatus('current')
axConnReuseStatTotalTerminated = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalTerminated.setStatus('current')
axConnReuseStatTotalBound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalBound.setStatus('current')
axConnReuseStatTotalUNBound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalUNBound.setStatus('current')
axConnReuseStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7), )
if mibBuilder.loadTexts: axConnReuseStatTable.setStatus('current')
axConnReuseStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1), ).setIndexNames((0, "A10-AX-MIB", "axConnReuseStatCpuIndex"))
if mibBuilder.loadTexts: axConnReuseStatEntry.setStatus('current')
axConnReuseStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatCpuIndex.setStatus('current')
axConnReuseStatOpenPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatOpenPersist.setStatus('current')
axConnReuseStatActivePersist = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatActivePersist.setStatus('current')
axConnReuseStatTotalEst = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalEst.setStatus('current')
axConnReuseStatTotalTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalTerm.setStatus('current')
axConnReuseStatTotalBind = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalBind.setStatus('current')
axConnReuseStatTotalUNBind = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalUNBind.setStatus('current')
axConnReuseStatTotalDelayedUNBind = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalDelayedUNBind.setStatus('current')
axConnReuseStatTotalLongRes = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalLongRes.setStatus('current')
axConnReuseStatTotalMissedRes = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalMissedRes.setStatus('current')
axConnReuseStatTotalDelayedUNBound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalDelayedUNBound.setStatus('current')
axConnReuseStatTotalLongResponse = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalLongResponse.setStatus('current')
axConnReuseStatTotalMissedResponse = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalMissedResponse.setStatus('current')
axFastHttpProxyStatTotalConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalConn.setStatus('current')
axFastHttpProxyStatTotalReq = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReq.setStatus('current')
axFastHttpProxyStatTotalSuccReq = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSuccReq.setStatus('current')
axFastHttpProxyStatTotalNoProxy = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalNoProxy.setStatus('current')
axFastHttpProxyStatTotalCRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalCRst.setStatus('current')
axFastHttpProxyStatTotalSRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSRst.setStatus('current')
axFastHttpProxyStatTotalNoTuple = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalNoTuple.setStatus('current')
axFastHttpProxyStatTotalReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReqErr.setStatus('current')
axFastHttpProxyStatTotalSvrSelErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSvrSelErr.setStatus('current')
axFastHttpProxyStatTotalFwdReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalFwdReqErr.setStatus('current')
axFastHttpProxyStatTotalFwdDataReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalFwdDataReqErr.setStatus('current')
axFastHttpProxyStatTotalReqReXmit = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReqReXmit.setStatus('current')
axFastHttpProxyStatTotalReqPktOutOrder = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReqPktOutOrder.setStatus('current')
axFastHttpProxyStatTotalSvrReSel = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSvrReSel.setStatus('current')
axFastHttpProxyStatTotalPreMatureClose = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalPreMatureClose.setStatus('current')
axFastHttpProxyStatTotalSvrConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSvrConn.setStatus('current')
axFastHttpProxyStatTotalSNATErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSNATErr.setStatus('current')
axFastHttpProxyStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18), )
if mibBuilder.loadTexts: axFastHttpProxyStatTable.setStatus('current')
axFastHttpProxyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1), ).setIndexNames((0, "A10-AX-MIB", "axFastHttpProxyStatCpuIndex"))
if mibBuilder.loadTexts: axFastHttpProxyStatEntry.setStatus('current')
axFastHttpProxyStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatCpuIndex.setStatus('current')
axFastHttpProxyStatCurrProxyConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatCurrProxyConns.setStatus('current')
axFastHttpProxyStatTotalProxyConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalProxyConns.setStatus('current')
axFastHttpProxyStatHttpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatHttpReq.setStatus('current')
axFastHttpProxyStatHttpReqSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatHttpReqSucc.setStatus('current')
axFastHttpProxyStatNoProxyErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatNoProxyErr.setStatus('current')
axFastHttpProxyStatClientRst = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatClientRst.setStatus('current')
axFastHttpProxyStatServerRst = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatServerRst.setStatus('current')
axFastHttpProxyStatNoTupleErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatNoTupleErr.setStatus('current')
axFastHttpProxyStatParseReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatParseReqFail.setStatus('current')
axFastHttpProxyStatServerSelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatServerSelFail.setStatus('current')
axFastHttpProxyStatFwdReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatFwdReqFail.setStatus('current')
axFastHttpProxyStatFwdReqDataFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatFwdReqDataFail.setStatus('current')
axFastHttpProxyStatReqReTran = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatReqReTran.setStatus('current')
axFastHttpProxyStatReqPktOutOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatReqPktOutOrder.setStatus('current')
axFastHttpProxyStatServerReSel = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatServerReSel.setStatus('current')
axFastHttpProxyStatServerPreMatureClose = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatServerPreMatureClose.setStatus('current')
axFastHttpProxyStatServerConnMade = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatServerConnMade.setStatus('current')
axHttpProxyStatTotalConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalConn.setStatus('current')
axHttpProxyStatTotalReq = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalReq.setStatus('current')
axHttpProxyStatTotalSuccReq = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSuccReq.setStatus('current')
axHttpProxyStatTotalNoProxy = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalNoProxy.setStatus('current')
axHttpProxyStatTotalCRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalCRst.setStatus('current')
axHttpProxyStatTotalSRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSRst.setStatus('current')
axHttpProxyStatTotalNoTuple = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalNoTuple.setStatus('current')
axHttpProxyStatTotalReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalReqErr.setStatus('current')
axHttpProxyStatTotalSvrSelErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSvrSelErr.setStatus('current')
axHttpProxyStatTotalFwdReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalFwdReqErr.setStatus('current')
axHttpProxyStatTotalFwdDataReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalFwdDataReqErr.setStatus('current')
axHttpProxyStatTotalReqReXmit = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalReqReXmit.setStatus('current')
axHttpProxyStatTotalReqPktOutOrder = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalReqPktOutOrder.setStatus('current')
axHttpProxyStatTotalSvrReSel = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSvrReSel.setStatus('current')
axHttpProxyStatTotalPreMatureClose = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalPreMatureClose.setStatus('current')
axHttpProxyStatTotalSvrConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSvrConn.setStatus('current')
axHttpProxyStatTotalSNATErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSNATErr.setStatus('current')
axHttpProxyStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18), )
if mibBuilder.loadTexts: axHttpProxyStatTable.setStatus('current')
axHttpProxyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1), ).setIndexNames((0, "A10-AX-MIB", "axHttpProxyStatCpuIndex"))
if mibBuilder.loadTexts: axHttpProxyStatEntry.setStatus('current')
axHttpProxyStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatCpuIndex.setStatus('current')
axHttpProxyStatCurrProxyConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatCurrProxyConns.setStatus('current')
axHttpProxyStatTotalProxyConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalProxyConns.setStatus('current')
axHttpProxyStatHttpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatHttpReq.setStatus('current')
axHttpProxyStatHttpReqSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatHttpReqSucc.setStatus('current')
axHttpProxyStatNoProxyErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatNoProxyErr.setStatus('current')
axHttpProxyStatClientRst = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatClientRst.setStatus('current')
axHttpProxyStatServerRst = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatServerRst.setStatus('current')
axHttpProxyStatNoTupleErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatNoTupleErr.setStatus('current')
axHttpProxyStatParseReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatParseReqFail.setStatus('current')
axHttpProxyStatServerSelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatServerSelFail.setStatus('current')
axHttpProxyStatFwdReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatFwdReqFail.setStatus('current')
axHttpProxyStatFwdReqDataFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatFwdReqDataFail.setStatus('current')
axHttpProxyStatReqReTran = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatReqReTran.setStatus('current')
axHttpProxyStatReqPktOutOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatReqPktOutOrder.setStatus('current')
axHttpProxyStatServerReSel = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatServerReSel.setStatus('current')
axHttpProxyStatServerPreMatureClose = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatServerPreMatureClose.setStatus('current')
axHttpProxyStatServerConnMade = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatServerConnMade.setStatus('current')
axTcpProxyStatTotalCurrEstConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalCurrEstConn.setStatus('current')
axTcpProxyStatTotalActiveOpenConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalActiveOpenConn.setStatus('current')
axTcpProxyStatTotalPassiveOpenConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalPassiveOpenConn.setStatus('current')
axTcpProxyStatTotalConnAttemptFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalConnAttemptFail.setStatus('current')
axTcpProxyStatTotalInTCPPacket = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalInTCPPacket.setStatus('current')
axTcpProxyStatTotalOutTCPPkt = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalOutTCPPkt.setStatus('current')
axTcpProxyStatTotalReXmitPkt = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalReXmitPkt.setStatus('current')
axTcpProxyStatTotalRstRcvOnEstConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalRstRcvOnEstConn.setStatus('current')
axTcpProxyStatTotalRstSent = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalRstSent.setStatus('current')
axTCPProxyStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10), )
if mibBuilder.loadTexts: axTCPProxyStatTable.setStatus('current')
axTCPProxyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1), ).setIndexNames((0, "A10-AX-MIB", "axTcpProxyStatCpuIndex"))
if mibBuilder.loadTexts: axTCPProxyStatEntry.setStatus('current')
axTcpProxyStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatCpuIndex.setStatus('current')
axTcpProxyStatCurrEstConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatCurrEstConns.setStatus('current')
axTcpProxyStatActiveOpenConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatActiveOpenConns.setStatus('current')
axTcpProxyStatPassiveOpenConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatPassiveOpenConns.setStatus('current')
axTcpProxyStatConnAttempFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatConnAttempFail.setStatus('current')
axTcpProxyStatTotalInTCPPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalInTCPPkt.setStatus('current')
axTcpProxyStatTotalOutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalOutPkt.setStatus('current')
axTcpProxyStatReTranPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatReTranPkt.setStatus('current')
axTcpProxyStatRstRvdEstConn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatRstRvdEstConn.setStatus('current')
axTcpProxyStatRstSent = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatRstSent.setStatus('current')
axTcpProxyStatInputErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatInputErr.setStatus('current')
axTcpProxyStatSocketAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatSocketAlloc.setStatus('current')
axTcpProxyStatOrphanSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatOrphanSocket.setStatus('current')
axTcpProxyStatMemAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatMemAlloc.setStatus('current')
axTcpProxyStatTotalRxBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalRxBuf.setStatus('current')
axTcpProxyStatTotalTxBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalTxBuf.setStatus('current')
axTcpProxyStatTCPSYNSNTState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPSYNSNTState.setStatus('current')
axTcpProxyStatTCPSYNRCVState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPSYNRCVState.setStatus('current')
axTcpProxyStatTCPFINW1State = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPFINW1State.setStatus('current')
axTcpProxyStatTCPFINW2State = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPFINW2State.setStatus('current')
axTcpProxyStatTimeWstate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTimeWstate.setStatus('current')
axTcpProxyStatTCPCloseState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPCloseState.setStatus('current')
axTcpProxyStatTCPCloseWState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPCloseWState.setStatus('current')
axTcpProxyStatTCPLastACKState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPLastACKState.setStatus('current')
axTcpProxyStatTCPListenState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPListenState.setStatus('current')
axTcpProxyStatTCPClosingState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPClosingState.setStatus('current')
axSslStatSSLModNum = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 1), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLModNum.setStatus('current')
axSslStatCurrSSLConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatCurrSSLConn.setStatus('current')
axSslStatTotalSSLConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatTotalSSLConn.setStatus('current')
axSslStatFailSSLHandshake = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatFailSSLHandshake.setStatus('current')
axSslStatSSLMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLMemUsage.setStatus('current')
axSslStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 6), )
if mibBuilder.loadTexts: axSslStatTable.setStatus('current')
axSslStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 6, 1), ).setIndexNames((0, "A10-AX-MIB", "axSslStatModuleIndex"))
if mibBuilder.loadTexts: axSslStatEntry.setStatus('current')
axSslStatModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatModuleIndex.setStatus('current')
axSslStatEnableCryptoEngine = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 6, 1, 2), Counter32().clone(22)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatEnableCryptoEngine.setStatus('current')
axSslStatAvailCryptoEngine = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 6, 1, 3), Counter32().clone(22)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatAvailCryptoEngine.setStatus('current')
axSslStatSSLFailedCAVfy = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLFailedCAVfy.setStatus('current')
axSslStatSSLNoHWContextMem = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLNoHWContextMem.setStatus('current')
axSslStatSSLHWRingFull = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLHWRingFull.setStatus('current')
axSslStatSSLFailedCryptoOperation = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLFailedCryptoOperation.setStatus('current')
axFtpStatTotalCtrlSession = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatTotalCtrlSession.setStatus('current')
axFtpStatTotalALGPkt = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatTotalALGPkt.setStatus('current')
axFtpStatALGPktReXmit = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatALGPktReXmit.setStatus('current')
axFtpStatOutConnCtrl = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatOutConnCtrl.setStatus('current')
axFtpStatTotalDataSession = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatTotalDataSession.setStatus('current')
axFtpStatOutConnData = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatOutConnData.setStatus('current')
axNetStatIPOutNoRoute = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatIPOutNoRoute.setStatus('current')
axNetStatTCPOutRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRst.setStatus('current')
axNetStatTCPSynRcv = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSynRcv.setStatus('current')
axNetStatTCPSYNCookieSent = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSent.setStatus('current')
axNetStatTCPSYNCookieSentFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSentFail.setStatus('current')
axNetStatTCPReceive = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPReceive.setStatus('current')
axNetStatUDPReceive = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatUDPReceive.setStatus('current')
axNetStatServerSelFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSelFail.setStatus('current')
axNetStatSourceNATFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSourceNATFail.setStatus('current')
axNetStatTCPSynCookieFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSynCookieFail.setStatus('current')
axNetStatNoVportDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoVportDrop.setStatus('current')
axNetStatNoSynPktDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoSynPktDrop.setStatus('current')
axNetStatConnLimitDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnLimitDrop.setStatus('current')
axNetStatConnLimitReset = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnLimitReset.setStatus('current')
axNetStatProxyNoSockDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatProxyNoSockDrop.setStatus('current')
axNetStataFlexDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStataFlexDrop.setStatus('current')
axNetStatSessionAgingOut = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSessionAgingOut.setStatus('current')
axNetStatTCPNoSLB = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPNoSLB.setStatus('current')
axNetStatUDPNoSLB = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatUDPNoSLB.setStatus('current')
axNetStatTCPOutRSTNoSYN = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTNoSYN.setStatus('current')
axNetStatTCPOutRSTL4Proxy = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTL4Proxy.setStatus('current')
axNetStatTCPOutRSTACKattack = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTACKattack.setStatus('current')
axNetStatTCPOutRSTAFleX = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTAFleX.setStatus('current')
axNetStatTCPOutRSTStaleSess = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTStaleSess.setStatus('current')
axNetStatTCPOutRSTProxy = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTProxy.setStatus('current')
axNetStatNoSYNPktDropFIN = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoSYNPktDropFIN.setStatus('current')
axNetStatNoSYNPktDropRST = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoSYNPktDropRST.setStatus('current')
axNetStatNoSYNPktDropACK = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoSYNPktDropACK.setStatus('current')
axNetStatSYNThrotte = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSYNThrotte.setStatus('current')
axNetStatSSLSIDPersistSucc = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSSLSIDPersistSucc.setStatus('current')
axNetStatSSLSIDPersistFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSSLSIDPersistFail.setStatus('current')
axNetStatClientSSLSIDNotFound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatClientSSLSIDNotFound.setStatus('current')
axNetStatClientSSLSIDMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatClientSSLSIDMatch.setStatus('current')
axNetStatClientSSLSIDNotMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatClientSSLSIDNotMatch.setStatus('current')
axNetStatServerSSLSIDNotFound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSSLSIDNotFound.setStatus('current')
axNetStatServerSSLSIDReset = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSSLSIDReset.setStatus('current')
axNetStatServerSSLSIDMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSSLSIDMatch.setStatus('current')
axNetStatServerSSLSIDNotMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSSLSIDNotMatch.setStatus('current')
axNetStatCreateSSLSIDSucc = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatCreateSSLSIDSucc.setStatus('current')
axNetStatCreateSSLSIDFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatCreateSSLSIDFail.setStatus('current')
axNetStatConnRateLimitDrops = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnRateLimitDrops.setStatus('current')
axNetStatConnRateLimitResets = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnRateLimitResets.setStatus('current')
axNetStatInbandHMRetry = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatInbandHMRetry.setStatus('current')
axNetStatInbandHMReassign = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatInbandHMReassign.setStatus('current')
axNetStat2TCPReceive = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStat2TCPReceive.setStatus('current')
axNetStat2UDPReceive = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStat2UDPReceive.setStatus('current')
axNetStatL4SynAttack = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatL4SynAttack.setStatus('current')
axNetStatExt = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90))
axNetStatExtL2Dsr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL2Dsr.setStatus('current')
axNetStatExtL3Dsr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL3Dsr.setStatus('current')
axNetStatExtNatNoFwdRoute = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtNatNoFwdRoute.setStatus('current')
axNetStatExtNatNoRevRoute = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtNatNoRevRoute.setStatus('current')
axNetStatExtNatIcmpProcess = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtNatIcmpProcess.setStatus('current')
axNetStatExtNatIcmpNoMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtNatIcmpNoMatch.setStatus('current')
axNetStatExtAutoNatIdMismatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtAutoNatIdMismatch.setStatus('current')
axNetStatExtNoVportDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtNoVportDrop.setStatus('current')
axNetStatExtTcpSessionAgedOut = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtTcpSessionAgedOut.setStatus('current')
axNetStatExtUdpSessionAgedOut = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtUdpSessionAgedOut.setStatus('current')
axNetStatExtOtherSessionAgedOut = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtOtherSessionAgedOut.setStatus('current')
axNetStatExtAutoReselectServer = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtAutoReselectServer.setStatus('current')
axNetStatExtFastAgingSet = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtFastAgingSet.setStatus('current')
axNetStatExtFastAgingReset = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtFastAgingReset.setStatus('current')
axNetStatExtTcpInvalidDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtTcpInvalidDrop.setStatus('current')
axNetStatExtOutOfSeqAckDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtOutOfSeqAckDrop.setStatus('current')
axNetStatExtTcpSynStaleSessionDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtTcpSynStaleSessionDrop.setStatus('current')
axNetStatExtAnomalyOutOfSeq = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtAnomalyOutOfSeq.setStatus('current')
axNetStatExtAnomalyZeroWindow = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtAnomalyZeroWindow.setStatus('current')
axNetStatExtAnomalyBadContent = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtAnomalyBadContent.setStatus('current')
axNetStatExtAnomalyPbslbDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtAnomalyPbslbDrop.setStatus('current')
axNetStatExtNoResourceDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtNoResourceDrop.setStatus('current')
axNetStatExtResetUnknownConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtResetUnknownConns.setStatus('current')
axNetStatExtRstL7OnFailover = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtRstL7OnFailover.setStatus('current')
axNetStatExtTcpSynOtherFlagsDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtTcpSynOtherFlagsDrop.setStatus('current')
axNetStatExtTcpSynWithDataDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtTcpSynWithDataDrop.setStatus('current')
axNetStatExtIgnoreMsl = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtIgnoreMsl.setStatus('current')
axNetStatExtNatPortPreserveTry = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtNatPortPreserveTry.setStatus('current')
axNetStatExtNatPortPreserveSucc = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtNatPortPreserveSucc.setStatus('current')
axNetStatExtBwLimitExceedDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtBwLimitExceedDrop.setStatus('current')
axNetStatExtBwWaterMarkDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtBwWaterMarkDrop.setStatus('current')
axNetStatExtL4CpsExceedDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4CpsExceedDrop.setStatus('current')
axNetStatExtNatCpsExceedDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtNatCpsExceedDrop.setStatus('current')
axNetStatExtL7CpsExceedDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL7CpsExceedDrop.setStatus('current')
axNetStatExtSslCpsExceedDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtSslCpsExceedDrop.setStatus('current')
axNetStatExtSslTptExceedDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtSslTptExceedDrop.setStatus('current')
axNetStatExtSslTptWaterMarkDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtSslTptWaterMarkDrop.setStatus('current')
axNetStatExtL3vConnLimitDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL3vConnLimitDrop.setStatus('current')
axNetStatExtL4ServerHandshakeFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4ServerHandshakeFail.setStatus('current')
axNetStatExtL4AxReXmitSyn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4AxReXmitSyn.setStatus('current')
axNetStatExtL4RcvAckOnSyn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvAckOnSyn.setStatus('current')
axNetStatExtL4RcvRstOnSyn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvRstOnSyn.setStatus('current')
axNetStatExtTcpNoEstSessionAgedOut = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtTcpNoEstSessionAgedOut.setStatus('current')
axNetStatExtNoEstCsynRcvAgedOut = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtNoEstCsynRcvAgedOut.setStatus('current')
axNetStatExtNoEstSsynSntAgedOut = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtNoEstSsynSntAgedOut.setStatus('current')
axNetStatExtL4RcvReXmitSyn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvReXmitSyn.setStatus('current')
axNetStatExtL4RcvReXmitSynDelq = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvReXmitSynDelq.setStatus('current')
axNetStatExtL4RcvReXmitSynAck = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvReXmitSynAck.setStatus('current')
axNetStatExtL4RcvReXmitSynAckDq = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvReXmitSynAckDq.setStatus('current')
axNetStatExtL4RcvFwdLastAck = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvFwdLastAck.setStatus('current')
axNetStatExtL4RcvRevLastAck = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvRevLastAck.setStatus('current')
axNetStatExtL4RcvFwdFin = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvFwdFin.setStatus('current')
axNetStatExtL4RcvFwdFinDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvFwdFinDrop.setStatus('current')
axNetStatExtL4RcvFwdFinAck = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvFwdFinAck.setStatus('current')
axNetStatExtL4RcvRevFin = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvRevFin.setStatus('current')
axNetStatExtL4RcvRevFinDup = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvRevFinDup.setStatus('current')
axNetStatExtL4RcvFevFinAck = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvFevFinAck.setStatus('current')
axNetStatExtL4RcvFwdRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvFwdRst.setStatus('current')
axNetStatExtL4RcfRevRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcfRevRst.setStatus('current')
axNetStatExtL4UdpReqsNoRsp = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4UdpReqsNoRsp.setStatus('current')
axNetStatExtL4UdpReqRsps = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4UdpReqRsps.setStatus('current')
axNetStatExtL4UdpReqRspNotMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4UdpReqRspNotMatch.setStatus('current')
axNetStatExtL4UdpReqGreaterRsps = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4UdpReqGreaterRsps.setStatus('current')
axNetStatExtL4UdpRspsGreaterReqs = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4UdpRspsGreaterReqs.setStatus('current')
axNetStatExtL4UdpReqs = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4UdpReqs.setStatus('current')
axNetStatExtL4UdpRsps = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4UdpRsps.setStatus('current')
axNetStatExtL4TcpEst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4TcpEst.setStatus('current')
axNetStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100), )
if mibBuilder.loadTexts: axNetStatTable.setStatus('current')
axNetStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1), ).setIndexNames((0, "A10-AX-MIB", "axNetStatCpuIndex"))
if mibBuilder.loadTexts: axNetStatEntry.setStatus('current')
axNetStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatCpuIndex.setStatus('current')
axNetStatIPOutNoRt = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatIPOutNoRt.setStatus('current')
axNetStatTCPOutReset = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutReset.setStatus('current')
axNetStatTCPSynRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSynRecv.setStatus('current')
axNetStatTCPSYNCookieSnt = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSnt.setStatus('current')
axNetStatTCPSYNCookieSntFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSntFail.setStatus('current')
axNetStatTCPRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPRcv.setStatus('current')
axNetStatUDPRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatUDPRcv.setStatus('current')
axNetStatServerSelFails = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSelFails.setStatus('current')
axNetStatSourceNATFails = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSourceNATFails.setStatus('current')
axNetStatTCPSynCookieFails = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSynCookieFails.setStatus('current')
axNetStatNoVportDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoVportDrops.setStatus('current')
axNetStatNoSynPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoSynPktDrops.setStatus('current')
axNetStatConnLimitDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnLimitDrops.setStatus('current')
axNetStatConnLimitResets = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnLimitResets.setStatus('current')
axNetStatProxyNoSockDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatProxyNoSockDrops.setStatus('current')
axNetStataFlexDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStataFlexDrops.setStatus('current')
axNetStatSessionsAgingOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSessionsAgingOut.setStatus('current')
axNetStatTCPsNoSLB = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPsNoSLB.setStatus('current')
axNetStatUDPsNoSLB = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatUDPsNoSLB.setStatus('current')
axNetStatEntryTCPOutRSTNoSYN = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTNoSYN.setStatus('current')
axNetStatEntryTCPOutRSTL4Proxy = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTL4Proxy.setStatus('current')
axNetStatEntryTCPOutRSTACKattack = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTACKattack.setStatus('current')
axNetStatEntryTCPOutRSTAFleX = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTAFleX.setStatus('current')
axNetStatEntryTCPOutRSTStaleSess = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTStaleSess.setStatus('current')
axNetStatEntryTCPOutRSTProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTProxy.setStatus('current')
axNetStatEntryNoSYNPktDropFIN = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryNoSYNPktDropFIN.setStatus('current')
axNetStatEntryNoSYNPktDropRST = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryNoSYNPktDropRST.setStatus('current')
axNetStatEntryNoSYNPktDropACK = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryNoSYNPktDropACK.setStatus('current')
axNetStatEntrySYNThrotte = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntrySYNThrotte.setStatus('current')
axNetStatEntrySSLSIDPersistSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntrySSLSIDPersistSucc.setStatus('current')
axNetStatEntrySSLSIDPersistFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntrySSLSIDPersistFail.setStatus('current')
axNetStatEntryClientSSLSIDNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryClientSSLSIDNotFound.setStatus('current')
axNetStatEntryClientSSLSIDMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryClientSSLSIDMatch.setStatus('current')
axNetStatEntryClientSSLSIDNotMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryClientSSLSIDNotMatch.setStatus('current')
axNetStatEntryServerSSLSIDNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDNotFound.setStatus('current')
axNetStatEntryServerSSLSIDReset = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDReset.setStatus('current')
axNetStatEntryServerSSLSIDMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDMatch.setStatus('current')
axNetStatEntryServerSSLSIDNotMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDNotMatch.setStatus('current')
axNetStatEntryCreateSSLSIDSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryCreateSSLSIDSucc.setStatus('current')
axNetStatEntryCreateSSLSIDFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryCreateSSLSIDFail.setStatus('current')
axNetStatEntryConnRateLimitDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryConnRateLimitDrops.setStatus('current')
axNetStatEntryConnRateLimitResets = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryConnRateLimitResets.setStatus('current')
axNetStatEntryInbandHMRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryInbandHMRetry.setStatus('current')
axNetStatEntryInbandHMReassign = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryInbandHMReassign.setStatus('current')
axSmtpProxyStatsCurrProxyConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsCurrProxyConns.setStatus('current')
axSmtpProxyStatsTotalProxyConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsTotalProxyConns.setStatus('current')
axSmtpProxyStatsSmtpRequests = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsSmtpRequests.setStatus('current')
axSmtpProxyStatsSmtpReqSuccs = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsSmtpReqSuccs.setStatus('current')
axSmtpProxyStatsNoProxyError = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsNoProxyError.setStatus('current')
axSmtpProxyStatsClientRST = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsClientRST.setStatus('current')
axSmtpProxyStatsServerRST = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsServerRST.setStatus('current')
axSmtpProxyStatsNoTupleError = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsNoTupleError.setStatus('current')
axSmtpProxyStatsParseReqFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsParseReqFail.setStatus('current')
axSmtpProxyStatsServerSelFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsServerSelFail.setStatus('current')
axSmtpProxyStatsFwdReqFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsFwdReqFail.setStatus('current')
axSmtpProxyStatsFwdReqDataFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsFwdReqDataFail.setStatus('current')
axSmtpProxyStatsReqRetrans = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsReqRetrans.setStatus('current')
axSmtpProxyStatsReqPktOutOrder = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsReqPktOutOrder.setStatus('current')
axSmtpProxyStatsServerResel = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsServerResel.setStatus('current')
axSmtpProxyStatsSvrPrematureClose = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsSvrPrematureClose.setStatus('current')
axSmtpProxyStatsSvrConnMade = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsSvrConnMade.setStatus('current')
axSmtpProxyStatsSNATFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsSNATFail.setStatus('current')
axSmtpProxyStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19), )
if mibBuilder.loadTexts: axSmtpProxyStatTable.setStatus('current')
axSmtpProxyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1), ).setIndexNames((0, "A10-AX-MIB", "axSmtpProxyStatCpuIndex"))
if mibBuilder.loadTexts: axSmtpProxyStatEntry.setStatus('current')
axSmtpProxyStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatCpuIndex.setStatus('current')
axSmtpProxyStatCurrProxyConn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatCurrProxyConn.setStatus('current')
axSmtpProxyStatTotalProxyConn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatTotalProxyConn.setStatus('current')
axSmtpProxyStatSmtpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatSmtpReq.setStatus('current')
axSmtpProxyStatSmtpReqSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatSmtpReqSucc.setStatus('current')
axSmtpProxyStatNoProxyError = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatNoProxyError.setStatus('current')
axSmtpProxyStatClientRST = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatClientRST.setStatus('current')
axSmtpProxyStatServerRST = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatServerRST.setStatus('current')
axSmtpProxyStatNoTupleError = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatNoTupleError.setStatus('current')
axSmtpProxyStatParseReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatParseReqFail.setStatus('current')
axSmtpProxyStatServerSelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatServerSelFail.setStatus('current')
axSmtpProxyStatFwdReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatFwdReqFail.setStatus('current')
axSmtpProxyStatFwdReqDataFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatFwdReqDataFail.setStatus('current')
axSmtpProxyStatReqRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatReqRetrans.setStatus('current')
axSmtpProxyStatReqPktOutOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatReqPktOutOrder.setStatus('current')
axSmtpProxyStatServerResel = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatServerResel.setStatus('current')
axSmtpProxyStatSvrPrematureClose = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatSvrPrematureClose.setStatus('current')
axSmtpProxyStatSvrConnMade = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatSvrConnMade.setStatus('current')
axSmtpProxyStatSNATFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatSNATFail.setStatus('current')
axSslProxyStatsCurrProxyConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsCurrProxyConns.setStatus('current')
axSslProxyStatsTotalProxyConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsTotalProxyConns.setStatus('current')
axSslProxyStatsClientErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsClientErr.setStatus('current')
axSslProxyStatsServerErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsServerErr.setStatus('current')
axSslProxyStatsSessNotFound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsSessNotFound.setStatus('current')
axSslProxyStatsNoRoute = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsNoRoute.setStatus('current')
axSslProxyStatsSvrSelFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsSvrSelFail.setStatus('current')
axSslProxyStatsSNATFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsSNATFail.setStatus('current')
axPersistentStatsUrlHashPersistOKPri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsUrlHashPersistOKPri.setStatus('current')
axPersistentStatsUrlHashPersistOKSec = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsUrlHashPersistOKSec.setStatus('current')
axPersistentStatsUrlHashPersistFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsUrlHashPersistFail.setStatus('current')
axPersistentStatsSIPPersistOK = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsSIPPersistOK.setStatus('current')
axPersistentStatsSIPPersistFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsSIPPersistFail.setStatus('current')
axPersistentStatsSSLSIDPersistOK = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsSSLSIDPersistOK.setStatus('current')
axPersistentStatsSSLSIDPersistFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsSSLSIDPersistFail.setStatus('current')
axPersistentStatsCookiePersistOK = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsCookiePersistOK.setStatus('current')
axPersistentStatsCookiePersistFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsCookiePersistFail.setStatus('current')
axPersistentStatsPersistCookieNotFound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsPersistCookieNotFound.setStatus('current')
axPersistentStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11), )
if mibBuilder.loadTexts: axPersistentStatTable.setStatus('current')
axPersistentStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1), ).setIndexNames((0, "A10-AX-MIB", "axPersistentStatCpuIndex"))
if mibBuilder.loadTexts: axPersistentStatEntry.setStatus('current')
axPersistentStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatCpuIndex.setStatus('current')
axPersistentStatUrlHashPersistOKPri = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatUrlHashPersistOKPri.setStatus('current')
axPersistentStatUrlHashPersistOKSec = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatUrlHashPersistOKSec.setStatus('current')
axPersistentStatUrlHashPersistFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatUrlHashPersistFail.setStatus('current')
axPersistentStatSIPPersistOK = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatSIPPersistOK.setStatus('current')
axPersistentStatSIPPersistFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatSIPPersistFail.setStatus('current')
axPersistentStatSSLSIDPersistOK = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatSSLSIDPersistOK.setStatus('current')
axPersistentStatSSLSIDPersistFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatSSLSIDPersistFail.setStatus('current')
axPersistentStatCookiePersistOK = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatCookiePersistOK.setStatus('current')
axPersistentStatCookiePersistFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatCookiePersistFail.setStatus('current')
axPersistentStatPersistCookieNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatPersistCookieNotFound.setStatus('current')
axSwitchStatsL2Forward = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsL2Forward.setStatus('current')
axSwitchStatsL3IPForward = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsL3IPForward.setStatus('current')
axSwitchStatsIPv4NoRouteDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPv4NoRouteDrop.setStatus('current')
axSwitchStatsL3IPv6Forward = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsL3IPv6Forward.setStatus('current')
axSwitchStatsIPv6NoRouteDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPv6NoRouteDrop.setStatus('current')
axSwitchStatsL4Process = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsL4Process.setStatus('current')
axSwitchStatsIncorrectLenDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIncorrectLenDrop.setStatus('current')
axSwitchStatsProtoDownDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsProtoDownDrop.setStatus('current')
axSwitchStatsUnknownProtoDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsUnknownProtoDrop.setStatus('current')
axSwitchStatsTTLExceedDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsTTLExceedDrop.setStatus('current')
axSwitchStatsLinkdownDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsLinkdownDrop.setStatus('current')
axSwitchStatsSRCPortSuppress = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsSRCPortSuppress.setStatus('current')
axSwitchStatsVLANFlood = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsVLANFlood.setStatus('current')
axSwitchStatsIPFragRcv = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPFragRcv.setStatus('current')
axSwitchStatsARPReqRcv = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsARPReqRcv.setStatus('current')
axSwitchStatsARPRespRcv = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsARPRespRcv.setStatus('current')
axSwitchStatsFwdKernel = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsFwdKernel.setStatus('current')
axSwitchStatsIPTCPFragRcv = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPTCPFragRcv.setStatus('current')
axSwitchStatsIPFragOverlap = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPFragOverlap.setStatus('current')
axSwitchStatsIPFragOverlapDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPFragOverlapDrop.setStatus('current')
axSwitchStatsIPFragReasmOk = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPFragReasmOk.setStatus('current')
axSwitchStatsIPFragReasmFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPFragReasmFail.setStatus('current')
axSwitchStatsAnomLanAttackDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomLanAttackDrop.setStatus('current')
axSwitchStatsAnomIPOptionDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomIPOptionDrop.setStatus('current')
axSwitchStatsAnomPingDeathDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomPingDeathDrop.setStatus('current')
axSwitchStatsAnomAllFragDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomAllFragDrop.setStatus('current')
axSwitchStatsAnomTCPNoFragDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomTCPNoFragDrop.setStatus('current')
axSwitchStatsAnomSYNFragDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomSYNFragDrop.setStatus('current')
axSwitchStatsAnomTCPSynFinDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomTCPSynFinDrop.setStatus('current')
axSwitchStatsAnomAnyDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomAnyDrop.setStatus('current')
axSwitchStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31), )
if mibBuilder.loadTexts: axSwitchStatTable.setStatus('current')
axSwitchStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1), ).setIndexNames((0, "A10-AX-MIB", "axSwitchStatCpuIndex"))
if mibBuilder.loadTexts: axSwitchStatEntry.setStatus('current')
axSwitchStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatCpuIndex.setStatus('current')
axSwitchStatL2Forward = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatL2Forward.setStatus('current')
axSwitchStatL3IPForward = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatL3IPForward.setStatus('current')
axSwitchStatIPv4NoRouteDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPv4NoRouteDrop.setStatus('current')
axSwitchStatL3IPv6Forward = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatL3IPv6Forward.setStatus('current')
axSwitchStatIPv6NoRouteDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPv6NoRouteDrop.setStatus('current')
axSwitchStatL4Process = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatL4Process.setStatus('current')
axSwitchStatIncorrectLenDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIncorrectLenDrop.setStatus('current')
axSwitchStatProtoDownDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatProtoDownDrop.setStatus('current')
axSwitchStatUnknownProtoDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatUnknownProtoDrop.setStatus('current')
axSwitchStatTTLExceedDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatTTLExceedDrop.setStatus('current')
axSwitchStatLinkdownDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatLinkdownDrop.setStatus('current')
axSwitchStatSRCPortSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatSRCPortSuppress.setStatus('current')
axSwitchStatVLANFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatVLANFlood.setStatus('current')
axSwitchStatIPFragRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPFragRcv.setStatus('current')
axSwitchStatARPReqRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatARPReqRcv.setStatus('current')
axSwitchStatARPRespRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatARPRespRcv.setStatus('current')
axSwitchStatFwdKernel = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatFwdKernel.setStatus('current')
axSwitchStatIPTCPFragRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPTCPFragRcv.setStatus('current')
axSwitchStatIPFragOverlap = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPFragOverlap.setStatus('current')
axSwitchStatIPFragOverlapDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPFragOverlapDrop.setStatus('current')
axSwitchStatIPFragReasmOk = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPFragReasmOk.setStatus('current')
axSwitchStatIPFragReasmFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPFragReasmFail.setStatus('current')
axSwitchStatAnomLanAttackDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomLanAttackDrop.setStatus('current')
axSwitchStatAnomIPOptionDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomIPOptionDrop.setStatus('current')
axSwitchStatAnomPingDeathDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomPingDeathDrop.setStatus('current')
axSwitchStatAnomAllFragDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomAllFragDrop.setStatus('current')
axSwitchStatAnomTCPNoFragDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomTCPNoFragDrop.setStatus('current')
axSwitchStatAnomSYNFragDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomSYNFragDrop.setStatus('current')
axSwitchStatAnomTCPSynFinDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomTCPSynFinDrop.setStatus('current')
axSwitchStatAnomAnyDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomAnyDrop.setStatus('current')
axHAConfigEnabled = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAConfigEnabled.setStatus('current')
axHAID = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAID.setStatus('current')
axHASetID = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHASetID.setStatus('current')
axHAPreemptStatusEnabled = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAPreemptStatusEnabled.setStatus('current')
axHATimeoutInterval = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHATimeoutInterval.setStatus('current')
axHATimeoutRetry = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHATimeoutRetry.setStatus('current')
axHAARPRetry = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAARPRetry.setStatus('current')
axHAGroupCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupCount.setStatus('current')
axHAGroupStatusTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2), )
if mibBuilder.loadTexts: axHAGroupStatusTable.setStatus('current')
axHAGroupStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axHAGroupID"))
if mibBuilder.loadTexts: axHAGroupStatusEntry.setStatus('current')
axHAGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupID.setStatus('current')
axHAGroupLocalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 9))).clone(namedValues=NamedValues(("standby", 0), ("active", 1), ("notConfigured", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupLocalStatus.setStatus('current')
axHAGroupLocalPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupLocalPriority.setStatus('current')
axHAGroupPeerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 9))).clone(namedValues=NamedValues(("standby", 0), ("active", 1), ("notConfigured", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupPeerStatus.setStatus('current')
axHAGroupPeerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupPeerPriority.setStatus('current')
axHAFloatingIPCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAFloatingIPCount.setStatus('current')
axHAFloatingIPTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 2), )
if mibBuilder.loadTexts: axHAFloatingIPTable.setStatus('current')
axHAFloatingIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axHAFloatingIPIndex"))
if mibBuilder.loadTexts: axHAFloatingIPEntry.setStatus('current')
axHAFloatingIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAFloatingIPIndex.setStatus('current')
axHAFloatingIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAFloatingIPAddress.setStatus('current')
axHAFloatingIPHaGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAFloatingIPHaGroupID.setStatus('current')
axIpNatStatsGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 1))
axIpNatStatsIntfInsideOutside = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2))
axIpNatStatsDynamicMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3))
axIpNatPoolStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 100))
axIpNatLoggingStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 101))
axIpNatLsnStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4))
axIpNatNat64Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 5))
axIpNatDsliteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 6))
axIpNatStatsDynamicMappingAclName = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 19))
axFixedNatStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 120))
axIpNatStatsGlobalHits = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 1, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsGlobalHits.setStatus('current')
axIpNatStatsGlobalMisses = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsGlobalMisses.setStatus('current')
axIpNatStatsIntfInsideOutsideTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2, 1), )
if mibBuilder.loadTexts: axIpNatStatsIntfInsideOutsideTable.setStatus('current')
axIpNatStatsIntfInsideOutsideEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatStatsInsideOutsideIntfIndex"))
if mibBuilder.loadTexts: axIpNatStatsIntfInsideOutsideEntry.setStatus('current')
axIpNatStatsInsideOutsideIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsInsideOutsideIntfIndex.setStatus('current')
axIpNatStatsInsideOutsideIntfName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsInsideOutsideIntfName.setStatus('current')
axIpNatStatsInsideOutsideIntfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inside", 0), ("outside", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsInsideOutsideIntfDirection.setStatus('current')
axIpNatStatsDynamicMappingTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1), )
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingTable.setStatus('current')
axIpNatStatsDynamicMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatStatsDynamicMappingAccessListID"))
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingEntry.setStatus('current')
axIpNatStatsDynamicMappingAccessListID = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingAccessListID.setStatus('current')
axIpNatStatsDynamicMappingPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingPoolName.setStatus('current')
axIpNatStatsDynamicMappingStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingStartAddress.setStatus('current')
axIpNatStatsDynamicMappingEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingEndAddress.setStatus('current')
axIpNatStatsDynamicMappingTotalAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingTotalAddresses.setStatus('current')
axIpNatStatsDynamicMappingAllocAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingAllocAddresses.setStatus('current')
axIpNatStatsDynamicMappingMissAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingMissAddresses.setStatus('current')
axIpNatStatsDynamicMappingStartAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingStartAddressType.setStatus('current')
axIpNatStatsDynamicMappingEndAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingEndAddressType.setStatus('current')
axIpNatPoolStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 100, 1), )
if mibBuilder.loadTexts: axIpNatPoolStatsTable.setStatus('current')
axIpNatPoolStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 100, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatPoolName"))
if mibBuilder.loadTexts: axIpNatPoolStatsEntry.setStatus('current')
axIpNatPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 100, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatPoolName.setStatus('current')
axIpNatPoolStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 100, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatPoolStartAddress.setStatus('current')
axIpNatPoolEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 100, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatPoolEndAddress.setStatus('current')
axIpNatPoolPortUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 100, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatPoolPortUsage.setStatus('current')
axIpNatPoolTotalUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 100, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatPoolTotalUsed.setStatus('current')
axIpNatPoolTotalFree = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 100, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatPoolTotalFree.setStatus('current')
axIpNatPoolFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 100, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatPoolFailed.setStatus('current')
axSessionStatsGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1))
axSessionGlobalStatTCPEstablished = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatTCPEstablished.setStatus('current')
axSessionGlobalStatTCPHalfOpen = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatTCPHalfOpen.setStatus('current')
axSessionGlobalStatUDP = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatUDP.setStatus('current')
axSessionGlobalStatNonTcpUdpIPSession = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatNonTcpUdpIPSession.setStatus('current')
axSessionGlobalStatOther = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatOther.setStatus('current')
axSessionGlobalStatReverseNATTCP = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatReverseNATTCP.setStatus('current')
axSessionGlobalStatReverseNATUDP = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatReverseNATUDP.setStatus('current')
axSessionGlobalStatFreeBufferCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatFreeBufferCount.setStatus('current')
axSessionGlobalStatFreeCurrentConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatFreeCurrentConns.setStatus('current')
axSessionGlobalStatConnCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatConnCount.setStatus('current')
axSessionGlobalStatConnFree = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatConnFree.setStatus('current')
axSessionGlobalStatTCPSynHalfOpen = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatTCPSynHalfOpen.setStatus('current')
axSessionGlobalStatConnSMPAllocated = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatConnSMPAllocated.setStatus('current')
axSessionGlobalStatConnSMPFree = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatConnSMPFree.setStatus('current')
axGslbZones = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1))
axGslbSites = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2))
axGslbServiceIPs = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3))
axGslbServiceIpPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 4))
axGslbSiteSlbDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 5))
axGslbGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 6))
axGslbZoneCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneCount.setStatus('current')
axGslbZoneStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2), )
if mibBuilder.loadTexts: axGslbZoneStatsTable.setStatus('current')
axGslbZoneStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axGslbZoneName"))
if mibBuilder.loadTexts: axGslbZoneStatsEntry.setStatus('current')
axGslbZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneName.setStatus('current')
axGslbZoneAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneAdminState.setStatus('current')
axGslbZoneOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneOperState.setStatus('current')
axGslbZoneReceivedQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneReceivedQueries.setStatus('current')
axGslbZoneSentResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneSentResponses.setStatus('current')
axGslbZoneProxyModeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneProxyModeCount.setStatus('current')
axGslbZoneCacheModeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneCacheModeCount.setStatus('current')
axGslbZoneServerModeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServerModeCount.setStatus('current')
axGslbZoneStickyModeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneStickyModeCount.setStatus('current')
axGslbZoneBackupModeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneBackupModeCount.setStatus('current')
axGslbZoneServiceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3), )
if mibBuilder.loadTexts: axGslbZoneServiceStatsTable.setStatus('current')
axGslbZoneServiceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1), ).setIndexNames((0, "A10-AX-MIB", "axGslbZoneServiceFqdn"))
if mibBuilder.loadTexts: axGslbZoneServiceStatsEntry.setStatus('current')
axGslbZoneServiceFqdn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServiceFqdn.setStatus('current')
axGslbZoneNameInServiceEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneNameInServiceEntry.setStatus('current')
axGslbZoneServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServiceName.setStatus('current')
axGslbZoneServicePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServicePortNum.setStatus('current')
axGslbZoneServiceAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServiceAdminState.setStatus('current')
axGslbZoneServiceOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServiceOperState.setStatus('current')
axGslbZoneServiceReceivedQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServiceReceivedQueries.setStatus('current')
axGslbZoneServiceSentResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServiceSentResponses.setStatus('current')
axGslbZoneServiceProxyModeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServiceProxyModeCount.setStatus('current')
axGslbZoneServiceCacheModeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServiceCacheModeCount.setStatus('current')
axGslbZoneServiceServerModeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServiceServerModeCount.setStatus('current')
axGslbZoneServiceStickyModeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServiceStickyModeCount.setStatus('current')
axGslbZoneServiceBackupModeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServiceBackupModeCount.setStatus('current')
axGslbSiteCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteCount.setStatus('current')
axGslbSiteStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 2), )
if mibBuilder.loadTexts: axGslbSiteStatsTable.setStatus('current')
axGslbSiteStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axGslbSiteName"))
if mibBuilder.loadTexts: axGslbSiteStatsEntry.setStatus('current')
axGslbSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteName.setStatus('current')
axGslbSiteAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteAdminState.setStatus('current')
axGslbSiteOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteOperState.setStatus('current')
axGslbSiteHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteHitCount.setStatus('current')
axGslbSiteDeviceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 3), )
if mibBuilder.loadTexts: axGslbSiteDeviceStatsTable.setStatus('current')
axGslbSiteDeviceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 3, 1), ).setIndexNames((0, "A10-AX-MIB", "axGslbSiteNameInDeviceEntry"), (0, "A10-AX-MIB", "axGslbSiteSlbDeviceIpAddr"), (0, "A10-AX-MIB", "axGslbSiteServiceIpAddr"), (0, "A10-AX-MIB", "axGslbSiteServiceIpPortNum"))
if mibBuilder.loadTexts: axGslbSiteDeviceStatsEntry.setStatus('current')
axGslbSiteNameInDeviceEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteNameInDeviceEntry.setStatus('current')
axGslbSiteSlbDeviceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteSlbDeviceIpAddr.setStatus('current')
axGslbSiteServiceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteServiceIpAddr.setStatus('current')
axGslbSiteServiceIpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteServiceIpPortNum.setStatus('current')
axGslbSiteSlbDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteSlbDeviceName.setStatus('current')
axGslbSiteServiceIpName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteServiceIpName.setStatus('current')
axGslbSiteServiceIpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteServiceIpAdminState.setStatus('current')
axGslbSiteServiceIpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteServiceIpOperState.setStatus('current')
axGslbSiteServiceIpHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteServiceIpHitCount.setStatus('current')
axGslbServiceIPCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIPCount.setStatus('current')
axGslbServiceIPTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 2), )
if mibBuilder.loadTexts: axGslbServiceIPTable.setStatus('current')
axGslbServiceIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axGslbServiceIpAddr"))
if mibBuilder.loadTexts: axGslbServiceIPEntry.setStatus('current')
axGslbServiceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpAddr.setStatus('current')
axGslbServiceIpName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpName.setStatus('current')
axGslbServiceIpSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpSiteName.setStatus('current')
axGslbServiceIpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpAdminState.setStatus('current')
axGslbServiceIpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpOperState.setStatus('current')
axGslbServiceIpIsVirtualServerFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isVirtualServer", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpIsVirtualServerFlag.setStatus('current')
axGslbServiceIpProtocolFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("gslbProtocol", 1), ("localProtocol", 2), ("unknown", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpProtocolFlag.setStatus('current')
axGslbServiceIpServicePortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpServicePortCount.setStatus('current')
axGslbServiceIpHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpHitCount.setStatus('current')
axGslbServiceIpPortTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 4, 1), )
if mibBuilder.loadTexts: axGslbServiceIpPortTable.setStatus('current')
axGslbServiceIpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 4, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axGslbServiceIpPortAddr"), (0, "A10-AX-MIB", "axGslbServiceIpPortNum"))
if mibBuilder.loadTexts: axGslbServiceIpPortEntry.setStatus('current')
axGslbServiceIpPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpPortAddr.setStatus('current')
axGslbServiceIpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpPortNum.setStatus('current')
axGslbServiceIpPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpPortOperState.setStatus('current')
axGslbServiceIpPortProtocolFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("gslbProtocol", 1), ("localProtocol", 2), ("unknown", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpPortProtocolFlag.setStatus('current')
axGslbServiceIpPortActiveServerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpPortActiveServerCount.setStatus('current')
axGslbServiceIpPortCurrConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpPortCurrConns.setStatus('current')
axGslbSiteSlbDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 5, 1), )
if mibBuilder.loadTexts: axGslbSiteSlbDeviceTable.setStatus('current')
axGslbSiteSlbDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 5, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axGslbSiteSlbDeviceSiteName"), (0, "A10-AX-MIB", "axGslbSiteSlbForDeviceIpAddr"))
if mibBuilder.loadTexts: axGslbSiteSlbDeviceEntry.setStatus('current')
axGslbSiteSlbDeviceSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteSlbDeviceSiteName.setStatus('current')
axGslbSiteSlbForDeviceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteSlbForDeviceIpAddr.setStatus('current')
axGslbSiteForSlbDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteForSlbDeviceName.setStatus('current')
axGslbSiteSlbDeviceProtocolFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("gslbProtocol", 1), ("localProtocol", 2), ("unknown", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteSlbDeviceProtocolFlag.setStatus('current')
axGslbSiteSlbDeviceAdminPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteSlbDeviceAdminPreference.setStatus('current')
axGslbSiteSlbDeviceSessionUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteSlbDeviceSessionUtilization.setStatus('current')
axGslbSiteSlbDeviceAvailSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteSlbDeviceAvailSessionCount.setStatus('current')
axGslbSiteSlbDeviceServicIpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteSlbDeviceServicIpCount.setStatus('current')
axGslbGroupTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 6, 1), )
if mibBuilder.loadTexts: axGslbGroupTable.setStatus('current')
axGslbGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 6, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axGslbGroupName"), (0, "A10-AX-MIB", "axGslbGroupMember"), (0, "A10-AX-MIB", "axGslbGroupAddress"))
if mibBuilder.loadTexts: axGslbGroupEntry.setStatus('current')
axGslbGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 6, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbGroupName.setStatus('current')
axGslbGroupMember = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbGroupMember.setStatus('current')
axGslbGroupSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbGroupSysID.setStatus('current')
axGslbGroupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbGroupPriority.setStatus('current')
axGslbGroupAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 6, 1, 1, 5), Bits().clone(namedValues=NamedValues(("master", 1), ("disabled", 2), ("learn", 3), ("passive", 4), ("bridge", 5), ("super", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbGroupAttribute.setStatus('current')
axGslbGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("ok", 1), ("idle", 2), ("connect", 3), ("active", 4), ("openSent", 5), ("openConfirm", 6), ("established", 7), ("unknown", 8), ("ready", 9), ("masterSync", 10), ("fullSync", 11), ("synced", 12), ("stopped", 13), ("waitSync", 14), ("vcs", 15), ("ha", 16), ("auto", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbGroupStatus.setStatus('current')
axGslbGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 6, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbGroupAddress.setStatus('current')
mibBuilder.exportSymbols("A10-AX-MIB", axTrunkName=axTrunkName, axServerPortStatBytesIn=axServerPortStatBytesIn, axIpNatPoolName=axIpNatPoolName, axVirtualServerPortSIPTemplate=axVirtualServerPortSIPTemplate, axSmtpProxyStatSvrPrematureClose=axSmtpProxyStatSvrPrematureClose, axHATimeoutRetry=axHATimeoutRetry, axGslbZoneCacheModeCount=axGslbZoneCacheModeCount, axNetStatExtAutoNatIdMismatch=axNetStatExtAutoNatIdMismatch, axNetStatExtL4UdpRsps=axNetStatExtL4UdpRsps, axSwitchStatCpuIndex=axSwitchStatCpuIndex, axFastHttpProxyStatFwdReqDataFail=axFastHttpProxyStatFwdReqDataFail, axSwitchStatIncorrectLenDrop=axSwitchStatIncorrectLenDrop, axHATimeoutInterval=axHATimeoutInterval, axGslbZoneNameInServiceEntry=axGslbZoneNameInServiceEntry, axTcpProxyStatPassiveOpenConns=axTcpProxyStatPassiveOpenConns, axHttpProxyStatCpuIndex=axHttpProxyStatCpuIndex, axNetStatExtNatCpsExceedDrop=axNetStatExtNatCpsExceedDrop, axFastHttpProxyStatReqReTran=axFastHttpProxyStatReqReTran, axHAPreemptStatusEnabled=axHAPreemptStatusEnabled, axGslbZoneServiceServerModeCount=axGslbZoneServiceServerModeCount, axServiceGroupStatPersistConns=axServiceGroupStatPersistConns, axVirtualServerStatBytesIn=axVirtualServerStatBytesIn, axConnReuseStatTotalActivePersist=axConnReuseStatTotalActivePersist, axHttpProxyStatNoProxyErr=axHttpProxyStatNoProxyErr, axPowerSupplyVoltageEntry=axPowerSupplyVoltageEntry, axNetStatExtL4RcvReXmitSyn=axNetStatExtL4RcvReXmitSyn, axConnReuseStatActivePersist=axConnReuseStatActivePersist, axLogSyslogPri=axLogSyslogPri, axTcpProxyStatRstSent=axTcpProxyStatRstSent, axTcpProxyStatTCPListenState=axTcpProxyStatTCPListenState, axNetStatSourceNATFail=axNetStatSourceNATFail, axIpNatStats=axIpNatStats, axIpNatStatsGlobalMisses=axIpNatStatsGlobalMisses, axTcpProxyStatConnAttempFail=axTcpProxyStatConnAttempFail, axIpNatStatsInsideOutsideIntfName=axIpNatStatsInsideOutsideIntfName, axNetStatTCPSYNCookieSnt=axNetStatTCPSYNCookieSnt, axIpNatStatsDynamicMappingEndAddress=axIpNatStatsDynamicMappingEndAddress, axPersistentStatUrlHashPersistOKPri=axPersistentStatUrlHashPersistOKPri, axSessionGlobalStatConnCount=axSessionGlobalStatConnCount, axNetStataFlexDrop=axNetStataFlexDrop, axNetStatExtFastAgingSet=axNetStatExtFastAgingSet, axPersistentStatsPersistCookieNotFound=axPersistentStatsPersistCookieNotFound, axSysLowerOrLeftPowerSupplyStatus=axSysLowerOrLeftPowerSupplyStatus, axServiceGroupDisplayStatus=axServiceGroupDisplayStatus, axServiceGroupStatTotalL7Reqs=axServiceGroupStatTotalL7Reqs, axSmtpProxyStatsServerSelFail=axSmtpProxyStatsServerSelFail, axSysSecondaryVersionOnDisk=axSysSecondaryVersionOnDisk, axNetStatTCPReceive=axNetStatTCPReceive, axApp=axApp, axNetStatProxyNoSockDrops=axNetStatProxyNoSockDrops, axVirtualServerPortStatTotalL7Reqs=axVirtualServerPortStatTotalL7Reqs, axSslStatSSLFailedCAVfy=axSslStatSSLFailedCAVfy, axArpInfo=axArpInfo, axLayer3=axLayer3, axSysCpuUsageTable=axSysCpuUsageTable, axInterfaceAdminStatus=axInterfaceAdminStatus, axVlans=axVlans, axServiceGroupStatPktsOut=axServiceGroupStatPktsOut, axVirtualServerPortStatPeakConns=axVirtualServerPortStatPeakConns, axSwitchStatsIPFragOverlapDrop=axSwitchStatsIPFragOverlapDrop, axHAFloatingIPTable=axHAFloatingIPTable, axGslbServiceIpPortTable=axGslbServiceIpPortTable, axSysCpuUsage=axSysCpuUsage, axFtpStatALGPktReXmit=axFtpStatALGPktReXmit, axIpNatPoolFailed=axIpNatPoolFailed, axVirtualServerNameStatEntry=axVirtualServerNameStatEntry, axServerPortWeight=axServerPortWeight, axServerPortNumInServiceGroupMember=axServerPortNumInServiceGroupMember, axTrunkCfgMembers=axTrunkCfgMembers, axNetStatServerSelFail=axNetStatServerSelFail, axSwitchStatAnomAllFragDrop=axSwitchStatAnomAllFragDrop, axHAFloatingIPAddress=axHAFloatingIPAddress, axSwitchStatsARPReqRcv=axSwitchStatsARPReqRcv, axIpNatStatsDynamicMappingMissAddresses=axIpNatStatsDynamicMappingMissAddresses, axIpNatPoolTotalUsed=axIpNatPoolTotalUsed, axFastHttpProxyStatTotalFwdDataReqErr=axFastHttpProxyStatTotalFwdDataReqErr, axNetStatEntryClientSSLSIDMatch=axNetStatEntryClientSSLSIDMatch, axInterfaceMediaMaxDuplex=axInterfaceMediaMaxDuplex, axSysCpuUsageValueAtPeriod=axSysCpuUsageValueAtPeriod, axSwitchStatAnomTCPNoFragDrop=axSwitchStatAnomTCPNoFragDrop, axHAGroupStatusTable=axHAGroupStatusTable, axVirtualServerNamePortStatCurConns=axVirtualServerNamePortStatCurConns, axGslbServiceIPEntry=axGslbServiceIPEntry, axPowerSupplyVoltageStatus=axPowerSupplyVoltageStatus, axIpNatStatsDynamicMappingEntry=axIpNatStatsDynamicMappingEntry, axGlobalTotalAppPacketDrop=axGlobalTotalAppPacketDrop, axSwitchStatIPv6NoRouteDrop=axSwitchStatIPv6NoRouteDrop, axIpNatStatsDynamicMappingPoolName=axIpNatStatsDynamicMappingPoolName, axSysDisk=axSysDisk, axVirtualServerNamePortStatTable=axVirtualServerNamePortStatTable, axSessionGlobalStatTCPSynHalfOpen=axSessionGlobalStatTCPSynHalfOpen, axArpEntryAging=axArpEntryAging, axHttpProxyStatServerReSel=axHttpProxyStatServerReSel, axSwitchStatAnomLanAttackDrop=axSwitchStatAnomLanAttackDrop, axGslbSiteSlbDeviceAdminPreference=axGslbSiteSlbDeviceAdminPreference, axSwitchStatL3IPv6Forward=axSwitchStatL3IPv6Forward, axSysPrimaryVersionOnDisk=axSysPrimaryVersionOnDisk, axSwitchStatFwdKernel=axSwitchStatFwdKernel, axServerStatServerStatus=axServerStatServerStatus, axVirtualServerStatCurConns=axVirtualServerStatCurConns, axFastHttpProxyStatTotalSNATErr=axFastHttpProxyStatTotalSNATErr, axTCPProxyStatTable=axTCPProxyStatTable, axSslStatCurrSSLConn=axSslStatCurrSSLConn, axNetStatExtL4UdpReqsNoRsp=axNetStatExtL4UdpReqsNoRsp, axHAARPRetry=axHAARPRetry, axSwitchStatEntry=axSwitchStatEntry, axSwitchStatsIncorrectLenDrop=axSwitchStatsIncorrectLenDrop, axVirtualServerPortStatPktsOut=axVirtualServerPortStatPktsOut, axFastHttpProxyStatServerReSel=axFastHttpProxyStatServerReSel, axTcpProxyStatTotalRstRcvOnEstConn=axTcpProxyStatTotalRstRcvOnEstConn, axServerStatAddress=axServerStatAddress, axInterfaceStatPktsIn=axInterfaceStatPktsIn, axServerPortStatusInServiceGroupMember=axServerPortStatusInServiceGroupMember, axNetStatExtNatPortPreserveTry=axNetStatExtNatPortPreserveTry, axFastHttpProxyStatTotalNoTuple=axFastHttpProxyStatTotalNoTuple, axFastHttpProxyStatReqPktOutOrder=axFastHttpProxyStatReqPktOutOrder, axConnReuseStats=axConnReuseStats, axAppGlobalSystemResourceUsageTable=axAppGlobalSystemResourceUsageTable, axSmtpProxyStatClientRST=axSmtpProxyStatClientRST, axFastHttpProxyStatTotalSRst=axFastHttpProxyStatTotalSRst, axPowerSupplyVoltageDescription=axPowerSupplyVoltageDescription, axNetStatTCPOutRSTACKattack=axNetStatTCPOutRSTACKattack, axMgmt=axMgmt, axGslbServiceIpPortAddr=axGslbServiceIpPortAddr, axSwitchStatsVLANFlood=axSwitchStatsVLANFlood, axGslbSites=axGslbSites, axGslbServiceIpServicePortCount=axGslbServiceIpServicePortCount, axServerPortStatBytesOut=axServerPortStatBytesOut, axAppGlobalBufferCurrentUsage=axAppGlobalBufferCurrentUsage, axVirtualServerPortStatName=axVirtualServerPortStatName, axIpNatStatsDynamicMappingAclName=axIpNatStatsDynamicMappingAclName, axVirtualServerPortTCPTemplate=axVirtualServerPortTCPTemplate, axGslbSiteSlbDeviceTable=axGslbSiteSlbDeviceTable, axTrunkStatPktsOut=axTrunkStatPktsOut, axSwitchStatsTTLExceedDrop=axSwitchStatsTTLExceedDrop, axSwitchStatVLANFlood=axSwitchStatVLANFlood, axNetStatExtL4UdpReqGreaterRsps=axNetStatExtL4UdpReqGreaterRsps, axGslbServiceIPs=axGslbServiceIPs, axVlanCfgEntry=axVlanCfgEntry, axServerPortEnabledState=axServerPortEnabledState, axNetStatExtL4RcvRstOnSyn=axNetStatExtL4RcvRstOnSyn, axInterfaceStatus=axInterfaceStatus, axGslbZones=axGslbZones, axSysAFleXEngineVersion=axSysAFleXEngineVersion, axServiceGroupMemberStatPeakConns=axServiceGroupMemberStatPeakConns, axVirtualServerNameStatPortStatus=axVirtualServerNameStatPortStatus, axTcpProxyStatTotalReXmitPkt=axTcpProxyStatTotalReXmitPkt, axFanName=axFanName, axInterfaceFlowCtrlOperStatus=axInterfaceFlowCtrlOperStatus, axNetStatExtL4TcpEst=axNetStatExtL4TcpEst, axPersistentStatCookiePersistFail=axPersistentStatCookiePersistFail, axSysHwPhySystemTemp=axSysHwPhySystemTemp, axTrunkStatPktsIn=axTrunkStatPktsIn, axSwitchStatIPTCPFragRcv=axSwitchStatIPTCPFragRcv, axAppGlobalSetting=axAppGlobalSetting, axGslbSiteSlbDeviceSiteName=axGslbSiteSlbDeviceSiteName, axInterfaceStatPktsPerSecIn=axInterfaceStatPktsPerSecIn, axPersistentStatsSSLSIDPersistOK=axPersistentStatsSSLSIDPersistOK, axNetStatEntryNoSYNPktDropFIN=axNetStatEntryNoSYNPktDropFIN, axSysCpuUsageValue=axSysCpuUsageValue, axNetStatExtNoEstSsynSntAgedOut=axNetStatExtNoEstSsynSntAgedOut, axSwitchStatIPv4NoRouteDrop=axSwitchStatIPv4NoRouteDrop, axGslbServiceIpHitCount=axGslbServiceIpHitCount, axSysAverageDataCpuUsage=axSysAverageDataCpuUsage, axSslStatModuleIndex=axSslStatModuleIndex, axInterfaceTable=axInterfaceTable, axNetStatExtBwLimitExceedDrop=axNetStatExtBwLimitExceedDrop, axNetStatExtSslTptExceedDrop=axNetStatExtSslTptExceedDrop, axSysCpuUsageEntry=axSysCpuUsageEntry, axNetStatCpuIndex=axNetStatCpuIndex, axNetStatIPOutNoRoute=axNetStatIPOutNoRoute, axNetStatEntryClientSSLSIDNotMatch=axNetStatEntryClientSSLSIDNotMatch, axSwitchStatSRCPortSuppress=axSwitchStatSRCPortSuppress, axNetStatTCPNoSLB=axNetStatTCPNoSLB, axSmtpProxyStatTable=axSmtpProxyStatTable, axSessionStatsGlobal=axSessionStatsGlobal, axPersistentStatUrlHashPersistOKSec=axPersistentStatUrlHashPersistOKSec, axTrunkStatName=axTrunkStatName, axInterfaceStatUtilPercentIn=axInterfaceStatUtilPercentIn, axGslbZoneReceivedQueries=axGslbZoneReceivedQueries, axHttpProxyStatTable=axHttpProxyStatTable, axGslbSiteSlbDeviceIpAddr=axGslbSiteSlbDeviceIpAddr, axInterfaces=axInterfaces, axSysMemoryTotal=axSysMemoryTotal, axNetworkingStats=axNetworkingStats, axServerStatAddrInPortType=axServerStatAddrInPortType, axVirtualServerName=axVirtualServerName, axHttpProxyStatTotalSvrSelErr=axHttpProxyStatTotalSvrSelErr, axFtpStatOutConnData=axFtpStatOutConnData, axNetStatExtNoEstCsynRcvAgedOut=axNetStatExtNoEstCsynRcvAgedOut, axGslbSiteSlbDevices=axGslbSiteSlbDevices, axServerAddressInPortType=axServerAddressInPortType, axTCPProxyStatEntry=axTCPProxyStatEntry, axSysCpuUsagePerPartitionPeriodIndex=axSysCpuUsagePerPartitionPeriodIndex, axServerStatPortNum=axServerStatPortNum, axSwitchStatIPFragOverlap=axSwitchStatIPFragOverlap, axNetStatIPOutNoRt=axNetStatIPOutNoRt, axFastHttpProxyStatServerConnMade=axFastHttpProxyStatServerConnMade, axNetStatEntryServerSSLSIDReset=axNetStatEntryServerSSLSIDReset, axSwitchStatAnomTCPSynFinDrop=axSwitchStatAnomTCPSynFinDrop, axTrunkCfgMemberTable=axTrunkCfgMemberTable, axTrunkCfgMemberAdminStatus=axTrunkCfgMemberAdminStatus, axFastHttpProxyStatServerPreMatureClose=axFastHttpProxyStatServerPreMatureClose, axIpNatLoggingStats=axIpNatLoggingStats, axHttpProxyStatReqReTran=axHttpProxyStatReqReTran, axTcpProxyStatCpuIndex=axTcpProxyStatCpuIndex, axGslbSiteHitCount=axGslbSiteHitCount, axServiceGroupStatPeakConns=axServiceGroupStatPeakConns, axFtpStatTotalCtrlSession=axFtpStatTotalCtrlSession, axNetStatExtL4RcvFwdFin=axNetStatExtL4RcvFwdFin, axNetStatExtAnomalyZeroWindow=axNetStatExtAnomalyZeroWindow, axSysCpuIndexInUsage=axSysCpuIndexInUsage, axNetStatConnLimitResets=axNetStatConnLimitResets, axServerStatServerBytesOut=axServerStatServerBytesOut, axServerNameInPort=axServerNameInPort, axNetStatEntryConnRateLimitResets=axNetStatEntryConnRateLimitResets, axHttpProxyStatServerPreMatureClose=axHttpProxyStatServerPreMatureClose, axTrunkStats=axTrunkStats, axVlanRouterInterface=axVlanRouterInterface, axSmtpProxyStatsFwdReqDataFail=axSmtpProxyStatsFwdReqDataFail, axSwitchStatARPReqRcv=axSwitchStatARPReqRcv, axServerPortStatCurConns=axServerPortStatCurConns, axGslbSiteSlbDeviceServicIpCount=axGslbSiteSlbDeviceServicIpCount, axPersistentStatsCookiePersistFail=axPersistentStatsCookiePersistFail, axNetStatExtNatPortPreserveSucc=axNetStatExtNatPortPreserveSucc, axTcpProxyStatTotalPassiveOpenConn=axTcpProxyStatTotalPassiveOpenConn, axInterfaceName=axInterfaceName, axNetStatUDPNoSLB=axNetStatUDPNoSLB, axNetStatServerSSLSIDReset=axNetStatServerSSLSIDReset, axVirtualServerStatTotalCurrL7Reqs=axVirtualServerStatTotalCurrL7Reqs, axVirtualServerNameStatPortNum=axVirtualServerNameStatPortNum, axInterfaceMediaActiveSpeed=axInterfaceMediaActiveSpeed, axTrunkStatTable=axTrunkStatTable, axVirtualServerPortPersistTempl=axVirtualServerPortPersistTempl, axNetStatExtTcpSynOtherFlagsDrop=axNetStatExtTcpSynOtherFlagsDrop, axServerTable=axServerTable, axInterfaceStatMcastIn=axInterfaceStatMcastIn, axNetStatExtTcpSynStaleSessionDrop=axNetStatExtTcpSynStaleSessionDrop, axSmtpProxyStatEntry=axSmtpProxyStatEntry, axIpNatPoolStatsEntry=axIpNatPoolStatsEntry, axServiceGroupStatDisplayStatus=axServiceGroupStatDisplayStatus, axSwitchStatsAnomTCPNoFragDrop=axSwitchStatsAnomTCPNoFragDrop, axGslbServiceIPTable=axGslbServiceIPTable, axServerPortType=axServerPortType, axSysAverageCpuUsage=axSysAverageCpuUsage, axNetStatServerSSLSIDNotMatch=axNetStatServerSSLSIDNotMatch, axNetStatEntryClientSSLSIDNotFound=axNetStatEntryClientSSLSIDNotFound, axGslbZoneServiceCacheModeCount=axGslbZoneServiceCacheModeCount, axArpInfoEntry=axArpInfoEntry, axSysCpu=axSysCpu, axSwitchStatTTLExceedDrop=axSwitchStatTTLExceedDrop, axFtpStatOutConnCtrl=axFtpStatOutConnCtrl, axGslbServiceIpPorts=axGslbServiceIpPorts, axGslbServiceIpPortCurrConns=axGslbServiceIpPortCurrConns)
mibBuilder.exportSymbols("A10-AX-MIB", axServerPortStatusInServiceGroupMemberStat=axServerPortStatusInServiceGroupMemberStat, axAppGlobalTotalCurrentConnections=axAppGlobalTotalCurrentConnections, axPersistentStatsCookiePersistOK=axPersistentStatsCookiePersistOK, axVirtualServerStatTotalL7Reqs=axVirtualServerStatTotalL7Reqs, axTrunkCfgMemberName=axTrunkCfgMemberName, axGslbSiteName=axGslbSiteName, axSysCpuIndexInUsagePerPartition=axSysCpuIndexInUsagePerPartition, axHAFloatingIPIndex=axHAFloatingIPIndex, axServiceGroupMemberStatTotalL7Reqs=axServiceGroupMemberStatTotalL7Reqs, axTcpProxyStatTotalRstSent=axTcpProxyStatTotalRstSent, axSessionGlobalStatReverseNATUDP=axSessionGlobalStatReverseNATUDP, axPowerSupplyIndex=axPowerSupplyIndex, axIpNatPoolPortUsage=axIpNatPoolPortUsage, axVirtualServerPortServerSSLTemplate=axVirtualServerPortServerSSLTemplate, axIpNatStatsInsideOutsideIntfDirection=axIpNatStatsInsideOutsideIntfDirection, axPersistentStatsSSLSIDPersistFail=axPersistentStatsSSLSIDPersistFail, axServiceGroupMemberEntry=axServiceGroupMemberEntry, axSmtpProxyStatsServerRST=axSmtpProxyStatsServerRST, axServiceGroups=axServiceGroups, axHttpProxyStatHttpReqSucc=axHttpProxyStatHttpReqSucc, axNetStatServerSSLSIDNotFound=axNetStatServerSSLSIDNotFound, axNetStatExtAnomalyOutOfSeq=axNetStatExtAnomalyOutOfSeq, axTrunkEntry=axTrunkEntry, axSslProxyStatsSNATFail=axSslProxyStatsSNATFail, axSmtpProxyStatSvrConnMade=axSmtpProxyStatSvrConnMade, axConnReuseStatTotalMissedResponse=axConnReuseStatTotalMissedResponse, axFastHttpProxyStatTotalFwdReqErr=axFastHttpProxyStatTotalFwdReqErr, axNetStatExtL4RcvAckOnSyn=axNetStatExtL4RcvAckOnSyn, axSwitchStatsL3IPv6Forward=axSwitchStatsL3IPv6Forward, axVirtualServerNameStatTotalL7Reqs=axVirtualServerNameStatTotalL7Reqs, axTcpProxyStatTCPSYNSNTState=axTcpProxyStatTCPSYNSNTState, axSysDiskFreeSpace=axSysDiskFreeSpace, axVirtualServerStatPktsOut=axVirtualServerStatPktsOut, axHttpProxyStatTotalPreMatureClose=axHttpProxyStatTotalPreMatureClose, axHAID=axHAID, axFanSpeed=axFanSpeed, axFastHttpProxyStatServerSelFail=axFastHttpProxyStatServerSelFail, axNetStatEntryCreateSSLSIDSucc=axNetStatEntryCreateSSLSIDSucc, axFastHttpProxyStatTotalProxyConns=axFastHttpProxyStatTotalProxyConns, axNetStatExtNatIcmpProcess=axNetStatExtNatIcmpProcess, axConnReuseStatTotalUNBind=axConnReuseStatTotalUNBind, axNetStatExtIgnoreMsl=axNetStatExtIgnoreMsl, axConnReuseStatTotalDelayedUNBound=axConnReuseStatTotalDelayedUNBound, axVirtualServerNamePortStatBytesIn=axVirtualServerNamePortStatBytesIn, axPersistentStatsSIPPersistFail=axPersistentStatsSIPPersistFail, axServiceGroupLbAlgorithm=axServiceGroupLbAlgorithm, axVirtualServerPortRTSPTemplate=axVirtualServerPortRTSPTemplate, axInterfaceStatTable=axInterfaceStatTable, axHttpProxyStatServerSelFail=axHttpProxyStatServerSelFail, axHAFloatingIPEntry=axHAFloatingIPEntry, axPowerSupplyName=axPowerSupplyName, axServiceGroupStatName=axServiceGroupStatName, axVirtualServerEntry=axVirtualServerEntry, axVirtualServerStatPeakConns=axVirtualServerStatPeakConns, axIpNatStatsIntfInsideOutside=axIpNatStatsIntfInsideOutside, axVirtualServerPortStatAddressType=axVirtualServerPortStatAddressType, axNetStats=axNetStats, axVirtualServerNameStatPortType=axVirtualServerNameStatPortType, axInterfaceStatMcastOut=axInterfaceStatMcastOut, axL3vGlobalStatsTable=axL3vGlobalStatsTable, axServerStatAddrInPort=axServerStatAddrInPort, axSwitchStatIPFragOverlapDrop=axSwitchStatIPFragOverlapDrop, axSslStatTotalSSLConn=axSslStatTotalSSLConn, axFastHttpProxyStatTotalSvrConn=axFastHttpProxyStatTotalSvrConn, axVirtualServerHAGroup=axVirtualServerHAGroup, axSwitchStatsARPRespRcv=axSwitchStatsARPRespRcv, axVirtualServerStatPortDisplayStatus=axVirtualServerStatPortDisplayStatus, axVirtualServerStatAddress=axVirtualServerStatAddress, axSmtpProxyStatCpuIndex=axSmtpProxyStatCpuIndex, axGslbServiceIpOperState=axGslbServiceIpOperState, axGslbSiteServiceIpAddr=axGslbSiteServiceIpAddr, axNetStatExt=axNetStatExt, axHttpProxyStatTotalProxyConns=axHttpProxyStatTotalProxyConns, axAppGlobalAllowedMaxValue=axAppGlobalAllowedMaxValue, axSmtpProxyStatParseReqFail=axSmtpProxyStatParseReqFail, axSysHwFan1Speed=axSysHwFan1Speed, axSysCpuNumber=axSysCpuNumber, axNetStatTCPSynRecv=axNetStatTCPSynRecv, axGslbZoneServiceName=axGslbZoneServiceName, axIpNatNat64Stats=axIpNatNat64Stats, axServiceGroupEntry=axServiceGroupEntry, axVirtualServerNameStatStatus=axVirtualServerNameStatStatus, axSwitchStatAnomPingDeathDrop=axSwitchStatAnomPingDeathDrop, axVirtualServerPortStatBytesIn=axVirtualServerPortStatBytesIn, axNetStatExtL4RcvFwdLastAck=axNetStatExtL4RcvFwdLastAck, axFastHttpProxyStatTotalSvrSelErr=axFastHttpProxyStatTotalSvrSelErr, axVirtualServer=axVirtualServer, axFanStatus=axFanStatus, axHAGroup=axHAGroup, axConnReuseStatTotalTerm=axConnReuseStatTotalTerm, axGslbSiteDeviceStatsTable=axGslbSiteDeviceStatsTable, axGslbSiteSlbDeviceAvailSessionCount=axGslbSiteSlbDeviceAvailSessionCount, axFastHttpProxyStatNoTupleErr=axFastHttpProxyStatNoTupleErr, axSysCpuEntry=axSysCpuEntry, axConnReuseStatTotalLongResponse=axConnReuseStatTotalLongResponse, axL3vGlobalStatsTotalNewL7Connections=axL3vGlobalStatsTotalNewL7Connections, axTcpProxyStatTCPFINW1State=axTcpProxyStatTCPFINW1State, axL3vStats=axL3vStats, axSslStatTable=axSslStatTable, axNetStatExtTcpSynWithDataDrop=axNetStatExtTcpSynWithDataDrop, axSysCpuTable=axSysCpuTable, axIpNatPoolStartAddress=axIpNatPoolStartAddress, axVlanMemberIntfId=axVlanMemberIntfId, axSwitchStatTable=axSwitchStatTable, axServiceGroupMemberStat=axServiceGroupMemberStat, axSwitchStatL2Forward=axSwitchStatL2Forward, axHttpProxyStatReqPktOutOrder=axHttpProxyStatReqPktOutOrder, axInterfaceStatDropsIn=axInterfaceStatDropsIn, axSmtpProxyStatTotalProxyConn=axSmtpProxyStatTotalProxyConn, axVirtualServerNameStatPeakConns=axVirtualServerNameStatPeakConns, axServerPortStatTotalConns=axServerPortStatTotalConns, axGslbServiceIpPortProtocolFlag=axGslbServiceIpPortProtocolFlag, axFtpStatTotalALGPkt=axFtpStatTotalALGPkt, axGslbGroupEntry=axGslbGroupEntry, axServiceGroupStatCurConns=axServiceGroupStatCurConns, axConnReuseStatTotalMissedRes=axConnReuseStatTotalMissedRes, axTcpProxyStatTCPCloseState=axTcpProxyStatTCPCloseState, axVirtualServerNamePortStatPktsIn=axVirtualServerNamePortStatPktsIn, axNetStatNoSYNPktDropACK=axNetStatNoSYNPktDropACK, axSwitchStatsIPv6NoRouteDrop=axSwitchStatsIPv6NoRouteDrop, axSysHwPhySystemTempStatus=axSysHwPhySystemTempStatus, axSwitchStatIPFragReasmFail=axSwitchStatIPFragReasmFail, axGslbZoneBackupModeCount=axGslbZoneBackupModeCount, axPersistentStatSIPPersistOK=axPersistentStatSIPPersistOK, axSwitchStatsL4Process=axSwitchStatsL4Process, axServiceGroupTable=axServiceGroupTable, axNetStatEntrySYNThrotte=axNetStatEntrySYNThrotte, axSslStatAvailCryptoEngine=axSslStatAvailCryptoEngine, axHAFloatingIPCount=axHAFloatingIPCount, axTrunks=axTrunks, axGlobalAppBuffer=axGlobalAppBuffer, axServiceGroupMemberStatTable=axServiceGroupMemberStatTable, axHAGroupPeerPriority=axHAGroupPeerPriority, axAppGlobalAllowedCurrentValue=axAppGlobalAllowedCurrentValue, axGslbServiceIpProtocolFlag=axGslbServiceIpProtocolFlag, axSwitchStats=axSwitchStats, axHttpProxyStatTotalNoTuple=axHttpProxyStatTotalNoTuple, axGslbGroupStatus=axGslbGroupStatus, axVirtualServerStatBytesOut=axVirtualServerStatBytesOut, axHttpProxyStatTotalSvrReSel=axHttpProxyStatTotalSvrReSel, axTcpProxyStatTotalRxBuf=axTcpProxyStatTotalRxBuf, axNetStataFlexDrops=axNetStataFlexDrops, axVirtualServerPortType=axVirtualServerPortType, axVirtualServerPortHTTPTemplate=axVirtualServerPortHTTPTemplate, axGlobalAppPacketDrop=axGlobalAppPacketDrop, axVirtualServerNameStatDisplayStatus=axVirtualServerNameStatDisplayStatus, axNetStatConnRateLimitDrops=axNetStatConnRateLimitDrops, axServerName=axServerName, axServiceGroupStatPktsIn=axServiceGroupStatPktsIn, axServerPortStatPersistConns=axServerPortStatPersistConns, axHttpProxyStatTotalNoProxy=axHttpProxyStatTotalNoProxy, axTcpProxyStatTCPClosingState=axTcpProxyStatTCPClosingState, axSmtpProxyStatCurrProxyConn=axSmtpProxyStatCurrProxyConn, axNetStatExtNatIcmpNoMatch=axNetStatExtNatIcmpNoMatch, axServerPortStatEntry=axServerPortStatEntry, axNetStatExtL4ServerHandshakeFail=axNetStatExtL4ServerHandshakeFail, axServerStatServerTotalCurrL7Reqs=axServerStatServerTotalCurrL7Reqs, axFastHttpProxyStatTotalReqPktOutOrder=axFastHttpProxyStatTotalReqPktOutOrder, axHttpProxyStatTotalReq=axHttpProxyStatTotalReq, axTcpProxyStatTCPCloseWState=axTcpProxyStatTCPCloseWState, axServiceGroupMemberStatPersistConns=axServiceGroupMemberStatPersistConns, axNetStatExtSslCpsExceedDrop=axNetStatExtSslCpsExceedDrop, axNetStatExtL4RcvReXmitSynAck=axNetStatExtL4RcvReXmitSynAck, axVirtualServerPortAddress=axVirtualServerPortAddress, axNetStatExtSslTptWaterMarkDrop=axNetStatExtSslTptWaterMarkDrop, axInterfaceMacAddr=axInterfaceMacAddr, axTrunkPortThresholdTimer=axTrunkPortThresholdTimer, axSslStatSSLHWRingFull=axSslStatSSLHWRingFull, axNetStatCreateSSLSIDFail=axNetStatCreateSSLSIDFail, axConnReuseStatTotalLongRes=axConnReuseStatTotalLongRes, axAppGlobalStats=axAppGlobalStats, axHttpProxyStatServerConnMade=axHttpProxyStatServerConnMade, axNetStatUDPsNoSLB=axNetStatUDPsNoSLB, axSmtpProxyStatServerRST=axSmtpProxyStatServerRST, axSysCpuCtrlCpuFlag=axSysCpuCtrlCpuFlag, axL3vGlobalStatsTotalCurrentConnections=axL3vGlobalStatsTotalCurrentConnections, axHttpProxyStatFwdReqDataFail=axHttpProxyStatFwdReqDataFail, axPersistentStatsUrlHashPersistOKPri=axPersistentStatsUrlHashPersistOKPri, axVlanName=axVlanName, axVirtualServerNameStatBytesIn=axVirtualServerNameStatBytesIn, axSmtpProxyStatServerResel=axSmtpProxyStatServerResel, axGslbServiceIpAddr=axGslbServiceIpAddr, axTcpProxyStatTotalOutPkt=axTcpProxyStatTotalOutPkt, axServerStatPortType=axServerStatPortType, axIpNatPoolStatsTable=axIpNatPoolStatsTable, axGslbSiteOperState=axGslbSiteOperState, axTcpProxyStatTotalActiveOpenConn=axTcpProxyStatTotalActiveOpenConn, axServerPort=axServerPort, axPersistentStats=axPersistentStats, axFastHttpProxyStatNoProxyErr=axFastHttpProxyStatNoProxyErr, axVirtualServerNameStatTotalSuccL7Reqs=axVirtualServerNameStatTotalSuccL7Reqs, axVirtualServerPortAddressType=axVirtualServerPortAddressType, axServerPortStatPktsOut=axServerPortStatPktsOut, axSwitchStatsAnomIPOptionDrop=axSwitchStatsAnomIPOptionDrop, axGslbZoneStatsEntry=axGslbZoneStatsEntry, axVirtualServerPortStatCurConns=axVirtualServerPortStatCurConns, axL3vGlobalStatsTotalL4Sessions=axL3vGlobalStatsTotalL4Sessions, axServiceGroupMemberAddrType=axServiceGroupMemberAddrType, axNetStatNoVportDrop=axNetStatNoVportDrop, axNetStatTCPOutRSTStaleSess=axNetStatTCPOutRSTStaleSess, axNetStatSSLSIDPersistSucc=axNetStatSSLSIDPersistSucc, axServerPortStatTable=axServerPortStatTable, axIpNatStatsInsideOutsideIntfIndex=axIpNatStatsInsideOutsideIntfIndex, axServerAddress=axServerAddress, axSysCpuUsagePerPartitionTable=axSysCpuUsagePerPartitionTable, axTrunkPortThreshold=axTrunkPortThreshold, axSysAverageControlCpuUsage=axSysAverageControlCpuUsage, axAppGlobals=axAppGlobals, axHttpProxyStatTotalSuccReq=axHttpProxyStatTotalSuccReq, axTcpProxyStatRstRvdEstConn=axTcpProxyStatRstRvdEstConn, axPersistentStatTable=axPersistentStatTable, axVirtualServerNameStatPktsIn=axVirtualServerNameStatPktsIn, axFanIndex=axFanIndex, axHttpProxyStatClientRst=axHttpProxyStatClientRst, axAppGlobalTotalSSLConnections=axAppGlobalTotalSSLConnections, axTcpProxyStatTCPLastACKState=axTcpProxyStatTCPLastACKState, axNetStatSourceNATFails=axNetStatSourceNATFails, axFastHttpProxyStatTotalPreMatureClose=axFastHttpProxyStatTotalPreMatureClose, axVirtualServerNameStatTable=axVirtualServerNameStatTable, axNetStatEntry=axNetStatEntry, axSysHwFan2Speed=axSysHwFan2Speed, axServiceGroupStat=axServiceGroupStat, axServiceGroupStatTotalCurrL7Reqs=axServiceGroupStatTotalCurrL7Reqs, axSslStats=axSslStats, axVirtualServerPortDiameterTemplate=axVirtualServerPortDiameterTemplate, axNetStatTCPRcv=axNetStatTCPRcv, axSysCpuUsagePerPartitionValueAtPeriod=axSysCpuUsagePerPartitionValueAtPeriod, axIpNatStatsIntfInsideOutsideEntry=axIpNatStatsIntfInsideOutsideEntry, axIpNatPoolStats=axIpNatPoolStats, axConnReuseStatCpuIndex=axConnReuseStatCpuIndex, axGslbGroupMember=axGslbGroupMember, axServerPortEntry=axServerPortEntry, axSwitchStatsFwdKernel=axSwitchStatsFwdKernel, axSessionGlobalStatNonTcpUdpIPSession=axSessionGlobalStatNonTcpUdpIPSession, axGslbGroupTable=axGslbGroupTable, axGslbGroupName=axGslbGroupName, axAppGlobalTotalNewL4Connections=axAppGlobalTotalNewL4Connections, axSessionStats=axSessionStats, axGslbSiteSlbDeviceEntry=axGslbSiteSlbDeviceEntry, axVirtualServerPortEntry=axVirtualServerPortEntry, axServerHealthMonitor=axServerHealthMonitor, axSmtpProxyStatServerSelFail=axSmtpProxyStatServerSelFail, axTrunkTable=axTrunkTable, axGslb=axGslb, axInterfaceIndex=axInterfaceIndex, axServiceGroupNameInMember=axServiceGroupNameInMember, axVirtualServerPortStatEntry=axVirtualServerPortStatEntry, axSwitchStatsProtoDownDrop=axSwitchStatsProtoDownDrop, axTcpProxyStatOrphanSocket=axTcpProxyStatOrphanSocket, axSysCpuUsagePeriodIndex=axSysCpuUsagePeriodIndex, axNetStatExtL4RcvFwdFinDrop=axNetStatExtL4RcvFwdFinDrop, axGslbSiteServiceIpOperState=axGslbSiteServiceIpOperState, axAppGlobalSystemResourceUsageEntry=axAppGlobalSystemResourceUsageEntry, axVirtualServerPortEnabled=axVirtualServerPortEnabled)
mibBuilder.exportSymbols("A10-AX-MIB", axNetStatExtAnomalyPbslbDrop=axNetStatExtAnomalyPbslbDrop, axNetStatClientSSLSIDNotFound=axNetStatClientSSLSIDNotFound, axArpEntrySourceInterface=axArpEntrySourceInterface, axGslbZoneStatsTable=axGslbZoneStatsTable, axPersistentStatCookiePersistOK=axPersistentStatCookiePersistOK, axHttpProxyStatParseReqFail=axHttpProxyStatParseReqFail, axL3vGlobalStatsTotalSslConnections=axL3vGlobalStatsTotalSslConnections, axGslbZoneServiceReceivedQueries=axGslbZoneServiceReceivedQueries, axHttpProxyStatCurrProxyConns=axHttpProxyStatCurrProxyConns, axVirtualServerStatTotalSuccL7Reqs=axVirtualServerStatTotalSuccL7Reqs, axSslStatSSLNoHWContextMem=axSslStatSSLNoHWContextMem, axLogBufferPri=axLogBufferPri, axIpNatStatsIntfInsideOutsideTable=axIpNatStatsIntfInsideOutsideTable, axIpNatStatsDynamicMappingAccessListID=axIpNatStatsDynamicMappingAccessListID, axLogSyslogHostIndex=axLogSyslogHostIndex, axGslbSiteServiceIpPortNum=axGslbSiteServiceIpPortNum, axSslProxyStatsCurrProxyConns=axSslProxyStatsCurrProxyConns, axVlanMemberVlanId=axVlanMemberVlanId, axNetStatExtBwWaterMarkDrop=axNetStatExtBwWaterMarkDrop, axVlanId=axVlanId, axTcpProxyStatReTranPkt=axTcpProxyStatReTranPkt, axSmtpProxyStatsReqPktOutOrder=axSmtpProxyStatsReqPktOutOrder, axHttpProxyStatFwdReqFail=axHttpProxyStatFwdReqFail, axServerStat=axServerStat, axServerPortStatPktsIn=axServerPortStatPktsIn, axServerAddressInPort=axServerAddressInPort, axFtpStatTotalDataSession=axFtpStatTotalDataSession, axSwitchStatAnomIPOptionDrop=axSwitchStatAnomIPOptionDrop, axVirtualServerNamePortStatTotalL7Reqs=axVirtualServerNamePortStatTotalL7Reqs, axSwitchStatIPFragReasmOk=axSwitchStatIPFragReasmOk, axNetStatExtL4RcvFwdRst=axNetStatExtL4RcvFwdRst, axTrunkCfgMemberOperStatus=axTrunkCfgMemberOperStatus, axSwitchStatsLinkdownDrop=axSwitchStatsLinkdownDrop, axArpIpAddr=axArpIpAddr, axTcpProxyStatTCPFINW2State=axTcpProxyStatTCPFINW2State, axSwitchStatsAnomPingDeathDrop=axSwitchStatsAnomPingDeathDrop, axServiceGroupMemberTable=axServiceGroupMemberTable, axVirtualServerStatPktsIn=axVirtualServerStatPktsIn, axVirtualServerNameStatPersistConns=axVirtualServerNameStatPersistConns, axSslProxyStatsServerErr=axSslProxyStatsServerErr, axSessionGlobalStatOther=axSessionGlobalStatOther, axGslbSiteAdminState=axGslbSiteAdminState, axVirtualServerPortSMTPTemplate=axVirtualServerPortSMTPTemplate, axTrunkStatErrorsIn=axTrunkStatErrorsIn, axGslbZoneCount=axGslbZoneCount, axNetStatTCPSYNCookieSntFail=axNetStatTCPSYNCookieSntFail, axAppGlobalTotalCurrentConnectionsInteger=axAppGlobalTotalCurrentConnectionsInteger, axTcpProxyStatInputErr=axTcpProxyStatInputErr, axFastHttpProxyStatHttpReq=axFastHttpProxyStatHttpReq, axHttpProxyStatNoTupleErr=axHttpProxyStatNoTupleErr, axSslProxyStatsNoRoute=axSslProxyStatsNoRoute, axSwitchStatsUnknownProtoDrop=axSwitchStatsUnknownProtoDrop, axLogSyslogHost=axLogSyslogHost, axVirtualServerStatPortStatus=axVirtualServerStatPortStatus, axConnReuseStatTotalUNBound=axConnReuseStatTotalUNBound, axFastHttpProxyStatCpuIndex=axFastHttpProxyStatCpuIndex, axSessionGlobalStatTCPEstablished=axSessionGlobalStatTCPEstablished, axArpEntryTotal=axArpEntryTotal, axTcpProxyStatSocketAlloc=axTcpProxyStatSocketAlloc, axNetStatEntryServerSSLSIDNotMatch=axNetStatEntryServerSSLSIDNotMatch, axHAGroupID=axHAGroupID, axSysPowerSupplyStatusTable=axSysPowerSupplyStatusTable, axPersistentStatSIPPersistFail=axPersistentStatSIPPersistFail, axServiceGroupMemberStatBytesIn=axServiceGroupMemberStatBytesIn, axSwitchStatLinkdownDrop=axSwitchStatLinkdownDrop, axVirtualServerStatAddressType=axVirtualServerStatAddressType, axSslStatSSLModNum=axSslStatSSLModNum, axSwitchStatIPFragRcv=axSwitchStatIPFragRcv, axServerStatTable=axServerStatTable, axFastHttpProxyStatTotalSuccReq=axFastHttpProxyStatTotalSuccReq, axServerStatCount=axServerStatCount, axInterfaceStatIndex=axInterfaceStatIndex, axServerPortPriorityInServiceGroupMember=axServerPortPriorityInServiceGroupMember, axHttpProxyStatTotalFwdReqErr=axHttpProxyStatTotalFwdReqErr, axGslbZoneAdminState=axGslbZoneAdminState, axGslbZoneServiceAdminState=axGslbZoneServiceAdminState, axConnReuseStatTable=axConnReuseStatTable, axGslbSiteNameInDeviceEntry=axGslbSiteNameInDeviceEntry, axL3vGlobalStatsTotalNewConnections=axL3vGlobalStatsTotalNewConnections, axServiceGroupMemberStatAddrType=axServiceGroupMemberStatAddrType, axArpInfoTable=axArpInfoTable, axNetStatTCPSynCookieFail=axNetStatTCPSynCookieFail, axVirtualServerNameStatPktsOut=axVirtualServerNameStatPktsOut, axNetStatEntryInbandHMRetry=axNetStatEntryInbandHMRetry, axHAFloatingIP=axHAFloatingIP, axNetStatEntryServerSSLSIDNotFound=axNetStatEntryServerSSLSIDNotFound, axNetStatExtL4UdpReqs=axNetStatExtL4UdpReqs, axServerMonitorState=axServerMonitorState, axSmtpProxyStatsSNATFail=axSmtpProxyStatsSNATFail, axServerPortStatStatus=axServerPortStatStatus, axSmtpProxyStatNoProxyError=axSmtpProxyStatNoProxyError, axGslbGroupAddress=axGslbGroupAddress, axServiceGroup=axServiceGroup, axSysHwFan3Speed=axSysHwFan3Speed, axTrunkCfgMemberTotal=axTrunkCfgMemberTotal, axVirtualServerPortStat=axVirtualServerPortStat, axNetStatExtNatNoRevRoute=axNetStatExtNatNoRevRoute, axGslbZoneServiceStatsEntry=axGslbZoneServiceStatsEntry, axTcpProxyStats=axTcpProxyStats, axInterfaceStatEntry=axInterfaceStatEntry, axLogSyslogHostEntry=axLogSyslogHostEntry, axServerPortStatTotalL7Reqs=axServerPortStatTotalL7Reqs, axInterfaceMediaMaxSpeed=axInterfaceMediaMaxSpeed, axConnReuseStatTotalOpenPersist=axConnReuseStatTotalOpenPersist, axNetStatTCPSynRcv=axNetStatTCPSynRcv, axL3vGlobalStatsPartitionName=axL3vGlobalStatsPartitionName, axHAGroupLocalPriority=axHAGroupLocalPriority, axGslbServiceIpPortEntry=axGslbServiceIpPortEntry, axSwitchStatsIPFragOverlap=axSwitchStatsIPFragOverlap, axVirtualServerStatDisplayStatus=axVirtualServerStatDisplayStatus, axServiceGroupMemberStatCurConns=axServiceGroupMemberStatCurConns, axPersistentStatUrlHashPersistFail=axPersistentStatUrlHashPersistFail, axNetStatExtOtherSessionAgedOut=axNetStatExtOtherSessionAgedOut, axSwitchStatsIPv4NoRouteDrop=axSwitchStatsIPv4NoRouteDrop, axSwitchStatsIPFragReasmOk=axSwitchStatsIPFragReasmOk, axNetStatExtL4RcvReXmitSynAckDq=axNetStatExtL4RcvReXmitSynAckDq, axGslbSiteSlbForDeviceIpAddr=axGslbSiteSlbForDeviceIpAddr, axServerStatServerPeakConns=axServerStatServerPeakConns, axGslbZoneOperState=axGslbZoneOperState, axNetStatEntryCreateSSLSIDFail=axNetStatEntryCreateSSLSIDFail, axVirtualServerPortTCPProxyTemplate=axVirtualServerPortTCPProxyTemplate, axVlanMemberTagged=axVlanMemberTagged, axGlobalTotalThroughput=axGlobalTotalThroughput, axTrunkStatErrorsOut=axTrunkStatErrorsOut, axNetStatExtTcpInvalidDrop=axNetStatExtTcpInvalidDrop, axVirtualServerAddress=axVirtualServerAddress, axTrunkTypeLacpEnabled=axTrunkTypeLacpEnabled, axHttpProxyStats=axHttpProxyStats, axGslbGroupAttribute=axGslbGroupAttribute, axGslbZoneServiceFqdn=axGslbZoneServiceFqdn, axGslbServiceIpPortOperState=axGslbServiceIpPortOperState, axServerEnabledState=axServerEnabledState, axArpMacAddr=axArpMacAddr, axHttpProxyStatTotalFwdDataReqErr=axHttpProxyStatTotalFwdDataReqErr, axNetStatExtL4RcvRevLastAck=axNetStatExtL4RcvRevLastAck, axServerPortTable=axServerPortTable, axSwitchStatsIPFragReasmFail=axSwitchStatsIPFragReasmFail, axNetStatExtAnomalyBadContent=axNetStatExtAnomalyBadContent, axSystem=axSystem, axSysPrimaryVersionOnCF=axSysPrimaryVersionOnCF, axInterfaceEntry=axInterfaceEntry, axNetStatExtNatNoFwdRoute=axNetStatExtNatNoFwdRoute, axHAFloatingIPHaGroupID=axHAFloatingIPHaGroupID, axIpNatPoolTotalFree=axIpNatPoolTotalFree, axSessionGlobalStatConnFree=axSessionGlobalStatConnFree, axVirtualServers=axVirtualServers, axGslbZoneServiceProxyModeCount=axGslbZoneServiceProxyModeCount, axVirtualServerNameStatBytesOut=axVirtualServerNameStatBytesOut, axConnReuseStatTotalEst=axConnReuseStatTotalEst, axServerPortStatPeakConns=axServerPortStatPeakConns, axIpNatStatsDynamicMappingEndAddressType=axIpNatStatsDynamicMappingEndAddressType, axVirtualServerPortStatTotalSuccL7Reqs=axVirtualServerPortStatTotalSuccL7Reqs, axFastHttpProxyStatTotalReqReXmit=axFastHttpProxyStatTotalReqReXmit, axVlanCfgMemberTable=axVlanCfgMemberTable, axTrunkStatBytesIn=axTrunkStatBytesIn, axSmtpProxyStatsTotalProxyConns=axSmtpProxyStatsTotalProxyConns, axSmtpProxyStatSmtpReqSucc=axSmtpProxyStatSmtpReqSucc, axTrunkStatTotal=axTrunkStatTotal, axSslProxyStatsSessNotFound=axSslProxyStatsSessNotFound, axServiceGroupMemberStatPktsOut=axServiceGroupMemberStatPktsOut, axSwitchStatUnknownProtoDrop=axSwitchStatUnknownProtoDrop, axIpNatStatsGlobal=axIpNatStatsGlobal, axVirtualServerStatPortType=axVirtualServerStatPortType, axSessionGlobalStatTCPHalfOpen=axSessionGlobalStatTCPHalfOpen, axFastHttpProxyStatTotalNoProxy=axFastHttpProxyStatTotalNoProxy, axSysHwInfo=axSysHwInfo, axVirtualServerPortDisplayStatus=axVirtualServerPortDisplayStatus, axL3vGlobalStatsTotalNewL4Connections=axL3vGlobalStatsTotalNewL4Connections, axFastHttpProxyStatTotalSvrReSel=axFastHttpProxyStatTotalSvrReSel, axAppGlobalTotalNewConnections=axAppGlobalTotalNewConnections, PYSNMP_MODULE_ID=axMgmt, axNetStatNoSynPktDrop=axNetStatNoSynPktDrop, axNetStatExtAutoReselectServer=axNetStatExtAutoReselectServer, axIpNatStatsDynamicMappingTotalAddresses=axIpNatStatsDynamicMappingTotalAddresses, axSysMemoryUsage=axSysMemoryUsage, axServers=axServers, axPowerSupplyVoltageTable=axPowerSupplyVoltageTable, axLogEmailPri=axLogEmailPri, axNetStatTCPOutRst=axNetStatTCPOutRst, axPersistentStatSSLSIDPersistOK=axPersistentStatSSLSIDPersistOK, axTrunkStatus=axTrunkStatus, axVirtualServerNamePortStatPktsOut=axVirtualServerNamePortStatPktsOut, axHttpProxyStatTotalReqReXmit=axHttpProxyStatTotalReqReXmit, axNetStat2UDPReceive=axNetStat2UDPReceive, axServerPortStatTotalSuccL7Reqs=axServerPortStatTotalSuccL7Reqs, axTrunkCfgMemberTrunkName=axTrunkCfgMemberTrunkName, axVirtualServerPortRamCacheTemplate=axVirtualServerPortRamCacheTemplate, axGslbSiteServiceIpAdminState=axGslbSiteServiceIpAdminState, axNetStatTCPSynCookieFails=axNetStatTCPSynCookieFails, axGslbZoneServiceBackupModeCount=axGslbZoneServiceBackupModeCount, axGslbGroupPriority=axGslbGroupPriority, axServerNameInServiceGroupMemberStat=axServerNameInServiceGroupMemberStat, axVirtualServerNamePortStatBytesOut=axVirtualServerNamePortStatBytesOut, axVirtualServerNamePortStatPersistConns=axVirtualServerNamePortStatPersistConns, axNetStat2TCPReceive=axNetStat2TCPReceive, axNetStatTCPOutReset=axNetStatTCPOutReset, axAppGlobalTotalL7Requests=axAppGlobalTotalL7Requests, axNetStatInbandHMReassign=axNetStatInbandHMReassign, axFastHttpProxyStatFwdReqFail=axFastHttpProxyStatFwdReqFail, axVirtualServerPortConnReuseTemplate=axVirtualServerPortConnReuseTemplate, axNetStatInbandHMRetry=axNetStatInbandHMRetry, acosRoot=acosRoot, axServerStatServerTotalConns=axServerStatServerTotalConns, axServiceGroupStatEntry=axServiceGroupStatEntry, axGslbServiceIpSiteName=axGslbServiceIpSiteName, axGslbSiteServiceIpName=axGslbSiteServiceIpName, axNetStatEntryInbandHMReassign=axNetStatEntryInbandHMReassign, axServerCount=axServerCount, axNetStatConnRateLimitResets=axNetStatConnRateLimitResets, axSmtpProxyStatNoTupleError=axSmtpProxyStatNoTupleError, axSessionGlobalStatUDP=axSessionGlobalStatUDP, axSmtpProxyStatSNATFail=axSmtpProxyStatSNATFail, axSysMemory=axSysMemory, axSysCpuUsageCtrlCpuFlag=axSysCpuUsageCtrlCpuFlag, axFastHttpProxyStatCurrProxyConns=axFastHttpProxyStatCurrProxyConns, axSysFanStatusTable=axSysFanStatusTable, axNetStatExtNoResourceDrop=axNetStatExtNoResourceDrop, axFixedNatStats=axFixedNatStats, axServerStatServerPersistConns=axServerStatServerPersistConns, axGslbSiteSlbDeviceSessionUtilization=axGslbSiteSlbDeviceSessionUtilization, axTcpProxyStatTotalInTCPPkt=axTcpProxyStatTotalInTCPPkt, axL3vGlobalStatsTotalL7Requests=axL3vGlobalStatsTotalL7Requests, axVirtualServerNamePortStatTotalCurrL7Reqs=axVirtualServerNamePortStatTotalCurrL7Reqs, axServiceGroupMemberStatEntry=axServiceGroupMemberStatEntry, axServerStatServerPktsOut=axServerStatServerPktsOut, axNetStatL4SynAttack=axNetStatL4SynAttack, axNetStatExtTcpSessionAgedOut=axNetStatExtTcpSessionAgedOut, axNetStatExtResetUnknownConns=axNetStatExtResetUnknownConns, axNetStatEntrySSLSIDPersistFail=axNetStatEntrySSLSIDPersistFail, axSwitchStatsAnomSYNFragDrop=axSwitchStatsAnomSYNFragDrop, axNetStatExtL4RcvRevFin=axNetStatExtL4RcvRevFin, axSwitchStatsAnomLanAttackDrop=axSwitchStatsAnomLanAttackDrop, axSslProxyStats=axSslProxyStats, axHttpProxyStatEntry=axHttpProxyStatEntry, axServer=axServer, axInterfaceAlias=axInterfaceAlias, axVirtualServerCount=axVirtualServerCount, axVlanCfgTable=axVlanCfgTable, axSysCpuIndex=axSysCpuIndex, axServiceGroupCount=axServiceGroupCount, axHttpProxyStatHttpReq=axHttpProxyStatHttpReq, axHAConfigEnabled=axHAConfigEnabled, axVirtualServerPortHaGroupID=axVirtualServerPortHaGroupID, axPowerSupplyVoltageIndex=axPowerSupplyVoltageIndex, axVirtualServerDisplayStatus=axVirtualServerDisplayStatus, axNetStatExtL2Dsr=axNetStatExtL2Dsr, axGslbSiteStatsTable=axGslbSiteStatsTable, axServerEntry=axServerEntry, axNetStatEntryConnRateLimitDrops=axNetStatEntryConnRateLimitDrops, axNetStatUDPReceive=axNetStatUDPReceive, axLogConsolePri=axLogConsolePri, axSysFirmwareVersion=axSysFirmwareVersion, axNetStatConnLimitDrop=axNetStatConnLimitDrop, axNetStatEntryTCPOutRSTProxy=axNetStatEntryTCPOutRSTProxy)
mibBuilder.exportSymbols("A10-AX-MIB", axSmtpProxyStatsSvrPrematureClose=axSmtpProxyStatsSvrPrematureClose, axPowerSupplyVoltageTotal=axPowerSupplyVoltageTotal, axSslStatEntry=axSslStatEntry, axSwitchStatL4Process=axSwitchStatL4Process, axGslbSiteSlbDeviceName=axGslbSiteSlbDeviceName, axHA=axHA, axFastHttpProxyStatTotalCRst=axFastHttpProxyStatTotalCRst, axIpNatPoolEndAddress=axIpNatPoolEndAddress, axConnReuseStatOpenPersist=axConnReuseStatOpenPersist, axNetStatServerSelFails=axNetStatServerSelFails, axSwitchStatsAnomAllFragDrop=axSwitchStatsAnomAllFragDrop, axGslbZoneStickyModeCount=axGslbZoneStickyModeCount, axHttpProxyStatTotalSRst=axHttpProxyStatTotalSRst, axHAGlobalConfig=axHAGlobalConfig, axNetStatTCPOutRSTAFleX=axNetStatTCPOutRSTAFleX, axFastHttpProxyStatServerRst=axFastHttpProxyStatServerRst, axNetStatExtL4RcfRevRst=axNetStatExtL4RcfRevRst, axSwitchStatsIPTCPFragRcv=axSwitchStatsIPTCPFragRcv, axFastHttpProxyStatEntry=axFastHttpProxyStatEntry, axSwitchStatsSRCPortSuppress=axSwitchStatsSRCPortSuppress, axServiceGroupType=axServiceGroupType, axPersistentStatPersistCookieNotFound=axPersistentStatPersistCookieNotFound, axVirtualServerStatEntry=axVirtualServerStatEntry, axVirtualServerPortStatPktsIn=axVirtualServerPortStatPktsIn, axVirtualServerPortStatPersistConns=axVirtualServerPortStatPersistConns, axGlobalTotalL4SessionInteger=axGlobalTotalL4SessionInteger, axServerStatServerCurConns=axServerStatServerCurConns, axNetStatEntryNoSYNPktDropACK=axNetStatEntryNoSYNPktDropACK, axGslbZoneName=axGslbZoneName, axVirtualServerStatTotConns=axVirtualServerStatTotConns, axAppGlobalTotalNewIPNatConnections=axAppGlobalTotalNewIPNatConnections, axGslbServiceIpName=axGslbServiceIpName, axLogBufferSize=axLogBufferSize, axHAGroupCount=axHAGroupCount, axSwitchStatProtoDownDrop=axSwitchStatProtoDownDrop, axNetStatCreateSSLSIDSucc=axNetStatCreateSSLSIDSucc, axSmtpProxyStatFwdReqDataFail=axSmtpProxyStatFwdReqDataFail, axSslStatSSLFailedCryptoOperation=axSslStatSSLFailedCryptoOperation, axServerPortStat=axServerPortStat, axHttpProxyStatTotalReqPktOutOrder=axHttpProxyStatTotalReqPktOutOrder, axTrunkDescription=axTrunkDescription, axIpNatLsnStats=axIpNatLsnStats, axVirtualServerStatStatus=axVirtualServerStatStatus, axSwitchStatAnomAnyDrop=axSwitchStatAnomAnyDrop, axSysSerialNumber=axSysSerialNumber, axVirtualServerPortStatTable=axVirtualServerPortStatTable, axNetStatExtL4RcvFevFinAck=axNetStatExtL4RcvFevFinAck, axSwitchStatsIPFragRcv=axSwitchStatsIPFragRcv, axInterfaceStatUtilPercentOut=axInterfaceStatUtilPercentOut, axArpEntryVlan=axArpEntryVlan, axVirtualServerPort=axVirtualServerPort, axVirtualServerNameStat=axVirtualServerNameStat, axAppGlobalAllowedMinValue=axAppGlobalAllowedMinValue, axPersistentStatsUrlHashPersistFail=axPersistentStatsUrlHashPersistFail, axGlobalTotalL4Session=axGlobalTotalL4Session, axNetStatNoSYNPktDropRST=axNetStatNoSYNPktDropRST, axNetStatExtFastAgingReset=axNetStatExtFastAgingReset, axGslbServiceIpPortNum=axGslbServiceIpPortNum, axTcpProxyStatActiveOpenConns=axTcpProxyStatActiveOpenConns, axGslbSiteServiceIpHitCount=axGslbSiteServiceIpHitCount, axNetStatConnLimitReset=axNetStatConnLimitReset, axGslbZoneServerModeCount=axGslbZoneServerModeCount, axSmtpProxyStatsCurrProxyConns=axSmtpProxyStatsCurrProxyConns, axSmtpProxyStatsFwdReqFail=axSmtpProxyStatsFwdReqFail, axGslbGroupSysID=axGslbGroupSysID, axInterfaceStatPktsPerSecOut=axInterfaceStatPktsPerSecOut, axVirtualServerAddressType=axVirtualServerAddressType, axVirtualServerNamePortStat=axVirtualServerNamePortStat, axFastHttpProxyStatClientRst=axFastHttpProxyStatClientRst, axNetStatExtL3Dsr=axNetStatExtL3Dsr, axVirtualServerStatName=axVirtualServerStatName, axLogMonitorPri=axLogMonitorPri, axHAGroupStatusEntry=axHAGroupStatusEntry, axGslbSiteCount=axGslbSiteCount, axSysCpuUsagePartitionName=axSysCpuUsagePartitionName, axVirtualServerNamePortStatTotConns=axVirtualServerNamePortStatTotConns, axVirtualServerPortPersistTemplateType=axVirtualServerPortPersistTemplateType, axInterfaceFlowCtrlAdminStatus=axInterfaceFlowCtrlAdminStatus, axHttpProxyStatTotalReqErr=axHttpProxyStatTotalReqErr, axNetStatEntryNoSYNPktDropRST=axNetStatEntryNoSYNPktDropRST, axNetStatSSLSIDPersistFail=axNetStatSSLSIDPersistFail, axPersistentStatsUrlHashPersistOKSec=axPersistentStatsUrlHashPersistOKSec, axVlanCfg=axVlanCfg, axServerPortHealthMonitor=axServerPortHealthMonitor, axNetStatTCPOutRSTProxy=axNetStatTCPOutRSTProxy, axL3vGlobalStatsEntry=axL3vGlobalStatsEntry, axServerPortStatTotalCurrL7Reqs=axServerPortStatTotalCurrL7Reqs, axNetStatExtUdpSessionAgedOut=axNetStatExtUdpSessionAgedOut, axL3vGlobalStatsTotalThroughput=axL3vGlobalStatsTotalThroughput, axNetStatExtL7CpsExceedDrop=axNetStatExtL7CpsExceedDrop, axServerStatServerPktsIn=axServerStatServerPktsIn, axLogSyslogPort=axLogSyslogPort, axPersistentStatEntry=axPersistentStatEntry, axNetStatExtRstL7OnFailover=axNetStatExtRstL7OnFailover, axNotification=axNotification, axNetStatExtL4AxReXmitSyn=axNetStatExtL4AxReXmitSyn, axConnReuseStatTotalBind=axConnReuseStatTotalBind, axSysUpperOrRightPowerSupplyStatus=axSysUpperOrRightPowerSupplyStatus, axSslStatFailSSLHandshake=axSslStatFailSSLHandshake, axInterface=axInterface, axInterfaceStatErrorsOut=axInterfaceStatErrorsOut, axVirtualServerTable=axVirtualServerTable, axHttpProxyStatTotalCRst=axHttpProxyStatTotalCRst, axInterfaceMtu=axInterfaceMtu, axIpNatStatsGlobalHits=axIpNatStatsGlobalHits, axSslProxyStatsTotalProxyConns=axSslProxyStatsTotalProxyConns, axTcpProxyStatTotalTxBuf=axTcpProxyStatTotalTxBuf, axInterfaceStatPktsOut=axInterfaceStatPktsOut, axNetStatExtOutOfSeqAckDrop=axNetStatExtOutOfSeqAckDrop, axNetStatExtL4RcvRevFinDup=axNetStatExtL4RcvRevFinDup, axSmtpProxyStatReqPktOutOrder=axSmtpProxyStatReqPktOutOrder, axServiceGroupMemberStatResponseTime=axServiceGroupMemberStatResponseTime, axGslbSiteForSlbDeviceName=axGslbSiteForSlbDeviceName, axNetStatTCPOutRSTL4Proxy=axNetStatTCPOutRSTL4Proxy, axSslStatEnableCryptoEngine=axSslStatEnableCryptoEngine, axSslStatSSLMemUsage=axSslStatSSLMemUsage, axIpNatStatsDynamicMappingStartAddress=axIpNatStatsDynamicMappingStartAddress, axServiceGroupStatBytesIn=axServiceGroupStatBytesIn, axServiceGroupMemberStatTotalCurrL7Reqs=axServiceGroupMemberStatTotalCurrL7Reqs, axNetStatEntryTCPOutRSTStaleSess=axNetStatEntryTCPOutRSTStaleSess, axTcpProxyStatTotalConnAttemptFail=axTcpProxyStatTotalConnAttemptFail, axSysVersion=axSysVersion, axServerPortNumInServiceGroupMemberStat=axServerPortNumInServiceGroupMemberStat, axServerStatServerBytesIn=axServerStatServerBytesIn, axNetStatExtL4RcvFwdFinAck=axNetStatExtL4RcvFwdFinAck, axServiceGroupMemberStatPktsIn=axServiceGroupMemberStatPktsIn, axServerNameInServiceGroupMember=axServerNameInServiceGroupMember, axVirtualServerStatPersistConns=axVirtualServerStatPersistConns, axSmtpProxyStatSmtpReq=axSmtpProxyStatSmtpReq, axPersistentStatSSLSIDPersistFail=axPersistentStatSSLSIDPersistFail, axSysStartupMode=axSysStartupMode, axTcpProxyStatTimeWstate=axTcpProxyStatTimeWstate, axInterfaceStat=axInterfaceStat, axFastHttpProxyStatTable=axFastHttpProxyStatTable, axIpNatStatsDynamicMappingAllocAddresses=axIpNatStatsDynamicMappingAllocAddresses, axSessionGlobalStatReverseNATTCP=axSessionGlobalStatReverseNATTCP, axVirtualServerStat=axVirtualServerStat, axSmtpProxyStatsNoProxyError=axSmtpProxyStatsNoProxyError, axVirtualServerPortPolicyTemplate=axVirtualServerPortPolicyTemplate, axConnReuseStatTotalTerminated=axConnReuseStatTotalTerminated, axHttpProxyStatServerRst=axHttpProxyStatServerRst, axHttpProxyStatTotalSNATErr=axHttpProxyStatTotalSNATErr, axSessionGlobalStatFreeBufferCount=axSessionGlobalStatFreeBufferCount, axVirtualServerNameStatCurConns=axVirtualServerNameStatCurConns, axTrunkCfgMemberCount=axTrunkCfgMemberCount, axServerAddressType=axServerAddressType, axServiceGroupMemberStatName=axServiceGroupMemberStatName, axPersistentStatCpuIndex=axPersistentStatCpuIndex, axGslbZoneServiceSentResponses=axGslbZoneServiceSentResponses, axGslbServiceIPCount=axGslbServiceIPCount, axSessionGlobalStatFreeCurrentConns=axSessionGlobalStatFreeCurrentConns, axHASetID=axHASetID, axSysFanStatusEntry=axSysFanStatusEntry, axServiceGroupStatTotConns=axServiceGroupStatTotConns, axVirtualServerNameStatTotalCurrL7Reqs=axVirtualServerNameStatTotalCurrL7Reqs, axTcpProxyStatTotalOutTCPPkt=axTcpProxyStatTotalOutTCPPkt, axNetStatNoSynPktDrops=axNetStatNoSynPktDrops, axVirtualServerStatPortNum=axVirtualServerStatPortNum, axServerPortMonitorState=axServerPortMonitorState, axConnReuseStatEntry=axConnReuseStatEntry, axFastHttpProxyStatParseReqFail=axFastHttpProxyStatParseReqFail, axSwitchStatsL2Forward=axSwitchStatsL2Forward, axVirtualServerPortClientSSLTemplate=axVirtualServerPortClientSSLTemplate, axNetStatExtTcpNoEstSessionAgedOut=axNetStatExtTcpNoEstSessionAgedOut, axServiceGroupMemberStatBytesOut=axServiceGroupMemberStatBytesOut, axNetStatProxyNoSockDrop=axNetStatProxyNoSockDrop, axServerStatServerTotalSuccL7Reqs=axServerStatServerTotalSuccL7Reqs, axVirtualServerNamePortStatPeakConns=axVirtualServerNamePortStatPeakConns, axNetStatExtL4CpsExceedDrop=axNetStatExtL4CpsExceedDrop, axServiceGroupStatTable=axServiceGroupStatTable, axInterfaceStatBitsPerSecOut=axInterfaceStatBitsPerSecOut, axVirtualServerNamePortStatTotalSuccL7Reqs=axVirtualServerNamePortStatTotalSuccL7Reqs, axNetStatSessionsAgingOut=axNetStatSessionsAgingOut, axSysDiskTotalSpace=axSysDiskTotalSpace, axGslbZoneServiceOperState=axGslbZoneServiceOperState, axServiceGroupMemberStatTotConns=axServiceGroupMemberStatTotConns, axNetStatNoSYNPktDropFIN=axNetStatNoSYNPktDropFIN, axServerPortNum=axServerPortNum, axInterfaceMediaActiveDuplex=axInterfaceMediaActiveDuplex, axLogEmailAddr=axLogEmailAddr, axSessionGlobalStatConnSMPAllocated=axSessionGlobalStatConnSMPAllocated, axTcpProxyStatTCPSYNRCVState=axTcpProxyStatTCPSYNRCVState, axNetStatExtL4UdpReqRspNotMatch=axNetStatExtL4UdpReqRspNotMatch, axAppGlobalAllowedDefaultValue=axAppGlobalAllowedDefaultValue, axSysSecondaryVersionOnCF=axSysSecondaryVersionOnCF, axPersistentStatsSIPPersistOK=axPersistentStatsSIPPersistOK, axNetStatTCPSYNCookieSentFail=axNetStatTCPSYNCookieSentFail, axNetStatEntrySSLSIDPersistSucc=axNetStatEntrySSLSIDPersistSucc, axLogSyslogHostTable=axLogSyslogHostTable, axServiceGroupStatTotalSuccL7Reqs=axServiceGroupStatTotalSuccL7Reqs, axHttpProxyStatTotalSvrConn=axHttpProxyStatTotalSvrConn, axVirtualServerStatTable=axVirtualServerStatTable, axVirtualServerPortServiceGroup=axVirtualServerPortServiceGroup, axTrunkStatMcastIn=axTrunkStatMcastIn, axNetStatClientSSLSIDNotMatch=axNetStatClientSSLSIDNotMatch, axTrunk=axTrunk, axSmtpProxyStatsParseReqFail=axSmtpProxyStatsParseReqFail, axServiceGroupName=axServiceGroupName, axNetStatUDPRcv=axNetStatUDPRcv, axFastHttpProxyStatHttpReqSucc=axFastHttpProxyStatHttpReqSucc, axNetStatSYNThrotte=axNetStatSYNThrotte, axInterfaceStatDropsOut=axInterfaceStatDropsOut, axTcpProxyStatCurrEstConns=axTcpProxyStatCurrEstConns, axGslbZoneProxyModeCount=axGslbZoneProxyModeCount, axInterfaceCount=axInterfaceCount, axTcpProxyStatMemAlloc=axTcpProxyStatMemAlloc, axInterfaceStatBytesOut=axInterfaceStatBytesOut, axPowerSupplyStatus=axPowerSupplyStatus, axSysCpuUsagePerPartitionEntry=axSysCpuUsagePerPartitionEntry, axSmtpProxyStatsNoTupleError=axSmtpProxyStatsNoTupleError, axArpEntrySourceIntName=axArpEntrySourceIntName, axAppGlobalBufferConfigLimit=axAppGlobalBufferConfigLimit, axServerStatServerTotalL7Reqs=axServerStatServerTotalL7Reqs, axVirtualServerPortStatAddress=axVirtualServerPortStatAddress, axNetStatEntryTCPOutRSTNoSYN=axNetStatEntryTCPOutRSTNoSYN, axSmtpProxyStatsSmtpRequests=axSmtpProxyStatsSmtpRequests, axVirtualServerPortUDPTemplate=axVirtualServerPortUDPTemplate, axVirtualServerPortStatBytesOut=axVirtualServerPortStatBytesOut, axNetStatServerSSLSIDMatch=axNetStatServerSSLSIDMatch, axSwitchStatL3IPForward=axSwitchStatL3IPForward, axTrunkStatMcastOut=axTrunkStatMcastOut, axGslbServiceIpIsVirtualServerFlag=axGslbServiceIpIsVirtualServerFlag, axVirtualServerNameStatTotConns=axVirtualServerNameStatTotConns, axVlanCfgMemberEntry=axVlanCfgMemberEntry, axNetStatTable=axNetStatTable, axGslbZoneServiceStickyModeCount=axGslbZoneServiceStickyModeCount, axFastHttpProxyStatTotalConn=axFastHttpProxyStatTotalConn, axNetStatExtNoVportDrop=axNetStatExtNoVportDrop, axTrunkCfgMemberEntry=axTrunkCfgMemberEntry, axFastHttpProxyStatTotalReq=axFastHttpProxyStatTotalReq, axServiceGroupMember=axServiceGroupMember, axServiceGroupMemberStatTotalSuccL7Reqs=axServiceGroupMemberStatTotalSuccL7Reqs, axTrunkStatDropsOut=axTrunkStatDropsOut, axVirtualServerStatDisplayName=axVirtualServerStatDisplayName, axNetStatSessionAgingOut=axNetStatSessionAgingOut, axNetStatEntryTCPOutRSTACKattack=axNetStatEntryTCPOutRSTACKattack, axServerPortConnLimit=axServerPortConnLimit, axGslbZoneSentResponses=axGslbZoneSentResponses, axSmtpProxyStatsSvrConnMade=axSmtpProxyStatsSvrConnMade, axFtpStats=axFtpStats, axTrunkStatEntry=axTrunkStatEntry, axVirtualServerNamePortStatEntry=axVirtualServerNamePortStatEntry, axSmtpProxyStatsClientRST=axSmtpProxyStatsClientRST, axSmtpProxyStatReqRetrans=axSmtpProxyStatReqRetrans, axNetStatEntryTCPOutRSTL4Proxy=axNetStatEntryTCPOutRSTL4Proxy, axGslbZoneServiceStatsTable=axGslbZoneServiceStatsTable, axVirtualServerPortNum=axVirtualServerPortNum, axSysPowerSupplyStatusEntry=axSysPowerSupplyStatusEntry, axServerStatAddressType=axServerStatAddressType, axGslbZoneServicePortNum=axGslbZoneServicePortNum, axTrunkTotal=axTrunkTotal, axSwitchStatsAnomAnyDrop=axSwitchStatsAnomAnyDrop, axServerStatNameInPort=axServerStatNameInPort, axSslProxyStatsClientErr=axSslProxyStatsClientErr)
mibBuilder.exportSymbols("A10-AX-MIB", axSwitchStatsAnomTCPSynFinDrop=axSwitchStatsAnomTCPSynFinDrop, axSmtpProxyStatsReqRetrans=axSmtpProxyStatsReqRetrans, axNetStatNoVportDrops=axNetStatNoVportDrops, axSysInfo=axSysInfo, axSmtpProxyStats=axSmtpProxyStats, axIpNatStatsDynamicMapping=axIpNatStatsDynamicMapping, axNetStatTCPOutRSTNoSYN=axNetStatTCPOutRSTNoSYN, axAppGlobalTotalNewL7Connections=axAppGlobalTotalNewL7Connections, axInterfaceStatBytesIn=axInterfaceStatBytesIn, axHAGroupLocalStatus=axHAGroupLocalStatus, axSmtpProxyStatsSmtpReqSuccs=axSmtpProxyStatsSmtpReqSuccs, axGslbServiceIpAdminState=axGslbServiceIpAdminState, axHAGroupPeerStatus=axHAGroupPeerStatus, axArpEntryType=axArpEntryType, axVirtualServerPortStatTotalCurrL7Reqs=axVirtualServerPortStatTotalCurrL7Reqs, axIpNatStatsDynamicMappingStartAddressType=axIpNatStatsDynamicMappingStartAddressType, axNetStatEntryTCPOutRSTAFleX=axNetStatEntryTCPOutRSTAFleX, axIpNatDsliteStats=axIpNatDsliteStats, axFastHttpProxyStatTotalReqErr=axFastHttpProxyStatTotalReqErr, axGslbServiceIpPortActiveServerCount=axGslbServiceIpPortActiveServerCount, axVirtualServerNamePortStatName=axVirtualServerNamePortStatName, axConnReuseStatTotalEstablished=axConnReuseStatTotalEstablished, axConnReuseStatTotalDelayedUNBind=axConnReuseStatTotalDelayedUNBind, axSessionGlobalStatConnSMPFree=axSessionGlobalStatConnSMPFree, axTcpProxyStatTotalInTCPPacket=axTcpProxyStatTotalInTCPPacket, axVirtualServerPortTable=axVirtualServerPortTable, axTrunkStatDropsIn=axTrunkStatDropsIn, axFastHttpProxyStats=axFastHttpProxyStats, axTrunkStatBytesOut=axTrunkStatBytesOut, axSmtpProxyStatFwdReqFail=axSmtpProxyStatFwdReqFail, axVirtualServerPortTemplate=axVirtualServerPortTemplate, axIpNatStatsDynamicMappingTable=axIpNatStatsDynamicMappingTable, axGslbSiteDeviceStatsEntry=axGslbSiteDeviceStatsEntry, axInterfaceStatCollisions=axInterfaceStatCollisions, axVirtualServerEnabled=axVirtualServerEnabled, axNetStatEntryServerSSLSIDMatch=axNetStatEntryServerSSLSIDMatch, axNetStatConnLimitDrops=axNetStatConnLimitDrops, axTcpProxyStatTotalCurrEstConn=axTcpProxyStatTotalCurrEstConn, axSwitchStatsL3IPForward=axSwitchStatsL3IPForward, axAppGlobalSystemResourceName=axAppGlobalSystemResourceName, axNetStatExtL3vConnLimitDrop=axNetStatExtL3vConnLimitDrop, axSwitchStatAnomSYNFragDrop=axSwitchStatAnomSYNFragDrop, axLogging=axLogging, axSslProxyStatsSvrSelFail=axSslProxyStatsSvrSelFail, axVirtualServerPortName=axVirtualServerPortName, axHttpProxyStatTotalConn=axHttpProxyStatTotalConn, axSmtpProxyStatsServerResel=axSmtpProxyStatsServerResel, axSwitchStatARPRespRcv=axSwitchStatARPRespRcv, axGslbSiteSlbDeviceProtocolFlag=axGslbSiteSlbDeviceProtocolFlag, axConnReuseStatTotalBound=axConnReuseStatTotalBound, axGslbGroups=axGslbGroups, axNetStatExtL4UdpReqRsps=axNetStatExtL4UdpReqRsps, axInterfaceStatBitsPerSecIn=axInterfaceStatBitsPerSecIn, axNetStatClientSSLSIDMatch=axNetStatClientSSLSIDMatch, axNetStatExtL4UdpRspsGreaterReqs=axNetStatExtL4UdpRspsGreaterReqs, axNetStatExtL4RcvReXmitSynDelq=axNetStatExtL4RcvReXmitSynDelq, axNetwork=axNetwork, axServerStatEntry=axServerStatEntry, axAppGlobalSystemResourceIndex=axAppGlobalSystemResourceIndex, axSysCpuUsagePerPartitionCtrlCpuFlag=axSysCpuUsagePerPartitionCtrlCpuFlag, axVirtualServerPortStatTotConns=axVirtualServerPortStatTotConns, axInterfaceStatErrorsIn=axInterfaceStatErrorsIn, axServiceGroupStatBytesOut=axServiceGroupStatBytesOut, axVirtualServerNameStatPortDisplayStatus=axVirtualServerNameStatPortDisplayStatus, axServerStatName=axServerStatName, axNetStatTCPSYNCookieSent=axNetStatTCPSYNCookieSent, axNetStatTCPsNoSLB=axNetStatTCPsNoSLB, axGslbSiteStatsEntry=axGslbSiteStatsEntry)
