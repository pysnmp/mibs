#
# PySNMP MIB module ORION-BASE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/delta/ORION-BASE-MIB
# Produced by pysmi-1.1.12 at Fri Jul 19 09:43:22 2024
# On host fv-az1778-45 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
orion, modules = mibBuilder.importSymbols("GLOBAL-REG", "orion", "modules")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, ModuleIdentity, Counter64, Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, IpAddress, MibIdentifier, Unsigned32, Counter32, ObjectIdentity, enterprises, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "Counter64", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "IpAddress", "MibIdentifier", "Unsigned32", "Counter32", "ObjectIdentity", "enterprises", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
orionBaseMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 20246, 2, 1, 1, 2))
orionBaseMibModule.setRevisions(('2012-04-27 12:00', '2012-01-26 14:15', '2011-06-20 07:34', '2011-02-10 09:01', '2010-06-16 10:27', '2010-02-24 10:46', '2009-09-04 09:52', '2008-02-21 14:39', '2008-01-18 08:35', '2006-07-27 10:26', '2006-03-02 08:55', '2006-02-23 09:32', '2005-06-03 11:07',))
if mibBuilder.loadTexts: orionBaseMibModule.setLastUpdated('200802211439Z')
if mibBuilder.loadTexts: orionBaseMibModule.setOrganization('Delta Energy Systems (Switzerland) AG')
orionBaseMib = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1))
controllerConfs = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1))
controllerGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1))
controllerCompl = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 2))
controllerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2))
dcSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 1))
dcSystemAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2))
dcSystemMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 3))
dcRectifier = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4))
dcRectifierFunctions = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6))
dcEfficiencyCycling = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 1))
dcPowerLimitation = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 2))
dcBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5))
dcFloatCharge = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 1))
dcBatteryTest = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2))
dcBatteryTestParameter = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1))
dcBatteryTestResults = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 2))
dcBatteryParameter = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3))
dcLossOfBackupTime = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3, 3))
dcEqualize = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4))
dcEqualizeParameter = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 4))
dcBoostCharge = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5))
dcBoostChargeParameter = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5, 4))
dcSystemVoltageSupervision = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 6))
dcEvtCtrlCharge = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 7))
dcEvtCtrlChargeParameter = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 7, 3))
dcTempComp = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8))
dcTempSupervision = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 9))
dcInputOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 6))
dcMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 7))
dcConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8))
dcMeasurement = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 9))
dcMeterPanel = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 10))
controllerEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 3))
controllerEventObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 3, 1))
controllerEventsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 3, 1, 0))
dcSiteName = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcSiteName.setStatus('current')
dcSystemName = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcSystemName.setStatus('current')
dcSystemDateTime = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(19, 19)).setFixedLength(19)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcSystemDateTime.setStatus('current')
dcSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcSoftwareVersion.setStatus('current')
dcNumberUrgentAlarms = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNumberUrgentAlarms.setStatus('current')
dcNumberNonUrgentAlarms = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNumberNonUrgentAlarms.setStatus('current')
dcMainsFailureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcMainsFailureAlarm.setStatus('current')
dcUrgentAlarmIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcUrgentAlarmIdentifier.setStatus('current')
dcUrgentAlarmValue = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("false", 1), ("indeterminate", 2), ("true", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcUrgentAlarmValue.setStatus('current')
dcNonUrgentAlarmIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNonUrgentAlarmIdentifier.setStatus('current')
dcNonUrgentAlarmValue = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("false", 1), ("indeterminate", 2), ("true", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNonUrgentAlarmValue.setStatus('current')
dcUrgentAlarmName = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcUrgentAlarmName.setStatus('current')
dcNonUrgentAlarmName = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNonUrgentAlarmName.setStatus('current')
dcNumberCriticalAlarms = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNumberCriticalAlarms.setStatus('current')
dcCriticalAlarmIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcCriticalAlarmIdentifier.setStatus('current')
dcCriticalAlarmValue = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("false", 1), ("indeterminate", 2), ("true", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcCriticalAlarmValue.setStatus('current')
dcCriticalAlarmName = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcCriticalAlarmName.setStatus('current')
dcSystemVoltage = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 3, 1), Integer32()).setUnits('10 mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcSystemVoltage.setStatus('current')
dcLoadCurrent = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 3, 2), Integer32()).setUnits('100 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcLoadCurrent.setStatus('current')
dcBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 3, 3), Integer32()).setUnits('100 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcBatteryCurrent.setStatus('current')
dcBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 3, 4), Integer32()).setUnits('0.1 C').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcBatteryTemperature.setStatus('current')
dcChargeState = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("float", 1), ("discharge", 2), ("equalize", 3), ("boost", 4), ("battTest", 5), ("recharge", 6), ("sepCharge", 7), ("evCtrlCharge", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcChargeState.setStatus('current')
dcCurrentLimit = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcCurrentLimit.setStatus('current')
dcRectifierCurrent = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 3, 7), Integer32()).setUnits('100 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcRectifierCurrent.setStatus('current')
dcSystemPower = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 3, 8), Integer32()).setUnits('1 W').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcSystemPower.setStatus('current')
dcNumberRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNumberRectifiers.setStatus('current')
dcNumberRectifiersFailure = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNumberRectifiersFailure.setStatus('current')
dcNumberRectifiersOkay = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNumberRectifiersOkay.setStatus('current')
dcEfficiencyCyclingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEfficiencyCyclingEnabled.setStatus('current')
dcLimitSwitchingTimes = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcLimitSwitchingTimes.setStatus('current')
dcForceSwitchingOncePerMonth = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcForceSwitchingOncePerMonth.setStatus('current')
dcMaximumLoadStep = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 1, 4), Integer32()).setUnits('1 W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcMaximumLoadStep.setStatus('current')
dcMinimumLoadStep = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 1, 5), Integer32()).setUnits('1 W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcMinimumLoadStep.setStatus('current')
dcUsys20 = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 1, 1), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcUsys20.setStatus('current')
dcBatteryTestUsupport = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 1), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestUsupport.setStatus('current')
dcBatteryTestDuration = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 2), Gauge32()).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestDuration.setStatus('current')
dcBatteryTestInterval = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 3), Gauge32()).setUnits('days').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestInterval.setStatus('current')
dcBatteryTestDischargeCurrent = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 4), Integer32()).setUnits('100 mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestDischargeCurrent.setStatus('current')
dcBatteryTestMinDuration = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 5), Gauge32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestMinDuration.setStatus('current')
dcBatteryTestVoltageWithinUfloat = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 6), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestVoltageWithinUfloat.setStatus('current')
dcBatteryTestVoltageWithinUfloatPeriod = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 7), Gauge32()).setUnits('days').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestVoltageWithinUfloatPeriod.setStatus('current')
dcBatteryTestTempFrom = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 8), Integer32()).setUnits('0.1 C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestTempFrom.setStatus('current')
dcBatteryTestTempTo = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 9), Integer32()).setUnits('0.1 C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestTempTo.setStatus('current')
dcBatteryTestIntervalEnabled = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestIntervalEnabled.setStatus('current')
dcBatteryTestStartTimeFrom = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestStartTimeFrom.setStatus('current')
dcBatteryTestStartTimeTo = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestStartTimeTo.setStatus('current')
dcBatteryTestDateTime = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(19, 19)).setFixedLength(19)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcBatteryTestDateTime.setStatus('current')
dcBatteryTestResult = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("failed", 2), ("aborted", 3), ("loadFailure", 4), ("okay", 5), ("abortedManual", 6), ("abortedEvCtrlCharge", 7), ("abortedInhibitEv", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcBatteryTestResult.setStatus('current')
dcBatteryTestEndVoltage = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 2, 3), Integer32()).setUnits('10 mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcBatteryTestEndVoltage.setStatus('current')
dcBatteryTestControl = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestControl.setStatus('current')
dcBatteryTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("inactive", 1), ("starting", 2), ("stopping", 3), ("constantCurrent", 4), ("timeBased", 5), ("energyBased", 6), ("recovery", 7), ("realLoad", 8), ("stop", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcBatteryTestStatus.setStatus('current')
dcBatteryTestFailureEvent = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestFailureEvent.setStatus('current')
dcBatteryTestType = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5))).clone(namedValues=NamedValues(("none", 1), ("constantCurrent", 2), ("realLoad", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestType.setStatus('current')
dcTotalBatteryCapacity = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3, 1), Gauge32()).setUnits('100 mAh').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcTotalBatteryCapacity.setStatus('current')
dcLossOfBackupTimeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcLossOfBackupTimeEnabled.setStatus('current')
dcLossOfBackupTimeStatus = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("ok", 2), ("occured", 3), ("fail", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcLossOfBackupTimeStatus.setStatus('current')
dcExpectedBackupTime = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3, 3, 3), Gauge32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcExpectedBackupTime.setStatus('current')
dcEqualizeControl = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEqualizeControl.setStatus('current')
dcEqualizeStatus = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inactive", 1), ("starting", 2), ("stopping", 3), ("preparing", 4), ("cooking", 5), ("recovering", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcEqualizeStatus.setStatus('current')
dcEqualizeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEqualizeEnabled.setStatus('current')
dcEqualizeVoltage = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 4, 1), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEqualizeVoltage.setStatus('current')
dcEqualizeDuration = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 4, 2), Gauge32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEqualizeDuration.setStatus('current')
dcEqualizeUseBattRoomFanEnabled = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEqualizeUseBattRoomFanEnabled.setStatus('current')
dcEqualizeLeadTime = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 4, 4), Gauge32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEqualizeLeadTime.setStatus('current')
dcEqualizeTimeLag = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 4, 5), Gauge32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEqualizeTimeLag.setStatus('current')
dcEqualizeInterval = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 4, 6), Gauge32()).setUnits('days').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEqualizeInterval.setStatus('current')
dcEqualizeStartTimeIntervalFrom = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEqualizeStartTimeIntervalFrom.setStatus('current')
dcEqualizeStartTimeIntervalTo = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 4, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEqualizeStartTimeIntervalTo.setStatus('current')
dcEqualizeInhibitAfterBoost = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 4, 9), Gauge32()).setUnits('hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEqualizeInhibitAfterBoost.setStatus('current')
dcBoostChargeControl = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBoostChargeControl.setStatus('current')
dcBoostChargeStatus = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inactive", 1), ("starting", 2), ("stopping", 3), ("cooking", 4), ("recovering", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcBoostChargeStatus.setStatus('current')
dcBoostChargeType = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("currentBased", 2), ("timeBased", 3), ("energyBased", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBoostChargeType.setStatus('current')
dcBoostChargeVoltage = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5, 4, 1), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBoostChargeVoltage.setStatus('current')
dcBoostChargeMaxDuration = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5, 4, 2), Gauge32()).setUnits('hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBoostChargeMaxDuration.setStatus('current')
dcBoostChargeUseBattRoomFanEnabled = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBoostChargeUseBattRoomFanEnabled.setStatus('current')
dcBoostChargeTimeLag = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5, 4, 4), Gauge32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBoostChargeTimeLag.setStatus('current')
dcBoostChargeIstart = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5, 4, 5), Integer32()).setUnits('100 mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBoostChargeIstart.setStatus('current')
dcBoostChargeIstop = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5, 4, 6), Integer32()).setUnits('100 mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBoostChargeIstop.setStatus('current')
dcBoostChargeInhibitTime = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5, 4, 7), Gauge32()).setUnits('hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBoostChargeInhibitTime.setStatus('current')
dcUaMax = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 6, 1), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcUaMax.setStatus('current')
dcUaMin = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 6, 2), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcUaMin.setStatus('current')
dcUsMax = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 6, 3), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcUsMax.setStatus('current')
dcUsMin = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 6, 4), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcUsMin.setStatus('current')
dcBoD = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 6, 5), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBoD.setStatus('current')
dcHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 6, 6), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcHysteresis.setStatus('current')
dcSuppressUaLowEnabled = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcSuppressUaLowEnabled.setStatus('current')
dcSuppressUsLowEnabled = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcSuppressUsLowEnabled.setStatus('current')
dcEnableUsTempComp = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEnableUsTempComp.setStatus('current')
dcEvtCtrlChargeStatus = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("voltageControlled", 2), ("noBatteryCharge", 3), ("currentLimitation", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcEvtCtrlChargeStatus.setStatus('current')
dcEvtCtrlChargeType = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("voltageControlled", 2), ("noBatteryCharge", 3), ("currentLimitation", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEvtCtrlChargeType.setStatus('current')
dcEvtCtrlChargeVoltage = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 7, 3, 1), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEvtCtrlChargeVoltage.setStatus('current')
dcEvtCtrlChargeTempCompEnabled = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 7, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEvtCtrlChargeTempCompEnabled.setStatus('current')
dcEvtCtrlChargeMaxIBatt = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 7, 3, 3), Integer32()).setUnits('100 mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEvtCtrlChargeMaxIBatt.setStatus('current')
dcTempCompType = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("linear", 2), ("multi-stage", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcTempCompType.setStatus('current')
dcSlope = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 2), Integer32()).setUnits('-1 mV/C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcSlope.setStatus('current')
dcStartTemp = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 3), Integer32()).setUnits('0.1 C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcStartTemp.setStatus('current')
dcStopTemp = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 4), Integer32()).setUnits('0.1 C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcStopTemp.setStatus('current')
dcMaxVoltage = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 5), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcMaxVoltage.setStatus('current')
dcLowStopVoltage = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 6), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcLowStopVoltage.setStatus('current')
dcLowStartTemp = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 7), Integer32()).setUnits('0.1 C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcLowStartTemp.setStatus('current')
dcLowTempSlope = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 8), Integer32()).setUnits('-1 mV/C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcLowTempSlope.setStatus('current')
dcHighStartTemp = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 9), Integer32()).setUnits('0.1 C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcHighStartTemp.setStatus('current')
dcHighTempSlope = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 10), Integer32()).setUnits('-1 mV/C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcHighTempSlope.setStatus('current')
dcHighStopVoltage = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 11), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcHighStopVoltage.setStatus('current')
dcRunawayTemp = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 12), Integer32()).setUnits('0.1 C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRunawayTemp.setStatus('current')
dcRunawayVoltage = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 13), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRunawayVoltage.setStatus('current')
dcHighTemp = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 9, 1), Integer32()).setUnits('0.1 C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcHighTemp.setStatus('current')
dcHighTempHyst = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 9, 2), Integer32()).setUnits('0.1 C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcHighTempHyst.setStatus('current')
dcFileProcessingStatus = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("inProgress", 2), ("successful", 3), ("error", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcFileProcessingStatus.setStatus('current')
dcResendActiveAlarmTraps = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resend", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcResendActiveAlarmTraps.setStatus('current')
dcEventProcessingEventSelected = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEventProcessingEventSelected.setStatus('current')
dcEventHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 1), )
if mibBuilder.loadTexts: dcEventHistoryTable.setStatus('current')
dcEventHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 1, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcEventHistoryIndex"))
if mibBuilder.loadTexts: dcEventHistoryEntry.setStatus('current')
dcEventHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: dcEventHistoryIndex.setStatus('current')
dcEventHistoryTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(19, 19)).setFixedLength(19)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcEventHistoryTimestamp.setStatus('current')
dcEventHistoryMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcEventHistoryMessage.setStatus('current')
dcAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 2), )
if mibBuilder.loadTexts: dcAlarmTable.setStatus('current')
dcAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 2, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcAlarmIndex"))
if mibBuilder.loadTexts: dcAlarmEntry.setStatus('current')
dcAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: dcAlarmIndex.setStatus('current')
dcAlarmEventCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("urgent", 2), ("nonUrgent", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcAlarmEventCategory.setStatus('current')
dcAlarmEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcAlarmEventName.setStatus('current')
dcAlarmEventIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcAlarmEventIdentifier.setStatus('current')
dcAlarmEventValue = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("false", 1), ("true", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcAlarmEventValue.setStatus('current')
dcGenericAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 12), )
if mibBuilder.loadTexts: dcGenericAlarmTable.setStatus('current')
dcGenericAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 12, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcGenericAlarmIndex"))
if mibBuilder.loadTexts: dcGenericAlarmEntry.setStatus('current')
dcGenericAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: dcGenericAlarmIndex.setStatus('current')
dcGenericAlarmEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcGenericAlarmEventName.setStatus('current')
dcGenericAlarmEventIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 12, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcGenericAlarmEventIdentifier.setStatus('current')
dcGenericAlarmEventValue = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcGenericAlarmEventValue.setStatus('current')
dcRectifierTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 4), )
if mibBuilder.loadTexts: dcRectifierTable.setStatus('current')
dcRectifierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 4, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcRectifierIndex"))
if mibBuilder.loadTexts: dcRectifierEntry.setStatus('current')
dcRectifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: dcRectifierIndex.setStatus('current')
dcRectifierIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcRectifierIdentifier.setStatus('current')
dcRectifierStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcRectifierStatus.setStatus('current')
dcRectifierGroupTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5), )
if mibBuilder.loadTexts: dcRectifierGroupTable.setStatus('current')
dcRectifierGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcRectifierGroupIndex"))
if mibBuilder.loadTexts: dcRectifierGroupEntry.setStatus('current')
dcRectifierGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: dcRectifierGroupIndex.setStatus('current')
dcRectifierGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcRectifierGroupName.setStatus('current')
dcRectifierGroupRectifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("unknown48V", 1), ("fR48V2000W", 2), ("dPR1200B48", 3), ("dPR1500B48", 4), ("dPR600B48", 5), ("dPR7200B48", 6), ("fR48to60V2000W", 7), ("unknown24V", 8), ("unknown60V", 9), ("dPR600B60", 10), ("dPR3500B48", 11), ("dPR3500B24", 12), ("dPR300B48", 13), ("dPR1600B48", 14), ("dPR2700B48", 15), ("dPR2400B48", 16), ("dPR4000B48", 17), ("dPR2900B48", 18), ("dPR4000B48to60", 19), ("dPR850B48", 20), ("dPR2000B48", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcRectifierGroupRectifierType.setStatus('current')
dcRectifierGroupDefaultVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 4), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupDefaultVoltage.setStatus('current')
dcRectifierGroupDefaultCurrentLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 5), Integer32()).setUnits('100 mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupDefaultCurrentLimit.setStatus('current')
dcRectifierGroupDefaultPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 6), Integer32()).setUnits('1 W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupDefaultPowerLimit.setStatus('current')
dcRectifierGroupInputLowOff = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 7), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupInputLowOff.setStatus('current')
dcRectifierGroupInputLowOn = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 8), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupInputLowOn.setStatus('current')
dcRectifierGroupStartupVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 9), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupStartupVoltage.setStatus('current')
dcRectifierGroupStartupCurrentLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 10), Integer32()).setUnits('100 mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupStartupCurrentLimit.setStatus('current')
dcRectifierGroupStartupPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 11), Integer32()).setUnits('1 W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupStartupPowerLimit.setStatus('current')
dcRectifierGroupStartupTimeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 12), Gauge32()).setUnits('10 ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupStartupTimeLimit.setStatus('current')
dcRectifierGroupPowerupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 13), Gauge32()).setUnits('10 ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupPowerupDelay.setStatus('current')
dcRectifierGroupPowerupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 14), Gauge32()).setUnits('10 ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupPowerupTime.setStatus('current')
dcRectifierGroupUmaxOff = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 15), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupUmaxOff.setStatus('current')
dcPowerLimitationTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 2, 1), )
if mibBuilder.loadTexts: dcPowerLimitationTable.setStatus('current')
dcPowerLimitationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 2, 1, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcPowerLimitationIndex"))
if mibBuilder.loadTexts: dcPowerLimitationEntry.setStatus('current')
dcPowerLimitationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: dcPowerLimitationIndex.setStatus('current')
dcPowerLimitationEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcPowerLimitationEventName.setStatus('current')
dcPowerLimitationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("inactive", 2), ("powerLimit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcPowerLimitationStatus.setStatus('current')
dcPowerLimitationType = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("fixedLimit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcPowerLimitationType.setStatus('current')
dcPowerLimitationLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 2, 1, 1, 5), Integer32()).setUnits('1 W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcPowerLimitationLimit.setStatus('current')
dcPowerLimitationNoBatteryDischarge = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcPowerLimitationNoBatteryDischarge.setStatus('current')
dcBatteryStringTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3, 2), )
if mibBuilder.loadTexts: dcBatteryStringTable.setStatus('current')
dcBatteryStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3, 2, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcBatteryStringIndex"))
if mibBuilder.loadTexts: dcBatteryStringEntry.setStatus('current')
dcBatteryStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: dcBatteryStringIndex.setStatus('current')
dcBatteryStringName = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcBatteryStringName.setStatus('current')
dcBatteryStringMaxIBatt = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3, 2, 1, 3), Integer32()).setUnits('100 mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryStringMaxIBatt.setStatus('current')
dcBatteryStringCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3, 2, 1, 4), Gauge32()).setUnits('100 mAh').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryStringCapacity.setStatus('current')
dcControlEventTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 6, 1), )
if mibBuilder.loadTexts: dcControlEventTable.setStatus('current')
dcControlEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 6, 1, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcControlEventIndex"))
if mibBuilder.loadTexts: dcControlEventEntry.setStatus('current')
dcControlEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: dcControlEventIndex.setStatus('current')
dcControlEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcControlEventName.setStatus('current')
dcControlEventIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 6, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcControlEventIdentifier.setStatus('current')
dcControlEventValue = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcControlEventValue.setStatus('current')
dcTrapDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 7, 1), )
if mibBuilder.loadTexts: dcTrapDestinationTable.setStatus('current')
dcTrapDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 7, 1, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcTrapDestinationIndex"))
if mibBuilder.loadTexts: dcTrapDestinationEntry.setStatus('current')
dcTrapDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: dcTrapDestinationIndex.setStatus('current')
dcTrapDestinationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 7, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcTrapDestinationIp.setStatus('current')
dcTrapDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 7, 1, 1, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcTrapDestinationPort.setStatus('current')
dcDefaultLogEventTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 1), )
if mibBuilder.loadTexts: dcDefaultLogEventTable.setStatus('current')
dcDefaultLogEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 1, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcDefaultLogEventIndex"))
if mibBuilder.loadTexts: dcDefaultLogEventEntry.setStatus('current')
dcDefaultLogEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)))
if mibBuilder.loadTexts: dcDefaultLogEventIndex.setStatus('current')
dcDefaultLogEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcDefaultLogEventName.setStatus('current')
dcDefaultLogEventLogged = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcDefaultLogEventLogged.setStatus('current')
dcEventProcessingEventTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 2), )
if mibBuilder.loadTexts: dcEventProcessingEventTable.setStatus('current')
dcEventProcessingEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 2, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcEventProcessingEventIndex"))
if mibBuilder.loadTexts: dcEventProcessingEventEntry.setStatus('current')
dcEventProcessingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)))
if mibBuilder.loadTexts: dcEventProcessingEventIndex.setStatus('current')
dcEventProcessingEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcEventProcessingEventName.setStatus('current')
dcEventProcessingEventAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEventProcessingEventAssigned.setStatus('current')
dcEventProcessingEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("eventOR", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcEventProcessingEventType.setStatus('current')
dcLvdTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 4), )
if mibBuilder.loadTexts: dcLvdTable.setStatus('current')
dcLvdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 4, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcLvdIndex"))
if mibBuilder.loadTexts: dcLvdEntry.setStatus('current')
dcLvdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: dcLvdIndex.setStatus('current')
dcLvdName = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcLvdName.setStatus('current')
dcLvdDisconnectDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcLvdDisconnectDelay.setStatus('current')
dcMeasurementTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 9, 1), )
if mibBuilder.loadTexts: dcMeasurementTable.setStatus('current')
dcMeasurementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 9, 1, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcMeasurementIndex"))
if mibBuilder.loadTexts: dcMeasurementEntry.setStatus('current')
dcMeasurementIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)))
if mibBuilder.loadTexts: dcMeasurementIndex.setStatus('current')
dcMeasurementName = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 9, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcMeasurementName.setStatus('current')
dcMeasurementValue = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcMeasurementValue.setStatus('current')
dcMeasurementScaleFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcMeasurementScaleFactor.setStatus('current')
dcMeasurementUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("voltDC", 3), ("voltAC", 4), ("ampere", 5), ("ampereHour", 6), ("degreeCelsius", 7), ("temperatureCoefficient", 8), ("watt", 9), ("wattHour", 10), ("seconds", 11), ("percent", 12), ("hertz", 13), ("voltAmpere", 14), ("voltAmpereReactive", 15), ("voltAmpereReactiveHour", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcMeasurementUnit.setStatus('current')
dcMeterPanelEventTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 10, 1), )
if mibBuilder.loadTexts: dcMeterPanelEventTable.setStatus('current')
dcMeterPanelEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 10, 1, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcMeterPanelEventIndex"))
if mibBuilder.loadTexts: dcMeterPanelEventEntry.setStatus('current')
dcMeterPanelEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: dcMeterPanelEventIndex.setStatus('current')
dcMeterPanelEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 10, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcMeterPanelEventName.setStatus('current')
dcMeterPanelEventValue = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("false", 1), ("indeterminate", 2), ("true", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcMeterPanelEventValue.setStatus('current')
dcMeterPanelEventHourMeterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 10, 1, 1, 4), Gauge32()).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcMeterPanelEventHourMeterValue.setStatus('current')
systemNonUrgentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 3, 1, 0, 1)).setObjects(("ORION-BASE-MIB", "dcSystemDateTime"), ("ORION-BASE-MIB", "dcNumberNonUrgentAlarms"), ("ORION-BASE-MIB", "dcNonUrgentAlarmIdentifier"), ("ORION-BASE-MIB", "dcNonUrgentAlarmValue"), ("ORION-BASE-MIB", "dcNonUrgentAlarmName"))
if mibBuilder.loadTexts: systemNonUrgentAlarm.setStatus('current')
systemUrgentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 3, 1, 0, 2)).setObjects(("ORION-BASE-MIB", "dcSystemDateTime"), ("ORION-BASE-MIB", "dcNumberUrgentAlarms"), ("ORION-BASE-MIB", "dcUrgentAlarmIdentifier"), ("ORION-BASE-MIB", "dcUrgentAlarmValue"), ("ORION-BASE-MIB", "dcUrgentAlarmName"))
if mibBuilder.loadTexts: systemUrgentAlarm.setStatus('current')
systemCriticalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 3, 1, 0, 3)).setObjects(("ORION-BASE-MIB", "dcSystemDateTime"), ("ORION-BASE-MIB", "dcNumberCriticalAlarms"), ("ORION-BASE-MIB", "dcCriticalAlarmIdentifier"), ("ORION-BASE-MIB", "dcCriticalAlarmValue"), ("ORION-BASE-MIB", "dcCriticalAlarmName"))
if mibBuilder.loadTexts: systemCriticalAlarm.setStatus('current')
systemInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 1)).setObjects(("ORION-BASE-MIB", "dcSiteName"), ("ORION-BASE-MIB", "dcSystemName"), ("ORION-BASE-MIB", "dcSystemDateTime"), ("ORION-BASE-MIB", "dcSoftwareVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemInfoGroup = systemInfoGroup.setStatus('current')
systemAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 2)).setObjects(("ORION-BASE-MIB", "dcNumberUrgentAlarms"), ("ORION-BASE-MIB", "dcNumberNonUrgentAlarms"), ("ORION-BASE-MIB", "dcMainsFailureAlarm"), ("ORION-BASE-MIB", "dcUrgentAlarmIdentifier"), ("ORION-BASE-MIB", "dcUrgentAlarmValue"), ("ORION-BASE-MIB", "dcNonUrgentAlarmIdentifier"), ("ORION-BASE-MIB", "dcNonUrgentAlarmValue"), ("ORION-BASE-MIB", "dcUrgentAlarmName"), ("ORION-BASE-MIB", "dcNonUrgentAlarmName"), ("ORION-BASE-MIB", "dcNumberCriticalAlarms"), ("ORION-BASE-MIB", "dcCriticalAlarmIdentifier"), ("ORION-BASE-MIB", "dcCriticalAlarmValue"), ("ORION-BASE-MIB", "dcCriticalAlarmName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemAlarmGroup = systemAlarmGroup.setStatus('current')
systemMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 3)).setObjects(("ORION-BASE-MIB", "dcSystemVoltage"), ("ORION-BASE-MIB", "dcLoadCurrent"), ("ORION-BASE-MIB", "dcBatteryCurrent"), ("ORION-BASE-MIB", "dcBatteryTemperature"), ("ORION-BASE-MIB", "dcChargeState"), ("ORION-BASE-MIB", "dcCurrentLimit"), ("ORION-BASE-MIB", "dcRectifierCurrent"), ("ORION-BASE-MIB", "dcSystemPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemMonitorGroup = systemMonitorGroup.setStatus('current')
rectifierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 4)).setObjects(("ORION-BASE-MIB", "dcNumberRectifiers"), ("ORION-BASE-MIB", "dcNumberRectifiersFailure"), ("ORION-BASE-MIB", "dcNumberRectifiersOkay"), ("ORION-BASE-MIB", "dcEfficiencyCyclingEnabled"), ("ORION-BASE-MIB", "dcLimitSwitchingTimes"), ("ORION-BASE-MIB", "dcForceSwitchingOncePerMonth"), ("ORION-BASE-MIB", "dcMaximumLoadStep"), ("ORION-BASE-MIB", "dcMinimumLoadStep"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rectifierGroup = rectifierGroup.setStatus('current')
eventHistoryTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 5)).setObjects(("ORION-BASE-MIB", "dcEventHistoryTimestamp"), ("ORION-BASE-MIB", "dcEventHistoryMessage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eventHistoryTableGroup = eventHistoryTableGroup.setStatus('current')
alarmTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 6)).setObjects(("ORION-BASE-MIB", "dcAlarmEventCategory"), ("ORION-BASE-MIB", "dcAlarmEventName"), ("ORION-BASE-MIB", "dcAlarmEventIdentifier"), ("ORION-BASE-MIB", "dcAlarmEventValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alarmTableGroup = alarmTableGroup.setStatus('current')
rectifierTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 7)).setObjects(("ORION-BASE-MIB", "dcRectifierIdentifier"), ("ORION-BASE-MIB", "dcRectifierStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rectifierTableGroup = rectifierTableGroup.setStatus('current')
notificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 8)).setObjects(("ORION-BASE-MIB", "systemNonUrgentAlarm"), ("ORION-BASE-MIB", "systemUrgentAlarm"), ("ORION-BASE-MIB", "systemCriticalAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    notificationsGroup = notificationsGroup.setStatus('current')
genericAlarmTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 9)).setObjects(("ORION-BASE-MIB", "dcGenericAlarmEventIdentifier"), ("ORION-BASE-MIB", "dcGenericAlarmEventName"), ("ORION-BASE-MIB", "dcGenericAlarmEventValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    genericAlarmTableGroup = genericAlarmTableGroup.setStatus('current')
batteryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 10)).setObjects(("ORION-BASE-MIB", "dcUsys20"), ("ORION-BASE-MIB", "dcTempCompType"), ("ORION-BASE-MIB", "dcSlope"), ("ORION-BASE-MIB", "dcStartTemp"), ("ORION-BASE-MIB", "dcStopTemp"), ("ORION-BASE-MIB", "dcMaxVoltage"), ("ORION-BASE-MIB", "dcLowStopVoltage"), ("ORION-BASE-MIB", "dcLowStartTemp"), ("ORION-BASE-MIB", "dcLowTempSlope"), ("ORION-BASE-MIB", "dcHighStartTemp"), ("ORION-BASE-MIB", "dcHighTempSlope"), ("ORION-BASE-MIB", "dcHighStopVoltage"), ("ORION-BASE-MIB", "dcRunawayTemp"), ("ORION-BASE-MIB", "dcRunawayVoltage"), ("ORION-BASE-MIB", "dcBatteryTestUsupport"), ("ORION-BASE-MIB", "dcBatteryTestDuration"), ("ORION-BASE-MIB", "dcBatteryTestInterval"), ("ORION-BASE-MIB", "dcBatteryTestDischargeCurrent"), ("ORION-BASE-MIB", "dcBatteryTestMinDuration"), ("ORION-BASE-MIB", "dcBatteryTestVoltageWithinUfloat"), ("ORION-BASE-MIB", "dcBatteryTestVoltageWithinUfloatPeriod"), ("ORION-BASE-MIB", "dcBatteryTestTempFrom"), ("ORION-BASE-MIB", "dcBatteryTestTempTo"), ("ORION-BASE-MIB", "dcBatteryTestIntervalEnabled"), ("ORION-BASE-MIB", "dcBatteryTestStartTimeFrom"), ("ORION-BASE-MIB", "dcBatteryTestStartTimeTo"), ("ORION-BASE-MIB", "dcBatteryTestDateTime"), ("ORION-BASE-MIB", "dcBatteryTestResult"), ("ORION-BASE-MIB", "dcBatteryTestEndVoltage"), ("ORION-BASE-MIB", "dcBatteryTestControl"), ("ORION-BASE-MIB", "dcBatteryTestStatus"), ("ORION-BASE-MIB", "dcBatteryTestFailureEvent"), ("ORION-BASE-MIB", "dcBatteryTestType"), ("ORION-BASE-MIB", "dcTotalBatteryCapacity"), ("ORION-BASE-MIB", "dcLossOfBackupTimeEnabled"), ("ORION-BASE-MIB", "dcLossOfBackupTimeStatus"), ("ORION-BASE-MIB", "dcExpectedBackupTime"), ("ORION-BASE-MIB", "dcEqualizeControl"), ("ORION-BASE-MIB", "dcEqualizeStatus"), ("ORION-BASE-MIB", "dcEqualizeEnabled"), ("ORION-BASE-MIB", "dcEqualizeVoltage"), ("ORION-BASE-MIB", "dcEqualizeDuration"), ("ORION-BASE-MIB", "dcEqualizeUseBattRoomFanEnabled"), ("ORION-BASE-MIB", "dcEqualizeLeadTime"), ("ORION-BASE-MIB", "dcEqualizeTimeLag"), ("ORION-BASE-MIB", "dcEqualizeInterval"), ("ORION-BASE-MIB", "dcEqualizeStartTimeIntervalFrom"), ("ORION-BASE-MIB", "dcEqualizeStartTimeIntervalTo"), ("ORION-BASE-MIB", "dcEqualizeInhibitAfterBoost"), ("ORION-BASE-MIB", "dcBoostChargeControl"), ("ORION-BASE-MIB", "dcBoostChargeStatus"), ("ORION-BASE-MIB", "dcBoostChargeType"), ("ORION-BASE-MIB", "dcBoostChargeVoltage"), ("ORION-BASE-MIB", "dcBoostChargeMaxDuration"), ("ORION-BASE-MIB", "dcBoostChargeUseBattRoomFanEnabled"), ("ORION-BASE-MIB", "dcBoostChargeTimeLag"), ("ORION-BASE-MIB", "dcBoostChargeIstart"), ("ORION-BASE-MIB", "dcBoostChargeIstop"), ("ORION-BASE-MIB", "dcBoostChargeInhibitTime"), ("ORION-BASE-MIB", "dcUaMax"), ("ORION-BASE-MIB", "dcUaMin"), ("ORION-BASE-MIB", "dcUsMax"), ("ORION-BASE-MIB", "dcUsMin"), ("ORION-BASE-MIB", "dcBoD"), ("ORION-BASE-MIB", "dcHysteresis"), ("ORION-BASE-MIB", "dcSuppressUaLowEnabled"), ("ORION-BASE-MIB", "dcSuppressUsLowEnabled"), ("ORION-BASE-MIB", "dcEnableUsTempComp"), ("ORION-BASE-MIB", "dcEvtCtrlChargeStatus"), ("ORION-BASE-MIB", "dcEvtCtrlChargeType"), ("ORION-BASE-MIB", "dcEvtCtrlChargeVoltage"), ("ORION-BASE-MIB", "dcEvtCtrlChargeTempCompEnabled"), ("ORION-BASE-MIB", "dcEvtCtrlChargeMaxIBatt"), ("ORION-BASE-MIB", "dcHighTemp"), ("ORION-BASE-MIB", "dcHighTempHyst"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    batteryGroup = batteryGroup.setStatus('current')
controlEventTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 11)).setObjects(("ORION-BASE-MIB", "dcControlEventName"), ("ORION-BASE-MIB", "dcControlEventIdentifier"), ("ORION-BASE-MIB", "dcControlEventValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    controlEventTableGroup = controlEventTableGroup.setStatus('current')
trapDestinationTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 12)).setObjects(("ORION-BASE-MIB", "dcTrapDestinationIp"), ("ORION-BASE-MIB", "dcTrapDestinationPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trapDestinationTableGroup = trapDestinationTableGroup.setStatus('current')
miscGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 13)).setObjects(("ORION-BASE-MIB", "dcFileProcessingStatus"), ("ORION-BASE-MIB", "dcResendActiveAlarmTraps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    miscGroup = miscGroup.setStatus('current')
rectifierGroupTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 14)).setObjects(("ORION-BASE-MIB", "dcRectifierGroupName"), ("ORION-BASE-MIB", "dcRectifierGroupRectifierType"), ("ORION-BASE-MIB", "dcRectifierGroupDefaultVoltage"), ("ORION-BASE-MIB", "dcRectifierGroupDefaultCurrentLimit"), ("ORION-BASE-MIB", "dcRectifierGroupDefaultPowerLimit"), ("ORION-BASE-MIB", "dcRectifierGroupInputLowOff"), ("ORION-BASE-MIB", "dcRectifierGroupInputLowOn"), ("ORION-BASE-MIB", "dcRectifierGroupStartupVoltage"), ("ORION-BASE-MIB", "dcRectifierGroupStartupCurrentLimit"), ("ORION-BASE-MIB", "dcRectifierGroupStartupPowerLimit"), ("ORION-BASE-MIB", "dcRectifierGroupStartupTimeLimit"), ("ORION-BASE-MIB", "dcRectifierGroupPowerupDelay"), ("ORION-BASE-MIB", "dcRectifierGroupPowerupTime"), ("ORION-BASE-MIB", "dcRectifierGroupUmaxOff"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rectifierGroupTableGroup = rectifierGroupTableGroup.setStatus('current')
batteryStringTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 15)).setObjects(("ORION-BASE-MIB", "dcBatteryStringName"), ("ORION-BASE-MIB", "dcBatteryStringMaxIBatt"), ("ORION-BASE-MIB", "dcBatteryStringCapacity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    batteryStringTableGroup = batteryStringTableGroup.setStatus('current')
defaultLogEventTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 16)).setObjects(("ORION-BASE-MIB", "dcDefaultLogEventName"), ("ORION-BASE-MIB", "dcDefaultLogEventLogged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    defaultLogEventTableGroup = defaultLogEventTableGroup.setStatus('current')
eventProcessingEventTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 17)).setObjects(("ORION-BASE-MIB", "dcEventProcessingEventName"), ("ORION-BASE-MIB", "dcEventProcessingEventAssigned"), ("ORION-BASE-MIB", "dcEventProcessingEventType"), ("ORION-BASE-MIB", "dcEventProcessingEventSelected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eventProcessingEventTableGroup = eventProcessingEventTableGroup.setStatus('current')
lvdTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 18)).setObjects(("ORION-BASE-MIB", "dcLvdName"), ("ORION-BASE-MIB", "dcLvdDisconnectDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lvdTableGroup = lvdTableGroup.setStatus('current')
powerLimitationTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 19)).setObjects(("ORION-BASE-MIB", "dcPowerLimitationEventName"), ("ORION-BASE-MIB", "dcPowerLimitationStatus"), ("ORION-BASE-MIB", "dcPowerLimitationType"), ("ORION-BASE-MIB", "dcPowerLimitationLimit"), ("ORION-BASE-MIB", "dcPowerLimitationNoBatteryDischarge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    powerLimitationTableGroup = powerLimitationTableGroup.setStatus('current')
measurementTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 20)).setObjects(("ORION-BASE-MIB", "dcMeasurementName"), ("ORION-BASE-MIB", "dcMeasurementValue"), ("ORION-BASE-MIB", "dcMeasurementScaleFactor"), ("ORION-BASE-MIB", "dcMeasurementUnit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    measurementTableGroup = measurementTableGroup.setStatus('current')
meterPanelEventTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 21)).setObjects(("ORION-BASE-MIB", "dcMeterPanelEventName"), ("ORION-BASE-MIB", "dcMeterPanelEventValue"), ("ORION-BASE-MIB", "dcMeterPanelEventHourMeterValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    meterPanelEventTableGroup = meterPanelEventTableGroup.setStatus('current')
controllerBasicCompl = ModuleCompliance((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 2, 1)).setObjects(("ORION-BASE-MIB", "systemInfoGroup"), ("ORION-BASE-MIB", "systemAlarmGroup"), ("ORION-BASE-MIB", "systemMonitorGroup"), ("ORION-BASE-MIB", "alarmTableGroup"), ("ORION-BASE-MIB", "notificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    controllerBasicCompl = controllerBasicCompl.setStatus('current')
mibBuilder.exportSymbols("ORION-BASE-MIB", dcEvtCtrlChargeStatus=dcEvtCtrlChargeStatus, dcBoostCharge=dcBoostCharge, dcBoostChargeInhibitTime=dcBoostChargeInhibitTime, dcHighTempSlope=dcHighTempSlope, dcTrapDestinationPort=dcTrapDestinationPort, dcStartTemp=dcStartTemp, dcLowTempSlope=dcLowTempSlope, dcTrapDestinationEntry=dcTrapDestinationEntry, dcBatteryTestResults=dcBatteryTestResults, dcInputOutput=dcInputOutput, controllerEvents=controllerEvents, dcMeasurementScaleFactor=dcMeasurementScaleFactor, dcAlarmEventCategory=dcAlarmEventCategory, controllerObjects=controllerObjects, dcUsMax=dcUsMax, dcNumberRectifiersFailure=dcNumberRectifiersFailure, dcControlEventValue=dcControlEventValue, dcEventProcessingEventSelected=dcEventProcessingEventSelected, dcBatteryTestVoltageWithinUfloat=dcBatteryTestVoltageWithinUfloat, dcEqualizeDuration=dcEqualizeDuration, dcBoostChargeMaxDuration=dcBoostChargeMaxDuration, dcPowerLimitationEventName=dcPowerLimitationEventName, dcMeasurementValue=dcMeasurementValue, notificationsGroup=notificationsGroup, dcCurrentLimit=dcCurrentLimit, dcMaximumLoadStep=dcMaximumLoadStep, dcUrgentAlarmValue=dcUrgentAlarmValue, dcEvtCtrlCharge=dcEvtCtrlCharge, dcBatteryTestStartTimeTo=dcBatteryTestStartTimeTo, dcEqualizeControl=dcEqualizeControl, dcUaMax=dcUaMax, meterPanelEventTableGroup=meterPanelEventTableGroup, dcBatteryTemperature=dcBatteryTemperature, dcRectifierGroupPowerupDelay=dcRectifierGroupPowerupDelay, systemNonUrgentAlarm=systemNonUrgentAlarm, dcEfficiencyCycling=dcEfficiencyCycling, dcSiteName=dcSiteName, dcNumberUrgentAlarms=dcNumberUrgentAlarms, dcRectifierGroupRectifierType=dcRectifierGroupRectifierType, dcDefaultLogEventIndex=dcDefaultLogEventIndex, dcEqualizeEnabled=dcEqualizeEnabled, dcControlEventEntry=dcControlEventEntry, dcLossOfBackupTimeStatus=dcLossOfBackupTimeStatus, lvdTableGroup=lvdTableGroup, dcCriticalAlarmIdentifier=dcCriticalAlarmIdentifier, dcBatteryTestInterval=dcBatteryTestInterval, dcEqualizeInhibitAfterBoost=dcEqualizeInhibitAfterBoost, dcMeasurementEntry=dcMeasurementEntry, dcGenericAlarmEntry=dcGenericAlarmEntry, dcEqualizeTimeLag=dcEqualizeTimeLag, dcRectifierGroupStartupCurrentLimit=dcRectifierGroupStartupCurrentLimit, dcEventHistoryIndex=dcEventHistoryIndex, dcBoostChargeVoltage=dcBoostChargeVoltage, dcMaxVoltage=dcMaxVoltage, systemAlarmGroup=systemAlarmGroup, alarmTableGroup=alarmTableGroup, rectifierTableGroup=rectifierTableGroup, dcHysteresis=dcHysteresis, dcMeasurementUnit=dcMeasurementUnit, dcEqualizeVoltage=dcEqualizeVoltage, dcHighStopVoltage=dcHighStopVoltage, dcHighTemp=dcHighTemp, miscGroup=miscGroup, dcSystemInfo=dcSystemInfo, dcSuppressUaLowEnabled=dcSuppressUaLowEnabled, dcGenericAlarmTable=dcGenericAlarmTable, dcHighStartTemp=dcHighStartTemp, dcEqualizeParameter=dcEqualizeParameter, dcRectifierStatus=dcRectifierStatus, dcRectifierGroupStartupVoltage=dcRectifierGroupStartupVoltage, dcBatteryTestUsupport=dcBatteryTestUsupport, dcEqualize=dcEqualize, dcUaMin=dcUaMin, dcBatteryTestVoltageWithinUfloatPeriod=dcBatteryTestVoltageWithinUfloatPeriod, dcEvtCtrlChargeType=dcEvtCtrlChargeType, dcMeterPanelEventTable=dcMeterPanelEventTable, dcChargeState=dcChargeState, dcRectifierGroupInputLowOn=dcRectifierGroupInputLowOn, dcFileProcessingStatus=dcFileProcessingStatus, dcLowStopVoltage=dcLowStopVoltage, dcStopTemp=dcStopTemp, dcBatteryTestType=dcBatteryTestType, systemCriticalAlarm=systemCriticalAlarm, dcBatteryTestControl=dcBatteryTestControl, dcRectifier=dcRectifier, dcBoD=dcBoD, dcSuppressUsLowEnabled=dcSuppressUsLowEnabled, dcNonUrgentAlarmValue=dcNonUrgentAlarmValue, dcSoftwareVersion=dcSoftwareVersion, dcBatteryTestFailureEvent=dcBatteryTestFailureEvent, defaultLogEventTableGroup=defaultLogEventTableGroup, trapDestinationTableGroup=trapDestinationTableGroup, dcFloatCharge=dcFloatCharge, dcUrgentAlarmName=dcUrgentAlarmName, dcRectifierIndex=dcRectifierIndex, orionBaseMib=orionBaseMib, dcEventProcessingEventType=dcEventProcessingEventType, measurementTableGroup=measurementTableGroup, dcAlarmEventName=dcAlarmEventName, dcSystemName=dcSystemName, dcBatteryTest=dcBatteryTest, dcMeasurement=dcMeasurement, dcRunawayTemp=dcRunawayTemp, dcRectifierTable=dcRectifierTable, dcBatteryStringName=dcBatteryStringName, dcLowStartTemp=dcLowStartTemp, dcBatteryTestEndVoltage=dcBatteryTestEndVoltage, dcEqualizeStatus=dcEqualizeStatus, dcDefaultLogEventTable=dcDefaultLogEventTable, systemInfoGroup=systemInfoGroup, dcSystemMonitor=dcSystemMonitor, dcMisc=dcMisc, dcCriticalAlarmName=dcCriticalAlarmName, dcMeterPanelEventEntry=dcMeterPanelEventEntry, dcDefaultLogEventLogged=dcDefaultLogEventLogged, dcRectifierEntry=dcRectifierEntry, dcUrgentAlarmIdentifier=dcUrgentAlarmIdentifier, dcPowerLimitationLimit=dcPowerLimitationLimit, dcMeterPanelEventHourMeterValue=dcMeterPanelEventHourMeterValue, dcLoadCurrent=dcLoadCurrent, dcEqualizeInterval=dcEqualizeInterval, dcEnableUsTempComp=dcEnableUsTempComp, dcBoostChargeParameter=dcBoostChargeParameter, dcUsys20=dcUsys20, dcBoostChargeControl=dcBoostChargeControl, dcBoostChargeIstart=dcBoostChargeIstart, dcRectifierIdentifier=dcRectifierIdentifier, rectifierGroup=rectifierGroup, controllerBasicCompl=controllerBasicCompl, dcRectifierGroupDefaultCurrentLimit=dcRectifierGroupDefaultCurrentLimit, dcAlarmIndex=dcAlarmIndex, dcBoostChargeType=dcBoostChargeType, dcRectifierGroupName=dcRectifierGroupName, dcEventProcessingEventEntry=dcEventProcessingEventEntry, dcEqualizeLeadTime=dcEqualizeLeadTime, dcUsMin=dcUsMin, powerLimitationTableGroup=powerLimitationTableGroup, dcPowerLimitationStatus=dcPowerLimitationStatus, dcBatteryTestTempTo=dcBatteryTestTempTo, dcExpectedBackupTime=dcExpectedBackupTime, dcNonUrgentAlarmIdentifier=dcNonUrgentAlarmIdentifier, controllerEventObjects=controllerEventObjects, dcEventHistoryMessage=dcEventHistoryMessage, PYSNMP_MODULE_ID=orionBaseMibModule, dcPowerLimitationIndex=dcPowerLimitationIndex, dcLvdDisconnectDelay=dcLvdDisconnectDelay, dcAlarmEventIdentifier=dcAlarmEventIdentifier, dcGenericAlarmEventIdentifier=dcGenericAlarmEventIdentifier, dcMeterPanelEventIndex=dcMeterPanelEventIndex, dcBatteryTestDuration=dcBatteryTestDuration, dcAlarmTable=dcAlarmTable, dcSystemDateTime=dcSystemDateTime, dcConfig=dcConfig, dcMeasurementName=dcMeasurementName, orionBaseMibModule=orionBaseMibModule, dcRectifierGroupDefaultPowerLimit=dcRectifierGroupDefaultPowerLimit, controllerCompl=controllerCompl, dcSlope=dcSlope, controllerConfs=controllerConfs, dcNumberRectifiers=dcNumberRectifiers, dcTotalBatteryCapacity=dcTotalBatteryCapacity, dcHighTempHyst=dcHighTempHyst, dcRectifierGroupDefaultVoltage=dcRectifierGroupDefaultVoltage, dcMeasurementIndex=dcMeasurementIndex, dcSystemAlarms=dcSystemAlarms, dcBatteryTestDischargeCurrent=dcBatteryTestDischargeCurrent, dcNonUrgentAlarmName=dcNonUrgentAlarmName, dcTrapDestinationIp=dcTrapDestinationIp, dcMeterPanelEventValue=dcMeterPanelEventValue, dcEqualizeStartTimeIntervalTo=dcEqualizeStartTimeIntervalTo, dcResendActiveAlarmTraps=dcResendActiveAlarmTraps, dcBatteryTestIntervalEnabled=dcBatteryTestIntervalEnabled, dcPowerLimitation=dcPowerLimitation, dcMeterPanel=dcMeterPanel, dcTempCompType=dcTempCompType, dcSystemPower=dcSystemPower, dcAlarmEventValue=dcAlarmEventValue, dcPowerLimitationTable=dcPowerLimitationTable, dcEventProcessingEventTable=dcEventProcessingEventTable, dcLvdName=dcLvdName, dcRectifierGroupIndex=dcRectifierGroupIndex, batteryGroup=batteryGroup, dcControlEventTable=dcControlEventTable, dcBoostChargeIstop=dcBoostChargeIstop, dcRectifierGroupUmaxOff=dcRectifierGroupUmaxOff, dcControlEventIdentifier=dcControlEventIdentifier, dcEqualizeUseBattRoomFanEnabled=dcEqualizeUseBattRoomFanEnabled, dcNumberNonUrgentAlarms=dcNumberNonUrgentAlarms, dcEventProcessingEventIndex=dcEventProcessingEventIndex, dcPowerLimitationType=dcPowerLimitationType, dcLvdTable=dcLvdTable, dcBatteryStringCapacity=dcBatteryStringCapacity, dcBattery=dcBattery, dcDefaultLogEventEntry=dcDefaultLogEventEntry, controlEventTableGroup=controlEventTableGroup, dcSystemVoltage=dcSystemVoltage, dcTempComp=dcTempComp, dcRectifierCurrent=dcRectifierCurrent, dcEvtCtrlChargeMaxIBatt=dcEvtCtrlChargeMaxIBatt, dcBatteryTestParameter=dcBatteryTestParameter, dcNumberCriticalAlarms=dcNumberCriticalAlarms, dcPowerLimitationEntry=dcPowerLimitationEntry, dcBatteryStringEntry=dcBatteryStringEntry, dcBatteryStringMaxIBatt=dcBatteryStringMaxIBatt, dcBoostChargeStatus=dcBoostChargeStatus, eventHistoryTableGroup=eventHistoryTableGroup, dcMainsFailureAlarm=dcMainsFailureAlarm, dcEfficiencyCyclingEnabled=dcEfficiencyCyclingEnabled, dcEqualizeStartTimeIntervalFrom=dcEqualizeStartTimeIntervalFrom, dcBatteryTestStartTimeFrom=dcBatteryTestStartTimeFrom, dcBoostChargeUseBattRoomFanEnabled=dcBoostChargeUseBattRoomFanEnabled, dcNumberRectifiersOkay=dcNumberRectifiersOkay, dcEventHistoryTable=dcEventHistoryTable, dcAlarmEntry=dcAlarmEntry, dcGenericAlarmIndex=dcGenericAlarmIndex, systemUrgentAlarm=systemUrgentAlarm, dcRectifierFunctions=dcRectifierFunctions, dcBatteryTestStatus=dcBatteryTestStatus, dcRectifierGroupStartupPowerLimit=dcRectifierGroupStartupPowerLimit, dcMinimumLoadStep=dcMinimumLoadStep, dcBatteryCurrent=dcBatteryCurrent, controllerEventsV2=controllerEventsV2, dcEventProcessingEventName=dcEventProcessingEventName, rectifierGroupTableGroup=rectifierGroupTableGroup, dcLossOfBackupTimeEnabled=dcLossOfBackupTimeEnabled, dcBatteryParameter=dcBatteryParameter, dcEvtCtrlChargeVoltage=dcEvtCtrlChargeVoltage, dcEvtCtrlChargeTempCompEnabled=dcEvtCtrlChargeTempCompEnabled, dcSystemVoltageSupervision=dcSystemVoltageSupervision, dcBatteryStringTable=dcBatteryStringTable, dcBatteryStringIndex=dcBatteryStringIndex, dcTrapDestinationIndex=dcTrapDestinationIndex, dcEvtCtrlChargeParameter=dcEvtCtrlChargeParameter, dcDefaultLogEventName=dcDefaultLogEventName, dcBatteryTestTempFrom=dcBatteryTestTempFrom, systemMonitorGroup=systemMonitorGroup, dcBoostChargeTimeLag=dcBoostChargeTimeLag, dcBatteryTestDateTime=dcBatteryTestDateTime, dcMeterPanelEventName=dcMeterPanelEventName, eventProcessingEventTableGroup=eventProcessingEventTableGroup, dcControlEventIndex=dcControlEventIndex, dcControlEventName=dcControlEventName, dcRectifierGroupTable=dcRectifierGroupTable, dcPowerLimitationNoBatteryDischarge=dcPowerLimitationNoBatteryDischarge, dcTempSupervision=dcTempSupervision, batteryStringTableGroup=batteryStringTableGroup, dcEventHistoryEntry=dcEventHistoryEntry, dcLimitSwitchingTimes=dcLimitSwitchingTimes, dcForceSwitchingOncePerMonth=dcForceSwitchingOncePerMonth, dcEventHistoryTimestamp=dcEventHistoryTimestamp, dcGenericAlarmEventName=dcGenericAlarmEventName, dcGenericAlarmEventValue=dcGenericAlarmEventValue, dcLvdEntry=dcLvdEntry, dcTrapDestinationTable=dcTrapDestinationTable)
mibBuilder.exportSymbols("ORION-BASE-MIB", dcRectifierGroupEntry=dcRectifierGroupEntry, dcMeasurementTable=dcMeasurementTable, dcRectifierGroupInputLowOff=dcRectifierGroupInputLowOff, dcBatteryTestResult=dcBatteryTestResult, dcBatteryTestMinDuration=dcBatteryTestMinDuration, dcRectifierGroupPowerupTime=dcRectifierGroupPowerupTime, dcLvdIndex=dcLvdIndex, dcLossOfBackupTime=dcLossOfBackupTime, controllerGroups=controllerGroups, dcRunawayVoltage=dcRunawayVoltage, dcCriticalAlarmValue=dcCriticalAlarmValue, dcRectifierGroupStartupTimeLimit=dcRectifierGroupStartupTimeLimit, genericAlarmTableGroup=genericAlarmTableGroup, dcEventProcessingEventAssigned=dcEventProcessingEventAssigned)
