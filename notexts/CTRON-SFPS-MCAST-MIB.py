#
# PySNMP MIB module CTRON-SFPS-MCAST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-SFPS-MCAST-MIB
# Produced by pysmi-1.1.12 at Mon Jul  1 09:19:16 2024
# On host fv-az735-465 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
sfpsMcastCnx, sfpsMcastIPReceiverInfoBase, sfpsMcastIPSenderInfoBase, sfpsMcastIPSIBApi, sfpsMcastCnxAPI, sfpsMcastIPRIBApi, sfpsMcastConfigApi, sfpsMcastIPRouter = mibBuilder.importSymbols("CTRON-SFPS-INCLUDE-MIB", "sfpsMcastCnx", "sfpsMcastIPReceiverInfoBase", "sfpsMcastIPSenderInfoBase", "sfpsMcastIPSIBApi", "sfpsMcastCnxAPI", "sfpsMcastIPRIBApi", "sfpsMcastConfigApi", "sfpsMcastIPRouter")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Unsigned32, ObjectIdentity, MibIdentifier, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity, IpAddress, Counter32, iso, TimeTicks, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "ObjectIdentity", "MibIdentifier", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity", "IpAddress", "Counter32", "iso", "TimeTicks", "Bits", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class SfpsAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

sfpsMcastCnxDestination = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 1, 1), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxDestination.setStatus('mandatory')
sfpsMcastCnxSource = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 1, 2), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxSource.setStatus('mandatory')
sfpsMcastCnxSenderSw = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 1, 3), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxSenderSw.setStatus('mandatory')
sfpsMcastCnxInPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxInPort.setStatus('mandatory')
sfpsMcastCnxOutPorts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxOutPorts.setStatus('mandatory')
sfpsMcastCnxGroup = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxGroup.setStatus('mandatory')
sfpsMcastCnxTTL = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxTTL.setStatus('deprecated')
sfpsMcastCnxAge = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxAge.setStatus('mandatory')
sfpsMcastCnxStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 8, 16, 17, 18))).clone(namedValues=NamedValues(("filter", 1), ("inActive", 2), ("remote", 4), ("netFilter", 5), ("dying", 8), ("static", 16), ("staticFilter", 17), ("staticInactive", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxStatus.setStatus('mandatory')
sfpsMcastCnxNextSw = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 1, 10), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxNextSw.setStatus('mandatory')
sfpsMcastCnxAPIDestination = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 2, 1), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxAPIDestination.setStatus('mandatory')
sfpsMcastCnxAPISource = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 2, 2), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxAPISource.setStatus('mandatory')
sfpsMcastCnxAPISenderSw = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 2, 3), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxAPISenderSw.setStatus('mandatory')
sfpsMcastCnxAPIInPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxAPIInPort.setStatus('mandatory')
sfpsMcastCnxAPIOutPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxAPIOutPort.setStatus('mandatory')
sfpsMcastCnxAPIGroup = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 2, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxAPIGroup.setStatus('mandatory')
sfpsMcastCnxAPITTL = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxAPITTL.setStatus('deprecated')
sfpsMcastCnxAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("addFilter", 2), ("addPort", 3), ("delPort", 4), ("addCnx", 5), ("delCnx", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxAPIVerb.setStatus('mandatory')
sfpsMcastCnxAPIFilters = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxAPIFilters.setStatus('mandatory')
sfpsMcastCnxAPINonFilters = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastCnxAPINonFilters.setStatus('mandatory')
sfpsMcastIPRouterTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 1, 1), )
if mibBuilder.loadTexts: sfpsMcastIPRouterTable.setStatus('mandatory')
sfpsMcastIPRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 1, 1, 1), ).setIndexNames((0, "CTRON-SFPS-MCAST-MIB", "sfpsMcastIPRouterIfNum"))
if mibBuilder.loadTexts: sfpsMcastIPRouterEntry.setStatus('mandatory')
sfpsMcastIPRouterIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRouterIfNum.setStatus('mandatory')
sfpsMcastIPRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRouterVlanId.setStatus('mandatory')
sfpsMcastIPRouterRouterIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRouterRouterIP.setStatus('mandatory')
sfpsMcastIPRouterTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRouterTTL.setStatus('deprecated')
sfpsMcastIPRouterAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("portMap", 2), ("portUnmap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMcastIPRouterAPIVerb.setStatus('mandatory')
sfpsMcastIPRouterAPIIFNum = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMcastIPRouterAPIIFNum.setStatus('mandatory')
sfpsMcastIPRouterAPIRouterIP = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMcastIPRouterAPIRouterIP.setStatus('mandatory')
sfpsMcastIPRouterAPITTLScope = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 16, 64, 128, 192, 255))).clone(namedValues=NamedValues(("subnet", 1), ("vacinity", 4), ("site", 16), ("region", 64), ("world", 128), ("worldLimited", 192), ("unrestricted", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMcastIPRouterAPITTLScope.setStatus('deprecated')
sfpsMcastIPRouterAPIVlanId = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMcastIPRouterAPIVlanId.setStatus('mandatory')
sfpsMcastIPRIBTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 3, 1), )
if mibBuilder.loadTexts: sfpsMcastIPRIBTable.setStatus('mandatory')
sfpsMcastIPRIBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 3, 1, 1), ).setIndexNames((0, "CTRON-SFPS-MCAST-MIB", "sfpsMcastIPRIBGroup"))
if mibBuilder.loadTexts: sfpsMcastIPRIBEntry.setStatus('mandatory')
sfpsMcastIPRIBGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRIBGroup.setStatus('mandatory')
sfpsMcastIPRIBOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("router", 3), ("igmp", 4), ("netMgt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRIBOrigin.setStatus('mandatory')
sfpsMcastIPRIBInclusion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRIBInclusion.setStatus('mandatory')
sfpsMcastIPRIBRcvPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 3, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRIBRcvPorts.setStatus('mandatory')
sfpsMcastIPRIBAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRIBAge.setStatus('mandatory')
sfpsMcastIPRIBApiGroup = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 3, 2, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRIBApiGroup.setStatus('mandatory')
sfpsMcastIPRIBApiPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRIBApiPort.setStatus('mandatory')
sfpsMcastIPRIBApiVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("includePort", 1), ("undoInclude", 2), ("excludePort", 3), ("undoExclude", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPRIBApiVerb.setStatus('mandatory')
sfpsMcastConfigApiSenderTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiSenderTableSize.setStatus('mandatory')
sfpsMcastConfigApiMaxNonFilters = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiMaxNonFilters.setStatus('mandatory')
sfpsMcastConfigApiRDRetryBuffs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiRDRetryBuffs.setStatus('mandatory')
sfpsMcastConfigApiRDPktBuffs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiRDPktBuffs.setStatus('mandatory')
sfpsMcastConfigApiPendingMaps = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiPendingMaps.setStatus('mandatory')
sfpsMcastConfigApiSndrAgeOut = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiSndrAgeOut.setStatus('mandatory')
sfpsMcastConfigApiRefreshInterval = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiRefreshInterval.setStatus('mandatory')
sfpsMcastConfigApiSndersPerAncmt = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiSndersPerAncmt.setStatus('mandatory')
sfpsMcastConfigApiDebugLog = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiDebugLog.setStatus('mandatory')
sfpsMcastConfigApiStaticTblSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiStaticTblSize.setStatus('mandatory')
sfpsMcastConfigApiMcribSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiMcribSize.setStatus('mandatory')
sfpsMcastConfigApiMcastMode = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("doNoVlanChecking", 1), ("doSomeVlanChecking", 2), ("checkAll", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiMcastMode.setStatus('mandatory')
sfpsMcastConfigApiRemapDelay = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiRemapDelay.setStatus('mandatory')
sfpsMcastConfigApiQHighLimit = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiQHighLimit.setStatus('mandatory')
sfpsMcastConfigApiQLowLimit = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiQLowLimit.setStatus('mandatory')
sfpsMcastConfigApiDynamicQuery = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastConfigApiDynamicQuery.setStatus('mandatory')
sfpsMcastIPSIBTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 4, 1), )
if mibBuilder.loadTexts: sfpsMcastIPSIBTable.setStatus('mandatory')
sfpsMcastIPSIBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 4, 1, 1), ).setIndexNames((0, "CTRON-SFPS-MCAST-MIB", "sfpsMcastIPSIBGroup"), (0, "CTRON-SFPS-MCAST-MIB", "sfpsMcastIPSIBSender"))
if mibBuilder.loadTexts: sfpsMcastIPSIBEntry.setStatus('mandatory')
sfpsMcastIPSIBGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 4, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPSIBGroup.setStatus('mandatory')
sfpsMcastIPSIBSender = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 4, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPSIBSender.setStatus('mandatory')
sfpsMcastIPSIBInclusion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPSIBInclusion.setStatus('mandatory')
sfpsMcastIPSIBAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMcastIPSIBAge.setStatus('mandatory')
sfpsMcastIPSibApiGroup = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 4, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMcastIPSibApiGroup.setStatus('mandatory')
sfpsMcastIPSibApiSender = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 4, 2, 2), SfpsAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMcastIPSibApiSender.setStatus('mandatory')
sfpsMcastIPSibApiVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 5, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("includeSender", 1), ("undoInclude", 2), ("excludeSender", 3), ("undoExclude", 4), ("reset", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMcastIPSibApiVerb.setStatus('mandatory')
mibBuilder.exportSymbols("CTRON-SFPS-MCAST-MIB", sfpsMcastIPRouterIfNum=sfpsMcastIPRouterIfNum, sfpsMcastIPRouterTTL=sfpsMcastIPRouterTTL, sfpsMcastCnxAPIVerb=sfpsMcastCnxAPIVerb, sfpsMcastCnxAPISource=sfpsMcastCnxAPISource, sfpsMcastConfigApiRefreshInterval=sfpsMcastConfigApiRefreshInterval, sfpsMcastConfigApiSenderTableSize=sfpsMcastConfigApiSenderTableSize, sfpsMcastConfigApiPendingMaps=sfpsMcastConfigApiPendingMaps, sfpsMcastIPSIBGroup=sfpsMcastIPSIBGroup, sfpsMcastConfigApiRemapDelay=sfpsMcastConfigApiRemapDelay, sfpsMcastCnxAPIFilters=sfpsMcastCnxAPIFilters, SfpsAddress=SfpsAddress, sfpsMcastCnxAPINonFilters=sfpsMcastCnxAPINonFilters, sfpsMcastIPRouterTable=sfpsMcastIPRouterTable, sfpsMcastIPSIBTable=sfpsMcastIPSIBTable, sfpsMcastIPRouterAPIIFNum=sfpsMcastIPRouterAPIIFNum, sfpsMcastCnxAPIDestination=sfpsMcastCnxAPIDestination, sfpsMcastIPSIBEntry=sfpsMcastIPSIBEntry, sfpsMcastIPSibApiVerb=sfpsMcastIPSibApiVerb, sfpsMcastConfigApiQHighLimit=sfpsMcastConfigApiQHighLimit, sfpsMcastCnxSource=sfpsMcastCnxSource, sfpsMcastIPSIBInclusion=sfpsMcastIPSIBInclusion, sfpsMcastConfigApiMcastMode=sfpsMcastConfigApiMcastMode, sfpsMcastIPRouterAPIRouterIP=sfpsMcastIPRouterAPIRouterIP, sfpsMcastCnxGroup=sfpsMcastCnxGroup, sfpsMcastCnxAPIOutPort=sfpsMcastCnxAPIOutPort, sfpsMcastCnxOutPorts=sfpsMcastCnxOutPorts, sfpsMcastConfigApiDebugLog=sfpsMcastConfigApiDebugLog, sfpsMcastCnxInPort=sfpsMcastCnxInPort, sfpsMcastIPSibApiGroup=sfpsMcastIPSibApiGroup, sfpsMcastCnxAPITTL=sfpsMcastCnxAPITTL, sfpsMcastIPRIBApiVerb=sfpsMcastIPRIBApiVerb, sfpsMcastCnxAPISenderSw=sfpsMcastCnxAPISenderSw, sfpsMcastIPSibApiSender=sfpsMcastIPSibApiSender, sfpsMcastConfigApiDynamicQuery=sfpsMcastConfigApiDynamicQuery, sfpsMcastCnxSenderSw=sfpsMcastCnxSenderSw, sfpsMcastCnxStatus=sfpsMcastCnxStatus, sfpsMcastIPRouterAPIVerb=sfpsMcastIPRouterAPIVerb, sfpsMcastConfigApiRDPktBuffs=sfpsMcastConfigApiRDPktBuffs, sfpsMcastConfigApiSndersPerAncmt=sfpsMcastConfigApiSndersPerAncmt, sfpsMcastCnxDestination=sfpsMcastCnxDestination, sfpsMcastConfigApiMcribSize=sfpsMcastConfigApiMcribSize, sfpsMcastConfigApiQLowLimit=sfpsMcastConfigApiQLowLimit, sfpsMcastIPRIBInclusion=sfpsMcastIPRIBInclusion, sfpsMcastCnxAPIInPort=sfpsMcastCnxAPIInPort, sfpsMcastIPRouterEntry=sfpsMcastIPRouterEntry, sfpsMcastIPRIBTable=sfpsMcastIPRIBTable, sfpsMcastCnxAge=sfpsMcastCnxAge, sfpsMcastIPRIBAge=sfpsMcastIPRIBAge, sfpsMcastConfigApiStaticTblSize=sfpsMcastConfigApiStaticTblSize, sfpsMcastConfigApiMaxNonFilters=sfpsMcastConfigApiMaxNonFilters, sfpsMcastIPRIBApiGroup=sfpsMcastIPRIBApiGroup, sfpsMcastCnxNextSw=sfpsMcastCnxNextSw, sfpsMcastIPRIBOrigin=sfpsMcastIPRIBOrigin, sfpsMcastIPSIBAge=sfpsMcastIPSIBAge, sfpsMcastIPRouterAPITTLScope=sfpsMcastIPRouterAPITTLScope, sfpsMcastIPRIBGroup=sfpsMcastIPRIBGroup, sfpsMcastIPSIBSender=sfpsMcastIPSIBSender, sfpsMcastConfigApiRDRetryBuffs=sfpsMcastConfigApiRDRetryBuffs, sfpsMcastIPRIBRcvPorts=sfpsMcastIPRIBRcvPorts, sfpsMcastIPRIBEntry=sfpsMcastIPRIBEntry, sfpsMcastCnxAPIGroup=sfpsMcastCnxAPIGroup, sfpsMcastIPRIBApiPort=sfpsMcastIPRIBApiPort, sfpsMcastConfigApiSndrAgeOut=sfpsMcastConfigApiSndrAgeOut, sfpsMcastIPRouterVlanId=sfpsMcastIPRouterVlanId, sfpsMcastIPRouterAPIVlanId=sfpsMcastIPRouterAPIVlanId, sfpsMcastCnxTTL=sfpsMcastCnxTTL, sfpsMcastIPRouterRouterIP=sfpsMcastIPRouterRouterIP)
