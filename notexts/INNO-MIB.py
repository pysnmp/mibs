#
# PySNMP MIB module INNO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/innovaphone/INNO-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 12:20:01 2024
# On host fv-az1385-751 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Bits, iso, ObjectIdentity, TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, enterprises, NotificationType, Counter32, Unsigned32, Counter64, Integer32, MibIdentifier, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "iso", "ObjectIdentity", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "enterprises", "NotificationType", "Counter32", "Unsigned32", "Counter64", "Integer32", "MibIdentifier", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

innovaphone = MibIdentifier((1, 3, 6, 1, 4, 1, 6666))
isdn = MibIdentifier((1, 3, 6, 1, 4, 1, 6666, 1))
l2Table = MibTable((1, 3, 6, 1, 4, 1, 6666, 1, 1), )
if mibBuilder.loadTexts: l2Table.setStatus('mandatory')
l2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6666, 1, 1, 1), ).setIndexNames((0, "INNO-MIB", "l2Label"))
if mibBuilder.loadTexts: l2Entry.setStatus('mandatory')
l2Label = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2Label.setStatus('mandatory')
l2State = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2State.setStatus('mandatory')
l2Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("te", 1), ("nt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2Mode.setStatus('mandatory')
l1Label = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l1Label.setStatus('mandatory')
l1PriTable = MibTable((1, 3, 6, 1, 4, 1, 6666, 1, 2), )
if mibBuilder.loadTexts: l1PriTable.setStatus('mandatory')
l1PriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6666, 1, 2, 1), ).setIndexNames((0, "INNO-MIB", "l1PriLabel"))
if mibBuilder.loadTexts: l1PriEntry.setStatus('mandatory')
l1PriLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l1PriLabel.setStatus('mandatory')
l1PriState = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l1PriState.setStatus('mandatory')
l1PriErrCrc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l1PriErrCrc4.setStatus('mandatory')
l1PriErrRemAlarmInd = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l1PriErrRemAlarmInd.setStatus('mandatory')
l1PriErrSigLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l1PriErrSigLoss.setStatus('mandatory')
l1PriErrAlarmInd = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l1PriErrAlarmInd.setStatus('mandatory')
l1PriErrFrameAlignmentTOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l1PriErrFrameAlignmentTOut.setStatus('mandatory')
l1PriErrFrameAlignmentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l1PriErrFrameAlignmentLoss.setStatus('mandatory')
l1PriErrSlip = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l1PriErrSlip.setStatus('mandatory')
l1PriTest = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noTest", 0), ("simAlarm", 1), ("resetAlarms", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l1PriTest.setStatus('mandatory')
l1BriTable = MibTable((1, 3, 6, 1, 4, 1, 6666, 1, 3), )
if mibBuilder.loadTexts: l1BriTable.setStatus('mandatory')
l1BriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6666, 1, 3, 1), ).setIndexNames((0, "INNO-MIB", "l1BriLabel"))
if mibBuilder.loadTexts: l1BriEntry.setStatus('mandatory')
l1BriLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l1BriLabel.setStatus('mandatory')
l1BriState = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l1BriState.setStatus('mandatory')
l3Table = MibTable((1, 3, 6, 1, 4, 1, 6666, 1, 4), )
if mibBuilder.loadTexts: l3Table.setStatus('mandatory')
l3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6666, 1, 4, 1), ).setIndexNames((0, "INNO-MIB", "l3Label"))
if mibBuilder.loadTexts: l3Entry.setStatus('mandatory')
l3Label = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3Label.setStatus('mandatory')
l3Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 23))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("etsi", 3), ("qsig", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3Protocol.setStatus('mandatory')
l3NumBchan = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3NumBchan.setStatus('mandatory')
l3NumBchanActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 1, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3NumBchanActive.setStatus('mandatory')
l3CallsBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3CallsBoot.setStatus('mandatory')
gateway = MibIdentifier((1, 3, 6, 1, 4, 1, 6666, 2))
gatekeeper = MibIdentifier((1, 3, 6, 1, 4, 1, 6666, 2, 1))
voiceIfTable = MibTable((1, 3, 6, 1, 4, 1, 6666, 2, 1, 1), )
if mibBuilder.loadTexts: voiceIfTable.setStatus('mandatory')
voiceIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6666, 2, 1, 1, 1), ).setIndexNames((0, "INNO-MIB", "voiceIfIndex"), (0, "INNO-MIB", "voiceIfAliasIndex"))
if mibBuilder.loadTexts: voiceIfEntry.setStatus('mandatory')
voiceIfGwName = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 2, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceIfGwName.setStatus('mandatory')
voiceIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unkown", 0), ("if", 1), ("ep", 2), ("gk", 3), ("gw", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceIfType.setStatus('mandatory')
voiceIfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 2, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceIfAddr.setStatus('mandatory')
voiceIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceIfState.setStatus('mandatory')
voiceIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceIfNumber.setStatus('mandatory')
voiceIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 2, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceIfName.setStatus('mandatory')
voiceIfProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 2, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceIfProduct.setStatus('mandatory')
voiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceIfIndex.setStatus('mandatory')
voiceIfAliasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6666, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceIfAliasIndex.setStatus('optional')
trapDummyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6666, 3))
trapDisplayStringParm = MibScalar((1, 3, 6, 1, 4, 1, 6666, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDisplayStringParm.setStatus('mandatory')
trapIntegerParm = MibScalar((1, 3, 6, 1, 4, 1, 6666, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapIntegerParm.setStatus('mandatory')
trapGaugeParm = MibScalar((1, 3, 6, 1, 4, 1, 6666, 3, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapGaugeParm.setStatus('mandatory')
innoColdStart = NotificationType((1, 3, 6, 1, 4, 1, 6666) + (0,0))
innoWarmStart = NotificationType((1, 3, 6, 1, 4, 1, 6666) + (0,1))
innoLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 6666) + (0,2)).setObjects(("IF-MIB", "ifIndex"))
innoLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 6666) + (0,3)).setObjects(("IF-MIB", "ifIndex"))
innoAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 6666) + (0,4))
innoIsdnFailure = NotificationType((1, 3, 6, 1, 4, 1, 6666) + (0,5)).setObjects(("INNO-MIB", "trapDisplayStringParm"), ("INNO-MIB", "trapIntegerParm"))
innoDiagAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6666) + (0,6)).setObjects(("INNO-MIB", "trapGaugeParm"), ("INNO-MIB", "trapDisplayStringParm"), ("INNO-MIB", "trapGaugeParm"), ("INNO-MIB", "trapDisplayStringParm"))
innoDiagAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6666) + (0,7)).setObjects(("INNO-MIB", "trapGaugeParm"), ("INNO-MIB", "trapDisplayStringParm"))
mibBuilder.exportSymbols("INNO-MIB", trapDummyGroup=trapDummyGroup, gateway=gateway, l1PriErrFrameAlignmentTOut=l1PriErrFrameAlignmentTOut, voiceIfTable=voiceIfTable, l1Label=l1Label, voiceIfName=voiceIfName, l3Label=l3Label, trapGaugeParm=trapGaugeParm, DisplayString=DisplayString, gatekeeper=gatekeeper, innoDiagAlarmClear=innoDiagAlarmClear, innoDiagAlarm=innoDiagAlarm, l2Mode=l2Mode, l1PriErrFrameAlignmentLoss=l1PriErrFrameAlignmentLoss, l3Entry=l3Entry, l3NumBchan=l3NumBchan, l1PriTest=l1PriTest, l1PriErrSlip=l1PriErrSlip, l1PriTable=l1PriTable, l1PriState=l1PriState, l1BriTable=l1BriTable, l1BriState=l1BriState, l1PriErrSigLoss=l1PriErrSigLoss, voiceIfAddr=voiceIfAddr, l2State=l2State, l1PriErrCrc4=l1PriErrCrc4, innoLinkDown=innoLinkDown, innoAuthenticationFailure=innoAuthenticationFailure, voiceIfProduct=voiceIfProduct, voiceIfAliasIndex=voiceIfAliasIndex, l1PriErrRemAlarmInd=l1PriErrRemAlarmInd, innoLinkUp=innoLinkUp, trapDisplayStringParm=trapDisplayStringParm, voiceIfNumber=voiceIfNumber, innovaphone=innovaphone, innoColdStart=innoColdStart, l1BriLabel=l1BriLabel, l2Table=l2Table, l3CallsBoot=l3CallsBoot, l3NumBchanActive=l3NumBchanActive, l2Label=l2Label, l1BriEntry=l1BriEntry, l3Table=l3Table, voiceIfState=voiceIfState, voiceIfIndex=voiceIfIndex, innoIsdnFailure=innoIsdnFailure, l1PriErrAlarmInd=l1PriErrAlarmInd, voiceIfGwName=voiceIfGwName, l1PriLabel=l1PriLabel, trapIntegerParm=trapIntegerParm, voiceIfType=voiceIfType, innoWarmStart=innoWarmStart, l3Protocol=l3Protocol, voiceIfEntry=voiceIfEntry, isdn=isdn, l1PriEntry=l1PriEntry, l2Entry=l2Entry)
