#
# PySNMP MIB module SAF-INTEGRAE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/saf/SAF-INTEGRAE-MIB
# Produced by pysmi-1.1.12 at Thu Sep 26 02:18:35 2024
# On host fv-az1144-917 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
pointToPoint, = mibBuilder.importSymbols("SAF-ENTERPRISE", "pointToPoint")
safIntegra, = mibBuilder.importSymbols("SAF-INTEGRA-MIB", "safIntegra")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
iso, Integer32, Counter32, NotificationType, TimeTicks, Counter64, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, IpAddress, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "Counter32", "NotificationType", "TimeTicks", "Counter64", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "IpAddress", "ModuleIdentity", "Bits")
DateAndTime, PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "PhysAddress", "TextualConvention", "DisplayString")
integraE = ModuleIdentity((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9))
integraE.setRevisions(('2020-04-25 00:00', '2020-04-22 00:00', '2020-01-14 00:00', '2019-11-21 00:00', '2019-06-11 00:00', '2019-04-23 00:00', '2019-03-12 00:00', '2019-02-04 00:00', '2018-11-15 00:00', '2018-11-14 00:00',))
if mibBuilder.loadTexts: integraE.setLastUpdated('202004250000Z')
if mibBuilder.loadTexts: integraE.setOrganization('SAF Tehnika')
class FixedDiv20(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-2'

class FixedDiv10(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-1'

integraEtimestamp = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEtimestamp.setStatus('current')
integraEradio = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 2))
integraEradioTxPower = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 2, 1), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraEradioTxPower.setStatus('current')
integraEradioTxFrequency = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 2, 2), Integer32()).setUnits('kHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraEradioTxFrequency.setStatus('current')
integraEradioRxLevel = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 2, 3), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEradioRxLevel.setStatus('current')
integraEradioSide = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("low", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEradioSide.setStatus('current')
integraEradioTxMute = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEradioTxMute.setStatus('current')
integraEradioDuplexShift = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 2, 6), Integer32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEradioDuplexShift.setStatus('current')
integraEradioRxFrequency = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 2, 7), Integer32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEradioRxFrequency.setStatus('current')
integraEradioTemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 2, 8), FixedDiv10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEradioTemperature.setStatus('current')
integraEradioTxMuteDuration = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 214748364))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraEradioTxMuteDuration.setStatus('current')
integraEradioRangesTable = MibTable((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 2, 10), )
if mibBuilder.loadTexts: integraEradioRangesTable.setStatus('current')
integraEradioRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 2, 10, 1), ).setIndexNames((0, "SAF-INTEGRAE-MIB", "integraEradioRangeEntryIndex"))
if mibBuilder.loadTexts: integraEradioRangeEntry.setStatus('current')
integraEradioRangeEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEradioRangeEntryIndex.setStatus('current')
integraEradioRangeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 2, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEradioRangeDescr.setStatus('current')
integraEradioRangeTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 2, 10, 1, 3), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEradioRangeTxPower.setStatus('current')
integraEradioRangeTxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 2, 10, 1, 4), Integer32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEradioRangeTxFrequency.setStatus('current')
integraEradioPLL = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEradioPLL.setStatus('current')
integraEradioRxLevelState = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("low", 2), ("high", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEradioRxLevelState.setStatus('current')
integraEradioAtpcState = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEradioAtpcState.setStatus('current')
integraEradioAtpcUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 214748364))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEradioAtpcUpdatePeriod.setStatus('current')
integraEradioAtpcRxLevelMin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 2, 15), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEradioAtpcRxLevelMin.setStatus('current')
integraEradioAtpcRxLevelMax = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 2, 16), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEradioAtpcRxLevelMax.setStatus('current')
integraEmodem = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3))
integraEmodemAcquireStatus = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("acquireInProgress", 1), ("acquireLocked", 2), ("acquireFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemAcquireStatus.setStatus('current')
integraEmodemNormalizedMse = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 2), FixedDiv10()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemNormalizedMse.setStatus('current')
integraEmodemFECload = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 3), FixedDiv10()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemFECload.setStatus('current')
integraEmodemFEClocked = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemFEClocked.setStatus('current')
integraEmodemAcquireLastStatusDetails = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 12, 13))).clone(namedValues=NamedValues(("acquireLocked", 1), ("acquireSweep", 4), ("acquireMSEerror", 5), ("acquireBITerror", 6), ("acquireStopped", 12), ("acquireSMerror", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemAcquireLastStatusDetails.setStatus('current')
integraEmodemTemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 6), FixedDiv10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemTemperature.setStatus('current')
integraEmodemBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 7), Integer32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemBandwidth.setStatus('current')
integraEmodemModulation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemModulation.setStatus('current')
integraEmodemRxModulation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemRxModulation.setStatus('current')
integraEmodemTxModulation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemTxModulation.setStatus('current')
integraEmodemRxCapacity = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 11), Integer32()).setUnits('kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemRxCapacity.setStatus('current')
integraEmodemTxCapacity = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 12), Integer32()).setUnits('kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemTxCapacity.setStatus('current')
integraEmodemACMBengine = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemACMBengine.setStatus('current')
integraEmodemCarrierOffset = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 14), Integer32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemCarrierOffset.setStatus('current')
integraEmodemCountTime = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 15), Counter64()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemCountTime.setStatus('current')
integraEmodemErroredBlock = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemErroredBlock.setStatus('current')
integraEmodemErroredSecond = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 17), Counter64()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemErroredSecond.setStatus('current')
integraEmodemSeverelyErroredSecond = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 18), Counter64()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemSeverelyErroredSecond.setStatus('current')
integraEmodemBackgroundBlockError = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemBackgroundBlockError.setStatus('current')
integraEmodemTotalBlockNumber = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemTotalBlockNumber.setStatus('current')
integraEmodemErroredSecondRatio = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemErroredSecondRatio.setStatus('current')
integraEmodemSeverelyErroredSecondRatio = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemSeverelyErroredSecondRatio.setStatus('current')
integraEmodemBackgroundBlockErrorRatio = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemBackgroundBlockErrorRatio.setStatus('current')
integraEmodemUptime = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 24), Counter64()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemUptime.setStatus('current')
integraEmodemUnavailtime = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 25), Counter64()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemUnavailtime.setStatus('current')
integraEmodemModulationACMBmin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemModulationACMBmin.setStatus('current')
integraEmodemModulationACMBmax = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 3, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEmodemModulationACMBmax.setStatus('current')
integraEsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4))
integraEsysCPUtemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 2), FixedDiv10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysCPUtemperature.setStatus('current')
integraEsysLicenseExpire = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 3), Gauge32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysLicenseExpire.setStatus('current')
integraEsysLicenseGenStatus = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("expired", 2), ("unknown", 3), ("unlimitedTime", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysLicenseGenStatus.setStatus('current')
integraEsysPSUvoltage = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 5), Integer32()).setUnits('mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysPSUvoltage.setStatus('current')
integraEsysPSUcurrent = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 6), Integer32()).setUnits('mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysPSUcurrent.setStatus('current')
integraEsysPSUpower = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 7), Integer32()).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysPSUpower.setStatus('current')
integraEsysBoardTemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 8), FixedDiv10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysBoardTemperature.setStatus('current')
integraEsysFreeMemory = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 9), FixedDiv10()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysFreeMemory.setStatus('current')
integraEsysCPUidle = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 10), FixedDiv10()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysCPUidle.setStatus('current')
integraEsysDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysDeviceType.setStatus('current')
integraEsysDeviceSerial = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysDeviceSerial.setStatus('current')
integraEsysDeviceProductModel = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysDeviceProductModel.setStatus('current')
integraEsysFanError = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 14), Bits().clone(namedValues=NamedValues(("no", 0), ("fan1", 1), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysFanError.setStatus('current')
integraEsysXADCtemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 15), FixedDiv10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysXADCtemperature.setStatus('current')
integraEsysVCCint = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 16), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysVCCint.setStatus('current')
integraEsysVCCaux = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 17), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysVCCaux.setStatus('current')
integraEsysVCCbram = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 18), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysVCCbram.setStatus('current')
integraEsysVCCpint = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 19), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysVCCpint.setStatus('current')
integraEsysVCCpaux = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 20), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysVCCpaux.setStatus('current')
integraEsysVCCoddr = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 21), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysVCCoddr.setStatus('current')
integraEsysXadc6v0AvddMdmAna = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 22), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysXadc6v0AvddMdmAna.setStatus('current')
integraEsysXadc1v0AvddSwAna = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 23), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysXadc1v0AvddSwAna.setStatus('current')
integraEsysXadc1v0AvddMdmAna = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 24), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysXadc1v0AvddMdmAna.setStatus('current')
integraEsysXadc1v0DvddMdmDig = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 25), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysXadc1v0DvddMdmDig.setStatus('current')
integraEsysXadc1v0CoreMdmDig = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 26), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysXadc1v0CoreMdmDig.setStatus('current')
integraEsysXadc2v5EnvAdcAvddMdmAna = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 27), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysXadc2v5EnvAdcAvddMdmAna.setStatus('current')
integraEsysXadc1v0CoreSwDig = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 28), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysXadc1v0CoreSwDig.setStatus('current')
integraEsysXadc5v0IqAvddMdmAna = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 29), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysXadc5v0IqAvddMdmAna.setStatus('current')
integraEsysXadc2v5WbDacClAvddMdmAna = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 30), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysXadc2v5WbDacClAvddMdmAna.setStatus('current')
integraEsysXadc1v2VccPhyDig = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 31), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysXadc1v2VccPhyDig.setStatus('current')
integraEsysXadc4v6AfeDacAvddMdmAna = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 32), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysXadc4v6AfeDacAvddMdmAna.setStatus('current')
integraEsysXadc2v5WbDacAvddMdmAna = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 33), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysXadc2v5WbDacAvddMdmAna.setStatus('current')
integraEsysXadc2v5VccSysDig = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 34), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysXadc2v5VccSysDig.setStatus('current')
integraEsysXadc3v3VccSysDig = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 35), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysXadc3v3VccSysDig.setStatus('current')
integraEsysXadc1v5Ddr3Sw = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 36), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysXadc1v5Ddr3Sw.setStatus('current')
integraEsysXadc2v5WbAdcAvddMdmAna = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 37), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysXadc2v5WbAdcAvddMdmAna.setStatus('current')
integraEsysXadc2v5WbDacPllAvddMdmAna = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 4, 38), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEsysXadc2v5WbDacPllAvddMdmAna.setStatus('current')
integraEethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5))
integraEifStatusTable = MibTable((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 1), )
if mibBuilder.loadTexts: integraEifStatusTable.setStatus('current')
integraEifPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 1, 1), ).setIndexNames((0, "SAF-INTEGRAE-MIB", "integraEifPortStatIndex"))
if mibBuilder.loadTexts: integraEifPortEntry.setStatus('current')
integraEifPortStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifPortStatIndex.setStatus('current')
integraEifPortStatDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifPortStatDescr.setStatus('current')
integraEifPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 1, 1, 3), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifPortType.setStatus('current')
integraEifPortMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 1, 1, 4), Integer32()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifPortMtu.setStatus('current')
integraEifPortHighSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 1, 1, 5), Gauge32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifPortHighSpeed.setStatus('current')
integraEifPortPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 1, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifPortPhysAddress.setStatus('current')
integraEifPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifPortAdminStatus.setStatus('current')
integraEifPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifPortOperStatus.setStatus('current')
integraEifPortLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifPortLastChange.setStatus('current')
integraEifPortAutoneg = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifPortAutoneg.setStatus('current')
integraEifPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifPortDuplex.setStatus('current')
integraEifPortSyncEthActive = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifPortSyncEthActive.setStatus('current')
integraEifPortSyncEthPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifPortSyncEthPrio.setStatus('current')
integraEifPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifPortFlowControl.setStatus('current')
integraEifStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2), )
if mibBuilder.loadTexts: integraEifStatisticsTable.setStatus('current')
integraEifPortStcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1), ).setIndexNames((0, "SAF-INTEGRAE-MIB", "integraEifPortStcIndex"))
if mibBuilder.loadTexts: integraEifPortStcEntry.setStatus('current')
integraEifPortStcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifPortStcIndex.setStatus('current')
integraEifPortStcDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifPortStcDescr.setStatus('current')
integraEifTimePassed = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 3), TimeTicks()).setUnits('s/100').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifTimePassed.setStatus('current')
integraEifIngressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 4), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifIngressPackets.setStatus('current')
integraEifIngressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 5), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifIngressBytes.setStatus('current')
integraEifEgressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 6), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEgressPackets.setStatus('current')
integraEifEgressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 7), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEgressBytes.setStatus('current')
integraEifEtherStatsMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 8), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEtherStatsMulticastPkts.setStatus('current')
integraEifEtherStatsBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 9), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEtherStatsBroadcastPkts.setStatus('current')
integraEifEtherStatsPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 10), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEtherStatsPkts64Octets.setStatus('current')
integraEifEtherStatsPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 11), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEtherStatsPkts65to127Octets.setStatus('current')
integraEifEtherStatsPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 12), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEtherStatsPkts128to255Octets.setStatus('current')
integraEifEtherStatsPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 13), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEtherStatsPkts256to511Octets.setStatus('current')
integraEifEtherStatsPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 14), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEtherStatsPkts512to1023Octets.setStatus('current')
integraEifEtherStatsPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 15), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEtherStatsPkts1024to1518Octets.setStatus('current')
integraEifEtherStatsOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 16), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEtherStatsOversizePkts.setStatus('current')
integraEifEtherRxOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 17), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEtherRxOversizePkts.setStatus('current')
integraEifEtherTxOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 18), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEtherTxOversizePkts.setStatus('current')
integraEifEtherStatsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 19), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEtherStatsOctets.setStatus('current')
integraEifEtherStatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 20), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEtherStatsPkts.setStatus('current')
integraEifEtherStatsTXNoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 21), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEtherStatsTXNoErrors.setStatus('current')
integraEifEtherStatsRXNoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 22), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEtherStatsRXNoErrors.setStatus('current')
integraEifEtherStatsPkts1519to1522Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 23), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEtherStatsPkts1519to1522Octets.setStatus('current')
integraEifIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 24), Counter64()).setUnits('octet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifIfInOctets.setStatus('current')
integraEifIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 25), Counter64()).setUnits('octet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifIfOutOctets.setStatus('current')
integraEifDot1dTpPortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 26), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifDot1dTpPortInFrames.setStatus('current')
integraEifDot1dTpPortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 27), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifDot1dTpPortOutFrames.setStatus('current')
integraEifReceivedPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 28), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifReceivedPkts64Octets.setStatus('current')
integraEifTransmittedPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 29), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifTransmittedPkts64Octets.setStatus('current')
integraEifReceivedPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 30), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifReceivedPkts65to127Octets.setStatus('current')
integraEifTransmittedPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 31), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifTransmittedPkts65to127Octets.setStatus('current')
integraEifReceivedPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 32), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifReceivedPkts128to255Octets.setStatus('current')
integraEifTransmittedPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 33), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifTransmittedPkts128to255Octets.setStatus('current')
integraEifReceivedPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 34), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifReceivedPkts256to511Octets.setStatus('current')
integraEifTransmittedPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 35), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifTransmittedPkts256to511Octets.setStatus('current')
integraEifReceivedPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 36), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifReceivedPkts512to1023Octets.setStatus('current')
integraEifTransmittedPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 37), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifTransmittedPkts512to1023Octets.setStatus('current')
integraEifReceivedPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 38), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifReceivedPkts1024to1518Octets.setStatus('current')
integraEifTransmittedPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 39), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifTransmittedPkts1024to1518Octets.setStatus('current')
integraEifIfInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 40), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifIfInBroadcastPkts.setStatus('current')
integraEifIfOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 41), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifIfOutBroadcastPkts.setStatus('current')
integraEifIfInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 42), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifIfInMulticastPkts.setStatus('current')
integraEifIfOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 43), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifIfOutMulticastPkts.setStatus('current')
integraEifDot3InPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 44), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifDot3InPauseFrames.setStatus('current')
integraEifDot3OutPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 45), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifDot3OutPauseFrames.setStatus('current')
integraEifEtherStatsUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 46), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEtherStatsUndersizePkts.setStatus('current')
integraEifEtherStatsFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 47), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEtherStatsFragments.setStatus('current')
integraEifEtherStatsCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 48), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEtherStatsCRCAlignErrors.setStatus('current')
integraEifEtherStatsJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 49), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEtherStatsJabbers.setStatus('current')
integraEifIngressBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 50), Integer32()).setUnits('Bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifIngressBPS.setStatus('current')
integraEifIngressPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 51), Integer32()).setUnits('pps').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifIngressPPS.setStatus('current')
integraEifEgressBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 52), Integer32()).setUnits('Bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEgressBPS.setStatus('current')
integraEifEgressPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 53), Integer32()).setUnits('pps').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifEgressPPS.setStatus('current')
integraEifAllCoSQoutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 54), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifAllCoSQoutPackets.setStatus('current')
integraEifAllCoSQoutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 55), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifAllCoSQoutBytes.setStatus('current')
integraEifAllCoSQdroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 56), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifAllCoSQdroppedPackets.setStatus('current')
integraEifAllCoSQdroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 57), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifAllCoSQdroppedBytes.setStatus('current')
integraEifProcessedRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 58), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifProcessedRxPackets.setStatus('current')
integraEifProcessedRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 2, 1, 59), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifProcessedRxBytes.setStatus('current')
integraEifLspPortAdminState = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("lsp", 2), ("backup", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifLspPortAdminState.setStatus('current')
integraEifLspPortList = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 4), Bits().clone(namedValues=NamedValues(("none", 0), ("lan1", 1), ("lan2", 2), ("lan3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifLspPortList.setStatus('current')
integraEifLspPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lspPortOK", 1), ("lspPortDownBlockedByLSP", 2), ("backupNoLink", 3), ("backupLinkActive", 4), ("backupLinkReady", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEifLspPortStatus.setStatus('current')
integraEexecuteConfig = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraEexecuteConfig.setStatus('current')
integraEneedStore = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEneedStore.setStatus('current')
integraEstoreConfig = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("store", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraEstoreConfig.setStatus('current')
integraEnetCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 9))
integraEnetCfgIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 9, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraEnetCfgIPaddress.setStatus('current')
integraEnetCfgIPmask = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 9, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraEnetCfgIPmask.setStatus('current')
integraEnetCfgIPgateway = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 9, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraEnetCfgIPgateway.setStatus('current')
integraEnetCfgRemoteIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 9, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraEnetCfgRemoteIPaddress.setStatus('current')
integraEConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 10))
integraECompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 10, 1))
integraECompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 10, 1, 1)).setObjects(("SAF-INTEGRAE-MIB", "integraEMiscGroup"), ("SAF-INTEGRAE-MIB", "integraERadioGroup"), ("SAF-INTEGRAE-MIB", "integraEModemGroup"), ("SAF-INTEGRAE-MIB", "integraESystemGroup"), ("SAF-INTEGRAE-MIB", "integraEEthernetGeneralGroup"), ("SAF-INTEGRAE-MIB", "integraEEthernetMiiPortGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraECompliance = integraECompliance.setStatus('current')
integraEGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 10, 2))
integraEMiscGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 10, 2, 1)).setObjects(("SAF-INTEGRAE-MIB", "integraEtimestamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraEMiscGroup = integraEMiscGroup.setStatus('current')
integraERadioGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 10, 2, 2)).setObjects(("SAF-INTEGRAE-MIB", "integraEradioTxPower"), ("SAF-INTEGRAE-MIB", "integraEradioTxFrequency"), ("SAF-INTEGRAE-MIB", "integraEradioRxLevel"), ("SAF-INTEGRAE-MIB", "integraEradioSide"), ("SAF-INTEGRAE-MIB", "integraEradioTxMute"), ("SAF-INTEGRAE-MIB", "integraEradioDuplexShift"), ("SAF-INTEGRAE-MIB", "integraEradioRxFrequency"), ("SAF-INTEGRAE-MIB", "integraEradioTemperature"), ("SAF-INTEGRAE-MIB", "integraEradioTxMuteDuration"), ("SAF-INTEGRAE-MIB", "integraEradioRangeEntryIndex"), ("SAF-INTEGRAE-MIB", "integraEradioRangeDescr"), ("SAF-INTEGRAE-MIB", "integraEradioRangeTxPower"), ("SAF-INTEGRAE-MIB", "integraEradioRangeTxFrequency"), ("SAF-INTEGRAE-MIB", "integraEradioPLL"), ("SAF-INTEGRAE-MIB", "integraEradioRxLevelState"), ("SAF-INTEGRAE-MIB", "integraEradioAtpcState"), ("SAF-INTEGRAE-MIB", "integraEradioAtpcUpdatePeriod"), ("SAF-INTEGRAE-MIB", "integraEradioAtpcRxLevelMin"), ("SAF-INTEGRAE-MIB", "integraEradioAtpcRxLevelMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraERadioGroup = integraERadioGroup.setStatus('current')
integraEModemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 10, 2, 3)).setObjects(("SAF-INTEGRAE-MIB", "integraEmodemAcquireStatus"), ("SAF-INTEGRAE-MIB", "integraEmodemNormalizedMse"), ("SAF-INTEGRAE-MIB", "integraEmodemFECload"), ("SAF-INTEGRAE-MIB", "integraEmodemFEClocked"), ("SAF-INTEGRAE-MIB", "integraEmodemAcquireLastStatusDetails"), ("SAF-INTEGRAE-MIB", "integraEmodemTemperature"), ("SAF-INTEGRAE-MIB", "integraEmodemBandwidth"), ("SAF-INTEGRAE-MIB", "integraEmodemModulation"), ("SAF-INTEGRAE-MIB", "integraEmodemRxModulation"), ("SAF-INTEGRAE-MIB", "integraEmodemTxModulation"), ("SAF-INTEGRAE-MIB", "integraEmodemRxCapacity"), ("SAF-INTEGRAE-MIB", "integraEmodemTxCapacity"), ("SAF-INTEGRAE-MIB", "integraEmodemACMBengine"), ("SAF-INTEGRAE-MIB", "integraEmodemCarrierOffset"), ("SAF-INTEGRAE-MIB", "integraEmodemCountTime"), ("SAF-INTEGRAE-MIB", "integraEmodemErroredBlock"), ("SAF-INTEGRAE-MIB", "integraEmodemErroredSecond"), ("SAF-INTEGRAE-MIB", "integraEmodemSeverelyErroredSecond"), ("SAF-INTEGRAE-MIB", "integraEmodemBackgroundBlockError"), ("SAF-INTEGRAE-MIB", "integraEmodemTotalBlockNumber"), ("SAF-INTEGRAE-MIB", "integraEmodemErroredSecondRatio"), ("SAF-INTEGRAE-MIB", "integraEmodemSeverelyErroredSecondRatio"), ("SAF-INTEGRAE-MIB", "integraEmodemBackgroundBlockErrorRatio"), ("SAF-INTEGRAE-MIB", "integraEmodemUptime"), ("SAF-INTEGRAE-MIB", "integraEmodemUnavailtime"), ("SAF-INTEGRAE-MIB", "integraEmodemModulationACMBmin"), ("SAF-INTEGRAE-MIB", "integraEmodemModulationACMBmax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraEModemGroup = integraEModemGroup.setStatus('current')
integraESystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 10, 2, 4)).setObjects(("SAF-INTEGRAE-MIB", "integraEsysCPUtemperature"), ("SAF-INTEGRAE-MIB", "integraEsysLicenseExpire"), ("SAF-INTEGRAE-MIB", "integraEsysLicenseGenStatus"), ("SAF-INTEGRAE-MIB", "integraEsysPSUvoltage"), ("SAF-INTEGRAE-MIB", "integraEsysPSUcurrent"), ("SAF-INTEGRAE-MIB", "integraEsysPSUpower"), ("SAF-INTEGRAE-MIB", "integraEsysBoardTemperature"), ("SAF-INTEGRAE-MIB", "integraEsysFreeMemory"), ("SAF-INTEGRAE-MIB", "integraEsysCPUidle"), ("SAF-INTEGRAE-MIB", "integraEsysDeviceType"), ("SAF-INTEGRAE-MIB", "integraEsysDeviceSerial"), ("SAF-INTEGRAE-MIB", "integraEsysDeviceProductModel"), ("SAF-INTEGRAE-MIB", "integraEsysFanError"), ("SAF-INTEGRAE-MIB", "integraEexecuteConfig"), ("SAF-INTEGRAE-MIB", "integraEneedStore"), ("SAF-INTEGRAE-MIB", "integraEstoreConfig"), ("SAF-INTEGRAE-MIB", "integraEsysXADCtemperature"), ("SAF-INTEGRAE-MIB", "integraEsysVCCint"), ("SAF-INTEGRAE-MIB", "integraEsysVCCaux"), ("SAF-INTEGRAE-MIB", "integraEsysVCCbram"), ("SAF-INTEGRAE-MIB", "integraEsysVCCpint"), ("SAF-INTEGRAE-MIB", "integraEsysVCCpaux"), ("SAF-INTEGRAE-MIB", "integraEsysVCCoddr"), ("SAF-INTEGRAE-MIB", "integraEsysXadc6v0AvddMdmAna"), ("SAF-INTEGRAE-MIB", "integraEsysXadc1v0AvddSwAna"), ("SAF-INTEGRAE-MIB", "integraEsysXadc1v0AvddMdmAna"), ("SAF-INTEGRAE-MIB", "integraEsysXadc1v0DvddMdmDig"), ("SAF-INTEGRAE-MIB", "integraEsysXadc1v0CoreMdmDig"), ("SAF-INTEGRAE-MIB", "integraEsysXadc2v5EnvAdcAvddMdmAna"), ("SAF-INTEGRAE-MIB", "integraEsysXadc1v0CoreSwDig"), ("SAF-INTEGRAE-MIB", "integraEsysXadc5v0IqAvddMdmAna"), ("SAF-INTEGRAE-MIB", "integraEsysXadc2v5WbDacClAvddMdmAna"), ("SAF-INTEGRAE-MIB", "integraEsysXadc1v2VccPhyDig"), ("SAF-INTEGRAE-MIB", "integraEsysXadc4v6AfeDacAvddMdmAna"), ("SAF-INTEGRAE-MIB", "integraEsysXadc2v5WbDacAvddMdmAna"), ("SAF-INTEGRAE-MIB", "integraEsysXadc2v5VccSysDig"), ("SAF-INTEGRAE-MIB", "integraEsysXadc3v3VccSysDig"), ("SAF-INTEGRAE-MIB", "integraEsysXadc1v5Ddr3Sw"), ("SAF-INTEGRAE-MIB", "integraEsysXadc2v5WbAdcAvddMdmAna"), ("SAF-INTEGRAE-MIB", "integraEsysXadc2v5WbDacPllAvddMdmAna"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraESystemGroup = integraESystemGroup.setStatus('current')
integraEEthernetGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 10, 2, 5)).setObjects(("SAF-INTEGRAE-MIB", "integraEifPortStatIndex"), ("SAF-INTEGRAE-MIB", "integraEifPortStatDescr"), ("SAF-INTEGRAE-MIB", "integraEifPortType"), ("SAF-INTEGRAE-MIB", "integraEifPortMtu"), ("SAF-INTEGRAE-MIB", "integraEifPortHighSpeed"), ("SAF-INTEGRAE-MIB", "integraEifPortPhysAddress"), ("SAF-INTEGRAE-MIB", "integraEifPortAdminStatus"), ("SAF-INTEGRAE-MIB", "integraEifPortOperStatus"), ("SAF-INTEGRAE-MIB", "integraEifPortLastChange"), ("SAF-INTEGRAE-MIB", "integraEifPortAutoneg"), ("SAF-INTEGRAE-MIB", "integraEifPortDuplex"), ("SAF-INTEGRAE-MIB", "integraEifPortSyncEthActive"), ("SAF-INTEGRAE-MIB", "integraEifPortSyncEthPrio"), ("SAF-INTEGRAE-MIB", "integraEifPortFlowControl"), ("SAF-INTEGRAE-MIB", "integraEifPortStcIndex"), ("SAF-INTEGRAE-MIB", "integraEifPortStcDescr"), ("SAF-INTEGRAE-MIB", "integraEifTimePassed"), ("SAF-INTEGRAE-MIB", "integraEifIngressPackets"), ("SAF-INTEGRAE-MIB", "integraEifIngressBytes"), ("SAF-INTEGRAE-MIB", "integraEifEgressPackets"), ("SAF-INTEGRAE-MIB", "integraEifEgressBytes"), ("SAF-INTEGRAE-MIB", "integraEifEtherRxOversizePkts"), ("SAF-INTEGRAE-MIB", "integraEifEtherTxOversizePkts"), ("SAF-INTEGRAE-MIB", "integraEifReceivedPkts64Octets"), ("SAF-INTEGRAE-MIB", "integraEifTransmittedPkts64Octets"), ("SAF-INTEGRAE-MIB", "integraEifReceivedPkts65to127Octets"), ("SAF-INTEGRAE-MIB", "integraEifTransmittedPkts65to127Octets"), ("SAF-INTEGRAE-MIB", "integraEifReceivedPkts128to255Octets"), ("SAF-INTEGRAE-MIB", "integraEifTransmittedPkts128to255Octets"), ("SAF-INTEGRAE-MIB", "integraEifReceivedPkts256to511Octets"), ("SAF-INTEGRAE-MIB", "integraEifTransmittedPkts256to511Octets"), ("SAF-INTEGRAE-MIB", "integraEifReceivedPkts512to1023Octets"), ("SAF-INTEGRAE-MIB", "integraEifTransmittedPkts512to1023Octets"), ("SAF-INTEGRAE-MIB", "integraEifReceivedPkts1024to1518Octets"), ("SAF-INTEGRAE-MIB", "integraEifTransmittedPkts1024to1518Octets"), ("SAF-INTEGRAE-MIB", "integraEifIfInBroadcastPkts"), ("SAF-INTEGRAE-MIB", "integraEifIfOutBroadcastPkts"), ("SAF-INTEGRAE-MIB", "integraEifIfInMulticastPkts"), ("SAF-INTEGRAE-MIB", "integraEifIfOutMulticastPkts"), ("SAF-INTEGRAE-MIB", "integraEifIngressBPS"), ("SAF-INTEGRAE-MIB", "integraEifIngressPPS"), ("SAF-INTEGRAE-MIB", "integraEifEgressBPS"), ("SAF-INTEGRAE-MIB", "integraEifEgressPPS"), ("SAF-INTEGRAE-MIB", "integraEifAllCoSQoutPackets"), ("SAF-INTEGRAE-MIB", "integraEifAllCoSQoutBytes"), ("SAF-INTEGRAE-MIB", "integraEifAllCoSQdroppedPackets"), ("SAF-INTEGRAE-MIB", "integraEifAllCoSQdroppedBytes"), ("SAF-INTEGRAE-MIB", "integraEifProcessedRxPackets"), ("SAF-INTEGRAE-MIB", "integraEifProcessedRxBytes"), ("SAF-INTEGRAE-MIB", "integraEnetCfgIPaddress"), ("SAF-INTEGRAE-MIB", "integraEnetCfgIPmask"), ("SAF-INTEGRAE-MIB", "integraEnetCfgIPgateway"), ("SAF-INTEGRAE-MIB", "integraEnetCfgRemoteIPaddress"), ("SAF-INTEGRAE-MIB", "integraEifLspPortAdminState"), ("SAF-INTEGRAE-MIB", "integraEifLspPortList"), ("SAF-INTEGRAE-MIB", "integraEifLspPortStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraEEthernetGeneralGroup = integraEEthernetGeneralGroup.setStatus('current')
integraEEthernetMiiPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 9, 10, 2, 6)).setObjects(("SAF-INTEGRAE-MIB", "integraEifEtherStatsMulticastPkts"), ("SAF-INTEGRAE-MIB", "integraEifEtherStatsBroadcastPkts"), ("SAF-INTEGRAE-MIB", "integraEifEtherStatsPkts64Octets"), ("SAF-INTEGRAE-MIB", "integraEifEtherStatsPkts65to127Octets"), ("SAF-INTEGRAE-MIB", "integraEifEtherStatsPkts128to255Octets"), ("SAF-INTEGRAE-MIB", "integraEifEtherStatsPkts256to511Octets"), ("SAF-INTEGRAE-MIB", "integraEifEtherStatsPkts512to1023Octets"), ("SAF-INTEGRAE-MIB", "integraEifEtherStatsPkts1024to1518Octets"), ("SAF-INTEGRAE-MIB", "integraEifEtherStatsOversizePkts"), ("SAF-INTEGRAE-MIB", "integraEifEtherStatsOctets"), ("SAF-INTEGRAE-MIB", "integraEifEtherStatsPkts"), ("SAF-INTEGRAE-MIB", "integraEifEtherStatsTXNoErrors"), ("SAF-INTEGRAE-MIB", "integraEifEtherStatsRXNoErrors"), ("SAF-INTEGRAE-MIB", "integraEifEtherStatsPkts1519to1522Octets"), ("SAF-INTEGRAE-MIB", "integraEifIfInOctets"), ("SAF-INTEGRAE-MIB", "integraEifIfOutOctets"), ("SAF-INTEGRAE-MIB", "integraEifDot1dTpPortInFrames"), ("SAF-INTEGRAE-MIB", "integraEifDot1dTpPortOutFrames"), ("SAF-INTEGRAE-MIB", "integraEifDot3InPauseFrames"), ("SAF-INTEGRAE-MIB", "integraEifDot3OutPauseFrames"), ("SAF-INTEGRAE-MIB", "integraEifEtherStatsUndersizePkts"), ("SAF-INTEGRAE-MIB", "integraEifEtherStatsFragments"), ("SAF-INTEGRAE-MIB", "integraEifEtherStatsCRCAlignErrors"), ("SAF-INTEGRAE-MIB", "integraEifEtherStatsJabbers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraEEthernetMiiPortGroup = integraEEthernetMiiPortGroup.setStatus('current')
mibBuilder.exportSymbols("SAF-INTEGRAE-MIB", integraEradioTemperature=integraEradioTemperature, FixedDiv10=FixedDiv10, integraEsysXadc2v5EnvAdcAvddMdmAna=integraEsysXadc2v5EnvAdcAvddMdmAna, integraEifReceivedPkts128to255Octets=integraEifReceivedPkts128to255Octets, integraEifEgressPackets=integraEifEgressPackets, integraEsysXADCtemperature=integraEsysXADCtemperature, integraEmodemModulationACMBmax=integraEmodemModulationACMBmax, integraEsysXadc2v5VccSysDig=integraEsysXadc2v5VccSysDig, integraEradioAtpcRxLevelMin=integraEradioAtpcRxLevelMin, integraEifEtherStatsUndersizePkts=integraEifEtherStatsUndersizePkts, integraEifEtherStatsRXNoErrors=integraEifEtherStatsRXNoErrors, integraEifEtherStatsBroadcastPkts=integraEifEtherStatsBroadcastPkts, integraEmodemBackgroundBlockError=integraEmodemBackgroundBlockError, integraEifPortStcDescr=integraEifPortStcDescr, integraEmodem=integraEmodem, integraEifPortStcEntry=integraEifPortStcEntry, integraEifAllCoSQdroppedPackets=integraEifAllCoSQdroppedPackets, integraEradio=integraEradio, integraEifIfInBroadcastPkts=integraEifIfInBroadcastPkts, integraEmodemFEClocked=integraEmodemFEClocked, integraEsysPSUpower=integraEsysPSUpower, FixedDiv20=FixedDiv20, integraEmodemNormalizedMse=integraEmodemNormalizedMse, integraEConformance=integraEConformance, integraEModemGroup=integraEModemGroup, integraEifPortStatIndex=integraEifPortStatIndex, integraEifIfInOctets=integraEifIfInOctets, integraEifIfInMulticastPkts=integraEifIfInMulticastPkts, integraEifReceivedPkts512to1023Octets=integraEifReceivedPkts512to1023Octets, integraEsysLicenseExpire=integraEsysLicenseExpire, integraEifPortEntry=integraEifPortEntry, integraEifEtherStatsPkts64Octets=integraEifEtherStatsPkts64Octets, integraEifIfOutBroadcastPkts=integraEifIfOutBroadcastPkts, integraEifDot3OutPauseFrames=integraEifDot3OutPauseFrames, integraEradioRxLevelState=integraEradioRxLevelState, integraEifIfOutMulticastPkts=integraEifIfOutMulticastPkts, integraEmodemBandwidth=integraEmodemBandwidth, integraEifAllCoSQoutPackets=integraEifAllCoSQoutPackets, integraEsysFanError=integraEsysFanError, integraEifTransmittedPkts65to127Octets=integraEifTransmittedPkts65to127Octets, integraEifTransmittedPkts512to1023Octets=integraEifTransmittedPkts512to1023Octets, integraEmodemSeverelyErroredSecondRatio=integraEmodemSeverelyErroredSecondRatio, integraESystemGroup=integraESystemGroup, integraEsysXadc6v0AvddMdmAna=integraEsysXadc6v0AvddMdmAna, integraEradioAtpcState=integraEradioAtpcState, integraEifPortType=integraEifPortType, integraEradioAtpcUpdatePeriod=integraEradioAtpcUpdatePeriod, integraEifEtherStatsPkts1519to1522Octets=integraEifEtherStatsPkts1519to1522Octets, integraEifReceivedPkts64Octets=integraEifReceivedPkts64Octets, integraEsysXadc2v5WbDacClAvddMdmAna=integraEsysXadc2v5WbDacClAvddMdmAna, integraEMiscGroup=integraEMiscGroup, integraEsysXadc5v0IqAvddMdmAna=integraEsysXadc5v0IqAvddMdmAna, integraEmodemUnavailtime=integraEmodemUnavailtime, integraEnetCfgIPaddress=integraEnetCfgIPaddress, integraEifEgressBPS=integraEifEgressBPS, PYSNMP_MODULE_ID=integraE, integraEifPortStatDescr=integraEifPortStatDescr, integraEGroups=integraEGroups, integraEmodemRxModulation=integraEmodemRxModulation, integraEifIfOutOctets=integraEifIfOutOctets, integraEmodemFECload=integraEmodemFECload, integraEsysBoardTemperature=integraEsysBoardTemperature, integraEifEtherStatsTXNoErrors=integraEifEtherStatsTXNoErrors, integraEifReceivedPkts65to127Octets=integraEifReceivedPkts65to127Octets, integraEnetCfgRemoteIPaddress=integraEnetCfgRemoteIPaddress, integraEsysXadc1v5Ddr3Sw=integraEsysXadc1v5Ddr3Sw, integraEifDot1dTpPortOutFrames=integraEifDot1dTpPortOutFrames, integraEmodemCountTime=integraEmodemCountTime, integraEradioPLL=integraEradioPLL, integraEifProcessedRxBytes=integraEifProcessedRxBytes, integraEifEtherStatsMulticastPkts=integraEifEtherStatsMulticastPkts, integraEEthernetMiiPortGroup=integraEEthernetMiiPortGroup, integraEifProcessedRxPackets=integraEifProcessedRxPackets, integraEifEtherStatsOversizePkts=integraEifEtherStatsOversizePkts, integraEradioRangeTxFrequency=integraEradioRangeTxFrequency, integraEmodemErroredBlock=integraEmodemErroredBlock, integraEifEtherTxOversizePkts=integraEifEtherTxOversizePkts, integraEmodemTxModulation=integraEmodemTxModulation, integraEifEtherStatsOctets=integraEifEtherStatsOctets, integraEifPortSyncEthActive=integraEifPortSyncEthActive, integraEsysVCCint=integraEsysVCCint, integraEsysVCCpaux=integraEsysVCCpaux, integraEnetCfgIPmask=integraEnetCfgIPmask, integraEsysPSUvoltage=integraEsysPSUvoltage, integraEsysCPUidle=integraEsysCPUidle, integraEmodemCarrierOffset=integraEmodemCarrierOffset, integraEsysXadc1v0CoreMdmDig=integraEsysXadc1v0CoreMdmDig, integraEifEtherStatsJabbers=integraEifEtherStatsJabbers, integraEradioRangeTxPower=integraEradioRangeTxPower, integraEifPortStcIndex=integraEifPortStcIndex, integraEradioRangeEntry=integraEradioRangeEntry, integraEradioRangeDescr=integraEradioRangeDescr, integraEsysCPUtemperature=integraEsysCPUtemperature, integraEsysXadc2v5WbAdcAvddMdmAna=integraEsysXadc2v5WbAdcAvddMdmAna, integraEifDot3InPauseFrames=integraEifDot3InPauseFrames, integraEifTransmittedPkts1024to1518Octets=integraEifTransmittedPkts1024to1518Octets, integraEifEgressPPS=integraEifEgressPPS, integraEmodemRxCapacity=integraEmodemRxCapacity, integraEstoreConfig=integraEstoreConfig, integraEifEtherStatsPkts=integraEifEtherStatsPkts, integraEifIngressBPS=integraEifIngressBPS, integraEmodemACMBengine=integraEmodemACMBengine, integraEifPortPhysAddress=integraEifPortPhysAddress, integraEsysXadc1v2VccPhyDig=integraEsysXadc1v2VccPhyDig, integraEifPortAutoneg=integraEifPortAutoneg, integraEmodemErroredSecond=integraEmodemErroredSecond, integraEradioRangeEntryIndex=integraEradioRangeEntryIndex, integraEifPortFlowControl=integraEifPortFlowControl, integraEifTimePassed=integraEifTimePassed, integraEexecuteConfig=integraEexecuteConfig, integraEmodemTotalBlockNumber=integraEmodemTotalBlockNumber, integraEifPortLastChange=integraEifPortLastChange, integraEifEtherStatsPkts512to1023Octets=integraEifEtherStatsPkts512to1023Octets, integraEifIngressPackets=integraEifIngressPackets, integraEifAllCoSQdroppedBytes=integraEifAllCoSQdroppedBytes, integraE=integraE, integraEmodemErroredSecondRatio=integraEmodemErroredSecondRatio, integraEmodemAcquireLastStatusDetails=integraEmodemAcquireLastStatusDetails, integraEifPortDuplex=integraEifPortDuplex, integraEsysVCCaux=integraEsysVCCaux, integraEradioRxLevel=integraEradioRxLevel, integraEifEtherStatsFragments=integraEifEtherStatsFragments, integraEifEtherStatsPkts65to127Octets=integraEifEtherStatsPkts65to127Octets, integraEsysXadc4v6AfeDacAvddMdmAna=integraEsysXadc4v6AfeDacAvddMdmAna, integraEifEtherStatsCRCAlignErrors=integraEifEtherStatsCRCAlignErrors, integraEsysDeviceProductModel=integraEsysDeviceProductModel, integraEifPortOperStatus=integraEifPortOperStatus, integraEifReceivedPkts256to511Octets=integraEifReceivedPkts256to511Octets, integraEmodemTemperature=integraEmodemTemperature, integraEEthernetGeneralGroup=integraEEthernetGeneralGroup, integraEmodemTxCapacity=integraEmodemTxCapacity, integraEsysXadc2v5WbDacAvddMdmAna=integraEsysXadc2v5WbDacAvddMdmAna, integraEifPortHighSpeed=integraEifPortHighSpeed, integraEifPortSyncEthPrio=integraEifPortSyncEthPrio, integraEifReceivedPkts1024to1518Octets=integraEifReceivedPkts1024to1518Octets, integraEradioTxPower=integraEradioTxPower, integraEsysPSUcurrent=integraEsysPSUcurrent, integraEifLspPortAdminState=integraEifLspPortAdminState, integraERadioGroup=integraERadioGroup, integraEifDot1dTpPortInFrames=integraEifDot1dTpPortInFrames, integraEnetCfgIPgateway=integraEnetCfgIPgateway, integraEsysXadc1v0AvddMdmAna=integraEsysXadc1v0AvddMdmAna, integraEnetCfg=integraEnetCfg, integraEifEtherStatsPkts128to255Octets=integraEifEtherStatsPkts128to255Octets, integraEradioSide=integraEradioSide, integraEmodemModulation=integraEmodemModulation, integraEsysFreeMemory=integraEsysFreeMemory, integraEifStatusTable=integraEifStatusTable, integraEradioTxMute=integraEradioTxMute, integraEifTransmittedPkts128to255Octets=integraEifTransmittedPkts128to255Octets, integraEifLspPortStatus=integraEifLspPortStatus, integraEradioTxMuteDuration=integraEradioTxMuteDuration, integraEtimestamp=integraEtimestamp, integraEifTransmittedPkts64Octets=integraEifTransmittedPkts64Octets, integraEradioRxFrequency=integraEradioRxFrequency, integraEsysXadc1v0DvddMdmDig=integraEsysXadc1v0DvddMdmDig, integraECompliance=integraECompliance, integraEmodemModulationACMBmin=integraEmodemModulationACMBmin, integraEsysXadc3v3VccSysDig=integraEsysXadc3v3VccSysDig, integraEifLspPortList=integraEifLspPortList, integraEifIngressBytes=integraEifIngressBytes, integraEsysDeviceType=integraEsysDeviceType, integraEsysVCCbram=integraEsysVCCbram, integraEradioRangesTable=integraEradioRangesTable, integraEifTransmittedPkts256to511Octets=integraEifTransmittedPkts256to511Octets, integraEmodemAcquireStatus=integraEmodemAcquireStatus, integraEsysLicenseGenStatus=integraEsysLicenseGenStatus, integraEradioTxFrequency=integraEradioTxFrequency, integraEifEtherStatsPkts256to511Octets=integraEifEtherStatsPkts256to511Octets, integraEsysXadc1v0AvddSwAna=integraEsysXadc1v0AvddSwAna, integraEifEtherRxOversizePkts=integraEifEtherRxOversizePkts, integraEsysDeviceSerial=integraEsysDeviceSerial, integraEifEtherStatsPkts1024to1518Octets=integraEifEtherStatsPkts1024to1518Octets, integraEifEgressBytes=integraEifEgressBytes, integraEifAllCoSQoutBytes=integraEifAllCoSQoutBytes, integraEifPortMtu=integraEifPortMtu, integraEifPortAdminStatus=integraEifPortAdminStatus, integraEradioDuplexShift=integraEradioDuplexShift, integraEsystem=integraEsystem, integraEsysVCCoddr=integraEsysVCCoddr, integraEmodemBackgroundBlockErrorRatio=integraEmodemBackgroundBlockErrorRatio, integraEsysXadc1v0CoreSwDig=integraEsysXadc1v0CoreSwDig, integraECompliances=integraECompliances, integraEifIngressPPS=integraEifIngressPPS, integraEsysXadc2v5WbDacPllAvddMdmAna=integraEsysXadc2v5WbDacPllAvddMdmAna, integraEradioAtpcRxLevelMax=integraEradioAtpcRxLevelMax, integraEifStatisticsTable=integraEifStatisticsTable, integraEethernet=integraEethernet, integraEmodemUptime=integraEmodemUptime, integraEmodemSeverelyErroredSecond=integraEmodemSeverelyErroredSecond, integraEneedStore=integraEneedStore, integraEsysVCCpint=integraEsysVCCpint)
