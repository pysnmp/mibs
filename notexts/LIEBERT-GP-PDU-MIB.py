#
# PySNMP MIB module LIEBERT-GP-PDU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/liebert/LIEBERT-GP-PDU-MIB
# Produced by pysmi-1.1.12 at Wed May 29 10:57:43 2024
# On host fv-az1206-254 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
liebertPduModuleReg, lgpPdu = mibBuilder.importSymbols("LIEBERT-GP-REGISTRATION-MIB", "liebertPduModuleReg", "lgpPdu")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Counter32, Gauge32, NotificationType, MibIdentifier, iso, Counter64, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "Gauge32", "NotificationType", "MibIdentifier", "iso", "Counter64", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "Unsigned32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
liebertGlobalProductsPduModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 1, 9, 1))
liebertGlobalProductsPduModule.setRevisions(('2008-07-02 00:00',))
if mibBuilder.loadTexts: liebertGlobalProductsPduModule.setLastUpdated('200807020000Z')
if mibBuilder.loadTexts: liebertGlobalProductsPduModule.setOrganization('Liebert Corporation')
lgpPduGlobalData = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 5))
if mibBuilder.loadTexts: lgpPduGlobalData.setStatus('current')
lgpPduEntrySWOverTemperatureProtectionConfig = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("local", 0), ("array", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduEntrySWOverTemperatureProtectionConfig.setStatus('current')
lgpPduEntrySWOverTemperatureProtectionDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 5, 10), Unsigned32()).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduEntrySWOverTemperatureProtectionDelay.setStatus('current')
lgpPduCluster = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 10))
if mibBuilder.loadTexts: lgpPduCluster.setStatus('current')
lgpPduGrpSysStatus = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 10, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduGrpSysStatus.setStatus('current')
lgpPduTableCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 19), Unsigned32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduTableCount.setStatus('current')
lgpPduTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20), )
if mibBuilder.loadTexts: lgpPduTable.setStatus('current')
lgpPduEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1), ).setIndexNames((0, "LIEBERT-GP-PDU-MIB", "lgpPduEntryIndex"))
if mibBuilder.loadTexts: lgpPduEntry.setStatus('current')
lgpPduEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpPduEntryIndex.setStatus('current')
lgpPduEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduEntryId.setStatus('current')
lgpPduEntryUsrLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduEntryUsrLabel.setStatus('current')
lgpPduEntrySysAssignLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduEntrySysAssignLabel.setStatus('current')
lgpPduEntryPositionRelative = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1, 20), Unsigned32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduEntryPositionRelative.setStatus('current')
lgpPduEntrySysStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduEntrySysStatus.setStatus('current')
lgpPduEntryUsrTag1 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1, 35), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduEntryUsrTag1.setStatus('current')
lgpPduEntryUsrTag2 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1, 40), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduEntryUsrTag2.setStatus('current')
lgpPduEntrySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduEntrySerialNumber.setStatus('current')
lgpPduEntryRbCount = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1, 50), Unsigned32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduEntryRbCount.setStatus('current')
lgpPduEntrySWOverCurrentProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduEntrySWOverCurrentProtection.setStatus('current')
lgpPduPowerSource = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30))
if mibBuilder.loadTexts: lgpPduPowerSource.setStatus('current')
lgpPduPsTableCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 19), Unsigned32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsTableCount.setStatus('current')
lgpPduPsTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20), )
if mibBuilder.loadTexts: lgpPduPsTable.setStatus('current')
lgpPduPsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1), ).setIndexNames((0, "LIEBERT-GP-PDU-MIB", "lgpPduEntryIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduPsEntryIndex"))
if mibBuilder.loadTexts: lgpPduPsEntry.setStatus('current')
lgpPduPsEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 5), Unsigned32())
if mibBuilder.loadTexts: lgpPduPsEntryIndex.setStatus('current')
lgpPduPsEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntryId.setStatus('current')
lgpPduPsEntrySysAssignLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntrySysAssignLabel.setStatus('current')
lgpPduPsEntryModel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntryModel.setStatus('current')
lgpPduPsEntryWiringType = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-specified", 0), ("single-phase-3-wire-L1-N-PE", 1), ("two-phase-3-wire-L1-L2-PE", 2), ("three-phase-4-wire-L1-L2-L3-PE", 3), ("three-phase-5-wire-L1-L2-L3-N-PE", 4), ("two-phase-4-wire-L1-L2-N-PE", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduPsEntryWiringType.setStatus('current')
lgpPduPsEntryEpInputRated = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 30), Unsigned32()).setUnits('VoltRMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntryEpInputRated.setStatus('current')
lgpPduPsEntryEcInputRated = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 35), Unsigned32()).setUnits('0.1 Amp-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntryEcInputRated.setStatus('current')
lgpPduPsEntryFreqRated = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 40), Unsigned32()).setUnits('Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntryFreqRated.setStatus('current')
lgpPduPsEntryEnergyAccum = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 50), Unsigned32()).setUnits('0.1 Kilowatt-Hour').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduPsEntryEnergyAccum.setStatus('current')
lgpPduPsEntrySerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 55), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntrySerialNum.setStatus('current')
lgpPduPsEntryFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 60), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntryFirmwareVersion.setStatus('current')
lgpPduPsEntryPwrTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 65), Unsigned32()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntryPwrTotal.setStatus('current')
lgpPduPsEntryEcNeutral = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 70), Unsigned32()).setUnits('0.1 Amp-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntryEcNeutral.setStatus('current')
lgpPduPsEntryEcNeutralThrshldOvrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 75), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduPsEntryEcNeutralThrshldOvrWarn.setStatus('current')
lgpPduPsEntryEcNeutralThrshldOvrAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 80), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduPsEntryEcNeutralThrshldOvrAlarm.setStatus('current')
lgpPduPsEntryUnbalancedLoadThrshldAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 85), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduPsEntryUnbalancedLoadThrshldAlarm.setStatus('current')
lgpPduPsEntryApTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 90), Unsigned32()).setUnits('VoltAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntryApTotal.setStatus('current')
lgpPduPsEntryPfTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 95), Integer32()).setUnits('0.01 Power Factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntryPfTotal.setStatus('current')
lgpPduPsEntryEcResidual = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 100), Unsigned32()).setUnits('0.001 Amp-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntryEcResidual.setStatus('current')
lgpPduPsEntryEcResidualThrshldOvrAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 105), Unsigned32()).setUnits('0.001 Amp-AC-RMS').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduPsEntryEcResidualThrshldOvrAlarm.setStatus('current')
lgpPduPsLineTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40), )
if mibBuilder.loadTexts: lgpPduPsLineTable.setStatus('current')
lgpPduPsLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1), ).setIndexNames((0, "LIEBERT-GP-PDU-MIB", "lgpPduEntryIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduPsEntryIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduPsLineEntryIndex"))
if mibBuilder.loadTexts: lgpPduPsLineEntry.setStatus('current')
lgpPduPsLineEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 5), Unsigned32())
if mibBuilder.loadTexts: lgpPduPsLineEntryIndex.setStatus('current')
lgpPduPsLineEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryId.setStatus('current')
lgpPduPsLineEntryLine = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryLine.setStatus('current')
lgpPduPsLineEntryEpLNTenths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 19), Unsigned32()).setUnits('0.1 Volts-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryEpLNTenths.setStatus('current')
lgpPduPsLineEntryEpLN = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 20), Unsigned32()).setUnits('Volts-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryEpLN.setStatus('current')
lgpPduPsLineEntryEc = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 21), Unsigned32()).setUnits('0.1 Amps-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryEc.setStatus('current')
lgpPduPsLineEntryEcHundredths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 22), Unsigned32()).setUnits('0.01 Amps-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryEcHundredths.setStatus('current')
lgpPduPsLineEntryEcThrshldUndrAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 35), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduPsLineEntryEcThrshldUndrAlarm.setStatus('current')
lgpPduPsLineEntryEcThrshldOvrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 36), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduPsLineEntryEcThrshldOvrWarn.setStatus('current')
lgpPduPsLineEntryEcThrshldOvrAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 37), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduPsLineEntryEcThrshldOvrAlarm.setStatus('current')
lgpPduPsLineEntryEcAvailBeforeAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 38), Unsigned32()).setUnits('0.1 Amps-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryEcAvailBeforeAlarm.setStatus('current')
lgpPduPsLineEntryEcUsedBeforeAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 39), Unsigned32()).setUnits('0.1 Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryEcUsedBeforeAlarm.setStatus('current')
lgpPduPsLineEntryEpLL = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 60), Unsigned32()).setUnits('Volts-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryEpLL.setStatus('current')
lgpPduPsLineEntryEpLLTenths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 61), Unsigned32()).setUnits('0.1 Volts-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryEpLLTenths.setStatus('current')
lgpPduPsLineEntryEcAvailBeforeAlarmHundredths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 62), Unsigned32()).setUnits('0.01 Amps-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryEcAvailBeforeAlarmHundredths.setStatus('current')
lgpPduPsLineEntryPwrLN = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 63), Unsigned32()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryPwrLN.setStatus('current')
lgpPduPsLineEntryPwrLL = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 64), Unsigned32()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryPwrLL.setStatus('current')
lgpPduPsLineEntryApLN = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 65), Unsigned32()).setUnits('VoltAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryApLN.setStatus('current')
lgpPduPsLineEntryApLL = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 66), Unsigned32()).setUnits('VoltAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryApLL.setStatus('current')
lgpPduPsLineEntryPfLN = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 67), Integer32()).setUnits('0.01 Power Factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryPfLN.setStatus('current')
lgpPduPsLineEntryPfLL = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 68), Integer32()).setUnits('0.01 Power Factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryPfLL.setStatus('current')
lgpPduReceptacleBranch = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40))
if mibBuilder.loadTexts: lgpPduReceptacleBranch.setStatus('current')
lgpPduRbTableCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 19), Unsigned32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbTableCount.setStatus('current')
lgpPduRbTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20), )
if mibBuilder.loadTexts: lgpPduRbTable.setStatus('current')
lgpPduRbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1), ).setIndexNames((0, "LIEBERT-GP-PDU-MIB", "lgpPduEntryIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduRbEntryIndex"))
if mibBuilder.loadTexts: lgpPduRbEntry.setStatus('current')
lgpPduRbEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpPduRbEntryIndex.setStatus('current')
lgpPduRbEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryId.setStatus('current')
lgpPduRbEntryUsrLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRbEntryUsrLabel.setStatus('current')
lgpPduRbEntrySysAssignLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntrySysAssignLabel.setStatus('current')
lgpPduRbEntryPositionRelative = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 25), Unsigned32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryPositionRelative.setStatus('current')
lgpPduRbEntrySerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntrySerialNum.setStatus('current')
lgpPduRbEntryModel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryModel.setStatus('current')
lgpPduRbEntryFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryFirmwareVersion.setStatus('current')
lgpPduRbEntryUsrTag1 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 41), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRbEntryUsrTag1.setStatus('current')
lgpPduRbEntryUsrTag2 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 42), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRbEntryUsrTag2.setStatus('current')
lgpPduRbEntryReceptacleType = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("not-specified", 0), ("nema-5-20R-20-Amp", 1), ("iec-C13-sheet-F-10-Amp", 2), ("iec-C19-sheet-J-16-Amp", 3), ("iec-C13-sheet-F-10-Amp-and-iec-C19-sheet-J-16-Amp", 4), ("nema-5-20R-20-Amp-and-iec-C13-sheet-F-10-Amp", 5), ("nema-5-20R-20-Amp-and-iec-C19-sheet-J-16-Amp", 6), ("cee-7-type-E-schuko", 7), ("nema-L6-30R-30-Amp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryReceptacleType.setStatus('current')
lgpPduRbEntryCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("not-specified", 0), ("no-optional-capabilities", 1), ("measurement-only", 2), ("measurement-and-control", 3), ("control-only", 4), ("current-measurement-only", 5), ("current-measurement-and-control", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryCapabilities.setStatus('current')
lgpPduRbEntryLineSource = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("not-specified", 0), ("line-1-neutral", 1), ("line-2-neutral", 2), ("line-3-neutral", 3), ("line-1-line-2", 4), ("line-2-line-3", 5), ("line-3-line-1", 6), ("line-1-line-2-and-line-1-neutral", 7), ("line-2-line-3-and-line-2-neutral", 8), ("line-3-line-1-and-line-3-neutral", 9), ("unknown-line-neutral", 10), ("unknown-line-line", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryLineSource.setStatus('current')
lgpPduRbEntryRcpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 60), Unsigned32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryRcpCount.setStatus('current')
lgpPduRbEntryEpRated = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 70), Unsigned32()).setUnits('VoltRMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryEpRated.setStatus('current')
lgpPduRbEntryEcRated = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 75), Unsigned32()).setUnits('0.1 Amp-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryEcRated.setStatus('current')
lgpPduRbEntryFreqRated = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 80), Unsigned32()).setUnits('Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryFreqRated.setStatus('current')
lgpPduRbEntryEnergyAccum = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 85), Unsigned32()).setUnits('0.1 Kilowatt-Hour').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRbEntryEnergyAccum.setStatus('current')
lgpPduRbEntryEpLNTenths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 100), Unsigned32()).setUnits('0.1 VoltRMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryEpLNTenths.setStatus('current')
lgpPduRbEntryPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 115), Unsigned32()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryPwr.setStatus('current')
lgpPduRbEntryAp = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 120), Unsigned32()).setUnits('VoltAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryAp.setStatus('current')
lgpPduRbEntryPf = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 125), Integer32()).setUnits('0.01 Power Factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryPf.setStatus('current')
lgpPduRbEntryEcHundredths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 130), Unsigned32()).setUnits('0.01 Amp-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryEcHundredths.setStatus('current')
lgpPduRbEntryEcThrshldUndrAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 135), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRbEntryEcThrshldUndrAlm.setStatus('current')
lgpPduRbEntryEcThrshldOvrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 140), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRbEntryEcThrshldOvrWarn.setStatus('current')
lgpPduRbEntryEcThrshldOvrAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 145), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRbEntryEcThrshldOvrAlm.setStatus('current')
lgpPduRbEntryEcAvailBeforeAlarmHundredths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 150), Unsigned32()).setUnits('0.01 Amps-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryEcAvailBeforeAlarmHundredths.setStatus('current')
lgpPduRbEntryEcUsedBeforeAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 160), Unsigned32()).setUnits('0.1 Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryEcUsedBeforeAlarm.setStatus('current')
lgpPduRbEntryEpLLTenths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 170), Unsigned32()).setUnits('0.1 VoltRMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryEpLLTenths.setStatus('current')
lgpPduRbEntrySwOverCurrentProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 175), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRbEntrySwOverCurrentProtection.setStatus('current')
lgpPduRbLineTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40), )
if mibBuilder.loadTexts: lgpPduRbLineTable.setStatus('deprecated')
lgpPduRbLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1), ).setIndexNames((0, "LIEBERT-GP-PDU-MIB", "lgpPduEntryIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduRbEntryIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduRbLineEntryIndex"))
if mibBuilder.loadTexts: lgpPduRbLineEntry.setStatus('deprecated')
lgpPduRbLineEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpPduRbLineEntryIndex.setStatus('deprecated')
lgpPduRbLineEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryId.setStatus('deprecated')
lgpPduRbLineEntryLine = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryLine.setStatus('deprecated')
lgpPduRbLineEntryEpLNTenths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 19), Unsigned32()).setUnits('0.1 VoltRMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryEpLNTenths.setStatus('deprecated')
lgpPduRbLineEntryEpLN = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 20), Unsigned32()).setUnits('VoltRMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryEpLN.setStatus('deprecated')
lgpPduRbLineEntryEc = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 21), Unsigned32()).setUnits('0.1 Amp-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryEc.setStatus('deprecated')
lgpPduRbLineEntryPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 22), Unsigned32()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryPwr.setStatus('deprecated')
lgpPduRbLineEntryAp = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 23), Unsigned32()).setUnits('VoltAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryAp.setStatus('deprecated')
lgpPduRbLineEntryPf = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 24), Integer32()).setUnits('0.01 Power Factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryPf.setStatus('deprecated')
lgpPduRbLineEntryEcHundredths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 25), Unsigned32()).setUnits('0.01 Amp-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryEcHundredths.setStatus('deprecated')
lgpPduRbLineEntryEcThrshldUndrAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 35), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRbLineEntryEcThrshldUndrAlm.setStatus('deprecated')
lgpPduRbLineEntryEcThrshldOvrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 36), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRbLineEntryEcThrshldOvrWarn.setStatus('deprecated')
lgpPduRbLineEntryEcThrshldOvrAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 37), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRbLineEntryEcThrshldOvrAlm.setStatus('deprecated')
lgpPduRbLineEntryEcAvailBeforeAlarmHundredths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 39), Unsigned32()).setUnits('0.01 Amps-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryEcAvailBeforeAlarmHundredths.setStatus('deprecated')
lgpPduRbLineEntryEcAvailBeforeAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 40), Unsigned32()).setUnits('0.1 Amps-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryEcAvailBeforeAlarm.setStatus('deprecated')
lgpPduRbLineEntryEcUsedBeforeAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 41), Unsigned32()).setUnits('0.1 Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryEcUsedBeforeAlarm.setStatus('deprecated')
lgpPduRbLineEntryEpLL = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 60), Unsigned32()).setUnits('VoltRMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryEpLL.setStatus('deprecated')
lgpPduRbLineEntryEpLLTenths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 61), Unsigned32()).setUnits('0.1 VoltRMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryEpLLTenths.setStatus('deprecated')
lgpPduReceptacle = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50))
if mibBuilder.loadTexts: lgpPduReceptacle.setStatus('current')
lgpPduRcpTableCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 19), Unsigned32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpTableCount.setStatus('current')
lgpPduRcpTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20), )
if mibBuilder.loadTexts: lgpPduRcpTable.setStatus('current')
lgpPduRcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1), ).setIndexNames((0, "LIEBERT-GP-PDU-MIB", "lgpPduEntryIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduRbEntryIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduRcpEntryIndex"))
if mibBuilder.loadTexts: lgpPduRcpEntry.setStatus('current')
lgpPduRcpEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpPduRcpEntryIndex.setStatus('current')
lgpPduRcpEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryId.setStatus('current')
lgpPduRcpEntryUsrLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryUsrLabel.setStatus('current')
lgpPduRcpEntryUsrTag1 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryUsrTag1.setStatus('current')
lgpPduRcpEntryUsrTag2 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryUsrTag2.setStatus('current')
lgpPduRcpEntrySysAssignLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntrySysAssignLabel.setStatus('current')
lgpPduRcpEntryPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryPosition.setStatus('current')
lgpPduRcpEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 7, 8))).clone(namedValues=NamedValues(("not-specified", 0), ("nema-5-20R-20-Amp", 1), ("iec-C13-sheet-F-10-Amp", 2), ("iec-C19-sheet-J-16-Amp", 3), ("cee-7-type-E-schuko", 7), ("nema-L6-30R-30-Amp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryType.setStatus('current')
lgpPduRcpEntryLineSource = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("not-specified", 0), ("line-1-N", 1), ("line-2-N", 2), ("line-3-N", 3), ("line-1-line-2", 4), ("line-2-line-3", 5), ("line-3-line-1", 6), ("unknown-line-neutral", 7), ("unknown-line-line", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryLineSource.setStatus('current')
lgpPduRcpEntryCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("not-specified", 0), ("no-optional-capabilities", 1), ("measurement-only", 2), ("measurement-and-control", 3), ("control-only", 4), ("current-measurement-only", 5), ("current-measurement-and-control", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryCapabilities.setStatus('current')
lgpPduRcpEntryEp = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 55), Unsigned32()).setUnits('Volts-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryEp.setStatus('current')
lgpPduRcpEntryEpTenths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 56), Unsigned32()).setUnits('0.1 Volts-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryEpTenths.setStatus('current')
lgpPduRcpEntryEc = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 60), Unsigned32()).setUnits('0.1 Amp-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryEc.setStatus('current')
lgpPduRcpEntryEcHundredths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 61), Unsigned32()).setUnits('0.01 Amp-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryEcHundredths.setStatus('current')
lgpPduRcpEntryPwrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 65), Unsigned32()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryPwrOut.setStatus('current')
lgpPduRcpEntryApOut = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 70), Unsigned32()).setUnits('Volt-Amp-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryApOut.setStatus('current')
lgpPduRcpEntryPf = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 75), Unsigned32()).setUnits('.01 Power Factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryPf.setStatus('current')
lgpPduRcpEntryFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 80), Unsigned32()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryFreq.setStatus('current')
lgpPduRcpEntryEnergyAccum = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 85), Unsigned32()).setUnits('0.1 Kilowatt-Hour').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryEnergyAccum.setStatus('current')
lgpPduRcpEntryPwrOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 90), Unsigned32()).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryPwrOnDelay.setStatus('current')
lgpPduRcpEntryPwrState = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2), ("off-pending-on-delay", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryPwrState.setStatus('current')
lgpPduRcpEntryPwrUpState = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 96), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("last-state", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryPwrUpState.setStatus('current')
lgpPduRcpEntryControl = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("cycle-power", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryControl.setStatus('current')
lgpPduRcpEntryControlLock = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("unlocked", 1), ("locked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryControlLock.setStatus('current')
lgpPduRcpEntryEcThrshldUnderAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 150), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryEcThrshldUnderAlarm.setStatus('current')
lgpPduRcpEntryEcThrshldOverWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 151), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryEcThrshldOverWarn.setStatus('current')
lgpPduRcpEntryEcThrshldOverAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 152), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryEcThrshldOverAlarm.setStatus('current')
lgpPduRcpEntryEcAvailBeforeAlarmHundredths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 159), Unsigned32()).setUnits('0.01 Amps-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryEcAvailBeforeAlarmHundredths.setStatus('current')
lgpPduRcpEntryEcAvailBeforeAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 160), Unsigned32()).setUnits('0.1 Amps-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryEcAvailBeforeAlarm.setStatus('current')
lgpPduRcpEntryEcUsedBeforeAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 161), Unsigned32()).setUnits('0.1 Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryEcUsedBeforeAlarm.setStatus('current')
lgpPduRcpEntryEcCrestFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 162), Unsigned32()).setUnits('0.01').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryEcCrestFactor.setStatus('current')
lgpPduRcpEntryBlinkLED = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 200), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("blinkLED", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryBlinkLED.setStatus('current')
lgpPduRcpEntrySwOverTemperatureProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 205), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntrySwOverTemperatureProtection.setStatus('current')
lgpPduRcpEntryOperationCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 210), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normalOperation", 1), ("normalWithWarning", 2), ("normalWithAlarm", 3), ("abnormal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryOperationCondition.setStatus('current')
lgpPduRcpEntryCriticality = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 215), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("critical", 0), ("notCritical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryCriticality.setStatus('current')
lgpPduRcpEntryPostOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 220), Unsigned32()).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryPostOnDelay.setStatus('current')
lgpPduRcpEntryPostOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 225), Unsigned32()).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryPostOffDelay.setStatus('current')
lgpPduRcpEntryAddReceptacleToGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 230), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryAddReceptacleToGroup.setStatus('current')
lgpPduRcpEntryRemoveReceptacleFromGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 235), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryRemoveReceptacleFromGroup.setStatus('current')
lgpPduRcpGroup = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 30))
if mibBuilder.loadTexts: lgpPduRcpGroup.setStatus('current')
lgpPduRcpGroupTableCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 30, 9), Unsigned32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpGroupTableCount.setStatus('current')
lgpPduRcpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 30, 10), )
if mibBuilder.loadTexts: lgpPduRcpGroupTable.setStatus('current')
lgpPduRcpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 30, 10, 1), ).setIndexNames((0, "LIEBERT-GP-PDU-MIB", "lgpPduRcpGroupIndex"))
if mibBuilder.loadTexts: lgpPduRcpGroupEntry.setStatus('current')
lgpPduRcpGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 30, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpPduRcpGroupIndex.setStatus('current')
lgpPduRcpGroupUsrLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 30, 10, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpGroupUsrLabel.setStatus('current')
lgpPduRcpGroupDeleteGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 30, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-action", 0), ("delete-receptacle-group", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpGroupDeleteGroup.setStatus('current')
lgpPduRcpGroupControlPower = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 30, 10, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("no-action", 0), ("off", 1), ("on", 2), ("cycle-power", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpGroupControlPower.setStatus('current')
lgpPduRcpGroupControlLock = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 30, 10, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("no-action", 0), ("unlock", 1), ("lock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpGroupControlLock.setStatus('current')
lgpPduRcpGroupBlinkLED = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 30, 10, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-action", 0), ("blinkLED", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpGroupBlinkLED.setStatus('current')
lgpPduRcpGroupDisplayTableCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 30, 19), Unsigned32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpGroupDisplayTableCount.setStatus('current')
lgpPduRcpGroupDisplayTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 30, 20), )
if mibBuilder.loadTexts: lgpPduRcpGroupDisplayTable.setStatus('current')
lgpPduRcpGroupDisplayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 30, 20, 1), ).setIndexNames((0, "LIEBERT-GP-PDU-MIB", "lgpPduRcpGroupIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduEntryIndex"))
if mibBuilder.loadTexts: lgpPduRcpGroupDisplayEntry.setStatus('current')
lgpPduRcpGroupDisplayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 30, 20, 1, 10), Unsigned32())
if mibBuilder.loadTexts: lgpPduRcpGroupDisplayIndex.setStatus('current')
lgpPduRcpGroupDisplayGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 30, 20, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpGroupDisplayGroup.setStatus('current')
lgpPduAuxiliarySensors = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60))
if mibBuilder.loadTexts: lgpPduAuxiliarySensors.setStatus('current')
lgpPduAuxSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 5), Unsigned32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxSensorCount.setStatus('current')
lgpPduAuxSensorTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10), )
if mibBuilder.loadTexts: lgpPduAuxSensorTable.setStatus('deprecated')
lgpPduAuxSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1), ).setIndexNames((0, "LIEBERT-GP-PDU-MIB", "lgpPduEntryIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduAuxSensorIndex"))
if mibBuilder.loadTexts: lgpPduAuxSensorEntry.setStatus('deprecated')
lgpPduAuxSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpPduAuxSensorIndex.setStatus('deprecated')
lgpPduAuxSensorMeasType = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("not-specified", 0), ("temperature", 1), ("humidity", 2), ("temperature-and-humidity", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxSensorMeasType.setStatus('deprecated')
lgpPduAuxSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxSensorId.setStatus('deprecated')
lgpPduAuxSensorSysAssignLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxSensorSysAssignLabel.setStatus('deprecated')
lgpPduAuxSensorPositionRelative = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxSensorPositionRelative.setStatus('deprecated')
lgpPduAuxSensorUsrLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorUsrLabel.setStatus('deprecated')
lgpPduAuxSensorUsrTag1 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorUsrTag1.setStatus('deprecated')
lgpPduAuxSensorUsrTag2 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 35), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorUsrTag2.setStatus('deprecated')
lgpPduAuxSensorTempSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxSensorTempSerialNum.setStatus('deprecated')
lgpPduAuxSensorHumSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxSensorHumSerialNum.setStatus('deprecated')
lgpPduAuxSensorTempMeasurementDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 50), Integer32()).setUnits('0.1 degrees Fahrenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxSensorTempMeasurementDegF.setStatus('deprecated')
lgpPduAuxSensorTempThrshldUndrAlmDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 55), Integer32()).setUnits('0.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldUndrAlmDegF.setStatus('deprecated')
lgpPduAuxSensorTempThrshldOvrAlmDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 60), Integer32()).setUnits('0.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldOvrAlmDegF.setStatus('deprecated')
lgpPduAuxSensorTempThrshldUndrWarnDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 65), Integer32()).setUnits('0.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldUndrWarnDegF.setStatus('deprecated')
lgpPduAuxSensorTempThrshldOvrWarnDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 70), Integer32()).setUnits('0.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldOvrWarnDegF.setStatus('deprecated')
lgpPduAuxSensorTempMeasurementDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 75), Integer32()).setUnits('0.1 degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxSensorTempMeasurementDegC.setStatus('deprecated')
lgpPduAuxSensorTempThrshldUndrAlmDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 80), Integer32()).setUnits('0.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldUndrAlmDegC.setStatus('deprecated')
lgpPduAuxSensorTempThrshldOvrAlmDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 85), Integer32()).setUnits('0.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldOvrAlmDegC.setStatus('deprecated')
lgpPduAuxSensorTempThrshldUndrWarnDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 90), Integer32()).setUnits('0.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldUndrWarnDegC.setStatus('deprecated')
lgpPduAuxSensorTempThrshldOvrWarnDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 95), Integer32()).setUnits('0.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldOvrWarnDegC.setStatus('deprecated')
lgpPduAuxSensorHumMeasurement = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 100), Unsigned32()).setUnits('0.1 percent Relative Humidity').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxSensorHumMeasurement.setStatus('deprecated')
lgpPduAuxSensorHumThrshldUndrAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 105), Unsigned32()).setUnits('0.1 percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorHumThrshldUndrAlm.setStatus('deprecated')
lgpPduAuxSensorHumThrshldOvrAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 110), Unsigned32()).setUnits('0.1 percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorHumThrshldOvrAlm.setStatus('deprecated')
lgpPduAuxSensorHumThrshldUndrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 115), Unsigned32()).setUnits('0.1 percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorHumThrshldUndrWarn.setStatus('deprecated')
lgpPduAuxSensorHumThrshldOvrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 120), Unsigned32()).setUnits('0.1 percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorHumThrshldOvrWarn.setStatus('deprecated')
lgpPduAuxMeasTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15), )
if mibBuilder.loadTexts: lgpPduAuxMeasTable.setStatus('current')
lgpPduAuxMeasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1), ).setIndexNames((0, "LIEBERT-GP-PDU-MIB", "lgpPduEntryIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduAuxMeasSensorIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduAuxMeasSensorMeasurementIndex"))
if mibBuilder.loadTexts: lgpPduAuxMeasEntry.setStatus('current')
lgpPduAuxMeasSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpPduAuxMeasSensorIndex.setStatus('current')
lgpPduAuxMeasSensorMeasurementIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 5), Unsigned32())
if mibBuilder.loadTexts: lgpPduAuxMeasSensorMeasurementIndex.setStatus('current')
lgpPduAuxMeasType = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("not-specified", 0), ("temperature", 1), ("humidity", 2), ("door-closure", 3), ("contact-closure", 4), ("differential-pressure", 5), ("leak-detection", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxMeasType.setStatus('current')
lgpPduAuxMeasSensorSysAssignLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxMeasSensorSysAssignLabel.setStatus('current')
lgpPduAuxMeasUsrLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasUsrLabel.setStatus('current')
lgpPduAuxMeasUsrTag1 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasUsrTag1.setStatus('current')
lgpPduAuxMeasUsrTag2 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasUsrTag2.setStatus('current')
lgpPduAuxMeasSensorSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxMeasSensorSerialNum.setStatus('current')
lgpPduAuxMeasTempDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 40), Integer32()).setUnits('0.1 degrees Fahrenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxMeasTempDegF.setStatus('current')
lgpPduAuxMeasTempThrshldUndrAlmDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 50), Integer32()).setUnits('0.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldUndrAlmDegF.setStatus('current')
lgpPduAuxMeasTempThrshldOvrAlmDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 55), Integer32()).setUnits('0.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldOvrAlmDegF.setStatus('current')
lgpPduAuxMeasTempThrshldUndrWarnDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 60), Integer32()).setUnits('0.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldUndrWarnDegF.setStatus('current')
lgpPduAuxMeasTempThrshldOvrWarnDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 65), Integer32()).setUnits('0.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldOvrWarnDegF.setStatus('current')
lgpPduAuxMeasTempDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 70), Integer32()).setUnits('0.1 degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxMeasTempDegC.setStatus('current')
lgpPduAuxMeasTempThrshldUndrAlmDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 75), Integer32()).setUnits('0.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldUndrAlmDegC.setStatus('current')
lgpPduAuxMeasTempThrshldOvrAlmDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 80), Integer32()).setUnits('0.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldOvrAlmDegC.setStatus('current')
lgpPduAuxMeasTempThrshldUndrWarnDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 85), Integer32()).setUnits('0.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldUndrWarnDegC.setStatus('current')
lgpPduAuxMeasTempThrshldOvrWarnDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 90), Integer32()).setUnits('0.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldOvrWarnDegC.setStatus('current')
lgpPduAuxMeasHum = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 95), Unsigned32()).setUnits('0.1 percent Relative Humidity').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxMeasHum.setStatus('current')
lgpPduAuxMeasHumThrshldUndrAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 100), Unsigned32()).setUnits('0.1 percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasHumThrshldUndrAlm.setStatus('current')
lgpPduAuxMeasHumThrshldOvrAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 105), Unsigned32()).setUnits('0.1 percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasHumThrshldOvrAlm.setStatus('current')
lgpPduAuxMeasHumThrshldUndrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 110), Unsigned32()).setUnits('0.1 percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasHumThrshldUndrWarn.setStatus('current')
lgpPduAuxMeasHumThrshldOvrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 115), Unsigned32()).setUnits('0.1 percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasHumThrshldOvrWarn.setStatus('current')
lgpPduAuxMeasDrClosureState = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 120), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-specified", 0), ("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxMeasDrClosureState.setStatus('current')
lgpPduAuxMeasDrClosureConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 125), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("alarm-when-open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasDrClosureConfig.setStatus('current')
lgpPduAuxMeasCntctClosureState = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 130), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-specified", 0), ("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxMeasCntctClosureState.setStatus('current')
lgpPduAuxMeasCntctClosureConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 135), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("alarm-when-open", 1), ("alarm-when-closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasCntctClosureConfig.setStatus('current')
lgpPduAuxMeasDiffPressure = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 140), Integer32()).setUnits('0.1 Pascal').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxMeasDiffPressure.setStatus('current')
lgpPduAuxMeasDiffPressureThrshldUndrAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 145), Integer32()).setUnits('0.1 Pascal').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasDiffPressureThrshldUndrAlm.setStatus('current')
lgpPduAuxMeasDiffPressureThrshldOvrAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 150), Integer32()).setUnits('0.1 Pascal').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasDiffPressureThrshldOvrAlm.setStatus('current')
lgpPduAuxMeasDiffPressureThrshldUndrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 155), Integer32()).setUnits('0.1 Pascal').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasDiffPressureThrshldUndrWarn.setStatus('current')
lgpPduAuxMeasDiffPressureThrshldOvrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 160), Integer32()).setUnits('0.1 Pascal').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasDiffPressureThrshldOvrWarn.setStatus('current')
lgpPduAuxMeasLeakDetectState = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 165), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("not-specified", 0), ("no-leak-detected", 1), ("leak-detected", 2), ("leak-detection-pending", 3), ("cable-fault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxMeasLeakDetectState.setStatus('current')
lgpPduAuxMeasOrderTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 20), )
if mibBuilder.loadTexts: lgpPduAuxMeasOrderTable.setStatus('current')
lgpPduAuxMeasOrderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 20, 1), ).setIndexNames((0, "LIEBERT-GP-PDU-MIB", "lgpPduEntryIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduAuxSensorOrderIndex"))
if mibBuilder.loadTexts: lgpPduAuxMeasOrderEntry.setStatus('current')
lgpPduAuxSensorOrderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 20, 1, 5), Unsigned32())
if mibBuilder.loadTexts: lgpPduAuxSensorOrderIndex.setStatus('current')
lgpPduAuxMeasOrderSensorSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 20, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasOrderSensorSerialNum.setStatus('current')
mibBuilder.exportSymbols("LIEBERT-GP-PDU-MIB", lgpPduRcpGroupDisplayTable=lgpPduRcpGroupDisplayTable, lgpPduRcpEntryFreq=lgpPduRcpEntryFreq, liebertGlobalProductsPduModule=liebertGlobalProductsPduModule, lgpPduEntryUsrLabel=lgpPduEntryUsrLabel, lgpPduRbEntryEcThrshldOvrWarn=lgpPduRbEntryEcThrshldOvrWarn, lgpPduRbLineEntryId=lgpPduRbLineEntryId, lgpPduAuxSensorHumThrshldUndrAlm=lgpPduAuxSensorHumThrshldUndrAlm, lgpPduRcpEntryEcAvailBeforeAlarm=lgpPduRcpEntryEcAvailBeforeAlarm, lgpPduPsLineEntryEc=lgpPduPsLineEntryEc, lgpPduRcpEntryApOut=lgpPduRcpEntryApOut, lgpPduRcpGroupDisplayEntry=lgpPduRcpGroupDisplayEntry, lgpPduAuxSensorSysAssignLabel=lgpPduAuxSensorSysAssignLabel, lgpPduEntryRbCount=lgpPduEntryRbCount, lgpPduAuxSensorTable=lgpPduAuxSensorTable, lgpPduAuxSensorHumSerialNum=lgpPduAuxSensorHumSerialNum, lgpPduAuxSensorTempMeasurementDegF=lgpPduAuxSensorTempMeasurementDegF, lgpPduRcpGroupEntry=lgpPduRcpGroupEntry, lgpPduRbEntryEcUsedBeforeAlarm=lgpPduRbEntryEcUsedBeforeAlarm, lgpPduAuxMeasOrderTable=lgpPduAuxMeasOrderTable, lgpPduPsLineEntryEpLLTenths=lgpPduPsLineEntryEpLLTenths, lgpPduRbEntryEcThrshldOvrAlm=lgpPduRbEntryEcThrshldOvrAlm, lgpPduRbLineEntryEpLL=lgpPduRbLineEntryEpLL, lgpPduAuxMeasDiffPressureThrshldUndrWarn=lgpPduAuxMeasDiffPressureThrshldUndrWarn, lgpPduRcpEntryEp=lgpPduRcpEntryEp, lgpPduEntryIndex=lgpPduEntryIndex, lgpPduEntrySerialNumber=lgpPduEntrySerialNumber, lgpPduAuxMeasCntctClosureState=lgpPduAuxMeasCntctClosureState, lgpPduAuxSensorOrderIndex=lgpPduAuxSensorOrderIndex, lgpPduGlobalData=lgpPduGlobalData, lgpPduPsEntryIndex=lgpPduPsEntryIndex, lgpPduEntryUsrTag2=lgpPduEntryUsrTag2, lgpPduRbEntryFreqRated=lgpPduRbEntryFreqRated, lgpPduRcpEntryUsrLabel=lgpPduRcpEntryUsrLabel, lgpPduAuxMeasHumThrshldUndrWarn=lgpPduAuxMeasHumThrshldUndrWarn, lgpPduAuxMeasDiffPressureThrshldOvrAlm=lgpPduAuxMeasDiffPressureThrshldOvrAlm, lgpPduPsLineEntryEcAvailBeforeAlarm=lgpPduPsLineEntryEcAvailBeforeAlarm, lgpPduAuxMeasType=lgpPduAuxMeasType, lgpPduPsTable=lgpPduPsTable, lgpPduTableCount=lgpPduTableCount, lgpPduRcpEntryControlLock=lgpPduRcpEntryControlLock, lgpPduRbEntryModel=lgpPduRbEntryModel, lgpPduRcpEntryCapabilities=lgpPduRcpEntryCapabilities, lgpPduPsLineEntryEcAvailBeforeAlarmHundredths=lgpPduPsLineEntryEcAvailBeforeAlarmHundredths, lgpPduRcpEntryEcThrshldUnderAlarm=lgpPduRcpEntryEcThrshldUnderAlarm, lgpPduPsEntryWiringType=lgpPduPsEntryWiringType, lgpPduPsEntryEcNeutral=lgpPduPsEntryEcNeutral, lgpPduPsLineEntryId=lgpPduPsLineEntryId, lgpPduRcpEntryEcUsedBeforeAlarm=lgpPduRcpEntryEcUsedBeforeAlarm, lgpPduAuxMeasTempDegC=lgpPduAuxMeasTempDegC, lgpPduAuxMeasSensorMeasurementIndex=lgpPduAuxMeasSensorMeasurementIndex, lgpPduPsLineEntryLine=lgpPduPsLineEntryLine, lgpPduPsEntryApTotal=lgpPduPsEntryApTotal, lgpPduPsEntrySysAssignLabel=lgpPduPsEntrySysAssignLabel, lgpPduRbLineEntryEpLN=lgpPduRbLineEntryEpLN, lgpPduAuxMeasDiffPressureThrshldOvrWarn=lgpPduAuxMeasDiffPressureThrshldOvrWarn, lgpPduAuxSensorId=lgpPduAuxSensorId, lgpPduPsEntryEcNeutralThrshldOvrAlarm=lgpPduPsEntryEcNeutralThrshldOvrAlarm, lgpPduRcpEntryUsrTag1=lgpPduRcpEntryUsrTag1, lgpPduRbEntryIndex=lgpPduRbEntryIndex, lgpPduPsEntryModel=lgpPduPsEntryModel, lgpPduPsLineEntryEpLL=lgpPduPsLineEntryEpLL, lgpPduAuxMeasTempThrshldUndrAlmDegC=lgpPduAuxMeasTempThrshldUndrAlmDegC, lgpPduPsLineEntryEcHundredths=lgpPduPsLineEntryEcHundredths, lgpPduPsEntryId=lgpPduPsEntryId, lgpPduRbLineEntryEcHundredths=lgpPduRbLineEntryEcHundredths, lgpPduRbTableCount=lgpPduRbTableCount, lgpPduRcpEntryPwrUpState=lgpPduRcpEntryPwrUpState, lgpPduRcpGroup=lgpPduRcpGroup, lgpPduAuxSensorTempThrshldOvrAlmDegC=lgpPduAuxSensorTempThrshldOvrAlmDegC, lgpPduRbLineEntryEcThrshldUndrAlm=lgpPduRbLineEntryEcThrshldUndrAlm, lgpPduRcpEntryPwrOut=lgpPduRcpEntryPwrOut, lgpPduAuxSensorHumThrshldOvrWarn=lgpPduAuxSensorHumThrshldOvrWarn, lgpPduEntryUsrTag1=lgpPduEntryUsrTag1, lgpPduPsLineEntryApLN=lgpPduPsLineEntryApLN, lgpPduAuxSensorTempThrshldUndrAlmDegC=lgpPduAuxSensorTempThrshldUndrAlmDegC, lgpPduAuxSensorHumMeasurement=lgpPduAuxSensorHumMeasurement, lgpPduPsEntryUnbalancedLoadThrshldAlarm=lgpPduPsEntryUnbalancedLoadThrshldAlarm, lgpPduPsTableCount=lgpPduPsTableCount, lgpPduAuxSensorIndex=lgpPduAuxSensorIndex, lgpPduPsEntryEcResidualThrshldOvrAlarm=lgpPduPsEntryEcResidualThrshldOvrAlarm, lgpPduRcpEntryPf=lgpPduRcpEntryPf, lgpPduGrpSysStatus=lgpPduGrpSysStatus, lgpPduAuxSensorUsrTag2=lgpPduAuxSensorUsrTag2, lgpPduPsLineEntryEpLN=lgpPduPsLineEntryEpLN, lgpPduAuxSensorMeasType=lgpPduAuxSensorMeasType, lgpPduAuxSensorTempThrshldOvrAlmDegF=lgpPduAuxSensorTempThrshldOvrAlmDegF, lgpPduRbEntrySerialNum=lgpPduRbEntrySerialNum, lgpPduRcpGroupControlPower=lgpPduRcpGroupControlPower, lgpPduRbEntry=lgpPduRbEntry, lgpPduRbLineEntryEcUsedBeforeAlarm=lgpPduRbLineEntryEcUsedBeforeAlarm, lgpPduRbEntryPwr=lgpPduRbEntryPwr, lgpPduRbEntryUsrTag2=lgpPduRbEntryUsrTag2, lgpPduCluster=lgpPduCluster, lgpPduRbLineEntryEpLNTenths=lgpPduRbLineEntryEpLNTenths, lgpPduRcpTable=lgpPduRcpTable, lgpPduRcpEntryPostOnDelay=lgpPduRcpEntryPostOnDelay, lgpPduAuxMeasCntctClosureConfig=lgpPduAuxMeasCntctClosureConfig, lgpPduPsEntryEnergyAccum=lgpPduPsEntryEnergyAccum, lgpPduTable=lgpPduTable, lgpPduRcpGroupTableCount=lgpPduRcpGroupTableCount, lgpPduAuxSensorTempMeasurementDegC=lgpPduAuxSensorTempMeasurementDegC, lgpPduRbLineEntryAp=lgpPduRbLineEntryAp, lgpPduRbEntryEpLNTenths=lgpPduRbEntryEpLNTenths, lgpPduRcpEntryEcAvailBeforeAlarmHundredths=lgpPduRcpEntryEcAvailBeforeAlarmHundredths, lgpPduAuxSensorUsrLabel=lgpPduAuxSensorUsrLabel, lgpPduPsLineEntryEcThrshldOvrAlarm=lgpPduPsLineEntryEcThrshldOvrAlarm, lgpPduRbEntryEpRated=lgpPduRbEntryEpRated, lgpPduAuxMeasSensorSerialNum=lgpPduAuxMeasSensorSerialNum, lgpPduAuxSensorTempThrshldOvrWarnDegF=lgpPduAuxSensorTempThrshldOvrWarnDegF, lgpPduAuxSensorTempThrshldUndrWarnDegF=lgpPduAuxSensorTempThrshldUndrWarnDegF, lgpPduAuxSensorHumThrshldUndrWarn=lgpPduAuxSensorHumThrshldUndrWarn, lgpPduEntrySWOverCurrentProtection=lgpPduEntrySWOverCurrentProtection, lgpPduRbLineEntry=lgpPduRbLineEntry, lgpPduRcpEntrySwOverTemperatureProtection=lgpPduRcpEntrySwOverTemperatureProtection, lgpPduAuxMeasTempDegF=lgpPduAuxMeasTempDegF, lgpPduRcpEntryAddReceptacleToGroup=lgpPduRcpEntryAddReceptacleToGroup, lgpPduRcpEntryEpTenths=lgpPduRcpEntryEpTenths, lgpPduRcpEntryOperationCondition=lgpPduRcpEntryOperationCondition, lgpPduAuxMeasDiffPressure=lgpPduAuxMeasDiffPressure, lgpPduRbLineEntryPwr=lgpPduRbLineEntryPwr, lgpPduRcpEntryLineSource=lgpPduRcpEntryLineSource, lgpPduRbEntryEcRated=lgpPduRbEntryEcRated, lgpPduReceptacle=lgpPduReceptacle, lgpPduRcpEntryPosition=lgpPduRcpEntryPosition, lgpPduRcpGroupBlinkLED=lgpPduRcpGroupBlinkLED, lgpPduAuxSensorTempThrshldOvrWarnDegC=lgpPduAuxSensorTempThrshldOvrWarnDegC, lgpPduRcpEntryControl=lgpPduRcpEntryControl, lgpPduRbLineEntryEcAvailBeforeAlarmHundredths=lgpPduRbLineEntryEcAvailBeforeAlarmHundredths, lgpPduPsLineEntry=lgpPduPsLineEntry, lgpPduPsLineEntryIndex=lgpPduPsLineEntryIndex, lgpPduAuxMeasUsrTag2=lgpPduAuxMeasUsrTag2, lgpPduAuxSensorEntry=lgpPduAuxSensorEntry, lgpPduRcpEntryPostOffDelay=lgpPduRcpEntryPostOffDelay, lgpPduEntryPositionRelative=lgpPduEntryPositionRelative, lgpPduPsEntry=lgpPduPsEntry, lgpPduPsEntryEcNeutralThrshldOvrWarn=lgpPduPsEntryEcNeutralThrshldOvrWarn, lgpPduRbLineTable=lgpPduRbLineTable, lgpPduPsLineEntryPfLN=lgpPduPsLineEntryPfLN, lgpPduRbLineEntryLine=lgpPduRbLineEntryLine, lgpPduRcpEntryEnergyAccum=lgpPduRcpEntryEnergyAccum, lgpPduAuxMeasUsrLabel=lgpPduAuxMeasUsrLabel, lgpPduAuxMeasLeakDetectState=lgpPduAuxMeasLeakDetectState, lgpPduRcpEntryEc=lgpPduRcpEntryEc, lgpPduRcpEntryCriticality=lgpPduRcpEntryCriticality, lgpPduAuxiliarySensors=lgpPduAuxiliarySensors, lgpPduRcpGroupDisplayGroup=lgpPduRcpGroupDisplayGroup, lgpPduAuxMeasDiffPressureThrshldUndrAlm=lgpPduAuxMeasDiffPressureThrshldUndrAlm, lgpPduAuxSensorPositionRelative=lgpPduAuxSensorPositionRelative, lgpPduPsEntryPwrTotal=lgpPduPsEntryPwrTotal, lgpPduRbEntryEcHundredths=lgpPduRbEntryEcHundredths, lgpPduRcpEntryId=lgpPduRcpEntryId, lgpPduRbEntryReceptacleType=lgpPduRbEntryReceptacleType, lgpPduAuxMeasDrClosureState=lgpPduAuxMeasDrClosureState, lgpPduRcpGroupIndex=lgpPduRcpGroupIndex, lgpPduRbLineEntryIndex=lgpPduRbLineEntryIndex, lgpPduPsEntryFirmwareVersion=lgpPduPsEntryFirmwareVersion, lgpPduAuxSensorUsrTag1=lgpPduAuxSensorUsrTag1, lgpPduEntrySWOverTemperatureProtectionConfig=lgpPduEntrySWOverTemperatureProtectionConfig, lgpPduRcpGroupDisplayIndex=lgpPduRcpGroupDisplayIndex, lgpPduPsLineEntryPfLL=lgpPduPsLineEntryPfLL, lgpPduAuxMeasTempThrshldUndrAlmDegF=lgpPduAuxMeasTempThrshldUndrAlmDegF, lgpPduRbEntryUsrTag1=lgpPduRbEntryUsrTag1, lgpPduAuxMeasSensorIndex=lgpPduAuxMeasSensorIndex, lgpPduAuxMeasTable=lgpPduAuxMeasTable, PYSNMP_MODULE_ID=liebertGlobalProductsPduModule, lgpPduEntrySWOverTemperatureProtectionDelay=lgpPduEntrySWOverTemperatureProtectionDelay, lgpPduPsLineEntryPwrLN=lgpPduPsLineEntryPwrLN, lgpPduRcpEntryBlinkLED=lgpPduRcpEntryBlinkLED, lgpPduRbEntryUsrLabel=lgpPduRbEntryUsrLabel, lgpPduRbLineEntryPf=lgpPduRbLineEntryPf, lgpPduPsEntryPfTotal=lgpPduPsEntryPfTotal, lgpPduRbEntryEpLLTenths=lgpPduRbEntryEpLLTenths, lgpPduAuxMeasOrderSensorSerialNum=lgpPduAuxMeasOrderSensorSerialNum, lgpPduAuxMeasEntry=lgpPduAuxMeasEntry, lgpPduRcpTableCount=lgpPduRcpTableCount, lgpPduPsLineEntryApLL=lgpPduPsLineEntryApLL, lgpPduRbEntryFirmwareVersion=lgpPduRbEntryFirmwareVersion, lgpPduRcpGroupUsrLabel=lgpPduRcpGroupUsrLabel, lgpPduRcpGroupDisplayTableCount=lgpPduRcpGroupDisplayTableCount, lgpPduRcpEntryPwrOnDelay=lgpPduRcpEntryPwrOnDelay, lgpPduRcpGroupTable=lgpPduRcpGroupTable, lgpPduPsEntryEcInputRated=lgpPduPsEntryEcInputRated, lgpPduPsLineEntryEcThrshldOvrWarn=lgpPduPsLineEntryEcThrshldOvrWarn, lgpPduRbEntryId=lgpPduRbEntryId, lgpPduAuxMeasHumThrshldOvrWarn=lgpPduAuxMeasHumThrshldOvrWarn, lgpPduAuxMeasOrderEntry=lgpPduAuxMeasOrderEntry, lgpPduReceptacleBranch=lgpPduReceptacleBranch, lgpPduAuxSensorCount=lgpPduAuxSensorCount, lgpPduRcpEntryType=lgpPduRcpEntryType, lgpPduRbTable=lgpPduRbTable, lgpPduAuxSensorTempThrshldUndrWarnDegC=lgpPduAuxSensorTempThrshldUndrWarnDegC, lgpPduPsEntrySerialNum=lgpPduPsEntrySerialNum, lgpPduAuxMeasHumThrshldOvrAlm=lgpPduAuxMeasHumThrshldOvrAlm, lgpPduPsLineEntryEpLNTenths=lgpPduPsLineEntryEpLNTenths, lgpPduPsLineEntryEcUsedBeforeAlarm=lgpPduPsLineEntryEcUsedBeforeAlarm, lgpPduRbEntryEnergyAccum=lgpPduRbEntryEnergyAccum, lgpPduPsLineTable=lgpPduPsLineTable, lgpPduAuxSensorTempThrshldUndrAlmDegF=lgpPduAuxSensorTempThrshldUndrAlmDegF, lgpPduAuxMeasUsrTag1=lgpPduAuxMeasUsrTag1, lgpPduAuxMeasHum=lgpPduAuxMeasHum, lgpPduPsEntryEcResidual=lgpPduPsEntryEcResidual, lgpPduRcpGroupControlLock=lgpPduRcpGroupControlLock, lgpPduAuxMeasDrClosureConfig=lgpPduAuxMeasDrClosureConfig, lgpPduRcpEntryPwrState=lgpPduRcpEntryPwrState, lgpPduRbLineEntryEpLLTenths=lgpPduRbLineEntryEpLLTenths, lgpPduRbEntryEcAvailBeforeAlarmHundredths=lgpPduRbEntryEcAvailBeforeAlarmHundredths, lgpPduAuxMeasTempThrshldUndrWarnDegF=lgpPduAuxMeasTempThrshldUndrWarnDegF, lgpPduRcpEntry=lgpPduRcpEntry, lgpPduRcpEntryEcThrshldOverAlarm=lgpPduRcpEntryEcThrshldOverAlarm, lgpPduEntry=lgpPduEntry, lgpPduRbEntryPf=lgpPduRbEntryPf, lgpPduAuxMeasTempThrshldOvrWarnDegF=lgpPduAuxMeasTempThrshldOvrWarnDegF, lgpPduEntryId=lgpPduEntryId, lgpPduAuxSensorTempSerialNum=lgpPduAuxSensorTempSerialNum, lgpPduRbEntrySysAssignLabel=lgpPduRbEntrySysAssignLabel, lgpPduRcpEntryUsrTag2=lgpPduRcpEntryUsrTag2, lgpPduAuxMeasTempThrshldOvrWarnDegC=lgpPduAuxMeasTempThrshldOvrWarnDegC, lgpPduRbEntryPositionRelative=lgpPduRbEntryPositionRelative, lgpPduRbLineEntryEc=lgpPduRbLineEntryEc, lgpPduRcpEntrySysAssignLabel=lgpPduRcpEntrySysAssignLabel, lgpPduPsEntryFreqRated=lgpPduPsEntryFreqRated, lgpPduRcpEntryRemoveReceptacleFromGroup=lgpPduRcpEntryRemoveReceptacleFromGroup, lgpPduRbEntryRcpCount=lgpPduRbEntryRcpCount, lgpPduRbEntryEcThrshldUndrAlm=lgpPduRbEntryEcThrshldUndrAlm, lgpPduAuxMeasTempThrshldOvrAlmDegF=lgpPduAuxMeasTempThrshldOvrAlmDegF, lgpPduRcpEntryEcCrestFactor=lgpPduRcpEntryEcCrestFactor, lgpPduEntrySysStatus=lgpPduEntrySysStatus, lgpPduRcpGroupDeleteGroup=lgpPduRcpGroupDeleteGroup, lgpPduAuxMeasSensorSysAssignLabel=lgpPduAuxMeasSensorSysAssignLabel, lgpPduRbEntrySwOverCurrentProtection=lgpPduRbEntrySwOverCurrentProtection, lgpPduRcpEntryEcThrshldOverWarn=lgpPduRcpEntryEcThrshldOverWarn, lgpPduPsLineEntryPwrLL=lgpPduPsLineEntryPwrLL, lgpPduRcpEntryIndex=lgpPduRcpEntryIndex, lgpPduAuxSensorHumThrshldOvrAlm=lgpPduAuxSensorHumThrshldOvrAlm, lgpPduRbLineEntryEcThrshldOvrWarn=lgpPduRbLineEntryEcThrshldOvrWarn, lgpPduRbEntryCapabilities=lgpPduRbEntryCapabilities, lgpPduRbLineEntryEcAvailBeforeAlarm=lgpPduRbLineEntryEcAvailBeforeAlarm, lgpPduEntrySysAssignLabel=lgpPduEntrySysAssignLabel, lgpPduPsEntryEpInputRated=lgpPduPsEntryEpInputRated, lgpPduRbEntryLineSource=lgpPduRbEntryLineSource, lgpPduRcpEntryEcHundredths=lgpPduRcpEntryEcHundredths, lgpPduRbEntryAp=lgpPduRbEntryAp, lgpPduAuxMeasHumThrshldUndrAlm=lgpPduAuxMeasHumThrshldUndrAlm, lgpPduAuxMeasTempThrshldUndrWarnDegC=lgpPduAuxMeasTempThrshldUndrWarnDegC, lgpPduRbLineEntryEcThrshldOvrAlm=lgpPduRbLineEntryEcThrshldOvrAlm, lgpPduAuxMeasTempThrshldOvrAlmDegC=lgpPduAuxMeasTempThrshldOvrAlmDegC, lgpPduPowerSource=lgpPduPowerSource, lgpPduPsLineEntryEcThrshldUndrAlarm=lgpPduPsLineEntryEcThrshldUndrAlarm)
