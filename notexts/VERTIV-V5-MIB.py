#
# PySNMP MIB module VERTIV-V5-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/vertiv/VERTIV-V5-MIB
# Produced by pysmi-1.1.12 at Wed Nov  6 08:36:10 2024
# On host fv-az984-999 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Unsigned32, Gauge32, Counter32, Integer32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, iso, Bits, ModuleIdentity, Counter64, TimeTicks, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Gauge32", "Counter32", "Integer32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "iso", "Bits", "ModuleIdentity", "Counter64", "TimeTicks", "NotificationType", "MibIdentifier")
TextualConvention, DisplayString, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "TruthValue")
vertiv = ModuleIdentity((1, 3, 6, 1, 4, 1, 21239))
vertiv.setRevisions(('2020-01-07 00:00', '2019-09-30 00:00', '2019-09-12 00:00', '2019-08-30 00:00', '2019-06-06 00:00', '2019-05-07 00:00', '2019-04-30 00:00', '2019-03-07 00:00', '2018-01-19 00:00', '2017-09-19 00:00', '2017-08-10 00:00', '2017-05-10 00:00', '2017-04-05 00:00', '2016-06-30 00:00', '2012-09-11 00:00',))
if mibBuilder.loadTexts: vertiv.setLastUpdated('202001070000Z')
if mibBuilder.loadTexts: vertiv.setOrganization('Vertiv')
v5 = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 5))
imd = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 5, 2))
deviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1))
productTitle = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productTitle.setStatus('current')
productVersion = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVersion.setStatus('current')
productFriendlyName = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productFriendlyName.setStatus('current')
productMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productMacAddress.setStatus('current')
deviceCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceCount.setStatus('current')
temperatureUnits = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahrenheit", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureUnits.setStatus('current')
productModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productModelNumber.setStatus('current')
productPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productPartNumber.setStatus('current')
productSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSerialNumber.setStatus('current')
productPlatform = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productPlatform.setStatus('current')
productHostname = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productHostname.setStatus('current')
productAlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productAlarmCount.setStatus('current')
productWarnCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productWarnCount.setStatus('current')
productManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productManufacturer.setStatus('current')
pdu = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3))
pduMainTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1), )
if mibBuilder.loadTexts: pduMainTable.setStatus('current')
pduMainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "pduMainIndex"))
if mibBuilder.loadTexts: pduMainEntry.setStatus('current')
pduMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: pduMainIndex.setStatus('current')
pduMainSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduMainSerial.setStatus('current')
pduMainName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduMainName.setStatus('current')
pduMainLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMainLabel.setStatus('current')
pduMainAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduMainAvail.setStatus('current')
pduMeterType = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wye", 0), ("delta", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduMeterType.setStatus('current')
pduTotalName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduTotalName.setStatus('current')
pduTotalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduTotalLabel.setStatus('current')
pduTotalRealPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduTotalRealPower.setStatus('current')
pduTotalApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('volt-amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduTotalApparentPower.setStatus('current')
pduTotalPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduTotalPowerFactor.setStatus('current')
pduTotalEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999000))).setUnits('watt-hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduTotalEnergy.setStatus('current')
pduPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2), )
if mibBuilder.loadTexts: pduPhaseTable.setStatus('current')
pduPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "pduPhaseIndex"))
if mibBuilder.loadTexts: pduPhaseEntry.setStatus('current')
pduPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: pduPhaseIndex.setStatus('current')
pduPhaseName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPhaseName.setStatus('current')
pduPhaseLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduPhaseLabel.setStatus('current')
pduPhaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 3100))).setUnits('decivolts (rms)').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPhaseVoltage.setStatus('current')
pduPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9900))).setUnits('centiamps (rms)').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPhaseCurrent.setStatus('current')
pduPhaseRealPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPhaseRealPower.setStatus('current')
pduPhaseApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1, 13), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('volt-amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPhaseApparentPower.setStatus('current')
pduPhasePowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1, 14), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPhasePowerFactor.setStatus('current')
pduPhaseEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1, 15), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999000))).setUnits('watt-hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPhaseEnergy.setStatus('current')
pduPhaseBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1, 17), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPhaseBalance.setStatus('current')
pduPhaseCurrentCrestFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1, 19), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPhaseCurrentCrestFactor.setStatus('current')
pduBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 3), )
if mibBuilder.loadTexts: pduBreakerTable.setStatus('current')
pduBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 3, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "pduBreakerIndex"))
if mibBuilder.loadTexts: pduBreakerEntry.setStatus('current')
pduBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: pduBreakerIndex.setStatus('current')
pduBreakerName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduBreakerName.setStatus('current')
pduBreakerLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduBreakerLabel.setStatus('current')
pduBreakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 3, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9900))).setUnits('centiamps (rms)').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduBreakerCurrent.setStatus('current')
pduBreakerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 3, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 3100))).setUnits('decivolts (rms)').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduBreakerVoltage.setStatus('current')
pduBreakerRealPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 3, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduBreakerRealPower.setStatus('current')
pduBreakerApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 3, 1, 13), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('volt-amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduBreakerApparentPower.setStatus('current')
pduBreakerPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 3, 1, 14), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduBreakerPowerFactor.setStatus('current')
pduBreakerEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 3, 1, 15), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999000))).setUnits('watt-hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduBreakerEnergy.setStatus('current')
pduLineTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 4), )
if mibBuilder.loadTexts: pduLineTable.setStatus('current')
pduLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 4, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "pduLineIndex"))
if mibBuilder.loadTexts: pduLineEntry.setStatus('current')
pduLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: pduLineIndex.setStatus('current')
pduLineName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduLineName.setStatus('current')
pduLineLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduLineLabel.setStatus('current')
pduLineCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 4, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9900))).setUnits('centiamps (rms)').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduLineCurrent.setStatus('current')
pduOutletSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5), )
if mibBuilder.loadTexts: pduOutletSwitchTable.setStatus('current')
pduOutletSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "pduOutletSwitchIndex"))
if mibBuilder.loadTexts: pduOutletSwitchEntry.setStatus('current')
pduOutletSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: pduOutletSwitchIndex.setStatus('current')
pduOutletSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletSwitchName.setStatus('current')
pduOutletSwitchLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletSwitchLabel.setStatus('current')
pduOutletSwitchState = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("on2off", 3), ("off2on", 4), ("rebootOn", 5), ("rebootOff", 6), ("unavailable", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletSwitchState.setStatus('current')
pduOutletSwitchRelayFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletSwitchRelayFailure.setStatus('current')
pduOutletSwitchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("cancel", 1), ("on", 2), ("onAfterDelay", 3), ("off", 4), ("offAfterDelay", 5), ("reboot", 6), ("rebootAfterDelay", 7), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletSwitchControl.setStatus('current')
pduOutletSwitchTimeToAction = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletSwitchTimeToAction.setStatus('current')
pduOutletSwitchOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletSwitchOnDelay.setStatus('current')
pduOutletSwitchOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletSwitchOffDelay.setStatus('current')
pduOutletSwitchRebootDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletSwitchRebootDelay.setStatus('current')
pduOutletSwitchRebootHoldDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletSwitchRebootHoldDelay.setStatus('current')
pduOutletSwitchPoaAction = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("last", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletSwitchPoaAction.setStatus('current')
pduOutletSwitchPoaDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletSwitchPoaDelay.setStatus('current')
pduOutletMeterTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6), )
if mibBuilder.loadTexts: pduOutletMeterTable.setStatus('current')
pduOutletMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "pduOutletMeterIndex"))
if mibBuilder.loadTexts: pduOutletMeterEntry.setStatus('current')
pduOutletMeterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: pduOutletMeterIndex.setStatus('current')
pduOutletMeterName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeterName.setStatus('current')
pduOutletMeterLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletMeterLabel.setStatus('current')
pduOutletMeterVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 3100))).setUnits('decivolts (rms)').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeterVoltage.setStatus('current')
pduOutletMeterCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9900))).setUnits('centiamps (rms)').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeterCurrent.setStatus('current')
pduOutletMeterRealPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeterRealPower.setStatus('current')
pduOutletMeterApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1, 13), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('volt-amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeterApparentPower.setStatus('current')
pduOutletMeterPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1, 14), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeterPowerFactor.setStatus('current')
pduOutletMeterEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1, 15), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999000))).setUnits('watt-hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeterEnergy.setStatus('current')
pduOutletMeterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8))).clone(namedValues=NamedValues(("resetEnergy", 1), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletMeterReset.setStatus('current')
pduOutletCurrentCrestFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1, 19), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletCurrentCrestFactor.setStatus('current')
tempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 4), )
if mibBuilder.loadTexts: tempSensorTable.setStatus('current')
tempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 4, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "tempSensorIndex"))
if mibBuilder.loadTexts: tempSensorEntry.setStatus('current')
tempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: tempSensorIndex.setStatus('current')
tempSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorSerial.setStatus('current')
tempSensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempSensorLabel.setStatus('current')
tempSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorAvail.setStatus('current')
tempSensorTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-400, 2540))).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorTemp.setStatus('current')
airFlowSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 5), )
if mibBuilder.loadTexts: airFlowSensorTable.setStatus('current')
airFlowSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 5, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "airFlowSensorIndex"))
if mibBuilder.loadTexts: airFlowSensorEntry.setStatus('current')
airFlowSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: airFlowSensorIndex.setStatus('current')
airFlowSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorSerial.setStatus('current')
airFlowSensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 5, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFlowSensorLabel.setStatus('current')
airFlowSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorAvail.setStatus('current')
airFlowSensorTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-400, 2540))).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorTemp.setStatus('current')
airFlowSensorFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorFlow.setStatus('current')
airFlowSensorHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorHumidity.setStatus('current')
airFlowSensorDewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-400, 2540))).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorDewPoint.setStatus('current')
t3hdSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8), )
if mibBuilder.loadTexts: t3hdSensorTable.setStatus('current')
t3hdSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "t3hdSensorIndex"))
if mibBuilder.loadTexts: t3hdSensorEntry.setStatus('current')
t3hdSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: t3hdSensorIndex.setStatus('current')
t3hdSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorSerial.setStatus('current')
t3hdSensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t3hdSensorLabel.setStatus('current')
t3hdSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorAvail.setStatus('current')
t3hdSensorIntLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t3hdSensorIntLabel.setStatus('current')
t3hdSensorIntTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-400, 2540))).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorIntTemp.setStatus('current')
t3hdSensorIntHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorIntHumidity.setStatus('current')
t3hdSensorIntDewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-400, 2540))).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorIntDewPoint.setStatus('current')
t3hdSensorExtAAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExtAAvail.setStatus('current')
t3hdSensorExtALabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t3hdSensorExtALabel.setStatus('current')
t3hdSensorExtATemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-400, 2540))).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExtATemp.setStatus('current')
t3hdSensorExtBAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExtBAvail.setStatus('current')
t3hdSensorExtBLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t3hdSensorExtBLabel.setStatus('current')
t3hdSensorExtBTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-400, 2540))).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExtBTemp.setStatus('current')
thdSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 9), )
if mibBuilder.loadTexts: thdSensorTable.setStatus('current')
thdSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 9, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "thdSensorIndex"))
if mibBuilder.loadTexts: thdSensorEntry.setStatus('current')
thdSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: thdSensorIndex.setStatus('current')
thdSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorSerial.setStatus('current')
thdSensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 9, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thdSensorLabel.setStatus('current')
thdSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorAvail.setStatus('current')
thdSensorTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-400, 2540))).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorTemp.setStatus('current')
thdSensorHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorHumidity.setStatus('current')
thdSensorDewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-400, 2540))).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorDewPoint.setStatus('current')
a2dSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11), )
if mibBuilder.loadTexts: a2dSensorTable.setStatus('current')
a2dSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "a2dSensorIndex"))
if mibBuilder.loadTexts: a2dSensorEntry.setStatus('current')
a2dSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: a2dSensorIndex.setStatus('current')
a2dSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2dSensorSerial.setStatus('current')
a2dSensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2dSensorLabel.setStatus('current')
a2dSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2dSensorAvail.setStatus('current')
a2dSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000000, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2dSensorValue.setStatus('current')
a2dSensorDisplayValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2dSensorDisplayValue.setStatus('current')
a2dSensorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("door", 1), ("powerFailure", 2), ("flood", 3), ("wscLeak", 4), ("wscFault", 5), ("smoke", 6), ("ivsNegGnd", 7), ("ivsPosGnd", 8), ("customVoltage", 9), ("customBinary", 10), ("customCurrent", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2dSensorMode.setStatus('current')
a2dSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2dSensorUnits.setStatus('current')
a2dSensorMin = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000000, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2dSensorMin.setStatus('current')
a2dSensorMax = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000000, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2dSensorMax.setStatus('current')
a2dSensorLowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2dSensorLowLabel.setStatus('current')
a2dSensorHighLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2dSensorHighLabel.setStatus('current')
a2dSensorAnalogLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2dSensorAnalogLabel.setStatus('current')
humiditySensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 12), )
if mibBuilder.loadTexts: humiditySensorTable.setStatus('current')
humiditySensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 12, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "humiditySensorIndex"))
if mibBuilder.loadTexts: humiditySensorEntry.setStatus('current')
humiditySensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: humiditySensorIndex.setStatus('current')
humiditySensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorSerial.setStatus('current')
humiditySensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 12, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorLabel.setStatus('current')
humiditySensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 12, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorAvail.setStatus('current')
humiditySensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorValue.setStatus('current')
sn2dSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13), )
if mibBuilder.loadTexts: sn2dSensorTable.setStatus('current')
sn2dSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "sn2dSensorIndex"))
if mibBuilder.loadTexts: sn2dSensorEntry.setStatus('current')
sn2dSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: sn2dSensorIndex.setStatus('current')
sn2dSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sn2dSensorSerial.setStatus('current')
sn2dSensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sn2dSensorLabel.setStatus('current')
sn2dSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sn2dSensorAvail.setStatus('current')
sn2dSensorDoor1Label = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sn2dSensorDoor1Label.setStatus('current')
sn2dSensorDoor1State = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sn2dSensorDoor1State.setStatus('current')
sn2dSensorDoor1DisplayState = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sn2dSensorDoor1DisplayState.setStatus('current')
sn2dSensorDoor2Label = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sn2dSensorDoor2Label.setStatus('current')
sn2dSensorDoor2State = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sn2dSensorDoor2State.setStatus('current')
sn2dSensorDoor2DisplayState = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sn2dSensorDoor2DisplayState.setStatus('current')
cooling = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30))
vrc = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1))
vrcMainTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 1), )
if mibBuilder.loadTexts: vrcMainTable.setStatus('current')
vrcMainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 1, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcMainIndex"))
if mibBuilder.loadTexts: vrcMainEntry.setStatus('current')
vrcMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcMainIndex.setStatus('current')
vrcMainSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainSerial.setStatus('current')
vrcMainName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainName.setStatus('current')
vrcMainLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainLabel.setStatus('current')
vrcMainAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainAvail.setStatus('current')
vrcMainPtTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2), )
if mibBuilder.loadTexts: vrcMainPtTable.setStatus('current')
vrcMainPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcMainPtIndex"))
if mibBuilder.loadTexts: vrcMainPtEntry.setStatus('current')
vrcMainPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcMainPtIndex.setStatus('current')
vrcMainPtRunState = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtRunState.setStatus('current')
vrcMainPtEevOpened = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtEevOpened.setStatus('current')
vrcMainPtAlarmNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtAlarmNumbers.setStatus('current')
vrcMainPtHistoryAlarmNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtHistoryAlarmNumbers.setStatus('current')
vrcMainPtHpAbnRecordCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtHpAbnRecordCnt.setStatus('current')
vrcMainPtMonitorBaudrate = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("error", 1), ("baud1200", 2), ("baud2400", 3), ("baud4800", 4), ("baud9600", 5), ("baud19200", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtMonitorBaudrate.setStatus('current')
vrcMainPtMonitorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtMonitorAddress.setStatus('current')
vrcMainPtLp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtLp.setStatus('current')
vrcMainPtFilterMaintRemind = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtFilterMaintRemind.setStatus('current')
vrcMainPtCoolingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtCoolingFlag.setStatus('current')
vrcMainPtFirstOnFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtFirstOnFlag.setStatus('current')
vrcMainPtNewAlarmFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtNewAlarmFlag.setStatus('current')
vrcMainPtComAlarmOutState = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtComAlarmOutState.setStatus('current')
vrcMainPtHighWaterInput = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtHighWaterInput.setStatus('current')
vrcMainPtHighWaterAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtHighWaterAlarm.setStatus('current')
vrcMainPtWaterUnderFloorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtWaterUnderFloorAlarm.setStatus('current')
vrcMainPtSwShutDownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtSwShutDownStatus.setStatus('current')
vrcMainPtRemoteShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtRemoteShutdown.setStatus('current')
vrcMainPtRemoteShutDownFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtRemoteShutDownFlag.setStatus('current')
vrcMainPtRemoteShutDownAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtRemoteShutDownAlarm.setStatus('current')
vrcMainPtHmiShutDownFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtHmiShutDownFlag.setStatus('current')
vrcMainPtLpAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtLpAlarm.setStatus('current')
vrcMainPtHpAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtHpAlarm.setStatus('current')
vrcMainPtLpFreqAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtLpFreqAlarm.setStatus('current')
vrcMainPtHpFreqAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtHpFreqAlarm.setStatus('current')
vrcMainPtLpSensorFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtLpSensorFailAlarm.setStatus('current')
vrcMainPtHpSensorFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtHpSensorFailAlarm.setStatus('current')
vrcMainPtEevCommFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtEevCommFailAlarm.setStatus('current')
vrcMainCfgTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3), )
if mibBuilder.loadTexts: vrcMainCfgTable.setStatus('current')
vrcMainCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcMainCfgIndex"))
if mibBuilder.loadTexts: vrcMainCfgEntry.setStatus('current')
vrcMainCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcMainCfgIndex.setStatus('current')
vrcMainCfgModelSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("tmLoc", 1), ("r035Ap", 2), ("r035Ak", 3), ("scLoc", 4), ("zeroULoc", 5), ("r035Ep", 6), ("r035Ek", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgModelSelect.setStatus('current')
vrcMainCfgSystemTimeYear = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 2099))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgSystemTimeYear.setStatus('current')
vrcMainCfgSystemTimeMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgSystemTimeMonth.setStatus('current')
vrcMainCfgSystemTimeDay = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgSystemTimeDay.setStatus('current')
vrcMainCfgSystemTimeHour = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgSystemTimeHour.setStatus('current')
vrcMainCfgSystemTimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgSystemTimeMin.setStatus('current')
vrcMainCfgSystemTimeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgSystemTimeSec.setStatus('current')
vrcMainCfgEevShtSettingMin = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 9), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgEevShtSettingMin.setStatus('current')
vrcMainCfgEevShtSettingMax = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 10), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgEevShtSettingMax.setStatus('current')
vrcMainCfgEevValveCloseSht = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 11), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgEevValveCloseSht.setStatus('current')
vrcMainCfgEevMopPressSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setUnits('decibars').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgEevMopPressSetting.setStatus('current')
vrcMainCfgLpdt = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgLpdt.setStatus('current')
vrcMainCfgDeadBand = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 14), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgDeadBand.setStatus('current')
vrcMainCfgOnOffSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgOnOffSwitch.setStatus('current')
vrcMainCfgVacuumState = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgVacuumState.setStatus('current')
vrcMainCfgControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supply", 1), ("return", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgControlMode.setStatus('current')
vrcMainCfgManualRunEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgManualRunEnable.setStatus('current')
vrcMainCfgRemShutdownInput = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgRemShutdownInput.setStatus('current')
vrcMainCfgMonitorShutDownFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgMonitorShutDownFlag.setStatus('current')
vrcMainCfgFirstOnPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgFirstOnPassword.setStatus('current')
vrcMainCfgFilterMaintSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgFilterMaintSetting.setStatus('current')
vrcMainCfgFilterMaintRemindTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 360))).setUnits('days').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgFilterMaintRemindTime.setStatus('current')
vrcMainCfgFilterMaintRemindCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("close", 1), ("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgFilterMaintRemindCtrl.setStatus('current')
vrcMainCfgCommonAlarmOutputDir = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgCommonAlarmOutputDir.setStatus('current')
vrcMainCfgHpAbnAlarmSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 360))).setUnits('decibars').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgHpAbnAlarmSetting.setStatus('current')
vrcMainCfgLpAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgLpAlarmCtrl.setStatus('current')
vrcMainCfgHpAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgHpAlarmCtrl.setStatus('current')
vrcMainCfgLpFreqAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgLpFreqAlarmCtrl.setStatus('current')
vrcMainCfgHpFreqAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgHpFreqAlarmCtrl.setStatus('current')
vrcMainCfgLpSensorFailAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgLpSensorFailAlarmCtrl.setStatus('current')
vrcMainCfgHpSensorFailAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgHpSensorFailAlarmCtrl.setStatus('current')
vrcMainCfgHighWaterAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("close", 1), ("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgHighWaterAlarmCtrl.setStatus('current')
vrcMainCfgRemShutdownAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgRemShutdownAlarmCtrl.setStatus('current')
vrcMainCfgEevCommFailAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgEevCommFailAlarmCtrl.setStatus('current')
vrcOutFanPtTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 4), )
if mibBuilder.loadTexts: vrcOutFanPtTable.setStatus('current')
vrcOutFanPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 4, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcOutFanPtIndex"))
if mibBuilder.loadTexts: vrcOutFanPtEntry.setStatus('current')
vrcOutFanPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcOutFanPtIndex.setStatus('current')
vrcOutFanPtName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcOutFanPtName.setStatus('current')
vrcOutFanPtSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcOutFanPtSpeed.setStatus('current')
vrcOutFanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 5), )
if mibBuilder.loadTexts: vrcOutFanCfgTable.setStatus('current')
vrcOutFanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 5, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcOutFanCfgIndex"))
if mibBuilder.loadTexts: vrcOutFanCfgEntry.setStatus('current')
vrcOutFanCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcOutFanCfgIndex.setStatus('current')
vrcOutFanCfgStartPress = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(190, 250))).setUnits('decibars').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcOutFanCfgStartPress.setStatus('current')
vrcOutFanCfgPressSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 80))).setUnits('decibars').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcOutFanCfgPressSetting.setStatus('current')
vrcOutFanCfgMinPowerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 50))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcOutFanCfgMinPowerVoltage.setStatus('current')
vrcOutFanCfgMaxPowerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcOutFanCfgMaxPowerVoltage.setStatus('current')
vrcOutFanCfgSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcOutFanCfgSpeed.setStatus('current')
vrcInFanPtTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 6), )
if mibBuilder.loadTexts: vrcInFanPtTable.setStatus('current')
vrcInFanPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 6, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcInFanPtIndex"))
if mibBuilder.loadTexts: vrcInFanPtEntry.setStatus('current')
vrcInFanPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcInFanPtIndex.setStatus('current')
vrcInFanPtName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 6, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcInFanPtName.setStatus('current')
vrcInFanPtRunTimeHours = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcInFanPtRunTimeHours.setStatus('current')
vrcInFanPtStartStopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcInFanPtStartStopCount.setStatus('current')
vrcInFanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7), )
if mibBuilder.loadTexts: vrcInFanCfgTable.setStatus('current')
vrcInFanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcInFanCfgIndex"))
if mibBuilder.loadTexts: vrcInFanCfgEntry.setStatus('current')
vrcInFanCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcInFanCfgIndex.setStatus('current')
vrcInFanCfgOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgOutputStatus.setStatus('current')
vrcInFanCfgLowSpeedStep = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setUnits('0.1%/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgLowSpeedStep.setStatus('current')
vrcInFanCfgHighSpeedStep = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setUnits('0.1%/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgHighSpeedStep.setStatus('current')
vrcInFanCfgMinSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 80))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgMinSpeed.setStatus('current')
vrcInFanCfgStandardSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(80, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgStandardSpeed.setStatus('current')
vrcInFanCfgMinCfc = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgMinCfc.setStatus('current')
vrcInFanCfgStandardCfc = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(85, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgStandardCfc.setStatus('current')
vrcInFanCfgStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgStartDelay.setStatus('current')
vrcInFanCfgStopDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgStopDelay.setStatus('current')
vrcInFanCfgReduceSpeedDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgReduceSpeedDelay.setStatus('current')
vrcInFanCfgJumpBand1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgJumpBand1.setStatus('current')
vrcInFanCfgJumpBand2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgJumpBand2.setStatus('current')
vrcInFanCfgJumpBand3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgJumpBand3.setStatus('current')
vrcInFanCfgJumpBand4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgJumpBand4.setStatus('current')
vrcInFanCfgJumpBand5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgJumpBand5.setStatus('current')
vrcInFanCfgJumpFreq1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgJumpFreq1.setStatus('current')
vrcInFanCfgJumpFreq2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgJumpFreq2.setStatus('current')
vrcInFanCfgJumpFreq3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgJumpFreq3.setStatus('current')
vrcInFanCfgJumpFreq4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgJumpFreq4.setStatus('current')
vrcInFanCfgJumpFreq5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgJumpFreq5.setStatus('current')
vrcInFanCfgTempP = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 150))).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgTempP.setStatus('current')
vrcInFanCfgTempI = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgTempI.setStatus('current')
vrcInFanCfgTempD = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgTempD.setStatus('current')
vrcCompPtTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8), )
if mibBuilder.loadTexts: vrcCompPtTable.setStatus('current')
vrcCompPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcCompPtIndex"))
if mibBuilder.loadTexts: vrcCompPtEntry.setStatus('current')
vrcCompPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcCompPtIndex.setStatus('current')
vrcCompPtName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtName.setStatus('current')
vrcCompPtCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtCapacity.setStatus('current')
vrcCompPtRunTimeHours = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtRunTimeHours.setStatus('current')
vrcCompPtStartStopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtStartStopCount.setStatus('current')
vrcCompPtDriverFaultU00 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU00.setStatus('current')
vrcCompPtDriverFaultU01 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU01.setStatus('current')
vrcCompPtDriverFaultU02 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU02.setStatus('current')
vrcCompPtDriverFaultU03 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU03.setStatus('current')
vrcCompPtDriverFaultU04 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU04.setStatus('current')
vrcCompPtDriverFaultU05 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU05.setStatus('current')
vrcCompPtDriverFaultU06 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU06.setStatus('current')
vrcCompPtDriverFaultU07 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU07.setStatus('current')
vrcCompPtDriverFaultU08 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU08.setStatus('current')
vrcCompPtDriverFaultU09 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU09.setStatus('current')
vrcCompPtDriverFaultU10 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU10.setStatus('current')
vrcCompPtDriverFaultU11 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU11.setStatus('current')
vrcCompPtDriverFaultU12 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU12.setStatus('current')
vrcCompPtDriverFaultU13 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU13.setStatus('current')
vrcCompPtDriverFaultU14 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU14.setStatus('current')
vrcCompPtDriverFaultU15 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU15.setStatus('current')
vrcCompPtDriverCommFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverCommFailAlarm.setStatus('current')
vrcCompPtFaultLockAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtFaultLockAlarm.setStatus('current')
vrcCompCfgTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9), )
if mibBuilder.loadTexts: vrcCompCfgTable.setStatus('current')
vrcCompCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcCompCfgIndex"))
if mibBuilder.loadTexts: vrcCompCfgEntry.setStatus('current')
vrcCompCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcCompCfgIndex.setStatus('current')
vrcCompCfgOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgOutputStatus.setStatus('current')
vrcCompCfgOutputDeadBand = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgOutputDeadBand.setStatus('current')
vrcCompCfgCapacityOutputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgCapacityOutputValue.setStatus('current')
vrcCompCfgMinCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 50))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgMinCapacity.setStatus('current')
vrcCompCfgStartCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgStartCapacity.setStatus('current')
vrcCompCfgStandardCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(80, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgStandardCapacity.setStatus('current')
vrcCompCfgStartCfc = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgStartCfc.setStatus('current')
vrcCompCfgStopCfc = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-200, -50))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgStopCfc.setStatus('current')
vrcCompCfgMinRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgMinRunTime.setStatus('current')
vrcCompCfgMinStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgMinStopTime.setStatus('current')
vrcCompCfgJumpBand1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgJumpBand1.setStatus('current')
vrcCompCfgJumpBand2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgJumpBand2.setStatus('current')
vrcCompCfgJumpBand3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgJumpBand3.setStatus('current')
vrcCompCfgJumpBand4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgJumpBand4.setStatus('current')
vrcCompCfgJumpBand5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgJumpBand5.setStatus('current')
vrcCompCfgJumpFreq1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgJumpFreq1.setStatus('current')
vrcCompCfgJumpFreq2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgJumpFreq2.setStatus('current')
vrcCompCfgJumpFreq3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgJumpFreq3.setStatus('current')
vrcCompCfgJumpFreq4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgJumpFreq4.setStatus('current')
vrcCompCfgJumpFreq5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgJumpFreq5.setStatus('current')
vrcCompCfgTempP = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 22), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgTempP.setStatus('current')
vrcCompCfgTempI = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgTempI.setStatus('current')
vrcCompCfgTempD = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgTempD.setStatus('current')
vrcCompCfgDriverFaultAlmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgDriverFaultAlmCtrl.setStatus('current')
vrcCompCfgDriverCommFailAlmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgDriverCommFailAlmCtrl.setStatus('current')
vrcCompCfgFaultLockAlmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgFaultLockAlmCtrl.setStatus('current')
vrcReturnPtTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 10), )
if mibBuilder.loadTexts: vrcReturnPtTable.setStatus('current')
vrcReturnPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 10, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcReturnPtIndex"))
if mibBuilder.loadTexts: vrcReturnPtEntry.setStatus('current')
vrcReturnPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcReturnPtIndex.setStatus('current')
vrcReturnPtName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 10, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcReturnPtName.setStatus('current')
vrcReturnPtTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 10, 1, 3), Integer32()).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcReturnPtTemp.setStatus('current')
vrcReturnPtHighTempAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 10, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcReturnPtHighTempAlarm.setStatus('current')
vrcReturnPtTempSensorFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 10, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcReturnPtTempSensorFailAlarm.setStatus('current')
vrcReturnCfgTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 11), )
if mibBuilder.loadTexts: vrcReturnCfgTable.setStatus('current')
vrcReturnCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 11, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcReturnCfgIndex"))
if mibBuilder.loadTexts: vrcReturnCfgEntry.setStatus('current')
vrcReturnCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcReturnCfgIndex.setStatus('current')
vrcReturnCfgOilCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 50))).setUnits('decihours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcReturnCfgOilCycle.setStatus('current')
vrcReturnCfgOilRunCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcReturnCfgOilRunCapacity.setStatus('current')
vrcReturnCfgOilRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcReturnCfgOilRunTime.setStatus('current')
vrcReturnCfgTempCalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 11, 1, 5), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcReturnCfgTempCalValue.setStatus('current')
vrcReturnCfgTempSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 11, 1, 6), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcReturnCfgTempSetting.setStatus('current')
vrcReturnCfgHighTempAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 11, 1, 7), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcReturnCfgHighTempAlarmValue.setStatus('current')
vrcReturnCfgHighTempAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("close", 1), ("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcReturnCfgHighTempAlarmCtrl.setStatus('current')
vrcReturnCfgTempSensFailAlmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("close", 1), ("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcReturnCfgTempSensFailAlmCtrl.setStatus('current')
vrcSupplyPtTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 12), )
if mibBuilder.loadTexts: vrcSupplyPtTable.setStatus('current')
vrcSupplyPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 12, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcSupplyPtIndex"))
if mibBuilder.loadTexts: vrcSupplyPtEntry.setStatus('current')
vrcSupplyPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcSupplyPtIndex.setStatus('current')
vrcSupplyPtName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 12, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcSupplyPtName.setStatus('current')
vrcSupplyPtTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 12, 1, 3), Integer32()).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcSupplyPtTemp.setStatus('current')
vrcSupplyPtLowTempAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 12, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcSupplyPtLowTempAlarm.setStatus('current')
vrcSupplyPtHighTempAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 12, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcSupplyPtHighTempAlarm.setStatus('current')
vrcSupplyPtTempSensorFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 12, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcSupplyPtTempSensorFailAlarm.setStatus('current')
vrcSupplyCfgTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 13), )
if mibBuilder.loadTexts: vrcSupplyCfgTable.setStatus('current')
vrcSupplyCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 13, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcSupplyCfgIndex"))
if mibBuilder.loadTexts: vrcSupplyCfgEntry.setStatus('current')
vrcSupplyCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcSupplyCfgIndex.setStatus('current')
vrcSupplyCfgTempCalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 13, 1, 2), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcSupplyCfgTempCalValue.setStatus('current')
vrcSupplyCfgTempSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 13, 1, 3), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcSupplyCfgTempSetting.setStatus('current')
vrcSupplyCfgLowTempAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 13, 1, 4), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcSupplyCfgLowTempAlarmValue.setStatus('current')
vrcSupplyCfgHighTempAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 13, 1, 5), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcSupplyCfgHighTempAlarmValue.setStatus('current')
vrcSupplyCfgLowTempAlmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("close", 1), ("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcSupplyCfgLowTempAlmCtrl.setStatus('current')
vrcSupplyCfgHighTempAlmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("close", 1), ("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcSupplyCfgHighTempAlmCtrl.setStatus('current')
vrcSupplyCfgTempSensFailAlmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("close", 1), ("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcSupplyCfgTempSensFailAlmCtrl.setStatus('current')
vrcPowerPtTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 14), )
if mibBuilder.loadTexts: vrcPowerPtTable.setStatus('current')
vrcPowerPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 14, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcPowerPtIndex"))
if mibBuilder.loadTexts: vrcPowerPtEntry.setStatus('current')
vrcPowerPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcPowerPtIndex.setStatus('current')
vrcPowerPtName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 14, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcPowerPtName.setStatus('current')
vrcPowerPtVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('decivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcPowerPtVoltage.setStatus('current')
vrcPowerPtFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('decihertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcPowerPtFrequency.setStatus('current')
vrcPowerPtLowVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 14, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcPowerPtLowVoltageAlarm.setStatus('current')
vrcPowerPtHighVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 14, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcPowerPtHighVoltageAlarm.setStatus('current')
vrcPowerPtLossOfPhasePowerAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 14, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcPowerPtLossOfPhasePowerAlarm.setStatus('current')
vrcPowerPtLossOfPowerAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 14, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcPowerPtLossOfPowerAlarm.setStatus('current')
vrcPowerPtFrequencyErrorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 14, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcPowerPtFrequencyErrorAlarm.setStatus('current')
vrcPowerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 15), )
if mibBuilder.loadTexts: vrcPowerCfgTable.setStatus('current')
vrcPowerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 15, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcPowerCfgIndex"))
if mibBuilder.loadTexts: vrcPowerCfgEntry.setStatus('current')
vrcPowerCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcPowerCfgIndex.setStatus('current')
vrcPowerCfgLowVoltageSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 230))).setUnits('volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcPowerCfgLowVoltageSetting.setStatus('current')
vrcPowerCfgHighVoltageSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 300))).setUnits('volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcPowerCfgHighVoltageSetting.setStatus('current')
vrcPowerCfgLowVoltageAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("close", 1), ("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcPowerCfgLowVoltageAlarmCtrl.setStatus('current')
vrcPowerCfgHighVoltageAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("close", 1), ("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcPowerCfgHighVoltageAlarmCtrl.setStatus('current')
vrcPowerCfgLossOfPowerAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("close", 1), ("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcPowerCfgLossOfPowerAlarmCtrl.setStatus('current')
vrcPowerCfgFreqErrorAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("close", 1), ("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcPowerCfgFreqErrorAlarmCtrl.setStatus('current')
vrcOutdoorPtTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 16), )
if mibBuilder.loadTexts: vrcOutdoorPtTable.setStatus('current')
vrcOutdoorPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 16, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcOutdoorPtIndex"))
if mibBuilder.loadTexts: vrcOutdoorPtEntry.setStatus('current')
vrcOutdoorPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcOutdoorPtIndex.setStatus('current')
vrcOutdoorPtName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 16, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcOutdoorPtName.setStatus('current')
vrcOutdoorPtTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 16, 1, 3), Integer32()).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcOutdoorPtTemp.setStatus('current')
vrcDischPtTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 18), )
if mibBuilder.loadTexts: vrcDischPtTable.setStatus('current')
vrcDischPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 18, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcDischPtIndex"))
if mibBuilder.loadTexts: vrcDischPtEntry.setStatus('current')
vrcDischPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcDischPtIndex.setStatus('current')
vrcDischPtName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 18, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcDischPtName.setStatus('current')
vrcDischPtTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 18, 1, 3), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcDischPtTemp.setStatus('current')
vrcDischPtPressure = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 460))).setUnits('decibars').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcDischPtPressure.setStatus('current')
vrcDischPtHighTempAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 18, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcDischPtHighTempAlarm.setStatus('current')
vrcDischPtHighTempFreqAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 18, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcDischPtHighTempFreqAlarm.setStatus('current')
vrcDischPtTempSensorFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 18, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcDischPtTempSensorFailAlarm.setStatus('current')
vrcDischCfgTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 19), )
if mibBuilder.loadTexts: vrcDischCfgTable.setStatus('current')
vrcDischCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 19, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcDischCfgIndex"))
if mibBuilder.loadTexts: vrcDischCfgEntry.setStatus('current')
vrcDischCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcDischCfgIndex.setStatus('current')
vrcDischCfgTempCalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 19, 1, 2), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcDischCfgTempCalValue.setStatus('current')
vrcDischCfgPressCalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('decibars').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcDischCfgPressCalValue.setStatus('current')
vrcDischCfgHighTempAlmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcDischCfgHighTempAlmCtrl.setStatus('current')
vrcDischCfgHighTempFreqAlmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcDischCfgHighTempFreqAlmCtrl.setStatus('current')
vrcDischCfgTempSensFailAlmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcDischCfgTempSensFailAlmCtrl.setStatus('current')
vrcSuctPtTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 20), )
if mibBuilder.loadTexts: vrcSuctPtTable.setStatus('current')
vrcSuctPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 20, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcSuctPtIndex"))
if mibBuilder.loadTexts: vrcSuctPtEntry.setStatus('current')
vrcSuctPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcSuctPtIndex.setStatus('current')
vrcSuctPtName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 20, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcSuctPtName.setStatus('current')
vrcSuctPtTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 20, 1, 3), Integer32()).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcSuctPtTemp.setStatus('current')
vrcSuctPtPressure = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 173))).setUnits('decibars').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcSuctPtPressure.setStatus('current')
vrcSuctPtSuperHeatTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 20, 1, 5), Integer32()).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcSuctPtSuperHeatTemp.setStatus('current')
vrcSuctPtTempSensorFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 20, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcSuctPtTempSensorFailAlarm.setStatus('current')
vrcSuctCfgTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 21), )
if mibBuilder.loadTexts: vrcSuctCfgTable.setStatus('current')
vrcSuctCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 21, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcSuctCfgIndex"))
if mibBuilder.loadTexts: vrcSuctCfgEntry.setStatus('current')
vrcSuctCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcSuctCfgIndex.setStatus('current')
vrcSuctCfgPressCalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('decibars').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcSuctCfgPressCalValue.setStatus('current')
vrcSuctCfgTempSensFailAlmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcSuctCfgTempSensFailAlmCtrl.setStatus('current')
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767))
trapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0))
trapObj = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 1))
trapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("warning", 1), ("alarm", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapSeverity.setStatus('current')
trapThreshType = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapThreshType.setStatus('current')
internalTestNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10101))
if mibBuilder.loadTexts: internalTestNOTIFY.setStatus('current')
pduMainAvailNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10305)).setObjects(("VERTIV-V5-MIB", "pduMainAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"))
if mibBuilder.loadTexts: pduMainAvailNOTIFY.setStatus('current')
pduMainAvailCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20305)).setObjects(("VERTIV-V5-MIB", "pduMainAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"))
if mibBuilder.loadTexts: pduMainAvailCLEAR.setStatus('current')
pduTotalRealPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10309)).setObjects(("VERTIV-V5-MIB", "pduTotalRealPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduTotalLabel"))
if mibBuilder.loadTexts: pduTotalRealPowerNOTIFY.setStatus('current')
pduTotalRealPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20309)).setObjects(("VERTIV-V5-MIB", "pduTotalRealPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduTotalLabel"))
if mibBuilder.loadTexts: pduTotalRealPowerCLEAR.setStatus('current')
pduTotalApparentPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10310)).setObjects(("VERTIV-V5-MIB", "pduTotalApparentPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduTotalLabel"))
if mibBuilder.loadTexts: pduTotalApparentPowerNOTIFY.setStatus('current')
pduTotalApparentPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20310)).setObjects(("VERTIV-V5-MIB", "pduTotalApparentPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduTotalLabel"))
if mibBuilder.loadTexts: pduTotalApparentPowerCLEAR.setStatus('current')
pduTotalPowerFactorNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10311)).setObjects(("VERTIV-V5-MIB", "pduTotalPowerFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduTotalLabel"))
if mibBuilder.loadTexts: pduTotalPowerFactorNOTIFY.setStatus('current')
pduTotalPowerFactorCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20311)).setObjects(("VERTIV-V5-MIB", "pduTotalPowerFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduTotalLabel"))
if mibBuilder.loadTexts: pduTotalPowerFactorCLEAR.setStatus('current')
pduTotalEnergyNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10312)).setObjects(("VERTIV-V5-MIB", "pduTotalEnergy"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduTotalLabel"))
if mibBuilder.loadTexts: pduTotalEnergyNOTIFY.setStatus('current')
pduTotalEnergyCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20312)).setObjects(("VERTIV-V5-MIB", "pduTotalEnergy"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduTotalLabel"))
if mibBuilder.loadTexts: pduTotalEnergyCLEAR.setStatus('current')
pduPhaseVoltageNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10324)).setObjects(("VERTIV-V5-MIB", "pduPhaseVoltage"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseVoltageNOTIFY.setStatus('current')
pduPhaseVoltageCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20324)).setObjects(("VERTIV-V5-MIB", "pduPhaseVoltage"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseVoltageCLEAR.setStatus('current')
pduPhaseCurrentNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10328)).setObjects(("VERTIV-V5-MIB", "pduPhaseCurrent"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseCurrentNOTIFY.setStatus('current')
pduPhaseCurrentCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20328)).setObjects(("VERTIV-V5-MIB", "pduPhaseCurrent"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseCurrentCLEAR.setStatus('current')
pduPhaseRealPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10332)).setObjects(("VERTIV-V5-MIB", "pduPhaseRealPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseRealPowerNOTIFY.setStatus('current')
pduPhaseRealPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20332)).setObjects(("VERTIV-V5-MIB", "pduPhaseRealPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseRealPowerCLEAR.setStatus('current')
pduPhaseApparentPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10333)).setObjects(("VERTIV-V5-MIB", "pduPhaseApparentPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseApparentPowerNOTIFY.setStatus('current')
pduPhaseApparentPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20333)).setObjects(("VERTIV-V5-MIB", "pduPhaseApparentPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseApparentPowerCLEAR.setStatus('current')
pduPhasePowerFactorNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10334)).setObjects(("VERTIV-V5-MIB", "pduPhasePowerFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhasePowerFactorNOTIFY.setStatus('current')
pduPhasePowerFactorCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20334)).setObjects(("VERTIV-V5-MIB", "pduPhasePowerFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhasePowerFactorCLEAR.setStatus('current')
pduPhaseEnergyNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10335)).setObjects(("VERTIV-V5-MIB", "pduPhaseEnergy"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseEnergyNOTIFY.setStatus('current')
pduPhaseEnergyCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20335)).setObjects(("VERTIV-V5-MIB", "pduPhaseEnergy"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseEnergyCLEAR.setStatus('current')
pduPhaseBalanceNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10337)).setObjects(("VERTIV-V5-MIB", "pduPhaseBalance"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseBalanceNOTIFY.setStatus('current')
pduPhaseBalanceCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20337)).setObjects(("VERTIV-V5-MIB", "pduPhaseBalance"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseBalanceCLEAR.setStatus('current')
pduPhaseCurrentCrestFactorNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10339)).setObjects(("VERTIV-V5-MIB", "pduPhaseCurrentCrestFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseCurrentCrestFactorNOTIFY.setStatus('current')
pduPhaseCurrentCrestFactorCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20339)).setObjects(("VERTIV-V5-MIB", "pduPhaseCurrentCrestFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseCurrentCrestFactorCLEAR.setStatus('current')
pduBreakerCurrentNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10354)).setObjects(("VERTIV-V5-MIB", "pduBreakerCurrent"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerCurrentNOTIFY.setStatus('current')
pduBreakerCurrentCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20354)).setObjects(("VERTIV-V5-MIB", "pduBreakerCurrent"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerCurrentCLEAR.setStatus('current')
pduBreakerVoltageNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10358)).setObjects(("VERTIV-V5-MIB", "pduBreakerVoltage"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerVoltageNOTIFY.setStatus('current')
pduBreakerVoltageCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20358)).setObjects(("VERTIV-V5-MIB", "pduBreakerVoltage"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerVoltageCLEAR.setStatus('current')
pduBreakerRealPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10362)).setObjects(("VERTIV-V5-MIB", "pduBreakerRealPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerRealPowerNOTIFY.setStatus('current')
pduBreakerRealPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20362)).setObjects(("VERTIV-V5-MIB", "pduBreakerRealPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerRealPowerCLEAR.setStatus('current')
pduBreakerApparentPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10363)).setObjects(("VERTIV-V5-MIB", "pduBreakerApparentPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerApparentPowerNOTIFY.setStatus('current')
pduBreakerApparentPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20363)).setObjects(("VERTIV-V5-MIB", "pduBreakerApparentPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerApparentPowerCLEAR.setStatus('current')
pduBreakerPowerFactorNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10364)).setObjects(("VERTIV-V5-MIB", "pduBreakerPowerFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerPowerFactorNOTIFY.setStatus('current')
pduBreakerPowerFactorCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20364)).setObjects(("VERTIV-V5-MIB", "pduBreakerPowerFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerPowerFactorCLEAR.setStatus('current')
pduBreakerEnergyNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10365)).setObjects(("VERTIV-V5-MIB", "pduBreakerEnergy"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerEnergyNOTIFY.setStatus('current')
pduBreakerEnergyCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20365)).setObjects(("VERTIV-V5-MIB", "pduBreakerEnergy"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerEnergyCLEAR.setStatus('current')
pduLineCurrentNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10374)).setObjects(("VERTIV-V5-MIB", "pduLineCurrent"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduLineLabel"))
if mibBuilder.loadTexts: pduLineCurrentNOTIFY.setStatus('current')
pduLineCurrentCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20374)).setObjects(("VERTIV-V5-MIB", "pduLineCurrent"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduLineLabel"))
if mibBuilder.loadTexts: pduLineCurrentCLEAR.setStatus('current')
pduOutletMeterVoltageNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10385)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterVoltage"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterVoltageNOTIFY.setStatus('current')
pduOutletMeterVoltageCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20385)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterVoltage"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterVoltageCLEAR.setStatus('current')
pduOutletMeterCurrentNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10389)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterCurrent"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterCurrentNOTIFY.setStatus('current')
pduOutletMeterCurrentCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20389)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterCurrent"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterCurrentCLEAR.setStatus('current')
pduOutletMeterRealPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10393)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterRealPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterRealPowerNOTIFY.setStatus('current')
pduOutletMeterRealPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20393)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterRealPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterRealPowerCLEAR.setStatus('current')
pduOutletMeterApparentPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10394)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterApparentPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterApparentPowerNOTIFY.setStatus('current')
pduOutletMeterApparentPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20394)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterApparentPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterApparentPowerCLEAR.setStatus('current')
pduOutletMeterPowerFactorNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10395)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterPowerFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterPowerFactorNOTIFY.setStatus('current')
pduOutletMeterPowerFactorCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20395)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterPowerFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterPowerFactorCLEAR.setStatus('current')
pduOutletMeterEnergyNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10396)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterEnergy"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterEnergyNOTIFY.setStatus('current')
pduOutletMeterEnergyCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20396)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterEnergy"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterEnergyCLEAR.setStatus('current')
pduOutletCurrentCrestFactorNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10400)).setObjects(("VERTIV-V5-MIB", "pduOutletCurrentCrestFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletCurrentCrestFactorNOTIFY.setStatus('current')
pduOutletCurrentCrestFactorCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20400)).setObjects(("VERTIV-V5-MIB", "pduOutletCurrentCrestFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletCurrentCrestFactorCLEAR.setStatus('current')
tempSensorAvailNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10404)).setObjects(("VERTIV-V5-MIB", "tempSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "tempSensorLabel"))
if mibBuilder.loadTexts: tempSensorAvailNOTIFY.setStatus('current')
tempSensorAvailCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20404)).setObjects(("VERTIV-V5-MIB", "tempSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "tempSensorLabel"))
if mibBuilder.loadTexts: tempSensorAvailCLEAR.setStatus('current')
tempSensorTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10405)).setObjects(("VERTIV-V5-MIB", "tempSensorTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "tempSensorLabel"))
if mibBuilder.loadTexts: tempSensorTempNOTIFY.setStatus('current')
tempSensorTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20405)).setObjects(("VERTIV-V5-MIB", "tempSensorTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "tempSensorLabel"))
if mibBuilder.loadTexts: tempSensorTempCLEAR.setStatus('current')
airFlowSensorAvailNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10504)).setObjects(("VERTIV-V5-MIB", "airFlowSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "airFlowSensorLabel"))
if mibBuilder.loadTexts: airFlowSensorAvailNOTIFY.setStatus('current')
airFlowSensorAvailCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20504)).setObjects(("VERTIV-V5-MIB", "airFlowSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "airFlowSensorLabel"))
if mibBuilder.loadTexts: airFlowSensorAvailCLEAR.setStatus('current')
airFlowSensorTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10505)).setObjects(("VERTIV-V5-MIB", "airFlowSensorTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "airFlowSensorLabel"))
if mibBuilder.loadTexts: airFlowSensorTempNOTIFY.setStatus('current')
airFlowSensorTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20505)).setObjects(("VERTIV-V5-MIB", "airFlowSensorTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "airFlowSensorLabel"))
if mibBuilder.loadTexts: airFlowSensorTempCLEAR.setStatus('current')
airFlowSensorFlowNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10506)).setObjects(("VERTIV-V5-MIB", "airFlowSensorFlow"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "airFlowSensorLabel"))
if mibBuilder.loadTexts: airFlowSensorFlowNOTIFY.setStatus('current')
airFlowSensorFlowCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20506)).setObjects(("VERTIV-V5-MIB", "airFlowSensorFlow"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "airFlowSensorLabel"))
if mibBuilder.loadTexts: airFlowSensorFlowCLEAR.setStatus('current')
airFlowSensorHumidityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10507)).setObjects(("VERTIV-V5-MIB", "airFlowSensorHumidity"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "airFlowSensorLabel"))
if mibBuilder.loadTexts: airFlowSensorHumidityNOTIFY.setStatus('current')
airFlowSensorHumidityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20507)).setObjects(("VERTIV-V5-MIB", "airFlowSensorHumidity"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "airFlowSensorLabel"))
if mibBuilder.loadTexts: airFlowSensorHumidityCLEAR.setStatus('current')
airFlowSensorDewPointNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10508)).setObjects(("VERTIV-V5-MIB", "airFlowSensorDewPoint"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "airFlowSensorLabel"))
if mibBuilder.loadTexts: airFlowSensorDewPointNOTIFY.setStatus('current')
airFlowSensorDewPointCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20508)).setObjects(("VERTIV-V5-MIB", "airFlowSensorDewPoint"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "airFlowSensorLabel"))
if mibBuilder.loadTexts: airFlowSensorDewPointCLEAR.setStatus('current')
t3hdSensorAvailNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10804)).setObjects(("VERTIV-V5-MIB", "t3hdSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"))
if mibBuilder.loadTexts: t3hdSensorAvailNOTIFY.setStatus('current')
t3hdSensorAvailCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20804)).setObjects(("VERTIV-V5-MIB", "t3hdSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"))
if mibBuilder.loadTexts: t3hdSensorAvailCLEAR.setStatus('current')
t3hdSensorIntTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10806)).setObjects(("VERTIV-V5-MIB", "t3hdSensorIntTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"), ("VERTIV-V5-MIB", "t3hdSensorIntLabel"))
if mibBuilder.loadTexts: t3hdSensorIntTempNOTIFY.setStatus('current')
t3hdSensorIntTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20806)).setObjects(("VERTIV-V5-MIB", "t3hdSensorIntTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"), ("VERTIV-V5-MIB", "t3hdSensorIntLabel"))
if mibBuilder.loadTexts: t3hdSensorIntTempCLEAR.setStatus('current')
t3hdSensorIntHumidityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10807)).setObjects(("VERTIV-V5-MIB", "t3hdSensorIntHumidity"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"), ("VERTIV-V5-MIB", "t3hdSensorIntLabel"))
if mibBuilder.loadTexts: t3hdSensorIntHumidityNOTIFY.setStatus('current')
t3hdSensorIntHumidityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20807)).setObjects(("VERTIV-V5-MIB", "t3hdSensorIntHumidity"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"), ("VERTIV-V5-MIB", "t3hdSensorIntLabel"))
if mibBuilder.loadTexts: t3hdSensorIntHumidityCLEAR.setStatus('current')
t3hdSensorIntDewPointNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10808)).setObjects(("VERTIV-V5-MIB", "t3hdSensorIntDewPoint"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"), ("VERTIV-V5-MIB", "t3hdSensorIntLabel"))
if mibBuilder.loadTexts: t3hdSensorIntDewPointNOTIFY.setStatus('current')
t3hdSensorIntDewPointCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20808)).setObjects(("VERTIV-V5-MIB", "t3hdSensorIntDewPoint"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"), ("VERTIV-V5-MIB", "t3hdSensorIntLabel"))
if mibBuilder.loadTexts: t3hdSensorIntDewPointCLEAR.setStatus('current')
t3hdSensorExtATempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10811)).setObjects(("VERTIV-V5-MIB", "t3hdSensorExtATemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"), ("VERTIV-V5-MIB", "t3hdSensorExtALabel"))
if mibBuilder.loadTexts: t3hdSensorExtATempNOTIFY.setStatus('current')
t3hdSensorExtATempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20811)).setObjects(("VERTIV-V5-MIB", "t3hdSensorExtATemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"), ("VERTIV-V5-MIB", "t3hdSensorExtALabel"))
if mibBuilder.loadTexts: t3hdSensorExtATempCLEAR.setStatus('current')
t3hdSensorExtBTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10814)).setObjects(("VERTIV-V5-MIB", "t3hdSensorExtBTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"), ("VERTIV-V5-MIB", "t3hdSensorExtBLabel"))
if mibBuilder.loadTexts: t3hdSensorExtBTempNOTIFY.setStatus('current')
t3hdSensorExtBTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20814)).setObjects(("VERTIV-V5-MIB", "t3hdSensorExtBTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"), ("VERTIV-V5-MIB", "t3hdSensorExtBLabel"))
if mibBuilder.loadTexts: t3hdSensorExtBTempCLEAR.setStatus('current')
thdSensorAvailNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10904)).setObjects(("VERTIV-V5-MIB", "thdSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "thdSensorLabel"))
if mibBuilder.loadTexts: thdSensorAvailNOTIFY.setStatus('current')
thdSensorAvailCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20904)).setObjects(("VERTIV-V5-MIB", "thdSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "thdSensorLabel"))
if mibBuilder.loadTexts: thdSensorAvailCLEAR.setStatus('current')
thdSensorTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10905)).setObjects(("VERTIV-V5-MIB", "thdSensorTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "thdSensorLabel"))
if mibBuilder.loadTexts: thdSensorTempNOTIFY.setStatus('current')
thdSensorTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20905)).setObjects(("VERTIV-V5-MIB", "thdSensorTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "thdSensorLabel"))
if mibBuilder.loadTexts: thdSensorTempCLEAR.setStatus('current')
thdSensorHumidityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10906)).setObjects(("VERTIV-V5-MIB", "thdSensorHumidity"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "thdSensorLabel"))
if mibBuilder.loadTexts: thdSensorHumidityNOTIFY.setStatus('current')
thdSensorHumidityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20906)).setObjects(("VERTIV-V5-MIB", "thdSensorHumidity"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "thdSensorLabel"))
if mibBuilder.loadTexts: thdSensorHumidityCLEAR.setStatus('current')
thdSensorDewPointNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10907)).setObjects(("VERTIV-V5-MIB", "thdSensorDewPoint"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "thdSensorLabel"))
if mibBuilder.loadTexts: thdSensorDewPointNOTIFY.setStatus('current')
thdSensorDewPointCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20907)).setObjects(("VERTIV-V5-MIB", "thdSensorDewPoint"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "thdSensorLabel"))
if mibBuilder.loadTexts: thdSensorDewPointCLEAR.setStatus('current')
a2dSensorAvailNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 11104)).setObjects(("VERTIV-V5-MIB", "a2dSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "a2dSensorLabel"))
if mibBuilder.loadTexts: a2dSensorAvailNOTIFY.setStatus('current')
a2dSensorAvailCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 21104)).setObjects(("VERTIV-V5-MIB", "a2dSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "a2dSensorLabel"))
if mibBuilder.loadTexts: a2dSensorAvailCLEAR.setStatus('current')
a2dSensorValueNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 11105)).setObjects(("VERTIV-V5-MIB", "a2dSensorValue"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "a2dSensorLabel"), ("VERTIV-V5-MIB", "a2dSensorAnalogLabel"), ("VERTIV-V5-MIB", "a2dSensorDisplayValue"))
if mibBuilder.loadTexts: a2dSensorValueNOTIFY.setStatus('current')
a2dSensorValueCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 21105)).setObjects(("VERTIV-V5-MIB", "a2dSensorValue"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "a2dSensorLabel"), ("VERTIV-V5-MIB", "a2dSensorAnalogLabel"), ("VERTIV-V5-MIB", "a2dSensorDisplayValue"))
if mibBuilder.loadTexts: a2dSensorValueCLEAR.setStatus('current')
humiditySensorAvailNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 11204)).setObjects(("VERTIV-V5-MIB", "humiditySensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "humiditySensorLabel"))
if mibBuilder.loadTexts: humiditySensorAvailNOTIFY.setStatus('current')
humiditySensorAvailCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 21204)).setObjects(("VERTIV-V5-MIB", "humiditySensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "humiditySensorLabel"))
if mibBuilder.loadTexts: humiditySensorAvailCLEAR.setStatus('current')
humiditySensorValueNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 11205)).setObjects(("VERTIV-V5-MIB", "humiditySensorValue"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "humiditySensorLabel"))
if mibBuilder.loadTexts: humiditySensorValueNOTIFY.setStatus('current')
humiditySensorValueCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 21205)).setObjects(("VERTIV-V5-MIB", "humiditySensorValue"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "humiditySensorLabel"))
if mibBuilder.loadTexts: humiditySensorValueCLEAR.setStatus('current')
sn2dSensorAvailNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 11304)).setObjects(("VERTIV-V5-MIB", "sn2dSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "sn2dSensorLabel"))
if mibBuilder.loadTexts: sn2dSensorAvailNOTIFY.setStatus('current')
sn2dSensorAvailCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 21304)).setObjects(("VERTIV-V5-MIB", "sn2dSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "sn2dSensorLabel"))
if mibBuilder.loadTexts: sn2dSensorAvailCLEAR.setStatus('current')
sn2dSensorDoor1StateNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 11306)).setObjects(("VERTIV-V5-MIB", "sn2dSensorDoor1State"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "sn2dSensorLabel"), ("VERTIV-V5-MIB", "sn2dSensorDoor1Label"), ("VERTIV-V5-MIB", "sn2dSensorDoor1DisplayState"))
if mibBuilder.loadTexts: sn2dSensorDoor1StateNOTIFY.setStatus('current')
sn2dSensorDoor1StateCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 21306)).setObjects(("VERTIV-V5-MIB", "sn2dSensorDoor1State"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "sn2dSensorLabel"), ("VERTIV-V5-MIB", "sn2dSensorDoor1Label"), ("VERTIV-V5-MIB", "sn2dSensorDoor1DisplayState"))
if mibBuilder.loadTexts: sn2dSensorDoor1StateCLEAR.setStatus('current')
sn2dSensorDoor2StateNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 11309)).setObjects(("VERTIV-V5-MIB", "sn2dSensorDoor2State"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "sn2dSensorLabel"), ("VERTIV-V5-MIB", "sn2dSensorDoor2Label"), ("VERTIV-V5-MIB", "sn2dSensorDoor2DisplayState"))
if mibBuilder.loadTexts: sn2dSensorDoor2StateNOTIFY.setStatus('current')
sn2dSensorDoor2StateCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 21309)).setObjects(("VERTIV-V5-MIB", "sn2dSensorDoor2State"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "sn2dSensorLabel"), ("VERTIV-V5-MIB", "sn2dSensorDoor2Label"), ("VERTIV-V5-MIB", "sn2dSensorDoor2DisplayState"))
if mibBuilder.loadTexts: sn2dSensorDoor2StateCLEAR.setStatus('current')
vrcMainAvailNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13001)).setObjects(("VERTIV-V5-MIB", "vrcMainAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcMainAvailNOTIFY.setStatus('current')
vrcMainAvailCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23001)).setObjects(("VERTIV-V5-MIB", "vrcMainAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcMainAvailCLEAR.setStatus('current')
vrcOutFanPtSpeedNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13002)).setObjects(("VERTIV-V5-MIB", "vrcOutFanPtSpeed"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcOutFanPtSpeedNOTIFY.setStatus('current')
vrcOutFanPtSpeedCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23002)).setObjects(("VERTIV-V5-MIB", "vrcOutFanPtSpeed"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcOutFanPtSpeedCLEAR.setStatus('current')
vrcCompPtCapacityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13003)).setObjects(("VERTIV-V5-MIB", "vrcCompPtCapacity"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcCompPtCapacityNOTIFY.setStatus('current')
vrcCompPtCapacityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23003)).setObjects(("VERTIV-V5-MIB", "vrcCompPtCapacity"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcCompPtCapacityCLEAR.setStatus('current')
vrcReturnPtTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13004)).setObjects(("VERTIV-V5-MIB", "vrcReturnPtTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcReturnPtTempNOTIFY.setStatus('current')
vrcReturnPtTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23004)).setObjects(("VERTIV-V5-MIB", "vrcReturnPtTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcReturnPtTempCLEAR.setStatus('current')
vrcSupplyPtTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13005)).setObjects(("VERTIV-V5-MIB", "vrcSupplyPtTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcSupplyPtTempNOTIFY.setStatus('current')
vrcSupplyPtTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23005)).setObjects(("VERTIV-V5-MIB", "vrcSupplyPtTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcSupplyPtTempCLEAR.setStatus('current')
vrcPowerPtVoltageNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13006)).setObjects(("VERTIV-V5-MIB", "vrcPowerPtVoltage"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcPowerPtVoltageNOTIFY.setStatus('current')
vrcPowerPtVoltageCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23006)).setObjects(("VERTIV-V5-MIB", "vrcPowerPtVoltage"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcPowerPtVoltageCLEAR.setStatus('current')
vrcPowerPtFrequencyNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13007)).setObjects(("VERTIV-V5-MIB", "vrcPowerPtFrequency"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcPowerPtFrequencyNOTIFY.setStatus('current')
vrcPowerPtFrequencyCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23007)).setObjects(("VERTIV-V5-MIB", "vrcPowerPtFrequency"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcPowerPtFrequencyCLEAR.setStatus('current')
vrcOutdoorPtTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13008)).setObjects(("VERTIV-V5-MIB", "vrcOutdoorPtTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcOutdoorPtTempNOTIFY.setStatus('current')
vrcOutdoorPtTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23008)).setObjects(("VERTIV-V5-MIB", "vrcOutdoorPtTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcOutdoorPtTempCLEAR.setStatus('current')
vrcDischPtTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13009)).setObjects(("VERTIV-V5-MIB", "vrcDischPtTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcDischPtTempNOTIFY.setStatus('current')
vrcDischPtTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23009)).setObjects(("VERTIV-V5-MIB", "vrcDischPtTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcDischPtTempCLEAR.setStatus('current')
vrcDischPtPressureNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13010)).setObjects(("VERTIV-V5-MIB", "vrcDischPtPressure"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcDischPtPressureNOTIFY.setStatus('current')
vrcDischPtPressureCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23010)).setObjects(("VERTIV-V5-MIB", "vrcDischPtPressure"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcDischPtPressureCLEAR.setStatus('current')
vrcSuctPtTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13011)).setObjects(("VERTIV-V5-MIB", "vrcSuctPtTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcSuctPtTempNOTIFY.setStatus('current')
vrcSuctPtTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23011)).setObjects(("VERTIV-V5-MIB", "vrcSuctPtTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcSuctPtTempCLEAR.setStatus('current')
vrcSuctPtPressureNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13012)).setObjects(("VERTIV-V5-MIB", "vrcSuctPtPressure"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcSuctPtPressureNOTIFY.setStatus('current')
vrcSuctPtPressureCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23012)).setObjects(("VERTIV-V5-MIB", "vrcSuctPtPressure"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcSuctPtPressureCLEAR.setStatus('current')
common = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 42))
identity = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 42, 1))
i03 = ObjectIdentity((1, 3, 6, 1, 4, 1, 21239, 42, 1, 53))
if mibBuilder.loadTexts: i03.setStatus('current')
r05 = ObjectIdentity((1, 3, 6, 1, 4, 1, 21239, 42, 1, 15))
if mibBuilder.loadTexts: r05.setStatus('current')
mibBuilder.exportSymbols("VERTIV-V5-MIB", vrcInFanCfgStartDelay=vrcInFanCfgStartDelay, pduMainAvailCLEAR=pduMainAvailCLEAR, vrc=vrc, pduPhaseBalance=pduPhaseBalance, vrcPowerPtFrequencyNOTIFY=vrcPowerPtFrequencyNOTIFY, t3hdSensorExtALabel=t3hdSensorExtALabel, vrcMainPtLpSensorFailAlarm=vrcMainPtLpSensorFailAlarm, vrcCompPtDriverFaultU10=vrcCompPtDriverFaultU10, airFlowSensorSerial=airFlowSensorSerial, vrcInFanCfgJumpFreq5=vrcInFanCfgJumpFreq5, vrcCompPtIndex=vrcCompPtIndex, pduTotalPowerFactorCLEAR=pduTotalPowerFactorCLEAR, vrcMainCfgEntry=vrcMainCfgEntry, thdSensorDewPointCLEAR=thdSensorDewPointCLEAR, pduPhaseIndex=pduPhaseIndex, vrcPowerPtLowVoltageAlarm=vrcPowerPtLowVoltageAlarm, vrcMainSerial=vrcMainSerial, vrcOutFanCfgTable=vrcOutFanCfgTable, vrcInFanCfgTempI=vrcInFanCfgTempI, vrcMainCfgModelSelect=vrcMainCfgModelSelect, pduPhaseRealPowerNOTIFY=pduPhaseRealPowerNOTIFY, temperatureUnits=temperatureUnits, vrcCompPtDriverFaultU09=vrcCompPtDriverFaultU09, tempSensorSerial=tempSensorSerial, vrcCompCfgJumpBand1=vrcCompCfgJumpBand1, vrcReturnCfgHighTempAlarmCtrl=vrcReturnCfgHighTempAlarmCtrl, vrcMainCfgMonitorShutDownFlag=vrcMainCfgMonitorShutDownFlag, vrcMainPtWaterUnderFloorAlarm=vrcMainPtWaterUnderFloorAlarm, vrcMainIndex=vrcMainIndex, airFlowSensorFlowNOTIFY=airFlowSensorFlowNOTIFY, thdSensorEntry=thdSensorEntry, vrcSupplyCfgHighTempAlmCtrl=vrcSupplyCfgHighTempAlmCtrl, humiditySensorAvail=humiditySensorAvail, vrcPowerCfgEntry=vrcPowerCfgEntry, airFlowSensorFlow=airFlowSensorFlow, humiditySensorLabel=humiditySensorLabel, pduPhaseEnergy=pduPhaseEnergy, pduOutletMeterName=pduOutletMeterName, productPlatform=productPlatform, vrcMainPtMonitorBaudrate=vrcMainPtMonitorBaudrate, vrcCompPtName=vrcCompPtName, vrcReturnCfgTable=vrcReturnCfgTable, airFlowSensorTable=airFlowSensorTable, pduTotalRealPower=pduTotalRealPower, pduBreakerCurrentCLEAR=pduBreakerCurrentCLEAR, vrcCompPtRunTimeHours=vrcCompPtRunTimeHours, pduBreakerVoltageNOTIFY=pduBreakerVoltageNOTIFY, vrcReturnPtIndex=vrcReturnPtIndex, vrcCompPtCapacity=vrcCompPtCapacity, vrcPowerPtEntry=vrcPowerPtEntry, vrcDischPtIndex=vrcDischPtIndex, vrcOutdoorPtTempNOTIFY=vrcOutdoorPtTempNOTIFY, pduPhaseVoltageCLEAR=pduPhaseVoltageCLEAR, sn2dSensorDoor2State=sn2dSensorDoor2State, vrcSuctCfgPressCalValue=vrcSuctCfgPressCalValue, vrcCompPtDriverFaultU11=vrcCompPtDriverFaultU11, vrcInFanCfgJumpFreq1=vrcInFanCfgJumpFreq1, pduOutletSwitchRelayFailure=pduOutletSwitchRelayFailure, t3hdSensorIntHumidity=t3hdSensorIntHumidity, vrcMainCfgHighWaterAlarmCtrl=vrcMainCfgHighWaterAlarmCtrl, deviceCount=deviceCount, pduTotalRealPowerNOTIFY=pduTotalRealPowerNOTIFY, humiditySensorValue=humiditySensorValue, sn2dSensorDoor2DisplayState=sn2dSensorDoor2DisplayState, sn2dSensorIndex=sn2dSensorIndex, vrcMainCfgFilterMaintRemindTime=vrcMainCfgFilterMaintRemindTime, pduLineCurrent=pduLineCurrent, pduOutletSwitchName=pduOutletSwitchName, pduBreakerApparentPowerCLEAR=pduBreakerApparentPowerCLEAR, t3hdSensorIntDewPointNOTIFY=t3hdSensorIntDewPointNOTIFY, vrcReturnCfgTempCalValue=vrcReturnCfgTempCalValue, vrcDischPtPressureCLEAR=vrcDischPtPressureCLEAR, pduOutletSwitchControl=pduOutletSwitchControl, vrcSupplyCfgTempSetting=vrcSupplyCfgTempSetting, pduOutletSwitchRebootHoldDelay=pduOutletSwitchRebootHoldDelay, vrcPowerPtTable=vrcPowerPtTable, vrcCompPtDriverFaultU15=vrcCompPtDriverFaultU15, pduLineTable=pduLineTable, vrcMainCfgLpFreqAlarmCtrl=vrcMainCfgLpFreqAlarmCtrl, vrcDischPtName=vrcDischPtName, vrcSuctPtName=vrcSuctPtName, pduOutletMeterEnergyNOTIFY=pduOutletMeterEnergyNOTIFY, pduPhaseName=pduPhaseName, vrcOutFanCfgIndex=vrcOutFanCfgIndex, vrcInFanPtIndex=vrcInFanPtIndex, vrcCompPtDriverFaultU01=vrcCompPtDriverFaultU01, thdSensorHumidityCLEAR=thdSensorHumidityCLEAR, thdSensorAvail=thdSensorAvail, vrcMainCfgHpAbnAlarmSetting=vrcMainCfgHpAbnAlarmSetting, vrcSupplyCfgTable=vrcSupplyCfgTable, pduOutletCurrentCrestFactor=pduOutletCurrentCrestFactor, vrcOutdoorPtIndex=vrcOutdoorPtIndex, vrcMainCfgHpAlarmCtrl=vrcMainCfgHpAlarmCtrl, airFlowSensorLabel=airFlowSensorLabel, cooling=cooling, productAlarmCount=productAlarmCount, pduBreakerVoltageCLEAR=pduBreakerVoltageCLEAR, vrcInFanPtStartStopCount=vrcInFanPtStartStopCount, pduPhaseApparentPower=pduPhaseApparentPower, pduOutletMeterLabel=pduOutletMeterLabel, vrcMainAvail=vrcMainAvail, vrcMainCfgDeadBand=vrcMainCfgDeadBand, sn2dSensorDoor1Label=sn2dSensorDoor1Label, vrcMainPtComAlarmOutState=vrcMainPtComAlarmOutState, vrcPowerPtVoltageNOTIFY=vrcPowerPtVoltageNOTIFY, r05=r05, vrcCompPtDriverCommFailAlarm=vrcCompPtDriverCommFailAlarm, vrcSupplyCfgHighTempAlarmValue=vrcSupplyCfgHighTempAlarmValue, vrcInFanCfgOutputStatus=vrcInFanCfgOutputStatus, sn2dSensorSerial=sn2dSensorSerial, vrcMainPtEevCommFailAlarm=vrcMainPtEevCommFailAlarm, vrcDischPtTemp=vrcDischPtTemp, pduOutletMeterIndex=pduOutletMeterIndex, airFlowSensorTempNOTIFY=airFlowSensorTempNOTIFY, pduBreakerRealPower=pduBreakerRealPower, thdSensorAvailCLEAR=thdSensorAvailCLEAR, vrcInFanCfgJumpFreq4=vrcInFanCfgJumpFreq4, vrcPowerPtName=vrcPowerPtName, vrcOutdoorPtName=vrcOutdoorPtName, sn2dSensorDoor2StateNOTIFY=sn2dSensorDoor2StateNOTIFY, pduOutletMeterPowerFactorNOTIFY=pduOutletMeterPowerFactorNOTIFY, thdSensorTable=thdSensorTable, vrcDischCfgTable=vrcDischCfgTable, vrcInFanCfgStandardCfc=vrcInFanCfgStandardCfc, vrcSupplyPtTempSensorFailAlarm=vrcSupplyPtTempSensorFailAlarm, pduOutletCurrentCrestFactorCLEAR=pduOutletCurrentCrestFactorCLEAR, vrcMainCfgFilterMaintSetting=vrcMainCfgFilterMaintSetting, pduBreakerVoltage=pduBreakerVoltage, vrcInFanCfgLowSpeedStep=vrcInFanCfgLowSpeedStep, vrcCompCfgMinCapacity=vrcCompCfgMinCapacity, a2dSensorAnalogLabel=a2dSensorAnalogLabel, vrcDischPtPressureNOTIFY=vrcDischPtPressureNOTIFY, pduPhaseCurrentCrestFactorNOTIFY=pduPhaseCurrentCrestFactorNOTIFY, tempSensorAvailCLEAR=tempSensorAvailCLEAR, airFlowSensorAvailNOTIFY=airFlowSensorAvailNOTIFY, vrcCompCfgJumpFreq3=vrcCompCfgJumpFreq3, vrcCompCfgOutputDeadBand=vrcCompCfgOutputDeadBand, vrcMainPtEevOpened=vrcMainPtEevOpened, pduBreakerEnergyCLEAR=pduBreakerEnergyCLEAR, vrcCompPtDriverFaultU08=vrcCompPtDriverFaultU08, vrcInFanCfgHighSpeedStep=vrcInFanCfgHighSpeedStep, vrcInFanCfgJumpBand4=vrcInFanCfgJumpBand4, t3hdSensorIntHumidityCLEAR=t3hdSensorIntHumidityCLEAR, vrcSupplyCfgTempCalValue=vrcSupplyCfgTempCalValue, pduPhaseBalanceNOTIFY=pduPhaseBalanceNOTIFY, vrcMainPtAlarmNumbers=vrcMainPtAlarmNumbers, vrcInFanCfgJumpBand2=vrcInFanCfgJumpBand2, vrcPowerPtIndex=vrcPowerPtIndex, pduOutletMeterVoltageNOTIFY=pduOutletMeterVoltageNOTIFY, productMacAddress=productMacAddress, vrcSupplyPtEntry=vrcSupplyPtEntry, vrcPowerCfgHighVoltageAlarmCtrl=vrcPowerCfgHighVoltageAlarmCtrl, vrcDischCfgEntry=vrcDischCfgEntry, vrcSupplyPtHighTempAlarm=vrcSupplyPtHighTempAlarm, thdSensorTempCLEAR=thdSensorTempCLEAR, vrcCompCfgTable=vrcCompCfgTable, pduPhaseBalanceCLEAR=pduPhaseBalanceCLEAR, vrcMainPtEntry=vrcMainPtEntry, vrcMainPtSwShutDownStatus=vrcMainPtSwShutDownStatus, sn2dSensorDoor1State=sn2dSensorDoor1State, vrcCompCfgStartCapacity=vrcCompCfgStartCapacity, t3hdSensorLabel=t3hdSensorLabel, pduLineLabel=pduLineLabel, vrcCompCfgJumpBand4=vrcCompCfgJumpBand4, vrcMainCfgEevShtSettingMax=vrcMainCfgEevShtSettingMax, sn2dSensorTable=sn2dSensorTable, t3hdSensorIntDewPoint=t3hdSensorIntDewPoint, pduMainIndex=pduMainIndex, tempSensorTempCLEAR=tempSensorTempCLEAR, pduOutletMeterEntry=pduOutletMeterEntry, thdSensorSerial=thdSensorSerial, vrcSuctPtEntry=vrcSuctPtEntry, vrcPowerCfgLossOfPowerAlarmCtrl=vrcPowerCfgLossOfPowerAlarmCtrl, vrcReturnPtTempCLEAR=vrcReturnPtTempCLEAR, t3hdSensorAvail=t3hdSensorAvail, sn2dSensorDoor1StateCLEAR=sn2dSensorDoor1StateCLEAR, pduOutletMeterApparentPowerCLEAR=pduOutletMeterApparentPowerCLEAR, pduBreakerEnergyNOTIFY=pduBreakerEnergyNOTIFY, t3hdSensorExtATempCLEAR=t3hdSensorExtATempCLEAR, pduBreakerApparentPower=pduBreakerApparentPower, vrcReturnPtHighTempAlarm=vrcReturnPtHighTempAlarm, t3hdSensorExtATemp=t3hdSensorExtATemp, airFlowSensorHumidity=airFlowSensorHumidity, vrcMainCfgSystemTimeMonth=vrcMainCfgSystemTimeMonth, vrcMainCfgHpSensorFailAlarmCtrl=vrcMainCfgHpSensorFailAlarmCtrl, pduOutletSwitchRebootDelay=pduOutletSwitchRebootDelay, t3hdSensorExtBTemp=t3hdSensorExtBTemp, thdSensorIndex=thdSensorIndex, vrcMainCfgHpFreqAlarmCtrl=vrcMainCfgHpFreqAlarmCtrl, vrcCompCfgJumpBand3=vrcCompCfgJumpBand3, vrcReturnCfgOilRunCapacity=vrcReturnCfgOilRunCapacity, vrcMainPtHistoryAlarmNumbers=vrcMainPtHistoryAlarmNumbers, vrcMainCfgEevValveCloseSht=vrcMainCfgEevValveCloseSht, a2dSensorMin=a2dSensorMin, t3hdSensorAvailNOTIFY=t3hdSensorAvailNOTIFY, vrcSuctPtTempCLEAR=vrcSuctPtTempCLEAR, vrcMainCfgIndex=vrcMainCfgIndex, vrcMainCfgFilterMaintRemindCtrl=vrcMainCfgFilterMaintRemindCtrl, t3hdSensorExtBTempNOTIFY=t3hdSensorExtBTempNOTIFY, pduMainLabel=pduMainLabel, pduPhaseApparentPowerCLEAR=pduPhaseApparentPowerCLEAR, vrcSuctCfgEntry=vrcSuctCfgEntry, vrcCompCfgJumpFreq1=vrcCompCfgJumpFreq1, a2dSensorEntry=a2dSensorEntry, vrcSupplyPtLowTempAlarm=vrcSupplyPtLowTempAlarm, vrcPowerPtVoltageCLEAR=vrcPowerPtVoltageCLEAR, vrcInFanCfgJumpBand3=vrcInFanCfgJumpBand3, vrcOutdoorPtEntry=vrcOutdoorPtEntry, vrcReturnCfgTempSetting=vrcReturnCfgTempSetting, trap=trap, airFlowSensorIndex=airFlowSensorIndex, t3hdSensorIntTemp=t3hdSensorIntTemp, vrcReturnCfgIndex=vrcReturnCfgIndex, vrcPowerPtFrequencyErrorAlarm=vrcPowerPtFrequencyErrorAlarm, productModelNumber=productModelNumber, humiditySensorAvailCLEAR=humiditySensorAvailCLEAR, t3hdSensorIntDewPointCLEAR=t3hdSensorIntDewPointCLEAR, pduLineName=pduLineName, pduOutletSwitchState=pduOutletSwitchState, vrcInFanCfgJumpBand1=vrcInFanCfgJumpBand1, humiditySensorIndex=humiditySensorIndex, pduTotalPowerFactor=pduTotalPowerFactor, pduLineCurrentNOTIFY=pduLineCurrentNOTIFY, productPartNumber=productPartNumber, a2dSensorAvailCLEAR=a2dSensorAvailCLEAR, pduLineEntry=pduLineEntry, vrcSupplyCfgTempSensFailAlmCtrl=vrcSupplyCfgTempSensFailAlmCtrl, vrcReturnCfgOilRunTime=vrcReturnCfgOilRunTime, a2dSensorSerial=a2dSensorSerial, vrcOutFanPtEntry=vrcOutFanPtEntry, vrcPowerCfgLowVoltageSetting=vrcPowerCfgLowVoltageSetting, sn2dSensorDoor1DisplayState=sn2dSensorDoor1DisplayState, vrcMainCfgEevMopPressSetting=vrcMainCfgEevMopPressSetting, vrcMainName=vrcMainName, vrcMainCfgRemShutdownAlarmCtrl=vrcMainCfgRemShutdownAlarmCtrl, pduBreakerPowerFactor=pduBreakerPowerFactor, tempSensorLabel=tempSensorLabel, vrcOutFanCfgMaxPowerVoltage=vrcOutFanCfgMaxPowerVoltage, pduPhasePowerFactor=pduPhasePowerFactor, pduOutletMeterCurrent=pduOutletMeterCurrent, vrcDischPtTable=vrcDischPtTable, sn2dSensorLabel=sn2dSensorLabel, pduTotalEnergyNOTIFY=pduTotalEnergyNOTIFY, vrcCompCfgTempI=vrcCompCfgTempI, a2dSensorAvailNOTIFY=a2dSensorAvailNOTIFY, sn2dSensorDoor2StateCLEAR=sn2dSensorDoor2StateCLEAR, pduPhaseCurrentNOTIFY=pduPhaseCurrentNOTIFY, pduBreakerCurrent=pduBreakerCurrent, pduPhaseCurrent=pduPhaseCurrent, vrcInFanCfgTable=vrcInFanCfgTable, humiditySensorValueCLEAR=humiditySensorValueCLEAR, vrcMainPtIndex=vrcMainPtIndex, pduTotalApparentPowerNOTIFY=pduTotalApparentPowerNOTIFY, pduBreakerIndex=pduBreakerIndex)
mibBuilder.exportSymbols("VERTIV-V5-MIB", airFlowSensorFlowCLEAR=airFlowSensorFlowCLEAR, vrcCompCfgJumpFreq4=vrcCompCfgJumpFreq4, vrcMainCfgTable=vrcMainCfgTable, pduPhaseRealPowerCLEAR=pduPhaseRealPowerCLEAR, vrcOutdoorPtTable=vrcOutdoorPtTable, vrcCompCfgDriverFaultAlmCtrl=vrcCompCfgDriverFaultAlmCtrl, vrcCompPtDriverFaultU02=vrcCompPtDriverFaultU02, vrcInFanCfgMinCfc=vrcInFanCfgMinCfc, vrcCompCfgMinStopTime=vrcCompCfgMinStopTime, vrcReturnCfgEntry=vrcReturnCfgEntry, pduOutletSwitchOnDelay=pduOutletSwitchOnDelay, thdSensorDewPoint=thdSensorDewPoint, vrcMainTable=vrcMainTable, a2dSensorValueCLEAR=a2dSensorValueCLEAR, vrcCompPtDriverFaultU06=vrcCompPtDriverFaultU06, pduLineCurrentCLEAR=pduLineCurrentCLEAR, vrcDischPtPressure=vrcDischPtPressure, vrcDischPtEntry=vrcDischPtEntry, vrcOutFanCfgPressSetting=vrcOutFanCfgPressSetting, vrcInFanCfgTempP=vrcInFanCfgTempP, vrcMainCfgLpAlarmCtrl=vrcMainCfgLpAlarmCtrl, vrcSuctCfgTable=vrcSuctCfgTable, vrcInFanCfgTempD=vrcInFanCfgTempD, pduTotalEnergy=pduTotalEnergy, vrcMainPtFilterMaintRemind=vrcMainPtFilterMaintRemind, vrcMainPtLp=vrcMainPtLp, vrcSuctCfgIndex=vrcSuctCfgIndex, vrcCompCfgJumpFreq5=vrcCompCfgJumpFreq5, pduOutletSwitchTable=pduOutletSwitchTable, a2dSensorMode=a2dSensorMode, a2dSensorUnits=a2dSensorUnits, vrcInFanCfgStandardSpeed=vrcInFanCfgStandardSpeed, vrcOutFanPtSpeed=vrcOutFanPtSpeed, vrcPowerPtVoltage=vrcPowerPtVoltage, imd=imd, vrcMainLabel=vrcMainLabel, t3hdSensorExtATempNOTIFY=t3hdSensorExtATempNOTIFY, pduPhaseRealPower=pduPhaseRealPower, thdSensorTemp=thdSensorTemp, airFlowSensorAvail=airFlowSensorAvail, vrcCompPtDriverFaultU04=vrcCompPtDriverFaultU04, vrcOutFanPtIndex=vrcOutFanPtIndex, vrcPowerCfgTable=vrcPowerCfgTable, vrcMainPtRemoteShutDownFlag=vrcMainPtRemoteShutDownFlag, pduOutletSwitchOffDelay=pduOutletSwitchOffDelay, vrcInFanPtRunTimeHours=vrcInFanPtRunTimeHours, vrcMainCfgRemShutdownInput=vrcMainCfgRemShutdownInput, common=common, t3hdSensorIntLabel=t3hdSensorIntLabel, vrcCompPtCapacityCLEAR=vrcCompPtCapacityCLEAR, vrcCompCfgCapacityOutputValue=vrcCompCfgCapacityOutputValue, vrcMainCfgSystemTimeDay=vrcMainCfgSystemTimeDay, vrcInFanCfgIndex=vrcInFanCfgIndex, pduTotalApparentPower=pduTotalApparentPower, sn2dSensorAvail=sn2dSensorAvail, vrcSupplyCfgEntry=vrcSupplyCfgEntry, pduTotalPowerFactorNOTIFY=pduTotalPowerFactorNOTIFY, vrcCompPtDriverFaultU07=vrcCompPtDriverFaultU07, tempSensorTable=tempSensorTable, vrcMainCfgEevShtSettingMin=vrcMainCfgEevShtSettingMin, vrcOutFanPtSpeedCLEAR=vrcOutFanPtSpeedCLEAR, vrcMainCfgSystemTimeSec=vrcMainCfgSystemTimeSec, vrcCompPtTable=vrcCompPtTable, vrcPowerCfgFreqErrorAlarmCtrl=vrcPowerCfgFreqErrorAlarmCtrl, vrcMainCfgSystemTimeHour=vrcMainCfgSystemTimeHour, trapThreshType=trapThreshType, pduOutletMeterRealPower=pduOutletMeterRealPower, vrcPowerPtLossOfPowerAlarm=vrcPowerPtLossOfPowerAlarm, pduPhaseEnergyNOTIFY=pduPhaseEnergyNOTIFY, pduOutletSwitchIndex=pduOutletSwitchIndex, vrcDischCfgTempSensFailAlmCtrl=vrcDischCfgTempSensFailAlmCtrl, vrcCompCfgJumpBand2=vrcCompCfgJumpBand2, sn2dSensorAvailCLEAR=sn2dSensorAvailCLEAR, t3hdSensorExtBLabel=t3hdSensorExtBLabel, vrcMainPtRemoteShutdown=vrcMainPtRemoteShutdown, identity=identity, vrcInFanPtEntry=vrcInFanPtEntry, humiditySensorValueNOTIFY=humiditySensorValueNOTIFY, vrcCompCfgJumpBand5=vrcCompCfgJumpBand5, vrcInFanCfgStopDelay=vrcInFanCfgStopDelay, pduMainEntry=pduMainEntry, vrcReturnPtTempNOTIFY=vrcReturnPtTempNOTIFY, vrcCompCfgJumpFreq2=vrcCompCfgJumpFreq2, vrcMainCfgEevCommFailAlarmCtrl=vrcMainCfgEevCommFailAlarmCtrl, vrcDischPtHighTempAlarm=vrcDischPtHighTempAlarm, vrcDischPtTempNOTIFY=vrcDischPtTempNOTIFY, pduPhaseCurrentCrestFactorCLEAR=pduPhaseCurrentCrestFactorCLEAR, vrcMainCfgLpSensorFailAlarmCtrl=vrcMainCfgLpSensorFailAlarmCtrl, vrcMainPtRunState=vrcMainPtRunState, humiditySensorSerial=humiditySensorSerial, vrcCompPtEntry=vrcCompPtEntry, t3hdSensorExtAAvail=t3hdSensorExtAAvail, thdSensorLabel=thdSensorLabel, vrcCompPtDriverFaultU12=vrcCompPtDriverFaultU12, t3hdSensorIndex=t3hdSensorIndex, vrcReturnCfgHighTempAlarmValue=vrcReturnCfgHighTempAlarmValue, PYSNMP_MODULE_ID=vertiv, airFlowSensorDewPointCLEAR=airFlowSensorDewPointCLEAR, vrcInFanCfgJumpFreq2=vrcInFanCfgJumpFreq2, pduPhasePowerFactorNOTIFY=pduPhasePowerFactorNOTIFY, pduOutletMeterVoltageCLEAR=pduOutletMeterVoltageCLEAR, pduBreakerLabel=pduBreakerLabel, vrcSupplyPtTable=vrcSupplyPtTable, airFlowSensorDewPointNOTIFY=airFlowSensorDewPointNOTIFY, pduPhaseEnergyCLEAR=pduPhaseEnergyCLEAR, vrcCompCfgTempD=vrcCompCfgTempD, trapPrefix=trapPrefix, pduPhaseEntry=pduPhaseEntry, vrcCompCfgStopCfc=vrcCompCfgStopCfc, vrcOutFanCfgEntry=vrcOutFanCfgEntry, airFlowSensorHumidityCLEAR=airFlowSensorHumidityCLEAR, productFriendlyName=productFriendlyName, pduOutletSwitchEntry=pduOutletSwitchEntry, vrcCompCfgEntry=vrcCompCfgEntry, deviceInfo=deviceInfo, a2dSensorLowLabel=a2dSensorLowLabel, pduMainAvail=pduMainAvail, pduOutletMeterPowerFactor=pduOutletMeterPowerFactor, vrcMainCfgFirstOnPassword=vrcMainCfgFirstOnPassword, vrcCompCfgStandardCapacity=vrcCompCfgStandardCapacity, vrcCompCfgTempP=vrcCompCfgTempP, pduPhaseCurrentCLEAR=pduPhaseCurrentCLEAR, trapSeverity=trapSeverity, pduPhaseVoltageNOTIFY=pduPhaseVoltageNOTIFY, tempSensorIndex=tempSensorIndex, vrcPowerCfgLowVoltageAlarmCtrl=vrcPowerCfgLowVoltageAlarmCtrl, a2dSensorTable=a2dSensorTable, vrcMainCfgManualRunEnable=vrcMainCfgManualRunEnable, t3hdSensorAvailCLEAR=t3hdSensorAvailCLEAR, vrcMainCfgSystemTimeMin=vrcMainCfgSystemTimeMin, vrcOutFanPtName=vrcOutFanPtName, pduBreakerCurrentNOTIFY=pduBreakerCurrentNOTIFY, vrcMainAvailNOTIFY=vrcMainAvailNOTIFY, pduBreakerRealPowerCLEAR=pduBreakerRealPowerCLEAR, vrcMainCfgLpdt=vrcMainCfgLpdt, pdu=pdu, vrcSupplyCfgLowTempAlarmValue=vrcSupplyCfgLowTempAlarmValue, vrcCompCfgDriverCommFailAlmCtrl=vrcCompCfgDriverCommFailAlmCtrl, pduMainName=pduMainName, vrcSuctPtSuperHeatTemp=vrcSuctPtSuperHeatTemp, pduBreakerName=pduBreakerName, pduTotalEnergyCLEAR=pduTotalEnergyCLEAR, vrcReturnCfgOilCycle=vrcReturnCfgOilCycle, pduPhaseLabel=pduPhaseLabel, vrcSuctPtTable=vrcSuctPtTable, vrcSupplyPtTempCLEAR=vrcSupplyPtTempCLEAR, vrcMainPtTable=vrcMainPtTable, humiditySensorTable=humiditySensorTable, vrcCompPtDriverFaultU13=vrcCompPtDriverFaultU13, vrcMainPtHpFreqAlarm=vrcMainPtHpFreqAlarm, tempSensorTemp=tempSensorTemp, productSerialNumber=productSerialNumber, vrcMainCfgVacuumState=vrcMainCfgVacuumState, vrcOutdoorPtTemp=vrcOutdoorPtTemp, vrcSupplyCfgIndex=vrcSupplyCfgIndex, vrcPowerPtFrequency=vrcPowerPtFrequency, vrcCompPtDriverFaultU05=vrcCompPtDriverFaultU05, pduOutletMeterEnergy=pduOutletMeterEnergy, thdSensorHumidity=thdSensorHumidity, vrcMainPtFirstOnFlag=vrcMainPtFirstOnFlag, pduOutletSwitchLabel=pduOutletSwitchLabel, vrcMainCfgControlMode=vrcMainCfgControlMode, vrcDischCfgPressCalValue=vrcDischCfgPressCalValue, vrcPowerPtFrequencyCLEAR=vrcPowerPtFrequencyCLEAR, vrcDischPtTempSensorFailAlarm=vrcDischPtTempSensorFailAlarm, vrcCompPtDriverFaultU14=vrcCompPtDriverFaultU14, airFlowSensorTempCLEAR=airFlowSensorTempCLEAR, pduOutletSwitchPoaAction=pduOutletSwitchPoaAction, vrcSuctPtTemp=vrcSuctPtTemp, a2dSensorValueNOTIFY=a2dSensorValueNOTIFY, vrcMainPtMonitorAddress=vrcMainPtMonitorAddress, pduOutletMeterReset=pduOutletMeterReset, vrcDischCfgIndex=vrcDischCfgIndex, a2dSensorLabel=a2dSensorLabel, pduPhasePowerFactorCLEAR=pduPhasePowerFactorCLEAR, a2dSensorIndex=a2dSensorIndex, vrcSuctCfgTempSensFailAlmCtrl=vrcSuctCfgTempSensFailAlmCtrl, productVersion=productVersion, i03=i03, pduOutletMeterVoltage=pduOutletMeterVoltage, vrcOutFanPtTable=vrcOutFanPtTable, vrcInFanPtTable=vrcInFanPtTable, pduOutletMeterEnergyCLEAR=pduOutletMeterEnergyCLEAR, vrcCompCfgMinRunTime=vrcCompCfgMinRunTime, vrcPowerCfgIndex=vrcPowerCfgIndex, pduTotalName=pduTotalName, a2dSensorAvail=a2dSensorAvail, vrcMainPtLpFreqAlarm=vrcMainPtLpFreqAlarm, pduOutletMeterPowerFactorCLEAR=pduOutletMeterPowerFactorCLEAR, vrcDischPtTempCLEAR=vrcDischPtTempCLEAR, vrcSupplyPtIndex=vrcSupplyPtIndex, vrcDischCfgHighTempFreqAlmCtrl=vrcDischCfgHighTempFreqAlmCtrl, vrcMainPtCoolingFlag=vrcMainPtCoolingFlag, vrcSupplyPtTemp=vrcSupplyPtTemp, vrcInFanPtName=vrcInFanPtName, pduBreakerPowerFactorCLEAR=pduBreakerPowerFactorCLEAR, pduMainAvailNOTIFY=pduMainAvailNOTIFY, vrcReturnPtName=vrcReturnPtName, vrcCompPtDriverFaultU00=vrcCompPtDriverFaultU00, pduOutletMeterApparentPower=pduOutletMeterApparentPower, vrcPowerPtLossOfPhasePowerAlarm=vrcPowerPtLossOfPhasePowerAlarm, pduBreakerApparentPowerNOTIFY=pduBreakerApparentPowerNOTIFY, vrcOutFanPtSpeedNOTIFY=vrcOutFanPtSpeedNOTIFY, vrcMainPtNewAlarmFlag=vrcMainPtNewAlarmFlag, vrcPowerCfgHighVoltageSetting=vrcPowerCfgHighVoltageSetting, vrcSuctPtTempNOTIFY=vrcSuctPtTempNOTIFY, pduPhaseCurrentCrestFactor=pduPhaseCurrentCrestFactor, vrcSuctPtPressure=vrcSuctPtPressure, pduBreakerRealPowerNOTIFY=pduBreakerRealPowerNOTIFY, sn2dSensorDoor1StateNOTIFY=sn2dSensorDoor1StateNOTIFY, vrcCompPtCapacityNOTIFY=vrcCompPtCapacityNOTIFY, vrcSupplyPtName=vrcSupplyPtName, a2dSensorHighLabel=a2dSensorHighLabel, vrcMainPtHpSensorFailAlarm=vrcMainPtHpSensorFailAlarm, pduTotalApparentPowerCLEAR=pduTotalApparentPowerCLEAR, vrcReturnPtTable=vrcReturnPtTable, t3hdSensorIntTempNOTIFY=t3hdSensorIntTempNOTIFY, vrcCompPtStartStopCount=vrcCompPtStartStopCount, vrcCompPtFaultLockAlarm=vrcCompPtFaultLockAlarm, vrcInFanCfgEntry=vrcInFanCfgEntry, vrcDischCfgHighTempAlmCtrl=vrcDischCfgHighTempAlmCtrl, t3hdSensorSerial=t3hdSensorSerial, t3hdSensorIntTempCLEAR=t3hdSensorIntTempCLEAR, airFlowSensorEntry=airFlowSensorEntry, vrcMainPtHmiShutDownFlag=vrcMainPtHmiShutDownFlag, vrcOutFanCfgStartPress=vrcOutFanCfgStartPress, vrcSupplyPtTempNOTIFY=vrcSupplyPtTempNOTIFY, pduBreakerTable=pduBreakerTable, vrcMainPtHighWaterAlarm=vrcMainPtHighWaterAlarm, t3hdSensorExtBTempCLEAR=t3hdSensorExtBTempCLEAR, pduBreakerEntry=pduBreakerEntry, vrcSuctPtIndex=vrcSuctPtIndex, pduPhaseVoltage=pduPhaseVoltage, vrcCompCfgIndex=vrcCompCfgIndex, pduPhaseTable=pduPhaseTable, pduPhaseApparentPowerNOTIFY=pduPhaseApparentPowerNOTIFY, tempSensorTempNOTIFY=tempSensorTempNOTIFY, sn2dSensorDoor2Label=sn2dSensorDoor2Label, pduOutletMeterTable=pduOutletMeterTable, sn2dSensorEntry=sn2dSensorEntry, vrcMainCfgOnOffSwitch=vrcMainCfgOnOffSwitch, vrcInFanCfgJumpFreq3=vrcInFanCfgJumpFreq3, sn2dSensorAvailNOTIFY=sn2dSensorAvailNOTIFY, vrcInFanCfgMinSpeed=vrcInFanCfgMinSpeed, productTitle=productTitle, vrcDischCfgTempCalValue=vrcDischCfgTempCalValue, vrcSuctPtPressureCLEAR=vrcSuctPtPressureCLEAR, vrcMainPtRemoteShutDownAlarm=vrcMainPtRemoteShutDownAlarm, thdSensorAvailNOTIFY=thdSensorAvailNOTIFY, tempSensorAvailNOTIFY=tempSensorAvailNOTIFY, vrcMainPtHighWaterInput=vrcMainPtHighWaterInput, trapObj=trapObj, t3hdSensorIntHumidityNOTIFY=t3hdSensorIntHumidityNOTIFY, pduMainSerial=pduMainSerial)
mibBuilder.exportSymbols("VERTIV-V5-MIB", vrcSuctPtTempSensorFailAlarm=vrcSuctPtTempSensorFailAlarm, vrcMainPtHpAlarm=vrcMainPtHpAlarm, t3hdSensorExtBAvail=t3hdSensorExtBAvail, pduTotalRealPowerCLEAR=pduTotalRealPowerCLEAR, pduOutletMeterRealPowerNOTIFY=pduOutletMeterRealPowerNOTIFY, internalTestNOTIFY=internalTestNOTIFY, a2dSensorDisplayValue=a2dSensorDisplayValue, vrcMainEntry=vrcMainEntry, vrcSupplyCfgLowTempAlmCtrl=vrcSupplyCfgLowTempAlmCtrl, pduOutletMeterCurrentNOTIFY=pduOutletMeterCurrentNOTIFY, a2dSensorValue=a2dSensorValue, thdSensorHumidityNOTIFY=thdSensorHumidityNOTIFY, airFlowSensorHumidityNOTIFY=airFlowSensorHumidityNOTIFY, vrcOutdoorPtTempCLEAR=vrcOutdoorPtTempCLEAR, vrcCompCfgFaultLockAlmCtrl=vrcCompCfgFaultLockAlmCtrl, vrcReturnPtTempSensorFailAlarm=vrcReturnPtTempSensorFailAlarm, a2dSensorMax=a2dSensorMax, pduOutletCurrentCrestFactorNOTIFY=pduOutletCurrentCrestFactorNOTIFY, pduBreakerEnergy=pduBreakerEnergy, vrcInFanCfgJumpBand5=vrcInFanCfgJumpBand5, vrcOutFanCfgSpeed=vrcOutFanCfgSpeed, thdSensorDewPointNOTIFY=thdSensorDewPointNOTIFY, productWarnCount=productWarnCount, vrcCompCfgStartCfc=vrcCompCfgStartCfc, vrcOutFanCfgMinPowerVoltage=vrcOutFanCfgMinPowerVoltage, pduOutletMeterApparentPowerNOTIFY=pduOutletMeterApparentPowerNOTIFY, pduMeterType=pduMeterType, pduOutletSwitchTimeToAction=pduOutletSwitchTimeToAction, pduLineIndex=pduLineIndex, thdSensorTempNOTIFY=thdSensorTempNOTIFY, vrcSuctPtPressureNOTIFY=vrcSuctPtPressureNOTIFY, airFlowSensorAvailCLEAR=airFlowSensorAvailCLEAR, vrcMainCfgSystemTimeYear=vrcMainCfgSystemTimeYear, vrcMainAvailCLEAR=vrcMainAvailCLEAR, vertiv=vertiv, t3hdSensorTable=t3hdSensorTable, vrcMainCfgCommonAlarmOutputDir=vrcMainCfgCommonAlarmOutputDir, vrcDischPtHighTempFreqAlarm=vrcDischPtHighTempFreqAlarm, pduOutletMeterRealPowerCLEAR=pduOutletMeterRealPowerCLEAR, pduTotalLabel=pduTotalLabel, productHostname=productHostname, vrcMainPtLpAlarm=vrcMainPtLpAlarm, tempSensorAvail=tempSensorAvail, pduBreakerPowerFactorNOTIFY=pduBreakerPowerFactorNOTIFY, pduMainTable=pduMainTable, vrcMainPtHpAbnRecordCnt=vrcMainPtHpAbnRecordCnt, tempSensorEntry=tempSensorEntry, vrcReturnCfgTempSensFailAlmCtrl=vrcReturnCfgTempSensFailAlmCtrl, humiditySensorAvailNOTIFY=humiditySensorAvailNOTIFY, t3hdSensorEntry=t3hdSensorEntry, vrcPowerPtHighVoltageAlarm=vrcPowerPtHighVoltageAlarm, airFlowSensorTemp=airFlowSensorTemp, productManufacturer=productManufacturer, humiditySensorEntry=humiditySensorEntry, v5=v5, pduOutletSwitchPoaDelay=pduOutletSwitchPoaDelay, vrcReturnPtTemp=vrcReturnPtTemp, airFlowSensorDewPoint=airFlowSensorDewPoint, pduOutletMeterCurrentCLEAR=pduOutletMeterCurrentCLEAR, vrcCompCfgOutputStatus=vrcCompCfgOutputStatus, vrcInFanCfgReduceSpeedDelay=vrcInFanCfgReduceSpeedDelay, vrcCompPtDriverFaultU03=vrcCompPtDriverFaultU03, vrcReturnPtEntry=vrcReturnPtEntry)
