#
# PySNMP MIB module IRT-DAB-DUALDRIVE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/irt/IRT-DAB-DUALDRIVE-MIB
# Produced by pysmi-1.1.12 at Thu Sep 26 02:15:44 2024
# On host fv-az1144-917 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
eventCounter, eventPriority, mibRelease, eventTimeStamp = mibBuilder.importSymbols("IRT-COMMONVARBINDS-MIB", "eventCounter", "eventPriority", "mibRelease", "eventTimeStamp")
SelectOnOff, PresentNotPresent, ReadyNotReady, ExecutedNotExecuted, OkNotOk, MuteOk, LocalRemote, FaultOK, WarningOK, dab, Input1Input2, SelectManualAuto = mibBuilder.importSymbols("IRT-TRANSMITTER-SMI-MIB", "SelectOnOff", "PresentNotPresent", "ReadyNotReady", "ExecutedNotExecuted", "OkNotOk", "MuteOk", "LocalRemote", "FaultOK", "WarningOK", "dab", "Input1Input2", "SelectManualAuto")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
sysLocation, sysName, sysDescr = mibBuilder.importSymbols("SNMPv2-MIB", "sysLocation", "sysName", "sysDescr")
IpAddress, Counter64, ModuleIdentity, Integer32, Counter32, TimeTicks, MibIdentifier, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "ModuleIdentity", "Integer32", "Counter32", "TimeTicks", "MibIdentifier", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "NotificationType", "Bits")
TruthValue, TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "DateAndTime")
dabDualDrive = ModuleIdentity((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4))
dabDualDrive.setRevisions(('2007-05-04 14:00', '2006-12-20 14:00', '2006-09-21 14:00', '2006-09-19 14:00', '2006-09-07 14:00',))
if mibBuilder.loadTexts: dabDualDrive.setLastUpdated('200705041400Z')
if mibBuilder.loadTexts: dabDualDrive.setOrganization('IRT for WORKING-GROUP-TC-MIB')
dabEventsDD = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0))
dabDDInputPreselectionEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 1)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDInputPreselection"))
if mibBuilder.loadTexts: dabDDInputPreselectionEvent.setStatus('current')
dabDDInputAutomaticEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 2)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDInputAutomatic"))
if mibBuilder.loadTexts: dabDDInputAutomaticEvent.setStatus('current')
dabDDPreselectionExciterEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 3)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDPreselectionExciter"))
if mibBuilder.loadTexts: dabDDPreselectionExciterEvent.setStatus('current')
dabDDTransmitterOpModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 4)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDTransmitterOpMode"))
if mibBuilder.loadTexts: dabDDTransmitterOpModeEvent.setStatus('current')
dabDDReserveControlEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 5)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDReserveControl"))
if mibBuilder.loadTexts: dabDDReserveControlEvent.setStatus('current')
dabDDRFPresentEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 6)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDRFPresent"))
if mibBuilder.loadTexts: dabDDRFPresentEvent.setStatus('current')
dabDDResetFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 7)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDResetFault"))
if mibBuilder.loadTexts: dabDDResetFaultEvent.setStatus('obsolete')
dabDDAmplifierFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 8)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDAmplifierFault"))
if mibBuilder.loadTexts: dabDDAmplifierFaultEvent.setStatus('current')
dabDDAmplifierWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 9)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDAmplifierWarning"))
if mibBuilder.loadTexts: dabDDAmplifierWarningEvent.setStatus('current')
dabDDActiveExciterEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 10)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDActiveExciter"))
if mibBuilder.loadTexts: dabDDActiveExciterEvent.setStatus('current')
dabDDLocalModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 11)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDLocalMode"))
if mibBuilder.loadTexts: dabDDLocalModeEvent.setStatus('current')
dabDDControlUnitFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 12)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDControlUnitFault"))
if mibBuilder.loadTexts: dabDDControlUnitFaultEvent.setStatus('current')
dabDDSwitchOverModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 13)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverMode"))
if mibBuilder.loadTexts: dabDDSwitchOverModeEvent.setStatus('current')
dabDDSwitchOverReadyEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 14)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverReady"))
if mibBuilder.loadTexts: dabDDSwitchOverReadyEvent.setStatus('current')
dabDDSwitchOverExecutedEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 15)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverExecuted"))
if mibBuilder.loadTexts: dabDDSwitchOverExecutedEvent.setStatus('current')
dabDDSwitchOverFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 16)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverFault"))
if mibBuilder.loadTexts: dabDDSwitchOverFaultEvent.setStatus('current')
dabDDExciterAInput1OKEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 17)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAInput1OK"))
if mibBuilder.loadTexts: dabDDExciterAInput1OKEvent.setStatus('current')
dabDDExciterAInput2OKEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 18)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAInput2OK"))
if mibBuilder.loadTexts: dabDDExciterAInput2OKEvent.setStatus('current')
dabDDExciterALocalModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 19)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterALocalMode"))
if mibBuilder.loadTexts: dabDDExciterALocalModeEvent.setStatus('current')
dabDDExciterAFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 20)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAFault"))
if mibBuilder.loadTexts: dabDDExciterAFaultEvent.setStatus('current')
dabDDExciterAWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 21)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAWarning"))
if mibBuilder.loadTexts: dabDDExciterAWarningEvent.setStatus('current')
dabDDExciterAActiveInputEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 22)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAActiveInput"))
if mibBuilder.loadTexts: dabDDExciterAActiveInputEvent.setStatus('current')
dabDDExciterASFNModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 23)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterASFNMode"))
if mibBuilder.loadTexts: dabDDExciterASFNModeEvent.setStatus('current')
dabDDExciterARefFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 24)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterARefFault"))
if mibBuilder.loadTexts: dabDDExciterARefFaultEvent.setStatus('current')
dabDDExciterAMuteEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 25)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAMute"))
if mibBuilder.loadTexts: dabDDExciterAMuteEvent.setStatus('current')
dabDDExciterAWarningTimeStampEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 26)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAWarningTimeStamp"))
if mibBuilder.loadTexts: dabDDExciterAWarningTimeStampEvent.setStatus('current')
dabDDExciterBInput1OKEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 27)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBInput1OK"))
if mibBuilder.loadTexts: dabDDExciterBInput1OKEvent.setStatus('current')
dabDDExciterBInput2OKEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 28)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBInput2OK"))
if mibBuilder.loadTexts: dabDDExciterBInput2OKEvent.setStatus('current')
dabDDExciterBLocalModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 29)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBLocalMode"))
if mibBuilder.loadTexts: dabDDExciterBLocalModeEvent.setStatus('current')
dabDDExciterBFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 30)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBFault"))
if mibBuilder.loadTexts: dabDDExciterBFaultEvent.setStatus('current')
dabDDExciterBWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 31)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBWarning"))
if mibBuilder.loadTexts: dabDDExciterBWarningEvent.setStatus('current')
dabDDExciterBActiveInputEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 32)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBWarning"))
if mibBuilder.loadTexts: dabDDExciterBActiveInputEvent.setStatus('current')
dabDDExciterBSFNModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 33)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBSFNMode"))
if mibBuilder.loadTexts: dabDDExciterBSFNModeEvent.setStatus('current')
dabDDExciterBRefFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 34)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBRefFault"))
if mibBuilder.loadTexts: dabDDExciterBRefFaultEvent.setStatus('current')
dabDDExciterBMuteEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 35)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBMute"))
if mibBuilder.loadTexts: dabDDExciterBMuteEvent.setStatus('current')
dabDDExciterBWarningTimeStampEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 36)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBWarningTimeStamp"))
if mibBuilder.loadTexts: dabDDExciterBWarningTimeStampEvent.setStatus('current')
dabDDGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1))
dabDDInputPreselection = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 1), Input1Input2()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDInputPreselection.setStatus('current')
dabDDInputAutomatic = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 2), SelectManualAuto()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDInputAutomatic.setStatus('current')
dabDDPreselectionExciter = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("exciterA", 1), ("exciterB", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDPreselectionExciter.setStatus('current')
dabDDTransmitterOpMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 4), SelectOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDTransmitterOpMode.setStatus('current')
dabDDReserveControl = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 5), SelectOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDReserveControl.setStatus('current')
dabDDRFPresent = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 6), PresentNotPresent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDRFPresent.setStatus('current')
dabDDResetFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDResetFault.setStatus('obsolete')
dabDDAmplifierFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 8), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDAmplifierFault.setStatus('current')
dabDDAmplifierWarning = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 9), WarningOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDAmplifierWarning.setStatus('current')
dabDDActiveExciter = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("exciterA", 1), ("exciterB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDActiveExciter.setStatus('current')
dabDDLocalMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 11), LocalRemote()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDLocalMode.setStatus('current')
dabDDControlUnitFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 12), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDControlUnitFault.setStatus('current')
dabDDSwitchOverMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 13), SelectManualAuto()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDSwitchOverMode.setStatus('current')
dabDDSwitchOverReady = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 14), ReadyNotReady()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDSwitchOverReady.setStatus('current')
dabDDSwitchOverExecuted = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 15), ExecutedNotExecuted()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDSwitchOverExecuted.setStatus('current')
dabDDSwitchOverFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 16), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDSwitchOverFault.setStatus('current')
dabDDExciterA = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 2))
dabDDExciterAInput1OK = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 2, 1), OkNotOk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterAInput1OK.setStatus('current')
dabDDExciterAInput2OK = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 2, 2), OkNotOk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterAInput2OK.setStatus('current')
dabDDExciterALocalMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 2, 3), LocalRemote()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterALocalMode.setStatus('current')
dabDDExciterAFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 2, 4), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterAFault.setStatus('current')
dabDDExciterAWarning = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 2, 5), WarningOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterAWarning.setStatus('current')
dabDDExciterAActiveInput = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("input1", 1), ("input2", 2), ("seamless", 3), ("hmHierarchicalModulation", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterAActiveInput.setStatus('current')
dabDDExciterASFNMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 2, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterASFNMode.setStatus('current')
dabDDExciterARefFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 2, 8), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterARefFault.setStatus('current')
dabDDExciterAMute = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 2, 9), MuteOk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterAMute.setStatus('current')
dabDDExciterAWarningTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 2, 10), WarningOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterAWarningTimeStamp.setStatus('current')
dabDDExciterB = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 3))
dabDDExciterBInput1OK = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 3, 1), OkNotOk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterBInput1OK.setStatus('current')
dabDDExciterBInput2OK = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 3, 2), OkNotOk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterBInput2OK.setStatus('current')
dabDDExciterBLocalMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 3, 3), LocalRemote()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterBLocalMode.setStatus('current')
dabDDExciterBFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 3, 4), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterBFault.setStatus('current')
dabDDExciterBWarning = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 3, 5), WarningOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterBWarning.setStatus('current')
dabDDExciterBActiveInput = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("input1", 1), ("input2", 2), ("seamless", 3), ("hmHierarchicalModulation", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterBActiveInput.setStatus('current')
dabDDExciterBSFNMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 3, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterBSFNMode.setStatus('current')
dabDDExciterBRefFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 3, 8), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterBRefFault.setStatus('current')
dabDDExciterBMute = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 3, 9), MuteOk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterBMute.setStatus('current')
dabDDExciterBWarningTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 3, 10), WarningOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterBWarningTimeStamp.setStatus('current')
dabDDEventEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4))
dabDDEventEnableGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1))
dabDDInputPreselectionEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDInputPreselectionEnable.setStatus('current')
dabDDInputAutomaticEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDInputAutomaticEnable.setStatus('current')
dabDDPreselectionExciterEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDPreselectionExciterEnable.setStatus('current')
dabDDTransmitterOpModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDTransmitterOpModeEnable.setStatus('current')
dabDDReserveControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDReserveControlEnable.setStatus('current')
dabDDRFPresentEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDRFPresentEnable.setStatus('current')
dabDDResetFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDResetFaultEnable.setStatus('obsolete')
dabDDAmplifierFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDAmplifierFaultEnable.setStatus('current')
dabDDAmplifierWarningEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDAmplifierWarningEnable.setStatus('current')
dabDDActiveExciterEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDActiveExciterEnable.setStatus('current')
dabDDLocalModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDLocalModeEnable.setStatus('current')
dabDDControlUnitFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDControlUnitFaultEnable.setStatus('current')
dabDDSwitchOverModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDSwitchOverModeEnable.setStatus('current')
dabDDSwitchOverReadyEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDSwitchOverReadyEnable.setStatus('current')
dabDDSwitchOverExecutedEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDSwitchOverExecutedEnable.setStatus('current')
dabDDSwitchOverFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDSwitchOverFaultEnable.setStatus('current')
dabDDEventEnableExciterA = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 2))
dabDDExciterAInput1OKEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAInput1OKEnable.setStatus('current')
dabDDExciterAInput2OKEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 2, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAInput2OKEnable.setStatus('current')
dabDDExciterALocalModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 2, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterALocalModeEnable.setStatus('current')
dabDDExciterAFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 2, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAFaultEnable.setStatus('current')
dabDDExciterAWarningEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 2, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAWarningEnable.setStatus('current')
dabDDExciterAActiveInputEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 2, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAActiveInputEnable.setStatus('current')
dabDDExciterASFNModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 2, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterASFNModeEnable.setStatus('current')
dabDDExciterARefFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 2, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterARefFaultEnable.setStatus('current')
dabDDExciterAMuteEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 2, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAMuteEnable.setStatus('current')
dabDDExciterAWarningTimeStampEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 2, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAWarningTimeStampEnable.setStatus('current')
dabDDEventEnableExciterB = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 3))
dabDDExciterBInput1OKEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBInput1OKEnable.setStatus('current')
dabDDExciterBInput2OKEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 3, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBInput2OKEnable.setStatus('current')
dabDDExciterBLocalModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 3, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBLocalModeEnable.setStatus('current')
dabDDExciterBFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 3, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBFaultEnable.setStatus('current')
dabDDExciterBWarningEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 3, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBWarningEnable.setStatus('current')
dabDDExciterBActiveInputEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 3, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBActiveInputEnable.setStatus('current')
dabDDExciterBSFNModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 3, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBSFNModeEnable.setStatus('current')
dabDDExciterBRefFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 3, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBRefFaultEnable.setStatus('current')
dabDDExciterBMuteEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 3, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBMuteEnable.setStatus('current')
dabDDExciterBWarningTimeStampEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 3, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBWarningTimeStampEnable.setStatus('current')
dabDDEventPriority = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5))
dabDDEventPriorityGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1))
dabDDInputPreselectionPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDInputPreselectionPriority.setStatus('current')
dabDDInputAutomaticPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDInputAutomaticPriority.setStatus('current')
dabDDPreselectionExciterPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDPreselectionExciterPriority.setStatus('current')
dabDDTransmitterOpModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDTransmitterOpModePriority.setStatus('current')
dabDDReserveControlPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDReserveControlPriority.setStatus('current')
dabDDRFPresentPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDRFPresentPriority.setStatus('current')
dabDDResetFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDResetFaultPriority.setStatus('obsolete')
dabDDAmplifierFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDAmplifierFaultPriority.setStatus('current')
dabDDAmplifierWarningPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDAmplifierWarningPriority.setStatus('current')
dabDDActiveExciterPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDActiveExciterPriority.setStatus('current')
dabDDLocalModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDLocalModePriority.setStatus('current')
dabDDControlUnitFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDControlUnitFaultPriority.setStatus('current')
dabDDSwitchOverModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDSwitchOverModePriority.setStatus('current')
dabDDSwitchOverReadyPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDSwitchOverReadyPriority.setStatus('current')
dabDDSwitchOverExecutedPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDSwitchOverExecutedPriority.setStatus('current')
dabDDSwitchOverFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDSwitchOverFaultPriority.setStatus('current')
dabDDEventPriorityExciterA = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 2))
dabDDExciterAInput1OKPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 2, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAInput1OKPriority.setStatus('current')
dabDDExciterAInput2OKPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 2, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAInput2OKPriority.setStatus('current')
dabDDExciterALocalModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 2, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterALocalModePriority.setStatus('current')
dabDDExciterAFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 2, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAFaultPriority.setStatus('current')
dabDDExciterAWarningPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 2, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAWarningPriority.setStatus('current')
dabDDExciterAActiveInputPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 2, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAActiveInputPriority.setStatus('current')
dabDDExciterASFNModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 2, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterASFNModePriority.setStatus('current')
dabDDExciterARefFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 2, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterARefFaultPriority.setStatus('current')
dabDDExciterAMutePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 2, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAMutePriority.setStatus('current')
dabDDExciterAWarningTimeStampPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 2, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAWarningTimeStampPriority.setStatus('current')
dabDDEventPriorityExciterB = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 3))
dabDDExciterBInput1OKPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 3, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBInput1OKPriority.setStatus('current')
dabDDExciterBInput2OKPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 3, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBInput2OKPriority.setStatus('current')
dabDDExciterBLocalModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 3, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBLocalModePriority.setStatus('current')
dabDDExciterBFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 3, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBFaultPriority.setStatus('current')
dabDDExciterBWarningPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 3, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBWarningPriority.setStatus('current')
dabDDExciterBActiveInputPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 3, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBActiveInputPriority.setStatus('current')
dabDDExciterBSFNModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 3, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBSFNModePriority.setStatus('current')
dabDDExciterBRefFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 3, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBRefFaultPriority.setStatus('current')
dabDDExciterBMutePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 3, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBMutePriority.setStatus('current')
dabDDExciterBWarningTimeStampPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 3, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBWarningTimeStampPriority.setStatus('current')
groupsDD = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 6))
eventGroupDD = NotificationGroup((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 6, 1)).setObjects(("IRT-DAB-DUALDRIVE-MIB", "dabDDInputPreselectionEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDInputAutomaticEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDPreselectionExciterEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDTransmitterOpModeEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDReserveControlEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDRFPresentEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDAmplifierFaultEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDActiveExciterEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDLocalModeEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDControlUnitFaultEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverModeEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverReadyEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverExecutedEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverFaultEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAInput1OKEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAInput2OKEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterALocalModeEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAFaultEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAWarningEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAActiveInputEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterASFNModeEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterARefFaultEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAMuteEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAWarningTimeStampEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBInput1OKEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBInput2OKEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBLocalModeEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBFaultEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBWarningEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBActiveInputEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBSFNModeEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBRefFaultEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBMuteEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBWarningTimeStampEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDAmplifierWarningEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eventGroupDD = eventGroupDD.setStatus('current')
objectGroupDD = ObjectGroup((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 6, 2)).setObjects(("IRT-DAB-DUALDRIVE-MIB", "dabDDInputPreselection"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDInputAutomatic"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDPreselectionExciter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDTransmitterOpMode"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDReserveControl"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDRFPresent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDAmplifierFault"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDActiveExciter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDLocalMode"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDControlUnitFault"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverMode"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverReady"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverExecuted"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverFault"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAInput1OK"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAInput2OK"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterALocalMode"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAFault"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAWarning"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAActiveInput"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterASFNMode"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterARefFault"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAMute"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAWarningTimeStamp"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBInput1OK"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBInput2OK"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBLocalMode"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBFault"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBWarning"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBActiveInput"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBSFNMode"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBRefFault"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBMute"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBWarningTimeStamp"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDInputPreselectionEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDInputAutomaticEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDPreselectionExciterEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDTransmitterOpModeEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDReserveControlEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDRFPresentEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDAmplifierFaultEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDActiveExciterEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDLocalModeEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDControlUnitFaultEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverModeEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverReadyEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverExecutedEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverFaultEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAInput1OKEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAInput2OKEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterALocalModeEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAFaultEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAWarningEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAActiveInputEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterASFNModeEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterARefFaultEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAMuteEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAWarningTimeStampEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBInput1OKEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBInput2OKEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBLocalModeEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBFaultEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBWarningEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBActiveInputEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBSFNModeEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBRefFaultEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBMuteEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBWarningTimeStampEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDInputPreselectionPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDInputAutomaticPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDPreselectionExciterPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDTransmitterOpModePriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDReserveControlPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDRFPresentPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDAmplifierFaultPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDActiveExciterPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDLocalModePriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDControlUnitFaultPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverModePriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverReadyPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverExecutedPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverFaultPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAInput1OKPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAInput2OKPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterALocalModePriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAFaultPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAWarningPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAActiveInputPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterASFNModePriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterARefFaultPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAMutePriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAWarningTimeStampPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBInput1OKPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBInput2OKPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBLocalModePriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBFaultPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBWarningPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBActiveInputPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBSFNModePriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBRefFaultPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBMutePriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBWarningTimeStampPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDAmplifierWarning"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDAmplifierWarningEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDAmplifierWarningPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    objectGroupDD = objectGroupDD.setStatus('current')
eventGroupDDobsolete = NotificationGroup((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 6, 3)).setObjects(("IRT-DAB-DUALDRIVE-MIB", "dabDDResetFaultEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eventGroupDDobsolete = eventGroupDDobsolete.setStatus('obsolete')
objectGroupDDobsolete = ObjectGroup((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 6, 4)).setObjects(("IRT-DAB-DUALDRIVE-MIB", "dabDDResetFault"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDResetFaultEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDResetFaultPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    objectGroupDDobsolete = objectGroupDDobsolete.setStatus('obsolete')
complianceDD = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 7))
dabDualDriveCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 7, 1)).setObjects(("IRT-DAB-DUALDRIVE-MIB", "eventGroupDD"), ("IRT-DAB-DUALDRIVE-MIB", "objectGroupDD"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dabDualDriveCompliance = dabDualDriveCompliance.setStatus('current')
mibBuilder.exportSymbols("IRT-DAB-DUALDRIVE-MIB", dabDDExciterBMuteEnable=dabDDExciterBMuteEnable, dabDDInputAutomaticEvent=dabDDInputAutomaticEvent, dabEventsDD=dabEventsDD, dabDDInputPreselectionEnable=dabDDInputPreselectionEnable, dabDDExciterBInput2OKEnable=dabDDExciterBInput2OKEnable, eventGroupDD=eventGroupDD, dabDDSwitchOverReadyEvent=dabDDSwitchOverReadyEvent, dabDDActiveExciter=dabDDActiveExciter, dabDDEventPriorityGeneral=dabDDEventPriorityGeneral, dabDDSwitchOverReadyPriority=dabDDSwitchOverReadyPriority, dabDDSwitchOverExecuted=dabDDSwitchOverExecuted, dabDDAmplifierFaultPriority=dabDDAmplifierFaultPriority, dabDDTransmitterOpMode=dabDDTransmitterOpMode, dabDDExciterA=dabDDExciterA, dabDDActiveExciterEnable=dabDDActiveExciterEnable, objectGroupDD=objectGroupDD, dabDDEventEnable=dabDDEventEnable, dabDDExciterBFault=dabDDExciterBFault, dabDDPreselectionExciter=dabDDPreselectionExciter, dabDDExciterBActiveInputEvent=dabDDExciterBActiveInputEvent, dabDDSwitchOverExecutedEvent=dabDDSwitchOverExecutedEvent, dabDDExciterBWarningPriority=dabDDExciterBWarningPriority, groupsDD=groupsDD, dabDDResetFault=dabDDResetFault, dabDDExciterBActiveInput=dabDDExciterBActiveInput, dabDDControlUnitFaultPriority=dabDDControlUnitFaultPriority, dabDDExciterB=dabDDExciterB, dabDDExciterBFaultPriority=dabDDExciterBFaultPriority, dabDDExciterAInput1OKEvent=dabDDExciterAInput1OKEvent, dabDDExciterBInput1OKPriority=dabDDExciterBInput1OKPriority, dabDDExciterAActiveInputPriority=dabDDExciterAActiveInputPriority, dabDDReserveControlPriority=dabDDReserveControlPriority, dabDDEventPriorityExciterB=dabDDEventPriorityExciterB, dabDDLocalModeEnable=dabDDLocalModeEnable, dabDDExciterAInput1OKPriority=dabDDExciterAInput1OKPriority, dabDDSwitchOverFault=dabDDSwitchOverFault, dabDDExciterARefFaultEnable=dabDDExciterARefFaultEnable, dabDDExciterBWarning=dabDDExciterBWarning, dabDDInputAutomaticEnable=dabDDInputAutomaticEnable, dabDDExciterBWarningEnable=dabDDExciterBWarningEnable, dabDDExciterAInput2OKEnable=dabDDExciterAInput2OKEnable, dabDDExciterBRefFault=dabDDExciterBRefFault, dabDDExciterBInput2OK=dabDDExciterBInput2OK, dabDDExciterBWarningTimeStampPriority=dabDDExciterBWarningTimeStampPriority, dabDDExciterAMuteEvent=dabDDExciterAMuteEvent, dabDDAmplifierWarning=dabDDAmplifierWarning, dabDDAmplifierFaultEnable=dabDDAmplifierFaultEnable, dabDDExciterASFNMode=dabDDExciterASFNMode, dabDDExciterBSFNModePriority=dabDDExciterBSFNModePriority, dabDDExciterBActiveInputPriority=dabDDExciterBActiveInputPriority, dabDDExciterAWarningEnable=dabDDExciterAWarningEnable, dabDDReserveControl=dabDDReserveControl, dabDDActiveExciterEvent=dabDDActiveExciterEvent, objectGroupDDobsolete=objectGroupDDobsolete, dabDDExciterAInput1OK=dabDDExciterAInput1OK, dabDDExciterBFaultEvent=dabDDExciterBFaultEvent, dabDDExciterAMutePriority=dabDDExciterAMutePriority, dabDDSwitchOverModeEnable=dabDDSwitchOverModeEnable, dabDDInputPreselection=dabDDInputPreselection, dabDDControlUnitFault=dabDDControlUnitFault, dabDDExciterBSFNModeEvent=dabDDExciterBSFNModeEvent, dabDDExciterAWarningEvent=dabDDExciterAWarningEvent, dabDDTransmitterOpModePriority=dabDDTransmitterOpModePriority, dabDDExciterAMute=dabDDExciterAMute, dabDDExciterAWarningTimeStamp=dabDDExciterAWarningTimeStamp, dabDDSwitchOverReady=dabDDSwitchOverReady, dabDDEventPriorityExciterA=dabDDEventPriorityExciterA, dabDDResetFaultEvent=dabDDResetFaultEvent, dabDDEventEnableGeneral=dabDDEventEnableGeneral, dabDDSwitchOverReadyEnable=dabDDSwitchOverReadyEnable, dabDDPreselectionExciterEvent=dabDDPreselectionExciterEvent, dabDDExciterBInput1OKEvent=dabDDExciterBInput1OKEvent, dabDDAmplifierFault=dabDDAmplifierFault, dabDDExciterBActiveInputEnable=dabDDExciterBActiveInputEnable, dabDDLocalModePriority=dabDDLocalModePriority, dabDDExciterALocalMode=dabDDExciterALocalMode, dabDDExciterBRefFaultPriority=dabDDExciterBRefFaultPriority, dabDDSwitchOverMode=dabDDSwitchOverMode, dabDDExciterBLocalMode=dabDDExciterBLocalMode, dabDDExciterBLocalModeEnable=dabDDExciterBLocalModeEnable, dabDDTransmitterOpModeEnable=dabDDTransmitterOpModeEnable, dabDDExciterAInput2OKPriority=dabDDExciterAInput2OKPriority, complianceDD=complianceDD, dabDDExciterAWarning=dabDDExciterAWarning, dabDDAmplifierWarningEvent=dabDDAmplifierWarningEvent, dabDDSwitchOverModePriority=dabDDSwitchOverModePriority, dabDDSwitchOverExecutedPriority=dabDDSwitchOverExecutedPriority, dabDDExciterAWarningPriority=dabDDExciterAWarningPriority, dabDDExciterAFault=dabDDExciterAFault, dabDDExciterBInput2OKPriority=dabDDExciterBInput2OKPriority, dabDDExciterBWarningTimeStampEnable=dabDDExciterBWarningTimeStampEnable, dabDDExciterAWarningTimeStampEvent=dabDDExciterAWarningTimeStampEvent, dabDDResetFaultEnable=dabDDResetFaultEnable, dabDDLocalMode=dabDDLocalMode, dabDDTransmitterOpModeEvent=dabDDTransmitterOpModeEvent, dabDDResetFaultPriority=dabDDResetFaultPriority, dabDDExciterBRefFaultEnable=dabDDExciterBRefFaultEnable, dabDDExciterAFaultPriority=dabDDExciterAFaultPriority, dabDDEventPriority=dabDDEventPriority, dabDDExciterALocalModeEnable=dabDDExciterALocalModeEnable, dabDDExciterAInput1OKEnable=dabDDExciterAInput1OKEnable, dabDDExciterAMuteEnable=dabDDExciterAMuteEnable, dabDDExciterAActiveInputEnable=dabDDExciterAActiveInputEnable, dabDDExciterASFNModeEvent=dabDDExciterASFNModeEvent, dabDDRFPresentPriority=dabDDRFPresentPriority, dabDDExciterARefFaultEvent=dabDDExciterARefFaultEvent, dabDDExciterBSFNModeEnable=dabDDExciterBSFNModeEnable, dabDDExciterBRefFaultEvent=dabDDExciterBRefFaultEvent, dabDDControlUnitFaultEnable=dabDDControlUnitFaultEnable, dabDualDrive=dabDualDrive, dabDDExciterAInput2OK=dabDDExciterAInput2OK, dabDDExciterBSFNMode=dabDDExciterBSFNMode, dabDDSwitchOverModeEvent=dabDDSwitchOverModeEvent, dabDDExciterAActiveInputEvent=dabDDExciterAActiveInputEvent, dabDDInputAutomaticPriority=dabDDInputAutomaticPriority, dabDDInputPreselectionEvent=dabDDInputPreselectionEvent, dabDDExciterAWarningTimeStampPriority=dabDDExciterAWarningTimeStampPriority, dabDDSwitchOverFaultPriority=dabDDSwitchOverFaultPriority, dabDDAmplifierWarningPriority=dabDDAmplifierWarningPriority, dabDDExciterALocalModeEvent=dabDDExciterALocalModeEvent, dabDDExciterARefFaultPriority=dabDDExciterARefFaultPriority, dabDDInputAutomatic=dabDDInputAutomatic, dabDDEventEnableExciterA=dabDDEventEnableExciterA, dabDDExciterBLocalModePriority=dabDDExciterBLocalModePriority, dabDDAmplifierFaultEvent=dabDDAmplifierFaultEvent, dabDDActiveExciterPriority=dabDDActiveExciterPriority, dabDDExciterBInput2OKEvent=dabDDExciterBInput2OKEvent, dabDDAmplifierWarningEnable=dabDDAmplifierWarningEnable, dabDDPreselectionExciterPriority=dabDDPreselectionExciterPriority, dabDDGeneral=dabDDGeneral, dabDDExciterAFaultEvent=dabDDExciterAFaultEvent, dabDDRFPresentEvent=dabDDRFPresentEvent, dabDDExciterAWarningTimeStampEnable=dabDDExciterAWarningTimeStampEnable, dabDDExciterBFaultEnable=dabDDExciterBFaultEnable, dabDDExciterARefFault=dabDDExciterARefFault, dabDDExciterASFNModeEnable=dabDDExciterASFNModeEnable, dabDDControlUnitFaultEvent=dabDDControlUnitFaultEvent, dabDDExciterBInput1OKEnable=dabDDExciterBInput1OKEnable, dabDualDriveCompliance=dabDualDriveCompliance, dabDDSwitchOverFaultEvent=dabDDSwitchOverFaultEvent, dabDDExciterBWarningTimeStampEvent=dabDDExciterBWarningTimeStampEvent, dabDDSwitchOverExecutedEnable=dabDDSwitchOverExecutedEnable, dabDDExciterAFaultEnable=dabDDExciterAFaultEnable, dabDDRFPresent=dabDDRFPresent, dabDDSwitchOverFaultEnable=dabDDSwitchOverFaultEnable, dabDDExciterBMuteEvent=dabDDExciterBMuteEvent, dabDDReserveControlEvent=dabDDReserveControlEvent, dabDDExciterBLocalModeEvent=dabDDExciterBLocalModeEvent, dabDDExciterBMute=dabDDExciterBMute, dabDDLocalModeEvent=dabDDLocalModeEvent, dabDDExciterBWarningEvent=dabDDExciterBWarningEvent, eventGroupDDobsolete=eventGroupDDobsolete, dabDDExciterBMutePriority=dabDDExciterBMutePriority, dabDDExciterAInput2OKEvent=dabDDExciterAInput2OKEvent, dabDDRFPresentEnable=dabDDRFPresentEnable, PYSNMP_MODULE_ID=dabDualDrive, dabDDExciterAActiveInput=dabDDExciterAActiveInput, dabDDEventEnableExciterB=dabDDEventEnableExciterB, dabDDExciterALocalModePriority=dabDDExciterALocalModePriority, dabDDReserveControlEnable=dabDDReserveControlEnable, dabDDExciterASFNModePriority=dabDDExciterASFNModePriority, dabDDPreselectionExciterEnable=dabDDPreselectionExciterEnable, dabDDExciterBWarningTimeStamp=dabDDExciterBWarningTimeStamp, dabDDExciterBInput1OK=dabDDExciterBInput1OK, dabDDInputPreselectionPriority=dabDDInputPreselectionPriority)
