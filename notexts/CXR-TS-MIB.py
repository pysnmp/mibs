#
# PySNMP MIB module CXR-TS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/cxr-networks/CXR-TS-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:09:58 2024
# On host fv-az915-96 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
DisplayString, = mibBuilder.importSymbols("RFC-1213", "DisplayString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, ModuleIdentity, IpAddress, Counter32, Gauge32, MibIdentifier, NotificationType, ObjectIdentity, Unsigned32, TimeTicks, NotificationType, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "ModuleIdentity", "IpAddress", "Counter32", "Gauge32", "MibIdentifier", "NotificationType", "ObjectIdentity", "Unsigned32", "TimeTicks", "NotificationType", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cxr = MibIdentifier((1, 3, 6, 1, 4, 1, 1425))
ts = MibIdentifier((1, 3, 6, 1, 4, 1, 1425, 1040))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 1425, 1040, 1))
productName = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productName.setStatus('mandatory')
version = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: version.setStatus('mandatory')
bootp = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootp.setStatus('mandatory')
mainIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainIpAddress.setStatus('mandatory')
ipNetmask = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNetmask.setStatus('mandatory')
ipGateway = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGateway.setStatus('mandatory')
ethernetAddress = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetAddress.setStatus('mandatory')
ftpdService = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpdService.setStatus('mandatory')
httpdService = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpdService.setStatus('mandatory')
telnetdService = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetdService.setStatus('mandatory')
snmpdService = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpdService.setStatus('mandatory')
snmpTrap = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrap.setStatus('mandatory')
snmpTrapAddr1 = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapAddr1.setStatus('mandatory')
snmpTrapAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapAddr2.setStatus('mandatory')
nameResolution = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameResolution.setStatus('mandatory')
nameServer1 = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameServer1.setStatus('mandatory')
nameServer2 = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameServer2.setStatus('mandatory')
radiusServer1 = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServer1.setStatus('mandatory')
radiusSecret1 = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSecret1.setStatus('mandatory')
radiusServer2 = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServer2.setStatus('mandatory')
radiusSecret2 = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSecret2.setStatus('mandatory')
siteName = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteName.setStatus('mandatory')
resetByButton = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetByButton.setStatus('mandatory')
reset = MibScalar((1, 3, 6, 1, 4, 1, 1425, 1040, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reset.setStatus('mandatory')
portTable = MibTable((1, 3, 6, 1, 4, 1, 1425, 1040, 2), )
if mibBuilder.loadTexts: portTable.setStatus('mandatory')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1), ).setIndexNames((0, "CXR-TS-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('mandatory')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('mandatory')
tcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpPort.setStatus('mandatory')
aliasIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aliasIpAddress.setStatus('mandatory')
aliasIpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aliasIpNetmask.setStatus('mandatory')
timeoutRxTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeoutRxTx.setStatus('mandatory')
baudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("b300", 1), ("b600", 2), ("b1200", 3), ("b2400", 4), ("b4800", 5), ("b9600", 6), ("b19200", 7), ("b38400", 8), ("b57600", 9), ("b115200", 10), ("b50", 11), ("b200", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baudRate.setStatus('mandatory')
nbParStop = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 17, 18, 33, 34, 49, 50, 65, 66, 129, 130, 145, 146, 161, 162, 177, 178, 193, 194))).clone(namedValues=NamedValues(("p7Odd1", 1), ("p7Odd2", 2), ("p7Even1", 17), ("p7Even2", 18), ("p7None1", 33), ("p7None2", 34), ("p7High1", 49), ("p7High2", 50), ("p7Low1", 65), ("p7Low2", 66), ("p8Odd1", 129), ("p8Odd2", 130), ("p8Even1", 145), ("p8Even2", 146), ("p8None1", 161), ("p8None2", 162), ("p8High1", 177), ("p8High2", 178), ("p8Low1", 193), ("p8Low2", 194)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbParStop.setStatus('mandatory')
ipServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("passive", 2), ("passiveExclusive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipServer.setStatus('mandatory')
remoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteIpAddress.setStatus('mandatory')
gatewayToRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayToRemote.setStatus('mandatory')
remoteTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteTcpPort.setStatus('mandatory')
flowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noFlowControl", 1), ("xonXoff", 2), ("rtsCts", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowControl.setStatus('mandatory')
mode = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("rfc2217", 1), ("msgFormat", 2), ("carrierBreak", 3), ("telex", 4), ("rlogin", 5), ("lpd", 6), ("telnet", 7), ("rawIp", 8), ("rtelnet", 9), ("pad", 10), ("muxv24", 11), ("modbus", 12), ("hnzs2", 13), ("hnzs5", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mode.setStatus('mandatory')
rxIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxIdle.setStatus('mandatory')
txIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txIdle.setStatus('mandatory')
endMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endMsg.setStatus('mandatory')
interFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interFrame.setStatus('mandatory')
beforeSend = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: beforeSend.setStatus('mandatory')
afterSend = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: afterSend.setStatus('mandatory')
timeoutPAD = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeoutPAD.setStatus('mandatory')
terminalType = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("console", 1), ("linux", 2), ("aixterm", 3), ("dec-vt100", 4), ("vt100", 5), ("vt200", 6), ("vt420", 7), ("xterm", 8), ("xterms", 9), ("xtermc", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalType.setStatus('mandatory')
multiSession = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiSession.setStatus('mandatory')
authType = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("remote", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authType.setStatus('mandatory')
authRad1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authRad1.setStatus('mandatory')
authRad2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authRad2.setStatus('mandatory')
acctRad1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acctRad1.setStatus('mandatory')
acctRad2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acctRad2.setStatus('mandatory')
formFeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: formFeed.setStatus('mandatory')
secondIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondIpAddress.setStatus('mandatory')
secondGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 30), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondGateway.setStatus('mandatory')
secondTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondTcpPort.setStatus('mandatory')
modbusMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rtu", 1), ("ascii", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusMode.setStatus('mandatory')
modbusType = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slave", 1), ("master", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modbusType.setStatus('mandatory')
portReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 2, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portReset.setStatus('mandatory')
portStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1425, 1040, 3), )
if mibBuilder.loadTexts: portStatsTable.setStatus('mandatory')
portStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1425, 1040, 3, 1), ).setIndexNames((0, "CXR-TS-MIB", "portIndex"))
if mibBuilder.loadTexts: portStatsEntry.setStatus('mandatory')
bytesReceiveFromV24 = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bytesReceiveFromV24.setStatus('mandatory')
bytesSendToV24 = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bytesSendToV24.setStatus('mandatory')
statusDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusDTR.setStatus('mandatory')
modbusTable = MibTable((1, 3, 6, 1, 4, 1, 1425, 1040, 4), )
if mibBuilder.loadTexts: modbusTable.setStatus('mandatory')
modbusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1425, 1040, 4, 1), ).setIndexNames((0, "CXR-TS-MIB", "portIndex"))
if mibBuilder.loadTexts: modbusEntry.setStatus('mandatory')
slaveHexaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveHexaAddress.setStatus('mandatory')
slaveIPaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveIPaddr.setStatus('mandatory')
slaveIPport = MibTableColumn((1, 3, 6, 1, 4, 1, 1425, 1040, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveIPport.setStatus('mandatory')
sessionStarted = NotificationType((1, 3, 6, 1, 4, 1, 1425) + (0,1041)).setObjects(("CXR-TS-MIB", "portIndex"))
sessionStopped = NotificationType((1, 3, 6, 1, 4, 1, 1425) + (0,1042)).setObjects(("CXR-TS-MIB", "portIndex"))
dtrUp = NotificationType((1, 3, 6, 1, 4, 1, 1425) + (0,1043)).setObjects(("CXR-TS-MIB", "portIndex"))
dtrDown = NotificationType((1, 3, 6, 1, 4, 1, 1425) + (0,1044)).setObjects(("CXR-TS-MIB", "portIndex"))
mibBuilder.exportSymbols("CXR-TS-MIB", ipGateway=ipGateway, afterSend=afterSend, bytesReceiveFromV24=bytesReceiveFromV24, remoteTcpPort=remoteTcpPort, ftpdService=ftpdService, portStatsEntry=portStatsEntry, portReset=portReset, resetByButton=resetByButton, bytesSendToV24=bytesSendToV24, productName=productName, ipServer=ipServer, modbusEntry=modbusEntry, formFeed=formFeed, txIdle=txIdle, slaveHexaAddress=slaveHexaAddress, flowControl=flowControl, beforeSend=beforeSend, authRad1=authRad1, snmpTrap=snmpTrap, nbParStop=nbParStop, nameResolution=nameResolution, system=system, portIndex=portIndex, radiusSecret2=radiusSecret2, slaveIPaddr=slaveIPaddr, interFrame=interFrame, portStatsTable=portStatsTable, nameServer1=nameServer1, httpdService=httpdService, radiusServer1=radiusServer1, modbusType=modbusType, version=version, snmpTrapAddr2=snmpTrapAddr2, aliasIpNetmask=aliasIpNetmask, modbusTable=modbusTable, ipNetmask=ipNetmask, sessionStopped=sessionStopped, snmpTrapAddr1=snmpTrapAddr1, baudRate=baudRate, rxIdle=rxIdle, dtrUp=dtrUp, dtrDown=dtrDown, timeoutPAD=timeoutPAD, mode=mode, terminalType=terminalType, ethernetAddress=ethernetAddress, cxr=cxr, portEntry=portEntry, ts=ts, sessionStarted=sessionStarted, slaveIPport=slaveIPport, multiSession=multiSession, bootp=bootp, tcpPort=tcpPort, statusDTR=statusDTR, gatewayToRemote=gatewayToRemote, acctRad2=acctRad2, authRad2=authRad2, siteName=siteName, remoteIpAddress=remoteIpAddress, secondTcpPort=secondTcpPort, portTable=portTable, aliasIpAddress=aliasIpAddress, snmpdService=snmpdService, authType=authType, secondGateway=secondGateway, nameServer2=nameServer2, radiusSecret1=radiusSecret1, radiusServer2=radiusServer2, telnetdService=telnetdService, mainIpAddress=mainIpAddress, acctRad1=acctRad1, modbusMode=modbusMode, endMsg=endMsg, secondIpAddress=secondIpAddress, timeoutRxTx=timeoutRxTx, reset=reset)
