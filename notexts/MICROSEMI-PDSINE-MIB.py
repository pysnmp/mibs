#
# PySNMP MIB module MICROSEMI-PDSINE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/microsemi/MICROSEMI-PDSINE-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 11:58:07 2024
# On host fv-az665-602 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32, NotificationType, ModuleIdentity, ObjectIdentity, IpAddress, Bits, enterprises, iso, Counter64, MibIdentifier, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32", "NotificationType", "ModuleIdentity", "ObjectIdentity", "IpAddress", "Bits", "enterprises", "iso", "Counter64", "MibIdentifier", "Gauge32")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
polPowerOverLan = ModuleIdentity((1, 3, 6, 1, 4, 1, 7428))
if mibBuilder.loadTexts: polPowerOverLan.setLastUpdated('201111150000Z')
if mibBuilder.loadTexts: polPowerOverLan.setOrganization('')
products = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1))
description = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1))
sysObjectID = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1))
pseDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 2))
portObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 2, 1))
mainObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2))
poeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 3))
midspanUnknown = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 1))
midspan6portAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 2))
midspan6portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 3))
midspan12portAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 4))
midspan12portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 5))
midspan24portAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 6))
midspan24portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 7))
midspan48portAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 8))
midspan48portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 9))
midspan6portHPAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 10))
midspan6portHPACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 11))
midspan12portHPAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 12))
midspan12portHPACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 13))
midspanGigabit6portAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 14))
midspanGigabit12portAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 15))
midspanGigabit24portAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 16))
midspanHiPoEGigabit6portAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 17))
midspanHiPoEGigabit12portAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 18))
midspanHiPoEGigabit24portAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 19))
midspanHiPoEATGigabit6portAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 20))
midspanHiPoEATGigabit12portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 21))
midspanHiPoEATGigabit24portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 22))
midspan4PairATGigabit6portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 23))
midspan4PairATGigabit12portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 24))
midspanHiPoEATGigabit6portDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 25))
midspanHiPoEATGigabit12portDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 26))
midspanHiPoEATGigabit24portDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 27))
midspan4PairATGigabit24portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 28))
midspanEEPoEGigabit24portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 29))
midspanPoHGigabit6portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 30))
midspanPoHGigabit12portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 31))
midspanPoHGigabit24portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 32))
portTable = MibTable((1, 3, 6, 1, 4, 1, 7428, 1, 2, 1, 1), )
if mibBuilder.loadTexts: portTable.setStatus('current')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7428, 1, 2, 1, 1, 1), ).setIndexNames((0, "MICROSEMI-PDSINE-MIB", "portGroupIndex"), (0, "MICROSEMI-PDSINE-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
portGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: portGroupIndex.setStatus('current')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: portIndex.setStatus('current')
portConsumptionPower = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 1, 1, 1, 3), Gauge32()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: portConsumptionPower.setStatus('current')
portMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setUnits('Watt').setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMaxPower.setStatus('current')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twopair", 1), ("fourpair", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portType.setStatus('current')
mainPseTable = MibTable((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1), )
if mibBuilder.loadTexts: mainPseTable.setStatus('current')
mainPseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1), ).setIndexNames((0, "MICROSEMI-PDSINE-MIB", "pethMainPseGroupIndex"))
if mibBuilder.loadTexts: mainPseEntry.setStatus('current')
mainGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: mainGroupIndex.setStatus('current')
mainVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: mainVoltage.setStatus('current')
mainDetectionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ieee8023afat", 1), ("ieee8023afatandlegacy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainDetectionMethod.setStatus('current')
mainPowerUsageBudget = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainPowerUsageBudget.setStatus('current')
mainPSEMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: mainPSEMaxPower.setStatus('current')
highPowerLegacyPDSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highPowerLegacyPDSupport.setStatus('current')
highPowerExtendedPortPower = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highPowerExtendedPortPower.setStatus('current')
powerBackupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("standalone", 1), ("powerbackupbyrps", 2), ("powerbackupbymidspan", 3), ("incompatiblepowerbackupdevice", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerBackupStatus.setStatus('current')
internalPowerSourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalPowerSourceStatus.setStatus('current')
externalPowerSourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notsupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPowerSourceStatus.setStatus('current')
temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 11), Integer32()).setUnits('Degree').setMaxAccess("readonly")
if mibBuilder.loadTexts: temperature.setStatus('current')
temperatureformat = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("celcius", 1), ("fahrenheit", 2), ("notsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureformat.setStatus('current')
powerBackupStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 7428, 1, 3, 1)).setObjects(("MICROSEMI-PDSINE-MIB", "powerBackupStatus"))
if mibBuilder.loadTexts: powerBackupStatusNotification.setStatus('current')
internalPowerSourceStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 7428, 1, 3, 2)).setObjects(("MICROSEMI-PDSINE-MIB", "internalPowerSourceStatus"))
if mibBuilder.loadTexts: internalPowerSourceStatusNotification.setStatus('current')
externalPowerSourceStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 7428, 1, 3, 3)).setObjects(("MICROSEMI-PDSINE-MIB", "externalPowerSourceStatus"))
if mibBuilder.loadTexts: externalPowerSourceStatusNotification.setStatus('current')
mibBuilder.exportSymbols("MICROSEMI-PDSINE-MIB", PYSNMP_MODULE_ID=polPowerOverLan, mainGroupIndex=mainGroupIndex, mainPSEMaxPower=mainPSEMaxPower, midspan6portHPACDC=midspan6portHPACDC, temperatureformat=temperatureformat, midspan6portACDC=midspan6portACDC, midspanPoHGigabit24portACDC=midspanPoHGigabit24portACDC, sysObjectID=sysObjectID, midspan6portAC=midspan6portAC, externalPowerSourceStatusNotification=externalPowerSourceStatusNotification, midspan12portACDC=midspan12portACDC, midspanEEPoEGigabit24portACDC=midspanEEPoEGigabit24portACDC, portIndex=portIndex, polPowerOverLan=polPowerOverLan, midspanGigabit6portAC=midspanGigabit6portAC, midspanPoHGigabit6portACDC=midspanPoHGigabit6portACDC, highPowerLegacyPDSupport=highPowerLegacyPDSupport, portTable=portTable, portGroupIndex=portGroupIndex, mainDetectionMethod=mainDetectionMethod, externalPowerSourceStatus=externalPowerSourceStatus, poeNotifications=poeNotifications, midspanGigabit24portAC=midspanGigabit24portAC, midspanHiPoEATGigabit6portDC=midspanHiPoEATGigabit6portDC, mainPseEntry=mainPseEntry, midspanGigabit12portAC=midspanGigabit12portAC, portConsumptionPower=portConsumptionPower, internalPowerSourceStatus=internalPowerSourceStatus, mainObjects=mainObjects, powerBackupStatus=powerBackupStatus, midspan48portAC=midspan48portAC, midspanHiPoEGigabit6portAC=midspanHiPoEGigabit6portAC, midspanHiPoEATGigabit12portDC=midspanHiPoEATGigabit12portDC, description=description, highPowerExtendedPortPower=highPowerExtendedPortPower, portType=portType, midspan4PairATGigabit12portACDC=midspan4PairATGigabit12portACDC, midspan24portAC=midspan24portAC, mainPseTable=mainPseTable, mainVoltage=mainVoltage, midspan12portHPAC=midspan12portHPAC, midspanHiPoEGigabit12portAC=midspanHiPoEGigabit12portAC, products=products, pseDevice=pseDevice, portMaxPower=portMaxPower, midspanHiPoEATGigabit12portACDC=midspanHiPoEATGigabit12portACDC, internalPowerSourceStatusNotification=internalPowerSourceStatusNotification, midspanHiPoEATGigabit6portAC=midspanHiPoEATGigabit6portAC, midspanPoHGigabit12portACDC=midspanPoHGigabit12portACDC, portEntry=portEntry, mainPowerUsageBudget=mainPowerUsageBudget, temperature=temperature, midspan24portACDC=midspan24portACDC, midspan48portACDC=midspan48portACDC, midspan12portHPACDC=midspan12portHPACDC, midspanHiPoEATGigabit24portACDC=midspanHiPoEATGigabit24portACDC, midspanUnknown=midspanUnknown, midspan4PairATGigabit6portACDC=midspan4PairATGigabit6portACDC, midspan12portAC=midspan12portAC, midspan6portHPAC=midspan6portHPAC, midspan4PairATGigabit24portACDC=midspan4PairATGigabit24portACDC, powerBackupStatusNotification=powerBackupStatusNotification, portObjects=portObjects, midspanHiPoEGigabit24portAC=midspanHiPoEGigabit24portAC, midspanHiPoEATGigabit24portDC=midspanHiPoEATGigabit24portDC)
