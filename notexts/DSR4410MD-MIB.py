#
# PySNMP MIB module DSR4410MD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/arris/DSR4410MD-MIB
# Produced by pysmi-1.1.12 at Tue May 28 12:03:19 2024
# On host fv-az1490-484 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, IpAddress, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity, Counter32, Counter64, ObjectIdentity, Bits, MibIdentifier, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity", "Counter32", "Counter64", "ObjectIdentity", "Bits", "MibIdentifier", "TimeTicks", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dsr = ModuleIdentity((1, 3, 6, 1, 4, 1, 1166, 1, 621))
dsr.setRevisions(('2014-04-23 10:00', '2011-08-10 10:00', '2011-02-04 10:00', '2011-02-02 10:00', '2011-01-07 10:00', '2010-12-09 10:00', '2010-12-08 10:00', '2010-11-29 10:00', '2010-06-22 10:00',))
if mibBuilder.loadTexts: dsr.setLastUpdated('201404231000Z')
if mibBuilder.loadTexts: dsr.setOrganization('ARRIS Group INC')
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
giMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1166))
giproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1))
videoMib = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 1))
videoOutput525Lines = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ntsc", 0), ("palm", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: videoOutput525Lines.setStatus('current')
videoOutput625Lines = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pal-d-g-b", 0), ("pali", 1), ("paln", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: videoOutput625Lines.setStatus('current')
aspectRatioInput = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ar4x3", 0), ("ar16x9", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspectRatioInput.setStatus('current')
aspectRatioOutput = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ar4x3-Zoom", 0), ("ar4x3-PanScan", 1), ("ar4x3-LetterBox", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aspectRatioOutput.setStatus('current')
rfPortsMib = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2))
rfPortsSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2, 1))
port1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2, 1, 1))
port1SetupMode = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("manual", 0), ("auto", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port1SetupMode.setStatus('current')
port1Satellite = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port1Satellite.setStatus('current')
port1Polarity = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("horizontal", 0), ("vertical", 1), ("notDefined", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port1Polarity.setStatus('current')
port2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2, 1, 2))
port2SetupMode = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("manual", 0), ("auto", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port2SetupMode.setStatus('current')
port2Satellite = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2, 1, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port2Satellite.setStatus('current')
port2Polarity = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("horizontal", 0), ("vertical", 1), ("notDefined", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port2Polarity.setStatus('current')
manualTune = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2, 2))
activePort = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 8))).clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("asiInput", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activePort.setStatus('current')
mode = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("xpndr", 0), ("lfreq", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mode.setStatus('current')
transponderNumber = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transponderNumber.setStatus('current')
frequency = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(950, 2150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frequency.setStatus('current')
dvbSymbolRate = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbSymbolRate.setStatus('current')
dvbCodeRate = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("cr1-2", 0), ("cr2-3", 1), ("cr3-4", 2), ("cr5-6", 3), ("cr7-8", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbCodeRate.setStatus('current')
symbolCodeBit = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73))).clone(namedValues=NamedValues(("sr29Cm5-11Combined", 0), ("sr29Cm1-2Combined", 1), ("sr29Cm3-5Combined", 2), ("sr29Cm2-3Combined", 3), ("sr29Cm3-4Combined", 4), ("sr29Cm4-5Combined", 5), ("sr29Cm5-6Combined", 6), ("sr29Cm7-8Combined", 7), ("sr29Cm5-11Split", 8), ("sr29Cm1-2Split", 9), ("sr29Cm3-5Split", 10), ("sr29Cm2-3Split", 11), ("sr29Cm3-4Split", 12), ("sr29Cm4-5Split", 13), ("sr29Cm5-6Split", 14), ("sr29Cm7-8Split", 15), ("sr19Cm5-11Combined", 16), ("sr19Cm1-2Combined", 17), ("sr19Cm3-5Combined", 18), ("sr19Cm2-3Combined", 19), ("sr19Cm3-4Combined", 20), ("sr19Cm4-5Combined", 21), ("sr19Cm5-6Combined", 22), ("sr19Cm7-8Combined", 23), ("sr19Cm5-11Split", 24), ("sr19Cm1-2Split", 25), ("sr19Cm3-5Split", 26), ("sr19Cm2-3Split", 27), ("sr19Cm3-4Split", 28), ("sr19Cm4-5Split", 29), ("sr19Cm5-6Split", 30), ("sr19Cm7-8Split", 31), ("sr14Cm1-2Combined", 32), ("sr14Cm3-5Combined", 33), ("sr14Cm2-3Combined", 34), ("sr14Cm3-4Combined", 35), ("sr14Cm4-5Combined", 36), ("sr14Cm5-6Combined", 37), ("sr14Cm7-8Combined", 38), ("sr11Cm1-2Combined", 39), ("sr11Cm3-5Combined", 40), ("sr11Cm2-3Combined", 41), ("sr11Cm3-4Combined", 42), ("sr11Cm4-5Combined", 43), ("sr11Cm5-6Combined", 44), ("sr11Cm7-8Combined", 45), ("sr9Cm1-2Combined", 46), ("sr9Cm3-5Combined", 47), ("sr9Cm2-3Combined", 48), ("sr9Cm3-4Combined", 49), ("sr9Cm4-5Combined", 50), ("sr9Cm5-6Combined", 51), ("sr9Cm7-8Combined", 52), ("sr7Cm1-2Combined", 53), ("sr7Cm3-5Combined", 54), ("sr7Cm2-3Combined", 55), ("sr7Cm3-4Combined", 56), ("sr7Cm4-5Combined", 57), ("sr7Cm5-6Combined", 58), ("sr7Cm7-8Combined", 59), ("sr4Cm1-2Combined", 60), ("sr4Cm3-5Combined", 61), ("sr4Cm2-3Combined", 62), ("sr4Cm3-4Combined", 63), ("sr4Cm4-5Combined", 64), ("sr4Cm5-6Combined", 65), ("sr4Cm7-8Combined", 66), ("sr3Cm1-2Combined", 67), ("sr3Cm3-5Combined", 68), ("sr3Cm2-3Combined", 69), ("sr3Cm3-4Combined", 70), ("sr3Cm4-5Combined", 71), ("sr3Cm5-6Combined", 72), ("sr3Cm7-8Combined", 73)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: symbolCodeBit.setStatus('current')
modulationMode = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("dciiManual", 0), ("dvbManual", 1), ("dciiAuto", 2), ("manual8pskTC", 3), ("manual8pskDvbS2", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modulationMode.setStatus('current')
psk8SymbolRate = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000000, 30000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psk8SymbolRate.setStatus('current')
psk8CodeRate = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cr2-3-192", 0), ("cr3-4-205", 1), ("cr3-4-211", 2), ("cr3-4-219", 3), ("cr5-6-230", 4), ("cr8-9-240", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psk8CodeRate.setStatus('current')
dvbS2symbolRate = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000000, 33000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbS2symbolRate.setStatus('current')
dvbS2codeRate = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 2, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cr3-5", 0), ("cr2-3", 1), ("cr3-4", 2), ("cr5-6", 3), ("cr8-9", 4), ("cr9-10", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvbS2codeRate.setStatus('current')
channelMib = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 3))
channelSelect = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 3, 1))
vctID = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctID.setStatus('current')
channelNumber = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelNumber.setStatus('current')
channelStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 3, 2))
transponder = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 3, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transponder.setStatus('current')
source = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 3, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: source.setStatus('current')
satelliteStatus = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 3, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satelliteStatus.setStatus('current')
serviceSelectionMib = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 4))
mpegServiceNumber = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpegServiceNumber.setStatus('current')
unitControlMib = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 5))
unitControl = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 5, 1))
contrast = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contrast.setStatus('current')
asiEnable = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("lock-off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asiEnable.setStatus('current')
lnbPower = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lnbPower.setStatus('current')
resetIRD = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("powercycle", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetIRD.setStatus('current')
formatRate = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("byte54", 0), ("packet54", 1), ("packet81", 2), ("packet160", 3), ("byte27", 4), ("packet27", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: formatRate.setStatus('current')
audioMib = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6))
audioConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 1))
audio1Config = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 1, 1))
audio1GainControl = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("joint", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audio1GainControl.setStatus('current')
audio1LeftGain = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audio1LeftGain.setStatus('current')
audio1RightGain = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audio1RightGain.setStatus('current')
audio1DiagNorm = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audio1DiagNorm.setStatus('current')
audio1DownMix = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("mono", 0), ("dualMono", 1), ("stereo", 2), ("surround", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audio1DownMix.setStatus('current')
audio1Compression = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("moderate", 1), ("heavy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audio1Compression.setStatus('current')
audio2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 1, 2))
audio2GainControl = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("joint", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audio2GainControl.setStatus('current')
audio2LeftGain = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audio2LeftGain.setStatus('current')
audio2RightGain = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audio2RightGain.setStatus('current')
audio2DiagNorm = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audio2DiagNorm.setStatus('current')
audio2DownMix = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("mono", 0), ("dualMono", 1), ("stereo", 2), ("surround", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audio2DownMix.setStatus('current')
audio2Compression = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("moderate", 1), ("heavy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audio2Compression.setStatus('current')
audioOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 2))
audio1Output = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 2, 1))
audio1LeftLanguage = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 2, 1, 1), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(3, 3), ValueSizeConstraint(5, 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audio1LeftLanguage.setStatus('current')
audio1RightLanguage = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 2, 1, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(3, 3), ValueSizeConstraint(5, 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audio1RightLanguage.setStatus('current')
audio1LeftLanguageStatus = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 2, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(3, 3), ValueSizeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audio1LeftLanguageStatus.setStatus('current')
audio1RightLanguageStatus = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 2, 1, 4), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(3, 3), ValueSizeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audio1RightLanguageStatus.setStatus('current')
audio2Output = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 2, 2))
audio2LeftLanguage = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 2, 2, 1), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(3, 3), ValueSizeConstraint(5, 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audio2LeftLanguage.setStatus('current')
audio2RightLanguage = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 2, 2, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(3, 3), ValueSizeConstraint(5, 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audio2RightLanguage.setStatus('current')
audio2LeftLanguageStatus = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 2, 2, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(3, 3), ValueSizeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audio2LeftLanguageStatus.setStatus('current')
audio2RightLanguageStatus = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 6, 2, 2, 4), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(3, 3), ValueSizeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audio2RightLanguageStatus.setStatus('current')
dataMib = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 7))
dataStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 7, 1))
ethernetIP = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("defined", 0), ("notDefined", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetIP.setStatus('current')
textSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 7, 2))
subtitleLanguage = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 7, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subtitleLanguage.setStatus('current')
subtitleLanguageStatus = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 7, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subtitleLanguageStatus.setStatus('current')
subtitleDisplay = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 7, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("all", 0), ("avail", 1), ("status", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subtitleDisplay.setStatus('current')
ethernet10_100 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 7, 3)).setLabel("ethernet10-100")
ipAddress = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 7, 3, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddress.setStatus('current')
subnetMask = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 7, 3, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetMask.setStatus('current')
defaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 7, 3, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultGateway.setStatus('current')
macAddr = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 7, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddr.setStatus('current')
ethernetGigE = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 7, 4))
gigEipAddress = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 7, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gigEipAddress.setStatus('current')
gigEsubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 7, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gigEsubnetMask.setStatus('current')
gigEgateway = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 7, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gigEgateway.setStatus('current')
gigEmacAddr = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 7, 4, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gigEmacAddr.setStatus('current')
gigEmode = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 7, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("mpts", 0), ("disabled", 1), ("tsdsmcc", 2), ("dsmcc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gigEmode.setStatus('current')
mptsIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 7, 4, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mptsIpAddr.setStatus('current')
mptsPort = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 7, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mptsPort.setStatus('current')
extHardwareMib = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 8))
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 8, 1))
alarmTrigger = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("noSignal", 0), ("noVideoPresent", 1), ("noAuthorization", 2), ("auto", 3), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmTrigger.setStatus('current')
alarmTest = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmTest.setStatus('current')
statusMib = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 9))
accessControl = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 9, 1))
unitAddress = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 9, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(19, 19)).setFixedLength(19)).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitAddress.setStatus('current')
tvPasscard = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(26, 26)).setFixedLength(26)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tvPasscard.setStatus('current')
firmware = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 9, 2))
bootVersion = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 9, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootVersion.setStatus('current')
fpgaVersion = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 9, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaVersion.setStatus('current')
firmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 9, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
upgradeFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 9, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: upgradeFirmwareVersion.setStatus('current')
diagnosticMib = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 10))
screenDisplay = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 10, 1))
diagnosticScreen = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("off", 0), ("fastFacts1", 1), ("fastFacts2", 2), ("fastFacts3", 3), ("fastFacts4", 4), ("fastFacts5", 5), ("diagA", 6), ("diagB", 7), ("diagBMD", 8), ("diagC", 9), ("diagD", 10), ("diagE", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagnosticScreen.setStatus('current')
clearCounters = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearCounters.setStatus('current')
testSignals = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 10, 2))
videoTestPattern = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 10, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 0), ("colorBar525", 1), ("ire100Ramp", 2), ("ntsc7Combination", 3), ("redField", 4), ("ntsc7Composite", 5), ("fiveStepStair", 6), ("unModulatedYRamp", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: videoTestPattern.setStatus('current')
audio1TestPattern = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 10, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("testToneA-1000", 0), ("testToneB-4040-3960", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audio1TestPattern.setStatus('current')
audio2TestPattern = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 10, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("testToneA-1000", 0), ("testToneB-4040-3960", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audio2TestPattern.setStatus('current')
cueToneSignal = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 10, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cueToneSignal.setStatus('current')
vits = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 10, 3))
waveform = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 10, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("transmitted", 0), ("disabled", 1), ("colorBar525", 2), ("ire100Ramp", 3), ("ntsc7Combination", 4), ("redField", 5), ("ntsc7Composite", 6), ("fiveStepStair", 7), ("unModulatedYRamp", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waveform.setStatus('current')
field = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 10, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("field1", 0), ("field2", 1), ("na", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: field.setStatus('current')
line = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 10, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("line17", 0), ("line18", 1), ("na", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: line.setStatus('current')
signalStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 11))
acquisitionState = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("locked", 0), ("unLocked", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acquisitionState.setStatus('current')
authorizationState = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("missingMap", 0), ("undefinedChannel", 1), ("undefinedService", 2), ("notInSync", 3), ("noProgramRekey", 4), ("noWorkingKey", 5), ("noEventBlackOut", 6), ("noCategoryKey", 7), ("oldCategorySequence", 8), ("programBought", 9), ("programBoughtWithoutTaping", 10), ("subscribedWithTaping", 11), ("subscribedWithoutTaping", 12), ("subscribedWithTapingPurchasable", 13), ("ippvWithTaping", 14), ("ippvWithoutTaping", 15), ("badSeedChecksum", 16), ("badDebitChecksum", 17), ("ippvNotEnabled", 18), ("insufficientCreditToPurchase", 19), ("showCountLimitExceeded", 20), ("debitRegisterWillOverflow", 21), ("noAnytimeFreePreviewRecordsAvailable", 22), ("maximumPackageCostExceeded", 23), ("noIPPVOverlayInMessage", 24), ("notSubscribed", 25), ("regionalBlackout", 26), ("eventBlackout", 27), ("circulatBlackout", 28), ("authorized", 29), ("unencrypted", 30), ("unknown", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authorizationState.setStatus('current')
encryptionMode = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("encrypted", 0), ("fixedWorkingKey", 1), ("fixedProgramKey", 2), ("unencrypted", 3), ("na", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: encryptionMode.setStatus('current')
unitAddr = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 11, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(19, 19)).setFixedLength(19)).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitAddr.setStatus('current')
vctIDFast = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 11, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctIDFast.setStatus('current')
channelNum = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 11, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelNum.setStatus('current')
serviceNumber = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 11, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceNumber.setStatus('current')
signalQuality = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 11, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalQuality.setStatus('current')
signalPower = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 11, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-800, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalPower.setStatus('current')
ebNo = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 11, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebNo.setStatus('current')
symbolRate = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 11, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sr29Msps", 0), ("sr19Msps", 1), ("sr14Msps", 2), ("sr11Msps", 3), ("sr9Msps", 4), ("sr7Msps", 5), ("sr4Msps", 6), ("sr3Msps", 7), ("unknown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: symbolRate.setStatus('current')
fecRate = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 11, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("cr5-11", 0), ("cr1-2", 1), ("cr1-92-8PSK", 2), ("cr3-5", 3), ("cr2-05-8PSK", 4), ("cr2-3", 5), ("cr2-11-8PSK", 6), ("cr3-4", 7), ("cr4-5", 8), ("cr5-6", 9), ("cr2-19-8PSK", 10), ("cr7-8", 11), ("cr2-30-8PSK", 12), ("cr2-40-8PSK", 13), ("unknown", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecRate.setStatus('current')
freq = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 11, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(950000, 2150000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: freq.setStatus('current')
satelliteName = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 11, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satelliteName.setStatus('current')
xpndrNumber = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 11, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpndrNumber.setStatus('current')
polarization = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 11, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("h", 0), ("v", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: polarization.setStatus('current')
muxStatus = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 11, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("combined", 0), ("split", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxStatus.setStatus('current')
ledStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 12))
signalLED = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("blink", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalLED.setStatus('current')
authorizedLED = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("blink", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authorizedLED.setStatus('current')
alarmConditionLED = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("blink", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmConditionLED.setStatus('current')
downloadLED = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("blink", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: downloadLED.setStatus('current')
retuneMonitorMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 13))
retuneMonitorEnable = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: retuneMonitorEnable.setStatus('current')
retuneMsgStatistic = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retuneMsgStatistic.setStatus('current')
retuneMsgVirtNetworkIDindex = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: retuneMsgVirtNetworkIDindex.setStatus('current')
retuneMsgVCTid = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 13, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retuneMsgVCTid.setStatus('current')
retuneMsgVirtChannel = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 13, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retuneMsgVirtChannel.setStatus('current')
retuneMsgActivationTime = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 13, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retuneMsgActivationTime.setStatus('current')
retuneMsgCRC = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 13, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retuneMsgCRC.setStatus('current')
retuneMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 13, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retuneMsgCnt.setStatus('current')
identificationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 14))
identMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 14, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identMIBVersion.setStatus('current')
identUnitModel = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 14, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identUnitModel.setStatus('current')
acpMib = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 15))
acpMode = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("auto", 0), ("manual", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpMode.setStatus('current')
acpIndex = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpIndex.setStatus('current')
acpProgram = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpProgram.setStatus('current')
acpUnitAddress = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 15, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpUnitAddress.setStatus('current')
acpKeyStream = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 15, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpKeyStream.setStatus('current')
acpAuthState = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 15, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpAuthState.setStatus('current')
acpEncryptMode = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 15, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpEncryptMode.setStatus('current')
testMib = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16))
audio = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 1))
primaryAudioLock = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unLocked", 0), ("locked", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryAudioLock.setStatus('current')
secondaryAudioLock = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unLocked", 0), ("locked", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secondaryAudioLock.setStatus('current')
primaryAudioPID = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryAudioPID.setStatus('current')
secondaryAudioPID = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secondaryAudioPID.setStatus('current')
video = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 2))
videoLock = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unLocked", 0), ("locked", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: videoLock.setStatus('current')
videoPID = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: videoPID.setStatus('current')
codeDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 3))
codeDownloadBit = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: codeDownloadBit.setStatus('current')
irdStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 4))
falseLock = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 4, 1))
falseLockStatus = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unLocked", 0), ("locked", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falseLockStatus.setStatus('current')
alarmLedStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 4, 2))
alarmLEDBlinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notBlinking", 0), ("blinking", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLEDBlinkStatus.setStatus('current')
messages = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 5))
patMsgCount = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: patMsgCount.setStatus('current')
caMsgCount = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMsgCount.setStatus('current')
pmtMsgCount = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmtMsgCount.setStatus('current')
niMsgCount = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: niMsgCount.setStatus('current')
networkTextMsgCount = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkTextMsgCount.setStatus('current')
virtualChannelMsgCount = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualChannelMsgCount.setStatus('current')
subtitleMsgCount = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subtitleMsgCount.setStatus('current')
coMsgCount = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coMsgCount.setStatus('current')
dwnldPreMsgCount = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dwnldPreMsgCount.setStatus('current')
dwnldMsgCount = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dwnldMsgCount.setStatus('current')
emmMsgCount = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 5, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emmMsgCount.setStatus('current')
fingerPrintMessageCount = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fingerPrintMessageCount.setStatus('current')
hcmMsgCount = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 5, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcmMsgCount.setStatus('current')
uimMsgCount = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 5, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uimMsgCount.setStatus('current')
evenBlkoutMsgCount = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 5, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evenBlkoutMsgCount.setStatus('current')
rf = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 6))
frequencyOffset = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequencyOffset.setStatus('current')
ber = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ber.setStatus('current')
ebno = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebno.setStatus('current')
rserror = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rserror.setStatus('current')
lostlockcount = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lostlockcount.setStatus('current')
clearrserror = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearrserror.setStatus('current')
clearlostlockcount = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearlostlockcount.setStatus('current')
snr = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 621, 16, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snr.setStatus('current')
mibBuilder.exportSymbols("DSR4410MD-MIB", firmwareVersion=firmwareVersion, channelMib=channelMib, downloadLED=downloadLED, hcmMsgCount=hcmMsgCount, acpEncryptMode=acpEncryptMode, snr=snr, line=line, dvbCodeRate=dvbCodeRate, pmtMsgCount=pmtMsgCount, emmMsgCount=emmMsgCount, accessControl=accessControl, ipAddress=ipAddress, ethernet10_100=ethernet10_100, alarmTest=alarmTest, gigEipAddress=gigEipAddress, unitControlMib=unitControlMib, lnbPower=lnbPower, retuneMsgCRC=retuneMsgCRC, patMsgCount=patMsgCount, evenBlkoutMsgCount=evenBlkoutMsgCount, retuneMsgVirtChannel=retuneMsgVirtChannel, testSignals=testSignals, fpgaVersion=fpgaVersion, audio1RightLanguageStatus=audio1RightLanguageStatus, port2=port2, acpUnitAddress=acpUnitAddress, messages=messages, audio2RightLanguageStatus=audio2RightLanguageStatus, dsr=dsr, audio1DiagNorm=audio1DiagNorm, acpAuthState=acpAuthState, identUnitModel=identUnitModel, secondaryAudioPID=secondaryAudioPID, videoMib=videoMib, dwnldPreMsgCount=dwnldPreMsgCount, signalPower=signalPower, transponder=transponder, audio1TestPattern=audio1TestPattern, serviceSelectionMib=serviceSelectionMib, retuneMonitorEnable=retuneMonitorEnable, channelStatus=channelStatus, ebNo=ebNo, acquisitionState=acquisitionState, audio1DownMix=audio1DownMix, cueToneSignal=cueToneSignal, vctID=vctID, audio2Config=audio2Config, giMIB=giMIB, acpKeyStream=acpKeyStream, audio1Compression=audio1Compression, encryptionMode=encryptionMode, unitAddress=unitAddress, symbolRate=symbolRate, audio2TestPattern=audio2TestPattern, videoPID=videoPID, upgradeFirmwareVersion=upgradeFirmwareVersion, field=field, private=private, port1=port1, audio2DiagNorm=audio2DiagNorm, gigEmacAddr=gigEmacAddr, audio2Compression=audio2Compression, mode=mode, gigEgateway=gigEgateway, port2Satellite=port2Satellite, statusMib=statusMib, networkTextMsgCount=networkTextMsgCount, audioMib=audioMib, subtitleDisplay=subtitleDisplay, audio2RightLanguage=audio2RightLanguage, internet=internet, channelNum=channelNum, org=org, aspectRatioInput=aspectRatioInput, ethernetIP=ethernetIP, unitControl=unitControl, dataMib=dataMib, rfPortsSetup=rfPortsSetup, clearlostlockcount=clearlostlockcount, acpMode=acpMode, identMIBVersion=identMIBVersion, giproducts=giproducts, gigEsubnetMask=gigEsubnetMask, waveform=waveform, authorizedLED=authorizedLED, testMib=testMib, symbolCodeBit=symbolCodeBit, alarms=alarms, audio1RightGain=audio1RightGain, textSetup=textSetup, identificationGroup=identificationGroup, gigEmode=gigEmode, videoTestPattern=videoTestPattern, niMsgCount=niMsgCount, videoOutput625Lines=videoOutput625Lines, port2Polarity=port2Polarity, audio1RightLanguage=audio1RightLanguage, audio1LeftLanguageStatus=audio1LeftLanguageStatus, aspectRatioOutput=aspectRatioOutput, asiEnable=asiEnable, audio2GainControl=audio2GainControl, frequency=frequency, retuneMsgVCTid=retuneMsgVCTid, codeDownload=codeDownload, uimMsgCount=uimMsgCount, signalLED=signalLED, rserror=rserror, psk8SymbolRate=psk8SymbolRate, retuneMsgCnt=retuneMsgCnt, PYSNMP_MODULE_ID=dsr, authorizationState=authorizationState, ber=ber, enterprises=enterprises, primaryAudioLock=primaryAudioLock, channelNumber=channelNumber, contrast=contrast, coMsgCount=coMsgCount, frequencyOffset=frequencyOffset, irdStatus=irdStatus, audio2DownMix=audio2DownMix, codeDownloadBit=codeDownloadBit, firmware=firmware, freq=freq, source=source, falseLockStatus=falseLockStatus, alarmConditionLED=alarmConditionLED, alarmLedStatus=alarmLedStatus, tvPasscard=tvPasscard, audio1LeftLanguage=audio1LeftLanguage, videoOutput525Lines=videoOutput525Lines, diagnosticMib=diagnosticMib, formatRate=formatRate, virtualChannelMsgCount=virtualChannelMsgCount, audio1Output=audio1Output, mpegServiceNumber=mpegServiceNumber, lostlockcount=lostlockcount, activePort=activePort, dvbSymbolRate=dvbSymbolRate, retuneMsgActivationTime=retuneMsgActivationTime, rf=rf, port1Satellite=port1Satellite, videoLock=videoLock, ethernetGigE=ethernetGigE, audio2LeftGain=audio2LeftGain, audio2RightGain=audio2RightGain, diagnosticScreen=diagnosticScreen, vctIDFast=vctIDFast, audioOutput=audioOutput, audio1LeftGain=audio1LeftGain, port2SetupMode=port2SetupMode, audio2LeftLanguage=audio2LeftLanguage, unitAddr=unitAddr, channelSelect=channelSelect, audio1Config=audio1Config, audio2LeftLanguageStatus=audio2LeftLanguageStatus, subtitleLanguageStatus=subtitleLanguageStatus, port1SetupMode=port1SetupMode, dwnldMsgCount=dwnldMsgCount, port1Polarity=port1Polarity, serviceNumber=serviceNumber, acpIndex=acpIndex, dvbS2codeRate=dvbS2codeRate, retuneMsgVirtNetworkIDindex=retuneMsgVirtNetworkIDindex, audio1GainControl=audio1GainControl, alarmLEDBlinkStatus=alarmLEDBlinkStatus, subtitleMsgCount=subtitleMsgCount, psk8CodeRate=psk8CodeRate, retuneMonitorMIB=retuneMonitorMIB, audioConfig=audioConfig, ebno=ebno, screenDisplay=screenDisplay, clearrserror=clearrserror, acpProgram=acpProgram, transponderNumber=transponderNumber, primaryAudioPID=primaryAudioPID, dod=dod, fingerPrintMessageCount=fingerPrintMessageCount, macAddr=macAddr, satelliteName=satelliteName, secondaryAudioLock=secondaryAudioLock, video=video, audio2Output=audio2Output, mptsPort=mptsPort, retuneMsgStatistic=retuneMsgStatistic, caMsgCount=caMsgCount, audio=audio, satelliteStatus=satelliteStatus, resetIRD=resetIRD, extHardwareMib=extHardwareMib, defaultGateway=defaultGateway, polarization=polarization, clearCounters=clearCounters, dataStatus=dataStatus, subtitleLanguage=subtitleLanguage, subnetMask=subnetMask, xpndrNumber=xpndrNumber, alarmTrigger=alarmTrigger, manualTune=manualTune, muxStatus=muxStatus, vits=vits, acpMib=acpMib, mptsIpAddr=mptsIpAddr, modulationMode=modulationMode, rfPortsMib=rfPortsMib, signalStatus=signalStatus, fecRate=fecRate, bootVersion=bootVersion, ledStatus=ledStatus, signalQuality=signalQuality, falseLock=falseLock, dvbS2symbolRate=dvbS2symbolRate)
