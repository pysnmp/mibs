#
# PySNMP MIB module IEEE802dot11-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/output/asn1/IEEE802dot11-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 08:18:17 2024
# On host fv-az530-683 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Unsigned32, Counter32, ObjectIdentity, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, MibIdentifier, Counter64, Integer32, NotificationType, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "ObjectIdentity", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "MibIdentifier", "Counter64", "Integer32", "NotificationType", "ModuleIdentity", "TimeTicks")
RowStatus, TruthValue, TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TextualConvention", "DisplayString", "MacAddress")
member_body = MibIdentifier((1, 2)).setLabel("member-body")
us = MibIdentifier((1, 2, 840))
ieee802dot11 = ModuleIdentity((1, 2, 840, 10036))
if mibBuilder.loadTexts: ieee802dot11.setLastUpdated('0208300000Z')
if mibBuilder.loadTexts: ieee802dot11.setOrganization('IEEE 802.11')
dot11smt = MibIdentifier((1, 2, 840, 10036, 1))
dot11mac = MibIdentifier((1, 2, 840, 10036, 2))
dot11res = MibIdentifier((1, 2, 840, 10036, 3))
dot11resAttribute = MibIdentifier((1, 2, 840, 10036, 3, 1))
dot11phy = MibIdentifier((1, 2, 840, 10036, 4))
class WEPKeytype(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(5, 5)
    fixedLength = 5

dot11StationConfigTable = MibTable((1, 2, 840, 10036, 1, 1), )
if mibBuilder.loadTexts: dot11StationConfigTable.setStatus('current')
dot11StationConfigEntry = MibTableRow((1, 2, 840, 10036, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11StationConfigEntry.setStatus('current')
dot11StationID = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11StationID.setStatus('deprecated')
dot11MediumOccupancyLimit = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MediumOccupancyLimit.setStatus('current')
dot11CFPollable = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11CFPollable.setStatus('current')
dot11CFPPeriod = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CFPPeriod.setStatus('current')
dot11CFPMaxDuration = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CFPMaxDuration.setStatus('current')
dot11AuthenticationResponseTimeOut = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AuthenticationResponseTimeOut.setStatus('current')
dot11PrivacyOptionImplemented = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11PrivacyOptionImplemented.setStatus('current')
dot11PowerManagementMode = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("powersave", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PowerManagementMode.setStatus('current')
dot11DesiredSSID = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DesiredSSID.setStatus('current')
dot11DesiredBSSType = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("infrastructure", 1), ("independent", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DesiredBSSType.setStatus('current')
dot11OperationalRateSet = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11OperationalRateSet.setStatus('current')
dot11BeaconPeriod = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11BeaconPeriod.setStatus('current')
dot11DTIMPeriod = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DTIMPeriod.setStatus('current')
dot11AssociationResponseTimeOut = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AssociationResponseTimeOut.setStatus('current')
dot11DisassociateReason = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11DisassociateReason.setStatus('current')
dot11DisassociateStation = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 16), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11DisassociateStation.setStatus('current')
dot11DeauthenticateReason = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11DeauthenticateReason.setStatus('current')
dot11DeauthenticateStation = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 18), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11DeauthenticateStation.setStatus('current')
dot11AuthenticateFailStatus = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11AuthenticateFailStatus.setStatus('current')
dot11AuthenticateFailStation = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 20), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11AuthenticateFailStation.setStatus('current')
dot11MultiDomainCapabilityImplemented = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MultiDomainCapabilityImplemented.setStatus('current')
dot11MultiDomainCapabilityEnabled = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MultiDomainCapabilityEnabled.setStatus('current')
dot11CountryString = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11CountryString.setStatus('current')
dot11AuthenticationAlgorithmsTable = MibTable((1, 2, 840, 10036, 1, 2), )
if mibBuilder.loadTexts: dot11AuthenticationAlgorithmsTable.setStatus('current')
dot11AuthenticationAlgorithmsEntry = MibTableRow((1, 2, 840, 10036, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11AuthenticationAlgorithmsIndex"))
if mibBuilder.loadTexts: dot11AuthenticationAlgorithmsEntry.setStatus('current')
dot11AuthenticationAlgorithmsIndex = MibTableColumn((1, 2, 840, 10036, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11AuthenticationAlgorithmsIndex.setStatus('current')
dot11AuthenticationAlgorithm = MibTableColumn((1, 2, 840, 10036, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("openSystem", 1), ("sharedKey", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11AuthenticationAlgorithm.setStatus('current')
dot11AuthenticationAlgorithmsEnable = MibTableColumn((1, 2, 840, 10036, 1, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AuthenticationAlgorithmsEnable.setStatus('current')
dot11WEPDefaultKeysTable = MibTable((1, 2, 840, 10036, 1, 3), )
if mibBuilder.loadTexts: dot11WEPDefaultKeysTable.setStatus('current')
dot11WEPDefaultKeysEntry = MibTableRow((1, 2, 840, 10036, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11WEPDefaultKeyIndex"))
if mibBuilder.loadTexts: dot11WEPDefaultKeysEntry.setStatus('current')
dot11WEPDefaultKeyIndex = MibTableColumn((1, 2, 840, 10036, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dot11WEPDefaultKeyIndex.setStatus('current')
dot11WEPDefaultKeyValue = MibTableColumn((1, 2, 840, 10036, 1, 3, 1, 2), WEPKeytype()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WEPDefaultKeyValue.setStatus('current')
dot11WEPKeyMappingsTable = MibTable((1, 2, 840, 10036, 1, 4), )
if mibBuilder.loadTexts: dot11WEPKeyMappingsTable.setStatus('current')
dot11WEPKeyMappingsEntry = MibTableRow((1, 2, 840, 10036, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11WEPKeyMappingIndex"))
if mibBuilder.loadTexts: dot11WEPKeyMappingsEntry.setStatus('current')
dot11WEPKeyMappingIndex = MibTableColumn((1, 2, 840, 10036, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11WEPKeyMappingIndex.setStatus('current')
dot11WEPKeyMappingAddress = MibTableColumn((1, 2, 840, 10036, 1, 4, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot11WEPKeyMappingAddress.setStatus('current')
dot11WEPKeyMappingWEPOn = MibTableColumn((1, 2, 840, 10036, 1, 4, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot11WEPKeyMappingWEPOn.setStatus('current')
dot11WEPKeyMappingValue = MibTableColumn((1, 2, 840, 10036, 1, 4, 1, 4), WEPKeytype()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot11WEPKeyMappingValue.setStatus('current')
dot11WEPKeyMappingStatus = MibTableColumn((1, 2, 840, 10036, 1, 4, 1, 5), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot11WEPKeyMappingStatus.setStatus('current')
dot11PrivacyTable = MibTable((1, 2, 840, 10036, 1, 5), )
if mibBuilder.loadTexts: dot11PrivacyTable.setStatus('current')
dot11PrivacyEntry = MibTableRow((1, 2, 840, 10036, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11PrivacyEntry.setStatus('current')
dot11PrivacyInvoked = MibTableColumn((1, 2, 840, 10036, 1, 5, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PrivacyInvoked.setStatus('current')
dot11WEPDefaultKeyID = MibTableColumn((1, 2, 840, 10036, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WEPDefaultKeyID.setStatus('current')
dot11WEPKeyMappingLength = MibTableColumn((1, 2, 840, 10036, 1, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WEPKeyMappingLength.setStatus('current')
dot11ExcludeUnencrypted = MibTableColumn((1, 2, 840, 10036, 1, 5, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExcludeUnencrypted.setStatus('current')
dot11WEPICVErrorCount = MibTableColumn((1, 2, 840, 10036, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WEPICVErrorCount.setStatus('current')
dot11WEPExcludedCount = MibTableColumn((1, 2, 840, 10036, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WEPExcludedCount.setStatus('current')
dot11SMTnotification = MibIdentifier((1, 2, 840, 10036, 1, 6))
dot11Disassociate = NotificationType((1, 2, 840, 10036, 1, 6, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IEEE802dot11-MIB", "dot11DisassociateReason"), ("IEEE802dot11-MIB", "dot11DisassociateStation"))
if mibBuilder.loadTexts: dot11Disassociate.setStatus('current')
dot11Deauthenticate = NotificationType((1, 2, 840, 10036, 1, 6, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("IEEE802dot11-MIB", "dot11DeauthenticateReason"), ("IEEE802dot11-MIB", "dot11DeauthenticateStation"))
if mibBuilder.loadTexts: dot11Deauthenticate.setStatus('current')
dot11AuthenticateFail = NotificationType((1, 2, 840, 10036, 1, 6, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("IEEE802dot11-MIB", "dot11AuthenticateFailStatus"), ("IEEE802dot11-MIB", "dot11AuthenticateFailStation"))
if mibBuilder.loadTexts: dot11AuthenticateFail.setStatus('current')
dot11MultiDomainCapabilityTable = MibTable((1, 2, 840, 10036, 1, 7), )
if mibBuilder.loadTexts: dot11MultiDomainCapabilityTable.setStatus('current')
dot11MultiDomainCapabilityEntry = MibTableRow((1, 2, 840, 10036, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11MultiDomainCapabilityIndex"))
if mibBuilder.loadTexts: dot11MultiDomainCapabilityEntry.setStatus('current')
dot11MultiDomainCapabilityIndex = MibTableColumn((1, 2, 840, 10036, 1, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11MultiDomainCapabilityIndex.setStatus('current')
dot11FirstChannelNumber = MibTableColumn((1, 2, 840, 10036, 1, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11FirstChannelNumber.setStatus('current')
dot11NumberofChannels = MibTableColumn((1, 2, 840, 10036, 1, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11NumberofChannels.setStatus('current')
dot11MaximumTransmitPowerLevel = MibTableColumn((1, 2, 840, 10036, 1, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MaximumTransmitPowerLevel.setStatus('current')
dot11OperationTable = MibTable((1, 2, 840, 10036, 2, 1), )
if mibBuilder.loadTexts: dot11OperationTable.setStatus('current')
dot11OperationEntry = MibTableRow((1, 2, 840, 10036, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11OperationEntry.setStatus('current')
dot11MACAddress = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MACAddress.setStatus('current')
dot11RTSThreshold = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2347))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RTSThreshold.setStatus('current')
dot11ShortRetryLimit = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ShortRetryLimit.setStatus('current')
dot11LongRetryLimit = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11LongRetryLimit.setStatus('current')
dot11FragmentationThreshold = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11FragmentationThreshold.setStatus('current')
dot11MaxTransmitMSDULifetime = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MaxTransmitMSDULifetime.setStatus('current')
dot11MaxReceiveLifetime = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MaxReceiveLifetime.setStatus('current')
dot11ManufacturerID = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ManufacturerID.setStatus('current')
dot11ProductID = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ProductID.setStatus('current')
dot11CountersTable = MibTable((1, 2, 840, 10036, 2, 2), )
if mibBuilder.loadTexts: dot11CountersTable.setStatus('current')
dot11CountersEntry = MibTableRow((1, 2, 840, 10036, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11CountersEntry.setStatus('current')
dot11TransmittedFragmentCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedFragmentCount.setStatus('current')
dot11MulticastTransmittedFrameCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MulticastTransmittedFrameCount.setStatus('current')
dot11FailedCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11FailedCount.setStatus('current')
dot11RetryCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RetryCount.setStatus('current')
dot11MultipleRetryCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MultipleRetryCount.setStatus('current')
dot11FrameDuplicateCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11FrameDuplicateCount.setStatus('current')
dot11RTSSuccessCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RTSSuccessCount.setStatus('current')
dot11RTSFailureCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RTSFailureCount.setStatus('current')
dot11ACKFailureCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ACKFailureCount.setStatus('current')
dot11ReceivedFragmentCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceivedFragmentCount.setStatus('current')
dot11MulticastReceivedFrameCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MulticastReceivedFrameCount.setStatus('current')
dot11FCSErrorCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11FCSErrorCount.setStatus('current')
dot11TransmittedFrameCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedFrameCount.setStatus('current')
dot11WEPUndecryptableCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WEPUndecryptableCount.setStatus('current')
dot11GroupAddressesTable = MibTable((1, 2, 840, 10036, 2, 3), )
if mibBuilder.loadTexts: dot11GroupAddressesTable.setStatus('current')
dot11GroupAddressesEntry = MibTableRow((1, 2, 840, 10036, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11GroupAddressesIndex"))
if mibBuilder.loadTexts: dot11GroupAddressesEntry.setStatus('current')
dot11GroupAddressesIndex = MibTableColumn((1, 2, 840, 10036, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11GroupAddressesIndex.setStatus('current')
dot11Address = MibTableColumn((1, 2, 840, 10036, 2, 3, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot11Address.setStatus('current')
dot11GroupAddressesStatus = MibTableColumn((1, 2, 840, 10036, 2, 3, 1, 3), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot11GroupAddressesStatus.setStatus('current')
dot11ResourceTypeIDName = MibScalar((1, 2, 840, 10036, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone('RTID')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ResourceTypeIDName.setStatus('current')
dot11ResourceInfoTable = MibTable((1, 2, 840, 10036, 3, 1, 2), )
if mibBuilder.loadTexts: dot11ResourceInfoTable.setStatus('current')
dot11ResourceInfoEntry = MibTableRow((1, 2, 840, 10036, 3, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11ResourceInfoEntry.setStatus('current')
dot11manufacturerOUI = MibTableColumn((1, 2, 840, 10036, 3, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11manufacturerOUI.setStatus('current')
dot11manufacturerName = MibTableColumn((1, 2, 840, 10036, 3, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11manufacturerName.setStatus('current')
dot11manufacturerProductName = MibTableColumn((1, 2, 840, 10036, 3, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11manufacturerProductName.setStatus('current')
dot11manufacturerProductVersion = MibTableColumn((1, 2, 840, 10036, 3, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11manufacturerProductVersion.setStatus('current')
dot11PhyOperationTable = MibTable((1, 2, 840, 10036, 4, 1), )
if mibBuilder.loadTexts: dot11PhyOperationTable.setStatus('current')
dot11PhyOperationEntry = MibTableRow((1, 2, 840, 10036, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11PhyOperationEntry.setStatus('current')
dot11PHYType = MibTableColumn((1, 2, 840, 10036, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("fhss", 1), ("dsss", 2), ("irbaseband", 3), ("ofdm", 4), ("hrdsss", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11PHYType.setStatus('current')
dot11CurrentRegDomain = MibTableColumn((1, 2, 840, 10036, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentRegDomain.setStatus('current')
dot11TempType = MibTableColumn((1, 2, 840, 10036, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tempType1", 1), ("tempType2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TempType.setStatus('current')
dot11PhyAntennaTable = MibTable((1, 2, 840, 10036, 4, 2), )
if mibBuilder.loadTexts: dot11PhyAntennaTable.setStatus('current')
dot11PhyAntennaEntry = MibTableRow((1, 2, 840, 10036, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11PhyAntennaEntry.setStatus('current')
dot11CurrentTxAntenna = MibTableColumn((1, 2, 840, 10036, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentTxAntenna.setStatus('current')
dot11DiversitySupport = MibTableColumn((1, 2, 840, 10036, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fixedlist", 1), ("notsupported", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11DiversitySupport.setStatus('current')
dot11CurrentRxAntenna = MibTableColumn((1, 2, 840, 10036, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentRxAntenna.setStatus('current')
dot11PhyTxPowerTable = MibTable((1, 2, 840, 10036, 4, 3), )
if mibBuilder.loadTexts: dot11PhyTxPowerTable.setStatus('current')
dot11PhyTxPowerEntry = MibTableRow((1, 2, 840, 10036, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11PhyTxPowerEntry.setStatus('current')
dot11NumberSupportedPowerLevels = MibTableColumn((1, 2, 840, 10036, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11NumberSupportedPowerLevels.setStatus('current')
dot11TxPowerLevel1 = MibTableColumn((1, 2, 840, 10036, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TxPowerLevel1.setStatus('current')
dot11TxPowerLevel2 = MibTableColumn((1, 2, 840, 10036, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TxPowerLevel2.setStatus('current')
dot11TxPowerLevel3 = MibTableColumn((1, 2, 840, 10036, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TxPowerLevel3.setStatus('current')
dot11TxPowerLevel4 = MibTableColumn((1, 2, 840, 10036, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TxPowerLevel4.setStatus('current')
dot11TxPowerLevel5 = MibTableColumn((1, 2, 840, 10036, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TxPowerLevel5.setStatus('current')
dot11TxPowerLevel6 = MibTableColumn((1, 2, 840, 10036, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TxPowerLevel6.setStatus('current')
dot11TxPowerLevel7 = MibTableColumn((1, 2, 840, 10036, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TxPowerLevel7.setStatus('current')
dot11TxPowerLevel8 = MibTableColumn((1, 2, 840, 10036, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TxPowerLevel8.setStatus('current')
dot11CurrentTxPowerLevel = MibTableColumn((1, 2, 840, 10036, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentTxPowerLevel.setStatus('current')
dot11PhyFHSSTable = MibTable((1, 2, 840, 10036, 4, 4), )
if mibBuilder.loadTexts: dot11PhyFHSSTable.setStatus('current')
dot11PhyFHSSEntry = MibTableRow((1, 2, 840, 10036, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11PhyFHSSEntry.setStatus('current')
dot11HopTime = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(224, 224))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11HopTime.setStatus('current')
dot11CurrentChannelNumber = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentChannelNumber.setStatus('current')
dot11MaxDwellTime = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MaxDwellTime.setStatus('current')
dot11CurrentDwellTime = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentDwellTime.setStatus('current')
dot11CurrentSet = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentSet.setStatus('current')
dot11CurrentPattern = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentPattern.setStatus('current')
dot11CurrentIndex = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentIndex.setStatus('current')
dot11EHCCPrimeRadix = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11EHCCPrimeRadix.setStatus('current')
dot11EHCCNumberofChannelsFamilyIndex = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11EHCCNumberofChannelsFamilyIndex.setStatus('current')
dot11EHCCCapabilityImplemented = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11EHCCCapabilityImplemented.setStatus('current')
dot11EHCCCapabilityEnabled = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11EHCCCapabilityEnabled.setStatus('current')
dot11HopAlgorithmAdopted = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("crnt", 1), ("hopindex", 2), ("hcc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11HopAlgorithmAdopted.setStatus('current')
dot11RandomTableFlag = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RandomTableFlag.setStatus('current')
dot11NumberofHoppingSets = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11NumberofHoppingSets.setStatus('current')
dot11HopModulus = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11HopModulus.setStatus('current')
dot11HopOffset = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11HopOffset.setStatus('current')
dot11PhyDSSSTable = MibTable((1, 2, 840, 10036, 4, 5), )
if mibBuilder.loadTexts: dot11PhyDSSSTable.setStatus('current')
dot11PhyDSSSEntry = MibTableRow((1, 2, 840, 10036, 4, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11PhyDSSSEntry.setStatus('current')
dot11CurrentChannel = MibTableColumn((1, 2, 840, 10036, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentChannel.setStatus('current')
dot11CCAModeSupported = MibTableColumn((1, 2, 840, 10036, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11CCAModeSupported.setStatus('current')
dot11CurrentCCAMode = MibTableColumn((1, 2, 840, 10036, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))).clone(namedValues=NamedValues(("edonly", 1), ("csonly", 2), ("edandcs", 4), ("cswithtimer", 8), ("hrcsanded", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentCCAMode.setStatus('current')
dot11EDThreshold = MibTableColumn((1, 2, 840, 10036, 4, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11EDThreshold.setStatus('current')
dot11PhyIRTable = MibTable((1, 2, 840, 10036, 4, 6), )
if mibBuilder.loadTexts: dot11PhyIRTable.setStatus('current')
dot11PhyIREntry = MibTableRow((1, 2, 840, 10036, 4, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11PhyIREntry.setStatus('current')
dot11CCAWatchdogTimerMax = MibTableColumn((1, 2, 840, 10036, 4, 6, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CCAWatchdogTimerMax.setStatus('current')
dot11CCAWatchdogCountMax = MibTableColumn((1, 2, 840, 10036, 4, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CCAWatchdogCountMax.setStatus('current')
dot11CCAWatchdogTimerMin = MibTableColumn((1, 2, 840, 10036, 4, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CCAWatchdogTimerMin.setStatus('current')
dot11CCAWatchdogCountMin = MibTableColumn((1, 2, 840, 10036, 4, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CCAWatchdogCountMin.setStatus('current')
dot11RegDomainsSupportedTable = MibTable((1, 2, 840, 10036, 4, 7), )
if mibBuilder.loadTexts: dot11RegDomainsSupportedTable.setStatus('current')
dot11RegDomainsSupportedEntry = MibTableRow((1, 2, 840, 10036, 4, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11RegDomainsSupportedIndex"))
if mibBuilder.loadTexts: dot11RegDomainsSupportedEntry.setStatus('current')
dot11RegDomainsSupportedIndex = MibTableColumn((1, 2, 840, 10036, 4, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11RegDomainsSupportedIndex.setStatus('current')
dot11RegDomainsSupportedValue = MibTableColumn((1, 2, 840, 10036, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32, 48, 49, 50, 64))).clone(namedValues=NamedValues(("fcc", 16), ("doc", 32), ("etsi", 48), ("spain", 49), ("france", 50), ("mkk", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RegDomainsSupportedValue.setStatus('current')
dot11AntennasListTable = MibTable((1, 2, 840, 10036, 4, 8), )
if mibBuilder.loadTexts: dot11AntennasListTable.setStatus('current')
dot11AntennasListEntry = MibTableRow((1, 2, 840, 10036, 4, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11AntennaListIndex"))
if mibBuilder.loadTexts: dot11AntennasListEntry.setStatus('current')
dot11AntennaListIndex = MibTableColumn((1, 2, 840, 10036, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: dot11AntennaListIndex.setStatus('current')
dot11SupportedTxAntenna = MibTableColumn((1, 2, 840, 10036, 4, 8, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SupportedTxAntenna.setStatus('current')
dot11SupportedRxAntenna = MibTableColumn((1, 2, 840, 10036, 4, 8, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SupportedRxAntenna.setStatus('current')
dot11DiversitySelectionRx = MibTableColumn((1, 2, 840, 10036, 4, 8, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DiversitySelectionRx.setStatus('current')
dot11SupportedDataRatesTxTable = MibTable((1, 2, 840, 10036, 4, 9), )
if mibBuilder.loadTexts: dot11SupportedDataRatesTxTable.setStatus('current')
dot11SupportedDataRatesTxEntry = MibTableRow((1, 2, 840, 10036, 4, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11SupportedDataRatesTxIndex"))
if mibBuilder.loadTexts: dot11SupportedDataRatesTxEntry.setStatus('current')
dot11SupportedDataRatesTxIndex = MibTableColumn((1, 2, 840, 10036, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: dot11SupportedDataRatesTxIndex.setStatus('current')
dot11SupportedDataRatesTxValue = MibTableColumn((1, 2, 840, 10036, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SupportedDataRatesTxValue.setStatus('current')
dot11SupportedDataRatesRxTable = MibTable((1, 2, 840, 10036, 4, 10), )
if mibBuilder.loadTexts: dot11SupportedDataRatesRxTable.setStatus('current')
dot11SupportedDataRatesRxEntry = MibTableRow((1, 2, 840, 10036, 4, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11SupportedDataRatesRxIndex"))
if mibBuilder.loadTexts: dot11SupportedDataRatesRxEntry.setStatus('current')
dot11SupportedDataRatesRxIndex = MibTableColumn((1, 2, 840, 10036, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: dot11SupportedDataRatesRxIndex.setStatus('current')
dot11SupportedDataRatesRxValue = MibTableColumn((1, 2, 840, 10036, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SupportedDataRatesRxValue.setStatus('current')
dot11PhyOFDMTable = MibTable((1, 2, 840, 10036, 4, 11), )
if mibBuilder.loadTexts: dot11PhyOFDMTable.setStatus('current')
dot11PhyOFDMEntry = MibTableRow((1, 2, 840, 10036, 4, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11PhyOFDMEntry.setStatus('current')
dot11CurrentFrequency = MibTableColumn((1, 2, 840, 10036, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentFrequency.setStatus('current')
dot11TIThreshold = MibTableColumn((1, 2, 840, 10036, 4, 11, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11TIThreshold.setStatus('current')
dot11FrequencyBandsSupported = MibTableColumn((1, 2, 840, 10036, 4, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11FrequencyBandsSupported.setStatus('current')
dot11PhyHRDSSSTable = MibTable((1, 2, 840, 10036, 4, 12), )
if mibBuilder.loadTexts: dot11PhyHRDSSSTable.setStatus('current')
dot11PhyHRDSSSEntry = MibTableRow((1, 2, 840, 10036, 4, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11PhyHRDSSSEntry.setStatus('current')
dot11ShortPreambleOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 12, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ShortPreambleOptionImplemented.setStatus('current')
dot11PBCCOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 12, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11PBCCOptionImplemented.setStatus('current')
dot11ChannelAgilityPresent = MibTableColumn((1, 2, 840, 10036, 4, 12, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ChannelAgilityPresent.setStatus('current')
dot11ChannelAgilityEnabled = MibTableColumn((1, 2, 840, 10036, 4, 12, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ChannelAgilityEnabled.setStatus('current')
dot11HRCCAModeSupported = MibTableColumn((1, 2, 840, 10036, 4, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11HRCCAModeSupported.setStatus('current')
dot11HoppingPatternTable = MibTable((1, 2, 840, 10036, 4, 13), )
if mibBuilder.loadTexts: dot11HoppingPatternTable.setStatus('current')
dot11HoppingPatternEntry = MibTableRow((1, 2, 840, 10036, 4, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11HoppingPatternIndex"))
if mibBuilder.loadTexts: dot11HoppingPatternEntry.setStatus('current')
dot11HoppingPatternIndex = MibTableColumn((1, 2, 840, 10036, 4, 13, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11HoppingPatternIndex.setStatus('current')
dot11RandomTableFieldNumber = MibTableColumn((1, 2, 840, 10036, 4, 13, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RandomTableFieldNumber.setStatus('current')
dot11Conformance = MibIdentifier((1, 2, 840, 10036, 5))
dot11Groups = MibIdentifier((1, 2, 840, 10036, 5, 1))
dot11Compliances = MibIdentifier((1, 2, 840, 10036, 5, 2))
dot11Compliance = ModuleCompliance((1, 2, 840, 10036, 5, 2, 1)).setObjects(("IEEE802dot11-MIB", "dot11SMTbase2"), ("IEEE802dot11-MIB", "dot11MACbase"), ("IEEE802dot11-MIB", "dot11CountersGroup"), ("IEEE802dot11-MIB", "dot11SmtAuthenticationAlgorithms"), ("IEEE802dot11-MIB", "dot11ResourceTypeID"), ("IEEE802dot11-MIB", "dot11PhyOperationComplianceGroup"), ("IEEE802dot11-MIB", "dot11PhyDSSSComplianceGroup"), ("IEEE802dot11-MIB", "dot11PhyIRComplianceGroup"), ("IEEE802dot11-MIB", "dot11PhyFHSSComplianceGroup"), ("IEEE802dot11-MIB", "dot11PhyOFDMComplianceGroup"), ("IEEE802dot11-MIB", "dot11PhyHRDSSSComplianceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11Compliance = dot11Compliance.setStatus('current')
dot11SMTbase = ObjectGroup((1, 2, 840, 10036, 5, 1, 1)).setObjects(("IEEE802dot11-MIB", "dot11StationID"), ("IEEE802dot11-MIB", "dot11MediumOccupancyLimit"), ("IEEE802dot11-MIB", "dot11CFPollable"), ("IEEE802dot11-MIB", "dot11CFPPeriod"), ("IEEE802dot11-MIB", "dot11CFPMaxDuration"), ("IEEE802dot11-MIB", "dot11AuthenticationResponseTimeOut"), ("IEEE802dot11-MIB", "dot11PrivacyOptionImplemented"), ("IEEE802dot11-MIB", "dot11PowerManagementMode"), ("IEEE802dot11-MIB", "dot11DesiredSSID"), ("IEEE802dot11-MIB", "dot11DesiredBSSType"), ("IEEE802dot11-MIB", "dot11OperationalRateSet"), ("IEEE802dot11-MIB", "dot11BeaconPeriod"), ("IEEE802dot11-MIB", "dot11DTIMPeriod"), ("IEEE802dot11-MIB", "dot11AssociationResponseTimeOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11SMTbase = dot11SMTbase.setStatus('deprecated')
dot11SMTprivacy = ObjectGroup((1, 2, 840, 10036, 5, 1, 2)).setObjects(("IEEE802dot11-MIB", "dot11PrivacyInvoked"), ("IEEE802dot11-MIB", "dot11WEPKeyMappingLength"), ("IEEE802dot11-MIB", "dot11ExcludeUnencrypted"), ("IEEE802dot11-MIB", "dot11WEPICVErrorCount"), ("IEEE802dot11-MIB", "dot11WEPExcludedCount"), ("IEEE802dot11-MIB", "dot11WEPDefaultKeyID"), ("IEEE802dot11-MIB", "dot11WEPDefaultKeyValue"), ("IEEE802dot11-MIB", "dot11WEPKeyMappingWEPOn"), ("IEEE802dot11-MIB", "dot11WEPKeyMappingValue"), ("IEEE802dot11-MIB", "dot11WEPKeyMappingAddress"), ("IEEE802dot11-MIB", "dot11WEPKeyMappingStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11SMTprivacy = dot11SMTprivacy.setStatus('current')
dot11MACbase = ObjectGroup((1, 2, 840, 10036, 5, 1, 3)).setObjects(("IEEE802dot11-MIB", "dot11MACAddress"), ("IEEE802dot11-MIB", "dot11Address"), ("IEEE802dot11-MIB", "dot11GroupAddressesStatus"), ("IEEE802dot11-MIB", "dot11RTSThreshold"), ("IEEE802dot11-MIB", "dot11ShortRetryLimit"), ("IEEE802dot11-MIB", "dot11LongRetryLimit"), ("IEEE802dot11-MIB", "dot11FragmentationThreshold"), ("IEEE802dot11-MIB", "dot11MaxTransmitMSDULifetime"), ("IEEE802dot11-MIB", "dot11MaxReceiveLifetime"), ("IEEE802dot11-MIB", "dot11ManufacturerID"), ("IEEE802dot11-MIB", "dot11ProductID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11MACbase = dot11MACbase.setStatus('current')
dot11MACStatistics = ObjectGroup((1, 2, 840, 10036, 5, 1, 4)).setObjects(("IEEE802dot11-MIB", "dot11RetryCount"), ("IEEE802dot11-MIB", "dot11MultipleRetryCount"), ("IEEE802dot11-MIB", "dot11RTSSuccessCount"), ("IEEE802dot11-MIB", "dot11RTSFailureCount"), ("IEEE802dot11-MIB", "dot11ACKFailureCount"), ("IEEE802dot11-MIB", "dot11FrameDuplicateCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11MACStatistics = dot11MACStatistics.setStatus('current')
dot11ResourceTypeID = ObjectGroup((1, 2, 840, 10036, 5, 1, 5)).setObjects(("IEEE802dot11-MIB", "dot11ResourceTypeIDName"), ("IEEE802dot11-MIB", "dot11manufacturerOUI"), ("IEEE802dot11-MIB", "dot11manufacturerName"), ("IEEE802dot11-MIB", "dot11manufacturerProductName"), ("IEEE802dot11-MIB", "dot11manufacturerProductVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11ResourceTypeID = dot11ResourceTypeID.setStatus('current')
dot11SmtAuthenticationAlgorithms = ObjectGroup((1, 2, 840, 10036, 5, 1, 6)).setObjects(("IEEE802dot11-MIB", "dot11AuthenticationAlgorithm"), ("IEEE802dot11-MIB", "dot11AuthenticationAlgorithmsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11SmtAuthenticationAlgorithms = dot11SmtAuthenticationAlgorithms.setStatus('current')
dot11PhyOperationComplianceGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 7)).setObjects(("IEEE802dot11-MIB", "dot11PHYType"), ("IEEE802dot11-MIB", "dot11CurrentRegDomain"), ("IEEE802dot11-MIB", "dot11TempType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyOperationComplianceGroup = dot11PhyOperationComplianceGroup.setStatus('current')
dot11PhyAntennaComplianceGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 8)).setObjects(("IEEE802dot11-MIB", "dot11CurrentTxAntenna"), ("IEEE802dot11-MIB", "dot11DiversitySupport"), ("IEEE802dot11-MIB", "dot11CurrentRxAntenna"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyAntennaComplianceGroup = dot11PhyAntennaComplianceGroup.setStatus('current')
dot11PhyTxPowerComplianceGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 9)).setObjects(("IEEE802dot11-MIB", "dot11NumberSupportedPowerLevels"), ("IEEE802dot11-MIB", "dot11TxPowerLevel1"), ("IEEE802dot11-MIB", "dot11TxPowerLevel2"), ("IEEE802dot11-MIB", "dot11TxPowerLevel3"), ("IEEE802dot11-MIB", "dot11TxPowerLevel4"), ("IEEE802dot11-MIB", "dot11TxPowerLevel5"), ("IEEE802dot11-MIB", "dot11TxPowerLevel6"), ("IEEE802dot11-MIB", "dot11TxPowerLevel7"), ("IEEE802dot11-MIB", "dot11TxPowerLevel8"), ("IEEE802dot11-MIB", "dot11CurrentTxPowerLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyTxPowerComplianceGroup = dot11PhyTxPowerComplianceGroup.setStatus('current')
dot11PhyFHSSComplianceGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 10)).setObjects(("IEEE802dot11-MIB", "dot11HopTime"), ("IEEE802dot11-MIB", "dot11CurrentChannelNumber"), ("IEEE802dot11-MIB", "dot11MaxDwellTime"), ("IEEE802dot11-MIB", "dot11CurrentDwellTime"), ("IEEE802dot11-MIB", "dot11CurrentSet"), ("IEEE802dot11-MIB", "dot11CurrentPattern"), ("IEEE802dot11-MIB", "dot11CurrentIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyFHSSComplianceGroup = dot11PhyFHSSComplianceGroup.setStatus('current')
dot11PhyDSSSComplianceGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 11)).setObjects(("IEEE802dot11-MIB", "dot11CurrentChannel"), ("IEEE802dot11-MIB", "dot11CCAModeSupported"), ("IEEE802dot11-MIB", "dot11CurrentCCAMode"), ("IEEE802dot11-MIB", "dot11EDThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyDSSSComplianceGroup = dot11PhyDSSSComplianceGroup.setStatus('current')
dot11PhyIRComplianceGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 12)).setObjects(("IEEE802dot11-MIB", "dot11CCAWatchdogTimerMax"), ("IEEE802dot11-MIB", "dot11CCAWatchdogCountMax"), ("IEEE802dot11-MIB", "dot11CCAWatchdogTimerMin"), ("IEEE802dot11-MIB", "dot11CCAWatchdogCountMin"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyIRComplianceGroup = dot11PhyIRComplianceGroup.setStatus('current')
dot11PhyRegDomainsSupportGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 13)).setObjects(("IEEE802dot11-MIB", "dot11RegDomainsSupportedValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyRegDomainsSupportGroup = dot11PhyRegDomainsSupportGroup.setStatus('current')
dot11PhyAntennasListGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 14)).setObjects(("IEEE802dot11-MIB", "dot11SupportedTxAntenna"), ("IEEE802dot11-MIB", "dot11SupportedRxAntenna"), ("IEEE802dot11-MIB", "dot11DiversitySelectionRx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyAntennasListGroup = dot11PhyAntennasListGroup.setStatus('current')
dot11PhyRateGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 15)).setObjects(("IEEE802dot11-MIB", "dot11SupportedDataRatesTxValue"), ("IEEE802dot11-MIB", "dot11SupportedDataRatesRxValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyRateGroup = dot11PhyRateGroup.setStatus('current')
dot11CountersGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 16)).setObjects(("IEEE802dot11-MIB", "dot11TransmittedFragmentCount"), ("IEEE802dot11-MIB", "dot11MulticastTransmittedFrameCount"), ("IEEE802dot11-MIB", "dot11FailedCount"), ("IEEE802dot11-MIB", "dot11ReceivedFragmentCount"), ("IEEE802dot11-MIB", "dot11MulticastReceivedFrameCount"), ("IEEE802dot11-MIB", "dot11FCSErrorCount"), ("IEEE802dot11-MIB", "dot11WEPUndecryptableCount"), ("IEEE802dot11-MIB", "dot11TransmittedFrameCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11CountersGroup = dot11CountersGroup.setStatus('current')
dot11NotificationGroup = NotificationGroup((1, 2, 840, 10036, 5, 1, 17)).setObjects(("IEEE802dot11-MIB", "dot11Disassociate"), ("IEEE802dot11-MIB", "dot11Deauthenticate"), ("IEEE802dot11-MIB", "dot11AuthenticateFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11NotificationGroup = dot11NotificationGroup.setStatus('current')
dot11SMTbase2 = ObjectGroup((1, 2, 840, 10036, 5, 1, 18)).setObjects(("IEEE802dot11-MIB", "dot11MediumOccupancyLimit"), ("IEEE802dot11-MIB", "dot11CFPollable"), ("IEEE802dot11-MIB", "dot11CFPPeriod"), ("IEEE802dot11-MIB", "dot11CFPMaxDuration"), ("IEEE802dot11-MIB", "dot11AuthenticationResponseTimeOut"), ("IEEE802dot11-MIB", "dot11PrivacyOptionImplemented"), ("IEEE802dot11-MIB", "dot11PowerManagementMode"), ("IEEE802dot11-MIB", "dot11DesiredSSID"), ("IEEE802dot11-MIB", "dot11DesiredBSSType"), ("IEEE802dot11-MIB", "dot11OperationalRateSet"), ("IEEE802dot11-MIB", "dot11BeaconPeriod"), ("IEEE802dot11-MIB", "dot11DTIMPeriod"), ("IEEE802dot11-MIB", "dot11AssociationResponseTimeOut"), ("IEEE802dot11-MIB", "dot11DisassociateReason"), ("IEEE802dot11-MIB", "dot11DisassociateStation"), ("IEEE802dot11-MIB", "dot11DeauthenticateReason"), ("IEEE802dot11-MIB", "dot11DeauthenticateStation"), ("IEEE802dot11-MIB", "dot11AuthenticateFailStatus"), ("IEEE802dot11-MIB", "dot11AuthenticateFailStation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11SMTbase2 = dot11SMTbase2.setStatus('current')
dot11PhyOFDMComplianceGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 19)).setObjects(("IEEE802dot11-MIB", "dot11CurrentFrequency"), ("IEEE802dot11-MIB", "dot11TIThreshold"), ("IEEE802dot11-MIB", "dot11FrequencyBandsSupported"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyOFDMComplianceGroup = dot11PhyOFDMComplianceGroup.setStatus('current')
dot11SMTbase3 = ObjectGroup((1, 2, 840, 10036, 5, 1, 20)).setObjects(("IEEE802dot11-MIB", "dot11MediumOccupancyLimit"), ("IEEE802dot11-MIB", "dot11CFPollable"), ("IEEE802dot11-MIB", "dot11CFPPeriod"), ("IEEE802dot11-MIB", "dot11CFPMaxDuration"), ("IEEE802dot11-MIB", "dot11AuthenticationResponseTimeOut"), ("IEEE802dot11-MIB", "dot11PrivacyOptionImplemented"), ("IEEE802dot11-MIB", "dot11PowerManagementMode"), ("IEEE802dot11-MIB", "dot11DesiredSSID"), ("IEEE802dot11-MIB", "dot11DesiredBSSType"), ("IEEE802dot11-MIB", "dot11OperationalRateSet"), ("IEEE802dot11-MIB", "dot11BeaconPeriod"), ("IEEE802dot11-MIB", "dot11DTIMPeriod"), ("IEEE802dot11-MIB", "dot11AssociationResponseTimeOut"), ("IEEE802dot11-MIB", "dot11DisassociateReason"), ("IEEE802dot11-MIB", "dot11DisassociateStation"), ("IEEE802dot11-MIB", "dot11DeauthenticateReason"), ("IEEE802dot11-MIB", "dot11DeauthenticateStation"), ("IEEE802dot11-MIB", "dot11AuthenticateFailStatus"), ("IEEE802dot11-MIB", "dot11AuthenticateFailStation"), ("IEEE802dot11-MIB", "dot11MultiDomainCapabilityImplemented"), ("IEEE802dot11-MIB", "dot11MultiDomainCapabilityEnabled"), ("IEEE802dot11-MIB", "dot11CountryString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11SMTbase3 = dot11SMTbase3.setStatus('current')
dot11MultiDomainCapabilityGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 21)).setObjects(("IEEE802dot11-MIB", "dot11FirstChannelNumber"), ("IEEE802dot11-MIB", "dot11NumberofChannels"), ("IEEE802dot11-MIB", "dot11MaximumTransmitPowerLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11MultiDomainCapabilityGroup = dot11MultiDomainCapabilityGroup.setStatus('current')
dot11PhyFHSSComplianceGroup2 = ObjectGroup((1, 2, 840, 10036, 5, 1, 22)).setObjects(("IEEE802dot11-MIB", "dot11HopTime"), ("IEEE802dot11-MIB", "dot11CurrentChannelNumber"), ("IEEE802dot11-MIB", "dot11MaxDwellTime"), ("IEEE802dot11-MIB", "dot11CurrentDwellTime"), ("IEEE802dot11-MIB", "dot11CurrentSet"), ("IEEE802dot11-MIB", "dot11CurrentPattern"), ("IEEE802dot11-MIB", "dot11CurrentIndex"), ("IEEE802dot11-MIB", "dot11EHCCPrimeRadix"), ("IEEE802dot11-MIB", "dot11EHCCNumberofChannelsFamilyIndex"), ("IEEE802dot11-MIB", "dot11EHCCCapabilityImplemented"), ("IEEE802dot11-MIB", "dot11EHCCCapabilityEnabled"), ("IEEE802dot11-MIB", "dot11HopAlgorithmAdopted"), ("IEEE802dot11-MIB", "dot11RandomTableFlag"), ("IEEE802dot11-MIB", "dot11NumberofHoppingSets"), ("IEEE802dot11-MIB", "dot11HopModulus"), ("IEEE802dot11-MIB", "dot11HopOffset"), ("IEEE802dot11-MIB", "dot11RandomTableFieldNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyFHSSComplianceGroup2 = dot11PhyFHSSComplianceGroup2.setStatus('current')
dot11PhyHRDSSSComplianceGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 23)).setObjects(("IEEE802dot11-MIB", "dot11CurrentChannel"), ("IEEE802dot11-MIB", "dot11CCAModeSupported"), ("IEEE802dot11-MIB", "dot11CurrentCCAMode"), ("IEEE802dot11-MIB", "dot11EDThreshold"), ("IEEE802dot11-MIB", "dot11ShortPreambleOptionImplemented"), ("IEEE802dot11-MIB", "dot11PBCCOptionImplemented"), ("IEEE802dot11-MIB", "dot11ChannelAgilityPresent"), ("IEEE802dot11-MIB", "dot11ChannelAgilityEnabled"), ("IEEE802dot11-MIB", "dot11HRCCAModeSupported"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyHRDSSSComplianceGroup = dot11PhyHRDSSSComplianceGroup.setStatus('current')
mibBuilder.exportSymbols("IEEE802dot11-MIB", dot11NumberofChannels=dot11NumberofChannels, dot11SmtAuthenticationAlgorithms=dot11SmtAuthenticationAlgorithms, dot11WEPKeyMappingWEPOn=dot11WEPKeyMappingWEPOn, dot11HopAlgorithmAdopted=dot11HopAlgorithmAdopted, dot11PhyIREntry=dot11PhyIREntry, dot11FailedCount=dot11FailedCount, dot11CFPollable=dot11CFPollable, dot11CountryString=dot11CountryString, dot11ReceivedFragmentCount=dot11ReceivedFragmentCount, dot11MulticastReceivedFrameCount=dot11MulticastReceivedFrameCount, dot11DesiredBSSType=dot11DesiredBSSType, dot11SMTbase3=dot11SMTbase3, dot11ChannelAgilityPresent=dot11ChannelAgilityPresent, dot11PhyOperationTable=dot11PhyOperationTable, dot11StationConfigEntry=dot11StationConfigEntry, dot11GroupAddressesIndex=dot11GroupAddressesIndex, dot11CCAWatchdogTimerMax=dot11CCAWatchdogTimerMax, dot11PhyIRTable=dot11PhyIRTable, dot11RTSFailureCount=dot11RTSFailureCount, dot11Address=dot11Address, PYSNMP_MODULE_ID=ieee802dot11, dot11DisassociateStation=dot11DisassociateStation, dot11manufacturerProductName=dot11manufacturerProductName, dot11HoppingPatternTable=dot11HoppingPatternTable, dot11MultiDomainCapabilityEntry=dot11MultiDomainCapabilityEntry, dot11PhyFHSSEntry=dot11PhyFHSSEntry, dot11mac=dot11mac, dot11SupportedDataRatesTxValue=dot11SupportedDataRatesTxValue, dot11TempType=dot11TempType, dot11PhyOFDMTable=dot11PhyOFDMTable, dot11SupportedDataRatesTxEntry=dot11SupportedDataRatesTxEntry, dot11phy=dot11phy, dot11TransmittedFrameCount=dot11TransmittedFrameCount, dot11PhyHRDSSSComplianceGroup=dot11PhyHRDSSSComplianceGroup, dot11RTSSuccessCount=dot11RTSSuccessCount, dot11PhyDSSSTable=dot11PhyDSSSTable, dot11Deauthenticate=dot11Deauthenticate, dot11TxPowerLevel2=dot11TxPowerLevel2, ieee802dot11=ieee802dot11, dot11DisassociateReason=dot11DisassociateReason, dot11CountersTable=dot11CountersTable, dot11GroupAddressesEntry=dot11GroupAddressesEntry, dot11RegDomainsSupportedIndex=dot11RegDomainsSupportedIndex, dot11AuthenticationAlgorithmsEntry=dot11AuthenticationAlgorithmsEntry, dot11CurrentSet=dot11CurrentSet, dot11PhyIRComplianceGroup=dot11PhyIRComplianceGroup, dot11ExcludeUnencrypted=dot11ExcludeUnencrypted, dot11ChannelAgilityEnabled=dot11ChannelAgilityEnabled, dot11AntennasListEntry=dot11AntennasListEntry, dot11HopModulus=dot11HopModulus, dot11ShortRetryLimit=dot11ShortRetryLimit, us=us, dot11CurrentPattern=dot11CurrentPattern, dot11CurrentTxPowerLevel=dot11CurrentTxPowerLevel, dot11CCAModeSupported=dot11CCAModeSupported, dot11MaxTransmitMSDULifetime=dot11MaxTransmitMSDULifetime, dot11TxPowerLevel3=dot11TxPowerLevel3, dot11SupportedDataRatesRxTable=dot11SupportedDataRatesRxTable, dot11Compliance=dot11Compliance, dot11CFPMaxDuration=dot11CFPMaxDuration, dot11AuthenticationResponseTimeOut=dot11AuthenticationResponseTimeOut, dot11RegDomainsSupportedEntry=dot11RegDomainsSupportedEntry, dot11SupportedDataRatesRxEntry=dot11SupportedDataRatesRxEntry, dot11TxPowerLevel8=dot11TxPowerLevel8, dot11CFPPeriod=dot11CFPPeriod, dot11RegDomainsSupportedValue=dot11RegDomainsSupportedValue, dot11TxPowerLevel6=dot11TxPowerLevel6, dot11CCAWatchdogCountMin=dot11CCAWatchdogCountMin, dot11PowerManagementMode=dot11PowerManagementMode, dot11AssociationResponseTimeOut=dot11AssociationResponseTimeOut, dot11PrivacyEntry=dot11PrivacyEntry, dot11SupportedDataRatesTxIndex=dot11SupportedDataRatesTxIndex, dot11RandomTableFieldNumber=dot11RandomTableFieldNumber, dot11RandomTableFlag=dot11RandomTableFlag, dot11WEPICVErrorCount=dot11WEPICVErrorCount, dot11WEPKeyMappingValue=dot11WEPKeyMappingValue, dot11MaximumTransmitPowerLevel=dot11MaximumTransmitPowerLevel, dot11PhyOFDMEntry=dot11PhyOFDMEntry, member_body=member_body, dot11TIThreshold=dot11TIThreshold, dot11PhyDSSSEntry=dot11PhyDSSSEntry, dot11MaxReceiveLifetime=dot11MaxReceiveLifetime, dot11PhyAntennaEntry=dot11PhyAntennaEntry, dot11CCAWatchdogCountMax=dot11CCAWatchdogCountMax, dot11Groups=dot11Groups, dot11OperationEntry=dot11OperationEntry, dot11CurrentChannelNumber=dot11CurrentChannelNumber, dot11SupportedDataRatesRxValue=dot11SupportedDataRatesRxValue, dot11PHYType=dot11PHYType, dot11DeauthenticateReason=dot11DeauthenticateReason, dot11EHCCNumberofChannelsFamilyIndex=dot11EHCCNumberofChannelsFamilyIndex, dot11PhyRegDomainsSupportGroup=dot11PhyRegDomainsSupportGroup, dot11CurrentRxAntenna=dot11CurrentRxAntenna, dot11PhyHRDSSSEntry=dot11PhyHRDSSSEntry, dot11TxPowerLevel7=dot11TxPowerLevel7, dot11PhyRateGroup=dot11PhyRateGroup, dot11AntennaListIndex=dot11AntennaListIndex, dot11EDThreshold=dot11EDThreshold, dot11PhyFHSSComplianceGroup2=dot11PhyFHSSComplianceGroup2, dot11TxPowerLevel1=dot11TxPowerLevel1, dot11WEPKeyMappingStatus=dot11WEPKeyMappingStatus, dot11CountersEntry=dot11CountersEntry, dot11CurrentDwellTime=dot11CurrentDwellTime, dot11MultipleRetryCount=dot11MultipleRetryCount, dot11WEPDefaultKeyValue=dot11WEPDefaultKeyValue, dot11CurrentFrequency=dot11CurrentFrequency, dot11EHCCCapabilityEnabled=dot11EHCCCapabilityEnabled, dot11SupportedDataRatesTxTable=dot11SupportedDataRatesTxTable, dot11SMTbase2=dot11SMTbase2, dot11smt=dot11smt, dot11RTSThreshold=dot11RTSThreshold, dot11PrivacyTable=dot11PrivacyTable, dot11FrequencyBandsSupported=dot11FrequencyBandsSupported, dot11res=dot11res, dot11NotificationGroup=dot11NotificationGroup, dot11ResourceTypeIDName=dot11ResourceTypeIDName, dot11Conformance=dot11Conformance, dot11MultiDomainCapabilityIndex=dot11MultiDomainCapabilityIndex, dot11WEPExcludedCount=dot11WEPExcludedCount, dot11EHCCCapabilityImplemented=dot11EHCCCapabilityImplemented, dot11DesiredSSID=dot11DesiredSSID, dot11DTIMPeriod=dot11DTIMPeriod, dot11MulticastTransmittedFrameCount=dot11MulticastTransmittedFrameCount, dot11DiversitySelectionRx=dot11DiversitySelectionRx, dot11SMTbase=dot11SMTbase, dot11MACbase=dot11MACbase, dot11LongRetryLimit=dot11LongRetryLimit, dot11GroupAddressesTable=dot11GroupAddressesTable, dot11WEPKeyMappingAddress=dot11WEPKeyMappingAddress, dot11CurrentTxAntenna=dot11CurrentTxAntenna, dot11AuthenticationAlgorithmsEnable=dot11AuthenticationAlgorithmsEnable, dot11WEPUndecryptableCount=dot11WEPUndecryptableCount, dot11manufacturerProductVersion=dot11manufacturerProductVersion, dot11NumberSupportedPowerLevels=dot11NumberSupportedPowerLevels, dot11ResourceInfoEntry=dot11ResourceInfoEntry, dot11MaxDwellTime=dot11MaxDwellTime, dot11CurrentChannel=dot11CurrentChannel, dot11AntennasListTable=dot11AntennasListTable, dot11NumberofHoppingSets=dot11NumberofHoppingSets, dot11WEPDefaultKeysTable=dot11WEPDefaultKeysTable, dot11ResourceTypeID=dot11ResourceTypeID, dot11SMTnotification=dot11SMTnotification, dot11Disassociate=dot11Disassociate, dot11OperationTable=dot11OperationTable, dot11WEPDefaultKeyIndex=dot11WEPDefaultKeyIndex, dot11manufacturerOUI=dot11manufacturerOUI, dot11SupportedTxAntenna=dot11SupportedTxAntenna, dot11SupportedRxAntenna=dot11SupportedRxAntenna, dot11WEPKeyMappingsEntry=dot11WEPKeyMappingsEntry, dot11RegDomainsSupportedTable=dot11RegDomainsSupportedTable, dot11PhyDSSSComplianceGroup=dot11PhyDSSSComplianceGroup, dot11PhyAntennaTable=dot11PhyAntennaTable, dot11CCAWatchdogTimerMin=dot11CCAWatchdogTimerMin, dot11SupportedDataRatesRxIndex=dot11SupportedDataRatesRxIndex, dot11StationID=dot11StationID, dot11PhyOperationComplianceGroup=dot11PhyOperationComplianceGroup, dot11PhyTxPowerComplianceGroup=dot11PhyTxPowerComplianceGroup, dot11MediumOccupancyLimit=dot11MediumOccupancyLimit, dot11CurrentCCAMode=dot11CurrentCCAMode, dot11TransmittedFragmentCount=dot11TransmittedFragmentCount, dot11TxPowerLevel4=dot11TxPowerLevel4, dot11PBCCOptionImplemented=dot11PBCCOptionImplemented, dot11resAttribute=dot11resAttribute, dot11WEPKeyMappingIndex=dot11WEPKeyMappingIndex, dot11AuthenticateFail=dot11AuthenticateFail, dot11Compliances=dot11Compliances, dot11PhyHRDSSSTable=dot11PhyHRDSSSTable, dot11ShortPreambleOptionImplemented=dot11ShortPreambleOptionImplemented, dot11FrameDuplicateCount=dot11FrameDuplicateCount, dot11HRCCAModeSupported=dot11HRCCAModeSupported, dot11MultiDomainCapabilityTable=dot11MultiDomainCapabilityTable, dot11HoppingPatternIndex=dot11HoppingPatternIndex, dot11AuthenticationAlgorithmsTable=dot11AuthenticationAlgorithmsTable, dot11PrivacyInvoked=dot11PrivacyInvoked, dot11ProductID=dot11ProductID, dot11manufacturerName=dot11manufacturerName, dot11TxPowerLevel5=dot11TxPowerLevel5, dot11DiversitySupport=dot11DiversitySupport, dot11AuthenticateFailStation=dot11AuthenticateFailStation, WEPKeytype=WEPKeytype, dot11HoppingPatternEntry=dot11HoppingPatternEntry, dot11MultiDomainCapabilityEnabled=dot11MultiDomainCapabilityEnabled, dot11PhyAntennaComplianceGroup=dot11PhyAntennaComplianceGroup, dot11WEPKeyMappingLength=dot11WEPKeyMappingLength, dot11AuthenticationAlgorithm=dot11AuthenticationAlgorithm, dot11PhyFHSSTable=dot11PhyFHSSTable, dot11MultiDomainCapabilityGroup=dot11MultiDomainCapabilityGroup, dot11StationConfigTable=dot11StationConfigTable, dot11BeaconPeriod=dot11BeaconPeriod, dot11FirstChannelNumber=dot11FirstChannelNumber, dot11PhyTxPowerTable=dot11PhyTxPowerTable, dot11SMTprivacy=dot11SMTprivacy, dot11MACStatistics=dot11MACStatistics, dot11WEPKeyMappingsTable=dot11WEPKeyMappingsTable, dot11PhyAntennasListGroup=dot11PhyAntennasListGroup, dot11DeauthenticateStation=dot11DeauthenticateStation, dot11ResourceInfoTable=dot11ResourceInfoTable, dot11AuthenticationAlgorithmsIndex=dot11AuthenticationAlgorithmsIndex, dot11PhyOFDMComplianceGroup=dot11PhyOFDMComplianceGroup, dot11MultiDomainCapabilityImplemented=dot11MultiDomainCapabilityImplemented, dot11CurrentIndex=dot11CurrentIndex, dot11OperationalRateSet=dot11OperationalRateSet, dot11EHCCPrimeRadix=dot11EHCCPrimeRadix, dot11PhyOperationEntry=dot11PhyOperationEntry, dot11AuthenticateFailStatus=dot11AuthenticateFailStatus, dot11FCSErrorCount=dot11FCSErrorCount, dot11PhyFHSSComplianceGroup=dot11PhyFHSSComplianceGroup, dot11GroupAddressesStatus=dot11GroupAddressesStatus, dot11ManufacturerID=dot11ManufacturerID, dot11PrivacyOptionImplemented=dot11PrivacyOptionImplemented, dot11ACKFailureCount=dot11ACKFailureCount, dot11HopTime=dot11HopTime, dot11HopOffset=dot11HopOffset, dot11WEPDefaultKeyID=dot11WEPDefaultKeyID, dot11WEPDefaultKeysEntry=dot11WEPDefaultKeysEntry, dot11MACAddress=dot11MACAddress, dot11FragmentationThreshold=dot11FragmentationThreshold, dot11PhyTxPowerEntry=dot11PhyTxPowerEntry, dot11RetryCount=dot11RetryCount, dot11CountersGroup=dot11CountersGroup, dot11CurrentRegDomain=dot11CurrentRegDomain)
