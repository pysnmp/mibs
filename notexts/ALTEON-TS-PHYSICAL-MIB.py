#
# PySNMP MIB module ALTEON-TS-PHYSICAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/alteonos/ALTEON-TS-PHYSICAL-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 12:12:21 2024
# On host fv-az573-178 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
switch, = mibBuilder.importSymbols("ALTEON-ROOT-MIB", "switch")
information, agent, operCmds, stats = mibBuilder.importSymbols("ALTEON-TIGON-SWITCH-MIB", "information", "agent", "operCmds", "stats")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, IpAddress, Counter32, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, iso, Integer32, ModuleIdentity, Counter64, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "Counter32", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "iso", "Integer32", "ModuleIdentity", "Counter64", "MibIdentifier", "NotificationType")
TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString")
vlans = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4))
portmirroring = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6))
trunkgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7))
spannTreeGrpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19))
agPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3))
mirroring = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18))
mirrPortMirr = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 1))
mirrVlanMirr = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 2))
portCpuStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 17))
port_stats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 26)).setLabel("port-stats")
port_info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1)).setLabel("port-info")
agPortTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortTableMaxEnt.setStatus('mandatory')
agPortCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2), )
if mibBuilder.loadTexts: agPortCurCfgTable.setStatus('mandatory')
agPortCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1), ).setIndexNames((0, "ALTEON-TS-PHYSICAL-MIB", "agPortCurCfgIndx"))
if mibBuilder.loadTexts: agPortCurCfgTableEntry.setStatus('mandatory')
agPortCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgIndx.setStatus('mandatory')
agPortCurCfgPrefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("fast-ethernet", 2), ("gigabit-ethernet", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPrefLink.setStatus('mandatory')
agPortCurCfgBackLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("fast-ethernet", 2), ("gigabit-ethernet", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgBackLink.setStatus('mandatory')
agPortCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgState.setStatus('mandatory')
agPortCurCfgVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tagged", 2), ("untagged", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgVlanTag.setStatus('mandatory')
agPortCurCfgStp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgStp.setStatus('mandatory')
agPortCurCfgRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgRmon.setStatus('mandatory')
agPortCurCfgPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPVID.setStatus('mandatory')
agPortCurCfgFastEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgFastEthAutoNeg.setStatus('mandatory')
agPortCurCfgFastEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("mbs10or100", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgFastEthSpeed.setStatus('mandatory')
agPortCurCfgFastEthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3), ("full-or-half-duplex", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgFastEthMode.setStatus('mandatory')
agPortCurCfgFastEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgFastEthFctl.setStatus('mandatory')
agPortCurCfgGigEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthAutoNeg.setStatus('mandatory')
agPortCurCfgGigEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthFctl.setStatus('mandatory')
agPortCurCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPortName.setStatus('mandatory')
agPortCurCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgBwmContract.setStatus('mandatory')
agPortCurCfgDiscardNonIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgDiscardNonIPs.setStatus('mandatory')
agPortCurCfgLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgLinkTrap.setStatus('mandatory')
agPortNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3), )
if mibBuilder.loadTexts: agPortNewCfgTable.setStatus('mandatory')
agPortNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1), ).setIndexNames((0, "ALTEON-TS-PHYSICAL-MIB", "agPortNewCfgIndx"))
if mibBuilder.loadTexts: agPortNewCfgTableEntry.setStatus('mandatory')
agPortNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortNewCfgIndx.setStatus('mandatory')
agPortNewCfgPrefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("fast-ethernet", 2), ("gigabit-ethernet", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPrefLink.setStatus('mandatory')
agPortNewCfgBackLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("fast-ethernet", 2), ("gigabit-ethernet", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgBackLink.setStatus('mandatory')
agPortNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgState.setStatus('mandatory')
agPortNewCfgVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tagged", 2), ("untagged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgVlanTag.setStatus('mandatory')
agPortNewCfgStp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgStp.setStatus('mandatory')
agPortNewCfgRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgRmon.setStatus('mandatory')
agPortNewCfgPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPVID.setStatus('mandatory')
agPortNewCfgFastEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgFastEthAutoNeg.setStatus('mandatory')
agPortNewCfgFastEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("mbs10or100", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgFastEthSpeed.setStatus('mandatory')
agPortNewCfgFastEthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3), ("full-or-half-duplex", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgFastEthMode.setStatus('mandatory')
agPortNewCfgFastEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgFastEthFctl.setStatus('mandatory')
agPortNewCfgGigEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthAutoNeg.setStatus('mandatory')
agPortNewCfgGigEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthFctl.setStatus('mandatory')
agPortNewCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPortName.setStatus('mandatory')
agPortNewCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgBwmContract.setStatus('mandatory')
agPortNewCfgDiscardNonIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgDiscardNonIPs.setStatus('mandatory')
agPortNewCfgLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgLinkTrap.setStatus('mandatory')
vlanMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMaxEnt.setStatus('mandatory')
vlanCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2), )
if mibBuilder.loadTexts: vlanCurCfgTable.setStatus('mandatory')
vlanCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2, 1), ).setIndexNames((0, "ALTEON-TS-PHYSICAL-MIB", "vlanCurCfgVlanId"))
if mibBuilder.loadTexts: vlanCurCfgTableEntry.setStatus('mandatory')
vlanCurCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgVlanId.setStatus('mandatory')
vlanCurCfgVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgVlanName.setStatus('mandatory')
vlanCurCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgPorts.setStatus('mandatory')
vlanCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgState.setStatus('mandatory')
vlanCurCfgJumbo = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgJumbo.setStatus('mandatory')
vlanCurCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgBwmContract.setStatus('mandatory')
vlanCurCfgStg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgStg.setStatus('mandatory')
vlanNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3), )
if mibBuilder.loadTexts: vlanNewCfgTable.setStatus('mandatory')
vlanNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1), ).setIndexNames((0, "ALTEON-TS-PHYSICAL-MIB", "vlanNewCfgVlanId"))
if mibBuilder.loadTexts: vlanNewCfgTableEntry.setStatus('mandatory')
vlanNewCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNewCfgVlanId.setStatus('mandatory')
vlanNewCfgVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgVlanName.setStatus('mandatory')
vlanNewCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNewCfgPorts.setStatus('mandatory')
vlanNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgState.setStatus('mandatory')
vlanNewCfgJumbo = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgJumbo.setStatus('mandatory')
vlanNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgAddPort.setStatus('mandatory')
vlanNewCfgRemovePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgRemovePort.setStatus('mandatory')
vlanNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgDelete.setStatus('mandatory')
vlanNewCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgBwmContract.setStatus('mandatory')
vlanNewCfgStg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgStg.setStatus('mandatory')
pmCurCfgMonitoringPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgMonitoringPort.setStatus('obsolete')
pmNewCfgMonitoringPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgMonitoringPort.setStatus('obsolete')
pmCurCfgMirroredPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgMirroredPort.setStatus('obsolete')
pmNewCfgMirroredPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgMirroredPort.setStatus('obsolete')
pmCurCfgMonitoredTraffic = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 2), ("received", 3), ("transmitted", 4), ("both", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgMonitoredTraffic.setStatus('obsolete')
pmNewCfgMonitoredTraffic = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 2), ("received", 3), ("transmitted", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgMonitoredTraffic.setStatus('obsolete')
pmCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgState.setStatus('obsolete')
pmNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgState.setStatus('obsolete')
pmCurCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgTimeout.setStatus('obsolete')
pmNewCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgTimeout.setStatus('obsolete')
trunkGroupTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupTableMaxSize.setStatus('mandatory')
trunkGroupCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 2), )
if mibBuilder.loadTexts: trunkGroupCurCfgTable.setStatus('mandatory')
trunkGroupCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 2, 1), ).setIndexNames((0, "ALTEON-TS-PHYSICAL-MIB", "trunkGroupCurCfgIndex"))
if mibBuilder.loadTexts: trunkGroupCurCfgTableEntry.setStatus('mandatory')
trunkGroupCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgIndex.setStatus('mandatory')
trunkGroupCurCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgPorts.setStatus('mandatory')
trunkGroupCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgState.setStatus('mandatory')
trunkGroupCurCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgBwmContract.setStatus('mandatory')
trunkGroupNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3), )
if mibBuilder.loadTexts: trunkGroupNewCfgTable.setStatus('mandatory')
trunkGroupNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1), ).setIndexNames((0, "ALTEON-TS-PHYSICAL-MIB", "trunkGroupNewCfgIndex"))
if mibBuilder.loadTexts: trunkGroupNewCfgTableEntry.setStatus('mandatory')
trunkGroupNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupNewCfgIndex.setStatus('mandatory')
trunkGroupNewCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupNewCfgPorts.setStatus('mandatory')
trunkGroupNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGroupNewCfgAddPort.setStatus('mandatory')
trunkGroupNewCfgRemovePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGroupNewCfgRemovePort.setStatus('mandatory')
trunkGroupNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGroupNewCfgState.setStatus('mandatory')
trunkGroupNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGroupNewCfgDelete.setStatus('mandatory')
trunkGroupNewCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGroupNewCfgBwmContract.setStatus('mandatory')
stgCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 1), )
if mibBuilder.loadTexts: stgCurCfgTable.setStatus('mandatory')
stgCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 1, 1), ).setIndexNames((0, "ALTEON-TS-PHYSICAL-MIB", "stgCurCfgIndex"))
if mibBuilder.loadTexts: stgCurCfgTableEntry.setStatus('mandatory')
stgCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgIndex.setStatus('mandatory')
stgCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgState.setStatus('mandatory')
stgCurCfgVlanBmap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgVlanBmap1.setStatus('mandatory')
stgCurCfgVlanBmap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgVlanBmap2.setStatus('mandatory')
stgNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 2), )
if mibBuilder.loadTexts: stgNewCfgTable.setStatus('mandatory')
stgNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 2, 1), ).setIndexNames((0, "ALTEON-TS-PHYSICAL-MIB", "stgNewCfgIndex"))
if mibBuilder.loadTexts: stgNewCfgTableEntry.setStatus('mandatory')
stgNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgIndex.setStatus('mandatory')
stgNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgState.setStatus('mandatory')
stgNewCfgDefaultCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("default-config", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgDefaultCfg.setStatus('mandatory')
stgNewCfgAddVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgAddVlan.setStatus('mandatory')
stgNewCfgRemoveVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgRemoveVlan.setStatus('mandatory')
stgNewCfgVlanBmap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgVlanBmap1.setStatus('mandatory')
stgNewCfgVlanBmap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgVlanBmap2.setStatus('mandatory')
stgCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 3), )
if mibBuilder.loadTexts: stgCurCfgPortTable.setStatus('mandatory')
stgCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 3, 1), ).setIndexNames((0, "ALTEON-TS-PHYSICAL-MIB", "stgCurCfgStgIndex"), (0, "ALTEON-TS-PHYSICAL-MIB", "stgCurCfgPortIndex"))
if mibBuilder.loadTexts: stgCurCfgPortTableEntry.setStatus('mandatory')
stgCurCfgStgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgStgIndex.setStatus('mandatory')
stgCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortIndex.setStatus('mandatory')
stgCurCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortState.setStatus('mandatory')
stgNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 4), )
if mibBuilder.loadTexts: stgNewCfgPortTable.setStatus('mandatory')
stgNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 4, 1), ).setIndexNames((0, "ALTEON-TS-PHYSICAL-MIB", "stgNewCfgStgIndex"), (0, "ALTEON-TS-PHYSICAL-MIB", "stgNewCfgPortIndex"))
if mibBuilder.loadTexts: stgNewCfgPortTableEntry.setStatus('mandatory')
stgNewCfgStgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgStgIndex.setStatus('mandatory')
stgNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgPortIndex.setStatus('mandatory')
stgNewCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 19, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgPortState.setStatus('mandatory')
pmCurCfgPortMirrState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPortMirrState.setStatus('mandatory')
pmNewCfgPortMirrState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgPortMirrState.setStatus('mandatory')
pmCurCfgPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 1, 3), )
if mibBuilder.loadTexts: pmCurCfgPortMonitorTable.setStatus('mandatory')
pmCurCfgPortMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 1, 3, 1), ).setIndexNames((0, "ALTEON-TS-PHYSICAL-MIB", "pmCurCfgPmirrMoniPortIndex"), (0, "ALTEON-TS-PHYSICAL-MIB", "pmCurCfgPmirrMirrPortIndex"))
if mibBuilder.loadTexts: pmCurCfgPortMonitorEntry.setStatus('mandatory')
pmCurCfgPmirrMoniPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrMoniPortIndex.setStatus('mandatory')
pmCurCfgPmirrMirrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrMirrPortIndex.setStatus('mandatory')
pmCurCfgPmirrDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrDirection.setStatus('mandatory')
pmNewCfgPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 1, 4), )
if mibBuilder.loadTexts: pmNewCfgPortMonitorTable.setStatus('mandatory')
pmNewCfgPortMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 1, 4, 1), ).setIndexNames((0, "ALTEON-TS-PHYSICAL-MIB", "pmNewCfgPmirrMoniPortIndex"), (0, "ALTEON-TS-PHYSICAL-MIB", "pmNewCfgPmirrMirrPortIndex"))
if mibBuilder.loadTexts: pmNewCfgPortMonitorEntry.setStatus('mandatory')
pmNewCfgPmirrMoniPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmNewCfgPmirrMoniPortIndex.setStatus('mandatory')
pmNewCfgPmirrMirrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmNewCfgPmirrMirrPortIndex.setStatus('mandatory')
pmNewCfgPmirrDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgPmirrDirection.setStatus('mandatory')
pmNewCfgPmirrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgPmirrDelete.setStatus('mandatory')
pmCurCfgVlanMirrState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgVlanMirrState.setStatus('mandatory')
pmNewCfgVlanMirrState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgVlanMirrState.setStatus('mandatory')
pmCurCfgVlanMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 2, 3), )
if mibBuilder.loadTexts: pmCurCfgVlanMonitorTable.setStatus('mandatory')
pmCurCfgVlanMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 2, 3, 1), ).setIndexNames((0, "ALTEON-TS-PHYSICAL-MIB", "pmCurCfgVmirrMoniPortIndex"), (0, "ALTEON-TS-PHYSICAL-MIB", "pmCurCfgVmirrMirrVlanIndex"))
if mibBuilder.loadTexts: pmCurCfgVlanMonitorEntry.setStatus('mandatory')
pmCurCfgVmirrMoniPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgVmirrMoniPortIndex.setStatus('mandatory')
pmCurCfgVmirrMirrVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgVmirrMirrVlanIndex.setStatus('mandatory')
pmCurCfgVmirrDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgVmirrDirection.setStatus('mandatory')
pmNewCfgVlanMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 2, 4), )
if mibBuilder.loadTexts: pmNewCfgVlanMonitorTable.setStatus('mandatory')
pmNewCfgVlanMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 2, 4, 1), ).setIndexNames((0, "ALTEON-TS-PHYSICAL-MIB", "pmNewCfgVmirrMoniPortIndex"), (0, "ALTEON-TS-PHYSICAL-MIB", "pmNewCfgVmirrMirrVlanIndex"))
if mibBuilder.loadTexts: pmNewCfgVlanMonitorEntry.setStatus('mandatory')
pmNewCfgVmirrMoniPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmNewCfgVmirrMoniPortIndex.setStatus('mandatory')
pmNewCfgVmirrMirrVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmNewCfgVmirrMirrVlanIndex.setStatus('mandatory')
pmNewCfgVmirrDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgVmirrDirection.setStatus('mandatory')
pmNewCfgVmirrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 18, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgVmirrDelete.setStatus('mandatory')
portCpuStatsUtilTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 17, 1), )
if mibBuilder.loadTexts: portCpuStatsUtilTable.setStatus('mandatory')
portCpuStatsUtilTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 17, 1, 1), ).setIndexNames((0, "ALTEON-TS-PHYSICAL-MIB", "portCpuStatsUtilIndx"))
if mibBuilder.loadTexts: portCpuStatsUtilTableEntry.setStatus('mandatory')
portCpuStatsUtilIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpuStatsUtilIndx.setStatus('mandatory')
portCpuAStatsUtil1Second = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 17, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpuAStatsUtil1Second.setStatus('mandatory')
portCpuBStatsUtil1Second = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 17, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpuBStatsUtil1Second.setStatus('mandatory')
portCpuAStatsUtil4Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 17, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpuAStatsUtil4Seconds.setStatus('mandatory')
portCpuBStatsUtil4Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 17, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpuBStatsUtil4Seconds.setStatus('mandatory')
portCpuAStatsUtil64Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 17, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpuAStatsUtil64Seconds.setStatus('mandatory')
portCpuBStatsUtil64Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 17, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpuBStatsUtil64Seconds.setStatus('mandatory')
portInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1), )
if mibBuilder.loadTexts: portInfoTable.setStatus('mandatory')
portInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1), ).setIndexNames((0, "ALTEON-TS-PHYSICAL-MIB", "portInfoIndx"))
if mibBuilder.loadTexts: portInfoTableEntry.setStatus('mandatory')
portInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoIndx.setStatus('mandatory')
portInfoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("mbs1000", 4), ("any", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoSpeed.setStatus('mandatory')
portInfoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoMode.setStatus('mandatory')
portInfoFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoFlowCtrl.setStatus('mandatory')
portInfoLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3), ("inoperative", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoLink.setStatus('mandatory')
portInfoPhyIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfDescr.setStatus('mandatory')
portInfoPhyIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet-csmacd", 6), ("iso88023-csmacd", 7), ("iso88024-tokenBus", 8), ("iso88025-tokenRing", 9), ("iso88026-man", 10), ("starLan", 11), ("proteon-10Mbit", 12), ("proteon-80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frame-relay", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfType.setStatus('mandatory')
portInfoPhyIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfMtu.setStatus('mandatory')
portInfoPhyIfPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfPhysAddress.setStatus('mandatory')
portInfoPhyIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfOperStatus.setStatus('mandatory')
portInfoPhyIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfLastChange.setStatus('mandatory')
portStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 26, 1), )
if mibBuilder.loadTexts: portStatsTable.setStatus('mandatory')
portStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 26, 1, 1), ).setIndexNames((0, "ALTEON-TS-PHYSICAL-MIB", "portStatsIndx"))
if mibBuilder.loadTexts: portStatsTableEntry.setStatus('mandatory')
portStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 26, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsIndx.setStatus('mandatory')
portStatsPhyIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 26, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInOctets.setStatus('mandatory')
portStatsPhyIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 26, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInUcastPkts.setStatus('mandatory')
portStatsPhyIfInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 26, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInNUcastPkts.setStatus('mandatory')
portStatsPhyIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 26, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInDiscards.setStatus('mandatory')
portStatsPhyIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 26, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInErrors.setStatus('mandatory')
portStatsPhyIfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 26, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInUnknownProtos.setStatus('mandatory')
portStatsPhyIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 26, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutOctets.setStatus('mandatory')
portStatsPhyIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 26, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutUcastPkts.setStatus('mandatory')
portStatsPhyIfOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 26, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutNUcastPkts.setStatus('mandatory')
portStatsPhyIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 26, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutDiscards.setStatus('mandatory')
portStatsPhyIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 26, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutErrors.setStatus('mandatory')
portStatsPhyIfOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 26, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutQLen.setStatus('mandatory')
portStatsPhyIfInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 26, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInBroadcastPkts.setStatus('mandatory')
portStatsPhyIfOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 26, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutBroadcastPkts.setStatus('mandatory')
mirrOper = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 3))
mirrOperMonitoringPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirrOperMonitoringPort.setStatus('mandatory')
mirrOperMirroredPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirrOperMirroredPort.setStatus('mandatory')
mirrOperType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("in", 2), ("out", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirrOperType.setStatus('mandatory')
mirrOperTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirrOperTimeout.setStatus('mandatory')
mirrOperState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirrOperState.setStatus('mandatory')
mibBuilder.exportSymbols("ALTEON-TS-PHYSICAL-MIB", vlanNewCfgDelete=vlanNewCfgDelete, vlanNewCfgBwmContract=vlanNewCfgBwmContract, agPortNewCfgTableEntry=agPortNewCfgTableEntry, agPortCurCfgBwmContract=agPortCurCfgBwmContract, pmCurCfgMonitoringPort=pmCurCfgMonitoringPort, mirrOperMirroredPort=mirrOperMirroredPort, pmNewCfgVlanMonitorEntry=pmNewCfgVlanMonitorEntry, vlanNewCfgVlanName=vlanNewCfgVlanName, vlanNewCfgPorts=vlanNewCfgPorts, port_stats=port_stats, stgNewCfgTableEntry=stgNewCfgTableEntry, vlanNewCfgRemovePort=vlanNewCfgRemovePort, mirroring=mirroring, stgNewCfgRemoveVlan=stgNewCfgRemoveVlan, agPortTableMaxEnt=agPortTableMaxEnt, agPortNewCfgStp=agPortNewCfgStp, stgNewCfgTable=stgNewCfgTable, pmNewCfgPortMonitorEntry=pmNewCfgPortMonitorEntry, pmNewCfgPmirrMirrPortIndex=pmNewCfgPmirrMirrPortIndex, portStatsTable=portStatsTable, pmCurCfgVlanMonitorTable=pmCurCfgVlanMonitorTable, pmCurCfgMirroredPort=pmCurCfgMirroredPort, agPortCurCfgStp=agPortCurCfgStp, trunkGroupNewCfgTable=trunkGroupNewCfgTable, vlanMaxEnt=vlanMaxEnt, portCpuAStatsUtil1Second=portCpuAStatsUtil1Second, vlanNewCfgVlanId=vlanNewCfgVlanId, agPortNewCfgVlanTag=agPortNewCfgVlanTag, mirrPortMirr=mirrPortMirr, pmNewCfgVlanMirrState=pmNewCfgVlanMirrState, agPortNewCfgFastEthAutoNeg=agPortNewCfgFastEthAutoNeg, portStatsPhyIfInNUcastPkts=portStatsPhyIfInNUcastPkts, mirrOperType=mirrOperType, vlanNewCfgAddPort=vlanNewCfgAddPort, pmNewCfgMirroredPort=pmNewCfgMirroredPort, stgNewCfgState=stgNewCfgState, stgCurCfgState=stgCurCfgState, agPortConfig=agPortConfig, portCpuAStatsUtil4Seconds=portCpuAStatsUtil4Seconds, stgNewCfgPortTable=stgNewCfgPortTable, agPortCurCfgFastEthMode=agPortCurCfgFastEthMode, vlanCurCfgState=vlanCurCfgState, vlans=vlans, agPortCurCfgRmon=agPortCurCfgRmon, vlanCurCfgStg=vlanCurCfgStg, trunkGroupNewCfgRemovePort=trunkGroupNewCfgRemovePort, stgCurCfgStgIndex=stgCurCfgStgIndex, mirrOperState=mirrOperState, pmNewCfgVmirrMirrVlanIndex=pmNewCfgVmirrMirrVlanIndex, pmNewCfgPortMirrState=pmNewCfgPortMirrState, trunkGroupNewCfgPorts=trunkGroupNewCfgPorts, agPortCurCfgFastEthSpeed=agPortCurCfgFastEthSpeed, trunkGroupNewCfgBwmContract=trunkGroupNewCfgBwmContract, pmCurCfgVmirrDirection=pmCurCfgVmirrDirection, portStatsPhyIfInUcastPkts=portStatsPhyIfInUcastPkts, agPortNewCfgBwmContract=agPortNewCfgBwmContract, trunkGroupCurCfgIndex=trunkGroupCurCfgIndex, agPortCurCfgPortName=agPortCurCfgPortName, portStatsPhyIfOutQLen=portStatsPhyIfOutQLen, agPortCurCfgVlanTag=agPortCurCfgVlanTag, stgNewCfgIndex=stgNewCfgIndex, pmCurCfgPortMirrState=pmCurCfgPortMirrState, stgNewCfgAddVlan=stgNewCfgAddVlan, pmCurCfgVlanMonitorEntry=pmCurCfgVlanMonitorEntry, agPortCurCfgGigEthAutoNeg=agPortCurCfgGigEthAutoNeg, agPortCurCfgIndx=agPortCurCfgIndx, pmNewCfgMonitoringPort=pmNewCfgMonitoringPort, stgCurCfgVlanBmap2=stgCurCfgVlanBmap2, portInfoPhyIfOperStatus=portInfoPhyIfOperStatus, portInfoPhyIfDescr=portInfoPhyIfDescr, pmNewCfgPortMonitorTable=pmNewCfgPortMonitorTable, trunkGroupNewCfgState=trunkGroupNewCfgState, vlanNewCfgJumbo=vlanNewCfgJumbo, mirrVlanMirr=mirrVlanMirr, stgCurCfgPortIndex=stgCurCfgPortIndex, vlanCurCfgJumbo=vlanCurCfgJumbo, pmNewCfgPmirrMoniPortIndex=pmNewCfgPmirrMoniPortIndex, pmCurCfgVmirrMirrVlanIndex=pmCurCfgVmirrMirrVlanIndex, portInfoSpeed=portInfoSpeed, portInfoPhyIfMtu=portInfoPhyIfMtu, trunkGroupNewCfgAddPort=trunkGroupNewCfgAddPort, pmCurCfgPmirrMirrPortIndex=pmCurCfgPmirrMirrPortIndex, port_info=port_info, agPortNewCfgFastEthMode=agPortNewCfgFastEthMode, stgNewCfgStgIndex=stgNewCfgStgIndex, portInfoFlowCtrl=portInfoFlowCtrl, agPortNewCfgPVID=agPortNewCfgPVID, pmCurCfgVmirrMoniPortIndex=pmCurCfgVmirrMoniPortIndex, agPortCurCfgFastEthFctl=agPortCurCfgFastEthFctl, portInfoLink=portInfoLink, portStatsPhyIfInBroadcastPkts=portStatsPhyIfInBroadcastPkts, agPortNewCfgDiscardNonIPs=agPortNewCfgDiscardNonIPs, agPortNewCfgFastEthSpeed=agPortNewCfgFastEthSpeed, agPortNewCfgIndx=agPortNewCfgIndx, agPortCurCfgGigEthFctl=agPortCurCfgGigEthFctl, agPortNewCfgState=agPortNewCfgState, trunkGroupCurCfgTableEntry=trunkGroupCurCfgTableEntry, agPortNewCfgLinkTrap=agPortNewCfgLinkTrap, agPortCurCfgFastEthAutoNeg=agPortCurCfgFastEthAutoNeg, agPortNewCfgGigEthAutoNeg=agPortNewCfgGigEthAutoNeg, pmNewCfgState=pmNewCfgState, portStatsPhyIfInDiscards=portStatsPhyIfInDiscards, trunkgroup=trunkgroup, trunkGroupNewCfgTableEntry=trunkGroupNewCfgTableEntry, agPortNewCfgTable=agPortNewCfgTable, agPortCurCfgDiscardNonIPs=agPortCurCfgDiscardNonIPs, stgNewCfgPortState=stgNewCfgPortState, mirrOperMonitoringPort=mirrOperMonitoringPort, stgCurCfgTable=stgCurCfgTable, pmCurCfgState=pmCurCfgState, portCpuStatsUtilTableEntry=portCpuStatsUtilTableEntry, pmNewCfgVmirrDelete=pmNewCfgVmirrDelete, vlanCurCfgBwmContract=vlanCurCfgBwmContract, portCpuAStatsUtil64Seconds=portCpuAStatsUtil64Seconds, portCpuStats=portCpuStats, stgNewCfgVlanBmap1=stgNewCfgVlanBmap1, portStatsTableEntry=portStatsTableEntry, stgNewCfgPortIndex=stgNewCfgPortIndex, pmNewCfgMonitoredTraffic=pmNewCfgMonitoredTraffic, pmNewCfgPmirrDelete=pmNewCfgPmirrDelete, pmCurCfgVlanMirrState=pmCurCfgVlanMirrState, vlanCurCfgPorts=vlanCurCfgPorts, portStatsPhyIfInOctets=portStatsPhyIfInOctets, pmNewCfgVlanMonitorTable=pmNewCfgVlanMonitorTable, pmNewCfgVmirrDirection=pmNewCfgVmirrDirection, pmCurCfgTimeout=pmCurCfgTimeout, portInfoTable=portInfoTable, agPortNewCfgFastEthFctl=agPortNewCfgFastEthFctl, portStatsPhyIfOutNUcastPkts=portStatsPhyIfOutNUcastPkts, pmNewCfgTimeout=pmNewCfgTimeout, vlanCurCfgVlanId=vlanCurCfgVlanId, trunkGroupCurCfgBwmContract=trunkGroupCurCfgBwmContract, agPortNewCfgRmon=agPortNewCfgRmon, mirrOper=mirrOper, portInfoPhyIfType=portInfoPhyIfType, vlanNewCfgState=vlanNewCfgState, trunkGroupTableMaxSize=trunkGroupTableMaxSize, pmCurCfgPmirrMoniPortIndex=pmCurCfgPmirrMoniPortIndex, portStatsPhyIfInUnknownProtos=portStatsPhyIfInUnknownProtos, stgNewCfgVlanBmap2=stgNewCfgVlanBmap2, portStatsPhyIfOutBroadcastPkts=portStatsPhyIfOutBroadcastPkts, trunkGroupNewCfgDelete=trunkGroupNewCfgDelete, vlanCurCfgTable=vlanCurCfgTable, stgCurCfgPortTable=stgCurCfgPortTable, agPortCurCfgBackLink=agPortCurCfgBackLink, stgCurCfgPortState=stgCurCfgPortState, pmCurCfgPortMonitorTable=pmCurCfgPortMonitorTable, stgCurCfgTableEntry=stgCurCfgTableEntry, pmCurCfgPortMonitorEntry=pmCurCfgPortMonitorEntry, vlanCurCfgTableEntry=vlanCurCfgTableEntry, vlanNewCfgStg=vlanNewCfgStg, trunkGroupCurCfgTable=trunkGroupCurCfgTable, portCpuStatsUtilIndx=portCpuStatsUtilIndx, portStatsPhyIfOutDiscards=portStatsPhyIfOutDiscards, vlanNewCfgTableEntry=vlanNewCfgTableEntry, pmNewCfgPmirrDirection=pmNewCfgPmirrDirection, trunkGroupNewCfgIndex=trunkGroupNewCfgIndex, agPortCurCfgTableEntry=agPortCurCfgTableEntry, portInfoPhyIfPhysAddress=portInfoPhyIfPhysAddress, agPortNewCfgBackLink=agPortNewCfgBackLink, portStatsIndx=portStatsIndx, portInfoPhyIfLastChange=portInfoPhyIfLastChange, portStatsPhyIfOutUcastPkts=portStatsPhyIfOutUcastPkts, trunkGroupCurCfgPorts=trunkGroupCurCfgPorts, portmirroring=portmirroring, agPortCurCfgTable=agPortCurCfgTable, portCpuBStatsUtil4Seconds=portCpuBStatsUtil4Seconds, stgCurCfgPortTableEntry=stgCurCfgPortTableEntry, portStatsPhyIfOutOctets=portStatsPhyIfOutOctets, agPortCurCfgLinkTrap=agPortCurCfgLinkTrap, portCpuStatsUtilTable=portCpuStatsUtilTable, portCpuBStatsUtil64Seconds=portCpuBStatsUtil64Seconds, portStatsPhyIfOutErrors=portStatsPhyIfOutErrors, portStatsPhyIfInErrors=portStatsPhyIfInErrors, stgNewCfgPortTableEntry=stgNewCfgPortTableEntry, pmCurCfgMonitoredTraffic=pmCurCfgMonitoredTraffic, agPortNewCfgPrefLink=agPortNewCfgPrefLink, trunkGroupCurCfgState=trunkGroupCurCfgState, portInfoIndx=portInfoIndx, mirrOperTimeout=mirrOperTimeout, stgCurCfgVlanBmap1=stgCurCfgVlanBmap1, pmCurCfgPmirrDirection=pmCurCfgPmirrDirection, vlanCurCfgVlanName=vlanCurCfgVlanName, stgCurCfgIndex=stgCurCfgIndex, agPortCurCfgState=agPortCurCfgState, agPortCurCfgPVID=agPortCurCfgPVID, portInfoMode=portInfoMode, vlanNewCfgTable=vlanNewCfgTable, agPortCurCfgPrefLink=agPortCurCfgPrefLink, stgNewCfgDefaultCfg=stgNewCfgDefaultCfg, agPortNewCfgGigEthFctl=agPortNewCfgGigEthFctl, agPortNewCfgPortName=agPortNewCfgPortName, portCpuBStatsUtil1Second=portCpuBStatsUtil1Second, pmNewCfgVmirrMoniPortIndex=pmNewCfgVmirrMoniPortIndex, spannTreeGrpCfg=spannTreeGrpCfg, portInfoTableEntry=portInfoTableEntry)
