#
# PySNMP MIB module ELTEK-DISTRIBUTED-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/eltek/ELTEK-DISTRIBUTED-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 10:04:58 2024
# On host fv-az1773-903 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, iso, Bits, Counter32, TimeTicks, NotificationType, Gauge32, enterprises, Counter64, ObjectIdentity, Unsigned32, IpAddress, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "Bits", "Counter32", "TimeTicks", "NotificationType", "Gauge32", "enterprises", "Counter64", "ObjectIdentity", "Unsigned32", "IpAddress", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
eltek = ModuleIdentity((1, 3, 6, 1, 4, 1, 12148))
eltek.setRevisions(('2016-02-18 14:16', '2015-01-03 08:25', '2011-06-05 14:44', '2011-03-22 14:41', '2010-10-29 08:29', '2009-03-12 15:15', '2008-01-30 11:49', '2007-06-22 11:27', '2005-09-07 12:38', '2005-06-28 11:30',))
if mibBuilder.loadTexts: eltek.setLastUpdated('201501030825Z')
if mibBuilder.loadTexts: eltek.setOrganization('ELTEK power System MIB Working Group')
eltekDistributedPlantV9 = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9))
controlSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9, 1))
systemTime = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9, 1, 1))
ioUnits = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17))
dcSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9, 2))
dcPlant = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9, 2, 1))
systemSiteInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9, 2, 1, 3))
battery = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9, 3))
batteryLVD = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9, 3, 17))
batteryBanks = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19))
batteryCapacityData = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9, 3, 20))
batteryMonitorUnits = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9, 3, 21))
batteryTest = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9, 3, 24))
loadDistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9, 4))
loadDistributionLVDStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9, 4, 3))
loadMonitorUnits = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9, 4, 4))
rectifier = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9, 5))
rectifierStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9, 5, 5))
acDistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9, 6))
alarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9, 7))
alarmWellknownAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1))
solarCharger = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9, 9))
solarChargerStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 9, 9, 5))
systemTimeTime = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTimeTime.setStatus('current')
systemInfoRefresh = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pushbutton", 0), ("refreshdata", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemInfoRefresh.setStatus('current')
systemTrapRepeatRate = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemTrapRepeatRate.setStatus('current')
systemSendOffTrap = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSendOffTrap.setStatus('current')
systemNumOfControlUnits = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNumOfControlUnits.setStatus('current')
systemControlUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: systemControlUnitIndex.setStatus('current')
systemControlUnitTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 9, 1, 7), )
if mibBuilder.loadTexts: systemControlUnitTable.setStatus('current')
systemControlUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 9, 1, 7, 1), ).setIndexNames((0, "ELTEK-DISTRIBUTED-MIB", "systemControlUnitIndex"))
if mibBuilder.loadTexts: systemControlUnitEntry.setStatus('current')
inputControlUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputControlUnitID.setStatus('current')
inputUserConfigurable1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputUserConfigurable1.setStatus('current')
inputUserConfigurable2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputUserConfigurable2.setStatus('current')
inputUserConfigurable3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputUserConfigurable3.setStatus('current')
inputUserConfigurable4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputUserConfigurable4.setStatus('current')
inputUserConfigurable5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputUserConfigurable5.setStatus('current')
inputUserConfigurable6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputUserConfigurable6.setStatus('current')
inputUserConfigurable7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputUserConfigurable7.setStatus('current')
inputUserConfigurable8 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputUserConfigurable8.setStatus('current')
inputUserConfigurable9 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputUserConfigurable9.setStatus('current')
inputUserConfigurable10 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputUserConfigurable10.setStatus('current')
systemLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("linkdown", 0), ("linkup", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemLinkStatus.setStatus('current')
systemInitiateEEPROM = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pushbutton", 0), ("start", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemInitiateEEPROM.setStatus('deprecated')
systemLastDigInput = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: systemLastDigInput.setStatus('current')
systemTrapCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 1, 11), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: systemTrapCounter.setStatus('current')
systemHeartBeatTrapRepeatRate = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemHeartBeatTrapRepeatRate.setStatus('current')
systemResetManualAlarms = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pushbutton", 0), ("apply", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemResetManualAlarms.setStatus('current')
systemControlUnitInputIndex = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: systemControlUnitInputIndex.setStatus('current')
systemControlUnitInputTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 9, 1, 15), )
if mibBuilder.loadTexts: systemControlUnitInputTable.setStatus('current')
systemControlUnitInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 9, 1, 15, 1), ).setIndexNames((0, "ELTEK-DISTRIBUTED-MIB", "systemControlUnitInputIndex"))
if mibBuilder.loadTexts: systemControlUnitInputEntry.setStatus('current')
inputUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputUnitID.setStatus('current')
inputUserConfigurableText1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputUserConfigurableText1.setStatus('current')
inputUserConfigurableText2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 15, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputUserConfigurableText2.setStatus('current')
inputUserConfigurableText3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 15, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputUserConfigurableText3.setStatus('current')
inputUserConfigurableText4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 15, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputUserConfigurableText4.setStatus('current')
inputUserConfigurableText5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 15, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputUserConfigurableText5.setStatus('current')
inputUserConfigurableText6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 15, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputUserConfigurableText6.setStatus('current')
inputUserConfigurableText7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 15, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputUserConfigurableText7.setStatus('current')
inputUserConfigurableText8 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 15, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputUserConfigurableText8.setStatus('current')
inputUserConfigurableText9 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 15, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputUserConfigurableText9.setStatus('current')
inputUserConfigurableText10 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 15, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputUserConfigurableText10.setStatus('current')
systemResetCtrlSystem = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pushbutton", 0), ("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemResetCtrlSystem.setStatus('deprecated')
ioUnitNumberOfUnits = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitNumberOfUnits.setStatus('current')
ioUnitsIndex = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 13))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ioUnitsIndex.setStatus('current')
ioUnitsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3), )
if mibBuilder.loadTexts: ioUnitsTable.setStatus('current')
ioUnitsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1), ).setIndexNames((0, "ELTEK-DISTRIBUTED-MIB", "ioUnitsIndex"))
if mibBuilder.loadTexts: ioUnitsEntry.setStatus('current')
ioUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitID.setStatus('current')
ioUnitOutDoorTemp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 2), Integer32()).setUnits('Deg. C/F; i.e. 25 = 25 Deg.').setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitOutDoorTemp1.setStatus('current')
ioUnitOutDoorTemp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 3), Integer32()).setUnits('Deg. C/F; i.e. 25 = 25 Deg.').setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitOutDoorTemp2.setStatus('current')
ioUnitFanSpeed1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 4), Integer32()).setUnits('Percent %').setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitFanSpeed1.setStatus('current')
ioUnitFanSpeedDeltaValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 5), Integer32()).setUnits('Percent %').setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitFanSpeedDeltaValue1.setStatus('current')
ioUnitFanSpeed2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 6), Integer32()).setUnits('Percent %').setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitFanSpeed2.setStatus('current')
ioUnitFanSpeedDeltaValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 7), Integer32()).setUnits('Percent %').setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitFanSpeedDeltaValue2.setStatus('current')
ioUnitProgInputText1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitProgInputText1.setStatus('current')
ioUnitProgInputStatus1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitProgInputStatus1.setStatus('current')
ioUnitProgInputText2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitProgInputText2.setStatus('current')
ioUnitProgInputStatus2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitProgInputStatus2.setStatus('current')
ioUnitProgInputText3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitProgInputText3.setStatus('current')
ioUnitProgInputStatus3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitProgInputStatus3.setStatus('current')
ioUnitProgInputText4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitProgInputText4.setStatus('current')
ioUnitProgInputStatus4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitProgInputStatus4.setStatus('current')
ioUnitProgInputText5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitProgInputText5.setStatus('current')
ioUnitProgInputStatus5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitProgInputStatus5.setStatus('current')
ioUnitProgInputText6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitProgInputText6.setStatus('current')
ioUnitProgInputStatus6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitProgInputStatus6.setStatus('current')
ioUnitProgInputValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 20), Integer32()).setUnits('1/100 Volt; i.e. 500 = 5.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitProgInputValue1.setStatus('current')
ioUnitProgInputValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 21), Integer32()).setUnits('1/100 Volt; i.e. 500 = 5.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitProgInputValue2.setStatus('current')
ioUnitProgInputValue3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 22), Integer32()).setUnits('1/100 Volt; i.e. 500 = 5.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitProgInputValue3.setStatus('current')
ioUnitProgInputValue4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 23), Integer32()).setUnits('1/100 Volt; i.e. 500 = 5.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitProgInputValue4.setStatus('current')
ioUnitProgInputValue5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 24), Integer32()).setUnits('1/100 Volt; i.e. 500 = 5.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitProgInputValue5.setStatus('current')
ioUnitProgInputValue6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 1, 17, 3, 1, 25), Integer32()).setUnits('1/100 Volt; i.e. 500 = 5.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitProgInputValue6.setStatus('current')
systemServiceMode = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deactivate", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServiceMode.setStatus('deprecated')
systemSiteInfoCustomer = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 2, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSiteInfoCustomer.setStatus('current')
systemSiteInfoLocation = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 2, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSiteInfoLocation.setStatus('current')
systemSiteInfoMessage1 = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 2, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSiteInfoMessage1.setStatus('current')
systemSiteInfoMessage2 = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 2, 1, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSiteInfoMessage2.setStatus('current')
systemSiteInfoInstalledDate = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 2, 1, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSiteInfoInstalledDate.setStatus('current')
systemSiteInfoControllerType = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 2, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("al175", 0), ("al4000", 1), ("al6000", 2), ("al175oem", 3), ("mcu", 4), ("smartpack", 5), ("compack", 6), ("smartpack2", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSiteInfoControllerType.setStatus('current')
systemSiteInfoSystemSeriaNum = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 2, 1, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSiteInfoSystemSeriaNum.setStatus('current')
systemSiteInfoControllerSeriaNum = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 2, 1, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSiteInfoControllerSeriaNum.setStatus('current')
systemNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("prs48v", 0), ("prs24v", 1), ("prs12v", 2), ("prs26v", 3), ("prs60v", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNominalVoltage.setStatus('current')
systemOperationalStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("floatvoltreg", 0), ("floattempcomp", 1), ("batteryboost", 2), ("batterytest", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemOperationalStatus.setStatus('current')
batteryName = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryName.setStatus('current')
batteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7500))).setUnits('1/100 Volt; i.e. 5400 = 54.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryVoltage.setStatus('current')
batteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 3), Integer32()).setUnits('Amperes or DeciAmperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCurrent.setStatus('current')
batteryTemp = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('Deg. C/F; i.e. 25 = 25 Deg.').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTemp.setStatus('current')
batteryBreakerStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBreakerStatus.setStatus('current')
batteryChargeCurrentLimitCtrl = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryChargeCurrentLimitCtrl.setStatus('current')
batteryChargeCurrentLimitValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setUnits('Amperes or DeciAmperes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryChargeCurrentLimitValue.setStatus('current')
batteryTempCompEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompEnable.setStatus('current')
batteryFloatVoltConfig = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4300, 6000))).setUnits('1/100 Volt; i.e. 5400 = 54.00V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryFloatVoltConfig.setStatus('current')
batteryBoostVoltConfig = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4300, 6000))).setUnits('1/100 Volt; i.e. 5400 = 54.00V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBoostVoltConfig.setStatus('current')
batteryHighMajorAlarmVoltageConfig = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 11), Integer32()).setUnits('1/100 Volt; i.e. 5400 = 54.00V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryHighMajorAlarmVoltageConfig.setStatus('current')
batteryHighMinorAlarmVoltageConfig = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 12), Integer32()).setUnits('1/100 Volt; i.e. 5400 = 54.00V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryHighMinorAlarmVoltageConfig.setStatus('current')
batteryLowMajorAlarmVoltageConfig = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 13), Integer32()).setUnits('1/100 Volt; i.e. 5400 = 54.00V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryLowMajorAlarmVoltageConfig.setStatus('current')
batteryLowMinorAlarmVoltageConfig = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 14), Integer32()).setUnits('1/100 Volt; i.e. 5400 = 54.00V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryLowMinorAlarmVoltageConfig.setStatus('current')
batteryStartManualTest = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pushbutton", 0), ("starttest", 1), ("stoptest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryStartManualTest.setStatus('current')
batteryStartManualBoost = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pushbutton", 0), ("startboost", 1), ("stopboost", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryStartManualBoost.setStatus('current')
batteryLVDStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("connected", 0), ("disconnected", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryLVDStatus.setStatus('current')
batteryLVDDisconnectVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 17, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7200))).setUnits('1/100 Volt; i.e. 5400 = 54.00V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryLVDDisconnectVoltage.setStatus('current')
batteryLVDConnectVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 17, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7200))).setUnits('1/100 Volt; i.e. 5400 = 54.00V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryLVDConnectVoltage.setStatus('current')
batteryBanksNumofBanks = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksNumofBanks.setStatus('current')
batterySymmetryDeltaLimitVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 1), Integer32()).setUnits('1/100 Volt; i.e. 150 = 1.50V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batterySymmetryDeltaLimitVoltage.setStatus('current')
batteryBanksIndex = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryBanksIndex.setStatus('current')
batteryBanksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3), )
if mibBuilder.loadTexts: batteryBanksTable.setStatus('current')
batteryBanksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1), ).setIndexNames((0, "ELTEK-DISTRIBUTED-MIB", "batteryBanksIndex"))
if mibBuilder.loadTexts: batteryBanksEntry.setStatus('current')
batteryBankID = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBankID.setStatus('current')
batteryBanksSymmetry1enable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBanksSymmetry1enable.setStatus('current')
batteryBanksSymmetry1status = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 0), ("minorAlarm", 1), ("majorAlarm", 2), ("disabled", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksSymmetry1status.setStatus('current')
batteryBanksSymmetry1deltaVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 4), Integer32()).setUnits('1/100 Volt; i.e. 100 = 1.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksSymmetry1deltaVoltage.setStatus('current')
batteryBanksSymmetry2enable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBanksSymmetry2enable.setStatus('current')
batteryBanksSymmetry2status = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 0), ("minorAlarm", 1), ("majorAlarm", 2), ("disabled", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksSymmetry2status.setStatus('current')
batteryBanksSymmetry2deltaVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 7), Integer32()).setUnits('1/100 Volt; i.e. 100 = 1.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksSymmetry2deltaVoltage.setStatus('current')
batteryBanksSymmetry3enable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBanksSymmetry3enable.setStatus('current')
batteryBanksSymmetry3status = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 0), ("minorAlarm", 1), ("majorAlarm", 2), ("disabled", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksSymmetry3status.setStatus('current')
batteryBanksSymmetry3deltaVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 10), Integer32()).setUnits('1/100 Volt; i.e. 100 = 1.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksSymmetry3deltaVoltage.setStatus('current')
batteryBanksSymmetry4enable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBanksSymmetry4enable.setStatus('current')
batteryBanksSymmetry4status = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 0), ("minorAlarm", 1), ("majorAlarm", 2), ("disabled", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksSymmetry4status.setStatus('current')
batteryBanksSymmetry4deltaVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 13), Integer32()).setUnits('1/100 Volt; i.e. 100 = 1.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksSymmetry4deltaVoltage.setStatus('current')
batteryBanksSymmetry5enable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBanksSymmetry5enable.setStatus('current')
batteryBanksSymmetry5status = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 0), ("minorAlarm", 1), ("majorAlarm", 2), ("disabled", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksSymmetry5status.setStatus('current')
batteryBanksSymmetry5deltaVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 16), Integer32()).setUnits('1/100 Volt; i.e. 100 = 1.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksSymmetry5deltaVoltage.setStatus('current')
batteryBanksSymmetry6enable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBanksSymmetry6enable.setStatus('current')
batteryBanksSymmetry6status = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 0), ("minorAlarm", 1), ("majorAlarm", 2), ("disabled", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksSymmetry6status.setStatus('current')
batteryBanksSymmetry6deltaVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 19), Integer32()).setUnits('1/100 Volt; i.e. 100 = 1.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksSymmetry6deltaVoltage.setStatus('current')
batteryBanksSymmetry7enable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBanksSymmetry7enable.setStatus('current')
batteryBanksSymmetry7status = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 0), ("minorAlarm", 1), ("majorAlarm", 2), ("disabled", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksSymmetry7status.setStatus('current')
batteryBanksSymmetry7deltaVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 22), Integer32()).setUnits('1/100 Volt; i.e. 100 = 1.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksSymmetry7deltaVoltage.setStatus('current')
batteryBanksSymmetry8enable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBanksSymmetry8enable.setStatus('current')
batteryBanksSymmetry8status = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 0), ("minorAlarm", 1), ("majorAlarm", 2), ("disabled", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksSymmetry8status.setStatus('current')
batteryBanksSymmetry8deltaVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 3, 1, 25), Integer32()).setUnits('1/100 Volt; i.e. 100 = 1.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksSymmetry8deltaVoltage.setStatus('current')
batteryBanksNumberOfStrings = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksNumberOfStrings.setStatus('current')
batteryBanksExtensionIndex = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryBanksExtensionIndex.setStatus('current')
batteryBanksExtensionTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 6), )
if mibBuilder.loadTexts: batteryBanksExtensionTable.setStatus('current')
batteryBanksExtensionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 6, 1), ).setIndexNames((0, "ELTEK-DISTRIBUTED-MIB", "batteryBanksExtensionIndex"))
if mibBuilder.loadTexts: batteryBanksExtensionEntry.setStatus('current')
batteryBanksExtensionID = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksExtensionID.setStatus('current')
batteryBanksExtensionSymmetryInputValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 6, 1, 2), Integer32()).setUnits('1/100 Volt; i.e. 1200 = 12.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksExtensionSymmetryInputValue1.setStatus('current')
batteryBanksExtensionSymmetryInputValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 6, 1, 3), Integer32()).setUnits('1/100 Volt; i.e. 1200 = 12.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksExtensionSymmetryInputValue2.setStatus('current')
batteryBanksExtensionSymmetryInputValue3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 6, 1, 4), Integer32()).setUnits('1/100 Volt; i.e. 1200 = 12.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksExtensionSymmetryInputValue3.setStatus('current')
batteryBanksExtensionSymmetryInputValue4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 6, 1, 5), Integer32()).setUnits('1/100 Volt; i.e. 1200 = 12.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksExtensionSymmetryInputValue4.setStatus('current')
batteryBanksExtensionSymmetryInputValue5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 6, 1, 6), Integer32()).setUnits('1/100 Volt; i.e. 1200 = 12.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksExtensionSymmetryInputValue5.setStatus('current')
batteryBanksExtensionSymmetryInputValue6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 6, 1, 7), Integer32()).setUnits('1/100 Volt; i.e. 1200 = 12.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksExtensionSymmetryInputValue6.setStatus('current')
batteryBanksExtensionSymmetryInputValue7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 6, 1, 8), Integer32()).setUnits('1/100 Volt; i.e. 1200 = 12.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksExtensionSymmetryInputValue7.setStatus('current')
batteryBanksExtensionSymmetryInputValue8 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 19, 6, 1, 9), Integer32()).setUnits('1/100 Volt; i.e. 1200 = 12.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBanksExtensionSymmetryInputValue8.setStatus('current')
batteryTimeToDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 20, 1), Integer32()).setUnits('Minutes; 40 = 40 minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTimeToDisconnect.setStatus('current')
batteryCapacityLeft = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 20, 2), Integer32()).setUnits('Ah/%; 23 = 23 Ah or in %').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCapacityLeft.setStatus('current')
batteryCapacityUsed = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 20, 3), Integer32()).setUnits('Ah/%; 23 = 23 Ah or in %').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCapacityUsed.setStatus('current')
batteryCapacityTotal = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 20, 4), Integer32()).setUnits('Ah/%; 23 = 23 Ah or in %').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCapacityTotal.setStatus('current')
batteryQuality = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 20, 5), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryQuality.setStatus('current')
battmonNumberOfUnits = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battmonNumberOfUnits.setStatus('current')
battmonUnitsIndex = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 21, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: battmonUnitsIndex.setStatus('current')
battmonUnitsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 9, 3, 21, 3), )
if mibBuilder.loadTexts: battmonUnitsTable.setStatus('current')
battmonUnitsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 9, 3, 21, 3, 1), ).setIndexNames((0, "ELTEK-DISTRIBUTED-MIB", "batteryBanksIndex"))
if mibBuilder.loadTexts: battmonUnitsEntry.setStatus('current')
batteryMonitorID = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 21, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorID.setStatus('current')
batteryMonitorSymmetry1status = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 21, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 0), ("minorAlarm", 1), ("majorAlarm", 2), ("disabled", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorSymmetry1status.setStatus('current')
batteryMonitorSymmetry1InputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 21, 3, 1, 3), Integer32()).setUnits('1/100 Volt; i.e. 1200 = 12.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorSymmetry1InputValue.setStatus('current')
batteryMonitorSymmetry2status = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 21, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 0), ("minorAlarm", 1), ("majorAlarm", 2), ("disabled", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorSymmetry2status.setStatus('current')
batteryMonitorSymmetry2InputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 21, 3, 1, 5), Integer32()).setUnits('1/100 Volt; i.e. 1200 = 12.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorSymmetry2InputValue.setStatus('current')
batteryMonitorSymmetry3status = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 21, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 0), ("minorAlarm", 1), ("majorAlarm", 2), ("disabled", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorSymmetry3status.setStatus('current')
batteryMonitorSymmetry3InputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 21, 3, 1, 7), Integer32()).setUnits('1/100 Volt; i.e. 1200 = 12.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorSymmetry3InputValue.setStatus('current')
batteryMonitorSymmetry4status = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 21, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 0), ("minorAlarm", 1), ("majorAlarm", 2), ("disabled", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorSymmetry4status.setStatus('current')
batteryMonitorSymmetry4InputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 21, 3, 1, 9), Integer32()).setUnits('1/100 Volt; i.e. 1200 = 12.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorSymmetry4InputValue.setStatus('current')
batteryMonitorCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 21, 3, 1, 10), Integer32()).setUnits('Amperes or DeciAmperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorCurrentValue.setStatus('current')
batteryMonitorFuseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 21, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorFuseStatus.setStatus('current')
batteryMonitorTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 3, 21, 3, 1, 12), Integer32()).setUnits('Deg. C/F; i.e. 25 = 25 Deg.').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorTemperature.setStatus('current')
batteryHighMajorTempAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 22), Integer32()).setUnits('Deg. C/F; i.e. 25 = 25 Deg.').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryHighMajorTempAlarmLevel.setStatus('current')
batteryHighMinorTempAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 23), Integer32()).setUnits('Deg. C/F; i.e. 25 = 25 Deg.').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryHighMinorTempAlarmLevel.setStatus('current')
batteryTestEndVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 24, 1), Integer32()).setUnits('1/100 Volt; i.e. 190 = 1.90V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTestEndVoltage.setStatus('current')
batteryTestMaximumDischargeTime = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 24, 2), Integer32()).setUnits('Minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTestMaximumDischargeTime.setStatus('current')
batteryTestMaximumDischargeAh = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 3, 24, 3), Integer32()).setUnits('Ah').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTestMaximumDischargeAh.setStatus('current')
loadDistributionCurrent = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 4, 1), Integer32()).setUnits('Amperes or DeciAmperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: loadDistributionCurrent.setStatus('current')
loadDistributionBreakerStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadDistributionBreakerStatus.setStatus('current')
loadLVD1Enable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadLVD1Enable.setStatus('current')
loadLVD1Status = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("connected", 0), ("disconnected", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadLVD1Status.setStatus('current')
loadLVD1ConnectVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 4, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7200))).setUnits('1/100 Volt; i.e. 5400 = 54.00V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadLVD1ConnectVoltage.setStatus('current')
loadLVD1DisconnectVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 4, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7200))).setUnits('1/100 Volt; i.e. 5400 = 54.00V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadLVD1DisconnectVoltage.setStatus('current')
loadLVD2Enable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 4, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadLVD2Enable.setStatus('current')
loadLVD2Status = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("connected", 0), ("disconnected", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadLVD2Status.setStatus('current')
loadLVD2ConnectVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 4, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7200))).setUnits('1/100 Volt; i.e. 5400 = 54.00V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadLVD2ConnectVoltage.setStatus('current')
loadLVD2DisconnectVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 4, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7200))).setUnits('1/100 Volt; i.e. 5400 = 54.00V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadLVD2DisconnectVoltage.setStatus('current')
loadLVD3Enable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadLVD3Enable.setStatus('current')
loadLVD3Status = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("connected", 0), ("disconnected", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadLVD3Status.setStatus('current')
loadLVD3ConnectVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 4, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7200))).setUnits('1/100 Volt; i.e. 5400 = 54.00V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadLVD3ConnectVoltage.setStatus('current')
loadLVD3DisconnectVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 4, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7200))).setUnits('1/100 Volt; i.e. 5400 = 54.00V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadLVD3DisconnectVoltage.setStatus('current')
loadmonitorNumberOfUnits = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadmonitorNumberOfUnits.setStatus('current')
loadMonitorUnitsIndex = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 13))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: loadMonitorUnitsIndex.setStatus('current')
loadMonitorUnitsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 9, 4, 4, 3), )
if mibBuilder.loadTexts: loadMonitorUnitsTable.setStatus('current')
loadMonitorUnitsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 9, 4, 4, 3, 1), ).setIndexNames((0, "ELTEK-DISTRIBUTED-MIB", "loadMonitorUnitsIndex"))
if mibBuilder.loadTexts: loadMonitorUnitsEntry.setStatus('current')
loadMonitorID = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 4, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadMonitorID.setStatus('current')
loadMonitorFuseStatus1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 4, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadMonitorFuseStatus1.setStatus('current')
loadMonitorCurrent1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 4, 4, 3, 1, 3), Integer32()).setUnits('Amperes or DeciAmperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: loadMonitorCurrent1.setStatus('current')
loadMonitorFuseStatus2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 4, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadMonitorFuseStatus2.setStatus('current')
loadMonitorCurrent2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 4, 4, 3, 1, 5), Integer32()).setUnits('Amperes or DeciAmperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: loadMonitorCurrent2.setStatus('current')
loadMonitorFuseStatus3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 4, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadMonitorFuseStatus3.setStatus('current')
loadMonitorCurrent3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 4, 4, 3, 1, 7), Integer32()).setUnits('Amperes or DeciAmperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: loadMonitorCurrent3.setStatus('current')
loadMonitorFuseStatus4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 4, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadMonitorFuseStatus4.setStatus('current')
loadMonitorCurrent4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 4, 4, 3, 1, 9), Integer32()).setUnits('Amperes or DeciAmperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: loadMonitorCurrent4.setStatus('current')
loadMonitorFuseStatus5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 4, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadMonitorFuseStatus5.setStatus('current')
loadMonitorCurrent5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 4, 4, 3, 1, 11), Integer32()).setUnits('Amperes or DeciAmperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: loadMonitorCurrent5.setStatus('current')
loadMonitorFuseStatus6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 4, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadMonitorFuseStatus6.setStatus('current')
loadMonitorCurrent6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 4, 4, 3, 1, 13), Integer32()).setUnits('Amperes or DeciAmperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: loadMonitorCurrent6.setStatus('current')
loadMonitorFuseStatus7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 4, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadMonitorFuseStatus7.setStatus('current')
loadMonitorCurrent7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 4, 4, 3, 1, 15), Integer32()).setUnits('Amperes or DeciAmperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: loadMonitorCurrent7.setStatus('current')
loadMonitorFuseStatus8 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 4, 4, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadMonitorFuseStatus8.setStatus('current')
loadMonitorCurrent8 = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 4, 4, 3, 1, 17), Integer32()).setUnits('Amperes or DeciAmperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: loadMonitorCurrent8.setStatus('current')
rectifierInstalledRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierInstalledRectifiers.setStatus('current')
rectifierRectifiersActive = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierRectifiersActive.setStatus('current')
rectifierTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 5, 3), Integer32()).setUnits('DeciAmperes; i.e. 20 = 2,0 Amperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierTotalCurrent.setStatus('current')
rectifierUtilization = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierUtilization.setStatus('current')
rectifierStatusNoIndex = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 5, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 95))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierStatusNoIndex.setStatus('current')
rectifierStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 9, 5, 5, 2), )
if mibBuilder.loadTexts: rectifierStatusTable.setStatus('current')
rectifierStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 9, 5, 5, 2, 1), ).setIndexNames((0, "ELTEK-DISTRIBUTED-MIB", "rectifierStatusID"))
if mibBuilder.loadTexts: rectifierStatusEntry.setStatus('current')
rectifierStatusID = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 5, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierStatusID.setStatus('current')
rectifierStatusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 5, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notPresent", 0), ("normal", 1), ("alarm", 2), ("notUsed", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierStatusStatus.setStatus('current')
rectifierStatusOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 5, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('DeciAmperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierStatusOutputCurrent.setStatus('current')
rectifierStatusOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 5, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('1/100 Volt; i.e. 5400 = 54.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierStatusOutputVoltage.setStatus('current')
rectifierStatusTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 5, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('Deg. C/F; i.e. 35 = 35 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierStatusTemp.setStatus('current')
rectifierStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 5, 5, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierStatusType.setStatus('current')
rectifierStatusSKU = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 5, 5, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierStatusSKU.setStatus('current')
rectifierStatusSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 5, 5, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierStatusSerialNo.setStatus('current')
rectifierStatusRevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 5, 5, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierStatusRevisionLevel.setStatus('current')
acVoltage1 = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 6, 1), Integer32()).setUnits('Volts AC').setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltage1.setStatus('current')
acVoltage2 = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 6, 2), Integer32()).setUnits('Volts AC').setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltage2.setStatus('current')
acVoltage3 = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 6, 3), Integer32()).setUnits('Volts AC').setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltage3.setStatus('current')
alarmMajorHighBattVolt = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmMajorHighBattVolt.setStatus('current')
alarmMinorHighBattVolt = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmMinorHighBattVolt.setStatus('current')
alarmMajorLowBattVolt = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmMajorLowBattVolt.setStatus('current')
alarmMinorLowBattVolt = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmMinorLowBattVolt.setStatus('current')
alarmMajorBatteryHighTemp = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmMajorBatteryHighTemp.setStatus('current')
alarmMinorBatteryHighTemp = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmMinorBatteryHighTemp.setStatus('current')
alarmBatteryDisconnectOpen = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmBatteryDisconnectOpen.setStatus('current')
alarmLVD1open = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLVD1open.setStatus('current')
alarmLVD2open = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLVD2open.setStatus('current')
alarmLVD3open = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLVD3open.setStatus('current')
alarmACmains = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmACmains.setStatus('current')
alarmBatteryBreakerOpen = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmBatteryBreakerOpen.setStatus('current')
alarmDistributionBreakerOpen = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDistributionBreakerOpen.setStatus('current')
alarmMajorRectifier = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmMajorRectifier.setStatus('current')
alarmMinorRectifier = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmMinorRectifier.setStatus('current')
alarmMajorBatterySymmetry = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmMajorBatterySymmetry.setStatus('current')
alarmMinorBatterySymmetry = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmMinorBatterySymmetry.setStatus('current')
alarmBatteryLifeEnded = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmBatteryLifeEnded.setStatus('current')
alarmBatteryTestmodeEntered = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmBatteryTestmodeEntered.setStatus('current')
alarmBatteryBoostmodeEntered = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmBatteryBoostmodeEntered.setStatus('current')
alarmIoUnitTemp1 = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmIoUnitTemp1.setStatus('current')
alarmIoUnitTemp2 = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmIoUnitTemp2.setStatus('current')
alarmIoUnitDeltaFanSpeed1 = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmIoUnitDeltaFanSpeed1.setStatus('current')
alarmIoUnitDeltaFanSpeed2 = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmIoUnitDeltaFanSpeed2.setStatus('current')
alarmMajorSolar = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmMajorSolar.setStatus('current')
alarmMinorSolar = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmMinorSolar.setStatus('current')
alarmMajorRectifierCapacity = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmMajorRectifierCapacity.setStatus('current')
alarmMinorRectifierCapacity = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 7, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmMinorRectifierCapacity.setStatus('current')
dcSystemTraps = NotificationGroup((1, 3, 6, 1, 4, 1, 12148, 9, 8)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmMajorHighBattVoltTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmMinorHighBattVoltTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmMajorLowBattVoltTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmMinorLowBattVoltTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmMajorBatteryHighTempTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmMinorBatteryHighTempTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmBatteryDisconnectOpenTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmLVD1openTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmLVD2openTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmLVD3openTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmACmainsTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmBatteryBreakerOpenTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmDistributionBreakerOpenTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmMajorRectifierTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmMinorRectifierTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmMajorBatterySymmetryTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmMinorBatterySymmetryTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmBatteryLifeEndedTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmBatteryTestmodeEnteredTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmBatteryBoostmodeEnteredTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmController1proginputTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmController2proginputTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmController3proginputTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmController4proginputTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmController5proginputTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmController6proginputTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmController7proginputTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmController8proginputTrap"), ("ELTEK-DISTRIBUTED-MIB", "infoHeartBeatTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmIoUnitTemp1Trap"), ("ELTEK-DISTRIBUTED-MIB", "alarmIoUnitTemp2Trap"), ("ELTEK-DISTRIBUTED-MIB", "alarmIoUnitDeltaFanSpeed1Trap"), ("ELTEK-DISTRIBUTED-MIB", "alarmIoUnitDeltaFanSpeed2Trap"), ("ELTEK-DISTRIBUTED-MIB", "alarmIoUnit1proginputTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmIoUnit2proginputTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmIoUnit3proginputTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmIoUnit4proginputTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmIoUnit5proginputTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmIoUnit6proginputTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmIoUnit7proginputTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmIoUnit8proginputTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmIoUnit9proginputTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmIoUnit10proginputTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmIoUnit11proginputTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmIoUnit12proginputTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmIoUnit13proginputTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmIoUnit14proginputTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmMajorSolarChargerTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmMinorSolarChargerTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmMajorRectifierCapacityTrap"), ("ELTEK-DISTRIBUTED-MIB", "alarmMinorRectifierCapacityTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dcSystemTraps = dcSystemTraps.setStatus('current')
alarmMajorHighBattVoltTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 1)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmMajorHighBattVolt"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmMajorHighBattVoltTrap.setStatus('current')
alarmMinorHighBattVoltTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 2)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmMinorHighBattVolt"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmMinorHighBattVoltTrap.setStatus('current')
alarmMajorLowBattVoltTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 3)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmMajorLowBattVolt"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmMajorLowBattVoltTrap.setStatus('current')
alarmMinorLowBattVoltTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 4)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmMinorLowBattVolt"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmMinorLowBattVoltTrap.setStatus('current')
alarmMajorBatteryHighTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 5)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmMajorBatteryHighTemp"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmMajorBatteryHighTempTrap.setStatus('current')
alarmMinorBatteryHighTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 6)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmMinorBatteryHighTemp"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmMinorBatteryHighTempTrap.setStatus('current')
alarmBatteryDisconnectOpenTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 7)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmBatteryDisconnectOpen"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmBatteryDisconnectOpenTrap.setStatus('current')
alarmLVD1openTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 8)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmLVD1open"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmLVD1openTrap.setStatus('current')
alarmLVD2openTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 9)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmLVD2open"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmLVD2openTrap.setStatus('current')
alarmLVD3openTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 10)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmLVD3open"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmLVD3openTrap.setStatus('current')
alarmACmainsTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 11)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmACmains"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmACmainsTrap.setStatus('current')
alarmBatteryBreakerOpenTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 12)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmBatteryBreakerOpen"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmBatteryBreakerOpenTrap.setStatus('current')
alarmDistributionBreakerOpenTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 13)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmDistributionBreakerOpen"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmDistributionBreakerOpenTrap.setStatus('current')
alarmMajorRectifierTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 14)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmMajorRectifier"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmMajorRectifierTrap.setStatus('current')
alarmMinorRectifierTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 15)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmMinorRectifier"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmMinorRectifierTrap.setStatus('current')
alarmMajorBatterySymmetryTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 16)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmMajorBatterySymmetry"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmMajorBatterySymmetryTrap.setStatus('current')
alarmMinorBatterySymmetryTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 17)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmMinorBatterySymmetry"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmMinorBatterySymmetryTrap.setStatus('current')
alarmBatteryLifeEndedTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 18)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmBatteryLifeEnded"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmBatteryLifeEndedTrap.setStatus('current')
alarmBatteryTestmodeEnteredTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 19)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmBatteryTestmodeEntered"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmBatteryTestmodeEnteredTrap.setStatus('current')
alarmBatteryBoostmodeEnteredTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 20)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmBatteryBoostmodeEntered"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmBatteryBoostmodeEnteredTrap.setStatus('current')
alarmController1proginputTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 21)).setObjects(("ELTEK-DISTRIBUTED-MIB", "inputUserConfigurable1"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"), ("ELTEK-DISTRIBUTED-MIB", "systemLastDigInput"), ("ELTEK-DISTRIBUTED-MIB", "inputUserConfigurableText1"))
if mibBuilder.loadTexts: alarmController1proginputTrap.setStatus('current')
alarmController2proginputTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 22)).setObjects(("ELTEK-DISTRIBUTED-MIB", "inputUserConfigurable2"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"), ("ELTEK-DISTRIBUTED-MIB", "systemLastDigInput"), ("ELTEK-DISTRIBUTED-MIB", "inputUserConfigurableText2"))
if mibBuilder.loadTexts: alarmController2proginputTrap.setStatus('current')
alarmController3proginputTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 23)).setObjects(("ELTEK-DISTRIBUTED-MIB", "inputUserConfigurable3"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"), ("ELTEK-DISTRIBUTED-MIB", "systemLastDigInput"), ("ELTEK-DISTRIBUTED-MIB", "inputUserConfigurableText3"))
if mibBuilder.loadTexts: alarmController3proginputTrap.setStatus('current')
alarmController4proginputTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 24)).setObjects(("ELTEK-DISTRIBUTED-MIB", "inputUserConfigurable4"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"), ("ELTEK-DISTRIBUTED-MIB", "systemLastDigInput"), ("ELTEK-DISTRIBUTED-MIB", "inputUserConfigurableText4"))
if mibBuilder.loadTexts: alarmController4proginputTrap.setStatus('current')
alarmController5proginputTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 25)).setObjects(("ELTEK-DISTRIBUTED-MIB", "inputUserConfigurable5"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"), ("ELTEK-DISTRIBUTED-MIB", "systemLastDigInput"), ("ELTEK-DISTRIBUTED-MIB", "inputUserConfigurableText5"))
if mibBuilder.loadTexts: alarmController5proginputTrap.setStatus('current')
alarmController6proginputTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 26)).setObjects(("ELTEK-DISTRIBUTED-MIB", "inputUserConfigurable6"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"), ("ELTEK-DISTRIBUTED-MIB", "systemLastDigInput"), ("ELTEK-DISTRIBUTED-MIB", "inputUserConfigurableText6"))
if mibBuilder.loadTexts: alarmController6proginputTrap.setStatus('current')
alarmController7proginputTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 27)).setObjects(("ELTEK-DISTRIBUTED-MIB", "inputUserConfigurable7"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"), ("ELTEK-DISTRIBUTED-MIB", "systemLastDigInput"), ("ELTEK-DISTRIBUTED-MIB", "inputUserConfigurableText7"))
if mibBuilder.loadTexts: alarmController7proginputTrap.setStatus('current')
alarmController8proginputTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 28)).setObjects(("ELTEK-DISTRIBUTED-MIB", "inputUserConfigurable8"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"), ("ELTEK-DISTRIBUTED-MIB", "systemLastDigInput"), ("ELTEK-DISTRIBUTED-MIB", "inputUserConfigurableText8"))
if mibBuilder.loadTexts: alarmController8proginputTrap.setStatus('current')
infoHeartBeatTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 29)).setObjects(("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: infoHeartBeatTrap.setStatus('current')
alarmIoUnitTemp1Trap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 30)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmIoUnitTemp1"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmIoUnitTemp1Trap.setStatus('current')
alarmIoUnitTemp2Trap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 31)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmIoUnitTemp2"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmIoUnitTemp2Trap.setStatus('current')
alarmIoUnitDeltaFanSpeed1Trap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 32)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmIoUnitDeltaFanSpeed1"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmIoUnitDeltaFanSpeed1Trap.setStatus('current')
alarmIoUnitDeltaFanSpeed2Trap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 33)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmIoUnitDeltaFanSpeed2"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmIoUnitDeltaFanSpeed2Trap.setStatus('current')
alarmIoUnit1proginputTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 34)).setObjects(("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputStatus1"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"), ("ELTEK-DISTRIBUTED-MIB", "systemLastDigInput"), ("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputText1"))
if mibBuilder.loadTexts: alarmIoUnit1proginputTrap.setStatus('current')
alarmIoUnit2proginputTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 35)).setObjects(("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputStatus2"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"), ("ELTEK-DISTRIBUTED-MIB", "systemLastDigInput"), ("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputText2"))
if mibBuilder.loadTexts: alarmIoUnit2proginputTrap.setStatus('current')
alarmIoUnit3proginputTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 36)).setObjects(("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputStatus3"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"), ("ELTEK-DISTRIBUTED-MIB", "systemLastDigInput"), ("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputText3"))
if mibBuilder.loadTexts: alarmIoUnit3proginputTrap.setStatus('current')
alarmIoUnit4proginputTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 37)).setObjects(("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputStatus4"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"), ("ELTEK-DISTRIBUTED-MIB", "systemLastDigInput"), ("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputText4"))
if mibBuilder.loadTexts: alarmIoUnit4proginputTrap.setStatus('current')
alarmIoUnit5proginputTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 38)).setObjects(("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputStatus5"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"), ("ELTEK-DISTRIBUTED-MIB", "systemLastDigInput"), ("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputText5"))
if mibBuilder.loadTexts: alarmIoUnit5proginputTrap.setStatus('current')
alarmIoUnit6proginputTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 39)).setObjects(("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputStatus6"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"), ("ELTEK-DISTRIBUTED-MIB", "systemLastDigInput"), ("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputText6"))
if mibBuilder.loadTexts: alarmIoUnit6proginputTrap.setStatus('current')
alarmIoUnit7proginputTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 40)).setObjects(("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputStatus6"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"), ("ELTEK-DISTRIBUTED-MIB", "systemLastDigInput"), ("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputText6"))
if mibBuilder.loadTexts: alarmIoUnit7proginputTrap.setStatus('current')
alarmIoUnit8proginputTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 41)).setObjects(("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputStatus6"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"), ("ELTEK-DISTRIBUTED-MIB", "systemLastDigInput"), ("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputText6"))
if mibBuilder.loadTexts: alarmIoUnit8proginputTrap.setStatus('current')
alarmIoUnit9proginputTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 42)).setObjects(("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputStatus6"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"), ("ELTEK-DISTRIBUTED-MIB", "systemLastDigInput"), ("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputText6"))
if mibBuilder.loadTexts: alarmIoUnit9proginputTrap.setStatus('current')
alarmIoUnit10proginputTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 43)).setObjects(("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputStatus6"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"), ("ELTEK-DISTRIBUTED-MIB", "systemLastDigInput"), ("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputText6"))
if mibBuilder.loadTexts: alarmIoUnit10proginputTrap.setStatus('current')
alarmIoUnit11proginputTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 44)).setObjects(("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputStatus6"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"), ("ELTEK-DISTRIBUTED-MIB", "systemLastDigInput"), ("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputText6"))
if mibBuilder.loadTexts: alarmIoUnit11proginputTrap.setStatus('current')
alarmIoUnit12proginputTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 45)).setObjects(("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputStatus6"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"), ("ELTEK-DISTRIBUTED-MIB", "systemLastDigInput"), ("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputText6"))
if mibBuilder.loadTexts: alarmIoUnit12proginputTrap.setStatus('current')
alarmIoUnit13proginputTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 46)).setObjects(("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputStatus6"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"), ("ELTEK-DISTRIBUTED-MIB", "systemLastDigInput"), ("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputText6"))
if mibBuilder.loadTexts: alarmIoUnit13proginputTrap.setStatus('current')
alarmIoUnit14proginputTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 47)).setObjects(("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputStatus6"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"), ("ELTEK-DISTRIBUTED-MIB", "systemLastDigInput"), ("ELTEK-DISTRIBUTED-MIB", "ioUnitProgInputText6"))
if mibBuilder.loadTexts: alarmIoUnit14proginputTrap.setStatus('current')
alarmMajorSolarChargerTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 48)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmMajorSolar"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmMajorSolarChargerTrap.setStatus('current')
alarmMinorSolarChargerTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 49)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmMinorSolar"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmMinorSolarChargerTrap.setStatus('current')
alarmMajorRectifierCapacityTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 50)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmMajorRectifierCapacity"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmMajorRectifierCapacityTrap.setStatus('current')
alarmMinorRectifierCapacityTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 9, 8, 51)).setObjects(("ELTEK-DISTRIBUTED-MIB", "alarmMinorRectifierCapacity"), ("ELTEK-DISTRIBUTED-MIB", "systemTrapCounter"))
if mibBuilder.loadTexts: alarmMinorRectifierCapacityTrap.setStatus('current')
solarChargerInstalledsolarChargers = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerInstalledsolarChargers.setStatus('current')
solarChargersActive = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersActive.setStatus('current')
solarChargerTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 9, 3), Integer32()).setUnits('DeciAmperes; i.e. 20 = 2,0 Amperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerTotalCurrent.setStatus('current')
solarChargerUtilization = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerUtilization.setStatus('current')
solarChargerStatusNoIndex = MibScalar((1, 3, 6, 1, 4, 1, 12148, 9, 9, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 95))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solarChargerStatusNoIndex.setStatus('current')
solarChargerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 9, 9, 5, 2), )
if mibBuilder.loadTexts: solarChargerStatusTable.setStatus('current')
solarChargerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 9, 9, 5, 2, 1), ).setIndexNames((0, "ELTEK-DISTRIBUTED-MIB", "solarChargerStatusID"))
if mibBuilder.loadTexts: solarChargerStatusEntry.setStatus('current')
solarChargerStatusID = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 9, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerStatusID.setStatus('current')
solarChargerStatusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 9, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notPresent", 0), ("normal", 1), ("alarm", 2), ("notUsed", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerStatusStatus.setStatus('current')
solarChargerOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 9, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('DeciAmperes; i.e. 20 = 2,0 Amperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerOutputCurrent.setStatus('current')
solarChargerOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 9, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('1/100 Volt; i.e. 5400 = 54.00V').setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerOutputVoltage.setStatus('current')
solarChargerTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 9, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerTemp.setStatus('current')
solarChargerType = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 9, 5, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerType.setStatus('current')
solarChargerSKU = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 9, 5, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerSKU.setStatus('current')
solarChargerSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 9, 5, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerSerialNo.setStatus('current')
solarChargerRevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 9, 9, 5, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerRevisionLevel.setStatus('current')
mibBuilder.exportSymbols("ELTEK-DISTRIBUTED-MIB", ioUnitProgInputText4=ioUnitProgInputText4, batteryBanksSymmetry2enable=batteryBanksSymmetry2enable, inputUserConfigurableText9=inputUserConfigurableText9, alarmMajorBatteryHighTempTrap=alarmMajorBatteryHighTempTrap, solarChargerStatusStatus=solarChargerStatusStatus, alarmLVD3open=alarmLVD3open, batteryBanksExtensionSymmetryInputValue2=batteryBanksExtensionSymmetryInputValue2, alarmMajorRectifier=alarmMajorRectifier, batteryCurrent=batteryCurrent, batteryTempCompEnable=batteryTempCompEnable, batteryMonitorSymmetry2InputValue=batteryMonitorSymmetry2InputValue, alarmMinorRectifierCapacity=alarmMinorRectifierCapacity, alarmMajorRectifierTrap=alarmMajorRectifierTrap, loadLVD2Status=loadLVD2Status, ioUnitProgInputText2=ioUnitProgInputText2, solarChargerUtilization=solarChargerUtilization, alarmDistributionBreakerOpenTrap=alarmDistributionBreakerOpenTrap, batteryTestEndVoltage=batteryTestEndVoltage, rectifierStatusEntry=rectifierStatusEntry, inputControlUnitID=inputControlUnitID, batterySymmetryDeltaLimitVoltage=batterySymmetryDeltaLimitVoltage, ioUnitProgInputText6=ioUnitProgInputText6, alarmMinorRectifier=alarmMinorRectifier, batteryMonitorSymmetry2status=batteryMonitorSymmetry2status, inputUserConfigurableText3=inputUserConfigurableText3, alarmBatteryLifeEndedTrap=alarmBatteryLifeEndedTrap, systemTimeTime=systemTimeTime, alarmMajorLowBattVoltTrap=alarmMajorLowBattVoltTrap, ioUnitID=ioUnitID, alarmIoUnitTemp2=alarmIoUnitTemp2, batteryLowMinorAlarmVoltageConfig=batteryLowMinorAlarmVoltageConfig, loadLVD3Status=loadLVD3Status, rectifierStatusTemp=rectifierStatusTemp, dcSystemTraps=dcSystemTraps, inputUserConfigurableText10=inputUserConfigurableText10, batteryMonitorID=batteryMonitorID, batteryBanksExtensionSymmetryInputValue5=batteryBanksExtensionSymmetryInputValue5, solarChargerSKU=solarChargerSKU, alarmMinorHighBattVolt=alarmMinorHighBattVolt, loadLVD1DisconnectVoltage=loadLVD1DisconnectVoltage, rectifierStatusNoIndex=rectifierStatusNoIndex, solarChargerInstalledsolarChargers=solarChargerInstalledsolarChargers, batteryBoostVoltConfig=batteryBoostVoltConfig, batteryBanksExtensionSymmetryInputValue4=batteryBanksExtensionSymmetryInputValue4, alarmBatteryBreakerOpenTrap=alarmBatteryBreakerOpenTrap, batteryBanksSymmetry1enable=batteryBanksSymmetry1enable, alarmIoUnitTemp2Trap=alarmIoUnitTemp2Trap, batteryCapacityData=batteryCapacityData, batteryMonitorCurrentValue=batteryMonitorCurrentValue, acVoltage1=acVoltage1, solarChargerStatusNoIndex=solarChargerStatusNoIndex, batteryBanksSymmetry3enable=batteryBanksSymmetry3enable, alarmMajorBatterySymmetry=alarmMajorBatterySymmetry, systemServiceMode=systemServiceMode, inputUserConfigurableText6=inputUserConfigurableText6, alarmBatteryLifeEnded=alarmBatteryLifeEnded, batteryBanksSymmetry1status=batteryBanksSymmetry1status, solarChargerOutputCurrent=solarChargerOutputCurrent, ioUnitsTable=ioUnitsTable, batteryTemp=batteryTemp, batteryLVD=batteryLVD, ioUnits=ioUnits, alarmIoUnit3proginputTrap=alarmIoUnit3proginputTrap, systemSiteInfoMessage2=systemSiteInfoMessage2, loadMonitorCurrent2=loadMonitorCurrent2, PYSNMP_MODULE_ID=eltek, loadMonitorCurrent6=loadMonitorCurrent6, loadLVD1Enable=loadLVD1Enable, batteryLVDDisconnectVoltage=batteryLVDDisconnectVoltage, solarCharger=solarCharger, alarmBatteryBoostmodeEntered=alarmBatteryBoostmodeEntered, eltek=eltek, batteryBanks=batteryBanks, loadMonitorCurrent7=loadMonitorCurrent7, loadDistributionCurrent=loadDistributionCurrent, alarmMinorSolar=alarmMinorSolar, solarChargerType=solarChargerType, systemTrapCounter=systemTrapCounter, loadLVD2DisconnectVoltage=loadLVD2DisconnectVoltage, batteryMonitorFuseStatus=batteryMonitorFuseStatus, battery=battery, battmonUnitsTable=battmonUnitsTable, alarmIoUnit14proginputTrap=alarmIoUnit14proginputTrap, batteryBanksTable=batteryBanksTable, loadDistributionLVDStatus=loadDistributionLVDStatus, eltekDistributedPlantV9=eltekDistributedPlantV9, batteryBanksExtensionSymmetryInputValue8=batteryBanksExtensionSymmetryInputValue8, alarmIoUnit12proginputTrap=alarmIoUnit12proginputTrap, systemResetCtrlSystem=systemResetCtrlSystem, loadLVD3DisconnectVoltage=loadLVD3DisconnectVoltage, ioUnitFanSpeed1=ioUnitFanSpeed1, loadMonitorCurrent1=loadMonitorCurrent1, systemControlUnitTable=systemControlUnitTable, solarChargersActive=solarChargersActive, systemLinkStatus=systemLinkStatus, acVoltage3=acVoltage3, rectifierStatusSKU=rectifierStatusSKU, batteryHighMinorTempAlarmLevel=batteryHighMinorTempAlarmLevel, systemTrapRepeatRate=systemTrapRepeatRate, batteryBanksSymmetry3status=batteryBanksSymmetry3status, ioUnitProgInputValue5=ioUnitProgInputValue5, ioUnitOutDoorTemp1=ioUnitOutDoorTemp1, alarmMinorSolarChargerTrap=alarmMinorSolarChargerTrap, systemTime=systemTime, rectifierTotalCurrent=rectifierTotalCurrent, batteryBanksExtensionEntry=batteryBanksExtensionEntry, batteryBanksSymmetry8status=batteryBanksSymmetry8status, alarmIoUnit7proginputTrap=alarmIoUnit7proginputTrap, systemSiteInfoCustomer=systemSiteInfoCustomer, batteryMonitorUnits=batteryMonitorUnits, batteryBanksSymmetry7status=batteryBanksSymmetry7status, battmonNumberOfUnits=battmonNumberOfUnits, alarmMajorBatteryHighTemp=alarmMajorBatteryHighTemp, loadLVD2ConnectVoltage=loadLVD2ConnectVoltage, inputUserConfigurableText8=inputUserConfigurableText8, ioUnitFanSpeedDeltaValue1=ioUnitFanSpeedDeltaValue1, alarmMajorRectifierCapacity=alarmMajorRectifierCapacity, alarmMinorBatteryHighTempTrap=alarmMinorBatteryHighTempTrap, batteryBanksExtensionIndex=batteryBanksExtensionIndex, controlSystem=controlSystem, battmonUnitsIndex=battmonUnitsIndex, batteryBanksSymmetry8deltaVoltage=batteryBanksSymmetry8deltaVoltage, inputUserConfigurable2=inputUserConfigurable2, ioUnitProgInputStatus1=ioUnitProgInputStatus1, ioUnitProgInputValue3=ioUnitProgInputValue3, systemHeartBeatTrapRepeatRate=systemHeartBeatTrapRepeatRate, batteryBanksSymmetry5deltaVoltage=batteryBanksSymmetry5deltaVoltage, alarmACmains=alarmACmains, alarmIoUnit2proginputTrap=alarmIoUnit2proginputTrap, batteryBanksExtensionID=batteryBanksExtensionID, batteryBanksExtensionSymmetryInputValue6=batteryBanksExtensionSymmetryInputValue6, alarmIoUnit10proginputTrap=alarmIoUnit10proginputTrap, batteryBanksSymmetry6status=batteryBanksSymmetry6status, batteryBanksSymmetry4status=batteryBanksSymmetry4status, alarmController7proginputTrap=alarmController7proginputTrap, batteryBanksSymmetry2status=batteryBanksSymmetry2status, batteryBanksExtensionSymmetryInputValue3=batteryBanksExtensionSymmetryInputValue3, loadMonitorUnitsIndex=loadMonitorUnitsIndex, alarmBatteryTestmodeEnteredTrap=alarmBatteryTestmodeEnteredTrap, rectifierStatusType=rectifierStatusType, alarmIoUnitDeltaFanSpeed1=alarmIoUnitDeltaFanSpeed1, ioUnitProgInputStatus3=ioUnitProgInputStatus3, loadMonitorFuseStatus3=loadMonitorFuseStatus3, rectifierStatusTable=rectifierStatusTable, alarmLVD3openTrap=alarmLVD3openTrap, rectifier=rectifier, loadMonitorCurrent5=loadMonitorCurrent5, loadMonitorFuseStatus8=loadMonitorFuseStatus8, batteryBanksSymmetry3deltaVoltage=batteryBanksSymmetry3deltaVoltage, systemControlUnitInputTable=systemControlUnitInputTable, ioUnitsEntry=ioUnitsEntry, ioUnitProgInputStatus5=ioUnitProgInputStatus5, batteryTestMaximumDischargeAh=batteryTestMaximumDischargeAh, batteryMonitorSymmetry3InputValue=batteryMonitorSymmetry3InputValue, batteryMonitorTemperature=batteryMonitorTemperature, loadLVD3ConnectVoltage=loadLVD3ConnectVoltage, batteryLVDStatus=batteryLVDStatus, inputUserConfigurable1=inputUserConfigurable1, battmonUnitsEntry=battmonUnitsEntry, systemInfoRefresh=systemInfoRefresh, loadMonitorUnitsEntry=loadMonitorUnitsEntry, ioUnitFanSpeedDeltaValue2=ioUnitFanSpeedDeltaValue2, rectifierUtilization=rectifierUtilization, batteryCapacityLeft=batteryCapacityLeft, rectifierStatusRevisionLevel=rectifierStatusRevisionLevel, ioUnitProgInputStatus4=ioUnitProgInputStatus4, systemSiteInfoSystemSeriaNum=systemSiteInfoSystemSeriaNum, ioUnitsIndex=ioUnitsIndex, batteryTimeToDisconnect=batteryTimeToDisconnect, dcPlant=dcPlant, inputUserConfigurable3=inputUserConfigurable3, batteryChargeCurrentLimitValue=batteryChargeCurrentLimitValue, alarmIoUnit4proginputTrap=alarmIoUnit4proginputTrap, systemSiteInfoControllerType=systemSiteInfoControllerType, inputUserConfigurableText4=inputUserConfigurableText4, batteryName=batteryName, systemControlUnitInputIndex=systemControlUnitInputIndex, alarmIoUnit6proginputTrap=alarmIoUnit6proginputTrap, systemLastDigInput=systemLastDigInput, batteryBanksNumofBanks=batteryBanksNumofBanks, loadLVD2Enable=loadLVD2Enable, loadLVD3Enable=loadLVD3Enable, alarmMajorBatterySymmetryTrap=alarmMajorBatterySymmetryTrap, alarmBatteryDisconnectOpenTrap=alarmBatteryDisconnectOpenTrap, systemSiteInfoLocation=systemSiteInfoLocation, alarmIoUnit8proginputTrap=alarmIoUnit8proginputTrap, batteryMonitorSymmetry4status=batteryMonitorSymmetry4status, inputUserConfigurable8=inputUserConfigurable8, solarChargerStatusEntry=solarChargerStatusEntry, systemInitiateEEPROM=systemInitiateEEPROM, systemSiteInfoInstalledDate=systemSiteInfoInstalledDate, batteryBanksSymmetry5enable=batteryBanksSymmetry5enable, batteryHighMajorTempAlarmLevel=batteryHighMajorTempAlarmLevel, alarmMinorBatteryHighTemp=alarmMinorBatteryHighTemp, alarmIoUnitTemp1=alarmIoUnitTemp1, batteryLVDConnectVoltage=batteryLVDConnectVoltage, inputUserConfigurable10=inputUserConfigurable10, alarmIoUnitDeltaFanSpeed2=alarmIoUnitDeltaFanSpeed2, loadMonitorFuseStatus2=loadMonitorFuseStatus2, loadMonitorCurrent8=loadMonitorCurrent8, alarmWellknownAlarms=alarmWellknownAlarms, solarChargerStatusTable=solarChargerStatusTable, ioUnitFanSpeed2=ioUnitFanSpeed2, systemSiteInfoMessage1=systemSiteInfoMessage1, loadMonitorFuseStatus7=loadMonitorFuseStatus7, alarmIoUnit1proginputTrap=alarmIoUnit1proginputTrap, loadMonitorFuseStatus4=loadMonitorFuseStatus4, systemResetManualAlarms=systemResetManualAlarms, systemSiteInfo=systemSiteInfo, batteryQuality=batteryQuality, inputUserConfigurable4=inputUserConfigurable4, batteryBanksSymmetry6enable=batteryBanksSymmetry6enable, dcSystem=dcSystem, acDistribution=acDistribution, batteryBanksEntry=batteryBanksEntry, batteryStartManualBoost=batteryStartManualBoost, batteryBanksSymmetry7deltaVoltage=batteryBanksSymmetry7deltaVoltage, systemOperationalStatus=systemOperationalStatus, ioUnitProgInputStatus6=ioUnitProgInputStatus6, ioUnitProgInputText5=ioUnitProgInputText5, alarmIoUnit11proginputTrap=alarmIoUnit11proginputTrap, loadmonitorNumberOfUnits=loadmonitorNumberOfUnits, batteryHighMajorAlarmVoltageConfig=batteryHighMajorAlarmVoltageConfig, loadMonitorUnitsTable=loadMonitorUnitsTable, ioUnitProgInputValue2=ioUnitProgInputValue2, inputUserConfigurable5=inputUserConfigurable5, systemControlUnitEntry=systemControlUnitEntry, loadLVD1Status=loadLVD1Status, alarmController5proginputTrap=alarmController5proginputTrap, loadDistribution=loadDistribution, alarmBatteryBreakerOpen=alarmBatteryBreakerOpen, batteryBanksSymmetry2deltaVoltage=batteryBanksSymmetry2deltaVoltage, systemNumOfControlUnits=systemNumOfControlUnits, batteryBreakerStatus=batteryBreakerStatus, alarmController6proginputTrap=alarmController6proginputTrap, rectifierStatusID=rectifierStatusID, loadMonitorCurrent4=loadMonitorCurrent4, batteryVoltage=batteryVoltage, alarmIoUnitDeltaFanSpeed2Trap=alarmIoUnitDeltaFanSpeed2Trap, batteryBanksSymmetry4deltaVoltage=batteryBanksSymmetry4deltaVoltage, loadMonitorID=loadMonitorID, batteryTest=batteryTest, inputUserConfigurableText7=inputUserConfigurableText7, loadDistributionBreakerStatus=loadDistributionBreakerStatus, alarmIoUnit13proginputTrap=alarmIoUnit13proginputTrap, alarmMinorLowBattVolt=alarmMinorLowBattVolt, batteryBankID=batteryBankID, batteryCapacityTotal=batteryCapacityTotal, alarmController2proginputTrap=alarmController2proginputTrap, loadMonitorFuseStatus5=loadMonitorFuseStatus5, batteryMonitorSymmetry1InputValue=batteryMonitorSymmetry1InputValue, loadMonitorFuseStatus6=loadMonitorFuseStatus6, batteryMonitorSymmetry3status=batteryMonitorSymmetry3status, alarmLVD1open=alarmLVD1open)
mibBuilder.exportSymbols("ELTEK-DISTRIBUTED-MIB", rectifierStatusOutputVoltage=rectifierStatusOutputVoltage, alarmMinorRectifierCapacityTrap=alarmMinorRectifierCapacityTrap, loadMonitorCurrent3=loadMonitorCurrent3, inputUserConfigurable7=inputUserConfigurable7, batteryBanksIndex=batteryBanksIndex, alarmBatteryTestmodeEntered=alarmBatteryTestmodeEntered, solarChargerStatus=solarChargerStatus, alarmLVD1openTrap=alarmLVD1openTrap, batteryBanksExtensionSymmetryInputValue7=batteryBanksExtensionSymmetryInputValue7, infoHeartBeatTrap=infoHeartBeatTrap, batteryMonitorSymmetry4InputValue=batteryMonitorSymmetry4InputValue, alarmMajorRectifierCapacityTrap=alarmMajorRectifierCapacityTrap, batteryFloatVoltConfig=batteryFloatVoltConfig, systemControlUnitInputEntry=systemControlUnitInputEntry, batteryBanksSymmetry1deltaVoltage=batteryBanksSymmetry1deltaVoltage, systemControlUnitIndex=systemControlUnitIndex, systemSendOffTrap=systemSendOffTrap, solarChargerRevisionLevel=solarChargerRevisionLevel, inputUserConfigurable9=inputUserConfigurable9, rectifierInstalledRectifiers=rectifierInstalledRectifiers, batteryBanksSymmetry5status=batteryBanksSymmetry5status, solarChargerStatusID=solarChargerStatusID, batteryLowMajorAlarmVoltageConfig=batteryLowMajorAlarmVoltageConfig, alarmIoUnitTemp1Trap=alarmIoUnitTemp1Trap, ioUnitOutDoorTemp2=ioUnitOutDoorTemp2, inputUserConfigurableText2=inputUserConfigurableText2, solarChargerTotalCurrent=solarChargerTotalCurrent, batteryChargeCurrentLimitCtrl=batteryChargeCurrentLimitCtrl, rectifierStatus=rectifierStatus, alarmIoUnit5proginputTrap=alarmIoUnit5proginputTrap, alarmController4proginputTrap=alarmController4proginputTrap, alarmBatteryDisconnectOpen=alarmBatteryDisconnectOpen, batteryStartManualTest=batteryStartManualTest, loadLVD1ConnectVoltage=loadLVD1ConnectVoltage, alarmMajorHighBattVolt=alarmMajorHighBattVolt, alarmLVD2open=alarmLVD2open, alarmMinorRectifierTrap=alarmMinorRectifierTrap, alarmLVD2openTrap=alarmLVD2openTrap, alarmController8proginputTrap=alarmController8proginputTrap, alarmMajorSolarChargerTrap=alarmMajorSolarChargerTrap, alarmMinorBatterySymmetryTrap=alarmMinorBatterySymmetryTrap, solarChargerSerialNo=solarChargerSerialNo, inputUserConfigurableText5=inputUserConfigurableText5, ioUnitProgInputValue4=ioUnitProgInputValue4, rectifierStatusSerialNo=rectifierStatusSerialNo, rectifierStatusOutputCurrent=rectifierStatusOutputCurrent, alarmMajorSolar=alarmMajorSolar, ioUnitProgInputValue6=ioUnitProgInputValue6, batteryBanksExtensionSymmetryInputValue1=batteryBanksExtensionSymmetryInputValue1, inputUserConfigurable6=inputUserConfigurable6, solarChargerOutputVoltage=solarChargerOutputVoltage, alarmIoUnitDeltaFanSpeed1Trap=alarmIoUnitDeltaFanSpeed1Trap, inputUnitID=inputUnitID, alarmMajorHighBattVoltTrap=alarmMajorHighBattVoltTrap, ioUnitProgInputStatus2=ioUnitProgInputStatus2, rectifierRectifiersActive=rectifierRectifiersActive, systemNominalVoltage=systemNominalVoltage, acVoltage2=acVoltage2, alarmMinorBatterySymmetry=alarmMinorBatterySymmetry, alarmController3proginputTrap=alarmController3proginputTrap, ioUnitProgInputValue1=ioUnitProgInputValue1, alarmDistributionBreakerOpen=alarmDistributionBreakerOpen, ioUnitProgInputText3=ioUnitProgInputText3, inputUserConfigurableText1=inputUserConfigurableText1, alarmIoUnit9proginputTrap=alarmIoUnit9proginputTrap, systemSiteInfoControllerSeriaNum=systemSiteInfoControllerSeriaNum, ioUnitProgInputText1=ioUnitProgInputText1, alarmACmainsTrap=alarmACmainsTrap, alarmMajorLowBattVolt=alarmMajorLowBattVolt, alarmMinorHighBattVoltTrap=alarmMinorHighBattVoltTrap, solarChargerTemp=solarChargerTemp, ioUnitNumberOfUnits=ioUnitNumberOfUnits, batteryBanksSymmetry8enable=batteryBanksSymmetry8enable, batteryCapacityUsed=batteryCapacityUsed, alarmGroup=alarmGroup, loadMonitorFuseStatus1=loadMonitorFuseStatus1, batteryBanksSymmetry4enable=batteryBanksSymmetry4enable, rectifierStatusStatus=rectifierStatusStatus, batteryBanksExtensionTable=batteryBanksExtensionTable, alarmController1proginputTrap=alarmController1proginputTrap, batteryBanksSymmetry6deltaVoltage=batteryBanksSymmetry6deltaVoltage, alarmMinorLowBattVoltTrap=alarmMinorLowBattVoltTrap, loadMonitorUnits=loadMonitorUnits, batteryMonitorSymmetry1status=batteryMonitorSymmetry1status, batteryBanksSymmetry7enable=batteryBanksSymmetry7enable, alarmBatteryBoostmodeEnteredTrap=alarmBatteryBoostmodeEnteredTrap, batteryBanksNumberOfStrings=batteryBanksNumberOfStrings, batteryTestMaximumDischargeTime=batteryTestMaximumDischargeTime, batteryHighMinorAlarmVoltageConfig=batteryHighMinorAlarmVoltageConfig)
