#
# PySNMP MIB module XF-RADIOLINK-PTP-TERMINAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/ericsson/XF-RADIOLINK-PTP-TERMINAL-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 12:22:27 2024
# On host fv-az1022-995 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
entPhysicalIndex, entLogicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex", "entLogicalIndex")
HCPerfCurrentCount, = mibBuilder.importSymbols("HC-PerfHist-TC-MIB", "HCPerfCurrentCount")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
PerfCurrentCount, PerfIntervalCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfCurrentCount", "PerfIntervalCount")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibIdentifier, iso, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, Gauge32, Counter32, ModuleIdentity, Counter64, Integer32, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "iso", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "Gauge32", "Counter32", "ModuleIdentity", "Counter64", "Integer32", "ObjectIdentity", "TimeTicks")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
xfRadioLink, = mibBuilder.importSymbols("XF-TOP-MIB", "xfRadioLink")
xfRadioLinkPtpTerminalMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1))
xfRadioLinkPtpTerminalMIB.setRevisions(('2020-03-17 00:00', '2019-12-20 00:00', '2019-11-26 00:00', '2018-05-23 00:00', '2018-04-27 00:00', '2018-04-06 00:00', '2017-09-19 00:00', '2017-05-24 00:00', '2016-10-24 00:00', '2016-05-11 00:00', '2016-05-10 00:00', '2016-02-22 00:00', '2016-02-05 00:00', '2015-06-08 00:00', '2015-02-26 00:00', '2014-07-07 00:00', '2014-02-20 00:00', '2014-01-15 00:00', '2013-11-22 00:00', '2013-11-19 14:00', '2013-09-25 00:00', '2013-09-16 00:00', '2013-07-06 00:00', '2013-03-28 00:00', '2012-10-26 00:00', '2012-08-01 00:00', '2012-06-24 00:00', '2012-05-29 00:00', '2011-12-16 00:00', '2011-12-04 00:00', '2011-11-22 00:00', '2011-11-17 00:00', '2011-11-15 00:00', '2011-09-09 00:00', '2011-07-08 00:00', '2011-06-27 00:00', '2011-06-01 00:00', '2011-05-23 00:00', '2011-03-04 00:00', '2011-02-09 00:00', '2011-02-01 00:00', '2011-01-10 00:00', '2010-12-21 00:00', '2010-12-16 00:00', '2010-12-14 00:00', '2010-12-13 00:00', '2010-11-23 00:00', '2010-10-25 00:00', '2010-10-21 00:00', '2010-09-13 00:00', '2010-09-02 00:00', '2010-08-20 00:00', '2010-06-15 00:00', '2010-06-04 00:00', '2010-05-27 00:00', '2010-01-19 00:00', '2009-11-18 00:00', '2009-09-18 00:00', '2009-06-26 00:00', '2009-06-24 00:00', '2009-04-14 00:00', '2009-03-11 00:00', '2009-03-04 00:00', '2009-02-02 00:00', '2009-01-05 00:00', '2008-12-04 00:00', '2008-10-02 00:00', '2008-09-16 00:00', '2008-08-15 00:00', '2008-06-25 00:00', '2008-06-24 00:00', '2008-06-18 00:00', '2008-06-04 00:00', '2008-06-03 00:00', '2008-04-09 00:00', '2008-03-03 00:00', '2007-10-24 00:00', '2007-08-14 00:00', '2007-07-05 00:00', '2007-07-03 00:00', '2007-07-02 00:00', '2007-06-04 00:00', '2007-03-16 00:00', '2007-01-17 00:00', '2006-11-14 00:00', '2006-09-20 00:00', '2006-09-19 13:10', '2006-09-12 00:00', '2006-09-05 00:00', '2006-03-20 00:00', '2006-02-24 00:00', '2006-01-31 00:00', '2005-03-01 00:00', '2004-12-13 00:00', '2004-07-02 00:00', '2004-06-22 00:00', '2004-06-16 00:00', '2004-05-25 00:00', '2004-05-17 10:00', '2004-01-20 10:00', '2003-12-17 10:00',))
if mibBuilder.loadTexts: xfRadioLinkPtpTerminalMIB.setLastUpdated('202003170000Z')
if mibBuilder.loadTexts: xfRadioLinkPtpTerminalMIB.setOrganization('Ericsson AB')
class TermAdaptiveManualMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("disable", 2), ("enable", 3), ("enabledAsRequest", 4))

class TermModulation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("other", 1), ("cqpsk", 2), ("qam16", 3), ("qam128", 4), ("qam32", 5), ("qam64", 6), ("qam4", 7), ("qam8", 8), ("qam256", 9), ("qam512", 10), ("qam1024", 11))

class TermOutputPowerStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("rtpc", 2), ("atpc", 3), ("localControl", 4), ("ra1LocalControlRa2Rtpc", 5), ("ra1RtpcRa2LocalControl", 6))

class ChannelMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("ccdp", 2), ("accp", 3), ("acap", 4))

class TermRauSec(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("other", 0), ("sec2", 1), ("sec4", 2), ("sec5b", 3))

class TermAutoRemoveLoopEnable(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("enable", 2), ("disable", 3))

xfRadioLinkPtpTerminalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1))
xfRadioLinkPtpTerminalConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 2))
xfRLPtpTerminalTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1), )
if mibBuilder.loadTexts: xfRLPtpTerminalTable.setStatus('current')
xfRLPtpTerminalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entLogicalIndex"))
if mibBuilder.loadTexts: xfRLPtpTerminalEntry.setStatus('current')
xfTermId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermId.setStatus('current')
xfTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("rlMLE", 2), ("rlXfMLE", 3), ("rlXfMLTN", 4), ("rlXfMLStandalone", 5), ("rlXfMLTNPT", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermType.setStatus('current')
xfTermProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unprotected", 2), ("protectedHotStandby", 3), ("protectedWorkingStandby", 4), ("unProtectedSDC", 5), ("enhancedRLB", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermProtection.setStatus('current')
xfTermCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("other", 1), ("twoE1", 2), ("fourE1", 3), ("oneE2", 4), ("twoE2", 5), ("oneE3oneE1", 6), ("twoE3", 7), ("fourE3", 8), ("fourDS1", 9), ("eightDS1", 10), ("sixteenDS1", 11), ("seventeenDS1", 12), ("oneStm0", 13), ("oneStm1oneE1", 14), ("thirtytwoDS1", 15), ("oneStm1oneDS1", 16), ("oneStm1oneE1at50MHz", 17), ("twentytwoE1", 18), ("thirtyfiveE1", 19), ("fortysixE1", 20), ("seventyfiveE1", 21), ("oneStm1OneJ1", 22), ("sixtynineDS1", 23), ("eightyDS1", 24), ("oneStm1OneE1LH", 25), ("oneStm1OneDS1LH", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermCapacity.setStatus('current')
xfTermCapacityCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 5), Bits().clone(namedValues=NamedValues(("oneE1", 0), ("twoE1", 1), ("fourE1", 2), ("oneE2", 3), ("twoE2", 4), ("oneE3oneE1", 5), ("twoE3", 6), ("fourE3", 7), ("fourDS1", 8), ("eightDS1", 9), ("sixteenDS1", 10), ("seventeenDS1", 11), ("oneStm0", 12), ("oneStm1oneE1", 13), ("thirtytwoDS1", 14), ("oneStm1oneDS1", 15), ("oneStm1oneE1at50MHz", 16), ("twentytwoE1", 17), ("thirtyfiveE1", 18), ("fortysixE1", 19), ("seventyfiveE1", 20), ("oneStm1OneJ1", 21), ("sixtynineDS1", 22), ("eightyDS1", 23), ("oneStm1OneE1LH", 24), ("oneStm1OneDS1LH", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermCapacityCapability.setStatus('current')
xfTermModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 6), TermModulation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermModulation.setStatus('current')
xfTermModulationCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 7), Bits().clone(namedValues=NamedValues(("cqpsk", 0), ("qam16", 1), ("qam128", 2), ("qam32", 3), ("qam64", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermModulationCapability.setStatus('current')
xfTermRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("restore", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermRestore.setStatus('current')
xfTermAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 9), Bits().clone(namedValues=NamedValues(("termSeverity0", 0), ("termSeverity1", 1), ("termSeverity2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermAlarmSeverity.setStatus('current')
xfTermTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermTrapEnable.setStatus('current')
xfTermAsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("notAvailable", 1), ("aspX002", 2), ("aspX003", 3), ("aspX004", 4), ("aspX005", 5), ("aspX006", 6), ("aspX007", 7), ("aspX008", 8), ("aspX009", 9), ("aspX010", 10), ("aspX011", 11), ("aspX012", 12), ("aspX013", 13), ("aspX014", 14), ("aspX015", 15), ("aspX016", 16), ("aspX017", 17), ("aspX018", 18), ("aspX019", 19), ("aspX020", 20), ("aspX021", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermAsPort.setStatus('current')
xfTermRemoteIdCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermRemoteIdCheck.setStatus('current')
xfTermRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermRemoteId.setStatus('current')
xfTermPreset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("preset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermPreset.setStatus('current')
xfTermBerAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ber1e3", 2), ("ber1e4", 3), ("ber1e5", 4), ("ber1e6", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermBerAlarmThreshold.setStatus('current')
xfTermFadeNotificationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermFadeNotificationTimer.setStatus('current')
xfTermEquipmentProtectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermEquipmentProtectionIndex.setStatus('current')
xfTermSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermSysName.setStatus('current')
xfTermChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 19), ChannelMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermChannelMode.setStatus('current')
xfTermChannelModeCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 20), Bits().clone(namedValues=NamedValues(("ccdp", 0), ("accp", 1), ("acap", 2), ("ccdp16QAM", 3), ("ccdp64QAM", 4), ("ccdp128QAM", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermChannelModeCapability.setStatus('current')
xfTermTrafficAndDCN = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trafficAndDCN", 1), ("dcnOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermTrafficAndDCN.setStatus('current')
xfTermFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("version0", 2), ("version1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermFrameFormat.setStatus('current')
xfTermFrameFormatCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 23), Bits().clone(namedValues=NamedValues(("version0", 0), ("version1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermFrameFormatCapability.setStatus('current')
xfTermDCNRadioConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dcnRadio128kbps", 2), ("dcnRadio320kbpsDCCr", 3), ("dcnRadio320kbpsMSB", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermDCNRadioConfiguration.setStatus('current')
xfTermDCNRadioCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 25), Bits().clone(namedValues=NamedValues(("dcnRadio128kbps", 0), ("dcnRadio320kbpsDCCr", 1), ("dcnRadio320kbpsMSB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermDCNRadioCapability.setStatus('current')
xfTermDCNLineConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("transparent", 2), ("dcnLine192kbpsDCCr", 3), ("dcnLine192kbpsMSB", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermDCNLineConfiguration.setStatus('current')
xfTermDCNLineCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 27), Bits().clone(namedValues=NamedValues(("transparent", 0), ("dcnLine192kbpsDCCr", 1), ("dcnLine192kbpsMSB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermDCNLineCapability.setStatus('current')
xfTermFadeNotificationConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermFadeNotificationConfiguration.setStatus('current')
xfTermLineProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unProtected", 2), ("singleInterfaceLowSlot", 3), ("singleInterfaceHighSlot", 4), ("opticalSplitter", 5), ("equipmentAndLineProtection", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermLineProtection.setStatus('current')
xfRLPtpTerminalOutputPowerTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 2), )
if mibBuilder.loadTexts: xfRLPtpTerminalOutputPowerTable.setStatus('current')
xfRLPtpTerminalOutputPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entLogicalIndex"))
if mibBuilder.loadTexts: xfRLPtpTerminalOutputPowerEntry.setStatus('current')
xfTermOutputPowerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 2, 1, 1), TermOutputPowerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermOutputPowerOperStatus.setStatus('current')
xfTermOutputPowerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 2, 1, 2), TermOutputPowerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermOutputPowerAdminStatus.setStatus('current')
xfTermAtpcCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("noAtpcSupport", 2), ("doesNotExist", 3), ("atpcCapabilityUnknown", 4), ("supportsAtpc", 5), ("supportsAtpcFallback", 6), ("supportsAtpcFallbackTimer", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermAtpcCapability.setStatus('current')
xfRLPtpTerminalPerformanceTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 4), )
if mibBuilder.loadTexts: xfRLPtpTerminalPerformanceTable.setStatus('current')
xfRLPtpTerminalPerformanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPtpTerminalPerformanceEntry.setStatus('current')
xfTermTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermTimeElapsed.setStatus('current')
xfTermCurrentES = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermCurrentES.setStatus('current')
xfTermCurrentSES = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermCurrentSES.setStatus('current')
xfTermCurrentBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermCurrentBBE.setStatus('current')
xfTermCurrentUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermCurrentUAS.setStatus('current')
xfTermCurrentBB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermCurrentBB.setStatus('current')
xfTermPerfReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("performanceReset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermPerfReset.setStatus('current')
xfTermTimeElapsedEnRLBExt = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermTimeElapsedEnRLBExt.setStatus('current')
xfRLProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 5), )
if mibBuilder.loadTexts: xfRLProtectionTable.setStatus('current')
xfRLProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: xfRLProtectionEntry.setStatus('current')
xfRLProtectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("unprotected", 2), ("protectedHotStandby", 3), ("protectedWorkingStandby", 4), ("unProtectedSDC", 5), ("enhancedRLBProtected", 7), ("enhancedRLBExtended", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLProtectionMode.setStatus('current')
xfRLProtectionRau1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLProtectionRau1.setStatus('current')
xfRLProtectionRau2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLProtectionRau2.setStatus('current')
xfRLActiveTxRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("txRadio1", 1), ("txRadio2", 2), ("txRadio1andtxRadio2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLActiveTxRadio.setStatus('current')
xfRLSwitchOverReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLSwitchOverReset.setStatus('current')
xfRLSwitchRevertiveTx = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("txRadio1", 1), ("txRadio2", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLSwitchRevertiveTx.setStatus('current')
xfRLProtectionCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 5, 1, 7), Bits().clone(namedValues=NamedValues(("revertiveSwitching", 0), ("txSwitchOverConfiguration", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLProtectionCapability.setStatus('current')
xfRLTxSwitchOverConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLTxSwitchOverConfiguration.setStatus('current')
xfRLLineProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 6), )
if mibBuilder.loadTexts: xfRLLineProtectionTable.setStatus('current')
xfRLLineProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLLineProtectionEntry.setStatus('current')
xfRLLineProtectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 6, 1, 1), Bits().clone(namedValues=NamedValues(("hitlessPhase0", 0), ("hitlessPhase1", 1), ("hitlessPhase2", 2), ("txSwitchover0", 3), ("txSwitchover1", 4), ("txSwitchover2", 5), ("remoteTxSwitchOver0", 6), ("remoteTxSwitchOver1", 7), ("remoteTxSwitchOver2", 8), ("rfInputThresholdProtection0", 9), ("rfInputThresholdProtection1", 10), ("rfInputThresholdProtection2", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLLineProtectionStatus.setStatus('current')
xfRLLineProtectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unProtected", 2), ("singleInterfaceLowSlot", 3), ("singleInterfaceHighSlot", 4), ("opticalSplitter", 5), ("equipmentAndLineProtection", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLLineProtectionMode.setStatus('current')
xfRADIORSTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 7), )
if mibBuilder.loadTexts: xfRADIORSTable.setStatus('current')
xfRADIORSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRADIORSEntry.setStatus('current')
xfRADIORSAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 7, 1, 1), Bits().clone(namedValues=NamedValues(("timRadioSide0", 0), ("timRadioSide1", 1), ("timRadioSide2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRADIORSAlarms.setStatus('current')
xfRADIORSPerformanceTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 8), )
if mibBuilder.loadTexts: xfRADIORSPerformanceTable.setStatus('current')
xfRADIORSPerformanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRADIORSPerformanceEntry.setStatus('current')
xfRADIORSPerformanceAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 8, 1, 1), Bits().clone(namedValues=NamedValues(("b1UnavailablePeriod0", 0), ("b1UnavailablePeriod1", 1), ("b1UnavailablePeriod2", 2), ("b1Es15m0", 3), ("b1Es15m1", 4), ("b1Es15m2", 5), ("b1Ses15m0", 6), ("b1Ses15m1", 7), ("b1Ses15m2", 8), ("b1Bbe15m0", 9), ("b1Bbe15m1", 10), ("b1Bbe15m2", 11), ("b1Es24h0", 12), ("b1Es24h1", 13), ("b1Es24h2", 14), ("b1Ses24h0", 15), ("b1Ses24h1", 16), ("b1Ses24h2", 17), ("b1Bbe24h0", 18), ("b1Bbe24h1", 19), ("b1Bbe24h2", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRADIORSPerformanceAlarms.setStatus('current')
xfRLPMConfigTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9), )
if mibBuilder.loadTexts: xfRLPMConfigTable.setStatus('current')
xfRLPMConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMConfigEntry.setStatus('current')
xfPMSetThreshold15mESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold15mESs.setStatus('current')
xfPMSetThreshold15mSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold15mSESs.setStatus('current')
xfPMSetThreshold15mBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold15mBBEs.setStatus('current')
xfPMResetThreshold15mESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMResetThreshold15mESs.setStatus('current')
xfPMResetThreshold15mSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMResetThreshold15mSESs.setStatus('current')
xfPMResetThreshold15mBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMResetThreshold15mBBEs.setStatus('current')
xfPMSetThreshold24hESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold24hESs.setStatus('current')
xfPMSetThreshold24hSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold24hSESs.setStatus('current')
xfPMSetThreshold24hBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold24hBBEs.setStatus('current')
xfPMView = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pmEnable", 1), ("pmDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMView.setStatus('current')
xfPMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 11), Bits().clone(namedValues=NamedValues(("unavailablePeriod0", 0), ("unavailablePeriod1", 1), ("unavailablePeriod2", 2), ("es15m0", 3), ("es15m1", 4), ("es15m2", 5), ("ses15m0", 6), ("ses15m1", 7), ("ses15m2", 8), ("bbe15m0", 9), ("bbe15m1", 10), ("bbe15m2", 11), ("es24h0", 12), ("es24h1", 13), ("es24h2", 14), ("ses24h0", 15), ("ses24h1", 16), ("ses24h2", 17), ("bbe24h0", 18), ("bbe24h1", 19), ("bbe24h2", 20), ("rlts1Counter15m0", 21), ("rlts1Counter15m1", 22), ("rlts1Counter15m2", 23), ("rlts2Counter15m0", 24), ("rlts2Counter15m1", 25), ("rlts2Counter15m2", 26), ("rltmCounter15m0", 27), ("rltmCounter15m1", 28), ("rltmCounter15m2", 29), ("tlts1Counter15m0", 30), ("tlts1Counter15m1", 31), ("tlts1Counter15m2", 32), ("tltmCounter15m0", 33), ("tltmCounter15m1", 34), ("tltmCounter15m2", 35), ("rlts1Counter24h0", 36), ("rlts1Counter24h1", 37), ("rlts1Counter24h2", 38), ("rlts2Counter24h0", 39), ("rlts2Counter24h1", 40), ("rlts2Counter24h2", 41), ("rltmCounter24h0", 42), ("rltmCounter24h1", 43), ("rltmCounter24h2", 44), ("tlts1Counter24h0", 45), ("tlts1Counter24h1", 46), ("tlts1Counter24h2", 47), ("tltmCounter24h0", 48), ("tltmCounter24h1", 49), ("tltmCounter24h2", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMStatus.setStatus('current')
xfPMRLTS1Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, -201)).clone(-999)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMRLTS1Threshold.setStatus('current')
xfPMSetThreshold15mRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold15mRLTS1.setStatus('current')
xfPMResetThreshold15mRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMResetThreshold15mRLTS1.setStatus('current')
xfPMRLTS2Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-998, -200)).clone(-998)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMRLTS2Threshold.setStatus('current')
xfPMSetThreshold15mRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold15mRLTS2.setStatus('current')
xfPMResetThreshold15mRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMResetThreshold15mRLTS2.setStatus('current')
xfPMSetThreshold15mRLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 800)).clone(800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold15mRLTM.setStatus('current')
xfPMResetThreshold15mRLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 800)).clone(790)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMResetThreshold15mRLTM.setStatus('current')
xfPMTLTS1Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 45)).clone(45)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMTLTS1Threshold.setStatus('current')
xfPMSetThreshold15mTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold15mTLTS1.setStatus('current')
xfPMResetThreshold15mTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMResetThreshold15mTLTS1.setStatus('current')
xfPMSetThreshold15mTLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 145)).clone(145)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold15mTLTM.setStatus('current')
xfPMResetThreshold15mTLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 145)).clone(144)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMResetThreshold15mTLTM.setStatus('current')
xfPMSetThreshold24hRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold24hRLTS1.setStatus('current')
xfPMSetThreshold24hRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold24hRLTS2.setStatus('current')
xfPMSetThreshold24hRLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 800)).clone(800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold24hRLTM.setStatus('current')
xfPMSetThreshold24hTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold24hTLTS1.setStatus('current')
xfPMSetThreshold24hTLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 145)).clone(145)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold24hTLTM.setStatus('current')
xfRLPMCurrent24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10), )
if mibBuilder.loadTexts: xfRLPMCurrent24hTable.setStatus('current')
xfRLPMCurrent24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMCurrent24hEntry.setStatus('current')
xfPMCurrent24hTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hTimeElapsed.setStatus('current')
xfPMCurrent24hESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hESs.setStatus('current')
xfPMCurrent24hSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hSESs.setStatus('current')
xfPMCurrent24hBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 4), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hBBEs.setStatus('current')
xfPMCurrent24hUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hUASs.setStatus('current')
xfPMCurrent24hBBs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 6), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hBBs.setStatus('current')
xfPMCurrent24hRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hRLTS1.setStatus('current')
xfPMCurrent24hRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hRLTS2.setStatus('current')
xfPMCurrent24hRLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hRLMin.setStatus('current')
xfPMCurrent24hRLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hRLMax.setStatus('current')
xfPMCurrent24hTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hTLTS1.setStatus('current')
xfPMCurrent24hTLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hTLMin.setStatus('current')
xfPMCurrent24hTLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hTLMax.setStatus('current')
xfPMCurrent24hMSEMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hMSEMin.setStatus('current')
xfPMCurrent24hMSEMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hMSEMax.setStatus('current')
xfPMCurrent24hXPIMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hXPIMin.setStatus('current')
xfPMCurrent24hXPIMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hXPIMax.setStatus('current')
xfPMCurrent24hESR = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 18), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hESR.setStatus('current')
xfPMCurrent24hSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 19), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hSESR.setStatus('current')
xfPMCurrent24hBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 20), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hBBER.setStatus('current')
xfRLPMInterval24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11), )
if mibBuilder.loadTexts: xfRLPMInterval24hTable.setStatus('current')
xfRLPMInterval24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMInterval24hEntry.setStatus('current')
xfPMInterval24hESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hESs.setStatus('current')
xfPMInterval24hSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hSESs.setStatus('current')
xfPMInterval24hBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 3), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hBBEs.setStatus('current')
xfPMInterval24hUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hUASs.setStatus('current')
xfPMInterval24hBBs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 5), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hBBs.setStatus('current')
xfPMInterval24hValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hValidData.setStatus('current')
xfPMInterval24hRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hRLTS1.setStatus('current')
xfPMInterval24hRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hRLTS2.setStatus('current')
xfPMInterval24hRLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hRLMin.setStatus('current')
xfPMInterval24hRLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hRLMax.setStatus('current')
xfPMInterval24hTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hTLTS1.setStatus('current')
xfPMInterval24hTLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hTLMin.setStatus('current')
xfPMInterval24hTLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hTLMax.setStatus('current')
xfPMInterval24hMSEMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hMSEMin.setStatus('current')
xfPMInterval24hMSEMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hMSEMax.setStatus('current')
xfPMInterval24hXPIMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hXPIMin.setStatus('current')
xfPMInterval24hXPIMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hXPIMax.setStatus('current')
xfRLPMCurrent15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12), )
if mibBuilder.loadTexts: xfRLPMCurrent15mTable.setStatus('current')
xfRLPMCurrent15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMCurrent15mEntry.setStatus('current')
xfPMCurrent15mElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mElapsedTime.setStatus('current')
xfPMCurrent15mESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mESs.setStatus('current')
xfPMCurrent15mSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mSESs.setStatus('current')
xfPMCurrent15mBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mBBEs.setStatus('current')
xfPMCurrent15mUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mUASs.setStatus('current')
xfPMCurrent15mBBs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mBBs.setStatus('current')
xfPMCurrent15mRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mRLTS1.setStatus('current')
xfPMCurrent15mRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mRLTS2.setStatus('current')
xfPMCurrent15mRLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mRLMin.setStatus('current')
xfPMCurrent15mRLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mRLMax.setStatus('current')
xfPMCurrent15mTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mTLTS1.setStatus('current')
xfPMCurrent15mTLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mTLMin.setStatus('current')
xfPMCurrent15mTLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mTLMax.setStatus('current')
xfPMCurrent15mMSEMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mMSEMin.setStatus('current')
xfPMCurrent15mMSEMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mMSEMax.setStatus('current')
xfPMCurrent15mXPIMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mXPIMin.setStatus('current')
xfPMCurrent15mXPIMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mXPIMax.setStatus('current')
xfPMCurrent15mESR = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 18), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mESR.setStatus('current')
xfPMCurrent15mSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 19), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mSESR.setStatus('current')
xfPMCurrent15mBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 20), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mBBER.setStatus('current')
xfRLPMInterval15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13), )
if mibBuilder.loadTexts: xfRLPMInterval15mTable.setStatus('current')
xfRLPMInterval15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mIntervalNumber"))
if mibBuilder.loadTexts: xfRLPMInterval15mEntry.setStatus('current')
xfPMInterval15mIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mIntervalNumber.setStatus('current')
xfPMInterval15mESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mESs.setStatus('current')
xfPMInterval15mSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mSESs.setStatus('current')
xfPMInterval15mBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mBBEs.setStatus('current')
xfPMInterval15mUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mUASs.setStatus('current')
xfPMInterval15mBBs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mBBs.setStatus('current')
xfPMInterval15mValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mValidData.setStatus('current')
xfPMInterval15mRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mRLTS1.setStatus('current')
xfPMInterval15mRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mRLTS2.setStatus('current')
xfPMInterval15mRLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mRLMin.setStatus('current')
xfPMInterval15mRLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mRLMax.setStatus('current')
xfPMInterval15mTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mTLTS1.setStatus('current')
xfPMInterval15mTLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mTLMin.setStatus('current')
xfPMInterval15mTLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mTLMax.setStatus('current')
xfPMInterval15mMSEMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mMSEMin.setStatus('current')
xfPMInterval15mMSEMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mMSEMax.setStatus('current')
xfPMInterval15mXPIMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mXPIMin.setStatus('current')
xfPMInterval15mXPIMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mXPIMax.setStatus('current')
xfRLPtpTerminalXTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14), )
if mibBuilder.loadTexts: xfRLPtpTerminalXTable.setStatus('current')
xfRLPtpTerminalXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1), ).setIndexNames((0, "ENTITY-MIB", "entLogicalIndex"))
if mibBuilder.loadTexts: xfRLPtpTerminalXEntry.setStatus('current')
xfTermInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("pdhToTdmHier", 2), ("pdhToTdmFlat", 3), ("pdhToTdmFlatAndBitpipeToPtp", 4), ("pdhToTdmAndSDHToSFP", 5), ("pdhToTdmAndSDHToPtp", 6), ("pdhToTdmAndSDHToSFPHAndSDHToPtP", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermInterfaces.setStatus('current')
xfTermInterfacesCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 2), Bits().clone(namedValues=NamedValues(("pdhToTdmHier", 0), ("pdhToTdmFlat", 1), ("pdhToTdmFlatAndBitpipeToPtp", 2), ("pdhToTdmAndSDHToSFP", 3), ("pdhToTdmAndSDHToPtp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermInterfacesCapability.setStatus('current')
xfTermChannelModeOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 3), ChannelMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermChannelModeOperStatus.setStatus('current')
xfTermXPICRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("xPicRestore", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermXPICRestore.setStatus('current')
xfTermTribCapacityActual = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermTribCapacityActual.setStatus('current')
xfTermTribCapacityDesired = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermTribCapacityDesired.setStatus('current')
xfTermBitPipeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermBitPipeCapacity.setStatus('current')
xfTermRowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermRowIndex.setStatus('current')
xfTermCapabilitiesLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermCapabilitiesLastChange.setStatus('current')
xfTermActualRowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermActualRowIndex.setStatus('current')
xfTermMaxRowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermMaxRowIndex.setStatus('current')
xfTermAdaptiveManualRowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermAdaptiveManualRowIndex.setStatus('current')
xfTermAdaptiveManualMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 13), TermAdaptiveManualMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermAdaptiveManualMode.setStatus('current')
xfTermSpectrumEfficiencyClass = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("sec2", 2), ("sec3", 3), ("sec4L", 4), ("sec4H", 5), ("sec5A", 6), ("sec5B", 7), ("sec6A", 8), ("sec6B", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermSpectrumEfficiencyClass.setStatus('current')
xfTermSpectrumEfficiencyClassCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 15), Bits().clone(namedValues=NamedValues(("sec2", 0), ("sec3", 1), ("sec4L", 2), ("sec4H", 3), ("sec5A", 4), ("sec5B", 5), ("sec6A", 6), ("sec6B", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermSpectrumEfficiencyClassCapability.setStatus('current')
xfTermIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermIpAddress.setStatus('current')
xfTermProtectionCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 17), Bits().clone(namedValues=NamedValues(("unprotected", 0), ("protectedHotStandby", 1), ("protectedWorkingStandby", 2), ("unprotectedSD", 3), ("nplus1", 4), ("enhancedRLB", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermProtectionCapability.setStatus('current')
xfTermLineProtectionCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 18), Bits().clone(namedValues=NamedValues(("unprotected", 0), ("singleInterfaceLowSlot", 1), ("singleInterfaceHighSlot", 2), ("opticalSplitter", 3), ("equipmentAndLineProtection", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermLineProtectionCapability.setStatus('current')
xfTermTribAllocationActual = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 19), Bits().clone(namedValues=NamedValues(("firstE1", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermTribAllocationActual.setStatus('current')
xfTermTribAllocationDesired = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 20), Bits().clone(namedValues=NamedValues(("firstE1", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermTribAllocationDesired.setStatus('current')
xfTermAutoRemoveLoopEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 21), TermAutoRemoveLoopEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermAutoRemoveLoopEnable.setStatus('current')
xfTermCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 22), Bits().clone(namedValues=NamedValues(("adaptiveManualTx", 0), ("adaptiveManualRx", 1), ("fragmentedTributaries", 2), ("terminalCapacityLicense", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermCapability.setStatus('current')
xfTermCapacityLicense = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("vr0", 0), ("vr10", 1), ("vr25", 2), ("vr50", 3), ("vr100", 4), ("vr15", 5), ("vr30", 6), ("vr60", 7), ("vr125", 8), ("vr200", 9), ("vr350", 10), ("vr4", 11), ("vr500", 12), ("vr150", 13), ("vr250", 14), ("vr300", 15), ("vr400", 16), ("vr450", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermCapacityLicense.setStatus('current')
xfTermFadingRates = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("fr50", 2), ("fr100", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermFadingRates.setStatus('current')
xfTermFadingRatesCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 25), Bits().clone(namedValues=NamedValues(("fr50", 0), ("fr100", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermFadingRatesCapability.setStatus('current')
xfTermConfiguredBitPipeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermConfiguredBitPipeCapacity.setStatus('current')
xfTermTribCapacityConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermTribCapacityConfigured.setStatus('current')
xfTermPacketMaxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermPacketMaxCapacity.setStatus('current')
xfTermPacketMinCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermPacketMinCapacity.setStatus('current')
xfRlPtpTerminalCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15), )
if mibBuilder.loadTexts: xfRlPtpTerminalCapabilityTable.setStatus('current')
xfRlPtpTerminalCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15, 1), ).setIndexNames((0, "ENTITY-MIB", "entLogicalIndex"), (0, "XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermRowIndex"))
if mibBuilder.loadTexts: xfRlPtpTerminalCapabilityEntry.setStatus('current')
xfTermChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("chspUnknown", 0), ("chsp7MHz", 1), ("chsp14MHz", 2), ("chsp20MHz", 3), ("chsp28MHz", 4), ("chsp30MHz", 5), ("chsp40MHz", 6), ("chsp50MHz", 7), ("chsp56MHz", 8), ("chsp10MHz", 9), ("chsp3500kHz", 10), ("chsp60MHz", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermChannelSpacing.setStatus('current')
xfTermChannelModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15, 1, 2), TermModulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermChannelModulation.setStatus('current')
xfTermMaxTribCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermMaxTribCapacity.setStatus('current')
xfTermDCNCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermDCNCapacity.setStatus('current')
xfTermValidRow = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("vr0", 0), ("vr10", 1), ("vr25", 2), ("vr50", 3), ("vr100", 4), ("vr15", 5), ("vr30", 6), ("vr60", 7), ("vr125", 8), ("vr200", 9), ("vr350", 10), ("vr4", 11), ("vr500", 12), ("vr150", 13), ("vr250", 14), ("vr300", 15), ("vr400", 16), ("vr450", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermValidRow.setStatus('current')
xfTermMaxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermMaxCapacity.setStatus('current')
xfTermSpectrumEfficiencyClassObsolete = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15, 1, 7), TermRauSec()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermSpectrumEfficiencyClassObsolete.setStatus('obsolete')
xfTermFrameFormatType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("fftOther", 0), ("fftStatic", 1), ("fftAdmod", 2), ("fftXpic", 3), ("fftXpicAdmod", 4), ("fftLegacy", 5), ("fftStaticLH", 6), ("fftAdmodLH", 7), ("fftXpicLH", 8), ("fftXpicAdmodLH", 9), ("fftAdmodStatic", 10), ("fftXpicAdmodStatic", 11), ("fftAdmodStaticLH", 12), ("fftXpicAdmodStaticLH", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermFrameFormatType.setStatus('current')
xfTermFrameFormatRev = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("ffOther", 1), ("ffVersion0", 2), ("ffVersion1", 3), ("ffVersion2", 4), ("ffVersion3", 5), ("ffVersion4", 6), ("ffVersion5", 7), ("ffVersion6", 8), ("ffVersion7", 9), ("ffVersion8", 10), ("ffVersion9", 11), ("ffVersion10", 12), ("ffVersion11", 13), ("ffVersion12", 14), ("ffVersion13", 15), ("ffVersion14", 16), ("ffVersion15", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermFrameFormatRev.setStatus('current')
xfTermBerAlarmThresholdCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15, 1, 10), Bits().clone(namedValues=NamedValues(("berThrCap1e3", 0), ("berThrCap1e4", 1), ("berThrCap1e5", 2), ("berThrCap1e6", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermBerAlarmThresholdCapability.setStatus('current')
xfRLPMAMConfigTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 16), )
if mibBuilder.loadTexts: xfRLPMAMConfigTable.setStatus('current')
xfRLPMAMConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMAMConfigEntry.setStatus('current')
xfPMAMSetThreshold15m = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 16, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMAMSetThreshold15m.setStatus('current')
xfPMAMSetThreshold24h = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 16, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMAMSetThreshold24h.setStatus('current')
xfPMAMResetThreshold15m = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 16, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMAMResetThreshold15m.setStatus('current')
xfPMAMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 16, 1, 4), Bits().clone(namedValues=NamedValues(("am15m1", 0), ("am15m2", 1), ("am15m3", 2), ("am24h1", 3), ("am24h2", 4), ("am24h3", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMStatus.setStatus('current')
xfPMAMValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 16, 1, 5), Bits().clone(namedValues=NamedValues(("valid15m4QAM", 0), ("valid15m8QAM", 1), ("valid15m16QAM", 2), ("valid15m32QAM", 3), ("valid15m64QAM", 4), ("valid15m128QAM", 5), ("valid15m256QAM", 6), ("valid15m512QAM", 7), ("valid15m1024QAM", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMValidData.setStatus('current')
xfRLPMAMCurrent24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17), )
if mibBuilder.loadTexts: xfRLPMAMCurrent24hTable.setStatus('current')
xfRLPMAMCurrent24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMAMCurrent24hEntry.setStatus('current')
xfPMAMCurrent24h4QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h4QAM.setStatus('current')
xfPMAMCurrent24h8QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h8QAM.setStatus('current')
xfPMAMCurrent24h16QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h16QAM.setStatus('current')
xfPMAMCurrent24h32QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h32QAM.setStatus('current')
xfPMAMCurrent24h64QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h64QAM.setStatus('current')
xfPMAMCurrent24h128QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h128QAM.setStatus('current')
xfPMAMCurrent24h256QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h256QAM.setStatus('current')
xfPMAMCurrent24h512QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h512QAM.setStatus('current')
xfPMAMCurrent24h1024QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h1024QAM.setStatus('current')
xfPMAMCurrent24h4QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h4QAMEnRLB.setStatus('current')
xfPMAMCurrent24h8QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h8QAMEnRLB.setStatus('current')
xfPMAMCurrent24h16QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 12), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h16QAMEnRLB.setStatus('current')
xfPMAMCurrent24h32QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 13), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h32QAMEnRLB.setStatus('current')
xfPMAMCurrent24h64QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 14), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h64QAMEnRLB.setStatus('current')
xfPMAMCurrent24h128QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 15), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h128QAMEnRLB.setStatus('current')
xfPMAMCurrent24h256QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 16), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h256QAMEnRLB.setStatus('current')
xfPMAMCurrent24h512QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 17), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h512QAMEnRLB.setStatus('current')
xfPMAMCurrent24h1024QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 18), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h1024QAMEnRLB.setStatus('current')
xfRLPMAMInterval24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18), )
if mibBuilder.loadTexts: xfRLPMAMInterval24hTable.setStatus('current')
xfRLPMAMInterval24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMAMInterval24hEntry.setStatus('current')
xfPMAMInterval24h4QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h4QAM.setStatus('current')
xfPMAMInterval24h8QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h8QAM.setStatus('current')
xfPMAMInterval24h16QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h16QAM.setStatus('current')
xfPMAMInterval24h32QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h32QAM.setStatus('current')
xfPMAMInterval24h64QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h64QAM.setStatus('current')
xfPMAMInterval24h128QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h128QAM.setStatus('current')
xfPMAMInterval24h256QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h256QAM.setStatus('current')
xfPMAMInterval24h512QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h512QAM.setStatus('current')
xfPMAMInterval24hValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24hValidData.setStatus('current')
xfPMAMInterval24h1024QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h1024QAM.setStatus('current')
xfPMAMInterval24h4QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h4QAMEnRLB.setStatus('current')
xfPMAMInterval24h8QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h8QAMEnRLB.setStatus('current')
xfPMAMInterval24h16QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h16QAMEnRLB.setStatus('current')
xfPMAMInterval24h32QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h32QAMEnRLB.setStatus('current')
xfPMAMInterval24h64QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h64QAMEnRLB.setStatus('current')
xfPMAMInterval24h128QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 16), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h128QAMEnRLB.setStatus('current')
xfPMAMInterval24h256QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 17), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h256QAMEnRLB.setStatus('current')
xfPMAMInterval24h512QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 18), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h512QAMEnRLB.setStatus('current')
xfPMAMInterval24h1024QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 19), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h1024QAMEnRLB.setStatus('current')
xfRLPMAMCurrent15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19), )
if mibBuilder.loadTexts: xfRLPMAMCurrent15mTable.setStatus('current')
xfRLPMAMCurrent15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMAMCurrent15mEntry.setStatus('current')
xfPMAMCurrent15m4QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m4QAM.setStatus('current')
xfPMAMCurrent15m8QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m8QAM.setStatus('current')
xfPMAMCurrent15m16QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m16QAM.setStatus('current')
xfPMAMCurrent15m32QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m32QAM.setStatus('current')
xfPMAMCurrent15m64QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m64QAM.setStatus('current')
xfPMAMCurrent15m128QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m128QAM.setStatus('current')
xfPMAMCurrent15m256QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m256QAM.setStatus('current')
xfPMAMCurrent15m512QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m512QAM.setStatus('current')
xfPMAMCurrent15m1024QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m1024QAM.setStatus('current')
xfPMAMCurrent15m4QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m4QAMEnRLB.setStatus('current')
xfPMAMCurrent15m8QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m8QAMEnRLB.setStatus('current')
xfPMAMCurrent15m16QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 12), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m16QAMEnRLB.setStatus('current')
xfPMAMCurrent15m32QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 13), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m32QAMEnRLB.setStatus('current')
xfPMAMCurrent15m64QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 14), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m64QAMEnRLB.setStatus('current')
xfPMAMCurrent15m128QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 15), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m128QAMEnRLB.setStatus('current')
xfPMAMCurrent15m256QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 16), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m256QAMEnRLB.setStatus('current')
xfPMAMCurrent15m512QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 17), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m512QAMEnRLB.setStatus('current')
xfPMAMCurrent15m1024QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 18), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m1024QAMEnRLB.setStatus('current')
xfRLPMAMInterval15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20), )
if mibBuilder.loadTexts: xfRLPMAMInterval15mTable.setStatus('current')
xfRLPMAMInterval15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15mIntervalNumber"))
if mibBuilder.loadTexts: xfRLPMAMInterval15mEntry.setStatus('current')
xfPMAMInterval15mIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15mIntervalNumber.setStatus('current')
xfPMAMInterval15m4QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m4QAM.setStatus('current')
xfPMAMInterval15m8QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m8QAM.setStatus('current')
xfPMAMInterval15m16QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m16QAM.setStatus('current')
xfPMAMInterval15m32QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m32QAM.setStatus('current')
xfPMAMInterval15m64QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m64QAM.setStatus('current')
xfPMAMInterval15m128QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m128QAM.setStatus('current')
xfPMAMInterval15m256QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m256QAM.setStatus('current')
xfPMAMInterval15m512QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m512QAM.setStatus('current')
xfPMAMInterval15mValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15mValidData.setStatus('current')
xfPMAMInterval15m1024QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m1024QAM.setStatus('current')
xfPMAMInterval15m4QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m4QAMEnRLB.setStatus('current')
xfPMAMInterval15m8QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m8QAMEnRLB.setStatus('current')
xfPMAMInterval15m16QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m16QAMEnRLB.setStatus('current')
xfPMAMInterval15m32QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m32QAMEnRLB.setStatus('current')
xfPMAMInterval15m64QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 16), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m64QAMEnRLB.setStatus('current')
xfPMAMInterval15m128QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 17), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m128QAMEnRLB.setStatus('current')
xfPMAMInterval15m256QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 18), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m256QAMEnRLB.setStatus('current')
xfPMAMInterval15m512QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 19), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m512QAMEnRLB.setStatus('current')
xfPMAMInterval15m1024QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 20), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m1024QAMEnRLB.setStatus('current')
xfRLPtpTerminalCapacityLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 21), )
if mibBuilder.loadTexts: xfRLPtpTerminalCapacityLicenseTable.setStatus('current')
xfRLPtpTerminalCapacityLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 21, 1), ).setIndexNames((0, "ENTITY-MIB", "entLogicalIndex"), (0, "XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermRowIndex"))
if mibBuilder.loadTexts: xfRLPtpTerminalCapacityLicenseEntry.setStatus('current')
xfTermCapacityLicenseRange = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("vr0", 0), ("vr10", 1), ("vr25", 2), ("vr50", 3), ("vr100", 4), ("vr15", 5), ("vr30", 6), ("vr60", 7), ("vr125", 8), ("vr200", 9), ("vr350", 10), ("vr4", 11), ("vr500", 12), ("vr150", 13), ("vr250", 14), ("vr300", 15), ("vr400", 16), ("vr450", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermCapacityLicenseRange.setStatus('current')
xfTermMaxCapacityRange = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermMaxCapacityRange.setStatus('current')
xfTermMaxTribCapacityRange = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermMaxTribCapacityRange.setStatus('current')
xfRLPMSDCGainCurrent15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 22), )
if mibBuilder.loadTexts: xfRLPMSDCGainCurrent15mTable.setStatus('current')
xfRLPMSDCGainCurrent15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 22, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMSDCGainCurrent15mEntry.setStatus('current')
xfPMSDCGainCurrent15m0005dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 22, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent15m0005dB.setStatus('current')
xfPMSDCGainCurrent15m0510dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 22, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent15m0510dB.setStatus('current')
xfPMSDCGainCurrent15m1015dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 22, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent15m1015dB.setStatus('current')
xfPMSDCGainCurrent15m1520dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 22, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent15m1520dB.setStatus('current')
xfPMSDCGainCurrent15m2025dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 22, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent15m2025dB.setStatus('current')
xfPMSDCGainCurrent15m2530dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 22, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent15m2530dB.setStatus('current')
xfRLPMSDCGainInterval15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 23), )
if mibBuilder.loadTexts: xfRLPMSDCGainInterval15mTable.setStatus('current')
xfRLPMSDCGainInterval15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 23, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval15mIntervalNumber"))
if mibBuilder.loadTexts: xfRLPMSDCGainInterval15mEntry.setStatus('current')
xfPMSDCGainInterval15mIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval15mIntervalNumber.setStatus('current')
xfPMSDCGainInterval15m0005dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 23, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval15m0005dB.setStatus('current')
xfPMSDCGainInterval15m0510dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 23, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval15m0510dB.setStatus('current')
xfPMSDCGainInterval15m1015dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 23, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval15m1015dB.setStatus('current')
xfPMSDCGainInterval15m1520dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 23, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval15m1520dB.setStatus('current')
xfPMSDCGainInterval15m2025dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 23, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval15m2025dB.setStatus('current')
xfPMSDCGainInterval15m2530dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 23, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval15m2530dB.setStatus('current')
xfRLPMSDCGainCurrent24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 24), )
if mibBuilder.loadTexts: xfRLPMSDCGainCurrent24hTable.setStatus('current')
xfRLPMSDCGainCurrent24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 24, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMSDCGainCurrent24hEntry.setStatus('current')
xfPMSDCGainCurrent24h0005dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 24, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent24h0005dB.setStatus('current')
xfPMSDCGainCurrent24h0510dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 24, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent24h0510dB.setStatus('current')
xfPMSDCGainCurrent24h1015dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 24, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent24h1015dB.setStatus('current')
xfPMSDCGainCurrent24h1520dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 24, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent24h1520dB.setStatus('current')
xfPMSDCGainCurrent24h2025dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 24, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent24h2025dB.setStatus('current')
xfPMSDCGainCurrent24h2530dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 24, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent24h2530dB.setStatus('current')
xfRLPMSDCGainInterval24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 25), )
if mibBuilder.loadTexts: xfRLPMSDCGainInterval24hTable.setStatus('current')
xfRLPMSDCGainInterval24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 25, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMSDCGainInterval24hEntry.setStatus('current')
xfPMSDCGainInterval24h0005dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 25, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval24h0005dB.setStatus('current')
xfPMSDCGainInterval24h0510dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 25, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval24h0510dB.setStatus('current')
xfPMSDCGainInterval24h1015dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 25, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval24h1015dB.setStatus('current')
xfPMSDCGainInterval24h1520dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 25, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval24h1520dB.setStatus('current')
xfPMSDCGainInterval24h2025dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 25, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval24h2025dB.setStatus('current')
xfPMSDCGainInterval24h2530dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 25, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval24h2530dB.setStatus('current')
xfRLPMSDCGainConfigTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 26), )
if mibBuilder.loadTexts: xfRLPMSDCGainConfigTable.setStatus('current')
xfRLPMSDCGainConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 26, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMSDCGainConfigEntry.setStatus('current')
xfPMSDCGainSetThreshold15m = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 26, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSDCGainSetThreshold15m.setStatus('current')
xfPMSDCGainSetThreshold24h = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 26, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSDCGainSetThreshold24h.setStatus('current')
xfPMSDCGainResetThreshold15m = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 26, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSDCGainResetThreshold15m.setStatus('current')
xfPMSDCGainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 26, 1, 4), Bits().clone(namedValues=NamedValues(("sdcGain15m", 0), ("sdcGain24h", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainStatus.setStatus('current')
xfRLExtRFPMConfigTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27), )
if mibBuilder.loadTexts: xfRLExtRFPMConfigTable.setStatus('current')
xfRLExtRFPMConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLExtRFPMConfigEntry.setStatus('current')
xfExtRFPMRLTS1Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, -201)).clone(-999)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMRLTS1Threshold.setStatus('current')
xfExtRFPMSetThreshold15mRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMSetThreshold15mRLTS1.setStatus('current')
xfExtRFPMResetThreshold15mRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMResetThreshold15mRLTS1.setStatus('current')
xfExtRFPMRLTS2Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-998, -200)).clone(-998)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMRLTS2Threshold.setStatus('current')
xfExtRFPMSetThreshold15mRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMSetThreshold15mRLTS2.setStatus('current')
xfExtRFPMResetThreshold15mRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMResetThreshold15mRLTS2.setStatus('current')
xfExtRFPMSetThreshold15mRLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 800)).clone(800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMSetThreshold15mRLTM.setStatus('current')
xfExtRFPMResetThreshold15mRLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 800)).clone(790)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMResetThreshold15mRLTM.setStatus('current')
xfExtRFPMTLTS1Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 45)).clone(45)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMTLTS1Threshold.setStatus('current')
xfExtRFPMSetThreshold15mTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMSetThreshold15mTLTS1.setStatus('current')
xfExtRFPMResetThreshold15mTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMResetThreshold15mTLTS1.setStatus('current')
xfExtRFPMSetThreshold15mTLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 145)).clone(145)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMSetThreshold15mTLTM.setStatus('current')
xfExtRFPMResetThreshold15mTLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 145)).clone(144)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMResetThreshold15mTLTM.setStatus('current')
xfExtRFPMSetThreshold24hRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMSetThreshold24hRLTS1.setStatus('current')
xfExtRFPMSetThreshold24hRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMSetThreshold24hRLTS2.setStatus('current')
xfExtRFPMSetThreshold24hRLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 800)).clone(800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMSetThreshold24hRLTM.setStatus('current')
xfExtRFPMSetThreshold24hTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMSetThreshold24hTLTS1.setStatus('current')
xfExtRFPMSetThreshold24hTLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 145)).clone(145)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMSetThreshold24hTLTM.setStatus('current')
xfExtRFPMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 19), Bits().clone(namedValues=NamedValues(("rlts1Counter15m0", 0), ("rlts1Counter15m1", 1), ("rlts1Counter15m2", 2), ("rlts2Counter15m0", 3), ("rlts2Counter15m1", 4), ("rlts2Counter15m2", 5), ("rltmCounter15m0", 6), ("rltmCounter15m1", 7), ("rltmCounter15m2", 8), ("tlts1Counter15m0", 9), ("tlts1Counter15m1", 10), ("tlts1Counter15m2", 11), ("tltmCounter15m0", 12), ("tltmCounter15m1", 13), ("tltmCounter15m2", 14), ("rlts1Counter24h0", 15), ("rlts1Counter24h1", 16), ("rlts1Counter24h2", 17), ("rlts2Counter24h0", 18), ("rlts2Counter24h1", 19), ("rlts2Counter24h2", 20), ("rltmCounter24h0", 21), ("rltmCounter24h1", 22), ("rltmCounter24h2", 23), ("tlts1Counter24h0", 24), ("tlts1Counter24h1", 25), ("tlts1Counter24h2", 26), ("tltmCounter24h0", 27), ("tltmCounter24h1", 28), ("tltmCounter24h2", 29)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMStatus.setStatus('current')
xfExtRFPMView = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("extPmEnable", 1), ("extPmDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMView.setStatus('current')
xfRLExtRFPMCurrent24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 28), )
if mibBuilder.loadTexts: xfRLExtRFPMCurrent24hTable.setStatus('current')
xfRLExtRFPMCurrent24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 28, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLExtRFPMCurrent24hEntry.setStatus('current')
xfExtRFPMCurrent24hElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 28, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent24hElapsedTime.setStatus('current')
xfExtRFPMCurrent24hRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 86400), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent24hRLTS1.setStatus('current')
xfExtRFPMCurrent24hRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 86400), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent24hRLTS2.setStatus('current')
xfExtRFPMCurrent24hRLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 28, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent24hRLMin.setStatus('current')
xfExtRFPMCurrent24hRLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 28, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent24hRLMax.setStatus('current')
xfExtRFPMCurrent24hTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 28, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 86400), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent24hTLTS1.setStatus('current')
xfExtRFPMCurrent24hTLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 28, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent24hTLMin.setStatus('current')
xfExtRFPMCurrent24hTLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 28, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent24hTLMax.setStatus('current')
xfRLExtRFPMInterval24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 29), )
if mibBuilder.loadTexts: xfRLExtRFPMInterval24hTable.setStatus('current')
xfRLExtRFPMInterval24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 29, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLExtRFPMInterval24hEntry.setStatus('current')
xfExtRFPMInterval24hRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 86400), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval24hRLTS1.setStatus('current')
xfExtRFPMInterval24hRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 29, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 86400), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval24hRLTS2.setStatus('current')
xfExtRFPMInterval24hRLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval24hRLMin.setStatus('current')
xfExtRFPMInterval24hRLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 29, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval24hRLMax.setStatus('current')
xfExtRFPMInterval24hTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 29, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 86400), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval24hTLTS1.setStatus('current')
xfExtRFPMInterval24hTLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 29, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval24hTLMin.setStatus('current')
xfExtRFPMInterval24hTLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 29, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval24hTLMax.setStatus('current')
xfExtRFPMInterval24hValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 29, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval24hValidData.setStatus('current')
xfRLExtRFPMCurrent15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 30), )
if mibBuilder.loadTexts: xfRLExtRFPMCurrent15mTable.setStatus('current')
xfRLExtRFPMCurrent15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 30, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLExtRFPMCurrent15mEntry.setStatus('current')
xfExtRFPMCurrent15mElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 30, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent15mElapsedTime.setStatus('current')
xfExtRFPMCurrent15mRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 900), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent15mRLTS1.setStatus('current')
xfExtRFPMCurrent15mRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 900), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent15mRLTS2.setStatus('current')
xfExtRFPMCurrent15mRLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent15mRLMin.setStatus('current')
xfExtRFPMCurrent15mRLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 30, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent15mRLMax.setStatus('current')
xfExtRFPMCurrent15mTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 30, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 900), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent15mTLTS1.setStatus('current')
xfExtRFPMCurrent15mTLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 30, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent15mTLMin.setStatus('current')
xfExtRFPMCurrent15mTLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 30, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent15mTLMax.setStatus('current')
xfRLExtRFPMInterval15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 31), )
if mibBuilder.loadTexts: xfRLExtRFPMInterval15mTable.setStatus('current')
xfRLExtRFPMInterval15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 31, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval15mIntervalNumber"))
if mibBuilder.loadTexts: xfRLExtRFPMInterval15mEntry.setStatus('current')
xfExtRFPMInterval15mIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval15mIntervalNumber.setStatus('current')
xfExtRFPMInterval15mRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 900), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval15mRLTS1.setStatus('current')
xfExtRFPMInterval15mRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 900), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval15mRLTS2.setStatus('current')
xfExtRFPMInterval15mRLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 31, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval15mRLMin.setStatus('current')
xfExtRFPMInterval15mRLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 31, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval15mRLMax.setStatus('current')
xfExtRFPMInterval15mTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 31, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 900), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval15mTLTS1.setStatus('current')
xfExtRFPMInterval15mTLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 31, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval15mTLMin.setStatus('current')
xfExtRFPMInterval15mTLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 31, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval15mTLMax.setStatus('current')
xfExtRFPMInterval15mValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 31, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval15mValidData.setStatus('current')
xfRLExtRAUPMCurrent24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 32), )
if mibBuilder.loadTexts: xfRLExtRAUPMCurrent24hTable.setStatus('current')
xfRLExtRAUPMCurrent24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 32, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLExtRAUPMCurrent24hEntry.setStatus('current')
xfExtRAUPMCurrent24hElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 32, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMCurrent24hElapsedTime.setStatus('current')
xfExtRAUPMCurrent24hMSEMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 32, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMCurrent24hMSEMin.setStatus('current')
xfExtRAUPMCurrent24hMSEMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 32, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMCurrent24hMSEMax.setStatus('current')
xfExtRAUPMCurrent24hXPIMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 32, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMCurrent24hXPIMin.setStatus('current')
xfExtRAUPMCurrent24hXPIMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 32, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMCurrent24hXPIMax.setStatus('current')
xfRLExtRAUPMInterval24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 33), )
if mibBuilder.loadTexts: xfRLExtRAUPMInterval24hTable.setStatus('current')
xfRLExtRAUPMInterval24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 33, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLExtRAUPMInterval24hEntry.setStatus('current')
xfExtRAUPMInterval24hMSEMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 33, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMInterval24hMSEMin.setStatus('current')
xfExtRAUPMInterval24hMSEMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMInterval24hMSEMax.setStatus('current')
xfExtRAUPMInterval24hXPIMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMInterval24hXPIMin.setStatus('current')
xfExtRAUPMInterval24hXPIMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 33, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMInterval24hXPIMax.setStatus('current')
xfExtRAUPMInterval24hValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 33, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMInterval24hValidData.setStatus('current')
xfRLExtRAUPMCurrent15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 34), )
if mibBuilder.loadTexts: xfRLExtRAUPMCurrent15mTable.setStatus('current')
xfRLExtRAUPMCurrent15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 34, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLExtRAUPMCurrent15mEntry.setStatus('current')
xfExtRAUPMCurrent15mElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 34, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMCurrent15mElapsedTime.setStatus('current')
xfExtRAUPMCurrent15mMSEMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 34, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMCurrent15mMSEMin.setStatus('current')
xfExtRAUPMCurrent15mMSEMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 34, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMCurrent15mMSEMax.setStatus('current')
xfExtRAUPMCurrent15mXPIMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 34, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMCurrent15mXPIMin.setStatus('current')
xfExtRAUPMCurrent15mXPIMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 34, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMCurrent15mXPIMax.setStatus('current')
xfRLExtRAUPMInterval15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 35), )
if mibBuilder.loadTexts: xfRLExtRAUPMInterval15mTable.setStatus('current')
xfRLExtRAUPMInterval15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 35, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval15mIntervalNumber"))
if mibBuilder.loadTexts: xfRLExtRAUPMInterval15mEntry.setStatus('current')
xfExtRAUPMInterval15mIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMInterval15mIntervalNumber.setStatus('current')
xfExtRAUPMInterval15mMSEMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 35, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMInterval15mMSEMin.setStatus('current')
xfExtRAUPMInterval15mMSEMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 35, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMInterval15mMSEMax.setStatus('current')
xfExtRAUPMInterval15mXPIMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 35, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMInterval15mXPIMin.setStatus('current')
xfExtRAUPMInterval15mXPIMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 35, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMInterval15mXPIMax.setStatus('current')
xfExtRAUPMInterval15mValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 35, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMInterval15mValidData.setStatus('current')
xfRadioLinkPtpTerminalCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 2, 1))
xfRadioLinkPtpTerminalGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 2, 2))
xfRadioLinkPtpTerminalFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 2, 1, 1)).setObjects(("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRadioLinkPtpTerminalCompleteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xfRadioLinkPtpTerminalFullCompliance = xfRadioLinkPtpTerminalFullCompliance.setStatus('current')
xfRadioLinkPtpTerminalCompleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 2, 2, 1))
for _xfRadioLinkPtpTerminalCompleteGroup_obj in [[("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermId"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermType"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermProtection"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermCapacity"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermCapacityCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermModulation"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermModulationCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermRestore"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermAlarmSeverity"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermTrapEnable"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermAsPort"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermRemoteIdCheck"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermRemoteId"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermPreset"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermBerAlarmThreshold"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermFadeNotificationTimer"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermEquipmentProtectionIndex"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermSysName"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermChannelMode"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermChannelModeCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermTrafficAndDCN"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermFrameFormat"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermFrameFormatCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermDCNRadioConfiguration"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermDCNRadioCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermDCNLineConfiguration"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermDCNLineCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermFadeNotificationConfiguration"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermLineProtection"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermOutputPowerOperStatus"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermOutputPowerAdminStatus"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermAtpcCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermTimeElapsed"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermCurrentES"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermCurrentSES"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermCurrentBBE"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermCurrentUAS"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermCurrentBB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermPerfReset"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermTimeElapsedEnRLBExt"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRLProtectionMode"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRLProtectionRau1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRLProtectionRau2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRLActiveTxRadio"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRLSwitchOverReset"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRLSwitchRevertiveTx"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRLProtectionCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRLTxSwitchOverConfiguration"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRLLineProtectionStatus"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRLLineProtectionMode"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRADIORSAlarms"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRADIORSPerformanceAlarms"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold15mESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold15mSESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold15mBBEs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMResetThreshold15mESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMResetThreshold15mSESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMResetThreshold15mBBEs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold24hESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold24hSESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold24hBBEs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMView"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMStatus"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hTimeElapsed"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hSESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hBBEs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hUASs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hBBs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hSESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hBBEs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hUASs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hBBs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hRLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hRLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hTLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hTLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hMSEMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hMSEMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hXPIMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hXPIMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hValidData"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mElapsedTime"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mSESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mBBEs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mUASs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mBBs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mIntervalNumber"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mSESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mBBEs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mUASs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mBBs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mRLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mRLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mTLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mTLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mMSEMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mMSEMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mXPIMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mXPIMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mValidData"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermInterfaces"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermInterfacesCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermChannelModeOperStatus"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermXPICRestore"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermTribCapacityActual"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermTribCapacityDesired"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermBitPipeCapacity"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermRowIndex"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermCapabilitiesLastChange"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermActualRowIndex"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermMaxRowIndex"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermAdaptiveManualRowIndex"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermAdaptiveManualMode"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermSpectrumEfficiencyClass"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermSpectrumEfficiencyClassCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermChannelSpacing"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermChannelModulation"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermMaxTribCapacity"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermDCNCapacity"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermValidRow"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermMaxCapacity"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermFrameFormatType"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermFrameFormatRev"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermBerAlarmThresholdCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMSetThreshold15m"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMSetThreshold24h"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMResetThreshold15m"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMStatus"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMValidData"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h4QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h8QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h16QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h32QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h64QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h128QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h256QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h512QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h1024QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h4QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h8QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h16QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h32QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h64QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h128QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h256QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h512QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24hValidData"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h1024QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m4QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m8QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m16QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m32QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m64QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m128QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m256QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m512QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m1024QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15mIntervalNumber"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m4QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m8QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m16QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m32QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m64QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m128QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m256QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m512QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15mValidData"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m1024QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h4QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h8QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h16QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h32QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h64QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h128QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h256QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h512QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h1024QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h4QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h8QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h16QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h32QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h64QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h128QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h256QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h512QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h1024QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m4QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m8QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m16QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m32QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m64QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m128QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m256QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m512QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m1024QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m4QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m8QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m16QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m32QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m64QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m128QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m256QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m512QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m1024QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermIpAddress"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermProtectionCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermLineProtectionCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermTribAllocationActual"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermTribAllocationDesired"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermAutoRemoveLoopEnable"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermCapacityLicense"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermCapacityLicenseRange"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermMaxCapacityRange"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermMaxTribCapacityRange"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermFadingRates"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermFadingRatesCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermConfiguredBitPipeCapacity"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermTribCapacityConfigured"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermPacketMaxCapacity"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermPacketMinCapacity"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent15m0005dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent15m0510dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent15m1015dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent15m1520dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent15m2025dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent15m2530dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval15mIntervalNumber"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval15m0005dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval15m0510dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval15m1015dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval15m1520dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval15m2025dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval15m2530dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent24h0005dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent24h0510dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent24h1015dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent24h1520dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent24h2025dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent24h2530dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval24h0005dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval24h0510dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval24h1015dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval24h1520dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval24h2025dB")], [("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval24h2530dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainSetThreshold15m"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainSetThreshold24h"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainResetThreshold15m"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainStatus"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMRLTS1Threshold"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold15mRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMResetThreshold15mRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMRLTS2Threshold"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold15mRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMResetThreshold15mRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold15mRLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMResetThreshold15mRLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMTLTS1Threshold"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold15mTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMResetThreshold15mTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold15mTLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMResetThreshold15mTLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold24hRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold24hRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold24hRLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold24hTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold24hTLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hRLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hRLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hTLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hTLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hMSEMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hMSEMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hXPIMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hXPIMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mRLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mRLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mTLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mTLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mMSEMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mMSEMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mXPIMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mXPIMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mESR"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mSESR"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mBBER"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hESR"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hSESR"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hBBER"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMRLTS1Threshold"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMSetThreshold15mRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMResetThreshold15mRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMRLTS2Threshold"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMSetThreshold15mRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMResetThreshold15mRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMSetThreshold15mRLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMResetThreshold15mRLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMTLTS1Threshold"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMSetThreshold15mTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMResetThreshold15mTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMSetThreshold15mTLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMResetThreshold15mTLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMSetThreshold24hRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMSetThreshold24hRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMSetThreshold24hRLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMSetThreshold24hTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMSetThreshold24hTLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMStatus"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMView"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent24hElapsedTime"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent24hRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent24hRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent24hRLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent24hRLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent24hTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent24hTLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent24hTLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval24hRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval24hRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval24hRLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval24hRLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval24hTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval24hTLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval24hTLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval24hValidData"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent15mElapsedTime"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent15mRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent15mRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent15mRLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent15mRLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent15mTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent15mTLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent15mTLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval15mIntervalNumber"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval15mRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval15mRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval15mRLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval15mRLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval15mTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval15mTLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval15mTLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval15mValidData"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMCurrent24hElapsedTime"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMCurrent24hMSEMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMCurrent24hMSEMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMCurrent24hXPIMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMCurrent24hXPIMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval24hMSEMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval24hMSEMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval24hXPIMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval24hXPIMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval24hValidData"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMCurrent15mElapsedTime"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMCurrent15mMSEMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMCurrent15mMSEMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMCurrent15mXPIMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMCurrent15mXPIMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval15mIntervalNumber"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval15mMSEMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval15mMSEMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval15mXPIMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval15mXPIMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval15mValidData")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        xfRadioLinkPtpTerminalCompleteGroup = xfRadioLinkPtpTerminalCompleteGroup.setObjects(*_xfRadioLinkPtpTerminalCompleteGroup_obj)
    else:
        xfRadioLinkPtpTerminalCompleteGroup = xfRadioLinkPtpTerminalCompleteGroup.setObjects(*_xfRadioLinkPtpTerminalCompleteGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xfRadioLinkPtpTerminalCompleteGroup = xfRadioLinkPtpTerminalCompleteGroup.setStatus('current')
xfRadioLinkPtpTerminalObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 2, 2, 2)).setObjects(("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermSpectrumEfficiencyClassObsolete"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xfRadioLinkPtpTerminalObsoleteGroup = xfRadioLinkPtpTerminalObsoleteGroup.setStatus('obsolete')
mibBuilder.exportSymbols("XF-RADIOLINK-PTP-TERMINAL-MIB", xfPMInterval24hMSEMin=xfPMInterval24hMSEMin, xfRLPMAMInterval15mTable=xfRLPMAMInterval15mTable, xfTermDCNLineCapability=xfTermDCNLineCapability, xfPMAMInterval15m8QAM=xfPMAMInterval15m8QAM, xfRLPMSDCGainInterval24hEntry=xfRLPMSDCGainInterval24hEntry, xfPMSetThreshold24hRLTS1=xfPMSetThreshold24hRLTS1, xfTermInterfaces=xfTermInterfaces, xfPMAMInterval15m128QAMEnRLB=xfPMAMInterval15m128QAMEnRLB, xfExtRAUPMCurrent15mXPIMin=xfExtRAUPMCurrent15mXPIMin, xfRLPMSDCGainCurrent24hTable=xfRLPMSDCGainCurrent24hTable, xfPMCurrent15mTLTS1=xfPMCurrent15mTLTS1, xfRLPtpTerminalCapacityLicenseEntry=xfRLPtpTerminalCapacityLicenseEntry, xfExtRFPMRLTS2Threshold=xfExtRFPMRLTS2Threshold, xfPMCurrent24hRLTS1=xfPMCurrent24hRLTS1, xfRLPMConfigTable=xfRLPMConfigTable, xfPMCurrent24hTLMax=xfPMCurrent24hTLMax, xfRLLineProtectionStatus=xfRLLineProtectionStatus, xfTermDCNRadioConfiguration=xfTermDCNRadioConfiguration, xfPMResetThreshold15mESs=xfPMResetThreshold15mESs, xfExtRFPMResetThreshold15mRLTS1=xfExtRFPMResetThreshold15mRLTS1, xfPMAMInterval15m1024QAM=xfPMAMInterval15m1024QAM, xfPMSetThreshold24hESs=xfPMSetThreshold24hESs, xfPMAMCurrent15m4QAMEnRLB=xfPMAMCurrent15m4QAMEnRLB, xfPMSDCGainSetThreshold15m=xfPMSDCGainSetThreshold15m, xfPMInterval24hESs=xfPMInterval24hESs, xfRLExtRAUPMInterval15mTable=xfRLExtRAUPMInterval15mTable, xfRLPtpTerminalXTable=xfRLPtpTerminalXTable, xfTermProtection=xfTermProtection, xfTermMaxCapacityRange=xfTermMaxCapacityRange, xfRadioLinkPtpTerminalFullCompliance=xfRadioLinkPtpTerminalFullCompliance, xfExtRAUPMInterval24hXPIMin=xfExtRAUPMInterval24hXPIMin, xfRLPMSDCGainConfigTable=xfRLPMSDCGainConfigTable, xfExtRFPMTLTS1Threshold=xfExtRFPMTLTS1Threshold, xfExtRFPMSetThreshold15mRLTM=xfExtRFPMSetThreshold15mRLTM, xfRLPMInterval24hEntry=xfRLPMInterval24hEntry, xfPMSetThreshold15mTLTM=xfPMSetThreshold15mTLTM, xfPMInterval24hRLTS2=xfPMInterval24hRLTS2, xfPMInterval15mBBEs=xfPMInterval15mBBEs, xfPMAMInterval15m32QAM=xfPMAMInterval15m32QAM, xfPMSetThreshold15mSESs=xfPMSetThreshold15mSESs, xfTermPreset=xfTermPreset, xfRLPMInterval15mTable=xfRLPMInterval15mTable, xfPMInterval24hRLTS1=xfPMInterval24hRLTS1, xfPMCurrent15mRLMin=xfPMCurrent15mRLMin, xfTermChannelModeCapability=xfTermChannelModeCapability, xfPMCurrent15mXPIMin=xfPMCurrent15mXPIMin, xfRLPMCurrent15mTable=xfRLPMCurrent15mTable, xfTermAdaptiveManualRowIndex=xfTermAdaptiveManualRowIndex, xfPMAMInterval24h32QAM=xfPMAMInterval24h32QAM, xfRLLineProtectionTable=xfRLLineProtectionTable, xfPMResetThreshold15mRLTS1=xfPMResetThreshold15mRLTS1, xfTermInterfacesCapability=xfTermInterfacesCapability, xfRLPMCurrent24hEntry=xfRLPMCurrent24hEntry, xfPMAMCurrent15m16QAMEnRLB=xfPMAMCurrent15m16QAMEnRLB, xfPMAMResetThreshold15m=xfPMAMResetThreshold15m, xfPMAMInterval24h32QAMEnRLB=xfPMAMInterval24h32QAMEnRLB, xfPMSDCGainCurrent15m0005dB=xfPMSDCGainCurrent15m0005dB, xfTermBerAlarmThreshold=xfTermBerAlarmThreshold, xfRLProtectionRau2=xfRLProtectionRau2, xfTermTribAllocationActual=xfTermTribAllocationActual, xfPMAMInterval24h8QAM=xfPMAMInterval24h8QAM, xfPMInterval15mTLMin=xfPMInterval15mTLMin, xfExtRFPMResetThreshold15mRLTM=xfExtRFPMResetThreshold15mRLTM, xfExtRFPMInterval24hRLMin=xfExtRFPMInterval24hRLMin, xfTermSpectrumEfficiencyClassObsolete=xfTermSpectrumEfficiencyClassObsolete, xfPMSetThreshold15mESs=xfPMSetThreshold15mESs, xfPMCurrent15mBBER=xfPMCurrent15mBBER, xfPMAMCurrent24h512QAMEnRLB=xfPMAMCurrent24h512QAMEnRLB, xfPMCurrent24hXPIMax=xfPMCurrent24hXPIMax, xfTermDCNRadioCapability=xfTermDCNRadioCapability, xfPMCurrent15mSESR=xfPMCurrent15mSESR, xfRLPMConfigEntry=xfRLPMConfigEntry, xfRLExtRFPMCurrent15mTable=xfRLExtRFPMCurrent15mTable, xfExtRFPMSetThreshold15mTLTM=xfExtRFPMSetThreshold15mTLTM, xfPMInterval24hRLMax=xfPMInterval24hRLMax, xfExtRFPMSetThreshold24hRLTS2=xfExtRFPMSetThreshold24hRLTS2, xfPMCurrent24hRLMin=xfPMCurrent24hRLMin, TermModulation=TermModulation, xfPMInterval24hMSEMax=xfPMInterval24hMSEMax, xfPMSetThreshold15mRLTS1=xfPMSetThreshold15mRLTS1, xfRADIORSEntry=xfRADIORSEntry, xfPMSDCGainInterval24h0510dB=xfPMSDCGainInterval24h0510dB, xfPMCurrent24hTLTS1=xfPMCurrent24hTLTS1, xfExtRFPMInterval15mRLTS2=xfExtRFPMInterval15mRLTS2, xfRLPMAMInterval24hEntry=xfRLPMAMInterval24hEntry, xfPMAMCurrent24h4QAMEnRLB=xfPMAMCurrent24h4QAMEnRLB, xfRLExtRFPMInterval15mTable=xfRLExtRFPMInterval15mTable, xfPMCurrent15mBBEs=xfPMCurrent15mBBEs, xfRLExtRAUPMInterval15mEntry=xfRLExtRAUPMInterval15mEntry, xfPMSDCGainCurrent24h2025dB=xfPMSDCGainCurrent24h2025dB, xfExtRFPMInterval24hValidData=xfExtRFPMInterval24hValidData, xfExtRFPMInterval15mRLTS1=xfExtRFPMInterval15mRLTS1, xfExtRAUPMInterval15mMSEMax=xfExtRAUPMInterval15mMSEMax, xfPMCurrent15mMSEMin=xfPMCurrent15mMSEMin, xfExtRAUPMInterval15mXPIMin=xfExtRAUPMInterval15mXPIMin, xfRLExtRFPMConfigTable=xfRLExtRFPMConfigTable, xfExtRFPMCurrent24hRLMax=xfExtRFPMCurrent24hRLMax, xfPMInterval15mBBs=xfPMInterval15mBBs, xfPMSDCGainCurrent15m1015dB=xfPMSDCGainCurrent15m1015dB, xfPMSDCGainResetThreshold15m=xfPMSDCGainResetThreshold15m, xfPMCurrent15mElapsedTime=xfPMCurrent15mElapsedTime, xfPMView=xfPMView, xfPMTLTS1Threshold=xfPMTLTS1Threshold, xfPMAMCurrent24h4QAM=xfPMAMCurrent24h4QAM, xfExtRFPMSetThreshold24hTLTM=xfExtRFPMSetThreshold24hTLTM, xfTermCapability=xfTermCapability, xfTermCurrentBB=xfTermCurrentBB, xfTermCapacityLicenseRange=xfTermCapacityLicenseRange, xfExtRFPMInterval15mTLMax=xfExtRFPMInterval15mTLMax, xfPMAMCurrent15m256QAM=xfPMAMCurrent15m256QAM, xfRADIORSPerformanceAlarms=xfRADIORSPerformanceAlarms, xfPMAMInterval24h4QAM=xfPMAMInterval24h4QAM, xfPMAMInterval15m64QAM=xfPMAMInterval15m64QAM, xfPMAMInterval15m32QAMEnRLB=xfPMAMInterval15m32QAMEnRLB, xfPMAMSetThreshold24h=xfPMAMSetThreshold24h, xfPMInterval24hXPIMin=xfPMInterval24hXPIMin, xfPMInterval15mUASs=xfPMInterval15mUASs, xfPMAMInterval24h128QAMEnRLB=xfPMAMInterval24h128QAMEnRLB, xfTermPerfReset=xfTermPerfReset, xfRLSwitchOverReset=xfRLSwitchOverReset, xfRLPMAMCurrent15mEntry=xfRLPMAMCurrent15mEntry, xfPMAMCurrent15m64QAM=xfPMAMCurrent15m64QAM, xfPMAMInterval24h256QAM=xfPMAMInterval24h256QAM, xfTermRemoteId=xfTermRemoteId, xfExtRFPMSetThreshold24hTLTS1=xfExtRFPMSetThreshold24hTLTS1, xfExtRFPMCurrent15mTLTS1=xfExtRFPMCurrent15mTLTS1, xfTermMaxCapacity=xfTermMaxCapacity, xfExtRFPMResetThreshold15mTLTS1=xfExtRFPMResetThreshold15mTLTS1, xfExtRFPMInterval24hRLMax=xfExtRFPMInterval24hRLMax, xfRLProtectionEntry=xfRLProtectionEntry, xfRLPMSDCGainInterval24hTable=xfRLPMSDCGainInterval24hTable, xfPMCurrent15mESR=xfPMCurrent15mESR, xfRLPtpTerminalXEntry=xfRLPtpTerminalXEntry, xfTermConfiguredBitPipeCapacity=xfTermConfiguredBitPipeCapacity, xfTermLineProtectionCapability=xfTermLineProtectionCapability, xfRADIORSPerformanceTable=xfRADIORSPerformanceTable, xfPMCurrent15mTLMin=xfPMCurrent15mTLMin, xfTermChannelSpacing=xfTermChannelSpacing, xfRLPMInterval15mEntry=xfRLPMInterval15mEntry, xfExtRFPMCurrent15mRLTS1=xfExtRFPMCurrent15mRLTS1, xfPMCurrent24hMSEMin=xfPMCurrent24hMSEMin, xfPMAMInterval24h64QAM=xfPMAMInterval24h64QAM, xfTermAlarmSeverity=xfTermAlarmSeverity, xfTermCurrentES=xfTermCurrentES, xfPMAMCurrent24h64QAMEnRLB=xfPMAMCurrent24h64QAMEnRLB, xfPMSDCGainInterval24h2025dB=xfPMSDCGainInterval24h2025dB, xfRadioLinkPtpTerminalObsoleteGroup=xfRadioLinkPtpTerminalObsoleteGroup, xfPMAMCurrent24h8QAM=xfPMAMCurrent24h8QAM, xfRlPtpTerminalCapabilityEntry=xfRlPtpTerminalCapabilityEntry, xfPMAMCurrent15m16QAM=xfPMAMCurrent15m16QAM, xfPMSetThreshold24hTLTM=xfPMSetThreshold24hTLTM, xfPMAMCurrent24h256QAM=xfPMAMCurrent24h256QAM, xfPMAMCurrent24h256QAMEnRLB=xfPMAMCurrent24h256QAMEnRLB, xfPMInterval24hTLTS1=xfPMInterval24hTLTS1, xfPMCurrent24hSESs=xfPMCurrent24hSESs, xfPMAMCurrent24h128QAM=xfPMAMCurrent24h128QAM, xfTermTribCapacityDesired=xfTermTribCapacityDesired, xfExtRFPMSetThreshold15mTLTS1=xfExtRFPMSetThreshold15mTLTS1, xfPMAMInterval24h16QAM=xfPMAMInterval24h16QAM, TermOutputPowerStatus=TermOutputPowerStatus, xfPMAMInterval24h1024QAMEnRLB=xfPMAMInterval24h1024QAMEnRLB, xfRLExtRAUPMInterval24hEntry=xfRLExtRAUPMInterval24hEntry, xfTermTribCapacityActual=xfTermTribCapacityActual, xfRLPMInterval24hTable=xfRLPMInterval24hTable, xfPMInterval24hBBs=xfPMInterval24hBBs, xfPMInterval24hBBEs=xfPMInterval24hBBEs, xfPMSDCGainCurrent24h2530dB=xfPMSDCGainCurrent24h2530dB, xfTermPacketMinCapacity=xfTermPacketMinCapacity, xfRLExtRFPMInterval24hTable=xfRLExtRFPMInterval24hTable, xfPMAMCurrent15m1024QAM=xfPMAMCurrent15m1024QAM, xfPMAMCurrent15m128QAM=xfPMAMCurrent15m128QAM, xfPMAMInterval15m4QAM=xfPMAMInterval15m4QAM, xfRLProtectionRau1=xfRLProtectionRau1, xfTermSysName=xfTermSysName, xfRLPtpTerminalPerformanceEntry=xfRLPtpTerminalPerformanceEntry, xfPMCurrent15mTLMax=xfPMCurrent15mTLMax, xfTermBitPipeCapacity=xfTermBitPipeCapacity, xfPMInterval15mTLTS1=xfPMInterval15mTLTS1, xfPMAMInterval15m512QAMEnRLB=xfPMAMInterval15m512QAMEnRLB, xfExtRAUPMInterval15mMSEMin=xfExtRAUPMInterval15mMSEMin, xfTermAutoRemoveLoopEnable=xfTermAutoRemoveLoopEnable, xfRadioLinkPtpTerminalCompleteGroup=xfRadioLinkPtpTerminalCompleteGroup, xfRadioLinkPtpTerminalObjects=xfRadioLinkPtpTerminalObjects, xfTermModulation=xfTermModulation, xfTermSpectrumEfficiencyClass=xfTermSpectrumEfficiencyClass, xfPMAMInterval15m256QAM=xfPMAMInterval15m256QAM, xfExtRFPMSetThreshold15mRLTS1=xfExtRFPMSetThreshold15mRLTS1, xfPMInterval24hRLMin=xfPMInterval24hRLMin, ChannelMode=ChannelMode, xfTermChannelMode=xfTermChannelMode, xfPMCurrent15mRLTS2=xfPMCurrent15mRLTS2, xfTermMaxRowIndex=xfTermMaxRowIndex, TermRauSec=TermRauSec, xfRLPMSDCGainCurrent15mEntry=xfRLPMSDCGainCurrent15mEntry, xfRLExtRFPMConfigEntry=xfRLExtRFPMConfigEntry, xfPMInterval15mRLTS1=xfPMInterval15mRLTS1, xfPMInterval15mRLMin=xfPMInterval15mRLMin, xfPMInterval15mRLTS2=xfPMInterval15mRLTS2, xfExtRFPMResetThreshold15mTLTM=xfExtRFPMResetThreshold15mTLTM, xfTermAdaptiveManualMode=xfTermAdaptiveManualMode, xfRLExtRFPMInterval24hEntry=xfRLExtRFPMInterval24hEntry, xfPMAMValidData=xfPMAMValidData, xfExtRAUPMCurrent24hMSEMax=xfExtRAUPMCurrent24hMSEMax, xfPMAMCurrent15m512QAMEnRLB=xfPMAMCurrent15m512QAMEnRLB, xfPMInterval24hSESs=xfPMInterval24hSESs, xfExtRFPMInterval24hTLMax=xfExtRFPMInterval24hTLMax, xfPMSetThreshold24hRLTM=xfPMSetThreshold24hRLTM, xfRLPMCurrent24hTable=xfRLPMCurrent24hTable, xfRLPMAMCurrent24hEntry=xfRLPMAMCurrent24hEntry, xfTermTimeElapsed=xfTermTimeElapsed, xfPMSetThreshold24hTLTS1=xfPMSetThreshold24hTLTS1, xfPMInterval24hValidData=xfPMInterval24hValidData, xfRLExtRAUPMCurrent24hEntry=xfRLExtRAUPMCurrent24hEntry, xfRLPtpTerminalPerformanceTable=xfRLPtpTerminalPerformanceTable, xfPMCurrent15mRLMax=xfPMCurrent15mRLMax, xfExtRFPMCurrent24hRLTS2=xfExtRFPMCurrent24hRLTS2, TermAdaptiveManualMode=TermAdaptiveManualMode, xfPMInterval15mTLMax=xfPMInterval15mTLMax, xfExtRFPMInterval15mIntervalNumber=xfExtRFPMInterval15mIntervalNumber, xfTermCapabilitiesLastChange=xfTermCapabilitiesLastChange, xfPMSDCGainCurrent15m1520dB=xfPMSDCGainCurrent15m1520dB, xfPMRLTS2Threshold=xfPMRLTS2Threshold, xfPMAMCurrent15m32QAMEnRLB=xfPMAMCurrent15m32QAMEnRLB, xfTermRestore=xfTermRestore, xfPMResetThreshold15mRLTS2=xfPMResetThreshold15mRLTS2, xfPMCurrent24hTLMin=xfPMCurrent24hTLMin, xfTermChannelModulation=xfTermChannelModulation, xfExtRFPMCurrent24hElapsedTime=xfExtRFPMCurrent24hElapsedTime, xfExtRAUPMInterval15mXPIMax=xfExtRAUPMInterval15mXPIMax, xfTermActualRowIndex=xfTermActualRowIndex, xfTermCapacityLicense=xfTermCapacityLicense, xfRLPtpTerminalTable=xfRLPtpTerminalTable, xfPMAMInterval24h64QAMEnRLB=xfPMAMInterval24h64QAMEnRLB, xfPMResetThreshold15mTLTS1=xfPMResetThreshold15mTLTS1, xfPMCurrent24hTimeElapsed=xfPMCurrent24hTimeElapsed, xfPMAMInterval15m64QAMEnRLB=xfPMAMInterval15m64QAMEnRLB, xfTermFadeNotificationConfiguration=xfTermFadeNotificationConfiguration, xfExtRFPMSetThreshold24hRLTS1=xfExtRFPMSetThreshold24hRLTS1, xfTermMaxTribCapacity=xfTermMaxTribCapacity, xfPMInterval15mValidData=xfPMInterval15mValidData, xfTermFrameFormat=xfTermFrameFormat, xfRLPMAMConfigEntry=xfRLPMAMConfigEntry, xfRLExtRFPMCurrent15mEntry=xfRLExtRFPMCurrent15mEntry, xfPMAMInterval15m1024QAMEnRLB=xfPMAMInterval15m1024QAMEnRLB, xfPMCurrent24hBBs=xfPMCurrent24hBBs, xfTermTribCapacityConfigured=xfTermTribCapacityConfigured, xfPMCurrent24hXPIMin=xfPMCurrent24hXPIMin, xfPMSDCGainCurrent15m2025dB=xfPMSDCGainCurrent15m2025dB, xfTermValidRow=xfTermValidRow, xfExtRFPMCurrent24hTLMin=xfExtRFPMCurrent24hTLMin, xfPMInterval24hXPIMax=xfPMInterval24hXPIMax, xfExtRFPMCurrent24hRLTS1=xfExtRFPMCurrent24hRLTS1, xfRADIORSAlarms=xfRADIORSAlarms, xfPMCurrent15mXPIMax=xfPMCurrent15mXPIMax)
mibBuilder.exportSymbols("XF-RADIOLINK-PTP-TERMINAL-MIB", xfRLExtRFPMCurrent24hTable=xfRLExtRFPMCurrent24hTable, xfExtRFPMView=xfExtRFPMView, xfExtRAUPMCurrent24hXPIMin=xfExtRAUPMCurrent24hXPIMin, xfRLActiveTxRadio=xfRLActiveTxRadio, xfExtRFPMCurrent15mRLTS2=xfExtRFPMCurrent15mRLTS2, xfTermOutputPowerOperStatus=xfTermOutputPowerOperStatus, xfExtRFPMSetThreshold24hRLTM=xfExtRFPMSetThreshold24hRLTM, xfPMCurrent24hESR=xfPMCurrent24hESR, xfTermTrafficAndDCN=xfTermTrafficAndDCN, xfPMInterval15mXPIMin=xfPMInterval15mXPIMin, xfTermFadeNotificationTimer=xfTermFadeNotificationTimer, xfExtRFPMInterval15mTLMin=xfExtRFPMInterval15mTLMin, xfPMAMInterval24h1024QAM=xfPMAMInterval24h1024QAM, xfRLProtectionCapability=xfRLProtectionCapability, xfPMAMInterval15m8QAMEnRLB=xfPMAMInterval15m8QAMEnRLB, xfPMRLTS1Threshold=xfPMRLTS1Threshold, xfTermAtpcCapability=xfTermAtpcCapability, xfPMInterval24hTLMin=xfPMInterval24hTLMin, xfTermRowIndex=xfTermRowIndex, xfPMInterval24hUASs=xfPMInterval24hUASs, xfExtRAUPMInterval24hValidData=xfExtRAUPMInterval24hValidData, xfPMSetThreshold24hSESs=xfPMSetThreshold24hSESs, xfPMAMInterval15m16QAM=xfPMAMInterval15m16QAM, xfPMSDCGainInterval15m2530dB=xfPMSDCGainInterval15m2530dB, xfPMAMCurrent15m8QAM=xfPMAMCurrent15m8QAM, xfPMSDCGainCurrent24h1015dB=xfPMSDCGainCurrent24h1015dB, xfPMInterval15mRLMax=xfPMInterval15mRLMax, xfRadioLinkPtpTerminalCompliances=xfRadioLinkPtpTerminalCompliances, xfPMAMInterval15mValidData=xfPMAMInterval15mValidData, xfRLPMCurrent15mEntry=xfRLPMCurrent15mEntry, xfTermOutputPowerAdminStatus=xfTermOutputPowerAdminStatus, xfTermCapacityCapability=xfTermCapacityCapability, xfRLLineProtectionEntry=xfRLLineProtectionEntry, xfTermProtectionCapability=xfTermProtectionCapability, xfPMAMCurrent24h8QAMEnRLB=xfPMAMCurrent24h8QAMEnRLB, xfPMAMInterval24h8QAMEnRLB=xfPMAMInterval24h8QAMEnRLB, xfPMSDCGainInterval15mIntervalNumber=xfPMSDCGainInterval15mIntervalNumber, xfPMCurrent15mMSEMax=xfPMCurrent15mMSEMax, xfPMCurrent15mESs=xfPMCurrent15mESs, xfPMAMCurrent24h1024QAM=xfPMAMCurrent24h1024QAM, xfRADIORSPerformanceEntry=xfRADIORSPerformanceEntry, xfTermRemoteIdCheck=xfTermRemoteIdCheck, xfPMSDCGainCurrent24h0510dB=xfPMSDCGainCurrent24h0510dB, xfRADIORSTable=xfRADIORSTable, xfPMSDCGainInterval15m0005dB=xfPMSDCGainInterval15m0005dB, xfPMCurrent24hBBEs=xfPMCurrent24hBBEs, xfRadioLinkPtpTerminalGroups=xfRadioLinkPtpTerminalGroups, xfPMSetThreshold15mRLTM=xfPMSetThreshold15mRLTM, xfPMResetThreshold15mTLTM=xfPMResetThreshold15mTLTM, xfExtRFPMSetThreshold15mRLTS2=xfExtRFPMSetThreshold15mRLTS2, xfExtRFPMInterval15mTLTS1=xfExtRFPMInterval15mTLTS1, xfRLPtpTerminalOutputPowerTable=xfRLPtpTerminalOutputPowerTable, xfRlPtpTerminalCapabilityTable=xfRlPtpTerminalCapabilityTable, xfExtRFPMCurrent15mRLMin=xfExtRFPMCurrent15mRLMin, xfExtRFPMResetThreshold15mRLTS2=xfExtRFPMResetThreshold15mRLTS2, xfRLTxSwitchOverConfiguration=xfRLTxSwitchOverConfiguration, xfRadioLinkPtpTerminalMIB=xfRadioLinkPtpTerminalMIB, xfExtRAUPMCurrent24hElapsedTime=xfExtRAUPMCurrent24hElapsedTime, xfPMAMInterval24h256QAMEnRLB=xfPMAMInterval24h256QAMEnRLB, xfPMCurrent15mBBs=xfPMCurrent15mBBs, xfTermId=xfTermId, xfPMAMInterval15m4QAMEnRLB=xfPMAMInterval15m4QAMEnRLB, xfExtRFPMCurrent15mTLMax=xfExtRFPMCurrent15mTLMax, xfPMSDCGainInterval24h1520dB=xfPMSDCGainInterval24h1520dB, xfPMResetThreshold15mSESs=xfPMResetThreshold15mSESs, xfExtRAUPMInterval24hMSEMin=xfExtRAUPMInterval24hMSEMin, xfRLPMSDCGainInterval15mEntry=xfRLPMSDCGainInterval15mEntry, xfExtRAUPMCurrent15mXPIMax=xfExtRAUPMCurrent15mXPIMax, xfPMInterval15mESs=xfPMInterval15mESs, xfPMCurrent24hRLMax=xfPMCurrent24hRLMax, xfRLExtRAUPMCurrent15mTable=xfRLExtRAUPMCurrent15mTable, xfTermFrameFormatType=xfTermFrameFormatType, xfTermAsPort=xfTermAsPort, xfPMAMInterval15m256QAMEnRLB=xfPMAMInterval15m256QAMEnRLB, xfExtRFPMInterval24hTLTS1=xfExtRFPMInterval24hTLTS1, xfExtRFPMCurrent24hRLMin=xfExtRFPMCurrent24hRLMin, xfPMSetThreshold24hBBEs=xfPMSetThreshold24hBBEs, xfPMSetThreshold15mRLTS2=xfPMSetThreshold15mRLTS2, xfRLLineProtectionMode=xfRLLineProtectionMode, xfPMResetThreshold15mBBEs=xfPMResetThreshold15mBBEs, xfTermTrapEnable=xfTermTrapEnable, xfRLPMAMCurrent24hTable=xfRLPMAMCurrent24hTable, xfPMAMInterval24h512QAMEnRLB=xfPMAMInterval24h512QAMEnRLB, xfPMSDCGainInterval15m1015dB=xfPMSDCGainInterval15m1015dB, xfRLPMSDCGainCurrent24hEntry=xfRLPMSDCGainCurrent24hEntry, xfPMAMCurrent15m512QAM=xfPMAMCurrent15m512QAM, TermAutoRemoveLoopEnable=TermAutoRemoveLoopEnable, xfPMSetThreshold15mTLTS1=xfPMSetThreshold15mTLTS1, xfExtRFPMInterval15mValidData=xfExtRFPMInterval15mValidData, xfPMSDCGainCurrent24h0005dB=xfPMSDCGainCurrent24h0005dB, xfPMAMStatus=xfPMAMStatus, xfPMCurrent24hRLTS2=xfPMCurrent24hRLTS2, xfRLPMAMInterval15mEntry=xfRLPMAMInterval15mEntry, xfPMCurrent24hBBER=xfPMCurrent24hBBER, xfRLProtectionTable=xfRLProtectionTable, xfPMStatus=xfPMStatus, xfTermFrameFormatCapability=xfTermFrameFormatCapability, xfPMInterval15mSESs=xfPMInterval15mSESs, xfPMSDCGainInterval24h0005dB=xfPMSDCGainInterval24h0005dB, xfTermFrameFormatRev=xfTermFrameFormatRev, xfExtRAUPMCurrent15mElapsedTime=xfExtRAUPMCurrent15mElapsedTime, xfPMCurrent15mRLTS1=xfPMCurrent15mRLTS1, xfRLPMAMCurrent15mTable=xfRLPMAMCurrent15mTable, xfExtRFPMInterval15mRLMin=xfExtRFPMInterval15mRLMin, xfExtRFPMInterval15mRLMax=xfExtRFPMInterval15mRLMax, xfRLPtpTerminalCapacityLicenseTable=xfRLPtpTerminalCapacityLicenseTable, xfRLPMAMInterval24hTable=xfRLPMAMInterval24hTable, xfPMAMCurrent24h512QAM=xfPMAMCurrent24h512QAM, xfPMAMSetThreshold15m=xfPMAMSetThreshold15m, xfPMSDCGainCurrent15m0510dB=xfPMSDCGainCurrent15m0510dB, xfPMCurrent24hESs=xfPMCurrent24hESs, xfPMAMCurrent15m256QAMEnRLB=xfPMAMCurrent15m256QAMEnRLB, xfPMAMInterval15m16QAMEnRLB=xfPMAMInterval15m16QAMEnRLB, xfPMAMCurrent15m128QAMEnRLB=xfPMAMCurrent15m128QAMEnRLB, xfPMSDCGainSetThreshold24h=xfPMSDCGainSetThreshold24h, xfRLPMSDCGainCurrent15mTable=xfRLPMSDCGainCurrent15mTable, xfTermFadingRates=xfTermFadingRates, xfPMAMCurrent24h128QAMEnRLB=xfPMAMCurrent24h128QAMEnRLB, xfExtRFPMCurrent15mRLMax=xfExtRFPMCurrent15mRLMax, xfRLExtRAUPMInterval24hTable=xfRLExtRAUPMInterval24hTable, xfPMInterval15mIntervalNumber=xfPMInterval15mIntervalNumber, xfTermDCNCapacity=xfTermDCNCapacity, xfRLPMAMConfigTable=xfRLPMAMConfigTable, xfPMSDCGainInterval15m1520dB=xfPMSDCGainInterval15m1520dB, xfPMSDCGainCurrent24h1520dB=xfPMSDCGainCurrent24h1520dB, xfPMAMInterval24h16QAMEnRLB=xfPMAMInterval24h16QAMEnRLB, xfTermChannelModeOperStatus=xfTermChannelModeOperStatus, xfPMSetThreshold24hRLTS2=xfPMSetThreshold24hRLTS2, xfPMInterval15mMSEMin=xfPMInterval15mMSEMin, xfPMAMInterval24h128QAM=xfPMAMInterval24h128QAM, xfPMSDCGainInterval15m2025dB=xfPMSDCGainInterval15m2025dB, xfRLPMSDCGainConfigEntry=xfRLPMSDCGainConfigEntry, xfRLSwitchRevertiveTx=xfRLSwitchRevertiveTx, xfExtRFPMCurrent15mTLMin=xfExtRFPMCurrent15mTLMin, xfPMAMCurrent15m8QAMEnRLB=xfPMAMCurrent15m8QAMEnRLB, xfPMAMCurrent24h64QAM=xfPMAMCurrent24h64QAM, xfRadioLinkPtpTerminalConformance=xfRadioLinkPtpTerminalConformance, xfTermTimeElapsedEnRLBExt=xfTermTimeElapsedEnRLBExt, xfExtRFPMInterval24hRLTS2=xfExtRFPMInterval24hRLTS2, xfPMSDCGainCurrent15m2530dB=xfPMSDCGainCurrent15m2530dB, xfRLExtRFPMCurrent24hEntry=xfRLExtRFPMCurrent24hEntry, PYSNMP_MODULE_ID=xfRadioLinkPtpTerminalMIB, xfTermCapacity=xfTermCapacity, xfRLProtectionMode=xfRLProtectionMode, xfExtRAUPMInterval15mIntervalNumber=xfExtRAUPMInterval15mIntervalNumber, xfTermCurrentSES=xfTermCurrentSES, xfExtRFPMCurrent24hTLTS1=xfExtRFPMCurrent24hTLTS1, xfExtRAUPMCurrent24hMSEMin=xfExtRAUPMCurrent24hMSEMin, xfPMAMCurrent15m1024QAMEnRLB=xfPMAMCurrent15m1024QAMEnRLB, xfPMAMCurrent15m4QAM=xfPMAMCurrent15m4QAM, xfRLExtRAUPMCurrent15mEntry=xfRLExtRAUPMCurrent15mEntry, xfTermFadingRatesCapability=xfTermFadingRatesCapability, xfPMAMCurrent24h16QAM=xfPMAMCurrent24h16QAM, xfRLExtRAUPMCurrent24hTable=xfRLExtRAUPMCurrent24hTable, xfExtRAUPMCurrent15mMSEMax=xfExtRAUPMCurrent15mMSEMax, xfPMSDCGainInterval15m0510dB=xfPMSDCGainInterval15m0510dB, xfPMAMCurrent15m64QAMEnRLB=xfPMAMCurrent15m64QAMEnRLB, xfPMSDCGainInterval24h1015dB=xfPMSDCGainInterval24h1015dB, xfExtRFPMCurrent15mElapsedTime=xfExtRFPMCurrent15mElapsedTime, xfExtRFPMRLTS1Threshold=xfExtRFPMRLTS1Threshold, xfRLExtRFPMInterval15mEntry=xfRLExtRFPMInterval15mEntry, xfExtRAUPMInterval15mValidData=xfExtRAUPMInterval15mValidData, xfExtRAUPMCurrent24hXPIMax=xfExtRAUPMCurrent24hXPIMax, xfPMCurrent24hUASs=xfPMCurrent24hUASs, xfTermCurrentUAS=xfTermCurrentUAS, xfTermCurrentBBE=xfTermCurrentBBE, xfTermXPICRestore=xfTermXPICRestore, xfTermBerAlarmThresholdCapability=xfTermBerAlarmThresholdCapability, xfTermModulationCapability=xfTermModulationCapability, xfPMSDCGainStatus=xfPMSDCGainStatus, xfPMCurrent15mUASs=xfPMCurrent15mUASs, xfTermPacketMaxCapacity=xfTermPacketMaxCapacity, xfPMAMInterval15m512QAM=xfPMAMInterval15m512QAM, xfPMInterval24hTLMax=xfPMInterval24hTLMax, xfPMAMCurrent24h32QAMEnRLB=xfPMAMCurrent24h32QAMEnRLB, xfTermMaxTribCapacityRange=xfTermMaxTribCapacityRange, xfPMCurrent15mSESs=xfPMCurrent15mSESs, xfExtRFPMInterval24hRLTS1=xfExtRFPMInterval24hRLTS1, xfExtRFPMInterval24hTLMin=xfExtRFPMInterval24hTLMin, xfRLPtpTerminalOutputPowerEntry=xfRLPtpTerminalOutputPowerEntry, xfRLPMSDCGainInterval15mTable=xfRLPMSDCGainInterval15mTable, xfPMAMInterval24hValidData=xfPMAMInterval24hValidData, xfTermTribAllocationDesired=xfTermTribAllocationDesired, xfTermIpAddress=xfTermIpAddress, xfPMAMCurrent24h16QAMEnRLB=xfPMAMCurrent24h16QAMEnRLB, xfPMAMInterval24h4QAMEnRLB=xfPMAMInterval24h4QAMEnRLB, xfPMAMInterval15m128QAM=xfPMAMInterval15m128QAM, xfExtRAUPMInterval24hXPIMax=xfExtRAUPMInterval24hXPIMax, xfPMInterval15mXPIMax=xfPMInterval15mXPIMax, xfPMResetThreshold15mRLTM=xfPMResetThreshold15mRLTM, xfExtRAUPMInterval24hMSEMax=xfExtRAUPMInterval24hMSEMax, xfTermLineProtection=xfTermLineProtection, xfPMSDCGainInterval24h2530dB=xfPMSDCGainInterval24h2530dB, xfPMSetThreshold15mBBEs=xfPMSetThreshold15mBBEs, xfTermSpectrumEfficiencyClassCapability=xfTermSpectrumEfficiencyClassCapability, xfPMAMCurrent24h32QAM=xfPMAMCurrent24h32QAM, xfTermDCNLineConfiguration=xfTermDCNLineConfiguration, xfPMAMCurrent24h1024QAMEnRLB=xfPMAMCurrent24h1024QAMEnRLB, xfPMAMCurrent15m32QAM=xfPMAMCurrent15m32QAM, xfPMAMInterval24h512QAM=xfPMAMInterval24h512QAM, xfTermType=xfTermType, xfPMCurrent24hMSEMax=xfPMCurrent24hMSEMax, xfExtRFPMCurrent24hTLMax=xfExtRFPMCurrent24hTLMax, xfPMAMInterval15mIntervalNumber=xfPMAMInterval15mIntervalNumber, xfPMCurrent24hSESR=xfPMCurrent24hSESR, xfExtRAUPMCurrent15mMSEMin=xfExtRAUPMCurrent15mMSEMin, xfExtRFPMStatus=xfExtRFPMStatus, xfRLPtpTerminalEntry=xfRLPtpTerminalEntry, xfTermEquipmentProtectionIndex=xfTermEquipmentProtectionIndex, xfPMInterval15mMSEMax=xfPMInterval15mMSEMax)
